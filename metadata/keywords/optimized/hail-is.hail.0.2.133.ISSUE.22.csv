quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Testability,-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | tes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:10358,test,test,10358,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | tes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:10406,test,test,10406,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | te,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:10453,test,test,10453,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux -MD -MF build/ibs.d -MT build/ibs.o -c ibs.cpp; g++ -o build/Decoder.o -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux -MD -MF build/Decoder.d -MT build/Decoder.o -c Decoder.cpp; g++ -o build/Encoder.o -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux -MD -MF build/Encoder.d -MT build/Encoder.o -c Encoder.cpp; g++ -o build/Logging.o -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux -MD -MF build/Logging.d -MT build/Logging.o -c Logging.cpp; g++ -o build/NativeCodeSuite.o -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux -MD -MF build/NativeCodeSuite.d -MT build/NativeCodeSuite.o -c NativeCodeSuite.cp; p; g++ -o build/NativeLongFunc.o -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux -MD -MF build/NativeLongFunc.d -MT build/NativeLongFunc.o -c NativeLongFunc.cpp; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux -DALL_HEADER_CKSUM=2474410629UL -c NativeModule.cpp -o build/NativeModule.o; g++ -o build/NativePtr.o -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-stri,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221:11752,Log,Logging,11752,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221,1,['Log'],['Logging']
Testability,"-20190122-1311-0.2.4-d602a3d7472d.log; ```; 2019-01-22 13:11:20 SparkContext: INFO: Running Spark version 2.2.1; 2019-01-22 13:11:20 NativeCodeLoader: WARN: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; 2019-01-22 13:11:21 SparkContext: INFO: Submitted application: Hail; 2019-01-22 13:11:21 SparkContext: INFO: Spark configuration:; spark.app.name=Hail; spark.driver.extraClassPath=""/restricted/projectnb/genpro/github/hail/hail/build/libs/hail-all-spark.jar""; spark.driver.memory=5G; spark.executor.cores=4; spark.executor.extraClassPath=./hail-all-spark.jar; spark.executor.instances=10; spark.executor.memory=40G; spark.hadoop.io.compression.codecs=org.apache.hadoop.io.compress.DefaultCodec,is.hail.io.compress.BGzipCodec,is.hail.io.compress.BGzipCodecTbi,org.apache.hadoop.io.compress.GzipCodec; spark.hadoop.mapreduce.input.fileinputformat.split.minsize=1048576; spark.kryo.registrator=is.hail.kryo.HailKryoRegistrator; spark.logConf=true; spark.master=yarn; spark.repl.local.jars=file:/restricted/projectnb/genpro/github/hail/hail/build/libs/hail-all-spark.jar; spark.serializer=org.apache.spark.serializer.KryoSerializer; spark.submit.deployMode=client; spark.ui.showConsoleProgress=false; spark.yarn.appMasterEnv.LD_LIBRARY_PATH=/share/pkg/lz4/1.8.3/install/lib:/share/pkg/gcc/7.2.0/install/lib64:/share/pkg/gcc/7.2.0/install/lib; spark.yarn.appMasterEnv.PATH=/share/pkg/spark/2.2.1/install/bin:/share/pkg/lz4/1.8.3/install/bin:/share/pkg/gcc/7.2.0/install/bin:/usr3/bustaff/farrell/anaconda_envs/hail2/bin:/share/pkg/anaconda3/5.2.0/install/bin:/usr/java/default/jre/bin:/usr/java; /default/bin:/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/opt/dell/srvadmin/bin:/usr3/bustaff/farrell/bin:/usr3/bustaff/farrell/bin; spark.yarn.appMasterEnv.PYTHONPATH=/share/pkg/spark/2.2.1/install/python/lib/py4j-0.10.4-src.zip:/share/pkg/spark/2.2.1/install/python:/restricted/projectnb/genpro/github/hail/ha",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4733#issuecomment-456534587:1128,log,logConf,1128,https://hail.is,https://github.com/hail-is/hail/issues/4733#issuecomment-456534587,1,['log'],['logConf']
Testability,-46ff-9191-93b8c4589083/1890.suffix; at org.scalatest.Assertions.newAssertionFailedException(Assertions.scala:528); at org.scalatest.Assertions.newAssertionFailedException$(Assertions.scala:527); at org.scalatest.testng.TestNGSuite.newAssertionFailedException(TestNGSuite.scala:67); at org.scalatest.Assertions$AssertionsHelper.macroAssert(Assertions.scala:501); at is.hail.io.fs.FSSuite.largeDirectoryOperations(FSSuite.scala:445); at is.hail.io.fs.FSSuite.largeDirectoryOperations$(FSSuite.scala:430); at is.hail.io.fs.GoogleStorageFSSuite.largeDirectoryOperations(GoogleStorageFSSuite.scala:10); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:498); at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:136); at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:658); at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:219); at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50); at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:923); at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:192); at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128); at java.util.ArrayList.forEach(ArrayList.java:1259); at org.testng.TestRunner.privateRun(TestRunner.java:808); at org.testng.TestRunner.run(TestRunner.java:603); at org.testng.SuiteRunner.runTest(SuiteRunner.java:429); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:423); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:383); at org.testng.SuiteRunner.run(SuiteRunner.java:326); at org.test,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547:1219,test,testng,1219,https://hail.is,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547,1,['test'],['testng']
Testability,"-Changed the ""grm()"" method to return instances of KinshipMatrix. . -Added various export to file methods that were supported by GRM to the KinshipMatrix. -Modified GRM tests appropriately. . -Add RichIndexedRowMatrix implicit to the hail utils implicit file.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1681:169,test,tests,169,https://hail.is,https://github.com/hail-is/hail/pull/1681,1,['test'],['tests']
Testability,-Created KinshipMatrix class in Python; -Created method rrm() on VDS that returns a KinshipMatrix; -Modified lmmreg to take a KinshipMatrix instead of a VDS from which to compute kinship. ; -Created tests for KinshipMatrix.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1590:199,test,tests,199,https://hail.is,https://github.com/hail-is/hail/pull/1590,1,['test'],['tests']
Testability,-LMY%3D%2Fresult.10 response 200\n2022-11-15 20:31:30.522 ServiceBackend$: INFO: result 10 complete - 8157265 bytes\n2022-11-15 20:31:30.522 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.11\n2022-11-15 20:31:30.691 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.11 response 200\n2022-11-15 20:31:30.712 ServiceBackend$: INFO: result 11 complete - 8157265 bytes\n2022-11-15 20:31:30.712 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.12\n2022-11-15 20:31:30.968 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.12 response 200\n2022-11-15 20:31:30.990 ServiceBackend$: INFO: result 12 complete - 8157265 bytes\n2022-11-15 20:31:30.990 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.13\n2022-11-15 20:31:31.186 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.13 response 200\n2022-11-15 20:31:31.213 ServiceBackend$: INFO: result 13 complete - 8157265 bytes\n2022-11-15 20:31:31.213 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.14\n2022-11-15 20:31:31.518 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:42056,test,test-,42056,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.10\n2022-11-15 20:31:30.499 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.10 response 200\n2022-11-15 20:31:30.522 ServiceBackend$: INFO: result 10 complete - 8157265 bytes\n2022-11-15 20:31:30.522 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.11\n2022-11-15 20:31:30.691 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.11 response 200\n2022-11-15 20:31:30.712 ServiceBackend$: INFO: result 11 complete - 8157265 bytes\n2022-11-15 20:31:30.712 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.12\n2022-11-15 20:31:30.968 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.12 response 200\n2022-11-15 20:31:30.990 ServiceBackend$: INFO: result 12 complete - 8157265 bytes\n2022-11-15 20:31:30.990 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.13\n2022-11-15 20:31:31.186 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.13 response 200\n2022-11-15 20:31:31.213 ServiceBackend$: INFO: result 13 complete - 8157265 bytes\n2022-11-15 20:31:31.213 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:41840,test,test-,41840,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.11 response 200\n2022-11-15 20:31:30.712 ServiceBackend$: INFO: result 11 complete - 8157265 bytes\n2022-11-15 20:31:30.712 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.12\n2022-11-15 20:31:30.968 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.12 response 200\n2022-11-15 20:31:30.990 ServiceBackend$: INFO: result 12 complete - 8157265 bytes\n2022-11-15 20:31:30.990 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.13\n2022-11-15 20:31:31.186 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.13 response 200\n2022-11-15 20:31:31.213 ServiceBackend$: INFO: result 13 complete - 8157265 bytes\n2022-11-15 20:31:31.213 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.14\n2022-11-15 20:31:31.518 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.14 response 200\n2022-11-15 20:31:31.545 ServiceBackend$: INFO: result 14 complete - 8157265 bytes\n2022-11-15 20:31:31.545 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.15\n2022-11-15 20:31:31.742 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:42584,test,test-,42584,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.11\n2022-11-15 20:31:30.691 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.11 response 200\n2022-11-15 20:31:30.712 ServiceBackend$: INFO: result 11 complete - 8157265 bytes\n2022-11-15 20:31:30.712 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.12\n2022-11-15 20:31:30.968 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.12 response 200\n2022-11-15 20:31:30.990 ServiceBackend$: INFO: result 12 complete - 8157265 bytes\n2022-11-15 20:31:30.990 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.13\n2022-11-15 20:31:31.186 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.13 response 200\n2022-11-15 20:31:31.213 ServiceBackend$: INFO: result 13 complete - 8157265 bytes\n2022-11-15 20:31:31.213 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.14\n2022-11-15 20:31:31.518 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.14 response 200\n2022-11-15 20:31:31.545 ServiceBackend$: INFO: result 14 complete - 8157265 bytes\n2022-11-15 20:31:31.545 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:42368,test,test-,42368,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.12 response 200\n2022-11-15 20:31:30.990 ServiceBackend$: INFO: result 12 complete - 8157265 bytes\n2022-11-15 20:31:30.990 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.13\n2022-11-15 20:31:31.186 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.13 response 200\n2022-11-15 20:31:31.213 ServiceBackend$: INFO: result 13 complete - 8157265 bytes\n2022-11-15 20:31:31.213 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.14\n2022-11-15 20:31:31.518 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.14 response 200\n2022-11-15 20:31:31.545 ServiceBackend$: INFO: result 14 complete - 8157265 bytes\n2022-11-15 20:31:31.545 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.15\n2022-11-15 20:31:31.742 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.15 response 200\n2022-11-15 20:31:31.760 ServiceBackend$: INFO: result 15 complete - 8157265 bytes\n2022-11-15 20:31:31.761 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.16\n2022-11-15 20:31:31.925 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:43112,test,test-,43112,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.12\n2022-11-15 20:31:30.968 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.12 response 200\n2022-11-15 20:31:30.990 ServiceBackend$: INFO: result 12 complete - 8157265 bytes\n2022-11-15 20:31:30.990 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.13\n2022-11-15 20:31:31.186 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.13 response 200\n2022-11-15 20:31:31.213 ServiceBackend$: INFO: result 13 complete - 8157265 bytes\n2022-11-15 20:31:31.213 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.14\n2022-11-15 20:31:31.518 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.14 response 200\n2022-11-15 20:31:31.545 ServiceBackend$: INFO: result 14 complete - 8157265 bytes\n2022-11-15 20:31:31.545 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.15\n2022-11-15 20:31:31.742 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.15 response 200\n2022-11-15 20:31:31.760 ServiceBackend$: INFO: result 15 complete - 8157265 bytes\n2022-11-15 20:31:31.761 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:42896,test,test-,42896,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.13 response 200\n2022-11-15 20:31:31.213 ServiceBackend$: INFO: result 13 complete - 8157265 bytes\n2022-11-15 20:31:31.213 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.14\n2022-11-15 20:31:31.518 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.14 response 200\n2022-11-15 20:31:31.545 ServiceBackend$: INFO: result 14 complete - 8157265 bytes\n2022-11-15 20:31:31.545 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.15\n2022-11-15 20:31:31.742 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.15 response 200\n2022-11-15 20:31:31.760 ServiceBackend$: INFO: result 15 complete - 8157265 bytes\n2022-11-15 20:31:31.761 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.16\n2022-11-15 20:31:31.925 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.16 response 200\n2022-11-15 20:31:31.949 ServiceBackend$: INFO: result 16 complete - 8157265 bytes\n2022-11-15 20:31:31.950 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.17\n2022-11-15 20:31:32.168 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:43640,test,test-,43640,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.13\n2022-11-15 20:31:31.186 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.13 response 200\n2022-11-15 20:31:31.213 ServiceBackend$: INFO: result 13 complete - 8157265 bytes\n2022-11-15 20:31:31.213 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.14\n2022-11-15 20:31:31.518 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.14 response 200\n2022-11-15 20:31:31.545 ServiceBackend$: INFO: result 14 complete - 8157265 bytes\n2022-11-15 20:31:31.545 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.15\n2022-11-15 20:31:31.742 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.15 response 200\n2022-11-15 20:31:31.760 ServiceBackend$: INFO: result 15 complete - 8157265 bytes\n2022-11-15 20:31:31.761 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.16\n2022-11-15 20:31:31.925 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.16 response 200\n2022-11-15 20:31:31.949 ServiceBackend$: INFO: result 16 complete - 8157265 bytes\n2022-11-15 20:31:31.950 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:43424,test,test-,43424,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.14 response 200\n2022-11-15 20:31:31.545 ServiceBackend$: INFO: result 14 complete - 8157265 bytes\n2022-11-15 20:31:31.545 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.15\n2022-11-15 20:31:31.742 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.15 response 200\n2022-11-15 20:31:31.760 ServiceBackend$: INFO: result 15 complete - 8157265 bytes\n2022-11-15 20:31:31.761 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.16\n2022-11-15 20:31:31.925 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.16 response 200\n2022-11-15 20:31:31.949 ServiceBackend$: INFO: result 16 complete - 8157265 bytes\n2022-11-15 20:31:31.950 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.17\n2022-11-15 20:31:32.168 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.17 response 200\n2022-11-15 20:31:34.006 ServiceBackend$: INFO: result 17 complete - 8157265 bytes\n2022-11-15 20:31:34.007 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.18\n2022-11-15 20:31:34.200 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:44168,test,test-,44168,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.14\n2022-11-15 20:31:31.518 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.14 response 200\n2022-11-15 20:31:31.545 ServiceBackend$: INFO: result 14 complete - 8157265 bytes\n2022-11-15 20:31:31.545 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.15\n2022-11-15 20:31:31.742 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.15 response 200\n2022-11-15 20:31:31.760 ServiceBackend$: INFO: result 15 complete - 8157265 bytes\n2022-11-15 20:31:31.761 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.16\n2022-11-15 20:31:31.925 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.16 response 200\n2022-11-15 20:31:31.949 ServiceBackend$: INFO: result 16 complete - 8157265 bytes\n2022-11-15 20:31:31.950 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.17\n2022-11-15 20:31:32.168 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.17 response 200\n2022-11-15 20:31:34.006 ServiceBackend$: INFO: result 17 complete - 8157265 bytes\n2022-11-15 20:31:34.007 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:43952,test,test-,43952,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.15 response 200\n2022-11-15 20:31:31.760 ServiceBackend$: INFO: result 15 complete - 8157265 bytes\n2022-11-15 20:31:31.761 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.16\n2022-11-15 20:31:31.925 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.16 response 200\n2022-11-15 20:31:31.949 ServiceBackend$: INFO: result 16 complete - 8157265 bytes\n2022-11-15 20:31:31.950 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.17\n2022-11-15 20:31:32.168 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.17 response 200\n2022-11-15 20:31:34.006 ServiceBackend$: INFO: result 17 complete - 8157265 bytes\n2022-11-15 20:31:34.007 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.18\n2022-11-15 20:31:34.200 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.18 response 200\n2022-11-15 20:31:34.236 ServiceBackend$: INFO: result 18 complete - 8157265 bytes\n2022-11-15 20:31:34.236 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.19\n2022-11-15 20:31:34.397 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:44696,test,test-,44696,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.15\n2022-11-15 20:31:31.742 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.15 response 200\n2022-11-15 20:31:31.760 ServiceBackend$: INFO: result 15 complete - 8157265 bytes\n2022-11-15 20:31:31.761 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.16\n2022-11-15 20:31:31.925 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.16 response 200\n2022-11-15 20:31:31.949 ServiceBackend$: INFO: result 16 complete - 8157265 bytes\n2022-11-15 20:31:31.950 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.17\n2022-11-15 20:31:32.168 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.17 response 200\n2022-11-15 20:31:34.006 ServiceBackend$: INFO: result 17 complete - 8157265 bytes\n2022-11-15 20:31:34.007 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.18\n2022-11-15 20:31:34.200 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.18 response 200\n2022-11-15 20:31:34.236 ServiceBackend$: INFO: result 18 complete - 8157265 bytes\n2022-11-15 20:31:34.236 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:44480,test,test-,44480,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.16 response 200\n2022-11-15 20:31:31.949 ServiceBackend$: INFO: result 16 complete - 8157265 bytes\n2022-11-15 20:31:31.950 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.17\n2022-11-15 20:31:32.168 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.17 response 200\n2022-11-15 20:31:34.006 ServiceBackend$: INFO: result 17 complete - 8157265 bytes\n2022-11-15 20:31:34.007 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.18\n2022-11-15 20:31:34.200 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.18 response 200\n2022-11-15 20:31:34.236 ServiceBackend$: INFO: result 18 complete - 8157265 bytes\n2022-11-15 20:31:34.236 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.19\n2022-11-15 20:31:34.397 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.19 response 200\n2022-11-15 20:31:34.417 ServiceBackend$: INFO: result 19 complete - 8157265 bytes\n2022-11-15 20:31:34.417 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.20\n2022-11-15 20:31:34.653 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:45224,test,test-,45224,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.16\n2022-11-15 20:31:31.925 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.16 response 200\n2022-11-15 20:31:31.949 ServiceBackend$: INFO: result 16 complete - 8157265 bytes\n2022-11-15 20:31:31.950 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.17\n2022-11-15 20:31:32.168 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.17 response 200\n2022-11-15 20:31:34.006 ServiceBackend$: INFO: result 17 complete - 8157265 bytes\n2022-11-15 20:31:34.007 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.18\n2022-11-15 20:31:34.200 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.18 response 200\n2022-11-15 20:31:34.236 ServiceBackend$: INFO: result 18 complete - 8157265 bytes\n2022-11-15 20:31:34.236 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.19\n2022-11-15 20:31:34.397 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.19 response 200\n2022-11-15 20:31:34.417 ServiceBackend$: INFO: result 19 complete - 8157265 bytes\n2022-11-15 20:31:34.417 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:45008,test,test-,45008,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.17 response 200\n2022-11-15 20:31:34.006 ServiceBackend$: INFO: result 17 complete - 8157265 bytes\n2022-11-15 20:31:34.007 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.18\n2022-11-15 20:31:34.200 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.18 response 200\n2022-11-15 20:31:34.236 ServiceBackend$: INFO: result 18 complete - 8157265 bytes\n2022-11-15 20:31:34.236 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.19\n2022-11-15 20:31:34.397 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.19 response 200\n2022-11-15 20:31:34.417 ServiceBackend$: INFO: result 19 complete - 8157265 bytes\n2022-11-15 20:31:34.417 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.20\n2022-11-15 20:31:34.653 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.20 response 200\n2022-11-15 20:31:34.672 ServiceBackend$: INFO: result 20 complete - 8157265 bytes\n2022-11-15 20:31:34.672 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.21\n2022-11-15 20:31:34.852 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:45752,test,test-,45752,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.17\n2022-11-15 20:31:32.168 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.17 response 200\n2022-11-15 20:31:34.006 ServiceBackend$: INFO: result 17 complete - 8157265 bytes\n2022-11-15 20:31:34.007 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.18\n2022-11-15 20:31:34.200 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.18 response 200\n2022-11-15 20:31:34.236 ServiceBackend$: INFO: result 18 complete - 8157265 bytes\n2022-11-15 20:31:34.236 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.19\n2022-11-15 20:31:34.397 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.19 response 200\n2022-11-15 20:31:34.417 ServiceBackend$: INFO: result 19 complete - 8157265 bytes\n2022-11-15 20:31:34.417 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.20\n2022-11-15 20:31:34.653 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.20 response 200\n2022-11-15 20:31:34.672 ServiceBackend$: INFO: result 20 complete - 8157265 bytes\n2022-11-15 20:31:34.672 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:45536,test,test-,45536,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.18 response 200\n2022-11-15 20:31:34.236 ServiceBackend$: INFO: result 18 complete - 8157265 bytes\n2022-11-15 20:31:34.236 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.19\n2022-11-15 20:31:34.397 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.19 response 200\n2022-11-15 20:31:34.417 ServiceBackend$: INFO: result 19 complete - 8157265 bytes\n2022-11-15 20:31:34.417 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.20\n2022-11-15 20:31:34.653 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.20 response 200\n2022-11-15 20:31:34.672 ServiceBackend$: INFO: result 20 complete - 8157265 bytes\n2022-11-15 20:31:34.672 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.21\n2022-11-15 20:31:34.852 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.21 response 200\n2022-11-15 20:31:34.872 ServiceBackend$: INFO: result 21 complete - 8157265 bytes\n2022-11-15 20:31:34.873 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.22\n2022-11-15 20:31:35.103 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:46280,test,test-,46280,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.18\n2022-11-15 20:31:34.200 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.18 response 200\n2022-11-15 20:31:34.236 ServiceBackend$: INFO: result 18 complete - 8157265 bytes\n2022-11-15 20:31:34.236 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.19\n2022-11-15 20:31:34.397 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.19 response 200\n2022-11-15 20:31:34.417 ServiceBackend$: INFO: result 19 complete - 8157265 bytes\n2022-11-15 20:31:34.417 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.20\n2022-11-15 20:31:34.653 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.20 response 200\n2022-11-15 20:31:34.672 ServiceBackend$: INFO: result 20 complete - 8157265 bytes\n2022-11-15 20:31:34.672 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.21\n2022-11-15 20:31:34.852 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.21 response 200\n2022-11-15 20:31:34.872 ServiceBackend$: INFO: result 21 complete - 8157265 bytes\n2022-11-15 20:31:34.873 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:46064,test,test-,46064,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.19 response 200\n2022-11-15 20:31:34.417 ServiceBackend$: INFO: result 19 complete - 8157265 bytes\n2022-11-15 20:31:34.417 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.20\n2022-11-15 20:31:34.653 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.20 response 200\n2022-11-15 20:31:34.672 ServiceBackend$: INFO: result 20 complete - 8157265 bytes\n2022-11-15 20:31:34.672 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.21\n2022-11-15 20:31:34.852 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.21 response 200\n2022-11-15 20:31:34.872 ServiceBackend$: INFO: result 21 complete - 8157265 bytes\n2022-11-15 20:31:34.873 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.22\n2022-11-15 20:31:35.103 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.22 response 200\n2022-11-15 20:31:35.122 ServiceBackend$: INFO: result 22 complete - 8157265 bytes\n2022-11-15 20:31:35.122 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.23\n2022-11-15 20:31:35.354 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:46808,test,test-,46808,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.19\n2022-11-15 20:31:34.397 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.19 response 200\n2022-11-15 20:31:34.417 ServiceBackend$: INFO: result 19 complete - 8157265 bytes\n2022-11-15 20:31:34.417 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.20\n2022-11-15 20:31:34.653 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.20 response 200\n2022-11-15 20:31:34.672 ServiceBackend$: INFO: result 20 complete - 8157265 bytes\n2022-11-15 20:31:34.672 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.21\n2022-11-15 20:31:34.852 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.21 response 200\n2022-11-15 20:31:34.872 ServiceBackend$: INFO: result 21 complete - 8157265 bytes\n2022-11-15 20:31:34.873 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.22\n2022-11-15 20:31:35.103 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.22 response 200\n2022-11-15 20:31:35.122 ServiceBackend$: INFO: result 22 complete - 8157265 bytes\n2022-11-15 20:31:35.122 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:46592,test,test-,46592,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.20 response 200\n2022-11-15 20:31:34.672 ServiceBackend$: INFO: result 20 complete - 8157265 bytes\n2022-11-15 20:31:34.672 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.21\n2022-11-15 20:31:34.852 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.21 response 200\n2022-11-15 20:31:34.872 ServiceBackend$: INFO: result 21 complete - 8157265 bytes\n2022-11-15 20:31:34.873 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.22\n2022-11-15 20:31:35.103 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.22 response 200\n2022-11-15 20:31:35.122 ServiceBackend$: INFO: result 22 complete - 8157265 bytes\n2022-11-15 20:31:35.122 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.23\n2022-11-15 20:31:35.354 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.23 response 200\n2022-11-15 20:31:35.373 ServiceBackend$: INFO: result 23 complete - 8157265 bytes\n2022-11-15 20:31:35.374 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.24\n2022-11-15 20:31:35.570 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:47336,test,test-,47336,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.20\n2022-11-15 20:31:34.653 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.20 response 200\n2022-11-15 20:31:34.672 ServiceBackend$: INFO: result 20 complete - 8157265 bytes\n2022-11-15 20:31:34.672 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.21\n2022-11-15 20:31:34.852 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.21 response 200\n2022-11-15 20:31:34.872 ServiceBackend$: INFO: result 21 complete - 8157265 bytes\n2022-11-15 20:31:34.873 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.22\n2022-11-15 20:31:35.103 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.22 response 200\n2022-11-15 20:31:35.122 ServiceBackend$: INFO: result 22 complete - 8157265 bytes\n2022-11-15 20:31:35.122 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.23\n2022-11-15 20:31:35.354 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.23 response 200\n2022-11-15 20:31:35.373 ServiceBackend$: INFO: result 23 complete - 8157265 bytes\n2022-11-15 20:31:35.374 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:47120,test,test-,47120,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.21 response 200\n2022-11-15 20:31:34.872 ServiceBackend$: INFO: result 21 complete - 8157265 bytes\n2022-11-15 20:31:34.873 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.22\n2022-11-15 20:31:35.103 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.22 response 200\n2022-11-15 20:31:35.122 ServiceBackend$: INFO: result 22 complete - 8157265 bytes\n2022-11-15 20:31:35.122 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.23\n2022-11-15 20:31:35.354 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.23 response 200\n2022-11-15 20:31:35.373 ServiceBackend$: INFO: result 23 complete - 8157265 bytes\n2022-11-15 20:31:35.374 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.24\n2022-11-15 20:31:35.570 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.24 response 200\n2022-11-15 20:31:35.601 ServiceBackend$: INFO: result 24 complete - 8157265 bytes\n2022-11-15 20:31:35.601 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.25\n2022-11-15 20:31:35.762 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:47864,test,test-,47864,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.21\n2022-11-15 20:31:34.852 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.21 response 200\n2022-11-15 20:31:34.872 ServiceBackend$: INFO: result 21 complete - 8157265 bytes\n2022-11-15 20:31:34.873 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.22\n2022-11-15 20:31:35.103 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.22 response 200\n2022-11-15 20:31:35.122 ServiceBackend$: INFO: result 22 complete - 8157265 bytes\n2022-11-15 20:31:35.122 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.23\n2022-11-15 20:31:35.354 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.23 response 200\n2022-11-15 20:31:35.373 ServiceBackend$: INFO: result 23 complete - 8157265 bytes\n2022-11-15 20:31:35.374 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.24\n2022-11-15 20:31:35.570 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.24 response 200\n2022-11-15 20:31:35.601 ServiceBackend$: INFO: result 24 complete - 8157265 bytes\n2022-11-15 20:31:35.601 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:47648,test,test-,47648,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.22 response 200\n2022-11-15 20:31:35.122 ServiceBackend$: INFO: result 22 complete - 8157265 bytes\n2022-11-15 20:31:35.122 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.23\n2022-11-15 20:31:35.354 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.23 response 200\n2022-11-15 20:31:35.373 ServiceBackend$: INFO: result 23 complete - 8157265 bytes\n2022-11-15 20:31:35.374 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.24\n2022-11-15 20:31:35.570 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.24 response 200\n2022-11-15 20:31:35.601 ServiceBackend$: INFO: result 24 complete - 8157265 bytes\n2022-11-15 20:31:35.601 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.25\n2022-11-15 20:31:35.762 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.25 response 200\n2022-11-15 20:31:35.782 ServiceBackend$: INFO: result 25 complete - 8157265 bytes\n2022-11-15 20:31:35.782 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.26\n2022-11-15 20:31:35.961 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:48392,test,test-,48392,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.22\n2022-11-15 20:31:35.103 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.22 response 200\n2022-11-15 20:31:35.122 ServiceBackend$: INFO: result 22 complete - 8157265 bytes\n2022-11-15 20:31:35.122 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.23\n2022-11-15 20:31:35.354 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.23 response 200\n2022-11-15 20:31:35.373 ServiceBackend$: INFO: result 23 complete - 8157265 bytes\n2022-11-15 20:31:35.374 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.24\n2022-11-15 20:31:35.570 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.24 response 200\n2022-11-15 20:31:35.601 ServiceBackend$: INFO: result 24 complete - 8157265 bytes\n2022-11-15 20:31:35.601 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.25\n2022-11-15 20:31:35.762 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.25 response 200\n2022-11-15 20:31:35.782 ServiceBackend$: INFO: result 25 complete - 8157265 bytes\n2022-11-15 20:31:35.782 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:48176,test,test-,48176,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.23 response 200\n2022-11-15 20:31:35.373 ServiceBackend$: INFO: result 23 complete - 8157265 bytes\n2022-11-15 20:31:35.374 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.24\n2022-11-15 20:31:35.570 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.24 response 200\n2022-11-15 20:31:35.601 ServiceBackend$: INFO: result 24 complete - 8157265 bytes\n2022-11-15 20:31:35.601 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.25\n2022-11-15 20:31:35.762 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.25 response 200\n2022-11-15 20:31:35.782 ServiceBackend$: INFO: result 25 complete - 8157265 bytes\n2022-11-15 20:31:35.782 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.26\n2022-11-15 20:31:35.961 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.26 response 200\n2022-11-15 20:31:36.046 ServiceBackend$: INFO: result 26 complete - 8157265 bytes\n2022-11-15 20:31:36.046 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.27\n2022-11-15 20:31:36.217 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:48920,test,test-,48920,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.23\n2022-11-15 20:31:35.354 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.23 response 200\n2022-11-15 20:31:35.373 ServiceBackend$: INFO: result 23 complete - 8157265 bytes\n2022-11-15 20:31:35.374 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.24\n2022-11-15 20:31:35.570 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.24 response 200\n2022-11-15 20:31:35.601 ServiceBackend$: INFO: result 24 complete - 8157265 bytes\n2022-11-15 20:31:35.601 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.25\n2022-11-15 20:31:35.762 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.25 response 200\n2022-11-15 20:31:35.782 ServiceBackend$: INFO: result 25 complete - 8157265 bytes\n2022-11-15 20:31:35.782 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.26\n2022-11-15 20:31:35.961 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.26 response 200\n2022-11-15 20:31:36.046 ServiceBackend$: INFO: result 26 complete - 8157265 bytes\n2022-11-15 20:31:36.046 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:48704,test,test-,48704,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.24 response 200\n2022-11-15 20:31:35.601 ServiceBackend$: INFO: result 24 complete - 8157265 bytes\n2022-11-15 20:31:35.601 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.25\n2022-11-15 20:31:35.762 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.25 response 200\n2022-11-15 20:31:35.782 ServiceBackend$: INFO: result 25 complete - 8157265 bytes\n2022-11-15 20:31:35.782 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.26\n2022-11-15 20:31:35.961 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.26 response 200\n2022-11-15 20:31:36.046 ServiceBackend$: INFO: result 26 complete - 8157265 bytes\n2022-11-15 20:31:36.046 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.27\n2022-11-15 20:31:36.217 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.27 response 200\n2022-11-15 20:31:36.238 ServiceBackend$: INFO: result 27 complete - 8157265 bytes\n2022-11-15 20:31:36.238 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.28\n2022-11-15 20:31:36.449 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:49448,test,test-,49448,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.24\n2022-11-15 20:31:35.570 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.24 response 200\n2022-11-15 20:31:35.601 ServiceBackend$: INFO: result 24 complete - 8157265 bytes\n2022-11-15 20:31:35.601 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.25\n2022-11-15 20:31:35.762 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.25 response 200\n2022-11-15 20:31:35.782 ServiceBackend$: INFO: result 25 complete - 8157265 bytes\n2022-11-15 20:31:35.782 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.26\n2022-11-15 20:31:35.961 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.26 response 200\n2022-11-15 20:31:36.046 ServiceBackend$: INFO: result 26 complete - 8157265 bytes\n2022-11-15 20:31:36.046 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.27\n2022-11-15 20:31:36.217 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.27 response 200\n2022-11-15 20:31:36.238 ServiceBackend$: INFO: result 27 complete - 8157265 bytes\n2022-11-15 20:31:36.238 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:49232,test,test-,49232,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.25 response 200\n2022-11-15 20:31:35.782 ServiceBackend$: INFO: result 25 complete - 8157265 bytes\n2022-11-15 20:31:35.782 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.26\n2022-11-15 20:31:35.961 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.26 response 200\n2022-11-15 20:31:36.046 ServiceBackend$: INFO: result 26 complete - 8157265 bytes\n2022-11-15 20:31:36.046 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.27\n2022-11-15 20:31:36.217 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.27 response 200\n2022-11-15 20:31:36.238 ServiceBackend$: INFO: result 27 complete - 8157265 bytes\n2022-11-15 20:31:36.238 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.28\n2022-11-15 20:31:36.449 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.28 response 200\n2022-11-15 20:31:36.469 ServiceBackend$: INFO: result 28 complete - 8157265 bytes\n2022-11-15 20:31:36.469 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.29\n2022-11-15 20:31:36.695 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:49976,test,test-,49976,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.25\n2022-11-15 20:31:35.762 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.25 response 200\n2022-11-15 20:31:35.782 ServiceBackend$: INFO: result 25 complete - 8157265 bytes\n2022-11-15 20:31:35.782 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.26\n2022-11-15 20:31:35.961 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.26 response 200\n2022-11-15 20:31:36.046 ServiceBackend$: INFO: result 26 complete - 8157265 bytes\n2022-11-15 20:31:36.046 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.27\n2022-11-15 20:31:36.217 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.27 response 200\n2022-11-15 20:31:36.238 ServiceBackend$: INFO: result 27 complete - 8157265 bytes\n2022-11-15 20:31:36.238 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.28\n2022-11-15 20:31:36.449 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.28 response 200\n2022-11-15 20:31:36.469 ServiceBackend$: INFO: result 28 complete - 8157265 bytes\n2022-11-15 20:31:36.469 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:49760,test,test-,49760,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.26 response 200\n2022-11-15 20:31:36.046 ServiceBackend$: INFO: result 26 complete - 8157265 bytes\n2022-11-15 20:31:36.046 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.27\n2022-11-15 20:31:36.217 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.27 response 200\n2022-11-15 20:31:36.238 ServiceBackend$: INFO: result 27 complete - 8157265 bytes\n2022-11-15 20:31:36.238 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.28\n2022-11-15 20:31:36.449 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.28 response 200\n2022-11-15 20:31:36.469 ServiceBackend$: INFO: result 28 complete - 8157265 bytes\n2022-11-15 20:31:36.469 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.29\n2022-11-15 20:31:36.695 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.29 response 200\n2022-11-15 20:31:36.732 ServiceBackend$: INFO: result 29 complete - 8157265 bytes\n2022-11-15 20:31:36.732 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.30\n2022-11-15 20:31:36.902 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:50504,test,test-,50504,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.26\n2022-11-15 20:31:35.961 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.26 response 200\n2022-11-15 20:31:36.046 ServiceBackend$: INFO: result 26 complete - 8157265 bytes\n2022-11-15 20:31:36.046 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.27\n2022-11-15 20:31:36.217 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.27 response 200\n2022-11-15 20:31:36.238 ServiceBackend$: INFO: result 27 complete - 8157265 bytes\n2022-11-15 20:31:36.238 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.28\n2022-11-15 20:31:36.449 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.28 response 200\n2022-11-15 20:31:36.469 ServiceBackend$: INFO: result 28 complete - 8157265 bytes\n2022-11-15 20:31:36.469 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.29\n2022-11-15 20:31:36.695 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.29 response 200\n2022-11-15 20:31:36.732 ServiceBackend$: INFO: result 29 complete - 8157265 bytes\n2022-11-15 20:31:36.732 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:50288,test,test-,50288,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.27 response 200\n2022-11-15 20:31:36.238 ServiceBackend$: INFO: result 27 complete - 8157265 bytes\n2022-11-15 20:31:36.238 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.28\n2022-11-15 20:31:36.449 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.28 response 200\n2022-11-15 20:31:36.469 ServiceBackend$: INFO: result 28 complete - 8157265 bytes\n2022-11-15 20:31:36.469 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.29\n2022-11-15 20:31:36.695 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.29 response 200\n2022-11-15 20:31:36.732 ServiceBackend$: INFO: result 29 complete - 8157265 bytes\n2022-11-15 20:31:36.732 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.30\n2022-11-15 20:31:36.902 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.30 response 200\n2022-11-15 20:31:36.930 ServiceBackend$: INFO: result 30 complete - 8157265 bytes\n2022-11-15 20:31:36.931 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.31\n2022-11-15 20:31:37.122 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:51032,test,test-,51032,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.27\n2022-11-15 20:31:36.217 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.27 response 200\n2022-11-15 20:31:36.238 ServiceBackend$: INFO: result 27 complete - 8157265 bytes\n2022-11-15 20:31:36.238 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.28\n2022-11-15 20:31:36.449 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.28 response 200\n2022-11-15 20:31:36.469 ServiceBackend$: INFO: result 28 complete - 8157265 bytes\n2022-11-15 20:31:36.469 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.29\n2022-11-15 20:31:36.695 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.29 response 200\n2022-11-15 20:31:36.732 ServiceBackend$: INFO: result 29 complete - 8157265 bytes\n2022-11-15 20:31:36.732 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.30\n2022-11-15 20:31:36.902 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.30 response 200\n2022-11-15 20:31:36.930 ServiceBackend$: INFO: result 30 complete - 8157265 bytes\n2022-11-15 20:31:36.931 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:50816,test,test-,50816,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.28 response 200\n2022-11-15 20:31:36.469 ServiceBackend$: INFO: result 28 complete - 8157265 bytes\n2022-11-15 20:31:36.469 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.29\n2022-11-15 20:31:36.695 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.29 response 200\n2022-11-15 20:31:36.732 ServiceBackend$: INFO: result 29 complete - 8157265 bytes\n2022-11-15 20:31:36.732 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.30\n2022-11-15 20:31:36.902 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.30 response 200\n2022-11-15 20:31:36.930 ServiceBackend$: INFO: result 30 complete - 8157265 bytes\n2022-11-15 20:31:36.931 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.31\n2022-11-15 20:31:37.122 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.31 response 200\n2022-11-15 20:31:37.146 ServiceBackend$: INFO: result 31 complete - 8157265 bytes\n2022-11-15 20:31:37.146 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.32\n2022-11-15 20:31:37.413 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:51560,test,test-,51560,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.28\n2022-11-15 20:31:36.449 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.28 response 200\n2022-11-15 20:31:36.469 ServiceBackend$: INFO: result 28 complete - 8157265 bytes\n2022-11-15 20:31:36.469 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.29\n2022-11-15 20:31:36.695 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.29 response 200\n2022-11-15 20:31:36.732 ServiceBackend$: INFO: result 29 complete - 8157265 bytes\n2022-11-15 20:31:36.732 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.30\n2022-11-15 20:31:36.902 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.30 response 200\n2022-11-15 20:31:36.930 ServiceBackend$: INFO: result 30 complete - 8157265 bytes\n2022-11-15 20:31:36.931 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.31\n2022-11-15 20:31:37.122 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.31 response 200\n2022-11-15 20:31:37.146 ServiceBackend$: INFO: result 31 complete - 8157265 bytes\n2022-11-15 20:31:37.146 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:51344,test,test-,51344,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.29 response 200\n2022-11-15 20:31:36.732 ServiceBackend$: INFO: result 29 complete - 8157265 bytes\n2022-11-15 20:31:36.732 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.30\n2022-11-15 20:31:36.902 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.30 response 200\n2022-11-15 20:31:36.930 ServiceBackend$: INFO: result 30 complete - 8157265 bytes\n2022-11-15 20:31:36.931 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.31\n2022-11-15 20:31:37.122 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.31 response 200\n2022-11-15 20:31:37.146 ServiceBackend$: INFO: result 31 complete - 8157265 bytes\n2022-11-15 20:31:37.146 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.32\n2022-11-15 20:31:37.413 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.32 response 200\n2022-11-15 20:31:37.434 ServiceBackend$: INFO: result 32 complete - 8157265 bytes\n2022-11-15 20:31:37.434 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.33\n2022-11-15 20:31:37.610 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:52088,test,test-,52088,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.29\n2022-11-15 20:31:36.695 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.29 response 200\n2022-11-15 20:31:36.732 ServiceBackend$: INFO: result 29 complete - 8157265 bytes\n2022-11-15 20:31:36.732 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.30\n2022-11-15 20:31:36.902 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.30 response 200\n2022-11-15 20:31:36.930 ServiceBackend$: INFO: result 30 complete - 8157265 bytes\n2022-11-15 20:31:36.931 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.31\n2022-11-15 20:31:37.122 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.31 response 200\n2022-11-15 20:31:37.146 ServiceBackend$: INFO: result 31 complete - 8157265 bytes\n2022-11-15 20:31:37.146 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.32\n2022-11-15 20:31:37.413 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.32 response 200\n2022-11-15 20:31:37.434 ServiceBackend$: INFO: result 32 complete - 8157265 bytes\n2022-11-15 20:31:37.434 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:51872,test,test-,51872,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.30 response 200\n2022-11-15 20:31:36.930 ServiceBackend$: INFO: result 30 complete - 8157265 bytes\n2022-11-15 20:31:36.931 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.31\n2022-11-15 20:31:37.122 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.31 response 200\n2022-11-15 20:31:37.146 ServiceBackend$: INFO: result 31 complete - 8157265 bytes\n2022-11-15 20:31:37.146 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.32\n2022-11-15 20:31:37.413 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.32 response 200\n2022-11-15 20:31:37.434 ServiceBackend$: INFO: result 32 complete - 8157265 bytes\n2022-11-15 20:31:37.434 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.33\n2022-11-15 20:31:37.610 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.33 response 200\n2022-11-15 20:31:37.637 ServiceBackend$: INFO: result 33 complete - 8157265 bytes\n2022-11-15 20:31:37.637 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.34\n2022-11-15 20:31:37.848 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:52616,test,test-,52616,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.30\n2022-11-15 20:31:36.902 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.30 response 200\n2022-11-15 20:31:36.930 ServiceBackend$: INFO: result 30 complete - 8157265 bytes\n2022-11-15 20:31:36.931 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.31\n2022-11-15 20:31:37.122 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.31 response 200\n2022-11-15 20:31:37.146 ServiceBackend$: INFO: result 31 complete - 8157265 bytes\n2022-11-15 20:31:37.146 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.32\n2022-11-15 20:31:37.413 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.32 response 200\n2022-11-15 20:31:37.434 ServiceBackend$: INFO: result 32 complete - 8157265 bytes\n2022-11-15 20:31:37.434 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.33\n2022-11-15 20:31:37.610 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.33 response 200\n2022-11-15 20:31:37.637 ServiceBackend$: INFO: result 33 complete - 8157265 bytes\n2022-11-15 20:31:37.637 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:52400,test,test-,52400,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.31 response 200\n2022-11-15 20:31:37.146 ServiceBackend$: INFO: result 31 complete - 8157265 bytes\n2022-11-15 20:31:37.146 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.32\n2022-11-15 20:31:37.413 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.32 response 200\n2022-11-15 20:31:37.434 ServiceBackend$: INFO: result 32 complete - 8157265 bytes\n2022-11-15 20:31:37.434 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.33\n2022-11-15 20:31:37.610 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.33 response 200\n2022-11-15 20:31:37.637 ServiceBackend$: INFO: result 33 complete - 8157265 bytes\n2022-11-15 20:31:37.637 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.34\n2022-11-15 20:31:37.848 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.34 response 200\n2022-11-15 20:31:37.870 ServiceBackend$: INFO: result 34 complete - 8157265 bytes\n2022-11-15 20:31:37.870 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.35\n2022-11-15 20:31:38.077 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:53144,test,test-,53144,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.31\n2022-11-15 20:31:37.122 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.31 response 200\n2022-11-15 20:31:37.146 ServiceBackend$: INFO: result 31 complete - 8157265 bytes\n2022-11-15 20:31:37.146 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.32\n2022-11-15 20:31:37.413 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.32 response 200\n2022-11-15 20:31:37.434 ServiceBackend$: INFO: result 32 complete - 8157265 bytes\n2022-11-15 20:31:37.434 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.33\n2022-11-15 20:31:37.610 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.33 response 200\n2022-11-15 20:31:37.637 ServiceBackend$: INFO: result 33 complete - 8157265 bytes\n2022-11-15 20:31:37.637 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.34\n2022-11-15 20:31:37.848 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.34 response 200\n2022-11-15 20:31:37.870 ServiceBackend$: INFO: result 34 complete - 8157265 bytes\n2022-11-15 20:31:37.870 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:52928,test,test-,52928,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.32 response 200\n2022-11-15 20:31:37.434 ServiceBackend$: INFO: result 32 complete - 8157265 bytes\n2022-11-15 20:31:37.434 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.33\n2022-11-15 20:31:37.610 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.33 response 200\n2022-11-15 20:31:37.637 ServiceBackend$: INFO: result 33 complete - 8157265 bytes\n2022-11-15 20:31:37.637 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.34\n2022-11-15 20:31:37.848 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.34 response 200\n2022-11-15 20:31:37.870 ServiceBackend$: INFO: result 34 complete - 8157265 bytes\n2022-11-15 20:31:37.870 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.35\n2022-11-15 20:31:38.077 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.35 response 200\n2022-11-15 20:31:38.170 ServiceBackend$: INFO: result 35 complete - 8157265 bytes\n2022-11-15 20:31:38.170 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.36\n2022-11-15 20:31:38.305 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:53672,test,test-,53672,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.32\n2022-11-15 20:31:37.413 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.32 response 200\n2022-11-15 20:31:37.434 ServiceBackend$: INFO: result 32 complete - 8157265 bytes\n2022-11-15 20:31:37.434 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.33\n2022-11-15 20:31:37.610 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.33 response 200\n2022-11-15 20:31:37.637 ServiceBackend$: INFO: result 33 complete - 8157265 bytes\n2022-11-15 20:31:37.637 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.34\n2022-11-15 20:31:37.848 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.34 response 200\n2022-11-15 20:31:37.870 ServiceBackend$: INFO: result 34 complete - 8157265 bytes\n2022-11-15 20:31:37.870 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.35\n2022-11-15 20:31:38.077 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.35 response 200\n2022-11-15 20:31:38.170 ServiceBackend$: INFO: result 35 complete - 8157265 bytes\n2022-11-15 20:31:38.170 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:53456,test,test-,53456,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.33 response 200\n2022-11-15 20:31:37.637 ServiceBackend$: INFO: result 33 complete - 8157265 bytes\n2022-11-15 20:31:37.637 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.34\n2022-11-15 20:31:37.848 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.34 response 200\n2022-11-15 20:31:37.870 ServiceBackend$: INFO: result 34 complete - 8157265 bytes\n2022-11-15 20:31:37.870 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.35\n2022-11-15 20:31:38.077 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.35 response 200\n2022-11-15 20:31:38.170 ServiceBackend$: INFO: result 35 complete - 8157265 bytes\n2022-11-15 20:31:38.170 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.36\n2022-11-15 20:31:38.305 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.36 response 200\n2022-11-15 20:31:38.359 ServiceBackend$: INFO: result 36 complete - 8157265 bytes\n2022-11-15 20:31:38.359 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.37\n2022-11-15 20:31:38.531 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:54200,test,test-,54200,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.33\n2022-11-15 20:31:37.610 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.33 response 200\n2022-11-15 20:31:37.637 ServiceBackend$: INFO: result 33 complete - 8157265 bytes\n2022-11-15 20:31:37.637 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.34\n2022-11-15 20:31:37.848 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.34 response 200\n2022-11-15 20:31:37.870 ServiceBackend$: INFO: result 34 complete - 8157265 bytes\n2022-11-15 20:31:37.870 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.35\n2022-11-15 20:31:38.077 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.35 response 200\n2022-11-15 20:31:38.170 ServiceBackend$: INFO: result 35 complete - 8157265 bytes\n2022-11-15 20:31:38.170 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.36\n2022-11-15 20:31:38.305 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.36 response 200\n2022-11-15 20:31:38.359 ServiceBackend$: INFO: result 36 complete - 8157265 bytes\n2022-11-15 20:31:38.359 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:53984,test,test-,53984,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.34 response 200\n2022-11-15 20:31:37.870 ServiceBackend$: INFO: result 34 complete - 8157265 bytes\n2022-11-15 20:31:37.870 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.35\n2022-11-15 20:31:38.077 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.35 response 200\n2022-11-15 20:31:38.170 ServiceBackend$: INFO: result 35 complete - 8157265 bytes\n2022-11-15 20:31:38.170 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.36\n2022-11-15 20:31:38.305 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.36 response 200\n2022-11-15 20:31:38.359 ServiceBackend$: INFO: result 36 complete - 8157265 bytes\n2022-11-15 20:31:38.359 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.37\n2022-11-15 20:31:38.531 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.37 response 200\n2022-11-15 20:31:38.559 ServiceBackend$: INFO: result 37 complete - 8157265 bytes\n2022-11-15 20:31:38.559 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.38\n2022-11-15 20:31:38.829 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:54728,test,test-,54728,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.34\n2022-11-15 20:31:37.848 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.34 response 200\n2022-11-15 20:31:37.870 ServiceBackend$: INFO: result 34 complete - 8157265 bytes\n2022-11-15 20:31:37.870 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.35\n2022-11-15 20:31:38.077 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.35 response 200\n2022-11-15 20:31:38.170 ServiceBackend$: INFO: result 35 complete - 8157265 bytes\n2022-11-15 20:31:38.170 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.36\n2022-11-15 20:31:38.305 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.36 response 200\n2022-11-15 20:31:38.359 ServiceBackend$: INFO: result 36 complete - 8157265 bytes\n2022-11-15 20:31:38.359 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.37\n2022-11-15 20:31:38.531 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.37 response 200\n2022-11-15 20:31:38.559 ServiceBackend$: INFO: result 37 complete - 8157265 bytes\n2022-11-15 20:31:38.559 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:54512,test,test-,54512,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.35 response 200\n2022-11-15 20:31:38.170 ServiceBackend$: INFO: result 35 complete - 8157265 bytes\n2022-11-15 20:31:38.170 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.36\n2022-11-15 20:31:38.305 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.36 response 200\n2022-11-15 20:31:38.359 ServiceBackend$: INFO: result 36 complete - 8157265 bytes\n2022-11-15 20:31:38.359 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.37\n2022-11-15 20:31:38.531 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.37 response 200\n2022-11-15 20:31:38.559 ServiceBackend$: INFO: result 37 complete - 8157265 bytes\n2022-11-15 20:31:38.559 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.38\n2022-11-15 20:31:38.829 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.38 response 200\n2022-11-15 20:31:38.856 ServiceBackend$: INFO: result 38 complete - 8157265 bytes\n2022-11-15 20:31:38.856 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.39\n2022-11-15 20:31:38.999 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:55256,test,test-,55256,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.35\n2022-11-15 20:31:38.077 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.35 response 200\n2022-11-15 20:31:38.170 ServiceBackend$: INFO: result 35 complete - 8157265 bytes\n2022-11-15 20:31:38.170 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.36\n2022-11-15 20:31:38.305 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.36 response 200\n2022-11-15 20:31:38.359 ServiceBackend$: INFO: result 36 complete - 8157265 bytes\n2022-11-15 20:31:38.359 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.37\n2022-11-15 20:31:38.531 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.37 response 200\n2022-11-15 20:31:38.559 ServiceBackend$: INFO: result 37 complete - 8157265 bytes\n2022-11-15 20:31:38.559 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.38\n2022-11-15 20:31:38.829 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.38 response 200\n2022-11-15 20:31:38.856 ServiceBackend$: INFO: result 38 complete - 8157265 bytes\n2022-11-15 20:31:38.856 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:55040,test,test-,55040,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.36 response 200\n2022-11-15 20:31:38.359 ServiceBackend$: INFO: result 36 complete - 8157265 bytes\n2022-11-15 20:31:38.359 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.37\n2022-11-15 20:31:38.531 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.37 response 200\n2022-11-15 20:31:38.559 ServiceBackend$: INFO: result 37 complete - 8157265 bytes\n2022-11-15 20:31:38.559 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.38\n2022-11-15 20:31:38.829 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.38 response 200\n2022-11-15 20:31:38.856 ServiceBackend$: INFO: result 38 complete - 8157265 bytes\n2022-11-15 20:31:38.856 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.39\n2022-11-15 20:31:38.999 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.39 response 200\n2022-11-15 20:31:39.031 ServiceBackend$: INFO: result 39 complete - 8157265 bytes\n2022-11-15 20:31:39.031 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.40\n2022-11-15 20:31:39.200 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:55784,test,test-,55784,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.36\n2022-11-15 20:31:38.305 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.36 response 200\n2022-11-15 20:31:38.359 ServiceBackend$: INFO: result 36 complete - 8157265 bytes\n2022-11-15 20:31:38.359 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.37\n2022-11-15 20:31:38.531 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.37 response 200\n2022-11-15 20:31:38.559 ServiceBackend$: INFO: result 37 complete - 8157265 bytes\n2022-11-15 20:31:38.559 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.38\n2022-11-15 20:31:38.829 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.38 response 200\n2022-11-15 20:31:38.856 ServiceBackend$: INFO: result 38 complete - 8157265 bytes\n2022-11-15 20:31:38.856 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.39\n2022-11-15 20:31:38.999 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.39 response 200\n2022-11-15 20:31:39.031 ServiceBackend$: INFO: result 39 complete - 8157265 bytes\n2022-11-15 20:31:39.031 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:55568,test,test-,55568,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.37 response 200\n2022-11-15 20:31:38.559 ServiceBackend$: INFO: result 37 complete - 8157265 bytes\n2022-11-15 20:31:38.559 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.38\n2022-11-15 20:31:38.829 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.38 response 200\n2022-11-15 20:31:38.856 ServiceBackend$: INFO: result 38 complete - 8157265 bytes\n2022-11-15 20:31:38.856 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.39\n2022-11-15 20:31:38.999 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.39 response 200\n2022-11-15 20:31:39.031 ServiceBackend$: INFO: result 39 complete - 8157265 bytes\n2022-11-15 20:31:39.031 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.40\n2022-11-15 20:31:39.200 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.40 response 200\n2022-11-15 20:31:39.251 ServiceBackend$: INFO: result 40 complete - 8157265 bytes\n2022-11-15 20:31:39.252 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.41\n2022-11-15 20:31:39.439 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:56312,test,test-,56312,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.37\n2022-11-15 20:31:38.531 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.37 response 200\n2022-11-15 20:31:38.559 ServiceBackend$: INFO: result 37 complete - 8157265 bytes\n2022-11-15 20:31:38.559 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.38\n2022-11-15 20:31:38.829 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.38 response 200\n2022-11-15 20:31:38.856 ServiceBackend$: INFO: result 38 complete - 8157265 bytes\n2022-11-15 20:31:38.856 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.39\n2022-11-15 20:31:38.999 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.39 response 200\n2022-11-15 20:31:39.031 ServiceBackend$: INFO: result 39 complete - 8157265 bytes\n2022-11-15 20:31:39.031 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.40\n2022-11-15 20:31:39.200 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.40 response 200\n2022-11-15 20:31:39.251 ServiceBackend$: INFO: result 40 complete - 8157265 bytes\n2022-11-15 20:31:39.252 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:56096,test,test-,56096,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.38 response 200\n2022-11-15 20:31:38.856 ServiceBackend$: INFO: result 38 complete - 8157265 bytes\n2022-11-15 20:31:38.856 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.39\n2022-11-15 20:31:38.999 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.39 response 200\n2022-11-15 20:31:39.031 ServiceBackend$: INFO: result 39 complete - 8157265 bytes\n2022-11-15 20:31:39.031 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.40\n2022-11-15 20:31:39.200 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.40 response 200\n2022-11-15 20:31:39.251 ServiceBackend$: INFO: result 40 complete - 8157265 bytes\n2022-11-15 20:31:39.252 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.41\n2022-11-15 20:31:39.439 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.41 response 200\n2022-11-15 20:31:39.460 ServiceBackend$: INFO: result 41 complete - 8157265 bytes\n2022-11-15 20:31:39.461 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.42\n2022-11-15 20:31:39.669 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:56840,test,test-,56840,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.38\n2022-11-15 20:31:38.829 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.38 response 200\n2022-11-15 20:31:38.856 ServiceBackend$: INFO: result 38 complete - 8157265 bytes\n2022-11-15 20:31:38.856 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.39\n2022-11-15 20:31:38.999 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.39 response 200\n2022-11-15 20:31:39.031 ServiceBackend$: INFO: result 39 complete - 8157265 bytes\n2022-11-15 20:31:39.031 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.40\n2022-11-15 20:31:39.200 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.40 response 200\n2022-11-15 20:31:39.251 ServiceBackend$: INFO: result 40 complete - 8157265 bytes\n2022-11-15 20:31:39.252 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.41\n2022-11-15 20:31:39.439 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.41 response 200\n2022-11-15 20:31:39.460 ServiceBackend$: INFO: result 41 complete - 8157265 bytes\n2022-11-15 20:31:39.461 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:56624,test,test-,56624,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.39 response 200\n2022-11-15 20:31:39.031 ServiceBackend$: INFO: result 39 complete - 8157265 bytes\n2022-11-15 20:31:39.031 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.40\n2022-11-15 20:31:39.200 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.40 response 200\n2022-11-15 20:31:39.251 ServiceBackend$: INFO: result 40 complete - 8157265 bytes\n2022-11-15 20:31:39.252 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.41\n2022-11-15 20:31:39.439 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.41 response 200\n2022-11-15 20:31:39.460 ServiceBackend$: INFO: result 41 complete - 8157265 bytes\n2022-11-15 20:31:39.461 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.42\n2022-11-15 20:31:39.669 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.42 response 200\n2022-11-15 20:31:39.693 ServiceBackend$: INFO: result 42 complete - 8157265 bytes\n2022-11-15 20:31:39.693 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.43\n2022-11-15 20:31:39.938 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:57368,test,test-,57368,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.39\n2022-11-15 20:31:38.999 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.39 response 200\n2022-11-15 20:31:39.031 ServiceBackend$: INFO: result 39 complete - 8157265 bytes\n2022-11-15 20:31:39.031 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.40\n2022-11-15 20:31:39.200 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.40 response 200\n2022-11-15 20:31:39.251 ServiceBackend$: INFO: result 40 complete - 8157265 bytes\n2022-11-15 20:31:39.252 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.41\n2022-11-15 20:31:39.439 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.41 response 200\n2022-11-15 20:31:39.460 ServiceBackend$: INFO: result 41 complete - 8157265 bytes\n2022-11-15 20:31:39.461 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.42\n2022-11-15 20:31:39.669 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.42 response 200\n2022-11-15 20:31:39.693 ServiceBackend$: INFO: result 42 complete - 8157265 bytes\n2022-11-15 20:31:39.693 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:57152,test,test-,57152,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.40 response 200\n2022-11-15 20:31:39.251 ServiceBackend$: INFO: result 40 complete - 8157265 bytes\n2022-11-15 20:31:39.252 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.41\n2022-11-15 20:31:39.439 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.41 response 200\n2022-11-15 20:31:39.460 ServiceBackend$: INFO: result 41 complete - 8157265 bytes\n2022-11-15 20:31:39.461 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.42\n2022-11-15 20:31:39.669 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.42 response 200\n2022-11-15 20:31:39.693 ServiceBackend$: INFO: result 42 complete - 8157265 bytes\n2022-11-15 20:31:39.693 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.43\n2022-11-15 20:31:39.938 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.43 response 200\n2022-11-15 20:31:39.965 ServiceBackend$: INFO: result 43 complete - 8157265 bytes\n2022-11-15 20:31:39.966 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.44\n2022-11-15 20:31:40.151 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:57896,test,test-,57896,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.40\n2022-11-15 20:31:39.200 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.40 response 200\n2022-11-15 20:31:39.251 ServiceBackend$: INFO: result 40 complete - 8157265 bytes\n2022-11-15 20:31:39.252 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.41\n2022-11-15 20:31:39.439 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.41 response 200\n2022-11-15 20:31:39.460 ServiceBackend$: INFO: result 41 complete - 8157265 bytes\n2022-11-15 20:31:39.461 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.42\n2022-11-15 20:31:39.669 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.42 response 200\n2022-11-15 20:31:39.693 ServiceBackend$: INFO: result 42 complete - 8157265 bytes\n2022-11-15 20:31:39.693 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.43\n2022-11-15 20:31:39.938 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.43 response 200\n2022-11-15 20:31:39.965 ServiceBackend$: INFO: result 43 complete - 8157265 bytes\n2022-11-15 20:31:39.966 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:57680,test,test-,57680,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.41 response 200\n2022-11-15 20:31:39.460 ServiceBackend$: INFO: result 41 complete - 8157265 bytes\n2022-11-15 20:31:39.461 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.42\n2022-11-15 20:31:39.669 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.42 response 200\n2022-11-15 20:31:39.693 ServiceBackend$: INFO: result 42 complete - 8157265 bytes\n2022-11-15 20:31:39.693 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.43\n2022-11-15 20:31:39.938 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.43 response 200\n2022-11-15 20:31:39.965 ServiceBackend$: INFO: result 43 complete - 8157265 bytes\n2022-11-15 20:31:39.966 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.44\n2022-11-15 20:31:40.151 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.44 response 200\n2022-11-15 20:31:40.186 ServiceBackend$: INFO: result 44 complete - 8157265 bytes\n2022-11-15 20:31:40.186 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.45\n2022-11-15 20:31:40.377 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:58424,test,test-,58424,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.41\n2022-11-15 20:31:39.439 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.41 response 200\n2022-11-15 20:31:39.460 ServiceBackend$: INFO: result 41 complete - 8157265 bytes\n2022-11-15 20:31:39.461 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.42\n2022-11-15 20:31:39.669 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.42 response 200\n2022-11-15 20:31:39.693 ServiceBackend$: INFO: result 42 complete - 8157265 bytes\n2022-11-15 20:31:39.693 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.43\n2022-11-15 20:31:39.938 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.43 response 200\n2022-11-15 20:31:39.965 ServiceBackend$: INFO: result 43 complete - 8157265 bytes\n2022-11-15 20:31:39.966 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.44\n2022-11-15 20:31:40.151 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.44 response 200\n2022-11-15 20:31:40.186 ServiceBackend$: INFO: result 44 complete - 8157265 bytes\n2022-11-15 20:31:40.186 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:58208,test,test-,58208,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.42 response 200\n2022-11-15 20:31:39.693 ServiceBackend$: INFO: result 42 complete - 8157265 bytes\n2022-11-15 20:31:39.693 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.43\n2022-11-15 20:31:39.938 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.43 response 200\n2022-11-15 20:31:39.965 ServiceBackend$: INFO: result 43 complete - 8157265 bytes\n2022-11-15 20:31:39.966 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.44\n2022-11-15 20:31:40.151 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.44 response 200\n2022-11-15 20:31:40.186 ServiceBackend$: INFO: result 44 complete - 8157265 bytes\n2022-11-15 20:31:40.186 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.45\n2022-11-15 20:31:40.377 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.45 response 200\n2022-11-15 20:31:40.461 ServiceBackend$: INFO: result 45 complete - 8157265 bytes\n2022-11-15 20:31:40.461 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.46\n2022-11-15 20:31:40.643 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:58952,test,test-,58952,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.42\n2022-11-15 20:31:39.669 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.42 response 200\n2022-11-15 20:31:39.693 ServiceBackend$: INFO: result 42 complete - 8157265 bytes\n2022-11-15 20:31:39.693 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.43\n2022-11-15 20:31:39.938 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.43 response 200\n2022-11-15 20:31:39.965 ServiceBackend$: INFO: result 43 complete - 8157265 bytes\n2022-11-15 20:31:39.966 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.44\n2022-11-15 20:31:40.151 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.44 response 200\n2022-11-15 20:31:40.186 ServiceBackend$: INFO: result 44 complete - 8157265 bytes\n2022-11-15 20:31:40.186 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.45\n2022-11-15 20:31:40.377 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.45 response 200\n2022-11-15 20:31:40.461 ServiceBackend$: INFO: result 45 complete - 8157265 bytes\n2022-11-15 20:31:40.461 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:58736,test,test-,58736,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.43 response 200\n2022-11-15 20:31:39.965 ServiceBackend$: INFO: result 43 complete - 8157265 bytes\n2022-11-15 20:31:39.966 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.44\n2022-11-15 20:31:40.151 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.44 response 200\n2022-11-15 20:31:40.186 ServiceBackend$: INFO: result 44 complete - 8157265 bytes\n2022-11-15 20:31:40.186 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.45\n2022-11-15 20:31:40.377 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.45 response 200\n2022-11-15 20:31:40.461 ServiceBackend$: INFO: result 45 complete - 8157265 bytes\n2022-11-15 20:31:40.461 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.46\n2022-11-15 20:31:40.643 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.46 response 200\n2022-11-15 20:31:40.671 ServiceBackend$: INFO: result 46 complete - 8157265 bytes\n2022-11-15 20:31:40.671 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.47\n2022-11-15 20:31:40.870 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:59480,test,test-,59480,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.43\n2022-11-15 20:31:39.938 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.43 response 200\n2022-11-15 20:31:39.965 ServiceBackend$: INFO: result 43 complete - 8157265 bytes\n2022-11-15 20:31:39.966 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.44\n2022-11-15 20:31:40.151 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.44 response 200\n2022-11-15 20:31:40.186 ServiceBackend$: INFO: result 44 complete - 8157265 bytes\n2022-11-15 20:31:40.186 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.45\n2022-11-15 20:31:40.377 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.45 response 200\n2022-11-15 20:31:40.461 ServiceBackend$: INFO: result 45 complete - 8157265 bytes\n2022-11-15 20:31:40.461 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.46\n2022-11-15 20:31:40.643 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.46 response 200\n2022-11-15 20:31:40.671 ServiceBackend$: INFO: result 46 complete - 8157265 bytes\n2022-11-15 20:31:40.671 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:59264,test,test-,59264,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.44 response 200\n2022-11-15 20:31:40.186 ServiceBackend$: INFO: result 44 complete - 8157265 bytes\n2022-11-15 20:31:40.186 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.45\n2022-11-15 20:31:40.377 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.45 response 200\n2022-11-15 20:31:40.461 ServiceBackend$: INFO: result 45 complete - 8157265 bytes\n2022-11-15 20:31:40.461 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.46\n2022-11-15 20:31:40.643 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.46 response 200\n2022-11-15 20:31:40.671 ServiceBackend$: INFO: result 46 complete - 8157265 bytes\n2022-11-15 20:31:40.671 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.47\n2022-11-15 20:31:40.870 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.47 response 200\n2022-11-15 20:31:40.893 ServiceBackend$: INFO: result 47 complete - 8157265 bytes\n2022-11-15 20:31:40.893 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.48\n2022-11-15 20:31:41.050 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:60008,test,test-,60008,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.44\n2022-11-15 20:31:40.151 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.44 response 200\n2022-11-15 20:31:40.186 ServiceBackend$: INFO: result 44 complete - 8157265 bytes\n2022-11-15 20:31:40.186 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.45\n2022-11-15 20:31:40.377 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.45 response 200\n2022-11-15 20:31:40.461 ServiceBackend$: INFO: result 45 complete - 8157265 bytes\n2022-11-15 20:31:40.461 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.46\n2022-11-15 20:31:40.643 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.46 response 200\n2022-11-15 20:31:40.671 ServiceBackend$: INFO: result 46 complete - 8157265 bytes\n2022-11-15 20:31:40.671 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.47\n2022-11-15 20:31:40.870 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.47 response 200\n2022-11-15 20:31:40.893 ServiceBackend$: INFO: result 47 complete - 8157265 bytes\n2022-11-15 20:31:40.893 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:59792,test,test-,59792,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.45 response 200\n2022-11-15 20:31:40.461 ServiceBackend$: INFO: result 45 complete - 8157265 bytes\n2022-11-15 20:31:40.461 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.46\n2022-11-15 20:31:40.643 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.46 response 200\n2022-11-15 20:31:40.671 ServiceBackend$: INFO: result 46 complete - 8157265 bytes\n2022-11-15 20:31:40.671 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.47\n2022-11-15 20:31:40.870 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.47 response 200\n2022-11-15 20:31:40.893 ServiceBackend$: INFO: result 47 complete - 8157265 bytes\n2022-11-15 20:31:40.893 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.48\n2022-11-15 20:31:41.050 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.48 response 200\n2022-11-15 20:31:41.071 ServiceBackend$: INFO: result 48 complete - 8157265 bytes\n2022-11-15 20:31:41.071 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.49\n2022-11-15 20:31:41.231 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:60536,test,test-,60536,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.45\n2022-11-15 20:31:40.377 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.45 response 200\n2022-11-15 20:31:40.461 ServiceBackend$: INFO: result 45 complete - 8157265 bytes\n2022-11-15 20:31:40.461 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.46\n2022-11-15 20:31:40.643 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.46 response 200\n2022-11-15 20:31:40.671 ServiceBackend$: INFO: result 46 complete - 8157265 bytes\n2022-11-15 20:31:40.671 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.47\n2022-11-15 20:31:40.870 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.47 response 200\n2022-11-15 20:31:40.893 ServiceBackend$: INFO: result 47 complete - 8157265 bytes\n2022-11-15 20:31:40.893 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.48\n2022-11-15 20:31:41.050 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.48 response 200\n2022-11-15 20:31:41.071 ServiceBackend$: INFO: result 48 complete - 8157265 bytes\n2022-11-15 20:31:41.071 Requester: INFO: request GET http://memory.hail/api/v1alpha/,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:60320,test,test-,60320,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,"-LMY%3D%2Fresult.46 response 200\n2022-11-15 20:31:40.671 ServiceBackend$: INFO: result 46 complete - 8157265 bytes\n2022-11-15 20:31:40.671 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.47\n2022-11-15 20:31:40.870 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.47 response 200\n2022-11-15 20:31:40.893 ServiceBackend$: INFO: result 47 complete - 8157265 bytes\n2022-11-15 20:31:40.893 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.48\n2022-11-15 20:31:41.050 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.48 response 200\n2022-11-15 20:31:41.071 ServiceBackend$: INFO: result 48 complete - 8157265 bytes\n2022-11-15 20:31:41.071 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.49\n2022-11-15 20:31:41.231 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.49 response 200\n2022-11-15 20:31:41.330 ServiceBackend$: INFO: result 49 complete - 8157265 bytes\n2022-11-15 20:31:41.330 ServiceBackend$: INFO: all results complete\n2022-11-15 20:31:41.331 root: INFO: executed D-Array [table_aggregate_singlestage] in 1m23.1s\n2022-11-15 20:31:41.331 root: INFO: RegionPool: REPORT_THRESHOLD: 8.2M allocated (192.0K blocks / 8.0M chunks), regions.size = 3, 0 curr",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:61064,test,test-,61064,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,-LMY%3D%2Fresult.46\n2022-11-15 20:31:40.643 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.46 response 200\n2022-11-15 20:31:40.671 ServiceBackend$: INFO: result 46 complete - 8157265 bytes\n2022-11-15 20:31:40.671 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.47\n2022-11-15 20:31:40.870 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.47 response 200\n2022-11-15 20:31:40.893 ServiceBackend$: INFO: result 47 complete - 8157265 bytes\n2022-11-15 20:31:40.893 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.48\n2022-11-15 20:31:41.050 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.48 response 200\n2022-11-15 20:31:41.071 ServiceBackend$: INFO: result 48 complete - 8157265 bytes\n2022-11-15 20:31:41.071 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.49\n2022-11-15 20:31:41.231 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.49 response 200\n2022-11-15 20:31:41.330 ServiceBackend$: INFO: result 49 complete - 8157265 bytes\n2022-11-15 20:31:41.330 ServiceBackend$: INFO: all results complete\n2022-11-15 20:3,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:60848,test,test-,60848,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,"-LMY%3D%2Fresult.47 response 200\n2022-11-15 20:31:40.893 ServiceBackend$: INFO: result 47 complete - 8157265 bytes\n2022-11-15 20:31:40.893 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.48\n2022-11-15 20:31:41.050 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.48 response 200\n2022-11-15 20:31:41.071 ServiceBackend$: INFO: result 48 complete - 8157265 bytes\n2022-11-15 20:31:41.071 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.49\n2022-11-15 20:31:41.231 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.49 response 200\n2022-11-15 20:31:41.330 ServiceBackend$: INFO: result 49 complete - 8157265 bytes\n2022-11-15 20:31:41.330 ServiceBackend$: INFO: all results complete\n2022-11-15 20:31:41.331 root: INFO: executed D-Array [table_aggregate_singlestage] in 1m23.1s\n2022-11-15 20:31:41.331 root: INFO: RegionPool: REPORT_THRESHOLD: 8.2M allocated (192.0K blocks / 8.0M chunks), regions.size = 3, 0 current java objects, thread 8: pool-1-thread-1\n2022-11-15 20:31:41.335 root: INFO: RegionPool: REPORT_THRESHOLD: 16.2M allocated (192.0K blocks / 16.0M chunks), regions.size = 3, 0 current java objects, thread 8: pool-1-thread-1\n2022-11-15 20:31:41.339 root: INFO: RegionPool: REPORT_THRESHOLD: 24.2M allocated (192.0K blocks / 24.0M chunks), regions.size = 3, 0 current java objects, thread 8: pool-1-thread-1\n2022-11-15 20:31:41.345 root: INFO: RegionPool: REPORT_THRESHOLD: 32.2M allocated (192.0K blocks / 32.0M chunks), reg",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:61592,test,test-,61592,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,"-LMY%3D%2Fresult.47\n2022-11-15 20:31:40.870 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.47 response 200\n2022-11-15 20:31:40.893 ServiceBackend$: INFO: result 47 complete - 8157265 bytes\n2022-11-15 20:31:40.893 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.48\n2022-11-15 20:31:41.050 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.48 response 200\n2022-11-15 20:31:41.071 ServiceBackend$: INFO: result 48 complete - 8157265 bytes\n2022-11-15 20:31:41.071 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.49\n2022-11-15 20:31:41.231 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.49 response 200\n2022-11-15 20:31:41.330 ServiceBackend$: INFO: result 49 complete - 8157265 bytes\n2022-11-15 20:31:41.330 ServiceBackend$: INFO: all results complete\n2022-11-15 20:31:41.331 root: INFO: executed D-Array [table_aggregate_singlestage] in 1m23.1s\n2022-11-15 20:31:41.331 root: INFO: RegionPool: REPORT_THRESHOLD: 8.2M allocated (192.0K blocks / 8.0M chunks), regions.size = 3, 0 current java objects, thread 8: pool-1-thread-1\n2022-11-15 20:31:41.335 root: INFO: RegionPool: REPORT_THRESHOLD: 16.2M allocated (192.0K blocks / 16.0M chunks), regions.size = 3, 0 current java objects, thread 8: pool-1-thread-1\n2022-11-15 20:31:41.339 root: INFO: RegionPool: REPORT_THRESHOLD: 24.2M allocated (1",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:61376,test,test-,61376,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,"-TORNADO-5537286](https://snyk.io/vuln/SNYK-PYTHON-TORNADO-5537286) | `tornado:` <br> `6.2 -> 6.3.3` <br> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | **494/1000** <br/> **Why?** Has a fix available, CVSS 5.6 | HTTP Request Smuggling <br/>[SNYK-PYTHON-TORNADO-5840803](https://snyk.io/vuln/SNYK-PYTHON-TORNADO-5840803) | `tornado:` <br> `6.2 -> 6.3.3` <br> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | **496/1000** <br/> **Why?** Recently disclosed, Has a fix available, CVSS 4.2 | Information Exposure Through Sent Data <br/>[SNYK-PYTHON-URLLIB3-6002459](https://snyk.io/vuln/SNYK-PYTHON-URLLIB3-6002459) | `urllib3:` <br> `1.26.17 -> 1.26.18` <br> | No | No Known Exploit . (*) Note that the real score may have changed since the PR was raised. Some vulnerabilities couldn't be fully fixed and so Snyk will still find them when the project is tested again. This may be because the vulnerability existed within more than one direct dependency, but not all of the affected dependencies could be upgraded. Check the changes in this PR to ensure they won't cause issues with your project. ------------. **Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open fix PRs.*. For more information: <img src=""https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiIxMjY5MWQyMS0wMzk1LTQxYjMtODBkMi1mMjEyODMwZjY2ZWEiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjEyNjkxZDIxLTAzOTUtNDFiMy04MGQyLWYyMTI4MzBmNjZlYSJ9fQ=="" width=""0"" height=""0""/>; 🧐 [View latest project report](https://app.snyk.io/org/danking/project/20159ae6-a5aa-42fa-845a-c89f5bcbf999?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr). 🛠 [Adjust project settings](https://app.snyk",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13873:3635,test,tested,3635,https://hail.is,https://github.com/hail-is/hail/pull/13873,1,['test'],['tested']
Testability,-Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux -MD -MF build/Region.d -MT build/Region.o -c Region.cpp; g++ -o build/Upcalls.o -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux -MD -MF build/Upcalls.d -MT build/Upcalls.o -c Upcalls.cpp; g++ -o build/FS.o -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux -MD -MF build/FS.d -MT build/FS.o -c FS.cpp; g++ -fvisibility=default -rdynamic -shared -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux build/ibs.o build/Decoder.o build/Encoder.o build/Logging.o build/Na; tiveCodeSuite.o build/NativeLongFunc.o build/NativeModule.o build/NativePtr.o build/NativeStatus.o build/ObjectArray.o build/PartitionIterators.o build/Region.o build/Upcalls.o build/FS.o -o lib/linux-x86-64/libhail.so; cp -p -f lib/linux-x86-64/libboot.so lib/linux-x86-64/libhail.so ../../../prebuilt/lib/linux-x86-64/; make[1]: Leaving directory `/mnt/tmp/hail/hail/src/main/c'; ./gradlew shadowJar -Dscala.version=2.12.15 -Dspark.version=3.3.2 -Delasticsearch.major-version=7; Downloading https://services.gradle.org/distributions/gradle-8.3-bin.zip; ............10%............20%.............30%............40%.............50%............60%.............70%............80%.............90%............100%. Welcome to Gradle 8.3!. Here are the highlights of this release:; - Faster Java compilation; - Reduced memory usage; - Support for running on Java 20. For more details see https://docs.gradle.org/8.3/release-notes.html. Starting a Gradle Daemon (subsequent builds will,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221:14904,Log,Logging,14904,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221,1,['Log'],['Logging']
Testability,-added symEigD and symEigR in stats on Breeze matrices; -added unit test and speed test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/906:68,test,test,68,https://hail.is,https://github.com/hail-is/hail/pull/906,2,['test'],['test']
Testability,"-cffi-bindings 21.2.0 requires cffi, which is not installed.; aiosignal 1.3.1 requires frozenlist, which is not installed. ```; </details>. #### Vulnerabilities that will be fixed. ##### By pinning:; Severity | Priority Score (*) | Issue | Upgrade | Breaking Change | Exploit Maturity; :-------------------------:|-------------------------|:-------------------------|:-------------------------|:-------------------------|:-------------------------; ![low severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/l.png ""low severity"") | **461/1000** <br/> **Why?** Recently disclosed, Has a fix available, CVSS 3.5 | Generation of Error Message Containing Sensitive Information <br/>[SNYK-PYTHON-JUPYTERSERVER-6099119](https://snyk.io/vuln/SNYK-PYTHON-JUPYTERSERVER-6099119) | `jupyter-server:` <br> `1.24.0 -> 2.11.2` <br> | No | No Known Exploit . (*) Note that the real score may have changed since the PR was raised. Some vulnerabilities couldn't be fully fixed and so Snyk will still find them when the project is tested again. This may be because the vulnerability existed within more than one direct dependency, but not all of the affected dependencies could be upgraded. Check the changes in this PR to ensure they won't cause issues with your project. ------------. **Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open fix PRs.*. For more information: <img src=""https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiI3MThjYjgyZC1jNGU3LTRlNWEtODgzZi02NjQ0NjlmYzA4MGEiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjcxOGNiODJkLWM0ZTctNGU1YS04ODNmLTY2NDQ2OWZjMDgwYSJ9fQ=="" width=""0"" height=""0""/>; 🧐 [View latest project report](https://app.snyk.io/org/danking/project/20159ae6-a5aa-42fa-845a-c89f5bcbf999?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr). 🛠 [Adjust project settings](https://app.snyk",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14070:1666,test,tested,1666,https://hail.is,https://github.com/hail-is/hail/pull/14070,1,['test'],['tested']
Testability,-fno-strict-aliasing -I../resources/include -I/usr/lib/jvm/java-8-openjdk-amd64/include -I/usr/lib/jvm/java-8-openjdk-amd64/include/linux test.cpp -MG -M -MF build/test.d -MT build/test.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Werror -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/usr/lib/jvm/java-8-openjdk-amd64/include -I/usr/lib/jvm/java-8-openjdk-amd64/include/linux ibs.cpp -MG -M -MF build/ibs.d -MT build/ibs.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Werror -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/usr/lib/jvm/java-8-openjdk-amd64/include -I/usr/lib/jvm/java-8-openjdk-amd64/include/linux davies.cpp -MG -M -MF build/davies.d -MT build/davies.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Werror -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/usr/lib/jvm/java-8-openjdk-amd64/include -I/usr/lib/jvm/java-8-openjdk-amd64/include/linux cache-tests.cpp -MG -M -MF build/cache-tests.d -MT build/cache-tests.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Werror -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/usr/lib/jvm/java-8-openjdk-amd64/include -I/usr/lib/jvm/java-8-openjdk-amd64/include/linux Upcalls.cpp -MG -M -MF build/Upcalls.d -MT build/Upcalls.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Werror -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/usr/lib/jvm/java-8-openjdk-amd64/include -I/usr/lib/jvm/java-8-openjdk-amd64/include/linux Region_test.cpp -MG -M -MF build/Region_test.d -MT build/Region_test.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Werror -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/usr/lib/jvm/java-8-openjdk-amd64/include -I/usr/lib/jvm/java-8-openjdk-amd64/include/linux Region.cpp -MG -M -MF build/Region.d -MT build/Region.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Werror -Wextra -fPIC -ggdb -f,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5659:1956,test,tests,1956,https://hail.is,https://github.com/hail-is/hail/issues/5659,1,['test'],['tests']
Testability,-key-file=/gsa-key/privateKeyData)) && mkdir -p /io/pipeline/pipeline-1cac3dd4e66d/__TASK__0; gsutil -m cp -R gs://hail-wang-ukps2/pipeline/pipeline-1cac3dd4e66d/__TASK__0/0731f9a3 /io/pipeline/pipeline-1cac3dd4e66d/__TASK__0/0731f9a3; ; State: Waiting; Reason: PodInitializing; Ready: False; Restart Count: 0; Requests:; cpu: 500m; Environment: <none>; Mounts:; /batch-gsa-key from batch-gsa-key (rw); /gsa-key from gsa-key (rw); /io from batch-12728-job-287-742170 (rw); /var/run/secrets/kubernetes.io/serviceaccount from batch-output-pod-token-8pkmz (ro); Containers:; main:; Container ID: ; Image: gcr.io/broad-ctsa/benchmark_wang:latest; Image ID: ; Port: <none>; Host Port: <none>; Command:; /bin/bash; -c; set -e; mkdir -p /io/pipeline/pipeline-1cac3dd4e66d/__TASK__286/; __RESOURCE_FILE__286=/io/pipeline/pipeline-1cac3dd4e66d/__TASK__286/8926feac; __RESOURCE_FILE__0=/io/pipeline/pipeline-1cac3dd4e66d/__TASK__0/0731f9a3; mv ${__RESOURCE_FILE__0} benchmark-resources.tar.gz && time tar -xvf benchmark-resources.tar.gz && hailctl dev benchmark run -v -o ${__RESOURCE_FILE__286} -n 5 --data-dir benchmark-resources -t read_with_index_p1000; State: Waiting; Reason: PodInitializing; Ready: False; Restart Count: 0; Requests:; cpu: 2; memory: 7G; Environment:; POD_IP: (v1:status.podIP); POD_NAME: batch-12728-job-287-742170 (v1:metadata.name); Mounts:; /gsa-key from gsa-key (rw); /io from batch-12728-job-287-742170 (rw); /var/run/secrets/kubernetes.io/serviceaccount from batch-output-pod-token-8pkmz (ro); cleanup:; Container ID: ; Image: gcr.io/hail-vdc/batch:s32fqwbuz8nv; Image ID: ; Port: 5000/TCP; Host Port: 0/TCP; Command:; /bin/sh; -c; ; set -ex; python3 -m batch.cleanup_sidecar; ; State: Waiting; Reason: PodInitializing; Ready: False; Restart Count: 0; Requests:; cpu: 500m; Environment:; COPY_OUTPUT_CMD: set -ex; (gcloud -q auth activate-service-account --key-file=/gsa-key/privateKeyData || (sleep $(( 5 + (RANDOM % 5) )); gcloud -q auth activate-service-account --key-file=/gs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7016:2215,benchmark,benchmark-resources,2215,https://hail.is,https://github.com/hail-is/hail/issues/7016,1,['benchmark'],['benchmark-resources']
Testability,"-redirect.dependabot.com/googleapis/python-logging/issues/415"">#415</a>) (<a href=""https://www.github.com/googleapis/python-logging/commit/f5af16439807a0954ee78fa91cb69b9493b80176"">f5af164</a>)</li>; <li>added support for iam AuditData proto (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/396"">#396</a>) (<a href=""https://www.github.com/googleapis/python-logging/commit/e3a1eba74dd8b67bcc73a78f784189ef2a9927c2"">e3a1eba</a>)</li>; <li>use structured logging on GCF with python 3.7 (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/434"">#434</a>) (<a href=""https://www.github.com/googleapis/python-logging/commit/5055919f70c82b38de6d1fa7f1df6006865a857b"">5055919</a>)</li>; </ul>; <h3>Bug Fixes</h3>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/googleapis/python-logging/blob/main/CHANGELOG.md"">google-cloud-logging's changelog</a>.</em></p>; <blockquote>; <h2><a href=""https://github.com/googleapis/python-logging/compare/v2.7.0...v3.0.0"">3.0.0</a> (2022-01-27)</h2>; <h3>⚠ BREAKING CHANGES</h3>; <ul>; <li>make logging API more friendly to use (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/422"">#422</a>)</li>; <li>api consistency between HTTP and Gapic layers (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/375"">#375</a>)</li>; <li>support string-encoded json (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/339"">#339</a>)</li>; <li>Infer default resource in logger (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/315"">#315</a>)</li>; <li>support json logs (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/316"">#316</a>)</li>; <li>deprecate AppEngineHandler and ContainerEngineHandler (<a href=""https://github-redirect.dependabot.com/goo",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11574:5689,log,logging,5689,https://hail.is,https://github.com/hail-is/hail/pull/11574,1,['log'],['logging']
Testability,"-redirect.dependabot.com/kubernetes/kubernetes/pull/104248"">kubernetes/kubernetes#104248</a>, <a href=""https://github.com/liggitt""><code>@​liggitt</code></a>)</li>; <li>Kube-scheduler: support for configuration file version <code>v1beta1</code> is removed. Update configuration files to v1beta2(xref: <a href=""https://github-redirect.dependabot.com/kubernetes/enhancements/issues/2901"">kubernetes/enhancements#2901</a>) or v1beta3 before upgrading to 1.23. (<a href=""https://github-redirect.dependabot.com/kubernetes/kubernetes/pull/104782"">kubernetes/kubernetes#104782</a>, <a href=""https://github.com/kerthcet""><code>@​kerthcet</code></a>)</li>; <li>KubeSchedulerConfiguration provides a new field <code>MultiPoint</code> which will register a plugin for all valid extension points (<a href=""https://github-redirect.dependabot.com/kubernetes/kubernetes/pull/105611"">kubernetes/kubernetes#105611</a>, <a href=""https://github.com/damemi""><code>@​damemi</code></a>) [SIG Scheduling and Testing]</li>; <li>Kubelet should reject pods whose OS doesn't match the node's OS label. (<a href=""https://github-redirect.dependabot.com/kubernetes/kubernetes/pull/105292"">kubernetes/kubernetes#105292</a>, <a href=""https://github.com/ravisantoshgudimetla""><code>@​ravisantoshgudimetla</code></a>) [SIG Apps and Node]</li>; <li>Kubelet: turn the KubeletConfiguration v1beta1 <code>ResolverConfig</code> field from a <code>string</code> to <code>*string</code>. (<a href=""https://github-redirect.dependabot.com/kubernetes/kubernetes/pull/104624"">kubernetes/kubernetes#104624</a>, <a href=""https://github.com/Haleygo""><code>@​Haleygo</code></a>)</li>; <li>Kubernetes is now built using go 1.17. (<a href=""https://github-redirect.dependabot.com/kubernetes/kubernetes/pull/103692"">kubernetes/kubernetes#103692</a>, <a href=""https://github.com/justaugustus""><code>@​justaugustus</code></a>)</li>; <li>Performs strict server side schema validation requests via the <code>fieldValidation=[Strict,Warn,Ignore]</code>. (<a ",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11957:9171,Test,Testing,9171,https://hail.is,https://github.com/hail-is/hail/pull/11957,1,['Test'],['Testing']
Testability,"-redirect.dependabot.com/pytest-dev/pytest-html/issues/364"">#364</a>) <a href=""https://github.com/ssbarnea""><code>@​ssbarnea</code></a></li>; <li>Move release from travis to github actions (<a href=""https://github-redirect.dependabot.com/pytest-dev/pytest-html/issues/360"">#360</a>) <a href=""https://github.com/ssbarnea""><code>@​ssbarnea</code></a></li>; <li>Respect --show-capture=no flag (<a href=""https://github-redirect.dependabot.com/pytest-dev/pytest-html/issues/359"">#359</a>) <a href=""https://github.com/gnikonorov""><code>@​gnikonorov</code></a></li>; <li>Respect pytest --capture=no and -s flags (<a href=""https://github-redirect.dependabot.com/pytest-dev/pytest-html/issues/353"">#353</a>) <a href=""https://github.com/gnikonorov""><code>@​gnikonorov</code></a></li>; <li>Stop shadowing the 'format' builtin (<a href=""https://github-redirect.dependabot.com/pytest-dev/pytest-html/issues/347"">#347</a>) <a href=""https://github.com/gnikonorov""><code>@​gnikonorov</code></a></li>; <li>Post process html to include teardown in log (<a href=""https://github-redirect.dependabot.com/pytest-dev/pytest-html/issues/271"">#271</a>) <a href=""https://github.com/csm10495""><code>@​csm10495</code></a></li>; <li>Avoid pytest 6.0.0 (<a href=""https://github-redirect.dependabot.com/pytest-dev/pytest-html/issues/319"">#319</a>) <a href=""https://github.com/ssbarnea""><code>@​ssbarnea</code></a></li>; <li>Rename &quot;slave&quot; -&gt; &quot;worker&quot; for xdist compatibility (<a href=""https://github-redirect.dependabot.com/pytest-dev/pytest-html/issues/307"">#307</a>) <a href=""https://github.com/Zac-HD""><code>@​Zac-HD</code></a></li>; <li>Fix embedded images (and videos) (<a href=""https://github-redirect.dependabot.com/pytest-dev/pytest-html/issues/298"">#298</a>) <a href=""https://github.com/dhalperi""><code>@​dhalperi</code></a></li>; <li>Fix image missing when using Base64 content (<a href=""https://github-redirect.dependabot.com/pytest-dev/pytest-html/issues/277"">#277</a>) <a href=""https://github.com",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11524:4019,log,log,4019,https://hail.is,https://github.com/hail-is/hail/pull/11524,1,['log'],['log']
Testability,-stream 2023-06-09T12:44:22+00:00; batch/logs/we5a79QlczzdluUx8kT2Vh/batch/1148/2/31Owgv/main/resource_usage BlockBlob Hot 680 application/octet-stream 2023-06-09T12:44:22+00:00; batch/logs/we5a79QlczzdluUx8kT2Vh/batch/1148/2/31Owgv/status.json BlockBlob Hot 4453 application/octet-stream 2023-06-09T12:44:22+00:00; batch/logs/we5a79QlczzdluUx8kT2Vh/batch/1148/bunch/dK3o5ZfXmYSkP5TA/specs BlockBlob Hot 1264 application/octet-stream 2023-06-09T12:43:37+00:00; batch/logs/we5a79QlczzdluUx8kT2Vh/batch/1148/bunch/dK3o5ZfXmYSkP5TA/specs.idx BlockBlob Hot 16 application/octet-stream 2023-06-09T12:43:37+00:00; batch/logs/we5a79QlczzdluUx8kT2Vh/batch/1148/bunch/eOrFpVrN98GBIizi/specs BlockBlob Hot 1264 application/octet-stream 2023-06-09T12:43:34+00:00; batch/logs/we5a79QlczzdluUx8kT2Vh/batch/1148/bunch/eOrFpVrN98GBIizi/specs.idx BlockBlob Hot 16 application/octet-stream 2023-06-09T12:43:34+00:00; ```. I looked at the status:. ```; az storage blob download --account-name haildevtest --container test --name batch/logs/we5a79QlczzdluUx8kT2Vh/batch/1148/2/31Owgv/status.json | jq '.' | less; ```. which contained an error (I un-escaped the string here):. ```; JVMUserError: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.lang.reflect.InvocationTargetException; 	at java.util.concurrent.FutureTask.report(FutureTask.java:122); 	at java.util.concurrent.FutureTask.get(FutureTask.java:192); 	at is.hail.JVMEntryway.retrieveException(JVMEntryway.java:253); 	at is.hail.JVMEntryway.finishFutures(JVMEntryway.java:215); 	at is.hail.JVMEntryway.main(JVMEntryway.java:185); Caused by: java.lang.RuntimeException: java.lang.reflect.InvocationTargetException; 	at is.hail.JVMEntryway$1.run(JVMEntryway.java:122); 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); 	at java.util.concurrent.FutureTask.run(FutureTask.java:266); 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); 	at java.util.concurrent.FutureTask.run(FutureTask.ja,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13160:3544,test,test,3544,https://hail.is,https://github.com/hail-is/hail/pull/13160,2,"['log', 'test']","['logs', 'test']"
Testability,"-t</code></a>) [SIG API Machinery, Apps and Testing]</li>; <li>Kube-proxy: add <code>--bind-address-hard-fail</code> flag to treat failure to bind to a port as fatal (<a href=""https://github-redirect.dependabot.com/kubernetes/kubernetes/pull/89350"">kubernetes/kubernetes#89350</a>, <a href=""https://github.com/SataQiu""><code>@​SataQiu</code></a>) [SIG Cluster Lifecycle and Network]</li>; <li>Kubebuilder validation tags are set on metav1.Condition for CRD generation (<a href=""https://github-redirect.dependabot.com/kubernetes/kubernetes/pull/92660"">kubernetes/kubernetes#92660</a>, <a href=""https://github.com/damemi""><code>@​damemi</code></a>) [SIG API Machinery]</li>; <li>Kubelet's --runonce option is now also available in Kubelet's config file as <code>runOnce</code>. (<a href=""https://github-redirect.dependabot.com/kubernetes/kubernetes/pull/89128"">kubernetes/kubernetes#89128</a>, <a href=""https://github.com/vincent178""><code>@​vincent178</code></a>) [SIG Node]</li>; <li>Kubelet: add '--logging-format' flag to support structured logging (<a href=""https://github-redirect.dependabot.com/kubernetes/kubernetes/pull/91532"">kubernetes/kubernetes#91532</a>, <a href=""https://github.com/afrouzMashaykhi""><code>@​afrouzMashaykhi</code></a>) [SIG API Machinery, Cluster Lifecycle, Instrumentation and Node]</li>; <li>Kubernetes is now built with golang 1.15.0-rc.1.; <ul>; <li>The deprecated, legacy behavior of treating the CommonName field on X.509 serving certificates as a host name when no Subject Alternative Names are present is now disabled by default. It can be temporarily re-enabled by adding the value x509ignoreCN=0 to the GODEBUG environment variable. (<a href=""https://github-redirect.dependabot.com/kubernetes/kubernetes/pull/93264"">kubernetes/kubernetes#93264</a>, <a href=""https://github.com/justaugustus""><code>@​justaugustus</code></a>) [SIG API Machinery, Auth, CLI, Cloud Provider, Cluster Lifecycle, Instrumentation, Network, Node, Release, Scalability, Storage and Testin",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11462:10104,log,logging-format,10104,https://hail.is,https://github.com/hail-is/hail/pull/11462,2,['log'],"['logging', 'logging-format']"
Testability,"-test"",; ""followers_url"": ""https://api.github.com/users/hail-ci-test/followers"",; ""following_url"": ""https://api.github.com/users/hail-ci-test/following{/other_user}"",; ""gists_url"": ""https://api.github.com/users/hail-ci-test/gists{/gist_id}"",; ""starred_url"": ""https://api.github.com/users/hail-ci-test/starred{/owner}{/repo}"",; ""subscriptions_url"": ""https://api.github.com/users/hail-ci-test/subscriptions"",; ""organizations_url"": ""https://api.github.com/users/hail-ci-test/orgs"",; ""repos_url"": ""https://api.github.com/users/hail-ci-test/repos"",; ""events_url"": ""https://api.github.com/users/hail-ci-test/events{/privacy}"",; ""received_events_url"": ""https://api.github.com/users/hail-ci-test/received_events"",; ""type"": ""Organization"",; ""site_admin"": false; },; ""html_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7"",; ""description"": null,; ""fork"": false,; ""url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7"",; ""forks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/forks"",; ""keys_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/keys{/key_id}"",; ""collaborators_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/collaborators{/collaborator}"",; ""teams_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/teams"",; ""hooks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/hooks"",; ""issue_events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/events{/number}"",; ""events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/events"",; ""assignees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/assignees{/user}"",; ""branches_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/branches{/branch}"",; ""tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/tags"",; ""blobs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/blobs{/sha}"",; ""git_tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:2322,test,test,2322,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,"-test-p4a9fxo7/comments{/number}"",; ""issue_comment_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/comments{/number}"",; ""contents_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contents/{+path}"",; ""compare_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/compare/{base}...{head}"",; ""merges_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/merges"",. 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0; 100 7030 100 6999 100 31 9306 41 --:--:-- --:--:-- --:--:-- 9319; ""archive_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/{archive_format}{/ref}"",; ""downloads_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/downloads"",; ""issues_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues{/number}"",; ""pulls_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/pulls{/number}"",; ""milestones_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/milestones{/number}"",; ""notifications_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/notifications{?since,all,participating}"",; ""labels_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/labels{/name}"",; ""releases_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/releases{/id}"",; ""deployments_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/deployments"",; ""created_at"": ""2018-10-10T00:32:59Z"",; ""updated_at"": ""2018-10-10T00:32:59Z"",; ""pushed_at"": ""2018-10-10T00:33:00Z"",; ""git_url"": ""git://github.com/hail-ci-test/ci-test-p4a9fxo7.git"",; ""ssh_url"": ""git@github.com:hail-ci-test/ci-test-p4a9fxo7.git"",; ""clone_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7.git"",; ""svn_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7"",; ""homepage"": null,; ""size"": 0,; ""stargazers_count"": 0,; ""watchers_count"": 0,; ""language"": null,; ""has_issues"": true,; ""has_projects"": true,; ""has_downloads"": true,; ""has_wiki"": true,; ""has_pages"": false,; ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:5340,test,test,5340,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,"-vdc/hail/ci"",""us-docker.pkg.dev/hail-vdc/hail/ci-intermediate"",""us-docker.pkg.dev/hail-vdc/hail/ci-utils"",""us-docker.pkg.dev/hail-vdc/hail/create_certs_image"",""us-docker.pkg.dev/hail-vdc/hail/echo"",""us-docker.pkg.dev/hail-vdc/hail/grafana"",""us-docker.pkg.dev/hail-vdc/hail/hail-base"",""us-docker.pkg.dev/hail-vdc/hail/hail-build"",""us-docker.pkg.dev/hail-vdc/hail/hail-buildkit"",""us-docker.pkg.dev/hail-vdc/hail/hail-run"",""us-docker.pkg.dev/hail-vdc/hail/hail-run-tests"",""us-docker.pkg.dev/hail-vdc/hail/hail-pip-installed-python37"",""us-docker.pkg.dev/hail-vdc/hail/hail-pip-installed-python38"",""us-docker.pkg.dev/hail-vdc/hail/hail-ubuntu"",""us-docker.pkg.dev/hail-vdc/hail/memory"",""us-docker.pkg.dev/hail-vdc/hail/monitoring"",""us-docker.pkg.dev/hail-vdc/hail/notebook"",""us-docker.pkg.dev/hail-vdc/hail/notebook_nginx"",""us-docker.pkg.dev/hail-vdc/hail/prometheus"",""us-docker.pkg.dev/hail-vdc/hail/service-base"",""us-docker.pkg.dev/hail-vdc/hail/service-java-run-base"",""us-docker.pkg.dev/hail-vdc/hail/test-ci"",""us-docker.pkg.dev/hail-vdc/hail/test-monitoring"",""us-docker.pkg.dev/hail-vdc/hail/test-benchmark"",""us-docker.pkg.dev/hail-vdc/hail/test_hello_create_certs_image"",""us-docker.pkg.dev/hail-vdc/hail/website"",""us-docker.pkg.dev/hail-vdc/hail/ci-hello"",""us-docker.pkg.dev/hail-vdc/hail/hailgenetics/vep-grch37-85"",""us-docker.pkg.dev/hail-vdc/hail/hailgenetics/vep-grch38-95""],""grace"":""48h"",""recursive"":true,""tag_filter_all"":""cache-pr-.*""}; ```. ```; {""repos"":[""us-docker.pkg.dev/hail-vdc/hail/auth"",""us-docker.pkg.dev/hail-vdc/hail/base"",""us-docker.pkg.dev/hail-vdc/hail/base_spark_3_2"",""us-docker.pkg.dev/hail-vdc/hail/batch"",""us-docker.pkg.dev/hail-vdc/hail/batch-driver-nginx"",""us-docker.pkg.dev/hail-vdc/hail/batch-worker"",""us-docker.pkg.dev/hail-vdc/hail/benchmark"",""us-docker.pkg.dev/hail-vdc/hail/blog_nginx"",""us-docker.pkg.dev/hail-vdc/hail/ci"",""us-docker.pkg.dev/hail-vdc/hail/ci-intermediate"",""us-docker.pkg.dev/hail-vdc/hail/ci-utils"",""us-docker.pkg.dev/hail-vdc/hail/create_certs_image",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13603#issuecomment-1734249545:1634,test,test-ci,1634,https://hail.is,https://github.com/hail-is/hail/issues/13603#issuecomment-1734249545,1,['test'],['test-ci']
Testability,"-|:-------------------------|:-------------------------|:-------------------------|:-------------------------; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | **479/1000** <br/> **Why?** Has a fix available, CVSS 5.3 | Denial of Service (DoS) <br/>[SNYK-PYTHON-CRYPTOGRAPHY-6050294](https://snyk.io/vuln/SNYK-PYTHON-CRYPTOGRAPHY-6050294) | `cryptography:` <br> `41.0.7 -> 42.0.0` <br> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | **616/1000** <br/> **Why?** Proof of Concept exploit, Has a fix available, CVSS 5.9 | Information Exposure <br/>[SNYK-PYTHON-CRYPTOGRAPHY-6126975](https://snyk.io/vuln/SNYK-PYTHON-CRYPTOGRAPHY-6126975) | `cryptography:` <br> `41.0.7 -> 42.0.0` <br> | No | Proof of Concept . (*) Note that the real score may have changed since the PR was raised. Some vulnerabilities couldn't be fully fixed and so Snyk will still find them when the project is tested again. This may be because the vulnerability existed within more than one direct dependency, but not all of the affected dependencies could be upgraded. Check the changes in this PR to ensure they won't cause issues with your project. ------------. **Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open fix PRs.*. For more information: <img src=""https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiIxNjVmNDVkMi00ZDM3LTRmNzAtOGU1OC00OGIxOGJhNmVlOTgiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjE2NWY0NWQyLTRkMzctNGY3MC04ZTU4LTQ4YjE4YmE2ZWU5OCJ9fQ=="" width=""0"" height=""0""/>; 🧐 [View latest project report](https://app.snyk.io/org/danking/project/c1c98f6a-57c6-4ecc-a329-3b744cab74bd?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr). 🛠 [Adjust project settings](https://app.snyk",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14203:1881,test,tested,1881,https://hail.is,https://github.com/hail-is/hail/pull/14203,1,['test'],['tested']
Testability,"-|:-------------------------|:-------------------------|:-------------------------|:-------------------------; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | **479/1000** <br/> **Why?** Has a fix available, CVSS 5.3 | Denial of Service (DoS) <br/>[SNYK-PYTHON-CRYPTOGRAPHY-6050294](https://snyk.io/vuln/SNYK-PYTHON-CRYPTOGRAPHY-6050294) | `cryptography:` <br> `41.0.7 -> 42.0.0` <br> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | **616/1000** <br/> **Why?** Proof of Concept exploit, Has a fix available, CVSS 5.9 | Information Exposure <br/>[SNYK-PYTHON-CRYPTOGRAPHY-6126975](https://snyk.io/vuln/SNYK-PYTHON-CRYPTOGRAPHY-6126975) | `cryptography:` <br> `41.0.7 -> 42.0.0` <br> | No | Proof of Concept . (*) Note that the real score may have changed since the PR was raised. Some vulnerabilities couldn't be fully fixed and so Snyk will still find them when the project is tested again. This may be because the vulnerability existed within more than one direct dependency, but not all of the affected dependencies could be upgraded. Check the changes in this PR to ensure they won't cause issues with your project. ------------. **Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open fix PRs.*. For more information: <img src=""https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiIyMTAxMzNhYS03MjA2LTRmMzQtYTQ2OC1iYjY5YWJmYTUzZjEiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjIxMDEzM2FhLTcyMDYtNGYzNC1hNDY4LWJiNjlhYmZhNTNmMSJ9fQ=="" width=""0"" height=""0""/>; 🧐 [View latest project report](https://app.snyk.io/org/danking/project/701495b8-b53d-48af-82fe-1a6c57aa56cb?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr). 🛠 [Adjust project settings](https://app.snyk",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14200:1607,test,tested,1607,https://hail.is,https://github.com/hail-is/hail/pull/14200,1,['test'],['tested']
Testability,". #### Changes included in this PR. - Changes to the following files to upgrade the vulnerable dependencies to a fixed version:; - web_common/pinned-requirements.txt. #### Vulnerabilities that will be fixed. ##### By pinning:; Severity | Priority Score (*) | Issue | Upgrade | Breaking Change | Exploit Maturity; :-------------------------:|-------------------------|:-------------------------|:-------------------------|:-------------------------|:-------------------------; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | **658/1000** <br/> **Why?** Proof of Concept exploit, Recently disclosed, Has a fix available, CVSS 5.3 | HTTP Request Smuggling <br/>[SNYK-PYTHON-AIOHTTP-5798483](https://snyk.io/vuln/SNYK-PYTHON-AIOHTTP-5798483) | `aiohttp:` <br> `3.8.4 -> 3.8.5` <br> | No | Proof of Concept . (*) Note that the real score may have changed since the PR was raised. Some vulnerabilities couldn't be fully fixed and so Snyk will still find them when the project is tested again. This may be because the vulnerability existed within more than one direct dependency, but not all of the affected dependencies could be upgraded. Check the changes in this PR to ensure they won't cause issues with your project. ------------. **Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open fix PRs.*. For more information: <img src=""https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiJjZmU2NDEwYi1jYjQ3LTQ2YzgtOTYwYy1kOWRlY2UxMjI5ZTIiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6ImNmZTY0MTBiLWNiNDctNDZjOC05NjBjLWQ5ZGVjZTEyMjllMiJ9fQ=="" width=""0"" height=""0""/>; 🧐 [View latest project report](https://app.snyk.io/org/danking/project/b7c31419-ec34-40f1-8bc6-ad8303fb329b?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr). 🛠 [Adjust project settings](https://app.snyk",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13286:1250,test,tested,1250,https://hail.is,https://github.com/hail-is/hail/pull/13286,1,['test'],['tested']
Testability,". File <decorator-gen-1705>:2, in init_spark(sc, app_name, master, local, log, quiet, append, min_block_size, branching_factor, tmp_dir, default_reference, idempotent, global_seed, spark_conf, skip_logging_configuration, local_tmpdir, _optimizer_iterations). File ~/miniforge3/envs/hail/lib/python3.9/site-packages/hail/typecheck/check.py:577, in _make_dec.<locals>.wrapper(__original_func, *args, **kwargs); 574 @decorator; 575 def wrapper(__original_func, *args, **kwargs):; 576 args_, kwargs_ = check_all(__original_func, args, kwargs, checkers, is_method=is_method); --> 577 return __original_func(*args_, **kwargs_). File ~/miniforge3/envs/hail/lib/python3.9/site-packages/hail/context.py:384, in init_spark(sc, app_name, master, local, log, quiet, append, min_block_size, branching_factor, tmp_dir, default_reference, idempotent, global_seed, spark_conf, skip_logging_configuration, local_tmpdir, _optimizer_iterations); 381 optimizer_iterations = get_env_or_default(_optimizer_iterations, 'HAIL_OPTIMIZER_ITERATIONS', 3); 383 app_name = app_name or 'Hail'; --> 384 backend = SparkBackend(; 385 idempotent, sc, spark_conf, app_name, master, local, log,; 386 quiet, append, min_block_size, branching_factor, tmpdir, local_tmpdir,; 387 skip_logging_configuration, optimizer_iterations); 388 if not backend.fs.exists(tmpdir):; 389 backend.fs.mkdir(tmpdir). File ~/miniforge3/envs/hail/lib/python3.9/site-packages/hail/backend/spark_backend.py:180, in SparkBackend.__init__(self, idempotent, sc, spark_conf, app_name, master, local, log, quiet, append, min_block_size, branching_factor, tmpdir, local_tmpdir, skip_logging_configuration, optimizer_iterations); 177 self._jhc = hail_package.HailContext.getOrCreate(; 178 self._jbackend, log, True, append, branching_factor, skip_logging_configuration, optimizer_iterations); 179 else:; --> 180 self._jbackend = hail_package.backend.spark.SparkBackend.apply(; 181 jsc, app_name, master, local, True, min_block_size, tmpdir, local_tmpdir); 182 self._jhc",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/11827:4784,log,log,4784,https://hail.is,https://github.com/hail-is/hail/issues/11827,2,['log'],['log']
Testability,. Gradle suite > Gradle test > is.hail.annotations.AnnotationsSuite.testReadWrite FAILED; org.apache.spark.SparkException at AnnotationsSuite.scala:76; Caused by: java.lang.AssertionError; Running test: Test method testEmptyKeys(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testEmptyKeys FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testIntervalIterator(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testIntervalIterator FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testIntervalIteratorWorksWithGeneralEndpoints(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testIntervalIteratorWorksWithGeneralEndpoints FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testIterateFromUntil(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testIterateFromUntil FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testLowerBound(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testLowerBound FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testQueryByKey(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testQueryByKey FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testRangeIterator(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testRangeIterator FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testUpperBound(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testUpperBound FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[0]([Ljava.lang.String;@49613eb0)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[0]([Ljava.lang.String;@49613eb0),MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4718:1608,Assert,AssertionError,1608,https://hail.is,https://github.com/hail-is/hail/issues/4718,1,['Assert'],['AssertionError']
Testability,". Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testNativeGlobal PASSED; Running test: Test method testNativePtr(is.hail.nativecode.NativeCodeSuite). Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testNativePtr PASSED; Running test: Test method testNativeUpcall(is.hail.nativecode.NativeCodeSuite); DEBUG: Logging set_test_msg ... Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testNativeUpcall PASSED; Running test: Test method testObjectArray(is.hail.nativecode.NativeCodeSuite). Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testObjectArray PASSED; Running test: Test method testShuffleAndJoinDoesntMemoryLeak(is.hail.expr.ir.TableIRSuite). Gradle suite > Gradle test > is.hail.expr.ir.TableIRSuite.testShuffleAndJoinDoesntMemoryLeak PASSED; Running test: Test method testBufferWriteReadDoubles(is.hail.annotations.UnsafeSuite). Gradle suite > Gradle test > is.hail.annotations.UnsafeSuite.testBufferWriteReadDoubles PASSED; Running test: Test method testCodec(is.hail.annotations.UnsafeSuite); #; # A fatal error has been detected by the Java Runtime Environment:; #; # SIGSEGV (0xb) at pc=0x00007fe4a85738ec, pid=23790, tid=0x00007fe48cdfa700; #; # JRE version: OpenJDK Runtime Environment (8.0_181-b13) (build 1.8.0_181-8u181-b13-0ubuntu0.18.04.1-b13); # Java VM: OpenJDK 64-Bit Server VM (25.181-b13 mixed mode linux-amd64 compressed oops); # Problematic frame:; # J 9008 C1 is.hail.annotations.UnsafeRow$.readBinary(Lis/hail/annotations/Region;J)[B (39 bytes) @ 0x00007fe4a85738ec [0x00007fe4a8573600+0x2ec]; #; # Core dump written. Default location: /home/BROAD.MIT.EDU/cvittal/src/hail/hail/core or core.23790 (max size 9223372036854775 kB). To ensure a full core dump, try ""ulimit -c unlimited"" before starting Java again; #; # An error report file with more information is saved as:; # /home/BROAD.MIT.EDU/cvittal/src/hail/hail/hs_err_pid23790.log; Compiled method (c1) 33969 8500 2 is.hail.annotations.UnsafeRow$::rea",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4718:9531,test,testBufferWriteReadDoubles,9531,https://hail.is,https://github.com/hail-is/hail/issues/4718,4,"['Test', 'test']","['Test', 'test', 'testBufferWriteReadDoubles', 'testCodec']"
Testability,". However, we intend to only run these steps when; the pip version changes (i.e. when we ""release""). These steps only perform work; when hail-is/hail lacks a tag for the pip version described in; `hail/Makefile`. Otherwise, they `exit 0` with an informative note. The `test_dataproc` step, unfortunately, builds hail. The hailctl artifacts are; placed in `gs://hail-common/hailctl/dataproc/ci_test_dataproc/...`. Otherwise; test_dataproc operates identically to `make test-dataproc`. The `deploy` step uses `wheel-container.tar` rather than building; Hail (again). I migrated the `deploy` and `test-dataproc` code out of the; `Makefile` and into bash scripts. I did not migrate the artifact upload out of the; `Makefile`. The `dev` scope is only intended for debugging production issues or; prospectively testing dataproc on a suspicious change set. ---. The PR test results are uninformative as to the correctness of this change; because these steps are not scoped `test`. I tested [test_dataproc in a dev; deploy](https://ci.hail.is/batches/32357). I have not tested `deploy.sh`. I take; responsibility for executing the next deploy. ---. If CI deploy is broken but CI can still run dev-deploys, then a developer may; deploy hail with `hailctl`:. ```; hailctl dev deploy hail-is/hail:master --steps deploy; ```. One may also deploy from a laptop. You need curl >=7.55.0 (that version; implemented reading headers from a file). Create $HOME/.pypirc and put this; there:. ```; [pypi]; username: hailteam; password: GET_THIS_FROM_THE_USUAL_PLACE; ```. get a github access token with repo; privileges (https://github.com/settings/tokens), create; $HOME/.github-oauth-header, and put this there:. ```; Authorization: token YOUR_ACCESS_TOKEN_HERE; ```. Now, deploy from your laptop:. ```; make deploy GITHUB_OAUTH_HEADER_FILE=$HOME/.github-oauth-header DEPLOY_REMOTE=THE_REMOTE_FOR_hail-is/hail; ```. ---. I added two new credentials:; - `pypi-credentials`: `hailgenetics` PyPI credentials, and; - `test-",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8550:1101,test,tested,1101,https://hail.is,https://github.com/hail-is/hail/pull/8550,1,['test'],['tested']
Testability,". I had to abandon the old approach for two reasons:. 1. Multiple JVMs race to download the JAR. In the new approach, the python worker process uses a; lock to ensure at most one coroutine is downloading a given version of a JAR at the same time. 2. The JVM assumes that a child ClassLoader does not redefine a class from the parent; ClassLoader. That's why ClassLoaders always prefer to load a class from the parent ClassLoader's; classes. When we decide to re-use JVMs or use a single multi-threaded JVM, we'll need to ensure the top-level; ClassLoader *does not have Hail on its classpath*. I looked briefly at this approach and found it; more work than the current approach. ---. My apologies for eliminating JVMProcess in this PR. It's an unrelated change which facilitated my; understanding worker.py. I essentially inlined JVMProcess into JVMJob and eliminated any duplicative; code. ---. After making this change I restored the tests. Some tests had bitrotted. In the process of fixing; those tests, I found a few other bugs. Fixing these lower-level bugs unlocked a number of new; tests. A couple tests (which were added since the service tests were removed) had to be marked as; failing. Here are the bugs I fixed:. 1. Correct the error message raised when tests are run in a non-main thread (we look for this; message and start an event loop for Hail's async code because asyncio refuses to start an event; loop in a non-main thread). 2. Use a `SafeRow` to copy the globals data out of a Region and into durable, GC'ed objects. 3. Re-enable serialization of GoogleStorageFS (including its private key, which we really shouldn't; do; Tim is working on it), which was broken (presumably) when we changed Scala versions. The; `var` modifier ensures the name is compiled as a JVM field. 4. Correctly convert from a `Byte` to an `Int`. By default `Byte` to `Int` conversion (which is done; automatically when you return a `Byte` from a function whose return type is `Int`) is; sign-preserving. T",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10390:1461,test,tests,1461,https://hail.is,https://github.com/hail-is/hail/pull/10390,1,['test'],['tests']
Testability,". I had to set --rows-per-partition to 40m to fix a `The requested number of tablets is over the permitted maximum (100)` error. I was able to write a small table. When I tried to write a larger file (~900 exomes) and I got:. ```; hail: writekudu: caught exception: org.kududb.client.NonRecoverableException: Too many attempts: KuduRpc(method=IsCreateTableDone, tablet=null, attempt=6, DeadlineTracker(timeout=10000, elapsed=7721), Deferred@1490962783(state=PENDING, result=null, callback=(continuation of Deferred@813205641 after org.kududb.client.AsyncKuduClient$4@2c0dff53@739114835) -> (continuation of Deferred@1748842457 after org.kududb.client.AsyncKuduClient$5@42031f30@1107500848) -> (continuation of Deferred@919337785 after org.kududb.client.AsyncKuduClient$5@75ff6dd4@1979674068) -> (continuation of Deferred@1962741581 after org.kududb.client.AsyncKuduClient$5@2edd647d@786261117) -> (continuation of Deferred@1202081964 after org.kududb.client.AsyncKuduClient$5@49391441@1228477505), errback=(continuation of Deferred@813205641 after org.kududb.client.AsyncKuduClient$4@2c0dff53@739114835) -> (continuation of Deferred@1748842457 after org.kududb.client.AsyncKuduClient$5@42031f30@1107500848) -> (continuation of Deferred@919337785 after org.kududb.client.AsyncKuduClient$5@75ff6dd4@1979674068) -> (continuation of Deferred@1962741581 after org.kududb.client.AsyncKuduClient$5@2edd647d@786261117) -> (continuation of Deferred@1202081964 after org.kududb.client.AsyncKuduClient$5@49391441@1228477505))); ```. In the Kudu logs, I'm seeing tons of:. ```; W0411 15:20:09.832504 129721 catalog_manager.cc:1880] TS a72be89d736f49a799e1b544197675be: Create Tablet RPC failed for tablet 6652d540f73a4ba5a0b9758a3aeeb1e4: Remote error: Service unavailable: CreateTablet request on kudu.tserver.TabletServerAdminService from 69.173.65.227:42904 dropped due to backpressure. The service queue is full; it has 50 items.; ```. Suggestions on how to proceed? Should I increase the service queue size?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/242#issuecomment-208516279:1578,log,logs,1578,https://hail.is,https://github.com/hail-is/hail/pull/242#issuecomment-208516279,1,['log'],['logs']
Testability,". Incorporate Firebase Auth in place of Auth0 for 3rd party access token benefits.; 3: Scorecard; 3a. Draft working GraphQL V4 scorecard implementation; 3b. Finish authenticated GraphQL V4 scorecard implementation; 4. Batch; 4a: Setup dev batch endpoint; 4b: Call batch endpoint (no auth), and return any data; 4c: List all available jobs; * By querying Batch api, or Kubernetes directly; 4d: Receive current status of 1 job; 4e: Authentication; 4f: Polish (longest step): make interacting with batch achievable within perceived 16ms.; * goal: subscribe to events in web socket; * may want to save user job state in a Hail-controlled database (possible to use Firebase or Mongo, may prefer relational db, maybe Postgres or MySQL).; 4other: Figure out state question (sufficient to use Kubernetes); 5. Basic notebook interface.; 6. Connect websocket logic (non-GraphQL); 7. Authenticate web socket via Oauth2; 8. Incorporate GraphQL subscriptions (first: GitHub API); 9. Write tests; 10. Mock GraphQL endpoints; 11. Integrate web and api server bits into CI (maybe should be prioritized earlier...I prefer to get draft of major functions done first; am new to writing tests for React/Node). ## Near-term goals (<= 6 mo); 1. Upload, download; 2. Launch clusters, pay for them; 3. ?. ## Longer-term goals; 1. Much simpler interface to Hail. I would like steps that can be performed without programming to be done so. I would prefer fasta->variant filtering to be done as in Bystro (at least from the interface standpoint), i.e without opening up a notebook. Common analyses pipelines should also be possible without any interaction with a python notebook: GWAS, rare-variant (SKAT) analyses have, it seems, relatively few permutations. Those should be behind UI primitives. At each stage of a ; 2. Social network bits: users should be able to share job state with other users (requested by Bystro users on 22q consortium project) at the least.; 3. Record job state using something like Merkle tree. Chec",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4931:7764,Mock,Mock,7764,https://hail.is,https://github.com/hail-is/hail/pull/4931,1,['Mock'],['Mock']
Testability,". Let me know if you want me to break it up. OK, I think this is ready for a look. What I've tested:. - hand deploy new auth, router-resolver to default,; - tested login/logout flow on web (auth.hail.is/login, /logout) and hailctl (hailctl auth login/logout); - then deploy in my namespace:. ```; hailctl dev deploy -b cseed/hail:auth -s deploy_auth,deploy_router,deploy_notebook2; ```. - and test login/logout flow via notebook2 (internal.hail.is/cseed/notebook2, etc.) and hailctl, where access to internal is mediated by production (default namespace) credentials. Note, to do this I copied the production oauth2 key to my namespace. We shouldn't do this in general and should create a shared dev oauth2 key. Alternatively, we should create a separate login flow doesn't use oauth2 but uses production credentials.; - and interactively tested notebook2 creating notebooks (but haven't tested the config of the notebooks themselves). Summary of changes:; - auth service that handles login/logout flow via Google OAuth2 and user verification via /userdata endpoint. Web sessions are stored in the aiohttp_session cookie (encrypted), command line sessions are stored in tokens file: tokens.json. Token files potentially contain tokens for multiple namespaces (e.g. default and cseed in the example workflow above).; - sessions are now started in the database, table `users.sessions`, which have session_id (32 random bytes, base64-encoded), user_id, creation time and max_age (for expiry); - I write notebook2 to use our async stack; - added a notion of ""deploy config"" that has three parts: location (one of external, k8s or gce), default_namespace (the default namespace to find services), and service_namespace (of overrides for specific services ... so e.g. you can use the default auth with batch in cseed). deploy_config main function is to construct URLs to contact services.; - JWTs and the jwt secret key are gone.; - Simplified configuration/data file handling by enforcing consistent defaul",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6892#issuecomment-527970251:1030,log,login,1030,https://hail.is,https://github.com/hail-is/hail/pull/6892#issuecomment-527970251,2,['log'],"['login', 'logout']"
Testability,". Test:. import hail; hail.init(master=""spark://localhost:7077""); P = 1; S = 1000; V = 50000; for N in range(350, 400, 1):; try:; mt = hail.balding_nichols_model(P, S, V, N); mt = hail.sample_qc(mt); mt = mt.filter_cols(mt.sample_qc.n_hom_var > V*0.32); print(""\n[PASS] with"", N, ""partitions:"", mt.count()); except Exception:; print(""\n[FAIL] with "", N, ""partitions""); break. Test Output (SIGSEGV is reported in Spark worker logs, see end):. 2020-06-10 10:29:56 WARN NativeCodeLoader:62 - Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; 	Setting default log level to ""WARN"".; 	To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).; 	Running on Apache Spark version 2.4.5; 	SparkUI available at http://US0HPN0036.cm.cluster:4047; 	Welcome to; 		 __ __ <>__; 		/ /_/ /__ __/ /; 	 / __ / _ `/ / /; 	 /_/ /_/\_,_/_/_/ version 0.2.44-6cfa355a1954; 	LOGGING: writing to /bmrn/apps/bmrn-hugelib/0.3.0/test/hail-20200610-1029-0.2.44-6cfa355a1954.log; 	2020-06-10 10:29:59 Hail: INFO: balding_nichols_model: generating genotypes for 1 populations, 1000 samples, and 50000 variants...; 	[Stage 1:==========================> (171 + 80) / 350]; 	[PASS] with 350 partitions: (50000, 984); 	2020-06-10 10:30:08 Hail: INFO: balding_nichols_model: generating genotypes for 1 populations, 1000 samples, and 50000 variants...; 	[Stage 3:==========================> (169 + 80) / 351]; 	[PASS] with 351 partitions: (50000, 998); 	2020-06-10 10:30:10 Hail: INFO: balding_nichols_model: generating genotypes for 1 populations, 1000 samples, and 50000 variants...; 	[Stage 5:=====================================================> (344 + 8) / 352]; 	[PASS] with 352 partitions: (50000, 1000); 	2020-06-10 10:30:13 Hail: INFO: balding_nichols_model: generating genotypes for 1 populations, 1000 samples, and 50000 variants...; 	[Stage 7:=================================> (222 + 80) / 353]; 	[PASS] with 353 partitions: (50000, 973",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8944:1708,test,test,1708,https://hail.is,https://github.com/hail-is/hail/issues/8944,1,['test'],['test']
Testability,". The order and structure is preserved for enrtries nonetheless. `#import libraries; import os; import hail as hl; from pprint import pprint. #### Start hail; hl.init(); hl.spark_context()`. /opt/conda/lib/python3.10/site-packages/hailtop/aiocloud/aiogoogle/user_config.py:44: UserWarning:. Reading spark-defaults.conf to determine GCS requester pays configuration. This is deprecated. Please use `hailctl config set gcs_requester_pays/project` and `hailctl config set gcs_requester_pays/buckets`. SLF4J: No SLF4J providers were found.; SLF4J: Defaulting to no-operation (NOP) logger implementation; SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.; SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.; SLF4J: Ignoring binding found at [jar:file:/usr/lib/spark/jars/log4j-slf4j-impl-2.18.0.jar!/org/slf4j/impl/StaticLoggerBinder.class]; SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).; Running on Apache Spark version 3.3.0; SparkUI available at http://saturn-3f2d119c-05e5-496d-97b9-8f40efff98a3-m.c.terra-db12d060.internal:36235/; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.126-ee77707f4fab; LOGGING: writing to /home/jupyter/Ellinor_Lubitz_PHB_Joint_Analyses/edit/hail-20231216-1801-0.2.126-ee77707f4fab.log. SparkContext. [Spark UI](http://saturn-3f2d119c-05e5-496d-97b9-8f40efff98a3-m.c.terra-db12d060.internal:36235/). Version; v3.3.0; Master; yarn; AppName; pyspark-shell. `#### Read vcf; vcfs = [""gs://path/to/bucket/chrY.*.hard_filtered_with_genotypes.vcf.gz""]. #####; ##### Read vcf file; mt = hl.import_vcf(vcfs , force_bgz= True, reference_genome='GRCh38', find_replace=('null', '.')). mt.count(); `. 2023-12-16 18:02:00.897 Hail: INFO: scanning VCF for sortedness... (4 + 3) / 7]; 2023-12-16 18:02:16.278 Hail: INF",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14102:2509,log,log,2509,https://hail.is,https://github.com/hail-is/hail/issues/14102,1,['log'],['log']
Testability,".. (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/Textualize/rich/commit/ec91917deb47b43188312e0e3f03bbab7e4e2e7e""><code>ec91917</code></a> changelog</li>; <li><a href=""https://github.com/Textualize/rich/commit/5360fe6fe4f582e5a5bec591cf7433ed85e6863d""><code>5360fe6</code></a> version bump</li>; <li><a href=""https://github.com/Textualize/rich/commit/e0d3aee1eccd424c98d05b94910f9d5ddb821a40""><code>e0d3aee</code></a> Merge pull request <a href=""https://redirect.github.com/Textualize/rich/issues/3132"">#3132</a> from Textualize/fix-markdown-on-light</li>; <li><a href=""https://github.com/Textualize/rich/commit/db07a2aad2c18a1a4ab2345bb2d5adbd2f9c0eaa""><code>db07a2a</code></a> Restore text</li>; <li><a href=""https://github.com/Textualize/rich/commit/44e36aaf6f8c5b4aba4d66bcf895b25c3b5fa32e""><code>44e36aa</code></a> Add default lexer</li>; <li><a href=""https://github.com/Textualize/rich/commit/32ec768f4e460dea5f043296c50fbeb909c8b616""><code>32ec768</code></a> fix test</li>; <li><a href=""https://github.com/Textualize/rich/commit/f6eca21a9b3910456c5be7efee5c7f22c79d1873""><code>f6eca21</code></a> fix markdown on light</li>; <li><a href=""https://github.com/Textualize/rich/commit/a972ca05522577de2f98eb7c957deead9c87b38f""><code>a972ca0</code></a> changelog</li>; <li><a href=""https://github.com/Textualize/rich/commit/bef0e50b63cf7294ae6c27bf8a79cbe3592599a0""><code>bef0e50</code></a> Merge pull request <a href=""https://redirect.github.com/Textualize/rich/issues/3130"">#3130</a> from Textualize/fix-table-inline-styles</li>; <li><a href=""https://github.com/Textualize/rich/commit/e30b822ecc264c5c4f984a023124d31d8052de49""><code>e30b822</code></a> Fix markdown table rendering issue.</li>; <li>Additional commits viewable in <a href=""https://github.com/Textualize/rich/compare/v12.6.0...v13.5.3"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compati",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13651:6031,test,test,6031,https://hail.is,https://github.com/hail-is/hail/pull/13651,2,['test'],['test']
Testability,"... and some infrastructure for generic row (variant) key. Some VSM methods require sample key is String, basically those that use pedigrees. I think it is feature complete but there is currently no way to create a non-string column key and there is no non-string column key tests.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1857:275,test,tests,275,https://hail.is,https://github.com/hail-is/hail/pull/1857,1,['test'],['tests']
Testabilitydone.; ERROR: Create cluster failed!; ERROR: gcloud crashed (AttributeError): 'Operation' object has no attribute 'details'. If you would like to report this issue, please run the following command:; gcloud feedback. To check gcloud for common problems, please run the following command:; gcloud info --run-diagnostics; gcloud command:; gcloud beta dataproc clusters create \; ci-test-6boype3d \; --image-version=1.2-deb9 \; --metadata=MINICONDA_VERSION=4.4.10,JAR=gs://hail-ci-0-1/temp/25aa42b2d6d442615931b2eb65c5f8e012de52a0/96d6daa14989dd0cff08b30ac1f1d53288171a54/hail.jar,ZIP=gs://hail-ci-0-1/temp/25aa42b2d6d442615931b2eb65c5f8e012de52a0/96d6daa14989dd0cff08b30ac1f1d53288171a54/hail.zip \; --properties=spark:spark.driver.memory=3g,spark:spark.driver.maxResultSize=0,spark:spark.task.maxFailures=20,spark:spark.kryoserializer.buffer.max=1g,spark:spark.driver.extraJavaOptions=-Xss4M,spark:spark.executor.extraJavaOptions=-Xss4M,hdfs:dfs.replication=1,dataproc:dataproc.logging.stackdriver.enable=false,dataproc:dataproc.monitoring.stackdriver.enable=false \; --initialization-actions=gs://dataproc-initialization-actions/conda/bootstrap-conda.sh,gs://hail-common/cloudtools/init_notebook1.py,gs://hail-common/vep/vep/vep85-loftee-1.0-GRCh37-init-docker.sh \; --master-machine-type=n1-standard-1 \; --master-b",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4530#issuecomment-475782518:8179,test,test-,8179,https://hail.is,https://github.com/hail-is/hail/issues/4530#issuecomment-475782518,1,['test'],['test-']
Testability,"...................done.; ERROR: Create cluster failed!; ERROR: gcloud crashed (AttributeError): 'Operation' object has no attribute 'details'. If you would like to report this issue, please run the following command:; gcloud feedback. To check gcloud for common problems, please run the following command:; gcloud info --run-diagnostics; gcloud command:; gcloud beta dataproc clusters create \; ci-test-6boype3d \; --image-version=1.2-deb9 \; --metadata=MINICONDA_VERSION=4.4.10,JAR=gs://hail-ci-0-1/temp/25aa42b2d6d442615931b2eb65c5f8e012de52a0/96d6daa14989dd0cff08b30ac1f1d53288171a54/hail.jar,ZIP=gs://hail-ci-0-1/temp/25aa42b2d6d442615931b2eb65c5f8e012de52a0/96d6daa14989dd0cff08b30ac1f1d53288171a54/hail.zip \; --properties=spark:spark.driver.memory=3g,spark:spark.driver.maxResultSize=0,spark:spark.task.maxFailures=20,spark:spark.kryoserializer.buffer.max=1g,spark:spark.driver.extraJavaOptions=-Xss4M,spark:spark.executor.extraJavaOptions=-Xss4M,hdfs:dfs.replication=1,dataproc:dataproc.logging.stackdriver.enable=false,dataproc:dataproc.monitoring.stackdriver.enable=false \; --initialization-actions=gs://dataproc-initialization-actions/conda/bootstrap-conda.sh,gs://hail-common/cloudtools/init_notebook1.py,gs://hail-common/vep/vep/vep85-loftee-1.0-GRCh37-init-docker.sh \; --master-machine-type=n1-standard-1 \; --master-boot-disk-size=40GB \; --num-master-local-ssds=0 \; --num-preemptible-workers=0 \; --num-worker-local-ssds=0 \; --num-workers=2 \; --preemptible-worker-boot-disk-size=40GB \; --worker-boot-disk-size=40 \; --worker-machine-type=n1-standard-1 \; --zone=us-central1-b \; --initialization-action-timeout=20m \; --bucket=hail-ci-0-1-dataproc-staging-bucket \; --max-idle=10m; Starting cluster 'ci-test-6boype3d'...; Traceback (most recent call last):; File ""/home/hail/.conda/envs/hail/bin/cluster"", line 10, in <module>; sys.exit(main()); File ""/home/hail/.conda/envs/hail/lib/python3.6/site-packages/cloudtools/__main__.py"", line 85, in main; start.main(args); File ""/h",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4530#issuecomment-475782518:8776,log,logging,8776,https://hail.is,https://github.com/hail-is/hail/issues/4530#issuecomment-475782518,1,['log'],['logging']
Testability,"...: mt = mt.annotate_entries(x = mt.GT.n_alt_alleles() * mt2.af) ; Initializing Hail with default parameters...; 2020-07-28 10:40:36 WARN Utils:66 - Your hostname, wm06b-953 resolves to a loopback address: 127.0.0.1; using 192.168.0.54 instead (on interface en0); 2020-07-28 10:40:36 WARN Utils:66 - Set SPARK_LOCAL_IP if you need to bind to another address; 2020-07-28 10:40:37 WARN NativeCodeLoader:62 - Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).; 2020-07-28 10:40:37 WARN Hail:37 - This Hail JAR was compiled for Spark 2.4.5, running with Spark 2.4.1.; Compatibility is not guaranteed.; Running on Apache Spark version 2.4.1; SparkUI available at http://192.168.0.54:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.49-c6975678edc4; LOGGING: writing to /Users/dking/projects/hail/hail/hail-20200728-1040-0.2.49-c6975678edc4.log; 2020-07-28 10:40:39 Hail: INFO: balding_nichols_model: generating genotypes for 2 populations, 5 samples, and 5 variants...; 2020-07-28 10:40:39 Hail: INFO: balding_nichols_model: generating genotypes for 2 populations, 5 samples, and 5 variants...; Traceback (most recent call last):; File ""<ipython-input-13-f638f6c0399a>"", line 4, in <module>; mt = mt.annotate_entries(x = mt.GT.n_alt_alleles() * mt2.af); File ""/Users/dking/projects/hail/hail/python/hail/expr/expressions/typed_expressions.py"", line 1988, in __mul__; return self._bin_op_numeric(""*"", other); File ""/Users/dking/projects/hail/hail/python/hail/expr/expressions/base_expression.py"", line 567, in _bin_op_numeric; return me._bin_op(name, other, ret_type); File ""/Users/dking/projects/hail/hail/python/hail/expr/expressions/base_expression.py"", line 577, in _bin_op; indices, aggregations = unify_all(self, other); File ""/Users/dking/projects/hail/hail/python/hail/e",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9163:1302,LOG,LOGGING,1302,https://hail.is,https://github.com/hail-is/hail/issues/9163,1,['LOG'],['LOGGING']
Testability,"...; / [1 files][910.3 KiB/369.7 MiB] - - [1 files][ 51.9 MiB/369.7 MiB] \ | | [1 files][107.6 MiB/369.7 MiB] / - - [1 files][162.3 MiB/369.7 MiB] \ \ [1 files][213.9 MiB/369.7 MiB] | / / [1 files][286.6 MiB/369.7 MiB] - \ \ [1 files][342.1 MiB/369.7 MiB] |; Operation completed over 2 objects/369.7 MiB.; | [2 files][369.7 MiB/369.7 MiB] 2024/01/17 20:59:27 Localization script execution complete.; 2024/01/17 20:59:38 Done localization.; 2024/01/17 20:59:39 Running user action: docker run -v /mnt/local-disk:/cromwell_root --entrypoint=/bin/bash hailgenetics/hail@sha256:3f22576793ce3161893aed2bd40949b1fc822d2b7e6517dc0ac993b62badaff8 /cromwell_root/script; Picked up _JAVA_OPTIONS: -Djava.io.tmpdir=/cromwell_root/tmp.81879b1c; Picked up _JAVA_OPTIONS: -Djava.io.tmpdir=/cromwell_root/tmp.81879b1c; 24/01/17 20:59:51 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).; Running on Apache Spark version 3.3.2; SparkUI available at http://523bc6a27b69:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.127-bb535cd096c5; LOGGING: writing to /cromwell_root/hail-20240117-2059-0.2.127-bb535cd096c5.log; 2024-01-17 21:01:32.019 Hail: INFO: Found 34523 samples in fam file.; 2024-01-17 21:01:32.020 Hail: INFO: Found 18377527 variants in bim file.; 2024-01-17 21:02:45.920 Hail: INFO: Found 34523 samples in fam file.; 2024-01-17 21:02:45.920 Hail: INFO: Found 18377527 variants in bim file.; Traceback (most recent call last):; File ""<stdin>"", line 38, in <module>; File ""<decorator-gen-1366>"", line 2, in write; File ""/usr/local/lib/python3.10/dist-packages/hail/typecheck/check.py"", line 584, in wrapper; return __original_func(*args_, **kwargs_); File ""/usr/local/lib/python3.10/dist-packages/hail/matrixtable.py"", line 2807, in write; Env.backend().e",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14168:11169,log,logging,11169,https://hail.is,https://github.com/hail-is/hail/issues/14168,1,['log'],['logging']
Testability,"../resources/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/include/darwin -MD -MF build/Region.d -MT build/Region.o -c Region.cpp; c++ -o build/Hadoop.o -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/include/darwin -MD -MF build/Hadoop.d -MT build/Hadoop.o -c Hadoop.cpp; c++ -fvisibility=default -dynamiclib -Wl,-undefined,dynamic_lookup -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/include/darwin build/davies.o build/ibs.o build/Decoder.o build/Encoder.o build/Logging.o build/NativeCodeSuite.o build/NativeLongFunc.o build/NativeModule.o build/NativePtr.o build/NativeStatus.o build/ObjectArray.o build/PartitionIterators.o build/Region.o build/Upcalls.o build/Hadoop.o -o lib/darwin/libhail.dylib; > Building 33% > :compileScala. :compileScala; :processResources; :classes; :compileTestJava UP-TO-DATE; :compileTestScala; :processTestResources UP-TO-DATE; :testClasses; :test; Running test: Test method testForwardingOps[0](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),MakeStruct(WrappedArray((a,I32(1)), (b,ApplyBinaryPrimOp(Add(),Ref(x,int32),I32(2)))))))(is.hail.expr.ir.ForwardLetsSuite). Gradle suite > Gradle test > is.hail.expr.ir.ForwardLetsSuite.testForwardingOps[0](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),MakeStruct(WrappedArray((a,I32(1)), (b,ApplyBinaryPrimOp(Add(),Ref(x,int32),I32(2))))))) PASSED; Running test: Test method testForwardingOps[1](Let(x,ApplyBinaryPrimOp(Add(),In(0,int32),In(0,int32)),MakeTuple(WrappedAr",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6083#issuecomment-492893925:2082,Log,Logging,2082,https://hail.is,https://github.com/hail-is/hail/pull/6083#issuecomment-492893925,1,['Log'],['Logging']
Testability,".0 fix_misencoded_quality_scores=false allow_potentially_misencoded_quality_scores=false performanceLog=null useOriginalQualities=false BQSR=null quantize_quals=0 disable_indel_quals=false emit_original_quals=false preserve_qscores_less_than=6 defaultBaseQualities=-1 validation_strictness=SILENT remove_program_records=false keep_program_records=false unsafe=null num_threads=1 num_cpu_threads_per_data_thread=1 num_io_threads=0 monitorThreadEfficiency=false num_bam_file_handles=null read_group_black_list=null pedigree=[] pedigreeString=[] pedigreeValidationType=STRICT allow_intervals_with_unindexed_bam=false generateShadowBCF=false logging_level=INFO log_to_file=null help=false variant=(RodBinding name=variant source=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.unfiltered.vcf) discordance=(RodBinding name= source=UNBOUND) concordance=(RodBinding name= source=UNBOUND) out=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub no_cmdline_in_header=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub sites_only=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub bcf=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub sample_name=[] sample_expressions=null sample_file=null exclude_sample_name=[] exclude_sample_file=[] select_expressions=[] excludeNonVariants=false excludeFiltered=false regenotype=false restrictAllelesTo=ALL keepOriginalAC=false mendelianViolation=false mendelianViolationQualThreshold=0.0 select_random_fraction=0.0 remove_fraction_genotypes=0.0 selectTypeToInclude=[INDEL] keepIDs=null fullyDecode=false forceGenotypesDecode=false justRead=false maxIndelSize=2147483647 ALLOW_NONOVERLAPPING_COMMAND_LINE_SAMPLES=false filter_mismatching_base_and_quals=false""; ##UnifiedGenotyper=""analysis_type=UnifiedGenotyper input_file=[/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.bam.list] read_buffer_size=null phone_home=STANDARD gatk_key=null tag=NA read_filter=[] intervals=[/seq/dax/all_1kg_exomes/v1/scatter/temp_0001_of_1200/scattere",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658:12883,stub,stubs,12883,https://hail.is,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658,1,['stub'],['stubs']
Testability,".0.0.0', 5000); await site.start(); ; try:; token = secrets.token_urlsafe(32); b = create_batch(; client, callback=url_for('/test'), attributes={'foo': 'bar', 'name': 'test_callback'}, token=token; ); head = b.create_job('alpine:3.8', command=['echo', 'head']); b.create_job('alpine:3.8', command=['echo', 'tail'], parents=[head]); b.submit(); await asyncio.wait_for(callback_event.wait(), 5 * 60); callback_body = callback_bodies[0]; ; # verify required fields present; callback_body.pop('cost'); callback_body.pop('msec_mcpu'); callback_body.pop('time_created'); callback_body.pop('time_closed'); callback_body.pop('time_completed'); callback_body.pop('duration'); callback_body.pop('duration_ms'); callback_body.pop('cost_breakdown'); > assert callback_body == {; 'id': b.id,; 'user': 'test',; 'billing_project': 'test',; 'token': token,; 'state': 'success',; 'complete': True,; 'closed': True,; 'n_jobs': 2,; 'n_completed': 2,; 'n_succeeded': 2,; 'n_failed': 0,; 'n_cancelled': 0,; 'attributes': {'foo': 'bar', 'name': 'test_callback'},; }, callback_body; E AssertionError: {'attributes': {'client_job': '8051758-182', 'foo': 'bar', 'name': 'test_callback'}, 'billing_project': 'test', 'closed': True, 'complete': True, ...}; E assert {'id': 260, 'user': 'test', 'billing_project': 'test', 'token': 'dL_z32z_mbXzpd2hcI3aVy3rySdAOjxPQoqAdERnyzg', 'state': 'success', 'complete': True, 'closed': True, 'n_jobs': 2, 'n_completed': 2, 'n_succeeded': 2, 'n_failed': 0, 'n_cancelled': 0, 'attributes': {'name': 'test_callback', 'foo': 'bar', 'client_job': '8051758-182'}} == {'id': 260, 'user': 'test', 'billing_project': 'test', 'token': 'dL_z32z_mbXzpd2hcI3aVy3rySdAOjxPQoqAdERnyzg', 'state': 'success', 'complete': True, 'closed': True, 'n_jobs': 2, 'n_completed': 2, 'n_succeeded': 2, 'n_failed': 0, 'n_cancelled': 0, 'attributes': {'foo': 'bar', 'name': 'test_callback'}}; E Common items:; E {'billing_project': 'test',; E 'closed': True,; E 'complete': True,; E 'id': 260,; E 'n_cancelled': 0,; E",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13739#issuecomment-1739224427:1668,test,test,1668,https://hail.is,https://github.com/hail-is/hail/pull/13739#issuecomment-1739224427,4,"['Assert', 'test']","['AssertionError', 'test']"
Testability,".0.0.1 - - [13/Nov/2018 18:19:31] ""POST /jobs/create HTTP/1.1"" 200 -; INFO	| 2018-11-13 18:19:31,745 	| _internal.py 	| _log:88 | 127.0.0.1 - - [13/Nov/2018 18:19:31] ""POST /pod_changed HTTP/1.1"" 204 -; INFO	| 2018-11-13 18:19:31,764 	| _internal.py 	| _log:88 | 127.0.0.1 - - [13/Nov/2018 18:19:31] ""POST /pod_changed HTTP/1.1"" 204 -; ERROR	| 2018-11-13 18:19:31,779 	| app.py 	| log_exception:1761 | Exception on /pod_changed [POST]; Traceback (most recent call last):; File ""/Users/bking/miniconda3/envs/hail-batch/lib/python3.6/site-packages/flask/app.py"", line 2292, in wsgi_app; response = self.full_dispatch_request(); File ""/Users/bking/miniconda3/envs/hail-batch/lib/python3.6/site-packages/flask/app.py"", line 1815, in full_dispatch_request; rv = self.handle_user_exception(e); File ""/Users/bking/miniconda3/envs/hail-batch/lib/python3.6/site-packages/flask/app.py"", line 1718, in handle_user_exception; reraise(exc_type, exc_value, tb); File ""/Users/bking/miniconda3/envs/hail-batch/lib/python3.6/site-packages/flask/_compat.py"", line 35, in reraise; raise value; File ""/Users/bking/miniconda3/envs/hail-batch/lib/python3.6/site-packages/flask/app.py"", line 1813, in full_dispatch_request; rv = self.dispatch_request(); File ""/Users/bking/miniconda3/envs/hail-batch/lib/python3.6/site-packages/flask/app.py"", line 1799, in dispatch_request; return self.view_functions[rule.endpoint](**req.view_args); File ""/Users/bking/projects/hail/batch/batch/server.py"", line 354, in pod_changed; update_job_with_pod(job, pod); File ""/Users/bking/projects/hail/batch/batch/server.py"", line 331, in update_job_with_pod; assert container_status.name == 'default'; AssertionError; INFO	| 2018-11-13 18:19:31,780 	| _internal.py 	| _log:88 | 127.0.0.1 - - [13/Nov/2018 18:19:31] ""POST /pod_changed HTTP/1.1"" 500 -; ```. ## Proposed Solution. Do not accept arbitrary specs, and in particular do not accept a name. I think batch should just take an image, a command, and maybe some volumes and volume mounts.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4773:3881,assert,assert,3881,https://hail.is,https://github.com/hail-is/hail/issues/4773,2,"['Assert', 'assert']","['AssertionError', 'assert']"
Testability,".0.3|attrs==23.1.0|avro==1.11.3|azure-common==1.1.28|azure-core==1.29.5|azure-identity==1.15.0|azure-mgmt-core==1.4.0|azure-mgmt-storage==20.1.0|azure-storage-blob==12.19.0|bokeh==3.3.1|boto3==1.33.1|botocore==1.33.1|cachetools==5.3.2|certifi==2023.11.17|cffi==1.16.0|charset-normalizer==3.3.2|click==8.1.7|commonmark==0.9.1|contourpy==1.2.0|cryptography==41.0.7|decorator==4.4.2|deprecated==1.2.14|dill==0.3.7|frozenlist==1.4.0|google-auth==2.23.4|google-auth-oauthlib==0.8.0|humanize==1.1.0|idna==3.6|isodate==0.6.1|janus==1.0.0|jinja2==3.1.2|jmespath==1.0.1|jproperties==2.1.1|markupsafe==2.1.3|msal==1.25.0|msal-extensions==1.0.0|msrest==0.7.1|multidict==6.0.4|nest-asyncio==1.5.8|numpy==1.26.2|oauthlib==3.2.2|orjson==3.9.10|packaging==23.2|pandas==2.1.3|parsimonious==0.10.0|pillow==10.1.0|plotly==5.18.0|portalocker==2.8.2|protobuf==3.20.2|py4j==0.10.9.5|pyasn1==0.5.1|pyasn1-modules==0.3.0|pycares==4.4.0|pycparser==2.21|pygments==2.17.2|pyjwt[crypto]==2.8.0|python-dateutil==2.8.2|python-json-logger==2.0.7|pytz==2023.3.post1|pyyaml==6.0.1|regex==2023.10.3|requests==2.31.0|requests-oauthlib==1.3.1|rich==12.6.0|rsa==4.9|s3transfer==0.8.0|scipy==1.11.4|six==1.16.0|sortedcontainers==2.4.0|tabulate==0.9.0|tenacity==8.2.3|tornado==6.3.3|typer==0.9.0|typing-extensions==4.8.0|tzdata==2023.3|urllib3==1.26.18|uvloop==0.19.0;sys_platform!=""win32""|wrapt==1.16.0|xyzservices==2023.10.1|yarl==1.9.3 \; ---; > '--metadata=^|||^WHEEL=gs://hail-30-day/hailctl/dataproc/dking-dev/0.2.126-a51eabd65859/hail-0.2.126-py3-none-any.whl|||PKGS=aiodns==2.0.0|aiohttp==3.9.1|aiosignal==1.3.1|async-timeout==4.0.3|attrs==23.1.0|avro==1.11.3|azure-common==1.1.28|azure-core==1.29.5|azure-identity==1.15.0|azure-mgmt-core==1.4.0|azure-mgmt-storage==20.1.0|azure-storage-blob==12.19.0|bokeh==3.3.1|boto3==1.33.1|botocore==1.33.1|cachetools==5.3.2|certifi==2023.11.17|cffi==1.16.0|charset-normalizer==3.3.2|click==8.1.7|commonmark==0.9.1|contourpy==1.2.0|cryptography==41.0.7|decorator==4.4.2|deprecated==1.2.14|dil",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14127:2880,log,logger,2880,https://hail.is,https://github.com/hail-is/hail/pull/14127,1,['log'],['logger']
Testability,".2.2-SNAPSHOT</li>; <li><a href=""https://github.com/apache/spark/commit/ea8ce995b7651bda7ef8c2e89c39b92f17e55402""><code>ea8ce99</code></a> Preparing Spark release v3.2.1-rc2</li>; <li><a href=""https://github.com/apache/spark/commit/66e1231621fc0721a8b1a5e77a8ff84b8e665ea8""><code>66e1231</code></a> [SPARK-37859][SQL] Do not check for metadata during schema comparison</li>; <li><a href=""https://github.com/apache/spark/commit/a58b8a864bb03bcdfe69b157bc7aec39b68556fa""><code>a58b8a8</code></a> [SPARK-37855][SQL][3.2] IllegalStateException when transforming an array insi...</li>; <li><a href=""https://github.com/apache/spark/commit/31dfbdeb1b076f521bc3fa4fd9b97e425c20da31""><code>31dfbde</code></a> [SPARK-37871][TESTS] Use <code>python3</code> instead of <code>python</code> in BaseScriptTransform...</li>; <li><a href=""https://github.com/apache/spark/commit/deb6776b705423141abe92715c3d93b23f082503""><code>deb6776</code></a> [SPARK-37866][TESTS] Set <code>file.encoding</code> to UTF-8 for SBT tests</li>; <li><a href=""https://github.com/apache/spark/commit/db1023c728c5e0bdcd4ef457cf5f7ba4f13cb79d""><code>db1023c</code></a> [SPARK-37860][UI] Fix taskindex in the stage page task event timeline</li>; <li>Additional commits viewable in <a href=""https://github.com/apache/spark/compare/v3.1.1...v3.2.1"">compare view</a></li>; </ul>; </details>; <br />. Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge thi",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11547:1852,test,tests,1852,https://hail.is,https://github.com/hail-is/hail/pull/11547,1,['test'],['tests']
Testability,".3 KiB] Copying gs://hui-sandbox/ICA-AGD/plink1/chr12.bim...; / [1 files][910.3 KiB/369.7 MiB] - - [1 files][ 51.9 MiB/369.7 MiB] \ | | [1 files][107.6 MiB/369.7 MiB] / - - [1 files][162.3 MiB/369.7 MiB] \ \ [1 files][213.9 MiB/369.7 MiB] | / / [1 files][286.6 MiB/369.7 MiB] - \ \ [1 files][342.1 MiB/369.7 MiB] |; Operation completed over 2 objects/369.7 MiB.; | [2 files][369.7 MiB/369.7 MiB] 2024/01/17 20:59:27 Localization script execution complete.; 2024/01/17 20:59:38 Done localization.; 2024/01/17 20:59:39 Running user action: docker run -v /mnt/local-disk:/cromwell_root --entrypoint=/bin/bash hailgenetics/hail@sha256:3f22576793ce3161893aed2bd40949b1fc822d2b7e6517dc0ac993b62badaff8 /cromwell_root/script; Picked up _JAVA_OPTIONS: -Djava.io.tmpdir=/cromwell_root/tmp.81879b1c; Picked up _JAVA_OPTIONS: -Djava.io.tmpdir=/cromwell_root/tmp.81879b1c; 24/01/17 20:59:51 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).; Running on Apache Spark version 3.3.2; SparkUI available at http://523bc6a27b69:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.127-bb535cd096c5; LOGGING: writing to /cromwell_root/hail-20240117-2059-0.2.127-bb535cd096c5.log; 2024-01-17 21:01:32.019 Hail: INFO: Found 34523 samples in fam file.; 2024-01-17 21:01:32.020 Hail: INFO: Found 18377527 variants in bim file.; 2024-01-17 21:02:45.920 Hail: INFO: Found 34523 samples in fam file.; 2024-01-17 21:02:45.920 Hail: INFO: Found 18377527 variants in bim file.; Traceback (most recent call last):; File ""<stdin>"", line 38, in <module>; File ""<decorator-gen-1366>"", line 2, in write; File ""/usr/local/lib/python3.10/dist-packages/hail/typecheck/check.py"", line 584, in wrapper; return __original_func(*args_, **kwargs_); File ""/usr/local/lib/python3.10/dist-packages/",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14168:11137,log,log,11137,https://hail.is,https://github.com/hail-is/hail/issues/14168,1,['log'],['log']
Testability,".3.0"">https://github.com/saghul/pycares/compare/pycares-4.2.2...pycares-4.3.0</a></p>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/saghul/pycares/commit/036aafd253b39f7459a86a5574daae8c5b681bc2""><code>036aafd</code></a> Bump version to 4.3.0</li>; <li><a href=""https://github.com/saghul/pycares/commit/22a37d760349787704f8901c19e149915a7f1b26""><code>22a37d7</code></a> Update c-ares submodule to 1.18.1</li>; <li><a href=""https://github.com/saghul/pycares/commit/b5165834724340d27da642f554431514fd62ccb4""><code>b516583</code></a> Improve test compatibility with pytest</li>; <li><a href=""https://github.com/saghul/pycares/commit/356118f2985de1fdb09d2db8951f592fc6418fda""><code>356118f</code></a> Drop tox</li>; <li><a href=""https://github.com/saghul/pycares/commit/baad65cd4088f7a7108e3b2e3d5c1f4b97fc6a7e""><code>baad65c</code></a> Drop CPython 3.6</li>; <li><a href=""https://github.com/saghul/pycares/commit/24fea0ce9988c3985892104f55c4ad256e28a78f""><code>24fea0c</code></a> Run tests on Python 3.11</li>; <li><a href=""https://github.com/saghul/pycares/commit/0e970c4b27bcdc940d972eaf3c57a3c93e79be78""><code>0e970c4</code></a> Add Python 3.11 classifier to setup.py</li>; <li><a href=""https://github.com/saghul/pycares/commit/05c74ef9e4f302ba433368f3c5c714abcadec40c""><code>05c74ef</code></a> Fix some tests that depended on external sites</li>; <li><a href=""https://github.com/saghul/pycares/commit/06d1ecdd57d4da4ddbe751463c576dcaf0f3baf8""><code>06d1ecd</code></a> build: bump cibuildwheel to build for Python 3.11 + CI total time speedups</li>; <li>See full diff in <a href=""https://github.com/saghul/pycares/compare/pycares-4.2.2...pycares-4.3.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pycares&package-manager=pip&previous-version=4.2.2&new-version=4.3.0)](https://docs.github.com/en/github/managing-securit",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12559:2740,test,tests,2740,https://hail.is,https://github.com/hail-is/hail/pull/12559,1,['test'],['tests']
Testability,".8/dist-packages/hail/backend/service_backend.py:509: in _async_execute; _, resp, timings = await self._rpc('execute(...)', inputs, ir=ir, progress=progress); /usr/local/lib/python3.8/dist-packages/hail/backend/service_backend.py:451: in _rpc; result_bytes = await retry_transient_errors(self._read_output, ir, iodir + '/out'); /usr/local/lib/python3.8/dist-packages/hailtop/utils/utils.py:781: in retry_transient_errors; return await retry_transient_errors_with_debug_string('', 0, f, *args, **kwargs); /usr/local/lib/python3.8/dist-packages/hailtop/utils/utils.py:794: in retry_transient_errors_with_debug_string; return await f(*args, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . self = <hail.backend.service_backend.ServiceBackend object at 0x7f63d6b90bb0>; ir = <hail.ir.ir.TableWrite object at 0x7f63d4e70c70>; output_uri = 'hail-az://haildevtest/test/tmp/hail/FCIxoO1REfjctjXVpyHiF1/vwzzlTSQqo/out'. async def _read_output(self, ir: Optional[BaseIR], output_uri: str) -> bytes:; assert self._batch; ; try:; driver_output = await self._async_fs.open(output_uri); except FileNotFoundError as exc:; raise FatalError('Hail internal error. Please contact the Hail team and provide the following information.\n\n' + yamlx.dump({; 'service_backend_debug_info': self.debug_info(),; 'batch_debug_info': await self._batch.debug_info(); })) from exc; ; async with driver_output as outfile:; success = await read_bool(outfile); if success:; return await read_bytes(outfile); ; short_message = await read_str(outfile); expanded_message = await read_str(outfile); error_id = await read_int(outfile); ; reconstructed_error = fatal_error_from_java_error_triplet(short_message, expanded_message, error_id); if ir is None:; raise reconstructed_error; > raise reconstructed_error.maybe_user_error(ir); E hail.utils.java.FatalError: NativeIoException: readAddress(..) failed: Connection reset by peer; E ; E Java stack trace:; E io.netty.channel.unix.Errors$NativeI",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12980:3454,assert,assert,3454,https://hail.is,https://github.com/hail-is/hail/issues/12980,1,['assert'],['assert']
Testability,.847 Requester: INFO: request GET http://batch.hail/api/v1alpha/batches/6627669\n2022-11-15 20:31:27.880 Requester: INFO: request GET http://batch.hail/api/v1alpha/batches/6627669 response 200\n2022-11-15 20:31:27.880 ServiceBackend$: INFO: parallelizeAndComputeWithIndex: pty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY=: reading results\n2022-11-15 20:31:27.881 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.0\n2022-11-15 20:31:28.080 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.0 response 200\n2022-11-15 20:31:28.104 ServiceBackend$: INFO: result 0 complete - 8157265 bytes\n2022-11-15 20:31:28.104 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.1\n2022-11-15 20:31:28.293 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.1 response 200\n2022-11-15 20:31:28.313 ServiceBackend$: INFO: result 1 complete - 8157265 bytes\n2022-11-15 20:31:28.313 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.2\n2022-11-15 20:31:28.522 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.2 response 200\n2022-11-15 20:31:28.587 ServiceBackend$: INFO: result 2 complete - 8157265 bytes\n2022-11-15 20:31:28.587 Requester: INFO: request GET http://memory.hail/api/v1alpha/object,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:36059,test,test-,36059,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,".; hailctl batch billing: error: invalid choice: 'fake' (choose from 'list', 'get'); Unclosed client session; client_session: <aiohttp.client.ClientSession object at 0x111288208>; (base) wmecc-475:hail jigold$ hailctl batch billing list; - accrued_cost: 0.0; billing_project: ci; cost: null; limit: null; users: [ci]; - accrued_cost: 0.0012024241022130966; billing_project: test; cost: 0.0012024241022130966; limit: null; users: [test]; - accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]; - accrued_cost: 0.0; billing_project: test-zero-limit; cost: null; limit: 0.0; users: [test]. (base) wmecc-475:hail jigold$ hailctl batch billing get; usage: hailctl batch billing get [-h] [-o {yaml,json}] billing_project; hailctl batch billing get: error: the following arguments are required: billing_project; Unclosed client session; client_session: <aiohttp.client.ClientSession object at 0x10a635208>; (base) wmecc-475:hail jigold$ hailctl batch billing get test-tiny-limit; accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]. (base) wmecc-475:hail jigold$ hailctl batch billing get test-tiny-limit; accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]. Unclosed client session; client_session: <aiohttp.client.ClientSession object at 0x10cfe2278>; Unclosed connector; connections: ['[(<aiohttp.client_proto.ResponseHandler object at 0x10d062c78>, 2.214990943)]']; connector: <aiohttp.connector.TCPConnector object at 0x10cfe21d0>; (base) wmecc-475:hail jigold$ hailctl batch billing get test-tiny-limit; accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]. (base) wmecc-475:hail jigold$ hailctl batch; usage: hailctl batch [-h] {billing,list,get,cancel,delete,log,job,wait} ... Manage batches runnin",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9385#issuecomment-684964006:1581,test,test-tiny-limit,1581,https://hail.is,https://github.com/hail-is/hail/pull/9385#issuecomment-684964006,1,['test'],['test-tiny-limit']
Testability,".; ldd (GNU libc) 2.12; Copyright (C) 2010 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.; Written by Roland McGrath and Ulrich Drepper. ```. This is an error we are getting when submitted to the hadoop cluster. This runs fine locally. ```; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.4-d602a3d7472d; LOGGING: writing to /restricted/projectnb/ukbiobank/ad/analysis/ukb.v3/hail-20190122-0019-0.2.4-d602a3d7472d.log; 2019-01-22 00:19:54 Hail: INFO: Number of BGEN files parsed: 1; 2019-01-22 00:19:54 Hail: INFO: Number of samples in BGEN files: 487409; 2019-01-22 00:19:54 Hail: INFO: Number of variants across all BGEN files: 1261158; ----------------------------------------; Global fields:; None; ----------------------------------------; Column fields:; 's': str; ----------------------------------------; Row fields:; 'locus': locus<GRCh37>; 'alleles': array<str>; 'rsid': str; 'varid': str; ----------------------------------------; Entry fields:; 'GT': call; 'GP': array<float64>; 'dosage': float64; ----------------------------------------; Column key: ['s']; Row key: ['locus', 'alleles']; ----------------------------------------; [Stage 0:> (0 + 16) / 292]Traceback (most recent call last):; File ""/restricted/projectnb/ukbiobank/ad/analysis/ukb.v3/bgen_count.py"", line 13, in <module>; print(""Count:"",mt.count()); File ""/restricted/projectnb/genpro/github/hail/hail/build/distributions/hail-python.zip/hail/matrixtable.py"", line 2131, in count; File ""/share/pkg/spark/2.2.1/install/python/lib/py4j-0.10.4-src.zip/py4j/java_gateway.py"", line 1133, in __call__; File ""/restricted/projectnb/genpro/github/hail/hail/build/distributions/hail-python.zip/hail/utils/java.py"", line 210, in deco; hail.utils.java.FatalError: SparkException: Job aborted due to stage failure: Task 7 in stage 0.0 failed 4 times, most recent failure:",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4733#issuecomment-456417572:6319,log,log,6319,https://hail.is,https://github.com/hail-is/hail/issues/4733#issuecomment-456417572,1,['log'],['log']
Testability,".</h3>. #### Changes included in this PR. - Changes to the following files to upgrade the vulnerable dependencies to a fixed version:; - gear/pinned-requirements.txt. #### Vulnerabilities that will be fixed. ##### By pinning:; Severity | Priority Score (*) | Issue | Upgrade | Breaking Change | Exploit Maturity; :-------------------------:|-------------------------|:-------------------------|:-------------------------|:-------------------------|:-------------------------; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | **658/1000** <br/> **Why?** Proof of Concept exploit, Recently disclosed, Has a fix available, CVSS 5.3 | HTTP Request Smuggling <br/>[SNYK-PYTHON-AIOHTTP-5798483](https://snyk.io/vuln/SNYK-PYTHON-AIOHTTP-5798483) | `aiohttp:` <br> `3.8.4 -> 3.8.5` <br> | No | Proof of Concept . (*) Note that the real score may have changed since the PR was raised. Some vulnerabilities couldn't be fully fixed and so Snyk will still find them when the project is tested again. This may be because the vulnerability existed within more than one direct dependency, but not all of the affected dependencies could be upgraded. Check the changes in this PR to ensure they won't cause issues with your project. ------------. **Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open fix PRs.*. For more information: <img src=""https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiI2ZWQ3MzlmOS1mZjc4LTQzYzgtYWQwOC05MThjNmRhMWNlOTYiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjZlZDczOWY5LWZmNzgtNDNjOC1hZDA4LTkxOGM2ZGExY2U5NiJ9fQ=="" width=""0"" height=""0""/>; 🧐 [View latest project report](https://app.snyk.io/org/danking/project/b72ce54d-5de3-48e5-a1d4-6f8967681a12?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr). 🛠 [Adjust project settings](https://app.snyk",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13284:1244,test,tested,1244,https://hail.is,https://github.com/hail-is/hail/pull/13284,1,['test'],['tested']
Testability,".</li>; </ul>; <h1>v4.10.0</h1>; <ul>; <li><a href=""https://github-redirect.dependabot.com/python/importlib_metadata/issues/354"">#354</a>: Removed <code>Distribution._local</code> factory. This; functionality was created as a demonstration of the; possible implementation. Now, the; <code>pep517 &lt;https://pypi.org/project/pep517&gt;</code>_ package; provides this functionality directly through; <code>pep517.meta.load &lt;https://github.com/pypa/pep517/blob/a942316305395f8f757f210e2b16f738af73f8b8/pep517/meta.py#L63-L73&gt;</code>_.</li>; </ul>; <h1>v4.9.0</h1>; <ul>; <li>Require Python 3.7 or later.</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python/importlib_metadata/commit/99a2ec4489da45407d8224be2804ff323a164ac0""><code>99a2ec4</code></a> Update changelog.</li>; <li><a href=""https://github.com/python/importlib_metadata/commit/dbe114cbdc49ff42026974e48ca7178a091e7530""><code>dbe114c</code></a> Add docstring with tests for EntryPoint.matches. Ref <a href=""https://github-redirect.dependabot.com/python/importlib_metadata/issues/373"">#373</a>.</li>; <li><a href=""https://github.com/python/importlib_metadata/commit/ee566d048c0061b4f846f100ebfd93eefbcbf608""><code>ee566d0</code></a> Remove cast of path items to strings. Ref <a href=""https://github-redirect.dependabot.com/python/importlib_metadata/issues/372"">#372</a>.</li>; <li><a href=""https://github.com/python/importlib_metadata/commit/14cce75299645467adcd17352cb07caada32c444""><code>14cce75</code></a> Prefer re.findall, which returns materialized results. Fixes <a href=""https://github-redirect.dependabot.com/python/importlib_metadata/issues/369"">#369</a>.</li>; <li><a href=""https://github.com/python/importlib_metadata/commit/b4661fd8988b4101d4042e4cc4a8ed74423ec410""><code>b4661fd</code></a> Add test capturing missed expectation on extras. Ref <a href=""https://github-redirect.dependabot.com/python/im",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11596:2586,test,tests,2586,https://hail.is,https://github.com/hail-is/hail/pull/11596,1,['test'],['tests']
Testability,".</p>; <p>asyncio code is usually written in the form of coroutines, which makes; it slightly more difficult to test using normal testing tools.; pytest-asyncio provides useful fixtures and markers to make testing; easier.</p>; <pre lang=""{.sourceCode"" data-meta="".python}""><code>@pytest.mark.asyncio; async def test_some_asyncio_code():; res = await library.do_something(); assert b&quot;expected result&quot; == res; </code></pre>; <p>pytest-asyncio has been strongly influenced by; <a href=""https://github.com/eugeniy/pytest-tornado"">pytest-tornado</a>.</p>; <h1>Features</h1>; <ul>; <li>fixtures for creating and injecting versions of the asyncio event; loop</li>; <li>fixtures for injecting unused tcp/udp ports</li>; <li>pytest markers for treating tests as asyncio coroutines</li>; <li>easy testing with non-default event loops</li>; <li>support for [async def]{.title-ref} fixtures and async generator; fixtures</li>; <li>support <em>auto</em> mode to handle all async fixtures and tests; automatically by asyncio; provide <em>strict</em> mode if a test suite; should work with different async frameworks simultaneously, e.g.; <code>asyncio</code> and <code>trio</code>.</li>; </ul>; <h1>Installation</h1>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/pytest-dev/pytest-asyncio/blob/master/CHANGELOG.rst"">pytest-asyncio's changelog</a>.</em></p>; <blockquote>; <h1>0.20.1 (22-10-21)</h1>; <ul>; <li>Fixes an issue that warned about using an old version of pytest, even though the most recent version was installed. <code>[#430](https://github.com/pytest-dev/pytest-asyncio/issues/430) &lt;https://github.com/pytest-dev/pytest-asyncio/issues/430&gt;</code>_</li>; </ul>; <h1>0.20.0 (22-10-21)</h1>; <ul>; <li>BREAKING: Removed <em>legacy</em> mode. If you're upgrading from v0.19 and you haven't configured <code>asyncio_mode = legacy</code>, you can upgrade without takin",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12390:2279,test,tests,2279,https://hail.is,https://github.com/hail-is/hail/pull/12390,2,['test'],"['test', 'tests']"
Testability,".</p>; <p>asyncio code is usually written in the form of coroutines, which makes; it slightly more difficult to test using normal testing tools.; pytest-asyncio provides useful fixtures and markers to make testing; easier.</p>; <pre lang=""{.sourceCode"" data-meta="".python}""><code>@pytest.mark.asyncio; async def test_some_asyncio_code():; res = await library.do_something(); assert b&quot;expected result&quot; == res; </code></pre>; <p>pytest-asyncio has been strongly influenced by; <a href=""https://github.com/eugeniy/pytest-tornado"">pytest-tornado</a>.</p>; <h1>Features</h1>; <ul>; <li>fixtures for creating and injecting versions of the asyncio event; loop</li>; <li>fixtures for injecting unused tcp/udp ports</li>; <li>pytest markers for treating tests as asyncio coroutines</li>; <li>easy testing with non-default event loops</li>; <li>support for [async def]{.title-ref} fixtures and async generator; fixtures</li>; <li>support <em>auto</em> mode to handle all async fixtures and tests; automatically by asyncio; provide <em>strict</em> mode if a test suite; should work with different async frameworks simultaneously, e.g.; <code>asyncio</code> and <code>trio</code>.</li>; </ul>; <h1>Installation</h1>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/pytest-dev/pytest-asyncio/blob/master/CHANGELOG.rst"">pytest-asyncio's changelog</a>.</em></p>; <blockquote>; <h1>0.20.2 (22-11-11)</h1>; <ul>; <li>Fixes an issue with async fixtures that are defined as methods on a test class not being rebound to the actual test instance. <code>[#197](https://github.com/pytest-dev/pytest-asyncio/issues/197) &lt;https://github.com/pytest-dev/pytest-asyncio/issues/197&gt;</code>_</li>; <li>Replaced usage of deprecated <code>@pytest.mark.tryfirst</code> with <code>@pytest.hookimpl(tryfirst=True)</code> <code>[#438](https://github.com/pytest-dev/pytest-asyncio/issues/438) &lt;https:",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12453:2279,test,tests,2279,https://hail.is,https://github.com/hail-is/hail/pull/12453,2,['test'],"['test', 'tests']"
Testability,".</p>; <p>asyncio code is usually written in the form of coroutines, which makes; it slightly more difficult to test using normal testing tools.; pytest-asyncio provides useful fixtures and markers to make testing; easier.</p>; <pre lang=""{.sourceCode"" data-meta="".python}""><code>@pytest.mark.asyncio; async def test_some_asyncio_code():; res = await library.do_something(); assert b&quot;expected result&quot; == res; </code></pre>; <p>pytest-asyncio has been strongly influenced by; <a href=""https://github.com/eugeniy/pytest-tornado"">pytest-tornado</a>.</p>; <h1>Features</h1>; <ul>; <li>fixtures for creating and injecting versions of the asyncio event; loop</li>; <li>fixtures for injecting unused tcp/udp ports</li>; <li>pytest markers for treating tests as asyncio coroutines</li>; <li>easy testing with non-default event loops</li>; <li>support for [async def]{.title-ref} fixtures and async generator; fixtures</li>; <li>support <em>auto</em> mode to handle all async fixtures and tests; automatically by asyncio; provide <em>strict</em> mode if a test suite; should work with different async frameworks simultaneously, e.g.; <code>asyncio</code> and <code>trio</code>.</li>; </ul>; <h1>Installation</h1>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/pytest-dev/pytest-asyncio/commit/929608e60ec2c2643c7d0e7b0604cf186c158cd9""><code>929608e</code></a> docs: Prepare release 0.18.2. (<a href=""https://github-redirect.dependabot.com/pytest-dev/pytest-asyncio/issues/304"">#304</a>)</li>; <li><a href=""https://github.com/pytest-dev/pytest-asyncio/commit/2359807ec75a1a39c9f60fae715b3a39885c67cf""><code>2359807</code></a> Bump actions/checkout from 2 to 3 (<a href=""https://github-redirect.dependabot.com/pytest-dev/pytest-asyncio/issues/301"">#301</a>)</li>; <li><a href=""https://github.com/pytest-dev/pytest-asyncio/commit/cad1b94f1457e2a07eb58ccd32269a95e1dda1c3""><code>cad1b94</code></",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11510:2279,test,tests,2279,https://hail.is,https://github.com/hail-is/hail/pull/11510,2,['test'],"['test', 'tests']"
Testability,.AssertionError at IndexSuite.scala:42; Running test: Test method testIntervalIteratorWorksWithGeneralEndpoints(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testIntervalIteratorWorksWithGeneralEndpoints FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testIterateFromUntil(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testIterateFromUntil FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testLowerBound(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testLowerBound FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testQueryByKey(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testQueryByKey FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testRangeIterator(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testRangeIterator FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testUpperBound(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testUpperBound FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[0]([Ljava.lang.String;@49613eb0)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[0]([Ljava.lang.String;@49613eb0) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[1]([Ljava.lang.String;@326709be)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[1]([Ljava.lang.String;@326709be) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[2]([Ljava.lang.String;@7c5e570e)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[2]([Ljava.lang.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4718:2142,test,testRangeIterator,2142,https://hail.is,https://github.com/hail-is/hail/issues/4718,1,['test'],['testRangeIterator']
Testability,.AssertionError at IndexSuite.scala:42; Running test: Test method testRangeIterator(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testRangeIterator FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testUpperBound(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testUpperBound FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[0]([Ljava.lang.String;@49613eb0)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[0]([Ljava.lang.String;@49613eb0) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[1]([Ljava.lang.String;@326709be)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[1]([Ljava.lang.String;@326709be) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[2]([Ljava.lang.String;@7c5e570e)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[2]([Ljava.lang.String;@7c5e570e) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[3]([Ljava.lang.String;@3c90c5dc)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[3]([Ljava.lang.String;@3c90c5dc) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[4]([Ljava.lang.String;@165d0f2d)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[4]([Ljava.lang.String;@165d0f2d) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[5]([Ljava.lang.String;@2cb6cb35)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[5]([Ljava.la,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4718:2965,test,test,2965,https://hail.is,https://github.com/hail-is/hail/issues/4718,2,"['Test', 'test']","['Test', 'test']"
Testability,".DirectParquetOutputCommitter; ```. Code and stack trace:; ```; ================================================================================================== FAILURES ===================================================================================================; __________________________________________________________________________________________ TestHAIL.test_export_vcf ___________________________________________________________________________________________. self = <test_hail.TestHAIL testMethod=test_export_vcf>. def test_export_vcf(self):; # define files; bgen_file = os.path.join(self.testdir, 'example.10bits.bgen'); sample_file = os.path.join(self.testdir, 'example.sample'); # make index; self.hc.index_bgen(bgen_file); # load to vds; bgen_vds = self.hc.import_bgen(bgen_file, sample_file=sample_file); # export vcf; out_path = 'file://' + os.path.join(self.tmpdir, 'test_vcf_export.vcf.bgz'); > bgen_vds.export_vcf(out_path, export_pp=False, parallel=False). tests/hail/test_hail.py:55:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; <decorator-gen-398>:2: in export_vcf; ???; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. func = <function export_vcf at 0x7fa13c4d9938>, args = (<hail.dataset.VariantDataset object at 0x7fa13c3c9390>, 'file:///scratch/test_vcf_export.vcf.bgz', None, False, False), kwargs = {}; e = Py4JJavaError(u'An error occurred while calling o160.exportVCF.\n', JavaObject id=o162), tpl = JavaObject id=o210; deepest = 'ClassNotFoundException: Class org.apache.hadoop.mapred.DirectFileOutputCommitter not found'; full = 'java.lang.RuntimeException: java.lang.RuntimeException: java.lang.ClassNotFoundException: Class org.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3946:1931,test,tests,1931,https://hail.is,https://github.com/hail-is/hail/issues/3946,1,['test'],['tests']
Testability,.GenProp1.apply(Prop.scala:26); 	at is.hail.check.Prop.check(Prop.scala:19); 	at is.hail.expr.ir.OrderingSuite.testBinarySearchOnDict(OrderingSuite.scala:357); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); 	at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:123); Caused by: java.lang.ArrayIndexOutOfBoundsException: 3; 	at scala.collection.mutable.WrappedArray$ofRef.apply(WrappedArray.scala:127); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33$$anonfun$apply$19.getKey$1(OrderingSuite.scala:345); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33$$anonfun$apply$19.apply(Orde,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5630:1425,Test,TestRunner,1425,https://hail.is,https://github.com/hail-is/hail/issues/5630,1,['Test'],['TestRunner']
Testability,.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); 	at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:123); Caused by: java.lang.ArrayIndexOutOfBoundsException: 3; 	at scala.collection.mutable.WrappedArray$ofRef.apply(WrappedArray.scala:127); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33$$anonfun$apply$19.getKey$1(OrderingSuite.scala:345); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33$$anonfun$apply$19.apply(OrderingSuite.scala:347); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33$$anonfun$apply$19.apply(OrderingSuite.scala:318); 	at is.hail.utils.package$.using(package.scala:613); 	at is.hail.annotations.Region$.scoped(Region.scala:13); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33.apply(OrderingSuite.scala:318); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33.apply(OrderingSuite.scala:314); 	at is.hail.check.GenProp1$$anonfun$apply$1$$anonfun$1.apply$mcZ$sp(Prop.scala:28); 	at is.hail.check.GenProp1$$anonfun$apply$1$$anonfun$1.apply(Prop.scala:28); 	at is.hail.check.GenProp1$$anonfun$apply$1$$anonfun$1.apply(Prop.scala:28); 	at scala.u,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5630:2058,test,testng,2058,https://hail.is,https://github.com/hail-is/hail/issues/5630,1,['test'],['testng']
Testability,".RDD.iterator(RDD.scala:310) at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:52) at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:346) at org.apache.spark.rdd.RDD.iterator(RDD.scala:310) at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:52) at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:346) at org.apache.spark.rdd.RDD.iterator(RDD.scala:310) at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:90) at org.apache.spark.scheduler.Task.run(Task.scala:123) at org.apache.spark.executor.Executor$TaskRunner$$anonfun$10.apply(Executor.scala:408) at org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1360) at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:414) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748). Spark Worker Logs (truncated to crash):. 2020-06-10 10:09:36 INFO ShuffleBlockFetcherIterator:54 - Started 0 remote fetches in 16 ms; 2020-06-10 10:09:36 INFO ShuffleBlockFetcherIterator:54 - Started 0 remote fetches in 17 ms; 2020-06-10 10:09:36 INFO ShuffleBlockFetcherIterator:54 - Started 0 remote fetches in 17 ms; 2020-06-10 10:09:36 INFO ShuffleBlockFetcherIterator:54 - Started 0 remote fetches in 17 ms; [thread 46926922934016 also had an error][thread 46922053207808 also had an error][thread 46926901880576 also had an error][thread 46926888195840 also had an error][thread 46926887143168 also had an error][thread 46924854015744 also had an error]; [thread 46924847699712 also had an error]. 	#. 	# A fatal error has been detected by the Java Runtime Environment:. 	[thread 46926905038592 also had an error]#; 	# ; 	[thread 46926895564544 also had an error][thread 46926900827904 also had an error]. 	SIGSEGV (0xb) at pc=0x00002aaab5115c88, pid=34051, tid=0x00002aae05d1a700; 	#; 	# JRE version: OpenJDK Runt",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8944:18063,Log,Logs,18063,https://hail.is,https://github.com/hail-is/hail/issues/8944,1,['Log'],['Logs']
Testability,.RichInputStream$.readRepeatedly$extension0(RichInputStream.scala:21); 	at is.hail.utils.richUtils.RichInputStream$.readFully$extension1(RichInputStream.scala:12); 	at is.hail.io.StreamBlockInputBuffer.readBlock(InputBuffers.scala:549); 	at is.hail.io.ZstdInputBlockBuffer.readBlock(InputBuffers.scala:643); 	at is.hail.io.BlockingInputBuffer.ensure(InputBuffers.scala:384); 	at is.hail.io.BlockingInputBuffer.readByte(InputBuffers.scala:402); 	at is.hail.io.LEB128InputBuffer.readByte(InputBuffers.scala:219); 	at __C372collect_distributed_array_matrix_native_writer.__m478readLeafNode(Unknown Source); 	at __C372collect_distributed_array_matrix_native_writer.apply_region16_290(Unknown Source); 	at __C372collect_distributed_array_matrix_native_writer.apply_region4_318(Unknown Source); 	at __C372collect_distributed_array_matrix_native_writer.apply_region2_501(Unknown Source); 	at __C372collect_distributed_array_matrix_native_writer.apply(Unknown Source); 	at __C372collect_distributed_array_matrix_native_writer.apply(Unknown Source); 	at is.hail.backend.BackendUtils.$anonfun$collectDArray$16(BackendUtils.scala:91); 	at is.hail.utils.package$.using(package.scala:637); 	at is.hail.annotations.RegionPool.scopedRegion(RegionPool.scala:162); 	at is.hail.backend.BackendUtils.$anonfun$collectDArray$15(BackendUtils.scala:90); 	at is.hail.backend.service.Worker$.$anonfun$main$12(Worker.scala:167); 	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23); 	at is.hail.services.package$.retryTransientErrors(package.scala:182); 	at is.hail.backend.service.Worker$.$anonfun$main$11(Worker.scala:166); 	at is.hail.backend.service.Worker$.$anonfun$main$11$adapted(Worker.scala:164); 	at is.hail.utils.package$.using(package.scala:637); 	at is.hail.backend.service.Worker$.main(Worker.scala:164); 	at is.hail.backend.service.Main$.main(Main.scala:14); 	at is.hail.backend.service.Main.main(Main.scala); 	... 11 more. ```. ### Version. 0.2.124. ### Relevant log output. _No response_,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13704:2833,log,log,2833,https://hail.is,https://github.com/hail-is/hail/issues/13704,1,['log'],['log']
Testability,.String;@70bfbb33) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[19]([Ljava.lang.String;@3e391ee2)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[19]([Ljava.lang.String;@3e391ee2) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testCXXCodeFunctions(is.hail.nativecode.NativeCodeSuite); DEBUG: Logging set_test_msg ... Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testCXXCodeFunctions PASSED; Running test: Test method testNativeBuild(is.hail.nativecode.NativeCodeSuite). Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testNativeBuild PASSED; Running test: Test method testNativeCallSpeed(is.hail.nativecode.NativeCodeSuite). Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testNativeCallSpeed PASSED; Running test: Test method testNativeGlobal(is.hail.nativecode.NativeCodeSuite). Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testNativeGlobal PASSED; Running test: Test method testNativePtr(is.hail.nativecode.NativeCodeSuite). Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testNativePtr PASSED; Running test: Test method testNativeUpcall(is.hail.nativecode.NativeCodeSuite); DEBUG: Logging set_test_msg ... Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testNativeUpcall PASSED; Running test: Test method testObjectArray(is.hail.nativecode.NativeCodeSuite). Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testObjectArray PASSED; Running test: Test method testShuffleAndJoinDoesntMemoryLeak(is.hail.expr.ir.TableIRSuite). Gradle suite > Gradle test > is.hail.expr.ir.TableIRSuite.testShuffleAndJoinDoesntMemoryLeak PASSED; Running test: Test method testBufferWriteReadDoubles(is.hail.annotations.UnsafeSuite). Gradle suite > Gradle test > is.hail.annotations.UnsafeSuite.testBufferWriteReadDoubles PASSED; Running test: Test m,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4718:8592,test,test,8592,https://hail.is,https://github.com/hail-is/hail/issues/4718,1,['test'],['test']
Testability,".Task.run(Task.scala:108); at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:335); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); ... 1 more. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/tmp/b09ec92a-49f4-4d16-ad6d-efc5a5805e92/05_variant_qc.py"", line 201, in <module>; cumcounts = {'step0': rt.aggregate(hl.agg.sum(hl.cond(rt.qccum.step0, 1, 0))),; File ""<decorator-gen-519>"", line 2, in aggregate; File ""/home/hail/hail.zip/hail/utils/java.py"", line 191, in handle_py4j; hail.utils.java.FatalError: AssertionError: assertion failed. Java stack trace:; org.apache.spark.SparkException: Job aborted due to stage failure: Task 7 in stage 6.0 failed 20 times, most recent failure: Lost task 7.19 in stage 6.0 (TID 179, robert1-w-0.c.ccdg-wgs.internal, executor 4): java.lang.AssertionError: assertion failed; at scala.Predef$.assert(Predef.scala:156); at is.hail.annotations.RegionValueBuilder.endStruct(RegionValueBuilder.scala:109); at is.hail.variant.MatrixTable$$anonfun$filterGenotypes$1$$anonfun$apply$80.apply(MatrixTable.scala:2645); at is.hail.variant.MatrixTable$$anonfun$filterGenotypes$1$$anonfun$apply$80.apply(MatrixTable.scala:2615); at scala.collection.Iterator$$anon$11.next(Iterator.scala:409); at is.hail.rvd.OrderedRVD$$anonfun$apply$6$$anon$5.next(OrderedRVD.scala:736); at is.hail.rvd.OrderedRVD$$anonfun$apply$6$$anon$5.next(OrderedRVD.scala:730); at scala.collection.Iterator$$anon$11.next(Iterator.scala:409); at is.hail.rvd.OrderedRVD$$anonfun$apply$6$$anon$5.next(OrderedRVD.scala:736); at is.hail.rvd.OrderedRVD$$anonfun$apply$6$$anon$5.next(OrderedRVD.scala:730); at scala.collection.Iterator$$anon$11.next(Iterator.scala:409); at is.hail.rvd.OrderedRVD$$anonfun$apply$6$$anon$5.next(OrderedRVD.scala:736); at is.hail.rvd.OrderedRVD$$anonfun$apply$6$$anon$5.next(Order",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3063:12013,Assert,AssertionError,12013,https://hail.is,https://github.com/hail-is/hail/issues/3063,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,"._jvds.localizeEntries(row_uid)); src_cols_indexed = self.cols().add_index(col_uid); src_cols_indexed = src_cols_indexed.annotate(**{col_uid: hl.int32(src_cols_indexed[col_uid])}); left = left._annotate_all(row_exprs = {row_uid: localized.index(*row_exprs)[row_uid]},; col_exprs = {col_uid: src_cols_indexed.index(*col_exprs)[col_uid]}); return left.annotate_entries(**{uid: left[row_uid][left[col_uid]]}); ```. ### Hail version:; master; b1ac051d34bcc4c26fe9dea58aeac53038f2963e. ### What you did:. ```; mt = hl.utils.range_matrix_table(4, 4); mt2 = hl.utils.range_matrix_table(4, 4); mt2 = mt2.annotate_entries(x=mt2.row_idx + mt2.col_idx); mt.select_entries(a=mt2[mt.row_idx, mt.col_idx].x,; b=mt2[mt.row_idx, mt.col_idx].x)._force_count_rows(); ```. ### What went wrong (all error messages here, including the full java stack trace):. ```; Error; Traceback (most recent call last):; File ""/Users/jbloom/anaconda/envs/py36/lib/python3.6/unittest/case.py"", line 59, in testPartExecutor; yield; File ""/Users/jbloom/anaconda/envs/py36/lib/python3.6/unittest/case.py"", line 605, in run; testMethod(); File ""/Users/jbloom/hail/python/hail/tests/test_api.py"", line 1557, in test_force_bug; b=mt2[mt.row_idx, mt.col_idx].x)._force_count_rows(); File ""/Users/jbloom/hail/python/hail/matrixtable.py"", line 1171, in select_entries; return self._select_entries(""MatrixTable.select_entries"", hl.struct(**entry)); File ""/Users/jbloom/hail/python/hail/typecheck/check.py"", line 547, in wrapper; return f(*args_, **kwargs_); File ""/Users/jbloom/hail/python/hail/matrixtable.py"", line 2844, in _select_entries; base, cleanup = self._process_joins(s); File ""/Users/jbloom/hail/python/hail/matrixtable.py"", line 2503, in _process_joins; return process_joins(self, exprs, broadcast_f); File ""/Users/jbloom/hail/python/hail/utils/misc.py"", line 356, in process_joins; left = j.join_func(left); File ""/Users/jbloom/hail/python/hail/matrixtable.py"", line 2414, in joiner; col_exprs = {col_uid: src_cols_indexed.index(*co",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3763:1356,test,testPartExecutor,1356,https://hail.is,https://github.com/hail-is/hail/issues/3763,1,['test'],['testPartExecutor']
Testability,".com/axios/axios/pull/3377"">#3377</a>)</li>; <li>Adding ability to omit User-Agent header (<a href=""https://github-redirect.dependabot.com/axios/axios/pull/3703"">#3703</a>)</li>; <li>Adding multiple JSON improvements (<a href=""https://github-redirect.dependabot.com/axios/axios/pull/3688"">#3688</a>, <a href=""https://github-redirect.dependabot.com/axios/axios/pull/3763"">#3763</a>)</li>; <li>Fixing quadratic runtime and extra memory usage when setting a maxContentLength (<a href=""https://github-redirect.dependabot.com/axios/axios/pull/3738"">#3738</a>)</li>; <li>Adding parseInt to config.timeout (<a href=""https://github-redirect.dependabot.com/axios/axios/pull/3781"">#3781</a>)</li>; <li>Adding custom return type support to interceptor (<a href=""https://github-redirect.dependabot.com/axios/axios/pull/3783"">#3783</a>)</li>; <li>Adding security fix for ReDoS vulnerability (<a href=""https://github-redirect.dependabot.com/axios/axios/pull/3980"">#3980</a>)</li>; </ul>; <p>Internal and Tests:</p>; <ul>; <li>Updating build dev dependancies (<a href=""https://github-redirect.dependabot.com/axios/axios/pull/3401"">#3401</a>)</li>; <li>Fixing builds running on Travis CI (<a href=""https://github-redirect.dependabot.com/axios/axios/pull/3538"">#3538</a>)</li>; <li>Updating follow rediect version (<a href=""https://github-redirect.dependabot.com/axios/axios/pull/3694"">#3694</a>, <a href=""https://github-redirect.dependabot.com/axios/axios/pull/3771"">#3771</a>)</li>; <li>Updating karma sauce launcher to fix failing sauce tests (<a href=""https://github-redirect.dependabot.com/axios/axios/pull/3712"">#3712</a>, <a href=""https://github-redirect.dependabot.com/axios/axios/pull/3717"">#3717</a>)</li>; <li>Updating content-type header for application/json to not contain charset field, according do RFC 8259 (<a href=""https://github-redirect.dependabot.com/axios/axios/pull/2154"">#2154</a>)</li>; <li>Fixing tests by bumping karma-sauce-launcher version (<a href=""https://github-redirect.dependabot.com/",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11080:1732,Test,Tests,1732,https://hail.is,https://github.com/hail-is/hail/pull/11080,4,['Test'],['Tests']
Testability,".com/cbeust/testng/pull/2783"">cbeust/testng#2783</a></li>; <li>Added ability to provide custom message to assertThrows\expectThrows methods by <a href=""https://github.com/anatolyuzhakov""><code>@​anatolyuzhakov</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2793"">cbeust/testng#2793</a></li>; <li>Fix issue 2801 - Only resolve hostname once by <a href=""https://github.com/spkrka""><code>@​spkrka</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2802"">cbeust/testng#2802</a></li>; <li>[SECURITY] Fix Zip Slip Vulnerability; by <a href=""https://github.com/JLLeitschuh""><code>@​JLLeitschuh</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2806"">cbeust/testng#2806</a></li>; <li>GITHUB-2807 - Failsafe buildStackTrace by <a href=""https://github.com/seregamorph""><code>@​seregamorph</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2808"">cbeust/testng#2808</a></li>; <li>Prevent overlogging of debug msgs in Graph impl by <a href=""https://github.com/krmahadevan""><code>@​krmahadevan</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2813"">cbeust/testng#2813</a></li>; <li>Streamline dataprovider invoking in abstract classes by <a href=""https://github.com/krmahadevan""><code>@​krmahadevan</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2814"">cbeust/testng#2814</a></li>; <li>Streamline TestResult due to expectedExceptions by <a href=""https://github.com/krmahadevan""><code>@​krmahadevan</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2815"">cbeust/testng#2815</a></li>; <li>Unexpected test runs count with retry analyzer by <a href=""https://github.com/krmahadevan""><code>@​krmahadevan</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2816"">cbeust/testng#2816</a></li>; <li>Make PackageUtils compliant with JPMS by <a href=""https://github.com/krmaha",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12665:2085,test,testng,2085,https://hail.is,https://github.com/hail-is/hail/pull/12665,2,['test'],['testng']
Testability,".com/python/importlib_metadata/issues/368"">#368</a>.</li>; <li><a href=""https://github.com/python/importlib_metadata/commit/43603042899689531c88b713e7777e7f67e9a07c""><code>4360304</code></a> Merge <a href=""https://github.com/jaraco/skeleton"">https://github.com/jaraco/skeleton</a></li>; <li><a href=""https://github.com/python/importlib_metadata/commit/04fe68a96ee8e3d3ca521b4abbfe53203063f9d9""><code>04fe68a</code></a> Ran pre-commit autoupdate</li>; <li><a href=""https://github.com/python/importlib_metadata/commit/2ef893a85f0ad023827d0720307695214a2245b2""><code>2ef893a</code></a> Merge <a href=""https://github.com/jaraco/skeleton"">https://github.com/jaraco/skeleton</a></li>; <li><a href=""https://github.com/python/importlib_metadata/commit/97e0293b8bf317b54f49c25add7d44830f9180fe""><code>97e0293</code></a> In _read_egg_info_reqs, when requires.txt exists but is empty, return an empt...</li>; <li><a href=""https://github.com/python/importlib_metadata/commit/96c79f601986e8583b9cbcb7383649c5d8de4ab3""><code>96c79f6</code></a> Add test capturing expectation when requires.txt is empty. Ref <a href=""https://github-redirect.dependabot.com/python/importlib_metadata/issues/367"">#367</a>.</li>; <li><a href=""https://github.com/python/importlib_metadata/commit/f22eb5b60adbe158e458614ea0380a9071c39347""><code>f22eb5b</code></a> Ignore flake8/black warnings with pytest 7.0.1 (jaraco/skeleton#58)</li>; <li><a href=""https://github.com/python/importlib_metadata/commit/a9ea801a43fc62a569cf60e1c28e477ba510d8a0""><code>a9ea801</code></a> Require jaraco.packaging 9 adding compatibility for projects with no setup.py...</li>; <li>Additional commits viewable in <a href=""https://github.com/python/importlib_metadata/compare/0.1...v4.11.2"">compare view</a></li>; </ul>; </details>; <br />. Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (depend",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11525:4101,test,test,4101,https://hail.is,https://github.com/hail-is/hail/pull/11525,1,['test'],['test']
Testability,".com/repos/hail-ci-test/ci-test-p4a9fxo7/git/trees{/sha}"",; ""statuses_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/statuses/{sha}"",; ""languages_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/languages"",; ""stargazers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/stargazers"",; ""contributors_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contributors"",; ""subscribers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscribers"",; ""subscription_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscription"",; ""commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/commits{/sha}"",; ""git_commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/commits{/sha}"",; ""comments_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/comments{/number}"",; ""issue_comment_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/comments{/number}"",; ""contents_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contents/{+path}"",; ""compare_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/compare/{base}...{head}"",; ""merges_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/merges"",. 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0; 100 7030 100 6999 100 31 9306 41 --:--:-- --:--:-- --:--:-- 9319; ""archive_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/{archive_format}{/ref}"",; ""downloads_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/downloads"",; ""issues_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues{/number}"",; ""pulls_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/pulls{/number}"",; ""milestones_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/milestones{/number}"",; ""notifications_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/notifications{?since,all,parti",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:4465,test,test,4465,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,.computeOrReadCheckpoint(RDD.scala:323); 	at org.apache.spark.rdd.RDD.iterator(RDD.scala:287); 	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38); 	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:323); 	at org.apache.spark.rdd.RDD.iterator(RDD.scala:287); 	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38); 	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:323); 	at org.apache.spark.rdd.RDD.iterator(RDD.scala:287); 	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38); 	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:323); 	at org.apache.spark.rdd.RDD.iterator(RDD.scala:287); 	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38); 	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:323); 	at org.apache.spark.rdd.RDD.iterator(RDD.scala:287); 	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38); 	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:323); 	at org.apache.spark.rdd.RDD.iterator(RDD.scala:287); 	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38); 	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:323); 	at org.apache.spark.rdd.RDD.iterator(RDD.scala:287); 	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38); 	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:323); 	at org.apache.spark.rdd.RDD.iterator(RDD.scala:287); 	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:87); 	at org.apache.spark.scheduler.Task.run(Task.scala:108); 	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:335); 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); 	at java.lang.Thread.run(Thread.java:748). Hail version: devel-279ddd2; Error summary: AssertionError: assertion failed; ```,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3235:13036,Assert,AssertionError,13036,https://hail.is,https://github.com/hail-is/hail/issues/3235,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,.doHandlingRequesterPays(GoogleStorageFS.scala:279); 	at is.hail.io.fs.GoogleStorageFS$$anon$2.flush(GoogleStorageFS.scala:297); 	at java.io.DataOutputStream.flush(DataOutputStream.java:123); 	at java.io.FilterOutputStream.close(FilterOutputStream.java:158); 	at is.hail.utils.package$.using(package.scala:640); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt(FSSuite.scala:323); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:321); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.te,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:3777,test,testng,3777,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['test'],['testng']
Testability,.doHandlingRequesterPays(GoogleStorageFS.scala:299); 	at is.hail.io.fs.GoogleStorageFS$$anon$2.flush(GoogleStorageFS.scala:317); 	at java.io.DataOutputStream.flush(DataOutputStream.java:123); 	at java.io.FilterOutputStream.close(FilterOutputStream.java:158); 	at is.hail.utils.package$.using(package.scala:640); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt(FSSuite.scala:341); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:339); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.te,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:3970,test,testng,3970,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['test'],['testng']
Testability,.expr.ir.OrderingSuite.testBinarySearchOnDict(OrderingSuite.scala:357); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); 	at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:123); Caused by: java.lang.ArrayIndexOutOfBoundsException: 3; 	at scala.collection.mutable.WrappedArray$ofRef.apply(WrappedArray.scala:127); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33$$anonfun$apply$19.getKey$1(OrderingSuite.scala:345); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33$$anonfun$apply$19.apply(OrderingSuite.scala:347); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33$$anonfun$apply$19.ap,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5630:1513,test,testng,1513,https://hail.is,https://github.com/hail-is/hail/issues/5630,1,['test'],['testng']
Testability,".git"",; ""ssh_url"": ""git@github.com:hail-ci-test/ci-test-p4a9fxo7.git"",; ""clone_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7.git"",; ""svn_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7"",; ""homepage"": null,; ""size"": 0,; ""stargazers_count"": 0,; ""watchers_count"": 0,; ""language"": null,; ""has_issues"": true,; ""has_projects"": true,; ""has_downloads"": true,; ""has_wiki"": true,; ""has_pages"": false,; ""forks_count"": 0,; ""mirror_url"": null,; ""archived"": false,; ""open_issues_count"": 0,; ""license"": null,; ""forks"": 0,; ""open_issues"": 0,; ""watchers"": 0,; ""default_branch"": ""master"",; ""permissions"": {; ""admin"": true,; ""push"": true,; ""pull"": true; },; ""allow_squash_merge"": true,; ""allow_merge_commit"": true,; ""allow_rebase_merge"": true,; ""organization"": {; ""login"": ""hail-ci-test"",; ""id"": 43152710,; ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjQzMTUyNzEw"",; ""avatar_url"": ""https://avatars1.githubusercontent.com/u/43152710?v=4"",; ""gravatar_id"": """",; ""url"": ""https://api.github.com/users/hail-ci-test"",; ""html_url"": ""https://github.com/hail-ci-test"",; ""followers_url"": ""https://api.github.com/users/hail-ci-test/followers"",; ""following_url"": ""https://api.github.com/users/hail-ci-test/following{/other_user}"",; ""gists_url"": ""https://api.github.com/users/hail-ci-test/gists{/gist_id}"",; ""starred_url"": ""https://api.github.com/users/hail-ci-test/starred{/owner}{/repo}"",; ""subscriptions_url"": ""https://api.github.com/users/hail-ci-test/subscriptions"",; ""organizations_url"": ""https://api.github.com/users/hail-ci-test/orgs"",; ""repos_url"": ""https://api.github.com/users/hail-ci-test/repos"",; ""events_url"": ""https://api.github.com/users/hail-ci-test/events{/privacy}"",; ""received_events_url"": ""https://api.github.com/users/hail-ci-test/received_events"",; ""type"": ""Organization"",; ""site_admin"": false; },; ""network_count"": 0,; ""subscribers_count"": 0; }; ```. [2]:; ```; % Total % Received % Xferd Average Speed Time Time Time Current; Dload Upload Total Spent Left Speed. 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:6952,test,test,6952,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,1,['test'],['test']
Testability,".github.com/googleapis/python-logging/commit/f5af16439807a0954ee78fa91cb69b9493b80176"">f5af164</a>)</li>; <li>added support for iam AuditData proto (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/396"">#396</a>) (<a href=""https://www.github.com/googleapis/python-logging/commit/e3a1eba74dd8b67bcc73a78f784189ef2a9927c2"">e3a1eba</a>)</li>; <li>use structured logging on GCF with python 3.7 (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/434"">#434</a>) (<a href=""https://www.github.com/googleapis/python-logging/commit/5055919f70c82b38de6d1fa7f1df6006865a857b"">5055919</a>)</li>; </ul>; <h3>Bug Fixes</h3>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/googleapis/python-logging/blob/main/CHANGELOG.md"">google-cloud-logging's changelog</a>.</em></p>; <blockquote>; <h2><a href=""https://github.com/googleapis/python-logging/compare/v2.7.0...v3.0.0"">3.0.0</a> (2022-01-27)</h2>; <h3>⚠ BREAKING CHANGES</h3>; <ul>; <li>make logging API more friendly to use (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/422"">#422</a>)</li>; <li>api consistency between HTTP and Gapic layers (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/375"">#375</a>)</li>; <li>support string-encoded json (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/339"">#339</a>)</li>; <li>Infer default resource in logger (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/315"">#315</a>)</li>; <li>support json logs (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/316"">#316</a>)</li>; <li>deprecate AppEngineHandler and ContainerEngineHandler (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/310"">#310</a>)</li>; </ul>; <h3>Features</h3>; <ul>; <li>add api",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11574:5788,log,logging,5788,https://hail.is,https://github.com/hail-is/hail/pull/11574,1,['log'],['logging']
Testability,".github.com/pyparsing/pyparsing/issues/502"">#502</a>)</li>; <li><a href=""https://github.com/pyparsing/pyparsing/commit/421e0fcdbc76fcfb43de9c97c89872bc485d8d40""><code>421e0fc</code></a> Update timestamp and CHANGES file to reflect recent PRs; added another test t...</li>; <li><a href=""https://github.com/pyparsing/pyparsing/commit/1355e76c16f74b387c41d26bbf4ff4338fcde0c4""><code>1355e76</code></a> Merge branch 'pyparsing_3.1.x'</li>; <li><a href=""https://github.com/pyparsing/pyparsing/commit/173bc165780cc455ba2f4818c94f0b58cb8b6e5e""><code>173bc16</code></a> Merge pull request <a href=""https://redirect.github.com/pyparsing/pyparsing/issues/493"">#493</a></li>; <li><a href=""https://github.com/pyparsing/pyparsing/commit/5b939ccc12e6213edbcecca7546472561788f3e9""><code>5b939cc</code></a> Use reset_pyparsing_context for each example in test_examples.py</li>; <li><a href=""https://github.com/pyparsing/pyparsing/commit/eb9db9eb65f973f59d2c42ef20c6bb6cd974059a""><code>eb9db9e</code></a> Add common, unicode, and testing to <strong>all</strong></li>; <li>Additional commits viewable in <a href=""https://github.com/pyparsing/pyparsing/compare/pyparsing_3.0.9...3.1.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pyparsing&package-manager=pip&previous-version=3.0.9&new-version=3.1.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate ",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13345:9016,test,testing,9016,https://hail.is,https://github.com/hail-is/hail/pull/13345,1,['test'],['testing']
Testability,.hail.expr.ir.Emit.emitI(Emit.scala:815); 	at is.hail.expr.ir.Emit$.$anonfun$apply$4(Emit.scala:99); 	at is.hail.expr.ir.EmitCodeBuilder$.scoped(EmitCodeBuilder.scala:19); 	at is.hail.expr.ir.EmitCodeBuilder$.scopedCode(EmitCodeBuilder.scala:24); 	at is.hail.expr.ir.EmitMethodBuilder.emitWithBuilder(EmitClassBuilder.scala:1044); 	at is.hail.expr.ir.WrappedEmitMethodBuilder.emitWithBuilder(EmitClassBuilder.scala:1095); 	at is.hail.expr.ir.WrappedEmitMethodBuilder.emitWithBuilder$(EmitClassBuilder.scala:1095); 	at is.hail.expr.ir.EmitFunctionBuilder.emitWithBuilder(EmitClassBuilder.scala:1192); 	at is.hail.expr.ir.Emit$.apply(Emit.scala:97); 	at is.hail.expr.ir.Compile$.apply(Compile.scala:78); 	at is.hail.TestUtils$.eval(TestUtils.scala:256); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$5(TestUtils.scala:366); 	at scala.collection.immutable.Set$Set4.foreach(Set.scala:289); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$4(TestUtils.scala:348); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$4$adapted(TestUtils.scala:339); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$3(ExecuteContext.scala:47); 	at is.hail.utils.package$.using(package.scala:618); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$2(ExecuteContext.scala:47); 	at is.hail.utils.package$.using(package.scala:618); 	at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:13); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:46); 	at is.hail.backend.spark.SparkBackend.withExecuteContext(SparkBackend.scala:276); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$1(ExecuteContext.scala:40); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:52); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:39); 	at is.hail.TestUtils$.assertEvalsTo(TestUtils.scala:339); 	at is.hail.TestUtils$.assertEvalsTo(TestUtils.scala:314); 	at is.hail.expr.ir.IRSuite.testStreamLenUnconsumedInnerStream(IRSuite.scala:1800); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604:2284,assert,assertEvalsTo,2284,https://hail.is,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604,2,"['Test', 'assert']","['TestUtils', 'assertEvalsTo']"
Testability,.hail.methods.ExportVcfSuite.testSorted PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.evalTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.filterTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.treeTransformerTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MultiArray2Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.PedigreeSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.SampleQCSuite.testStoreAfterFilter PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.vcf.SplitSuite.SplitTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testD_,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/158#issuecomment-173700450:1637,test,test,1637,https://hail.is,https://github.com/hail-is/hail/pull/158#issuecomment-173700450,1,['test'],['test']
Testability,.hail.methods.FilterSuite.evalTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.filterTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.treeTransformerTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MultiArray2Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.PedigreeSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.SampleQCSuite.testStoreAfterFilter PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.vcf.SplitSuite.SplitTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testD_$eq$eq PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testFlushD,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/158#issuecomment-173700450:1732,test,test,1732,https://hail.is,https://github.com/hail-is/hail/pull/158#issuecomment-173700450,1,['test'],['test']
Testability,.hail.relocated.com.google.cloud.RetryHelper.runWithRetries(RetryHelper.java:50); 	at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.flushBuffer(BlobWriteChannel.java:189); 	at is.hail.relocated.com.google.cloud.BaseWriteChannel.flush(BaseWriteChannel.java:112); 	at is.hail.relocated.com.google.cloud.BaseWriteChannel.write(BaseWriteChannel.java:139); 	at is.hail.io.fs.GoogleStorageFS$$anon$2.$anonfun$flush$1(GoogleStorageFS.scala:297); 	at is.hail.io.fs.GoogleStorageFS$$anon$2.doHandlingRequesterPays(GoogleStorageFS.scala:279); 	at is.hail.io.fs.GoogleStorageFS$$anon$2.flush(GoogleStorageFS.scala:297); 	at java.io.DataOutputStream.flush(DataOutputStream.java:123); 	at java.io.FilterOutputStream.close(FilterOutputStream.java:158); 	at is.hail.utils.package$.using(package.scala:640); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt(FSSuite.scala:323); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:321); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRu,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:3264,test,testSeekMoreThanMaxInt,3264,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['test'],['testSeekMoreThanMaxInt']
Testability,.hail.relocated.com.google.cloud.RetryHelper.runWithRetries(RetryHelper.java:50); 	at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.flushBuffer(BlobWriteChannel.java:189); 	at is.hail.relocated.com.google.cloud.BaseWriteChannel.flush(BaseWriteChannel.java:112); 	at is.hail.relocated.com.google.cloud.BaseWriteChannel.write(BaseWriteChannel.java:139); 	at is.hail.io.fs.GoogleStorageFS$$anon$2.$anonfun$flush$1(GoogleStorageFS.scala:317); 	at is.hail.io.fs.GoogleStorageFS$$anon$2.doHandlingRequesterPays(GoogleStorageFS.scala:299); 	at is.hail.io.fs.GoogleStorageFS$$anon$2.flush(GoogleStorageFS.scala:317); 	at java.io.DataOutputStream.flush(DataOutputStream.java:123); 	at java.io.FilterOutputStream.close(FilterOutputStream.java:158); 	at is.hail.utils.package$.using(package.scala:640); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt(FSSuite.scala:341); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:339); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRu,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:3457,test,testSeekMoreThanMaxInt,3457,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['test'],['testSeekMoreThanMaxInt']
Testability,.hail.utils.package$.using(package.scala:640); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt(FSSuite.scala:323); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:321); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://st,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:4039,Test,TestMethodWorker,4039,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['Test'],['TestMethodWorker']
Testability,.hail.utils.package$.using(package.scala:640); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt(FSSuite.scala:341); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:339); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://st,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:4232,Test,TestMethodWorker,4232,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['Test'],['TestMethodWorker']
Testability,".init(sc); pip-installed Hail requires additional configuration options in Spark referring; to the path to the Hail Python module directory HAIL_DIR,; e.g. /path/to/python/site-packages/hail:; spark.jars=HAIL_DIR/backend/hail-all-spark.jar; spark.driver.extraClassPath=HAIL_DIR/backend/hail-all-spark.jar; spark.executor.extraClassPath=./hail-all-spark.jarRunning on Apache Spark version 3.3.2-amzn-0.1; SparkUI available at http://ip-192-168-110-167.ap-southeast-1.compute.internal:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.124-e739a95489e4; LOGGING: writing to /mnt/tmp/hail/hail/hail-20231025-0729-0.2.124-e739a95489e4.log; >>> mt = hl.balding_nichols_model(n_populations=3, n_samples=500, n_variants=1_000); 2023-10-25 07:29:48.283 Hail: INFO: balding_nichols_model: generating genotypes for 3 populations, 500 samples, and 1000 variants...; >>> mt.count(); (1000, 500); ```. it seems working in command line using pyspark !. I need to test on jupyter notebook now... FYI the pyspark configs. ```sh ; - Classification: spark-defaults; ConfigurationProperties:; spark.jars: /opt/hail/backend/hail-all-spark.jar; spark.driver.extraClassPath: /opt/hail/backend/hail-all-spark.jar:/usr/lib/hadoop-lzo/lib/*:/usr/lib/hadoop/hadoop-aws.jar:/usr/share/aws/aws-java-sdk/*:/usr/share/aws/emr/emrfs/conf:/usr/share/aws/emr/emrfs/lib/*:/usr/share/aws/emr/emrfs/auxlib/*:/usr/share/aws/emr/goodies/lib/emr-spark-goodies.jar:/usr/share/aws/emr/security/conf:/usr/share/aws/emr/security/lib/*:/usr/share/aws/hmclient/lib/aws-glue-datacatalog-spark-client.jar:/usr/share/java/Hive-JSON-Serde/hive-openx-serde.jar:/usr/share/aws/sagemaker-spark-sdk/lib/sagemaker-spark-sdk.jar:/usr/share/aws/emr/s3select/lib/emr-s3-select-spark-connector.jar; spark.executor.extraClassPath: /opt/hail/backend/hail-all-spark.jar:/usr/lib/hadoop-lzo/lib/*:/usr/lib/hadoop/hadoop-aws.jar:/usr/share/aws/aws-java-sdk/*:/usr/share/aws/emr/emrfs/conf:/usr/share/aws/emr/emrfs/lib/*:/",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1778834949:3314,test,test,3314,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1778834949,1,['test'],['test']
Testability,.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); 	at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:123); Caused by: java.lang.ArrayIndexOutOfBoundsException: 3; 	at scala.collection.mutable.WrappedArray$ofRef.apply(WrappedArray.scala:127); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33$$anonfun$apply$19.getKey$1(OrderingSuite.scala:345); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33$$anonfun$apply$19.apply(OrderingSuite.scala:347); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33$$anonfun$apply$19.apply(OrderingSuite.scala:318); 	at is.hail.utils.package$.using(package.scala:613); 	at is.hail.annotations.Region$.scoped(Region.scala:13); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33.apply(OrderingSuite.scala:318); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33.apply(OrderingSuite.scala:314); 	at is.hail.check.GenProp1$$anonfun$apply$1$$anonfun$1.apply$mcZ$sp(Prop.scala:28);,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5630:1892,test,testng,1892,https://hail.is,https://github.com/hail-is/hail/issues/5630,1,['test'],['testng']
Testability,.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-2LzGioRNy6RqIS2pfXIoSO&uploadType=resumable&upload_id=ADPycdvZ5HhnGfOKt5TE1qXWiHpqIpZnXVTYWuWUCXNPRF9HqyCB-4LvRsxNX6SUWRgk13pYrzYaa9-wXlvNZt1oct0ptaEz0bS3; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 268435456; remoteOffset: 285212672; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 		at is.hail,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:4816,test,testng,4816,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['test'],['testng']
Testability,.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-6BO4gZ18Lheigp3ir9RSOh&uploadType=resumable&upload_id=ADPycduiXx2Jtiy_0Ll131_pPeEYKnnA23Hlk28_9TFESUMaubA9OqLK_n8Td5rPhTXnlpssGo796Q4bJxUeblhmSaYcCSWAMg2k; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 1325400064; remoteOffset: 1342177280; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 		at is.ha,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:4623,test,testng,4623,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['test'],['testng']
Testability,.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:122); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144); Caused by: java.lang.reflect.InvocationTargetException; at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(N,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:2015,test,testng,2015,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['test'],['testng']
Testability,.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-2LzGioRNy6RqIS2pfXIoSO&uploadType=resumable&upload_id=ADPycdvZ5HhnGfOKt5TE1qXWiHpqIpZnXVTYWuWUCXNPRF9HqyCB-4LvRsxNX6SUWRgk13pYrzYaa9-wXlvNZt1oct0ptaEz0bS3; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 268435456; remoteOffset: 285212672; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.access$1000(BlobWriteChannel.java:35); 		at is.hail.reloc,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:4926,Test,TestNG,4926,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['Test'],['TestNG']
Testability,.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-6BO4gZ18Lheigp3ir9RSOh&uploadType=resumable&upload_id=ADPycduiXx2Jtiy_0Ll131_pPeEYKnnA23Hlk28_9TFESUMaubA9OqLK_n8Td5rPhTXnlpssGo796Q4bJxUeblhmSaYcCSWAMg2k; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 1325400064; remoteOffset: 1342177280; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.access$1000(BlobWriteChannel.java:35); 		at is.hail.rel,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:4733,Test,TestNG,4733,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['Test'],['TestNG']
Testability,.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:122); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144); Caused by: java.lang.reflect.InvocationTargetException; at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.ap,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:2201,test,testng,2201,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['test'],['testng']
Testability,".js; 450 B .next/static/css/commons.b770adbe.chunk.css; 5.74 kB .next/static/css/styles.4f393762.chunk.css; 6.93 kB .next/static/runtime/main-76ed****.js; 737 B .next/static/runtime/webpack-8917****.js; ```. Bundling cutoffs can be tweaked, but basically any common dependencies between pages are placed into one chunk. Chunks are loaded in parallel, and no chunks are needed to load the page; it's just HTML on initial render. At least some of the chunks could theoretically be served from a CDN (styles of course, some js). Each package expects a .env file, which organizes the environment variables used in that package. This can be used with Kubernetes. `kubectl create secret generic secretesfile --from-file=prod/env.txt`. The .env for the web app, where localhost would be replaced by our sub.domain. If you get it running, you may notice there isn't a way to log out... I ripped out all of the UI stuff after speaking with Cotton, and began writing a minimal interface. Just clear the cookie if you need to log out. ```; AUTH0_CLIENT_ID=TD78k23CcdM4pMWoYZwYwKJbQPBj06jY; AUTH0_DOMAIN=hail.auth0.com; AUTH0_SCOPE='opened profile repo read:users read:user_idp_tokens'; AUTH0_AUDIENCE='hail'; AUTH0_REDIRECT_URI='https://localhost/auth0callback'; SCORECARD_URL='https://scorecard.localhost/json'; SCORECARD_USER_URL='https://scorecard.localhost/json/users'; GRAPHQL_URL='https://localhost/api/graphql'; ```. The .env for the gateway; ```; AUTH0_WEB_KEY_SET_URL=https://hail.auth0.com/.well-known/jwks.json; AUTH0_AUDIENCE=hail; AUTH0_DOMAIN=https://hail.auth0.com/. AUTH0_MANAGEMENT_API_CLIENT=eqDY6HWOKd6MzC8kWCFaZUAoZgNUHypA; AUTH0_MANAGEMENT_API_SECRET=<I'll give this>; AUTH0_MANAGEMENT_API_TOKEN_URL=https://hail.auth0.com/oauth/token; AUTH0_MANAGEMENT_API_URL=https://hail.auth0.com/api/v2/users; AUTH0_MANAGEMENT_API_AUDIENCE=https://hail.auth0.com/api/v2/; ```. Organization of the web app is simple. There is a pages directory. Routes match the folder structure. Pages that don't need t",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4931#issuecomment-454271935:2410,log,log,2410,https://hail.is,https://github.com/hail-is/hail/pull/4931#issuecomment-454271935,1,['log'],['log']
Testability,.json4s.Extraction$ClassInstanceBuilder$$anonfun$result$6.apply(Extraction.scala:512); 	at org.json4s.Extraction$.org$json4s$Extraction$$customOrElse(Extraction.scala:524); 	at org.json4s.Extraction$ClassInstanceBuilder.result(Extraction.scala:512); 	at org.json4s.Extraction$.extract(Extraction.scala:351); 	at org.json4s.Extraction$ClassInstanceBuilder.org$json4s$Extraction$ClassInstanceBuilder$$mkWithTypeHint(Extraction.scala:507); 	at org.json4s.Extraction$ClassInstanceBuilder$$anonfun$result$6.apply(Extraction.scala:514); 	at org.json4s.Extraction$ClassInstanceBuilder$$anonfun$result$6.apply(Extraction.scala:512); 	at org.json4s.Extraction$.org$json4s$Extraction$$customOrElse(Extraction.scala:524); 	at org.json4s.Extraction$ClassInstanceBuilder.result(Extraction.scala:512); 	at org.json4s.Extraction$.extract(Extraction.scala:351); 	at org.json4s.Extraction$.extract(Extraction.scala:42); 	at org.json4s.ExtractableJsonAstNode.extract(ExtractableJsonAstNode.scala:21); 	at is.hail.variant.RelationalSpec$.read(MatrixTable.scala:69); 	at is.hail.expr.ir.TableIR$.read(TableIR.scala:23); 	at is.hail.table.Table$.read(Table.scala:56); 	at is.hail.HailContext.readTable(HailContext.scala:572); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244); 	at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357); 	at py4j.Gateway.invoke(Gateway.java:280); 	at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132); 	at py4j.commands.CallCommand.execute(CallCommand.java:79); 	at py4j.GatewayConnection.run(GatewayConnection.java:214); 	at java.lang.Thread.run(Thread.java:748). Hail version: devel-51961fa0ef80; Error summary: AssertionError: assertion failed```,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4325:7971,Assert,AssertionError,7971,https://hail.is,https://github.com/hail-is/hail/issues/4325,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[13]([Ljava.lang.String;@3bda762a)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[13]([Ljava.lang.String;@3bda762a) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[14]([Ljava.lang.String;@4898b38e)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[14]([Ljava.lang.String;@4898b38e) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[15]([Ljava.lang.String;@51684a)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[15]([Ljava.lang.String;@51684a) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[16]([Ljava.lang.String;@4a971368)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[16]([Ljava.lang.String;@4a971368) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[17]([Ljava.lang.String;@47162b74)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[17]([Ljava.lang.String;@47162b74) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[18]([Ljava.lang.String;@70bfbb33)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[18]([Ljava.lang.String;@70bfbb33) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[19]([Ljava.lang.String;@3e391ee2)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[19]([Ljava.lang.String;@3e391ee2) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: ,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4718:6959,test,test,6959,https://hail.is,https://github.com/hail-is/hail/issues/4718,1,['test'],['test']
Testability,.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[14]([Ljava.lang.String;@4898b38e)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[14]([Ljava.lang.String;@4898b38e) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[15]([Ljava.lang.String;@51684a)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[15]([Ljava.lang.String;@51684a) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[16]([Ljava.lang.String;@4a971368)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[16]([Ljava.lang.String;@4a971368) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[17]([Ljava.lang.String;@47162b74)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[17]([Ljava.lang.String;@47162b74) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[18]([Ljava.lang.String;@70bfbb33)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[18]([Ljava.lang.String;@70bfbb33) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[19]([Ljava.lang.String;@3e391ee2)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[19]([Ljava.lang.String;@3e391ee2) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testCXXCodeFunctions(is.hail.nativecode.NativeCodeSuite); DEBUG: Logging set_test_msg ... Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testCXXCodeFunctions PASSED; Running test: Test method testNativeBuild(is.hail.nativecode.NativeCodeSuite). Grad,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4718:7237,test,test,7237,https://hail.is,https://github.com/hail-is/hail/issues/4718,1,['test'],['test']
Testability,.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[15]([Ljava.lang.String;@51684a)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[15]([Ljava.lang.String;@51684a) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[16]([Ljava.lang.String;@4a971368)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[16]([Ljava.lang.String;@4a971368) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[17]([Ljava.lang.String;@47162b74)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[17]([Ljava.lang.String;@47162b74) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[18]([Ljava.lang.String;@70bfbb33)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[18]([Ljava.lang.String;@70bfbb33) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[19]([Ljava.lang.String;@3e391ee2)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[19]([Ljava.lang.String;@3e391ee2) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testCXXCodeFunctions(is.hail.nativecode.NativeCodeSuite); DEBUG: Logging set_test_msg ... Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testCXXCodeFunctions PASSED; Running test: Test method testNativeBuild(is.hail.nativecode.NativeCodeSuite). Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testNativeBuild PASSED; Running test: Test method testNativeCallSpeed(is.hail.nativecode.NativeCodeSuite). Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testNativeCallSpeed PASSED; Running test: Test ,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4718:7515,test,test,7515,https://hail.is,https://github.com/hail-is/hail/issues/4718,1,['test'],['test']
Testability,.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[9]([Ljava.lang.String;@5a40cc5)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[9]([Ljava.lang.String;@5a40cc5) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[10]([Ljava.lang.String;@69594c0e)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[10]([Ljava.lang.String;@69594c0e) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[11]([Ljava.lang.String;@5ea39a14)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[11]([Ljava.lang.String;@5ea39a14) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[12]([Ljava.lang.String;@21ebf782)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[12]([Ljava.lang.String;@21ebf782) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[13]([Ljava.lang.String;@3bda762a)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[13]([Ljava.lang.String;@3bda762a) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[14]([Ljava.lang.String;@4898b38e)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[14]([Ljava.lang.String;@4898b38e) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[15]([Ljava.lang.String;@51684a)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[15]([Ljava.lang.String;@51684a) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4718:5851,test,test,5851,https://hail.is,https://github.com/hail-is/hail/issues/4718,1,['test'],['test']
Testability,".map(child => boundary(child.asInstanceOf[IR])); val x = if ((node.children, newChildren).zipped.forall(_ eq _)); node; else; node.copy(newChildren). if(x.typ.isInstanceOf[TArray]); ToStream(x); else; x; ```. IRSuite.testDictContains:. Before Lower: ; MakeTuple(ArrayBuffer((0,ApplyIR(contains,ArrayBuffer(GetTupleElement(In(0,PCTuple[0:PCDict[PInt32,PCString]]),0), NA(int32)))))); ...; before: ; ToArray(Ref(__iruid_56,dict<int32, str>)) of typ: array<struct{key: int32, value: str}>; after: Ref(__iruid_56,dict<int32, str>) of typ: dict<int32, str>. java.lang.AssertionError: assertion failed. 	at scala.Predef$.assert(Predef.scala:156); 	at is.hail.expr.ir.LowerArrayToStream$.is$hail$expr$ir$LowerArrayToStream$$boundary(LowerArrayToStream.scala:19). #### Fix:; ```scala; private def toStream(node: IR): IR = {; node match {; case _: ToStream => node; case _ => {; if(node.typ.isInstanceOf[TIterable]) {; ToStream(node); } else {; node; }; }; }; }; ```. New issues (many more failures in IRSuite, and surely plenty more in other tests):. First of these:; Before Lower: ; MakeTuple(ArrayBuffer((0,Let(__iruid_302,RunAgg(Begin(ArrayBuffer(Begin(ArrayBuffer(InitOp(0,ArrayBuffer(),AggStateSignature(Map(Sum() -> AggSignature(Sum(),ArrayBuffer(),ArrayBuffer(int64))),Sum(),None),Sum()))), ArrayFor(ArrayMap(ArrayRange(I32(0),I32(4),I32(1)),__iruid_304,Cast(Ref(__iruid_304,int32),int64)),__iruid_303,Begin(ArrayBuffer(SeqOp(0,ArrayBuffer(Ref(__iruid_303,int64)),AggStateSignature(Map(Sum() -> AggSignature(Sum(),ArrayBuffer(),ArrayBuffer(int64))),Sum(),None),Sum())))))),ResultOp(0,WrappedArray(AggStateSignature(Map(Sum() -> AggSignature(Sum(),ArrayBuffer(),ArrayBuffer(int64))),Sum(),None))),WrappedArray(AggStateSignature(Map(Sum() -> AggSignature(Sum(),ArrayBuffer(),ArrayBuffer(int64))),Sum(),None))),GetTupleElement(Ref(__iruid_302,tuple(int64)),0))))). After lower: ; MakeTuple(ArrayBuffer((0,Let(__iruid_302,RunAgg(Begin(ArrayBuffer(Begin(ArrayBuffer(InitOp(0,ArrayBuffer(),AggStateSignature",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8063#issuecomment-586602113:1764,test,tests,1764,https://hail.is,https://github.com/hail-is/hail/pull/8063#issuecomment-586602113,1,['test'],['tests']
Testability,.methods.FilterSuite.filterTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.treeTransformerTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MultiArray2Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.PedigreeSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.SampleQCSuite.testStoreAfterFilter PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.vcf.SplitSuite.SplitTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testD_$eq$eq PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testFlushDouble PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.testFil,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/158#issuecomment-173700450:1827,test,test,1827,https://hail.is,https://github.com/hail-is/hail/pull/158#issuecomment-173700450,1,['test'],['test']
Testability,.methods.GQByDPBinSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MultiArray2Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.PedigreeSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.SampleQCSuite.testStoreAfterFilter PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.vcf.SplitSuite.SplitTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testD_$eq$eq PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testFlushDouble PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.testFilterSamples PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.testSame PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.VariantSuite.testVaria,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/158#issuecomment-173700450:2020,test,test,2020,https://hail.is,https://github.com/hail-is/hail/pull/158#issuecomment-173700450,1,['test'],['test']
Testability,.package$.using(package.scala:677) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.FS.writePDOS(FS.scala:441) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.FS.writePDOS$(FS.scala:440) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.RouterFS.writePDOS(RouterFS.scala:3) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Worker$.$anonfun$main$4(Worker.scala:124) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Worker$.$anonfun$main$4$adapted(Worker.scala:124) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Worker$.$anonfun$main$13(Worker.scala:178) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23) ~[scala-library-2.12.15.jar:?]; 	at is.hail.services.package$.retryTransientErrors(package.scala:182) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Worker$.main(Worker.scala:177) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Main$.main(Main.scala:14) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Main.main(Main.scala) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	... 12 more; ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:14817,test,test-,14817,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,5,['test'],['test-']
Testability,".py"", line 2963, in run_code; exec(code_obj, self.user_global_ns, self.user_ns); File ""<ipython-input-9-304965820738>"", line 1, in <module>; x.key_by('y').show(); File ""<decorator-gen-598>"", line 2, in show; File ""/Users/konradk/Dropbox/src/python/hail/typecheck/check.py"", line 486, in _typecheck; return __orig_func__(*args_, **kwargs_); File ""/Users/konradk/Dropbox/src/python/hail/table.py"", line 1101, in show; print(self._show(n,width, truncate, types)); File ""/Users/konradk/Dropbox/src/python/hail/table.py"", line 1104, in _show; return self._jt.showString(n, joption(truncate), types, width); File ""/Users/konradk/programs/spark-2.2.0-bin-hadoop2.7/python/lib/py4j-0.10.4-src.zip/py4j/java_gateway.py"", line 1133, in __call__; answer, self.gateway_client, self.target_id, self.name); File ""/Users/konradk/Dropbox/src/python/hail/utils/java.py"", line 196, in deco; 'Error summary: %s' % (deepest, full, hail.__version__, deepest)) from None; hail.utils.java.FatalError: AssertionError: assertion failed; Java stack trace:; org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 9.0 failed 1 times, most recent failure: Lost task 0.0 in stage 9.0 (TID 49, localhost, executor driver): java.lang.AssertionError: assertion failed; 	at scala.Predef$.assert(Predef.scala:156); 	at is.hail.rvd.OrderedRVD$$anonfun$apply$16$$anon$3.next(OrderedRVD.scala:926); 	at is.hail.rvd.OrderedRVD$$anonfun$apply$16$$anon$3.next(OrderedRVD.scala:908); 	at scala.collection.Iterator$$anon$12.next(Iterator.scala:444); 	at is.hail.utils.package$.getIteratorSizeWithMaxN(package.scala:349); 	at is.hail.sparkextras.ContextRDD$$anonfun$12.apply(ContextRDD.scala:433); 	at is.hail.sparkextras.ContextRDD$$anonfun$12.apply(ContextRDD.scala:433); 	at is.hail.sparkextras.ContextRDD$$anonfun$runJob$1$$anonfun$apply$34.apply(ContextRDD.scala:458); 	at is.hail.sparkextras.ContextRDD$$anonfun$runJob$1$$anonfun$apply$34.apply(ContextRDD.scala:458); 	at is.hail.utils.package$.using(package.sc",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3516:1650,Assert,AssertionError,1650,https://hail.is,https://github.com/hail-is/hail/issues/3516,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,".py"", line 8, in <module>; from hailtop.fs.fs import FS; File ""/Users/srinivas/test/.pixi/envs/default/lib/python3.12/site-packages/hailtop/fs/__init__.py"", line 1, in <module>; from .fs_utils import (; File ""/Users/srinivas/test/.pixi/envs/default/lib/python3.12/site-packages/hailtop/fs/fs_utils.py"", line 4, in <module>; from hailtop.aiocloud.aiogoogle import GCSRequesterPaysConfiguration; File ""/Users/srinivas/test/.pixi/envs/default/lib/python3.12/site-packages/hailtop/aiocloud/aiogoogle/__init__.py"", line 1, in <module>; from .client import (; File ""/Users/srinivas/test/.pixi/envs/default/lib/python3.12/site-packages/hailtop/aiocloud/aiogoogle/client/__init__.py"", line 8, in <module>; from .storage_client import (; File ""/Users/srinivas/test/.pixi/envs/default/lib/python3.12/site-packages/hailtop/aiocloud/aiogoogle/client/storage_client.py"", line 14, in <module>; from hailtop.aiotools import FeedableAsyncIterable, WriteBuffer; File ""/Users/srinivas/test/.pixi/envs/default/lib/python3.12/site-packages/hailtop/aiotools/__init__.py"", line 1, in <module>; from .fs import (; File ""/Users/srinivas/test/.pixi/envs/default/lib/python3.12/site-packages/hailtop/aiotools/fs/__init__.py"", line 1, in <module>; from .copier import Copier, CopyReport, SourceCopier, SourceReport, Transfer, TransferReport; File ""/Users/srinivas/test/.pixi/envs/default/lib/python3.12/site-packages/hailtop/aiotools/fs/copier.py"", line 7, in <module>; import humanize; File ""/Users/srinivas/test/.pixi/envs/default/lib/python3.12/site-packages/humanize/__init__.py"", line 1, in <module>; import pkg_resources; ModuleNotFoundError: No module named 'pkg_resources'. ```. I think this is largely because hail requires an ancient version of humanize (v1 vs v4). In any case, the wheel on PyPI is broken and un-importable. . There are other issues stemming from the underlying issue that there is no clear description of requirements and dependencies. . ### Version. 0.2.132. ### Relevant log output. _No response_",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14630:1966,test,test,1966,https://hail.is,https://github.com/hail-is/hail/issues/14630,4,"['log', 'test']","['log', 'test']"
Testability,.py'; adding 'hailtop/batch_client/__init__.py'; adding 'hailtop/batch_client/aioclient.py'; adding 'hailtop/batch_client/client.py'; adding 'hailtop/batch_client/globals.py'; adding 'hailtop/batch_client/parse.py'; adding 'hailtop/batch_client/types.py'; adding 'hailtop/cleanup_gcr/__init__.py'; adding 'hailtop/cleanup_gcr/__main__.py'; adding 'hailtop/config/__init__.py'; adding 'hailtop/config/deploy_config.py'; adding 'hailtop/config/user_config.py'; adding 'hailtop/config/variables.py'; adding 'hailtop/fs/__init__.py'; adding 'hailtop/fs/fs.py'; adding 'hailtop/fs/fs_utils.py'; adding 'hailtop/fs/router_fs.py'; adding 'hailtop/fs/stat_result.py'; adding 'hailtop/hailctl/__init__.py'; adding 'hailtop/hailctl/__main__.py'; adding 'hailtop/hailctl/deploy.yaml'; adding 'hailtop/hailctl/describe.py'; adding 'hailtop/hailctl/auth/__init__.py'; adding 'hailtop/hailctl/auth/cli.py'; adding 'hailtop/hailctl/auth/create_user.py'; adding 'hailtop/hailctl/auth/delete_user.py'; adding 'hailtop/hailctl/auth/login.py'; adding 'hailtop/hailctl/batch/__init__.py'; adding 'hailtop/hailctl/batch/batch_cli_utils.py'; adding 'hailtop/hailctl/batch/cli.py'; adding 'hailtop/hailctl/batch/initialize.py'; adding 'hailtop/hailctl/batch/list_batches.py'; adding 'hailtop/hailctl/batch/submit.py'; adding 'hailtop/hailctl/batch/utils.py'; adding 'hailtop/hailctl/batch/billing/__init__.py'; adding 'hailtop/hailctl/batch/billing/cli.py'; adding 'hailtop/hailctl/config/__init__.py'; adding 'hailtop/hailctl/config/cli.py'; adding 'hailtop/hailctl/config/config_variables.py'; adding 'hailtop/hailctl/dataproc/__init__.py'; adding 'hailtop/hailctl/dataproc/cli.py'; adding 'hailtop/hailctl/dataproc/cluster_config.py'; adding 'hailtop/hailctl/dataproc/connect.py'; adding 'hailtop/hailctl/dataproc/deploy_metadata.py'; adding 'hailtop/hailctl/dataproc/diagnose.py'; adding 'hailtop/hailctl/dataproc/gcloud.py'; adding 'hailtop/hailctl/dataproc/modify.py'; adding 'hailtop/hailctl/dataproc/start.py'; addi,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221:27011,log,login,27011,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221,1,['log'],['login']
Testability,".py:398>>. def exception(self):; """"""Return the exception that was set on this future.; ; The exception (or None if no exception was set) is returned only if; the future is done. If the future has been cancelled, raises; CancelledError. If the future isn't done yet, raises; InvalidStateError.; """"""; if self._state == _CANCELLED:; exc = self._make_cancelled_error(); > raise exc; E asyncio.exceptions.CancelledError. /usr/lib/python3.9/asyncio/futures.py:214: CancelledError. During handling of the above exception, another exception occurred:. request = <SubRequest 'tmpdir' for <Function test_hadoop_methods_3[local]>>. @pytest.fixture(params=['remote', 'local']); def tmpdir(request) -> Generator[str, None, None]:; if request.param == 'local':; tmpdir = _get_local_tmpdir(None); tmpdir = tmpdir[len('file://'):]; else:; tmpdir = os.environ['HAIL_TEST_STORAGE_URI']; tmpdir = os.path.join(tmpdir, secret_alnum_string(5)); ; fs.mkdir(tmpdir); yield tmpdir; > fs.rmtree(tmpdir). test/hail/utils/test_hl_hadoop_and_hail_fs.py:30: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /usr/local/lib/python3.9/dist-packages/hailtop/fs/fs_utils.py:246: in rmtree; _fs().rmtree(path); /usr/local/lib/python3.9/dist-packages/hailtop/fs/router_fs.py:405: in rmtree; return async_to_blocking(self.afs.rmtree(None, path)); /usr/local/lib/python3.9/dist-packages/hailtop/utils/utils.py:150: in async_to_blocking; return loop.run_until_complete(task); /usr/local/lib/python3.9/dist-packages/nest_asyncio.py:90: in run_until_complete; return f.result(); /usr/lib/python3.9/asyncio/futures.py:201: in result; raise self._exception; /usr/lib/python3.9/asyncio/tasks.py:258: in __step; result = coro.throw(exc); /usr/local/lib/python3.9/dist-packages/hailtop/aiotools/router_fs.py:131: in rmtree; return await fs.rmtree(sema, url, listener); /usr/local/lib/python3.9/dist-packages/hailtop/aiotools/local_fs.py:409: in rmtree; await rm_dir(pool, contents_tasks_by_dir.get(path, []), pa",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13361:9933,test,test,9933,https://hail.is,https://github.com/hail-is/hail/issues/13361,1,['test'],['test']
Testability,.relocated.com.google.cloud.storage.JsonResumableSessionQueryTask.call(JsonResumableSessionQueryTask.java:100) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSession.query(JsonResumableSession.java:57) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSession.lambda$put$0(JsonResumableSession.java:73) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.Retrying.lambda$run$0(Retrying.java:102) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at com.google.api.gax.retrying.DirectRetryingExecutor.submit(DirectRetryingExecutor.java:103) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.RetryHelper.run(RetryHelper.java:76) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.RetryHelper.runWithRetries(RetryHelper.java:50) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.Retrying.run(Retrying.java:99) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSession.put(JsonResumableSession.java:68) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.ApiaryUnbufferedWritableByteChannel.internalWrite(ApiaryUnbufferedWritableByteChanne,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:9907,test,test-,9907,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['test-']
Testability,.retryTransientErrors(package.scala:182) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.close(GoogleStorageFS.scala:308) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at java.io.FilterOutputStream.close(FilterOutputStream.java:159) ~[?:1.8.0_382]; 	at is.hail.utils.package$.using(package.scala:677) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.FS.writePDOS(FS.scala:441) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.FS.writePDOS$(FS.scala:440) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.RouterFS.writePDOS(RouterFS.scala:3) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Worker$.$anonfun$main$4(Worker.scala:124) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Worker$.$anonfun$main$4$adapted(Worker.scala:124) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Worker$.$anonfun$main$13(Worker.scala:178) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23) ~[scala-library-2.12.15.jar:?]; 	at is.hail.services.package$.retryTransientErrors(package.scala:182) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Worker$.main(Worker.scala:177) ~[gs:__hail-test-ezl,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:14259,test,test-,14259,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['test-']
Testability,.run(StackSafe.scala:32); 	at is.hail.expr.ir.IRParser$.$anonfun$parse_matrix_ir$1(Parser.scala:1986); 	at is.hail.expr.ir.IRParser$.parse(Parser.scala:1973); 	at is.hail.expr.ir.IRParser$.parse_matrix_ir(Parser.scala:1986); 	at is.hail.backend.spark.SparkBackend.$anonfun$parse_matrix_ir$2(SparkBackend.scala:689); 	at is.hail.backend.ExecuteContext$.$anonfun$scoped$3(ExecuteContext.scala:69); 	at is.hail.utils.package$.using(package.scala:640); 	at is.hail.backend.ExecuteContext$.$anonfun$scoped$2(ExecuteContext.scala:69); 	at is.hail.utils.package$.using(package.scala:640); 	at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:17); 	at is.hail.backend.ExecuteContext$.scoped(ExecuteContext.scala:58); 	at is.hail.backend.spark.SparkBackend.withExecuteContext(SparkBackend.scala:308); 	at is.hail.backend.spark.SparkBackend.$anonfun$parse_matrix_ir$1(SparkBackend.scala:688); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:52); 	at is.hail.utils.ExecutionTimer$.logTime(ExecutionTimer.scala:59); 	at is.hail.backend.spark.SparkBackend.parse_matrix_ir(SparkBackend.scala:687); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.base/java.lang.reflect.Method.invoke(Method.java:566); 	at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244); 	at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357); 	at py4j.Gateway.invoke(Gateway.java:282); 	at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132); 	at py4j.commands.CallCommand.execute(CallCommand.java:79); 	at py4j.GatewayConnection.run(GatewayConnection.java:238); 	at java.base/java.lang.Thread.run(Thread.java:834). 2022-05-14 12:09:11 SparkContext: INFO: Invoking stop() from shutdown hook; 2022-05-14 12:09:11 AbstractConnec,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/11836:7918,log,logTime,7918,https://hail.is,https://github.com/hail-is/hail/issues/11836,1,['log'],['logTime']
Testability,.run(StackSafe.scala:32); 	at is.hail.expr.ir.IRParser$.$anonfun$parse_matrix_ir$1(Parser.scala:1986); 	at is.hail.expr.ir.IRParser$.parse(Parser.scala:1973); 	at is.hail.expr.ir.IRParser$.parse_matrix_ir(Parser.scala:1986); 	at is.hail.backend.spark.SparkBackend.$anonfun$parse_matrix_ir$2(SparkBackend.scala:689); 	at is.hail.backend.ExecuteContext$.$anonfun$scoped$3(ExecuteContext.scala:69); 	at is.hail.utils.package$.using(package.scala:640); 	at is.hail.backend.ExecuteContext$.$anonfun$scoped$2(ExecuteContext.scala:69); 	at is.hail.utils.package$.using(package.scala:640); 	at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:17); 	at is.hail.backend.ExecuteContext$.scoped(ExecuteContext.scala:58); 	at is.hail.backend.spark.SparkBackend.withExecuteContext(SparkBackend.scala:308); 	at is.hail.backend.spark.SparkBackend.$anonfun$parse_matrix_ir$1(SparkBackend.scala:688); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:52); 	at is.hail.utils.ExecutionTimer$.logTime(ExecutionTimer.scala:59); 	at is.hail.backend.spark.SparkBackend.parse_matrix_ir(SparkBackend.scala:687); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.base/java.lang.reflect.Method.invoke(Method.java:566); 	at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244); 	at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357); 	at py4j.Gateway.invoke(Gateway.java:282); 	at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132); 	at py4j.commands.CallCommand.execute(CallCommand.java:79); 	at py4j.GatewayConnection.run(GatewayConnection.java:238); 	at java.base/java.lang.Thread.run(Thread.java:834). is.hail.utils.HailException: Invalid locus '11:135009883' found. Position '135009883' is not within the range ,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/11836:4061,log,logTime,4061,https://hail.is,https://github.com/hail-is/hail/issues/11836,1,['log'],['logTime']
Testability,.scala:286); at org.broadinstitute.hail.methods.MendelErrors.writeMendel(MendelErrors.scala:143); at org.broadinstitute.hail.methods.MendelErrorsSuite.test(MendelErrorsSuite.scala:50); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:122); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at com.intellij.r,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:1789,Test,TestRunner,1789,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['Test'],['TestRunner']
Testability,".scala:304); 	at is.hail.backend.spark.SparkBackend.executeJSON(SparkBackend.scala:324); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244); 	at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357); 	at py4j.Gateway.invoke(Gateway.java:282); 	at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132); 	at py4j.commands.CallCommand.execute(CallCommand.java:79); 	at py4j.GatewayConnection.run(GatewayConnection.java:238); 	at java.lang.Thread.run(Thread.java:748); ```. Attempting to evaluate the array first and create and ndarray from that yields a different issue, again should work:. ```python; >>> b = hl.eval(a); >>> hl.eval(hl.nd.array(b)); FatalError: AssertionError: assertion failed. Java stack trace:; java.lang.AssertionError: assertion failed; 	at scala.Predef$.assert(Predef.scala:156); 	at is.hail.types.physical.PCanonicalArray.checkedConvertFrom(PCanonicalArray.scala:320); 	at is.hail.expr.ir.Emit$$anonfun$emitI$10$$anonfun$apply$23$$anonfun$apply$24.apply(Emit.scala:815); 	at is.hail.expr.ir.Emit$$anonfun$emitI$10$$anonfun$apply$23$$anonfun$apply$24.apply(Emit.scala:811); 	at is.hail.expr.ir.IEmitCode.map(Emit.scala:234); 	at is.hail.expr.ir.Emit$$anonfun$emitI$10$$anonfun$apply$23.apply(Emit.scala:811); 	at is.hail.expr.ir.Emit$$anonfun$emitI$10$$anonfun$apply$23.apply(Emit.scala:810); 	at is.hail.expr.ir.IEmitCode.flatMap(Emit.scala:241); 	at is.hail.expr.ir.Emit$$anonfun$emitI$10.apply(Emit.scala:810); 	at is.hail.expr.ir.Emit$$anonfun$emitI$10.apply(Emit.scala:809); 	at is.hail.expr.ir.IEmitCode.flatMap(Emit.scala:241); 	at is.hail.expr.ir.Emit.emitI(Emit.scala:809); 	at is.hail.expr.ir.Emit.is$hail$expr$ir$Emit$$emitI$3(Emit.s",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9128:9235,Assert,AssertionError,9235,https://hail.is,https://github.com/hail-is/hail/issues/9128,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,.scala:935); at is.hail.sparkextras.ContextRDD.collect(ContextRDD.scala:132); at is.hail.rvd.OrderedRVD$.getPartitionKeyInfo(OrderedRVD.scala:541); at is.hail.rvd.OrderedRVD.coalesce(OrderedRVD.scala:200); at is.hail.variant.MatrixTable.coalesce(MatrixTable.scala:2073); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:498); at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244); at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357); at py4j.Gateway.invoke(Gateway.java:280); at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132); at py4j.commands.CallCommand.execute(CallCommand.java:79); at py4j.GatewayConnection.run(GatewayConnection.java:214); at java.lang.Thread.run(Thread.java:748)java.lang.AssertionError: assertion failed; at scala.Predef$.assert(Predef.scala:156); at is.hail.annotations.Region.loadAddress(Region.scala:63); at is.hail.expr.types.TBaseStruct.loadField(TBaseStruct.scala:215); at is.hail.annotations.RegionValueBuilder.addField(RegionValueBuilder.scala:335); at is.hail.annotations.RegionValueBuilder.addField(RegionValueBuilder.scala:341); at is.hail.annotations.WritableRegionValue.setSelect(WritableRegionValue.scala:38); at is.hail.rvd.OrderedRVD$$anonfun$getKeys$1$$anonfun$apply$9.apply(OrderedRVD.scala:511); at is.hail.rvd.OrderedRVD$$anonfun$getKeys$1$$anonfun$apply$9.apply(OrderedRVD.scala:510); at scala.collection.Iterator$$anon$11.next(Iterator.scala:409); at scala.collection.Iterator$$anon$12.next(Iterator.scala:444); at is.hail.rvd.OrderedRVPartitionInfo$.apply(OrderedRVPartitionInfo.scala:30); at is.hail.rvd.OrderedRVD$$anonfun$10.apply(OrderedRVD.scala:536); at is.hail.rvd.OrderedRVD$$anonfun$10.apply(OrderedRVD.scala:534); at is.hail.sparkextras.ContextRDD$$anonfun$cma,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3507:8389,Assert,AssertionError,8389,https://hail.is,https://github.com/hail-is/hail/issues/3507,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,.scalatest.testng.TestNGSuite.newAssertionFailedException(TestNGSuite.scala:67); 	at org.scalatest.Assertions$AssertionsHelper.macroAssert(Assertions.scala:501); 	at is.hail.io.fs.FSSuite.largeDirectoryOperations(FSSuite.scala:413); 	at is.hail.io.fs.FSSuite.largeDirectoryOperations$(FSSuite.scala:398); 	at is.hail.io.fs.GoogleStorageFSSuite.largeDirectoryOperations(GoogleStorageFSSuite.scala:10); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333). test is.hail.io.fs.GoogleStorageFSSuite.largeDirectoryOperations FAILURE; ```. ### Version. 0.2.124. #,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13827:1629,test,testng,1629,https://hail.is,https://github.com/hail-is/hail/issues/13827,1,['test'],['testng']
Testability,.suffix; at org.scalatest.Assertions.newAssertionFailedException(Assertions.scala:528); at org.scalatest.Assertions.newAssertionFailedException$(Assertions.scala:527); at org.scalatest.testng.TestNGSuite.newAssertionFailedException(TestNGSuite.scala:67); at org.scalatest.Assertions$AssertionsHelper.macroAssert(Assertions.scala:501); at is.hail.io.fs.FSSuite.largeDirectoryOperations(FSSuite.scala:445); at is.hail.io.fs.FSSuite.largeDirectoryOperations$(FSSuite.scala:430); at is.hail.io.fs.GoogleStorageFSSuite.largeDirectoryOperations(GoogleStorageFSSuite.scala:10); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:498); at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:136); at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:658); at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:219); at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50); at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:923); at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:192); at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128); at java.util.ArrayList.forEach(ArrayList.java:1259); at org.testng.TestRunner.privateRun(TestRunner.java:808); at org.testng.TestRunner.run(TestRunner.java:603); at org.testng.SuiteRunner.runTest(SuiteRunner.java:429); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:423); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:383); at org.testng.SuiteRunner.run(SuiteRunner.java:326); at org.testng.SuiteRunnerWorker.runSui,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547:1244,Test,TestInvoker,1244,https://hail.is,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547,1,['Test'],['TestInvoker']
Testability,.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSameAsOrigBGzip PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSameAsOrigNoCompression PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportVcfSuite.testSorted PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.evalTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.filterTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.FilterSuite.treeTransformerTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.GQByDPBinSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeStreamSuite.testGenotypeStream PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.GenotypeSuite.testGenotype PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.HWESuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.IntervalListSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MultiArray2Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.PedigreeSuite.te,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/158#issuecomment-173700450:1360,test,test,1360,https://hail.is,https://github.com/hail-is/hail/pull/158#issuecomment-173700450,1,['test'],['test']
Testability,".test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.LEB128Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.exactTestsTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.meanTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.modeTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.pmfTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.stats.LeveneHaldaneSuite.varianceTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.LinearRegressionSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MendelErrorsSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.MultiArray2Suite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.PedigreeSuite.test PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.SampleQCSuite.testStoreAfterFilter PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.vcf.SplitSuite.SplitTest PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testD_$eq$eq PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.utils.UtilsSuite.testFlushDouble PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.testFilterSamples PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.vsm.VSMSuite.testSame PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.variant.VariantSuite.testVariant PASSED. Gradle suite > Gradle test > org.broadinstitute.hail.methods.gqDpStatsSuite.test PASSED; :check. BUILD SUCCESSFUL; ```. **TIMING**. import, write chr22; - Current master, best of 3: 1m48.5s; - map-any, best of 3: 1m43.1s. read, filtervariants --keep -c 'va.info.MQ>20' filtergenotypes --keep -c 'g.gq > 20' count; - master, best of 3: 2m55s; - map-any, best of 3: 35.3s. read, count takes 9s",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/158#issuecomment-173700450:2440,test,testStoreAfterFilter,2440,https://hail.is,https://github.com/hail-is/hail/pull/158#issuecomment-173700450,13,['test'],"['test', 'testFilterSamples', 'testFlushDouble', 'testSame', 'testStoreAfterFilter', 'testVariant']"
Testability,.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:122); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144); Caused by: java.lang.reflect.InvocationTargetException; at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.apache.spark.serializer.SerializationDebugger$ObjectStreamClassMethods$.getObjFieldValues$extension(SerializationDebugger.scala:240); at org.apache.spark.serializer.SerializationDebugger$SerializationDebugger.visitSerializable(,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:2426,test,testng,2426,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['test'],['testng']
Testability,".user_global_ns, self.user_ns); File ""<ipython-input-53-73b5a6c78295>"", line 1, in <module>; ht.show(); File ""/Users/laurent/tools/hail-release/devel/hail.zip/hail/typecheck/check.py"", line 547, in wrapper; return f(*args_, **kwargs_); File ""/Users/laurent/tools/hail-release/devel/hail.zip/hail/table.py"", line 1169, in show; print(self._show(n,width, truncate, types)); File ""/Users/laurent/tools/hail-release/devel/hail.zip/hail/table.py"", line 1172, in _show; return self._jt.showString(n, joption(truncate), types, width); File ""/Users/laurent/tools/spark-2.2.0-bin-hadoop2.7/python/lib/py4j-0.10.4-src.zip/py4j/java_gateway.py"", line 1133, in __call__; answer, self.gateway_client, self.target_id, self.name); File ""/Users/laurent/tools/hail-release/devel/hail.zip/hail/utils/java.py"", line 196, in deco; 'Error summary: %s' % (deepest, full, hail.__version__, deepest)) from None; hail.utils.java.FatalError: AssertionError: assertion failed; Java stack trace:; java.lang.AssertionError: assertion failed; at scala.Predef$.assert(Predef.scala:156); at is.hail.expr.ir.TypeCheck$.apply(TypeCheck.scala:78); at is.hail.expr.ir.TypeCheck$.apply(TypeCheck.scala:7); at is.hail.expr.ir.Emit$.emit(Emit.scala:42); at is.hail.expr.ir.Emit$.apply(Emit.scala:28); at is.hail.expr.ir.Compile$.apply(Compile.scala:49); at is.hail.expr.ir.Compile$.apply(Compile.scala:31); at is.hail.expr.ir.Compile$.apply(Compile.scala:62); at is.hail.expr.TableExplode.execute(Relational.scala:2201); at is.hail.expr.TableUnkey.execute(Relational.scala:1883); at is.hail.expr.TableMapRows.execute(Relational.scala:2090); at is.hail.expr.TableKeyBy.execute(Relational.scala:1846); at is.hail.expr.TableMapRows.execute(Relational.scala:2090); at is.hail.table.Table.value$lzycompute(Table.scala:243); at is.hail.table.Table.value(Table.scala:238); at is.hail.table.Table.x$5$lzycompute(Table.scala:246); at is.hail.table.Table.x$5(Table.scala:246); at is.hail.table.Table.rvd$lzycompute(Table.scala:246); at is.hail.table.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3744:2676,Assert,AssertionError,2676,https://hail.is,https://github.com/hail-is/hail/issues/3744,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,.withScope(RDD.scala:362); 	at org.apache.spark.rdd.PairRDDFunctions.collectAsMap(PairRDDFunctions.scala:745); 	at is.hail.variant.MatrixTable.annotateColsTable(MatrixTable.scala:874); 	at is.hail.variant.MatrixTable.annotateColsTable(MatrixTable.scala:827); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244); 	at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357); 	at py4j.Gateway.invoke(Gateway.java:280); 	at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132); 	at py4j.commands.CallCommand.execute(CallCommand.java:79); 	at py4j.GatewayConnection.run(GatewayConnection.java:214); 	at java.lang.Thread.run(Thread.java:748)java.lang.AssertionError: assertion failed; 	at scala.Predef$.assert(Predef.scala:156); 	at is.hail.rvd.OrderedRVD$$anonfun$apply$10$$anon$3.next(OrderedRVD.scala:751); 	at is.hail.rvd.OrderedRVD$$anonfun$apply$10$$anon$3.next(OrderedRVD.scala:733); 	at scala.collection.Iterator$$anon$1.next(Iterator.scala:1010); 	at scala.collection.Iterator$$anon$1.head(Iterator.scala:997); 	at is.hail.utils.richUtils.RichIterator$$anon$5.value(RichIterator.scala:18); 	at is.hail.utils.StagingIterator.value(FlipbookIterator.scala:47); 	at is.hail.utils.FlipbookIterator$$anon$5.value(FlipbookIterator.scala:167); 	at is.hail.utils.FlipbookIterator$$anon$5.isValid(FlipbookIterator.scala:168); 	at is.hail.utils.StagingIterator.isValid(FlipbookIterator.scala:46); 	at is.hail.utils.FlipbookIterator.exhaust(FlipbookIterator.scala:110); 	at is.hail.utils.FlipbookIterator$$anon$6.advance(FlipbookIterator.scala:176); 	at is.hail.utils.FlipbookIterator.staircased(FlipbookIterator.scala:186); 	at is.hail.annotations.OrderedRVIterator.staircase,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3235:8988,Assert,AssertionError,8988,https://hail.is,https://github.com/hail-is/hail/issues/3235,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,".zip. gcloud dataproc jobs submit pyspark \; $script \; --cluster $cluster \; --files=$JAR \; --py-files=$PYHAIL_ZIP \; --properties=""spark.driver.extraClassPath=./$JAR_FILE,spark.executor.extraClassPath=./$JAR_FILE"" \; --; ```; cluster JSON:; ```; {; ""projectId"": ""broad-ctsa"",; ""clusterName"": ""cluster-2"",; ""config"": {; ""configBucket"": ""dataproc-7f9e9d5e-03bd-4e95-bea1-fe0321239b35-us"",; ""gceClusterConfig"": {; ""zoneUri"": ""https://www.googleapis.com/compute/v1/projects/broad-ctsa/zones/us-central1-f"",; ""networkUri"": ""https://www.googleapis.com/compute/v1/projects/broad-ctsa/global/networks/default"",; ""serviceAccountScopes"": [; ""https://www.googleapis.com/auth/bigquery"",; ""https://www.googleapis.com/auth/bigtable.admin.table"",; ""https://www.googleapis.com/auth/bigtable.data"",; ""https://www.googleapis.com/auth/cloud.useraccounts.readonly"",; ""https://www.googleapis.com/auth/devstorage.full_control"",; ""https://www.googleapis.com/auth/devstorage.read_write"",; ""https://www.googleapis.com/auth/logging.write""; ]; },; ""masterConfig"": {; ""numInstances"": 1,; ""instanceNames"": [; ""cluster-2-m""; ],; ""imageUri"": ""https://www.googleapis.com/compute/v1/projects/cloud-dataproc/global/images/dataproc-1-1-20161212-154751"",; ""machineTypeUri"": ""https://www.googleapis.com/compute/v1/projects/broad-ctsa/zones/us-central1-f/machineTypes/n1-standard-4"",; ""diskConfig"": {; ""bootDiskSizeGb"": 10; }; },; ""workerConfig"": {; ""numInstances"": 2,; ""instanceNames"": [; ""cluster-2-w-0"",; ""cluster-2-w-1""; ],; ""imageUri"": ""https://www.googleapis.com/compute/v1/projects/cloud-dataproc/global/images/dataproc-1-1-20161212-154751"",; ""machineTypeUri"": ""https://www.googleapis.com/compute/v1/projects/broad-ctsa/zones/us-central1-f/machineTypes/n1-standard-4"",; ""diskConfig"": {; ""bootDiskSizeGb"": 10; }; },; ""softwareConfig"": {; ""imageVersion"": ""1.1.15"",; ""properties"": {; ""distcp:mapreduce.map.java.opts"": ""-Xmx2457m"",; ""distcp:mapreduce.map.memory.mb"": ""3072"",; ""distcp:mapreduce.reduce.java.opts"": ""-Xmx4915m"",; ""distc",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1186#issuecomment-267416027:3847,log,logging,3847,https://hail.is,https://github.com/hail-is/hail/issues/1186#issuecomment-267416027,1,['log'],['logging']
Testability,".zip/hail/typecheck/check.py in wrapper(__original_func, *args, **kwargs); 559 def wrapper(__original_func, *args, **kwargs):; 560 args_, kwargs_ = check_all(__original_func, args, kwargs, checkers, is_method=is_method); --> 561 return __original_func(*args_, **kwargs_); 562 ; 563 return wrapper. /home/hail/hail.zip/hail/matrixtable.py in _select_cols(self, caller, col, new_key); 3055 analyze(caller, col, self._col_indices, {self._row_axis}); 3056 base, cleanup = self._process_joins(col); -> 3057 return cleanup(MatrixTable(MatrixMapCols(base._mir, col._ir, new_key))); 3058 ; 3059 @typecheck_method(caller=str, s=expr_struct()). /home/hail/hail.zip/hail/matrixtable.py in __init__(self, mir); 556 self._entry_indices = Indices(self, {self._row_axis, self._col_axis}); 557 ; --> 558 self._type = self._mir.typ; 559 ; 560 self._global_type = self._type.global_type. /home/hail/hail.zip/hail/ir/base_ir.py in typ(self); 106 def typ(self):; 107 if self._type is None:; --> 108 self._compute_type(); 109 assert self._type is not None, self; 110 return self._type. /home/hail/hail.zip/hail/ir/matrix_ir.py in _compute_type(self); 81 def _compute_type(self):; 82 child_typ = self.child.typ; ---> 83 self.new_col._compute_type(child_typ.col_env(), child_typ.entry_env()); 84 self._type = hl.tmatrix(; 85 child_typ.global_type,. /home/hail/hail.zip/hail/ir/ir.py in _compute_type(self, env, agg_env); 1328 self.old._compute_type(env, agg_env); 1329 for f, x in self.fields:; -> 1330 x._compute_type(env, agg_env); 1331 self._type = self.old.typ._insert_fields(**{f: x.typ for f, x in self.fields}); 1332 if self.field_order:. /home/hail/hail.zip/hail/ir/ir.py in _compute_type(self, env, agg_env); 1082 def _compute_type(self, env, agg_env):; 1083 self.key._compute_type(agg_env, None); -> 1084 self.agg_ir._compute_type(env, agg_env); 1085 self._type = tdict(self.key.typ, self.agg_ir.typ); 1086 . /home/hail/hail.zip/hail/ir/ir.py in _compute_type(self, env, agg_env); 1200 if self.init_op_args:; 1201 ",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5415:3240,assert,assert,3240,https://hail.is,https://github.com/hail-is/hail/issues/5415,1,['assert'],['assert']
Testability,"//api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/refs{/sha}"",; ""trees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/trees{/sha}"",; ""statuses_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/statuses/{sha}"",; ""languages_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/languages"",; ""stargazers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/stargazers"",; ""contributors_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contributors"",; ""subscribers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscribers"",; ""subscription_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscription"",; ""commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/commits{/sha}"",; ""git_commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/commits{/sha}"",; ""comments_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/comments{/number}"",; ""issue_comment_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/comments{/number}"",; ""contents_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contents/{+path}"",; ""compare_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/compare/{base}...{head}"",; ""merges_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/merges"",. 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0; 100 7030 100 6999 100 31 9306 41 --:--:-- --:--:-- --:--:-- 9319; ""archive_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/{archive_format}{/ref}"",; ""downloads_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/downloads"",; ""issues_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues{/number}"",; ""pulls_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/pulls{/number}"",; ""milestones_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/milestones{/number}"",; ""notific",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:4363,test,test,4363,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,"//api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/languages"",; ""stargazers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/stargazers"",; ""contributors_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contributors"",; ""subscribers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscribers"",; ""subscription_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscription"",; ""commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/commits{/sha}"",; ""git_commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/commits{/sha}"",; ""comments_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/comments{/number}"",; ""issue_comment_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/comments{/number}"",; ""contents_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contents/{+path}"",; ""compare_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/compare/{base}...{head}"",; ""merges_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/merges"",. 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0; 100 7030 100 6999 100 31 9306 41 --:--:-- --:--:-- --:--:-- 9319; ""archive_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/{archive_format}{/ref}"",; ""downloads_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/downloads"",; ""issues_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues{/number}"",; ""pulls_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/pulls{/number}"",; ""milestones_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/milestones{/number}"",; ""notifications_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/notifications{?since,all,participating}"",; ""labels_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/labels{/name}"",; ""releases_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:4664,test,test,4664,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,"//discuss.hail.is/. -------------------------------------------------------------------------------------------. ### Hail version: 0.2.11. ### What you did: ./gradlew -Dspark.version=2.2.1 -Dspark.version=2.2.1 -Dpy4j.version=0.10.4 -Dbreeze.version=0.13.1 shadowJar. ### What went wrong (all error messages here, including the full java stack trace):; :compileJava UP-TO-DATE; :generateBuildInfo; :nativeLib; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Werror -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/usr/lib/jvm/java-8-openjdk-amd64/include -I/usr/lib/jvm/java-8-openjdk-amd64/include/linux testutils/unit-tests.cpp -MG -M -MF build/testutils/unit-tests.d -MT build/testutils/unit-tests.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Werror -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/usr/lib/jvm/java-8-openjdk-amd64/include -I/usr/lib/jvm/java-8-openjdk-amd64/include/linux test.cpp -MG -M -MF build/test.d -MT build/test.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Werror -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/usr/lib/jvm/java-8-openjdk-amd64/include -I/usr/lib/jvm/java-8-openjdk-amd64/include/linux ibs.cpp -MG -M -MF build/ibs.d -MT build/ibs.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Werror -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/usr/lib/jvm/java-8-openjdk-amd64/include -I/usr/lib/jvm/java-8-openjdk-amd64/include/linux davies.cpp -MG -M -MF build/davies.d -MT build/davies.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Werror -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/usr/lib/jvm/java-8-openjdk-amd64/include -I/usr/lib/jvm/java-8-openjdk-amd64/include/linux cache-tests.cpp -MG -M -MF build/cache-tests.d -MT build/cache-tests.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Werror -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5659:1126,test,test,1126,https://hail.is,https://github.com/hail-is/hail/issues/5659,1,['test'],['test']
Testability,"//github-redirect.dependabot.com/cbeust/testng/pull/2838"">cbeust/testng#2838</a></li>; <li>Ensure All tests run all the time by <a href=""https://github.com/krmahadevan""><code>@​krmahadevan</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2842"">cbeust/testng#2842</a></li>; <li>Deprecate support for running Spock Tests by <a href=""https://github.com/krmahadevan""><code>@​krmahadevan</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2846"">cbeust/testng#2846</a></li>; <li>Streamline dependsOnMethods for configurations by <a href=""https://github.com/krmahadevan""><code>@​krmahadevan</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2845"">cbeust/testng#2845</a></li>; <li>Ensure ITestContext available for JUnit4 tests by <a href=""https://github.com/krmahadevan""><code>@​krmahadevan</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2848"">cbeust/testng#2848</a></li>; <li>Deprecate support for running JUnit tests by <a href=""https://github.com/krmahadevan""><code>@​krmahadevan</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2849"">cbeust/testng#2849</a></li>; </ul>; <h2>New Contributors</h2>; <ul>; <li><a href=""https://github.com/gruenich""><code>@​gruenich</code></a> made their first contribution in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2781"">cbeust/testng#2781</a></li>; <li><a href=""https://github.com/anatolyuzhakov""><code>@​anatolyuzhakov</code></a> made their first contribution in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2793"">cbeust/testng#2793</a></li>; <li><a href=""https://github.com/spkrka""><code>@​spkrka</code></a> made their first contribution in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2802"">cbeust/testng#2802</a></li>; <li><a href=""https://github.com/JLLeitschuh""><code>@​JLLeitschuh</code></a> made their first contribution in <a href=""h",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12665:7755,test,testng,7755,https://hail.is,https://github.com/hail-is/hail/pull/12665,3,['test'],"['testng', 'tests']"
Testability,"//github-redirect.dependabot.com/jupyter/jupyter_client/issues/925"">#925</a>)</li>; <li><a href=""https://github.com/jupyter/jupyter_client/commit/fac9c3a890599ca8d7ee73206f98d75574cf4ca8""><code>fac9c3a</code></a> Prefer print in kernelspecapp (<a href=""https://github-redirect.dependabot.com/jupyter/jupyter_client/issues/923"">#923</a>)</li>; <li><a href=""https://github.com/jupyter/jupyter_client/commit/9904c4163a60c5e98737c7934b9a876c806c58fa""><code>9904c41</code></a> Publish 8.0.1</li>; <li><a href=""https://github.com/jupyter/jupyter_client/commit/dc6113c360e05122430b8e130374e9f4e4b701d7""><code>dc6113c</code></a> Fix json_output in kernelspec app (<a href=""https://github-redirect.dependabot.com/jupyter/jupyter_client/issues/921"">#921</a>)</li>; <li><a href=""https://github.com/jupyter/jupyter_client/commit/dac3cc2caa83dde06a69012e610717019026aa4e""><code>dac3cc2</code></a> Publish 8.0.0</li>; <li><a href=""https://github.com/jupyter/jupyter_client/commit/760a7835d8b20a9daea3737759b1751d5e55dad8""><code>760a783</code></a> MAINT: Don't format log in log call. (<a href=""https://github-redirect.dependabot.com/jupyter/jupyter_client/issues/919"">#919</a>)</li>; <li><a href=""https://github.com/jupyter/jupyter_client/commit/0ab0feb42fcdfe1a2528f630ca269c9fda6a2675""><code>0ab0feb</code></a> Reflect current protocol version in documentation (<a href=""https://github-redirect.dependabot.com/jupyter/jupyter_client/issues/918"">#918</a>)</li>; <li><a href=""https://github.com/jupyter/jupyter_client/commit/eded331c9f292a1838602414b6c05928917d13e8""><code>eded331</code></a> Add full api docs (<a href=""https://github-redirect.dependabot.com/jupyter/jupyter_client/issues/908"">#908</a>)</li>; <li>Additional commits viewable in <a href=""https://github.com/jupyter/jupyter_client/compare/v7.4.8...v8.0.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=jupyter-client&package-man",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12656:8001,log,log,8001,https://hail.is,https://github.com/hail-is/hail/pull/12656,2,['log'],['log']
Testability,"//github-redirect.dependabot.com/sphinx-doc/sphinx/issues/10535"">#10535</a></li>; <li><a href=""https://github.com/sphinx-doc/sphinx/commit/377d8668b5c93cc224fec46f2f3c2920b25107ca""><code>377d866</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/10535"">#10535</a> from AA-Turner/css-nav-contents</li>; <li><a href=""https://github.com/sphinx-doc/sphinx/commit/709602437df850d5538a4fe899a50625c01a0f80""><code>7096024</code></a> Update CHANGES for PR <a href=""https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/10539"">#10539</a></li>; <li><a href=""https://github.com/sphinx-doc/sphinx/commit/d0452276689bfb5b97ca7a3469e1afb505895cdd""><code>d045227</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/10539"">#10539</a> from AA-Turner/fix-inherited-attrs</li>; <li><a href=""https://github.com/sphinx-doc/sphinx/commit/29edce9243046962f5f024d510315133448dd3e1""><code>29edce9</code></a> test: Add testcase for autodoc_inherit_docstring and attributes (refs: <a href=""https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/10539"">#10539</a>)</li>; <li><a href=""https://github.com/sphinx-doc/sphinx/commit/3956cf2249d27ed63e8381c07dfde36f6c96f78f""><code>3956cf2</code></a> Fix documenting inherited attributes</li>; <li><a href=""https://github.com/sphinx-doc/sphinx/commit/27f05328d0369ad0db85c27935d52fdadf020f6b""><code>27f0532</code></a> Move <code>aside.topic</code> into the conditional blocks</li>; <li><a href=""https://github.com/sphinx-doc/sphinx/commit/5806f0af2788db40661d62e5e88c2c1560ae46b6""><code>5806f0a</code></a> Add <code>nav.contents</code> everywhere that <code>div.topic</code> is used</li>; <li><a href=""https://github.com/sphinx-doc/sphinx/commit/8da2efb1d71ab2d384ddc90cf4fdebe5d18e91cd""><code>8da2efb</code></a> Rename CSS files to CSS template files</li>; <li>Additional commits viewable in <a href=""https://github.com/sphinx-doc/sphinx/compare/v3.5.4...v5.0.2",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11925:5243,test,test,5243,https://hail.is,https://github.com/hail-is/hail/pull/11925,2,['test'],"['test', 'testcase']"
Testability,"/3593. ## Testing. - Adding a ""wait `n` seconds"" method that slept for n seconds, and returned the value of an environment variable. This environment variable meant I could track which version of the deployment my script ran against.; - Taking the `deploy.yaml` from the `deploy query` step of the dev deploy, adding the `TEST_VALUE` environment variable with some value and saving it as `new-deploy.yaml`; - Issuing the first wait request (for 50 seconds) (`https://internal.hail.populationgenomics.org.au/$NAMESPACE/query/api/v1alpha/wait?duration=50`); - Issuing the new deploy with:; ```bash; kubectl -n $NAMESPACE apply -f new-deploy.yaml; kubectl -n $NAMESPACE rollout status --timeout=10m deployment query; ```; - When the new pod is created (seen with `kubectl --namespace $NAMESPACE get pod`), issue the second request to the wait method.; - If all goes well, you should have:; - termination logs like those below,; - the first request successfully fulfilled with the response of env value being None (filled by the first pod); - The second request successfully filled, but has the value of the environment value, the one you set in the deploy.yaml (it got scheduled to the new node). Termination logs:. ```; {""severity"": ""INFO"", ""levelname"": ""INFO"", ""asctime"": ""2021-02-24 23:22:40,472"", ""filename"": ""query.py"", ""funcNameAndLine"": ""on_shutdown:253"", ""message"": ""On shutdown request received, with 2 tasks left"", ""hail_log"": 1}; ++ term; ++ kill -TERM 7; + true; + '[' no == yes ']'; + trap - SIGTERM SIGINT; + wait 7; {""severity"": ""INFO"", ""levelname"": ""INFO"", ""asctime"": ""2021-02-24 23:23:26,004"", ""filename"": ""hail_logging.py"", ""funcNameAndLine"": ""log:40"", ""message"": ""https GET /michaelfranklin/query/api/v1alpha/wait done in 50.029999999998836s: 200"", ""remote_address"": ""10.28.127.3"", ""request_start_time"": ""[24/Feb/2021:23:22:35 +0000]"", ""request_duration"": 50.029999999998836, ""response_status"": 200, ""x_real_ip"": ""124.170.20.28"", ""hail_log"": 1}; {""severity"": ""INFO"", ""levelname"": ""INF",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10106:1222,log,logs,1222,https://hail.is,https://github.com/hail-is/hail/pull/10106,1,['log'],['logs']
Testability,/742170/container_logs && exit 1; rm -rf /io/*; set -ex; (gcloud -q auth activate-service-account --key-file=/gsa-key/privateKeyData || (sleep $(( 5 + (RANDOM % 5) )); gcloud -q auth activate-service-account --key-file=/gsa-key/privateKeyData)) && mkdir -p /io/pipeline/pipeline-1cac3dd4e66d/__TASK__0; gsutil -m cp -R gs://hail-wang-ukps2/pipeline/pipeline-1cac3dd4e66d/__TASK__0/0731f9a3 /io/pipeline/pipeline-1cac3dd4e66d/__TASK__0/0731f9a3; ; State: Waiting; Reason: PodInitializing; Ready: False; Restart Count: 0; Requests:; cpu: 500m; Environment: <none>; Mounts:; /batch-gsa-key from batch-gsa-key (rw); /gsa-key from gsa-key (rw); /io from batch-12728-job-287-742170 (rw); /var/run/secrets/kubernetes.io/serviceaccount from batch-output-pod-token-8pkmz (ro); Containers:; main:; Container ID: ; Image: gcr.io/broad-ctsa/benchmark_wang:latest; Image ID: ; Port: <none>; Host Port: <none>; Command:; /bin/bash; -c; set -e; mkdir -p /io/pipeline/pipeline-1cac3dd4e66d/__TASK__286/; __RESOURCE_FILE__286=/io/pipeline/pipeline-1cac3dd4e66d/__TASK__286/8926feac; __RESOURCE_FILE__0=/io/pipeline/pipeline-1cac3dd4e66d/__TASK__0/0731f9a3; mv ${__RESOURCE_FILE__0} benchmark-resources.tar.gz && time tar -xvf benchmark-resources.tar.gz && hailctl dev benchmark run -v -o ${__RESOURCE_FILE__286} -n 5 --data-dir benchmark-resources -t read_with_index_p1000; State: Waiting; Reason: PodInitializing; Ready: False; Restart Count: 0; Requests:; cpu: 2; memory: 7G; Environment:; POD_IP: (v1:status.podIP); POD_NAME: batch-12728-job-287-742170 (v1:metadata.name); Mounts:; /gsa-key from gsa-key (rw); /io from batch-12728-job-287-742170 (rw); /var/run/secrets/kubernetes.io/serviceaccount from batch-output-pod-token-8pkmz (ro); cleanup:; Container ID: ; Image: gcr.io/hail-vdc/batch:s32fqwbuz8nv; Image ID: ; Port: 5000/TCP; Host Port: 0/TCP; Command:; /bin/sh; -c; ; set -ex; python3 -m batch.cleanup_sidecar; ; State: Waiting; Reason: PodInitializing; Ready: False; Restart Count: 0; Requests:; cpu: 50,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7016:2171,benchmark,benchmark-resources,2171,https://hail.is,https://github.com/hail-is/hail/issues/7016,1,['benchmark'],['benchmark-resources']
Testability,"/_/\_\ version 3.3.2-amzn-0.1; /_/. Using Python version 3.9.18 (main, Oct 25 2023 05:26:35); Spark context Web UI available at http://ip-192-168-125-39.ap-southeast-1.compute.internal:4040; Spark context available as 'sc' (master = yarn, app id = application_1698211907929_0001).; SparkSession available as 'spark'.; >>> import hail as hl; >>> hl.version(); '0.2.124-e739a95489e4'; hl.init(sc); pip-installed Hail requires additional configuration options in Spark referring; to the path to the Hail Python module directory HAIL_DIR,; e.g. /path/to/python/site-packages/hail:; spark.jars=HAIL_DIR/backend/hail-all-spark.jar; spark.driver.extraClassPath=HAIL_DIR/backend/hail-all-spark.jar; spark.executor.extraClassPath=./hail-all-spark.jarRunning on Apache Spark version 3.3.2-amzn-0.1; SparkUI available at http://ip-192-168-110-167.ap-southeast-1.compute.internal:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.124-e739a95489e4; LOGGING: writing to /mnt/tmp/hail/hail/hail-20231025-0729-0.2.124-e739a95489e4.log; >>> mt = hl.balding_nichols_model(n_populations=3, n_samples=500, n_variants=1_000); 2023-10-25 07:29:48.283 Hail: INFO: balding_nichols_model: generating genotypes for 3 populations, 500 samples, and 1000 variants...; >>> mt.count(); (1000, 500); ```. it seems working in command line using pyspark !. I need to test on jupyter notebook now... FYI the pyspark configs. ```sh ; - Classification: spark-defaults; ConfigurationProperties:; spark.jars: /opt/hail/backend/hail-all-spark.jar; spark.driver.extraClassPath: /opt/hail/backend/hail-all-spark.jar:/usr/lib/hadoop-lzo/lib/*:/usr/lib/hadoop/hadoop-aws.jar:/usr/share/aws/aws-java-sdk/*:/usr/share/aws/emr/emrfs/conf:/usr/share/aws/emr/emrfs/lib/*:/usr/share/aws/emr/emrfs/auxlib/*:/usr/share/aws/emr/goodies/lib/emr-spark-goodies.jar:/usr/share/aws/emr/security/conf:/usr/share/aws/emr/security/lib/*:/usr/share/aws/hmclient/lib/aws-glue-datacatalog-spark-client.jar:/usr/share/java",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1778834949:2917,LOG,LOGGING,2917,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1778834949,1,['LOG'],['LOGGING']
Testability,"/a> Add .DS_Store to .gitignore file</li>; <li><a href=""https://github.com/brettcannon/gidgethub/commit/ef0368998fe40769f4f20a6c4b6ccfea27fe8ca9""><code>ef03689</code></a> Bump the version number</li>; <li><a href=""https://github.com/brettcannon/gidgethub/commit/1f80a51670555acda0db0e42189d00bb58bb3b45""><code>1f80a51</code></a> Release 5.2.1</li>; <li><a href=""https://github.com/brettcannon/gidgethub/commit/89ade8859539212e0663e91f0777ad8a39ecf323""><code>89ade88</code></a> Fix cgi and importlib_resources deprecations (<a href=""https://github-redirect.dependabot.com/brettcannon/gidgethub/issues/185"">#185</a>)</li>; <li><a href=""https://github.com/brettcannon/gidgethub/commit/64888cbe83e3f11af3c6f25294adff26dc2f557a""><code>64888cb</code></a> Add support for Python 3.11 and drop EOL Python 3.6 (<a href=""https://github-redirect.dependabot.com/brettcannon/gidgethub/issues/184"">#184</a>)</li>; <li><a href=""https://github.com/brettcannon/gidgethub/commit/8c60e56029b7e10b7be9879e64dfbf97bbeda2b8""><code>8c60e56</code></a> Add variable mapping to fix 'Session tests-3.10-dev skipped: Python interpret...</li>; <li><a href=""https://github.com/brettcannon/gidgethub/commit/07040aa3d7dc3466308e92625bb889abe53ff0a9""><code>07040aa</code></a> Update a link</li>; <li><a href=""https://github.com/brettcannon/gidgethub/commit/5f8d37f6db04d7962256d2d934b53e1cec9c0bfc""><code>5f8d37f</code></a> v5.2.0: Add changelog entry and update the version (<a href=""https://github-redirect.dependabot.com/brettcannon/gidgethub/issues/180"">#180</a>)</li>; <li><a href=""https://github.com/brettcannon/gidgethub/commit/cf2cb85551a8aa36536dc828e830e13032e594d4""><code>cf2cb85</code></a> Bump min PyJWT v2.4.0 (<a href=""https://github-redirect.dependabot.com/brettcannon/gidgethub/issues/179"">#179</a>)</li>; <li><a href=""https://github.com/brettcannon/gidgethub/commit/9096d1b79447a3ef81b331457ea39c43f43e2f2d""><code>9096d1b</code></a> Release v5.1.0 (<a href=""https://github-redirect.dependabot.com/brettcannon/gidgeth",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12328:8274,test,tests-,8274,https://hail.is,https://github.com/hail-is/hail/pull/12328,1,['test'],['tests-']
Testability,"/a>).</li>; <li>Declare support for Python 3.9.</li>; <li>Tentatively declare support for Python 3.10 (tested with <code>Python 3.10.0a6+</code>).</li>; </ul>; <h3>Fixed</h3>; <ul>; <li>Fix Python 3.10 deprecation warning by importing Iterable from collections.abc (<a href=""https://github-redirect.dependabot.com/thibaudcolas/curlylint/pull/68"">#68</a>).</li>; </ul>; <h2>v0.12.2</h2>; <h2><a href=""https://github.com/thibaudcolas/curlylint/releases/tag/v0.12.2"">v0.12.2</a> 2021-03-06</h2>; <h3>Fixed</h3>; <ul>; <li>The <code>image_alt</code> rule no longer crashes when encountering template conditionals in img attributes (<a href=""https://github-redirect.dependabot.com/thibaudcolas/curlylint/pull/57"">#57</a>). Thanks to <a href=""https://github.com/adrien-delhorme""><code>@​adrien-delhorme</code></a>.</li>; </ul>; <h2>v0.12.1</h2>; <h2><a href=""https://github.com/thibaudcolas/curlylint/releases/tag/v0.12.1"">v0.12.1</a> 2021-03-06</h2>; <h3>Fixed</h3>; <ul>; <li>The project’s sdist now includes all needed files to run the test suite (<a href=""https://github-redirect.dependabot.com/thibaudcolas/curlylint/issues/49"">#49</a>, <a href=""https://github-redirect.dependabot.com/thibaudcolas/curlylint/pull/50"">#50</a>). Thanks to <a href=""https://github.com/jayvdb""><code>@​jayvdb</code></a>.</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/thibaudcolas/curlylint/blob/main/CHANGELOG.md"">curlylint's changelog</a>.</em></p>; <blockquote>; <h2><a href=""https://github.com/thibaudcolas/curlylint/releases/tag/v0.13.0"">v0.13.0</a> 2021-04-25</h2>; <p>This release comes with a blog post! Read on <a href=""https://www.curlylint.org/blog/quality-of-life-improvements"">Quality-of-life improvements</a>.</p>; <h3>Added</h3>; <ul>; <li>Implement --template-tags CLI flag (<a href=""https://github-redirect.dependabot.com/thibaudcolas/curlylint/issues/25"">#25</a>, <a href=""https://github-redirect.dependabot.com/thibaudcola",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11494:2366,test,test,2366,https://hail.is,https://github.com/hail-is/hail/pull/11494,2,['test'],['test']
Testability,"/a>).</li>; <li>Declare support for Python 3.9.</li>; <li>Tentatively declare support for Python 3.10 (tested with <code>Python 3.10.0a6+</code>).</li>; </ul>; <h3>Fixed</h3>; <ul>; <li>Fix Python 3.10 deprecation warning by importing Iterable from collections.abc (<a href=""https://github-redirect.dependabot.com/thibaudcolas/curlylint/pull/68"">#68</a>).</li>; </ul>; <h2>v0.12.2</h2>; <h2><a href=""https://github.com/thibaudcolas/curlylint/releases/tag/v0.12.2"">v0.12.2</a> 2021-03-06</h2>; <h3>Fixed</h3>; <ul>; <li>The <code>image_alt</code> rule no longer crashes when encountering template conditionals in img attributes (<a href=""https://github-redirect.dependabot.com/thibaudcolas/curlylint/pull/57"">#57</a>). Thanks to <a href=""https://github.com/adrien-delhorme""><code>@​adrien-delhorme</code></a>.</li>; </ul>; <h2>v0.12.1</h2>; <h2><a href=""https://github.com/thibaudcolas/curlylint/releases/tag/v0.12.1"">v0.12.1</a> 2021-03-06</h2>; <h3>Fixed</h3>; <ul>; <li>The project’s sdist now includes all needed files to run the test suite (<a href=""https://github-redirect.dependabot.com/thibaudcolas/curlylint/issues/49"">#49</a>, <a href=""https://github-redirect.dependabot.com/thibaudcolas/curlylint/pull/50"">#50</a>). Thanks to <a href=""https://github.com/jayvdb""><code>@​jayvdb</code></a>.</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/thibaudcolas/curlylint/blob/main/CHANGELOG.md"">curlylint's changelog</a>.</em></p>; <blockquote>; <h2><a href=""https://github.com/thibaudcolas/curlylint/releases/tag/v0.13.1"">v0.13.1</a> 2022-03-30</h2>; <h3>Fixed</h3>; <ul>; <li>Update <code>patch_click</code> to fix compatibility issue with click 8.1.0. Fix <a href=""https://github-redirect.dependabot.com/thibaudcolas/curlylint/issues/132"">#132</a> (<a href=""https://github-redirect.dependabot.com/thibaudcolas/curlylint/pull/133"">#133</a>). Thanks to <a href=""https://github.com/jmsmkn""><code>@​jmsmkn</code></a> and <",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11713:3185,test,test,3185,https://hail.is,https://github.com/hail-is/hail/pull/11713,1,['test'],['test']
Testability,"/a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/a760e02371a55d6262e42de9e0222fffa2c7192b""><code>a760e02</code></a> feat: add json_fields extras argument for adding to jsonPayload (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/447"">#447</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/83d9ca8521fe7c470bb6755a48a97496515d7abc""><code>83d9ca8</code></a> feat!: make logging API more friendly to use (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/422"">#422</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/818213e143d6a1941211a48e0b23069a426ac300""><code>818213e</code></a> feat: avoid importing grpc when explicitly disabled (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/416"">#416</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/e1506fa9030776353878048ce562c53bf6ccf7bf""><code>e1506fa</code></a> fix!: api consistency between HTTP and Gapic layers (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/375"">#375</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/6fa17735fe3edb45483ec5e3abd1f53c24ffa881""><code>6fa1773</code></a> feat!: support string-encoded json (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/339"">#339</a>)</li>; <li>Additional commits viewable in <a href=""https://github.com/googleapis/python-logging/compare/v1.12.1...v3.0.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=google-cloud-logging&package-manager=pip&previous-version=1.12.1&new-version=3.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you d",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11574:13402,log,logging,13402,https://hail.is,https://github.com/hail-is/hail/pull/11574,1,['log'],['logging']
Testability,"/a>)</li>; <li>api consistency between HTTP and Gapic layers (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/375"">#375</a>)</li>; <li>support string-encoded json (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/339"">#339</a>)</li>; <li>Infer default resource in logger (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/315"">#315</a>)</li>; <li>support json logs (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/316"">#316</a>)</li>; <li>deprecate AppEngineHandler and ContainerEngineHandler (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/310"">#310</a>)</li>; </ul>; <h3>Features</h3>; <ul>; <li>add api key support (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/472"">#472</a>) (<a href=""https://github.com/googleapis/python-logging/commit/81ca8c616acb988be1fbecfc2a0b1a5b39280149"">81ca8c6</a>)</li>; <li>add json_fields extras argument for adding to jsonPayload (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/447"">#447</a>) (<a href=""https://github.com/googleapis/python-logging/commit/a760e02371a55d6262e42de9e0222fffa2c7192b"">a760e02</a>)</li>; <li>avoid importing grpc when explicitly disabled (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/416"">#416</a>) (<a href=""https://github.com/googleapis/python-logging/commit/818213e143d6a1941211a48e0b23069a426ac300"">818213e</a>)</li>; <li>Infer default resource in logger (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/315"">#315</a>) (<a href=""https://github.com/googleapis/python-logging/commit/c63250399fcd6e1317d341e98fab11095c443e5e"">c632503</a>)</li>; <li>make logging API more friendly to use (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/422"">#422</a>) (<a href=""https://github.com/googleapis/python-logg",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11574:1511,log,logging,1511,https://hail.is,https://github.com/hail-is/hail/pull/11574,2,['log'],['logging']
Testability,"/batch/worker/worker.py:705: # DockerError(500, ""Head https://gcr.io/v2/genomics-tools/samtools/manifests/latest: unknown: Project 'project:genomics-tools' not found or deleted.""); /Users/dking/projects/hail/datasets/extract/extract_CADD.py:26: j.image(""gcr.io/broad-ctsa/datasets:050521""); /Users/dking/projects/hail/datasets/extract/extract_1000_Genomes_NYGC_30x_GRCh38.py:12: j.image(""gcr.io/broad-ctsa/datasets:041421""); /Users/dking/projects/hail/datasets/extract/extract_1000_Genomes_NYGC_30x_GRCh38.py:19: j.image(""gcr.io/broad-ctsa/datasets:041421""); /Users/dking/projects/hail/datasets/extract/extract_1000_Genomes_NYGC_30x_GRCh38.py:26: j.image(""gcr.io/broad-ctsa/datasets:041421""); /Users/dking/projects/hail/hail/scripts/update-terra-image.py:33:Image URL: `us.gcr.io/broad-dsp-gcr-public/{image_name}:{image_version}`; /Users/dking/projects/hail/hail/python/test/hailtop/utils/test_utils.py:115: x = parse_docker_image_reference('gcr.io/hail-vdc/batch-worker:123fds312'); /Users/dking/projects/hail/hail/python/test/hailtop/utils/test_utils.py:116: assert x.domain == 'gcr.io'; /Users/dking/projects/hail/hail/python/test/hailtop/utils/test_utils.py:120: assert x.name() == 'gcr.io/hail-vdc/batch-worker'; /Users/dking/projects/hail/hail/python/test/hailtop/utils/test_utils.py:121: assert str(x) == 'gcr.io/hail-vdc/batch-worker:123fds312'; /Users/dking/projects/hail/hail/python/hail/docs/change_log.md:278:- (hail#12230) The python-dill Batch images in `gcr.io/hail-vdc` are no longer supported.; /Users/dking/projects/hail/hail/python/hailtop/utils/utils.py:707: # DockerError(500, ""Head https://gcr.io/v2/genomics-tools/samtools/manifests/latest: unknown: Project 'project:genomics-tools' not found or deleted.""); /Users/dking/projects/hail/hail/python/hailtop/utils/utils.py:1061: return self.domain is not None and (self.domain == 'gcr.io' or self.domain.endswith('docker.pkg.dev')); /Users/dking/projects/hail/hail/python/hailtop/aiocloud/aiogoogle/client/container_client.py:6: s",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12963#issuecomment-1531692013:1232,test,test,1232,https://hail.is,https://github.com/hail-is/hail/pull/12963#issuecomment-1531692013,1,['test'],['test']
Testability,"/ci-intermediate"",""us-docker.pkg.dev/hail-vdc/hail/ci-utils"",""us-docker.pkg.dev/hail-vdc/hail/create_certs_image"",""us-docker.pkg.dev/hail-vdc/hail/echo"",""us-docker.pkg.dev/hail-vdc/hail/grafana"",""us-docker.pkg.dev/hail-vdc/hail/hail-base"",""us-docker.pkg.dev/hail-vdc/hail/hail-build"",""us-docker.pkg.dev/hail-vdc/hail/hail-buildkit"",""us-docker.pkg.dev/hail-vdc/hail/hail-run"",""us-docker.pkg.dev/hail-vdc/hail/hail-run-tests"",""us-docker.pkg.dev/hail-vdc/hail/hail-pip-installed-python37"",""us-docker.pkg.dev/hail-vdc/hail/hail-pip-installed-python38"",""us-docker.pkg.dev/hail-vdc/hail/hail-ubuntu"",""us-docker.pkg.dev/hail-vdc/hail/memory"",""us-docker.pkg.dev/hail-vdc/hail/monitoring"",""us-docker.pkg.dev/hail-vdc/hail/notebook"",""us-docker.pkg.dev/hail-vdc/hail/notebook_nginx"",""us-docker.pkg.dev/hail-vdc/hail/prometheus"",""us-docker.pkg.dev/hail-vdc/hail/service-base"",""us-docker.pkg.dev/hail-vdc/hail/service-java-run-base"",""us-docker.pkg.dev/hail-vdc/hail/test-ci"",""us-docker.pkg.dev/hail-vdc/hail/test-monitoring"",""us-docker.pkg.dev/hail-vdc/hail/test-benchmark"",""us-docker.pkg.dev/hail-vdc/hail/test_hello_create_certs_image"",""us-docker.pkg.dev/hail-vdc/hail/website"",""us-docker.pkg.dev/hail-vdc/hail/ci-hello"",""us-docker.pkg.dev/hail-vdc/hail/hailgenetics/vep-grch37-85"",""us-docker.pkg.dev/hail-vdc/hail/hailgenetics/vep-grch38-95""],""grace"":""48h"",""recursive"":true,""tag_filter_all"":""cache-pr-.*""}; ```. ```; {""repos"":[""us-docker.pkg.dev/hail-vdc/hail/auth"",""us-docker.pkg.dev/hail-vdc/hail/base"",""us-docker.pkg.dev/hail-vdc/hail/base_spark_3_2"",""us-docker.pkg.dev/hail-vdc/hail/batch"",""us-docker.pkg.dev/hail-vdc/hail/batch-driver-nginx"",""us-docker.pkg.dev/hail-vdc/hail/batch-worker"",""us-docker.pkg.dev/hail-vdc/hail/benchmark"",""us-docker.pkg.dev/hail-vdc/hail/blog_nginx"",""us-docker.pkg.dev/hail-vdc/hail/ci"",""us-docker.pkg.dev/hail-vdc/hail/ci-intermediate"",""us-docker.pkg.dev/hail-vdc/hail/ci-utils"",""us-docker.pkg.dev/hail-vdc/hail/create_certs_image"",""us-docker.pkg.dev/hail-vdc/hail/echo"",""us-d",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13603#issuecomment-1734249545:1676,test,test-monitoring,1676,https://hail.is,https://github.com/hail-is/hail/issues/13603#issuecomment-1734249545,1,['test'],['test-monitoring']
Testability,"/ci-test-p4a9fxo7/git/commits{/sha}"",; ""comments_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/comments{/number}"",; ""issue_comment_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/comments{/number}"",; ""contents_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contents/{+path}"",; ""compare_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/compare/{base}...{head}"",; ""merges_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/merges"",. 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0; 100 7030 100 6999 100 31 9306 41 --:--:-- --:--:-- --:--:-- 9319; ""archive_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/{archive_format}{/ref}"",; ""downloads_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/downloads"",; ""issues_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues{/number}"",; ""pulls_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/pulls{/number}"",; ""milestones_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/milestones{/number}"",; ""notifications_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/notifications{?since,all,participating}"",; ""labels_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/labels{/name}"",; ""releases_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/releases{/id}"",; ""deployments_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/deployments"",; ""created_at"": ""2018-10-10T00:32:59Z"",; ""updated_at"": ""2018-10-10T00:32:59Z"",; ""pushed_at"": ""2018-10-10T00:33:00Z"",; ""git_url"": ""git://github.com/hail-ci-test/ci-test-p4a9fxo7.git"",; ""ssh_url"": ""git@github.com:hail-ci-test/ci-test-p4a9fxo7.git"",; ""clone_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7.git"",; ""svn_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7"",; ""homepage"": null,; ""size"": 0,; ""stargazers_count"": 0,; ""watchers_count"": 0,; ""language"": null,; ""has_iss",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:5244,test,test,5244,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,"/code></a> Release 7.0.0</li>; <li><a href=""https://github.com/jupyter/nbconvert/commit/a5e2666d580d2a289fe879c2feaf70809ce3446b""><code>a5e2666</code></a> Update Changelog for 7.0 (<a href=""https://github-redirect.dependabot.com/jupyter/nbconvert/issues/1845"">#1845</a>)</li>; <li><a href=""https://github.com/jupyter/nbconvert/commit/8c1146d756175824dfb1e939d86fddfcc3979fdd""><code>8c1146d</code></a> Handle nbformat 5.5 (<a href=""https://github-redirect.dependabot.com/jupyter/nbconvert/issues/1841"">#1841</a>)</li>; <li><a href=""https://github.com/jupyter/nbconvert/commit/aec39288c9a6c614d659bcaf9f5cb36634d6b37b""><code>aec3928</code></a> Encode SVG image data as UTF-8 before calling lxml cleaner (fixes <a href=""https://github-redirect.dependabot.com/jupyter/nbconvert/issues/1836"">#1836</a>) (<a href=""https://github-redirect.dependabot.com/jupyter/nbconvert/issues/1837"">#1837</a>)</li>; <li><a href=""https://github.com/jupyter/nbconvert/commit/fec53c9f5fa21f91d5a13c2295f7f9b1e6a1d41f""><code>fec53c9</code></a> Remove tests from bdist (<a href=""https://github-redirect.dependabot.com/jupyter/nbconvert/issues/1822"">#1822</a>)</li>; <li><a href=""https://github.com/jupyter/nbconvert/commit/af4ee6ba3e4badbb42fdce4b34d1d34a4fccc655""><code>af4ee6b</code></a> Fix title (<a href=""https://github-redirect.dependabot.com/jupyter/nbconvert/issues/1832"">#1832</a>)</li>; <li><a href=""https://github.com/jupyter/nbconvert/commit/4680a6db10338ea14c39fe0e6cc6a1959fedaf92""><code>4680a6d</code></a> escape_html: prevent escaping quotes on widgets JSON reprs (<a href=""https://github-redirect.dependabot.com/jupyter/nbconvert/issues/1829"">#1829</a>) (<a href=""https://github-redirect.dependabot.com/jupyter/nbconvert/issues/1830"">#1830</a>)</li>; <li><a href=""https://github.com/jupyter/nbconvert/commit/3520c03ae9f517c6a921d6b9689d44670e71a7dc""><code>3520c03</code></a> [pre-commit.ci] pre-commit autoupdate (<a href=""https://github-redirect.dependabot.com/jupyter/nbconvert/issues/1824"">#1824</a>)</li>;",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12126:10291,test,tests,10291,https://hail.is,https://github.com/hail-is/hail/pull/12126,1,['test'],['tests']
Testability,"/code></a> Release v3.9.4 (<a href=""https://redirect.github.com/aio-libs/aiohttp/issues/8201"">#8201</a>)</li>; <li><a href=""https://github.com/aio-libs/aiohttp/commit/a7e240a9f625a0b9559bdf5f0049c71565352400""><code>a7e240a</code></a> [PR <a href=""https://redirect.github.com/aio-libs/aiohttp/issues/8320"">#8320</a>/9ba9a4e5 backport][3.9] Fix Python parser to mark responses without...</li>; <li><a href=""https://github.com/aio-libs/aiohttp/commit/28335525d1eac015a7e7584137678cbb6ff19397""><code>2833552</code></a> Escape filenames and paths in HTML when generating index pages (<a href=""https://redirect.github.com/aio-libs/aiohttp/issues/8317"">#8317</a>) (<a href=""https://redirect.github.com/aio-libs/aiohttp/issues/8319"">#8319</a>)</li>; <li><a href=""https://github.com/aio-libs/aiohttp/commit/ed43040613988fc4666109aca82a5180ff165df5""><code>ed43040</code></a> [PR <a href=""https://redirect.github.com/aio-libs/aiohttp/issues/8309"">#8309</a>/c29945a1 backport][3.9] Improve reliability of run_app test (<a href=""https://redirect.github.com/aio-libs/aiohttp/issues/8315"">#8315</a>)</li>; <li><a href=""https://github.com/aio-libs/aiohttp/commit/ec2be0500e2674eea019c0966a7a905e9b3d6608""><code>ec2be05</code></a> [PR <a href=""https://redirect.github.com/aio-libs/aiohttp/issues/8299"">#8299</a>/28d026eb backport][3.9] Create marker for internal tests (<a href=""https://redirect.github.com/aio-libs/aiohttp/issues/8307"">#8307</a>)</li>; <li><a href=""https://github.com/aio-libs/aiohttp/commit/292d961f4ee2829a1b13fad92444a4fd693fbc87""><code>292d961</code></a> [PR <a href=""https://redirect.github.com/aio-libs/aiohttp/issues/8304"">#8304</a>/88c80c14 backport][3.9] Check for backports in CI (<a href=""https://redirect.github.com/aio-libs/aiohttp/issues/8305"">#8305</a>)</li>; <li><a href=""https://github.com/aio-libs/aiohttp/commit/cebe526b9c34dc3a3da9140409db63014bc4cf19""><code>cebe526</code></a> Fix handling of multipart/form-data (<a href=""https://redirect.github.com/aio-libs/aiohttp/issues/828",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14477:4922,test,test,4922,https://hail.is,https://github.com/hail-is/hail/pull/14477,6,['test'],['test']
Testability,"/commit/1fd77edc1a1373c9a7e762de148f19f1e2edd418""><code>1fd77ed</code></a> Release 1.26.10</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/37ba00248424ea3cdf556cc3e7aa81ce0bf40382""><code>37ba002</code></a> [1.26] Update paid contributor program with early feedback</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/dddbab3612ead7d39d1dc33a5a504703a8d0eecf""><code>dddbab3</code></a> [1.26] Bump RECENT_DATE</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/6dd01c74102db0d608687953e351e31df3f31d9f""><code>6dd01c7</code></a> [1.26] Update docs for re-using HTTP connections after streaming</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/2049c91f732ae4fec0216c0697dee7822c25db10""><code>2049c91</code></a> Adds changing branches for installing from git docs for 1.26.x</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/cb4950545be4d427557ce863539c08655c9bdd6e""><code>cb49505</code></a> [1.26] Improve testing for IPv6 scoped addresses</li>; <li>Additional commits viewable in <a href=""https://github.com/urllib3/urllib3/compare/1.26.9...1.26.11"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.9&new-version=1.26.11)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dep",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12104:4012,test,testing,4012,https://hail.is,https://github.com/hail-is/hail/pull/12104,1,['test'],['testing']
Testability,"/d03f201762df7138c6da157b5cbb8e634acef45f""><code>d03f201</code></a> Suggest using upper bound for unbound tvar (<a href=""https://github-redirect.dependabot.com/python/mypy/issues/13730"">#13730</a>)</li>; <li><a href=""https://github.com/python/mypy/commit/5b17cc6c393280326ed15d763e599cbaeefbc0e6""><code>5b17cc6</code></a> Fix overload overlap check for UninhabitedType (<a href=""https://github-redirect.dependabot.com/python/mypy/issues/13461"">#13461</a>)</li>; <li><a href=""https://github.com/python/mypy/commit/c7b4714e1f5e3cb8f3fec7426b6538fe1a3dcab1""><code>c7b4714</code></a> Update version to 0.981</li>; <li><a href=""https://github.com/python/mypy/commit/2bd7da21462a59643f2aec546304db1a624ba285""><code>2bd7da2</code></a> [0.980 backport] build changes (<a href=""https://github-redirect.dependabot.com/python/mypy/issues/13688"">#13688</a>)</li>; <li><a href=""https://github.com/python/mypy/commit/2b2953a1392368f623331d5168ccdfd39e37bbee""><code>2b2953a</code></a> [0.980 backport] Update pos-only unit tests for Python 3.10.7 (<a href=""https://github-redirect.dependabot.com/python/mypy/issues/13660"">#13660</a>) (<a href=""https://github-redirect.dependabot.com/python/mypy/issues/13665"">#13665</a>)</li>; <li><a href=""https://github.com/python/mypy/commit/ada007841f6a96f68d114769624a0f7b523814a7""><code>ada0078</code></a> Remove dev from version</li>; <li><a href=""https://github.com/python/mypy/commit/efd1d38fb1db188e56fe6068ebe69d2164462b34""><code>efd1d38</code></a> [0.980 backport] Fix stubtest custom_typeshed_dir regression (<a href=""https://github-redirect.dependabot.com/python/mypy/issues/13656"">#13656</a>) (<a href=""https://github-redirect.dependabot.com/python/mypy/issues/13658"">#13658</a>)</li>; <li><a href=""https://github.com/python/mypy/commit/70bc34837ecbafc528e511a46219262736781d43""><code>70bc348</code></a> [0.980 backport] Allow unpacking from TypeVars with iterable bounds (<a href=""https://github-redirect.dependabot.com/python/mypy/issues/13425"">#13425</a>) ...</li>",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12291:1598,test,tests,1598,https://hail.is,https://github.com/hail-is/hail/pull/12291,1,['test'],['tests']
Testability,"/decorator/blob/master/CHANGES.md"">decorator's changelog</a>.</em></p>; <blockquote>; <h2>5.1.1 (2022-01-07)</h2>; <p>Sangwoo Shim contributed a fix so that cythonized functions can be decorated.; Brian McFee pointed out an issue in the <code>decorator_apply</code> example and; Wim Glenn pointed out that the &quot;fix&quot; in version 5.1 broke; <code>decorator.contextmanager</code> even more. Both issues are now solved.</p>; <h2>5.1.0 (2021-09-11)</h2>; <p>Added a function <code>decoratorx</code> using the <code>FunctionMaker</code> and thus; preserving the signature of <code>__code__</code> objects. Then fixed three small bugs:</p>; <ul>; <li>Sphinx was printing a few warnings when building the documentation, as; signaled by Tomasz Kłoczko</li>; <li>functions decorated with <code>decorator.contextmanager</code> were one-shot,; as discovered by Alex Pizarro.</li>; <li><code>decorator.decorator</code> was not passing the kwsyntax argument.</li>; </ul>; <h2>5.0.9 (2021-05-16)</h2>; <p>Fixed a test breaking PyPy. Restored support for Sphinx.</p>; <h2>5.0.8 (2021-05-15)</h2>; <p>Made the decorator module more robust when decorating builtin functions; lacking dunder attributes, like <code>dict.__setitem__</code>.</p>; <h2>5.0.7 (2021-04-14)</h2>; <p>The decorator module was not passing correctly the defaults inside the; <code>*args</code> tuple, thanks to Dan Shult for the fix. Also fixed some mispellings; in the documentation and integrated codespell in the CI, thanks to; Christian Clauss.</p>; <h2>5.0.6 (2021-04-08)</h2>; <p>The decorator module was not copying the <strong>module</strong> attribute anymore.; Thanks to Nikolay Markov for the notice.</p>; <h2>5.0.5 (2021-04-04)</h2>; <p>Dropped support for Python &lt; 3.5 with a substantial simplification of; the code base (now building a decorator does not require calling &quot;exec&quot;).; Added a way to mimic functools.wraps-generated decorators.; Ported the Continuous Integration from Travis to GitHub.</p>; <h2>4.4.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11490:1214,test,test,1214,https://hail.is,https://github.com/hail-is/hail/pull/11490,2,['test'],['test']
Testability,"/github.com/googleapis/python-logging/commit/a760e02371a55d6262e42de9e0222fffa2c7192b"">a760e02</a>)</li>; <li>avoid importing grpc when explicitly disabled (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/416"">#416</a>) (<a href=""https://github.com/googleapis/python-logging/commit/818213e143d6a1941211a48e0b23069a426ac300"">818213e</a>)</li>; <li>Infer default resource in logger (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/315"">#315</a>) (<a href=""https://github.com/googleapis/python-logging/commit/c63250399fcd6e1317d341e98fab11095c443e5e"">c632503</a>)</li>; <li>make logging API more friendly to use (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/422"">#422</a>) (<a href=""https://github.com/googleapis/python-logging/commit/83d9ca8521fe7c470bb6755a48a97496515d7abc"">83d9ca8</a>)</li>; <li>support json logs (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/316"">#316</a>) (<a href=""https://github.com/googleapis/python-logging/commit/5267152574b2ee96eb6f5c536a762f58bd2f886e"">5267152</a>)</li>; <li>support string-encoded json (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/339"">#339</a>) (<a href=""https://github.com/googleapis/python-logging/commit/6fa17735fe3edb45483ec5e3abd1f53c24ffa881"">6fa1773</a>)</li>; <li>trace improvements (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/450"">#450</a>) (<a href=""https://github.com/googleapis/python-logging/commit/e0c5fc02160ae87faf4ba5c2b62be86de6b02cf3"">e0c5fc0</a>)</li>; </ul>; <h3>Bug Fixes</h3>; <ul>; <li>allow reading logs from non-project paths (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/444"">#444</a>) (<a href=""https://github.com/googleapis/python-logging/commit/97e32b67603553fe350b6327455fc9f80b8aa6ce"">97e32b6</a>)</li>; <li>api consistency between HTTP and Gapic layers (<a href=""https://gi",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11574:2747,log,logging,2747,https://hail.is,https://github.com/hail-is/hail/pull/11574,2,['log'],['logging']
Testability,"/hail-20190122-1311-0.2.4-d602a3d7472d.log; 2019-01-22 13:11:20 SparkContext: INFO: Running Spark version 2.2.1; 2019-01-22 13:11:20 NativeCodeLoader: WARN: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; 2019-01-22 13:11:21 SparkContext: INFO: Submitted application: Hail; 2019-01-22 13:11:21 SparkContext: INFO: Spark configuration:; spark.app.name=Hail; spark.driver.extraClassPath=""/restricted/projectnb/genpro/github/hail/hail/build/libs/hail-all-spark.jar""; spark.driver.memory=5G; spark.executor.cores=4; spark.executor.extraClassPath=./hail-all-spark.jar; spark.executor.instances=10; spark.executor.memory=40G; spark.hadoop.io.compression.codecs=org.apache.hadoop.io.compress.DefaultCodec,is.hail.io.compress.BGzipCodec,is.hail.io.compress.BGzipCodecTbi,org.apache.hadoop.io.compress.GzipCodec; spark.hadoop.mapreduce.input.fileinputformat.split.minsize=1048576; spark.kryo.registrator=is.hail.kryo.HailKryoRegistrator; spark.logConf=true; spark.master=yarn; spark.repl.local.jars=file:/restricted/projectnb/genpro/github/hail/hail/build/libs/hail-all-spark.jar; spark.serializer=org.apache.spark.serializer.KryoSerializer; spark.submit.deployMode=client; spark.ui.showConsoleProgress=false; spark.yarn.appMasterEnv.LD_LIBRARY_PATH=/share/pkg/lz4/1.8.3/install/lib:/share/pkg/gcc/7.2.0/install/lib64:/share/pkg/gcc/7.2.0/install/lib; spark.yarn.appMasterEnv.PATH=/share/pkg/spark/2.2.1/install/bin:/share/pkg/lz4/1.8.3/install/bin:/share/pkg/gcc/7.2.0/install/bin:/usr3/bustaff/farrell/anaconda_envs/hail2/bin:/share/pkg/anaconda3/5.2.0/install/bin:/usr/java/default/jre/bin:/usr/java/default/bin:/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/opt/dell/srvadmin/bin:/usr3/bustaff/farrell/bin:/usr3/bustaff/farrell/bin; spark.yarn.appMasterEnv.PYTHONPATH=/share/pkg/spark/2.2.1/install/python/lib/py4j-0.10.4-src.zip:/share/pkg/spark/2.2.1/install/python:/restricted/projectnb/genpro/github/hail/hail",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4733#issuecomment-456534587:7926,log,logConf,7926,https://hail.is,https://github.com/hail-is/hail/issues/4733#issuecomment-456534587,1,['log'],['logConf']
Testability,"/hail/python/hailtop/config/deploy_config.py b/hail/python/hailtop/config/deploy_config.py; index 627d1792c..7d2eeeca0 100644; --- a/hail/python/hailtop/config/deploy_config.py; +++ b/hail/python/hailtop/config/deploy_config.py; @@ -4,6 +4,8 @@ import logging; from aiohttp import web; ; log = logging.getLogger('gear'); +HAIL_CONFIG_DIR = os.path.join(os.environ.get('XDG_CONFIG_HOME', os.path.expanduser('~/.config')),; + 'hail'); ; ; class DeployConfig:; @@ -15,7 +17,7 @@ class DeployConfig:; def from_config_file(config_file=None):; if not config_file:; config_file = os.environ.get(; - 'HAIL_DEPLOY_CONFIG_FILE', os.path.expanduser('~/.hail/deploy-config.json')); + 'HAIL_DEPLOY_CONFIG_FILE', os.path.join(HAIL_CONFIG_DIR, 'deploy-config.json')); if os.path.isfile(config_file):; with open(config_file, 'r') as f:; config = json.loads(f.read()); diff --git a/hail/python/hailtop/hailctl/auth/login.py b/hail/python/hailtop/hailctl/auth/login.py; index 343de7bda..e740f7b3d 100644; --- a/hail/python/hailtop/hailctl/auth/login.py; +++ b/hail/python/hailtop/hailctl/auth/login.py; @@ -5,7 +5,7 @@ import webbrowser; import aiohttp; from aiohttp import web; ; -from hailtop.config import get_deploy_config; +from hailtop.config import HAIL_CONFIG_DIR, get_deploy_config; from hailtop.auth import get_tokens, namespace_auth_headers; ; ; @@ -77,9 +77,8 @@ Opening in your browser.; ; tokens = get_tokens(); tokens[auth_ns] = token; - dot_hail_dir = os.path.expanduser('~/.hail'); - if not os.path.exists(dot_hail_dir):; - os.mkdir(dot_hail_dir, mode=0o700); + if not os.path.exists(HAIL_CONFIG_DIR):; + os.makedirs(HAIL_CONFIG_DIR, mode=0o700); tokens.write(); ; if auth_ns == 'default':; diff --git a/hail/python/hailtop/hailctl/dev/config/cli.py b/hail/python/hailtop/hailctl/dev/config/cli.py; index c032e7731..d293b07cf 100644; --- a/hail/python/hailtop/hailctl/dev/config/cli.py; +++ b/hail/python/hailtop/hailctl/dev/config/cli.py; @@ -1,6 +1,6 @@; import os; import json; -from hailtop.config ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7125#issuecomment-535602902:3521,log,login,3521,https://hail.is,https://github.com/hail-is/hail/pull/7125#issuecomment-535602902,1,['log'],['login']
Testability,"/ijl/orjson/releases"">orjson's releases</a>.</em></p>; <blockquote>; <h2>3.9.15</h2>; <h3>Fixed</h3>; <ul>; <li>Implement recursion limit of 1024 on <code>orjson.loads()</code>.</li>; <li>Use byte-exact read on <code>str</code> formatting SIMD path to avoid crash.</li>; </ul>; <h2>3.9.14</h2>; <h3>Fixed</h3>; <ul>; <li>Fix crash serializing <code>str</code> introduced in 3.9.11.</li>; </ul>; <h3>Changed</h3>; <ul>; <li>Build now depends on Rust 1.72 or later.</li>; </ul>; <h2>3.9.13</h2>; <h3>Fixed</h3>; <ul>; <li>Serialization <code>str</code> escape uses only 128-bit SIMD.</li>; <li>Fix compatibility with CPython 3.13 alpha 3.</li>; </ul>; <h3>Changed</h3>; <ul>; <li>Publish <code>musllinux_1_2</code> instead of <code>musllinux_1_1</code> wheels.</li>; <li>Serialization uses small integer optimization in CPython 3.12 or later.</li>; </ul>; <h2>3.9.12</h2>; <h3>Fixed</h3>; <ul>; <li>Minimal <code>musllinux_1_1</code> build due to sporadic CI failure.</li>; </ul>; <h3>Changed</h3>; <ul>; <li>Update benchmarks in README.</li>; </ul>; <h2>3.9.11</h2>; <h3>Changed</h3>; <ul>; <li>Improve performance of serializing. <code>str</code> is significantly faster. Documents; using <code>dict</code>, <code>list</code>, and <code>tuple</code> are somewhat faster.</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/ijl/orjson/blob/master/CHANGELOG.md"">orjson's changelog</a>.</em></p>; <blockquote>; <h2>3.9.15 - 2024-02-23</h2>; <h3>Fixed</h3>; <ul>; <li>Implement recursion limit of 1024 on <code>orjson.loads()</code>.</li>; <li>Use byte-exact read on <code>str</code> formatting SIMD path to avoid crash.</li>; </ul>; <h2>3.9.14 - 2024-02-14</h2>; <h3>Fixed</h3>; <ul>; <li>Fix crash serializing <code>str</code> introduced in 3.9.11.</li>; </ul>; <h3>Changed</h3>; <ul>; <li>Build now depends on Rust 1.72 or later.</li>; </ul>; <h2>3.9.13 - 2024-02-03</h2>; <h3>Fixed</h3>; <ul>; <li>Serialization <code>str</",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14357:1176,benchmark,benchmarks,1176,https://hail.is,https://github.com/hail-is/hail/pull/14357,3,['benchmark'],['benchmarks']
Testability,"/li>; <li><a href=""https://github.com/urllib3/urllib3/commit/64a3767e548f830fdc667abb1a943617d371a7e4""><code>64a3767</code></a> Bump cryptography to fix docs build</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/455960b7463fd719b96ea27be935809669faee22""><code>455960b</code></a> Support cryptography 39</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/955da4d03eaa6785aef40a34f440a67d736a4793""><code>955da4d</code></a> [1.26] Strip leading zeros from ports</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/b8c5d457fc42821b951ea58bec4ad685a0183c02""><code>b8c5d45</code></a> [1.26] Deprecate HTTPResponse.getheaders() and .getheader() methods</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/8b8e4b5a148d0eb706daf5ac48b4423b434495f5""><code>8b8e4b5</code></a> Temporary fix for SLSA generator</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/cc9b0dc10eaf83b1242d710222525edd73555b6d""><code>cc9b0dc</code></a> [1.26] Fix logo URL in README</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/eb47444a9dfaa045cc4753e4d77c57fbdccaa619""><code>eb47444</code></a> [1.26] Fix CI by switching to macOS 11</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/34d7348bb96eca390c2115aeeee31d1147830844""><code>34d7348</code></a> Remove &quot;&lt;4&quot; upper bound from python_requires</li>; <li>See full diff in <a href=""https://github.com/urllib3/urllib3/compare/1.26.12...1.26.13"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.12&new-version=1.26.13)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (depe",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12506:2783,log,logo,2783,https://hail.is,https://github.com/hail-is/hail/pull/12506,1,['log'],['logo']
Testability,"/li>; <li>Changed: running sphinx will now fail in pre-render mode; if KaTeX fails</li>; <li>Removed: support for Python 2.7, 3.4, 3.5</li>; </ul>; <h2>sphinxcontrib-katex 0.7.2</h2>; <ul>; <li>Fixed: Sphinx&gt;=4.0.0 is not supported at the moment</li>; </ul>; <h2>sphinxcontrib-katex 0.7.1</h2>; <ul>; <li>Fixed: label of fraction example in docs</li>; </ul>; <h2>sphinxcontrib-katex 0.7.0</h2>; <ul>; <li>Added: fraction example to docs</li>; <li>Changed: switch to KaTeX 0.12.0</li>; <li>Changed: add small top and bottom padding to equations</li>; </ul>; <h2>sphinxcontrib-katex 0.6.1</h2>; <p><a href=""https://pypi.org/project/sphinxcontrib-katex/0.6.1/"">https://pypi.org/project/sphinxcontrib-katex/0.6.1/</a></p>; <ul>; <li>Fixed: run katex under Windows</li>; </ul>; <h2>sphinxcontrib-katex 0.6.0</h2>; <p><a href=""https://pypi.org/project/sphinxcontrib-katex/0.6.0/"">https://pypi.org/project/sphinxcontrib-katex/0.6.0/</a></p>; <ul>; <li>Changed: switch to Katex 0.11.1</li>; <li>Changed: add tests for Python 3.7 and 3.8</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/hagenw/sphinxcontrib-katex/blob/master/CHANGELOG.rst"">sphinxcontrib-katex's changelog</a>.</em></p>; <blockquote>; <h2>Version 0.8.6 (2021-05-27)</h2>; <ul>; <li>Fixed: allow to work with Sphinx&gt;=4.0.0</li>; </ul>; <h2>Version 0.8.5 (2021-05-26)</h2>; <ul>; <li>Fixed: remove extra space after inline math when using pre-rendering</li>; </ul>; <h2>Version 0.8.4 (2021-05-18)</h2>; <ul>; <li>Changed: increase top padding of equations by 2px</li>; </ul>; <h2>Version 0.8.3 (2021-05-18)</h2>; <ul>; <li>Fixed: building of documentation on RTD</li>; </ul>; <h2>Version 0.8.2 (2021-05-18)</h2>; <ul>; <li>Fixed: PyPI package version number</li>; </ul>; <h2>Version 0.8.1 (2021-05-18)</h2>; <ul>; <li>Fixed: PyPI package had wrong version number</li>; </ul>; <h2>Version 0.8.0 (2021-05-18)</h2>; <ul>; <li>Added: support for Python 3.9</li>;",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11458:2033,test,tests,2033,https://hail.is,https://github.com/hail-is/hail/pull/11458,2,['test'],['tests']
Testability,"/li>; <li>Fix TXT CHAOS test</li>; <li>Add support for CAA queries</li>; <li>Support Python &gt;= 3.6</li>; <li>Bump pycares dependency</li>; <li>Drop tasks.py</li>; <li>Allow specifying dnsclass for queries</li>; <li>Set URL to https</li>; <li>Add license args in setup.py</li>; <li>Converted Type Annotations to Py3 syntax Closes</li>; <li>Only run mypy on cpython versions</li>; <li>Also fix all type errors with latest mypy - pycares seems to have no typing / stubs so lets ignore it via <code>mypy.ini</code></li>; <li>setup: typing exists since Python 3.5</li>; <li>Fix type annotation of gethostbyname()</li>; <li>Updated README</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/saghul/aiodns/blob/master/ChangeLog"">aiodns's changelog</a>.</em></p>; <blockquote>; <h1>3.0.0</h1>; <ul>; <li>Release wheels and source to PyPI with GH actions</li>; <li>Try to make tests more resilient</li>; <li>Don't build universal wheels</li>; <li>Migrate CI to GH Actions</li>; <li>Fix TXT CHAOS test</li>; <li>Add support for CAA queries</li>; <li>Support Python &gt;= 3.6</li>; <li>Bump pycares dependency</li>; <li>Drop tasks.py</li>; <li>Allow specifying dnsclass for queries</li>; <li>Set URL to https</li>; <li>Add license args in setup.py</li>; <li>Converted Type Annotations to Py3 syntax Closes</li>; <li>Only run mypy on cpython versions</li>; <li>Also fix all type errors with latest mypy - pycares seems to have no typing / stubs so lets ignore it via <code>mypy.ini</code></li>; <li>setup: typing exists since Python 3.5</li>; <li>Fix type annotation of gethostbyname()</li>; <li>Updated README</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/saghul/aiodns/commit/cdb33385f46be1e18bc525ccb153c8abc8ac92d4""><code>cdb3338</code></a> Updated changelog</li>; <li><a href=""https://github.com/saghul/aiodns/commit/a57968007a0e6f826e1a8a2160eade23c254bc42",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11570:1376,test,tests,1376,https://hail.is,https://github.com/hail-is/hail/pull/11570,2,['test'],"['test', 'tests']"
Testability,"/projects/hail/datasets/extract/extract_1000_Genomes_NYGC_30x_GRCh38.py:12: j.image(""gcr.io/broad-ctsa/datasets:041421""); /Users/dking/projects/hail/datasets/extract/extract_1000_Genomes_NYGC_30x_GRCh38.py:19: j.image(""gcr.io/broad-ctsa/datasets:041421""); /Users/dking/projects/hail/datasets/extract/extract_1000_Genomes_NYGC_30x_GRCh38.py:26: j.image(""gcr.io/broad-ctsa/datasets:041421""); /Users/dking/projects/hail/hail/scripts/update-terra-image.py:33:Image URL: `us.gcr.io/broad-dsp-gcr-public/{image_name}:{image_version}`; /Users/dking/projects/hail/hail/python/test/hailtop/utils/test_utils.py:115: x = parse_docker_image_reference('gcr.io/hail-vdc/batch-worker:123fds312'); /Users/dking/projects/hail/hail/python/test/hailtop/utils/test_utils.py:116: assert x.domain == 'gcr.io'; /Users/dking/projects/hail/hail/python/test/hailtop/utils/test_utils.py:120: assert x.name() == 'gcr.io/hail-vdc/batch-worker'; /Users/dking/projects/hail/hail/python/test/hailtop/utils/test_utils.py:121: assert str(x) == 'gcr.io/hail-vdc/batch-worker:123fds312'; /Users/dking/projects/hail/hail/python/hail/docs/change_log.md:278:- (hail#12230) The python-dill Batch images in `gcr.io/hail-vdc` are no longer supported.; /Users/dking/projects/hail/hail/python/hailtop/utils/utils.py:707: # DockerError(500, ""Head https://gcr.io/v2/genomics-tools/samtools/manifests/latest: unknown: Project 'project:genomics-tools' not found or deleted.""); /Users/dking/projects/hail/hail/python/hailtop/utils/utils.py:1061: return self.domain is not None and (self.domain == 'gcr.io' or self.domain.endswith('docker.pkg.dev')); /Users/dking/projects/hail/hail/python/hailtop/aiocloud/aiogoogle/client/container_client.py:6: super().__init__(f'https://gcr.io/v2/{project}', **kwargs); /Users/dking/projects/hail/datasets/extract/extract_dbSNP.py:22: j.image(""gcr.io/broad-ctsa/datasets:050521""); /Users/dking/projects/hail/infra/gcp/main.tf:55: ""gcr.io/${var.gcp_project}""; /Users/dking/projects/hail/infra/gcp/main.tf:375: disp",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12963#issuecomment-1531692013:1504,assert,assert,1504,https://hail.is,https://github.com/hail-is/hail/pull/12963#issuecomment-1531692013,1,['assert'],['assert']
Testability,"/testng/pull/2831"">cbeust/testng#2831</a></li>; <li>Changing assertion message of the osgitest by <a href=""https://github.com/krmahadevan""><code>@​krmahadevan</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2832"">cbeust/testng#2832</a></li>; <li>hidden spotbugs in release <a href=""https://github-redirect.dependabot.com/cbeust/testng/issues/2829"">#2829</a> by <a href=""https://github.com/bobshie""><code>@​bobshie</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2833"">cbeust/testng#2833</a></li>; <li>Enhancing the Matrix by <a href=""https://github.com/krmahadevan""><code>@​krmahadevan</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2834"">cbeust/testng#2834</a></li>; <li>Avoid Compilation errors on Semeru JDK flavour. by <a href=""https://github.com/krmahadevan""><code>@​krmahadevan</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2835"">cbeust/testng#2835</a></li>; <li>Add addition yml extension by <a href=""https://github.com/speedythesnail""><code>@​speedythesnail</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2837"">cbeust/testng#2837</a></li>; <li>Support getting dependencies info for a test by <a href=""https://github.com/krmahadevan""><code>@​krmahadevan</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2839"">cbeust/testng#2839</a></li>; <li>Honour regex in dependsOnMethods by <a href=""https://github.com/krmahadevan""><code>@​krmahadevan</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2838"">cbeust/testng#2838</a></li>; <li>Ensure All tests run all the time by <a href=""https://github.com/krmahadevan""><code>@​krmahadevan</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2842"">cbeust/testng#2842</a></li>; <li>Deprecate support for running Spock Tests by <a href=""https://github.com/krmahadevan""><code>@​krmahadevan</code></a",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12665:6186,test,testng,6186,https://hail.is,https://github.com/hail-is/hail/pull/12665,2,['test'],['testng']
Testability,"/typecheck/check.py"", line 486, in _typecheck; return __orig_func__(*args_, **kwargs_); File ""/Users/konradk/Dropbox/src/python/hail/table.py"", line 1101, in show; print(self._show(n,width, truncate, types)); File ""/Users/konradk/Dropbox/src/python/hail/table.py"", line 1104, in _show; return self._jt.showString(n, joption(truncate), types, width); File ""/Users/konradk/programs/spark-2.2.0-bin-hadoop2.7/python/lib/py4j-0.10.4-src.zip/py4j/java_gateway.py"", line 1133, in __call__; answer, self.gateway_client, self.target_id, self.name); File ""/Users/konradk/Dropbox/src/python/hail/utils/java.py"", line 196, in deco; 'Error summary: %s' % (deepest, full, hail.__version__, deepest)) from None; hail.utils.java.FatalError: AssertionError: assertion failed; Java stack trace:; org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 9.0 failed 1 times, most recent failure: Lost task 0.0 in stage 9.0 (TID 49, localhost, executor driver): java.lang.AssertionError: assertion failed; 	at scala.Predef$.assert(Predef.scala:156); 	at is.hail.rvd.OrderedRVD$$anonfun$apply$16$$anon$3.next(OrderedRVD.scala:926); 	at is.hail.rvd.OrderedRVD$$anonfun$apply$16$$anon$3.next(OrderedRVD.scala:908); 	at scala.collection.Iterator$$anon$12.next(Iterator.scala:444); 	at is.hail.utils.package$.getIteratorSizeWithMaxN(package.scala:349); 	at is.hail.sparkextras.ContextRDD$$anonfun$12.apply(ContextRDD.scala:433); 	at is.hail.sparkextras.ContextRDD$$anonfun$12.apply(ContextRDD.scala:433); 	at is.hail.sparkextras.ContextRDD$$anonfun$runJob$1$$anonfun$apply$34.apply(ContextRDD.scala:458); 	at is.hail.sparkextras.ContextRDD$$anonfun$runJob$1$$anonfun$apply$34.apply(ContextRDD.scala:458); 	at is.hail.utils.package$.using(package.scala:577); 	at is.hail.sparkextras.ContextRDD$$anonfun$runJob$1.apply(ContextRDD.scala:458); 	at is.hail.sparkextras.ContextRDD$$anonfun$runJob$1.apply(ContextRDD.scala:458); 	at org.apache.spark.SparkContext$$anonfun$runJob$5.apply(SparkContext.scala:",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3516:1902,Assert,AssertionError,1902,https://hail.is,https://github.com/hail-is/hail/issues/3516,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,"/uk.v3/bgen/ukb19416_imp_chr""+chr+""_v3_s487327.sample""; # hl.index_bgen(bgen); mt=hl.import_bgen(bgen,sample_file=sample,entry_fields=['GT','GP','dosage']); print(mt.describe()); rg37 = hl.get_reference('GRCh37'); rg38 = hl.get_reference('GRCh38'); rg37.add_liftover('file:///restricted/projectnb/ukbiobank/ad/analysis/liftover/grch37_to_grch38.over.chain.gz', rg38); mt = mt.annotate_rows(new_locus=hl.liftover(mt.locus, 'GRCh38'), old_locus=mt.locus); mt = mt.filter_rows(hl.is_defined(mt.new_locus)); # mt = mt.key_rows_by(locus=mt.new_locus); print(mt.describe()); mt = mt.key_rows_by(locus=mt.new_locus,alleles=mt.alleles); print(mt.describe()); hl.export_vcf(mt,""/project/ukbiobank/imp/uk.v3.GRCh38/uk.v3.r38.chr""+chr+"".vcf.bgz""); ```. ```; Version 0.2.19-c6ec8b76eb26; LOGGING: writing to /restricted/projectnb/ukbiobank/ad/analysis/liftover/hail-20200214-1434-0.2.19-c6ec8b76eb26.log; 2020-02-14 14:35:19 Hail: INFO: Number of BGEN files parsed: 1; 2020-02-14 14:35:19 Hail: INFO: Number of samples in BGEN files: 487409; 2020-02-14 14:35:19 Hail: INFO: Number of variants across all BGEN files: 1255683. Global fields:; None; ----------------------------------------; Column fields:; 's': str; ----------------------------------------; Row fields:; 'locus': locus<GRCh38>; 'alleles': array<str>; 'rsid': str; 'varid': str; 'new_locus': locus<GRCh38>; 'old_locus': locus<GRCh37>; ----------------------------------------; Entry fields:; 'GT': call; 'GP': array<float64>; 'dosage': float64; ----------------------------------------; Column key: ['s']; Row key: ['locus', 'alleles']; ----------------------------------------; None; 2020-02-14 14:35:22 Hail: WARN: export_vcf: ignored the following fields:; 'varid' (row); 'new_locus' (row); 'old_locus' (row); [Stage 0:======================================================>(292 + 1) / 293]2020-02-14 14:38:52 Hail: INFO: Ordering unsorted dataset with netw; 2020-02-14 14:38:52 Hail: WARN: export_vcf found no row field 'info'. Emitting no INF",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8106:1158,log,log,1158,https://hail.is,https://github.com/hail-is/hail/issues/8106,1,['log'],['log']
Testability,"/worker.py"", line 634, in _localize_rootfs; await self._pull_image(); File ""/usr/local/lib/python3.9/dist-packages/batch/worker/worker.py"", line 587, in _pull_image; await pull(); File ""/usr/local/lib/python3.9/dist-packages/batch/worker/worker.py"", line 566, in pull; raise ImageCannotBePulled from e; ImageCannotBePulled. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/usr/local/lib/python3.9/dist-packages/batch/worker/worker.py"", line 1887, in run_container; await container.run(on_completion); File ""/usr/local/lib/python3.9/dist-packages/batch/worker/worker.py"", line 920, in run; await on_completion(*args, **kwargs); File ""/usr/lib/python3.9/contextlib.py"", line 137, in __exit__; self.gen.throw(typ, value, traceback); File ""/usr/local/lib/python3.9/dist-packages/hailtop/utils/utils.py"", line 1154, in step; yield; File ""/usr/local/lib/python3.9/dist-packages/batch/worker/worker.py"", line 1873, in on_completion; await self.worker.fs.read(container.log_path),; File ""/usr/local/lib/python3.9/dist-packages/hailtop/aiotools/fs/fs.py"", line 281, in read; async with await self.open(url) as f:; File ""/usr/local/lib/python3.9/dist-packages/hailtop/aiotools/router_fs.py"", line 76, in open; return await fs.open(url); File ""/usr/local/lib/python3.9/dist-packages/hailtop/aiotools/local_fs.py"", line 252, in open; f = await blocking_to_async(self._thread_pool, open, self._get_path(url), 'rb'); File ""/usr/local/lib/python3.9/dist-packages/hailtop/utils/utils.py"", line 181, in blocking_to_async; return await asyncio.get_event_loop().run_in_executor(; File ""/usr/lib/python3.9/concurrent/futures/thread.py"", line 58, in run; result = self.fn(*self.args, **self.kwargs); File ""/usr/local/lib/python3.9/dist-packages/hailtop/utils/utils.py"", line 182, in <lambda>; thread_pool, lambda: fun(*args, **kwargs)); FileNotFoundError: [Errno 2] No such file or directory: '/batch/00a8b257731544b494247db2813c7a83/main/container.log'; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13907:4524,log,log,4524,https://hail.is,https://github.com/hail-is/hail/issues/13907,1,['log'],['log']
Testability,"/x86_64-linux-gnu/libc.so.6(+0x33060)[0x7fbec2eae060]; /lib/x86_64-linux-gnu/libc.so.6(gsignal+0xcf)[0x7fbec2eadfff]; /lib/x86_64-linux-gnu/libc.so.6(abort+0x16a)[0x7fbec2eaf42a]; /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so(+0x8c0259)[0x7fbec27f0259]; /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so(+0xa744f8)[0x7fbec29a44f8]; /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so(JVM_handle_linux_signal+0x265)[0x7fbec27f9e45]; /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so(+0x8bd4c8)[0x7fbec27ed4c8]; /lib/x86_64-linux-gnu/libpthread.so.0(+0x110c0)[0x7fbec38580c0]; [0x7fbeaec3ca22]; ERROR: (gcloud.dataproc.jobs.submit.pyspark) Job [828e66d5a71741d7ab2c8d6580997da3] entered state [ERROR] while waiting for [DONE].; Traceback (most recent call last):; File ""pyhail.py"", line 132, in <module>; main(args, pass_through_args); File ""pyhail.py"", line 113, in main; subprocess.check_output(job); File ""/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/subprocess.py"", line 573, in check_output; raise CalledProcessError(retcode, cmd, output=output); subprocess.CalledProcessError: Command '['gcloud', 'dataproc', 'jobs', 'submit', 'pyspark', '/Users/gtiao/gnomad_qc/hail/variant_qc/make_var_annot_hists.py', '--cluster', 'gt3', '--files=gs://hail-common/builds/devel/jars/hail-devel-cadc5eefca6e-Spark-2.2.0.jar', '--py-files=gs://hail-common/builds/devel/python/hail-devel-cadc5eefca6e.zip,/var/folders/rn/t2xcx1ps4h96txll46qkkfsj2q8bnl/T/pyscripts_K7Vs59.zip', '--driver-log-levels', 'root=FATAL,is.hail=INFO', '--properties=spark.executor.extraClassPath=./hail-devel-cadc5eefca6e-Spark-2.2.0.jar,spark.driver.extraClassPath=./hail-devel-cadc5eefca6e-Spark-2.2.0.jar,spark.files=./hail-devel-cadc5eefca6e-Spark-2.2.0.jar,spark.submit.pyFiles=./gs://hail-common/builds/devel/python/hail-devel-cadc5eefca6e.zip', '--', '--overwrite', '--exomes', '--slack_channel', '@grace']' returned non-zero exit status 1; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4418:4882,log,log-levels,4882,https://hail.is,https://github.com/hail-is/hail/issues/4418,1,['log'],['log-levels']
Testability,"0 indelDebug=false ignoreSNPAlleles=false allReadsSP=false ignoreLaneInfo=false reference_sample_calls=(RodBinding name= source=UNBOUND) reference_sample_name=null sample_ploidy=2 min_quality_score=1 max_quality_score=40 site_quality_prior=20 min_power_threshold_for_calling=0.95 min_reference_depth=100 exclude_filtered_reference_sites=false heterozygosity=0.0010 genotyping_mode=DISCOVERY output_mode=EMIT_VARIANTS_ONLY standard_min_confidence_threshold_for_calling=30.0 standard_min_confidence_threshold_for_emitting=30.0 alleles=(RodBinding name= source=UNBOUND) max_alternate_alleles=6 p_nonref_model=EXACT_INDEPENDENT contamination_fraction_to_filter=0.0 contamination_percentage_per_sample_file=/seq/dax/all_1kg_exomes/v1/all_1kg_exomes.v1.contamination_levels.txt logRemovedReadsFromContaminationFiltering=null exactcallslog=null dbsnp=(RodBinding name=dbsnp source=/seq/references/Homo_sapiens_assembly19/v1/Homo_sapiens_assembly19.dbsnp.vcf) comp=[] out=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub no_cmdline_in_header=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub sites_only=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub bcf=org.broadinstitute.sting.gatk.io.stubs.VariantContextWriterStub debug_file=null metrics_file=null annotation=[] excludeAnnotation=[] filter_mismatching_base_and_quals=false""; ##VariantAnnotator=""analysis_type=VariantAnnotator input_file=[] read_buffer_size=null phone_home=STANDARD gatk_key=null tag=NA read_filter=[] intervals=[/seq/references/HybSelOligos/whole_exome_agilent_1.1_refseq_plus_3_boosters/whole_exome_agilent_1.1_refseq_plus_3_boosters.Homo_sapiens_assembly19.targets.interval_list] excludeIntervals=null interval_set_rule=UNION interval_merging=ALL interval_padding=50 reference_sequence=/seq/references/Homo_sapiens_assembly19/v1/Homo_sapiens_assembly19.fasta nonDeterministicRandomSeed=false disableRandomization=false maxRuntime=-1 maxRuntimeUnits=MINUTES downsampling_type=BY_SAMPLE down",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658:16343,stub,stubs,16343,https://hail.is,https://github.com/hail-is/hail/issues/1822#issuecomment-301916658,1,['stub'],['stubs']
Testability,0 |; | test | test | 6 | 3 | 607168 |; | test | test | 6 | 4 | 749952 |; | test | test | 6 | 5 | 46912 |; | test | test | 6 | 6 | 158336 |; | test | test | 6 | 7 | 70336 |; | test | test | 6 | 8 | 167680 |; | test | test | 6 | 9 | 523136 |; | test | test | 6 | 10 | 40640 |; | test | test | 6 | 11 | 616448 |; | test | test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:1820,test,test,1820,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,"0, in main; run(); File ""/home/edmund/.vscode/extensions/ms-python.debugpy-2024.6.0-linux-x64/bundled/libs/debugpy/adapter/../../debugpy/launcher/../../debugpy/../debugpy/server/cli.py"", line 284, in run_file; runpy.run_path(target, run_name=""__main__""); File ""/home/edmund/.vscode/extensions/ms-python.debugpy-2024.6.0-linux-x64/bundled/libs/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_runpy.py"", line 321, in run_path; return _run_module_code(code, init_globals, run_name,; File ""/home/edmund/.vscode/extensions/ms-python.debugpy-2024.6.0-linux-x64/bundled/libs/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_runpy.py"", line 135, in _run_module_code; _run_code(code, mod_globals, init_globals,; File ""/home/edmund/.vscode/extensions/ms-python.debugpy-2024.6.0-linux-x64/bundled/libs/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_runpy.py"", line 124, in _run_code; exec(code, run_globals); File ""/home/edmund/.local/src/hail/test.py"", line 34, in <module>; main(); File ""/home/edmund/.local/src/hail/test.py"", line 28, in main; r2_adj = r2_adj.checkpoint(f'{tmp}/adj', overwrite=args.overwrite); File ""<decorator-gen-1508>"", line 2, in checkpoint; File ""/home/edmund/.local/src/hail/hail/python/hail/typecheck/check.py"", line 584, in wrapper; return __original_func(*args_, **kwargs_); File ""/home/edmund/.local/src/hail/hail/python/hail/linalg/blockmatrix.py"", line 679, in checkpoint; self.write(path, overwrite, force_row_major, stage_locally); File ""<decorator-gen-1506>"", line 2, in write; File ""/home/edmund/.local/src/hail/hail/python/hail/typecheck/check.py"", line 584, in wrapper; return __original_func(*args_, **kwargs_); File ""/home/edmund/.local/src/hail/hail/python/hail/linalg/blockmatrix.py"", line 656, in write; Env.backend().execute(BlockMatrixWrite(self._bmir, writer)); File ""/home/edmund/.local/src/hail/hail/python/hail/backend/backend.py"", line 190, in execute; raise e.maybe_user_error(ir) from None; File ""/home/edmund/.local/src/hail/hail/python/hail/backend/backend.py",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14537:3207,test,test,3207,https://hail.is,https://github.com/hail-is/hail/issues/14537,1,['test'],['test']
Testability,"0.2.132. I made sure I used a completely clean environment with nothing in it (using pixi). . When I did . ```; import hail; ```. I got this error:. ```; >>> import hail; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/Users/srinivas/test/.pixi/envs/default/lib/python3.12/site-packages/hail/__init__.py"", line 40, in <module>; from hail.utils import (; File ""/Users/srinivas/test/.pixi/envs/default/lib/python3.12/site-packages/hail/utils/__init__.py"", line 4, in <module>; from .hadoop_utils import (; File ""/Users/srinivas/test/.pixi/envs/default/lib/python3.12/site-packages/hail/utils/hadoop_utils.py"", line 7, in <module>; from hail.fs.hadoop_fs import HadoopFS; File ""/Users/srinivas/test/.pixi/envs/default/lib/python3.12/site-packages/hail/fs/hadoop_fs.py"", line 8, in <module>; from hailtop.fs.fs import FS; File ""/Users/srinivas/test/.pixi/envs/default/lib/python3.12/site-packages/hailtop/fs/__init__.py"", line 1, in <module>; from .fs_utils import (; File ""/Users/srinivas/test/.pixi/envs/default/lib/python3.12/site-packages/hailtop/fs/fs_utils.py"", line 4, in <module>; from hailtop.aiocloud.aiogoogle import GCSRequesterPaysConfiguration; File ""/Users/srinivas/test/.pixi/envs/default/lib/python3.12/site-packages/hailtop/aiocloud/aiogoogle/__init__.py"", line 1, in <module>; from .client import (; File ""/Users/srinivas/test/.pixi/envs/default/lib/python3.12/site-packages/hailtop/aiocloud/aiogoogle/client/__init__.py"", line 8, in <module>; from .storage_client import (; File ""/Users/srinivas/test/.pixi/envs/default/lib/python3.12/site-packages/hailtop/aiocloud/aiogoogle/client/storage_client.py"", line 14, in <module>; from hailtop.aiotools import FeedableAsyncIterable, WriteBuffer; File ""/Users/srinivas/test/.pixi/envs/default/lib/python3.12/site-packages/hailtop/aiotools/__init__.py"", line 1, in <module>; from .fs import (; File ""/Users/srinivas/test/.pixi/envs/default/lib/python3.12/site-packages/hailtop/aiotools/fs/__init__.py"", line 1, ",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14630:1078,test,test,1078,https://hail.is,https://github.com/hail-is/hail/issues/14630,1,['test'],['test']
Testability,"00 on error. We could return a BadRequest error code with the message 'invalid spec' and then handle the MJC database call on the driver. I chose instead to have the worker to post job complete so we get the error message with the stack trace showing up in the UI as having the normal job flow seemed cleaner to me last week then special casing `schedule_job` on the driver. `post job complete` needs a job object to get the status to send back to the driver. However, a `Job` has two concrete implementations and we don't know which the bad job is because we can't get the spec. Furthermore, the `Job` class does a lot of work based on the spec right now. So I thought it was clearer to just create a new class that had the status, but nothing else. After writing this out, it's probably better to have the driver MJC upon error rather than from the worker. The code below would be more complicated. We'd have to get the traceback / error message from the response from the worker. ```python3; try:; await client_session.post(; f'http://{instance.ip_address}:5000/api/v1alpha/batches/jobs/create',; json=body,; timeout=aiohttp.ClientTimeout(total=2),; ); await instance.mark_healthy(); except aiohttp.ClientResponseError as e:; await instance.mark_healthy(); if e.status == 403:; log.info(f'attempt already exists for job {id} on {instance}, aborting'); if e.status == 503:; log.info(f'job {id} cannot be scheduled because {instance} is shutting down, aborting'); raise e; except Exception:; await instance.incr_failed_request_count(); raise; ```. And the error handling would look something like this:. ```python3; try:; body = await job_config(app, record, attempt_id); except Exception:; log.exception('while making job config'); status = {; 'version': STATUS_FORMAT_VERSION,; 'worker': None,; 'batch_id': batch_id,; 'job_id': job_id,; 'attempt_id': attempt_id,; 'user': record['user'],; 'state': 'error',; 'error': traceback.format_exc(),; 'container_statuses': {k: None for k in tasks},; }. ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11391#issuecomment-1048213078:1325,log,log,1325,https://hail.is,https://github.com/hail-is/hail/pull/11391#issuecomment-1048213078,3,['log'],['log']
Testability,"000] \""GET /api/v1alpha/batches/9 HTTP/1.1\"" 200 279 \""-\"" \""Python/3.6 aiohttp/3.5.4\"""", ""remote_address"": ""10.32.4.199"", ""request_start_time"": ""[11/Jul/2019:14:19:34 +0000]"", ""first_request_line"": ""GET /api/v1alpha/batches/9 HTTP/1.1"", ""response_status"": 200, ""response_size"": 279, ""request_header"": {""Referer"": ""-"", ""User-Agent"": ""Python/3.6 aiohttp/3.5.4""}}; {""levelname"": ""INFO"", ""asctime"": ""2019-07-11 14:19:34,991"", ""filename"": ""batch.py"", ""funcNameAndLine"": ""update_job_with_pod:1145"", ""message"": ""update job (9, 1, 'main') with pod batch-9-job-1-c8b9b2""}; ```. Recall that pod creation happens in the background, so the `batches/9/create` and `batches/9/close` endpoints return to the client before pods are necessarily created. See batch.py:866, `Batch.close`. Likewise, the `batches/9/cancel` endpoint returns before the individual jobs are cancelled. There are now at most three concurrent threads of control interacting with the database and k8s. Eventually this sequence of log messages appears three times in quick succession. ```; {""levelname"": ""INFO"", ""asctime"": ""2019-07-11 14:19:39,890"", ""filename"": ""batch.py"", ""funcNameAndLine"": ""update_job_with_pod:1145"", ""message"": ""update job (9, 1, 'main') with pod batch-9-job-1-c8b9b2""}; {""levelname"": ""INFO"", ""asctime"": ""2019-07-11 14:19:39,890"", ""filename"": ""batch.py"", ""funcNameAndLine"": ""update_job_with_pod:1159"", ""message"": ""job (9, 1, 'main') mark complete""}; {""levelname"": ""WARNING"", ""asctime"": ""2019-07-11 14:19:39,899"", ""filename"": ""batch.py"", ""funcNameAndLine"": ""mark_complete:579"", ""message"": ""job (9, 1, 'main') has pod batch-9-job-1-c8b9b2 which is terminated but has no timing information. {'api_version': 'v1',\n 'kind': 'Pod',\n 'metadata': {'annotations': None,\n 'cluster_name': None,\n 'creation_timestamp': datetime.datetime(2019, 7, 11, 14, 19, 34, tzinfo=tzlocal()),\n 'deletion_grace_period_seconds': 30,\n 'deletion_timestamp': datetime.datetime(2019, 7, 11, 14, 20, 4, tzinfo=tzlocal()),\n 'finalizers': None,\n '",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6617:5047,log,log,5047,https://hail.is,https://github.com/hail-is/hail/issues/6617,1,['log'],['log']
Testability,"00: Running Test Classes with Inherited <a href=""https://github.com/Factory""><code>@​Factory</code></a> and <a href=""https://github.com/DataProvider""><code>@​DataProvider</code></a> Annotated Non-Static Methods Fail (Krishnan Mahadevan); New: Ability to provide custom error message for assertThrows\expectThrows methods (Anatolii Yuzhakov); Fixed: GITHUB-2780: Use SpotBugs instead of abandoned FindBugs; Fixed: GITHUB-2801: JUnitReportReporter is too slow; Fixed: GITHUB-2807: buildStackTrace should be fail-safe (Sergey Chernov); Fixed: GITHUB-2830: TestHTMLReporter parameter toString should be fail-safe (Sergey Chernov); Fixed: GITHUB-2798: Parallel executions coupled with retry analyzer results in duplicate retry analyzer instances being created (Krishnan Mahadevan)</p>; <p>7.6.1; Fixed: GITHUB-2761: Exception: ERROR java.nio.file.NoSuchFileException: /tmp/testngXmlPathInJar-15086412835569336174 (Krishnan Mahadevan); 7.6.0; Fixed: GITHUB-2741: Show fully qualified name of the test instead of just the function name for better readability of test output.(Krishnan Mahadevan); Fixed: GITHUB-2725: Honour custom attribute values in TestNG default reports (Krishnan Mahadevan); Fixed: GITHUB-2726: <a href=""https://github.com/AfterClass""><code>@​AfterClass</code></a> config method is executed for EACH <a href=""https://github.com/Test""><code>@​Test</code></a> method when parallel == methods (Krishnan Mahadevan); Fixed: GITHUB-2752: TestListener is being lost when implenting both IClassListener and ITestListener (Krishnan Mahadevan); New: GITHUB-2724: DataProvider: possibility to unload dataprovider class, when done with it (Dzmitry Sankouski); Fixed: GITHUB-217: Configure TestNG to fail when there's a failure in data provider (Krishnan Mahadevan); Fixed: GITHUB-2743: SuiteRunner could not be initial by default Configuration (Nan Liang); Fixed: GITHUB-2729: beforeConfiguration() listener method should be invoked for skipped configurations as well(Nan Liang); Fixed: assertEqualsN",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12665:12527,test,test,12527,https://hail.is,https://github.com/hail-is/hail/pull/12665,2,['test'],['test']
Testability,"01),12). java.lang.AssertionError: java.lang.ArrayIndexOutOfBoundsException: 3. 	at is.hail.check.GenProp1$$anonfun$apply$1.apply$mcVI$sp(Prop.scala:38); 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:160); 	at is.hail.check.GenProp1.apply(Prop.scala:26); 	at is.hail.check.Prop.check(Prop.scala:19); 	at is.hail.expr.ir.OrderingSuite.testBinarySearchOnDict(OrderingSuite.scala:357); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); 	at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:123); Caused by: java.lang.ArrayIndexOutOfBoundsException: 3; 	at scala.c",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5630:1184,test,testng,1184,https://hail.is,https://github.com/hail-is/hail/issues/5630,1,['test'],['testng']
Testability,"01, in result; raise self._exception; File ""/usr/lib/python3.9/concurrent/futures/thread.py"", line 58, in run; result = self.fn(*self.args, **self.kwargs); File ""/usr/local/lib/python3.9/dist-packages/hailtop/utils/utils.py"", line 163, in <lambda>; thread_pool, lambda: fun(*args, **kwargs)); OSError: [Errno 39] Directory not empty: '/tmp/JnQ2m'. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/usr/local/lib/python3.9/dist-packages/hailtop/aiotools/local_fs.py"", line 409, in rmtree; await rm_dir(pool, contents_tasks_by_dir.get(path, []), path); File ""/usr/local/lib/python3.9/dist-packages/hailtop/aiotools/local_fs.py"", line 387, in rm_dir; excs = [exc; File ""/usr/local/lib/python3.9/dist-packages/hailtop/aiotools/local_fs.py"", line 389, in <listcomp>; for exc in [t.exception()]; File ""/usr/lib/python3.9/asyncio/futures.py"", line 214, in exception; raise exc; asyncio.exceptions.CancelledError. [2023-08-02 05:33:14] test/hail/utils/test_hl_hadoop_and_hail_fs.py::test_hadoop_methods_3[local] ERROR; [2023-08-02 05:43:14] test/hail/utils/test_hl_hadoop_and_hail_fs.py::test_read_overwrite[remote] SKIPPED; ```; ```; ==================================== ERRORS ====================================; ______________ ERROR at teardown of test_hadoop_methods_3[local] _______________. pool = <hailtop.utils.utils.OnlineBoundedGather2 object at 0x7f263d7a6fa0>; contents_tasks = [<Task finished name='Task-63869' coro=<OnlineBoundedGather2.call.<locals>.run_and_cleanup() done, defined at /usr/loc...2.call.<locals>.run_and_cleanup() done, defined at /usr/local/lib/python3.9/dist-packages/hailtop/utils/utils.py:398>>]; path = '/tmp/JnQ2m'. async def rm_dir(pool: OnlineBoundedGather2,; contents_tasks: List[asyncio.Task],; path: str):; assert listener is not None; listener(1); if contents_tasks:; await pool.wait(contents_tasks); try:; > await self.rmdir(path). /usr/local/lib/python3.9/dist-packages/hailtop/aiotools/local_fs.py:",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13361:4474,test,test,4474,https://hail.is,https://github.com/hail-is/hail/issues/13361,1,['test'],['test']
Testability,"019-02-22 11:48:48,210 	| _internal.py 	| _log:87 | 127.0.0.1 - - [22/Feb/2019 11:48:48] ""POST /pod_changed HTTP/1.1"" 204 -; INFO	| 2019-02-22 11:48:48,833 	| server.py 	| mark_complete:190 | wrote log for job 61, main task to logs/job-61-main.log; INFO	| 2019-02-22 11:48:48,845 	| server.py 	| set_state:272 | job 61 changed state: Created -> Complete; INFO	| 2019-02-22 11:48:48,851 	| server.py 	| parent_new_state:287 | parent 61 successfully complete for 63; INFO	| 2019-02-22 11:48:48,857 	| server.py 	| parent_new_state:292 | all parents successfully complete for 63, creating pod; INFO	| 2019-02-22 11:48:48,918 	| server.py 	| create_pod:135 | created pod name: job-63-main-qqwb2 for job 63, main task; INFO	| 2019-02-22 11:48:48,929 	| server.py 	| mark_complete:330 | job 61 complete, exit_code 0; INFO	| 2019-02-22 11:48:48,995 	| _internal.py 	| _log:87 | 127.0.0.1 - - [22/Feb/2019 11:48:48] ""POST /pod_changed HTTP/1.1"" 204 -; [2019-02-22 11:48:49,043] ERROR in app: Exception on /test [POST]; Traceback (most recent call last):; File ""//anaconda/envs/hail-batch/lib/python3.6/site-packages/flask/app.py"", line 1982, in wsgi_app; response = self.full_dispatch_request(); File ""//anaconda/envs/hail-batch/lib/python3.6/site-packages/flask/app.py"", line 1615, in full_dispatch_request; return self.finalize_request(rv); File ""//anaconda/envs/hail-batch/lib/python3.6/site-packages/flask/app.py"", line 1630, in finalize_request; response = self.make_response(rv); File ""//anaconda/envs/hail-batch/lib/python3.6/site-packages/flask/app.py"", line 1740, in make_response; rv = self.response_class.force_type(rv, request.environ); File ""//anaconda/envs/hail-batch/lib/python3.6/site-packages/werkzeug/wrappers.py"", line 885, in force_type; response = BaseResponse(*_run_wsgi_app(response, environ)); File ""//anaconda/envs/hail-batch/lib/python3.6/site-packages/werkzeug/test.py"", line 884, in run_wsgi_app; app_rv = app(environ, start_response); TypeError: 'int' object is not callable; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5418:1558,test,test,1558,https://hail.is,https://github.com/hail-is/hail/pull/5418,2,['test'],['test']
Testability,"021</code></a> Adding release notes</li>; <li><a href=""https://github.com/cbeust/testng/commit/c0e1e772f1fc0ab2142f3a4114a2b8cfe60fa7e1""><code>c0e1e77</code></a> Adjust version reference in deprecation msgs.</li>; <li><a href=""https://github.com/cbeust/testng/commit/011527d9bf0f91a40539f5e5467cc106888810d9""><code>011527d</code></a> Bump version to 7.7.0 for release</li>; <li><a href=""https://github.com/cbeust/testng/commit/7846c444a411647f7e401a097224702188c93835""><code>7846c44</code></a> Deprecate support for running JUnit tests</li>; <li><a href=""https://github.com/cbeust/testng/commit/8630a7e8fe12985d71c00212f9362fd38fb0cb9e""><code>8630a7e</code></a> Ensure ITestContext available for JUnit4 tests</li>; <li><a href=""https://github.com/cbeust/testng/commit/7070b020def0089d0d9dc695a5762ad16e974ce6""><code>7070b02</code></a> Streamline dependsOnMethods for configurations</li>; <li><a href=""https://github.com/cbeust/testng/commit/d7e0bb1cbcd7933d34d704678e75cbaf42704505""><code>d7e0bb1</code></a> Deprecate support for running Spock Tests</li>; <li><a href=""https://github.com/cbeust/testng/commit/ca7a3a293008389096be75fea4936af8e5f79650""><code>ca7a3a2</code></a> Ensure All tests run all the time</li>; <li>Additional commits viewable in <a href=""https://github.com/cbeust/testng/compare/testng-6.8.21...7.7.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.testng:testng&package-manager=gradle&previous-version=6.8.21&new-version=7.7.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and opt",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12665:16142,test,testng,16142,https://hail.is,https://github.com/hail-is/hail/pull/12665,2,"['Test', 'test']","['Tests', 'testng']"
Testability,"05c4bf85/pyscripts_rlCXpu.zip/gnomad_hail/slack_utils.py"", line 77, in try_slack; func(*args); File ""/tmp/aa0cd79aaa1a4f1ba652555c05c4bf85/assign_subpops.py"", line 16, in main; pop_table = exome_pop_table.union(genome_pop_table); File ""<decorator-gen-484>"", line 2, in union; File ""/tmp/aa0cd79aaa1a4f1ba652555c05c4bf85/hail-devel-3da0e7424af0.zip/hail/typecheck/check.py"", line 481, in _typecheck; return __orig_func__(*args_, **kwargs_); File ""/tmp/aa0cd79aaa1a4f1ba652555c05c4bf85/hail-devel-3da0e7424af0.zip/hail/table.py"", line 1496, in union; return Table(self._jt.union([table._jt for table in tables])); File ""/usr/lib/spark/python/lib/py4j-0.10.4-src.zip/py4j/java_gateway.py"", line 1133, in __call__; answer, self.gateway_client, self.target_id, self.name); File ""/tmp/aa0cd79aaa1a4f1ba652555c05c4bf85/hail-devel-3da0e7424af0.zip/hail/utils/java.py"", line 196, in deco; 'Error summary: %s' % (deepest, full, hail.__version__, deepest)) from None; hail.utils.java.FatalError: AssertionError: assertion failed. Java stack trace:; java.lang.AssertionError: assertion failed; at scala.Predef$.assert(Predef.scala:156); at is.hail.table.Table.union(Table.scala:931); at is.hail.table.Table.union(Table.scala:928); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:498); at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244); at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357); at py4j.Gateway.invoke(Gateway.java:280); at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132); at py4j.commands.CallCommand.execute(CallCommand.java:79); at py4j.GatewayConnection.run(GatewayConnection.java:214); at java.lang.Thread.run(Thread.java:748). Hail version: devel-5f23872; Error summary: AssertionError: assertion failed; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3404:1124,Assert,AssertionError,1124,https://hail.is,https://github.com/hail-is/hail/issues/3404,5,"['Assert', 'assert']","['AssertionError', 'assert', 'assertion']"
Testability,"06e4</code></a> ci: remove compilie_catalog</li>; <li><a href=""https://github.com/inveniosoftware/dictdiffer/commit/2cc6ff223bdc2f2fa6b3a1842c68fc12d9555645""><code>2cc6ff2</code></a> release: v0.9.0 (<a href=""https://github-redirect.dependabot.com/inveniosoftware/dictdiffer/issues/161"">#161</a>)</li>; <li><a href=""https://github.com/inveniosoftware/dictdiffer/commit/d2f84b7dbe5e2ea871c25f7cb013d36e3be221e8""><code>d2f84b7</code></a> diff: add support for absolute tolerance of floats (<a href=""https://github-redirect.dependabot.com/inveniosoftware/dictdiffer/issues/152"">#152</a>)</li>; <li><a href=""https://github.com/inveniosoftware/dictdiffer/commit/fb2064ad9400c3b1c46a9c5cc58a0d509b1c99fd""><code>fb2064a</code></a> global: drop support for Python&lt;3.5 (<a href=""https://github-redirect.dependabot.com/inveniosoftware/dictdiffer/issues/160"">#160</a>)</li>; <li><a href=""https://github.com/inveniosoftware/dictdiffer/commit/02446475a71a22de6f7ee3d1aba2655e625c8e31""><code>0244647</code></a> testing: add <code>assert_no_diff</code> helper to assist pytest users (<a href=""https://github-redirect.dependabot.com/inveniosoftware/dictdiffer/issues/153"">#153</a>)</li>; <li><a href=""https://github.com/inveniosoftware/dictdiffer/commit/09372ecfe8bccaacfeaf3d6bab5ce69f1947a949""><code>09372ec</code></a> tests: set minimum numpy installation to earliest version with a wheel (<a href=""https://github-redirect.dependabot.com/inveniosoftware/dictdiffer/issues/158"">#158</a>)</li>; <li><a href=""https://github.com/inveniosoftware/dictdiffer/commit/e05e2665b23d413d99c96ea224d4f4475221f4a6""><code>e05e266</code></a> docs: update the ReadTheDocs link with a secure one (<a href=""https://github-redirect.dependabot.com/inveniosoftware/dictdiffer/issues/151"">#151</a>)</li>; <li><a href=""https://github.com/inveniosoftware/dictdiffer/commit/83d891e3265abf74fb1e6d13107745414963e068""><code>83d891e</code></a> global: migrate CI to gh-actions</li>; <li><a href=""https://github.com/inveniosoftware/dictdiff",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11485:6912,test,testing,6912,https://hail.is,https://github.com/hail-is/hail/pull/11485,1,['test'],['testing']
Testability,07-13 | test | test | 6 | 5 | 35648 |; | 2023-07-13 | test | test | 6 | 7 | 578240 |; | 2023-07-13 | test | test | 6 | 9 | 33024 |; | 2023-07-13 | test | test | 6 | 10 | 33472 |; | 2023-07-13 | test | test | 6 | 11 | 110464 |; | 2023-07-13 | test | test | 6 | 14 | 47744 |; | 2023-07-13 | test | test | 6 | 15 | 45440 |; | 2023-07-13 | test | test | 6 | 16 | 79616 |; | 2023-07-13 | test | test | 6 | 17 | 604928 |; | 2023-07-13 | test | test | 6 | 18 | 78016 |; | 2023-07-13 | test | test | 6 | 19 | 87040 |; | 2023-07-13 | test | test | 6 | 20 | 89792 |; | 2023-07-13 | test | test | 6 | 21 | 188736 |; | 2023-07-13 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | t,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:8986,test,test,8986,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,"07> in init(sc, app_name, master, local, log, quiet, append, min_block_size, branching_factor, tmp_dir, default_reference, idempotent, global_seed, spark_conf, skip_logging_configuration, local_tmpdir, _optimizer_iterations, backend, driver_cores, driver_memory, worker_cores, worker_memory, gcs_requester_pays_configuration, regions). <decorator-gen-1909> in init_spark(sc, app_name, master, local, log, quiet, append, min_block_size, branching_factor, tmp_dir, default_reference, idempotent, global_seed, spark_conf, skip_logging_configuration, local_tmpdir, _optimizer_iterations, gcs_requester_pays_configuration). [/usr/local/lib/python3.9/dist-packages/hail/context.py](https://localhost:8080/#) in init_spark(sc, app_name, master, local, log, quiet, append, min_block_size, branching_factor, tmp_dir, default_reference, idempotent, global_seed, spark_conf, skip_logging_configuration, local_tmpdir, _optimizer_iterations, gcs_requester_pays_configuration); 425 app_name = app_name or 'Hail'; 426 gcs_requester_pays_project, gcs_requester_pays_buckets = convert_gcs_requester_pays_configuration_to_hadoop_conf_style(gcs_requester_pays_configuration); --> 427 backend = SparkBackend(; 428 idempotent, sc, spark_conf, app_name, master, local, log,; 429 quiet, append, min_block_size, branching_factor, tmpdir, local_tmpdir,. TypeError: SparkBackend__init__() got an unexpected keyword argument 'gcs_requester_pays_project'`. - Hail was able to initialize by itself; `import hail as hl; print(hl.version()); hl.init()`; `0.2.112-31ceff2fb5fd; Running on Apache Spark version 3.3.2; SparkUI available at http://57ba6dc5f4a9:4040/; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.112-31ceff2fb5fd; LOGGING: writing to /content/hail-20230410-0617-0.2.112-31ceff2fb5fd.log`. ### Version. 0.2.112. ### Relevant log output. ```shell; using variant-spark jar at '/usr/local/lib/python3.9/dist-packages/varspark/jars/variant-spark_2.12-0.5.2-all.jar'; --------------",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12859:1471,log,log,1471,https://hail.is,https://github.com/hail-is/hail/issues/12859,2,['log'],['log']
Testability,"088108948b2b76bb607f61d7b3f] submitted.; Waiting for job output...; Initializing Spark and Hail with default parameters...; using hail jar at /opt/conda/default/lib/python3.6/site-packages/hail/hail-all-spark.jar; Running on Apache Spark version 2.4.3; SparkUI available at http://dk-m.c.broad-ctsa.internal:4041; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.16-277ccc7aec45; LOGGING: writing to /tmp/66c1d088108948b2b76bb607f61d7b3f/hail-20190703-2330-0.2.16-277ccc7aec45.log; yo dawg. [Stage 0:> (0 + 1) / 1]OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00007f2e73b00000, 1035468800, 0) failed; error='Cannot allocate memory' (errno=12); #; # There is insufficient memory for the Java Runtime Environment to continue.; # Native memory allocation (mmap) failed to map 1035468800 bytes for committing reserved memory.; # An error report file with more information is saved as:; # /tmp/66c1d088108948b2b76bb607f61d7b3f/hs_err_pid10896.log; ERROR: (gcloud.dataproc.jobs.submit.pyspark) Job [66c1d088108948b2b76bb607f61d7b3f] failed with error:; Google Cloud Dataproc Agent reports job failure. If logs are available, they can be found in 'gs://dataproc-7f9e9d5e-03bd-4e95-bea1-fe0321239b35-us/google-cloud-dataproc-metainfo/f03fbc39-c07f-4e3e-8f21-47ffa986058e/jobs/66c1d088108948b2b76bb607f61d7b3f/driveroutput'.; Traceback (most recent call last):; File ""/usr/local/bin/hailctl"", line 10, in <module>; sys.exit(main()); File ""/usr/local/lib/python3.7/site-packages/hailtop/hailctl/__main__.py"", line 91, in main; cli.main(args); File ""/usr/local/lib/python3.7/site-packages/hailtop/hailctl/dataproc/cli.py"", line 99, in main; jmp[args.module].main(args, pass_through_args); File ""/usr/local/lib/python3.7/site-packages/hailtop/hailctl/dataproc/submit.py"", line 72, in main; check_call(cmd); File ""/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py"", line 347, in check_call; raise CalledProcessE",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6565#issuecomment-508289815:1305,log,log,1305,https://hail.is,https://github.com/hail-is/hail/issues/6565#issuecomment-508289815,1,['log'],['log']
Testability,09be)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[1]([Ljava.lang.String;@326709be) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[2]([Ljava.lang.String;@7c5e570e)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[2]([Ljava.lang.String;@7c5e570e) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[3]([Ljava.lang.String;@3c90c5dc)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[3]([Ljava.lang.String;@3c90c5dc) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[4]([Ljava.lang.String;@165d0f2d)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[4]([Ljava.lang.String;@165d0f2d) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[5]([Ljava.lang.String;@2cb6cb35)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[5]([Ljava.lang.String;@2cb6cb35) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[6]([Ljava.lang.String;@4c09f4c5)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[6]([Ljava.lang.String;@4c09f4c5) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[7]([Ljava.lang.String;@67a910a4)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[7]([Ljava.lang.String;@67a910a4) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[8]([Ljava.lang.String;@3c215dd4)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4718:3746,Assert,AssertionError,3746,https://hail.is,https://github.com/hail-is/hail/issues/4718,1,['Assert'],['AssertionError']
Testability,09f4c5)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[6]([Ljava.lang.String;@4c09f4c5) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[7]([Ljava.lang.String;@67a910a4)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[7]([Ljava.lang.String;@67a910a4) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[8]([Ljava.lang.String;@3c215dd4)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[8]([Ljava.lang.String;@3c215dd4) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[9]([Ljava.lang.String;@5a40cc5)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[9]([Ljava.lang.String;@5a40cc5) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[10]([Ljava.lang.String;@69594c0e)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[10]([Ljava.lang.String;@69594c0e) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[11]([Ljava.lang.String;@5ea39a14)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[11]([Ljava.lang.String;@5ea39a14) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[12]([Ljava.lang.String;@21ebf782)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[12]([Ljava.lang.String;@21ebf782) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[13]([Ljava.lang.String;@3bda762a)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4718:5124,Assert,AssertionError,5124,https://hail.is,https://github.com/hail-is/hail/issues/4718,1,['Assert'],['AssertionError']
Testability,"0:40:36 WARN Utils:66 - Your hostname, wm06b-953 resolves to a loopback address: 127.0.0.1; using 192.168.0.54 instead (on interface en0); 2020-07-28 10:40:36 WARN Utils:66 - Set SPARK_LOCAL_IP if you need to bind to another address; 2020-07-28 10:40:37 WARN NativeCodeLoader:62 - Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).; 2020-07-28 10:40:37 WARN Hail:37 - This Hail JAR was compiled for Spark 2.4.5, running with Spark 2.4.1.; Compatibility is not guaranteed.; Running on Apache Spark version 2.4.1; SparkUI available at http://192.168.0.54:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.49-c6975678edc4; LOGGING: writing to /Users/dking/projects/hail/hail/hail-20200728-1040-0.2.49-c6975678edc4.log; 2020-07-28 10:40:39 Hail: INFO: balding_nichols_model: generating genotypes for 2 populations, 5 samples, and 5 variants...; 2020-07-28 10:40:39 Hail: INFO: balding_nichols_model: generating genotypes for 2 populations, 5 samples, and 5 variants...; Traceback (most recent call last):; File ""<ipython-input-13-f638f6c0399a>"", line 4, in <module>; mt = mt.annotate_entries(x = mt.GT.n_alt_alleles() * mt2.af); File ""/Users/dking/projects/hail/hail/python/hail/expr/expressions/typed_expressions.py"", line 1988, in __mul__; return self._bin_op_numeric(""*"", other); File ""/Users/dking/projects/hail/hail/python/hail/expr/expressions/base_expression.py"", line 567, in _bin_op_numeric; return me._bin_op(name, other, ret_type); File ""/Users/dking/projects/hail/hail/python/hail/expr/expressions/base_expression.py"", line 577, in _bin_op; indices, aggregations = unify_all(self, other); File ""/Users/dking/projects/hail/hail/python/hail/expr/expressions/base_expression.py"", line 353, in unify_all; )) from None; ExpressionException: Cannot combine expressions fro",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9163:1393,log,log,1393,https://hail.is,https://github.com/hail-is/hail/issues/9163,1,['log'],['log']
Testability,"0ca1d7e248""><code>d86be6c</code></a> chore(deps): update dependency google-cloud-storage to v2.1.0 (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/469"">#469</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/8a67b73cdfcb9da545671be6cf59c724360b1544""><code>8a67b73</code></a> docs: update usage guide for v3.0.0 (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/456"">#456</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/e0c5fc02160ae87faf4ba5c2b62be86de6b02cf3""><code>e0c5fc0</code></a> feat: trace improvements (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/450"">#450</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/97e32b67603553fe350b6327455fc9f80b8aa6ce""><code>97e32b6</code></a> fix: allow reading logs from non-project paths (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/444"">#444</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/a760e02371a55d6262e42de9e0222fffa2c7192b""><code>a760e02</code></a> feat: add json_fields extras argument for adding to jsonPayload (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/447"">#447</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/83d9ca8521fe7c470bb6755a48a97496515d7abc""><code>83d9ca8</code></a> feat!: make logging API more friendly to use (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/422"">#422</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/818213e143d6a1941211a48e0b23069a426ac300""><code>818213e</code></a> feat: avoid importing grpc when explicitly disabled (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/416"">#416</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/e1506fa9030776353878048ce562c53bf6ccf7bf""><code>e1506f",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11574:12450,log,logging,12450,https://hail.is,https://github.com/hail-is/hail/pull/11574,1,['log'],['logging']
Testability,0f2d)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[4]([Ljava.lang.String;@165d0f2d) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[5]([Ljava.lang.String;@2cb6cb35)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[5]([Ljava.lang.String;@2cb6cb35) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[6]([Ljava.lang.String;@4c09f4c5)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[6]([Ljava.lang.String;@4c09f4c5) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[7]([Ljava.lang.String;@67a910a4)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[7]([Ljava.lang.String;@67a910a4) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[8]([Ljava.lang.String;@3c215dd4)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[8]([Ljava.lang.String;@3c215dd4) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[9]([Ljava.lang.String;@5a40cc5)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[9]([Ljava.lang.String;@5a40cc5) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[10]([Ljava.lang.String;@69594c0e)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[10]([Ljava.lang.String;@69594c0e) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[11]([Ljava.lang.String;@5ea39a14)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.i,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4718:4574,Assert,AssertionError,4574,https://hail.is,https://github.com/hail-is/hail/issues/4718,1,['Assert'],['AssertionError']
Testability,"1 is main, 2 is this branch; ```; $ python -m benchmark_hail compare 2023-05-16-0.2.116-a2b070f715d8-zstd-main-cmp.json 2023-05-16-0.2.116-78a43d968e7b-zstd.json; Failed benchmarks in run 1:; pc_relate; king; Failed benchmarks in run 2:; king; Benchmark Name Ratio Time 1 Time 2 Mem Ratio Mem 1 (MB) Mem 2 (MB); -------------- ----- ------ ------ --------- ---------- ----------; table_foreign_key_join_same_cardinality 302.7% 13.710 41.502 100.0% 3 3; table_foreign_key_join_left_higher_cardinality 280.9% 13.990 39.294 100.0% 3 3; table_key_by_shuffle 250.0% 5.910 14.778 100.0% 2 2; shuffle_order_by_10m_int 235.5% 61.407 144.602 100.0% 2 2; shuffle_key_by_aggregate_bad_locality 195.9% 67.872 132.991 100.0% 2 2; table_take 155.3% 1.018 1.581 100.0% 1 1; shuffle_key_rows_by_4096_byte_rows 151.9% 10.150 15.412 100.0% 2 2; read_force_count_p1000 142.0% 3.998 5.678 100.0% 1 1; read_force_count_p10 140.8% 1.803 2.539 100.0% 1 1; join_p100_p100 138.4% 3.702 5.123 100.0% 1 1; join_p100_p10 134.2% 13.166 17.671 100.0% 1 1; test_inner_join_region_memory 129.9% 2.362 3.069 100.0% 382 382; large_range_matrix_table_sum 129.1% 206.853 266.961 100.0% 17 17; table_annotate_many_flat 125.9% 1.134 1.428 100.0% 1 1; test_map_filter_region_memory 121.7% 2.176 2.647 100.0% 382 382; import_vcf_count_rows 121.5% 7.532 9.150 100.0% 1 1; join_p10_p100 121.1% 14.040 17.000 100.0% 1 1; shuffle_key_rows_by_mt 119.1% 33.339 39.722 100.0% 3 3; table_aggregate_downsample_worst_case 118.3% 21.323 25.229 100.0% 1 1; variant_and_sample_qc_nested_with_filters_2 118.2% 25.267 29.873 100.0% 1 1; union_p1000_p1000 118.0% 8.160 9.625 100.0% 1 1; read_force_count_p100 117.9% 2.336 2.754 100.0% 1 1; mt_group_by_memory_usage 117.5% 25.597 30.069 100.0% 136 136; matrix_table_filter_entries_unfilter 116.9% 10.308 12.052 100.0% 1 1; table_group_by_aggregate_sorted 116.2% 3.138 3.645 100.0% 2 2; matrix_table_aggregate_entries 114.8% 8.030 9.218 100.0% 1 1; union_p100_p100 114.5% 5.197 5.950 100.0% 1 1; split_multi 1",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12981#issuecomment-1550388849:170,benchmark,benchmarks,170,https://hail.is,https://github.com/hail-is/hail/pull/12981#issuecomment-1550388849,3,"['Benchmark', 'benchmark']","['Benchmark', 'benchmarks']"
Testability,"1"">#1561</a>); fbd9e96d5 Deprecate OTHER as a PL value (<a href=""https://github-redirect.dependabot.com/samtools/htsjdk/issues/1552"">#1552</a>); d5f7e106b Adding PL Tag 'DNBSEQ' as the Platform/Technology for BGI/MGI (<a href=""https://github-redirect.dependabot.com/samtools/htsjdk/issues/1547"">#1547</a>)</p>; <p>Misc Improvements; f461401e3 Silence AsciiLineReader warning when creating a FASTA sequence index (<a href=""https://github-redirect.dependabot.com/samtools/htsjdk/issues/1559"">#1559</a>); 8f82871c1 Update explain samflags script to python3 (<a href=""https://github-redirect.dependabot.com/samtools/htsjdk/issues/1585"">#1585</a>); 4ba4c0678 Update to new version of the snappy library which will work with M1 macs (<a href=""https://github-redirect.dependabot.com/samtools/htsjdk/issues/1580"">#1580</a>); e92706452 add predicate to GFF3Codec to give a chance to filter out some unused attributes (<a href=""https://github-redirect.dependabot.com/samtools/htsjdk/issues/1575"">#1575</a>); c647764b0 Some long reads tests using PacBio data. (<a href=""https://github-redirect.dependabot.com/samtools/htsjdk/issues/1564"">#1564</a>); 57c3f03eb remove hardcoded .idx (<a href=""https://github-redirect.dependabot.com/samtools/htsjdk/issues/1568"">#1568</a>); a94a32512 Add file extension to missing index error message <a href=""https://github-redirect.dependabot.com/samtools/htsjdk/issues/1512"">#1512</a> (<a href=""https://github-redirect.dependabot.com/samtools/htsjdk/issues/1567"">#1567</a>); 74b827b67 Improve error message in IntervalTree (<a href=""https://github-redirect.dependabot.com/samtools/htsjdk/issues/1545"">#1545</a>); 7719274fe Htsget POST request support (<a href=""https://github-redirect.dependabot.com/samtools/htsjdk/issues/1529"">#1529</a>)</p>; <p>VCF:; aac46ee6d Added GVCF mode for VariantContext type determination (<a href=""https://github-redirect.dependabot.com/samtools/htsjdk/issues/1544"">#1544</a>); d72d73b01 Add context to exception when the vcf file is invalid <a hre",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12229:4492,test,tests,4492,https://hail.is,https://github.com/hail-is/hail/pull/12229,1,['test'],['tests']
Testability,"1"">#1561</a>); fbd9e96d5 Deprecate OTHER as a PL value (<a href=""https://github-redirect.dependabot.com/samtools/htsjdk/issues/1552"">#1552</a>); d5f7e106b Adding PL Tag 'DNBSEQ' as the Platform/Technology for BGI/MGI (<a href=""https://github-redirect.dependabot.com/samtools/htsjdk/issues/1547"">#1547</a>)</p>; <p>Misc Improvements; f461401e3 Silence AsciiLineReader warning when creating a FASTA sequence index (<a href=""https://github-redirect.dependabot.com/samtools/htsjdk/issues/1559"">#1559</a>); 8f82871c1 Update explain samflags script to python3 (<a href=""https://github-redirect.dependabot.com/samtools/htsjdk/issues/1585"">#1585</a>); 4ba4c0678 Update to new version of the snappy library which will work with M1 macs (<a href=""https://github-redirect.dependabot.com/samtools/htsjdk/issues/1580"">#1580</a>); e92706452 add predicate to GFF3Codec to give a chance to filter out some unused attributes (<a href=""https://github-redirect.dependabot.com/samtools/htsjdk/issues/1575"">#1575</a>); c647764b0 Some long reads tests using PacBio data. (<a href=""https://github-redirect.dependabot.com/samtools/htsjdk/issues/1564"">#1564</a>)</p>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/samtools/htsjdk/commit/02942a97ef6e7e14019efa502b0b03fea3c68c1f""><code>02942a9</code></a> Remove deprecation from Allele.acceptableAlleleBases <a href=""https://github-redirect.dependabot.com/samtools/htsjdk/issues/1623"">#1623</a> (<a href=""https://github-redirect.dependabot.com/samtools/htsjdk/issues/1625"">#1625</a>)</li>; <li><a href=""https://github.com/samtools/htsjdk/commit/e490a97ae465abe3ccaf24bc116cd9e80909764e""><code>e490a97</code></a> Minor improvements to AbstractLocusIterator (<a href=""https://github-redirect.dependabot.com/samtools/htsjdk/issues/1624"">#1624</a>)</li>; <li><a href=""https://github.com/samtools/htsjdk/commit/4a4024a97ee3e87096df6ad9b22c8260bd527772""><code>4a4024a</code>",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12310:5578,test,tests,5578,https://hail.is,https://github.com/hail-is/hail/pull/12310,1,['test'],['tests']
Testability,1-py2.py3-none-any.whl (15.6 MB); Collecting portalocker==2.7.0; Using cached portalocker-2.7.0-py2.py3-none-any.whl (15 kB); Collecting protobuf==3.20.2; Using cached protobuf-3.20.2-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.whl (1.0 MB); Collecting py4j==0.10.9.5; Using cached py4j-0.10.9.5-py2.py3-none-any.whl (199 kB); Collecting pyasn1==0.5.0; Using cached pyasn1-0.5.0-py2.py3-none-any.whl (83 kB); Collecting pyasn1-modules==0.3.0; Using cached pyasn1_modules-0.3.0-py2.py3-none-any.whl (181 kB); Collecting pycares==4.3.0; Using cached pycares-4.3.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (288 kB); Collecting pycparser==2.21; Using cached pycparser-2.21-py2.py3-none-any.whl (118 kB); Collecting pygments==2.16.1; Using cached Pygments-2.16.1-py3-none-any.whl (1.2 MB); Collecting pyjwt[crypto]==2.8.0; Using cached PyJWT-2.8.0-py3-none-any.whl (22 kB); Collecting python-dateutil==2.8.2; Using cached python_dateutil-2.8.2-py2.py3-none-any.whl (247 kB); Collecting python-json-logger==2.0.7; Using cached python_json_logger-2.0.7-py3-none-any.whl (8.1 kB); Collecting pytz==2023.3.post1; Using cached pytz-2023.3.post1-py2.py3-none-any.whl (502 kB); Collecting pyyaml==6.0.1; Using cached PyYAML-6.0.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (738 kB); Collecting regex==2023.8.8; Using cached regex-2023.8.8-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (771 kB); Collecting requests==2.31.0; Using cached requests-2.31.0-py3-none-any.whl (62 kB); Collecting requests-oauthlib==1.3.1; Using cached requests_oauthlib-1.3.1-py2.py3-none-any.whl (23 kB); Collecting rich==12.6.0; Using cached rich-12.6.0-py3-none-any.whl (237 kB); Collecting rsa==4.9; Using cached rsa-4.9-py3-none-any.whl (34 kB); Collecting s3transfer==0.6.2; Using cached s3transfer-0.6.2-py3-none-any.whl (79 kB); Collecting scipy==1.11.2; Using cached scipy-1.11.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (36.5 MB); Collecting six==1.16.0; Using cac,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221:38901,log,logger,38901,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221,1,['log'],['logger']
Testability,"1. Allow floating-point literals to take the form "".99"" instead of ""0.99"".; 2. Fix typing of ""if"" expressions to assert that both the then and else ASTs have the same type, then return that type (was TBoolean); 3. Wrote a test for both these cases",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/227:113,assert,assert,113,https://hail.is,https://github.com/hail-is/hail/pull/227,2,"['assert', 'test']","['assert', 'test']"
Testability,1. Check all indices in.; 2. Copy bgen to new places for index-specific tests.; 3. Add more detail to our docs.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12824:72,test,tests,72,https://hail.is,https://github.com/hail-is/hail/pull/12824,1,['test'],['tests']
Testability,1. Correctly serialize Exceptions.; 2. Include a dictionary diff in the assertion message.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9497:72,assert,assertion,72,https://hail.is,https://github.com/hail-is/hail/pull/9497,1,['assert'],['assertion']
Testability,"1. Do not leak the private key for lets encrypt into the renewal container's stdout and consequently into the logs.; 2. Do not revert the secret to an empty state before renewing the certificate. Doing so causes a failed renewal (e.g. 500s from lets encrypt) to destroy the extant keys. ---. Anyone using the Hail infrastructure should both regenerate their lets encrypt certificates with the changes in that PR. To do so they can execute the following from the root of the Hail repository:. make -C letsencrypt run. To take advantage of this vulnerability, someone would need access to the k8s container logs and the ability to redirect the relevant domain name to an IP they control. We have no evidence anyone has done this with Hail’s certs.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11743:110,log,logs,110,https://hail.is,https://github.com/hail-is/hail/pull/11743,2,['log'],['logs']
Testability,"1. For runImage steps, you can only copy out-of or copy into `/io` (the reasoning is a bit complicated and somewhat historical).; 2. For buildImage steps, you can copy out-of or copy into `/`; 3. the `to` of an `output` specifies a file path in a ""filesystem"" that another step can access if it `dependsOn` the outputting step; 4. the `from` of an `input` specifies a file path in the aforementioned ""filesystem""; the filesystem contains all `outputs` from steps in the inputting step's `dependsOn` clause. We also have a `docker/Makefile` which is an emergency manual build system. I update that so that `hail_version` appears in the root of the docker context. The `service-base` uses the entire repository as its docker context, so I place hail_version at the root of the repository. I moved the `version` function from `hailtop.hailctl` into `hailtop`. It seems broadly useful and isn't specific to hailctl in anyway. Your concern about loading from pkg_resources repeated seems well-founded, so I went ahead and loaded the hail_version at package import time. This seems likely to ensure we learn about a missing hail_version file as early as possible (presumably at service start-time). This also means all hailtop installs need a hail_version file. I only found two other places that use hailtop. One of them was a completely unused Dockerfile. I deleted that (`Dockerfile.hailtop`). The other was Dockerfile.ci-test, which I updated to copy the hail_version file just like service-base. https://github.com/hail-is/hail/compare/main...danking:add-version-endpoint. Do you want to cherry-pick that change onto your add-version-endpoint branch?. One more change request: can we remove the try-catch? I don't expect any errors in that call and I tend to avoid revealing anything about errors to our users. Aiohttp will log the error and the stack trace if you let it rise all the way. Sorry for all the complication! Our build system is the second service we built and is clearly showing its age.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10085#issuecomment-789279401:2223,test,test,2223,https://hail.is,https://github.com/hail-is/hail/pull/10085#issuecomment-789279401,2,"['log', 'test']","['log', 'test']"
Testability,"1. I ended up removing the test with the VCF from 1000 genomes; 2. I couldn't figure out a good way to get the number of variants used in the computation. It's either in the annotations as ""sa.imputegender.T"" or we'd have to do RDD.count() ; 3. I'm open to naming suggestions if you think something else is better. I didn't want to use ""sex check"" because that implies comparing to the reported gender and reporting errors -- not what I have implemented here.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/386:27,test,test,27,https://hail.is,https://github.com/hail-is/hail/pull/386,1,['test'],['test']
Testability,"1. I need to add some tests.; 2. I flipped a coin and you came up @daniel-goldstein (as opposed to Ed), feel free to reassign if you feel uncomfortable.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14560#issuecomment-2125707106:22,test,tests,22,https://hail.is,https://github.com/hail-is/hail/pull/14560#issuecomment-2125707106,1,['test'],['tests']
Testability,"1. If a job errors rather than fails, we still want to see its logs in the debug info. 2. The backend from before `hl_stop_for_test` is broken. In particular, it does not have an open ClientSession, so it cannot make HTTP requests.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13872:63,log,logs,63,https://hail.is,https://github.com/hail-is/hail/pull/13872,1,['log'],['logs']
Testability,"1. If the user has not specified a configuration for disable_progress_bar, then only disable it if we are noninteractive. 2. Change @fails_service_backend to @skip... for a `to_spark` test. 3. Pass the path collision test by using `Validate`.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12535:184,test,test,184,https://hail.is,https://github.com/hail-is/hail/pull/12535,2,['test'],['test']
Testability,"1. Implement hailtop.aiotools.delete.; 2. Unify most definitions of rmtree and actually use parallelism.; 3. Remove unnecesary and confusing async annotation on OnlineBoundedGather2.call.; 4. Substantially increase the complexity of the rmtree test. I had to fix a circularity caused by RouterAsyncFS referencing the other clouds. The fix was easy, I don't re-expose it in hailtop.aiotools.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11072:244,test,test,244,https://hail.is,https://github.com/hail-is/hail/pull/11072,1,['test'],['test']
Testability,1. Include the Azure code in a comment for the sake of other devs.; 2. Fix the envvar checks.; 3. Depend only on the uploaded files in upload-qob-test-resources.; 4. fs-jvm-test needs upload-qob-test-resources.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13593:146,test,test-resources,146,https://hail.is,https://github.com/hail-is/hail/pull/13593,3,['test'],"['test', 'test-resources']"
Testability,"1. Lazily load the tokens on the end user machine because the first time someone logs in to the default namespace, they will have no tokens. 2. Teach `get_tokens_file` to default to the default end-user location. 3. Add a bunch of types which would have caught this error.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11054:81,log,logs,81,https://hail.is,https://github.com/hail-is/hail/pull/11054,1,['log'],['logs']
Testability,"1. Makefile is a bit more resilient to changes in the `dk-test` instance that is used to route traffic from GitHub to a local laptop test. It now looks up the ip. The zone is still hardcoded and it's moved to zone `us-central1-a`. The name is also hardcoded to `dk-test`.; 2. I renamed `is_running` to `is_building`; 3. When a job refresh happens, it is now `PRS` responsibility to determine what to do. It starts the same as it always does, updating existing PRs with new job information. The difference is that it tracks which (believed to be) currently building jobs are not seen in the job list. All such jobs are re-built, under the assumption that the job must have failed. cc: @cseed . This should allow CI to recover from the loss of batch. Fixes #4654.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4659:58,test,test,58,https://hail.is,https://github.com/hail-is/hail/pull/4659,3,['test'],['test']
Testability,"1. Move `hail/www` to `site/www` and associated build commands into `site/Makefile` and a new `build.yaml` step.; 2. Prepare for a simpler docs deployment by supporting both the current 0.2 structure (top-level `www` containing `docs/0.2` and `docs/0.1`) and a future, simpler structure (top-level `docs` containing `0.2` and `0.1`).; 3. Fix `site/Makefile` which had bit-rotted. `test` doesn't really work anymore so I removed it. We could restore `make test` by figuring out a local SSL story. I went down this route but couldn't get NGINX to respond to my HTTPS requests. `make deploy` is rather fast now anyway. Currently deployed at https://internal.hail.is/dking/site/index.html. There are two known issues with dev deploy, those are resolved at https://github.com/hail-is/hail/pull/8922.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8923:381,test,test,381,https://hail.is,https://github.com/hail-is/hail/pull/8923,2,['test'],['test']
Testability,"1. The default log path includes the version and a; timestamp. This will help people avoid overwriting; log files, which will help us.; 2. Echo the full path to the log after the hail logo; 3. Add a function `hl.copy_log` which can be used to; copy the session log to a hadoop-api-compliant; location.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4421:15,log,log,15,https://hail.is,https://github.com/hail-is/hail/pull/4421,5,['log'],"['log', 'logo']"
Testability,1. Won't we have conflicts with the test databases all starting their job ids from `1...`?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5866#issuecomment-485464925:36,test,test,36,https://hail.is,https://github.com/hail-is/hail/pull/5866#issuecomment-485464925,1,['test'],['test']
Testability,"1. `test_from_entry_expr_simple` does too much in one test. I split into multiple.; 2. `get_dataset` was fine when we had single-threaded tests, but now we are probably executing that, like, 40 times. I just ran the code and saved it as an MT. We have separate tests for split-multi and vcf import.; 3. `test_big_driver_has_big_memory` might have to spin up a machine to service this request.; 4. `test_billing_project_accrued_costs` can take a long time because its adding up billing info.; 5. split some more randomness tests (should be no mega tests left now); 6. relax pc relate timeouts even further (14 minutes!!)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13147:54,test,test,54,https://hail.is,https://github.com/hail-is/hail/pull/13147,5,['test'],"['test', 'tests']"
Testability,"1. instance_id should go away once persistence goes in. Then it should be just be job_id/task_name/job.log. 2. Deleting a job should delete the log, otherwise it is should stay. I think it's fine for now. We're going to want to do some serious cleanup once everything is in a manageable state.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5866#issuecomment-485461284:103,log,log,103,https://hail.is,https://github.com/hail-is/hail/pull/5866#issuecomment-485461284,2,['log'],['log']
Testability,"1. log should include job id not job; 2. `client_session` is only used for k8s-internal requests to worker pods, so; use a very aggressive timeout of 10s; 3. reduce refresh delay to two minutes",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7026:3,log,log,3,https://hail.is,https://github.com/hail-is/hail/pull/7026,1,['log'],['log']
Testability,"1.0.4` <br> | No | No Known Exploit ; ![low severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/l.png ""low severity"") | Denial of Service (DoS) <br/>[SNYK-PYTHON-CRYPTOGRAPHY-5813750](https://snyk.io/vuln/SNYK-PYTHON-CRYPTOGRAPHY-5813750) | `cryptography:` <br> `3.3.2 -> 41.0.4` <br> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | Denial of Service (DoS) <br/>[SNYK-PYTHON-CRYPTOGRAPHY-5914629](https://snyk.io/vuln/SNYK-PYTHON-CRYPTOGRAPHY-5914629) | `cryptography:` <br> `3.3.2 -> 41.0.4` <br> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | Information Exposure <br/>[SNYK-PYTHON-REQUESTS-5595532](https://snyk.io/vuln/SNYK-PYTHON-REQUESTS-5595532) | `requests:` <br> `2.27.1 -> 2.31.0` <br> | No | No Known Exploit . Some vulnerabilities couldn't be fully fixed and so Snyk will still find them when the project is tested again. This may be because the vulnerability existed within more than one direct dependency, but not all of the affected dependencies could be upgraded. Check the changes in this PR to ensure they won't cause issues with your project. ------------. **Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open fix PRs.*. For more information: <img src=""https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiI1MGUxY2NlOC1kNjhlLTQxMzMtYTU5MS1lMmQxYTYyNTczMzciLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjUwZTFjY2U4LWQ2OGUtNDEzMy1hNTkxLWUyZDFhNjI1NzMzNyJ9fQ=="" width=""0"" height=""0""/>; 🧐 [View latest project report](https://app.snyk.io/org/danking/project/c1c98f6a-57c6-4ecc-a329-3b744cab74bd?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr). 🛠 [Adjust project settings](https://app.snyk",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13887:6946,test,tested,6946,https://hail.is,https://github.com/hail-is/hail/pull/13887,1,['test'],['tested']
Testability,"1.0.4` <br> | No | No Known Exploit ; ![low severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/l.png ""low severity"") | Denial of Service (DoS) <br/>[SNYK-PYTHON-CRYPTOGRAPHY-5813750](https://snyk.io/vuln/SNYK-PYTHON-CRYPTOGRAPHY-5813750) | `cryptography:` <br> `3.3.2 -> 41.0.4` <br> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | Denial of Service (DoS) <br/>[SNYK-PYTHON-CRYPTOGRAPHY-5914629](https://snyk.io/vuln/SNYK-PYTHON-CRYPTOGRAPHY-5914629) | `cryptography:` <br> `3.3.2 -> 41.0.4` <br> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | Information Exposure <br/>[SNYK-PYTHON-REQUESTS-5595532](https://snyk.io/vuln/SNYK-PYTHON-REQUESTS-5595532) | `requests:` <br> `2.27.1 -> 2.31.0` <br> | No | No Known Exploit . Some vulnerabilities couldn't be fully fixed and so Snyk will still find them when the project is tested again. This may be because the vulnerability existed within more than one direct dependency, but not all of the affected dependencies could be upgraded. Check the changes in this PR to ensure they won't cause issues with your project. ------------. **Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open fix PRs.*. For more information: <img src=""https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiJkOTAwZjdjYS1mY2U3LTQxZDQtYTE2ZC1iYWQxMDkzMzhiZWIiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6ImQ5MDBmN2NhLWZjZTctNDFkNC1hMTZkLWJhZDEwOTMzOGJlYiJ9fQ=="" width=""0"" height=""0""/>; 🧐 [View latest project report](https://app.snyk.io/org/danking/project/c1c98f6a-57c6-4ecc-a329-3b744cab74bd?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr). 🛠 [Adjust project settings](https://app.snyk",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13736:6946,test,tested,6946,https://hail.is,https://github.com/hail-is/hail/pull/13736,1,['test'],['tested']
Testability,"1.00m, 42.46MB read; Socket errors: connect 0, read 2079, write 0, timeout 12; Requests/sec: 4642.59; Transfer/sec: 723.58KB. Sanic Run 3 (very large background task spike in last 1-2s of run):; alexkotlar:~/projects/aiohttp-vs-sanic-vs-japronto:$ wrk -d 60 -c 2000 -t 12 --timeout 8 http://localhost:8000/db; Running 1m test @ http://localhost:8000/db; 12 threads and 2000 connections; Thread Stats Avg Stdev Max +/- Stdev; Latency 543.65ms 839.00ms 7.93s 87.81%; Req/Sec 392.47 118.69 1.42k 73.81%; 279206 requests in 1.00m, 42.54MB read; Socket errors: connect 0, read 2101, write 0, timeout 35; Requests/sec: 4646.20; Transfer/sec: 724.97KB. Aiohttp Run 1:; alexkotlar:~/projects/aiohttp-vs-sanic-vs-japronto:$ wrk -d 60 -c 2000 -t 12 --timeout 8 http://localhost:8000/db; Running 1m test @ http://localhost:8000/db; 12 threads and 2000 connections; Thread Stats Avg Stdev Max +/- Stdev; Latency 747.49ms 1.00s 7.88s 86.77%; Req/Sec 280.95 103.65 1.60k 79.52%; 199147 requests in 1.00m, 36.47MB read; Socket errors: connect 0, read 2058, write 1, timeout 45; Requests/sec: 3313.70; Transfer/sec: 621.36KB. Aiohttp Run 2:; Running 1m test @ http://localhost:8000/db; 12 threads and 2000 connections; Thread Stats Avg Stdev Max +/- Stdev; Latency 696.00ms 967.04ms 7.93s 86.48%; Req/Sec 289.87 115.90 1.90k 83.92%; 205188 requests in 1.00m, 37.54MB read; Socket errors: connect 0, read 2041, write 0, timeout 38; Requests/sec: 3414.95; Transfer/sec: 639.84KB. Aiohttp Run 3:; Running 1m test @ http://localhost:8000/db; 12 threads and 2000 connections; Thread Stats Avg Stdev Max +/- Stdev; Latency 670.88ms 898.81ms 7.89s 86.58%; Req/Sec 318.17 108.06 1.47k 74.96%; 226300 requests in 1.00m, 41.34MB read; Socket errors: connect 0, read 2053, write 0, timeout 19; Requests/sec: 3765.55; Transfer/sec: 704.34KB. Runs were interleaved two reduce chance that the programs would benefit from caching across runs. First run for each had somewhat more background tasks open. Starlette will be run later.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5242#issuecomment-461259030:5657,test,test,5657,https://hail.is,https://github.com/hail-is/hail/pull/5242#issuecomment-461259030,2,['test'],['test']
Testability,"1.5 KiB/ 11.5 KiB] ; Operation completed over 1 objects/11.5 KiB. ; (base) dking@wm28c-761 hail % ipython ; Python 3.10.9 (main, Jan 11 2023, 09:18:18) [Clang 14.0.6 ]; Type 'copyright', 'credits' or 'license' for more information; IPython 8.16.1 -- An enhanced Interactive Python. Type '?' for help. In [1]: import hail as hl; ...: hl.import_vcf('gs://danking/chr*.vcf').count(); Initializing Hail with default parameters...; /Users/dking/miniconda3/lib/python3.10/site-packages/hailtop/aiocloud/aiogoogle/user_config.py:29: UserWarning: You have specified the GCS requester pays configuration in both your spark-defaults.conf (/Users/dking/miniconda3/lib/python3.10/site-packages/pyspark/conf/spark-defaults.conf) and either an explicit argument or through `hailctl config`. For GCS requester pays configuration, Hail first checks explicit arguments, then `hailctl config`, then spark-defaults.conf.; warnings.warn(; SLF4J: No SLF4J providers were found.; SLF4J: Defaulting to no-operation (NOP) logger implementation; SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.; SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.; SLF4J: Ignoring binding found at [jar:file:/Users/dking/miniconda3/lib/python3.10/site-packages/pyspark/jars/log4j-slf4j-impl-2.17.2.jar!/org/slf4j/impl/StaticLoggerBinder.class]; SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).; Running on Apache Spark version 3.3.3; SparkUI available at http://192.168.1.142:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.125-c4e2880b3279; LOGGING: writing to /Users/dking/projects/hail/hail/hail-20231026-0957-0.2.125-c4e2880b3279.log; --------------------------------------------------------------------------- / 1]; FatalError Traceback (most recent call last); C",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13915:1714,log,logger,1714,https://hail.is,https://github.com/hail-is/hail/issues/13915,1,['log'],['logger']
Testability,"10 (<a href=""https://redirect.github.com/ipython/ipython/issues/13939"">#13939</a>)</li>; <li><a href=""https://github.com/ipython/ipython/commit/7557ade0ed927475d5ab5b573d0ea4febfb22683""><code>7557ade</code></a> DOC: Update what's new for 8.10</li>; <li><a href=""https://github.com/ipython/ipython/commit/385d69325319a5972ee9b5983638e3617f21cb1f""><code>385d693</code></a> Merge pull request from GHSA-29gw-9793-fvw7</li>; <li><a href=""https://github.com/ipython/ipython/commit/e548ee23ac460a99901f1cd43b94ae84a35ec393""><code>e548ee2</code></a> Swallow potential exceptions from showtraceback() (<a href=""https://redirect.github.com/ipython/ipython/issues/13934"">#13934</a>)</li>; <li><a href=""https://github.com/ipython/ipython/commit/0694b08b436203817059ec7e7136cf8561a6f013""><code>0694b08</code></a> MAINT: mock slowest test. (<a href=""https://redirect.github.com/ipython/ipython/issues/13885"">#13885</a>)</li>; <li><a href=""https://github.com/ipython/ipython/commit/865591252a67c6907fe03228b4053305715286e6""><code>8655912</code></a> MAINT: mock slowest test.</li>; <li><a href=""https://github.com/ipython/ipython/commit/a011765b44febfb11bae122d2ed7db763621ac8f""><code>a011765</code></a> Isolate the attack tests with setUp and tearDown methods</li>; <li><a href=""https://github.com/ipython/ipython/commit/c7a9470e540392c575aac46c3ee5cf4fe5123eb1""><code>c7a9470</code></a> Add some regression tests for this change</li>; <li><a href=""https://github.com/ipython/ipython/commit/fd34cf5f1f6e243243c738c6e0cf62eb682c4d68""><code>fd34cf5</code></a> Swallow potential exceptions from showtraceback()</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.34.0...8.10.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.34.0&new-version=8.10.0)](https://docs.github.com/en/github/managing-security-vuln",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12806:1457,mock,mock,1457,https://hail.is,https://github.com/hail-is/hail/pull/12806,2,"['mock', 'test']","['mock', 'test']"
Testability,1000 job test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6467:9,test,test,9,https://hail.is,https://github.com/hail-is/hail/pull/6467,1,['test'],['test']
Testability,103); 	at is.hail.relocated.com.google.cloud.RetryHelper.run(RetryHelper.java:76); 	at is.hail.relocated.com.google.cloud.RetryHelper.runWithRetries(RetryHelper.java:50); 	at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.flushBuffer(BlobWriteChannel.java:189); 	at is.hail.relocated.com.google.cloud.BaseWriteChannel.flush(BaseWriteChannel.java:112); 	at is.hail.relocated.com.google.cloud.BaseWriteChannel.write(BaseWriteChannel.java:139); 	at is.hail.io.fs.GoogleStorageFS$$anon$2.$anonfun$flush$1(GoogleStorageFS.scala:297); 	at is.hail.io.fs.GoogleStorageFS$$anon$2.doHandlingRequesterPays(GoogleStorageFS.scala:279); 	at is.hail.io.fs.GoogleStorageFS$$anon$2.flush(GoogleStorageFS.scala:297); 	at java.io.DataOutputStream.flush(DataOutputStream.java:123); 	at java.io.FilterOutputStream.close(FilterOutputStream.java:158); 	at is.hail.utils.package$.using(package.scala:640); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt(FSSuite.scala:323); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:321); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.Suit,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:3181,test,testSeekMoreThanMaxInt,3181,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['test'],['testSeekMoreThanMaxInt']
Testability,103); 	at is.hail.relocated.com.google.cloud.RetryHelper.run(RetryHelper.java:76); 	at is.hail.relocated.com.google.cloud.RetryHelper.runWithRetries(RetryHelper.java:50); 	at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.flushBuffer(BlobWriteChannel.java:189); 	at is.hail.relocated.com.google.cloud.BaseWriteChannel.flush(BaseWriteChannel.java:112); 	at is.hail.relocated.com.google.cloud.BaseWriteChannel.write(BaseWriteChannel.java:139); 	at is.hail.io.fs.GoogleStorageFS$$anon$2.$anonfun$flush$1(GoogleStorageFS.scala:317); 	at is.hail.io.fs.GoogleStorageFS$$anon$2.doHandlingRequesterPays(GoogleStorageFS.scala:299); 	at is.hail.io.fs.GoogleStorageFS$$anon$2.flush(GoogleStorageFS.scala:317); 	at java.io.DataOutputStream.flush(DataOutputStream.java:123); 	at java.io.FilterOutputStream.close(FilterOutputStream.java:158); 	at is.hail.utils.package$.using(package.scala:640); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt(FSSuite.scala:341); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:339); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.Suit,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:3374,test,testSeekMoreThanMaxInt,3374,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['test'],['testSeekMoreThanMaxInt']
Testability,"109) | `sphinx:` <br> `1.8.6 -> 3.3.0` <br> | No | Proof of Concept ; ![low severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/l.png ""low severity"") | Open Redirect <br/>[SNYK-PYTHON-TORNADO-5537286](https://snyk.io/vuln/SNYK-PYTHON-TORNADO-5537286) | `tornado:` <br> `5.1.1 -> 6.3.3` <br> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | HTTP Request Smuggling <br/>[SNYK-PYTHON-TORNADO-5840803](https://snyk.io/vuln/SNYK-PYTHON-TORNADO-5840803) | `tornado:` <br> `5.1.1 -> 6.3.3` <br> | No | No Known Exploit ; ![high severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/h.png ""high severity"") | Regular Expression Denial of Service (ReDoS) <br/>[SNYK-PYTHON-WHEEL-3180413](https://snyk.io/vuln/SNYK-PYTHON-WHEEL-3180413) | `wheel:` <br> `0.30.0 -> 0.38.0` <br> | No | No Known Exploit . Some vulnerabilities couldn't be fully fixed and so Snyk will still find them when the project is tested again. This may be because the vulnerability existed within more than one direct dependency, but not all of the affected dependencies could be upgraded. Check the changes in this PR to ensure they won't cause issues with your project. ------------. **Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open fix PRs.*. For more information: <img src=""https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiJiOTY3NzQ2Ny0zYWIwLTQxZDYtYmUyMC01MmIzOTNjOTRiYWUiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6ImI5Njc3NDY3LTNhYjAtNDFkNi1iZTIwLTUyYjM5M2M5NGJhZSJ9fQ=="" width=""0"" height=""0""/>; 🧐 [View latest project report](https://app.snyk.io/org/danking/project/20159ae6-a5aa-42fa-845a-c89f5bcbf999?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr). 🛠 [Adjust project settings](https://app.snyk",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13932:7658,test,tested,7658,https://hail.is,https://github.com/hail-is/hail/pull/13932,1,['test'],['tested']
Testability,10a4)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[7]([Ljava.lang.String;@67a910a4) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[8]([Ljava.lang.String;@3c215dd4)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[8]([Ljava.lang.String;@3c215dd4) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[9]([Ljava.lang.String;@5a40cc5)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[9]([Ljava.lang.String;@5a40cc5) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[10]([Ljava.lang.String;@69594c0e)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[10]([Ljava.lang.String;@69594c0e) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[11]([Ljava.lang.String;@5ea39a14)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[11]([Ljava.lang.String;@5ea39a14) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[12]([Ljava.lang.String;@21ebf782)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[12]([Ljava.lang.String;@21ebf782) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[13]([Ljava.lang.String;@3bda762a)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[13]([Ljava.lang.String;@3bda762a) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[14]([Ljava.lang.String;@4898b38e)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4718:5402,Assert,AssertionError,5402,https://hail.is,https://github.com/hail-is/hail/issues/4718,1,['Assert'],['AssertionError']
Testability,11 new tests passing. Can briefly walk you through the change in 1:1.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9586:7,test,tests,7,https://hail.is,https://github.com/hail-is/hail/pull/9586,1,['test'],['tests']
Testability,13 | test | test | 6 | 0 | 4142226688 |; | 2023-07-13 | test | test | 6 | 1 | 108608 |; | 2023-07-13 | test | test | 6 | 2 | 80576 |; | 2023-07-13 | test | test | 6 | 5 | 35648 |; | 2023-07-13 | test | test | 6 | 7 | 578240 |; | 2023-07-13 | test | test | 6 | 9 | 33024 |; | 2023-07-13 | test | test | 6 | 10 | 33472 |; | 2023-07-13 | test | test | 6 | 11 | 110464 |; | 2023-07-13 | test | test | 6 | 14 | 47744 |; | 2023-07-13 | test | test | 6 | 15 | 45440 |; | 2023-07-13 | test | test | 6 | 16 | 79616 |; | 2023-07-13 | test | test | 6 | 17 | 604928 |; | 2023-07-13 | test | test | 6 | 18 | 78016 |; | 2023-07-13 | test | test | 6 | 19 | 87040 |; | 2023-07-13 | test | test | 6 | 20 | 89792 |; | 2023-07-13 | test | test | 6 | 21 | 188736 |; | 2023-07-13 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | tes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:8845,test,test,8845,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,13 | test | test | 6 | 11 | 110464 |; | 2023-07-13 | test | test | 6 | 14 | 47744 |; | 2023-07-13 | test | test | 6 | 15 | 45440 |; | 2023-07-13 | test | test | 6 | 16 | 79616 |; | 2023-07-13 | test | test | 6 | 17 | 604928 |; | 2023-07-13 | test | test | 6 | 18 | 78016 |; | 2023-07-13 | test | test | 6 | 19 | 87040 |; | 2023-07-13 | test | test | 6 | 20 | 89792 |; | 2023-07-13 | test | test | 6 | 21 | 188736 |; | 2023-07-13 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | te,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:9175,test,test,9175,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,13 | test | test | 6 | 14 | 47744 |; | 2023-07-13 | test | test | 6 | 15 | 45440 |; | 2023-07-13 | test | test | 6 | 16 | 79616 |; | 2023-07-13 | test | test | 6 | 17 | 604928 |; | 2023-07-13 | test | test | 6 | 18 | 78016 |; | 2023-07-13 | test | test | 6 | 19 | 87040 |; | 2023-07-13 | test | test | 6 | 20 | 89792 |; | 2023-07-13 | test | test | 6 | 21 | 188736 |; | 2023-07-13 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | tes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:9223,test,test,9223,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | t,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:9744,test,test,9744,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:9791,test,test,9791,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:9838,test,test,9838,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:10216,test,test,10216,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | te,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:10501,test,test,10501,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,13.7% improvement (47.3 => 40.8) over and above https://github.com/hail-is/hail/pull/3415. Tested on a shard of gnomAD with:. ```; mt = hl.read_matrix_table('gnomad.mt'); mt._force_count_rows(); ```,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3419:91,Test,Tested,91,https://hail.is,https://github.com/hail-is/hail/pull/3419,1,['Test'],['Tested']
Testability,"131 answer = self.gateway_client.send_command(command); 1132 return_value = get_return_value(; -> 1133 answer, self.gateway_client, self.target_id, self.name); 1134 ; 1135 for temp_arg in temp_args:. /home/hail/hail.zip/hail/utils/java.py in deco(*args, **kwargs); 194 raise FatalError('%s\n\nJava stack trace:\n%s\n'; 195 'Hail version: %s\n'; --> 196 'Error summary: %s' % (deepest, full, hail.__version__, deepest)) from None; 197 except pyspark.sql.utils.CapturedException as e:; 198 raise FatalError('%s\n\nJava stack trace:\n%s\n'. FatalError: AssertionError: assertion failed. Java stack trace:; java.lang.AssertionError: assertion failed; 	at scala.Predef$.assert(Predef.scala:156); 	at is.hail.expr.TableMapGlobals.execute(Relational.scala:2158); 	at is.hail.table.Table.value$lzycompute(Table.scala:243); 	at is.hail.table.Table.value(Table.scala:238); 	at is.hail.table.Table.x$5$lzycompute(Table.scala:246); 	at is.hail.table.Table.x$5(Table.scala:246); 	at is.hail.table.Table.globals$lzycompute(Table.scala:246); 	at is.hail.table.Table.globals(Table.scala:246); 	at is.hail.utils.Py4jUtils$class.joinGlobals(Py4jUtils.scala:137); 	at is.hail.utils.package$.joinGlobals(package.scala:26); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244); 	at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357); 	at py4j.Gateway.invoke(Gateway.java:280); 	at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132); 	at py4j.commands.CallCommand.execute(CallCommand.java:79); 	at py4j.GatewayConnection.run(GatewayConnection.java:214); 	at java.lang.Thread.run(Thread.java:748). Hail version: devel-5b299ddae758; Error summary: AssertionError: assertion failed; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3728:6158,Assert,AssertionError,6158,https://hail.is,https://github.com/hail-is/hail/issues/3728,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,"14.0 azure-mgmt-core-1.4.0 azure-mgmt-storage-20.1.0 azure-storage-blob-12.17.0 bokeh-3.2.2 boto3-1.28.41 botocore-1.31.; 41 cachetools-5.3.1 certifi-2023.7.22 cffi-1.15.1 charset-normalizer-3.2.0 commonmark-0.9.1 contourpy-1.1.0 cryptography-41.0.3 decorator-4.4.2 deprecated-1.2.14 dill-0.3.7 frozenlist-1.4.0 google-api-core-2.11.1 google-auth-2.22.0 google-auth-oauthlib-0.8.0 google-cloud-core-2.3.3 google-cloud-storag; e-2.10.0 google-crc32c-1.5.0 google-resumable-media-2.5.0 googleapis-common-protos-1.60.0 humanize-1.1.0 idna-3.4 isodate-0.6.1 janus-1.0.0 jinja2-3.1.2 jmespath-1.0.1 jproperties-2.1.1 markupsafe-2.1.3 msal-1.23.0 msal-extensions-1.0.0 msrest-0.7.1 multidict-6.0.4 nest-asyncio-1.5.7 numpy-1.25.2 oaut; hlib-3.2.2 orjson-3.9.5 packaging-23.1 pandas-2.1.0 parsimonious-0.10.0 pillow-10.0.0 plotly-5.16.1 portalocker-2.7.0 protobuf-3.20.2 py4j-0.10.9.5 pyasn1-0.5.0 pyasn1-modules-0.3.0 pycares-4.3.0 pycparser-2.21 pygments-2.16.1 pyjwt-2.8.0 python-dateutil-2.8.2 python-json-logger-2.0.7 pytz-2023.3.post; 1 pyyaml-6.0.1 regex-2023.8.8 requests-2.31.0 requests-oauthlib-1.3.1 rich-12.6.0 rsa-4.9 s3transfer-0.6.2 scipy-1.11.2 six-1.16.0 sortedcontainers-2.4.0 tabulate-0.9.0 tenacity-8.2.3 tornado-6.3.3 typer-0.9.0 typing-extensions-4.7.1 tzdata-2023.3 urllib3-1.26.16 uvloop-0.17.0 wrapt-1.15.0 xyzservices; -2023.7.0 yarl-1.9.2. [notice] A new release of pip is available: 23.0.1 -> 23.3; [notice] To update, run: pip3.9 install --upgrade pip; python3 -m pip uninstall -y hail; WARNING: Skipping hail as it is not installed.; python3 -m pip install build/deploy/dist/hail-0.2.124-py3-none-any.whl --no-deps; Defaulting to user installation because normal site-packages is not writeable; Processing ./build/deploy/dist/hail-0.2.124-py3-none-any.whl; Installing collected packages: hail; Successfully installed hail-0.2.124. [notice] A new release of pip is available: 23.0.1 -> 23.3; [notice] To update, run: pip3.9 install --upgrade pip; hailctl config set query/backend",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221:44038,log,logger-,44038,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221,1,['log'],['logger-']
Testability,"16, 0 current java objects, thread 115: Executor task launch worker for task 0.0 in stage 37.0 (TID 442); 2023-09-11 16:23:54.351 : INFO: RegionPool: REPORT_THRESHOLD: 264.3M allocated (1.7M blocks / 262.6M chunks), regions.size = 16, 0 current java objects, thread 115: Executor task launch worker for task 0.0 in stage 37.0 (TID 442); 2023-09-11 16:23:55.562 : INFO: RegionPool: REPORT_THRESHOLD: 513.1M allocated (2.3M blocks / 510.8M chunks), regions.size = 16, 0 current java objects, thread 115: Executor task launch worker for task 0.0 in stage 37.0 (TID 442); 2023-09-11 16:23:55.799 : INFO: RegionPool: REPORT_THRESHOLD: 1.0G allocated (3.1M blocks / 1.0G chunks), regions.size = 16, 0 current java objects, thread 115: Executor task launch worker for task 0.0 in stage 37.0 (TID 442); 2023-09-11 16:23:56.277 : INFO: RegionPool: REPORT_THRESHOLD: 2.0G allocated (4.4M blocks / 2.0G chunks), regions.size = 16, 0 current java objects, thread 115: Executor task launch worker for task 0.0 in stage 37.0 (TID 442); 2023-09-11 16:23:57.231 : INFO: RegionPool: REPORT_THRESHOLD: 4.0G allocated (7.3M blocks / 4.0G chunks), regions.size = 16, 0 current java objects, thread 115: Executor task launch worker for task 0.0 in stage 37.0 (TID 442); 2023-09-11 16:23:59.198 : INFO: RegionPool: REPORT_THRESHOLD: 8.0G allocated (12.9M blocks / 8.0G chunks), regions.size = 16, 0 current java objects, thread 115: Executor task launch worker for task 0.0 in stage 37.0 (TID 442); 2023-09-11 16:24:40.382 : INFO: RegionPool: REPORT_THRESHOLD: 16.0G allocated (4.6G blocks / 11.4G chunks), regions.size = 16, 0 current java objects, thread 115: Executor task launch worker for task 0.0 in stage 37.0 (TID 442); 2023-09-11 16:25:11.138 : INFO: RegionPool: REPORT_THRESHOLD: 32.0G allocated (9.2G blocks / 22.8G chunks), regions.size = 16, 0 current java objects, thread 115: Executor task launch worker for task 0.0 in stage 37.0 (TID 442); ```. ### Version. 0.2.120. ### Relevant log output. _No response_",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13606:4817,log,log,4817,https://hail.is,https://github.com/hail-is/hail/issues/13606,1,['log'],['log']
Testability,"17&gt;</code>_ package; provides this functionality directly through; <code>pep517.meta.load &lt;https://github.com/pypa/pep517/blob/a942316305395f8f757f210e2b16f738af73f8b8/pep517/meta.py#L63-L73&gt;</code>_.</li>; </ul>; <h1>v4.9.0</h1>; <ul>; <li>Require Python 3.7 or later.</li>; </ul>; <h1>v4.8.3</h1>; <ul>; <li><a href=""https://github-redirect.dependabot.com/python/importlib_metadata/issues/357"">#357</a>: Fixed requirement generation from egg-info when a</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python/importlib_metadata/commit/14cce75299645467adcd17352cb07caada32c444""><code>14cce75</code></a> Prefer re.findall, which returns materialized results. Fixes <a href=""https://github-redirect.dependabot.com/python/importlib_metadata/issues/369"">#369</a>.</li>; <li><a href=""https://github.com/python/importlib_metadata/commit/b4661fd8988b4101d4042e4cc4a8ed74423ec410""><code>b4661fd</code></a> Add test capturing missed expectation on extras. Ref <a href=""https://github-redirect.dependabot.com/python/importlib_metadata/issues/369"">#369</a>.</li>; <li><a href=""https://github.com/python/importlib_metadata/commit/590e31dad1afceb6e0d55908e876ef5d05ae721b""><code>590e31d</code></a> Add 'migrations' to the docs. Ref <a href=""https://github-redirect.dependabot.com/python/importlib_metadata/issues/368"">#368</a>.</li>; <li><a href=""https://github.com/python/importlib_metadata/commit/43603042899689531c88b713e7777e7f67e9a07c""><code>4360304</code></a> Merge <a href=""https://github.com/jaraco/skeleton"">https://github.com/jaraco/skeleton</a></li>; <li><a href=""https://github.com/python/importlib_metadata/commit/04fe68a96ee8e3d3ca521b4abbfe53203063f9d9""><code>04fe68a</code></a> Ran pre-commit autoupdate</li>; <li><a href=""https://github.com/python/importlib_metadata/commit/2ef893a85f0ad023827d0720307695214a2245b2""><code>2ef893a</code></a> Merge <a href=""https://gi",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11525:2707,test,test,2707,https://hail.is,https://github.com/hail-is/hail/pull/11525,1,['test'],['test']
Testability,1817536 |; | 2023-07-13 | __testproject_iizhz61z7543_uvxWn | test | 6 | 0 | 11331136 |; | 2023-07-13 | ci | ci | 6 | 0 | 79640784 |; | 2023-07-13 | test | test | 6 | 0 | 4142226688 |; | 2023-07-13 | test | test | 6 | 1 | 108608 |; | 2023-07-13 | test | test | 6 | 2 | 80576 |; | 2023-07-13 | test | test | 6 | 5 | 35648 |; | 2023-07-13 | test | test | 6 | 7 | 578240 |; | 2023-07-13 | test | test | 6 | 9 | 33024 |; | 2023-07-13 | test | test | 6 | 10 | 33472 |; | 2023-07-13 | test | test | 6 | 11 | 110464 |; | 2023-07-13 | test | test | 6 | 14 | 47744 |; | 2023-07-13 | test | test | 6 | 15 | 45440 |; | 2023-07-13 | test | test | 6 | 16 | 79616 |; | 2023-07-13 | test | test | 6 | 17 | 604928 |; | 2023-07-13 | test | test | 6 | 18 | 78016 |; | 2023-07-13 | test | test | 6 | 19 | 87040 |; | 2023-07-13 | test | test | 6 | 20 | 89792 |; | 2023-07-13 | test | test | 6 | 21 | 188736 |; | 2023-07-13 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | t,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:8702,test,test,8702,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,"188c276.png). Pvals for variants with at least 20 hets, basically the same:; ![logregpval20hets](https://cloud.githubusercontent.com/assets/3201642/22859658/c6d27e12-f0b1-11e6-814f-b4a75dd54162.png). Comparison of iterations until convergence, note that LRT is bimodal due to quasi-separation, whereas Firth is not. When well-posed, Firth takes more iterations to converge as expected:; ![logregiter](https://cloud.githubusercontent.com/assets/3201642/22859638/df6c31ee-f0b0-11e6-9443-1a00bb2e9848.png). LRT iterations:; ![logreglrtiter](https://cloud.githubusercontent.com/assets/3201642/22859676/816119b4-f0b2-11e6-8401-2b6600d6f443.png). Firth iterations:; ![logregfirthiter](https://cloud.githubusercontent.com/assets/3201642/22859677/883c4a6a-f0b2-11e6-9aad-b79e613f2ba7.png). For the record, Wald is mis-calibrated for small counts:; ![logregpvalwaldlrt](https://cloud.githubusercontent.com/assets/3201642/22859691/f629f5fe-f0b2-11e6-98fe-b96b3ef497ec.png). Score is more conservative than LRT:; ![logregpvalscorelrt](https://cloud.githubusercontent.com/assets/3201642/22859708/92750f7a-f0b3-11e6-93af-3219eb9e025f.png). Firth is more conservative than score:; ![logregpvalscorefirth](https://cloud.githubusercontent.com/assets/3201642/22859693/fed4555a-f0b2-11e6-9636-2a8075b0a04a.png). And linear betas are super conservative:; ![logregbetafirthlin](https://cloud.githubusercontent.com/assets/3201642/22867304/c63d2b76-f153-11e6-87b3-445c58796695.png). But linear pvals are okay:; ![logregpvalfirthlin](https://cloud.githubusercontent.com/assets/3201642/22867309/dc0f0d70-f153-11e6-840d-308dc0570a6a.png). And essentially identical to score test:; ![logregpvalscorelin](https://cloud.githubusercontent.com/assets/3201642/22867310/e475f730-f153-11e6-9cba-acec78a12964.png). Here's a QQ-plot:; ![logreg qqplot](https://cloud.githubusercontent.com/assets/3201642/23096398/c6c3db0e-f5e9-11e6-97e8-4a565bcc9cb8.png). Here's a QQ-plot restricted to variants with > 20 hets:; ![logreg qqplot 20het](h",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1375#issuecomment-279196409:3011,log,logregpvalscorelrt,3011,https://hail.is,https://github.com/hail-is/hail/pull/1375#issuecomment-279196409,1,['log'],['logregpvalscorelrt']
Testability,"18:20 /hail/test/BRCA1.raw_indel.vcf; ```; But when I excuted the command:; ```; hc.import_vcf('/hail/test/BRCA1.raw_indel.vcf').write('/hail/test/brca1.vds'); ```; there are some errors：; ```; [hdfs@tele-1 root]$ python; Python 2.7.13 |Anaconda 4.4.0 (64-bit)| (default, Dec 20 2016, 23:09:15) ; [GCC 4.4.7 20120313 (Red Hat 4.4.7-1)] on linux2; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; Anaconda is brought to you by Continuum Analytics.; Please check out: http://continuum.io/thanks and https://anaconda.org; >>> import hail; >>> hc = hail.HailContext(); Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel).; hail: info: SparkUI: http://192.168.1.4:4041; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.1-0320a61; >>> hc.import_vcf('/hail/test/BRCA1.raw_indel.vcf').write('/hail/test/brca1.vds'); hail: warning: `/hail/test/BRCA1.raw_indel.vcf' refers to no files; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""<decorator-gen-483>"", line 2, in import_vcf; File ""/opt/Software/hail/python/hail/java.py"", line 112, in handle_py4j; 'Error summary: %s' % (deepest, full, Env.hc().version, deepest)); hail.java.FatalError: HailException: arguments refer to no files. Java stack trace:; is.hail.utils.HailException: arguments refer to no files; 	at is.hail.utils.ErrorHandling$class.fatal(ErrorHandling.scala:6); 	at is.hail.utils.package$.fatal(package.scala:25); 	at is.hail.io.vcf.LoadVCF$.globAllVCFs(LoadVCF.scala:105); 	at is.hail.HailContext.importVCFs(HailContext.scala:523); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at py",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076:1690,test,test,1690,https://hail.is,https://github.com/hail-is/hail/issues/2076,1,['test'],['test']
Testability,"1>; <ul>; <li>fixtures for creating and injecting versions of the asyncio event; loop</li>; <li>fixtures for injecting unused tcp/udp ports</li>; <li>pytest markers for treating tests as asyncio coroutines</li>; <li>easy testing with non-default event loops</li>; <li>support for [async def]{.title-ref} fixtures and async generator; fixtures</li>; <li>support <em>auto</em> mode to handle all async fixtures and tests; automatically by asyncio; provide <em>strict</em> mode if a test suite; should work with different async frameworks simultaneously, e.g.; <code>asyncio</code> and <code>trio</code>.</li>; </ul>; <h1>Installation</h1>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/pytest-dev/pytest-asyncio/blob/master/CHANGELOG.rst"">pytest-asyncio's changelog</a>.</em></p>; <blockquote>; <h1>0.20.2 (22-11-11)</h1>; <ul>; <li>Fixes an issue with async fixtures that are defined as methods on a test class not being rebound to the actual test instance. <code>[#197](https://github.com/pytest-dev/pytest-asyncio/issues/197) &lt;https://github.com/pytest-dev/pytest-asyncio/issues/197&gt;</code>_</li>; <li>Replaced usage of deprecated <code>@pytest.mark.tryfirst</code> with <code>@pytest.hookimpl(tryfirst=True)</code> <code>[#438](https://github.com/pytest-dev/pytest-asyncio/issues/438) &lt;https://github.com/pytest-dev/pytest-asyncio/pull/438&gt;</code>_</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/pytest-dev/pytest-asyncio/commit/07a1416c2fe15d85fc149b3caa35b057de0b3d6e""><code>07a1416</code></a> Prepare release of v0.20.2.</li>; <li><a href=""https://github.com/pytest-dev/pytest-asyncio/commit/dc3ad211d160006b4a30996c0a2a2c29754ef1fc""><code>dc3ad21</code></a> Build(deps): Bump pytest-trio in /dependencies/default (<a href=""https://github-redirect.dependabot.com/pytest-dev/pytest-asyncio/iss",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12453:2886,test,test,2886,https://hail.is,https://github.com/hail-is/hail/pull/12453,2,['test'],['test']
Testability,"1c4""><code>cd479ba</code></a> Prepare release 0.10.9.7 (<a href=""https://redirect.github.com/bartdag/py4j/issues/495"">#495</a>)</li>; <li><a href=""https://github.com/py4j/py4j/commit/3518579a9323c10b4d8cb4f58a45c2eed100cb8c""><code>3518579</code></a> Merge pull request <a href=""https://redirect.github.com/bartdag/py4j/issues/494"">#494</a> from xinrong-meng/release</li>; <li><a href=""https://github.com/py4j/py4j/commit/060519f392b08c7f158d24582a4ade2a444ad7d4""><code>060519f</code></a> milestone</li>; <li><a href=""https://github.com/py4j/py4j/commit/9bf515a34e70ca142f8b6ee15f12ae3bd0139bd2""><code>9bf515a</code></a> prepare</li>; <li><a href=""https://github.com/py4j/py4j/commit/1f8a0b6dc216f16092d9c1b2556897eec8653a62""><code>1f8a0b6</code></a> Detach Java objects only when _detach method exists (<a href=""https://redirect.github.com/bartdag/py4j/issues/492"">#492</a>)</li>; <li><a href=""https://github.com/py4j/py4j/commit/4a97b24c7da163b4c5bb24fe88f75a691adb60ed""><code>4a97b24</code></a> Reduce test combinations to one Windows, one JDK 11 and one JDK 17 (<a href=""https://redirect.github.com/bartdag/py4j/issues/493"">#493</a>)</li>; <li><a href=""https://github.com/py4j/py4j/commit/726031fe64840b41859155d3f50b581e6be5f9af""><code>726031f</code></a> Add support for Java 11/17 (<a href=""https://redirect.github.com/bartdag/py4j/issues/491"">#491</a>)</li>; <li><a href=""https://github.com/py4j/py4j/commit/77330c37440cbb5d68c8f1025b6d9f3f2843122b""><code>77330c3</code></a> Add Windows support to CI (<a href=""https://redirect.github.com/bartdag/py4j/issues/487"">#487</a>)</li>; <li><a href=""https://github.com/py4j/py4j/commit/1c622faa81e983f5ceface5290859d6a49974849""><code>1c622fa</code></a> Migrate nosetest to pytest (<a href=""https://redirect.github.com/bartdag/py4j/issues/481"">#481</a>)</li>; <li><a href=""https://github.com/py4j/py4j/commit/64ba89c5a680218d682161a4a6d952a969d1299b""><code>64ba89c</code></a> Add explanations for releasing Py4J for eclipse. Convert .txt to .md (<a hre",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12978:1209,test,test,1209,https://hail.is,https://github.com/hail-is/hail/pull/12978,1,['test'],['test']
Testability,1cd9g3etP2sS4f13bN6iJPU_sbnRnyRE91VPtjUpuYLPqmOq13; 	| ; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSessionFailureScenario.toStorageException(JsonResumableSessionFailureScenario.java:185) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSessionFailureScenario.toStorageException(JsonResumableSessionFailureScenario.java:117) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSessionFailureScenario.toStorageException(JsonResumableSessionFailureScenario.java:98) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSessionQueryTask.call(JsonResumableSessionQueryTask.java:100) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSession.query(JsonResumableSession.java:57) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSession.lambda$put$0(JsonResumableSession.java:73) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.Retrying.lambda$run$0(Retrying.java:102) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at com.google.api.gax.retrying.DirectRetryingExecutor.submit(DirectRetryingExecutor.java:103) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.RetryHelper.run(RetryHelper.java:76) ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:9057,test,test-,9057,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['test-']
Testability,"2 GB physical memory used. Consider boosting spark.yarn.executor.memoryOverhead.; 2018-08-22 17:28:37 YarnScheduler: ERROR: Lost executor 431 on pca-sw-pd61.c.daly-ibd.internal: Container killed by YARN for exceeding memory limits. 12.2 GB of 12 GB physical memory used. Consider boosting spark.yarn.executor.memoryOverhead.; 2018-08-22 17:28:37 TaskSetManager: WARN: Lost task 1047.0 in stage 16.0 (TID 20251, pca-sw-pd61.c.daly-ibd.internal, executor 431): ExecutorLostFailure (executor 431 exited caused by one of the running tasks) Reason: Container killed by YARN for exceeding memory limits. 12.2 GB of 12 GB physical memory used. Consider boosting spark.yarn.executor.memoryOverhead.; 2018-08-22 17:28:37 TaskSetManager: WARN: Lost task 1046.0 in stage 16.0 (TID 20250, pca-sw-pd61.c.daly-ibd.internal, executor 431): ExecutorLostFailure (executor 431 exited caused by one of the running tasks) Reason: Container killed by YARN for exceeding memory limits. 12.2 GB of 12 GB physical memory used. Consider boosting spark.yarn.executor.memoryOverhead.; 2018-08-22 17:28:37 TaskSetManager: WARN: Lost task 1049.0 in stage 16.0 (TID 20253, pca-sw-pd61.c.daly-ibd.internal, executor 431): ExecutorLostFailure (executor 431 exited caused by one of the running tasks) Reason: Container killed by YARN for exceeding memory limits. 12.2 GB of 12 GB physical memory used. Consider boosting spark.yarn.executor.memoryOverhead.; 2018-08-22 17:28:37 TaskSetManager: WARN: Lost task 90.2 in stage 16.0 (TID 20249, pca-sw-pd61.c.daly-ibd.internal, executor 431): ExecutorLostFailure (executor 431 exited caused by one of the running tasks) Reason: Container killed by YARN for exceeding memory limits. 12.2 GB of 12 GB physical memory used. Consider boosting spark.yarn.executor.memoryOverhead.; ```; [hail.log.gz](https://github.com/hail-is/hail/files/2315428/hail.log.gz). More detail [on zulip](https://hail.zulipchat.com/#narrow/stream/123010-Hail-0.2E2.20support/subject/Blowing.20Memory.20on.20a.20PRS)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4202:2898,log,log,2898,https://hail.is,https://github.com/hail-is/hail/issues/4202,2,['log'],['log']
Testability,2(ServiceBackend.scala:698); E 	at is.hail.backend.service.ServiceBackendSocketAPI2.withIRFunctionsReadFromInput(ServiceBackend.scala:801); E 	at is.hail.backend.service.ServiceBackendSocketAPI2.$anonfun$executeOneCommand$11(ServiceBackend.scala:696); E 	at is.hail.backend.service.ServiceBackendSocketAPI2.$anonfun$executeOneCommand$2(ServiceBackend.scala:654); E 	at is.hail.backend.ExecuteContext$.$anonfun$scoped$3(ExecuteContext.scala:75); E 	at is.hail.utils.package$.using(package.scala:635); E 	at is.hail.backend.ExecuteContext$.$anonfun$scoped$2(ExecuteContext.scala:75); E 	at is.hail.utils.package$.using(package.scala:635); E 	at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:17); E 	at is.hail.backend.ExecuteContext$.scoped(ExecuteContext.scala:63); E 	at is.hail.backend.service.ServiceBackendSocketAPI2.$anonfun$executeOneCommand$1(ServiceBackend.scala:644); E 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:52); E 	at is.hail.utils.ExecutionTimer$.logTime(ExecutionTimer.scala:59); E 	at is.hail.backend.service.ServiceBackendSocketAPI2.withExecuteContext$1(ServiceBackend.scala:631); E 	at is.hail.backend.service.ServiceBackendSocketAPI2.executeOneCommand(ServiceBackend.scala:693); E 	at is.hail.backend.service.ServiceBackendSocketAPI2$.$anonfun$main$6(ServiceBackend.scala:459); E 	at is.hail.backend.service.ServiceBackendSocketAPI2$.$anonfun$main$6$adapted(ServiceBackend.scala:458); E 	at is.hail.utils.package$.using(package.scala:635); E 	at is.hail.backend.service.ServiceBackendSocketAPI2$.$anonfun$main$5(ServiceBackend.scala:458); E 	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23); E 	at is.hail.services.package$.retryTransientErrors(package.scala:124); E 	at is.hail.backend.service.ServiceBackendSocketAPI2$.$anonfun$main$4(ServiceBackend.scala:458); E 	at is.hail.backend.service.ServiceBackendSocketAPI2$.$anonfun$main$4$adapted(ServiceBackend.scala:456); E 	at is.hail.utils.package$.using(package.scala:635); E 	,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12976:5794,log,logTime,5794,https://hail.is,https://github.com/hail-is/hail/issues/12976,2,['log'],['logTime']
Testability,2(ServiceBackend.scala:702); E 	at is.hail.backend.service.ServiceBackendSocketAPI2.withIRFunctionsReadFromInput(ServiceBackend.scala:805); E 	at is.hail.backend.service.ServiceBackendSocketAPI2.$anonfun$executeOneCommand$11(ServiceBackend.scala:700); E 	at is.hail.backend.service.ServiceBackendSocketAPI2.$anonfun$executeOneCommand$2(ServiceBackend.scala:658); E 	at is.hail.backend.ExecuteContext$.$anonfun$scoped$3(ExecuteContext.scala:75); E 	at is.hail.utils.package$.using(package.scala:635); E 	at is.hail.backend.ExecuteContext$.$anonfun$scoped$2(ExecuteContext.scala:75); E 	at is.hail.utils.package$.using(package.scala:635); E 	at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:17); E 	at is.hail.backend.ExecuteContext$.scoped(ExecuteContext.scala:63); E 	at is.hail.backend.service.ServiceBackendSocketAPI2.$anonfun$executeOneCommand$1(ServiceBackend.scala:648); E 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:52); E 	at is.hail.utils.ExecutionTimer$.logTime(ExecutionTimer.scala:59); E 	at is.hail.backend.service.ServiceBackendSocketAPI2.withExecuteContext$1(ServiceBackend.scala:634); E 	at is.hail.backend.service.ServiceBackendSocketAPI2.executeOneCommand(ServiceBackend.scala:697); E 	at is.hail.backend.service.ServiceBackendSocketAPI2$.$anonfun$main$6(ServiceBackend.scala:462); E 	at is.hail.backend.service.ServiceBackendSocketAPI2$.$anonfun$main$6$adapted(ServiceBackend.scala:461); E 	at is.hail.utils.package$.using(package.scala:635); E 	at is.hail.backend.service.ServiceBackendSocketAPI2$.$anonfun$main$5(ServiceBackend.scala:461); E 	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23); E 	at is.hail.services.package$.retryTransientErrors(package.scala:134); E 	at is.hail.backend.service.ServiceBackendSocketAPI2$.$anonfun$main$4(ServiceBackend.scala:460); E 	at is.hail.backend.service.ServiceBackendSocketAPI2$.$anonfun$main$4$adapted(ServiceBackend.scala:459); E 	at is.hail.utils.package$.using(package.scala:635); E 	,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13074:5508,log,logTime,5508,https://hail.is,https://github.com/hail-is/hail/issues/13074,2,['log'],['logTime']
Testability,2)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[12]([Ljava.lang.String;@21ebf782) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[13]([Ljava.lang.String;@3bda762a)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[13]([Ljava.lang.String;@3bda762a) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[14]([Ljava.lang.String;@4898b38e)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[14]([Ljava.lang.String;@4898b38e) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[15]([Ljava.lang.String;@51684a)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[15]([Ljava.lang.String;@51684a) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[16]([Ljava.lang.String;@4a971368)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[16]([Ljava.lang.String;@4a971368) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[17]([Ljava.lang.String;@47162b74)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[17]([Ljava.lang.String;@47162b74) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[18]([Ljava.lang.String;@70bfbb33)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[18]([Ljava.lang.String;@70bfbb33) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[19]([Ljava.lang.String;@3e391ee2)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4718:6788,Assert,AssertionError,6788,https://hail.is,https://github.com/hail-is/hail/issues/4718,1,['Assert'],['AssertionError']
Testability,"2,BaseQRankSum:Float64,ClippingRankSum:Float64,DP:Int32,DS:Boolean,FS:Float64,HaplotypeScore:Float64,InbreedingCoeff:Float64,MLEAC:Array[Int32],MLEAF:Array[Float64],MQ:Float64,MQ0:Int32,MQRankSum:Float64,QD:Float64,ReadPosRankSum:Float64,set:String}}"",""_bufferSpec"":{""name"":""LEB128BufferSpec"",""child"":{""name"":""BlockingBufferSpec"",""blockSize"":32768,""child"":{""name"":""LZ4HCBlockBufferSpec"",""blockSize"":32768,""child"":{""name"":""StreamBlockBufferSpec""}}}}},WrappedArray(locus, alleles),JArray(List(JObject(List((start,JObject(List((locus,JObject(List((contig,JString(1)), (position,JInt(904165))))), (alleles,JArray(List(JString(G), JString(A))))))), (end,JObject(List((locus,JObject(List((contig,JString(4)), (position,JInt(70592790))))), (alleles,JArray(List(JString(G), JString(T))))))), (includeStart,JBool(true)), (includeEnd,JBool(true)))), JObject(List((start,JObject(List((locus,JObject(List((contig,JString(4)), (position,JInt(70899111))))), (alleles,JArray(List(JString(G), JString(A))))))), (end,JObject(List((locus,JObject(List((contig,JString(8)), (position,JInt(126013303))))), (alleles,JArray(List(JString(G), JString(A))))))), (includeStart,JBool(true)), (includeEnd,JBool(true)))), JObject(List((start,JObject(List((locus,JObject(List((contig,JString(8)), (position,JInt(126888589))))), (alleles,JArray(List(JString(G), JString(A))))))), (end,JObject(List((locus,JObject(List((contig,JString(14)), (position,JInt(75037676))))), (alleles,JArray(List(JString(T), JString(C))))))), (includeStart,JBool(true)), (includeEnd,JBool(true)))), JObject(List((start,JObject(List((locus,JObject(List((contig,JString(14)), (position,JInt(75234101))))), (alleles,JArray(List(JString(T), JString(G))))))), (end,JObject(List((locus,JObject(List((contig,JString(X)), (position,JInt(154087368))))), (alleles,JArray(List(JString(T), JString(A))))))), (includeStart,JBool(true)), (includeEnd,JBool(true)))))),null,Map()))), WriteMetadata(Ref(__iruid_374,array<str>),RVDSpecWriter(gs://danking/workshop-test/1kg.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9856:15576,test,test,15576,https://hail.is,https://github.com/hail-is/hail/issues/9856,1,['test'],['test']
Testability,2.1.0 test was removed from CI (and as a merge dependency),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2639#issuecomment-356088106:6,test,test,6,https://hail.is,https://github.com/hail-is/hail/pull/2639#issuecomment-356088106,1,['test'],['test']
Testability,"20334af</code></a> Move the EnaRefServiceTest to the externalAPI test group (<a href=""https://redirect.github.com/samtools/htsjdk/issues/1675"">#1675</a>)</li>; <li><a href=""https://github.com/samtools/htsjdk/commit/75eac4674a78cddde9fc9ff6a0a18f6d4ba1f798""><code>75eac46</code></a> add SINGULAR platform to read group (<a href=""https://redirect.github.com/samtools/htsjdk/issues/1635"">#1635</a>)</li>; <li><a href=""https://github.com/samtools/htsjdk/commit/d486d53aac2cd52ac53d1c633ac89789871815a8""><code>d486d53</code></a> Zero len array (<a href=""https://redirect.github.com/samtools/htsjdk/issues/1674"">#1674</a>)</li>; <li><a href=""https://github.com/samtools/htsjdk/commit/44817ee7182bd65e17a6215410f919a8b3e96a94""><code>44817ee</code></a> Update org.json</li>; <li><a href=""https://github.com/samtools/htsjdk/commit/500cffda9c511d88a736bcbb91d3f10259b967fb""><code>500cffd</code></a> Test fix</li>; <li><a href=""https://github.com/samtools/htsjdk/commit/662c8274fad42e001e63e2b9c9c2066714b42a0d""><code>662c827</code></a> Test fix</li>; <li><a href=""https://github.com/samtools/htsjdk/commit/e58f8a2250fc47afecfa38611b0f51b02ac6b933""><code>e58f8a2</code></a> Minor code cleanup</li>; <li><a href=""https://github.com/samtools/htsjdk/commit/b1085dab46bc220b1f6d3eb92fcbe73818ade3eb""><code>b1085da</code></a> Test fixes</li>; <li>Additional commits viewable in <a href=""https://github.com/samtools/htsjdk/compare/3.0.4...4.0.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=com.github.samtools:htsjdk&package-manager=gradle&previous-version=3.0.4&new-version=4.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (depen",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13576:7743,Test,Test,7743,https://hail.is,https://github.com/hail-is/hail/pull/13576,1,['Test'],['Test']
Testability,"205 for j in list(e._joins)[::-1]:; 2206 if j.uid not in used_uids:; -> 2207 left = j.join_function(left); 2208 all_uids.extend(j.temp_vars); 2209 used_uids.add(j.uid). /home/hail/hail.zip/hail/matrixtable.py in <lambda>(left); 2157 prefix = 'va'; 2158 joiner = lambda left: (; -> 2159 MatrixTable(left._jvds.annotateRowsVDS(right._jvds, uid))); 2160 else:; 2161 return self.rows().index(*exprs). /usr/lib/spark/python/lib/py4j-0.10.4-src.zip/py4j/java_gateway.py in __call__(self, *args); 1131 answer = self.gateway_client.send_command(command); 1132 return_value = get_return_value(; -> 1133 answer, self.gateway_client, self.target_id, self.name); 1134; 1135 for temp_arg in temp_args:. /home/hail/hail.zip/hail/utils/java.py in deco(*args, **kwargs); 236 # this is a hack to suppress the original error's stack trace; 237 if _exception:; --> 238 raise _exception; 239; 240 return deco. FatalError: AssertionError: assertion failed. Java stack trace:; java.lang.AssertionError: assertion failed; 	at scala.Predef$.assert(Predef.scala:156); 	at is.hail.variant.MatrixTable.orderedRVDLeftJoinDistinctAndInsert(MatrixTable.scala:982); 	at is.hail.variant.MatrixTable.annotateRowsVDS(MatrixTable.scala:1449); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244); 	at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357); 	at py4j.Gateway.invoke(Gateway.java:280); 	at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132); 	at py4j.commands.CallCommand.execute(CallCommand.java:79); 	at py4j.GatewayConnection.run(GatewayConnection.java:214); 	at java.lang.Thread.run(Thread.java:748). Hail version: devel-14287a4; Error summary: AssertionError: assertion failed; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3119:2435,assert,assert,2435,https://hail.is,https://github.com/hail-is/hail/issues/3119,3,"['Assert', 'assert']","['AssertionError', 'assert', 'assertion']"
Testability,"2079a85bce (41 minutes):. I could try to make the tests even more fine-grained and split up even more long-running tests. Seems like some of the bottlenecks I'm hitting now are:; 1. Introducing an image with the wheel already installed isn't worthwhile, it adds 2.5 min latency.; 2. The large number of splits often requires default Hail to scale up adding a 2min delay (It would be great to get that down). I'm gonna revert the change that added images and maybe try to reduce service backend parallelism a bit. 36 minutes is an improvement. We should probably focus on making Hail faster rather than trying to squeeze lower latency out of parallelism. <img width=""2032"" alt=""Screen Shot 2023-05-22 at 12 30 47"" src=""https://github.com/hail-is/hail/assets/106194/aaa3fbb7-176d-4487-b65e-586c235e2089"">; <img width=""541"" alt=""Screen Shot 2023-05-22 at 12 31 23"" src=""https://github.com/hail-is/hail/assets/106194/016f1089-d08d-4555-ae86-c01353f39c78"">",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13076#issuecomment-1557548015:50,test,tests,50,https://hail.is,https://github.com/hail-is/hail/pull/13076#issuecomment-1557548015,2,['test'],['tests']
Testability,"22 13:11:21 SecurityManager: INFO: SecurityManager: authentication disabled; ui acls disabled; users with view permissions: Set(farrell); groups with view permissions: Set(); users with modify permissions: Set(farrell); groups with modify permissions: Set(); 2019-01-22 13:11:21 Utils: INFO: Successfully started service 'sparkDriver' on port 38253.; 2019-01-22 13:11:21 SparkEnv: INFO: Registering MapOutputTracker; 2019-01-22 13:11:21 SparkEnv: INFO: Registering BlockManagerMaster; 2019-01-22 13:11:21 BlockManagerMasterEndpoint: INFO: Using org.apache.spark.storage.DefaultTopologyMapper for getting topology information; 2019-01-22 13:11:21 BlockManagerMasterEndpoint: INFO: BlockManagerMasterEndpoint up; 2019-01-22 13:11:21 DiskBlockManager: INFO: Created local directory at /tmp/blockmgr-8d910f25-2ae8-439c-8577-377758342d28; 2019-01-22 13:11:21 MemoryStore: INFO: MemoryStore started with capacity 2.5 GB; 2019-01-22 13:11:22 SparkEnv: INFO: Registering OutputCommitCoordinator; 2019-01-22 13:11:22 log: INFO: Logging initialized @11836ms; 2019-01-22 13:11:22 Server: INFO: jetty-9.3.z-SNAPSHOT; 2019-01-22 13:11:22 Server: INFO: Started @12028ms; 2019-01-22 13:11:22 AbstractConnector: INFO: Started ServerConnector@1433e9ec{HTTP/1.1,[http/1.1]}{0.0.0.0:4040}; 2019-01-22 13:11:22 Utils: INFO: Successfully started service 'SparkUI' on port 4040.; 2019-01-22 13:11:22 ContextHandler: INFO: Started o.s.j.s.ServletContextHandler@1fc6c1cc{/jobs,null,AVAILABLE,@Spark}; 2019-01-22 13:11:22 ContextHandler: INFO: Started o.s.j.s.ServletContextHandler@75771d8a{/jobs/json,null,AVAILABLE,@Spark}; 2019-01-22 13:11:22 ContextHandler: INFO: Started o.s.j.s.ServletContextHandler@56931c6{/jobs/job,null,AVAILABLE,@Spark}; 2019-01-22 13:11:22 ContextHandler: INFO: Started o.s.j.s.ServletContextHandler@7d4d6f14{/jobs/job/json,null,AVAILABLE,@Spark}; 2019-01-22 13:11:22 ContextHandler: INFO: Started o.s.j.s.ServletContextHandler@23f9d06d{/stages,null,AVAILABLE,@Spark}; 2019-01-22 13:11:22 ContextH",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4733#issuecomment-456534587:10516,log,log,10516,https://hail.is,https://github.com/hail-is/hail/issues/4733#issuecomment-456534587,2,"['Log', 'log']","['Logging', 'log']"
Testability,"22-10-06 15:56:03 WARN Utils:69 - Your hostname, nid resolves to a loopback address: 127.0.1.1; using 192.168.248.80 instead (on interface wlp0s20f3); 2022-10-06 15:56:03 WARN Utils:69 - Set SPARK_LOCAL_IP if you need to bind to another address; WARNING: An illegal reflective access operation has occurred; WARNING: Illegal reflective access by org.apache.spark.unsafe.Platform (file:/home/med/.local/lib/python3.8/site-packages/pyspark/jars/spark-unsafe_2.12-3.1.3.jar) to constructor java.nio.DirectByteBuffer(long,int); WARNING: Please consider reporting this to the maintainers of org.apache.spark.unsafe.Platform; WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations; WARNING: All illegal access operations will be denied in a future release; 2022-10-06 15:56:03 WARN NativeCodeLoader:60 - Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).; Running on Apache Spark version 3.1.3; SparkUI available at http://192.168.248.80:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.100-2ea2615a797a; LOGGING: writing to /; --------------------------------------------------------------------------; mt.filter_rows(mt.locus.position==2867101).count_rows(); ```; ### Expected ; Return a count of rows with that condition. ### Error ; ```; FatalError: AssertionError: assertion failed. Java stack trace:; java.lang.AssertionError: assertion failed; at scala.Predef$.assert(Predef.scala:208); at is.hail.expr.ir.LoweredTableReader$.makeCoercer(TableIR.scala:135); at is.hail.expr.ir.GenericTableValue.getLTVCoercer(GenericTableValue.scala:137); at is.hail.expr.ir.GenericTableValue.toTableStage(GenericTableValue.scala:162); at is.hail.io.vcf.MatrixVCFReader.lower(LoadVCF.scala:1798); at is.hail.expr.ir.lowering.LowerTableIR$.appl",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12280:1467,log,logging,1467,https://hail.is,https://github.com/hail-is/hail/issues/12280,1,['log'],['logging']
Testability,"24, in _run_code; exec(code, run_globals); File ""/home/edmund/.local/src/hail/test.py"", line 10, in <module>; expr = hl.any(lambda x:; File ""/home/edmund/.local/src/hail/hail/python/hail/expr/functions.py"", line 3530, in any; collection = arg_check(args[1], 'any', 'collection', collection_type); File ""/home/edmund/.local/src/hail/hail/python/hail/typecheck/check.py"", line 586, in arg_check; raise TypeError(""{fname}: parameter '{argname}': ""; TypeError: any: parameter 'collection': expected expression of type set<any> or array<any>, found list: [['10', 123, 'G', 'C'], ['10', 456, 'T', 'A']]; ```; So, hail doesn't support heterogeneous arrays. Converting to a homogeneous array:. ```python; variants = [(""10"", 123, [""G"", ""C""]), (""10"", 456, [""T"", ""A""])]. expr = hl.any(; lambda x:; (mt.locus.contig == hl.literal(x[0])) & \; (mt.locus.position == hl.literal(int(x[1]))) & \; (mt.alleles == hl.literal(x[2])),; variants; ). hl.eval(expr). ```; Leads to the following error (which looks like the bug!):; ```; Traceback (most recent call last):; File ""test.py"", line 10, in <module>; expr = hl.any(lambda x:; File ""/home/edmund/.local/src/hail/hail/python/hail/expr/functions.py"", line 3531, in any; return collection.any(f); File ""<decorator-gen-510>"", line 2, in any; File ""/home/edmund/.local/src/hail/hail/python/hail/typecheck/check.py"", line 577, in wrapper; return __original_func(*args_, **kwargs_); File ""/home/edmund/.local/src/hail/hail/python/hail/expr/expressions/typed_expressions.py"", line 68, in any; return hl.array(self).fold(lambda accum, elt: accum | f(elt), False); File ""<decorator-gen-518>"", line 2, in fold; File ""/home/edmund/.local/src/hail/hail/python/hail/typecheck/check.py"", line 577, in wrapper; return __original_func(*args_, **kwargs_); File ""/home/edmund/.local/src/hail/hail/python/hail/expr/expressions/typed_expressions.py"", line 221, in fold; return collection._to_stream().fold(lambda x, y: f(x, y), zero); File ""<decorator-gen-650>"", line 2, in fold; File ""/h",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13046#issuecomment-1624278982:5218,test,test,5218,https://hail.is,https://github.com/hail-is/hail/issues/13046#issuecomment-1624278982,1,['test'],['test']
Testability,"2555c05c4bf85/pyscripts_rlCXpu.zip/gnomad_hail/slack_utils.py"", line 77, in try_slack; func(*args); File ""/tmp/aa0cd79aaa1a4f1ba652555c05c4bf85/assign_subpops.py"", line 16, in main; pop_table = exome_pop_table.union(genome_pop_table); File ""<decorator-gen-484>"", line 2, in union; File ""/tmp/aa0cd79aaa1a4f1ba652555c05c4bf85/hail-devel-3da0e7424af0.zip/hail/typecheck/check.py"", line 481, in _typecheck; return __orig_func__(*args_, **kwargs_); File ""/tmp/aa0cd79aaa1a4f1ba652555c05c4bf85/hail-devel-3da0e7424af0.zip/hail/table.py"", line 1496, in union; return Table(self._jt.union([table._jt for table in tables])); File ""/usr/lib/spark/python/lib/py4j-0.10.4-src.zip/py4j/java_gateway.py"", line 1133, in __call__; answer, self.gateway_client, self.target_id, self.name); File ""/tmp/aa0cd79aaa1a4f1ba652555c05c4bf85/hail-devel-3da0e7424af0.zip/hail/utils/java.py"", line 196, in deco; 'Error summary: %s' % (deepest, full, hail.__version__, deepest)) from None; hail.utils.java.FatalError: AssertionError: assertion failed. Java stack trace:; java.lang.AssertionError: assertion failed; at scala.Predef$.assert(Predef.scala:156); at is.hail.table.Table.union(Table.scala:931); at is.hail.table.Table.union(Table.scala:928); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:498); at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244); at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357); at py4j.Gateway.invoke(Gateway.java:280); at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132); at py4j.commands.CallCommand.execute(CallCommand.java:79); at py4j.GatewayConnection.run(GatewayConnection.java:214); at java.lang.Thread.run(Thread.java:748). Hail version: devel-5f23872; Error summary: AssertionError: assertion failed;",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3404:1061,Assert,AssertionError,1061,https://hail.is,https://github.com/hail-is/hail/issues/3404,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,"2646: Streamline Logging Across TestNG (Krishnan Mahadevan); Fixed: GITHUB-2658: Inheritance + dependsOnMethods (Krishnan Mahadevan)</p>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/cbeust/testng/commit/b94395dea479308ea3fe825269730b960f44d805""><code>b94395d</code></a> Bump version to 7.7.1 for release</li>; <li><a href=""https://github.com/cbeust/testng/commit/89dc5845fcb46c26af187e50ea907a7382d06e72""><code>89dc584</code></a> Streamline overloaded assertion methods for Groovy</li>; <li><a href=""https://github.com/cbeust/testng/commit/5ac0021d14f7eb00804fe235aaefc5c2fbce57d1""><code>5ac0021</code></a> Adding release notes</li>; <li><a href=""https://github.com/cbeust/testng/commit/c0e1e772f1fc0ab2142f3a4114a2b8cfe60fa7e1""><code>c0e1e77</code></a> Adjust version reference in deprecation msgs.</li>; <li><a href=""https://github.com/cbeust/testng/commit/011527d9bf0f91a40539f5e5467cc106888810d9""><code>011527d</code></a> Bump version to 7.7.0 for release</li>; <li><a href=""https://github.com/cbeust/testng/commit/7846c444a411647f7e401a097224702188c93835""><code>7846c44</code></a> Deprecate support for running JUnit tests</li>; <li><a href=""https://github.com/cbeust/testng/commit/8630a7e8fe12985d71c00212f9362fd38fb0cb9e""><code>8630a7e</code></a> Ensure ITestContext available for JUnit4 tests</li>; <li><a href=""https://github.com/cbeust/testng/commit/7070b020def0089d0d9dc695a5762ad16e974ce6""><code>7070b02</code></a> Streamline dependsOnMethods for configurations</li>; <li><a href=""https://github.com/cbeust/testng/commit/d7e0bb1cbcd7933d34d704678e75cbaf42704505""><code>d7e0bb1</code></a> Deprecate support for running Spock Tests</li>; <li><a href=""https://github.com/cbeust/testng/commit/ca7a3a293008389096be75fea4936af8e5f79650""><code>ca7a3a2</code></a> Ensure All tests run all the time</li>; <li>Additional commits viewable in <a href=""https://github.com/cbeust/testng/comp",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12665:15468,test,testng,15468,https://hail.is,https://github.com/hail-is/hail/pull/12665,1,['test'],['testng']
Testability,"27164077758789, 4.435616970062256]; filterCols.filterRows; [4.647814035415649, 4.610292911529541, 4.655405044555664]; filterRows.filterCols; [4.866307973861694, 5.073392868041992, 5.470307111740112]; ```. On GCP, with 32 core highmem master and 176 cores (2 workers + 20 prempt, 8 core standard), reading and writing a 100k by 100k matrix M with 4096 block size (625 partitions, each 128MB, 80GB total) takes about 25s. Even with this 3.5 to 1 ratio of partitions to cores, there is a lot of volatility running the same operations multiple times. I've documented some experiments below, the main conclusion is that these functions should work well for the use cases above and while those are being developed and we experiment more on real data, I think it makes sense to include all three: filterCols, filterRows (implemented via filterCols and transpose), and filter. ```; from hail import *; from hail.linalg import *; import timeit; from random import randint. hc = HailContext(log='/hail/hail.log'). def time(name, f, number=1, repeat=3):; print('running:', name); d = timeit.repeat(f, number=number, repeat=repeat); print(name, d). size = 100000; block_size = 4096; mod = 31; alll = range(0, size). keep = filter(lambda i: i % mod != 0, alll); keepS = filter(lambda i: i % mod == 0, alll); keepR = filter(lambda i: randint(0,1) == 0, alll). pathC = 'gs://jbloom/block_filter/C.bm'; pathCfilt = 'gs://jbloom/block_filter/Cfilt.bm'. # 29s; def writeC():; BlockMatrix.random(size, size, block_size).write(pathC). # 25s; def readwrite():; BlockMatrix.read('gs://jbloom/block_filter/C.bm').write(pathC). ## keep all; # ('filtnone', [50.187114000320435, 37.279563903808594, 39.105873823165894]); # ('filtnone2', [42.968636989593506, 90.15687894821167, 53.434531927108765]); # ('filtnone3', [38.40539002418518, 106.12774705886841, 51.939454078674316]); def filtnone():; C = BlockMatrix.read(pathC); C.filter(alll, alll).write(pathCfilt); def filtnone2():; C = BlockMatrix.read(pathC); C.filter_rows(all",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2647:2754,log,log,2754,https://hail.is,https://github.com/hail-is/hail/pull/2647,1,['log'],['log']
Testability,"272ebee1180354e4e02408b62""><code>9c2ad2b</code></a> Add note about new maintainers (<a href=""https://redirect.github.com/pyasn1/pyasn1-modules/issues/6"">#6</a>)</li>; <li><a href=""https://github.com/pyasn1/pyasn1-modules/commit/10a10e7c4508ac4d858cbe7c8ac9e46575c2bb5c""><code>10a10e7</code></a> Pass tag to workflow call (<a href=""https://redirect.github.com/pyasn1/pyasn1-modules/issues/5"">#5</a>)</li>; <li><a href=""https://github.com/pyasn1/pyasn1-modules/commit/e0c7fd6723bd63db4183352d21dfbebd6c2553b1""><code>e0c7fd6</code></a> Prepare v0.3.0.rc1 with new release workflow (<a href=""https://redirect.github.com/pyasn1/pyasn1-modules/issues/3"">#3</a>)</li>; <li><a href=""https://github.com/pyasn1/pyasn1-modules/commit/7d8e520aa7d0e71ef7144ce381c8a41464e687dc""><code>7d8e520</code></a> Modernize build and test infra (<a href=""https://redirect.github.com/pyasn1/pyasn1-modules/issues/2"">#2</a>)</li>; <li><a href=""https://github.com/pyasn1/pyasn1-modules/commit/51f5bfe83178871fe2ee80df6b8e13ed54a2d897""><code>51f5bfe</code></a> Add GitHub Actions CI, test with 3.9 to 3.11 (<a href=""https://redirect.github.com/pyasn1/pyasn1-modules/issues/1"">#1</a>)</li>; <li><a href=""https://github.com/pyasn1/pyasn1-modules/commit/bdbcc5d9650a8e8382979f089df3307dd4121b49""><code>bdbcc5d</code></a> Bump up coverage percentage cut at tox</li>; <li><a href=""https://github.com/pyasn1/pyasn1-modules/commit/7c7e4add6cb9f1a47a2303f819c8472491f6ebbb""><code>7c7e4ad</code></a> Add support for RFC 8769 (<a href=""https://redirect.github.com/pyasn1/pyasn1-modules/issues/136"">#136</a>)</li>; <li><a href=""https://github.com/pyasn1/pyasn1-modules/commit/13ca0da0cc4d0703ca42113f607bde95cf0bfd9c""><code>13ca0da</code></a> Fix tox deps inheritance</li>; <li><a href=""https://github.com/pyasn1/pyasn1-modules/commit/00fa3b9d15c783389afee7887f5ba3738a005545""><code>00fa3b9</code></a> Run unittests across many Python versions</li>; <li>Additional commits viewable in <a href=""https://github.com/pyasn1/pyasn1-modules/compa",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12928:7962,test,test,7962,https://hail.is,https://github.com/hail-is/hail/pull/12928,1,['test'],['test']
Testability,"27745>; ##contig=<ID=chrUn_KI270753v1,length=62944>; ##contig=<ID=chrUn_KI270754v1,length=40191>; ##contig=<ID=chrUn_KI270755v1,length=36723>; ##contig=<ID=chrUn_KI270756v1,length=79590>; ##contig=<ID=chrUn_KI270757v1,length=71251>; ##contig=<ID=chrUn_GL000214v1,length=137718>; ##contig=<ID=chrUn_KI270742v1,length=186739>; ##contig=<ID=chrUn_GL000216v2,length=176608>; ##contig=<ID=chrUn_GL000218v1,length=161147>; ##contig=<ID=chrEBV,length=171823>; ##contig=<ID=hs38d1,length=10560522>; ##bcftools_pluginVersion=1.9+htslib-1.9; ##bcftools_pluginCommand=plugin fill-AN-AC; Date=Sat Dec 29 14:52:44 2018; ##ALT=<ID=NON_REF,Description=""Represents any possible alternative allele at this location"">; ##FORMAT=<ID=MIN_DP,Number=1,Type=Integer,Description=""Minimum DP observed within the GVCF block"">; ##FORMAT=<ID=PGT,Number=1,Type=String,Description=""Physical phasing haplotype information, describing how the alternate alleles are phased in relation to one another"">; ##FORMAT=<ID=PID,Number=1,Type=String,Description=""Physical phasing ID information, where each unique ID within a given sample (but not across samples) connects records within a phasing group"">; ##FORMAT=<ID=RGQ,Number=1,Type=Integer,Description=""Unconditional reference genotype confidence, encoded as a phred quality -10*log10 p(genotype call is wrong)"">; ##FORMAT=<ID=SB,Number=4,Type=Integer,Description=""Per-sample component statistics which comprise the Fisher's Exact Test to detect strand bias."">; ##GATKCommandLine=<ID=GenotypeGVCFs,CommandLine=""GenotypeGVCFs --output 3P5CH.new.vcf --use-new-qual-calculator true --annotation-group StandardAnnotation --annotation-group StandardHCAnnotation --dbsnp /home/fgc3/dbsnp/150/GRCh38/All_20170710.vcf.gz --variant 3P5CH.new.g.vcf.gz --reference /home/fgc3/10x/refdata-GRCh38-2.1.0/fasta/genome.fa --create-output-variant-index false --verbosity ERROR --annotate-with-num-discovered-alleles false --heterozygosity 0.001 --indel-heterozygosity 1.25E-4 --heterozygosity-stdev 0.01 ",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8469:22869,Test,Test,22869,https://hail.is,https://github.com/hail-is/hail/issues/8469,1,['Test'],['Test']
Testability,"280; 2. 25997 https://batch.hail.is/batches/8083195/jobs/27937. The pipeline runs two table collects to get sample information, then converts the matrix table to a table of ndarrays of the value `hl.int(hl.is_defined(mt.GT))`. The entries are getting subsetted, so there is skipping going on. In both cases, we are decoding the entry array when the corrupted block is discovered. In the first case, we are skipping an int (must be RGQ based on the etype and type). In the second case, we are decoding a string (must be FT). Since the error happens on a seemingly arbitrary partition, it seems likely this is related to our transient error handling. Both runs use a version of Hail after we fixed the broken transient error handling in GoogleStorageFS (run 1 used fcaafc533e, run 2 used 0.2.126 / ee77707f4f). ---. #### Path forward. If it *is* a transient error, we need to fix how we handle transient errors. Maybe our position handling logic is wrong? If it is *not* a transient error, maybe our skipping logic is wrong? FT appears immediately after RGQ and we know RGQ is getting skipped. Our implementation of `seek` for the compressed block buffers looks sketchy to me, but we're using PartitionNativeReader which does no seeking. Action items:; 1. Log every transient error.; 2. Log the file name and the offset on failure. ---. #### Debugging information. EType:; ```; +EBaseStruct{; `the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:+EArray[; EBaseStruct{; GT:EInt32,; GQ:EInt32,; RGQ:EInt32,; FT:EBinary,; AD:EArray[EInt32]}]}; ```; (zipped) Type:; ```; Struct{; locus:Locus(GRCh38),; alleles:Array[String],; filters:Set[String],; info:Struct{; AC:Array[Int32]},; `the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[; Struct{; GT:Call,; GQ:Int32,; FT:String,; AD:Array[Int32]}]}; ```; Source buffer spec:; ```; {""name"":""LEB128BufferSpec"",""child"":; {""name"":""BlockingBufferSpec"",""blockSize"":65536,""child"":; {""name"":""ZstdBlockBufferSpec"",""blockSize"":65536,""child"":; {""name"":""StreamBlockBuff",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13979#issuecomment-1834181623:1077,log,logic,1077,https://hail.is,https://github.com/hail-is/hail/issues/13979#issuecomment-1834181623,2,['log'],['logic']
Testability,"2:00:27.87+00:20""); record_bytes = sum((; ip_connection,; max(len('SRC'), len('DEST')),; 8,; 8,; 8,; date_time,; date_time,; )); assert record_bytes == 126. hours_per_month = 24 * 60; seconds_per_hour = 60 * 60. seconds_per_interval = 15 * 60; vms = 10000; sampling_rate = 0.5; connections_per_vm_per_aggregation_interval = 100. intervals_per_hour = seconds_per_hour / seconds_per_interval; records_per_hour = intervals_per_hour * vms * connections_per_vm_per_aggregation_interval * sampling_rate; bytes_per_hour = records_per_hour * record_bytes; bytes_per_month = bytes_per_hour * hours_per_month; GiB_per_month = bytes_per_month / 1024. / 1024 / 1024. USD_per_month = max(0, GiB_per_month - 50) * 0.5. print(GiB_per_month); print(USD_per_month); ```. This works out to 143 USD to run a 10,000 VM cluster 24 hours a day for 30 days. I suspect our average VM count in a month is closer to 10 which is within the free tier (340 MiB). I; might be wrong abou the connections per vm per aggregation interval, but this is straightforward to; monitor once we have the logs. For a sense of the cost landscape, these are all free:. 1. 1000 VMs.; 2. 500 VMs, with a sampling rate of 1.; 3. 200 VMs, with a sampling rate of 1, with an interval of 5 minutes.; 4. 10 VMs, with a sampling rate of 1, with an interval of 30 seconds. It's all linear, so if we need to halve the interval we can either change the sampling rate, reasses; our expected number of VM-hours, or adjust the service fee accordingly. We can also assess the landscape of fees necessary to cover costs (ignoring the free 50 GiB):. 1. 15 minute intervals, 0.5 sampling rate, 100 expected connections per vm per interval: 0.0000008; USD per core per hour. 2. 30 second intervals, 1.0 sampling rate, 100 expected connections per vm per interval: 0.00005 USD; per core per hour. 2. 5 second intervals, 1.0 sampling rate, 100 expected connections per vm per interval: 0.0003 USD; per core per hour. 2. 5 second intervals, 1.0 sampling rate, 1000 ex",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12883:3614,log,logs,3614,https://hail.is,https://github.com/hail-is/hail/pull/12883,1,['log'],['logs']
Testability,"2` <br> | No | Proof of Concept ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | Information Exposure <br/>[SNYK-PYTHON-CRYPTOGRAPHY-6126975](https://snyk.io/vuln/SNYK-PYTHON-CRYPTOGRAPHY-6126975) | `cryptography:` <br> `3.3.2 -> 42.0.2` <br> | No | Proof of Concept ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | NULL Pointer Dereference <br/>[SNYK-PYTHON-CRYPTOGRAPHY-6210214](https://snyk.io/vuln/SNYK-PYTHON-CRYPTOGRAPHY-6210214) | `cryptography:` <br> `3.3.2 -> 42.0.2` <br> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | Information Exposure <br/>[SNYK-PYTHON-REQUESTS-5595532](https://snyk.io/vuln/SNYK-PYTHON-REQUESTS-5595532) | `requests:` <br> `2.27.1 -> 2.31.0` <br> | No | No Known Exploit . Some vulnerabilities couldn't be fully fixed and so Snyk will still find them when the project is tested again. This may be because the vulnerability existed within more than one direct dependency, but not all of the affected dependencies could be upgraded. Check the changes in this PR to ensure they won't cause issues with your project. ------------. **Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open fix PRs.*. For more information: <img src=""https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiI0NmViNDQ4ZS1kYjUyLTRhMjEtYjU5Ni0zZTNhZDQyYWFlYTEiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjQ2ZWI0NDhlLWRiNTItNGEyMS1iNTk2LTNlM2FkNDJhYWVhMSJ9fQ=="" width=""0"" height=""0""/>; 🧐 [View latest project report](https://app.snyk.io/org/danking/project/5ecb4152-94d0-44ff-86c6-21e542bb123d?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr). 🛠 [Adjust project settings](https://app.snyk",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14296:8481,test,tested,8481,https://hail.is,https://github.com/hail-is/hail/pull/14296,1,['test'],['tested']
Testability,"2b-8777-e5f05e247b63/pyscripts_KndB0n.zip/gnomad_hail/slack_utils.py"", line 77, in try_slack; File ""/tmp/837e8bf7-96ab-442b-8777-e5f05e247b63/generate_qc_annotations.py"", line 194, in main; vds, sample_table = generate_family_stats(vds, fam_file); File ""/tmp/837e8bf7-96ab-442b-8777-e5f05e247b63/generate_qc_annotations.py"", line 134, in generate_family_stats; _, _, adj_per_sample, adj_per_variant = hl.mendel_errors(vds, ped); File ""<decorator-gen-616>"", line 2, in mendel_errors; File ""/tmp/837e8bf7-96ab-442b-8777-e5f05e247b63/hail-devel-48d0534b1b09.zip/hail/typecheck/check.py"", line 489, in _typecheck; File ""/tmp/837e8bf7-96ab-442b-8777-e5f05e247b63/hail-devel-48d0534b1b09.zip/hail/methods/family_methods.py"", line 205, in mendel_errors; File ""/usr/lib/spark/python/lib/py4j-0.10.4-src.zip/py4j/java_gateway.py"", line 1133, in __call__; File ""/tmp/837e8bf7-96ab-442b-8777-e5f05e247b63/hail-devel-48d0534b1b09.zip/hail/utils/java.py"", line 238, in deco; hail.utils.java.FatalError: AssertionError: assertion failed. Java stack trace:; java.lang.AssertionError: assertion failed; 	at scala.Predef$.assert(Predef.scala:156); 	at is.hail.rvd.OrderedRVDPartitioner.getPartitionPK(OrderedRVDPartitioner.scala:59); 	at is.hail.sparkextras.OrderedDependency$.getDependencies(OrderedRDD2.scala:22); 	at is.hail.sparkextras.OrderedJoinDistinctRDD2$$anonfun$getPartitions$1.apply(OrderedRDD2.scala:42); 	at is.hail.sparkextras.OrderedJoinDistinctRDD2$$anonfun$getPartitions$1.apply(OrderedRDD2.scala:39); 	at scala.Array$.tabulate(Array.scala:331); 	at is.hail.sparkextras.OrderedJoinDistinctRDD2.getPartitions(OrderedRDD2.scala:39); 	at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:252); 	at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:250); 	at scala.Option.getOrElse(Option.scala:121); 	at org.apache.spark.rdd.RDD.partitions(RDD.scala:250); 	at org.apache.spark.rdd.MapPartitionsRDD.getPartitions(MapPartitionsRDD.scala:35); 	at org.apache.spark.rdd.RDD$$anonfun",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3039:1322,Assert,AssertionError,1322,https://hail.is,https://github.com/hail-is/hail/issues/3039,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,2pfXIoSO&uploadType=resumable&upload_id=ADPycdvZ5HhnGfOKt5TE1qXWiHpqIpZnXVTYWuWUCXNPRF9HqyCB-4LvRsxNX6SUWRgk13pYrzYaa9-wXlvNZt1oct0ptaEz0bS3; chunkOffset: 16777216; chunkLength: 0; localOffset: 268435456; remoteOffset: 285212672; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.access$1000(BlobWriteChannel.java:35); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel$1.run(BlobWriteChannel.java:267); 		at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); 		at com.google.api.gax.retrying.DirectRetryingExecutor.submit(DirectRetryingExecutor.java:103); 		at is.hail.relocated.com.google.cloud.RetryHelper.run(RetryHelper.java:76); 		at is.hail.relocated.com.google.cloud.RetryHelper.runWithRetries(RetryHelper.java:50); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.flushBuffer(BlobWriteChannel.java:189); 		at is.hail.relocated.com.google.cloud.BaseWriteChannel.flush(BaseWriteChannel.java:112); 		at is.hail.relocated.com.google.cloud.BaseWriteChannel.write(BaseWriteChannel.java:139); 		at is.hail.io.fs.GoogleStorageFS$$anon$2.$anonfun$flush$1(GoogleStorageFS.scala:317); 		at is.hail.io.fs.GoogleStorageFS$$anon$2.doHandlingRequesterPays(GoogleStorageFS.scala:299); 		at is.hail.io.fs.GoogleStorageFS$$anon$2.flush(GoogleStorageFS.scala:317); 		at is.hail.io.fs.FSPositionedOutputStream.write(FS.scala:227); 		at java.io.DataOutputStream.write(DataOutputStream.java:107); 		at is.hail.fs.FSSuite.$anonfun$testSeekMoreThanMaxInt$1(FSSuite.scala:347); 		at is.hail.fs.FSSuite.$anonfun$testSeekMoreThanMaxInt$1$adapted(FSSuite.scala:341); 		at is.hail.utils.package$.using(package.scala:635); 		... 26 more. test is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt FAILURE; ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:9105,test,testSeekMoreThanMaxInt,9105,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,4,['test'],"['test', 'testSeekMoreThanMaxInt']"
Testability,"2})), (writeCtx,Ref(__iruid_373,str)))),AssertSameLength),Literal(struct{},[]),__iruid_370,__iruid_371,WritePartition(Let(__iruid_374,GetField(Ref(__iruid_370,struct{oldCtx: struct{start: int32, end: int32}, writeCtx: str}),oldCtx),StreamMap(StreamRange(GetField(Ref(__iruid_374,struct{start: int32, end: int32}),start),GetField(Ref(__iruid_374,struct{start: int32, end: int32}),end),I32(1),false),__iruid_375,MakeStruct(ArrayBuffer((idx,Ref(__iruid_375,int32)))))),Apply(concat,WrappedArray(),ArrayBuffer(GetField(Ref(__iruid_370,struct{oldCtx: struct{start: int32, end: int32}, writeCtx: str}),writeCtx), UUID4(__iruid_290)),str),PartitionNativeWriter({""name"":""TypedCodecSpec"",""_eType"":""+EBaseStruct{idx:+EInt32}"",""_vType"":""Struct{idx:Int32}"",""_bufferSpec"":{""name"":""LEB128BufferSpec"",""child"":{""name"":""BlockingBufferSpec"",""blockSize"":32768,""child"":{""name"":""LZ4HCBlockBufferSpec"",""blockSize"":32768,""child"":{""name"":""StreamBlockBufferSpec""}}}}},gs://danking/workshop-test/1kg.mt/rows/parts/,Some((gs://danking/workshop-test/1kg.mt/index/,+PCStruct{idx:+PInt32})),None)),Some(TableStageDependency(WrappedArray()))),Begin(ArrayBuffer(WriteMetadata(MakeArray(ArrayBuffer(GetField(WritePartition(MakeStream(ArrayBuffer(Literal(struct{},[])),stream<struct{}>,false),Str(""part-0""),PartitionNativeWriter({""name"":""TypedCodecSpec"",""_eType"":""+EBaseStruct{}"",""_vType"":""Struct{}"",""_bufferSpec"":{""name"":""LEB128BufferSpec"",""child"":{""name"":""BlockingBufferSpec"",""blockSize"":32768,""child"":{""name"":""LZ4HCBlockBufferSpec"",""blockSize"":32768,""child"":{""name"":""StreamBlockBufferSpec""}}}}},gs://danking/workshop-test/1kg.mt/globals/parts/,None,None)),filePath)),array<str>),RVDSpecWriter(gs://danking/workshop-test/1kg.mt/globals,RVDSpecMaker({""name"":""TypedCodecSpec"",""_eType"":""+EBaseStruct{}"",""_vType"":""Struct{}"",""_bufferSpec"":{""name"":""LEB128BufferSpec"",""child"":{""name"":""BlockingBufferSpec"",""blockSize"":32768,""child"":{""name"":""LZ4HCBlockBufferSpec"",""blockSize"":32768,""child"":{""name"":""StreamBlockBufferSpec""}}}}},WrappedArray()",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9856#issuecomment-772011601:4318,test,test,4318,https://hail.is,https://github.com/hail-is/hail/issues/9856#issuecomment-772011601,1,['test'],['test']
Testability,"2})), (writeCtx,Ref(__iruid_469,str)))),AssertSameLength),Literal(struct{},[]),__iruid_466,__iruid_467,WritePartition(Let(__iruid_470,GetField(Ref(__iruid_466,struct{oldCtx: struct{start: int32, end: int32}, writeCtx: str}),oldCtx),StreamMap(StreamRange(GetField(Ref(__iruid_470,struct{start: int32, end: int32}),start),GetField(Ref(__iruid_470,struct{start: int32, end: int32}),end),I32(1),false),__iruid_471,MakeStruct(ArrayBuffer((idx,Ref(__iruid_471,int32)))))),Apply(concat,WrappedArray(),ArrayBuffer(GetField(Ref(__iruid_466,struct{oldCtx: struct{start: int32, end: int32}, writeCtx: str}),writeCtx), UUID4(__iruid_386)),str),PartitionNativeWriter({""name"":""TypedCodecSpec"",""_eType"":""+EBaseStruct{idx:+EInt32}"",""_vType"":""Struct{idx:Int32}"",""_bufferSpec"":{""name"":""LEB128BufferSpec"",""child"":{""name"":""BlockingBufferSpec"",""blockSize"":32768,""child"":{""name"":""LZ4HCBlockBufferSpec"",""blockSize"":32768,""child"":{""name"":""StreamBlockBufferSpec""}}}}},gs://danking/workshop-test/1kg.mt/rows/parts/,Some((gs://danking/workshop-test/1kg.mt/index/,+PCStruct{idx:+PInt32})),None)),Some(TableStageDependency(WrappedArray()))),Begin(ArrayBuffer(WriteMetadata(MakeArray(ArrayBuffer(GetField(WritePartition(MakeStream(ArrayBuffer(Literal(struct{},[])),stream<struct{}>,false),Str(""part-0""),PartitionNativeWriter({""name"":""TypedCodecSpec"",""_eType"":""+EBaseStruct{}"",""_vType"":""Struct{}"",""_bufferSpec"":{""name"":""LEB128BufferSpec"",""child"":{""name"":""BlockingBufferSpec"",""blockSize"":32768,""child"":{""name"":""LZ4HCBlockBufferSpec"",""blockSize"":32768,""child"":{""name"":""StreamBlockBufferSpec""}}}}},gs://danking/workshop-test/1kg.mt/globals/parts/,None,None)),filePath)),array<str>),RVDSpecWriter(gs://danking/workshop-test/1kg.mt/globals,RVDSpecMaker({""name"":""TypedCodecSpec"",""_eType"":""+EBaseStruct{}"",""_vType"":""Struct{}"",""_bufferSpec"":{""name"":""LEB128BufferSpec"",""child"":{""name"":""BlockingBufferSpec"",""blockSize"":32768,""child"":{""name"":""LZ4HCBlockBufferSpec"",""blockSize"":32768,""child"":{""name"":""StreamBlockBufferSpec""}}}}},WrappedArray()",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9856#issuecomment-756194693:4038,test,test,4038,https://hail.is,https://github.com/hail-is/hail/issues/9856#issuecomment-756194693,1,['test'],['test']
Testability,"3 install -U \; hail \; git+https://github.com/broadinstitute/gnomad_methods.git \; git+https://github.com/broadinstitute/gnomad_qc.git. git clone git@github.com:broadinstitute/gnomad-readviz.git; ```. I applied this patch:; ```diff; diff --git a/step1__select_samples.py b/step1__select_samples.py; index c159207..9ba1812 100644; --- a/step1__select_samples.py; +++ b/step1__select_samples.py; @@ -38,14 +38,7 @@ def hemi_expr(mt):; ; def main(args):; ; - hl.init(log=""/select_samples"", default_reference=""GRCh38"", idempotent=True, tmp_dir=args.temp_bucket); - meta_ht = hl.import_table(args.sample_metadata_tsv, force_bgz=True); - meta_ht = meta_ht.key_by(""s""); - meta_ht = meta_ht.filter(hl.is_defined(meta_ht.cram_path) & hl.is_defined(meta_ht.crai_path), keep=True); - meta_ht = meta_ht.repartition(1000); - meta_ht = meta_ht.checkpoint(; - re.sub("".tsv(.b?gz)?"", """", args.sample_metadata_tsv) + "".ht"", overwrite=True, _read_if_exists=True); -; + hl.init(log=""/tmp/select_samples"", default_reference=""GRCh38"", idempotent=True, tmp_dir=args.temp_bucket); vds = gnomad_v4_genotypes.vds(); ; # see https://github.com/broadinstitute/ukbb_qc/pull/227/files; @@ -55,19 +48,8 @@ def main(args):; ; v4_qc_meta_ht = meta.ht(); ; - mt = vds.variant_data; - #mt = vds.variant_data._filter_partitions([41229]); -; - mt = mt.filter_cols(v4_qc_meta_ht[mt.s].release); -; - meta_join = meta_ht[mt.s]; - mt = mt.annotate_cols(; - meta=hl.struct(; - sex_karyotype=meta_join.sex_karyotype,; - cram=meta_join.cram_path,; - crai=meta_join.crai_path,; - ); - ); + #mt = vds.variant_data; + mt = vds.variant_data._filter_partitions([41229]); ; logger.info(""Adjusting samples' sex ploidy""); lgt_expr = hl.if_else(; @@ -88,9 +70,9 @@ def main(args):; logger.info(""Filter variants with at least one non-ref GT""); mt = mt.filter_rows(hl.agg.any(mt.GT.is_non_ref())); ; - #logger.info(f""Saving checkpoint""); - #mt = mt.checkpoint(os.path.join(args.temp_bucket, ""readviz_select_samples_checkpoint1.vds""),; - # overwrite=Tru",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13248#issuecomment-1703383664:1198,log,log,1198,https://hail.is,https://github.com/hail-is/hail/issues/13248#issuecomment-1703383664,1,['log'],['log']
Testability,3 | test | test | 6 | 15 | 45440 |; | 2023-07-13 | test | test | 6 | 16 | 79616 |; | 2023-07-13 | test | test | 6 | 17 | 604928 |; | 2023-07-13 | test | test | 6 | 18 | 78016 |; | 2023-07-13 | test | test | 6 | 19 | 87040 |; | 2023-07-13 | test | test | 6 | 20 | 89792 |; | 2023-07-13 | test | test | 6 | 21 | 188736 |; | 2023-07-13 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:9271,test,test,9271,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,3 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | te,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:9602,test,test,9602,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,3 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:9886,test,test,9886,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,3 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:9933,test,test,9933,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,3 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:10169,test,test,10169,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,3 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | te,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:10549,test,test,10549,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,3 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | t,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:10596,test,test,10596,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,3 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | test | 6 | 66 | 90752 |; | 2023-07-13 | test | test | 6 | 67 | 68928 |; | 2023-07-13 | test | test | 6 | 68 | 91712 |; | 2023-07-13 | test | test | 6 | 69 | 93632 |; | 2023-07-13 | test | test | 6 | 70 | 118784 |; | 2023-07-13 | test | test | 6 | 72 | 76544 |; | 2023-07-13 | test | test | 6 | 73 | 145472 |; | 2023-07-13 | test | test | 6 | 74 | 47040 |; | 2023-07-13 | test | test | 6 | 77 | 226944 |; | 2023-07-13 | test | test | 6 | 79 | 157568 |; | 2023-07-13 | test | test | 6 | 80 | 37120 |; | 2023-07-13 | test | test | 6 | 81 | 106496 |; | 2023-07-13 | test | test | 6 | 82 | 494464 |; | 2023-07-13 | test | test | 6 | 83 | 79424 |; | 2023-07-13 | test | test | 6 | 85 | 148608 |; | 2023-07-13 | test | test | 6 | 86 | 52288 |; | 2023-07-13 | test | test | 6 | 87 | 181696 |; | 2023-07-13 | test | test | 6 | 89 | 39232 |; | 2023-07-13 | test | test | 6 | 90 | 90624 |; | 2023-07-13 | test | test | 6 | 92 | 133504 |; | 2023-07-13 | test | test | 6 | 93 | 156672 |; | 2023-07-13 | test | test | 6 | 95 | 190528 |; | 2023-07-13 | test | test | 6 | 96 | 38016 |; | 2023-07-13 | test | test | 6 | 98 | 99392 |; | 2023-07-13 | test | test | 6 | 99 | 109568 |; | 2023-07-13 | test | test | 6 | 100 | 92928 |; | 2023-07-13 | test | test | 6 | 101 | 75712 |; | 2023-07-13 | test | test | 6 | 105 | 50048 |; | 2023-07-13 | test | test | 6 | 107 | 41472 |; | 2023-07-13 | test | test | 6 | 109 | 30208 |; | 2023-07-13 | test | test | 6 | 110 | 72064 |; | 2023-07-13 | test | test | 6 | 111 | 36672 |; | 2023-07-13 | test | test | 6 | 113 | 32832 |; | 2023-07-13 | t,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:10644,test,test,10644,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,3); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:122); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144); Caused by: java.lang.reflect.InvocationTargetException; at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.apache.sp,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:2208,Test,TestNG,2208,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['Test'],['TestNG']
Testability,"3.8/dist-packages/hail/backend/service_backend.py:509: in _async_execute; _, resp, timings = await self._rpc('execute(...)', inputs, ir=ir, progress=progress); /usr/local/lib/python3.8/dist-packages/hail/backend/service_backend.py:451: in _rpc; result_bytes = await retry_transient_errors(self._read_output, ir, iodir + '/out'); /usr/local/lib/python3.8/dist-packages/hailtop/utils/utils.py:781: in retry_transient_errors; return await retry_transient_errors_with_debug_string('', 0, f, *args, **kwargs); /usr/local/lib/python3.8/dist-packages/hailtop/utils/utils.py:794: in retry_transient_errors_with_debug_string; return await f(*args, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . self = <hail.backend.service_backend.ServiceBackend object at 0x7ff6aa3b15b0>; ir = <hail.ir.ir.MakeTuple object at 0x7ff6a73b8d30>; output_uri = 'hail-az://haildevtest/test/tmp/hail/mGZ0y8JSUQM6CVs20XzdIu/eLwQUTyLRv/out'. async def _read_output(self, ir: Optional[BaseIR], output_uri: str) -> bytes:; assert self._batch; ; try:; driver_output = await self._async_fs.open(output_uri); except FileNotFoundError as exc:; raise FatalError('Hail internal error. Please contact the Hail team and provide the following information.\n\n' + yamlx.dump({; 'service_backend_debug_info': self.debug_info(),; 'batch_debug_info': await self._batch.debug_info(); })) from exc; ; async with driver_output as outfile:; success = await read_bool(outfile); if success:; return await read_bytes(outfile); ; short_message = await read_str(outfile); expanded_message = await read_str(outfile); error_id = await read_int(outfile); ; reconstructed_error = fatal_error_from_java_error_triplet(short_message, expanded_message, error_id); if ir is None:; raise reconstructed_error; > raise reconstructed_error.maybe_user_error(ir); E hail.utils.java.FatalError: RuntimeException: Stream is already closed.; E ; E Java stack trace:; E java.util.concurrent.ExecutionException: java.lang.RuntimeEx",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12976:12789,assert,assert,12789,https://hail.is,https://github.com/hail-is/hail/issues/12976,1,['assert'],['assert']
Testability,"3.8/site-packages/hail/experimental/datasets.py:115, in load_dataset(name, version, reference_genome, region, cloud); 107 raise ValueError(f'Region {repr(region)} not available for dataset'; 108 f' {repr(name)} on cloud platform {repr(cloud)}.\n'; 109 f'Available regions: {regions}.'); 111 path = [dataset['url'][cloud][region]; 112 for dataset in datasets[name]['versions']; 113 if all([dataset['version'] == version,; 114 dataset['reference_genome'] == reference_genome])]; --> 115 assert len(path) == 1; 116 path = path[0]; 117 if path.startswith('s3://'):. AssertionError: ; ```. I'm a new Hail user and don't have the full context here, but it seems like there are at least three problems:. 1. An assert failed in production code, which indicates either the presence of a bug or an incorrect use of assert (e.g. using assert to check for value errors).; 2. The assert has no corresponding error message, so the user learns that something has gone wrong but can't easily tell what.; 3. The assert is bare. Bare asserts can get optimized out of code in ways that are difficult to foresee in advance, and are generally deprecated in favor of the `if error_condition: raise AssertionError(...)` pattern (see: https://discuss.python.org/t/stop-ignoring-asserts-when-running-in-optimized-mode/13132). **The Big Picture**. The bare assert pattern is used over 3k times in Hail. To be fair, many of these usages occur in test directories, where they're fine. But they also occur in application code, and often in the dangerous form `assert(expr1, expr2)` which will never fail (because a tuple with two falsy elements is truthy in python). These asserts are never actually getting checked. . Fixing all of them would be a heavy lift. One compromise solution might be to add a bare assert rule to the linter (e.g. https://pypi.org/project/flake8-assert-msg/). This would prevent the introduction of further bare asserts to the codebase, and encourage authors to clean up existing bare asserts on files t",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12952:1402,assert,assert,1402,https://hail.is,https://github.com/hail-is/hail/issues/12952,1,['assert'],['assert']
Testability,"3/release-notes.html. Starting a Gradle Daemon (subsequent builds will be faster). > Configure project :; WARNING: Hail primarily tested with Spark 3.3.0, use other versions at your own risk. > Task :shadedazure:compileJava NO-SOURCE; > Task :shadedazure:processResources NO-SOURCE; > Task :shadedazure:classes UP-TO-DATE; > Task :shadedazure:shadowJar; > Task :compileJava NO-SOURCE; > Task :compileScala; > Task :processResources; > Task :classes; > Task :shadowJar. BUILD SUCCESSFUL in 4m 20s; 4 actionable tasks: 4 executed; cp -f build/libs/hail-all-spark.jar python/hail/backend/hail-all-spark.jar; rm -rf build/deploy; mkdir -p build/deploy; mkdir -p build/deploy/src; cp ../README.md build/deploy/; rsync -r \; --exclude '.eggs/' \; --exclude '.pytest_cache/' \; --exclude '__pycache__/' \; --exclude 'benchmark_hail/' \; --exclude '.mypy_cache/' \; --exclude 'docs/' \; --exclude 'dist/' \; --exclude 'test/' \; --exclude '*.log' \; python/ build/deploy/; # Clear the bdist build cache before building the wheel; cd build/deploy; rm -rf build; python3 setup.py -q sdist bdist_wheel; WARNING: The wheel package is not available.; WARNING: The wheel package is not available.; installing to build/bdist.linux-x86_64/wheel; creating build/bdist.linux-x86_64/wheel/hail-0.2.124.dist-info/WHEEL; creating 'dist/hail-0.2.124-py3-none-any.whl' and adding 'build/bdist.linux-x86_64/wheel' to it; adding 'hail/__init__.py'; adding 'hail/builtin_references.py'; adding 'hail/conftest.py'; adding 'hail/context.py'; adding 'hail/hail_logging.py'; adding 'hail/hail_pip_version'; adding 'hail/hail_revision'; adding 'hail/hail_version'; adding 'hail/matrixtable.py'; adding 'hail/table.py'; adding 'hail/backend/__init__.py'; adding 'hail/backend/backend.py'; adding 'hail/backend/hail-all-spark.jar'; adding 'hail/backend/local_backend.py'; adding 'hail/backend/py4j_backend.py'; adding 'hail/backend/service_backend.py'; adding 'hail/backend/spark_backend.py'; adding 'hail/experimental/__init__.py'; a",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221:16768,log,log,16768,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221,1,['log'],['log']
Testability,"315"">#315</a>) (<a href=""https://github.com/googleapis/python-logging/commit/c63250399fcd6e1317d341e98fab11095c443e5e"">c632503</a>)</li>; <li>make logging API more friendly to use (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/422"">#422</a>) (<a href=""https://github.com/googleapis/python-logging/commit/83d9ca8521fe7c470bb6755a48a97496515d7abc"">83d9ca8</a>)</li>; <li>support json logs (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/316"">#316</a>) (<a href=""https://github.com/googleapis/python-logging/commit/5267152574b2ee96eb6f5c536a762f58bd2f886e"">5267152</a>)</li>; <li>support string-encoded json (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/339"">#339</a>) (<a href=""https://github.com/googleapis/python-logging/commit/6fa17735fe3edb45483ec5e3abd1f53c24ffa881"">6fa1773</a>)</li>; <li>trace improvements (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/450"">#450</a>) (<a href=""https://github.com/googleapis/python-logging/commit/e0c5fc02160ae87faf4ba5c2b62be86de6b02cf3"">e0c5fc0</a>)</li>; </ul>; <h3>Bug Fixes</h3>; <ul>; <li>allow reading logs from non-project paths (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/444"">#444</a>) (<a href=""https://github.com/googleapis/python-logging/commit/97e32b67603553fe350b6327455fc9f80b8aa6ce"">97e32b6</a>)</li>; <li>api consistency between HTTP and Gapic layers (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/375"">#375</a>) (<a href=""https://github.com/googleapis/python-logging/commit/e1506fa9030776353878048ce562c53bf6ccf7bf"">e1506fa</a>)</li>; </ul>; <h3>Miscellaneous Chores</h3>; <ul>; <li>deprecate AppEngineHandler and ContainerEngineHandler (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/310"">#310</a>) (<a href=""https://github.com/googleapis/python-logging/commit/e3cac888d40bf67af11e57b74615b0c3b8",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11574:3242,log,logging,3242,https://hail.is,https://github.com/hail-is/hail/pull/11574,2,['log'],['logging']
Testability,31ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23) ~[scala-library-2.12.15.jar:?]; 	at is.hail.services.package$.retryTransientErrors(package.scala:182) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.close(GoogleStorageFS.scala:308) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at java.io.FilterOutputStream.close(FilterOutputStream.java:159) ~[?:1.8.0_382]; 	at is.hail.utils.package$.using(package.scala:677) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.FS.writePDOS(FS.scala:441) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.FS.writePDOS$(FS.scala:440) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.RouterFS.writePDOS(RouterFS.scala:3) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Worker$.$anonfun$main$4(Worker.scala:124) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Worker$.$anonfun$main$4$adapted(Worker.scala:124) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Worker$.$anonfun$main$13(Worker.scala:178) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23) ~[scala-library-2.12.15.jar:?]; 	at is.hail.services.package$.retryTransientErrors(package.scala:182) ~[gs:__hail-test-ezlis_,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:14091,test,test-,14091,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['test-']
Testability,"32b67603553fe350b6327455fc9f80b8aa6ce"">97e32b6</a>)</li>; <li>api consistency between HTTP and Gapic layers (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/375"">#375</a>) (<a href=""https://github.com/googleapis/python-logging/commit/e1506fa9030776353878048ce562c53bf6ccf7bf"">e1506fa</a>)</li>; </ul>; <h3>Miscellaneous Chores</h3>; <ul>; <li>deprecate AppEngineHandler and ContainerEngineHandler (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/310"">#310</a>) (<a href=""https://github.com/googleapis/python-logging/commit/e3cac888d40bf67af11e57b74615b0c3b8e8aa3e"">e3cac88</a>)</li>; </ul>; <h3>Documentation</h3>; <ul>; <li>update usage guide for v3.0.0 (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/456"">#456</a>) (<a href=""https://github.com/googleapis/python-logging/commit/8a67b73cdfcb9da545671be6cf59c724360b1544"">8a67b73</a>)</li>; </ul>; <h2><a href=""https://www.github.com/googleapis/python-logging/compare/v2.6.0...v2.7.0"">2.7.0</a> (2021-11-02)</h2>; <h3>Features</h3>; <ul>; <li>add context manager support in client (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/415"">#415</a>) (<a href=""https://www.github.com/googleapis/python-logging/commit/f5af16439807a0954ee78fa91cb69b9493b80176"">f5af164</a>)</li>; <li>added support for iam AuditData proto (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/396"">#396</a>) (<a href=""https://www.github.com/googleapis/python-logging/commit/e3a1eba74dd8b67bcc73a78f784189ef2a9927c2"">e3a1eba</a>)</li>; <li>use structured logging on GCF with python 3.7 (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/434"">#434</a>) (<a href=""https://www.github.com/googleapis/python-logging/commit/5055919f70c82b38de6d1fa7f1df6006865a857b"">5055919</a>)</li>; </ul>; <h3>Bug Fixes</h3>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11574:10071,log,logging,10071,https://hail.is,https://github.com/hail-is/hail/pull/11574,1,['log'],['logging']
Testability,357); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); 	at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:123); Caused by: java.lang.ArrayIndexOutOfBoundsException: 3; 	at scala.collection.mutable.WrappedArray$ofRef.apply(WrappedArray.scala:127); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33$$anonfun$apply$19.getKey$1(OrderingSuite.scala:345); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33$$anonfun$apply$19.apply(OrderingSuite.scala:347); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33$$anonfun$apply$19.apply(OrderingSuite.scala:318); 	at is.hail.utils.package$.using(pac,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5630:1579,test,testng,1579,https://hail.is,https://github.com/hail-is/hail/issues/5630,1,['test'],['testng']
Testability,"360b1544""><code>8a67b73</code></a> docs: update usage guide for v3.0.0 (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/456"">#456</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/e0c5fc02160ae87faf4ba5c2b62be86de6b02cf3""><code>e0c5fc0</code></a> feat: trace improvements (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/450"">#450</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/97e32b67603553fe350b6327455fc9f80b8aa6ce""><code>97e32b6</code></a> fix: allow reading logs from non-project paths (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/444"">#444</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/a760e02371a55d6262e42de9e0222fffa2c7192b""><code>a760e02</code></a> feat: add json_fields extras argument for adding to jsonPayload (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/447"">#447</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/83d9ca8521fe7c470bb6755a48a97496515d7abc""><code>83d9ca8</code></a> feat!: make logging API more friendly to use (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/422"">#422</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/818213e143d6a1941211a48e0b23069a426ac300""><code>818213e</code></a> feat: avoid importing grpc when explicitly disabled (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/416"">#416</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/e1506fa9030776353878048ce562c53bf6ccf7bf""><code>e1506fa</code></a> fix!: api consistency between HTTP and Gapic layers (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/375"">#375</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/6fa17735fe3edb45483ec5e3abd1f53c24ffa881""><code>6fa1773</code></a>",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11574:12749,log,logging,12749,https://hail.is,https://github.com/hail-is/hail/pull/11574,1,['log'],['logging']
Testability,"37</a></li>; <li>Fix typing errors with recent versions of mypy <a href=""https://redirect.github.com/pytest-dev/pytest-asyncio/issues/769"">#769</a></li>; <li>Prevent DeprecationWarning about internal use of <code>asyncio.get_event_loop()</code> from affecting test cases <a href=""https://redirect.github.com/pytest-dev/pytest-asyncio/issues/757"">#757</a></li>; </ul>; <h2>Known issues</h2>; <p>As of v0.23, pytest-asyncio attaches an asyncio event loop to each item of the test suite (i.e. session, packages, modules, classes, functions) and allows tests to be run in those loops when marked accordingly. Pytest-asyncio currently assumes that async fixture scope is correlated with the new event loop scope. This prevents fixtures from being evaluated independently from the event loop scope and breaks some existing test suites (see <a href=""https://redirect.github.com/pytest-dev/pytest-asyncio/issues/706"">#706</a>). For example, a test suite may require all fixtures and tests to run in the same event loop, but have async fixtures that are set up and torn down for each module. If you're affected by this issue, please continue using the v0.21 release, until it is resolved.</p>; <h2>pytest-asyncio 0.23.5</h2>; <h1>0.23.5 (2024-02-09)</h1>; <ul>; <li>Declare compatibility with pytest 8 <a href=""https://redirect.github.com/pytest-dev/pytest-asyncio/issues/737"">#737</a></li>; <li>Fix typing errors with recent versions of mypy <a href=""https://redirect.github.com/pytest-dev/pytest-asyncio/issues/769"">#769</a></li>; <li>Prevent DeprecationWarning about internal use of <code>asyncio.get_event_loop()</code> from affecting test cases <a href=""https://redirect.github.com/pytest-dev/pytest-asyncio/issues/757"">#757</a></li>; </ul>; <h2>Known issues</h2>; <p>As of v0.23, pytest-asyncio attaches an asyncio event loop to each item of the test suite (i.e. session, packages, modules, classes, functions) and allows tests to be run in those loops when marked accordingly. Pytest-asyncio currently a",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14507:2421,test,test,2421,https://hail.is,https://github.com/hail-is/hail/pull/14507,2,['test'],"['test', 'tests']"
Testability,"37</a></li>; <li>Fix typing errors with recent versions of mypy <a href=""https://redirect.github.com/pytest-dev/pytest-asyncio/issues/769"">#769</a></li>; <li>Prevent DeprecationWarning about internal use of <code>asyncio.get_event_loop()</code> from affecting test cases <a href=""https://redirect.github.com/pytest-dev/pytest-asyncio/issues/757"">#757</a></li>; </ul>; <h2>Known issues</h2>; <p>As of v0.23, pytest-asyncio attaches an asyncio event loop to each item of the test suite (i.e. session, packages, modules, classes, functions) and allows tests to be run in those loops when marked accordingly. Pytest-asyncio currently assumes that async fixture scope is correlated with the new event loop scope. This prevents fixtures from being evaluated independently from the event loop scope and breaks some existing test suites (see <a href=""https://redirect.github.com/pytest-dev/pytest-asyncio/issues/706"">#706</a>). For example, a test suite may require all fixtures and tests to run in the same event loop, but have async fixtures that are set up and torn down for each module. If you're affected by this issue, please continue using the v0.21 release, until it is resolved.</p>; <h2>pytest-asyncio 0.23.5a0</h2>; <h1>0.23.5 (UNRELEASED)</h1>; <ul>; <li>Declare compatibility with pytest 8 <a href=""https://redirect.github.com/pytest-dev/pytest-asyncio/issues/737"">#737</a></li>; <li>Fix typing errors with recent versions of mypy <a href=""https://redirect.github.com/pytest-dev/pytest-asyncio/issues/769"">#769</a></li>; </ul>; <h2>Known issues</h2>; <p>As of v0.23, pytest-asyncio attaches an asyncio event loop to each item of the test suite (i.e. session, packages, modules, classes, functions) and allows tests to be run in those loops when marked accordingly. Pytest-asyncio currently assumes that async fixture scope is correlated with the new event loop scope. This prevents fixtures from being evaluated independently from the event loop scope and breaks some existing test suites (see <a",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14507:3791,test,test,3791,https://hail.is,https://github.com/hail-is/hail/pull/14507,2,['test'],"['test', 'tests']"
Testability,"38a9/pyscripts_tyqA4p.zip/gnomad_hail/utils/generic.py"", line 36, in write_temp_gcs; t.write(temp_path, overwrite=True); File ""/tmp/d30041623ee542dca820faecd29538a9/hail-devel-cb98819b64ad.zip/hail/typecheck/check.py"", line 547, in wrapper; return f(*args_, **kwargs_); File ""/tmp/d30041623ee542dca820faecd29538a9/hail-devel-cb98819b64ad.zip/hail/table.py"", line 1183, in write; self._jt.write(output, overwrite, stage_locally, _codec_spec); File ""/usr/lib/spark/python/lib/py4j-0.10.4-src.zip/py4j/java_gateway.py"", line 1133, in __call__; answer, self.gateway_client, self.target_id, self.name); File ""/tmp/d30041623ee542dca820faecd29538a9/hail-devel-cb98819b64ad.zip/hail/utils/java.py"", line 200, in deco; 'Error summary: %s' % (deepest, full, hail.__version__, deepest)) from None; hail.utils.java.FatalError: AssertionError: assertion failed: type mismatch:; name: global; actual: +Struct{}; expect: Struct{}. Java stack trace:; java.lang.AssertionError: assertion failed: type mismatch:; name: global; actual: +Struct{}; expect: Struct{}; at scala.Predef$.assert(Predef.scala:170); at is.hail.expr.ir.TypeCheck$.apply(TypeCheck.scala:55); at is.hail.expr.ir.TypeCheck$.is$hail$expr$ir$TypeCheck$$check$1(TypeCheck.scala:17); at is.hail.expr.ir.TypeCheck$.apply(TypeCheck.scala:186); at is.hail.expr.ir.Interpret$.apply(Interpret.scala:39); at is.hail.expr.ir.MatrixMapGlobals.execute(MatrixIR.scala:1636); at is.hail.expr.ir.MatrixMapGlobals.execute(MatrixIR.scala:1634); at is.hail.expr.ir.MatrixMapRows.execute(MatrixIR.scala:1147); at is.hail.expr.ir.MatrixMapGlobals.execute(MatrixIR.scala:1634); at is.hail.expr.ir.MatrixMapGlobals.execute(MatrixIR.scala:1634); at is.hail.expr.ir.MatrixMapCols.execute(MatrixIR.scala:1364); at is.hail.expr.ir.MatrixMapGlobals.execute(MatrixIR.scala:1634); at is.hail.expr.ir.MatrixMapGlobals.execute(MatrixIR.scala:1634); at is.hail.expr.ir.MatrixMapCols.execute(MatrixIR.scala:1364); at is.hail.expr.ir.MatrixMapGlobals.execute(MatrixIR.scala:1634); at",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4127:1430,Assert,AssertionError,1430,https://hail.is,https://github.com/hail-is/hail/issues/4127,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,3931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSession.query(JsonResumableSession.java:57) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSession.lambda$put$0(JsonResumableSession.java:73) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.Retrying.lambda$run$0(Retrying.java:102) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at com.google.api.gax.retrying.DirectRetryingExecutor.submit(DirectRetryingExecutor.java:103) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.RetryHelper.run(RetryHelper.java:76) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.RetryHelper.runWithRetries(RetryHelper.java:50) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.Retrying.run(Retrying.java:99) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.JsonResumableSession.put(JsonResumableSession.java:68) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.ApiaryUnbufferedWritableByteChannel.internalWrite(ApiaryUnbufferedWritableByteChannel.java:114) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.ApiaryUnbufferedWr,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:10096,test,test-,10096,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['test-']
Testability,3ab-abb4-d67a0978ee46/791.suffix; 	at org.scalatest.Assertions.newAssertionFailedException(Assertions.scala:528); 	at org.scalatest.Assertions.newAssertionFailedException$(Assertions.scala:527); 	at org.scalatest.testng.TestNGSuite.newAssertionFailedException(TestNGSuite.scala:67); 	at org.scalatest.Assertions$AssertionsHelper.macroAssert(Assertions.scala:501); 	at is.hail.io.fs.FSSuite.largeDirectoryOperations(FSSuite.scala:413); 	at is.hail.io.fs.FSSuite.largeDirectoryOperations$(FSSuite.scala:398); 	at is.hail.io.fs.GoogleStorageFSSuite.largeDirectoryOperations(GoogleStorageFSSuite.scala:10); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057);,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13827#issuecomment-1769490277:1269,test,testng,1269,https://hail.is,https://github.com/hail-is/hail/issues/13827#issuecomment-1769490277,1,['test'],['testng']
Testability,"3c06d30b91b37a118536d9d424e0a8b893e78a6e""><code>3c06d30</code></a> Finalize</li>; <li><a href=""https://github.com/jaraco/zipp/commit/48b72b8db6ae5f7712323aca6b340744db15f576""><code>48b72b8</code></a> Merge pull request <a href=""https://redirect.github.com/jaraco/zipp/issues/113"">#113</a> from jaraco/feature/glob-perf</li>; <li><a href=""https://github.com/jaraco/zipp/commit/171fa98236a1adfc316c3bc5cdc5eaa4b9548424""><code>171fa98</code></a> Add news fragment.</li>; <li><a href=""https://github.com/jaraco/zipp/commit/ac8ea7a5b83a38215826be08f56df066f2532ec1""><code>ac8ea7a</code></a> Bypass ZipFile.namelist in glob. Closes <a href=""https://redirect.github.com/jaraco/zipp/issues/106"">#106</a>.</li>; <li><a href=""https://github.com/jaraco/zipp/commit/4cceb497c278ad0ecb11a9472e58f4130f5ff16b""><code>4cceb49</code></a> Add special accounting for pypy when computing the stack level for text encod...</li>; <li><a href=""https://github.com/jaraco/zipp/commit/2ec3ed8567d0842675c38fd8ef0a28db668e602d""><code>2ec3ed8</code></a> Add another test at another magnitude.</li>; <li><a href=""https://github.com/jaraco/zipp/commit/d9bf5aab8b39c6a124d9499ae0315d3bf2ac2f46""><code>d9bf5aa</code></a> Fix name generator for width=1</li>; <li>Additional commits viewable in <a href=""https://github.com/jaraco/zipp/compare/v3.17.0...v3.18.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=zipp&package-manager=pip&previous-version=3.17.0&new-version=3.18.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summa",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14473:2512,test,test,2512,https://hail.is,https://github.com/hail-is/hail/pull/14473,1,['test'],['test']
Testability,3eb0)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[0]([Ljava.lang.String;@49613eb0) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[1]([Ljava.lang.String;@326709be)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[1]([Ljava.lang.String;@326709be) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[2]([Ljava.lang.String;@7c5e570e)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[2]([Ljava.lang.String;@7c5e570e) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[3]([Ljava.lang.String;@3c90c5dc)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[3]([Ljava.lang.String;@3c90c5dc) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[4]([Ljava.lang.String;@165d0f2d)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[4]([Ljava.lang.String;@165d0f2d) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[5]([Ljava.lang.String;@2cb6cb35)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[5]([Ljava.lang.String;@2cb6cb35) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[6]([Ljava.lang.String;@4c09f4c5)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[6]([Ljava.lang.String;@4c09f4c5) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[7]([Ljava.lang.String;@67a910a4)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4718:3470,Assert,AssertionError,3470,https://hail.is,https://github.com/hail-is/hail/issues/4718,1,['Assert'],['AssertionError']
Testability,"4 (Krishnan Mahadevan); 7.6.0; Fixed: GITHUB-2741: Show fully qualified name of the test instead of just the function name for better readability of test output.(Krishnan Mahadevan); Fixed: GITHUB-2725: Honour custom attribute values in TestNG default reports (Krishnan Mahadevan); Fixed: GITHUB-2726: <a href=""https://github.com/AfterClass""><code>@​AfterClass</code></a> config method is executed for EACH <a href=""https://github.com/Test""><code>@​Test</code></a> method when parallel == methods (Krishnan Mahadevan); Fixed: GITHUB-2752: TestListener is being lost when implenting both IClassListener and ITestListener (Krishnan Mahadevan); New: GITHUB-2724: DataProvider: possibility to unload dataprovider class, when done with it (Dzmitry Sankouski); Fixed: GITHUB-217: Configure TestNG to fail when there's a failure in data provider (Krishnan Mahadevan); Fixed: GITHUB-2743: SuiteRunner could not be initial by default Configuration (Nan Liang); Fixed: GITHUB-2729: beforeConfiguration() listener method should be invoked for skipped configurations as well(Nan Liang); Fixed: assertEqualsNoOrder for Collection and Iterators size check was missing (Adam Kaczmarek); Fixed: GITHUB-2709: Testnames not working together with suites in suite (Martin Aldrin); Fixed: GITHUB-2704: IHookable and IConfigurable callback discrepancy (Krishnan Mahadevan); Fixed: GITHUB-2637: Upgrade to JDK11 as the minimum JDK requirements (Krishnan Mahadevan); Fixed: GITHUB-2734: Keep the initial order of listeners (Andrei Solntsev); Fixed: GITHUB-2359: Testng <a href=""https://github.com/BeforeGroups""><code>@​BeforeGroups</code></a> is running in parallel with testcases in the group (Anton Velma); Fixed: Possible StringIndexOutOfBoundsException in XmlReporter (Anton Velma); Fixed: GITHUB-2754: <a href=""https://github.com/AfterGroups""><code>@​AfterGroups</code></a> is executed for each &quot;finished&quot; group when it has multiple groups defined (Anton Velma)</p>; <p>7.5; Fixed: GITHUB-2701: Bump gradle ve",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12665:12878,Test,Test,12878,https://hail.is,https://github.com/hail-is/hail/pull/12665,7,"['Test', 'assert']","['Test', 'TestListener', 'TestNG', 'Testnames', 'Testng', 'assertEqualsNoOrder']"
Testability,"4) | `cryptography:` <br> `3.3.2 -> 41.0.6` <br> | No | Proof of Concept ; ![high severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/h.png ""high severity"") | Use of a Broken or Risky Cryptographic Algorithm <br/>[SNYK-PYTHON-PYJWT-2840625](https://snyk.io/vuln/SNYK-PYTHON-PYJWT-2840625) | `pyjwt:` <br> `1.7.1 -> 2.4.0` <br> | No | Proof of Concept ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | Information Exposure <br/>[SNYK-PYTHON-REQUESTS-5595532](https://snyk.io/vuln/SNYK-PYTHON-REQUESTS-5595532) | `requests:` <br> `2.27.1 -> 2.31.0` <br> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | Timing Attack <br/>[SNYK-PYTHON-RSA-1038401](https://snyk.io/vuln/SNYK-PYTHON-RSA-1038401) | `rsa:` <br> `4.5 -> 4.7` <br> | No | No Known Exploit . Some vulnerabilities couldn't be fully fixed and so Snyk will still find them when the project is tested again. This may be because the vulnerability existed within more than one direct dependency, but not all of the affected dependencies could be upgraded. Check the changes in this PR to ensure they won't cause issues with your project. ------------. **Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open fix PRs.*. For more information: <img src=""https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiIxMjk3MjE5NC04YzAyLTRhMjQtYTA0Ni0yZjIxMjk4YjQ2NmEiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjEyOTcyMTk0LThjMDItNGEyNC1hMDQ2LTJmMjEyOThiNDY2YSJ9fQ=="" width=""0"" height=""0""/>; 🧐 [View latest project report](https://app.snyk.io/org/danking/project/e7c92c7b-5282-49ea-940f-7a5797e2a45a?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr). 🛠 [Adjust project settings](https://app.snyk",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14134:7875,test,tested,7875,https://hail.is,https://github.com/hail-is/hail/pull/14134,1,['test'],['tested']
Testability,"4, MLEAC: array<int32>, MLEAF: array<float64>, MQ: float64, MQ0: int32, MQRankSum: float64, QD: float64, ReadPosRankSum: float64, set: str}, `the entries! [877f12a8827e18f61222c6c8c5fb04a8]`: array<struct{GT: call, AD: array<int32>, DP: int32, GQ: int32, PL: array<int32>}>},is.hail.expr.ir.PartitionIteratorLongReader@3da0d80),Apply(concat,WrappedArray(),ArrayBuffer(GetField(Ref(__iruid_370,struct{oldCtx: struct{index: int32, file: str, start: int64, end: int64, split: bool}, writeCtx: str}),writeCtx), UUID4(__iruid_277)),str),SplitPartitionNativeWriter({""name"":""TypedCodecSpec"",""_eType"":""+EBaseStruct{locus:+EBaseStruct{contig:+EBinary,position:+EInt32},alleles:+EArray[+EBinary],rsid:EBinary,qual:EFloat64,filters:EArray[+EBinary],info:+EBaseStruct{AC:EArray[EInt32],AF:EArray[EFloat64],AN:EInt32,BaseQRankSum:EFloat64,ClippingRankSum:EFloat64,DP:EInt32,DS:+EBoolean,FS:EFloat64,HaplotypeScore:EFloat64,InbreedingCoeff:EFloat64,MLEAC:EArray[EInt32],MLEAF:EArray[EFloat64],MQ:EFloat64,MQ0:EInt32,MQRankSum:EFloat64,QD:EFloat64,ReadPosRankSum:EFloat64,set:EBinary}}"",""_vType"":""Struct{locus:Locus(GRCh37),alleles:Array[String],rsid:String,qual:Float64,filters:Set[String],info:Struct{AC:Array[Int32],AF:Array[Float64],AN:Int32,BaseQRankSum:Float64,ClippingRankSum:Float64,DP:Int32,DS:Boolean,FS:Float64,HaplotypeScore:Float64,InbreedingCoeff:Float64,MLEAC:Array[Int32],MLEAF:Array[Float64],MQ:Float64,MQ0:Int32,MQRankSum:Float64,QD:Float64,ReadPosRankSum:Float64,set:String}}"",""_bufferSpec"":{""name"":""LEB128BufferSpec"",""child"":{""name"":""BlockingBufferSpec"",""blockSize"":32768,""child"":{""name"":""LZ4HCBlockBufferSpec"",""blockSize"":32768,""child"":{""name"":""StreamBlockBufferSpec""}}}}},gs://danking/workshop-test/1kg.mt/rows/rows/parts/,{""name"":""TypedCodecSpec"",""_eType"":""+EBaseStruct{`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:+EArray[+EBaseStruct{GT:EInt32,AD:EArray[+EInt32],DP:EInt32,GQ:EInt32,PL:EArray[+EInt32]}]}"",""_vType"":""Struct{`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9856:8589,test,test,8589,https://hail.is,https://github.com/hail-is/hail/issues/9856,1,['test'],['test']
Testability,"4-batch-pods-cjklalqnl5u9/pods/batch-9-job-1-c8b9b2',\n 'uid': 'e878f906-a3e6-11e9-a4bb-42010a8000af'},\n 'spec': {'active_deadline_seconds': None,\n 'affinity': None,\n 'automount_service_account_token': None,\n 'containers': [{'args': None,\n 'command': ['sleep', '30'],\n 'env': [{'name': 'POD_IP',\n 'value': None,\n 'value_from': {'config_map_key_ref': None,\n 'field_ref': {'api_version': 'v1',\n 'field_path': 'status.podIP'},\n 'resource_field_ref': None,\n 'secret_key_ref': None}},\n {'name': 'POD_NAME',\n 'value': None,\n 'value_from': {'config_map_key_ref': None,\n 'field_ref': {'api_version': 'v1',\n 'field_path': 'metadata.name'},\n 'resource_field_ref': None,\n 'secret_key_ref': None}}],\n 'env_from': None,\n 'image': 'alpine',\n 'image_pull_policy': 'Always',\n 'lifecycle': None,\n 'liveness_probe': None,\n 'name': 'main',\n 'ports': None,\n 'readiness_probe': None,\n 'resources': {'limits': None,\n 'requests': {'cpu': '100m',\n 'memory': '500M'}},\n 'security_context': None,\n 'stdin': None,\n 'stdin_once': None,\n 'termination_message_path': '/dev/termination-log',\n 'termination_message_policy': 'File',\n 'tty': None,\n 'volume_devices': None,\n 'volume_mounts': [{'mount_path': '/gsa-key',\n 'mount_propagation': None,\n 'name': 'gsa-key',\n 'read_only': None,\n 'sub_path': None},\n {'mount_path': '/var/run/secrets/kubernetes.io/serviceaccount',\n 'mount_propagation': None,\n 'name': 'default-token-brr2f',\n 'read_only': True,\n 'sub_path': None}],\n 'working_dir': None}],\n 'dns_config': None,\n 'dns_policy': 'ClusterFirst',\n 'enable_service_links': True,\n 'host_aliases': None,\n 'host_ipc': None,\n 'host_network': None,\n 'host_pid': None,\n 'hostname': None,\n 'image_pull_secrets': None,\n 'init_containers': None,\n 'node_name': 'gke-vdc-preemptible-pool-9c7148b2-8hq5',\n 'node_selector': None,\n 'priority': 500000,\n 'priority_class_name': 'user',\n 'readiness_gates': None,\n 'restart_policy': 'Never',\n 'runtime_class_name': None,\n 'scheduler_nam",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6616:2928,log,log,2928,https://hail.is,https://github.com/hail-is/hail/issues/6616,2,['log'],['log']
Testability,40); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt(FSSuite.scala:323); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:321); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/h,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:4082,Test,TestRunner,4082,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['Test'],['TestRunner']
Testability,40); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt(FSSuite.scala:341); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:339); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/h,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:4275,Test,TestRunner,4275,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['Test'],['TestRunner']
Testability,"42b2d6d442615931b2eb65c5f8e012de52a0/96d6daa14989dd0cff08b30ac1f1d53288171a54/hail.jar,ZIP=gs://hail-ci-0-1/temp/25aa42b2d6d442615931b2eb65c5f8e012de52a0/96d6daa14989dd0cff08b30ac1f1d53288171a54/hail.zip \; --properties=spark:spark.driver.memory=3g,spark:spark.driver.maxResultSize=0,spark:spark.task.maxFailures=20,spark:spark.kryoserializer.buffer.max=1g,spark:spark.driver.extraJavaOptions=-Xss4M,spark:spark.executor.extraJavaOptions=-Xss4M,hdfs:dfs.replication=1,dataproc:dataproc.logging.stackdriver.enable=false,dataproc:dataproc.monitoring.stackdriver.enable=false \; --initialization-actions=gs://dataproc-initialization-actions/conda/bootstrap-conda.sh,gs://hail-common/cloudtools/init_notebook1.py,gs://hail-common/vep/vep/vep85-loftee-1.0-GRCh37-init-docker.sh \; --master-machine-type=n1-standard-1 \; --master-boot-disk-size=40GB \; --num-master-local-ssds=0 \; --num-preemptible-workers=0 \; --num-worker-local-ssds=0 \; --num-workers=2 \; --preemptible-worker-boot-disk-size=40GB \; --worker-boot-disk-size=40 \; --worker-machine-type=n1-standard-1 \; --zone=us-central1-b \; --initialization-action-timeout=20m \; --bucket=hail-ci-0-1-dataproc-staging-bucket \; --max-idle=10m; Starting cluster 'ci-test-6boype3d'...; Traceback (most recent call last):; File ""/home/hail/.conda/envs/hail/bin/cluster"", line 10, in <module>; sys.exit(main()); File ""/home/hail/.conda/envs/hail/lib/python3.6/site-packages/cloudtools/__main__.py"", line 85, in main; start.main(args); File ""/home/hail/.conda/envs/hail/lib/python3.6/site-packages/cloudtools/start.py"", line 210, in main; check_call(cmd); File ""/home/hail/.conda/envs/hail/lib/python3.6/subprocess.py"", line 291, in check_call; raise CalledProcessError(retcode, cmd); subprocess.CalledProcessError: Command '['gcloud', 'beta', 'dataproc', 'clusters', 'create', 'ci-test-6boype3d', '--image-version=1.2-deb9', '--metadata=MINICONDA_VERSION=4.4.10,JAR=gs://hail-ci-0-1/temp/25aa42b2d6d442615931b2eb65c5f8e012de52a0/96d6daa14989dd0cff08b30ac",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4530#issuecomment-475782518:9506,test,test-,9506,https://hail.is,https://github.com/hail-is/hail/issues/4530#issuecomment-475782518,1,['test'],['test-']
Testability,43_uvxWn | test | 6 | 0 | 11331136 |; | ci | ci | 6 | 0 | 79640784 |; | test | test | 6 | 0 | 4063028160 |; | test | test | 6 | 1 | 189760 |; | test | test | 6 | 3 | 607168 |; | test | test | 6 | 4 | 749952 |; | test | test | 6 | 5 | 46912 |; | test | test | 6 | 6 | 158336 |; | test | test | 6 | 7 | 70336 |; | test | test | 6 | 8 | 167680 |; | test | test | 6 | 9 | 523136 |; | test | test | 6 | 10 | 40640 |; | test | test | 6 | 11 | 616448 |; | test | test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | t,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:1683,test,test,1683,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,445); at is.hail.io.fs.FSSuite.largeDirectoryOperations$(FSSuite.scala:430); at is.hail.io.fs.GoogleStorageFSSuite.largeDirectoryOperations(GoogleStorageFSSuite.scala:10); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:498); at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:136); at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:658); at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:219); at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50); at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:923); at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:192); at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128); at java.util.ArrayList.forEach(ArrayList.java:1259); at org.testng.TestRunner.privateRun(TestRunner.java:808); at org.testng.TestRunner.run(TestRunner.java:603); at org.testng.SuiteRunner.runTest(SuiteRunner.java:429); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:423); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:383); at org.testng.SuiteRunner.run(SuiteRunner.java:326); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1249); at org.testng.TestNG.runSuitesLocally(TestNG.java:1169); at org.testng.TestNG.runSuites(TestNG.java:1092); at org.testng.TestNG.run(TestNG.java:1060); at org.testng.TestNG.privateMain(TestNG.java:1403); at org.testng.TestNG.main(TestNG.java:13,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547:1646,test,testng,1646,https://hail.is,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547,1,['test'],['testng']
Testability,"45404,; ""finish_time"": 1586188245457,; ""duration"": 53; },; ""runtime"": {; ""start_time"": 1586188245458,; ""finish_time"": 1586189446263,; ""duration"": 1200805; },; ""starting"": {; ""start_time"": 1586188245458,; ""finish_time"": 1586188246261,; ""duration"": 803; },; ""running"": {; ""start_time"": 1586188246262,; ""finish_time"": 1586189446263,; ""duration"": 1200001; },; ""uploading_log"": {; ""start_time"": 1586189446266,; ""finish_time"": 1586189446350,; ""duration"": 84; },; ""deleting"": {; ""start_time"": 1586189446351,; ""finish_time"": 1586189456802,; ""duration"": 10451; }; },; ""error"": ""Traceback (most recent call last):\n File \""/usr/local/lib/python3.6/site-packages/batch/worker.py\"", line 387, in run\n raise JobTimeoutError(f'timed out after {self.timeout}s')\nJobTimeoutError: timed out after 1200s\n"",; ""container_status"": {; ""state"": ""running"",; ""started_at"": ""2020-04-06T15:50:46.250931386Z"",; ""finished_at"": ""0001-01-01T00:00:00Z"",; ""out_of_memory"": false,; ""exit_code"": 0; }; }; },; ""start_time"": 1586188245458,; ""end_time"": 1586189446263; },; ""spec"": {; ""command"": [; ""bash"",; ""-c"",; ""export HAIL_DEPLOY_CONFIG_FILE=/deploy-config/deploy-config.json\nexport SCRATCH=gs://hail-test-dmk9z/o1111h6zxn1p/pipeline\npython3 -m pytest --log-cli-level=INFO -s -vv --instafail /io/test/""; ],; ""image"": ""gcr.io/hail-vdc/ci-intermediate:q7503hc818u5"",; ""job_id"": 65,; ""mount_docker_socket"": false,; ""secrets"": [; {; ""namespace"": ""pr-8470-default-dyvil12gxzyf"",; ""name"": ""gce-deploy-config"",; ""mount_path"": ""/deploy-config""; },; {; ""namespace"": ""pr-8470-batch-pods-r3e5lmgvb8dl"",; ""name"": ""test-tokens"",; ""mount_path"": ""/user-tokens""; },; {; ""namespace"": ""batch-pods"",; ""name"": ""ci-gsa-key"",; ""mount_path"": ""/gsa-key"",; ""mount_in_copy"": true; }; ],; ""timeout"": 1200,; ""input_files"": [; {; ""from"": ""gs://hail-ci-bpk3h/build/23dca3776b11f404e2d0a242697d3b5f/repo/pipeline/test"",; ""to"": ""/io/""; }; ],; ""resources"": {; ""cpu"": ""1"",; ""memory"": ""3.75G""; },; ""env"": []; },; ""attributes"": {; ""name"": ""test_pipeline""; }; }; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8473:2706,test,test-,2706,https://hail.is,https://github.com/hail-is/hail/issues/8473,5,"['log', 'test']","['log-cli-level', 'test', 'test-', 'test-tokens']"
Testability,"46 INFO Utils: Successfully started service 'SparkUI' on port 4040.; 17/01/17 09:24:46 INFO SparkUI: Bound SparkUI to 0.0.0.0, and started at http://129.94.72.55:4040; 17/01/17 09:24:46 INFO Executor: Starting executor ID driver on host localhost; 17/01/17 09:24:46 INFO Utils: Successfully started service 'org.apache.spark.network.netty.NettyBlockTransferService' on port 37833.; 17/01/17 09:24:46 INFO NettyBlockTransferService: Server created on 129.94.72.55:37833; 17/01/17 09:24:46 INFO BlockManagerMaster: Registering BlockManager BlockManagerId(driver, 129.94.72.55, 37833); 17/01/17 09:24:46 INFO BlockManagerMasterEndpoint: Registering block manager 129.94.72.55:37833 with 15.8 GB RAM, BlockManagerId(driver, 129.94.72.55, 37833); 17/01/17 09:24:46 INFO BlockManagerMaster: Registered BlockManager BlockManagerId(driver, 129.94.72.55, 37833); hail: info: running: read test.in.vds; SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".; SLF4J: Defaulting to no-operation (NOP) logger implementation; SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.; hail: info: running: annotatevariants expr -c 'va = {}'; hail: info: running: write -o test.out.vds; [Stage 1:==> (1 + 24) / 25]hail: write: caught exception: org.apache.spark.SparkException: Job aborted.; at org.apache.spark.sql.execution.datasources.InsertIntoHadoopFsRelationCommand$$anonfun$run$1.apply$mcV$sp(InsertIntoHadoopFsRelationCommand.scala:149); at org.apache.spark.sql.execution.datasources.InsertIntoHadoopFsRelationCommand$$anonfun$run$1.apply(InsertIntoHadoopFsRelationCommand.scala:115); at org.apache.spark.sql.execution.datasources.InsertIntoHadoopFsRelationCommand$$anonfun$run$1.apply(InsertIntoHadoopFsRelationCommand.scala:115); at org.apache.spark.sql.execution.SQLExecution$.withNewExecutionId(SQLExecution.scala:57); at org.apache.spark.sql.execution.datasources.InsertIntoHadoopFsRelationCommand.run(InsertIntoHadoopFsRelationCommand.scala:115); at org.apache.spark.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1260:2680,log,logger,2680,https://hail.is,https://github.com/hail-is/hail/issues/1260,1,['log'],['logger']
Testability,"491f73e1fe4baed1ace132cba9f8cc1557ffa33""><code>4491f73</code></a> chore(main): release 2.17.1-SNAPSHOT (<a href=""https://github-redirect.dependabot.com/googleapis/java-storage/issues/1849"">#1849</a>)</li>; <li><a href=""https://github.com/googleapis/java-storage/commit/fb3ae9c172f6176a52815cc7ffc09175f23d0df8""><code>fb3ae9c</code></a> chore(main): release 2.17.0 (<a href=""https://github-redirect.dependabot.com/googleapis/java-storage/issues/1804"">#1804</a>)</li>; <li><a href=""https://github.com/googleapis/java-storage/commit/3ab745207badbd4971f2fb62ed92e1703625214a""><code>3ab7452</code></a> chore(test): increase debug logging for failure cases in GapicUnbufferedWrita...</li>; <li><a href=""https://github.com/googleapis/java-storage/commit/c8bf3c70cca81ed87a52939fe7da58889c8f55ce""><code>c8bf3c7</code></a> fix: update GrpcStorageImpl#update to support fine-grained update of BucketIn...</li>; <li><a href=""https://github.com/googleapis/java-storage/commit/3345ac9eec286ee3108c08bdbe263eba59085ad3""><code>3345ac9</code></a> test: add test to verify <code>lifecycle.rule.condition.age_days = 0</code> (<a href=""https://github-redirect.dependabot.com/googleapis/java-storage/issues/1846"">#1846</a>)</li>; <li><a href=""https://github.com/googleapis/java-storage/commit/45dc983a4af8e7feb937263ce611bd34eda37e03""><code>45dc983</code></a> feat: update GrpcBlobReadChannel to allow seek/limit after read (<a href=""https://github-redirect.dependabot.com/googleapis/java-storage/issues/1834"">#1834</a>)</li>; <li><a href=""https://github.com/googleapis/java-storage/commit/b8f43169a504080c55eadc3428d0d7966efdc3d4""><code>b8f4316</code></a> build(deps): update dependency org.apache.maven.plugins:maven-dependency-plug...</li>; <li><a href=""https://github.com/googleapis/java-storage/commit/e532a590fd351bb2020b571d21662fbee629038e""><code>e532a59</code></a> build(deps): update dependency org.apache.maven.plugins:maven-surefire-plugin...</li>; <li>Additional commits viewable in <a href=""https://github.c",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12598:15109,test,test,15109,https://hail.is,https://github.com/hail-is/hail/pull/12598,2,['test'],['test']
Testability,"4a9fxo7"",; ""forks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/forks"",; ""keys_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/keys{/key_id}"",; ""collaborators_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/collaborators{/collaborator}"",; ""teams_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/teams"",; ""hooks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/hooks"",; ""issue_events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/events{/number}"",; ""events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/events"",; ""assignees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/assignees{/user}"",; ""branches_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/branches{/branch}"",; ""tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/tags"",; ""blobs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/blobs{/sha}"",; ""git_tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/tags{/sha}"",; ""git_refs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/refs{/sha}"",; ""trees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/trees{/sha}"",; ""statuses_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/statuses/{sha}"",; ""languages_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/languages"",; ""stargazers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/stargazers"",; ""contributors_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contributors"",; ""subscribers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscribers"",; ""subscription_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscription"",; ""commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/commits{/sha}"",; ""git_commits_url"": ""https://api.github.com/repos/ha",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:3234,test,test,3234,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,"4a9fxo7/downloads"",; ""issues_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues{/number}"",; ""pulls_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/pulls{/number}"",; ""milestones_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/milestones{/number}"",; ""notifications_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/notifications{?since,all,participating}"",; ""labels_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/labels{/name}"",; ""releases_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/releases{/id}"",; ""deployments_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/deployments"",; ""created_at"": ""2018-10-10T00:32:59Z"",; ""updated_at"": ""2018-10-10T00:32:59Z"",; ""pushed_at"": ""2018-10-10T00:33:00Z"",; ""git_url"": ""git://github.com/hail-ci-test/ci-test-p4a9fxo7.git"",; ""ssh_url"": ""git@github.com:hail-ci-test/ci-test-p4a9fxo7.git"",; ""clone_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7.git"",; ""svn_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7"",; ""homepage"": null,; ""size"": 0,; ""stargazers_count"": 0,; ""watchers_count"": 0,; ""language"": null,; ""has_issues"": true,; ""has_projects"": true,; ""has_downloads"": true,; ""has_wiki"": true,; ""has_pages"": false,; ""forks_count"": 0,; ""mirror_url"": null,; ""archived"": false,; ""open_issues_count"": 0,; ""license"": null,; ""forks"": 0,; ""open_issues"": 0,; ""watchers"": 0,; ""default_branch"": ""master"",; ""permissions"": {; ""admin"": true,; ""push"": true,; ""pull"": true; },; ""allow_squash_merge"": true,; ""allow_merge_commit"": true,; ""allow_rebase_merge"": true,; ""organization"": {; ""login"": ""hail-ci-test"",; ""id"": 43152710,; ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjQzMTUyNzEw"",; ""avatar_url"": ""https://avatars1.githubusercontent.com/u/43152710?v=4"",; ""gravatar_id"": """",; ""url"": ""https://api.github.com/users/hail-ci-test"",; ""html_url"": ""https://github.com/hail-ci-test"",; ""followers_url"": ""https://api.github.com/users/hail-ci-test/followers"",",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:6074,test,test,6074,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,"5) ; Type 'copyright', 'credits' or 'license' for more information; IPython 7.5.0 -- An enhanced Interactive Python. Type '?' for help. In [1]: import hail as hl ; hl.import_; In [2]: t = hl.import_table('/tmp/bar') ; ...: t.describe() ; ...: t = t.key_by('sample_id') ; Initializing Spark and Hail with default parameters...; using hail jar at /usr/local/lib/python3.7/site-packages/hail/hail-all-spark.jar; 19/06/13 14:08:11 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).; Running on Apache Spark version 2.4.1; SparkUI available at http://wm06b-953.broadinstitute.org:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.14-5cb00c115421; LOGGING: writing to /Users/dking/projects/hail/hail/hail-20190613-1408-0.2.14-5cb00c115421.log; 2019-06-13 14:08:15 Hail: INFO: Reading table with no type imputation; Loading column '?sample_id' as type 'str' (type not specified). ----------------------------------------; Global fields:; None; ----------------------------------------; Row fields:; '﻿sample_id': str ; ----------------------------------------; Key: []; ----------------------------------------; ---------------------------------------------------------------------------; LookupError Traceback (most recent call last); <ipython-input-2-6b119cf7ec41> in <module>; 1 t = hl.import_table('/tmp/bar'); 2 t.describe(); ----> 3 t = t.key_by('sample_id'). </usr/local/lib/python3.7/site-packages/decorator.py:decorator-gen-958> in key_by(self, *keys, **named_keys). /usr/local/lib/python3.7/site-packages/hail/typecheck/check.py in wrapper(__original_func, *args, **kwargs); 583 def wrapper(__original_func, *args, **kwargs):; 584 args_, kwargs_ = check_all(__origina",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6342:1698,LOG,LOGGING,1698,https://hail.is,https://github.com/hail-is/hail/issues/6342,1,['LOG'],['LOGGING']
Testability,50kib was pretty darn small. Also moved the truncation warning to the end of the log.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13391:81,log,log,81,https://hail.is,https://github.com/hail-is/hail/pull/13391,1,['log'],['log']
Testability,543_uvxWn | test | 6 | 0 | 11331136 |; | 2023-07-13 | ci | ci | 6 | 0 | 79640784 |; | 2023-07-13 | test | test | 6 | 0 | 4142226688 |; | 2023-07-13 | test | test | 6 | 1 | 108608 |; | 2023-07-13 | test | test | 6 | 2 | 80576 |; | 2023-07-13 | test | test | 6 | 5 | 35648 |; | 2023-07-13 | test | test | 6 | 7 | 578240 |; | 2023-07-13 | test | test | 6 | 9 | 33024 |; | 2023-07-13 | test | test | 6 | 10 | 33472 |; | 2023-07-13 | test | test | 6 | 11 | 110464 |; | 2023-07-13 | test | test | 6 | 14 | 47744 |; | 2023-07-13 | test | test | 6 | 15 | 45440 |; | 2023-07-13 | test | test | 6 | 16 | 79616 |; | 2023-07-13 | test | test | 6 | 17 | 604928 |; | 2023-07-13 | test | test | 6 | 18 | 78016 |; | 2023-07-13 | test | test | 6 | 19 | 87040 |; | 2023-07-13 | test | test | 6 | 20 | 89792 |; | 2023-07-13 | test | test | 6 | 21 | 188736 |; | 2023-07-13 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | tes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:8751,test,test,8751,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,"547377fbd4403acfbbe03dbc010585a1605""><code>25d0454</code></a> Revert commit bd816ee8 '[1.26] Add exception wrapper for HTTPS proxy connecti...</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/109b4456742ff8a4a6637cc2c7c45fa003147bf7""><code>109b445</code></a> Deprecate BACKOFF_MAX in favor of DEFAULT_BACKOFF_MAX</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/dc279bd9bf3b410f204e20b104392f0126f05389""><code>dc279bd</code></a> [1.26] Point setuptools to use standard library distutils as a fallback</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/dc1e68f544ea53d46b14756c5b76826101cfa1cb""><code>dc1e68f</code></a> [1.26] Upload coverage report if check failed</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/a472d6d7c64ce80fa89abbf1cc4ad491a4ea9819""><code>a472d6d</code></a> [1.26] Remove codecov in favor of GHA artifacts to upload and combine coverag...</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/6bad9acc951aabc8f90c1c95591c4b876b2a70e6""><code>6bad9ac</code></a> Test against Python 3.11</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/06406c5f795e85aca1792a52010d94c54a21fbd8""><code>06406c5</code></a> [1.26] Mention pool size when discarding connections (<a href=""https://github-redirect.dependabot.com/urllib3/urllib3/issues/2497"">#2497</a>)</li>; <li>Additional commits viewable in <a href=""https://github.com/urllib3/urllib3/compare/1.26.5...1.26.8"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.5&new-version=1.26.8)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-a",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11532:7086,Test,Test,7086,https://hail.is,https://github.com/hail-is/hail/pull/11532,1,['Test'],['Test']
Testability,570e)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[2]([Ljava.lang.String;@7c5e570e) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[3]([Ljava.lang.String;@3c90c5dc)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[3]([Ljava.lang.String;@3c90c5dc) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[4]([Ljava.lang.String;@165d0f2d)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[4]([Ljava.lang.String;@165d0f2d) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[5]([Ljava.lang.String;@2cb6cb35)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[5]([Ljava.lang.String;@2cb6cb35) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[6]([Ljava.lang.String;@4c09f4c5)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[6]([Ljava.lang.String;@4c09f4c5) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[7]([Ljava.lang.String;@67a910a4)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[7]([Ljava.lang.String;@67a910a4) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[8]([Ljava.lang.String;@3c215dd4)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[8]([Ljava.lang.String;@3c215dd4) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[9]([Ljava.lang.String;@5a40cc5)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4718:4022,Assert,AssertionError,4022,https://hail.is,https://github.com/hail-is/hail/issues/4718,1,['Assert'],['AssertionError']
Testability,6); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$5(TestUtils.scala:366); 	at scala.collection.immutable.Set$Set4.foreach(Set.scala:289); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$4(TestUtils.scala:348); 	at is.hail.TestUtils$.$anonfun$assertEvalsTo$4$adapted(TestUtils.scala:339); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$3(ExecuteContext.scala:47); 	at is.hail.utils.package$.using(package.scala:618); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$2(ExecuteContext.scala:47); 	at is.hail.utils.package$.using(package.scala:618); 	at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:13); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:46); 	at is.hail.backend.spark.SparkBackend.withExecuteContext(SparkBackend.scala:276); 	at is.hail.expr.ir.ExecuteContext$.$anonfun$scoped$1(ExecuteContext.scala:40); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:52); 	at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:39); 	at is.hail.TestUtils$.assertEvalsTo(TestUtils.scala:339); 	at is.hail.TestUtils$.assertEvalsTo(TestUtils.scala:314); 	at is.hail.expr.ir.IRSuite.testStreamLenUnconsumedInnerStream(IRSuite.scala:1800); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.t,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604:3039,Test,TestUtils,3039,https://hail.is,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604,1,['Test'],['TestUtils']
Testability,6); at org.apache.spark.util.ClosureCleaner$.clean(ClosureCleaner.scala:158); at org.apache.spark.SparkContext.clean(SparkContext.scala:1622); at org.apache.spark.rdd.RDD.map(RDD.scala:286); at org.broadinstitute.hail.methods.MendelErrors.writeMendel(MendelErrors.scala:143); at org.broadinstitute.hail.methods.MendelErrorsSuite.test(MendelErrorsSuite.scala:50); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:122); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAcces,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:1617,Test,TestMethodWorker,1617,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['Test'],['TestMethodWorker']
Testability,"6.4; 950 | amazon-ebs: Downloading orjson-3.6.4-cp37-cp37m-manylinux_2_24_x86_64.whl (249 kB); 951 | amazon-ebs: ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 249.9/249.9 kB 45.1 MB/s eta 0:00:00; 952 | amazon-ebs: Requirement already satisfied: pandas<1.5.0,>=1.3.0 in /usr/local/lib64/python3.7/site-packages (1.3.5); 953 | amazon-ebs: Collecting parsimonious<0.9; 954 | amazon-ebs: Downloading parsimonious-0.8.1.tar.gz (45 kB); 955 | amazon-ebs: ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 45.1/45.1 kB 10.2 MB/s eta 0:00:00; 956 | amazon-ebs: Preparing metadata (setup.py): started; 957 | amazon-ebs: Preparing metadata (setup.py): finished with status 'done'; 958 | amazon-ebs: Collecting plotly<5.11,>=5.5.0; 959 | amazon-ebs: Downloading plotly-5.10.0-py2.py3-none-any.whl (15.2 MB); 960 | amazon-ebs: ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 15.2/15.2 MB 57.8 MB/s eta 0:00:00; 961 | amazon-ebs: Collecting PyJWT; 962 | amazon-ebs: Downloading PyJWT-2.5.0-py3-none-any.whl (20 kB); 963 | amazon-ebs: Collecting python-json-logger==2.0.2; 964 | amazon-ebs: Downloading python_json_logger-2.0.2-py3-none-any.whl (7.4 kB); 965 | amazon-ebs: Collecting requests==2.25.1; 966 | amazon-ebs: Downloading requests-2.25.1-py2.py3-none-any.whl (61 kB); 967 | amazon-ebs: ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 61.2/61.2 kB 15.6 MB/s eta 0:00:00; 968 | amazon-ebs: Requirement already satisfied: scipy<1.8,>1.2 in /usr/local/lib64/python3.7/site-packages (1.7.3); 969 | amazon-ebs: Requirement already satisfied: sortedcontainers==2.4.0 in /usr/local/lib/python3.7/site-packages (2.4.0); 970 | amazon-ebs: Collecting tabulate==0.8.9; 971 | amazon-ebs: Downloading tabulate-0.8.9-py3-none-any.whl (25 kB); 972 | amazon-ebs: Requirement already satisfied: tqdm==4.* in /usr/local/lib/python3.7/site-packages (4.64.1); 973 | amazon-ebs: Collecting uvloop==0.16.0; 974 | amazon-ebs: Downloading uvloop-0.16.0-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (3.8 MB); 975 | amazon-ebs: ━━━━━━━━━━━━━━━━━━━",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12136#issuecomment-1255177691:6795,log,logger,6795,https://hail.is,https://github.com/hail-is/hail/pull/12136#issuecomment-1255177691,1,['log'],['logger']
Testability,60 |; | test | test | 6 | 1 | 189760 |; | test | test | 6 | 3 | 607168 |; | test | test | 6 | 4 | 749952 |; | test | test | 6 | 5 | 46912 |; | test | test | 6 | 6 | 158336 |; | test | test | 6 | 7 | 70336 |; | test | test | 6 | 8 | 167680 |; | test | test | 6 | 9 | 523136 |; | test | test | 6 | 10 | 40640 |; | test | test | 6 | 11 | 616448 |; | test | test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:1785,test,test,1785,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,60); 	at is.hail.check.GenProp1.apply(Prop.scala:26); 	at is.hail.check.Prop.check(Prop.scala:19); 	at is.hail.expr.ir.OrderingSuite.testBinarySearchOnDict(OrderingSuite.scala:357); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); 	at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:123); Caused by: java.lang.ArrayIndexOutOfBoundsException: 3; 	at scala.collection.mutable.WrappedArray$ofRef.apply(WrappedArray.scala:127); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33$$anonfun$apply$19.getKey$1(OrderingSuite.scala:345); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33$$anonf,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5630:1403,test,testng,1403,https://hail.is,https://github.com/hail-is/hail/issues/5630,1,['test'],['testng']
Testability,"609, 'cost': 1.1510333711392028e-06, 'msec_mcpu': 0, 'status': {'version': 5, 'worker': 'batch-worker-pr-12955-default-rrlcxki12v8r-standard-0e2wl', 'batch_id': 74, 'job_id': 1, 'attempt_id': 'gAaTm8', 'user': 'test', 'state': 'succeeded', 'format_version': 7, 'resources': [{'name': 'az/vm/Standard_D8ds_v4/spot/eastus/1682899200000', 'quantity': 32}, {'name': 'az/disk/E4_LRS/eastus/1546300800000', 'quantity': 1024}, {'name': 'az/ip-fee/1024/2021-12-01', 'quantity': 32}, {'name': 'az/service-fee/2021-12-01', 'quantity': 250}], 'region': 'eastus', 'start_time': 1682966178997, 'end_time': 1682966179606, 'container_statuses': {'main': {'name': 'batch-74-job-1-main', 'state': 'succeeded', 'timing': {'pulling': {'start_time': 1682966179035, 'finish_time': 1682966179224, 'duration': 189}, 'setting up overlay': {'start_time': 1682966179224, 'finish_time': 1682966179253, 'duration': 29}, 'setting up network': {'start_time': 1682966179253, 'finish_time': 1682966179253, 'duration': 0}, 'running': {'start_time': 1682966179253, 'finish_time': 1682966179340, 'duration': 87}, 'uploading_log': {'start_time': 1682966179340, 'finish_time': 1682966179361, 'duration': 21}, 'uploading_resource_usage': {'start_time': 1682966179361, 'finish_time': 1682966179407, 'duration': 46}}, 'container_status': {'started_at': 1682966179253, 'finished_at': 1682966179340, 'state': 'finished', 'exit_code': 0, 'out_of_memory': False}}}, 'timing': {'setup_io': {'start_time': 1682966178998, 'finish_time': 1682966178999, 'duration': 1}, 'configuring xfsquota': {'start_time': 1682966178999, 'finish_time': 1682966179035, 'duration': 36}, 'populating secrets': {'start_time': 1682966179035, 'finish_time': 1682966179035, 'duration': 0}, 'adding cloudfuse support': {'start_time': 1682966179035, 'finish_time': 1682966179035, 'duration': 0}, 'post-job finally block': {'start_time': 1682966179578}}}, 'spec': {'always_copy_output': False, 'job_id': 1, 'process': {'command': ['true'], 'image': 'haildev.azurecr.io/ubun",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12955#issuecomment-1530133228:987,test,test,987,https://hail.is,https://github.com/hail-is/hail/pull/12955#issuecomment-1530133228,2,['test'],['test']
Testability,61z7543_FUitX | test | 6 | 0 | 1817536 |; | __testproject_iizhz61z7543_uvxWn | test | 6 | 0 | 11331136 |; | ci | ci | 6 | 0 | 79640784 |; | test | test | 6 | 0 | 4063028160 |; | test | test | 6 | 1 | 189760 |; | test | test | 6 | 3 | 607168 |; | test | test | 6 | 4 | 749952 |; | test | test | 6 | 5 | 46912 |; | test | test | 6 | 6 | 158336 |; | test | test | 6 | 7 | 70336 |; | test | test | 6 | 8 | 167680 |; | test | test | 6 | 9 | 523136 |; | test | test | 6 | 10 | 40640 |; | test | test | 6 | 11 | 616448 |; | test | test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | te,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:1615,test,test,1615,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,622); at org.apache.spark.rdd.RDD.map(RDD.scala:286); at org.broadinstitute.hail.methods.MendelErrors.writeMendel(MendelErrors.scala:143); at org.broadinstitute.hail.methods.MendelErrorsSuite.test(MendelErrorsSuite.scala:50); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:122); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:1753,Test,TestRunner,1753,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['Test'],['TestRunner']
Testability,"625396966934204, 4.427164077758789, 4.435616970062256]; filterCols.filterRows; [4.647814035415649, 4.610292911529541, 4.655405044555664]; filterRows.filterCols; [4.866307973861694, 5.073392868041992, 5.470307111740112]; ```. On GCP, with 32 core highmem master and 176 cores (2 workers + 20 prempt, 8 core standard), reading and writing a 100k by 100k matrix M with 4096 block size (625 partitions, each 128MB, 80GB total) takes about 25s. Even with this 3.5 to 1 ratio of partitions to cores, there is a lot of volatility running the same operations multiple times. I've documented some experiments below, the main conclusion is that these functions should work well for the use cases above and while those are being developed and we experiment more on real data, I think it makes sense to include all three: filterCols, filterRows (implemented via filterCols and transpose), and filter. ```; from hail import *; from hail.linalg import *; import timeit; from random import randint. hc = HailContext(log='/hail/hail.log'). def time(name, f, number=1, repeat=3):; print('running:', name); d = timeit.repeat(f, number=number, repeat=repeat); print(name, d). size = 100000; block_size = 4096; mod = 31; alll = range(0, size). keep = filter(lambda i: i % mod != 0, alll); keepS = filter(lambda i: i % mod == 0, alll); keepR = filter(lambda i: randint(0,1) == 0, alll). pathC = 'gs://jbloom/block_filter/C.bm'; pathCfilt = 'gs://jbloom/block_filter/Cfilt.bm'. # 29s; def writeC():; BlockMatrix.random(size, size, block_size).write(pathC). # 25s; def readwrite():; BlockMatrix.read('gs://jbloom/block_filter/C.bm').write(pathC). ## keep all; # ('filtnone', [50.187114000320435, 37.279563903808594, 39.105873823165894]); # ('filtnone2', [42.968636989593506, 90.15687894821167, 53.434531927108765]); # ('filtnone3', [38.40539002418518, 106.12774705886841, 51.939454078674316]); def filtnone():; C = BlockMatrix.read(pathC); C.filter(alll, alll).write(pathCfilt); def filtnone2():; C = BlockMatrix.read(pathC",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2647:2738,log,log,2738,https://hail.is,https://github.com/hail-is/hail/pull/2647,1,['log'],['log']
Testability,"64-Bit Server VM (25.181-b13 mixed mode linux-amd64 compressed oops); # Problematic frame:; # J 9008 C1 is.hail.annotations.UnsafeRow$.readBinary(Lis/hail/annotations/Region;J)[B (39 bytes) @ 0x00007fe4a85738ec [0x00007fe4a8573600+0x2ec]; #; # Core dump written. Default location: /home/BROAD.MIT.EDU/cvittal/src/hail/hail/core or core.23790 (max size 9223372036854775 kB). To ensure a full core dump, try ""ulimit -c unlimited"" before starting Java again; #; # An error report file with more information is saved as:; # /home/BROAD.MIT.EDU/cvittal/src/hail/hail/hs_err_pid23790.log; Compiled method (c1) 33969 8500 2 is.hail.annotations.UnsafeRow$::readLocus (78 bytes); total in heap [0x00007fe4a8b81810,0x00007fe4a8b83430] = 7200; relocation [0x00007fe4a8b81938,0x00007fe4a8b81a98] = 352; main code [0x00007fe4a8b81aa0,0x00007fe4a8b82100] = 1632; stub code [0x00007fe4a8b82100,0x00007fe4a8b822b8] = 440; oops [0x00007fe4a8b822b8,0x00007fe4a8b822c0] = 8; metadata [0x00007fe4a8b822c0,0x00007fe4a8b82338] = 120; scopes data [0x00007fe4a8b82338,0x00007fe4a8b82f30] = 3064; scopes pcs [0x00007fe4a8b82f30,0x00007fe4a8b83340] = 1040; dependencies [0x00007fe4a8b83340,0x00007fe4a8b83348] = 8; nul chk table [0x00007fe4a8b83348,0x00007fe4a8b83430] = 232; #; FATAL: caught signal 6 SIGABRT; # If you would like to submit a bug report, please visit:; # http://bugreport.sun.com/bugreport/; #; /tmp/libhail8122447512081932366.so(+0x18f5f)[0x7fe3a7bf0f5f]; /lib/x86_64-linux-gnu/libc.so.6(+0x3ef20)[0x7fe4be507f20]; /lib/x86_64-linux-gnu/libc.so.6(gsignal+0xc7)[0x7fe4be507e97]; /lib/x86_64-linux-gnu/libc.so.6(abort+0x141)[0x7fe4be509801]; /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so(+0x8e80b9)[0x7fe4bd7f00b9]; /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so(+0xaaed23)[0x7fe4bd9b6d23]; /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so(JVM_handle_linux_signal+0x1b4)[0x7fe4bd7fa694]; /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so(+0x8",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4718:10765,stub,stub,10765,https://hail.is,https://github.com/hail-is/hail/issues/4718,1,['stub'],['stub']
Testability,"67b73cdfcb9da545671be6cf59c724360b1544"">8a67b73</a>)</li>; </ul>; <h2><a href=""https://www.github.com/googleapis/python-logging/compare/v2.6.0...v2.7.0"">2.7.0</a> (2021-11-02)</h2>; <h3>Features</h3>; <ul>; <li>add context manager support in client (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/415"">#415</a>) (<a href=""https://www.github.com/googleapis/python-logging/commit/f5af16439807a0954ee78fa91cb69b9493b80176"">f5af164</a>)</li>; <li>added support for iam AuditData proto (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/396"">#396</a>) (<a href=""https://www.github.com/googleapis/python-logging/commit/e3a1eba74dd8b67bcc73a78f784189ef2a9927c2"">e3a1eba</a>)</li>; <li>use structured logging on GCF with python 3.7 (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/434"">#434</a>) (<a href=""https://www.github.com/googleapis/python-logging/commit/5055919f70c82b38de6d1fa7f1df6006865a857b"">5055919</a>)</li>; </ul>; <h3>Bug Fixes</h3>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/googleapis/python-logging/commit/10727ef3c8cca7e20484e58e6afdc79e81a4d4c9""><code>10727ef</code></a> chore(main): release 3.0.0 (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/473"">#473</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/d86be6cf83c3f3b91c4fc0b2e0666b0ca1d7e248""><code>d86be6c</code></a> chore(deps): update dependency google-cloud-storage to v2.1.0 (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/469"">#469</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/8a67b73cdfcb9da545671be6cf59c724360b1544""><code>8a67b73</code></a> docs: update usage guide for v3.0.0 (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/456"">#456</a>)</li>; <li><a h",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11574:10888,log,logging,10888,https://hail.is,https://github.com/hail-is/hail/pull/11574,1,['log'],['logging']
Testability,"67cc106888810d9""><code>011527d</code></a> Bump version to 7.7.0 for release</li>; <li><a href=""https://github.com/cbeust/testng/commit/7846c444a411647f7e401a097224702188c93835""><code>7846c44</code></a> Deprecate support for running JUnit tests</li>; <li><a href=""https://github.com/cbeust/testng/commit/8630a7e8fe12985d71c00212f9362fd38fb0cb9e""><code>8630a7e</code></a> Ensure ITestContext available for JUnit4 tests</li>; <li><a href=""https://github.com/cbeust/testng/commit/7070b020def0089d0d9dc695a5762ad16e974ce6""><code>7070b02</code></a> Streamline dependsOnMethods for configurations</li>; <li><a href=""https://github.com/cbeust/testng/commit/d7e0bb1cbcd7933d34d704678e75cbaf42704505""><code>d7e0bb1</code></a> Deprecate support for running Spock Tests</li>; <li><a href=""https://github.com/cbeust/testng/commit/ca7a3a293008389096be75fea4936af8e5f79650""><code>ca7a3a2</code></a> Ensure All tests run all the time</li>; <li>Additional commits viewable in <a href=""https://github.com/cbeust/testng/compare/testng-6.8.21...7.7.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.testng:testng&package-manager=gradle&previous-version=6.8.21&new-version=7.7.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on i",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12665:16501,test,testng,16501,https://hail.is,https://github.com/hail-is/hail/pull/12665,2,['test'],"['testng', 'testng-']"
Testability,"6926895564544 also had an error][thread 46926900827904 also had an error]. 	SIGSEGV (0xb) at pc=0x00002aaab5115c88, pid=34051, tid=0x00002aae05d1a700; 	#; 	# JRE version: OpenJDK Runtime Environment (8.0_242-b08) (build 1.8.0_242-b08); 	# Java VM: OpenJDK 64-Bit Server VM (25.242-b08 mixed mode linux-amd64 compressed oops); 	# Problematic frame:; 	[thread 46926929250048 also had an error]# ; 	[thread 46926881888000 also had an error]; 	J 5583 C2 __C111CompiledWithAggs.__m131wrapped(Lis/hail/annotations/Region;J)V (280 bytes) @ 0x00002aaab5115c88 [0x00002aaab5115ae0+0x1a8]; 	#; 	# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again; 	#; 	[thread 46924863489792 also had an error]; 	[thread 46924861384448 also had an error]; 	# An error report file with more information is saved as:; 	# /local/scratch/app-20200610100916-0000/0/hs_err_pid34051.log; 	[thread 46926913459968 also had an error]; 	[thread 46924843489024 also had an error][thread 46926917670656 also had an error]. 	#; 	# If you would like to submit a bug report, please visit:; 	# http://bugreport.java.com/bugreport/crash.jsp; 	#. To summarize our observations:; * The issue does not occur when hail is initialized without an existing spark master; * The issue does not occur in HAIL versions prior to 0.2.43 (tested: 0.2.42, 0.2.40, 0.2.38, 0.2.34, 0.2.33 all passed and 0.2.43, 0.2.44 both failed); * The issue occurs consistently when the number of partitions is >= 354 (tested: 500, 450, 400, 360, 354, 1000) and does not occur with lower numbers of partitions (tested: 5, 10, 20, 50, 100, 200, 300, 350, 351, 352, 353); * Changing the number of variants and/or subjects does not appear to change the issue (but we haven't tested that rigorously; increased/decreased by an order of magnitude and observed the same behavior at the same number of partitions); * The issue also occurs on real datasets (large datasets imported from VCF files).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8944:19822,log,log,19822,https://hail.is,https://github.com/hail-is/hail/issues/8944,5,"['log', 'test']","['log', 'tested']"
Testability,"6e5bb98352a430bff758eae""><code>d306ec0</code></a> Update upcoming trainings (<a href=""https://github-redirect.dependabot.com/pytest-dev/pytest/issues/9744"">#9744</a>)</li>; <li><a href=""https://github.com/pytest-dev/pytest/commit/3e4c14bfaa046bcb5b75903470accf83d93f01ce""><code>3e4c14b</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/pytest-dev/pytest/issues/9751"">#9751</a> from fabianegli/main</li>; <li><a href=""https://github.com/pytest-dev/pytest/commit/7f924b13a50a05b8dc894418fa7faf779201e129""><code>7f924b1</code></a> Fix typo in deprecation documentation</li>; <li><a href=""https://github.com/pytest-dev/pytest/commit/4a8f8ada431974f2837260af3ed36299fd382814""><code>4a8f8ad</code></a> build(deps): Bump django from 4.0.2 to 4.0.3 in /testing/plugins_integration ...</li>; <li><a href=""https://github.com/pytest-dev/pytest/commit/c0fd2d883940f1292d5e8234803beaacd08315e6""><code>c0fd2d8</code></a> build(deps): Bump pytest-asyncio from 0.18.1 to 0.18.2 in /testing/plugins_in...</li>; <li><a href=""https://github.com/pytest-dev/pytest/commit/843e01824c257c3190792a9df430289c3abe349d""><code>843e018</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/pytest-dev/pytest/issues/9732"">#9732</a> from nicoddemus/9730-toml-failure</li>; <li><a href=""https://github.com/pytest-dev/pytest/commit/bc43d66b47b917d43a22e0c703ecfe4eea342263""><code>bc43d66</code></a> [automated] Update plugin list (<a href=""https://github-redirect.dependabot.com/pytest-dev/pytest/issues/9733"">#9733</a>)</li>; <li><a href=""https://github.com/pytest-dev/pytest/commit/e38d1cac489e42f4bdbecbb50f9f25dc9c36c19f""><code>e38d1ca</code></a> Improve error message for malformed pyproject.toml files</li>; <li>Additional commits viewable in <a href=""https://github.com/pytest-dev/pytest/compare/6.2.5...7.1.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-n",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11571:5858,test,testing,5858,https://hail.is,https://github.com/hail-is/hail/pull/11571,2,['test'],['testing']
Testability,6ec23f111a4512b562b52d9f8a52ec41c.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.utils.package$.using(package.scala:637) ~[gs:__hail-query-ger0g_jars_b115f6a6ec23f111a4512b562b52d9f8a52ec41c.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.annotations.RegionPool.scopedRegion(RegionPool.scala:162) ~[gs:__hail-query-ger0g_jars_b115f6a6ec23f111a4512b562b52d9f8a52ec41c.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.BackendUtils.$anonfun$collectDArray$15(BackendUtils.scala:90) ~[gs:__hail-query-ger0g_jars_b115f6a6ec23f111a4512b562b52d9f8a52ec41c.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Worker$.$anonfun$main$12(Worker.scala:167) ~[gs:__hail-query-ger0g_jars_b115f6a6ec23f111a4512b562b52d9f8a52ec41c.jar.jar:0.0.1-SNAPSHOT]; 	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23) ~[scala-library-2.12.15.jar:?]; 	at is.hail.services.package$.retryTransientErrors(package.scala:182) ~[gs:__hail-query-ger0g_jars_b115f6a6ec23f111a4512b562b52d9f8a52ec41c.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Worker$.$anonfun$main$11(Worker.scala:166) ~[gs:__hail-query-ger0g_jars_b115f6a6ec23f111a4512b562b52d9f8a52ec41c.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Worker$.$anonfun$main$11$adapted(Worker.scala:164) ~[gs:__hail-query-ger0g_jars_b115f6a6ec23f111a4512b562b52d9f8a52ec41c.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.utils.package$.using(package.scala:637) ~[gs:__hail-query-ger0g_jars_b115f6a6ec23f111a4512b562b52d9f8a52ec41c.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Worker$.main(Worker.scala:164) ~[gs:__hail-query-ger0g_jars_b115f6a6ec23f111a4512b562b52d9f8a52ec41c.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Main$.main(Main.scala:14) ~[gs:__hail-query-ger0g_jars_b115f6a6ec23f111a4512b562b52d9f8a52ec41c.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.backend.service.Main.main(Main.scala) ~[gs:__hail-query-ger0g_jars_b115f6a6ec23f111a4512b562b52d9f8a52ec41c.jar.jar:0.0.1-SNAPSHOT]; 	... 12 more; ```. ### Version. 0.2.124. ### Relevant log output. _No response_,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13697:33975,log,log,33975,https://hail.is,https://github.com/hail-is/hail/issues/13697,1,['log'],['log']
Testability,7-13 | ci | ci | 6 | 0 | 79640784 |; | 2023-07-13 | test | test | 6 | 0 | 4142226688 |; | 2023-07-13 | test | test | 6 | 1 | 108608 |; | 2023-07-13 | test | test | 6 | 2 | 80576 |; | 2023-07-13 | test | test | 6 | 5 | 35648 |; | 2023-07-13 | test | test | 6 | 7 | 578240 |; | 2023-07-13 | test | test | 6 | 9 | 33024 |; | 2023-07-13 | test | test | 6 | 10 | 33472 |; | 2023-07-13 | test | test | 6 | 11 | 110464 |; | 2023-07-13 | test | test | 6 | 14 | 47744 |; | 2023-07-13 | test | test | 6 | 15 | 45440 |; | 2023-07-13 | test | test | 6 | 16 | 79616 |; | 2023-07-13 | test | test | 6 | 17 | 604928 |; | 2023-07-13 | test | test | 6 | 18 | 78016 |; | 2023-07-13 | test | test | 6 | 19 | 87040 |; | 2023-07-13 | test | test | 6 | 20 | 89792 |; | 2023-07-13 | test | test | 6 | 21 | 188736 |; | 2023-07-13 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | tes,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:8798,test,test,8798,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,7-13 | test | test | 6 | 7 | 578240 |; | 2023-07-13 | test | test | 6 | 9 | 33024 |; | 2023-07-13 | test | test | 6 | 10 | 33472 |; | 2023-07-13 | test | test | 6 | 11 | 110464 |; | 2023-07-13 | test | test | 6 | 14 | 47744 |; | 2023-07-13 | test | test | 6 | 15 | 45440 |; | 2023-07-13 | test | test | 6 | 16 | 79616 |; | 2023-07-13 | test | test | 6 | 17 | 604928 |; | 2023-07-13 | test | test | 6 | 18 | 78016 |; | 2023-07-13 | test | test | 6 | 19 | 87040 |; | 2023-07-13 | test | test | 6 | 20 | 89792 |; | 2023-07-13 | test | test | 6 | 21 | 188736 |; | 2023-07-13 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | t,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:9033,test,test,9033,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,7-13 | test | test | 6 | 9 | 33024 |; | 2023-07-13 | test | test | 6 | 10 | 33472 |; | 2023-07-13 | test | test | 6 | 11 | 110464 |; | 2023-07-13 | test | test | 6 | 14 | 47744 |; | 2023-07-13 | test | test | 6 | 15 | 45440 |; | 2023-07-13 | test | test | 6 | 16 | 79616 |; | 2023-07-13 | test | test | 6 | 17 | 604928 |; | 2023-07-13 | test | test | 6 | 18 | 78016 |; | 2023-07-13 | test | test | 6 | 19 | 87040 |; | 2023-07-13 | test | test | 6 | 20 | 89792 |; | 2023-07-13 | test | test | 6 | 21 | 188736 |; | 2023-07-13 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | test | 6 | 45 | 100800 |; | 2023-07-13 | test | test | 6 | 48 | 86592 |; | 2023-07-13 | test | test | 6 | 49 | 94336 |; | 2023-07-13 | test | test | 6 | 50 | 39744 |; | 2023-07-13 | test | test | 6 | 51 | 73344 |; | 2023-07-13 | test | test | 6 | 52 | 357248 |; | 2023-07-13 | test | test | 6 | 54 | 55872 |; | 2023-07-13 | test | test | 6 | 56 | 76864 |; | 2023-07-13 | test | test | 6 | 57 | 94016 |; | 2023-07-13 | test | test | 6 | 60 | 93504 |; | 2023-07-13 | test | test | 6 | 61 | 149952 |; | 2023-07-13 | test | test | 6 | 62 | 48064 |; | 2023-07-13 | test | test | 6 | 63 | 250560 |; | 2023-07-13 | test | test | 6 | 64 | 64704 |; | 2023-07-13 | test | test | 6 | 65 | 51968 |; | 2023-07-13 | test | t,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:9080,test,test,9080,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,"7-96ab-442b-8777-e5f05e247b63/generate_qc_annotations.py"", line 194, in main; vds, sample_table = generate_family_stats(vds, fam_file); File ""/tmp/837e8bf7-96ab-442b-8777-e5f05e247b63/generate_qc_annotations.py"", line 134, in generate_family_stats; _, _, adj_per_sample, adj_per_variant = hl.mendel_errors(vds, ped); File ""<decorator-gen-616>"", line 2, in mendel_errors; File ""/tmp/837e8bf7-96ab-442b-8777-e5f05e247b63/hail-devel-48d0534b1b09.zip/hail/typecheck/check.py"", line 489, in _typecheck; File ""/tmp/837e8bf7-96ab-442b-8777-e5f05e247b63/hail-devel-48d0534b1b09.zip/hail/methods/family_methods.py"", line 205, in mendel_errors; File ""/usr/lib/spark/python/lib/py4j-0.10.4-src.zip/py4j/java_gateway.py"", line 1133, in __call__; File ""/tmp/837e8bf7-96ab-442b-8777-e5f05e247b63/hail-devel-48d0534b1b09.zip/hail/utils/java.py"", line 238, in deco; hail.utils.java.FatalError: AssertionError: assertion failed. Java stack trace:; java.lang.AssertionError: assertion failed; 	at scala.Predef$.assert(Predef.scala:156); 	at is.hail.rvd.OrderedRVDPartitioner.getPartitionPK(OrderedRVDPartitioner.scala:59); 	at is.hail.sparkextras.OrderedDependency$.getDependencies(OrderedRDD2.scala:22); 	at is.hail.sparkextras.OrderedJoinDistinctRDD2$$anonfun$getPartitions$1.apply(OrderedRDD2.scala:42); 	at is.hail.sparkextras.OrderedJoinDistinctRDD2$$anonfun$getPartitions$1.apply(OrderedRDD2.scala:39); 	at scala.Array$.tabulate(Array.scala:331); 	at is.hail.sparkextras.OrderedJoinDistinctRDD2.getPartitions(OrderedRDD2.scala:39); 	at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:252); 	at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:250); 	at scala.Option.getOrElse(Option.scala:121); 	at org.apache.spark.rdd.RDD.partitions(RDD.scala:250); 	at org.apache.spark.rdd.MapPartitionsRDD.getPartitions(MapPartitionsRDD.scala:35); 	at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:252); 	at org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:250); 	a",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3039:1437,assert,assert,1437,https://hail.is,https://github.com/hail-is/hail/issues/3039,1,['assert'],['assert']
Testability,"74845225#HowTo...-SetUpTeamCitybehindaProxyServer):. ``` apache; <IfModule mod_ssl.c>; <VirtualHost *:443>; # The ServerName directive sets the request scheme, hostname and port that; # the server uses to identify itself. This is used when creating; # redirection URLs. In the context of virtual hosts, the ServerName; # specifies what hostname must appear in the request's Host: header to; # match this virtual host. For the default virtual host (this file) this; # value is not decisive as it is used as a last resort host regardless.; # However, you must set it for any further virtual host explicitly.; ServerName hail.is; ServerAlias www.hail.is. ServerAdmin webmaster@localhost; DocumentRoot /var/www/html. RedirectMatch 404 /\.git. # Available loglevels: trace8, ..., trace1, debug, info, notice, warn,; # error, crit, alert, emerg.; # It is also possible to configure the loglevel for particular; # modules, e.g.; #LogLevel info ssl:warn. ErrorLog ${APACHE_LOG_DIR}/error.log; CustomLog ${APACHE_LOG_DIR}/access.log combined. # For most configuration files from conf-available/, which are; # enabled or disabled at a global level, it is possible to; # include a line for only one particular virtual host. For example the; # following line enables the CGI configuration for this host only; # after it has been globally disabled with ""a2disconf"".; #Include conf-available/serve-cgi-bin.conf; SSLCertificateFile /etc/letsencrypt/live/hail.is/fullchain.pem; SSLCertificateKeyFile /etc/letsencrypt/live/hail.is/privkey.pem; Include /etc/letsencrypt/options-ssl-apache.conf; </VirtualHost>. <VirtualHost *:443>; ServerName ci.hail.is; ServerAdmin webmaster@localhost. LoadModule proxy_module /usr/lib/apache2/modules/mod_proxy.so; LoadModule proxy_http_module /usr/lib/apache2/modules/mod_proxy_http.so; LoadModule headers_module /usr/lib/apache2/modules/mod_headers.so; LoadModule proxy_wstunnel_module /usr/lib/apache2/modules/mod_proxy_wstunnel.so. ProxyRequests Off; ProxyPreserveHost On; Proxy",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/674#issuecomment-243899170:1485,log,log,1485,https://hail.is,https://github.com/hail-is/hail/issues/674#issuecomment-243899170,1,['log'],['log']
Testability,7536 |; | __testproject_iizhz61z7543_uvxWn | test | 6 | 0 | 11331136 |; | ci | ci | 6 | 0 | 79640784 |; | test | test | 6 | 0 | 4063028160 |; | test | test | 6 | 1 | 189760 |; | test | test | 6 | 3 | 607168 |; | test | test | 6 | 4 | 749952 |; | test | test | 6 | 5 | 46912 |; | test | test | 6 | 6 | 158336 |; | test | test | 6 | 7 | 70336 |; | test | test | 6 | 8 | 167680 |; | test | test | 6 | 9 | 523136 |; | test | test | 6 | 10 | 40640 |; | test | test | 6 | 11 | 616448 |; | test | test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | te,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:1649,test,test,1649,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,"7b25f898afbc247b29bce4""><code>ffc91a9</code></a> Prepare release 0.3.0 (<a href=""https://redirect.github.com/pyasn1/pyasn1-modules/issues/9"">#9</a>)</li>; <li><a href=""https://github.com/pyasn1/pyasn1-modules/commit/9c2ad2b8226d285272ebee1180354e4e02408b62""><code>9c2ad2b</code></a> Add note about new maintainers (<a href=""https://redirect.github.com/pyasn1/pyasn1-modules/issues/6"">#6</a>)</li>; <li><a href=""https://github.com/pyasn1/pyasn1-modules/commit/10a10e7c4508ac4d858cbe7c8ac9e46575c2bb5c""><code>10a10e7</code></a> Pass tag to workflow call (<a href=""https://redirect.github.com/pyasn1/pyasn1-modules/issues/5"">#5</a>)</li>; <li><a href=""https://github.com/pyasn1/pyasn1-modules/commit/e0c7fd6723bd63db4183352d21dfbebd6c2553b1""><code>e0c7fd6</code></a> Prepare v0.3.0.rc1 with new release workflow (<a href=""https://redirect.github.com/pyasn1/pyasn1-modules/issues/3"">#3</a>)</li>; <li><a href=""https://github.com/pyasn1/pyasn1-modules/commit/7d8e520aa7d0e71ef7144ce381c8a41464e687dc""><code>7d8e520</code></a> Modernize build and test infra (<a href=""https://redirect.github.com/pyasn1/pyasn1-modules/issues/2"">#2</a>)</li>; <li><a href=""https://github.com/pyasn1/pyasn1-modules/commit/51f5bfe83178871fe2ee80df6b8e13ed54a2d897""><code>51f5bfe</code></a> Add GitHub Actions CI, test with 3.9 to 3.11 (<a href=""https://redirect.github.com/pyasn1/pyasn1-modules/issues/1"">#1</a>)</li>; <li><a href=""https://github.com/pyasn1/pyasn1-modules/commit/bdbcc5d9650a8e8382979f089df3307dd4121b49""><code>bdbcc5d</code></a> Bump up coverage percentage cut at tox</li>; <li><a href=""https://github.com/pyasn1/pyasn1-modules/commit/7c7e4add6cb9f1a47a2303f819c8472491f6ebbb""><code>7c7e4ad</code></a> Add support for RFC 8769 (<a href=""https://redirect.github.com/pyasn1/pyasn1-modules/issues/136"">#136</a>)</li>; <li><a href=""https://github.com/pyasn1/pyasn1-modules/commit/13ca0da0cc4d0703ca42113f607bde95cf0bfd9c""><code>13ca0da</code></a> Fix tox deps inheritance</li>; <li><a href=""https://github.com/py",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12928:7716,test,test,7716,https://hail.is,https://github.com/hail-is/hail/pull/12928,1,['test'],['test']
Testability,"7fbeaec3ca22, pid=6662, tid=0x00007fbe3dd81700; #; # JRE version: OpenJDK Runtime Environment (8.0_181-b13) (build 1.8.0_181-8u181-b13-1~deb9u1-b13); # Java VM: OpenJDK 64-Bit Server VM (25.181-b13 mixed mode linux-amd64 compressed oops); # Problematic frame:; # J 14270 C1 is.hail.annotations.Region.storeInt(JI)V (6 bytes) @ 0x00007fbeaec3ca22 [0x00007fbeaec3c980+0xa2]; #; # Failed to write core dump. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again; #; # An error report file with more information is saved as:; # /tmp/828e66d5a71741d7ab2c8d6580997da3/hs_err_pid6662.log; Compiled method (c1) 88328 14270 3 is.hail.annotations.Region::storeInt (6 bytes); total in heap [0x00007fbeaec3c810,0x00007fbeaec3cbc0] = 944; relocation [0x00007fbeaec3c938,0x00007fbeaec3c968] = 48; main code [0x00007fbeaec3c980,0x00007fbeaec3caa0] = 288; stub code [0x00007fbeaec3caa0,0x00007fbeaec3cb30] = 144; oops [0x00007fbeaec3cb30,0x00007fbeaec3cb38] = 8; metadata [0x00007fbeaec3cb38,0x00007fbeaec3cb48] = 16; scopes data [0x00007fbeaec3cb48,0x00007fbeaec3cb78] = 48; scopes pcs [0x00007fbeaec3cb78,0x00007fbeaec3cbb8] = 64; dependencies [0x00007fbeaec3cbb8,0x00007fbeaec3cbc0] = 8; #; # If you would like to submit a bug report, please visit:; # http://bugreport.java.com/bugreport/crash.jsp; #; FATAL: caught signal 6 SIGABRT; /tmp/libhail7224206977949339430.so(+0x1788c)[0x7fbdea5db88c]; /lib/x86_64-linux-gnu/libc.so.6(+0x33060)[0x7fbec2eae060]; /lib/x86_64-linux-gnu/libc.so.6(gsignal+0xcf)[0x7fbec2eadfff]; /lib/x86_64-linux-gnu/libc.so.6(abort+0x16a)[0x7fbec2eaf42a]; /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so(+0x8c0259)[0x7fbec27f0259]; /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so(+0xa744f8)[0x7fbec29a44f8]; /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so(JVM_handle_linux_signal+0x265)[0x7fbec27f9e45]; /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so(+0x8bd4c8)[0x7fb",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4418:2774,stub,stub,2774,https://hail.is,https://github.com/hail-is/hail/issues/4418,1,['stub'],['stub']
Testability,"8 \; --requester-pays-allow-all \; --packages=""git+https://github.com/broadinstitute/gnomad_methods.git@main"",""git+https://github.com/broadinstitute/gnomad_qc.git@main"" \; --autoscaling-policy=max-20 \; --master-machine-type n1-highmem-16 \; --no-off-heap-memory \; --worker-machine-type n1-highmem-8 \; --max-idle 560m \; --labels gnomad_release=gnomad_v4,gnomad_v4_testing=readviz_test_118; ```; Command:; ```; hailctl dataproc submit readviz-118 /Users/jgoodric/PycharmProjects/gnomad-readviz/step1__select_samples.py --sample-metadata-tsv gs://gnomad-readviz/v4.0/gnomad.exomes.v4.0.metadata.tsv.gz --output-ht-path gs://gnomad-tmp/julia/readviz/gnomad.exomes.v4.0.readviz_crams.part_41229.hail_118.ht; Job Link: https://console.cloud.google.com/dataproc/jobs/4db24eb6f93b491f8f07babc25c0d9c9/monitoring?region=us-central1&project=broad-mpg-gnomad; ```; Test with Hail 0.2.117:. Cluster:; ```; hailctl dataproc start readviz-117 \; --requester-pays-allow-all \; --packages=""git+https://github.com/broadinstitute/gnomad_methods.git@main"",""git+https://github.com/broadinstitute/gnomad_qc.git@main"" \; --autoscaling-policy=max-20 \; --master-machine-type n1-highmem-16 \; --no-off-heap-memory \; --worker-machine-type n1-highmem-8 \; --max-idle 560m \; --labels gnomad_release=gnomad_v4,gnomad_v4_testing=readviz_test_117; ```; Command:; ```; hailctl dataproc submit readviz-117 /Users/jgoodric/PycharmProjects/gnomad-readviz/step1__select_samples.py --sample-metadata-tsv gs://gnomad-readviz/v4.0/gnomad.exomes.v4.0.metadata.tsv.gz --output-ht-path gs://gnomad-tmp/julia/readviz/gnomad.exomes.v4.0.readviz_crams.part_41229.hail_117.ht; Job Link: https://console.cloud.google.com/dataproc/jobs/7d89abedcfad44d4b831986806a4e248/monitoring?region=us-central1&project=broad-mpg-gnomad; ```; I will update here with the logs when I have them, but in the meantime, do you see any problems with reverting back to 0.2.117 for this run?. Thanks!. ### Version. 0.2.119. ### Relevant log output. _No response_",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13248:3122,log,logs,3122,https://hail.is,https://github.com/hail-is/hail/issues/13248,2,['log'],"['log', 'logs']"
Testability,"8 is reconciled, to protect against k8 operational errors. Obviously that means our record of state is a point of failure, but db failure modes and uptime solutions are well defined across cloud/db provider vendors (we can minimize lock-in as well). The idea seemed to be that we don't particularly care how k8 works, or how much state it persists; the contract is with our users, and we should satisfy . * K8 does not store all state indefinitely. It's more like a rotating log: https://stackoverflow.com/questions/40636021/how-to-list-kubernetes-recently-deleted-pods . For users, and for investors, we want to have a permanent record of all user interactions. * Some kinds of data may be awkward to store and query within pod labels. For instance, how much user state do we want to store in labels? How do we store operation graphs / history?; ; * aggregation operations across users or resources; * a given, or all users' history: so the user can manage, see, so we can track (some, gross) metrics for billing; * various sorting operations (by date/time, etc); * full log of state for a given set of related resources (I think k8 stores last 5 events, this is probably configurable) ; ability to retry in a user-controlled way, even if pod is deleted from etcd. * Operations across N k8 resources seems like it may take up to N queries (i.e k8s.list_namespaced_service, k8s.list_namespaced_pod). There may be more efficient ways of handling this (there either is, or should be a way of querying one selector across all resources). . * Performance, even for very basic queries. An initial assumption, may prove to be incorrect, but I think we will find a fast db to be much faster than K8, even if we could directly query etcd. This is based on my experience with Amazon data stores, and general impression/experience with google cs products.; * Open issue on this: even directly accessed, etcd is slow, doesn't index selectors https://github.com/kubernetes/kubernetes/issues/4817. * We may want to",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5215#issuecomment-459054290:1612,log,log,1612,https://hail.is,https://github.com/hail-is/hail/pull/5215#issuecomment-459054290,1,['log'],['log']
Testability,"8, 2015 21:2_. Hail runtime for linreg with 10 PCs on profile.vds: 56s, 59s, 58s.; Hail runtime for variantqc on profile.vds: 35s, 34s, 35s.; Plink runtime for linreg with 10 PCs on profile.vds: 13s, 13s, 13s.; Hail runtime (8 cores) for linreg with 10 PCs on profile.vds: 23s, 25s, 23s. LINREG:; /Users/jbloom/k3/build/install/k3/bin/k3 read -i ~/data/profile.vds linreg -f ~/data/profile.fam -c ~/data/profile.cov -o ~/data/profile.linreg. read: 1407.415486; linreg: 58336.701622. VARIANTQC:; /Users/jbloom/k3/build/install/k3/bin/k3 read -i ~/data/profile.vds variantqc -o ~/data/profile.variantqc. read: 1417.763771; variantqc: 35466.355219. PLINK:; create bed/bim/fam:; ./plink --vcf ~/data/profile.vcf.bgz. run regression:; time ./plink --bfile plink --double-id --pheno ~/data/profile.pheno; --allow-no-sex --covar ~/data/profile.covar --linear --out; ~/data/plinkTest. PLINK v1.90b3w 64-bit (3 Sep 2015) https://www.cog-genomics.org/plink2; (C) 2005-2015 Shaun Purcell, Christopher Chang GNU General Public License v3; Logging to /Users/Jon/data/plinkTest.log.; Options in effect:; --allow-no-sex; --bfile plink; --covar /Users/Jon/data/profile.covar; --double-id; --linear; --out /Users/Jon/data/plinkTest; --pheno /Users/Jon/data/profile.pheno; 16384 MB RAM detected; reserving 8192 MB for main workspace.; 24885 variants loaded from .bim file.; 2535 people (0 males, 0 females, 2535 ambiguous) loaded from .fam.; Ambiguous sex IDs written to /Users/Jon/data/plinkTest.nosex .; 2535 phenotype values present after --pheno.; Using 1 thread.; Warning: This run includes BLAS/LAPACK linear algebra operations which; currently disregard the --threads limit. If this is problematic, you; may want to recompile against single-threaded BLAS/LAPACK.; --covar: 10 covariates loaded.; Before main variant filters, 2535 founders and 0 nonfounders present.; Calculating allele frequencies... done.; Total genotyping rate is 0.907692.; 24885 variants and 2535 people pass filters and QC.; Phenotype data ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/50#issuecomment-152273684:1055,Log,Logging,1055,https://hail.is,https://github.com/hail-is/hail/issues/50#issuecomment-152273684,1,['Log'],['Logging']
Testability,80 ServiceBackend$: INFO: parallelizeAndComputeWithIndex: pty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY=: reading results\n2022-11-15 20:31:27.881 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.0\n2022-11-15 20:31:28.080 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.0 response 200\n2022-11-15 20:31:28.104 ServiceBackend$: INFO: result 0 complete - 8157265 bytes\n2022-11-15 20:31:28.104 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.1\n2022-11-15 20:31:28.293 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.1 response 200\n2022-11-15 20:31:28.313 ServiceBackend$: INFO: result 1 complete - 8157265 bytes\n2022-11-15 20:31:28.313 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.2\n2022-11-15 20:31:28.522 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.2 response 200\n2022-11-15 20:31:28.587 ServiceBackend$: INFO: result 2 complete - 8157265 bytes\n2022-11-15 20:31:28.587 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.3\n2022-11-15 20:31:28.782 Requester: INFO: request GET http://memory.hail/api/v1alpha/object,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:36274,test,test-,36274,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,"84) ~[gs:__hail-query-ger0g_jars_f00f916faf783b89cc2fc00bfc3e39df5485d8b0.jar.jar:0.0.1-SNAPSHOT]; at is.hail.io.BlockingInputBuffer.readByte(InputBuffers.scala:402) ~[gs:__hail-query-ger0g_jars_f00f916faf783b89cc2fc00bfc3e39df5485d8b0.jar.jar:0.0.1-SNAPSHOT]; ....; ```. A simplified version of the script:. ```python3; import hail as hl; import gnomad.utils.sparse_mt. tmp_dir = 'gs://bucket/'; vds_file = 'gs://neale-bge/bge-wave-1.vds'; out = 'gs://bucket/foo.vcf.bgz'. hl.init(default_reference = 'GRCh38',; tmp_dir = tmp_dir). vds = hl.vds.read_vds(vds_file); mt = hl.vds.to_dense_mt(vds); t = gnomad.utils.sparse_mt.default_compute_info(mt); t = t.annotate(info=t.info.drop('AS_SB_TABLE')); t = t.annotate(info = t.info.drop(; 'AS_QUALapprox', 'AS_VarDP', 'AS_SOR', 'AC_raw', 'AC', 'AS_SB'; )); t = t.drop('AS_lowqual'). hl.methods.export_vcf(dataset = t, output = out, tabix = True); ```. [batch-7751958-2713-main.log](https://github.com/hail-is/hail/files/12314207/batch-7751958-2713-main.log). ### Version. 0.2.120. ### Relevant log output. ```shell; Traceback (most recent call last):; File ""/Users/rye/Projects/VQSR/formatting-VQSR-vcf.py"", line 102, in <module>; main(args); File ""/Users/rye/Projects/VQSR/formatting-VQSR-vcf.py"", line 66, in main; hl.methods.export_vcf(dataset = t, output = args.out, tabix = False); File ""<decorator-gen-1440>"", line 2, in export_vcf; File ""/Users/rye/opt/anaconda3/lib/python3.9/site-packages/hail/typecheck/check.py"", line 584, in wrapper; return __original_func(*args_, **kwargs_); File ""/Users/rye/opt/anaconda3/lib/python3.9/site-packages/hail/methods/impex.py"", line 592, in export_vcf; Env.backend().execute(ir.MatrixWrite(dataset._mir, writer)); File ""/Users/rye/opt/anaconda3/lib/python3.9/site-packages/hail/backend/service_backend.py"", line 535, in execute; return self._cancel_on_ctrl_c(self._async_execute(ir, timed=timed, **kwargs)); File ""/Users/rye/opt/anaconda3/lib/python3.9/site-packages/hail/backend/service_backend.py"", line 526, i",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13409:1790,log,log,1790,https://hail.is,https://github.com/hail-is/hail/issues/13409,1,['log'],['log']
Testability,85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); 	at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:123); Caused by: java.lang.ArrayIndexOutOfBoundsException: 3; 	at scala.collection.mutable.WrappedArray$ofRef.apply(WrappedArray.scala:127); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33$$anonfun$apply$19.getKey$1(OrderingSuite.scala:345); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33$$anonfun$apply$19.apply(OrderingSuite.scala:347); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33$$anonfun$apply$19.apply(OrderingSuite.scala:318); 	at is.hail.utils.package$.using(package.scala:613); 	at is.hail.annotations.Region$.scoped(Region.scala:13); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33.apply(OrderingSuite.scala:318); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33.apply(OrderingSuite.scala:314); 	at is.hail.check.GenProp1$$anonfun$apply$1$$anonfun$1.apply$mcZ$sp(Prop.scala:28); 	at is.hail.check.GenProp1$$anonfun$apply$1$$anonfun$1.apply(Prop.scala:2,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5630:1968,Test,TestNG,1968,https://hail.is,https://github.com/hail-is/hail/issues/5630,1,['Test'],['TestNG']
Testability,85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-2LzGioRNy6RqIS2pfXIoSO&uploadType=resumable&upload_id=ADPycdvZ5HhnGfOKt5TE1qXWiHpqIpZnXVTYWuWUCXNPRF9HqyCB-4LvRsxNX6SUWRgk13pYrzYaa9-wXlvNZt1oct0ptaEz0bS3; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 268435456; remoteOffset: 285212672; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.access$1000(BlobWrite,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:4892,Test,TestNG,4892,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['Test'],['TestNG']
Testability,85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-6BO4gZ18Lheigp3ir9RSOh&uploadType=resumable&upload_id=ADPycduiXx2Jtiy_0Ll131_pPeEYKnnA23Hlk28_9TFESUMaubA9OqLK_n8Td5rPhTXnlpssGo796Q4bJxUeblhmSaYcCSWAMg2k; chunkOffset: 16777216; chunkLength: 16777216; localOffset: 1325400064; remoteOffset: 1342177280; lastChunk: false. 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:131); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.unrecoverableState(BlobWriteChannel.java:87); 		at is.hail.relocated.com.google.cloud.storage.BlobWriteChannel.access$1000(BlobWri,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:4699,Test,TestNG,4699,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['Test'],['TestNG']
Testability,"869: in _run_once; event_list = self._selector.select(timeout); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . self = <selectors.EpollSelector object at 0x7fae890f2d30>; timeout = 15.402000000000001. def select(self, timeout=None):; if timeout is None:; timeout = -1; elif timeout <= 0:; timeout = 0; else:; # epoll_wait() has a resolution of 1 millisecond, round away; # from zero to wait *at least* timeout seconds.; timeout = math.ceil(timeout * 1e3) * 1e-3; ; # epoll_wait() expects `maxevents` to be greater than zero;; # we want to make sure that `select()` can be called when no; # FD is registered.; max_ev = max(len(self._fd_to_key), 1); ; ready = []; try:; > fd_event_list = self._selector.poll(timeout, max_ev); E Failed: Timeout >360.0s. usr/lib/python3.9/selectors.py:469: Failed; ------------------------------ Captured log setup ------------------------------; 2023-09-06T21:45:24 INFO test.conftest conftest.py:14:log_before_after starting test; 2023-09-06T21:45:24 INFO hailtop.aiocloud.aioazure.credentials credentials.py:99:default_credentials using credentials file /test-gsa-key/key.json; ------------------------------ Captured log call -------------------------------; 2023-09-06T21:45:25 INFO azure.identity.aio._internal.get_token_mixin get_token_mixin.py:93:get_token ClientSecretCredential.get_token succeeded; 2023-09-06T21:45:25 INFO batch_client.aioclient aioclient.py:809:_submit created batch 191; 2023-09-06T21:47:17 WARNING hailtop.utils utils.py:842:retry_transient_errors_with_debug_string A transient error occured. We will automatically retry. Do not be alarmed. We have thus far seen 2 transient errors (next delay: 3.794s). The most recent error was <class 'asyncio.exceptions.TimeoutError'> . ------------------------------ live log teardown -------------------------------; 2023-09-06T21:51:25 INFO test.conftest conftest.py:16:log_before_after ending test. ```. ### Version. 0.2.120. ### Relevant log output. _No response_",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13582:3961,test,test-gsa-key,3961,https://hail.is,https://github.com/hail-is/hail/issues/13582,6,"['log', 'test']","['log', 'test', 'test-gsa-key']"
Testability,"86cd1b34""><code>5e76f19</code></a> chore: Update the Java code generator (gapic-generator-java) to 2.25.0 (<a href=""https://redirect.github.com/googleapis/java-storage/issues/2198"">#2198</a>)</li>; <li><a href=""https://github.com/googleapis/java-storage/commit/26552f4b78f77d90df4e3dfb829c3f9c092fc817""><code>26552f4</code></a> deps: update dependency com.google.cloud:google-cloud-shared-dependencies to ...</li>; <li><a href=""https://github.com/googleapis/java-storage/commit/bffb397730d39f4c1c9f8fa80e316a26c39534ce""><code>bffb397</code></a> chore: add SyncingFileChannel (<a href=""https://redirect.github.com/googleapis/java-storage/issues/2157"">#2157</a>)</li>; <li><a href=""https://github.com/googleapis/java-storage/commit/4f8bb658e9ff3cba5e745acae13ec4094a1a48d5""><code>4f8bb65</code></a> deps: update dependency org.graalvm.buildtools:native-maven-plugin to v0.9.26...</li>; <li><a href=""https://github.com/googleapis/java-storage/commit/67badabaa5126ec6d011879c3983e6b69880c900""><code>67badab</code></a> chore(benchmarking): Remove default for temp directory and read from java.io....</li>; <li><a href=""https://github.com/googleapis/java-storage/commit/45e66e89373ef016eff9b7deb30dbdfa818770d2""><code>45e66e8</code></a> deps: update actions/checkout action to v4 (<a href=""https://redirect.github.com/googleapis/java-storage/issues/2190"">#2190</a>)</li>; <li><a href=""https://github.com/googleapis/java-storage/commit/5c048c499eef224dade8f4409dfae732cb5a7017""><code>5c048c4</code></a> deps: update actions/checkout action to v4 (<a href=""https://redirect.github.com/googleapis/java-storage/issues/2189"">#2189</a>)</li>; <li>Additional commits viewable in <a href=""https://github.com/googleapis/java-storage/compare/v2.17.1...v2.27.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=com.google.cloud:google-cloud-storage&package-manager=gradle&previous-version=2.17.1&ne",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13624:14450,benchmark,benchmarking,14450,https://hail.is,https://github.com/hail-is/hail/pull/13624,1,['benchmark'],['benchmarking']
Testability,"8d40bf67af11e57b74615b0c3b8e8aa3e"">e3cac88</a>)</li>; </ul>; <h3>Documentation</h3>; <ul>; <li>update usage guide for v3.0.0 (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/456"">#456</a>) (<a href=""https://github.com/googleapis/python-logging/commit/8a67b73cdfcb9da545671be6cf59c724360b1544"">8a67b73</a>)</li>; </ul>; <h2><a href=""https://www.github.com/googleapis/python-logging/compare/v2.6.0...v2.7.0"">2.7.0</a> (2021-11-02)</h2>; <h3>Features</h3>; <ul>; <li>add context manager support in client (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/415"">#415</a>) (<a href=""https://www.github.com/googleapis/python-logging/commit/f5af16439807a0954ee78fa91cb69b9493b80176"">f5af164</a>)</li>; <li>added support for iam AuditData proto (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/396"">#396</a>) (<a href=""https://www.github.com/googleapis/python-logging/commit/e3a1eba74dd8b67bcc73a78f784189ef2a9927c2"">e3a1eba</a>)</li>; <li>use structured logging on GCF with python 3.7 (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/434"">#434</a>) (<a href=""https://www.github.com/googleapis/python-logging/commit/5055919f70c82b38de6d1fa7f1df6006865a857b"">5055919</a>)</li>; </ul>; <h3>Bug Fixes</h3>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/googleapis/python-logging/commit/10727ef3c8cca7e20484e58e6afdc79e81a4d4c9""><code>10727ef</code></a> chore(main): release 3.0.0 (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/473"">#473</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/d86be6cf83c3f3b91c4fc0b2e0666b0ca1d7e248""><code>d86be6c</code></a> chore(deps): update dependency google-cloud-storage to v2.1.0 (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/469"">#469</a>",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11574:10614,log,logging,10614,https://hail.is,https://github.com/hail-is/hail/pull/11574,2,['log'],['logging']
Testability,"9.94.72.55:4040; 17/01/17 09:24:46 INFO Executor: Starting executor ID driver on host localhost; 17/01/17 09:24:46 INFO Utils: Successfully started service 'org.apache.spark.network.netty.NettyBlockTransferService' on port 37833.; 17/01/17 09:24:46 INFO NettyBlockTransferService: Server created on 129.94.72.55:37833; 17/01/17 09:24:46 INFO BlockManagerMaster: Registering BlockManager BlockManagerId(driver, 129.94.72.55, 37833); 17/01/17 09:24:46 INFO BlockManagerMasterEndpoint: Registering block manager 129.94.72.55:37833 with 15.8 GB RAM, BlockManagerId(driver, 129.94.72.55, 37833); 17/01/17 09:24:46 INFO BlockManagerMaster: Registered BlockManager BlockManagerId(driver, 129.94.72.55, 37833); hail: info: running: read test.in.vds; SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".; SLF4J: Defaulting to no-operation (NOP) logger implementation; SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.; hail: info: running: annotatevariants expr -c 'va = {}'; hail: info: running: write -o test.out.vds; [Stage 1:==> (1 + 24) / 25]hail: write: caught exception: org.apache.spark.SparkException: Job aborted.; at org.apache.spark.sql.execution.datasources.InsertIntoHadoopFsRelationCommand$$anonfun$run$1.apply$mcV$sp(InsertIntoHadoopFsRelationCommand.scala:149); at org.apache.spark.sql.execution.datasources.InsertIntoHadoopFsRelationCommand$$anonfun$run$1.apply(InsertIntoHadoopFsRelationCommand.scala:115); at org.apache.spark.sql.execution.datasources.InsertIntoHadoopFsRelationCommand$$anonfun$run$1.apply(InsertIntoHadoopFsRelationCommand.scala:115); at org.apache.spark.sql.execution.SQLExecution$.withNewExecutionId(SQLExecution.scala:57); at org.apache.spark.sql.execution.datasources.InsertIntoHadoopFsRelationCommand.run(InsertIntoHadoopFsRelationCommand.scala:115); at org.apache.spark.sql.execution.command.ExecutedCommandExec.sideEffectResult$lzycompute(commands.scala:58); at org.apache.spark.sql.execution.command.ExecutedCommandExe",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1260:2874,test,test,2874,https://hail.is,https://github.com/hail-is/hail/issues/1260,1,['test'],['test']
Testability,"916faf783b89cc2fc00bfc3e39df5485d8b0.jar.jar:0.0.1-SNAPSHOT]; at is.hail.io.BlockingInputBuffer.readByte(InputBuffers.scala:402) ~[gs:__hail-query-ger0g_jars_f00f916faf783b89cc2fc00bfc3e39df5485d8b0.jar.jar:0.0.1-SNAPSHOT]; ....; ```. A simplified version of the script:. ```python3; import hail as hl; import gnomad.utils.sparse_mt. tmp_dir = 'gs://bucket/'; vds_file = 'gs://neale-bge/bge-wave-1.vds'; out = 'gs://bucket/foo.vcf.bgz'. hl.init(default_reference = 'GRCh38',; tmp_dir = tmp_dir). vds = hl.vds.read_vds(vds_file); mt = hl.vds.to_dense_mt(vds); t = gnomad.utils.sparse_mt.default_compute_info(mt); t = t.annotate(info=t.info.drop('AS_SB_TABLE')); t = t.annotate(info = t.info.drop(; 'AS_QUALapprox', 'AS_VarDP', 'AS_SOR', 'AC_raw', 'AC', 'AS_SB'; )); t = t.drop('AS_lowqual'). hl.methods.export_vcf(dataset = t, output = out, tabix = True); ```. [batch-7751958-2713-main.log](https://github.com/hail-is/hail/files/12314207/batch-7751958-2713-main.log). ### Version. 0.2.120. ### Relevant log output. ```shell; Traceback (most recent call last):; File ""/Users/rye/Projects/VQSR/formatting-VQSR-vcf.py"", line 102, in <module>; main(args); File ""/Users/rye/Projects/VQSR/formatting-VQSR-vcf.py"", line 66, in main; hl.methods.export_vcf(dataset = t, output = args.out, tabix = False); File ""<decorator-gen-1440>"", line 2, in export_vcf; File ""/Users/rye/opt/anaconda3/lib/python3.9/site-packages/hail/typecheck/check.py"", line 584, in wrapper; return __original_func(*args_, **kwargs_); File ""/Users/rye/opt/anaconda3/lib/python3.9/site-packages/hail/methods/impex.py"", line 592, in export_vcf; Env.backend().execute(ir.MatrixWrite(dataset._mir, writer)); File ""/Users/rye/opt/anaconda3/lib/python3.9/site-packages/hail/backend/service_backend.py"", line 535, in execute; return self._cancel_on_ctrl_c(self._async_execute(ir, timed=timed, **kwargs)); File ""/Users/rye/opt/anaconda3/lib/python3.9/site-packages/hail/backend/service_backend.py"", line 526, in _cancel_on_ctrl_c; return async_to_",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13409:1831,log,log,1831,https://hail.is,https://github.com/hail-is/hail/issues/13409,1,['log'],['log']
Testability,"93</code></a> Typeshed cherry-pick: Use import instead of type alias in <code>email/message.pyi</code>...</li>; <li><a href=""https://github.com/python/mypy/commit/48ff811fdf666e8a3149a692c0238f9019f55e58""><code>48ff811</code></a> Bump version to 0.940</li>; <li><a href=""https://github.com/python/mypy/commit/739028085e82368ff646249588e85c17ebf1c636""><code>7390280</code></a> Trigger wheel builds</li>; <li><a href=""https://github.com/python/mypy/commit/942395acb984e272eb65caf2e6e0de2aba9fcb87""><code>942395a</code></a> Minor documentation updates (<a href=""https://github-redirect.dependabot.com/python/mypy/issues/12329"">#12329</a>)</li>; <li><a href=""https://github.com/python/mypy/commit/5954bc9cbfef4a8fff658cde00016f12d03b46f8""><code>5954bc9</code></a> Update copyright in LICENSE (<a href=""https://github-redirect.dependabot.com/python/mypy/issues/12330"">#12330</a>)</li>; <li><a href=""https://github.com/python/mypy/commit/8650f5c2eedc26f11b6f5c35cf0c0d752aaf51fb""><code>8650f5c</code></a> stubgen: fix non default keyword-only argument positioning (<a href=""https://github-redirect.dependabot.com/python/mypy/issues/12303"">#12303</a>)</li>; <li><a href=""https://github.com/python/mypy/commit/226661f62f365102f5fd913b39b32ed3f12e208b""><code>226661f</code></a> Exhaustiveness checking for match statements (<a href=""https://github-redirect.dependabot.com/python/mypy/issues/12267"">#12267</a>)</li>; <li><a href=""https://github.com/python/mypy/commit/fce1b548be74f7c65f8e3645f2a2b46aeff0c5a8""><code>fce1b54</code></a> CI: Do not run mypy_primer on stubtest/stubgen PRs (<a href=""https://github-redirect.dependabot.com/python/mypy/issues/12295"">#12295</a>)</li>; <li><a href=""https://github.com/python/mypy/commit/c7a81620bef7585cca6905861bb7ef34ec12da2f""><code>c7a8162</code></a> stubtest: ignore more dunder positional-only errors (<a href=""https://github-redirect.dependabot.com/python/mypy/issues/12294"">#12294</a>)</li>; <li>Additional commits viewable in <a href=""https://github.com/python",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11573:1361,stub,stubgen,1361,https://hail.is,https://github.com/hail-is/hail/pull/11573,3,['stub'],['stubgen']
Testability,9526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.UnbufferedWritableByteChannelSession$UnbufferedWritableByteChannel.writeAndClose(UnbufferedWritableByteChannelSession.java:40) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.DefaultBufferedWritableByteChannel.close(DefaultBufferedWritableByteChannel.java:166) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.StorageByteChannels$SynchronizedBufferedWritableByteChannel.close(StorageByteChannels.java:119) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.StorageException.wrapIOException(StorageException.java:179) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.relocated.com.google.cloud.storage.BaseStorageWriteChannel.close(BaseStorageWriteChannel.java:84) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.$anonfun$close$2(GoogleStorageFS.scala:310) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.doHandlingRequesterPays(GoogleStorageFS.scala:280) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at is.hail.io.fs.GoogleStorageFS$$anon$2.$anonfun$close$1(GoogleStorageFS.scala:310) ~[gs:__hail-test-ezlis_dking_jars_ch4g3zvqceyo_09526a168d57dac1a26f8caa4ab49593931ed2ef.jar.jar:0.0.1-SNAPSHOT]; 	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23) ~[scala-library-2.12.15.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943:12222,test,test-,12222,https://hail.is,https://github.com/hail-is/hail/issues/13721#issuecomment-1737788943,1,['test'],['test-']
Testability,"9; Warning FailedCreatePodSandBox 13m kubelet, gke-vdc-preemptible-pool-9c7148b2-1f89 Failed create pod sandbox: rpc error: code = Unknown desc = failed to set up sandbox container ""99ac9edad98221dbfaf4ab8eb443bc6d3fdc6df84164594469900813652fd913"" network for pod ""batch-3-job-41-39d17b"": NetworkPlugin kubenet failed to set up pod ""batch-3-job-41-39d17b_batch-pods"" network: Error adding container to network: failed to set bridge addr: could not add IP address to ""cbr0"": file exists; ```. ```; $ kubectl -n batch-pods get pods -o yaml batch-3-job-41-39d17b; apiVersion: v1; kind: Pod; metadata:; creationTimestamp: ""2019-07-12T17:17:15Z""; labels:; app: batch-job; batch_id: ""3""; hail.is/batch-instance: cd50b95a89914efb897965a5e982a29d; job_id: ""41""; task: main; user: ci; uuid: f53f127847864f1cbf7d4bdc911a6646; name: batch-3-job-41-39d17b; namespace: batch-pods; resourceVersion: ""87247110""; selfLink: /api/v1/namespaces/batch-pods/pods/batch-3-job-41-39d17b; uid: e4d87ac3-a4c8-11e9-a4bb-42010a8000af; spec:; containers:; - command:; - bash; - -c; - |-; set -e; gcloud -q auth activate-service-account --key-file=/test-gsa-key/privateKeyData; gsutil -m cp -r /test/resources/* gs://hail-test-1c9nm/sj0nb47zqys1/pipeline/input/; env:; - name: POD_IP; valueFrom:; fieldRef:; apiVersion: v1; fieldPath: status.podIP; - name: POD_NAME; valueFrom:; fieldRef:; apiVersion: v1; fieldPath: metadata.name; image: gcr.io/hail-vdc/ci-intermediate:oyyg6y2um4kx; imagePullPolicy: IfNotPresent; name: main; resources:; requests:; cpu: 100m; memory: 500M; terminationMessagePath: /dev/termination-log; terminationMessagePolicy: File; volumeMounts:; - mountPath: /test-gsa-key; name: test-gsa-key; - mountPath: /gsa-key; name: gsa-key; - mountPath: /var/run/secrets/kubernetes.io/serviceaccount; name: default-token-8h99c; readOnly: true; dnsPolicy: ClusterFirst; enableServiceLinks: true; nodeName: gke-vdc-preemptible-pool-9c7148b2-1f89; priority: 500000; priorityClassName: user; restartPolicy: Never; sched",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6625:3299,test,test-gsa-key,3299,https://hail.is,https://github.com/hail-is/hail/issues/6625,3,['test'],"['test', 'test-', 'test-gsa-key']"
Testability,"9ef2a9927c2"">e3a1eba</a>)</li>; <li>use structured logging on GCF with python 3.7 (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/434"">#434</a>) (<a href=""https://www.github.com/googleapis/python-logging/commit/5055919f70c82b38de6d1fa7f1df6006865a857b"">5055919</a>)</li>; </ul>; <h3>Bug Fixes</h3>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/googleapis/python-logging/commit/10727ef3c8cca7e20484e58e6afdc79e81a4d4c9""><code>10727ef</code></a> chore(main): release 3.0.0 (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/473"">#473</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/d86be6cf83c3f3b91c4fc0b2e0666b0ca1d7e248""><code>d86be6c</code></a> chore(deps): update dependency google-cloud-storage to v2.1.0 (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/469"">#469</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/8a67b73cdfcb9da545671be6cf59c724360b1544""><code>8a67b73</code></a> docs: update usage guide for v3.0.0 (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/456"">#456</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/e0c5fc02160ae87faf4ba5c2b62be86de6b02cf3""><code>e0c5fc0</code></a> feat: trace improvements (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/450"">#450</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/97e32b67603553fe350b6327455fc9f80b8aa6ce""><code>97e32b6</code></a> fix: allow reading logs from non-project paths (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/444"">#444</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/a760e02371a55d6262e42de9e0222fffa2c7192b""><code>a760e02</code></a> feat: add json_fields extras argument fo",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11574:11637,log,logging,11637,https://hail.is,https://github.com/hail-is/hail/pull/11574,1,['log'],['logging']
Testability,"9fxo7/compare/{base}...{head}"",; ""merges_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/merges"",. 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0; 100 7030 100 6999 100 31 9306 41 --:--:-- --:--:-- --:--:-- 9319; ""archive_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/{archive_format}{/ref}"",; ""downloads_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/downloads"",; ""issues_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues{/number}"",; ""pulls_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/pulls{/number}"",; ""milestones_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/milestones{/number}"",; ""notifications_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/notifications{?since,all,participating}"",; ""labels_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/labels{/name}"",; ""releases_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/releases{/id}"",; ""deployments_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/deployments"",; ""created_at"": ""2018-10-10T00:32:59Z"",; ""updated_at"": ""2018-10-10T00:32:59Z"",; ""pushed_at"": ""2018-10-10T00:33:00Z"",; ""git_url"": ""git://github.com/hail-ci-test/ci-test-p4a9fxo7.git"",; ""ssh_url"": ""git@github.com:hail-ci-test/ci-test-p4a9fxo7.git"",; ""clone_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7.git"",; ""svn_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7"",; ""homepage"": null,; ""size"": 0,; ""stargazers_count"": 0,; ""watchers_count"": 0,; ""language"": null,; ""has_issues"": true,; ""has_projects"": true,; ""has_downloads"": true,; ""has_wiki"": true,; ""has_pages"": false,; ""forks_count"": 0,; ""mirror_url"": null,; ""archived"": false,; ""open_issues_count"": 0,; ""license"": null,; ""forks"": 0,; ""open_issues"": 0,; ""watchers"": 0,; ""default_branch"": ""master"",; ""permissions"": {; ""admin"": true,; ""push"": true,; ""pull"": true; },; ""allow_squash_merge"": true,; ""allow_merge_commit"": true,; ""allo",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:5654,test,test,5654,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,"9fxo7/issues/comments{/number}"",; ""contents_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contents/{+path}"",; ""compare_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/compare/{base}...{head}"",; ""merges_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/merges"",. 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0; 100 7030 100 6999 100 31 9306 41 --:--:-- --:--:-- --:--:-- 9319; ""archive_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/{archive_format}{/ref}"",; ""downloads_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/downloads"",; ""issues_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues{/number}"",; ""pulls_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/pulls{/number}"",; ""milestones_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/milestones{/number}"",; ""notifications_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/notifications{?since,all,participating}"",; ""labels_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/labels{/name}"",; ""releases_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/releases{/id}"",; ""deployments_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/deployments"",; ""created_at"": ""2018-10-10T00:32:59Z"",; ""updated_at"": ""2018-10-10T00:32:59Z"",; ""pushed_at"": ""2018-10-10T00:33:00Z"",; ""git_url"": ""git://github.com/hail-ci-test/ci-test-p4a9fxo7.git"",; ""ssh_url"": ""git@github.com:hail-ci-test/ci-test-p4a9fxo7.git"",; ""clone_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7.git"",; ""svn_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7"",; ""homepage"": null,; ""size"": 0,; ""stargazers_count"": 0,; ""watchers_count"": 0,; ""language"": null,; ""has_issues"": true,; ""has_projects"": true,; ""has_downloads"": true,; ""has_wiki"": true,; ""has_pages"": false,; ""forks_count"": 0,; ""mirror_url"": null,; ""archived"": false,; ""open_issues_count"": 0,; ""license"": null,; ""forks""",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:5444,test,test,5444,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,": ; 2.49.0; Measurement time: ; 2023-06-05 03:25:16 PM ; Running on GCE: ; True; GCE Instance:; 	; Bucket location: ; US-CENTRAL1; Bucket storage class: ; REGIONAL; Google Server: ; ; Google Server IP Addresses: ; 142.250.128.128; 142.251.6.128; 108.177.112.128; 74.125.124.128; 172.217.212.128; 172.217.214.128; 172.253.119.128; 108.177.111.128; 142.250.1.128; 108.177.121.128; 142.250.103.128; 108.177.120.128; 142.250.159.128; 142.251.120.128; 142.251.161.128; 74.125.126.128; Google Server Hostnames: ; ib-in-f128.1e100.net; ic-in-f128.1e100.net; jo-in-f128.1e100.net; jp-in-f128.1e100.net; jq-in-f128.1e100.net; jr-in-f128.1e100.net; jt-in-f128.1e100.net; jv-in-f128.1e100.net; jw-in-f128.1e100.net; jx-in-f128.1e100.net; jy-in-f128.1e100.net; jz-in-f128.1e100.net; ie-in-f128.1e100.net; if-in-f128.1e100.net; ig-in-f128.1e100.net; ik-in-f128.1e100.net; Google DNS thinks your IP is: ; ; CPU Count: ; 16; CPU Load Average: ; [32.39, 33.2, 19.0]; Total Memory: ; 57.5 GiB; Free Memory: ; 38.41 GiB; TCP segment counts not available because ""netstat"" was not found during test runs; Disk Counter Deltas:; disk reads writes rbytes wbytes rtime wtime ; loop0 0 0 0 0 0 0 ; loop1 0 0 0 0 0 0 ; loop3 0 0 0 0 0 0 ; loop4 0 0 0 0 0 0 ; loop5 0 0 0 0 0 0 ; nvme0n1 4385 4694 581857280 1743810560 6453 527129 ; sda1 0 544 0 3731456 0 429 ; sda14 0 0 0 0 0 0 ; sda15 0 0 0 0 0 0 ; TCP /proc values:; tcp_timestamps = 1; tcp_sack = 1; tcp_window_scaling = 1; Boto HTTPS Enabled: ; True; Requests routed through proxy: ; False; Latency of the DNS lookup for Google Storage server (ms): ; 1.5; Latencies connecting to Google Storage server IPs (ms):; 74.125.126.128 = 1.1. ------------------------------------------------------------------------------; In-Process HTTP Statistics ; ------------------------------------------------------------------------------; Total HTTP requests made: 149; HTTP 5xx errors: 0; HTTP connections broken: 0; Availability: 100%. Output file written to '/tmp/output.json'.; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12923#issuecomment-1577071597:3738,test,test,3738,https://hail.is,https://github.com/hail-is/hail/issues/12923#issuecomment-1577071597,1,['test'],['test']
Testability,: AssertionError: assertion failed; Java stack trace:; java.lang.AssertionError: assertion failed; at scala.Predef$.assert(Predef.scala:156); at is.hail.expr.ir.TypeCheck$.apply(TypeCheck.scala:78); at is.hail.expr.ir.TypeCheck$.apply(TypeCheck.scala:7); at is.hail.expr.ir.Emit$.emit(Emit.scala:42); at is.hail.expr.ir.Emit$.apply(Emit.scala:28); at is.hail.expr.ir.Compile$.apply(Compile.scala:49); at is.hail.expr.ir.Compile$.apply(Compile.scala:31); at is.hail.expr.ir.Compile$.apply(Compile.scala:62); at is.hail.expr.TableExplode.execute(Relational.scala:2201); at is.hail.expr.TableUnkey.execute(Relational.scala:1883); at is.hail.expr.TableMapRows.execute(Relational.scala:2090); at is.hail.expr.TableKeyBy.execute(Relational.scala:1846); at is.hail.expr.TableMapRows.execute(Relational.scala:2090); at is.hail.table.Table.value$lzycompute(Table.scala:243); at is.hail.table.Table.value(Table.scala:238); at is.hail.table.Table.x$5$lzycompute(Table.scala:246); at is.hail.table.Table.x$5(Table.scala:246); at is.hail.table.Table.rvd$lzycompute(Table.scala:246); at is.hail.table.Table.rvd(Table.scala:246); at is.hail.table.Table.take(Table.scala:961); at is.hail.table.Table.showString(Table.scala:1002); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:498); at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244); at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357); at py4j.Gateway.invoke(Gateway.java:280); at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132); at py4j.commands.CallCommand.execute(CallCommand.java:79); at py4j.GatewayConnection.run(GatewayConnection.java:214); at java.lang.Thread.run(Thread.java:745); Hail version: devel-10a75bb57a6f; Error summary: AssertionError: assertion failed; ```,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3744:4574,Assert,AssertionError,4574,https://hail.is,https://github.com/hail-is/hail/issues/3744,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,": Callable[..., T], *args, **kwargs) -> T:; 586 args_, kwargs_ = check_all(__original_func, args, kwargs, checkers, is_method=is_method); --> 587 return __original_func(*args_, **kwargs_). File ~/miniconda3/lib/python3.10/site-packages/hail/context.py:357, in init(sc, app_name, master, local, log, quiet, append, min_block_size, branching_factor, tmp_dir, default_reference, idempotent, global_seed, spark_conf, skip_logging_configuration, local_tmpdir, _optimizer_iterations, backend, driver_cores, driver_memory, worker_cores, worker_memory, gcs_requester_pays_configuration, regions, gcs_bucket_allow_list); 354 backend = 'batch'; 356 if backend == 'batch':; --> 357 return hail_event_loop().run_until_complete(init_batch(; 358 log=log,; 359 quiet=quiet,; 360 append=append,; 361 tmpdir=tmp_dir,; 362 local_tmpdir=local_tmpdir,; 363 default_reference=default_reference,; 364 global_seed=global_seed,; 365 driver_cores=driver_cores,; 366 driver_memory=driver_memory,; 367 worker_cores=worker_cores,; 368 worker_memory=worker_memory,; 369 name_prefix=app_name,; 370 gcs_requester_pays_configuration=gcs_requester_pays_configuration,; 371 regions=regions,; 372 gcs_bucket_allow_list=gcs_bucket_allow_list; 373 )); 374 if backend == 'spark':; 375 return init_spark(; 376 sc=sc,; 377 app_name=app_name,; (...); 392 gcs_requester_pays_configuration=gcs_requester_pays_configuration; 393 ). File ~/miniconda3/lib/python3.10/site-packages/hailtop/hail_event_loop.py:16, in hail_event_loop(); 14 return asyncio.get_running_loop(); 15 except RuntimeError:; ---> 16 return asyncio.get_event_loop(). File ~/miniconda3/lib/python3.10/asyncio/events.py:671, in BaseDefaultEventLoopPolicy.get_event_loop(self); 668 self.set_event_loop(self.new_event_loop()); 670 if self._local._loop is None:; --> 671 raise RuntimeError('There is no current event loop in thread %r.'; 672 % threading.current_thread().name); 674 return self._local._loop. RuntimeError: There is no current event loop in thread 'MainThread'.; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14099:2449,log,log,2449,https://hail.is,https://github.com/hail-is/hail/issues/14099,2,['log'],['log']
Testability,": GITHUB-2754: <a href=""https://github.com/AfterGroups""><code>@​AfterGroups</code></a> is executed for each &quot;finished&quot; group when it has multiple groups defined (Anton Velma)</p>; <p>7.5; Fixed: GITHUB-2701: Bump gradle version to 7.3.3 to support java17 build (ZhangJian He); Fixed: GITHUB-2646: Streamline Logging Across TestNG (Krishnan Mahadevan); Fixed: GITHUB-2658: Inheritance + dependsOnMethods (Krishnan Mahadevan)</p>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/cbeust/testng/commit/b94395dea479308ea3fe825269730b960f44d805""><code>b94395d</code></a> Bump version to 7.7.1 for release</li>; <li><a href=""https://github.com/cbeust/testng/commit/89dc5845fcb46c26af187e50ea907a7382d06e72""><code>89dc584</code></a> Streamline overloaded assertion methods for Groovy</li>; <li><a href=""https://github.com/cbeust/testng/commit/5ac0021d14f7eb00804fe235aaefc5c2fbce57d1""><code>5ac0021</code></a> Adding release notes</li>; <li><a href=""https://github.com/cbeust/testng/commit/c0e1e772f1fc0ab2142f3a4114a2b8cfe60fa7e1""><code>c0e1e77</code></a> Adjust version reference in deprecation msgs.</li>; <li><a href=""https://github.com/cbeust/testng/commit/011527d9bf0f91a40539f5e5467cc106888810d9""><code>011527d</code></a> Bump version to 7.7.0 for release</li>; <li><a href=""https://github.com/cbeust/testng/commit/7846c444a411647f7e401a097224702188c93835""><code>7846c44</code></a> Deprecate support for running JUnit tests</li>; <li><a href=""https://github.com/cbeust/testng/commit/8630a7e8fe12985d71c00212f9362fd38fb0cb9e""><code>8630a7e</code></a> Ensure ITestContext available for JUnit4 tests</li>; <li><a href=""https://github.com/cbeust/testng/commit/7070b020def0089d0d9dc695a5762ad16e974ce6""><code>7070b02</code></a> Streamline dependsOnMethods for configurations</li>; <li><a href=""https://github.com/cbeust/testng/commit/d7e0bb1cbcd7933d34d704678e75cbaf42704505""><code>d7e0bb1<",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12665:15149,test,testng,15149,https://hail.is,https://github.com/hail-is/hail/pull/12665,1,['test'],['testng']
Testability,: INFO: request GET http://batch.hail/api/v1alpha/batches/6627669 response 200\n2022-11-15 20:31:15.929 Requester: INFO: request GET http://batch.hail/api/v1alpha/batches/6627669\n2022-11-15 20:31:18.037 Requester: INFO: request GET http://batch.hail/api/v1alpha/batches/6627669 response 200\n2022-11-15 20:31:22.827 Requester: INFO: request GET http://batch.hail/api/v1alpha/batches/6627669\n2022-11-15 20:31:22.846 Requester: INFO: request GET http://batch.hail/api/v1alpha/batches/6627669 response 200\n2022-11-15 20:31:27.847 Requester: INFO: request GET http://batch.hail/api/v1alpha/batches/6627669\n2022-11-15 20:31:27.880 Requester: INFO: request GET http://batch.hail/api/v1alpha/batches/6627669 response 200\n2022-11-15 20:31:27.880 ServiceBackend$: INFO: parallelizeAndComputeWithIndex: pty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY=: reading results\n2022-11-15 20:31:27.881 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.0\n2022-11-15 20:31:28.080 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.0 response 200\n2022-11-15 20:31:28.104 ServiceBackend$: INFO: result 0 complete - 8157265 bytes\n2022-11-15 20:31:28.104 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.1\n2022-11-15 20:31:28.293 Requester: INFO: request GET http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fresult.1 response 200\n2022-11-15 20:31:28.313 ServiceBackend$: INFO: result 1 complete - 8157265 bytes\n2022-11-15 20:31:28.313 Requester: INFO: request GET http://memory.hail/api/v1alpha/object,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:35534,test,test-,35534,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,": Illegal reflective access by org.apache.spark.unsafe.Platform (file:/home/med/.local/lib/python3.8/site-packages/pyspark/jars/spark-unsafe_2.12-3.1.3.jar) to constructor java.nio.DirectByteBuffer(long,int); WARNING: Please consider reporting this to the maintainers of org.apache.spark.unsafe.Platform; WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations; WARNING: All illegal access operations will be denied in a future release; 2022-10-06 15:56:03 WARN NativeCodeLoader:60 - Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).; Running on Apache Spark version 3.1.3; SparkUI available at http://192.168.248.80:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.100-2ea2615a797a; LOGGING: writing to /; --------------------------------------------------------------------------; mt.filter_rows(mt.locus.position==2867101).count_rows(); ```; ### Expected ; Return a count of rows with that condition. ### Error ; ```; FatalError: AssertionError: assertion failed. Java stack trace:; java.lang.AssertionError: assertion failed; at scala.Predef$.assert(Predef.scala:208); at is.hail.expr.ir.LoweredTableReader$.makeCoercer(TableIR.scala:135); at is.hail.expr.ir.GenericTableValue.getLTVCoercer(GenericTableValue.scala:137); at is.hail.expr.ir.GenericTableValue.toTableStage(GenericTableValue.scala:162); at is.hail.io.vcf.MatrixVCFReader.lower(LoadVCF.scala:1798); at is.hail.expr.ir.lowering.LowerTableIR$.applyTable(LowerTableIR.scala:717); at is.hail.expr.ir.lowering.LowerTableIR$.lower$2(LowerTableIR.scala:697); at is.hail.expr.ir.lowering.LowerTableIR$.applyTable(LowerTableIR.scala:903); at is.hail.expr.ir.lowering.LowerTableIR$.lower$1(LowerTableIR.scala:467); at is.hail.expr.ir.lowering.LowerTableIR$.apply(LowerT",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12280:1744,LOG,LOGGING,1744,https://hail.is,https://github.com/hail-is/hail/issues/12280,1,['LOG'],['LOGGING']
Testability,": TestResult.isSuccess() is TRUE when test fails due to expectedExceptions (Krishnan Mahadevan); Fixed: GITHUB-2800: Running Test Classes with Inherited <a href=""https://github.com/Factory""><code>@​Factory</code></a> and <a href=""https://github.com/DataProvider""><code>@​DataProvider</code></a> Annotated Non-Static Methods Fail (Krishnan Mahadevan); New: Ability to provide custom error message for assertThrows\expectThrows methods (Anatolii Yuzhakov); Fixed: GITHUB-2780: Use SpotBugs instead of abandoned FindBugs; Fixed: GITHUB-2801: JUnitReportReporter is too slow; Fixed: GITHUB-2807: buildStackTrace should be fail-safe (Sergey Chernov); Fixed: GITHUB-2830: TestHTMLReporter parameter toString should be fail-safe (Sergey Chernov); Fixed: GITHUB-2798: Parallel executions coupled with retry analyzer results in duplicate retry analyzer instances being created (Krishnan Mahadevan)</p>; <p>7.6.1; Fixed: GITHUB-2761: Exception: ERROR java.nio.file.NoSuchFileException: /tmp/testngXmlPathInJar-15086412835569336174 (Krishnan Mahadevan); 7.6.0; Fixed: GITHUB-2741: Show fully qualified name of the test instead of just the function name for better readability of test output.(Krishnan Mahadevan); Fixed: GITHUB-2725: Honour custom attribute values in TestNG default reports (Krishnan Mahadevan); Fixed: GITHUB-2726: <a href=""https://github.com/AfterClass""><code>@​AfterClass</code></a> config method is executed for EACH <a href=""https://github.com/Test""><code>@​Test</code></a> method when parallel == methods (Krishnan Mahadevan); Fixed: GITHUB-2752: TestListener is being lost when implenting both IClassListener and ITestListener (Krishnan Mahadevan); New: GITHUB-2724: DataProvider: possibility to unload dataprovider class, when done with it (Dzmitry Sankouski); Fixed: GITHUB-217: Configure TestNG to fail when there's a failure in data provider (Krishnan Mahadevan); Fixed: GITHUB-2743: SuiteRunner could not be initial by default Configuration (Nan Liang); Fixed: GITHUB-2729: beforeCon",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12665:12405,test,testngXmlPathInJar-,12405,https://hail.is,https://github.com/hail-is/hail/pull/12665,1,['test'],['testngXmlPathInJar-']
Testability,": false; },; ""html_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7"",; ""description"": null,; ""fork"": false,; ""url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7"",; ""forks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/forks"",; ""keys_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/keys{/key_id}"",; ""collaborators_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/collaborators{/collaborator}"",; ""teams_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/teams"",; ""hooks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/hooks"",; ""issue_events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/events{/number}"",; ""events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/events"",; ""assignees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/assignees{/user}"",; ""branches_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/branches{/branch}"",; ""tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/tags"",; ""blobs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/blobs{/sha}"",; ""git_tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/tags{/sha}"",; ""git_refs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/refs{/sha}"",; ""trees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/trees{/sha}"",; ""statuses_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/statuses/{sha}"",; ""languages_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/languages"",; ""stargazers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/stargazers"",; ""contributors_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contributors"",; ""subscribers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscribers"",; ""subscription_url"": ""https://api.github.com/repos/hail-ci-test/c",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:3060,test,test,3060,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,": i686; Version : 3.10.1; Release : 10.el7; Size : 1.5 M; Repo : base/7/x86_64; Summary : Development libraries for ATLAS; URL : http://math-atlas.sourceforge.net/; License : BSD; Description : This package contains the libraries and headers for development; : with ATLAS (Automatically Tuned Linear Algebra Software). Name : atlas-devel; Arch : x86_64; Version : 3.10.1; Release : 10.el7; Size : 1.5 M; Repo : base/7/x86_64; Summary : Development libraries for ATLAS; URL : http://math-atlas.sourceforge.net/; License : BSD; Description : This package contains the libraries and headers for development; : with ATLAS (Automatically Tuned Linear Algebra Software). ## （2）I installed the “atlas-devel” , . root yum.repos.d $ yum install atlas-devel; Loaded plugins: fastestmirror, langpacks; Loading mirror speeds from cached hostfile; - base: mirror.bit.edu.cn; - epel: mirrors.neusoft.edu.cn; - extras: mirror.bit.edu.cn; - updates: mirror.bit.edu.cn; Resolving Dependencies; --> Running transaction check; ---> Package atlas-devel.x86_64 0:3.10.1-10.el7 will be installed; --> Processing Dependency: atlas = 3.10.1-10.el7 for package: atlas-devel-3.10.1-10.el7.x86_64; ............. Installed:; atlas-devel.x86_64 0:3.10.1-10.el7 . Dependency Installed:; atlas.x86_64 0:3.10.1-10.el7 . ## Complete!. ## ######**but when I excute the ""gradle check --info"" ，the error still appeared.**. /opt/BioDir/jdk/jdk1.8.0_91/bin/java: symbol lookup error: /tmp/jniloader7277009897699512423netlib-native_system-linux-x86_64.so: undefined symbol: cblas_dgemv. FAILURE: Build failed with an exception.; - What went wrong:; Execution failed for task ':test'.; ; > Process 'Gradle Test Executor 1' finished with non-zero exit value 127; - Try:; ; ## Run with --stacktrace option to get the stack trace. Run with --debug option to get more log output.; ; #######The output info was collected in the file as follow:; [gradle_check_info1.txt](https://github.com/broadinstitute/hail/files/417544/gradle_check_info1.txt)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/565#issuecomment-239729893:2266,test,test,2266,https://hail.is,https://github.com/hail-is/hail/issues/565#issuecomment-239729893,3,"['Test', 'log', 'test']","['Test', 'log', 'test']"
Testability,": null; users: [ci]; - accrued_cost: 0.0012024241022130966; billing_project: test; cost: 0.0012024241022130966; limit: null; users: [test]; - accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]; - accrued_cost: 0.0; billing_project: test-zero-limit; cost: null; limit: 0.0; users: [test]. (base) wmecc-475:hail jigold$ hailctl batch billing get; usage: hailctl batch billing get [-h] [-o {yaml,json}] billing_project; hailctl batch billing get: error: the following arguments are required: billing_project; Unclosed client session; client_session: <aiohttp.client.ClientSession object at 0x10a635208>; (base) wmecc-475:hail jigold$ hailctl batch billing get test-tiny-limit; accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]. (base) wmecc-475:hail jigold$ hailctl batch billing get test-tiny-limit; accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]. Unclosed client session; client_session: <aiohttp.client.ClientSession object at 0x10cfe2278>; Unclosed connector; connections: ['[(<aiohttp.client_proto.ResponseHandler object at 0x10d062c78>, 2.214990943)]']; connector: <aiohttp.connector.TCPConnector object at 0x10cfe21d0>; (base) wmecc-475:hail jigold$ hailctl batch billing get test-tiny-limit; accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]. (base) wmecc-475:hail jigold$ hailctl batch; usage: hailctl batch [-h] {billing,list,get,cancel,delete,log,job,wait} ... Manage batches running on the batch service managed by the Hail team. positional arguments:; {billing,list,get,cancel,delete,log,job,wait}; billing List billing; list List batches; get Get a particular batch's info; cancel Cancel a batch; delete Delete a batch; log Get log for a job; job Get the status and specifica",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9385#issuecomment-684964006:1853,test,test-tiny-limit,1853,https://hail.is,https://github.com/hail-is/hail/pull/9385#issuecomment-684964006,1,['test'],['test-tiny-limit']
Testability,":+PInt32})),None)),Some(TableStageDependency(WrappedArray()))),Begin(ArrayBuffer(WriteMetadata(MakeArray(ArrayBuffer(GetField(WritePartition(MakeStream(ArrayBuffer(Literal(struct{},[])),stream<struct{}>,false),Str(""part-0""),PartitionNativeWriter({""name"":""TypedCodecSpec"",""_eType"":""+EBaseStruct{}"",""_vType"":""Struct{}"",""_bufferSpec"":{""name"":""LEB128BufferSpec"",""child"":{""name"":""BlockingBufferSpec"",""blockSize"":32768,""child"":{""name"":""LZ4HCBlockBufferSpec"",""blockSize"":32768,""child"":{""name"":""StreamBlockBufferSpec""}}}}},gs://danking/workshop-test/1kg.mt/globals/parts/,None,None)),filePath)),array<str>),RVDSpecWriter(gs://danking/workshop-test/1kg.mt/globals,RVDSpecMaker({""name"":""TypedCodecSpec"",""_eType"":""+EBaseStruct{}"",""_vType"":""Struct{}"",""_bufferSpec"":{""name"":""LEB128BufferSpec"",""child"":{""name"":""BlockingBufferSpec"",""blockSize"":32768,""child"":{""name"":""LZ4HCBlockBufferSpec"",""blockSize"":32768,""child"":{""name"":""StreamBlockBufferSpec""}}}}},WrappedArray(),JArray(List(JObject(List((start,JObject(List())), (end,JObject(List())), (includeStart,JBool(true)), (includeEnd,JBool(true)))))),null,Map()))), WriteMetadata(ToArray(StreamMap(ToStream(Ref(__iruid_369,array<struct{filePath: str, partitionCounts: int64}>),false),__iruid_376,GetField(Ref(__iruid_376,struct{filePath: str, partitionCounts: int64}),filePath))),RVDSpecWriter(gs://danking/workshop-test/1kg.mt/rows,RVDSpecMaker({""name"":""TypedCodecSpec"",""_eType"":""+EBaseStruct{idx:+EInt32}"",""_vType"":""Struct{idx:Int32}"",""_bufferSpec"":{""name"":""LEB128BufferSpec"",""child"":{""name"":""BlockingBufferSpec"",""blockSize"":32768,""child"":{""name"":""LZ4HCBlockBufferSpec"",""blockSize"":32768,""child"":{""name"":""StreamBlockBufferSpec""}}}}},WrappedArray(idx),JArray(List(JObject(List((start,JObject(List((idx,JInt(0))))), (end,JObject(List((idx,JInt(10))))), (includeStart,JBool(true)), (includeEnd,JBool(false)))), JObject(List((start,JObject(List((idx,JInt(10))))), (end,JObject(List((idx,JInt(20))))), (includeStart,JBool(true)), (includeEnd,JBool(false)))), JObject(List(",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9856#issuecomment-772011601:5697,test,test,5697,https://hail.is,https://github.com/hail-is/hail/issues/9856#issuecomment-772011601,1,['test'],['test']
Testability,":+PInt32})),None)),Some(TableStageDependency(WrappedArray()))),Begin(ArrayBuffer(WriteMetadata(MakeArray(ArrayBuffer(GetField(WritePartition(MakeStream(ArrayBuffer(Literal(struct{},[])),stream<struct{}>,false),Str(""part-0""),PartitionNativeWriter({""name"":""TypedCodecSpec"",""_eType"":""+EBaseStruct{}"",""_vType"":""Struct{}"",""_bufferSpec"":{""name"":""LEB128BufferSpec"",""child"":{""name"":""BlockingBufferSpec"",""blockSize"":32768,""child"":{""name"":""LZ4HCBlockBufferSpec"",""blockSize"":32768,""child"":{""name"":""StreamBlockBufferSpec""}}}}},gs://danking/workshop-test/1kg.mt/globals/parts/,None,None)),filePath)),array<str>),RVDSpecWriter(gs://danking/workshop-test/1kg.mt/globals,RVDSpecMaker({""name"":""TypedCodecSpec"",""_eType"":""+EBaseStruct{}"",""_vType"":""Struct{}"",""_bufferSpec"":{""name"":""LEB128BufferSpec"",""child"":{""name"":""BlockingBufferSpec"",""blockSize"":32768,""child"":{""name"":""LZ4HCBlockBufferSpec"",""blockSize"":32768,""child"":{""name"":""StreamBlockBufferSpec""}}}}},WrappedArray(),JArray(List(JObject(List((start,JObject(List())), (end,JObject(List())), (includeStart,JBool(true)), (includeEnd,JBool(true)))))),null,Map()))), WriteMetadata(ToArray(StreamMap(ToStream(Ref(__iruid_465,array<struct{filePath: str, partitionCounts: int64}>),false),__iruid_472,GetField(Ref(__iruid_472,struct{filePath: str, partitionCounts: int64}),filePath))),RVDSpecWriter(gs://danking/workshop-test/1kg.mt/rows,RVDSpecMaker({""name"":""TypedCodecSpec"",""_eType"":""+EBaseStruct{idx:+EInt32}"",""_vType"":""Struct{idx:Int32}"",""_bufferSpec"":{""name"":""LEB128BufferSpec"",""child"":{""name"":""BlockingBufferSpec"",""blockSize"":32768,""child"":{""name"":""LZ4HCBlockBufferSpec"",""blockSize"":32768,""child"":{""name"":""StreamBlockBufferSpec""}}}}},WrappedArray(idx),JArray(List(JObject(List((start,JObject(List((idx,JInt(0))))), (end,JObject(List((idx,JInt(10))))), (includeStart,JBool(true)), (includeEnd,JBool(false)))), JObject(List((start,JObject(List((idx,JInt(10))))), (end,JObject(List((idx,JInt(20))))), (includeStart,JBool(true)), (includeEnd,JBool(false)))), JObject(List(",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9856#issuecomment-756194693:5417,test,test,5417,https://hail.is,https://github.com/hail-is/hail/issues/9856#issuecomment-756194693,1,['test'],['test']
Testability,":. ```; chr1:1001 A G ...; chr1:1001 A C ...; chr1:1001 A A ...; chr1:1001 A G ...; chr1:1001 A C ...; chr1:1001 A G ...; chr1:7000 T G ...; ```. The dataset is partitioned into files `file1`, ... `fileN`. A locus may appear in two or more partitions. Usually at most two, though theoretically it could span the tail of one partition, an arbitrary number of partitions, then the head of another. The dataset is large, for example 100GiB. Hail will shuffle this dataset because Hail requires keys to appear in at most one partition. We do not want to shuffle 100GiB. Instead, we want to do repeated reads of a partition if a key spans multiple partitions. Consider a key `k` appearing in `file1` and `file2`. Hail should generate a partition which puts key `k` either in the first or second partition. Without loss of generality, assume it is placed in the first partition. When processing partition 1, Hail will read `file1` and `file2`. It will only read the head of `file2` that contains key `k`. Partition 2 will read `file2` and skip all rows with key `k`. Moreover, the rows are not sorted by the second key field, alleles. Hail should do a within-partition sort of each partition to ensure orderedness. In fact, it can do a within-key sort. We believe this Hail code will achieve this:; ```python3; mt = hl.import_table(...) # globs many files; mt = mt.key_by('locus'); mt = mt.annotate(alleles = [mt.ref, mt.alt]); mt = mt.collect_by_key('rows') # this will do repeated-reads instead of a shuffle; mt = mt.annotate(rows = hl.sorted(mt.rows, lambda x: x.alleles)) # within-partition sort; mt = mt.explode('rows'); mt = mt.annotate(**mt.rows); mt = mt._key_by_assert_sorted('locus', 'alleles') # does not shuffle; mt.write(...); ```. Hail should do some subset of the following:; 1. Notice this situation and do the above automatically.; 2. Provide an option to key_by that does the above.; 3. Provide a function which does the above. ### Version. 0.2.120. ### Relevant log output. _No response_",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13455:2200,log,log,2200,https://hail.is,https://github.com/hail-is/hail/issues/13455,1,['log'],['log']
Testability,"://api.github.com/users/hail-ci-test"",; ""html_url"": ""https://github.com/hail-ci-test"",; ""followers_url"": ""https://api.github.com/users/hail-ci-test/followers"",; ""following_url"": ""https://api.github.com/users/hail-ci-test/following{/other_user}"",; ""gists_url"": ""https://api.github.com/users/hail-ci-test/gists{/gist_id}"",; ""starred_url"": ""https://api.github.com/users/hail-ci-test/starred{/owner}{/repo}"",; ""subscriptions_url"": ""https://api.github.com/users/hail-ci-test/subscriptions"",; ""organizations_url"": ""https://api.github.com/users/hail-ci-test/orgs"",; ""repos_url"": ""https://api.github.com/users/hail-ci-test/repos"",; ""events_url"": ""https://api.github.com/users/hail-ci-test/events{/privacy}"",; ""received_events_url"": ""https://api.github.com/users/hail-ci-test/received_events"",; ""type"": ""Organization"",; ""site_admin"": false; },; ""html_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7"",; ""description"": null,; ""fork"": false,; ""url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7"",; ""forks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/forks"",; ""keys_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/keys{/key_id}"",; ""collaborators_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/collaborators{/collaborator}"",; ""teams_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/teams"",; ""hooks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/hooks"",; ""issue_events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/events{/number}"",; ""events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/events"",; ""assignees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/assignees{/user}"",; ""branches_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/branches{/branch}"",; ""tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/tags"",; ""blobs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/blo",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:2246,test,test,2246,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,"://github.com/jpadilla/pyjwt/issues/670) &amp;lt;https://github.com/jpadilla/pyjwt/pull/670&amp;gt;`__; - Make `typ` optional in JWT to be compliant with RFC7519. `[#644](https://github.com/jpadilla/pyjwt/issues/644) &amp;lt;https://github.com/jpadilla/pyjwt/pull/644&amp;gt;`__; - Remove upper bound on cryptography version. `[#693](https://github.com/jpadilla/pyjwt/issues/693) &amp;lt;https://github.com/jpadilla/pyjwt/pull/693&amp;gt;`__. Added; </code></pre>; <ul>; <li>Add support for Ed448/EdDSA. <code>[#675](https://github.com/jpadilla/pyjwt/issues/675) &amp;lt;https://github.com/jpadilla/pyjwt/pull/675&amp;gt;</code>__</li>; </ul>; <h2><code>v2.1.0 &amp;lt;https://github.com/jpadilla/pyjwt/compare/2.0.1...2.1.0&amp;gt;</code>__</h2>; <p>Changed; </code></pre></p>; <ul>; <li>Allow claims validation without making JWT signature validation mandatory. <code>[#608](https://github.com/jpadilla/pyjwt/issues/608) &lt;https://github.com/jpadilla/pyjwt/pull/608&gt;</code>__</li>; </ul>; <p>Fixed</p>; <pre><code>; - Remove padding from JWK test data. `[#628](https://github.com/jpadilla/pyjwt/issues/628) &lt;https://github.com/jpadilla/pyjwt/pull/628&gt;`__; - Make `kty` mandatory in JWK to be compliant with RFC7517. `[#624](https://github.com/jpadilla/pyjwt/issues/624) &lt;https://github.com/jpadilla/pyjwt/pull/624&gt;`__; - Allow JWK without `alg` to be compliant with RFC7517. `[#624](https://github.com/jpadilla/pyjwt/issues/624) &lt;https://github.com/jpadilla/pyjwt/pull/624&gt;`__; - Allow to verify with private key on ECAlgorithm, as well as on Ed25519Algorithm. `[#645](https://github.com/jpadilla/pyjwt/issues/645) &lt;https://github.com/jpadilla/pyjwt/pull/645&gt;`__; &lt;/tr&gt;&lt;/table&gt; ; </code></pre>; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/jpadilla/pyjwt/commit/98620ab2a396a5c887a494259d49552c2093e1ad""><code>98620ab</code></a> Bump up version to v2.3.0 (<a href=""https://gi",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11457:10220,test,test,10220,https://hail.is,https://github.com/hail-is/hail/pull/11457,1,['test'],['test']
Testability,"://github.com/jupyterlab/jupyterlab_server/commit/51ecf4f23eb4a9659bb9b270f6f31d471dc80017""><code>51ecf4f</code></a> Publish 2.25.4</li>; <li><a href=""https://github.com/jupyterlab/jupyterlab_server/commit/15e796699f04e06db9ed23a689d454feae36ffbd""><code>15e7966</code></a> Use updated releaser workflows (<a href=""https://redirect.github.com/jupyterlab/jupyterlab_server/issues/442"">#442</a>)</li>; <li><a href=""https://github.com/jupyterlab/jupyterlab_server/commit/91a081672f05d6611b7d7a9f832695e863403c1d""><code>91a0816</code></a> Use json5 typings (<a href=""https://redirect.github.com/jupyterlab/jupyterlab_server/issues/441"">#441</a>)</li>; <li><a href=""https://github.com/jupyterlab/jupyterlab_server/commit/fed4b2a9391c305c50577d2353d4cdcfb2e4f97e""><code>fed4b2a</code></a> Enforce pytest 7 (<a href=""https://redirect.github.com/jupyterlab/jupyterlab_server/issues/439"">#439</a>)</li>; <li><a href=""https://github.com/jupyterlab/jupyterlab_server/commit/c5bbb0064b8ab9d0477b2322c8d1413c8c273fad""><code>c5bbb00</code></a> Fix test util typings (<a href=""https://redirect.github.com/jupyterlab/jupyterlab_server/issues/437"">#437</a>)</li>; <li>See full diff in <a href=""https://github.com/jupyterlab/jupyterlab_server/compare/v2.25.3...v2.26.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=jupyterlab-server&package-manager=pip&previous-version=2.25.3&new-version=2.26.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14483:8341,test,test,8341,https://hail.is,https://github.com/hail-is/hail/pull/14483,1,['test'],['test']
Testability,"://github.com/pytest-dev/pytest/commit/d53a5fb37194faf63ee5d74606cc883138879bc4""><code>d53a5fb</code></a> Prepare release version 7.1.0</li>; <li><a href=""https://github.com/pytest-dev/pytest/commit/d306ec0a7e1711d936e5bb98352a430bff758eae""><code>d306ec0</code></a> Update upcoming trainings (<a href=""https://github-redirect.dependabot.com/pytest-dev/pytest/issues/9744"">#9744</a>)</li>; <li><a href=""https://github.com/pytest-dev/pytest/commit/3e4c14bfaa046bcb5b75903470accf83d93f01ce""><code>3e4c14b</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/pytest-dev/pytest/issues/9751"">#9751</a> from fabianegli/main</li>; <li><a href=""https://github.com/pytest-dev/pytest/commit/7f924b13a50a05b8dc894418fa7faf779201e129""><code>7f924b1</code></a> Fix typo in deprecation documentation</li>; <li><a href=""https://github.com/pytest-dev/pytest/commit/4a8f8ada431974f2837260af3ed36299fd382814""><code>4a8f8ad</code></a> build(deps): Bump django from 4.0.2 to 4.0.3 in /testing/plugins_integration ...</li>; <li><a href=""https://github.com/pytest-dev/pytest/commit/c0fd2d883940f1292d5e8234803beaacd08315e6""><code>c0fd2d8</code></a> build(deps): Bump pytest-asyncio from 0.18.1 to 0.18.2 in /testing/plugins_in...</li>; <li><a href=""https://github.com/pytest-dev/pytest/commit/843e01824c257c3190792a9df430289c3abe349d""><code>843e018</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/pytest-dev/pytest/issues/9732"">#9732</a> from nicoddemus/9730-toml-failure</li>; <li><a href=""https://github.com/pytest-dev/pytest/commit/bc43d66b47b917d43a22e0c703ecfe4eea342263""><code>bc43d66</code></a> [automated] Update plugin list (<a href=""https://github-redirect.dependabot.com/pytest-dev/pytest/issues/9733"">#9733</a>)</li>; <li><a href=""https://github.com/pytest-dev/pytest/commit/e38d1cac489e42f4bdbecbb50f9f25dc9c36c19f""><code>e38d1ca</code></a> Improve error message for malformed pyproject.toml files</li>; <li>Additional commits viewable in <a href=""https://",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11571:5637,test,testing,5637,https://hail.is,https://github.com/hail-is/hail/pull/11571,2,['test'],['testing']
Testability,:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-2LzGioRNy6RqIS2pfXIoSO&uploadType=resumable&upload_id=ADPycdvZ5HhnGfOKt5TE1qXWiHpqIpZnXVTYWuWUCXNPRF9HqyCB-4LvRsxNX6SUWRgk13pYrzYaa9-wXlvNZt1oct0ptaEz0bS3; chunkOffset: 16777216; chunkLength:,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:4503,test,testng,4503,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['test'],['testng']
Testability,:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients uploading to the same upload session. For debugging purposes:; uploadId: https://storage.googleapis.com/upload/storage/v1/b/hail-test-ezlis/o?name=fs-suite-tmp-6BO4gZ18Lheigp3ir9RSOh&uploadType=resumable&upload_id=ADPycduiXx2Jtiy_0Ll131_pPeEYKnnA23Hlk28_9TFESUMaubA9OqLK_n8Td5rPhTXnlpssGo796Q4bJxUeblhmSaYcCSWAMg2k; chunkOffset: 16777216; chunkLength:,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:4310,test,testng,4310,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['test'],['testng']
Testability,:123); 	at java.io.FilterOutputStream.close(FilterOutputStream.java:158); 	at is.hail.utils.package$.using(package.scala:640); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt(FSSuite.scala:323); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:321); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients upl,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756:3966,Test,TestMethodWorker,3966,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1544209756,1,['Test'],['TestMethodWorker']
Testability,:123); 	at java.io.FilterOutputStream.close(FilterOutputStream.java:158); 	at is.hail.utils.package$.using(package.scala:640); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt(FSSuite.scala:341); 	at is.hail.fs.FSSuite.testSeekMoreThanMaxInt$(FSSuite.scala:339); 	at is.hail.fs.gs.GoogleStorageFSSuite.testSeekMoreThanMaxInt(GoogleStorageFSSuite.scala:12); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); 	Suppressed: is.hail.relocated.com.google.cloud.storage.StorageException: Unable to recover in upload.; This may be a symptom of multiple clients upl,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911:4159,Test,TestMethodWorker,4159,https://hail.is,https://github.com/hail-is/hail/issues/12950#issuecomment-1704346911,1,['Test'],['TestMethodWorker']
Testability,:124); at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:448); at java.lang.StringBuffer.append(StringBuffer.java:270); at org.apache.log4j.helpers.PatternParser$LiteralPatternConverter.format(PatternParser.java:419); at org.apache.log4j.PatternLayout.format(PatternLayout.java:506); at org.apache.log4j.WriterAppender.subAppend(WriterAppender.java:310); at org.apache.log4j.WriterAppender.append(WriterAppender.java:162); at org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:251); at org.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:66); at org.apache.log4j.Category.callAppenders(Category.java:206); at org.apache.log4j.Category.forcedLog(Category.java:391); at org.apache.log4j.Category.log(Category.java:856); at org.slf4j.impl.Log4jLoggerAdapter.warn(Log4jLoggerAdapter.java:400); at org.apache.spark.internal.Logging$class.logWarning(Logging.scala:66); at org.apache.spark.scheduler.TaskSetManager.logWarning(TaskSetManager.scala:52); at org.apache.spark.scheduler.TaskSetManager.handleFailedTask(TaskSetManager.scala:693); at org.apache.spark.scheduler.TaskSchedulerImpl.handleFailedTask(TaskSchedulerImpl.scala:421); at org.apache.spark.scheduler.TaskResultGetter$$anon$3$$anonfun$run$2.apply$mcV$sp(TaskResultGetter.scala:139); at org.apache.spark.scheduler.TaskResultGetter$$anon$3$$anonfun$run$2.apply(TaskResultGetter.scala:124); at org.apache.spark.scheduler.TaskResultGetter$$anon$3$$anonfun$run$2.apply(TaskResultGetter.scala:124); at org.apache.spark.util.Utils$.logUncaughtExceptions(Utils.scala:1953); at org.apache.spark.scheduler.TaskResultGetter$$anon$3.run(TaskResultGetter.scala:124); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:745); ```; `pyhail-submit`:; ```bash; #!/bin/bash. if [ $# -ne 2 ]; then; echo 'usage: gcp-pyhail-submit ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1186#issuecomment-267416027:1534,log,logWarning,1534,https://hail.is,https://github.com/hail-is/hail/issues/1186#issuecomment-267416027,1,['log'],['logWarning']
Testability,:18.262 ServiceBackend$: INFO: parallelizeAndComputeWithIndex: pty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY=: nPartitions 50\n2022-11-15 20:30:18.262 ServiceBackend$: INFO: parallelizeAndComputeWithIndex: pty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY=: writing f and contexts\n2022-11-15 20:30:18.263 ServiceBackend$: INFO: parallelizeAndComputeWithIndex: pty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY=: writing contexts\n2022-11-15 20:30:18.264 Requester: INFO: request POST http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Ff\n2022-11-15 20:30:18.264 Requester: INFO: request POST http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fcontexts\n2022-11-15 20:30:18.318 Requester: INFO: request POST http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Fcontexts response 200\n2022-11-15 20:30:18.331 Requester: INFO: request POST http://memory.hail/api/v1alpha/objects?q=gs%3A%2F%2Fhail-test-dmk9z%2FparallelizeAndComputeWithIndex%2Fpty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY%3D%2Ff response 200\n2022-11-15 20:30:18.332 ServiceBackend$: INFO: parallelizeAndComputeWithIndex: pty4D81uzQk6XN9LVVebj6KNvkh8SC3EzvXjgv6-LMY=: running job\n2022-11-15 20:30:18.333 Requester: INFO: request POST http://batch.hail/api/v1alpha/batches/6627669/update-fast\n2022-11-15 20:30:18.697 Requester: INFO: request POST http://batch.hail/api/v1alpha/batches/6627669/update-fast response 200\n2022-11-15 20:30:18.697 BatchClient: INFO: run: created update 2 for batch 6627669\n2022-11-15 20:30:18.697 Requester: INFO: request GET http://batch.hail/api/v1alpha/batches/6627669\n2022-11-15 20:30:18.802 Requester: INFO: request GET http://batch.hail/api/v1alpha/batches/6627669 response 200\n2022-11-15 20:30:18.852 Requester:,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284:23831,test,test-,23831,https://hail.is,https://github.com/hail-is/hail/pull/12470#issuecomment-1315959284,2,['test'],['test-']
Testability,":26: j.image(""gcr.io/broad-ctsa/datasets:050521""); /Users/dking/projects/hail/datasets/extract/extract_1000_Genomes_NYGC_30x_GRCh38.py:12: j.image(""gcr.io/broad-ctsa/datasets:041421""); /Users/dking/projects/hail/datasets/extract/extract_1000_Genomes_NYGC_30x_GRCh38.py:19: j.image(""gcr.io/broad-ctsa/datasets:041421""); /Users/dking/projects/hail/datasets/extract/extract_1000_Genomes_NYGC_30x_GRCh38.py:26: j.image(""gcr.io/broad-ctsa/datasets:041421""); /Users/dking/projects/hail/hail/scripts/update-terra-image.py:33:Image URL: `us.gcr.io/broad-dsp-gcr-public/{image_name}:{image_version}`; /Users/dking/projects/hail/hail/python/test/hailtop/utils/test_utils.py:115: x = parse_docker_image_reference('gcr.io/hail-vdc/batch-worker:123fds312'); /Users/dking/projects/hail/hail/python/test/hailtop/utils/test_utils.py:116: assert x.domain == 'gcr.io'; /Users/dking/projects/hail/hail/python/test/hailtop/utils/test_utils.py:120: assert x.name() == 'gcr.io/hail-vdc/batch-worker'; /Users/dking/projects/hail/hail/python/test/hailtop/utils/test_utils.py:121: assert str(x) == 'gcr.io/hail-vdc/batch-worker:123fds312'; /Users/dking/projects/hail/hail/python/hail/docs/change_log.md:278:- (hail#12230) The python-dill Batch images in `gcr.io/hail-vdc` are no longer supported.; /Users/dking/projects/hail/hail/python/hailtop/utils/utils.py:707: # DockerError(500, ""Head https://gcr.io/v2/genomics-tools/samtools/manifests/latest: unknown: Project 'project:genomics-tools' not found or deleted.""); /Users/dking/projects/hail/hail/python/hailtop/utils/utils.py:1061: return self.domain is not None and (self.domain == 'gcr.io' or self.domain.endswith('docker.pkg.dev')); /Users/dking/projects/hail/hail/python/hailtop/aiocloud/aiogoogle/client/container_client.py:6: super().__init__(f'https://gcr.io/v2/{project}', **kwargs); /Users/dking/projects/hail/datasets/extract/extract_dbSNP.py:22: j.image(""gcr.io/broad-ctsa/datasets:050521""); /Users/dking/projects/hail/infra/gcp/main.tf:55: ""gcr.io/${var.gcp_pr",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12963#issuecomment-1531692013:1466,test,test,1466,https://hail.is,https://github.com/hail-is/hail/pull/12963#issuecomment-1531692013,1,['test'],['test']
Testability,:42; Running test: Test method testIntervalIteratorWorksWithGeneralEndpoints(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testIntervalIteratorWorksWithGeneralEndpoints FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testIterateFromUntil(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testIterateFromUntil FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testLowerBound(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testLowerBound FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testQueryByKey(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testQueryByKey FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testRangeIterator(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testRangeIterator FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testUpperBound(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testUpperBound FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[0]([Ljava.lang.String;@49613eb0)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[0]([Ljava.lang.String;@49613eb0) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[1]([Ljava.lang.String;@326709be)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[1]([Ljava.lang.String;@326709be) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[2]([Ljava.lang.String;@7c5e570e)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[2]([Ljava.lang.String;@7c5e570e) FAILED; java.lang,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4718:2178,Assert,AssertionError,2178,https://hail.is,https://github.com/hail-is/hail/issues/4718,1,['Assert'],['AssertionError']
Testability,":; - command:; - /bin/sh; - -c; - ""\n set -ex\n (gcloud -q auth activate-service-account --key-file=/batch-gsa-key/privateKeyData; || (sleep $(( 5 + (RANDOM % 5) )); gcloud -q auth activate-service-account --key-file=/batch-gsa-key/privateKeyData))\n; \ gsutil -q stat gs://hail-batch-3jmp5/cd50b95a89914efb897965a5e982a29d/12728/287/742170/container_logs; && exit 1\n rm -rf /io/*\n set -ex; (gcloud -q auth activate-service-account; --key-file=/gsa-key/privateKeyData || (sleep $(( 5 + (RANDOM % 5) )); gcloud; -q auth activate-service-account --key-file=/gsa-key/privateKeyData)) && mkdir; -p /io/pipeline/pipeline-1cac3dd4e66d/__TASK__0; gsutil -m cp -R gs://hail-wang-ukps2/pipeline/pipeline-1cac3dd4e66d/__TASK__0/0731f9a3; /io/pipeline/pipeline-1cac3dd4e66d/__TASK__0/0731f9a3\n ""; image: google/cloud-sdk:237.0.0-alpine; imagePullPolicy: IfNotPresent; name: setup; resources:; requests:; cpu: 500m; terminationMessagePath: /dev/termination-log; terminationMessagePolicy: File; volumeMounts:; - mountPath: /batch-gsa-key; name: batch-gsa-key; - mountPath: /gsa-key; name: gsa-key; - mountPath: /io; name: batch-12728-job-287-742170; - mountPath: /var/run/secrets/kubernetes.io/serviceaccount; name: batch-output-pod-token-8pkmz; readOnly: true; nodeName: gke-vdc-non-preemptible-pool-0106a51b-qz7f; priority: 500000; priorityClassName: user; restartPolicy: Never; schedulerName: default-scheduler; securityContext: {}; serviceAccount: batch-output-pod; serviceAccountName: batch-output-pod; terminationGracePeriodSeconds: 30; tolerations:; - key: preemptible; value: ""true""; - effect: NoExecute; key: node.kubernetes.io/not-ready; operator: Exists; tolerationSeconds: 300; - effect: NoExecute; key: node.kubernetes.io/unreachable; operator: Exists; tolerationSeconds: 300; volumes:; - name: gsa-key; secret:; defaultMode: 420; secretName: wang-gsa-key; - name: batch-gsa-key; secret:; defaultMode: 420; secretName: batch-gsa-key; - name: batch-12728-job-287-742170; persistentVolumeClaim:; cla",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7016:9048,log,log,9048,https://hail.is,https://github.com/hail-is/hail/issues/7016,1,['log'],['log']
Testability,":; java.lang.AssertionError: assertion failed; at scala.Predef$.assert(Predef.scala:156); at is.hail.methods.Nirvana$.annotate(Nirvana.scala:361); at is.hail.methods.Nirvana$.apply(Nirvana.scala:487); at is.hail.methods.Nirvana.apply(Nirvana.scala); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:498); at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244); at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357); at py4j.Gateway.invoke(Gateway.java:280); at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132); at py4j.commands.CallCommand.execute(CallCommand.java:79); at py4j.GatewayConnection.run(GatewayConnection.java:214); at java.lang.Thread.run(Thread.java:748). Hail version: 0.2.10-ceb85fc87544; Error summary: AssertionError: assertion failed. We also check the key of input file:; ; >>> vcfVds.describe(); ----------------------------------------; Global fields:; None; ----------------------------------------; Column fields:; 's': str; ----------------------------------------; Row fields:; 'locus': locus<GRCh37>; 'alleles': array<str>; 'rsid': str; 'qual': float64; 'filters': set<str>; 'info': struct {; AC: array<int32>,; AF: array<float64>,; AN: int32,; BaseQRankSum: float64,; ClippingRankSum: float64,; DP: int32,; DS: bool,; FS: float64,; HaplotypeScore: float64,; InbreedingCoeff: float64,; MLEAC: array<int32>,; MLEAF: array<float64>,; MQ: float64,; MQ0: int32,; MQRankSum: float64,; QD: float64,; ReadPosRankSum: float64,; set: str; }; ----------------------------------------; Entry fields:; 'GT': call; 'AD': array<int32>; 'DP': int32; 'GQ': int32; 'PL': array<int32>; ----------------------------------------; Column key: ['s']; Row key: ['locus', 'alleles']; ----------------------------------",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5657:2023,Assert,AssertionError,2023,https://hail.is,https://github.com/hail-is/hail/issues/5657,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,":<code>~aiohttp.web.RouteTableDef</code>.; (<a href=""https://github-redirect.dependabot.com/aio-libs/aiohttp/issues/4663"">#4663</a>)</li>; <li>Started supporting :rfc:<code>authority-form &lt;9112#authority-form&gt;</code> and; :rfc:<code>absolute-form &lt;9112#absolute-form&gt;</code> URLs on the server-side.; (<a href=""https://github-redirect.dependabot.com/aio-libs/aiohttp/issues/6227"">#6227</a>)</li>; <li>Fixed Python 3.11 incompatibilities by using Cython 0.29.25.; (<a href=""https://github-redirect.dependabot.com/aio-libs/aiohttp/issues/6396"">#6396</a>)</li>; <li>Extended the <code>sock</code> argument typing declaration of the</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/aio-libs/aiohttp/blob/master/CHANGES.rst"">aiohttp's changelog</a>.</em></p>; <blockquote>; <h1>3.8.3 (2022-09-21)</h1>; <p>.. attention::</p>; <p>This is the last :doc:<code>aiohttp &lt;index&gt;</code> release tested under; Python 3.6. The 3.9 stream is dropping it from the CI and the; distribution package metadata.</p>; <h2>Bugfixes</h2>; <ul>; <li>; <p>Increased the upper boundary of the :doc:<code>multidict:index</code> dependency; to allow for the version 6 -- by :user:<code>hugovk</code>.</p>; <p>It used to be limited below version 7 in :doc:<code>aiohttp &lt;index&gt;</code> v3.8.1 but; was lowered in v3.8.2 via :pr:<code>6550</code> and never brought back, causing; problems with dependency pins when upgrading. :doc:<code>aiohttp &lt;index&gt;</code> v3.8.3; fixes that by recovering the original boundary of <code>&lt; 7</code>.; <code>[#6950](https://github.com/aio-libs/aiohttp/issues/6950) &lt;https://github.com/aio-libs/aiohttp/issues/6950&gt;</code>_</p>; </li>; </ul>; <hr />; <h1>3.8.2 (2022-09-20, subsequently yanked on 2022-09-21)</h1>; <h2>Bugfixes</h2>; <ul>; <li>; <p>Support registering OPTIONS HTTP method handlers via RouteTableDef.; <code>[#466",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12296:2816,test,tested,2816,https://hail.is,https://github.com/hail-is/hail/pull/12296,1,['test'],['tested']
Testability,":Float64,MQ0:Int32,MQRankSum:Float64,QD:Float64,ReadPosRankSum:Float64,set:String}}},rows,../globals/rows,../references,false)), WriteMetadata(Ref(__iruid_376,array<int64>),TableSpecWriter(gs://danking/workshop-test/1kg.mt/entries,Table{global:Struct{},key:[],row:Struct{`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{GT:Call,AD:Array[Int32],DP:Int32,GQ:Int32,PL:Array[Int32]}]}},rows,../globals/rows,../references,false)), WriteMetadata(MakeStruct(ArrayBuffer((cols,GetField(Ref(__iruid_368,struct{filePath: str, partitionCounts: int64}),partitionCounts)), (rows,Ref(__iruid_376,array<int64>)))),MatrixSpecWriter(gs://danking/workshop-test/1kg.mt,Matrix{global:Struct{},col_key:[s],col:Struct{s:String},row_key:[[locus,alleles]],row:Struct{locus:Locus(GRCh37),alleles:Array[String],rsid:String,qual:Float64,filters:Set[String],info:Struct{AC:Array[Int32],AF:Array[Float64],AN:Int32,BaseQRankSum:Float64,ClippingRankSum:Float64,DP:Int32,DS:Boolean,FS:Float64,HaplotypeScore:Float64,InbreedingCoeff:Float64,MLEAC:Array[Int32],MLEAF:Array[Float64],MQ:Float64,MQ0:Int32,MQRankSum:Float64,QD:Float64,ReadPosRankSum:Float64,set:String}},entry:Struct{GT:Call,AD:Array[Int32],DP:Int32,GQ:Int32,PL:Array[Int32]}},rows/rows,globals/rows,cols/rows,entries/rows,references,true))))))))),RelationalWriter(gs://danking/workshop-test/1kg.mt/entries,false,None)),RelationalWriter(gs://danking/workshop-test/1kg.mt/rows,false,None)),RelationalWriter(gs://danking/workshop-test/1kg.mt/cols,false,None)),RelationalWriter(gs://danking/workshop-test/1kg.mt/globals,false,None)),RelationalWriter(gs://danking/workshop-test/1kg.mt,true,Some((references,Set(GRCh37)))))); 	at scala.collection.MapLike$class.default(MapLike.scala:228); 	at scala.collection.AbstractMap.default(Map.scala:59); 	at scala.collection.mutable.HashMap.apply(HashMap.scala:65); 	at is.hail.expr.ir.Memo.lookup(RefEquality.scala:38); 	at is.hail.expr.ir.Memo.lookup(RefEquality.scala:37); 	at is.hail.expr.ir.Memo.apply(RefEquality.sc",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9856:18690,test,test,18690,https://hail.is,https://github.com/hail-is/hail/issues/9856,1,['test'],['test']
Testability,":` <br> `3.17.3 -> 3.18.3` <br> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | Information Exposure <br/>[SNYK-PYTHON-REQUESTS-5595532](https://snyk.io/vuln/SNYK-PYTHON-REQUESTS-5595532) | `requests:` <br> `2.27.1 -> 2.31.0` <br> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | Timing Attack <br/>[SNYK-PYTHON-RSA-1038401](https://snyk.io/vuln/SNYK-PYTHON-RSA-1038401) | `rsa:` <br> `4.5 -> 4.7` <br> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | Regular Expression Denial of Service (ReDoS) <br/>[SNYK-PYTHON-SETUPTOOLS-3180412](https://snyk.io/vuln/SNYK-PYTHON-SETUPTOOLS-3180412) | `setuptools:` <br> `39.0.1 -> 65.5.1` <br> | No | No Known Exploit . Some vulnerabilities couldn't be fully fixed and so Snyk will still find them when the project is tested again. This may be because the vulnerability existed within more than one direct dependency, but not all of the affected dependencies could be upgraded. Check the changes in this PR to ensure they won't cause issues with your project. ------------. **Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open fix PRs.*. For more information: <img src=""https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiJhZGQ5ZWQxOC00MjJhLTRkZWUtYWI4Yy01MTkyYmQ4ZmYxMzIiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6ImFkZDllZDE4LTQyMmEtNGRlZS1hYjhjLTUxOTJiZDhmZjEzMiJ9fQ=="" width=""0"" height=""0""/>; 🧐 [View latest project report](https://app.snyk.io/org/danking/project/b72ce54d-5de3-48e5-a1d4-6f8967681a12?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr). 🛠 [Adjust project settings](https://app.snyk",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13975:2768,test,tested,2768,https://hail.is,https://github.com/hail-is/hail/pull/13975,1,['test'],['tested']
Testability,; 	at is.hail.backend.local.LocalBackend._execute(LocalBackend.scala:249); 	at is.hail.backend.local.LocalBackend.$anonfun$execute$2(LocalBackend.scala:314); 	at is.hail.utils.ExecutionTimer.time(ExecutionTimer.scala:84); 	at is.hail.backend.local.LocalBackend.$anonfun$execute$1(LocalBackend.scala:309); 	at is.hail.backend.local.LocalBackend.$anonfun$execute$1$adapted(LocalBackend.scala:308); 	at is.hail.backend.ExecuteContext$.$anonfun$scoped$3(ExecuteContext.scala:78); 	at is.hail.utils.package$.using(package.scala:664); 	at is.hail.backend.ExecuteContext$.$anonfun$scoped$2(ExecuteContext.scala:78); 	at is.hail.utils.package$.using(package.scala:664); 	at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:13); 	at is.hail.backend.ExecuteContext$.scoped(ExecuteContext.scala:65); 	at is.hail.backend.local.LocalBackend.$anonfun$withExecuteContext$2(LocalBackend.scala:144); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:55); 	at is.hail.utils.ExecutionTimer$.logTime(ExecutionTimer.scala:62); 	at is.hail.backend.local.LocalBackend.withExecuteContext(LocalBackend.scala:130); 	at is.hail.backend.local.LocalBackend.execute(LocalBackend.scala:308); 	at is.hail.backend.BackendHttpHandler.handle(BackendServer.scala:88); 	at com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:79); 	at sun.net.httpserver.AuthFilter.doFilter(AuthFilter.java:83); 	at com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:82); 	at sun.net.httpserver.ServerImpl$Exchange$LinkHandler.handle(ServerImpl.java:822); 	at com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:79); 	at sun.net.httpserver.ServerImpl$Exchange.run(ServerImpl.java:794); 	at sun.net.httpserver.ServerImpl$DefaultExecutor.execute(ServerImpl.java:199); 	at sun.net.httpserver.ServerImpl$Dispatcher.handle(ServerImpl.java:544); 	at sun.net.httpserver.ServerImpl$Dispatcher.run(ServerImpl.java:509); 	at java.lang.Thread.run(Thread.java:750). Hail version: 0.2.127-d2615543476b; Error summary: NoSuchElementExcep,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14245:20838,log,logTime,20838,https://hail.is,https://github.com/hail-is/hail/issues/14245,1,['log'],['logTime']
Testability,; 	at is.hail.backend.local.LocalBackend._execute(LocalBackend.scala:249); 	at is.hail.backend.local.LocalBackend.$anonfun$execute$2(LocalBackend.scala:314); 	at is.hail.utils.ExecutionTimer.time(ExecutionTimer.scala:84); 	at is.hail.backend.local.LocalBackend.$anonfun$execute$1(LocalBackend.scala:309); 	at is.hail.backend.local.LocalBackend.$anonfun$execute$1$adapted(LocalBackend.scala:308); 	at is.hail.backend.ExecuteContext$.$anonfun$scoped$3(ExecuteContext.scala:78); 	at is.hail.utils.package$.using(package.scala:664); 	at is.hail.backend.ExecuteContext$.$anonfun$scoped$2(ExecuteContext.scala:78); 	at is.hail.utils.package$.using(package.scala:664); 	at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:13); 	at is.hail.backend.ExecuteContext$.scoped(ExecuteContext.scala:65); 	at is.hail.backend.local.LocalBackend.$anonfun$withExecuteContext$2(LocalBackend.scala:144); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:55); 	at is.hail.utils.ExecutionTimer$.logTime(ExecutionTimer.scala:62); 	at is.hail.backend.local.LocalBackend.withExecuteContext(LocalBackend.scala:130); 	at is.hail.backend.local.LocalBackend.execute(LocalBackend.scala:308); 	at is.hail.backend.BackendHttpHandler.handle(BackendServer.scala:88); 	at com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:79); 	at sun.net.httpserver.AuthFilter.doFilter(AuthFilter.java:83); 	at com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:82); 	at sun.net.httpserver.ServerImpl$Exchange$LinkHandler.handle(ServerImpl.java:822); 	at com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:79); 	at sun.net.httpserver.ServerImpl$Exchange.run(ServerImpl.java:794); 	at sun.net.httpserver.ServerImpl$DefaultExecutor.execute(ServerImpl.java:199); 	at sun.net.httpserver.ServerImpl$Dispatcher.handle(ServerImpl.java:544); 	at sun.net.httpserver.ServerImpl$Dispatcher.run(ServerImpl.java:509); 	at java.lang.Thread.run(Thread.java:750). is.hail.utils.HailException: Error while typechecking IR:. %1 = Liter,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14245:5134,log,logTime,5134,https://hail.is,https://github.com/hail-is/hail/issues/14245,1,['log'],['logTime']
Testability,; 	at is.hail.backend.local.LocalBackend._execute(LocalBackend.scala:249); 	at is.hail.backend.local.LocalBackend.$anonfun$execute$2(LocalBackend.scala:314); 	at is.hail.utils.ExecutionTimer.time(ExecutionTimer.scala:84); 	at is.hail.backend.local.LocalBackend.$anonfun$execute$1(LocalBackend.scala:309); 	at is.hail.backend.local.LocalBackend.$anonfun$execute$1$adapted(LocalBackend.scala:308); 	at is.hail.backend.ExecuteContext$.$anonfun$scoped$3(ExecuteContext.scala:78); 	at is.hail.utils.package$.using(package.scala:664); 	at is.hail.backend.ExecuteContext$.$anonfun$scoped$2(ExecuteContext.scala:78); 	at is.hail.utils.package$.using(package.scala:664); 	at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:13); 	at is.hail.backend.ExecuteContext$.scoped(ExecuteContext.scala:65); 	at is.hail.backend.local.LocalBackend.$anonfun$withExecuteContext$2(LocalBackend.scala:144); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:55); 	at is.hail.utils.ExecutionTimer$.logTime(ExecutionTimer.scala:62); 	at is.hail.backend.local.LocalBackend.withExecuteContext(LocalBackend.scala:130); 	at is.hail.backend.local.LocalBackend.execute(LocalBackend.scala:308); 	at is.hail.backend.BackendHttpHandler.handle(BackendServer.scala:88); 	at com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:79); 	at sun.net.httpserver.AuthFilter.doFilter(AuthFilter.java:83); 	at com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:82); 	at sun.net.httpserver.ServerImpl$Exchange$LinkHandler.handle(ServerImpl.java:822); 	at com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:79); 	at sun.net.httpserver.ServerImpl$Exchange.run(ServerImpl.java:794); 	at sun.net.httpserver.ServerImpl$DefaultExecutor.execute(ServerImpl.java:199); 	at sun.net.httpserver.ServerImpl$Dispatcher.handle(ServerImpl.java:544); 	at sun.net.httpserver.ServerImpl$Dispatcher.run(ServerImpl.java:509); 	at java.lang.Thread.run(Thread.java:750). java.util.NoSuchElementException: Ref with name __iruid_1834 could no,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14245:17370,log,logTime,17370,https://hail.is,https://github.com/hail-is/hail/issues/14245,1,['log'],['logTime']
Testability,; 	at is.hail.backend.local.LocalBackend._execute(LocalBackend.scala:249); 	at is.hail.backend.local.LocalBackend.$anonfun$execute$2(LocalBackend.scala:314); 	at is.hail.utils.ExecutionTimer.time(ExecutionTimer.scala:84); 	at is.hail.backend.local.LocalBackend.$anonfun$execute$1(LocalBackend.scala:309); 	at is.hail.backend.local.LocalBackend.$anonfun$execute$1$adapted(LocalBackend.scala:308); 	at is.hail.backend.ExecuteContext$.$anonfun$scoped$3(ExecuteContext.scala:78); 	at is.hail.utils.package$.using(package.scala:664); 	at is.hail.backend.ExecuteContext$.$anonfun$scoped$2(ExecuteContext.scala:78); 	at is.hail.utils.package$.using(package.scala:664); 	at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:13); 	at is.hail.backend.ExecuteContext$.scoped(ExecuteContext.scala:65); 	at is.hail.backend.local.LocalBackend.$anonfun$withExecuteContext$2(LocalBackend.scala:144); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:55); 	at is.hail.utils.ExecutionTimer$.logTime(ExecutionTimer.scala:62); 	at is.hail.backend.local.LocalBackend.withExecuteContext(LocalBackend.scala:130); 	at is.hail.backend.local.LocalBackend.execute(LocalBackend.scala:308); 	at is.hail.backend.BackendHttpHandler.handle(BackendServer.scala:88); 	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:77); 	at jdk.httpserver/sun.net.httpserver.AuthFilter.doFilter(AuthFilter.java:82); 	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:80); 	at jdk.httpserver/sun.net.httpserver.ServerImpl$Exchange$LinkHandler.handle(ServerImpl.java:692); 	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:77); 	at jdk.httpserver/sun.net.httpserver.ServerImpl$Exchange.run(ServerImpl.java:664); 	at jdk.httpserver/sun.net.httpserver.ServerImpl$DefaultExecutor.execute(ServerImpl.java:159); 	at jdk.httpserver/sun.net.httpserver.ServerImpl$Dispatcher.handle(ServerImpl.java:442); 	at jdk.httpserver/sun.net.httpserver.ServerImpl$Dispatcher.run,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13904#issuecomment-1973731699:3390,log,logTime,3390,https://hail.is,https://github.com/hail-is/hail/issues/13904#issuecomment-1973731699,4,['log'],['logTime']
Testability,; 	at is.hail.backend.spark.SparkBackend._execute(SparkBackend.scala:509); 	at is.hail.backend.spark.SparkBackend.$anonfun$execute$4(SparkBackend.scala:546); 	at is.hail.utils.ExecutionTimer.time(ExecutionTimer.scala:81); 	at is.hail.backend.spark.SparkBackend.$anonfun$execute$3(SparkBackend.scala:542); 	at is.hail.backend.spark.SparkBackend.$anonfun$execute$3$adapted(SparkBackend.scala:541); 	at is.hail.backend.ExecuteContext$.$anonfun$scoped$3(ExecuteContext.scala:76); 	at is.hail.utils.package$.using(package.scala:657); 	at is.hail.backend.ExecuteContext$.$anonfun$scoped$2(ExecuteContext.scala:76); 	at is.hail.utils.package$.using(package.scala:657); 	at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:17); 	at is.hail.backend.ExecuteContext$.scoped(ExecuteContext.scala:62); 	at is.hail.backend.spark.SparkBackend.$anonfun$withExecuteContext$3(SparkBackend.scala:368); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:52); 	at is.hail.utils.ExecutionTimer$.logTime(ExecutionTimer.scala:59); 	at is.hail.backend.spark.SparkBackend.$anonfun$withExecuteContext$2(SparkBackend.scala:364); 	at is.hail.backend.spark.SparkBackend.execute(SparkBackend.scala:541); 	at is.hail.backend.BackendHttpHandler.handle(BackendServer.scala:51); 	at com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:79); 	at sun.net.httpserver.AuthFilter.doFilter(AuthFilter.java:83); 	at com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:82); 	at sun.net.httpserver.ServerImpl$Exchange$LinkHandler.handle(ServerImpl.java:822); 	at com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:79); 	at sun.net.httpserver.ServerImpl$Exchange.run(ServerImpl.java:794); 	at sun.net.httpserver.ServerImpl$DefaultExecutor.execute(ServerImpl.java:199); 	at sun.net.httpserver.ServerImpl$Dispatcher.handle(ServerImpl.java:544); 	at sun.net.httpserver.ServerImpl$Dispatcher.run(ServerImpl.java:509); 	at java.lang.Thread.run(Thread.java:750). Hail version: 0.2.125-c4e2880b3279; Error summary: FileNot,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13915:6830,log,logTime,6830,https://hail.is,https://github.com/hail-is/hail/issues/13915,1,['log'],['logTime']
Testability,; 	at is.hail.backend.spark.SparkBackend._execute(SparkBackend.scala:517); 	at is.hail.backend.spark.SparkBackend.$anonfun$execute$4(SparkBackend.scala:546); 	at is.hail.utils.ExecutionTimer.time(ExecutionTimer.scala:81); 	at is.hail.backend.spark.SparkBackend.$anonfun$execute$3(SparkBackend.scala:542); 	at is.hail.backend.spark.SparkBackend.$anonfun$execute$3$adapted(SparkBackend.scala:541); 	at is.hail.backend.ExecuteContext$.$anonfun$scoped$3(ExecuteContext.scala:76); 	at is.hail.utils.package$.using(package.scala:657); 	at is.hail.backend.ExecuteContext$.$anonfun$scoped$2(ExecuteContext.scala:76); 	at is.hail.utils.package$.using(package.scala:657); 	at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:17); 	at is.hail.backend.ExecuteContext$.scoped(ExecuteContext.scala:62); 	at is.hail.backend.spark.SparkBackend.$anonfun$withExecuteContext$3(SparkBackend.scala:368); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:52); 	at is.hail.utils.ExecutionTimer$.logTime(ExecutionTimer.scala:59); 	at is.hail.backend.spark.SparkBackend.$anonfun$withExecuteContext$2(SparkBackend.scala:364); 	at is.hail.backend.spark.SparkBackend.execute(SparkBackend.scala:541); 	at is.hail.backend.BackendHttpHandler.handle(BackendServer.scala:81); 	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:77); 	at jdk.httpserver/sun.net.httpserver.AuthFilter.doFilter(AuthFilter.java:82); 	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:80); 	at jdk.httpserver/sun.net.httpserver.ServerImpl$Exchange$LinkHandler.handle(ServerImpl.java:848); 	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:77); 	at jdk.httpserver/sun.net.httpserver.ServerImpl$Exchange.run(ServerImpl.java:817); 	at jdk.httpserver/sun.net.httpserver.ServerImpl$DefaultExecutor.execute(ServerImpl.java:201); 	at jdk.httpserver/sun.net.httpserver.ServerImpl$Dispatcher.handle(ServerImpl.java:560); 	at jdk.httpserver/sun.net.httpserver.ServerImpl$Dis,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14102:14632,log,logTime,14632,https://hail.is,https://github.com/hail-is/hail/issues/14102,1,['log'],['logTime']
Testability,; 	at is.hail.backend.spark.SparkBackend._execute(SparkBackend.scala:600); 	at is.hail.backend.spark.SparkBackend.$anonfun$execute$4(SparkBackend.scala:636); 	at is.hail.utils.ExecutionTimer.time(ExecutionTimer.scala:84); 	at is.hail.backend.spark.SparkBackend.$anonfun$execute$3(SparkBackend.scala:631); 	at is.hail.backend.spark.SparkBackend.$anonfun$execute$3$adapted(SparkBackend.scala:630); 	at is.hail.backend.ExecuteContext$.$anonfun$scoped$3(ExecuteContext.scala:78); 	at is.hail.utils.package$.using(package.scala:664); 	at is.hail.backend.ExecuteContext$.$anonfun$scoped$2(ExecuteContext.scala:78); 	at is.hail.utils.package$.using(package.scala:664); 	at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:13); 	at is.hail.backend.ExecuteContext$.scoped(ExecuteContext.scala:65); 	at is.hail.backend.spark.SparkBackend.$anonfun$withExecuteContext$2(SparkBackend.scala:407); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:55); 	at is.hail.utils.ExecutionTimer$.logTime(ExecutionTimer.scala:62); 	at is.hail.backend.spark.SparkBackend.withExecuteContext(SparkBackend.scala:393); 	at is.hail.backend.spark.SparkBackend.execute(SparkBackend.scala:630); 	at is.hail.backend.BackendHttpHandler.handle(BackendServer.scala:88); 	at com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:79); 	at sun.net.httpserver.AuthFilter.doFilter(AuthFilter.java:83); 	at com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:82); 	at sun.net.httpserver.ServerImpl$Exchange$LinkHandler.handle(ServerImpl.java:822); 	at com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:79); 	at sun.net.httpserver.ServerImpl$Exchange.run(ServerImpl.java:794); 	at sun.net.httpserver.ServerImpl$DefaultExecutor.execute(ServerImpl.java:199); 	at sun.net.httpserver.ServerImpl$Dispatcher.handle(ServerImpl.java:544); 	at sun.net.httpserver.ServerImpl$Dispatcher.run(ServerImpl.java:509); 	at java.lang.Thread.run(Thread.java:750). Hail version: 0.2.130-bea04d9c79b5; Error summary: IllegalArgumentExc,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14529:11858,log,logTime,11858,https://hail.is,https://github.com/hail-is/hail/issues/14529,1,['log'],['logTime']
Testability,; 	at is.hail.backend.spark.SparkBackend._execute(SparkBackend.scala:600); 	at is.hail.backend.spark.SparkBackend.$anonfun$execute$4(SparkBackend.scala:636); 	at is.hail.utils.ExecutionTimer.time(ExecutionTimer.scala:84); 	at is.hail.backend.spark.SparkBackend.$anonfun$execute$3(SparkBackend.scala:631); 	at is.hail.backend.spark.SparkBackend.$anonfun$execute$3$adapted(SparkBackend.scala:630); 	at is.hail.backend.ExecuteContext$.$anonfun$scoped$3(ExecuteContext.scala:78); 	at is.hail.utils.package$.using(package.scala:664); 	at is.hail.backend.ExecuteContext$.$anonfun$scoped$2(ExecuteContext.scala:78); 	at is.hail.utils.package$.using(package.scala:664); 	at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:13); 	at is.hail.backend.ExecuteContext$.scoped(ExecuteContext.scala:65); 	at is.hail.backend.spark.SparkBackend.$anonfun$withExecuteContext$2(SparkBackend.scala:407); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:55); 	at is.hail.utils.ExecutionTimer$.logTime(ExecutionTimer.scala:62); 	at is.hail.backend.spark.SparkBackend.withExecuteContext(SparkBackend.scala:393); 	at is.hail.backend.spark.SparkBackend.execute(SparkBackend.scala:630); 	at is.hail.backend.BackendHttpHandler.handle(BackendServer.scala:88); 	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:77); 	at jdk.httpserver/sun.net.httpserver.AuthFilter.doFilter(AuthFilter.java:82); 	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:80); 	at jdk.httpserver/sun.net.httpserver.ServerImpl$Exchange$LinkHandler.handle(ServerImpl.java:848); 	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:77); 	at jdk.httpserver/sun.net.httpserver.ServerImpl$Exchange.run(ServerImpl.java:817); 	at jdk.httpserver/sun.net.httpserver.ServerImpl$DefaultExecutor.execute(ServerImpl.java:201); 	at jdk.httpserver/sun.net.httpserver.ServerImpl$Dispatcher.handle(ServerImpl.java:560); 	at jdk.httpserver/sun.net.httpserver.ServerImpl$Dispatcher.run,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14513:14114,log,logTime,14114,https://hail.is,https://github.com/hail-is/hail/issues/14513,1,['log'],['logTime']
Testability,; 	at is.hail.backend.spark.SparkBackend._execute(SparkBackend.scala:601); 	at is.hail.backend.spark.SparkBackend.$anonfun$execute$4(SparkBackend.scala:637); 	at is.hail.utils.ExecutionTimer.time(ExecutionTimer.scala:84); 	at is.hail.backend.spark.SparkBackend.$anonfun$execute$3(SparkBackend.scala:632); 	at is.hail.backend.spark.SparkBackend.$anonfun$execute$3$adapted(SparkBackend.scala:631); 	at is.hail.backend.ExecuteContext$.$anonfun$scoped$3(ExecuteContext.scala:77); 	at is.hail.utils.package$.using(package.scala:665); 	at is.hail.backend.ExecuteContext$.$anonfun$scoped$2(ExecuteContext.scala:77); 	at is.hail.utils.package$.using(package.scala:665); 	at is.hail.annotations.RegionPool$.scoped(RegionPool.scala:17); 	at is.hail.backend.ExecuteContext$.scoped(ExecuteContext.scala:64); 	at is.hail.backend.spark.SparkBackend.$anonfun$withExecuteContext$2(SparkBackend.scala:407); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:55); 	at is.hail.utils.ExecutionTimer$.logTime(ExecutionTimer.scala:62); 	at is.hail.backend.spark.SparkBackend.withExecuteContext(SparkBackend.scala:393); 	at is.hail.backend.spark.SparkBackend.execute(SparkBackend.scala:631); 	at is.hail.backend.BackendHttpHandler.handle(BackendServer.scala:89); 	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:77); 	at jdk.httpserver/sun.net.httpserver.AuthFilter.doFilter(AuthFilter.java:82); 	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:80); 	at jdk.httpserver/sun.net.httpserver.ServerImpl$Exchange$LinkHandler.handle(ServerImpl.java:848); 	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:77); 	at jdk.httpserver/sun.net.httpserver.ServerImpl$Exchange.run(ServerImpl.java:817); 	at jdk.httpserver/sun.net.httpserver.ServerImpl$DefaultExecutor.execute(ServerImpl.java:201); 	at jdk.httpserver/sun.net.httpserver.ServerImpl$Dispatcher.handle(ServerImpl.java:560); 	at jdk.httpserver/sun.net.httpserver.ServerImpl$Dispatcher.run,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14362:18620,log,logTime,18620,https://hail.is,https://github.com/hail-is/hail/issues/14362,1,['log'],['logTime']
Testability,; 	at is.hail.check.Prop.check(Prop.scala:19); 	at is.hail.expr.ir.OrderingSuite.testBinarySearchOnDict(OrderingSuite.scala:357); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); 	at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:123); Caused by: java.lang.ArrayIndexOutOfBoundsException: 3; 	at scala.collection.mutable.WrappedArray$ofRef.apply(WrappedArray.scala:127); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33$$anonfun$apply$19.getKey$1(OrderingSuite.scala:345); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33$$anonfun$apply$19.apply(OrderingSuite.scala:347); 	at is.h,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5630:1455,test,testng,1455,https://hail.is,https://github.com/hail-is/hail/issues/5630,1,['test'],['testng']
Testability,"; ""hooks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/hooks"",; ""issue_events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/events{/number}"",; ""events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/events"",; ""assignees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/assignees{/user}"",; ""branches_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/branches{/branch}"",; ""tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/tags"",; ""blobs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/blobs{/sha}"",; ""git_tags_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/tags{/sha}"",; ""git_refs_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/refs{/sha}"",; ""trees_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/trees{/sha}"",; ""statuses_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/statuses/{sha}"",; ""languages_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/languages"",; ""stargazers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/stargazers"",; ""contributors_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contributors"",; ""subscribers_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscribers"",; ""subscription_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/subscription"",; ""commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/commits{/sha}"",; ""git_commits_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/git/commits{/sha}"",; ""comments_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/comments{/number}"",; ""issue_comment_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/comments{/number}"",; ""contents_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/contents/{+path}"",; ""compare_url"": ""https://",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:3609,test,test,3609,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,2,['test'],"['test', 'test-']"
Testability,"; 494; 495 return decorator(_typecheck). /hadoop_gcs_connector_metadata_cache/hail/hail-devel-0c961806173f.zip/hail/methods/qc.py in vep(dataset, config, block_size, name, csq); 545; 546 require_row_key_variant(dataset, 'vep'); --> 547 return MatrixTable(Env.hail().methods.VEP.apply(dataset._jvds, config, 'va.`{}`'.format(name), csq, block_size)); 548; 549. /usr/lib/spark/python/lib/py4j-0.10.4-src.zip/py4j/java_gateway.py in __call__(self, *args); 1131 answer = self.gateway_client.send_command(command); 1132 return_value = get_return_value(; -> 1133 answer, self.gateway_client, self.target_id, self.name); 1134; 1135 for temp_arg in temp_args:. /hadoop_gcs_connector_metadata_cache/hail/hail-devel-0c961806173f.zip/hail/utils/java.py in deco(*args, **kwargs); 236 # this is a hack to suppress the original error's stack trace; 237 if _exception:; --> 238 raise _exception; 239; 240 return deco. FatalError: AssertionError: assertion failed. Java stack trace:; java.lang.AssertionError: assertion failed; 	at scala.Predef$.assert(Predef.scala:156); 	at is.hail.variant.MatrixTable.orderedRVDLeftJoinDistinctAndInsert(MatrixTable.scala:982); 	at is.hail.methods.VEP$.annotate(VEP.scala:429); 	at is.hail.methods.VEP$.apply(VEP.scala:434); 	at is.hail.methods.VEP.apply(VEP.scala); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244); 	at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357); 	at py4j.Gateway.invoke(Gateway.java:280); 	at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132); 	at py4j.commands.CallCommand.execute(CallCommand.java:79); 	at py4j.GatewayConnection.run(GatewayConnection.java:214); 	at java.lang.Thread.run(Thread.java:748). Ha",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3099:2867,Assert,AssertionError,2867,https://hail.is,https://github.com/hail-is/hail/issues/3099,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,; :processTestResources UP-TO-DATE; :testClasses UP-TO-DATE; :testCppCodegen; Running test: Test method testReadWrite(is.hail.annotations.AnnotationsSuite). Gradle suite > Gradle test > is.hail.annotations.AnnotationsSuite.testReadWrite FAILED; org.apache.spark.SparkException at AnnotationsSuite.scala:76; Caused by: java.lang.AssertionError; Running test: Test method testEmptyKeys(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testEmptyKeys FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testIntervalIterator(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testIntervalIterator FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testIntervalIteratorWorksWithGeneralEndpoints(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testIntervalIteratorWorksWithGeneralEndpoints FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testIterateFromUntil(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testIterateFromUntil FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testLowerBound(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testLowerBound FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testQueryByKey(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testQueryByKey FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testRangeIterator(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testRangeIterator FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testUpperBound(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testUpperBound FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[0]([Ljava.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4718:1455,test,test,1455,https://hail.is,https://github.com/hail-is/hail/issues/4718,3,"['Test', 'test']","['Test', 'test', 'testIterateFromUntil']"
Testability,"; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/cbeust/testng/blob/master/CHANGES.txt"">org.testng:testng's changelog</a>.</em></p>; <blockquote>; <p>7.7.1; Fixed: GITHUB-2854: overloaded assertEquals methods do not work from Groovy (Krishnan Mahadevan)</p>; <p>7.7.0; Fixed: GITHUB-2852: [SECURITY] Fix Zip Slip Vulnerability (Jonathan Leitschuh); Fixed: GITHUB-2792: JUnitTestClass sets XmlTest as null when running JUnit 4 Tests using TestNG (Krishnan Mahadevan); Fixed: GITHUB-2847: Deprecate support for running JUnit tests (Krishnan Mahadevan); Fixed: GITHUB-2844: Deprecate support for running Spock Tests (Krishnan Mahadevan); Fixed: GITHUB-550: Weird <a href=""https://github.com/BeforeMethod""><code>@​BeforeMethod</code></a> and <a href=""https://github.com/AfterMethod""><code>@​AfterMethod</code></a> behaviour with dependsOnMethods (Krishnan Mahadevan); Fixed: GITHUB-893: TestNG should provide an Api which allow to find all dependent of a specific test (Krishnan Mahadevan); New: Added .yml file extension for yaml suite files, previously only .yaml was allowed for yaml (Steven Jubb); Fixed: GITHUB-141: regular expression in &quot;dependsOnMethods&quot; does not work (Krishnan Mahadevan); Fixed: GITHUB-2770: FileAlreadyExistsException when report is generated (melloware); Fixed: GITHUB-2825: Programmatically Loading TestNG Suite from JAR File Fails to Delete Temporary Copy of Suite File (Steven Jubb); Fixed: GITHUB-2818: Add configuration key for callback discrepancy behavior (Krishnan Mahadevan); Fixed: GITHUB-2819: Ability to retry a data provider in case of failures (Krishnan Mahadevan); Fixed: GITHUB-2308: StringIndexOutOfBoundsException in findClassesInPackage - Surefire/Maven - JDK 11 fails (Krishnan Mahadevan); Fixed: GITHUB:2788: TestResult.isSuccess() is TRUE when test fails due to expectedExceptions (Krishnan Mahadevan); Fixed: GITHUB-2800: Ru",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12665:10545,Test,TestNG,10545,https://hail.is,https://github.com/hail-is/hail/pull/12665,2,"['Test', 'test']","['TestNG', 'test']"
Testability,"; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/googleapis/python-logging/blob/main/CHANGELOG.md"">google-cloud-logging's changelog</a>.</em></p>; <blockquote>; <h2><a href=""https://github.com/googleapis/python-logging/compare/v2.7.0...v3.0.0"">3.0.0</a> (2022-01-27)</h2>; <h3>⚠ BREAKING CHANGES</h3>; <ul>; <li>make logging API more friendly to use (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/422"">#422</a>)</li>; <li>api consistency between HTTP and Gapic layers (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/375"">#375</a>)</li>; <li>support string-encoded json (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/339"">#339</a>)</li>; <li>Infer default resource in logger (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/315"">#315</a>)</li>; <li>support json logs (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/316"">#316</a>)</li>; <li>deprecate AppEngineHandler and ContainerEngineHandler (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/310"">#310</a>)</li>; </ul>; <h3>Features</h3>; <ul>; <li>add api key support (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/472"">#472</a>) (<a href=""https://github.com/googleapis/python-logging/commit/81ca8c616acb988be1fbecfc2a0b1a5b39280149"">81ca8c6</a>)</li>; <li>add json_fields extras argument for adding to jsonPayload (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/447"">#447</a>) (<a href=""https://github.com/googleapis/python-logging/commit/a760e02371a55d6262e42de9e0222fffa2c7192b"">a760e02</a>)</li>; <li>avoid importing grpc when explicitly disabled (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/416"">#416</a>) (<a href",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11574:6422,log,logging,6422,https://hail.is,https://github.com/hail-is/hail/pull/11574,2,['log'],"['logging', 'logs']"
Testability,"; </ul>; <h2>New Contributors</h2>; <ul>; <li><a href=""https://github.com/Manice18""><code>@​Manice18</code></a> made their first contribution in <a href=""https://redirect.github.com/samtools/htsjdk/pull/1654"">samtools/htsjdk#1654</a></li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/samtools/htsjdk/commit/5cc90ed3aff8d537deb300d5db9225280bea1b30""><code>5cc90ed</code></a> Update two remaining out of date dependencies (<a href=""https://redirect.github.com/samtools/htsjdk/issues/1677"">#1677</a>)</li>; <li><a href=""https://github.com/samtools/htsjdk/commit/1e5ec5a830d1852667dee2092b89ea488e844a61""><code>1e5ec5a</code></a> Add new Genotype methods hasRefAllele and hasAltAllele (<a href=""https://redirect.github.com/samtools/htsjdk/issues/1678"">#1678</a>)</li>; <li><a href=""https://github.com/samtools/htsjdk/commit/20334af402b044b86f80f152a27a13b0e3376536""><code>20334af</code></a> Move the EnaRefServiceTest to the externalAPI test group (<a href=""https://redirect.github.com/samtools/htsjdk/issues/1675"">#1675</a>)</li>; <li><a href=""https://github.com/samtools/htsjdk/commit/75eac4674a78cddde9fc9ff6a0a18f6d4ba1f798""><code>75eac46</code></a> add SINGULAR platform to read group (<a href=""https://redirect.github.com/samtools/htsjdk/issues/1635"">#1635</a>)</li>; <li><a href=""https://github.com/samtools/htsjdk/commit/d486d53aac2cd52ac53d1c633ac89789871815a8""><code>d486d53</code></a> Zero len array (<a href=""https://redirect.github.com/samtools/htsjdk/issues/1674"">#1674</a>)</li>; <li><a href=""https://github.com/samtools/htsjdk/commit/44817ee7182bd65e17a6215410f919a8b3e96a94""><code>44817ee</code></a> Update org.json</li>; <li><a href=""https://github.com/samtools/htsjdk/commit/500cffda9c511d88a736bcbb91d3f10259b967fb""><code>500cffd</code></a> Test fix</li>; <li><a href=""https://github.com/samtools/htsjdk/commit/662c8274fad42e001e63e2b9c9c2066714b42a0d""><code>662c827",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13576:6782,test,test,6782,https://hail.is,https://github.com/hail-is/hail/pull/13576,1,['test'],['test']
Testability,"; <h2>v2.0.2</h2>; <h3>Added</h3>; <ul>; <li>Officially supporting 3.9 - <a href=""https://github.com/felixonmars""><code>@​felixonmars</code></a>.</li>; <li>You can now add static fields to log objects - <a href=""https://github.com/cosimomeli""><code>@​cosimomeli</code></a>.</li>; </ul>; <h3>Changed</h3>; <ul>; <li>Dropped 3.4 support.</li>; <li>Dropped Travis CI for Github Actions.</li>; <li>Wheel should build for python 3 instead of just 3.4 now.</li>; </ul>; <h2>v2.0.1</h2>; <h2>Added</h2>; <ul>; <li>Support Pypi long descripton - <a href=""https://github.com/ereli-cb""><code>@​ereli-cb</code></a></li>; </ul>; <h2>Changed</h2>; <ul>; <li>You can now rename output fields - <a href=""https://github.com/schlitzered""><code>@​schlitzered</code></a></li>; </ul>; <h2>v2.0.0</h2>; <p>No release notes provided.</p>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/madzak/python-json-logger/blob/master/CHANGELOG.md"">python-json-logger's changelog</a>.</em></p>; <blockquote>; <h2>[2.0.2] - 2021-07-27</h2>; <h3>Added</h3>; <ul>; <li>Officially supporting 3.9 - <a href=""https://github.com/felixonmars""><code>@​felixonmars</code></a>.</li>; <li>You can now add static fields to log objects - <a href=""https://github.com/cosimomeli""><code>@​cosimomeli</code></a>.</li>; </ul>; <h3>Changed</h3>; <ul>; <li>Dropped 3.4 support.</li>; <li>Dropped Travis CI for Github Actions.</li>; <li>Wheel should build for python 3 instead of just 3.4 now.</li>; </ul>; <h2>[2.0.1] - 2020-10-12</h2>; <h3>Added</h3>; <ul>; <li>Support Pypi long descripton - <a href=""https://github.com/ereli-cb""><code>@​ereli-cb</code></a></li>; </ul>; <h3>Changed</h3>; <ul>; <li>You can now rename output fields - <a href=""https://github.com/schlitzered""><code>@​schlitzered</code></a></li>; </ul>; <h2>[2.0.0] - 2020-09-26</h2>; <h3>Added</h3>; <ul>; <li>New Changelog</li>; <li>Added timezone support to timestamps - <a href=""https://github.com/lalten""><code>@​l",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11467:1279,log,logger,1279,https://hail.is,https://github.com/hail-is/hail/pull/11467,1,['log'],['logger']
Testability,"; <li>make logging API more friendly to use (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/422"">#422</a>)</li>; <li>api consistency between HTTP and Gapic layers (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/375"">#375</a>)</li>; <li>support string-encoded json (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/339"">#339</a>)</li>; <li>Infer default resource in logger (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/315"">#315</a>)</li>; <li>support json logs (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/316"">#316</a>)</li>; <li>deprecate AppEngineHandler and ContainerEngineHandler (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/310"">#310</a>)</li>; </ul>; <h3>Features</h3>; <ul>; <li>add api key support (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/472"">#472</a>) (<a href=""https://github.com/googleapis/python-logging/commit/81ca8c616acb988be1fbecfc2a0b1a5b39280149"">81ca8c6</a>)</li>; <li>add json_fields extras argument for adding to jsonPayload (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/447"">#447</a>) (<a href=""https://github.com/googleapis/python-logging/commit/a760e02371a55d6262e42de9e0222fffa2c7192b"">a760e02</a>)</li>; <li>avoid importing grpc when explicitly disabled (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/416"">#416</a>) (<a href=""https://github.com/googleapis/python-logging/commit/818213e143d6a1941211a48e0b23069a426ac300"">818213e</a>)</li>; <li>Infer default resource in logger (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/315"">#315</a>) (<a href=""https://github.com/googleapis/python-logging/commit/c63250399fcd6e1317d341e98fab11095c443e5e"">c632503</a>)</li>; <li>make logging API more friendly to use (<a href=""htt",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11574:1434,log,logging,1434,https://hail.is,https://github.com/hail-is/hail/pull/11574,2,['log'],['logging']
Testability,"; <p><em>Sourced from <a href=""https://github.com/psf/black/blob/main/CHANGES.md"">black's changelog</a>.</em></p>; <blockquote>; <h2>22.1.0</h2>; <p>At long last, <em>Black</em> is no longer a beta product! This is the first non-beta release; and the first release covered by our new; <a href=""https://black.readthedocs.io/en/stable/the_black_code_style/index.html#stability-policy"">stability policy</a>.</p>; <h3>Highlights</h3>; <ul>; <li><strong>Remove Python 2 support</strong> (<a href=""https://github-redirect.dependabot.com/psf/black/issues/2740"">#2740</a>)</li>; <li>Introduce the <code>--preview</code> flag (<a href=""https://github-redirect.dependabot.com/psf/black/issues/2752"">#2752</a>)</li>; </ul>; <h3>Style</h3>; <ul>; <li>Deprecate <code>--experimental-string-processing</code> and move the functionality under; <code>--preview</code> (<a href=""https://github-redirect.dependabot.com/psf/black/issues/2789"">#2789</a>)</li>; <li>For stubs, one blank line between class attributes and methods is now kept if there's; at least one pre-existing blank line (<a href=""https://github-redirect.dependabot.com/psf/black/issues/2736"">#2736</a>)</li>; <li>Black now normalizes string prefix order (<a href=""https://github-redirect.dependabot.com/psf/black/issues/2297"">#2297</a>)</li>; <li>Remove spaces around power operators if both operands are simple (<a href=""https://github-redirect.dependabot.com/psf/black/issues/2726"">#2726</a>)</li>; <li>Work around bug that causes unstable formatting in some cases in the presence of the; magic trailing comma (<a href=""https://github-redirect.dependabot.com/psf/black/issues/2807"">#2807</a>)</li>; <li>Use parentheses for attribute access on decimal float and int literals (<a href=""https://github-redirect.dependabot.com/psf/black/issues/2799"">#2799</a>)</li>; <li>Don't add whitespace for attribute access on hexadecimal, binary, octal, and complex; literals (<a href=""https://github-redirect.dependabot.com/psf/black/issues/2799"">#2799</a>)</li>",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11468:8018,stub,stubs,8018,https://hail.is,https://github.com/hail-is/hail/pull/11468,1,['stub'],['stubs']
Testability,"; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/hagenw/sphinxcontrib-katex/blob/master/CHANGELOG.rst"">sphinxcontrib-katex's changelog</a>.</em></p>; <blockquote>; <h2>Version 0.8.6 (2021-05-27)</h2>; <ul>; <li>Fixed: allow to work with Sphinx&gt;=4.0.0</li>; </ul>; <h2>Version 0.8.5 (2021-05-26)</h2>; <ul>; <li>Fixed: remove extra space after inline math when using pre-rendering</li>; </ul>; <h2>Version 0.8.4 (2021-05-18)</h2>; <ul>; <li>Changed: increase top padding of equations by 2px</li>; </ul>; <h2>Version 0.8.3 (2021-05-18)</h2>; <ul>; <li>Fixed: building of documentation on RTD</li>; </ul>; <h2>Version 0.8.2 (2021-05-18)</h2>; <ul>; <li>Fixed: PyPI package version number</li>; </ul>; <h2>Version 0.8.1 (2021-05-18)</h2>; <ul>; <li>Fixed: PyPI package had wrong version number</li>; </ul>; <h2>Version 0.8.0 (2021-05-18)</h2>; <ul>; <li>Added: support for Python 3.9</li>; <li>Added: support for Sphinx&gt;=4.0.0</li>; <li>Added: tests for Windows and macOS</li>; <li>Changed: switch to KaTeX 0.13.11</li>; <li>Changed: switched CI tests from Travis to Github Actions</li>; <li>Changed: running sphinx will now fail in pre-render mode; if KaTeX fails</li>; <li>Removed: support for Python 2.7, 3.4, 3.5</li>; </ul>; <p>Version 0.7.2 (2021-04-28)</p>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/hagenw/sphinxcontrib-katex/commit/ce89a95b3b330a19ad4562b87aacc69ddb6742f2""><code>ce89a95</code></a> Release 0.8.6</li>; <li><a href=""https://github.com/hagenw/sphinxcontrib-katex/commit/c230f938a2d3b5913004d004613f67b69ebaf526""><code>c230f93</code></a> Allow sphinx&gt;=4.0.0 in setup.cfg (<a href=""https://github-redirect.dependabot.com/hagenw/sphinxcontrib-katex/issues/64"">#64</a>)</li>; <li><a href=""https://github.com/hagenw/sphinxcontrib-katex/commit/c6456022c32c540ffc5db6c684d8f8bf70a966f3""><code>c645602</code></a> Release 0.8.5</li>; <l",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11458:3088,test,tests,3088,https://hail.is,https://github.com/hail-is/hail/pull/11458,2,['test'],['tests']
Testability,"; <ul>; <li>Use pooling connection manager of Apache HttpClient instead of basic one. The basic one is not meant to be used by multiple threads. This fixes an issue that could cause an <code>IllegalStateException</code> with the message <code>Connection is still allocated</code>. Thanks to <a href=""https://github.com/dmarks2""><code>@​dmarks2</code></a> for spotting this.</li>; </ul>; <p>Maintenance:</p>; <ul>; <li>Update dependencies</li>; </ul>; <h2>5.2.0</h2>; <p>New features:</p>; <ul>; <li>Add <code>eachFile</code> method that adds an action to be applied to each source URL before it is downloaded. The action can be used to modify the filename of the target file.</li>; <li>Add <code>runAsync</code> method to download extension. This allows multiple files to be downloaded in parallel if the download extension is used. For normal download tasks, multiple files were downloaded in parallel already.</li>; </ul>; <h2>5.1.3</h2>; <p>Bug fixes:</p>; <ul>; <li>Initialize progress logger just before the download starts (see <a href=""https://github-redirect.dependabot.com/michel-kraemer/gradle-download-task/issues/243"">#243</a>)</li>; </ul>; <h2>5.1.2</h2>; <p>Bug fixes:</p>; <ul>; <li>Do not include default HTTP and HTTPS ports in <code>Host</code> header unless explicitly specified by the user</li>; </ul>; <h2>5.1.1</h2>; <p>Bug fixes:</p>; <ul>; <li>Correctly update cached sources</li>; </ul>; <p>Maintenance:</p>; <ul>; <li>Add integration tests for Gradle 7.5 and 7.5.1</li>; <li>Update dependencies</li>; </ul>; <h2>5.1.0</h2>; <p>New features:</p>; <ul>; <li>Add possibility to enable preemptive Basic authentication (through the new <code>preemptiveAuth</code> flag)</li>; <li>Warn if server does not send <code>WWW-Authenticate</code> header in 401 response</li>; <li>Log request and response headers in debug mode</li>; </ul>; <p>Maintenance:</p>; <ul>; <li>Add integration tests for Gradle 7.4.1 and 7.4.2</li>; <li>Update dependencies</li>; </ul>; <!-- raw HTML omitted --",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12345:2053,log,logger,2053,https://hail.is,https://github.com/hail-is/hail/pull/12345,1,['log'],['logger']
Testability,"; <ul>; <li>Use pooling connection manager of Apache HttpClient instead of basic one. The basic one is not meant to be used by multiple threads. This fixes an issue that could cause an <code>IllegalStateException</code> with the message <code>Connection is still allocated</code>. Thanks to <a href=""https://github.com/dmarks2""><code>@​dmarks2</code></a> for spotting this.</li>; </ul>; <p>Maintenance:</p>; <ul>; <li>Update dependencies</li>; </ul>; <h2>5.2.0</h2>; <p>New features:</p>; <ul>; <li>Add <code>eachFile</code> method that adds an action to be applied to each source URL before it is downloaded. The action can be used to modify the filename of the target file.</li>; <li>Add <code>runAsync</code> method to download extension. This allows multiple files to be downloaded in parallel if the download extension is used. For normal download tasks, multiple files were downloaded in parallel already.</li>; </ul>; <h2>5.1.3</h2>; <p>Bug fixes:</p>; <ul>; <li>Initialize progress logger just before the download starts (see <a href=""https://github-redirect.dependabot.com/michel-kraemer/gradle-download-task/issues/243"">#243</a>)</li>; </ul>; <h2>5.1.2</h2>; <p>Bug fixes:</p>; <ul>; <li>Do not include default HTTP and HTTPS ports in <code>Host</code> header unless explicitly specified by the user</li>; </ul>; <h2>5.1.1</h2>; <p>Bug fixes:</p>; <ul>; <li>Correctly update cached sources</li>; </ul>; <p>Maintenance:</p>; <ul>; <li>Add integration tests for Gradle 7.5 and 7.5.1</li>; <li>Update dependencies</li>; </ul>; <h2>5.1.0</h2>; <p>New features:</p>; <ul>; <li>Add possibility to enable preemptive Basic authentication (through the new <code>preemptiveAuth</code> flag)</li>; <li>Warn if server does not send <code>WWW-Authenticate</code> header in 401 response</li>; <li>Log request and response headers in debug mode</li>; </ul>; <p>Maintenance:</p>; <ul>; <li>Add integration tests for Gradle 7.4.1 and 7.4.2</li>; <li>Update dependencies</li>; </ul>; <h2>5.0.5</h2>; <p>Maint",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12332:1334,log,logger,1334,https://hail.is,https://github.com/hail-is/hail/pull/12332,1,['log'],['logger']
Testability,"; ```. That revealed the batch logs path:. ```; EXAMPLE BATCH_JOB_LOGS_PATH hail-az://haildevtest/test/batch/logs/we5a79QlczzdluUx8kT2Vh/batch/1/1/abc123/main/log; ```. In the [failing PR test job logs](https://ci.azure.hail.is/batches/3956877/jobs/152), I found the batch id:. ```; [2023-06-09 12:43:34] test/hail/methods/test_impex.py::BGENTests::test_import_bgen_row_fields; -------------------------------- live log call ---------------------------------; INFO batch_client.aioclient:aioclient.py:753 created batch 1148. INFO batch_client.aioclient:aioclient.py:770 updated batch 1148. FAILED; ```. I listed the job logs:. ```; (base) dking@wm28c-761 hail % az storage blob list --account-name haildevtest --container test --prefix batch/logs/we5a79QlczzdluUx8kT2Vh/batch/1148/ -o table; Name Blob Type Blob Tier Length Content Type Last Modified Snapshot; ----------------------------------------------------------------------------- ----------- ----------- -------- ------------------------ ------------------------- ----------; batch/logs/we5a79QlczzdluUx8kT2Vh/batch/1148/1/i4CoSh/main/log BlockBlob Hot 11724 application/octet-stream 2023-06-09T12:43:36+00:00; batch/logs/we5a79QlczzdluUx8kT2Vh/batch/1148/1/i4CoSh/main/resource_usage BlockBlob Hot 64 application/octet-stream 2023-06-09T12:43:36+00:00; batch/logs/we5a79QlczzdluUx8kT2Vh/batch/1148/1/i4CoSh/status.json BlockBlob Hot 1240 application/octet-stream 2023-06-09T12:43:36+00:00; batch/logs/we5a79QlczzdluUx8kT2Vh/batch/1148/2/31Owgv/main/log BlockBlob Hot 16626 application/octet-stream 2023-06-09T12:44:22+00:00; batch/logs/we5a79QlczzdluUx8kT2Vh/batch/1148/2/31Owgv/main/resource_usage BlockBlob Hot 680 application/octet-stream 2023-06-09T12:44:22+00:00; batch/logs/we5a79QlczzdluUx8kT2Vh/batch/1148/2/31Owgv/status.json BlockBlob Hot 4453 application/octet-stream 2023-06-09T12:44:22+00:00; batch/logs/we5a79QlczzdluUx8kT2Vh/batch/1148/bunch/dK3o5ZfXmYSkP5TA/specs BlockBlob Hot 1264 application/octet-stream 2023-06-09T12:43",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13160:1717,test,test,1717,https://hail.is,https://github.com/hail-is/hail/pull/13160,6,"['log', 'test']","['log', 'logs', 'test']"
Testability,"; ```; {; ""id"": 152339517,; ""node_id"": ""MDEwOlJlcG9zaXRvcnkxNTIzMzk1MTc="",; ""name"": ""ci-test-p4a9fxo7"",; ""full_name"": ""hail-ci-test/ci-test-p4a9fxo7"",; ""private"": false,; ""owner"": {; ""login"": ""hail-ci-test"",; ""id"": 43152710,; ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjQzMTUyNzEw"",; ""avatar_url"": ""https://avatars1.githubusercontent.com/u/43152710?v=4"",; ""gravatar_id"": """",; ""url"": ""https://api.github.com/users/hail-ci-test"",; ""html_url"": ""https://github.com/hail-ci-test"",; ""followers_url"": ""https://api.github.com/users/hail-ci-test/followers"",; ""following_url"": ""https://api.github.com/users/hail-ci-test/following{/other_user}"",; ""gists_url"": ""https://api.github.com/users/hail-ci-test/gists{/gist_id}"",; ""starred_url"": ""https://api.github.com/users/hail-ci-test/starred{/owner}{/repo}"",; ""subscriptions_url"": ""https://api.github.com/users/hail-ci-test/subscriptions"",; ""organizations_url"": ""https://api.github.com/users/hail-ci-test/orgs"",; ""repos_url"": ""https://api.github.com/users/hail-ci-test/repos"",; ""events_url"": ""https://api.github.com/users/hail-ci-test/events{/privacy}"",; ""received_events_url"": ""https://api.github.com/users/hail-ci-test/received_events"",; ""type"": ""Organization"",; ""site_admin"": false; },; ""html_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7"",; ""description"": null,; ""fork"": false,; ""url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7"",; ""forks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/forks"",; ""keys_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/keys{/key_id}"",; ""collaborators_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/collaborators{/collaborator}"",; ""teams_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/teams"",; ""hooks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/hooks"",; ""issue_events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/events{/number}"",; ""events_url"": ""https://api.github.com/repos/hail-ci-test/ci",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:1872,test,test,1872,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,1,['test'],['test']
Testability,"; apiVersion: v1; kind: Pod; metadata:; creationTimestamp: ""2019-04-02T19:50:21Z""; generateName: notebook2-worker-; labels:; app: notebook2-worker; hail.is/notebook2-instance: f4dc8213468f4799a3c7f94cb6969309; jupyter_token: 484b71e2c12d42c79b169b1991602d45; name: a_notebook; user_id: e7e7b9c420f0b0ff503ab6711355f27748522a8a37d9d22b2c8e0af4; uuid: 84873cf540014e128cce18f5481fb682; name: notebook2-worker-d4snh; namespace: default; resourceVersion: ""41241284""; selfLink: /api/v1/namespaces/default/pods/notebook2-worker-d4snh; uid: 8cb3c1c2-5580-11e9-bcd4-42010a8000c9; spec:; containers:; - command:; - jupyter; - notebook; - --NotebookApp.token=484b71e2c12d42c79b169b1991602d45; - --NotebookApp.base_url=/instance/84873cf540014e128cce18f5481fb682/; - --ip; - 0.0.0.0; - --no-browser; image: gcr.io/hail-vdc/hail-jupyter:2c2281012d0b2171837e99fe50c8656395c7adafd93b3821af6c0a605ffaea1e; imagePullPolicy: IfNotPresent; name: default; ports:; - containerPort: 8888; protocol: TCP; readinessProbe:; failureThreshold: 3; httpGet:; path: /instance/84873cf540014e128cce18f5481fb682/login; port: 8888; scheme: HTTP; periodSeconds: 5; successThreshold: 1; timeoutSeconds: 1; resources:; requests:; cpu: ""1.601""; memory: 1.601G; terminationMessagePath: /dev/termination-log; terminationMessagePolicy: File; volumeMounts:; - mountPath: /gsa-key-secret-name; name: gsa-key-secret-name; readOnly: true; - mountPath: /var/run/secrets/kubernetes.io/serviceaccount; name: user-kmpnh-token-hbdd4; readOnly: true; dnsPolicy: ClusterFirst; nodeName: gke-vdc-non-preemptible-pool-0106a51b-l48l; restartPolicy: Always; schedulerName: default-scheduler; securityContext: {}; serviceAccount: user-kmpnh; serviceAccountName: user-kmpnh; terminationGracePeriodSeconds: 30; tolerations:; - effect: NoExecute; key: node.kubernetes.io/not-ready; operator: Exists; tolerationSeconds: 300; - effect: NoExecute; key: node.kubernetes.io/unreachable; operator: Exists; tolerationSeconds: 300; volumes:; - name: gsa-key-secret-nam",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5753#issuecomment-479174611:2406,log,login,2406,https://hail.is,https://github.com/hail-is/hail/pull/5753#issuecomment-479174611,1,['log'],['login']
Testability,"; asc 4;;; 4: len 6; hex 00000025f0cd; asc % ;;; 5: len 7; hex 810000021b01cd; asc ;;; 6: len 8; hex 80000000001b09e0; asc ;;. Record lock, heap no 249 PHYSICAL RECORD: n_fields 7; compact format; info bits 0; 0: len 4; hex 74657374; asc test;;; 1: len 8; hex 64676f6c64737465; asc dgoldste;;; 2: len 4; hex 80000009; asc ;;; 3: len 4; hex 800000ad; asc ;;; 4: len 6; hex 00000025f0cd; asc % ;;; 5: len 7; hex 010000008c050d; asc ;;; 6: len 8; hex 8000000000471350; asc G P;;. Record lock, heap no 266 PHYSICAL RECORD: n_fields 7; compact format; info bits 0; 0: len 4; hex 74657374; asc test;;; 1: len 8; hex 64676f6c64737465; asc dgoldste;;; 2: len 4; hex 80000009; asc ;;; 3: len 4; hex 8000008b; asc ;;; 4: len 6; hex 00000025f0cd; asc % ;;; 5: len 7; hex 010000008c0bd1; asc ;;; 6: len 8; hex 80000000004c0108; asc L ;;. Record lock, heap no 273 PHYSICAL RECORD: n_fields 7; compact format; info bits 0; 0: len 4; hex 74657374; asc test;;; 1: len 8; hex 64676f6c64737465; asc dgoldste;;; 2: len 4; hex 8000000a; asc ;;; 3: len 4; hex 80000038; asc 8;;; 4: len 6; hex 00000025f0cd; asc % ;;; 5: len 7; hex 010000008c17e1; asc ;;; 6: len 8; hex 8000000000370dc0; asc 7 ;;. Record lock, heap no 284 PHYSICAL RECORD: n_fields 7; compact format; info bits 0; 0: len 4; hex 74657374; asc test;;; 1: len 8; hex 64676f6c64737465; asc dgoldste;;; 2: len 4; hex 80000009; asc ;;; 3: len 4; hex 800000bd; asc ;;; 4: len 6; hex 00000025f0cd; asc % ;;; 5: len 7; hex 010000008c204f; asc O;;; 6: len 8; hex 8000000000427f70; asc B p;;. Record lock, heap no 288 PHYSICAL RECORD: n_fields 7; compact format; info bits 0; 0: len 4; hex 74657374; asc test;;; 1: len 8; hex 64676f6c64737465; asc dgoldste;;; 2: len 4; hex 80000009; asc ;;; 3: len 4; hex 80000038; asc 8;;; 4: len 6; hex 00000025f0cd; asc % ;;; 5: len 7; hex 010000008c17a6; asc ;;; 6: len 8; hex 8000000000370dc0; asc 7 ;;. Record lock, heap no 316 PHYSICAL RECORD: n_fields 7; compact format; info bits 0; 0: len 4; hex 74657374; asc test;;; 1: l",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14380:5255,test,test,5255,https://hail.is,https://github.com/hail-is/hail/issues/14380,1,['test'],['test']
Testability,; at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:767); at org.testng.TestRunner.run(TestRunner.java:617); at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); at org.testng.SuiteRunner.run(SuiteRunner.java:254); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); at org.testng.TestNG.run(TestNG.java:1057); at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:122); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144); Caused by: java.lang.reflect.InvocationTargetException; at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.apache.spark.serializer.SerializationDebugger$ObjectStreamClassM,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/68#issuecomment-155304880:2263,test,testng,2263,https://hail.is,https://github.com/hail-is/hail/pull/68#issuecomment-155304880,1,['test'],['testng']
Testability,"; emitMissingness(elt.present, 1); emit(elt.get, 2); }; }; emitBit(false, 0) // continuation bit; pad() ; }. // leaves 0 trailing bits; emitStruct(value: SBaseStruct, _trailingBits: Int) {; var trailingBits = _trailingBits; for (field <- value) { // static loop; if (field.required) { // static if; emit(field, trailingBits); } else {; emitMissingness(field.present, trailingBits); emit(field, trailingBits + 1); }; trailingBits = 0; }; }. emitKeyStruct(value: SBaseStruct, length: Value[Int], sign: Value[Int], _trailingBits: Int) {; var trailingBits = _trailingBits; for ((field, i) <- value.enumerate) { // static loop; if (i < length) { // runtime if; emitBit(false, trailingBits); emitBit(true, trailingBits + 1) // continuation bits; if (field.required) { // static if; emit(field, trailingBits + 2); } else {; emitMissingness(field.present, trailingBits + 2); emit(field, trailingBits + 3); }; } else if (i == length) { // terminating continuation bits; if (sign < 0) {; emitBit(false, trailingBits); emitBit(false, trailingBits + 1); } else if (sign > 0) {; emitBit(true, trailingBits); emitBit(true, trailingBits + 1); } else {; assert(length == value.numFields); emitBit(false, trailingBits); emitBit(true, trailingBits + 1) // continuation bits; }; } else {; // past end of value, do nothing; }; trailingBits = 0; }; pad(); }; ```. # Examples. Each example table is in ascending order. `tarray<+tint>`:. | value | padding | cont | elt | padding | cont | elt | padding | cont |; | ---------- | --------- | ---- | --------- | --------- | ---- | --------- | --------- | ---- |; | `[]` | `0000000` | `0` | | | | | | |; | `[i1]` | `0000000` | `1` | `enc(i1)` | `0000000` | `0` | | | |; | `[i1, i2]` | `0000000` | `1` | `enc(i1)` | `0000000` | `1` | `enc(i2)` | `0000000` | `0` |. `tarray<tint>`:. | value | padding | cont | missing | elt | padding | cont | missing | elt | padding | cont |; | ---------- | -------- | ---- | ------- | --------- | -------- | ---- | ------- | --------- | --------",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14396:5914,assert,assert,5914,https://hail.is,https://github.com/hail-is/hail/issues/14396,1,['assert'],['assert']
Testability,"; fd300f29c00349d2a9d26835e35be2b142a3505f; ### What you did:; `make -C src/main/c prebuilt && ./gradlew testCppCodegen`; ### What went wrong (all error messages here, including the full java stack trace):; ```; testCppCodegen; :compileJava UP-TO-DATE; :generateBuildInfo; :nativeLib; tar -xzf libsimdpp-2.1.tar.gz; :compileScala UP-TO-DATE; :processResources UP-TO-DATE; :classes UP-TO-DATE; :compileTestJava UP-TO-DATE; :compileTestScala UP-TO-DATE; :processTestResources UP-TO-DATE; :testClasses UP-TO-DATE; :testCppCodegen; Running test: Test method testReadWrite(is.hail.annotations.AnnotationsSuite). Gradle suite > Gradle test > is.hail.annotations.AnnotationsSuite.testReadWrite FAILED; org.apache.spark.SparkException at AnnotationsSuite.scala:76; Caused by: java.lang.AssertionError; Running test: Test method testEmptyKeys(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testEmptyKeys FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testIntervalIterator(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testIntervalIterator FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testIntervalIteratorWorksWithGeneralEndpoints(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testIntervalIteratorWorksWithGeneralEndpoints FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testIterateFromUntil(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testIterateFromUntil FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testLowerBound(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testLowerBound FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testQueryByKey(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testQueryByKey FAILED; java.lang.AssertionError at IndexSuite.scal",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4718:1005,test,test,1005,https://hail.is,https://github.com/hail-is/hail/issues/4718,3,"['Test', 'test']","['Test', 'test', 'testIntervalIterator']"
Testability,"; file = p.read_input('gs://hail-jigold/random_file.txt'). # Import a set of input files as a resource group; input_bfile = p.read_input_group(bed='gs://hail-jigold/input.bed',; bim='gs://hail-jigold/input.bim',; fam='gs://hail-jigold/input.fam'). # Remove duplicate samples from a PLINK dataset; subset = p.new_task(); subset = (subset; .label('subset'); .docker('ubuntu'); .declare_resource_group(tmp1=bfile, ofile=bfile); .command(f'plink --bfile {input_bfile} --make-bed {subset.tmp1}'); .command(f""awk '{{ print $1, $2}}' {subset.tmp1.fam} | sort | uniq -c | awk '{{ if ($1 != 1) print $2, $3 }}' > {subset.tmp2}""); .command(f""plink --bed {input_bfile.bed} --bim {input_bfile.bim} --fam {input_bfile.fam} --remove {subset.tmp2} --make-bed {subset.ofile}"". )). # Run shapeit for each contig from 1-3 with the output from subset; for contig in [str(x) for x in range(1, 4)]:; shapeit = p.new_task(); shapeit = (shapeit; .label('shapeit'); .declare_resource_group(ofile={'haps': ""{root}.haps"", 'log': ""{root}.log""}); .command(f'shapeit --bed-file {subset.ofile} --chr {contig} --out {shapeit.ofile}')). # Merge the shapeit output files together; merger = p.new_task(); merger = (merger; .label('merge'); .command('cat {files} >> {ofile}'.format(files="" "".join([t.ofile.haps for t in p.select_tasks('shapeit')]),; ofile=merger.ofile))). # Write the result of the merger to a permanent location; p.write_output(merger.ofile, ""gs://jigold/final_output.txt""). # Execute the pipeline; p.run(dry_run=True); ```. ```bash; #!/bin/bash; set -ex. # change cd to tmp directory; cd /tmp//pipeline.jlQrNJZW/. # __TASK__0 read_input; cp gs://hail-jigold/random_file.txt nfVpMp4n. # __TASK__1 read_input; cp gs://hail-jigold/input.bed 33qZtfwg.bed. # __TASK__2 read_input; cp gs://hail-jigold/input.bim 33qZtfwg.bim. # __TASK__3 read_input; cp gs://hail-jigold/input.fam 33qZtfwg.fam. # __TASK__4 subset; __RESOURCE_GROUP__0=33qZtfwg; __RESOURCE_GROUP__1=yibUlBkL; __RESOURCE__6=yibUlBkL.fam; __RESOURCE__10=29aBQ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4937#issuecomment-453230282:1517,log,log,1517,https://hail.is,https://github.com/hail-is/hail/pull/4937#issuecomment-453230282,1,['log'],['log']
Testability,; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux FS.cpp -MG -M -MF build/FS.d -MT build/FS.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux Encoder.cpp -MG -M -MF build/Encoder.d -MT build/Encoder.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux Decoder.cpp -MG -M -MF build/Decoder.d -MT build/Decoder.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux cache-tests.cpp -MG -M -MF build/cache-tests.d -MT build/cache-tests.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux ApproximateQuantiles_test.cpp -MG -M -MF build/ApproximateQuantiles_test.d -MT build/ApproximateQuantiles_te; st.o; make[1]: Leaving directory `/mnt/tmp/hail/hail/src/main/c'; make[1]: Entering directory `/mnt/tmp/hail/hail/src/main/c'; g++ -o build/NativeBoot.o -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux -MD -MF build/NativeBoot.d -MT build/NativeBoot.o -c NativeBoot.cpp; g++ -fvisibility=default -rdynamic -shared -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux build/NativeBoot.o -o lib/linux-x86-,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221:9551,test,tests,9551,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221,1,['test'],['tests']
Testability,"; mt = mt.annotate_entries(x = hl.rand_unif(0, 3)); mt = mt.key_rows_by(mt.gene_set, mt.consequence_category); mt = mt.key_cols_by(mt.col_id); return mt. def permute_phenotypes(np_pheno, n_perms):. np_pheno[np_pheno == None] = 2; np_pheno = np_pheno.astype(int); np_pheno_mat = np.repeat(np_pheno, n_perms).reshape(np_pheno.size, n_perms); for i in range(np_pheno_mat.shape[1]):; np.random.shuffle(np_pheno_mat[:,i]). return(np_pheno_mat). def run_regressions_perm(mt, phenotypes, n_perms):. mt = mt.add_col_index(). init = True; for phenotype in phenotypes:. mt = mt.annotate_globals(; pheno_perm = permute_phenotypes(np.array(mt.phenotype_boolean[phenotype].collect()), n_perms)); mt = mt.annotate_globals(; pheno_perm = mt.pheno_perm.map(; lambda x: { hl.array([False, True, hl.null(hl.tbool)])[hl.int(x)] }; )); return mt. mt = make_fake_data(); res = run_regressions_perm(mt, phenotypes_BP, 100); res.show(); ```. error:. ```; java.lang.AssertionError: assertion failed; at scala.Predef$.assert(Predef.scala:156); at is.hail.expr.ir.agg.Extract$.extract(Extract.scala:331); at is.hail.expr.ir.agg.Extract$.is$hail$expr$ir$agg$Extract$$extract$1(Extract.scala:215); at is.hail.expr.ir.agg.Extract$$anonfun$extract$3.apply(Extract.scala:333); at is.hail.expr.ir.agg.Extract$$anonfun$extract$3.apply(Extract.scala:333); at is.hail.expr.ir.MapIR$$anonfun$apply$1.apply(MapIR.scala:8); at is.hail.expr.ir.MapIR$$anonfun$apply$1.apply(MapIR.scala:7); at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:234); at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:234); at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33); at scala.collection.mutable.WrappedArray.foreach(WrappedArray.scala:35); at scala.collection.TraversableLike$class.map(TraversableLike.scala:234); at scala.collection.AbstractTraversable.map(Traversable.scala:104); at is.hail.expr.ir.MapIR$.apply(MapIR.scala:7); at is.hail.expr.ir.agg.Extract$.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8325:1581,assert,assert,1581,https://hail.is,https://github.com/hail-is/hail/issues/8325,1,['assert'],['assert']
Testability,"; return __original_func(*args_, **kwargs_); hail/expr/expressions/expression_utils.py:161: in eval_timed; return Env.backend().execute(MakeTuple([ir]), timed=True)[0]; hail/backend/py4j_backend.py:82: in execute; raise e.maybe_user_error(ir) from None; hail/backend/py4j_backend.py:76: in execute; result_tuple = self._jbackend.executeEncode(jir, stream_codec, timed); ../../.venv/lib/python3.10/site-packages/py4j/java_gateway.py:1321: in __call__; return_value = get_return_value(; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . args = ('xro549', <py4j.clientserver.JavaClient object at 0x7fd0d58f6fb0>, 'o1', 'executeEncode'); kwargs = {}; pyspark = <module 'pyspark' from '/home/edmund/.local/src/hail/.venv/lib/python3.10/site-packages/pyspark/__init__.py'>; s = 'java.lang.AssertionError: assertion failed', tpl = JavaObject id=o550; deepest = 'AssertionError: assertion failed'; full = 'java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:208)\n\tat is.hail.expr.ir.BlockMa...lientServerConnection.run(ClientServerConnection.java:106)\n\tat java.base/java.lang.Thread.run(Thread.java:834)\n\n\n'; error_id = -1. def deco(*args, **kwargs):; import pyspark; try:; return f(*args, **kwargs); except py4j.protocol.Py4JJavaError as e:; s = e.java_exception.toString(); ; # py4j catches NoSuchElementExceptions to stop array iteration; if s.startswith('java.util.NoSuchElementException'):; raise; ; tpl = Env.jutils().handleForPython(e.java_exception); deepest, full, error_id = tpl._1(), tpl._2(), tpl._3(); > raise fatal_error_from_java_error_triplet(deepest, full, error_id) from None; E hail.utils.java.FatalError: AssertionError: assertion failed; E ; E Java stack trace:; E java.lang.AssertionError: assertion failed; E 	at scala.Predef$.assert(Predef.scala:208); E 	at is.hail.expr.ir.BlockMatrixMap.execute(BlockMatrixIR.scala:269); E 	at is.hail.expr.ir.BlockMatrixMap2.execute(BlockMatrixIR.scala:393); E 	at is.hail.expr.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12754#issuecomment-1456467229:2031,assert,assert,2031,https://hail.is,https://github.com/hail-is/hail/pull/12754#issuecomment-1456467229,1,['assert'],['assert']
Testability,"; usage: hailctl batch billing [-h] {list,get} ... Manage billing on the service managed by the Hail team. positional arguments:; {list,get}; list List billing projects; get Get a particular billing project's info. optional arguments:; -h, --help show this help message and exit; (base) wmecc-475:hail jigold$ hailctl batch billing fake; usage: hailctl batch billing [-h] {list,get} ...; hailctl batch billing: error: invalid choice: 'fake' (choose from 'list', 'get'); Unclosed client session; client_session: <aiohttp.client.ClientSession object at 0x111288208>; (base) wmecc-475:hail jigold$ hailctl batch billing list; - accrued_cost: 0.0; billing_project: ci; cost: null; limit: null; users: [ci]; - accrued_cost: 0.0012024241022130966; billing_project: test; cost: 0.0012024241022130966; limit: null; users: [test]; - accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]; - accrued_cost: 0.0; billing_project: test-zero-limit; cost: null; limit: 0.0; users: [test]. (base) wmecc-475:hail jigold$ hailctl batch billing get; usage: hailctl batch billing get [-h] [-o {yaml,json}] billing_project; hailctl batch billing get: error: the following arguments are required: billing_project; Unclosed client session; client_session: <aiohttp.client.ClientSession object at 0x10a635208>; (base) wmecc-475:hail jigold$ hailctl batch billing get test-tiny-limit; accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]. (base) wmecc-475:hail jigold$ hailctl batch billing get test-tiny-limit; accrued_cost: 9.62974093086927e-05; billing_project: test-tiny-limit; cost: 9.62974093086927e-05; limit: 1.0e-05; users: [test]. Unclosed client session; client_session: <aiohttp.client.ClientSession object at 0x10cfe2278>; Unclosed connector; connections: ['[(<aiohttp.client_proto.ResponseHandler object at 0x10d062c78>, 2.214990943)]']; connector: <aiohttp.conne",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9385#issuecomment-684964006:1156,test,test-zero-limit,1156,https://hail.is,https://github.com/hail-is/hail/pull/9385#issuecomment-684964006,1,['test'],['test-zero-limit']
Testability,"; {""id"": 9, ""state"": ""running"", ""complete"": false, ""closed"": 1, ""jobs"": [{""batch_id"": 9, ""job_id"": 1, ""state"": ""Running""}; ```. The batch is somehow in the state ""running"" and the only job is also in the; state ""Running"". Only two lines of code transition to the state 'Running'. They; both appear in the suffix of `Job._create_pod`:. ```python; pod, err = await app['k8s'].create_pod(body=pod_template); if err is not None:; if err.status == 409:; log.info(f'pod already exists for job {self.full_id}'); n_updated = await db.jobs.update_record(*self.id, compare_items={'state': self._state}, state='Running'); if n_updated == 0:; log.warning(f'changing the state for job {self.full_id} failed due to the expected state {self._state} not in db'); return; traceback.print_tb(err.__traceback__); log.info(f'pod creation failed for job {self.full_id} '; f'with the following error: {err}'); return. n_updated = await db.jobs.update_record(*self.id, compare_items={'state': self._state}, state='Running'); if n_updated == 0:; log.warning(f'changing the state for job {self.full_id} failed due to the expected state {self._state} not in db'); ```. For either of these database updates to succeed, the thread of control must have; thought the `_state` was `Cancelled` or we moved through some intermediate; state. We continue under the assumption that we went directly to `Running`. Who calls `_create_pod`?. - `start_pod`, but it checks that the state is in `Ready`; - `mark_complete`, but that's only if there's a ""next task"", this job has only; one task. That leaves `create_if_ready` and `mark_unscheduled`. `create_if_ready` is only; called by methods that are triggered when a parent with children finishes. We; have no parent-child relationships here. By process of elimination, `mark_unscheduled` must be the culprit. But how?; `mark_unscheduled` is called when a pod is evicted or by the k8s update loop if; there exists no pod. In those cases a message a special log is printed. That log; appears ",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6617:18173,log,log,18173,https://hail.is,https://github.com/hail-is/hail/issues/6617,1,['log'],['log']
Testability,; | test | test | 6 | 0 | 4063028160 |; | test | test | 6 | 1 | 189760 |; | test | test | 6 | 3 | 607168 |; | test | test | 6 | 4 | 749952 |; | test | test | 6 | 5 | 46912 |; | test | test | 6 | 6 | 158336 |; | test | test | 6 | 7 | 70336 |; | test | test | 6 | 8 | 167680 |; | test | test | 6 | 9 | 523136 |; | test | test | 6 | 10 | 40640 |; | test | test | 6 | 11 | 616448 |; | test | test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | ,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:1751,test,test,1751,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,; | test | test | 6 | 6 | 158336 |; | test | test | 6 | 7 | 70336 |; | test | test | 6 | 8 | 167680 |; | test | test | 6 | 9 | 523136 |; | test | test | 6 | 10 | 40640 |; | test | test | 6 | 11 | 616448 |; | test | test | 6 | 12 | 497024 |; | test | test | 6 | 14 | 87680 |; | test | test | 6 | 15 | 111104 |; | test | test | 6 | 16 | 120128 |; | test | test | 6 | 17 | 28736 |; | test | test | 6 | 19 | 42240 |; | test | test | 6 | 20 | 271232 |; | test | test | 6 | 21 | 88320 |; | test | test | 6 | 22 | 149760 |; | test | test | 6 | 23 | 47232 |; | test | test | 6 | 24 | 45888 |; | test | test | 6 | 25 | 41664 |; | test | test | 6 | 27 | 56704 |; | test | test | 6 | 28 | 36864 |; | test | test | 6 | 30 | 57792 |; | test | test | 6 | 31 | 62848 |; | test | test | 6 | 32 | 40320 |; | test | test | 6 | 33 | 61888 |; | test | test | 6 | 34 | 43520 |; | test | test | 6 | 35 | 219328 |; | test | test | 6 | 36 | 141760 |; | test | test | 6 | 38 | 157632 |; | test | test | 6 | 40 | 72064 |; | test | test | 6 | 41 | 317888 |; | test | test | 6 | 42 | 83648 |; | test | test | 6 | 43 | 123200 |; | test | test | 6 | 44 | 196032 |; | test | test | 6 | 45 | 62848 |; | test | test | 6 | 47 | 232768 |; | test | test | 6 | 48 | 937472 |; | test | test | 6 | 49 | 78272 |; | test | test | 6 | 50 | 88320 |; | test | test | 6 | 51 | 128320 |; | test | test | 6 | 52 | 36160 |; | test | test | 6 | 53 | 1268800 |; | test | test | 6 | 54 | 37568 |; | test | test | 6 | 55 | 53568 |; | test | test | 6 | 56 | 147520 |; | test | test | 6 | 57 | 102784 |; | test | test | 6 | 58 | 95360 |; | test | test | 6 | 60 | 156480 |; | test | test | 6 | 61 | 54976 |; | test | test | 6 | 62 | 123072 |; | test | test | 6 | 63 | 88128 |; | test | test | 6 | 64 | 202112 |; | test | test | 6 | 65 | 54848 |; | test | test | 6 | 67 | 715456 |; | test | test | 6 | 69 | 51264 |; | test | test | 6 | 70 | 127296 |; | test | test | 6 | 71 | 95040 |; | test | test | 6 | 72 | 72320 |; | test | test | 6 | 73 | 81856 |; | te,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:1924,test,test,1924,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,"; }; !98 = ToArray(!s3); InsertFields %g4 (__cols: !98); }; !ht6 = TableMapRows(!ht5) { (%g5, %row3) =>; !99 = GetField(%row3) [locus] ; !100 = GetField(%row3) [alleles] ; !101 = GetField(%row3) [filters] ; !102 = GetField(%row3) [a_index] ; !103 = GetField(%row3) [was_split] ; !104 = GetField(%row3) [variant_qc] ; !105 = GetField(%row3) [info] ; !106 = GetField(%row3) [`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`]; MakeStruct(locus: !99, alleles: !100, filters: !101, a_index: !102, was_split: !103, variant_qc: !104, info: !105, the entries! [877f12a8827e18f61222c6c8c5fb04a8]: !106); }; TableWrite(!ht6) [""{\""writer\"":{\""path\"":\""gs://aou_analysis/250k/data/utils/aou_mt_sample_qc_250k.ht\"",\""overwrite\"":false,\""stageLocally\"":false,\""codecSpecJSONStr\"":null,\""partitions\"":null,\""partitionsTypeStr\"":null},\""colsFieldName\"":\""__cols\"",\""entriesFieldName\"":\""the entries! [877f12a8827e18f61222c6c8c5fb04a8]\"",\""colKey\"":[\""s\""]}""]; ```; </details>. <details>; <summary>The first CDAIR logged after the above TableIR</summary>. ```; 2023-10-13 02:14:47.815 : INFO: after LowerToDistributedArray: IR size 391: . !1 = MakeStruct(); !2 = WriteMetadata(!1) [""{\""path\"":\""gs://aou_analysis/250k/data/utils/aou_mt_sample_qc_250k.ht\"",\""overwrite\"":false,\""refs\"":{\""rowType\"":\""Struct{locus:Locus(GRCh38),alleles:Array[String],filters:Set[String],a_index:Int32,was_split:Boolean,variant_qc:Struct{gq_stats:Struct{mean:Float64,stdev:Float64,min:Float64,max:Float64},call_rate:Float64,n_called:Int64,n_not_called:Int64,n_filtered:Int64,n_het:Int64,n_non_ref:Int64,het_freq_hwe:Float64,p_value_hwe:Float64,p_value_excess_het:Float64},info:Struct{AC:Array[Int32],AF:Array[Float64],AN:Int32,homozygote_count:Array[Int32]},`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{GT:Call,GQ:Int32,RGQ:Int32,FT:String,AD:Array[Int32]}]}\"",\""key\"":[\""locus\"",\""alleles\""],\""globalType\"":\""Struct{__cols:Array[Struct{s:String,mt_sample_qc:Struct{gq_stats:Struct{mean:Float64,stdev:Float64,min:Floa",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13809:15142,log,logged,15142,https://hail.is,https://github.com/hail-is/hail/issues/13809,1,['log'],['logged']
Testability,";5;45:*.ogg=38;5;45:*.ra=38;5;45:*.wav=38;5;45:*.axa=38;5;45:*.oga=38;5;45:*.spx=38;5;45:*.xspf=38;5;45:; MAIL=/var/spool/mail/hadoop; PATH=/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/aws/puppet/bin/; AWS_DEFAULT_REGION=ap-southeast-1; PWD=/home/hadoop; JAVA_HOME=/etc/alternatives/jre; LANG=en_US.UTF-8; HISTCONTROL=ignoredups; SHLVL=1; HOME=/home/hadoop; LOGNAME=hadoop; QTLIB=/usr/lib64/qt-3.3/lib; SSH_CONNECTION=103.37.196.84 57805 192.168.96.172 22; LESSOPEN=||/usr/bin/lesspipe.sh %s; XDG_RUNTIME_DIR=/run/user/995; _=/usr/bin/env; ```; </p>; </details> . ```sh ; /usr/bin/which: no scala in (/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/aws/puppet/bin/); ```. ## With Hail (after hail build). ```sh; -rwxr-xr-x 1 root root 140 Jul 19 15:54 /usr/bin/spark-shell; /usr/bin/spark-shell; -rwxr-xr-x 1 root root 140 Jul 19 15:54 /usr/bin/spark-shell; SLF4J: No SLF4J providers were found.; SLF4J: Defaulting to no-operation (NOP) logger implementation; SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.; SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.; SLF4J: Ignoring binding found at [jar:file:/usr/lib/spark/jars/log4j-slf4j-impl-2.17.2.jar!/org/slf4j/impl/StaticLoggerBinder.class]; SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.; Welcome to; ____ __; / __/__ ___ _____/ /__; _\ \/ _ \/ _ `/ __/ '_/; /___/ .__/\_,_/_/ /_/\_\ version 3.3.2; /_/; ; Using Scala version 2.12.13, OpenJDK 64-Bit Server VM, 11.0.21; Branch HEAD; Compiled by user liangchi on 2023-02-11T02:24:04Z; Revision 5103e00c4ce5fcc4264ca9c4df12295d42557af6; Url https://github.com/apache/spark; Type --help for more information.; ```. ```sh; -rwxr-xr-x 1 root root 141 Jul 19 15:54 /usr/bin/spark-submit; /usr/bin/spark-submit; -rwxr-xr-x 1 root root 141 Jul 19 15:54 /usr/bin/spark-submit; SLF4J: No SLF4J providers were found.; SLF4J: Defaulting to no-oper",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1772153045:4176,log,logger,4176,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1772153045,1,['log'],['logger']
Testability,;; +--------------+----------------------------------+------+-------------+-------+------------+; | billing_date | billing_project | user | resource_id | token | usage |; +--------------+----------------------------------+------+-------------+-------+------------+; | 2023-07-13 | __testproject_iizhz61z7543_FUitX | test | 6 | 0 | 1817536 |; | 2023-07-13 | __testproject_iizhz61z7543_uvxWn | test | 6 | 0 | 11331136 |; | 2023-07-13 | ci | ci | 6 | 0 | 79640784 |; | 2023-07-13 | test | test | 6 | 0 | 4142226688 |; | 2023-07-13 | test | test | 6 | 1 | 108608 |; | 2023-07-13 | test | test | 6 | 2 | 80576 |; | 2023-07-13 | test | test | 6 | 5 | 35648 |; | 2023-07-13 | test | test | 6 | 7 | 578240 |; | 2023-07-13 | test | test | 6 | 9 | 33024 |; | 2023-07-13 | test | test | 6 | 10 | 33472 |; | 2023-07-13 | test | test | 6 | 11 | 110464 |; | 2023-07-13 | test | test | 6 | 14 | 47744 |; | 2023-07-13 | test | test | 6 | 15 | 45440 |; | 2023-07-13 | test | test | 6 | 16 | 79616 |; | 2023-07-13 | test | test | 6 | 17 | 604928 |; | 2023-07-13 | test | test | 6 | 18 | 78016 |; | 2023-07-13 | test | test | 6 | 19 | 87040 |; | 2023-07-13 | test | test | 6 | 20 | 89792 |; | 2023-07-13 | test | test | 6 | 21 | 188736 |; | 2023-07-13 | test | test | 6 | 22 | 75648 |; | 2023-07-13 | test | test | 6 | 24 | 96128 |; | 2023-07-13 | test | test | 6 | 25 | 2143680 |; | 2023-07-13 | test | test | 6 | 26 | 33728 |; | 2023-07-13 | test | test | 6 | 27 | 70400 |; | 2023-07-13 | test | test | 6 | 28 | 93312 |; | 2023-07-13 | test | test | 6 | 31 | 53696 |; | 2023-07-13 | test | test | 6 | 32 | 70976 |; | 2023-07-13 | test | test | 6 | 33 | 57280 |; | 2023-07-13 | test | test | 6 | 34 | 99712 |; | 2023-07-13 | test | test | 6 | 35 | 87360 |; | 2023-07-13 | test | test | 6 | 36 | 144384 |; | 2023-07-13 | test | test | 6 | 37 | 703616 |; | 2023-07-13 | test | test | 6 | 39 | 344832 |; | 2023-07-13 | test | test | 6 | 42 | 129152 |; | 2023-07-13 | test | test | 6 | 44 | 56000 |; | 2023-07-13 | test | t,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785:8371,test,test,8371,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1634765785,1,['test'],['test']
Testability,"</a>, <a href=""https://github.com/mattcary""><code>@​mattcary</code></a>)</li>; <li>Client-go impersonation config can specify a UID to pass impersonated uid information through in requests. (<a href=""https://github-redirect.dependabot.com/kubernetes/kubernetes/pull/104483"">kubernetes/kubernetes#104483</a>, <a href=""https://github.com/margocrawf""><code>@​margocrawf</code></a>)</li>; <li>Create HPA v2 from v2beta2 with some fields changed. (<a href=""https://github-redirect.dependabot.com/kubernetes/kubernetes/pull/102534"">kubernetes/kubernetes#102534</a>, <a href=""https://github.com/wangyysde""><code>@​wangyysde</code></a>) [SIG API Machinery, Apps, Auth, Autoscaling and Testing]</li>; <li>Ephemeral containers graduated to beta and are now available by default. (<a href=""https://github-redirect.dependabot.com/kubernetes/kubernetes/pull/105405"">kubernetes/kubernetes#105405</a>, <a href=""https://github.com/verb""><code>@​verb</code></a>)</li>; <li>Fix kube-proxy regression on UDP services because the logic to detect stale connections was not considering if the endpoint was ready. (<a href=""https://github-redirect.dependabot.com/kubernetes/kubernetes/pull/106163"">kubernetes/kubernetes#106163</a>, <a href=""https://github.com/aojea""><code>@​aojea</code></a>) [SIG API Machinery, Apps, Architecture, Auth, Autoscaling, CLI, Cloud Provider, Contributor Experience, Instrumentation, Network, Node, Release, Scalability, Scheduling, Storage, Testing and Windows]</li>; <li>If a conflict occurs when creating an object with <code>generateName</code>, the server now returns an &quot;AlreadyExists&quot; error with a retry option. (<a href=""https://github-redirect.dependabot.com/kubernetes/kubernetes/pull/104699"">kubernetes/kubernetes#104699</a>, <a href=""https://github.com/vincepri""><code>@​vincepri</code></a>)</li>; <li>Implement support for recovering from volume expansion failures (<a href=""https://github-redirect.dependabot.com/kubernetes/kubernetes/pull/106154"">kubernetes/kubernetes#",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11957:3738,log,logic,3738,https://hail.is,https://github.com/hail-is/hail/pull/11957,1,['log'],['logic']
Testability,"</code></a> [SPARK-40705][SQL] Handle case of using mutable array when converting Row to ...</li>; <li><a href=""https://github.com/apache/spark/commit/9f8eef8bc7fbb5f9a0fe7a4f5c99da0b59b74c07""><code>9f8eef8</code></a> [SPARK-40682][SQL][TESTS] Set <code>spark.driver.maxResultSize</code> to 3g in `SqlBased...</li>; <li><a href=""https://github.com/apache/spark/commit/5a23f62806109425869752de9be1b4ab012f9af8""><code>5a23f62</code></a> Preparing development version 3.3.2-SNAPSHOT</li>; <li><a href=""https://github.com/apache/spark/commit/7c465bc3154cdd0d578f837c9b82e4289caf0b14""><code>7c465bc</code></a> Preparing Spark release v3.3.1-rc3</li>; <li><a href=""https://github.com/apache/spark/commit/5fe895a65a4a9d65f81d43af473b5e3a855ed8c8""><code>5fe895a</code></a> [SPARK-40660][SQL][3.3] Switch to XORShiftRandom to distribute elements</li>; <li><a href=""https://github.com/apache/spark/commit/5dc9ba0d22741173bd122afb387c54d7ca4bfb6d""><code>5dc9ba0</code></a> [SPARK-40669][SQL][TESTS] Parameterize <code>rowsNum</code> in <code>InMemoryColumnarBenchmark</code></li>; <li>Additional commits viewable in <a href=""https://github.com/apache/spark/compare/v3.1.3...v3.3.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pyspark&package-manager=pip&previous-version=3.1.3&new-version=3.3.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreat",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12455:1965,TEST,TESTS,1965,https://hail.is,https://github.com/hail-is/hail/pull/12455,1,['TEST'],['TESTS']
Testability,"</code></a> in <a href=""https://redirect.github.com/samtools/htsjdk/pull/1677"">samtools/htsjdk#1677</a></li>; </ul>; <p><strong>Full Changelog</strong>: <a href=""https://github.com/samtools/htsjdk/compare/4.0.0...4.0.1"">https://github.com/samtools/htsjdk/compare/4.0.0...4.0.1</a></p>; <h2>4.0.0</h2>; <h2>Moving forward</h2>; <p>This is the first release to be built exclusively for java 17. Java 17 features are now allowed in our source code and we will no longer support older versions of java. We've also updated dependencies to fix security issues. There are several small bug fixes as well.</p>; <h3>JSON dependency:</h3>; <p>We've dropped the MJSON library which was no longer being updated and replaced it with a similarly small json library from org.json</p>; <h2>What's Changed</h2>; <ul>; <li>Migrate to Java 17 by <a href=""https://github.com/lbergelson""><code>@​lbergelson</code></a> in <a href=""https://redirect.github.com/samtools/htsjdk/pull/1649"">samtools/htsjdk#1649</a></li>; <li>Remove low-value progress logging message by <a href=""https://github.com/nh13""><code>@​nh13</code></a> in <a href=""https://redirect.github.com/samtools/htsjdk/pull/1659"">samtools/htsjdk#1659</a></li>; <li>removed redundant code by <a href=""https://github.com/KleinSamuel""><code>@​KleinSamuel</code></a> in <a href=""https://redirect.github.com/samtools/htsjdk/pull/1664"">samtools/htsjdk#1664</a></li>; <li>Update snappy-java and migrate mjson to org.json to address CVEs by <a href=""https://github.com/bbimber""><code>@​bbimber</code></a> in <a href=""https://redirect.github.com/samtools/htsjdk/pull/1670"">samtools/htsjdk#1670</a></li>; <li>Remove incorrect zero-length-B-array checks <a href=""https://github.com/gileshall""><code>@​gileshall</code></a> and <a href=""https://github.com/jmarshall""><code>@​jmarshall</code></a> in <a href=""https://redirect.github.com/samtools/htsjdk/pull/1674"">samtools/htsjdk#1674</a></li>; <li>add SINGULAR platform to read group by <a href=""https://github.com/omicsorama",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13576:2035,log,logging,2035,https://hail.is,https://github.com/hail-is/hail/pull/13576,1,['log'],['logging']
Testability,"</h3>. #### Changes included in this PR. - Changes to the following files to upgrade the vulnerable dependencies to a fixed version:; - batch/pinned-requirements.txt. #### Vulnerabilities that will be fixed. ##### By pinning:; Severity | Priority Score (*) | Issue | Upgrade | Breaking Change | Exploit Maturity; :-------------------------:|-------------------------|:-------------------------|:-------------------------|:-------------------------|:-------------------------; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | **658/1000** <br/> **Why?** Proof of Concept exploit, Recently disclosed, Has a fix available, CVSS 5.3 | HTTP Request Smuggling <br/>[SNYK-PYTHON-AIOHTTP-5798483](https://snyk.io/vuln/SNYK-PYTHON-AIOHTTP-5798483) | `aiohttp:` <br> `3.8.4 -> 3.8.5` <br> | No | Proof of Concept . (*) Note that the real score may have changed since the PR was raised. Some vulnerabilities couldn't be fully fixed and so Snyk will still find them when the project is tested again. This may be because the vulnerability existed within more than one direct dependency, but not all of the affected dependencies could be upgraded. Check the changes in this PR to ensure they won't cause issues with your project. ------------. **Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open fix PRs.*. For more information: <img src=""https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiJmZmEwNjUyZi1hMzc2LTQ0NmQtYWJjNC04NmJhMzUwNmY3MzMiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6ImZmYTA2NTJmLWEzNzYtNDQ2ZC1hYmM0LTg2YmEzNTA2ZjczMyJ9fQ=="" width=""0"" height=""0""/>; 🧐 [View latest project report](https://app.snyk.io/org/danking/project/cbac91bd-aa95-4900-9a06-97404b268d6e?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr). 🛠 [Adjust project settings](https://app.snyk",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13285:1245,test,tested,1245,https://hail.is,https://github.com/hail-is/hail/pull/13285,1,['test'],['tested']
Testability,"</li>; <li><a href=""https://github.com/jupyter/jupyter_client/commit/ca4cb2d6a4b95a6925de85a47b323d2235032c74""><code>ca4cb2d</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/jupyter/jupyter_client/issues/804"">#804</a> from blink1073/fix-docs-build</li>; <li><a href=""https://github.com/jupyter/jupyter_client/commit/2c545599e1da419c096abffcd81f922fb709e239""><code>2c54559</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/jupyter/jupyter_client/issues/803"">#803</a> from ccordoba12/fix-threaded-client</li>; <li><a href=""https://github.com/jupyter/jupyter_client/commit/30ce7539778e2a25ff5e6eba4ccb6c08b8a0fe20""><code>30ce753</code></a> fix sphinx 5.0 support</li>; <li><a href=""https://github.com/jupyter/jupyter_client/commit/a2e90574645052320de861bb84ba1752e25ef2dd""><code>a2e9057</code></a> ignore type error</li>; <li><a href=""https://github.com/jupyter/jupyter_client/commit/3c6fc38e8dda754aba4a1217733eb1a0146b4c57""><code>3c6fc38</code></a> Run qtconsole test suite as a another downstream project</li>; <li><a href=""https://github.com/jupyter/jupyter_client/commit/dcb45960b337fb089e04b0c3dde880e8f0f10ae5""><code>dcb4596</code></a> Revert changes related to _handle_recv in ThreadedZMQSocketChannel</li>; <li><a href=""https://github.com/jupyter/jupyter_client/commit/01bfdd18c2eb8ea34cbb9915cb2bc7d9806f81a4""><code>01bfdd1</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/jupyter/jupyter_client/issues/799"">#799</a> from jupyter/pre-commit-ci-update-config</li>; <li>Additional commits viewable in <a href=""https://github.com/jupyter/jupyter_client/compare/v7.3.1...v7.3.4"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=jupyter-client&package-manager=pip&previous-version=7.3.1&new-version=7.3.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-s",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12110:9164,test,test,9164,https://hail.is,https://github.com/hail-is/hail/pull/12110,1,['test'],['test']
Testability,"</p>; <blockquote>; <h2>Release v0.9.0</h2>; <ul>; <li>Added: local KaTeX server; to dramatically speed up pre-rendering</li>; <li>Added: <code>katex.min.js</code> and <code>auto-render.min.js</code>; are now included in the Python package</li>; <li>Added: support for Python 3.10</li>; <li>Changed: use KaTeX 0.16.0</li>; <li>Removed: support for Python 3.6</li>; </ul>; <h2>Release v0.8.6</h2>; <ul>; <li>Fixed: allow to work with Sphinx&gt;=4.0.0</li>; </ul>; <h2>Release v0.8.5</h2>; <ul>; <li>Fixed: remove extra space after inline math when using pre-rendering</li>; </ul>; <h2>Release v0.8.4</h2>; <ul>; <li>Changed: increase top padding of equations by 2px</li>; </ul>; <h2>Release v0.8.3</h2>; <ul>; <li>Fixed: building of documentation on RTD</li>; </ul>; <h2>Release v0.8.2</h2>; <ul>; <li>Fixed: PyPI package version number</li>; </ul>; <h2>Release v0.8.0</h2>; <ul>; <li>Added: support for Python 3.9</li>; <li>Added: support for Sphinx&gt;=4.0.0</li>; <li>Added: tests for Windows and macOS</li>; <li>Changed: switch to KaTeX 0.13.11</li>; <li>Changed: switched CI tests from Travis to Github Actions</li>; <li>Changed: running sphinx will now fail in pre-render mode; if KaTeX fails</li>; <li>Removed: support for Python 2.7, 3.4, 3.5</li>; </ul>; <h2>sphinxcontrib-katex 0.7.2</h2>; <ul>; <li>Fixed: Sphinx&gt;=4.0.0 is not supported at the moment</li>; </ul>; <h2>sphinxcontrib-katex 0.7.1</h2>; <ul>; <li>Fixed: label of fraction example in docs</li>; </ul>; <h2>sphinxcontrib-katex 0.7.0</h2>; <ul>; <li>Added: fraction example to docs</li>; <li>Changed: switch to KaTeX 0.12.0</li>; <li>Changed: add small top and bottom padding to equations</li>; </ul>; <h2>sphinxcontrib-katex 0.6.1</h2>; <p><a href=""https://pypi.org/project/sphinxcontrib-katex/0.6.1/"">https://pypi.org/project/sphinxcontrib-katex/0.6.1/</a></p>; <ul>; <li>Fixed: run katex under Windows</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12241:1244,test,tests,1244,https://hail.is,https://github.com/hail-is/hail/pull/12241,1,['test'],['tests']
Testability,"</p>; <ul>; <li>Binary wheels provided on PyPi for <code>aarch64</code> Linux systems and macOS; native silicon where supported by Python when using <code>pypa/cibuildwheel</code>.</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/GrahamDumpleton/wrapt/commit/f2f1a680113d500f525de78da91ae19235efef16""><code>f2f1a68</code></a> Merge branch 'release/1.14.1'</li>; <li><a href=""https://github.com/GrahamDumpleton/wrapt/commit/97b72d49a8cda771c6006571486530ca84f3a834""><code>97b72d4</code></a> Update version of cibuildwheel for recent Python versions.</li>; <li><a href=""https://github.com/GrahamDumpleton/wrapt/commit/337072730beddd653f19c8b1a1157ecbb9d62790""><code>3370727</code></a> Only test Python 3.10 on aarch64 linux due to unreliability of GitHub runners...</li>; <li><a href=""https://github.com/GrahamDumpleton/wrapt/commit/982ddecf52013ce9bbdf8b48b76ae054844ba31b""><code>982ddec</code></a> Python 3.6 no longer available on aarch64 linux for testing.</li>; <li><a href=""https://github.com/GrahamDumpleton/wrapt/commit/240fea86df0357f3642db040f912031e4ecdfcb1""><code>240fea8</code></a> Update copyright notice year.</li>; <li><a href=""https://github.com/GrahamDumpleton/wrapt/commit/9668bbd7c7314d81b7cf8ce4293d04212ae1edee""><code>9668bbd</code></a> Update version in preparation for 1.14.1 release.</li>; <li><a href=""https://github.com/GrahamDumpleton/wrapt/commit/c86a4d37fa61494957153f76b1d6bbdacfd83205""><code>c86a4d3</code></a> Add classifier for Python 3.11.</li>; <li><a href=""https://github.com/GrahamDumpleton/wrapt/commit/07239ac21a68ced86860cf3bb52ee0c60faf0915""><code>07239ac</code></a> Document fix for module importers using deprecated APIs.</li>; <li><a href=""https://github.com/GrahamDumpleton/wrapt/commit/df0e62c2740143cceb6cafea4c306dae1c559ef8""><code>df0e62c</code></a> Deal with module importers that don't implement newer API.</li>; <li><a href=""https://github.com/GrahamDumpleton/wrapt/commit/726275923",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12102:2940,test,testing,2940,https://hail.is,https://github.com/hail-is/hail/pull/12102,1,['test'],['testing']
Testability,"<a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2834"">cbeust/testng#2834</a></li>; <li>Avoid Compilation errors on Semeru JDK flavour. by <a href=""https://github.com/krmahadevan""><code>@​krmahadevan</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2835"">cbeust/testng#2835</a></li>; <li>Add addition yml extension by <a href=""https://github.com/speedythesnail""><code>@​speedythesnail</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2837"">cbeust/testng#2837</a></li>; <li>Support getting dependencies info for a test by <a href=""https://github.com/krmahadevan""><code>@​krmahadevan</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2839"">cbeust/testng#2839</a></li>; <li>Honour regex in dependsOnMethods by <a href=""https://github.com/krmahadevan""><code>@​krmahadevan</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2838"">cbeust/testng#2838</a></li>; <li>Ensure All tests run all the time by <a href=""https://github.com/krmahadevan""><code>@​krmahadevan</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2842"">cbeust/testng#2842</a></li>; <li>Deprecate support for running Spock Tests by <a href=""https://github.com/krmahadevan""><code>@​krmahadevan</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2846"">cbeust/testng#2846</a></li>; <li>Streamline dependsOnMethods for configurations by <a href=""https://github.com/krmahadevan""><code>@​krmahadevan</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2845"">cbeust/testng#2845</a></li>; <li>Ensure ITestContext available for JUnit4 tests by <a href=""https://github.com/krmahadevan""><code>@​krmahadevan</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2848"">cbeust/testng#2848</a></li>; <li>Deprecate support for running JUnit tests by <a href=""https://github.com/krmahadevan""><code>@​",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12665:6849,test,testng,6849,https://hail.is,https://github.com/hail-is/hail/pull/12665,3,['test'],"['testng', 'tests']"
Testability,"<a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1233"">#1233</a> &lt;- <a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1231"">#1231</a>)</li>; </ul>; <h2>tqdm v4.62.1 stable</h2>; <ul>; <li><code>contrib.logging</code>: inherit existing handler output stream (<a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1191"">#1191</a>)</li>; <li>fix <code>PermissionError</code> by using <code>weakref</code> in <code>DisableOnWriteError</code> (<a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1207"">#1207</a>)</li>; <li>fix <code>contrib.telegram</code> creation rate limit handling (<a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1223"">#1223</a>, <a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1221"">#1221</a> &lt;- <a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1220"">#1220</a>, <a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1076"">#1076</a>)</li>; <li>tests: fix py27 <code>keras</code> dependencies (<a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1222"">#1222</a>)</li>; <li>misc tidy: use relative imports (<a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1222"">#1222</a>)</li>; <li>minor documentation updates (<a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1222"">#1222</a>)</li>; </ul>; <h2>tqdm v4.62.0 stable</h2>; <ul>; <li><code>asyncio.gather</code> API consistency with stdlib (<a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1212"">#1212</a>)</li>; <li>fix shutdown exception (<a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1209"">#1209</a> &lt;- <a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1198"">#1198</a>)</li>; <li>misc build framework updates (<a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1209"">#1209</a>)</li>; <li>add <a href=""https://github.com/sponsors/tqdm/dashboard/tiers?frequency=one-time"">GH Sponsors</a> &amp; <a href=""",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11587:3115,test,tests,3115,https://hail.is,https://github.com/hail-is/hail/pull/11587,1,['test'],['tests']
Testability,"<a href=""https://github.com/docker/docker-py/releases"">docker's releases</a>.</em></p>; <blockquote>; <h2>6.0.1</h2>; <h2>🐛 Bugfixes</h2>; <ul>; <li>Fix for <code>The pipe has been ended</code> errors on Windows (<a href=""https://github-redirect.dependabot.com/docker/docker-py/issues/3056"">#3056</a>)</li>; <li>Support floats for timestamps in Docker logs (<code>since</code> / <code>until</code>) (<a href=""https://github-redirect.dependabot.com/docker/docker-py/issues/3031"">#3031</a>)</li>; </ul>; <h2>What's Changed</h2>; <ul>; <li>docs: install package in ReadTheDocs build by <a href=""https://github.com/milas""><code>@​milas</code></a> in <a href=""https://github-redirect.dependabot.com/docker/docker-py/pull/3032"">docker/docker-py#3032</a></li>; <li>Use latest stable syntax for Dockerfiles by <a href=""https://github.com/thaJeztah""><code>@​thaJeztah</code></a> in <a href=""https://github-redirect.dependabot.com/docker/docker-py/pull/3035"">docker/docker-py#3035</a></li>; <li>feat: add support for floats to docker logs params since / until sinc… by <a href=""https://github.com/ArchiMoebius""><code>@​ArchiMoebius</code></a> in <a href=""https://github-redirect.dependabot.com/docker/docker-py/pull/3031"">docker/docker-py#3031</a></li>; <li>Change prune test to use anonymous volumes by <a href=""https://github.com/cpuguy83""><code>@​cpuguy83</code></a> in <a href=""https://github-redirect.dependabot.com/docker/docker-py/pull/3051"">docker/docker-py#3051</a></li>; <li>socket: handle npipe close by <a href=""https://github.com/nicks""><code>@​nicks</code></a> in <a href=""https://github-redirect.dependabot.com/docker/docker-py/pull/3056"">docker/docker-py#3056</a></li>; </ul>; <h2>New Contributors</h2>; <ul>; <li><a href=""https://github.com/ArchiMoebius""><code>@​ArchiMoebius</code></a> made their first contribution in <a href=""https://github-redirect.dependabot.com/docker/docker-py/pull/3031"">docker/docker-py#3031</a></li>; <li><a href=""https://github.com/nicks""><code>@​nicks</code></a> m",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12475:1163,log,logs,1163,https://hail.is,https://github.com/hail-is/hail/pull/12475,1,['log'],['logs']
Testability,"<a href=""https://github.com/pallets/werkzeug/security/advisories/GHSA-xg9f-g7g7-2323"">https://github.com/pallets/werkzeug/security/advisories/GHSA-xg9f-g7g7-2323</a></li>; <li><a href=""https://github.com/pallets/werkzeug/security/advisories/GHSA-px8h-6qxv-m22q"">https://github.com/pallets/werkzeug/security/advisories/GHSA-px8h-6qxv-m22q</a></li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/pallets/werkzeug/blob/main/CHANGES.rst"">werkzeug's changelog</a>.</em></p>; <blockquote>; <h2>Version 2.2.3</h2>; <p>Released 2023-02-14</p>; <ul>; <li>Ensure that URL rules using path converters will redirect with strict slashes when; the trailing slash is missing. :issue:<code>2533</code></li>; <li>Type signature for <code>get_json</code> specifies that return type is not optional when; <code>silent=False</code>. :issue:<code>2508</code></li>; <li><code>parse_content_range_header</code> returns <code>None</code> for a value like <code>bytes */-1</code>; where the length is invalid, instead of raising an <code>AssertionError</code>. :issue:<code>2531</code></li>; <li>Address remaining <code>ResourceWarning</code> related to the socket used by <code>run_simple</code>.; Remove <code>prepare_socket</code>, which now happens when creating the server. :issue:<code>2421</code></li>; <li>Update pre-existing headers for <code>multipart/form-data</code> requests with the test; client. :issue:<code>2549</code></li>; <li>Fix handling of header extended parameters such that they are no longer quoted.; :issue:<code>2529</code></li>; <li><code>LimitedStream.read</code> works correctly when wrapping a stream that may not return; the requested size in one <code>read</code> call. :issue:<code>2558</code></li>; <li>A cookie header that starts with <code>=</code> is treated as an empty key and discarded,; rather than stripping the leading <code>==</code>.</li>; <li>Specify a maximum number of multipart parts, default 1000,",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12703:1806,Assert,AssertionError,1806,https://hail.is,https://github.com/hail-is/hail/pull/12703,1,['Assert'],['AssertionError']
Testability,"<br> `41.0.7 -> 42.0.2` <br> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | **581/1000** <br/> **Why?** Recently disclosed, Has a fix available, CVSS 5.9 | Uncontrolled Resource Consumption (&#x27;Resource Exhaustion&#x27;) <br/>[SNYK-PYTHON-CRYPTOGRAPHY-6157248](https://snyk.io/vuln/SNYK-PYTHON-CRYPTOGRAPHY-6157248) | `cryptography:` <br> `41.0.7 -> 42.0.2` <br> | No | No Known Exploit ; ![low severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/l.png ""low severity"") | **451/1000** <br/> **Why?** Recently disclosed, Has a fix available, CVSS 3.3 | NULL Pointer Dereference <br/>[SNYK-PYTHON-CRYPTOGRAPHY-6210214](https://snyk.io/vuln/SNYK-PYTHON-CRYPTOGRAPHY-6210214) | `cryptography:` <br> `41.0.7 -> 42.0.2` <br> | No | No Known Exploit . (*) Note that the real score may have changed since the PR was raised. Some vulnerabilities couldn't be fully fixed and so Snyk will still find them when the project is tested again. This may be because the vulnerability existed within more than one direct dependency, but not all of the affected dependencies could be upgraded. Check the changes in this PR to ensure they won't cause issues with your project. ------------. **Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open fix PRs.*. For more information: <img src=""https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiIyN2MzNWY4NC0yNDIyLTRmNzUtYWMxYy1mODQxOGJmNzRlMzciLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjI3YzM1Zjg0LTI0MjItNGY3NS1hYzFjLWY4NDE4YmY3NGUzNyJ9fQ=="" width=""0"" height=""0""/>; 🧐 [View latest project report](https://app.snyk.io/org/danking/project/5ecb4152-94d0-44ff-86c6-21e542bb123d?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr). 🛠 [Adjust project settings](https://app.snyk",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14234:2324,test,tested,2324,https://hail.is,https://github.com/hail-is/hail/pull/14234,1,['test'],['tested']
Testability,"<br> `41.0.7 -> 42.0.2` <br> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | **581/1000** <br/> **Why?** Recently disclosed, Has a fix available, CVSS 5.9 | Uncontrolled Resource Consumption (&#x27;Resource Exhaustion&#x27;) <br/>[SNYK-PYTHON-CRYPTOGRAPHY-6157248](https://snyk.io/vuln/SNYK-PYTHON-CRYPTOGRAPHY-6157248) | `cryptography:` <br> `41.0.7 -> 42.0.2` <br> | No | No Known Exploit ; ![low severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/l.png ""low severity"") | **451/1000** <br/> **Why?** Recently disclosed, Has a fix available, CVSS 3.3 | NULL Pointer Dereference <br/>[SNYK-PYTHON-CRYPTOGRAPHY-6210214](https://snyk.io/vuln/SNYK-PYTHON-CRYPTOGRAPHY-6210214) | `cryptography:` <br> `41.0.7 -> 42.0.2` <br> | No | No Known Exploit . (*) Note that the real score may have changed since the PR was raised. Some vulnerabilities couldn't be fully fixed and so Snyk will still find them when the project is tested again. This may be because the vulnerability existed within more than one direct dependency, but not all of the affected dependencies could be upgraded. Check the changes in this PR to ensure they won't cause issues with your project. ------------. **Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open fix PRs.*. For more information: <img src=""https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiJjMjFkYTE5Ny1lMDgzLTRiNzEtODc1Yi0xZmY0MjNhZWZmOWEiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6ImMyMWRhMTk3LWUwODMtNGI3MS04NzViLTFmZjQyM2FlZmY5YSJ9fQ=="" width=""0"" height=""0""/>; 🧐 [View latest project report](https://app.snyk.io/org/danking/project/701495b8-b53d-48af-82fe-1a6c57aa56cb?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr). 🛠 [Adjust project settings](https://app.snyk",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14236:2058,test,tested,2058,https://hail.is,https://github.com/hail-is/hail/pull/14236,1,['test'],['tested']
Testability,"<code>@​cosimomeli</code></a>.</li>; </ul>; <h3>Changed</h3>; <ul>; <li>Dropped 3.4 support.</li>; <li>Dropped Travis CI for Github Actions.</li>; <li>Wheel should build for python 3 instead of just 3.4 now.</li>; </ul>; <h2>v2.0.1</h2>; <h2>Added</h2>; <ul>; <li>Support Pypi long descripton - <a href=""https://github.com/ereli-cb""><code>@​ereli-cb</code></a></li>; </ul>; <h2>Changed</h2>; <ul>; <li>You can now rename output fields - <a href=""https://github.com/schlitzered""><code>@​schlitzered</code></a></li>; </ul>; <h2>v2.0.0</h2>; <p>No release notes provided.</p>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/madzak/python-json-logger/blob/master/CHANGELOG.md"">python-json-logger's changelog</a>.</em></p>; <blockquote>; <h2>[2.0.2] - 2021-07-27</h2>; <h3>Added</h3>; <ul>; <li>Officially supporting 3.9 - <a href=""https://github.com/felixonmars""><code>@​felixonmars</code></a>.</li>; <li>You can now add static fields to log objects - <a href=""https://github.com/cosimomeli""><code>@​cosimomeli</code></a>.</li>; </ul>; <h3>Changed</h3>; <ul>; <li>Dropped 3.4 support.</li>; <li>Dropped Travis CI for Github Actions.</li>; <li>Wheel should build for python 3 instead of just 3.4 now.</li>; </ul>; <h2>[2.0.1] - 2020-10-12</h2>; <h3>Added</h3>; <ul>; <li>Support Pypi long descripton - <a href=""https://github.com/ereli-cb""><code>@​ereli-cb</code></a></li>; </ul>; <h3>Changed</h3>; <ul>; <li>You can now rename output fields - <a href=""https://github.com/schlitzered""><code>@​schlitzered</code></a></li>; </ul>; <h2>[2.0.0] - 2020-09-26</h2>; <h3>Added</h3>; <ul>; <li>New Changelog</li>; <li>Added timezone support to timestamps - <a href=""https://github.com/lalten""><code>@​lalten</code></a></li>; <li>Refactored log record to function - <a href=""https://github.com/georgysavva""><code>@​georgysavva</code></a></li>; <li>Add python 3.8 support - <a href=""https://github.com/tommilligan""><code>@​tommilligan</code></a><",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11467:1528,log,log,1528,https://hail.is,https://github.com/hail-is/hail/pull/11467,1,['log'],['log']
Testability,"<details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/psf/black/releases"">black's releases</a>.</em></p>; <blockquote>; <h2>22.1.0</h2>; <p>At long last, Black is no longer a beta product! This is the first non-beta release and the first release covered by our <a href=""https://black.readthedocs.io/en/latest/the_black_code_style/index.html#stability-policy"">new stability policy</a>.</p>; <h3>Highlights</h3>; <ul>; <li>Remove Python 2 support (<a href=""https://github-redirect.dependabot.com/psf/black/issues/2740"">#2740</a>)</li>; <li>Introduce the <code>--preview</code> flag (<a href=""https://github-redirect.dependabot.com/psf/black/issues/2752"">#2752</a>)</li>; </ul>; <h3>Style</h3>; <ul>; <li>Deprecate <code>--experimental-string-processing</code> and move the functionality under <code>--preview</code> (<a href=""https://github-redirect.dependabot.com/psf/black/issues/2789"">#2789</a>)</li>; <li>For stubs, one blank line between class attributes and methods is now kept if there's at least one pre-existing blank line (<a href=""https://github-redirect.dependabot.com/psf/black/issues/2736"">#2736</a>)</li>; <li>Black now normalizes string prefix order (<a href=""https://github-redirect.dependabot.com/psf/black/issues/2297"">#2297</a>)</li>; <li>Remove spaces around power operators if both operands are simple (<a href=""https://github-redirect.dependabot.com/psf/black/issues/2726"">#2726</a>)</li>; <li>Work around bug that causes unstable formatting in some cases in the presence of the magic trailing comma (<a href=""https://github-redirect.dependabot.com/psf/black/issues/2807"">#2807</a>)</li>; <li>Use parentheses for attribute access on decimal float and int literals (<a href=""https://github-redirect.dependabot.com/psf/black/issues/2799"">#2799</a>)</li>; <li>Don't add whitespace for attribute access on hexadecimal, binary, octal, and complex literals (<a href=""https://github-redirect.dependabot.com/psf/black/issues/2799"">#2799</a>)</li>; <",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11468:1018,stub,stubs,1018,https://hail.is,https://github.com/hail-is/hail/pull/11468,1,['stub'],['stubs']
Testability,"<h3>Changed</h3>; <ul>; <li>You can now rename output fields - <a href=""https://github.com/schlitzered""><code>@​schlitzered</code></a></li>; </ul>; <h2>[2.0.0] - 2020-09-26</h2>; <h3>Added</h3>; <ul>; <li>New Changelog</li>; <li>Added timezone support to timestamps - <a href=""https://github.com/lalten""><code>@​lalten</code></a></li>; <li>Refactored log record to function - <a href=""https://github.com/georgysavva""><code>@​georgysavva</code></a></li>; <li>Add python 3.8 support - <a href=""https://github.com/tommilligan""><code>@​tommilligan</code></a></li>; </ul>; <h3>Removed</h3>; <ul>; <li>Support for Python 2.7</li>; <li>Debian directory</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/madzak/python-json-logger/commit/076b407aa7f34bc64a729cc77da336fb159d7597""><code>076b407</code></a> Release 2.0.2</li>; <li><a href=""https://github.com/madzak/python-json-logger/commit/f51d8fe76154380cac2fe6a30a944d67dc09df2d""><code>f51d8fe</code></a> added test/build requirements to ci file</li>; <li><a href=""https://github.com/madzak/python-json-logger/commit/b07b580670c6c4e340c372c73d0e76cdddc8b456""><code>b07b580</code></a> moved release out of test workflow. setup.cfg specifies a proper wheel now</li>; <li><a href=""https://github.com/madzak/python-json-logger/commit/4df12f93928bb66b053d8693e5cd60f38588069a""><code>4df12f9</code></a> removing missed python3.4 support data</li>; <li><a href=""https://github.com/madzak/python-json-logger/commit/7c40f4abf46ee6f3b5f4290f12ff3e9872ff9892""><code>7c40f4a</code></a> removed typo around build badge</li>; <li><a href=""https://github.com/madzak/python-json-logger/commit/0837da313ea796e353b40b574e3f82591a698caf""><code>0837da3</code></a> added env to git ignore</li>; <li><a href=""https://github.com/madzak/python-json-logger/commit/c58d7d4660780e3d4872189f9889200917a8930f""><code>c58d7d4</code></a> manifest will now include readme for setup.py long description. tox and</li>; <li><a ",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11467:2904,log,logger,2904,https://hail.is,https://github.com/hail-is/hail/pull/11467,2,"['log', 'test']","['logger', 'test']"
Testability,"<img width=""1168"" alt=""Screen Shot 2021-05-24 at 4 54 34 PM"" src=""https://user-images.githubusercontent.com/63973811/129767519-85ab5cf1-2da6-41ee-b52f-44bdf63f7118.png"">. The goal of this progress bar is to have a visual concept that could show the progress of every job created. We added Plotly to show how long it takes for each step to complete when creating a batch job. We decided to use the container_status already created and created a new variable that would hold the new data that Plotly would produce. We use the job-status variable to obtain all of the creating pulling and posting information created. We inserted the data collected through a for-loop that test for each possible test case.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10687:670,test,test,670,https://hail.is,https://github.com/hail-is/hail/pull/10687,2,['test'],['test']
Testability,"<img width=""922"" alt=""Screen Shot 2020-08-17 at 10 52 59 AM"" src=""https://user-images.githubusercontent.com/57302458/90410041-e1aa8400-e077-11ea-8fc0-7eabb9b974f1.png"">. Benchmarks with different tests:; <img width=""905"" alt=""Screen Shot 2020-08-19 at 9 55 34 AM"" src=""https://user-images.githubusercontent.com/57302458/90643950-29f5ad80-e202-11ea-878c-275fca3d5a5f.png"">",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9284:170,Benchmark,Benchmarks,170,https://hail.is,https://github.com/hail-is/hail/pull/9284,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,"<li>; <p>Fix interpretation difference of the pure-Python and the Cython-based; HTTP parsers construct a <code>yarl.URL</code> object for HTTP request-target.</p>; <p>Before this fix, the Python parser would turn the URI's absolute-path; for <code>//some-path</code> into <code>/</code> while the Cython code preserved it as; <code>//some-path</code>. Now, both do the latter.; <code>[#5498](https://github.com/aio-libs/aiohttp/issues/5498) &lt;https://github.com/aio-libs/aiohttp/issues/5498&gt;</code>_</p>; </li>; </ul>; <hr />; <h1>3.7.3 (2020-11-18)</h1>; <h2>Features</h2>; <ul>; <li>Use Brotli instead of brotlipy; <code>[#3803](https://github.com/aio-libs/aiohttp/issues/3803) &lt;https://github.com/aio-libs/aiohttp/issues/3803&gt;</code>_</li>; <li>Made exceptions pickleable. Also changed the repr of some exceptions.; <code>[#4077](https://github.com/aio-libs/aiohttp/issues/4077) &lt;https://github.com/aio-libs/aiohttp/issues/4077&gt;</code>_</li>; </ul>; <h2>Bugfixes</h2>; <ul>; <li>Raise a ClientResponseError instead of an AssertionError for a blank; HTTP Reason Phrase.; <code>[#3532](https://github.com/aio-libs/aiohttp/issues/3532) &lt;https://github.com/aio-libs/aiohttp/issues/3532&gt;</code>_</li>; <li>Fix <code>web_middlewares.normalize_path_middleware</code> behavior for patch without slash.; <code>[#3669](https://github.com/aio-libs/aiohttp/issues/3669) &lt;https://github.com/aio-libs/aiohttp/issues/3669&gt;</code>_</li>; <li>Fix overshadowing of overlapped sub-applications prefixes.; <code>[#3701](https://github.com/aio-libs/aiohttp/issues/3701) &lt;https://github.com/aio-libs/aiohttp/issues/3701&gt;</code>_</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/aio-libs/aiohttp/commit/0a26acc1de9e1b0244456b7881ec16ba8bb64fc3""><code>0a26acc</code></a> Bump aiohttp to v3.7.4 for a security release</li>; <li><a href=""https://github.com/aio-libs/aio",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10115:5706,Assert,AssertionError,5706,https://hail.is,https://github.com/hail-is/hail/pull/10115,1,['Assert'],['AssertionError']
Testability,"<li><a href=""https://github.com/Azure/azure-sdk-for-python/commit/fd80cb7a31a15275b2a5008d68f91dbe35493543""><code>fd80cb7</code></a> [AutoRelease] t2-storage-2021-09-14-45016(Do not merge) (<a href=""https://github-redirect.dependabot.com/Azure/azure-sdk-for-python/issues/20678"">#20678</a>)</li>; <li><a href=""https://github.com/Azure/azure-sdk-for-python/commit/8be2477705853969ceb2d274fcae6f55b266f0e3""><code>8be2477</code></a> [STG78]Address comments (<a href=""https://github-redirect.dependabot.com/Azure/azure-sdk-for-python/issues/20539"">#20539</a>)</li>; <li><a href=""https://github.com/Azure/azure-sdk-for-python/commit/d79015f6078353dcbec65117028014c406108bfa""><code>d79015f</code></a> Check fd is reg file or symlink in get_length before using st_size. (<a href=""https://github-redirect.dependabot.com/Azure/azure-sdk-for-python/issues/19725"">#19725</a>)</li>; <li><a href=""https://github.com/Azure/azure-sdk-for-python/commit/15cd636dd91c9a870667effc0a78aae58992ae37""><code>15cd636</code></a> [Storage] Move test keys into CredScan-suppressed helper files (<a href=""https://github-redirect.dependabot.com/Azure/azure-sdk-for-python/issues/20330"">#20330</a>)</li>; <li><a href=""https://github.com/Azure/azure-sdk-for-python/commit/ae49de0ea62fc45e5a72808db2fd3eec4261d65f""><code>ae49de0</code></a> [Storage]Address comments for STG78 GA (<a href=""https://github-redirect.dependabot.com/Azure/azure-sdk-for-python/issues/20491"">#20491</a>)</li>; <li><a href=""https://github.com/Azure/azure-sdk-for-python/commit/e572c97e53510572b0a515547bb711a9c7282ae5""><code>e572c97</code></a> [Storage]fix live test (<a href=""https://github-redirect.dependabot.com/Azure/azure-sdk-for-python/issues/20463"">#20463</a>)</li>; <li><a href=""https://github.com/Azure/azure-sdk-for-python/commit/d3d7e3e719a079415b0d955112b7e185791b5f0c""><code>d3d7e3e</code></a> Fix type annotation in azure.storage.blob (<a href=""https://github-redirect.dependabot.com/Azure/azure-sdk-for-python/issues/20084"">#20084</a>)</li>",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11484:1455,test,test,1455,https://hail.is,https://github.com/hail-is/hail/pull/11484,2,['test'],['test']
Testability,"<li><a href=""https://github.com/madzak/python-json-logger/commit/076b407aa7f34bc64a729cc77da336fb159d7597""><code>076b407</code></a> Release 2.0.2</li>; <li><a href=""https://github.com/madzak/python-json-logger/commit/f51d8fe76154380cac2fe6a30a944d67dc09df2d""><code>f51d8fe</code></a> added test/build requirements to ci file</li>; <li><a href=""https://github.com/madzak/python-json-logger/commit/b07b580670c6c4e340c372c73d0e76cdddc8b456""><code>b07b580</code></a> moved release out of test workflow. setup.cfg specifies a proper wheel now</li>; <li><a href=""https://github.com/madzak/python-json-logger/commit/4df12f93928bb66b053d8693e5cd60f38588069a""><code>4df12f9</code></a> removing missed python3.4 support data</li>; <li><a href=""https://github.com/madzak/python-json-logger/commit/7c40f4abf46ee6f3b5f4290f12ff3e9872ff9892""><code>7c40f4a</code></a> removed typo around build badge</li>; <li><a href=""https://github.com/madzak/python-json-logger/commit/0837da313ea796e353b40b574e3f82591a698caf""><code>0837da3</code></a> added env to git ignore</li>; <li><a href=""https://github.com/madzak/python-json-logger/commit/c58d7d4660780e3d4872189f9889200917a8930f""><code>c58d7d4</code></a> manifest will now include readme for setup.py long description. tox and</li>; <li><a href=""https://github.com/madzak/python-json-logger/commit/03e831488ce55e4aaf886806b2c66082fb8c4027""><code>03e8314</code></a> Removed references to travis</li>; <li><a href=""https://github.com/madzak/python-json-logger/commit/e8a8a20e09d66bcce41010f29b37107eafae6ba4""><code>e8a8a20</code></a> fixed python version mapping and typo in tox name</li>; <li><a href=""https://github.com/madzak/python-json-logger/commit/d02050343b58d4585145b5f19b0499d01ef9a1d8""><code>d020503</code></a> initial conversion from travis</li>; <li>Additional commits viewable in <a href=""https://github.com/madzak/python-json-logger/compare/v0.1.11...v2.0.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://depen",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11467:3643,log,logger,3643,https://hail.is,https://github.com/hail-is/hail/pull/11467,1,['log'],['logger']
Testability,"<none>; ```; ```; # k get pods -n batch-pods batch-12728-job-287-742170 -o yaml; apiVersion: v1; kind: Pod; metadata:; creationTimestamp: 2019-09-05T19:12:22Z; labels:; app: batch-job; batch_id: ""12728""; hail.is/batch-instance: cd50b95a89914efb897965a5e982a29d; job_id: ""287""; user: wang; uuid: ca985fd90f9d46968ab9c480af9c931c; name: batch-12728-job-287-742170; namespace: batch-pods; resourceVersion: ""116541360""; selfLink: /api/v1/namespaces/batch-pods/pods/batch-12728-job-287-742170; uid: 1681dd05-d011-11e9-92a9-42010a800041; spec:; containers:; - command:; - /bin/bash; - -c; - set -e; mkdir -p /io/pipeline/pipeline-1cac3dd4e66d/__TASK__286/; __RESOURCE_FILE__286=/io/pipeline/pipeline-1cac3dd4e66d/__TASK__286/8926feac;; __RESOURCE_FILE__0=/io/pipeline/pipeline-1cac3dd4e66d/__TASK__0/0731f9a3; mv; ${__RESOURCE_FILE__0} benchmark-resources.tar.gz && time tar -xvf benchmark-resources.tar.gz; && hailctl dev benchmark run -v -o ${__RESOURCE_FILE__286} -n 5 --data-dir benchmark-resources; -t read_with_index_p1000; env:; - name: POD_IP; valueFrom:; fieldRef:; apiVersion: v1; fieldPath: status.podIP; - name: POD_NAME; valueFrom:; fieldRef:; apiVersion: v1; fieldPath: metadata.name; image: gcr.io/broad-ctsa/benchmark_wang:latest; imagePullPolicy: Always; name: main; resources:; requests:; cpu: ""2""; memory: 7G; terminationMessagePath: /dev/termination-log; terminationMessagePolicy: File; volumeMounts:; - mountPath: /gsa-key; name: gsa-key; - mountPath: /io; name: batch-12728-job-287-742170; - mountPath: /var/run/secrets/kubernetes.io/serviceaccount; name: batch-output-pod-token-8pkmz; readOnly: true; - command:; - /bin/sh; - -c; - ""\n set -ex\n python3 -m batch.cleanup_sidecar\n ""; env:; - name: COPY_OUTPUT_CMD; value: set -ex; (gcloud -q auth activate-service-account --key-file=/gsa-key/privateKeyData; || (sleep $(( 5 + (RANDOM % 5) )); gcloud -q auth activate-service-account; --key-file=/gsa-key/privateKeyData)) && gsutil -m cp -R /io/pipeline/pipeline-1cac3dd4e66d/__TASK__2",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7016:5799,benchmark,benchmark,5799,https://hail.is,https://github.com/hail-is/hail/issues/7016,2,['benchmark'],"['benchmark', 'benchmark-resources']"
Testability,"<p><em>Sourced from <a href=""https://github.com/python-jsonschema/jsonschema/blob/main/CHANGELOG.rst"">jsonschema's changelog</a>.</em></p>; <blockquote>; <h2>v4.6.1</h2>; <ul>; <li>Gut the (incomplete) implementation of <code>recursiveRef</code> on draft 2019. It; needs completing, but for now can lead to recursion errors (e.g. <a href=""https://github-redirect.dependabot.com/python-jsonschema/jsonschema/issues/847"">#847</a>).</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-jsonschema/jsonschema/commit/12c793cf1f3c11d038b1c097d560871180976138""><code>12c793c</code></a> v4.6.1 -&gt; CHANGELOG</li>; <li><a href=""https://github.com/python-jsonschema/jsonschema/commit/19595b5e19098240fa82ba0e85bc9c3a6c674aa7""><code>19595b5</code></a> Gut the meat of the recursiveRef implementation for draft2019</li>; <li><a href=""https://github.com/python-jsonschema/jsonschema/commit/5fea5596f9768a08a4ab4deb4bc5682b42e10ca4""><code>5fea559</code></a> Temporarily remove the future-keywords tests which were removed upstream.</li>; <li><a href=""https://github.com/python-jsonschema/jsonschema/commit/2f5b4d63ec82e5ec1b55f73d84f09be7a62fd32c""><code>2f5b4d6</code></a> Merge commit '118726fe2085ea58d9b3c1bd4764b389e8df8842'</li>; <li><a href=""https://github.com/python-jsonschema/jsonschema/commit/118726fe2085ea58d9b3c1bd4764b389e8df8842""><code>118726f</code></a> Squashed 'json/' changes from f0f619d19..d3f5cd439</li>; <li><a href=""https://github.com/python-jsonschema/jsonschema/commit/3e92ec5e14502263fb27fe1179e638b835653c5c""><code>3e92ec5</code></a> Temporarily skip 2 tests which need fixing.</li>; <li><a href=""https://github.com/python-jsonschema/jsonschema/commit/095a009acc1938caf9596085d5581e7196021f66""><code>095a009</code></a> Squashed 'json/' changes from cf78d97d0..f0f619d19</li>; <li><a href=""https://github.com/python-jsonschema/jsonschema/commit/76b2e597d691e4cf5e9ebb7f3d1cff4f5da0115a""><code>76b2e59</code></a> Me",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11981:2404,test,tests,2404,https://hail.is,https://github.com/hail-is/hail/pull/11981,1,['test'],['tests']
Testability,"<p>This PR was automatically created by Snyk using the credentials of a real user.</p><br /><h3>Snyk has created this PR to fix one or more vulnerable packages in the `pip` dependencies of this project.</h3>. #### Changes included in this PR. - Changes to the following files to upgrade the vulnerable dependencies to a fixed version:; - gear/requirements.txt. #### Vulnerabilities that will be fixed. ##### By pinning:; Severity | Issue | Upgrade | Breaking Change | Exploit Maturity; :-------------------------:|:-------------------------|:-------------------------|:-------------------------|:-------------------------; ![high severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/h.png ""high severity"") | Relative Path Traversal <br/>[SNYK-PYTHON-ORJSON-6276643](https://snyk.io/vuln/SNYK-PYTHON-ORJSON-6276643) | `orjson:` <br> `3.9.7 -> 3.9.15` <br> | No | No Known Exploit . Some vulnerabilities couldn't be fully fixed and so Snyk will still find them when the project is tested again. This may be because the vulnerability existed within more than one direct dependency, but not all of the affected dependencies could be upgraded. Check the changes in this PR to ensure they won't cause issues with your project. ------------. **Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open fix PRs.*. For more information: <img src=""https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiJlYjc2ODRiYy00Njg4LTQ4ODktOTQyOS0xY2M4M2JhNzJmMDAiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6ImViNzY4NGJjLTQ2ODgtNDg4OS05NDI5LTFjYzgzYmE3MmYwMCJ9fQ=="" width=""0"" height=""0""/>; 🧐 [View latest project report](https://app.snyk.io/org/danking/project/0ba777e1-bc27-41cc-aefa-0ed1a253829e?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr). 🛠 [Adjust project settings](https://app.snyk.io/org/danking/project/0ba777e1-bc2",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14355:1008,test,tested,1008,https://hail.is,https://github.com/hail-is/hail/pull/14355,1,['test'],['tested']
Testability,"=""https://github.com/googleapis/python-logging/commit/e1506fa9030776353878048ce562c53bf6ccf7bf"">e1506fa</a>)</li>; </ul>; <h3>Miscellaneous Chores</h3>; <ul>; <li>deprecate AppEngineHandler and ContainerEngineHandler (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/310"">#310</a>) (<a href=""https://github.com/googleapis/python-logging/commit/e3cac888d40bf67af11e57b74615b0c3b8e8aa3e"">e3cac88</a>)</li>; </ul>; <h3>Documentation</h3>; <ul>; <li>update usage guide for v3.0.0 (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/456"">#456</a>) (<a href=""https://github.com/googleapis/python-logging/commit/8a67b73cdfcb9da545671be6cf59c724360b1544"">8a67b73</a>)</li>; </ul>; <h2><a href=""https://www.github.com/googleapis/python-logging/compare/v2.6.0...v2.7.0"">2.7.0</a> (2021-11-02)</h2>; <h3>Features</h3>; <ul>; <li>add context manager support in client (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/415"">#415</a>) (<a href=""https://www.github.com/googleapis/python-logging/commit/f5af16439807a0954ee78fa91cb69b9493b80176"">f5af164</a>)</li>; <li>added support for iam AuditData proto (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/396"">#396</a>) (<a href=""https://www.github.com/googleapis/python-logging/commit/e3a1eba74dd8b67bcc73a78f784189ef2a9927c2"">e3a1eba</a>)</li>; <li>use structured logging on GCF with python 3.7 (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/434"">#434</a>) (<a href=""https://www.github.com/googleapis/python-logging/commit/5055919f70c82b38de6d1fa7f1df6006865a857b"">5055919</a>)</li>; </ul>; <h3>Bug Fixes</h3>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/googleapis/python-logging/commit/10727ef3c8cca7e20484e58e6afdc79e81a4d4c9""><code>10727ef</code></a> chore(main): release 3.0.0 (<a href=",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11574:10267,log,logging,10267,https://hail.is,https://github.com/hail-is/hail/pull/11574,1,['log'],['logging']
Testability,=38;5;13:*.svg=38;5;13:*.svgz=38;5;13:*.mng=38;5;13:*.pcx=38;5;13:*.mov=38;5;13:*.mpg=38;5;13:*.mpeg=38;5;13:*.m2v=38;5;13:*.mkv=38;5;13:*.webm=38;5;13:*.ogm=38;5;13:*.mp4=38;5;13:*.m4v=38;5;13:*.mp4v=38;5;13:*.vob=38;5;13:*.qt=38;5;13:*.nuv=38;5;13:*.wmv=38;5;13:*.asf=38;5;13:*.rm=38;5;13:*.rmvb=38;5;13:*.flc=38;5;13:*.avi=38;5;13:*.fli=38;5;13:*.flv=38;5;13:*.gl=38;5;13:*.dl=38;5;13:*.xcf=38;5;13:*.xwd=38;5;13:*.yuv=38;5;13:*.cgm=38;5;13:*.emf=38;5;13:*.axv=38;5;13:*.anx=38;5;13:*.ogv=38;5;13:*.ogx=38;5;13:*.aac=38;5;45:*.au=38;5;45:*.flac=38;5;45:*.mid=38;5;45:*.midi=38;5;45:*.mka=38;5;45:*.mp3=38;5;45:*.mpc=38;5;45:*.ogg=38;5;45:*.ra=38;5;45:*.wav=38;5;45:*.axa=38;5;45:*.oga=38;5;45:*.spx=38;5;45:*.xspf=38;5;45:; MAIL=/var/spool/mail/hadoop; PATH=/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/aws/puppet/bin/; AWS_DEFAULT_REGION=ap-southeast-1; PWD=/home/hadoop; JAVA_HOME=/etc/alternatives/jre; LANG=en_US.UTF-8; HISTCONTROL=ignoredups; SHLVL=1; HOME=/home/hadoop; LOGNAME=hadoop; QTLIB=/usr/lib64/qt-3.3/lib; SSH_CONNECTION=103.37.196.84 57805 192.168.96.172 22; LESSOPEN=||/usr/bin/lesspipe.sh %s; XDG_RUNTIME_DIR=/run/user/995; _=/usr/bin/env; ```; </p>; </details> . ```sh ; /usr/bin/which: no scala in (/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/aws/puppet/bin/); ```. ## With Hail (after hail build). ```sh; -rwxr-xr-x 1 root root 140 Jul 19 15:54 /usr/bin/spark-shell; /usr/bin/spark-shell; -rwxr-xr-x 1 root root 140 Jul 19 15:54 /usr/bin/spark-shell; SLF4J: No SLF4J providers were found.; SLF4J: Defaulting to no-operation (NOP) logger implementation; SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.; SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.; SLF4J: Ignoring binding found at [jar:file:/usr/lib/spark/jars/log4j-slf4j-impl-2.17.2.jar!/org/slf4j/impl/StaticLoggerBinder.class]; SLF4J: See https://www.slf4j.org/codes.html#ignoredBindin,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1772153045:3568,LOG,LOGNAME,3568,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1772153045,1,['LOG'],['LOGNAME']
Testability,"=38;5;13:*.svg=38;5;13:*.svgz=38;5;13:*.mng=38;5;13:*.pcx=38;5;13:*.mov=38;5;13:*.mpg=38;5;13:*.mpeg=38;5;13:*.m2v=38;5;13:*.mkv=38;5;13:*.webm=38;5;13:*.ogm=38;5;13:*.mp4=38;5;13:*.m4v=38;5;13:*.mp4v=38;5;13:*.vob=38;5;13:*.qt=38;5;13:*.nuv=38;5;13:*.wmv=38;5;13:*.asf=38;5;13:*.rm=38;5;13:*.rmvb=38;5;13:*.flc=38;5;13:*.avi=38;5;13:*.fli=38;5;13:*.flv=38;5;13:*.gl=38;5;13:*.dl=38;5;13:*.xcf=38;5;13:*.xwd=38;5;13:*.yuv=38;5;13:*.cgm=38;5;13:*.emf=38;5;13:*.axv=38;5;13:*.anx=38;5;13:*.ogv=38;5;13:*.ogx=38;5;13:*.aac=38;5;45:*.au=38;5;45:*.flac=38;5;45:*.mid=38;5;45:*.midi=38;5;45:*.mka=38;5;45:*.mp3=38;5;45:*.mpc=38;5;45:*.ogg=38;5;45:*.ra=38;5;45:*.wav=38;5;45:*.axa=38;5;45:*.oga=38;5;45:*.spx=38;5;45:*.xspf=38;5;45:; MAIL=/var/spool/mail/hadoop; PATH=/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/aws/puppet/bin/; AWS_DEFAULT_REGION=ap-southeast-1; PWD=/home/hadoop; JAVA_HOME=/etc/alternatives/jre; LANG=en_US.UTF-8; HISTCONTROL=ignoredups; SHLVL=1; HOME=/home/hadoop; LOGNAME=hadoop; QTLIB=/usr/lib64/qt-3.3/lib; SSH_CONNECTION=103.37.196.84 60539 192.168.124.160 22; LESSOPEN=||/usr/bin/lesspipe.sh %s; XDG_RUNTIME_DIR=/run/user/995; _=/usr/bin/env; ```; </p>; </details> . ```sh ; /usr/bin/which: no scala in (/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/aws/puppet/bin/); ```. ## Debug mode. ```sh; $ set -x; ++ printf '\033]0;%s@%s:%s\007' hadoop ip-192-168-124-160 '~'; $ spark-shell; + spark-shell; SLF4J: No SLF4J providers were found.; SLF4J: Defaulting to no-operation (NOP) logger implementation; SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.; SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.; SLF4J: Ignoring binding found at [jar:file:/usr/lib/spark/jars/log4j-slf4j-impl-2.17.2.jar!/org/slf4j/impl/StaticLoggerBinder.class]; SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.; Setting default log level to ""WARN"".",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1772153045:8468,LOG,LOGNAME,8468,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1772153045,1,['LOG'],['LOGNAME']
Testability,"=38;5;45:*.midi=38;5;45:*.mka=38;5;45:*.mp3=38;5;45:*.mpc=38;5;45:*.ogg=38;5;45:*.ra=38;5;45:*.wav=38;5;45:*.axa=38;5;45:*.oga=38;5;45:*.spx=38;5;45:*.xspf=38;5;45:; MAIL=/var/spool/mail/hadoop; PATH=/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/aws/puppet/bin/; AWS_DEFAULT_REGION=ap-southeast-1; PWD=/home/hadoop; JAVA_HOME=/etc/alternatives/jre; LANG=en_US.UTF-8; HISTCONTROL=ignoredups; SHLVL=1; HOME=/home/hadoop; LOGNAME=hadoop; QTLIB=/usr/lib64/qt-3.3/lib; SSH_CONNECTION=103.37.196.84 60539 192.168.124.160 22; LESSOPEN=||/usr/bin/lesspipe.sh %s; XDG_RUNTIME_DIR=/run/user/995; _=/usr/bin/env; ```; </p>; </details> . ```sh ; /usr/bin/which: no scala in (/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/aws/puppet/bin/); ```. ## Debug mode. ```sh; $ set -x; ++ printf '\033]0;%s@%s:%s\007' hadoop ip-192-168-124-160 '~'; $ spark-shell; + spark-shell; SLF4J: No SLF4J providers were found.; SLF4J: Defaulting to no-operation (NOP) logger implementation; SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.; SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.; SLF4J: Ignoring binding found at [jar:file:/usr/lib/spark/jars/log4j-slf4j-impl-2.17.2.jar!/org/slf4j/impl/StaticLoggerBinder.class]; SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).; Exception in thread ""main"" java.lang.NoSuchMethodError: 'scala.reflect.internal.settings.MutableSettings scala.reflect.internal.settings.MutableSettings$.SettingsOps(scala.reflect.internal.settings.MutableSettings)'; at scala.tools.nsc.interpreter.ILoop.$anonfun$chooseReader$1(ILoop.scala:914); at scala.tools.nsc.interpreter.ILoop.mkReader$1(ILoop.scala:920); at scala.tools.nsc.interpreter.ILoop.$anonfun$chooseReader$4(ILoop.scala:926); at scala.tools.nsc.inte",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1772153045:9016,log,logger,9016,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1772153045,1,['log'],['logger']
Testability,"=======================; platform darwin -- Python 3.9.17, pytest-7.4.0, pluggy-1.3.0; rootdir: /Users/dgoldste/hail/hail/python/test; configfile: pytest.ini; plugins: anyio-4.0.0, xdist-2.5.0, instafail-0.5.0, timeout-2.1.0, devtools-0.12.2, asyncio-0.21.1, timestamper-0.0.9, metadata-3.0.0, html-1.22.1, forked-1.6.0; asyncio: mode=auto; collected 8218 items / 8133 deselected / 85 selected. <Package hail>; <Module test_context.py>; <Function test_init_hail_context_twice>; <Function test_top_level_functions_are_do_not_error>; <Function test_tmpdir_runs>; <Module test_randomness.py>; <Function test_table_explode>; <Package backend>; <Module test_service_backend.py>; <Function test_tiny_driver_has_tiny_memory>; <Function test_big_driver_has_big_memory>; <Function test_tiny_worker_has_tiny_memory>; <Function test_big_worker_has_big_memory>; <Function test_regions>; <Package expr>; <Module test_expr.py>; <UnitTestCase Tests>; <TestCaseFunction test_aggregators>; <TestCaseFunction test_densify_table>; <TestCaseFunction test_scan>; <Package genetics>; <Module test_reference_genome.py>; <Function test_reference_genome>; <Function test_reference_genome_sequence>; <Function test_reference_genome_liftover>; <Function test_read_custom_reference_genome>; <Package matrixtable>; <Module test_grouped_matrix_table.py>; <UnitTestCase Tests>; <TestCaseFunction test_joins_work_correctly>; <Module test_matrix_table.py>; <UnitTestCase Tests>; <TestCaseFunction test_collect_cols_by_key>; <TestCaseFunction test_naive_coalesce>; <TestCaseFunction test_range_count>; <Package methods>; <Module test_family_methods.py>; <UnitTestCase Tests>; <TestCaseFunction test_trio_matrix_1>; <Module test_impex.py>; <UnitTestCase VCFTests>; <TestCaseFunction test_glob>; <TestCaseFunction test_import_gvcfs>; <Module test_qc.py>; <UnitTestCase Tests>; <TestCaseFunction test_sample_qc>; <TestCaseFunction test_variant_qc>; <Module test_skat.py>; <Function test_logistic_skat_phenotypes_are_binary>; <Function tes",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13620#issuecomment-1720268851:1568,Test,Tests,1568,https://hail.is,https://github.com/hail-is/hail/pull/13620#issuecomment-1720268851,4,['Test'],"['TestCaseFunction', 'Tests']"
Testability,"==============================================; platform darwin -- Python 3.6.8, pytest-3.8.0, py-1.7.0, pluggy-0.8.1; rootdir: /Users/alex/projects/hail/hail/python, inifile:; plugins: xdist-1.22.2, metadata-1.8.0, html-1.19.0, forked-1.0.2; collected 591 items . test/hail/test_context.py E. ============================================================================================== ERRORS ==============================================================================================; _______________________________________________________________________ ERROR at setup of Tests.test_init_hail_context_twice _______________________________________________________________________. def startTestHailContext():; global _initialized; if not _initialized:; url = os.environ.get('HAIL_TEST_SERVICE_BACKEND_URL'); if url:; hl.init(master='local[2]', min_block_size=0, quiet=True, _backend=hl.backend.ServiceBackend(url)); else:; > hl.init(master='local[2]', min_block_size=0, quiet=True). test/hail/helpers.py:18: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; hail/typecheck/check.py:561: in wrapper; return __original_func(*args_, **kwargs_); hail/context.py:264: in init; _optimizer_iterations,_backend); hail/typecheck/check.py:561: in wrapper; return __original_func(*args_, **kwargs_); hail/context.py:99: in __init__; min_block_size, branching_factor, tmp_dir, optimizer_iterations); /miniconda3/envs/hail/lib/python3.6/site-packages/py4j/java_gateway.py:1257: in __call__; answer, self.gateway_client, self.target_id, self.name); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . answer = 'xspy4j.Py4JException: Method apply([null, class java.lang.String, class scala.Some, class java.lang",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5878#issuecomment-484651928:1631,test,test,1631,https://hail.is,https://github.com/hail-is/hail/pull/5878#issuecomment-484651928,1,['test'],['test']
Testability,"========================>(4627 + 1) / 4628]2018-01-17 18:47:04 Hail: INFO: Coerced sorted dataset; 2018-01-17 18:47:04 Hail: WARN: converting OrderedRVD => OrderedRDD; [Stage 1:> (7 + 28) / 4969]Traceback (most recent call last):; File ""/tmp/f93de2d1-2d89-43f9-9868-f266eb88a6f1/concordance.py"", line 38, in <module>; main(args); File ""/tmp/f93de2d1-2d89-43f9-9868-f266eb88a6f1/concordance.py"", line 19, in main; bi_summary, bi_samples, bi_variants = methods.concordance(bi_past_vds, bi_future_vds); File ""<decorator-gen-1304>"", line 2, in concordance; File ""/tmp/f93de2d1-2d89-43f9-9868-f266eb88a6f1/hail-devel-08a15431a0ef.zip/hail/utils/java.py"", line 155, in handle_py4j; hail.utils.java.FatalError: AssertionError: assertion failed. Java stack trace:; org.apache.spark.SparkException: Job aborted due to stage failure: Task 30 in stage 1.0 failed 20 times, most recent failure: Lost task 30.19 in stage 1.0 (TID 4847, lfdev2-sw-f5w2.c.broad-mpg-gnomad.internal): java.lang.AssertionError: assertion failed; 	at scala.Predef$.assert(Predef.scala:156); 	at is.hail.annotations.Region.loadInt(Region.scala:36); 	at is.hail.expr.types.TBinary$.loadLength(TBinary.scala:62); 	at is.hail.annotations.UnsafeRow$.readBinary(UnsafeRow.scala:128); 	at is.hail.annotations.UnsafeRow$.readString(UnsafeRow.scala:139); 	at is.hail.annotations.UnsafeRow$.readAltAllele(UnsafeRow.scala:152); 	at is.hail.annotations.UnsafeRow$.readArrayAltAllele(UnsafeRow.scala:164); 	at is.hail.annotations.UnsafeRow$.read(UnsafeRow.scala:210); 	at is.hail.annotations.UnsafeRow.get(UnsafeRow.scala:257); 	at is.hail.expr.FilterVariants$$anonfun$10.apply(Relational.scala:503); 	at is.hail.expr.FilterVariants$$anonfun$10.apply(Relational.scala:500); 	at scala.collection.Iterator$$anon$13.hasNext(Iterator.scala:463); 	at is.hail.rvd.OrderedRVD$$anonfun$apply$9$$anon$5.hasNext(OrderedRVD.scala:658); 	at scala.collection.Iterator$$anon$11.hasNext(Iterator.scala:408); 	at is.hail.rvd.OrderedRVD$$anonfun$apply$9$$anon$5.has",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2743:2030,Assert,AssertionError,2030,https://hail.is,https://github.com/hail-is/hail/issues/2743,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,"=\""$HAIL_HOME/build/libs/hail-all-spark.jar\"" \; --conf spark.executor.extraClassPath=./hail-all-spark.jar \; --conf spark.serializer=org.apache.spark.serializer.KryoSerializer \; --conf spark.kryo.registrator=is.hail.kryo.HailKryoRegistrator\; ""$@"". spark-submit\; --executor-cores 4\; --executor-memory 40G\; --driver-memory 10g\; --driver-cores 2\; --num-executors 10\; --conf spark.yarn.appMasterEnv.LD_LIBRARY_PATH=$LD_LIBRARY_PATH\; --conf spark.yarn.appMasterEnv.PYTHONPATH=$PYTHONPATH\; --conf spark.yarn.appMasterEnv.PATH=$PATH\; --jars $HAIL_HOME/build/libs/hail-all-spark.jar \; --master yarn\; --deploy-mode client \; --conf spark.driver.memory=5G\; --conf spark.executor.memory=30G\; --conf spark.driver.extraClassPath=\""$HAIL_HOME/build/libs/hail-all-spark.jar\"" \; --conf spark.executor.extraClassPath=./hail-all-spark.jar \; --conf spark.serializer=org.apache.spark.serializer.KryoSerializer \; --conf spark.kryo.registrator=is.hail.kryo.HailKryoRegistrator\; ""$@"". ```; Here is a sample of the yarn log....; ...; SLF4J: Class path contains multiple SLF4J bindings.; SLF4J: Found binding in [jar:file:/data04/hadoop/yarn/local/usercache/farrell/filecache/40/__spark_libs__5184408978318087972.zip/slf4j-log4j12-1.7.16.jar!/org/slf4j/impl/StaticLoggerBinder.class]; SLF4J: Found binding in [jar:file:/usr/hdp/2.4.0.0-169/hadoop/lib/slf4j-log4j12-1.7.10.jar!/org/slf4j/impl/StaticLoggerBinder.class]; SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.; SLF4J: Actual binding is of type [org.slf4j.impl.Log4jLoggerFactory]; 19/01/22 13:11:40 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; ERROR: dlopen(""/data05/hadoop/yarn/local/usercache/farrell/appcache/application_1542127286896_0174/container_e2435_1542127286896_0174_01_000011/tmp/libhail6914320507038502759.so""): /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.18' not found (required by /data05/hadoop/yarn/local/user",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4733#issuecomment-456518258:2092,log,log,2092,https://hail.is,https://github.com/hail-is/hail/issues/4733#issuecomment-456518258,1,['log'],['log']
Testability,"=is_method); --> 560 return __original_func(*args_, **kwargs_); 561 ; 562 return wrapper. /home/hail/hail.zip/hail/methods/impex.py in read_table(path); 1865 :class:`.Table`; 1866 """"""; -> 1867 return Table(Env.hc()._jhc.readTable(path)); 1868 ; 1869 @typecheck(t=Table,. /usr/lib/spark/python/lib/py4j-0.10.4-src.zip/py4j/java_gateway.py in __call__(self, *args); 1131 answer = self.gateway_client.send_command(command); 1132 return_value = get_return_value(; -> 1133 answer, self.gateway_client, self.target_id, self.name); 1134 ; 1135 for temp_arg in temp_args:. /home/hail/hail.zip/hail/utils/java.py in deco(*args, **kwargs); 208 raise FatalError('%s\n\nJava stack trace:\n%s\n'; 209 'Hail version: %s\n'; --> 210 'Error summary: %s' % (deepest, full, hail.__version__, deepest)) from None; 211 except pyspark.sql.utils.CapturedException as e:; 212 raise FatalError('%s\n\nJava stack trace:\n%s\n'. FatalError: AssertionError: assertion failed. Java stack trace:; java.lang.AssertionError: assertion failed; 	at scala.Predef$.assert(Predef.scala:156); 	at is.hail.expr.types.TableType.<init>(TableType.scala:15); 	at is.hail.expr.Parser$$anonfun$table_type_expr$7.apply(Parser.scala:308); 	at is.hail.expr.Parser$$anonfun$table_type_expr$7.apply(Parser.scala:307); 	at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:137); 	at scala.util.parsing.combinator.Parsers$Success.map(Parsers.scala:136); 	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:237); 	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$map$1.apply(Parsers.scala:237); 	at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:217); 	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$flatMap$1.apply(Parsers.scala:234); 	at scala.util.parsing.combinator.Parsers$Parser$$anonfun$flatMap$1.apply(Parsers.scala:234); 	at scala.util.parsing.combinator.Parsers$$anon$3.apply(Parsers.scala:217); 	at scala.util.parsing.combinator.Parsers$$anon$2$$anonfun$appl",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4325:2089,Assert,AssertionError,2089,https://hail.is,https://github.com/hail-is/hail/issues/4325,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,"> #5482 :P. Haha man we're on the same wavelength today: https://github.com/akotlar/hail/commit/c0c3751d9de9008b1ec4d0281afa77c5dbd7d186; (g++ is a neater solution, I was going to test that next)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5489#issuecomment-468434781:180,test,test,180,https://hail.is,https://github.com/hail-is/hail/pull/5489#issuecomment-468434781,1,['test'],['test']
Testability,"> #9309 up to solve these issues. If I can get all the tests to pass, I'll feel pretty good about stacking this on top of that. Yes, agreed.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9304#issuecomment-676650821:55,test,tests,55,https://hail.is,https://github.com/hail-is/hail/pull/9304#issuecomment-676650821,1,['test'],['tests']
Testability,"> (If you want to take a look at a live instance, I've deployed to my namespace and you can look at the batch logs here: https://ci.hail.is/batches/634 ). looks great.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7381#issuecomment-548104248:110,log,logs,110,https://hail.is,https://github.com/hail-is/hail/pull/7381#issuecomment-548104248,1,['log'],['logs']
Testability,"> +1,738 -2,452. Sorry :-(. High level summary changes:; - batch and batch2: Removed /batch endpoint limit and offset options, added include_jobs. Limit was ever only 0 or None. Going forward, /batch should never return jobs, and /jobs endpoint should always paginate.; - Got rid of pods. There is no pod_status options on the client, but they are left in for legacy reasons (batch).; - Simplified worker startup and cleaned up logging paths. The old code could restart the worker after a failure after it had activated. I don't think we're equipped for that case. I do explicitly pull the worker image (with one retry) before trying to run it.; - Batch and Job are gone. database.py is effectively gone. Almost everywhere interacts directly with the database using the simple gear.Database interface, and drops down to aiomysql directly when that is insufficient (e.g. transaction with multiple executemany for /jobs/create). When we pass around data representing a job or batch, it's normally a data record (a dict).; - Added the running log test from your PR.; - The job status is no longer written to a file, just in the database jobs.status.; - I moved the INSTANCE_ID to the database. There is now a table called tokens. It has the instance id and a token for securing communication between the front end and the driver (currently unused).; - Operations that need to be atomic in the database are now implemented as stored procedures which can be called with the check_call_procedure helper in database.py. They return a row with a field rc (return code) that is 0 on success and non-zero on failure.; - Renamed Driver => Scheduler. Scheduler has two threads, one that schedules jobs that are in the Ready state, and one that cancels cancelled jobs in the Running state. There is a new job state Ready. A job is Ready if its parents are complete and it is not scheduled (instance_id is null). A job is Running if it is scheduled (instance_id is not null).; - The full set of instances are mirror",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7420:428,log,logging,428,https://hail.is,https://github.com/hail-is/hail/pull/7420,1,['log'],['logging']
Testability,> . Does this not work? `((dev)|(pr)|(test))-.*`,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12232#issuecomment-1260030697:38,test,test,38,https://hail.is,https://github.com/hail-is/hail/pull/12232#issuecomment-1260030697,1,['test'],['test']
Testability,"> 1. aiohttp is an option, but appears to be generally considered slow on a per-response basis. Can you point me to the benchmarks? The only head-to-head one I found was this:. https://github.com/samuelcolvin/aiohttp-vs-sanic-vs-japronto. where sanic is faster for smaller examples but aiohttp performs MUCH better (3x latency, 10x throughput) when interacting with a db.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5242#issuecomment-461195082:120,benchmark,benchmarks,120,https://hail.is,https://github.com/hail-is/hail/pull/5242#issuecomment-461195082,1,['benchmark'],['benchmarks']
Testability,"> 1.4756407611933507E308, 0 -> 46.25904804767313, 1 -> 54.68552327526001),12). java.lang.AssertionError: java.lang.ArrayIndexOutOfBoundsException: 3. 	at is.hail.check.GenProp1$$anonfun$apply$1.apply$mcVI$sp(Prop.scala:38); 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:160); 	at is.hail.check.GenProp1.apply(Prop.scala:26); 	at is.hail.check.Prop.check(Prop.scala:19); 	at is.hail.expr.ir.OrderingSuite.testBinarySearchOnDict(OrderingSuite.scala:357); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); 	at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:123",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5630:1114,test,testng,1114,https://hail.is,https://github.com/hail-is/hail/issues/5630,1,['test'],['testng']
Testability,"> > 1. aiohttp is an option, but appears to be generally considered slow on a per-response basis; > ; > Can you point me to the benchmarks? The only head-to-head one I found was this:; > ; > https://github.com/samuelcolvin/aiohttp-vs-sanic-vs-japronto; > ; > where sanic is faster for smaller examples but aiohttp performs MUCH better (3x latency, 10x throughput) when interacting with a db. Sanic was chosen because it's a near drop-in for Flask, and is the most popular afaik library built around asyncio. It has 2x as many stars as aiohttp, slightly more forks. The original motivation for considering aiohttp: ; https://magic.io/blog/uvloop-blazing-fast-python-networking. In short, one of the creators of asyncio discusses uvloop performance relative to other libraries. They key is:. ""However, the performance bottleneck in aiohttp turned out to be its HTTP parser, which is so slow, that it matters very little how fast the underlying I/O library is."". <img width=""1001"" alt=""screen shot 2019-02-06 at 7 29 00 pm"" src=""https://user-images.githubusercontent.com/5543229/52382977-77a62d00-2a45-11e9-8c04-b8142586eb5c.png"">. <img width=""936"" alt=""screen shot 2019-02-06 at 7 29 19 pm"" src=""https://user-images.githubusercontent.com/5543229/52382985-812f9500-2a45-11e9-9155-97c00ef9784b.png"">. As an aside I've spent some time reading about this over the last ~month, and besides relatively consistent messaging about the messiness of Python's ecosystem, performance and user experience are deeply important to me, so when I read things like:. ""I don’t think performance matter. I think asgi does not matter in 2018 in general. Usability and complexity matters. Python is not very good choice for high performance system in any case...For me high performance python is a fantasy, but i don’t do aiohttp/python anymore. In the end it is up to @asvetlov"". from one of the creators of aiohttp, I'm not encouraged about the long-term health of the project. https://github.com/aio-libs/aiohttp/issues/29",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5242#issuecomment-461259030:128,benchmark,benchmarks,128,https://hail.is,https://github.com/hail-is/hail/pull/5242#issuecomment-461259030,1,['benchmark'],['benchmarks']
Testability,"> > I should fix it!; > ; > That'd be awesome!; > ; > Yes, the steps are steps from build.yaml. Some background on the current setup, there are two classes of deployed stuff: normal, and ""infrastructure"". Infrastructure is stuff that can't be virtualized (or we've chosen not to) within the k8s cluster and can't be tested with the current CI setup. An example is gateway, that binds the live IP address for hail.is. Infrastructure will need a ""meta"" testing setup that will spin up another k8s cluster or testing in a separate staging cluster, where taking down the test cluster isn't an issue. Obviously, we haven't built this yet. Thank you for the background. Makes sense",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7015#issuecomment-540035311:316,test,tested,316,https://hail.is,https://github.com/hail-is/hail/pull/7015#issuecomment-540035311,4,['test'],"['test', 'tested', 'testing']"
Testability,"> @akotlar : @danking and I discussed this in person and we can add the test once the service account infrastructure is in place in Batch. Until then, this approach will not work. got it, so ready to approve?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5762#issuecomment-479632064:72,test,test,72,https://hail.is,https://github.com/hail-is/hail/pull/5762#issuecomment-479632064,1,['test'],['test']
Testability,"> @akotlar Ok, so I finally managed to remove the internal requests. The asyncio learning curve was higher than I expected.; > ; > The final product is a lot tighter than I expected. I eliminated all the run_forever and run_once stuff, all the threading, and I was able to move the log back into server.py.; > ; > It involves three new things:; > ; > * [kill the whole loop if anything goes wrong](https://github.com/hail-is/hail/pull/5844/files#diff-14c16d042ba8b8608b60b3fcd1029869R899), which works wonderfully with k8s' automatic pod restarting; > * [use a concurrent thread pool](https://github.com/hail-is/hail/pull/5844/files#diff-14c16d042ba8b8608b60b3fcd1029869R904) for any legacy blocking operations; > * [a blocking-to-async convertor](https://github.com/hail-is/hail/pull/5844/files#diff-14c16d042ba8b8608b60b3fcd1029869R823) and a [blocking iterator to async iterator](https://github.com/hail-is/hail/pull/5844/files#diff-14c16d042ba8b8608b60b3fcd1029869R828) both of which stick blocking operations on a separate thread pool.; > ; > Legacy blocking operations might end up queueing behind one another in the ""blocking pool"", but the rest of the application continues without interruption on the main event loop.; > ; > I took the chance to reorder the k8s refresh and the k8s watch functions to be closer together, but that made the diff worse :/.; > ; > Probably demands another review on Monday.; > ; > cc: @cseed, possibly some asyncio engineering best practices in this. Awesome work. I think this will make batch much more performant.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5844#issuecomment-482761679:282,log,log,282,https://hail.is,https://github.com/hail-is/hail/pull/5844#issuecomment-482761679,1,['log'],['log']
Testability,> @tpoterba do we think this is the actual cause of the 2.4.2 incompatibility?. Didn't you see things fail on initialization? That's not related to serialization. > how do we verify this fixes the issues our users are seeing?. The people seeing those errors are using jars not compiled for the version of Spark (and json4s) they have installed. I don't think we need to test for this case.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5958#issuecomment-486844526:370,test,test,370,https://hail.is,https://github.com/hail-is/hail/pull/5958#issuecomment-486844526,1,['test'],['test']
Testability,"> @tpoterba the changes you proposed cause tests to fail (OrderingSuite.testBinarySearchOnDict) . Also, I'm confused by the proposal, because arrayRep has no fundamental type, and while we could add one, the fundamental types in PSet and PDict were constructed differently in master (PSet's elementType is not necessarily a PStruct in master). > edit: Ah, I think I misunderstood, you wanted override val fundamentalType: PArray = arrayRep.fundamentalType I think. I could place a lazy fundamentalType on arrayRep that used whatever elementType was defined, and completely remove fundamentalType from PSet and PDict. Actually, you can set the fundamentalType on PCanonicalArrayBackedCollection. That seems best.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7687#issuecomment-565585194:43,test,tests,43,https://hail.is,https://github.com/hail-is/hail/pull/7687#issuecomment-565585194,2,['test'],"['testBinarySearchOnDict', 'tests']"
Testability,> Activating the service account in the test locally screwed up my local permissions. Need to fix before merging. sounds good,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5762#issuecomment-479579007:40,test,test,40,https://hail.is,https://github.com/hail-is/hail/pull/5762#issuecomment-479579007,1,['test'],['test']
Testability,"> Also all the tests need to be fixed. Yep, working on it. Serialization failures.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6083#issuecomment-491423599:15,test,tests,15,https://hail.is,https://github.com/hail-is/hail/pull/6083#issuecomment-491423599,1,['test'],['tests']
Testability,"> Are there tests for the existence of these files? (I can see how that would be counterproductive if tests fail because the files move, but on the other hand, it's information you may want to know - maybe an ""optional"" test?). Not currently, that may be something worth looking into.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9693#issuecomment-724956223:12,test,tests,12,https://hail.is,https://github.com/hail-is/hail/pull/9693#issuecomment-724956223,3,['test'],"['test', 'tests']"
Testability,> But if we move later to hosting logs in user-provided buckets instead of our own bucket there's no reason why they shouldn't be able to write large logs if they want to. Good point. I'll think about this more once I've done a bit more research.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12852#issuecomment-1570847814:34,log,logs,34,https://hail.is,https://github.com/hail-is/hail/issues/12852#issuecomment-1570847814,2,['log'],['logs']
Testability,"> Calls to Region's constructors should only be in tests or by the RVDContext. Also, I think Region() is still called in the WriteableRegionValue constructor.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3301#issuecomment-379274927:51,test,tests,51,https://hail.is,https://github.com/hail-is/hail/pull/3301#issuecomment-379274927,1,['test'],['tests']
Testability,"> Can you lock down this behaviour with a test?. As I said in the description, I tried hard to write a test, but I couldn't manage to find a way to exercise this with a targeted test. And this bug is currently blocking a user, so I want to get it released asap. I can try again, but I suspect it would end up being a day or two of extra work, and would likely still end up brittle and unsatisfactory. I'd rather spend my effort getting back into the line of work that would eventually make it much easier to target specific compiler code paths.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14673#issuecomment-2338662541:42,test,test,42,https://hail.is,https://github.com/hail-is/hail/pull/14673#issuecomment-2338662541,3,['test'],['test']
Testability,> Can you make the same change to benchmark/Makefile?. Sure. I plan to remove wheel generation from benchmark/Makefile as we don't use it anymore.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13957#issuecomment-1792680812:34,benchmark,benchmark,34,https://hail.is,https://github.com/hail-is/hail/pull/13957#issuecomment-1792680812,2,['benchmark'],['benchmark']
Testability,"> Can you share the long term vision for this page? Will notebook become a generic `app.hail.is` with many tabs? Changing the index page to a page with no content seems strictly less helpful to the user. They must make an extra click after they type `notebook.hail.is` into their URL bar to get to a login form. If I was the user, I'd want to get dumped right into the log-in form (but maybe I'm a weird user?). Notebook will host the batch stuff. I have no comments about vision longer term than that, it's undefined as far as I know (meaning, I don't know). We can get rid of the home page as well. I ran the home page idea by @cseed but maybe I misunderstood.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5452#issuecomment-468711409:300,log,login,300,https://hail.is,https://github.com/hail-is/hail/pull/5452#issuecomment-468711409,2,['log'],"['log-in', 'login']"
Testability,> Cotton has a vcf he generated for testing BGZipCodec: see BGZipCodecSuite. This has a lot of the edge cases. I'll tabix it and see what happens.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9304#issuecomment-676510464:36,test,testing,36,https://hail.is,https://github.com/hail-is/hail/pull/9304#issuecomment-676510464,1,['test'],['testing']
Testability,"> Crash on trying to create a notebook. I looked into this. The notebook launch failed because your account in my namespace isn't complete, it can only login, but doesn't have the other secrets necessary to launch a notebook (e.g. gsa-key).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7064#issuecomment-532273328:152,log,login,152,https://hail.is,https://github.com/hail-is/hail/pull/7064#issuecomment-532273328,1,['log'],['login']
Testability,"> DOC: Update what's new for 8.10</li>; <li><a href=""https://github.com/ipython/ipython/commit/385d69325319a5972ee9b5983638e3617f21cb1f""><code>385d693</code></a> Merge pull request from GHSA-29gw-9793-fvw7</li>; <li><a href=""https://github.com/ipython/ipython/commit/e548ee23ac460a99901f1cd43b94ae84a35ec393""><code>e548ee2</code></a> Swallow potential exceptions from showtraceback() (<a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13934"">#13934</a>)</li>; <li><a href=""https://github.com/ipython/ipython/commit/0694b08b436203817059ec7e7136cf8561a6f013""><code>0694b08</code></a> MAINT: mock slowest test. (<a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13885"">#13885</a>)</li>; <li><a href=""https://github.com/ipython/ipython/commit/865591252a67c6907fe03228b4053305715286e6""><code>8655912</code></a> MAINT: mock slowest test.</li>; <li><a href=""https://github.com/ipython/ipython/commit/a011765b44febfb11bae122d2ed7db763621ac8f""><code>a011765</code></a> Isolate the attack tests with setUp and tearDown methods</li>; <li><a href=""https://github.com/ipython/ipython/commit/c7a9470e540392c575aac46c3ee5cf4fe5123eb1""><code>c7a9470</code></a> Add some regression tests for this change</li>; <li><a href=""https://github.com/ipython/ipython/commit/fd34cf5f1f6e243243c738c6e0cf62eb682c4d68""><code>fd34cf5</code></a> Swallow potential exceptions from showtraceback()</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.34.0...8.10.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.34.0&new-version=8.10.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger ",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12683:1656,test,tests,1656,https://hail.is,https://github.com/hail-is/hail/pull/12683,1,['test'],['tests']
Testability,"> Did you copy the the oath2 key to your namespace? You need to do that for the auth service to boot. This is probably a cascaded failure because auth is down. I think I have what I need. I have a ~/.hail/token and ~/.hail/tokens.json. The token file looks like a jwt, decodes to ""email"": ""ako"" followed by some low-ascii characters. . Before I ran this I logged in using hailctl auth login.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7064#issuecomment-532256223:356,log,logged,356,https://hail.is,https://github.com/hail-is/hail/pull/7064#issuecomment-532256223,2,['log'],"['logged', 'login']"
Testability,"> Did you ssh to CI, start a python session, start a batch client, and delete it in that manner?. Yes. And the CI status (https://ci.hail.is/watched_branches/0/pr/6561) continued to error out with 500s (caused by batch lookup 404s in the logs) even after a heal loop.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6582#issuecomment-509627134:238,log,logs,238,https://hail.is,https://github.com/hail-is/hail/issues/6582#issuecomment-509627134,1,['log'],['logs']
Testability,"> Even this may be expensive. This would all be staged. The generated code would just directly allocate into the provided region, no overhead. But I agree we should benchmark first.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9106#issuecomment-661890102:165,benchmark,benchmark,165,https://hail.is,https://github.com/hail-is/hail/pull/9106#issuecomment-661890102,1,['benchmark'],['benchmark']
Testability,> Example output in logs:; > ; > ```; > INFO: timing is.hail.backend.BackendHttpHandler#handle x$3 total 1m42.0s self 20.824ms children 1m42.0s %children 99.98%; > is.hail.backend.BackendHttpHandler#handle x$3/is.hail.expr.ir.IRParser.parse_value_ir total 179.902ms self 157.170ms children 22.733ms %children 12.64%; > is.hail.backend.BackendHttpHandler#handle x$3/is.hail.expr.ir.IRParser.parse_value_ir/is.hail.expr.ir.TypeCheck.apply total 22.733ms self 22.733ms children 0.000ms %children 0.00%; > is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute total 1m41.8s self 3.404ms children 1m41.8s %children 100.00%; > is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.TypeCheck.apply total 0.211ms self 0.211ms children 0.000ms %children 0.00%; > is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.analyses.SemanticHash.apply total 31.924ms self 6.413ms children 25.511ms %children 79.91%; > is.hail.backend.BackendHttpHandler#handle x$3/is.hail.backend.spark.SparkBackend#execute/is.hail.expr.ir.analyses.SemanticHash.apply/is.hail.expr.ir.NormalizeNames.apply total 25.511ms self 25.511ms children 0.000ms %children 0.00%; > ```. I'm going to change from `sourcecode.Enclosing` to something a little more compact in a subsequent change.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14731#issuecomment-2417815038:20,log,logs,20,https://hail.is,https://github.com/hail-is/hail/pull/14731#issuecomment-2417815038,1,['log'],['logs']
Testability,"> FYI @tpoterba rather than just testing them independently, it might be worthwhile to have write/read interop tests between the various backends. Spark to local is partially tested by the pre-existing (matrix)tables tests, but not the other way. Agreed, this is a good idea.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9596#issuecomment-707898595:33,test,testing,33,https://hail.is,https://github.com/hail-is/hail/pull/9596#issuecomment-707898595,4,['test'],"['tested', 'testing', 'tests']"
Testability,> Failing tests for real. it makes me sad we have to clarify :(,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8156#issuecomment-594140056:10,test,tests,10,https://hail.is,https://github.com/hail-is/hail/pull/8156#issuecomment-594140056,1,['test'],['tests']
Testability,"> First, I'm seeing transient (but common, maybe 10% of the time?! Have you seen this before, Jackie?) gsutil errors in the setup/cleanup containers that look like: [Errno 2] No such file or directory. Nope. But I didn't run many tests with setup/cleanup containers actually doing anything.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7445#issuecomment-549184176:230,test,tests,230,https://hail.is,https://github.com/hail-is/hail/pull/7445#issuecomment-549184176,1,['test'],['tests']
Testability,"> Having the Auth service ping the Batch API with it to verify the token is valid. I believe the way our CRSF is implemented, we don't actually ever ""validate"" the tokens, we only check that the token in the formdata matches the token in the cookie. > Or perhaps we could just make this UI a single page application instead of a bunch of pages on different subdomains that resemble one. . This would be wonderful! Sort of similar-but-better to my thought of hosting the ""top menu bar"" as a separate iframe that always comes from auth. For the same reason (in particular, the apparently lack of regular usage of the logout button), that kind of change is probably larger than the scope of getting this bug fixed... but would cool to look into some day!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14639#issuecomment-2269645369:615,log,logout,615,https://hail.is,https://github.com/hail-is/hail/pull/14639#issuecomment-2269645369,1,['log'],['logout']
Testability,"> Hmm, flake is failing on this; > ; > ```; > + flake8 batch; > batch/server/__init__.py:1:1: F401 '.server.serve' imported but unused; > batch/server/__init__.py:1:1: F401 '.server.run_once' imported but unused; > ```; > But that's an incorrect bug. I wonder if the CI is loading the wrong python version. I'll check. Strange. .serve is unmodified from master; run_once is only used in a test, could that be an issue?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5065#issuecomment-451274130:389,test,test,389,https://hail.is,https://github.com/hail-is/hail/pull/5065#issuecomment-451274130,1,['test'],['test']
Testability,> Hmm. Is the TODO suggesting that we assert the state field is READY in the response?. I handled the other states and removed the TODO,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13944#issuecomment-1971996799:38,assert,assert,38,https://hail.is,https://github.com/hail-is/hail/pull/13944#issuecomment-1971996799,1,['assert'],['assert']
Testability,"> How did you verify only one is created?. I printed in the ReferenceGenome constructor. I guess it could have been serialized, but the issues I was seeing were all on the master, and I don't see how it could have been. I haven't succeeded in making an isolated test case that motivates this change. @chrisvittal has a complicated joint calling pipeline that fails. However, we define equality on ReferenceGenome in terms of value quality, and I think unify should use the same notion of equality so this look like a bug on the face of it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5471#issuecomment-469322872:262,test,test,262,https://hail.is,https://github.com/hail-is/hail/pull/5471#issuecomment-469322872,1,['test'],['test']
Testability,"> I believe you're referencing Chrome Bug 675308 which suggests that lines thicker than 1 are broken in some versions of Chrome. My change uses line width 1. My point was that there are browser inconsistencies. > The screenshots you shared seem to suggest that Brave is making the lines somewhat fainter than Safari. I can't explain that. . I also can't explain it, and haven't found a Safari bug that would suggest why this is the case, and yet it is clear from that screenshot that there is a difference. > It feels brittle to fiddle with device pixel ratio and line width to try and simulate line widths smaller than a pixel. My current mental model is that we're just hitting a resolution issue. Internally threejs I believe sets the webgl buffer to pixelRatio * width/height. With resolution 1, resolution seems too low, and this causes fuzzy lines. I don't know why it doesn't work better. To test this hypothesis, I've tried setting pixelRatio to 1 manually on a hidpi display, and it gave a similar fuzzy/thick result, which of course doesn't make any sense if linewidth actually did what it seems it should, and so I agree that not relying on linewidth would be nicer, but would also be additional work.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8964#issuecomment-646227792:899,test,test,899,https://hail.is,https://github.com/hail-is/hail/pull/8964#issuecomment-646227792,1,['test'],['test']
Testability,"> I can't make create idempotent, it returns a fresh batch id. I'm saying we can (and should, for all such requests) make /batches/create idempotent by having the client generate a random token that it includes in the POST request to create a batch. The create batch code then first checks a batch exists with the random string and returns that id if it exists before deciding to create a fresh batch. > I did make jobs/create idempotent, but if you have 10M jobs, I don't want the client to regenerate a 10M job DAG (which takes longer than the submits do). I'm not sure I understand the alternative you're considering in the second half of this statement. > A missing internet connection is apparently considered ""transient"". Yes. Transient just means the expectation is that the error will eventually go away. Most computers usually get hooked up to the internet again. My mental model for transient errors is like this: there are two types of transient errors, short and long. Short transient errors occur sporadically with some very low probability p (so that two such such transient errors will almost occur twice in a row). The other is a long transient error like a service going down and waiting for a liveness check to notice and restart, internet connection going down, or laptop being losing wifi connection, being moved, etc. For the first type, you want to retry immediately. For the second, you want to retry with exponential backoff. I think the PR that introduced logging for retry went in when I was gone. I think it should follow the same strategy: I would log always on the second failure, and then with exponential backoff. Same with the batch client. > I allow the user to say they don't want that. Fine. I'm saying I want the default to be infinite. I doubt anyone will ever change it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7875#issuecomment-574400367:1481,log,logging,1481,https://hail.is,https://github.com/hail-is/hail/pull/7875#issuecomment-574400367,2,['log'],"['log', 'logging']"
Testability,"> I can't reproduce this. Can you give me more details? Where are you running it? Note, my namespace is running a different branch that I'm working on (e.g. the menu stuff which doesn't include these changes.). Makes sense. Could you update the branch in your namespace? If not I can check tomorrow in mine. > Is this in my namespace? I don't have CI or Batch deployed. Let me know if you want to test it there and I'll spin up this branch. Is it not working in your namespace?. Got it. It's just that these changes affect CI and Batch, so I would like to quickly glance at a working example. Again, can do this tomorrow in my namespace. Not entirely comfortable with dev deploy yet, so want to try it when I'm less tired. Sounds like this will go in tomorrow",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7145#issuecomment-536244757:397,test,test,397,https://hail.is,https://github.com/hail-is/hail/pull/7145#issuecomment-536244757,1,['test'],['test']
Testability,"> I do not understand why, but, by default, no messages are printed. Hmm, it looks to me like the default is to print (for WARN and above) the message with no further format:. ```; $ cat foo.py; import logging. log = logging.getLogger('test'). log.info('info'); log.warning('warning'); log.error('error'); $ python3 foo.py; warning; error; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7990#issuecomment-579976077:202,log,logging,202,https://hail.is,https://github.com/hail-is/hail/pull/7990#issuecomment-579976077,7,"['log', 'test']","['log', 'logging', 'test']"
Testability,"> I don't see what the test_instance database is buying you. CI needs the ability to create databases. In production, it gets this power from the default/database-server-config that has the database root credentials that was set up by hand with the cluster and the database. Now, that means for CI to run in the tests, the default namespace needs a database-server-config. We used to copy the production one, giving the tests root in the database. Not good. Instead what I do is create a new database, call test_instance, and use the test instance credentials to create database-server-config. Now, you can't create databases within this database, but you can create tables and do other happy database stuff. So test_instance is the database that the test CI is going to give out when it needs to create databases. That means CI roughly needs to know if it can create databases (it is root) or it has a database but can't create ones (e.g. test CI), in which the create database step needs to do slightly different things. Does that help?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7683#issuecomment-562888944:312,test,tests,312,https://hail.is,https://github.com/hail-is/hail/pull/7683#issuecomment-562888944,5,['test'],"['test', 'tests']"
Testability,"> I don't see where the instance version gets checked. I assume if you're scheduling a v2 batch, you should check it is a v2 instance, no? Just to confirm the migration plan: we'll merge this, then once all the instances have flipped to v2, then we make another PR that changes the format to v2?. I thought we discussed this and decided we'll merge, wait for instances to flip to 2, and then merge the second pr to flip the batch format to 2. > Want to confirm the testing plan. You've tested this with batch format v1 (this PR), batch format v2, and tested the migration (that is, switching from master to this PR with batch format v1). I tested it from v1 -> v2. Forgot to test switching from master to v1. Will do once you're happy with the code, and will repeat the other tests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7949#issuecomment-578182332:465,test,testing,465,https://hail.is,https://github.com/hail-is/hail/pull/7949#issuecomment-578182332,6,['test'],"['test', 'tested', 'testing', 'tests']"
Testability,"> I got frustrated with ./gradlew testPython because it requires SPARK_HOME to be set. Can't we just require pyspark 2.2 to be pip-installed and remove that stuff? Should work. I need a bit of time to digest. I was under the impression we were using a pytest recommended layout, and going back to the doc you linked, we have the recommended structure under ""Tests outside application code"":. ```; setup.py; mypkg/; __init__.py; app.py; view.py; tests/; test_app.py; test_view.py; ...; ```. It looks like the `src/` structure is recommended in the following case:. > ... This is problematic if you are using a tool like tox to test your package in a virtual environment, because you want to test the installed version of your package, not the local code from the repository. > In this situation, it is strongly suggested to use a src layout where application root package resides in a sub-directory of your root:. Digging a little bit more, the pytest page references [this blog](https://blog.ionelmc.ro/2014/05/25/python-packaging/#the-structure) for reasons to use `src/`. But some of the comments indicate that `pip install -e` won't work with this structure, since the symlink it creates will be incorrect. It's possible this has been fixed since the issues were posted in 2012. I like the arguments there about testing the installed package so that the deploy is also tested. My reluctance mostly comes from knowing that I spend an hour trying to reconfigure intelliJ every time our directory structure changes. Let's discuss today. As above, I think this is fine but want to think over it a bit more.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5130#issuecomment-454397503:34,test,testPython,34,https://hail.is,https://github.com/hail-is/hail/pull/5130#issuecomment-454397503,7,"['Test', 'test']","['Tests', 'test', 'testPython', 'tested', 'testing', 'tests']"
Testability,"> I kinda prefer a fresh file with freshly written tests? I feel like it's a bit hard to get a total view of what is and is not tests when we're using annotations. I agree a single file feels nice, but I'm a little hesitant to copy paste tests. Unless you think I should move where these tests are? That also feels weird. Does the following pytest invocation make you feel better about markers?. ```; (hail) dgoldste@wmce3-cb7 hail % pytest --collect-only -m qobtest hail/python/test; ============================================================================== test session starts ===============================================================================; platform darwin -- Python 3.9.17, pytest-7.4.0, pluggy-1.3.0; rootdir: /Users/dgoldste/hail/hail/python/test; configfile: pytest.ini; plugins: anyio-4.0.0, xdist-2.5.0, instafail-0.5.0, timeout-2.1.0, devtools-0.12.2, asyncio-0.21.1, timestamper-0.0.9, metadata-3.0.0, html-1.22.1, forked-1.6.0; asyncio: mode=auto; collected 8218 items / 8133 deselected / 85 selected. <Package hail>; <Module test_context.py>; <Function test_init_hail_context_twice>; <Function test_top_level_functions_are_do_not_error>; <Function test_tmpdir_runs>; <Module test_randomness.py>; <Function test_table_explode>; <Package backend>; <Module test_service_backend.py>; <Function test_tiny_driver_has_tiny_memory>; <Function test_big_driver_has_big_memory>; <Function test_tiny_worker_has_tiny_memory>; <Function test_big_worker_has_big_memory>; <Function test_regions>; <Package expr>; <Module test_expr.py>; <UnitTestCase Tests>; <TestCaseFunction test_aggregators>; <TestCaseFunction test_densify_table>; <TestCaseFunction test_scan>; <Package genetics>; <Module test_reference_genome.py>; <Function test_reference_genome>; <Function test_reference_genome_sequence>; <Function test_reference_genome_liftover>; <Function test_read_custom_reference_genome>; <Package matrixtable>; <Module test_grouped_matrix_table.py>; <UnitTestCase Tests>; <TestCaseFunct",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13620#issuecomment-1720268851:51,test,tests,51,https://hail.is,https://github.com/hail-is/hail/pull/13620#issuecomment-1720268851,7,['test'],"['test', 'tests']"
Testability,"> I made changes to TBaseStruct, etc. so that types is now a val. I timed it locally for profile225 with import_vcf().count() and compared it with master. Ah, yeah, I totally misread that and thought it was timing read/count. We do need to test that -- this change involves making `types` a virtual function call rather than an array reference. I assume the JIT will make it fast, but we need to be sure since that's used in critical places.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2922#issuecomment-368346661:240,test,test,240,https://hail.is,https://github.com/hail-is/hail/pull/2922#issuecomment-368346661,1,['test'],['test']
Testability,"> I should fix it!. That'd be awesome!. Yes, the steps are steps from build.yaml. Some background on the current setup, there are two classes of deployed stuff: normal, and ""infrastructure"". Infrastructure is stuff that can't be virtualized (or we've chosen not to) within the k8s cluster and can't be tested with the current CI setup. An example is gateway, that binds the live IP address for hail.is. Infrastructure will need a ""meta"" testing setup that will spin up another k8s cluster or testing in a separate staging cluster, where taking down the test cluster isn't an issue. Obviously, we haven't built this yet.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7015#issuecomment-540031541:302,test,tested,302,https://hail.is,https://github.com/hail-is/hail/pull/7015#issuecomment-540031541,4,['test'],"['test', 'tested', 'testing']"
Testability,"> I tested that this will succeed with `kubectl can-i --as system:serviceaccount:batch-pods:deploy-svc delete pvc -n test` and `-n batch-pods`. Don't ask my how I found out that the syntax to refer to the deploy-svc service account was that. I don't even remember where I stumbled across that. Yeah, that's some dark magic Dan 👍",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5502#issuecomment-468728890:4,test,tested,4,https://hail.is,https://github.com/hail-is/hail/pull/5502#issuecomment-468728890,2,['test'],"['test', 'tested']"
Testability,"> I tested this with a pile of hacks to deploy this into an anonymous namespace in vdc. I'm not ready to PR those changes, they need a clean up before others use them. Sometime next week I hope to get that in. Getting it requires some restructuring of vdc/ and gateway/ to be more modular. Oh, I read that as you weren't ready to merge this. It sounds like you aren't ready to PR the testing stuff?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4974#issuecomment-447373995:4,test,tested,4,https://hail.is,https://github.com/hail-is/hail/pull/4974#issuecomment-447373995,2,['test'],"['tested', 'testing']"
Testability,"> I think pretty strongly that if nPreservedFields==0, you've done something very wrong. I don't disagree, but if you're concerned about this, I think an assert here is both in the wrong place and the wrong solution. I think for the design the IR, we should focus on (1) simple operations (this is already more complicated than I'd like), (2) that are composable, and (3) minimize special cases. By composability, I mean each IR should have a (local) contract, and each program composed from that local contract should be valid. Breaking this introduces a lot of potential bugs that can't be reasoned about locally, which is not good. The IR nodes do what they do. If you don't like what they do, we should probably find different ones. > so how could you possibly join this with another table? You'd have to create a single partition, and we'd never want to do that. Yeah, create a single partition. Or reshuffle if the partitioner has too little information. How much is too little? What if nPreservedFields==1 and we're down to 1 partition? Should that be an error? 2 partitions? How many partitions is too few? Any time nPreservedFields is less than the requested keys, you could get down to 1 partition. This is a continuous issue and rejecting the extreme case doesn't actually solve the problem. I guess isSorted isn't user exposed, but this seems dangerously close to reporting a user error with an assertion. When the service comes up, hopefully not too long, we're going to want to document the IR and make it public. So if we want to reject this case, we should do it early on: when the IR is parsed and/or constructed. (In general I think to give a nice experience we're going to have to do more up-front validation.) This is what I mean when I say ""find another IR"". In summary:; - If we're going to have this assertion, it needs to be in TableKeyBy constructor, and; - This is a complex and serious issue that isn't actually solved by your assertion.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8649#issuecomment-622415940:154,assert,assert,154,https://hail.is,https://github.com/hail-is/hail/pull/8649#issuecomment-622415940,4,['assert'],"['assert', 'assertion']"
Testability,"> I tried making a plot with only shape, not color. It should behave the same as color (in the discrete case), only using shapes instead of colors, but right now the legend uses ""trace 0"" etc. instead of the data values. I was able to get the category names showing properly in the legend with just shapes by adding a `shape_legend -> name` mapping to `GeomPoint.trace_args`, but this caused the shape names to override the color names when using both; I added logic to `Geom._add_aesthetics_to_trace_args` to concatenate the names with one legend entry per pair of color and shape, which causes the shapes to stop working and a separate color to be assigned to each legend entry. ```python; import hail as hl; from hail.ggplot import ggplot, aes, geom_point; ht = hl.utils.range_table(10); ht = ht.annotate(squared=ht.idx ** 2); ht = ht.annotate(even=hl.if_else(ht.idx % 2 == 0, ""yes"", ""no"")); ht = ht.annotate(threeven=hl.if_else(ht.idx % 3 == 0, ""good"", ""bad"")); fig = (; ggplot(ht); + aes(x=ht.idx, y=ht.squared, color=ht.even, shape=ht.threeven); + geom_point(); ); fig.show(); ```. ![newplot(1)](https://user-images.githubusercontent.com/84595986/191850065-fa9cf15a-44b5-48cc-ad95-47af67d76ec1.png). I'm having trouble tracking down why this is happening, so I'll ask for some help with that tomorrow.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12207#issuecomment-1255544008:461,log,logic,461,https://hail.is,https://github.com/hail-is/hail/pull/12207#issuecomment-1255544008,1,['log'],['logic']
Testability,"> I'd propose to do an implicit dependency audit every time you push a new commit. > You can still pin versions on published packages, but use unpinned dependencies for CI testing. I think our only option here would be to test twice -- once with the major versions we explicitly depend on, and once with unbounded versions. I don't really like this model, since it basically couples breaking changes in other tools to Hail commits, which isn't how it actually works. I'd much prefer a weekly cron job that tries to update dependencies, I think, but that thing isn't trivial to build.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7299#issuecomment-542222446:172,test,testing,172,https://hail.is,https://github.com/hail-is/hail/issues/7299#issuecomment-542222446,2,['test'],"['test', 'testing']"
Testability,"> I'm confused even more. I thought test_instance was a database within db-gh0um the same as all of the other databases within db-gh0um. Is this a separate cloud sql instance?. Correct. No. test_instance is a database that conceptually an instance, in that it is used to satisfy ""create database"" requests in test CI, but just gives out test_instance as the ""created"" database without any isolation.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7683#issuecomment-562890518:309,test,test,309,https://hail.is,https://github.com/hail-is/hail/pull/7683#issuecomment-562890518,1,['test'],['test']
Testability,"> I'm confused. What do you mean by this? Are you planning on using Dan's version of notebook (the rainbow gradient notebook.hail.is), or mine? If Dan's, he and I spoke about it, and he specifically stated that his version of Notebook is no longer needed, which is why I deleted the existing notebook. My apologies, @danking was wrong. I'm currently planning to use Dan's version because yours isn't ready. If yours is ready, I will use it. What does ready mean? From our recent email:. - it needs to get in master,; - and and integrated with our CI/CD (we can't be fixing issues and doing manual deployments leading up to or during a tutorial),; - it need to be beaten on by the team to look for issues (including scale issues), and; - it needs to be scale tested (@danking has a script for the old one that fires up N notebooks and reports any failures and summarizes the latency to notebook available),; - @tpoterba and I need to be comfortable enough with it we have confidence we can fix issues that arise during the tutorial. I probably also need time to review the workshop auth flow since I think that changed. If we're requiring login, we'll need to support more social login providers and/or email/password.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5215#issuecomment-464229358:758,test,tested,758,https://hail.is,https://github.com/hail-is/hail/pull/5215#issuecomment-464229358,3,"['log', 'test']","['login', 'tested']"
Testability,"> I'm going to start testing, but I think the only thing that wasn't clear to me was how to resolve these sorts of comments. Do I try and fix them now or in a separate PR with an issue to make sure it gets noted? [#14170 (comment)](https://github.com/hail-is/hail/pull/14170#discussion_r1473442106). Since this is merely propagating existing bad behavior, let's change it separately so as to keep the conceptual overhead of this change as small as possible. Please make an issue and paste the link into each comment so that we can later track how we resolved each comment. . > Ok. Still working on getting the tests to pass and cleaning things up. However, I ran into a small snag. The code below needs to be ironed out. Should the number of jobs and state of the job group be recursive or specific to that job group? It's a bit weird for the billing and cancellation to be nested, but the number of jobs etc. are not. More concretely, if a child batch is running, should the parent also be running even if it has no direct child jobs that are running? Thoughts?; > ; > cc: @daniel-goldstein; > ; > ```sql; > UPDATE batches SET; > `state` = 'running',; > time_completed = NULL,; > n_jobs = n_jobs + expected_n_jobs; > WHERE id = in_batch_id;; > ; > ### FIXME FIXME what should the state be of nested job groups?; > UPDATE job_groups; > INNER JOIN (; > SELECT batch_id, job_group_id, CAST(COALESCE(SUM(n_jobs), 0) AS SIGNED) AS staged_n_jobs; > FROM job_groups_inst_coll_staging; > WHERE batch_id = in_batch_id AND update_id = in_update_id; > GROUP BY batch_id, job_group_id; > ) AS t ON job_groups.batch_id = t.batch_id AND job_groups.job_group_id = t.job_group_id; > SET `state` = 'running', time_completed = NULL, n_jobs = n_jobs + t.staged_n_jobs;; > ```. When you say ""billing and cancellation [is] nested"" do you mean that the bill for a group is the sum of the bill for all jobs directly in the group with all jobs in any descendent group?. Since we decided that groups are nested, my inclinatio",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14170#issuecomment-1940341021:21,test,testing,21,https://hail.is,https://github.com/hail-is/hail/pull/14170#issuecomment-1940341021,2,['test'],"['testing', 'tests']"
Testability,"> I'm not sure I understand. `hail/python/hail/docs/_templates/layout.html` references `/navbar.css` which should be present on the deployed site. I might misunderstand `conf.py`, but, AFAICT, this makes unused copies of navbar.css and the PNG: https://hail.is/docs/0.2/navbar.css and https://hail.is/docs/0.2/hail-logo-cropped.png. The page at https://hail.is/docs/0.2/ loads `hail.is/navbar.css`. Sorry, ignore, I misread the comment. Agreed",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8956#issuecomment-644228546:315,log,logo-cropped,315,https://hail.is,https://github.com/hail-is/hail/pull/8956#issuecomment-644228546,1,['log'],['logo-cropped']
Testability,"> I'm not sure what you mean by this. Also, were we just not type checking MatrixIR, etc. before? Was there a reason for this? I thought @patrick-schultz was working on something to do with type checking. Currently, typechecking assertions happen in the constructors of relational IRs. This will consolidate typechecking nicely. The expression problem strikes again!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5443#issuecomment-467677829:229,assert,assertions,229,https://hail.is,https://github.com/hail-is/hail/pull/5443#issuecomment-467677829,1,['assert'],['assertions']
Testability,"> I'm ready to merge this. Woohoo!. I'm in a state of deep depression about the replicability of benchmarks right now. They seem (subjectively) even more noisy from run to run than things were six months ago. This could be 1-2% slower overall, or identical to main -- I can't tell, since benchmarks of main vary by nearly 5% from day to day. Either way, I'm good to merge this even with the worst-case 2% degradation. Progress toward stack struct is worth it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9868#issuecomment-763075785:97,benchmark,benchmarks,97,https://hail.is,https://github.com/hail-is/hail/pull/9868#issuecomment-763075785,2,['benchmark'],['benchmarks']
Testability,"> I'm seeing issues creating notebooks (500). I can't reproduce this. Can you give me more details? Where are you running it? Note, my namespace is running a different branch that I'm working on (e.g. the menu stuff which doesn't include these changes.). > reaching CI and Batch (502). Is this in my namespace? I don't have CI or Batch deployed. Let me know if you want to test it there and I'll spin up this branch. Is it not working in your namespace?. > Notebook2 link should be changed to redirect to notebook 1. There should be no notebook2 links. I just grepped through the entire codebase, I didn't find anything. We're not asking for notebook2 certs anymore. Notebook2 is dead, long live notebook. Nobody is using it besides us, so I don't see any need for maintaining backward compatibility. In particular, if/when we make this more widely available, there shouldn't be anything2.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7145#issuecomment-536150091:373,test,test,373,https://hail.is,https://github.com/hail-is/hail/pull/7145#issuecomment-536150091,1,['test'],['test']
Testability,"> If this fix makes UK Biobank import too slow. Looks good, that's my only concern. With the persist, I think it should be OK, but can we benchmark to verify? A before/after `bgen_import().count()` on a small but non-trivial example should suffice. We'll be running again soon rather than later, esp. since we just got approved for all the phenotypes (!)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2239#issuecomment-334154778:138,benchmark,benchmark,138,https://hail.is,https://github.com/hail-is/hail/pull/2239#issuecomment-334154778,1,['benchmark'],['benchmark']
Testability,"> If we ever ban old versions of Hail from the cluster, then we can also eliminate the log4j2 reconfiguration. New versions of Hail work fine without any runtime log configuration (thanks to QoBAppender). We might want to do this if we get rid of GSA keys. We can't have any more jars that presume the existence of some key file. It would also be a good time to fully delete the `memory` service, even though old jars should be able to tolerate that.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12941#issuecomment-1527963692:162,log,log,162,https://hail.is,https://github.com/hail-is/hail/pull/12941#issuecomment-1527963692,1,['log'],['log']
Testability,"> In particular, the matrixtable available in doc examples as `ds` lives at `hail/hail/python/hail/docs/data/example.mt`. Thanks, this is exactly what I was looking for. I am having trouble testing my new example locally though. When I run `make -C hail doctest-query`, the tests fail with a checksum error. I tried running `make -C hail clean` and retrying, but I still get the same error. ```; E hail.utils.java.FatalError: ChecksumException: Checksum error: file:/Users/willtyler/Desktop/hail/hail/python/hail/docs/data/example.8bits.bgen.idx2/metadata.json.gz at 0 exp: 982431825 got: -2031629660; E; E Java stack trace:; E org.apache.hadoop.fs.ChecksumException: Checksum error: file:/Users/willtyler/Desktop/hail/hail/python/hail/docs/data/example.8bits.bgen.idx2/metadata.json.gz at 0 exp: 982431825 got: -2031629660; E 	at org.apache.hadoop.fs.FSInputChecker.verifySums(FSInputChecker.java:347); E 	at org.apache.hadoop.fs.FSInputChecker.readChecksumChunk(FSInputChecker.java:303); E 	at org.apache.hadoop.fs.FSInputChecker.read1(FSInputChecker.java:252); E 	at org.apache.hadoop.fs.FSInputChecker.read(FSInputChecker.java:197); E 	at java.base/java.io.DataInputStream.read(DataInputStream.java:149); E 	at is.hail.io.fs.HadoopFS$$anon$2.read(HadoopFS.scala:58); E 	at java.base/java.io.DataInputStream.read(DataInputStream.java:149); E 	at org.apache.commons.compress.utils.CountingInputStream.read(CountingInputStream.java:56); E 	at java.base/java.io.BufferedInputStream.fill(BufferedInputStream.java:252); E 	at java.base/java.io.BufferedInputStream.read(BufferedInputStream.java:271); E 	at org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.init(GzipCompressorInputStream.java:185); E 	at org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.<init>(GzipCompressorInputStream.java:168); E 	at is.hail.io.fs.GZipCompressionCodec$.makeInputStream(FS.scala:125); E 	at is.hail.io.fs.FS.open(FS.scala:563); E 	at is.hail.io.fs.FS.open$(FS.scala:560); E 	",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14255#issuecomment-1933346001:190,test,testing,190,https://hail.is,https://github.com/hail-is/hail/pull/14255#issuecomment-1933346001,2,['test'],"['testing', 'tests']"
Testability,"> In trying to test this (from your branch, ran pip install on /hail/python just in case). You're running this locally, or with `hailctl dev deploy`? I assume the latter because the former is essentially impossible. ~/.hail/token is no longer used and you can delete it. You'll need a valid tokens.json to run the dev deploy. Once the dev deploy runs, your local configuration is irrelevant. It sounds like your dev deploy was successful. You're getting failures in your deployed services. You need to look into your namespace to debug them. In particular, for auth to run, you're going to need a copy of auth-oauth2-client-secret from the production namespace. To log in inside the dev namespace, you'll have to add the callback to the list of registered callbacks at Google. You can copy mine as an example.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7064#issuecomment-532260285:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/pull/7064#issuecomment-532260285,2,"['log', 'test']","['log', 'test']"
Testability,"> Interesting. When I was helping Sophie earlier, I was able to see them for workers in her namespace??? https://console.cloud.google.com/logs/query;query=resource.type%3D%22gce_instance%22%0AlogName:%22syslog%22%0Alabels.%22compute.googleapis.com%2Fresource_name%22:%22batch-worker-parsa-job-private-39d9d%22;summaryFields=:false:32:beginning;cursorTimestamp=2023-08-27T13:45:49Z;duration=P2D?project=hail-vdc. Are those logs from after the worker container started?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13509#issuecomment-1696127157:138,log,logs,138,https://hail.is,https://github.com/hail-is/hail/pull/13509#issuecomment-1696127157,2,['log'],['logs']
Testability,"> It looks like this deletes notebook. Please do NOT delete notebook. Right now we have no tested alternative and @tpoterba and I need to use it for a workshop in two weeks. I'm confused. What do you mean by this? Are you planning on using Dan's version of notebook (the rainbow gradient notebook.hail.is), or mine? If Dan's, he and I spoke about it, and he specifically stated that his version of Notebook is no longer needed, which is why I deleted the existing notebook. What do you mean by tested? I thought we established that the version of notebook I made worked... it worked for the Feb 5th demo, it worked for Jackie's demo?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5215#issuecomment-464203521:91,test,tested,91,https://hail.is,https://github.com/hail-is/hail/pull/5215#issuecomment-464203521,2,['test'],['tested']
Testability,"> It's a little concerning that this is necessary. Are there typecheck cases that don't make assertions about some of their children?. This check would have to go in a LOT of places otherwise. Reading down from the top: CastRename, NA, IsNA, Coalesce, AggLet, TailLoop, MakeArray, ...",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9974#issuecomment-772079087:93,assert,assertions,93,https://hail.is,https://github.com/hail-is/hail/pull/9974#issuecomment-772079087,1,['assert'],['assertions']
Testability,> It's calling into the db once per job? That's bad. Why does it even need to do that?. That's an easy fix. It's just asserting the job wasn't seen before. Remnants of debugging probably. We can also have a callback that starts all of the jobs not in the create_batch call.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6454#issuecomment-505178184:118,assert,asserting,118,https://hail.is,https://github.com/hail-is/hail/pull/6454#issuecomment-505178184,1,['assert'],['asserting']
Testability,"> It's definitely a bit unclear to met that we got everything and I'm not convinced the test checks everything. I don't think I'd feel much better unless we were randomly restarting the context mid tests. We actually do that -- this test_context runs in the same python process as the other tests. I also think we don't really guarantee you can stop and restart, but this at least makes it work with our tests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5872#issuecomment-484602941:88,test,test,88,https://hail.is,https://github.com/hail-is/hail/pull/5872#issuecomment-484602941,4,['test'],"['test', 'tests']"
Testability,"> Just so I understand correctly (and sorry if this is obvious), the current job logs interface is still the same. But if you want a container's logs, then you'll get bytes which the user will have to decode themselves. How does that affect the file download button in the UI and the hailctl batch logs functionality you have? Will you see text or a random byte string?. Good question. For the download button, the file you download is still a normal text file and I've confirmed that I can download and view a log file as I would expect. For the `hailctl batch logs` functionality, I added logic to the CLI in this PR where I download the bytes of the log and if I can decode it as UTF-8 I do, so it prints exactly as before, and if I can't I just print the bytes.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12666#issuecomment-1426373373:81,log,logs,81,https://hail.is,https://github.com/hail-is/hail/pull/12666#issuecomment-1426373373,7,['log'],"['log', 'logic', 'logs']"
Testability,"> Just starting to explore this PR. I compared this in-progress CI run to 7126798 (from #12737). The time to service backend starting is ~7 minutes. In the other PR, its ~8 minutes. I suppose that's because this PR isn't hitting any caches, right?; > ; > Hmm, it also seems like the critical path to the service backend test is through `build_hail_jar_and_wheel_only`. I wonder if we double the cores, would the time halve? On my laptop a fresh build is like 3m.; > . Ya I really only focus here on docker image steps, not on the overall critical path. But I like the idea of adding more cores I'll try that. The docker images are hitting cache though since every PR caches from its own previous runs in addition to main. The reason some images still take ~1 minute is because they introduce a new layer (normally the hail_version has changed since the SHA has changed) and they spend most of the time localizing the layer that has the dependencies installed (why I want lazy pulling). A retry of this PR should build the images very quickly, though I haven't tried that recently.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12578#issuecomment-1458611223:320,test,test,320,https://hail.is,https://github.com/hail-is/hail/pull/12578#issuecomment-1458611223,1,['test'],['test']
Testability,> Looks like a couple of the reenabled tests are failing now... these seem to be just flaky tests :(,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14721#issuecomment-2407784886:39,test,tests,39,https://hail.is,https://github.com/hail-is/hail/pull/14721#issuecomment-2407784886,2,['test'],['tests']
Testability,"> Looks like we need to set the severity correctly in the worker logs. I'm also seeing a lot of this; WARNING: Published ports are discarded when using host network mode; Also looks like we incorrectly log a ContainerTimeoutError as an error log even though that's a user error: https://cloudlogging.app.goo.gl/TUGWNxnFiBiEdsDo9. For what it's worth, this was showing up as an info log because this is a docker log message not from our code, so it's not going through our logging filters. The reason this showed up in the Google Logging query was because the query included this line; ```; severity=ERROR OR WARNING; ```; which means ""logs whose severity is ERROR or whose log entry contains ""WARNING"""", it is *not* equivalent to `severity=ERROR OR severity=WARNING` which does not show that log entry. Either way, #14252 gets rid of that log message entirely.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14240#issuecomment-1930672702:65,log,logs,65,https://hail.is,https://github.com/hail-is/hail/issues/14240#issuecomment-1930672702,11,"['Log', 'log']","['Logging', 'log', 'logging', 'logs']"
Testability,"> Maybe the doubling of the block size is having a negative effect? Anyway, let's benchmark on something more realistic than the Hail tests and assess. More likely it's replacing the LZ4SizeBased buffer spec with zstd and not using a size based zstd buffer spec. The 0-byte compress time for calling lz4 was really high, so we branch on whether the number of bytes to compress is over a threshold before calling compression methods. We should do the same for zstd.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12981#issuecomment-1537470938:82,benchmark,benchmark,82,https://hail.is,https://github.com/hail-is/hail/pull/12981#issuecomment-1537470938,2,"['benchmark', 'test']","['benchmark', 'tests']"
Testability,"> Maybe we should also use this opportunity to add hailctl to scorecard / remove cloudtools?. yeah, you could replace cloudtools with hailctl dataproc as well. Especially since you need to bump to fix a random test ;)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6449#issuecomment-505070267:210,test,test,210,https://hail.is,https://github.com/hail-is/hail/pull/6449#issuecomment-505070267,1,['test'],['test']
Testability,"> Minor styling fixes as well (Hail logo is tiny). Where is the Hail logo tiny? You mean the ""Hail"" in the center the / page?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7064#issuecomment-532254581:36,log,logo,36,https://hail.is,https://github.com/hail-is/hail/pull/7064#issuecomment-532254581,2,['log'],['logo']
Testability,"> No tests for this right now, although I can write . I think an UnsafeSuite test for this should be easy and effective.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6500#issuecomment-506490357:5,test,tests,5,https://hail.is,https://github.com/hail-is/hail/pull/6500#issuecomment-506490357,2,['test'],"['test', 'tests']"
Testability,"> Not sure what to do about wait for and ghost. rather silly of ghost to refuse connections on http when the base url is set to https. > The test failure that I'm running into currently has to do with the fact that the wait command there queries the endpoint without going through either the router or the gateway, (since it's e.g. hitting http://blog.wang/wang/blog/ directly), so it's getting the 301 redirect to https because the X-Forwarded-Proto header isn't set. I'm not sure what the right fix is in this case. I still don't quite understand why the wait command doesn't hit gateway. Isn't it just issuing an http request to `f'{base_url}/{endpoint)`? Why doesn't that hit gateway?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7381#issuecomment-548104962:141,test,test,141,https://hail.is,https://github.com/hail-is/hail/pull/7381#issuecomment-548104962,1,['test'],['test']
Testability,"> Oh, I misunderstood, I thought you were suggesting changing our FROM to stretch/9.6.; > ; > I think that should be fine, but can we do it as a separate PR since it seems orthogonal to this change which we're trying to get in for the demo tomorrow? (And in general orthogonal changes should be separate PRs so discussion on one part doesn't hold up the other parts.). Yes, although the gzip settings issued in this pr will be different between the two version. 1.10.3 doesn't have gzip on by default. I understand the value of conservative updates before public demonstrations, so will do what you ask. Btw, the full config if relying on nginx:10.15.8 goes from:. ```; FROM debian:9.5. RUN apt-get update -y && \; apt-get install -y nginx && \; rm -rf /var/lib/apt/lists/*. RUN rm -f /etc/nginx/sites-enabled/default; ADD @nginx_conf@ /etc/nginx/conf.d/hail.conf; ADD gzip.conf /etc/nginx/conf.d/gzip.conf. RUN ln -sf /dev/stdout /var/log/nginx/access.log; RUN ln -sf /dev/stderr /var/log/nginx/error.log. CMD [""nginx"", ""-g"", ""daemon off;""]; ```. to . ```; FROM nginx:1.15.8. RUN rm -f /etc/nginx/sites-enabled/default; ADD @nginx_conf@ /etc/nginx/conf.d/hail.conf; ADD gzip.conf /etc/nginx/conf.d/gzip.conf; ```. kind of neat.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5244#issuecomment-460378467:936,log,log,936,https://hail.is,https://github.com/hail-is/hail/pull/5244#issuecomment-460378467,4,['log'],['log']
Testability,"> Ok, so what you said makes sense. In that case, why do we also have a In(_, Type) constructor (def apply(i: Int, typ: Type): In = In(i, PType.canonical(typ)))?. My guess is that there are hundreds of lines of tests that used the old `In(i, virtual type)` and we didn't want to change those all at once. As long as the ptype is constructed using `canonical` both in the `In` and the call to `Compile`, this should be fine.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7868#issuecomment-574658178:211,test,tests,211,https://hail.is,https://github.com/hail-is/hail/pull/7868#issuecomment-574658178,1,['test'],['tests']
Testability,"> Re: testing, I wanted to wait on the spawned batch and ensure that it passed, but I had trouble doing that because it looks like the new rich progress bars are printed to stdout so I can't make use of json output and `jq`. Can we print the progress bars to stderr instead?. I think this is possible but I haven't looked into it. I'm opposed to stderr in Notebooks because I don't want it to appear with red background. I've recently realized that a lot of users find it concerning that we print so much red background text. You might also have a quiet mode? If you don't `wait` on the batch, do you still get a progress bar?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12471#issuecomment-1324145967:6,test,testing,6,https://hail.is,https://github.com/hail-is/hail/pull/12471#issuecomment-1324145967,1,['test'],['testing']
Testability,"> Regarding longs, to deal with alignment: right now we assume we're int aligned. To read longs, could we read the first 4 bytes as an int, then switch to longs, then do bits for the remaining length. Should be as terse. since the array is 4-byte-aligned, you can't read 4 bytes and switch to longs -- it's possible that the missing bits begin on an address that would produce aligned long reads. You'll need to compute whether you need to read an integer or not. This logic is somewhat complex, and I find the staged version harder to reason about (it took 5 minutes or so to understand the control flow). I would prefer the unstaged version, so that we can reason about correctness more easily, test the function more easily, and maintain it better in the future.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7646#issuecomment-561605053:469,log,logic,469,https://hail.is,https://github.com/hail-is/hail/pull/7646#issuecomment-561605053,2,"['log', 'test']","['logic', 'test']"
Testability,"> Relatedly, the auth system and the front end are not in this pull request (and AFACIT aren't in master yet?), which makes it harder to reason about the overall system. The auth system make sense as an independent PR (is that what #5162 is?). The changes that expose / use this new API (i.e. the UI component) should be a part of this PR so we can reason about the entire proposed change. I'm not sure how to really avoid this, some of it is the nature of our pull request goal (small, single-principle), and the other is the tradeoff of decoupling. This is also why I spend more time writing comments about the intended consumption of the notebook updates. Use those comments to reason about the overall system, and if that doesn't help, ask me to write more helpful comments.; ; The auth system is part of the Greenfield web pull request. That will be split up into something like 10-20 pull requests once the system is fully working, as mentioned in that repo. The auth-gateway will be in 2 of those (one for package-lock, one for the business logic). I've added the gateway changes to this particular pull request; that effectively shows the interface for authorization. I have mixed feelings about mixing that with the rest of this PR, happy to remove and issue separate PR.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5215#issuecomment-460065641:1048,log,logic,1048,https://hail.is,https://github.com/hail-is/hail/pull/5215#issuecomment-460065641,1,['log'],['logic']
Testability,"> Remaining issues:; >; > *WithIndexRespectsTransposition should test indices. Done. > Not currently using Gen.denseMatrix. Done. > isn't the block size always smaller than the size?. Good point. I took the square root of `Gen.interestingPosInt` to put them on the same length scale. This seems to generate OK results:. I ran the matrix generator 100 times [1] and found not terrible results. Unfortunately there's a preponderance of 31s, which comes whenever the random int exceeds 1000. Perhaps `interestingPosInt` is too often `Int.MaxValue` for use as a side length:; ```; def interestingPosInt: Gen[Int] = oneOfGen(; oneOf(1, 2, Int.MaxValue - 1, Int.MaxValue),; choose(1, 100),; posInt); ```. I also looked into the multipliable matrices method which similarly needs a `blockSize`, but this time the length scale is `x^1/3` because I have to generate a cube that fits in the Generator's `size`. I modified this to use the cubic root of an `Gen.interestingPosInt` as the `blockSize`. The results look not terrible [2]. > rebase changes in LDMatrix. done. > rename arbitraryHailBlockMatrix to arbitraryBlockMatrix. done. ## Footnotes. [1] Side length and `blockSize` of `squareBlockMatrixGen`:; ```; 6 46340; 31 1; 31 6; 2 38034; 31 15952; 1 36238; 31 1; 9 9; 3 28651; 31 2; 31 22272; 3 1; 6 46340; 31 26784; 31 27398; 8 46340; 31 1; 31 9; 31 32687; 1 39405; 9 11037; 31 46340; 31 10892; 9 25211; 1 46340; 7 7; 5 46340; 31 34790; 7 7; 8 46340; 31 46340; 1 2; 31 22021; 6 46340; 31 46340; 8 43459; 6 39273; 4 45617; 4 14821; 8 1; 31 7; 31 46340; 31 8; 31 24342; 31 34365; 31 42445; 6 8; 9 38891; 31 43108; 31 46142; 31 41962; 1 17392; 8 6; 31 46340; 31 4; 1 3; 31 43917; 3 44938; 7 1; 5 20769; 31 43156; 31 7; 31 21938; 31 45249; 1 31406; 1 40071; 31 7; 1 41043; 1 9; 1 1; 9 1; 31 1; 31 46022; 10 40633; 8 46340; 31 46340; 1 8; 1 42934; 31 1; 1 9; 3 1; 31 46340; 31 39641; 31 36241; 31 7; 31 1; 31 5; 31 43977; 31 4; 31 46340; 31 28129; 31 24906; 31 1; 31 7; 1 38660; 31 36026; 1 39369; 31 5; 31 18",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2270#issuecomment-337358741:65,test,test,65,https://hail.is,https://github.com/hail-is/hail/pull/2270#issuecomment-337358741,1,['test'],['test']
Testability,"> Should I get rid of that option?. Yes. For security, I don't think we should ever make our production database public, even in a limited way. For testing, we have a few options: use a test one as you say (in a non-production project?), use Cloud SQL proxy, spin up one locally, or make in-cluster testing easier. You can grant specific privileges to a user to a database in MySQL. I'm guessing you granted all on *.* which will allow them to create tables (among everything else). Basically, we should have an admin user that can create databases, and then individual users for each role that have read or read/write access to specific databases. Yeah, let's talk about it more today.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5618#issuecomment-473946373:148,test,testing,148,https://hail.is,https://github.com/hail-is/hail/pull/5618#issuecomment-473946373,3,['test'],"['test', 'testing']"
Testability,"> So error propagation from CI back to hailctl isn't great right now. (Something worth fixing!) If it an error in what you're trying to deploy (e.g. branch not found, syntax error in build.yaml, etc.) you can find it in the CI log. I should fix it!. edit: Yeah, I could see it in the logs, I just didn't understand some of the syntax, so dug around CI and deploy codebase, figured it out. Monitoring wasn't expected, thanks.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7015#issuecomment-540028930:227,log,log,227,https://hail.is,https://github.com/hail-is/hail/pull/7015#issuecomment-540028930,2,['log'],"['log', 'logs']"
Testability,"> Some small comments, but I'm also not sure I totally understand what's going on with the new pdf function. I can explain in person, it's pretty cool (I think). That might also help me figure out something to say in the documentation, though since it's experimental I don't think it needs complete documentation for now. > Would it be possible to add some python tests for the new stuff?. Do you think tests that just check that the `_compaction_counts` field exists are worth having? Beyond that, everything is non-deterministic and hard to test, and I don't know how to test plotting methods either. But I've been playing with them and they are working extremely well.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6039#issuecomment-490169359:364,test,tests,364,https://hail.is,https://github.com/hail-is/hail/pull/6039#issuecomment-490169359,4,['test'],"['test', 'tests']"
Testability,"> Sorry, I wasn't clear before. The Batch LD Clumping example does not require Hail Query (and, more importantly, a JVM) to be installed on *the computer that submits the batch*. Hail is imported and used inside of the Batch task that performs GWAS. That task runs inside a Docker container that has Hail installed (its derived from `hailgenetics/hail`).; > ; > ; > ; > I'm hesitant to make the *submission* of a batch dependent on the Hail Query library. Particularly when we have relatively low-effort alternative approaches. I'm delighted any time I see batch tasks use Hail Query! Konrad's Pan UKB work also does this. Right I realize this, why I mentioned unit test (to make unit tests work without calling hail, we would need to wrap each function we want to test in a cli interface, and then containerise those functions...this seems not so friendly to contributors). A 2nd question: how would a contributor submit write hybrid hail query/batch code that called batch from within a hail query script? So hail transforms data, say generates pc's, writes table, and then issues some batch commands that use a pre-built image, as opposed to requiring them to containerise their hail cod3. This will be useful: containerisation is the stated biggest pain point of batch, from my interviews. And one of the biggest hail issues is shuttling data between hail and other processes, which has led people to ask for tighter integration, or more statistical tools (so that they don't need to go out to those other tools, like plink). Showing Batch working from within hail-query scripts would be useful because it will show a much easier integration, and those examples or contributed modules should live somewhere (and that seems not to be hailtop, because this requires batch to be called from code that is calling hail directly, rather than through an image).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9194#issuecomment-671459432:666,test,test,666,https://hail.is,https://github.com/hail-is/hail/pull/9194#issuecomment-671459432,3,['test'],"['test', 'tests']"
Testability,"> Thanks for sharing this detailed plan!; > ; > So, I don't currently have any plan for, I suppose, ""applications"" that use Batch. Since we plan to support, maintain, and test the Hail Batch regenie implementation, I think it doesn't belong in a ""contrib"" directory. The hail python package has a `genetics` module for genetics-specific Hail Query functionality, let's mirror that structure. Let's move REGENIE and any non-Python dependencies of it into `hailtop/batch/genetics/regenie`. Sure. > How is the Dockerfile meant to be used? As written it doesn't appear that it would work because there doesn't exist any regenie source code to COPY in. It's meant to create a Regenie docker image that we could use. It's a copy of the regenie c++ repo's dockerfile, with the removal of the ENTRYPOINT /usr/local/bin/regenie, so that I could issue a command that included an executable, which is convenient to give me the ability to check that intermediate files are actually created (wc, ls) by batch, and because that seems more idiomatic for batch. I don't think there is a published regenie image, but docker hub is down so can't double check. . You're right, I shouldn't have deleted the bulk of the repo, kept as is. Didn't want to deal with submodules. > I've made some other in-line comments in the python file. It's not clear to me how all those other files are related to the python files and I'm a bit uncomfortable adding a whole directory with a LICENSE file, especially when not all the files in the directory fall under that license (e.g. the regenie py file) and moreover the license makes claims about things linking to BGEN, which none of our code here does. The license is only contained within the folder with the licensed files. In a previous conversation with Nate/Cotton, if we use any open-source software, best to keep those files segregated, alongside their license (license must be kept alongside the code, easier to see the demarcation if in a separate folder). > We have some BG",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9194#issuecomment-668357987:171,test,test,171,https://hail.is,https://github.com/hail-is/hail/pull/9194#issuecomment-668357987,1,['test'],['test']
Testability,"> Thanks, added with one tweak. Sadly I don't know how to convince your code analyser that using `randint` to make test cases in test code is not a security issue…. Me neither :shrug: . > Feel free to push to PR branches directly, or just to add things while merging. . I don't have write access to the `populationgenomics` fork, hence the PR :)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14700#issuecomment-2402897043:115,test,test,115,https://hail.is,https://github.com/hail-is/hail/pull/14700#issuecomment-2402897043,2,['test'],['test']
Testability,"> The 9 is about stopping the exponential backoff. At i=9, (0.1 * 2^9 is roughly half a second) we stop backing off and keep polling with delays uniformly chosen between 0 and half second.; > ; > We might actually want a hard limit on the number of backoffs, as written this test could trigger an infinite loop. I'll add a max number of iterations. What does a failure indicate? The only concern I have is that we have a stochastic process, but I don’t know whether 14 indicates a 99.99% success target, or something else. Also, if this test fails for a future batch PR, should we pass the contribution under some circumstances.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5503#issuecomment-470262025:275,test,test,275,https://hail.is,https://github.com/hail-is/hail/pull/5503#issuecomment-470262025,2,['test'],['test']
Testability,"> The 9 is about stopping the exponential backoff. At i=9, (0.1 * 2^9 is roughly half a second) we stop backing off and keep polling with delays uniformly chosen between 0 and half second.; > ; > We might actually want a hard limit on the number of backoffs, as written this test could trigger an infinite loop. I'll add a max number of iterations. What does a failure indicate? The only concern I have is that we have a stochastic process, but I don’t know whether 14 indicates a 99.99% success target, or something else. Also, if this test fails for a future batch PR, should we pass the contribution under some circumstances. > Ok, what do you think of this?; > ; > ```; > i = 0; > while len(output) != 4:; > time.sleep(0.100 * (3/2) ** i); > i = i + 1; > if i > 14:; > break; > assert len(output) != 4; > ```; > We exponentially back off with base 3/2. We break as soon as the condition is satisfied. If we wait more than a minute (`0.1 * (3/2)^14` is roughly 30s, so we've waited about a minute in total), we bail (and the assert will fail). Seems completely reasonable to prevent infinite loops in CI. I don’t really understand under which circumstances this should fail, and whether 30s is enough to ensure that we get rare false positive test failures. I trust your judgment on this, so if you say 30s is good enough, I think we should start there and adjust if test failures on batch PRs pile up.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5503#issuecomment-470263694:275,test,test,275,https://hail.is,https://github.com/hail-is/hail/pull/5503#issuecomment-470263694,6,"['assert', 'test']","['assert', 'test']"
Testability,"> The failure isn't the dataproc delete, that's just what you get when you try to delete a cluster that wasn't created. You had an import error:; > ; > ```; > File ""/hail/repo/hail/python/hail/fs/google_fs.py"", line 3, in <module>; > import gcsfs; > ModuleNotFoundError: No module named 'gcsfs'; > ```. I see. gcsfs is already dynamically imported. If the apiserver tests are being run by CI, it needs to have the gcsfs module, unless we want to make fs lazy.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5878#issuecomment-485522267:366,test,tests,366,https://hail.is,https://github.com/hail-is/hail/pull/5878#issuecomment-485522267,1,['test'],['tests']
Testability,"> The one thing I'd say is just that when we make a user facing change, we try to make one of the commits look like:; >; > CHANGELOG: Added or_error method to SwitchBuilder; >; > This ends up being helpful when I have to go through and generate the change log for a new version release. Good to know, updated the commit message. It would be nice to document conventions like this in the [docs for software developers](https://hail.is/docs/0.2/getting_started_developing.html#contributing) and/or a [contributing file](https://docs.github.com/en/free-pro-team@latest/github/building-a-strong-community/setting-guidelines-for-repository-contributors).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9749#issuecomment-735921468:256,log,log,256,https://hail.is,https://github.com/hail-is/hail/pull/9749#issuecomment-735921468,1,['log'],['log']
Testability,"> They are? Where is the type set?. don't know what you mean here, sorry. I meant that all of this logic exists in functions.py on the expression stuff!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5082#issuecomment-451950109:99,log,logic,99,https://hail.is,https://github.com/hail-is/hail/pull/5082#issuecomment-451950109,1,['log'],['logic']
Testability,"> This doesn't track the length if known like the old code. That will make some things e.g. ToArray much more expensive. I think you should finish all the stream processing nodes to unblock lowering and then return to this. Right, I was waiting to get the hard parts right first. This should be easy to add back. > Finally, this seems a silent on the the question of region management. What's your picture here? The region management write had consumers passing regions to producers, but I don't see how that fits in here. I put the region management on hold when I realized there was no way to make a stream free any regions it owns when its consumer stops pulling from it. So the new stream design is just to expose those setup and finalization hooks, where creating and freeing regions can go. When I start moving the region management logic I had over to the new design, I'll have to see if regions have to be baked into streams, or if they can be orthogonal. My plan was to first try making `EmitStream` return `Stream[Region => EmitTriplet]`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8129#issuecomment-589676137:839,log,logic,839,https://hail.is,https://github.com/hail-is/hail/pull/8129#issuecomment-589676137,1,['log'],['logic']
Testability,"> This has significantly improved the simplicity of the parser, so much so that much of the logic therein could be simplified further, though I think that's beyond the scope of this change. Agreed. But as my follow up will be a complete rewrite of the parser, I definitely don't want to do more to simplify the current one. > I like the separation of type-checking and parsing, however I'd prefer in your implementations of `typecheck` that you assert one thing at a time. That way when things fail, it'll be clear which assertion was fired (ie if `(a && b && c)` fails, you don't know if it's `a` or `b` or `c`, whereas; > ; > ```scala; > assert(a); > assert(b); > assert(c); > ```; > ; > would give you that information. Good suggestion. I only moved assertions here, didn't add any new ones, but I don't mind splitting up some that I moved.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13990#issuecomment-1809203400:92,log,logic,92,https://hail.is,https://github.com/hail-is/hail/pull/13990#issuecomment-1809203400,7,"['assert', 'log']","['assert', 'assertion', 'assertions', 'logic']"
Testability,"> This is probably fine for now that we don't have sameWithinTolerance for unkeyed tables. _same is only used by us in tests. If we want that functionality, then the table must be keyed and the keyed field won't be approximately compared for equality. Weird, Github isn't letting me respond to this comment. Are you requesting a change? To make `Table.same` require the table to by keyed? I'm okay with that, I just want to clarify.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3442#issuecomment-385969197:119,test,tests,119,https://hail.is,https://github.com/hail-is/hail/pull/3442#issuecomment-385969197,1,['test'],['tests']
Testability,"> Tim Poterba: I think we need to kick up the local disk size requested when running VEP. > Tim Poterba: we were talking about this here https://discuss.hail.is/t/dataproc-workers-lost-after-intensive-task/1014/34. > Kyle Satterstrom: Interesting, thanks for pointing that out. Yeah, I had been using workers with 40GB boot disks (and no attached SSDs). I had looked in the log and seen the errors that said ""no space left on device"", but I guess I didn't really believe it would fill up all that space at once. I can try increasing the 40 to 100 and see if it helps. > Tim Poterba: that unblocked Kevin on VEP!. > Tim Poterba: and don't try to repartition, I think. > Kyle Satterstrom: Just an update -- I tried the same thing again with 100GB worker boot disks intead of 40GB, and it made more progress but ultimately failed again hail-20190726-1716-0.2.16-6da0d3571629.log. > Kyle Satterstrom: One more update -- I tried the same thing again but with a local SSD attached to each machine instead of increasing the boot disk size (so worker boot disks were 40 GB), and that worked!",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6756:374,log,log,374,https://hail.is,https://github.com/hail-is/hail/issues/6756,2,['log'],['log']
Testability,"> Use os.environ in the test (and remember to set it back to its old value it afterward). This won't work. Hail has already been initialized. We definitely want to set these for every benchmark, at least for now -- this could be responsible for docker blowing limits (we only allocate 1.5 cores, I think)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8050#issuecomment-583462187:24,test,test,24,https://hail.is,https://github.com/hail-is/hail/pull/8050#issuecomment-583462187,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"> We have a 35K cohort. The VCF format of chr1 is 2.4T. Heh. So, yes, ""project"" VCFs grow super-linearly in the number of samples. I (and others) are currently pushing very hard for the VCF spec to support two sparse representations: ""local alleles"" (samtools/hts-specs#434) and ""reference blocks"" (samtools/hts-specs#435). When using these two sparse representations, you should be able to store 35,000 whole genomes in ~10TiB of GZIP-compressed VCF. What is your calling pipeline? Do you generate GVCFs? If yes, I strongly recommend you use the [VDS Combiner](https://hail.is/docs/0.2/vds/hail.vds.combiner.VariantDatasetCombiner.html#hail.vds.combiner.VariantDatasetCombiner) to produce a [VDS](https://hail.is/docs/0.2/vds/index.html). You can read more details in [this recent preprint we wrote](https://www.biorxiv.org/content/10.1101/2024.01.09.574205v1.full.pdf), but a VDS of 35,000 whole genomes should be a few terabytes. I'd guess 4 TiB, but it depends on your reference block granularity. I strongly recommend using size 10 GQ buckets. ---. > I don't know the Kryo JAR. I tested on both docker images hailgenetics/hail:0.2.126-py3.11 and hailgenetics/hail:0.2.127-py3.11. Those should use Kryo 4.0.2. OK. My conclusion is that Kryo still has a bug preventing the serialization of very large objects. This becomes a limitation in Hail: we cannot support PLINK files with tens of millions of variants. Our community is largely transitioning to GVCFs and VDS, so I doubt we'll improve our PLINK1 importer to support such large PLINK1 files. That said, PRs are always welcome if loading such large PLINK1 files is a hard requirement for you all.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14168#issuecomment-1922048526:1085,test,tested,1085,https://hail.is,https://github.com/hail-is/hail/issues/14168#issuecomment-1922048526,1,['test'],['tested']
Testability,> We have to apply the TF before we can test this right because the secrets are missing?. I already applied this terraform since I didn't see another practical way to go about it and it doesn't mutate any existing resources.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13202#issuecomment-1608203331:40,test,test,40,https://hail.is,https://github.com/hail-is/hail/pull/13202#issuecomment-1608203331,1,['test'],['test']
Testability,> We should run R's PCRelate on a few randomly generated test datasets and save them into hail's repo and use them for testing. omg yes please,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4439#issuecomment-424486040:57,test,test,57,https://hail.is,https://github.com/hail-is/hail/issues/4439#issuecomment-424486040,2,['test'],"['test', 'testing']"
Testability,"> We will. But good news! Old 100 exome chr1 test: 38 min, new test: 15 min. Shhhhh don't tell whoever pays our cloud bill",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7252#issuecomment-540803531:45,test,test,45,https://hail.is,https://github.com/hail-is/hail/pull/7252#issuecomment-540803531,2,['test'],['test']
Testability,"> Well yes. What I mean is in an automated fashion. We haven't deployed any builds in around a day because of this error, the deploy job keeps restarting and it was very difficult for me to interrogate what was going on. yeah, sorry, that's on me. I didn't notice because the pod's log didn't change between the first PR, which didn't have libsass, and the next, which did; assumed CI hadn't deployed it because it was backed up.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5489#issuecomment-468435191:282,log,log,282,https://hail.is,https://github.com/hail-is/hail/pull/5489#issuecomment-468435191,1,['log'],['log']
Testability,"> What do you mean by ""a maintenance error is generated in Ghost""? I kind of assumed that the website wasn't working right now because the tests finished and `cleanup_deploy_blog` shut down the blog in the PR namespace.; > ; > The ""endpoint"" that I'm passing in to the `wait` command for the blog in build.yaml is `/`, which _should_ do the right thing interally because the URL that's actually being constructed in `wait-for.py` becomes `http://{service}.{namespace}/{namespace}/{service}{endpoint}`, which gives you the right thing.; > ; > The test failure that I'm running into currently has to do with the fact that the wait command there queries the endpoint without going through either the router or the gateway, (since it's e.g. hitting http://blog.wang/wang/blog/ directly), so it's getting the 301 redirect to https because the `X-Forwarded-Proto` header isn't set. I'm not sure what the right fix is in this case.; ```; [2019-10-30 20:03:15] [36mINFO[39m Ghost boot 5.169s; [2019-10-30 20:03:16] [31mERROR[39m ""GET /pr-7381-default-sx9ail9zkm77/blog/"" [31m503[39m 40ms; [31m; [31mSite is starting up, please wait a moment then retry.[39m. [1m[37mError ID:[39m[22m; [90m4f8b8590-fb50-11e9-ab7c-9dd7e9eff310[39m. [90m----------------------------------------[39m. [90mMaintenanceError: Site is starting up, please wait a moment then retry.; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7381#issuecomment-548102772:139,test,tests,139,https://hail.is,https://github.com/hail-is/hail/pull/7381#issuecomment-548102772,2,['test'],"['test', 'tests']"
Testability,"> What happens? I just tested it and it works fine for me. Although we probably shouldn't have spaces in workshop names, maybe I'll do that if/when I add validation. It would claim deletion without deleting. Must have been resolved or caused by a separate issue.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7162#issuecomment-536318084:23,test,tested,23,https://hail.is,https://github.com/hail-is/hail/pull/7162#issuecomment-536318084,1,['test'],['tested']
Testability,"> What is the best way to test gateway?. Deploy the new gateway. Yes, it's live. Yes, it might break stuff. Good luck.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7015#issuecomment-541104331:26,test,test,26,https://hail.is,https://github.com/hail-is/hail/pull/7015#issuecomment-541104331,1,['test'],['test']
Testability,"> What were the errors? It should be OK to hold the job object around and e.g. use it to ask for logs even if the job is deleted. We were setting the Job id attribute to None on deletion. ci then queried various properties of the job, passing None as the job id in the URL. That caused batch to 500 converting the id to an integer (this is itself a bug). Leaving the id in the Job might also fix it, but it seems wrong in the REST setting to delete an object, but still be able to query it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5655#issuecomment-476227436:97,log,logs,97,https://hail.is,https://github.com/hail-is/hail/pull/5655#issuecomment-476227436,1,['log'],['logs']
Testability,"> What's the pressing reason for this to join the mainline?. Ben has wanted this for a while, and there's interest from the group. > I'd prefer to stick to the usual process on services team where thorough code review of code and test-code is done for stuff under our purview (as things in hailtop/batch do). Sure. Regarding testing, in my experience regenie (the C++ program) crashes when given improper inputs, rather than writing anything out, so there is a reduced testing need (we should. verify the expected number of non-empty outputs are created I think, and some basic tests that we parse inputs). My plan for getting regenie in is roughly 4 part, of which this is 1. ; 1) Get the most basic / canonical version of regenie up, on the local backend. This version should take all of the arguments demonstrated in the [regenie tutorial / example](https://rgcgithub.github.io/regenie/options/), pass them to step 1 and step 2, and write an output. ; * Here I'm mostly interested in making sure I'm using Batch Resource classes correctly.; 2) Get the same working for the ServiceBackend.; 3) Expand the service offering to run the paper's example (may require some tweaks to the input handling code), and test that we can run this at scale; 4) Introduce a per-phenotype parallelism mode, which loses a bit of per-core efficiency in favor of greater scale out, benchmark that.; 5) Handle all other combinations of inputs.; 6) Optimize performance (local RAID-0 SSDs up to 9TB, larger instances). So, if at all possible, I would like to stay focused on the first task, within the bounds of what you need to accomplish as leader of the services team; I'd really appreciate your help.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9194#issuecomment-667434082:230,test,test-code,230,https://hail.is,https://github.com/hail-is/hail/pull/9194#issuecomment-667434082,6,"['benchmark', 'test']","['benchmark', 'test', 'test-code', 'testing', 'tests']"
Testability,"> Whoops, sorry clipboard malfunction. I meant [here](https://github.com/hail-is/hail/blob/e6728b812e73a8bd636046bed22f97c5b47a5f12/hail/src/main/scala/is/hail/lir/X.scala#L416), when trying to add code to an lir block after a terminating control op. This was turning into quite a hairy change. I'm going to merge this as its own thing and work on fixing the fallout from the assertion in a follow-up change.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13674#issuecomment-1734185921:376,assert,assertion,376,https://hail.is,https://github.com/hail-is/hail/pull/13674#issuecomment-1734185921,1,['assert'],['assertion']
Testability,"> Why is writing the hail table first more efficient than just directly exporting from the grouped matrixtable?. We take special care to ensure our system is as efficient as possible when reading or writing to this native format. So, it's partly a sociological thing. On the practical end of things, Hail's native formats (for Tables and Matrix Tables) are a partitioned binary format. The partitioned part means Hail can use many cores in parallel to process and write the dataset. The binary part means that Hail need not use unnecessarily large (in terms of bytes) representations of values. These three things together make writing the native formats use less time, use less memory, and be more reliable. ---. > One thing I noticed is the mt_hwe_vals variable in my code below is a MatrixTable and not a GroupedMatrixTable. Is this correct?. Yes, after you aggregate you get back an MT with a different column key. ---. The `entries` method converts your matrix table from a compact and efficient matrix into a ""long"" and inefficient table. I generally recommend avoiding it if you can. However, if you only have a handful of ancestries, I wouldn't expect this to be *that* bad. You can just write the MT itself:. ```python3; ancestry_table = hl.Table.from_pandas(ancestry.astype({""person_id"":str}), key='person_id'); mt = mt.annotate_cols(ancestry = ancestry_table[mt.s].ancestry); mt_hwe_vals = mt.group_cols_by(mt.ancestry).aggregate(hwe = hl.agg.hardy_weinberg_test(mt.GT)); mt_hwe_vals = mt_hwe_vals.select_rows().select_cols() # drop irrelevant row and column fields; mt_hwe_vals.write(bucket + '/hwe.ht'); ```. ---. > I tried modifying the code to what is shown below but I'm still having the same issue. Just to be clear it's the exact same error ""Container exited with a non-zero exit code 137. ""? This makes me think we have an issue with `entries`, because, even though it's not great, it shouldn't be blowing RAM here. Can you share the log file from your previous or next attempt?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13287#issuecomment-1679755636:1953,log,log,1953,https://hail.is,https://github.com/hail-is/hail/issues/13287#issuecomment-1679755636,1,['log'],['log']
Testability,"> Yeah this is my bad, I thought we were good to go with the new UI @cseed ?. Yes, eventually. But the old code works and is tested. The new stuff isn't done, reviewed or in yet. There's no sense deleting the working thing until the new thing is ready to replace it, esp. with a workshop coming up.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5215#issuecomment-464226078:125,test,tested,125,https://hail.is,https://github.com/hail-is/hail/pull/5215#issuecomment-464226078,1,['test'],['tested']
Testability,"> Yeah, I imagine we do. `InferPType` isn't used right now, correct? I'll add the new case, just checking if there's a test that would have caught this. Yeah, I edited my comment. Totally not used right now, which is why you didn't notice. I think making an issue is also fine, like you said it would be an enhancement, not something necessary for what you wrote to work. Looks really cool btw.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7682#issuecomment-562812319:119,test,test,119,https://hail.is,https://github.com/hail-is/hail/pull/7682#issuecomment-562812319,1,['test'],['test']
Testability,"> You need to add a test to ensure `last` works. You'll find a method called `test_array_head` in `test_expr.py`. I'd change that to `test_array_first`, call `first` instead. Then I'd add `test_array_last` and make sure there's a test for empty and nonempty arrays. Thanks. Tests were included in e2fcfb61a5df5ab497269d32c12a5d5fb652ddd4. Are there more checks that should be added to those?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9474#issuecomment-694955390:20,test,test,20,https://hail.is,https://github.com/hail-is/hail/pull/9474#issuecomment-694955390,3,"['Test', 'test']","['Tests', 'test']"
Testability,"> Your tool should also examine the first word of the MAKEFLAGS variable and look for the character n. If this character is present then make was invoked with the ‘-n’ option and your tool should stop without performing any operations. Added. > Your tool should be sure to write back the tokens it read, even under error conditions. This includes not only errors in your tool but also outside influences such as interrupts (SIGINT), etc. You may want to install signal handlers to manage this write-back. I mean, I doubt anyone is sending signals other than SIGKILL to our build system, but I added some signal handlers that just `sys.exit(0)` which triggers the finally (I checked). > We also get a lot of ‘warning: jobserver unavailable: using -j1. Add +' to parent make rule.’warnings when runningmake jvm-test`. This is because our C++ backend uses make to drive compilation (wtf‽). I strip MAKEFLAGS before calling gradle now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6923#issuecomment-524446104:809,test,test,809,https://hail.is,https://github.com/hail-is/hail/pull/6923#issuecomment-524446104,1,['test'],['test']
Testability,"> [!NOTE]; > I don't think it necessarily makes sense to merge this into `main`; just checking it in here for review. An example of a migrated post with a link to another migrated post in it can be found at https://github.com/iris-garden/test-process/issues/3118. The rest of the open issues in that repo were also migrated using this script. I'd recommend taking a look there rather than trying to run the script as part of the review process, as it took 8 hours to open all the Github Issues, due to rate limiting on the Github API 🙃",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14518:238,test,test-process,238,https://hail.is,https://github.com/hail-is/hail/pull/14518,1,['test'],['test-process']
Testability,"> ah yes - the identity used to create the SAS token needs to have a control plane role on the Storage Account - Owner, Contributor, or (most specific) Storage Account Key Operator Service Role... Is that a manageable role to configure for testing or should I try to explore alternatives in the generation?. Thanks! This is totally fine, I'll just configure the SP that we use for the inter-cloud tests with the key operator role and re-run the tests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13140#issuecomment-1579202097:240,test,testing,240,https://hail.is,https://github.com/hail-is/hail/pull/13140#issuecomment-1579202097,3,['test'],"['testing', 'tests']"
Testability,"> ah---that's just a log message from the readinessProbe sending requests before the server is fully up, I believe. So partly it looks like that, especially with Ghost timing itself as >5s to actually listen on the port after the container starts up (or really after Ghost starts running which may be different). The strange this is the timing. I thought the timestamps were supposed to correspond to the time the request was received/log message was generated (the log messages themselves can be printed out of order, but I think the timestamps should be accurate).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7381#issuecomment-548103795:21,log,log,21,https://hail.is,https://github.com/hail-is/hail/pull/7381#issuecomment-548103795,3,['log'],['log']
Testability,"> all options that are also gcloud options (such as --project)? [That] could be difficult. Yes, this is what I was thinking. `hailctl` could parse (as much as is needed) the `gcloud` options to find options (like `--project`) and modify others (like `--initialization-actions`). The latter is somewhat surprising since one expects everything after the `--` to pass through unchanged. OK, summarizing our options so far:. - hailctl has no options that are also gcloud options. gcloud options go after the `--`, and get modified as needed by hailctl (with a message).; - hailctl has no gcloud options that are simply pass through. gcloud options that are needed by hailctl commands are hailctl options (like `--project`). When a gcloud option is needed by some hailctl command, all hailctl commands take that option (when it makes sense), even if in some cases that makes them simply pass through. This fixes the inconsistency issues, but the user still needs to keep track of which gcloud options needs to be passed to hailctl and which are passed to gcloud directly. If you specify an option twice, once to hailctl and once to gcloud, we invoke gcloud with the option duplicated. Pros and cons:; - The first option has the most consistent interface.; - The first option modifies options after the --, which is surprising.; - The first option involves replication (some of) the gcloud option parsing semantics, which is annoying.; - The second option requires the user to know which gcloud options need to be passed to hailctl instead (but globally, not per-command).; - With the second option, if we want to warn (or error) on duplicate options, we're back to duplicating the gcloud option parsing logic. I think I'm coming around to the second option. > so that hailctl dataproc submit cluster -- --script-options would work. I see, so if there is only one `--` it refers to script options, and if there are two, the first one corresponds to gcloud options? I think that should be doable.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9842#issuecomment-758128554:1698,log,logic,1698,https://hail.is,https://github.com/hail-is/hail/pull/9842#issuecomment-758128554,1,['log'],['logic']
Testability,"> another assertion to remove. Could have missed others, this is a big diff. Will double check for others in all modified files, one min (I don't think I added any new ones however)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7904#issuecomment-576364613:10,assert,assertion,10,https://hail.is,https://github.com/hail-is/hail/pull/7904#issuecomment-576364613,1,['assert'],['assertion']
Testability,> bump. Failing a test,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7694#issuecomment-565620376:18,test,test,18,https://hail.is,https://github.com/hail-is/hail/pull/7694#issuecomment-565620376,1,['test'],['test']
Testability,"> can pass down an allocator that returns regions backed by a single fixed RegionMemory, with no-op freeing. Even this may be expensive when we're doing something like ToArray(StreamRange). Let's start by benchmarking and seeing where we're at with the current benchmarks?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9106#issuecomment-661888188:205,benchmark,benchmarking,205,https://hail.is,https://github.com/hail-is/hail/pull/9106#issuecomment-661888188,2,['benchmark'],"['benchmarking', 'benchmarks']"
Testability,"> do we have tests that catch when we pass out-of-scope refs into the comparison func? I think scala won't catch that (see my comment about Binds) but maybe we already do in Python (should still fix binds). We don't, but I'm confident that the changes I make to the parser env when parsing the tiebreaker will catch issues. https://github.com/chrisvittal/hail/blob/03c36f3980412fd62cf623fc75deefdc8d79afe9/hail/src/main/scala/is/hail/expr/ir/Parser.scala#L976C7-L989",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12295#issuecomment-1431690407:13,test,tests,13,https://hail.is,https://github.com/hail-is/hail/pull/12295#issuecomment-1431690407,1,['test'],['tests']
Testability,> gidgethub. Will remove dependencies in separate PR so I don't want to wait for all the images to rebuild. Can't quite get rid of Flask yet as it is used in callback tests. Could you help me understand what the benefit of gidgethub is over our previous strategy? Since we generally prefer minimal deps,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7064#issuecomment-531938132:167,test,tests,167,https://hail.is,https://github.com/hail-is/hail/pull/7064#issuecomment-531938132,1,['test'],['tests']
Testability,> how it's impossible to use timings currently inside cleanup blocks because it could accidentally re-raise a deleted error. Can you explain this to me? I saw Dan had a comment as well in the JVMJob that stated this. Our code seems to be always this:. ```; try:; with self.step('running'):; self.run_until_deleted or completed(); finally:; with self.step('uploading log'):; self.upload_log(); ```. The upload log step should propagate the deletion error from above.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11429#issuecomment-1054581169:366,log,log,366,https://hail.is,https://github.com/hail-is/hail/pull/11429#issuecomment-1054581169,2,['log'],['log']
Testability,> is.hail.io.IndexSuite.writeReadGivesSameAsInput[17]([Ljava.lang.String;@47162b74) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[18]([Ljava.lang.String;@70bfbb33)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[18]([Ljava.lang.String;@70bfbb33) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[19]([Ljava.lang.String;@3e391ee2)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[19]([Ljava.lang.String;@3e391ee2) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testCXXCodeFunctions(is.hail.nativecode.NativeCodeSuite); DEBUG: Logging set_test_msg ... Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testCXXCodeFunctions PASSED; Running test: Test method testNativeBuild(is.hail.nativecode.NativeCodeSuite). Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testNativeBuild PASSED; Running test: Test method testNativeCallSpeed(is.hail.nativecode.NativeCodeSuite). Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testNativeCallSpeed PASSED; Running test: Test method testNativeGlobal(is.hail.nativecode.NativeCodeSuite). Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testNativeGlobal PASSED; Running test: Test method testNativePtr(is.hail.nativecode.NativeCodeSuite). Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testNativePtr PASSED; Running test: Test method testNativeUpcall(is.hail.nativecode.NativeCodeSuite); DEBUG: Logging set_test_msg ... Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testNativeUpcall PASSED; Running test: Test method testObjectArray(is.hail.nativecode.NativeCodeSuite). Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testObjectArray PASSED; Running test: Test method testShuffleAndJoinDoesntMem,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4718:8249,test,test,8249,https://hail.is,https://github.com/hail-is/hail/issues/4718,1,['test'],['test']
Testability,"> looks like a compile error in TestUtils.scala.; > ; > The rest looks good, will approve when tests pass. I fixed `TestUtils.scala`; the issue was a missing parameter in a call to the (changed) `MatrixVCFReader`. Should I rebase and squash all of my commits into a single commit, or are you OK with merging my branch with the discrete feature commits (i.e., non-""Merge remote-tracking branch"" commits)?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5077#issuecomment-453215900:32,Test,TestUtils,32,https://hail.is,https://github.com/hail-is/hail/pull/5077#issuecomment-453215900,3,"['Test', 'test']","['TestUtils', 'tests']"
Testability,"> make install-wheel and then PYTHONPATH="""" python -c ""import hail; hail.init()"". Should this be an automated test?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6437#issuecomment-504550511:110,test,test,110,https://hail.is,https://github.com/hail-is/hail/pull/6437#issuecomment-504550511,1,['test'],['test']
Testability,"> one design comment, otherwise looks great. Can you point me to the file (gs path is fine) that includes the latest benchmarks for this branch?. gs://hail-benchmarks-2/ehigham/compute-or-reload-partitions",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12821#issuecomment-1509140605:117,benchmark,benchmarks,117,https://hail.is,https://github.com/hail-is/hail/pull/12821#issuecomment-1509140605,2,['benchmark'],"['benchmarks', 'benchmarks-']"
Testability,"> oops, forgot to request changes.; > ; > assertion should move into getNestedElementPTypes as something like the following:; > ; > ```scala; > val vTypes = values.iterator.map(_.virtualType).toSet; > if (vTypes.size != 1); > throw new AssertionError(s""invalid call to getNestedElementPTypes: $vTypes""); > ```. Should we check isOfType instead of virtual type, for case when we say try to coalesce canonical and non-canonical implementations.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7842#issuecomment-574208348:42,assert,assertion,42,https://hail.is,https://github.com/hail-is/hail/pull/7842#issuecomment-574208348,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,> pytest-instafail is a plugin for py.test that shows failures and errors instantly instead of waiting until the end of test session. https://github.com/pytest-dev/pytest-instafail/,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6854:38,test,test,38,https://hail.is,https://github.com/hail-is/hail/pull/6854,2,['test'],['test']
Testability,"> runtime in the container status is a little confusing. It's fine for now, but for user interface, runtime should be a top level state, and starting and running should be substates. But again, this is fine for now. I'm a little confused by this. runtime isn't a state, it is rough the runtime of the container. Note, isn't the full runtime: it doesn't include image pull or log upload, for example. I included it in timing because it was something I timed. I included it because (1) it is comparable to `docker run` for comparison, and (2) I think it is what we should change the user for the runtime of the container ... I think? pull is also non trivial, as well as the storage of the image while it is running. Billing is going to be a challenge.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7354#issuecomment-545167038:375,log,log,375,https://hail.is,https://github.com/hail-is/hail/pull/7354#issuecomment-545167038,1,['log'],['log']
Testability,"> since the array is 4-byte-aligned, you can't read 4 bytes and switch to longs -- it's possible that the missing bits begin on an address that would produce aligned long reads. You'll need to compute whether you need to read an integer or not. Right, my proposal would be to first read an int (provided the length has at least 32 bits left), at which point I think I'm 8-byte aligned (address xxx4, to address xxx8). Then the rest of the loops logic is effectively the same as you had, except reading longs instead of bytes in the middle loop. So this version would have 2 loops and 3 length checks, as opposed to 3 loops and 3 length checks, and be 2x as fast in the limit.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7646#issuecomment-561694360:445,log,logic,445,https://hail.is,https://github.com/hail-is/hail/pull/7646#issuecomment-561694360,1,['log'],['logic']
Testability,"> submit 50-way parallel bunch, with a maximum of (by default) 10 individual request failures; > if any request fails, raise an exception, which is caught by outer submit, which retries a configurable number of times, logging a configurable number of errors. I haven't dug into the PR yet, but will just remark I'm going to argue pretty strenuously to maintain our current model here: infinitely retry transient errors with exponential backoff and no retry of non-transient errors.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7875#issuecomment-574377227:218,log,logging,218,https://hail.is,https://github.com/hail-is/hail/pull/7875#issuecomment-574377227,1,['log'],['logging']
Testability,"> test/test-ci.py::test_pull_request_trigger FAILED. This is the flakey one, right? Can we disable it until we get it fixed? Flakey tests are not OK.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5638#issuecomment-474571477:2,test,test,2,https://hail.is,https://github.com/hail-is/hail/pull/5638#issuecomment-474571477,3,['test'],"['test', 'test-ci', 'tests']"
Testability,"> the TableIR doesn't define partitionCounts. statically known partition counts are used to optimize `.count()` when we know the partition sizes. Here that doesn't apply, so I don't think you need to define that method (it inherits `def partitionCounts = None`). > perhaps ""LiftLiterals"" was changed to ""LiftNonCompilable"". Yes, it was. No need to write a rule for this. Separately, I think we should delete the checklist. It'll never be correct, since it's not checked against the codebase. To add an IR node, one needs to understand the compiler, and we can't adequately document that in a bullet list right now (over time, things should get simpler). . If a node is missing from somewhere it needs to appear, then tests should catch that case.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6689#issuecomment-513935766:717,test,tests,717,https://hail.is,https://github.com/hail-is/hail/pull/6689#issuecomment-513935766,1,['test'],['tests']
Testability,"> the data should be really deterministic so I'm not sure why those counts are off, but at least those counts and times are more accurate to what we are seeing so probably it means your test environment is reasonable. I guess the exact query isn't important, more the code shape and the kinds of operations hail's doing. Given the timings, it may be more-or-less representative.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13882#issuecomment-1821675042:186,test,test,186,https://hail.is,https://github.com/hail-is/hail/issues/13882#issuecomment-1821675042,1,['test'],['test']
Testability,"> the speed test shows it still slower than printf. FWIW, that benchmark is dominated by floating-point formatting where fmt falls back to `snprintf` at the moment. For other argument types fmt is faster than glibc's (s)printf. In particular, integer formatting is significantly faster: http://www.zverovich.net/2013/09/07/integer-to-string-conversion-in-cplusplus.html",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3973#issuecomment-413243985:12,test,test,12,https://hail.is,https://github.com/hail-is/hail/pull/3973#issuecomment-413243985,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"> they got bundled into assertEvalsTo. Yes, and assertEvalSame. Quite a bit of stuff is running through that, and it is definitely getting tested because I had to squash a bunch of bugs.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4663#issuecomment-434466425:24,assert,assertEvalsTo,24,https://hail.is,https://github.com/hail-is/hail/pull/4663#issuecomment-434466425,3,"['assert', 'test']","['assertEvalSame', 'assertEvalsTo', 'tested']"
Testability,"> this is the parsable type. It's not requiredness, it's entry array index. Oops, you're totally right, I scanned too fast. Right, it's that the rvRowType changed. So the rvRowType being part of the MatrixType is really a workaround until we have physical types. It shouldn't be part of the ""visible"" state of the MatrixType. Yeah, upcast via MatrixMapRows can do it:. ```; val newRVRow = newRow.typ.asInstanceOf[TStruct].fieldOption(MatrixType.entriesIdentifier) match {; case Some(f) =>; assert(f.typ == child.typ.entryArrayType); newRow; case None =>; InsertFields(newRow, Seq(; MatrixType.entriesIdentifier -> GetField(Ref(""va"", child.typ.rvRowType), MatrixType.entriesIdentifier))); }; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4527#issuecomment-429190070:490,assert,assert,490,https://hail.is,https://github.com/hail-is/hail/issues/4527#issuecomment-429190070,1,['assert'],['assert']
Testability,"> we don't have a way to test this right now, right? (we could write something that templates with mock data); > ; > I want to next add something that colors the status link - but this will involve a bit of jinja language which I'll probably get wrong at first. Yeah, we have no ui-related tests. Jackie had previously made a suggestion to output the rendered web page as a build artifact, which would be nice.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6105#issuecomment-491844758:25,test,test,25,https://hail.is,https://github.com/hail-is/hail/pull/6105#issuecomment-491844758,3,"['mock', 'test']","['mock', 'test', 'tests']"
Testability,"> what ends up in /home/cotton/hail-20200407-1502-0.2.36-75a0f869d72d.log? What happens to the usual Spark/Hail master logs?. The client and the server are now separated by a machine boundary, so just the Python client logs end up in the client log. That's basically nothing and can probably be removed when using the client with the service. There are no Spark logs, the service is 100% Spark-free. The Hail master logs end up in the query service logs. Obviously a lot of this needs to be rethough and improved. The error checking and reporting needs to get improved at the service boundary, errors should be relative to the input, and clients probably shouldn't get a server-side stack trace. We're going to need additional tools for debugging pipelines on the master, and probably want an admin UI where you get the logs for each query, the IR getting executed, how it was transformed with lowering/optimization, statistics on timing of its execution, etc.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8485#issuecomment-610628050:70,log,log,70,https://hail.is,https://github.com/hail-is/hail/pull/8485#issuecomment-610628050,8,['log'],"['log', 'logs']"
Testability,"> you also don't need to add another resource VCF to make this fail. Yeah, I wasn't sure if the array_elements_required would be overridden if no missingness was found in the data. I wanted to test that possibility (updated my comment with the results of that test). > ah, crap, there's a simplify rule that turns a TableCount(TableUnion(...)) into the sum of the TableCounts for each child. Thanks!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8008#issuecomment-581049805:193,test,test,193,https://hail.is,https://github.com/hail-is/hail/pull/8008#issuecomment-581049805,2,['test'],['test']
Testability,"> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | Missing Cryptographic Step <br/>[SNYK-PYTHON-CRYPTOGRAPHY-6036192](https://snyk.io/vuln/SNYK-PYTHON-CRYPTOGRAPHY-6036192) | `cryptography:` <br> `3.3.2 -> 41.0.6` <br> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | NULL Pointer Dereference <br/>[SNYK-PYTHON-CRYPTOGRAPHY-6092044](https://snyk.io/vuln/SNYK-PYTHON-CRYPTOGRAPHY-6092044) | `cryptography:` <br> `3.3.2 -> 41.0.6` <br> | No | Proof of Concept ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | Information Exposure <br/>[SNYK-PYTHON-REQUESTS-5595532](https://snyk.io/vuln/SNYK-PYTHON-REQUESTS-5595532) | `requests:` <br> `2.27.1 -> 2.31.0` <br> | No | No Known Exploit . Some vulnerabilities couldn't be fully fixed and so Snyk will still find them when the project is tested again. This may be because the vulnerability existed within more than one direct dependency, but not all of the affected dependencies could be upgraded. Check the changes in this PR to ensure they won't cause issues with your project. ------------. **Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open fix PRs.*. For more information: <img src=""https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiI2NDhhMGFlYS05MjJjLTQ2YzktYjg1MS02NmM3ZTI4MmQyZTUiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjY0OGEwYWVhLTkyMmMtNDZjOS1iODUxLTY2YzdlMjgyZDJlNSJ9fQ=="" width=""0"" height=""0""/>; 🧐 [View latest project report](https://app.snyk.io/org/danking/project/5ecb4152-94d0-44ff-86c6-21e542bb123d?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr). 🛠 [Adjust project settings](https://app.snyk",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14196:7556,test,tested,7556,https://hail.is,https://github.com/hail-is/hail/pull/14196,1,['test'],['tested']
Testability,">). For example, a test suite may require all fixtures and tests to run in the same event loop, but have async fixtures that are set up and torn down for each module. If you're affected by this issue, please continue using the v0.21 release, until it is resolved.</p>; <h2>pytest-asyncio 0.23.5</h2>; <h1>0.23.5 (2024-02-09)</h1>; <ul>; <li>Declare compatibility with pytest 8 <a href=""https://redirect.github.com/pytest-dev/pytest-asyncio/issues/737"">#737</a></li>; <li>Fix typing errors with recent versions of mypy <a href=""https://redirect.github.com/pytest-dev/pytest-asyncio/issues/769"">#769</a></li>; <li>Prevent DeprecationWarning about internal use of <code>asyncio.get_event_loop()</code> from affecting test cases <a href=""https://redirect.github.com/pytest-dev/pytest-asyncio/issues/757"">#757</a></li>; </ul>; <h2>Known issues</h2>; <p>As of v0.23, pytest-asyncio attaches an asyncio event loop to each item of the test suite (i.e. session, packages, modules, classes, functions) and allows tests to be run in those loops when marked accordingly. Pytest-asyncio currently assumes that async fixture scope is correlated with the new event loop scope. This prevents fixtures from being evaluated independently from the event loop scope and breaks some existing test suites (see <a href=""https://redirect.github.com/pytest-dev/pytest-asyncio/issues/706"">#706</a>). For example, a test suite may require all fixtures and tests to run in the same event loop, but have async fixtures that are set up and torn down for each module. If you're affected by this issue, please continue using the v0.21 release, until it is resolved.</p>; <h2>pytest-asyncio 0.23.5a0</h2>; <h1>0.23.5 (UNRELEASED)</h1>; <ul>; <li>Declare compatibility with pytest 8 <a href=""https://redirect.github.com/pytest-dev/pytest-asyncio/issues/737"">#737</a></li>; <li>Fix typing errors with recent versions of mypy <a href=""https://redirect.github.com/pytest-dev/pytest-asyncio/issues/769"">#769</a></li>; </ul>; <h2>Known issu",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14507:3405,test,tests,3405,https://hail.is,https://github.com/hail-is/hail/pull/14507,1,['test'],['tests']
Testability,">)</li>; <li>Add support for specifying stable version with <code>--required-version</code> (<a href=""https://github-redirect.dependabot.com/psf/black/issues/2832"">#2832</a>).</li>; <li>Avoid crashing when the user has no homedir (<a href=""https://github-redirect.dependabot.com/psf/black/issues/2814"">#2814</a>)</li>; <li>Avoid crashing when md5 is not available (<a href=""https://github-redirect.dependabot.com/psf/black/issues/2905"">#2905</a>)</li>; <li>Fix handling of directory junctions on Windows (<a href=""https://github-redirect.dependabot.com/psf/black/issues/2904"">#2904</a>)</li>; </ul>; <h3>Documentation</h3>; <ul>; <li>Update pylint config documentation (<a href=""https://github-redirect.dependabot.com/psf/black/issues/2931"">#2931</a>)</li>; </ul>; <h3>Integrations</h3>; <ul>; <li>Move test to disable plugin in Vim/Neovim, which speeds up loading (<a href=""https://github-redirect.dependabot.com/psf/black/issues/2896"">#2896</a>)</li>; </ul>; <h3>Output</h3>; <ul>; <li>In verbose, mode, log when <em>Black</em> is using user-level config (<a href=""https://github-redirect.dependabot.com/psf/black/issues/2861"">#2861</a>)</li>; </ul>; <h3>Packaging</h3>; <ul>; <li>Fix Black to work with Click 8.1.0 (<a href=""https://github-redirect.dependabot.com/psf/black/issues/2966"">#2966</a>)</li>; <li>On Python 3.11 and newer, use the standard library's <code>tomllib</code> instead of <code>tomli</code>; (<a href=""https://github-redirect.dependabot.com/psf/black/issues/2903"">#2903</a>)</li>; <li><code>black-primer</code>, the deprecated internal devtool, has been removed and copied to a; <a href=""https://github.com/cooperlees/black-primer"">separate repository</a> (<a href=""https://github-redirect.dependabot.com/psf/black/issues/2924"">#2924</a>)</li>; </ul>; <h3>Parser</h3>; <ul>; <li>Black can now parse starred expressions in the target of <code>for</code> and <code>async for</code>; statements, e.g <code>for item in *items_1, *items_2: pass</code> (<a href=""https://github-redir",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11696:2119,log,log,2119,https://hail.is,https://github.com/hail-is/hail/pull/11696,2,['log'],['log']
Testability,">, <a href=""https://github.com/sarveshr7""><code>@​sarveshr7</code></a>)</li>; <li>Introduction of a new &quot;sync_proxy_rules_no_local_endpoints_total&quot; proxy metric. This metric represents the number of services with no internal endpoints. The &quot;traffic_policy&quot; label will contain both &quot;internal&quot; or &quot;external&quot;. (<a href=""https://github-redirect.dependabot.com/kubernetes/kubernetes/pull/108930"">kubernetes/kubernetes#108930</a>, <a href=""https://github.com/MaxRenaud""><code>@​MaxRenaud</code></a>)</li>; <li>JobReadyPods graduates to Beta and it's enabled by default. (<a href=""https://github-redirect.dependabot.com/kubernetes/kubernetes/pull/107476"">kubernetes/kubernetes#107476</a>, <a href=""https://github.com/alculquicondor""><code>@​alculquicondor</code></a>)</li>; <li>Kube-apiserver: <code>--audit-log-version</code> and <code>--audit-webhook-version</code> now only support the default value of <code>audit.k8s.io/v1</code>. The v1alpha1 and v1beta1 audit log versions, deprecated since 1.13, have been removed. (<a href=""https://github-redirect.dependabot.com/kubernetes/kubernetes/pull/108092"">kubernetes/kubernetes#108092</a>, <a href=""https://github.com/carlory""><code>@​carlory</code></a>)</li>; <li>Kube-apiserver: the <code>metadata.selfLink</code> field can no longer be populated by kube-apiserver; it was deprecated in 1.16 and has not been populated by default since 1.20+. (<a href=""https://github-redirect.dependabot.com/kubernetes/kubernetes/pull/107527"">kubernetes/kubernetes#107527</a>, <a href=""https://github.com/wojtek-t""><code>@​wojtek-t</code></a>)</li>; <li>Kubelet external Credential Provider feature is moved to Beta. Credential Provider Plugin and Credential Provider Config API's updated from v1alpha1 to v1beta1 with no API changes. (<a href=""https://github-redirect.dependabot.com/kubernetes/kubernetes/pull/108847"">kubernetes/kubernetes#108847</a>, <a href=""https://github.com/adisky""><code>@​adisky</code></a>)</li>; <li>Make ",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12196:8474,log,log,8474,https://hail.is,https://github.com/hail-is/hail/pull/12196,1,['log'],['log']
Testability,">2.3.3</a> (2021-11-01)</h3>; <h3>Bug Fixes</h3>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/googleapis/google-auth-library-python/commit/1442e6422aa2b42859332e2b0bd191077d83bbcf""><code>1442e64</code></a> chore(main): release 2.6.0 (<a href=""https://github-redirect.dependabot.com/googleapis/google-auth-library-python/issues/965"">#965</a>)</li>; <li><a href=""https://github.com/googleapis/google-auth-library-python/commit/f9f23f4370f2a7a5b2c66ee56a5e700ef03b5b06""><code>f9f23f4</code></a> fix: revert &quot;feat: add api key support (<a href=""https://github-redirect.dependabot.com/googleapis/google-auth-library-python/issues/826"">#826</a>)&quot; (<a href=""https://github-redirect.dependabot.com/googleapis/google-auth-library-python/issues/964"">#964</a>)</li>; <li><a href=""https://github.com/googleapis/google-auth-library-python/commit/3c72365d8407bb097568919123cd7232c1a49f4f""><code>3c72365</code></a> chore: update user cred for system test (<a href=""https://github-redirect.dependabot.com/googleapis/google-auth-library-python/issues/966"">#966</a>)</li>; <li><a href=""https://github.com/googleapis/google-auth-library-python/commit/52c8ef90058120d7d04d3d201adc111664be526c""><code>52c8ef9</code></a> feat: ADC can load an impersonated service account credentials. (<a href=""https://github-redirect.dependabot.com/googleapis/google-auth-library-python/issues/962"">#962</a>)</li>; <li><a href=""https://github.com/googleapis/google-auth-library-python/commit/83b20f0b4d32b2ff1183a9c2926afd37f3baf92b""><code>83b20f0</code></a> chore: update user creds for system test (<a href=""https://github-redirect.dependabot.com/googleapis/google-auth-library-python/issues/963"">#963</a>)</li>; <li><a href=""https://github.com/googleapis/google-auth-library-python/commit/3c9feff3e9037a15bf07496623e3a810f117adcf""><code>3c9feff</code></a> chore(main): release 2.5.0 (<a href=""https://github-redir",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11546:10065,test,test,10065,https://hail.is,https://github.com/hail-is/hail/pull/11546,1,['test'],['test']
Testability,>; <Package expr>; <Module test_expr.py>; <UnitTestCase Tests>; <TestCaseFunction test_aggregators>; <TestCaseFunction test_densify_table>; <TestCaseFunction test_scan>; <Package genetics>; <Module test_reference_genome.py>; <Function test_reference_genome>; <Function test_reference_genome_sequence>; <Function test_reference_genome_liftover>; <Function test_read_custom_reference_genome>; <Package matrixtable>; <Module test_grouped_matrix_table.py>; <UnitTestCase Tests>; <TestCaseFunction test_joins_work_correctly>; <Module test_matrix_table.py>; <UnitTestCase Tests>; <TestCaseFunction test_collect_cols_by_key>; <TestCaseFunction test_naive_coalesce>; <TestCaseFunction test_range_count>; <Package methods>; <Module test_family_methods.py>; <UnitTestCase Tests>; <TestCaseFunction test_trio_matrix_1>; <Module test_impex.py>; <UnitTestCase VCFTests>; <TestCaseFunction test_glob>; <TestCaseFunction test_import_gvcfs>; <Module test_qc.py>; <UnitTestCase Tests>; <TestCaseFunction test_sample_qc>; <TestCaseFunction test_variant_qc>; <Module test_skat.py>; <Function test_logistic_skat_phenotypes_are_binary>; <Function test_logistic_skat_no_weights_R_truth>; <Module test_statgen.py>; <UnitTestCase Tests>; <TestCaseFunction test_impute_sex_same_as_plink>; <TestCaseFunction test_linreg_basic>; <Package relatedness>; <Module test_identity_by_descent.py>; <Function test_ibd_default_arguments>; <Module test_pc_relate.py>; <Function test_pc_relate_simple_example>; <Package table>; <Module test_grouped_table.py>; <UnitTestCase GroupedTableTests>; <TestCaseFunction test_aggregate_by>; <Module test_table.py>; <UnitTestCase Tests>; <TestCaseFunction test_aggregate1>; <TestCaseFunction test_annotate>; <Function test_lowered_persist>; <Function test_lowered_shuffle>; <Package utils>; <Module test_hl_hadoop_and_hail_fs.py>; <Function test_hadoop_methods_1[remote]>; <Function test_hadoop_methods_1[local]>; <Function test_hadoop_methods_2[remote]>; <Function test_hadoop_methods_2[local]>; <F,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13620#issuecomment-1720268851:2473,Test,Tests,2473,https://hail.is,https://github.com/hail-is/hail/pull/13620#issuecomment-1720268851,3,['Test'],"['TestCaseFunction', 'Tests']"
Testability,">; <h3>Documentation</h3>; <ul>; <li>update usage guide for v3.0.0 (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/456"">#456</a>) (<a href=""https://github.com/googleapis/python-logging/commit/8a67b73cdfcb9da545671be6cf59c724360b1544"">8a67b73</a>)</li>; </ul>; <h2>v2.7.0</h2>; <h3>Features</h3>; <ul>; <li>add context manager support in client (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/415"">#415</a>) (<a href=""https://www.github.com/googleapis/python-logging/commit/f5af16439807a0954ee78fa91cb69b9493b80176"">f5af164</a>)</li>; <li>added support for iam AuditData proto (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/396"">#396</a>) (<a href=""https://www.github.com/googleapis/python-logging/commit/e3a1eba74dd8b67bcc73a78f784189ef2a9927c2"">e3a1eba</a>)</li>; <li>use structured logging on GCF with python 3.7 (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/434"">#434</a>) (<a href=""https://www.github.com/googleapis/python-logging/commit/5055919f70c82b38de6d1fa7f1df6006865a857b"">5055919</a>)</li>; </ul>; <h3>Bug Fixes</h3>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/googleapis/python-logging/blob/main/CHANGELOG.md"">google-cloud-logging's changelog</a>.</em></p>; <blockquote>; <h2><a href=""https://github.com/googleapis/python-logging/compare/v2.7.0...v3.0.0"">3.0.0</a> (2022-01-27)</h2>; <h3>⚠ BREAKING CHANGES</h3>; <ul>; <li>make logging API more friendly to use (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/422"">#422</a>)</li>; <li>api consistency between HTTP and Gapic layers (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/375"">#375</a>)</li>; <li>support string-encoded json (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11574:5275,log,logging,5275,https://hail.is,https://github.com/hail-is/hail/pull/11574,1,['log'],['logging']
Testability,">; <h3>Removed</h3>; <ul>; <li>Support for Python 2.7</li>; <li>Debian directory</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/madzak/python-json-logger/commit/076b407aa7f34bc64a729cc77da336fb159d7597""><code>076b407</code></a> Release 2.0.2</li>; <li><a href=""https://github.com/madzak/python-json-logger/commit/f51d8fe76154380cac2fe6a30a944d67dc09df2d""><code>f51d8fe</code></a> added test/build requirements to ci file</li>; <li><a href=""https://github.com/madzak/python-json-logger/commit/b07b580670c6c4e340c372c73d0e76cdddc8b456""><code>b07b580</code></a> moved release out of test workflow. setup.cfg specifies a proper wheel now</li>; <li><a href=""https://github.com/madzak/python-json-logger/commit/4df12f93928bb66b053d8693e5cd60f38588069a""><code>4df12f9</code></a> removing missed python3.4 support data</li>; <li><a href=""https://github.com/madzak/python-json-logger/commit/7c40f4abf46ee6f3b5f4290f12ff3e9872ff9892""><code>7c40f4a</code></a> removed typo around build badge</li>; <li><a href=""https://github.com/madzak/python-json-logger/commit/0837da313ea796e353b40b574e3f82591a698caf""><code>0837da3</code></a> added env to git ignore</li>; <li><a href=""https://github.com/madzak/python-json-logger/commit/c58d7d4660780e3d4872189f9889200917a8930f""><code>c58d7d4</code></a> manifest will now include readme for setup.py long description. tox and</li>; <li><a href=""https://github.com/madzak/python-json-logger/commit/03e831488ce55e4aaf886806b2c66082fb8c4027""><code>03e8314</code></a> Removed references to travis</li>; <li><a href=""https://github.com/madzak/python-json-logger/commit/e8a8a20e09d66bcce41010f29b37107eafae6ba4""><code>e8a8a20</code></a> fixed python version mapping and typo in tox name</li>; <li><a href=""https://github.com/madzak/python-json-logger/commit/d02050343b58d4585145b5f19b0499d01ef9a1d8""><code>d020503</code></a> initial conversion from travis</li>; <li>Additional commits viewable in <a href=""htt",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11467:3473,log,logger,3473,https://hail.is,https://github.com/hail-is/hail/pull/11467,1,['log'],['logger']
Testability,">; <li><a href=""https://github.com/tqdm/tqdm/commit/a6139189856349e96b5bfad30e0c296d44861fb1""><code>a613918</code></a> tests: pin py3.5 keras</li>; <li><a href=""https://github.com/tqdm/tqdm/commit/02b29234f88272778b879b3da7589cbb9ce13dfd""><code>02b2923</code></a> tests: drop py3.6 nbval</li>; <li><a href=""https://github.com/tqdm/tqdm/commit/2a9f1d23d3033c40ba9568285a144d711aa7d02b""><code>2a9f1d2</code></a> tests: fix pytest-nbval, tidy versions</li>; <li><a href=""https://github.com/tqdm/tqdm/commit/6ba43f2631a18f8bfe2cd1bb2071c507e88ce6d8""><code>6ba43f2</code></a> tests: fix pytest-asyncio usage</li>; <li><a href=""https://github.com/tqdm/tqdm/commit/6426c55b0f546a51be6e60034f34fbcaa87f679b""><code>6426c55</code></a> cli: fix py3.9 <code>importlib</code> usage</li>; <li><a href=""https://github.com/tqdm/tqdm/commit/c1e7acebad76c0a6d17ce005d46e55f06bda1c09""><code>c1e7ace</code></a> tests: coverage warning</li>; <li><a href=""https://github.com/tqdm/tqdm/commit/2190b1b76d4c496a75a5e37560c5f24edfff6a74""><code>2190b1b</code></a> tests: add py3.10</li>; <li><a href=""https://github.com/tqdm/tqdm/commit/a14ea74a81be2bc0abe5b64e45e57cbd1d2687b1""><code>a14ea74</code></a> tests: fix nbval</li>; <li><a href=""https://github.com/tqdm/tqdm/commit/7cdbfee224f94c8bc63dceaab42637962f2f2a04""><code>7cdbfee</code></a> autonotebook: check for ipywidgets</li>; <li>Additional commits viewable in <a href=""https://github.com/tqdm/tqdm/compare/v4.42.1...v4.63.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=tqdm&package-manager=pip&previous-version=4.42.1&new-version=4.63.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11587:5857,test,tests,5857,https://hail.is,https://github.com/hail-is/hail/pull/11587,1,['test'],['tests']
Testability,">; <li><a href=""https://github.com/urllib3/urllib3/commit/2698537d52f8ff1f0bbb1d45cf018b118e91f637""><code>2698537</code></a> Update vendored six to 1.16.0</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/07bed791e9c391d8bf12950f76537dc3c6f90550""><code>07bed79</code></a> Fix deprecation warnings for Python 3.10 ssl module</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/d725a9b56bb8baf87c9e6eee0e9edf010034b63b""><code>d725a9b</code></a> Add Python 3.10 to GitHub Actions</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/339ad34c677c98fd9ad008de1d8bbeb9dbf34381""><code>339ad34</code></a> Use pytest==6.2.4 on Python 3.10+</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/f271c9c3149e20d7feffb6429b135bbb6c09ddf4""><code>f271c9c</code></a> Apply latest Black formatting</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/1884878aac87ef0494b282e940c32c24ee917d52""><code>1884878</code></a> [1.26] Properly proxy EOF on the SSLTransport test suite</li>; <li>See full diff in <a href=""https://github.com/urllib3/urllib3/compare/1.26.4...1.26.5"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.4&new-version=1.26.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependab",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10544:2678,test,test,2678,https://hail.is,https://github.com/hail-is/hail/pull/10544,1,['test'],['test']
Testability,">; <li>trace improvements (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/450"">#450</a>) (<a href=""https://github.com/googleapis/python-logging/commit/e0c5fc02160ae87faf4ba5c2b62be86de6b02cf3"">e0c5fc0</a>)</li>; </ul>; <h3>Bug Fixes</h3>; <ul>; <li>allow reading logs from non-project paths (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/444"">#444</a>) (<a href=""https://github.com/googleapis/python-logging/commit/97e32b67603553fe350b6327455fc9f80b8aa6ce"">97e32b6</a>)</li>; <li>api consistency between HTTP and Gapic layers (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/375"">#375</a>) (<a href=""https://github.com/googleapis/python-logging/commit/e1506fa9030776353878048ce562c53bf6ccf7bf"">e1506fa</a>)</li>; </ul>; <h3>Miscellaneous Chores</h3>; <ul>; <li>deprecate AppEngineHandler and ContainerEngineHandler (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/310"">#310</a>) (<a href=""https://github.com/googleapis/python-logging/commit/e3cac888d40bf67af11e57b74615b0c3b8e8aa3e"">e3cac88</a>)</li>; </ul>; <h3>Documentation</h3>; <ul>; <li>update usage guide for v3.0.0 (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/456"">#456</a>) (<a href=""https://github.com/googleapis/python-logging/commit/8a67b73cdfcb9da545671be6cf59c724360b1544"">8a67b73</a>)</li>; </ul>; <h2><a href=""https://www.github.com/googleapis/python-logging/compare/v2.6.0...v2.7.0"">2.7.0</a> (2021-11-02)</h2>; <h3>Features</h3>; <ul>; <li>add context manager support in client (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/415"">#415</a>) (<a href=""https://www.github.com/googleapis/python-logging/commit/f5af16439807a0954ee78fa91cb69b9493b80176"">f5af164</a>)</li>; <li>added support for iam AuditData proto (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/396"">#396</a>) (<a href=""https://ww",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11574:9566,log,logging,9566,https://hail.is,https://github.com/hail-is/hail/pull/11574,1,['log'],['logging']
Testability,">; <li>trace improvements (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/450"">#450</a>) (<a href=""https://github.com/googleapis/python-logging/commit/e0c5fc02160ae87faf4ba5c2b62be86de6b02cf3"">e0c5fc0</a>)</li>; </ul>; <h3>Bug Fixes</h3>; <ul>; <li>allow reading logs from non-project paths (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/444"">#444</a>) (<a href=""https://github.com/googleapis/python-logging/commit/97e32b67603553fe350b6327455fc9f80b8aa6ce"">97e32b6</a>)</li>; <li>api consistency between HTTP and Gapic layers (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/375"">#375</a>) (<a href=""https://github.com/googleapis/python-logging/commit/e1506fa9030776353878048ce562c53bf6ccf7bf"">e1506fa</a>)</li>; </ul>; <h3>Miscellaneous Chores</h3>; <ul>; <li>deprecate AppEngineHandler and ContainerEngineHandler (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/310"">#310</a>) (<a href=""https://github.com/googleapis/python-logging/commit/e3cac888d40bf67af11e57b74615b0c3b8e8aa3e"">e3cac88</a>)</li>; </ul>; <h3>Documentation</h3>; <ul>; <li>update usage guide for v3.0.0 (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/456"">#456</a>) (<a href=""https://github.com/googleapis/python-logging/commit/8a67b73cdfcb9da545671be6cf59c724360b1544"">8a67b73</a>)</li>; </ul>; <h2>v2.7.0</h2>; <h3>Features</h3>; <ul>; <li>add context manager support in client (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/415"">#415</a>) (<a href=""https://www.github.com/googleapis/python-logging/commit/f5af16439807a0954ee78fa91cb69b9493b80176"">f5af164</a>)</li>; <li>added support for iam AuditData proto (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/396"">#396</a>) (<a href=""https://www.github.com/googleapis/python-logging/commit/e3a1eba74dd8b67bcc73a78f784189ef2a9927c2"">e3a1eba</a>",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11574:4133,log,logging,4133,https://hail.is,https://github.com/hail-is/hail/pull/11574,1,['log'],['logging']
Testability,">; <ul>; <li>Update dependencies</li>; </ul>; <h2>5.2.0</h2>; <p>New features:</p>; <ul>; <li>Add <code>eachFile</code> method that adds an action to be applied to each source URL before it is downloaded. The action can be used to modify the filename of the target file.</li>; <li>Add <code>runAsync</code> method to download extension. This allows multiple files to be downloaded in parallel if the download extension is used. For normal download tasks, multiple files were downloaded in parallel already.</li>; </ul>; <h2>5.1.3</h2>; <p>Bug fixes:</p>; <ul>; <li>Initialize progress logger just before the download starts (see <a href=""https://github-redirect.dependabot.com/michel-kraemer/gradle-download-task/issues/243"">#243</a>)</li>; </ul>; <h2>5.1.2</h2>; <p>Bug fixes:</p>; <ul>; <li>Do not include default HTTP and HTTPS ports in <code>Host</code> header unless explicitly specified by the user</li>; </ul>; <h2>5.1.1</h2>; <p>Bug fixes:</p>; <ul>; <li>Correctly update cached sources</li>; </ul>; <p>Maintenance:</p>; <ul>; <li>Add integration tests for Gradle 7.5 and 7.5.1</li>; <li>Update dependencies</li>; </ul>; <h2>5.1.0</h2>; <p>New features:</p>; <ul>; <li>Add possibility to enable preemptive Basic authentication (through the new <code>preemptiveAuth</code> flag)</li>; <li>Warn if server does not send <code>WWW-Authenticate</code> header in 401 response</li>; <li>Log request and response headers in debug mode</li>; </ul>; <p>Maintenance:</p>; <ul>; <li>Add integration tests for Gradle 7.4.1 and 7.4.2</li>; <li>Update dependencies</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/michel-kraemer/gradle-download-task/commit/0f43ce67de72bd511d849c07bd7728c0d6f2e6dd""><code>0f43ce6</code></a> Document path and relativePath properties</li>; <li><a href=""https://github.com/michel-kraemer/gradle-download-task/commit/a8504f9d60d0264808894e4bb80d4a73b8086a3e""",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12345:2523,test,tests,2523,https://hail.is,https://github.com/hail-is/hail/pull/12345,1,['test'],['tests']
Testability,">; <ul>; <li>Update dependencies</li>; </ul>; <h2>5.2.0</h2>; <p>New features:</p>; <ul>; <li>Add <code>eachFile</code> method that adds an action to be applied to each source URL before it is downloaded. The action can be used to modify the filename of the target file.</li>; <li>Add <code>runAsync</code> method to download extension. This allows multiple files to be downloaded in parallel if the download extension is used. For normal download tasks, multiple files were downloaded in parallel already.</li>; </ul>; <h2>5.1.3</h2>; <p>Bug fixes:</p>; <ul>; <li>Initialize progress logger just before the download starts (see <a href=""https://github-redirect.dependabot.com/michel-kraemer/gradle-download-task/issues/243"">#243</a>)</li>; </ul>; <h2>5.1.2</h2>; <p>Bug fixes:</p>; <ul>; <li>Do not include default HTTP and HTTPS ports in <code>Host</code> header unless explicitly specified by the user</li>; </ul>; <h2>5.1.1</h2>; <p>Bug fixes:</p>; <ul>; <li>Correctly update cached sources</li>; </ul>; <p>Maintenance:</p>; <ul>; <li>Add integration tests for Gradle 7.5 and 7.5.1</li>; <li>Update dependencies</li>; </ul>; <h2>5.1.0</h2>; <p>New features:</p>; <ul>; <li>Add possibility to enable preemptive Basic authentication (through the new <code>preemptiveAuth</code> flag)</li>; <li>Warn if server does not send <code>WWW-Authenticate</code> header in 401 response</li>; <li>Log request and response headers in debug mode</li>; </ul>; <p>Maintenance:</p>; <ul>; <li>Add integration tests for Gradle 7.4.1 and 7.4.2</li>; <li>Update dependencies</li>; </ul>; <h2>5.0.5</h2>; <p>Maintenance:</p>; <ul>; <li>Publish signed artifacts to Gradle plugin portal</li>; <li>Update dependencies</li>; </ul>; <h2>5.0.4</h2>; <p>Bug fixes:</p>; <ul>; <li>Fix deadlock in <code>DownloadExtension</code> if <code>max-workers</code> equals 1 (thanks to <a href=""https://github.com/beatbrot""><code>@​beatbrot</code></a> for spotting this, see <a href=""https://github-redirect.dependabot.com/michel-kraeme",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12332:1804,test,tests,1804,https://hail.is,https://github.com/hail-is/hail/pull/12332,1,['test'],['tests']
Testability,"></a> Merge pull request from GHSA-29gw-9793-fvw7</li>; <li><a href=""https://github.com/ipython/ipython/commit/e548ee23ac460a99901f1cd43b94ae84a35ec393""><code>e548ee2</code></a> Swallow potential exceptions from showtraceback() (<a href=""https://redirect.github.com/ipython/ipython/issues/13934"">#13934</a>)</li>; <li><a href=""https://github.com/ipython/ipython/commit/0694b08b436203817059ec7e7136cf8561a6f013""><code>0694b08</code></a> MAINT: mock slowest test. (<a href=""https://redirect.github.com/ipython/ipython/issues/13885"">#13885</a>)</li>; <li><a href=""https://github.com/ipython/ipython/commit/865591252a67c6907fe03228b4053305715286e6""><code>8655912</code></a> MAINT: mock slowest test.</li>; <li><a href=""https://github.com/ipython/ipython/commit/a011765b44febfb11bae122d2ed7db763621ac8f""><code>a011765</code></a> Isolate the attack tests with setUp and tearDown methods</li>; <li><a href=""https://github.com/ipython/ipython/commit/c7a9470e540392c575aac46c3ee5cf4fe5123eb1""><code>c7a9470</code></a> Add some regression tests for this change</li>; <li><a href=""https://github.com/ipython/ipython/commit/fd34cf5f1f6e243243c738c6e0cf62eb682c4d68""><code>fd34cf5</code></a> Swallow potential exceptions from showtraceback()</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.34.0...8.10.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.34.0&new-version=8.10.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and ",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12806:1809,test,tests,1809,https://hail.is,https://github.com/hail-is/hail/pull/12806,1,['test'],['tests']
Testability,"></li>; </ul>; <h2>pytest-asyncio 0.23.4a2</h2>; <h1>0.23.4 (UNRELEASED)</h1>; <ul>; <li>pytest-asyncio no longer imports additional, unrelated packages during test collection <a href=""https://redirect.github.com/pytest-dev/pytest-asyncio/issues/729"">#729</a></li>; <li>Addresses further issues that caused an internal pytest error during test collection</li>; </ul>; <h2>Known issues</h2>; <p>As of v0.23, pytest-asyncio attaches an asyncio event loop to each item of the test suite (i.e. session, packages, modules, classes, functions) and allows tests to be run in those loops when marked accordingly. Pytest-asyncio currently assumes that async fixture scope is correlated with the new event loop scope. This prevents fixtures from being evaluated independently from the event loop scope and breaks some existing test suites (see <a href=""https://redirect.github.com/pytest-dev/pytest-asyncio/issues/706"">#706</a>). For example, a test suite may require all fixtures and tests to run in the same event loop, but have async fixtures that are set up and torn down for each module. If you're affected by this issue, please continue using the v0.21 release, until it is resolved.</p>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/pytest-dev/pytest-asyncio/commit/c34da04b82153ce052109bad31ccdbc0be7938e1""><code>c34da04</code></a> [docs] Mentioned pytest 8.2 compatibility fix in changelog.</li>; <li><a href=""https://github.com/pytest-dev/pytest-asyncio/commit/143f745d279afc070cf5cf6144fbf34d960fae72""><code>143f745</code></a> Fix compatibility with pytest 8.2 FixtureDef.unittest removal</li>; <li><a href=""https://github.com/pytest-dev/pytest-asyncio/commit/13d4b79f7ff0d9d0ea70880b3276f85dea7f1f15""><code>13d4b79</code></a> Remove unused function <code>_removesuffix</code></li>; <li><a href=""https://github.com/pytest-dev/pytest-asyncio/commit/cdd2c4906835b6f627d681fbee5d487554884e5f"">",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14507:6610,test,test,6610,https://hail.is,https://github.com/hail-is/hail/pull/14507,2,['test'],"['test', 'tests']"
Testability,"><code>@​DataProvider</code></a> Annotated Non-Static Methods Fail (Krishnan Mahadevan); New: Ability to provide custom error message for assertThrows\expectThrows methods (Anatolii Yuzhakov); Fixed: GITHUB-2780: Use SpotBugs instead of abandoned FindBugs; Fixed: GITHUB-2801: JUnitReportReporter is too slow; Fixed: GITHUB-2807: buildStackTrace should be fail-safe (Sergey Chernov); Fixed: GITHUB-2830: TestHTMLReporter parameter toString should be fail-safe (Sergey Chernov); Fixed: GITHUB-2798: Parallel executions coupled with retry analyzer results in duplicate retry analyzer instances being created (Krishnan Mahadevan)</p>; <p>7.6.1; Fixed: GITHUB-2761: Exception: ERROR java.nio.file.NoSuchFileException: /tmp/testngXmlPathInJar-15086412835569336174 (Krishnan Mahadevan); 7.6.0; Fixed: GITHUB-2741: Show fully qualified name of the test instead of just the function name for better readability of test output.(Krishnan Mahadevan); Fixed: GITHUB-2725: Honour custom attribute values in TestNG default reports (Krishnan Mahadevan); Fixed: GITHUB-2726: <a href=""https://github.com/AfterClass""><code>@​AfterClass</code></a> config method is executed for EACH <a href=""https://github.com/Test""><code>@​Test</code></a> method when parallel == methods (Krishnan Mahadevan); Fixed: GITHUB-2752: TestListener is being lost when implenting both IClassListener and ITestListener (Krishnan Mahadevan); New: GITHUB-2724: DataProvider: possibility to unload dataprovider class, when done with it (Dzmitry Sankouski); Fixed: GITHUB-217: Configure TestNG to fail when there's a failure in data provider (Krishnan Mahadevan); Fixed: GITHUB-2743: SuiteRunner could not be initial by default Configuration (Nan Liang); Fixed: GITHUB-2729: beforeConfiguration() listener method should be invoked for skipped configurations as well(Nan Liang); Fixed: assertEqualsNoOrder for Collection and Iterators size check was missing (Adam Kaczmarek); Fixed: GITHUB-2709: Testnames not working together with suites in suite ",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12665:12680,Test,TestNG,12680,https://hail.is,https://github.com/hail-is/hail/pull/12665,1,['Test'],['TestNG']
Testability,"><code>e0c5fc0</code></a> feat: trace improvements (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/450"">#450</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/97e32b67603553fe350b6327455fc9f80b8aa6ce""><code>97e32b6</code></a> fix: allow reading logs from non-project paths (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/444"">#444</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/a760e02371a55d6262e42de9e0222fffa2c7192b""><code>a760e02</code></a> feat: add json_fields extras argument for adding to jsonPayload (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/447"">#447</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/83d9ca8521fe7c470bb6755a48a97496515d7abc""><code>83d9ca8</code></a> feat!: make logging API more friendly to use (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/422"">#422</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/818213e143d6a1941211a48e0b23069a426ac300""><code>818213e</code></a> feat: avoid importing grpc when explicitly disabled (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/416"">#416</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/e1506fa9030776353878048ce562c53bf6ccf7bf""><code>e1506fa</code></a> fix!: api consistency between HTTP and Gapic layers (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/375"">#375</a>)</li>; <li><a href=""https://github.com/googleapis/python-logging/commit/6fa17735fe3edb45483ec5e3abd1f53c24ffa881""><code>6fa1773</code></a> feat!: support string-encoded json (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/339"">#339</a>)</li>; <li>Additional commits viewable in <a href=""https://github.com/googleapis/python-logging/compare/v1.12.1...v3.0.0"">compare view</a></li>; </u",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11574:13029,log,logging,13029,https://hail.is,https://github.com/hail-is/hail/pull/11574,1,['log'],['logging']
Testability,">Addresses further issues that caused an internal pytest error during test collection</li>; <li>Declares incompatibility with pytest 8 <a href=""https://redirect.github.com/pytest-dev/pytest-asyncio/issues/737"">#737</a></li>; </ul>; <h2>pytest-asyncio 0.23.4a2</h2>; <h1>0.23.4 (UNRELEASED)</h1>; <ul>; <li>pytest-asyncio no longer imports additional, unrelated packages during test collection <a href=""https://redirect.github.com/pytest-dev/pytest-asyncio/issues/729"">#729</a></li>; <li>Addresses further issues that caused an internal pytest error during test collection</li>; </ul>; <h2>Known issues</h2>; <p>As of v0.23, pytest-asyncio attaches an asyncio event loop to each item of the test suite (i.e. session, packages, modules, classes, functions) and allows tests to be run in those loops when marked accordingly. Pytest-asyncio currently assumes that async fixture scope is correlated with the new event loop scope. This prevents fixtures from being evaluated independently from the event loop scope and breaks some existing test suites (see <a href=""https://redirect.github.com/pytest-dev/pytest-asyncio/issues/706"">#706</a>). For example, a test suite may require all fixtures and tests to run in the same event loop, but have async fixtures that are set up and torn down for each module. If you're affected by this issue, please continue using the v0.21 release, until it is resolved.</p>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/pytest-dev/pytest-asyncio/commit/c34da04b82153ce052109bad31ccdbc0be7938e1""><code>c34da04</code></a> [docs] Mentioned pytest 8.2 compatibility fix in changelog.</li>; <li><a href=""https://github.com/pytest-dev/pytest-asyncio/commit/143f745d279afc070cf5cf6144fbf34d960fae72""><code>143f745</code></a> Fix compatibility with pytest 8.2 FixtureDef.unittest removal</li>; <li><a href=""https://github.com/pytest-dev/pytest-asyncio/commit/13d4b79f7ff0d",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14507:6492,test,test,6492,https://hail.is,https://github.com/hail-is/hail/pull/14507,1,['test'],['test']
Testability,">Did you test submitting jobs to the cluster itself? This can be quite a different environment than the >tests. Not as such. I ssh'ed in to the master node (after explicitly running a gcloud command to get a cluster with the 1.2 image rather than the default 1.2-deb9). I wasn't confident about ; how to get my own hail.jar to run in the cluster environment instead of the deployed version.; But since NativeModule.cpp is the biggest user of string's, I confirmed that we could run tests; *and* see codegen'ed files showing up in /tmp/hail_*/*.cpp, indicating that C++ decoders were; being generated and were working correctly. >Also, is there a plan about how users (or we) control this in the Dataproc setting? E.g. how do we >submit cluster_sanity_check.py with and without C++ codegen enabled?. I don't have a specific plan, just imagined that it wouldn't be difficult to arrange, and I don't; have any particular opinion about the best way to control it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4422#issuecomment-424835504:9,test,test,9,https://hail.is,https://github.com/hail-is/hail/pull/4422#issuecomment-424835504,3,['test'],"['test', 'tests']"
Testability,">⚠️ <b>Warning</b></summary>. ```; aiosignal 1.3.1 requires frozenlist, which is not installed.; aiohttp 3.8.5 requires frozenlist, which is not installed. ```; </details>. #### Vulnerabilities that will be fixed. ##### By pinning:; Severity | Priority Score (*) | Issue | Upgrade | Breaking Change | Exploit Maturity; :-------------------------:|-------------------------|:-------------------------|:-------------------------|:-------------------------|:-------------------------; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | **496/1000** <br/> **Why?** Recently disclosed, Has a fix available, CVSS 4.2 | Information Exposure Through Sent Data <br/>[SNYK-PYTHON-URLLIB3-6002459](https://snyk.io/vuln/SNYK-PYTHON-URLLIB3-6002459) | `urllib3:` <br> `1.26.17 -> 1.26.18` <br> | No | No Known Exploit . (*) Note that the real score may have changed since the PR was raised. Some vulnerabilities couldn't be fully fixed and so Snyk will still find them when the project is tested again. This may be because the vulnerability existed within more than one direct dependency, but not all of the affected dependencies could be upgraded. Check the changes in this PR to ensure they won't cause issues with your project. ------------. **Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open fix PRs.*. For more information: <img src=""https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiIxNGQyZDIxMi00ZjI4LTQ0OGEtYWRkNS02NThkNDEwNzQxZDYiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjE0ZDJkMjEyLTRmMjgtNDQ4YS1hZGQ1LTY1OGQ0MTA3NDFkNiJ9fQ=="" width=""0"" height=""0""/>; 🧐 [View latest project report](https://app.snyk.io/org/danking/project/b72ce54d-5de3-48e5-a1d4-6f8967681a12?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr). 🛠 [Adjust project settings](https://app.snyk",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13847:1430,test,tested,1430,https://hail.is,https://github.com/hail-is/hail/pull/13847,1,['test'],['tested']
Testability,">⚠️ <b>Warning</b></summary>. ```; aiosignal 1.3.1 requires frozenlist, which is not installed.; aiohttp 3.8.5 requires frozenlist, which is not installed. ```; </details>. #### Vulnerabilities that will be fixed. ##### By pinning:; Severity | Priority Score (*) | Issue | Upgrade | Breaking Change | Exploit Maturity; :-------------------------:|-------------------------|:-------------------------|:-------------------------|:-------------------------|:-------------------------; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | **581/1000** <br/> **Why?** Recently disclosed, Has a fix available, CVSS 5.9 | Information Exposure Through Sent Data <br/>[SNYK-PYTHON-URLLIB3-5926907](https://snyk.io/vuln/SNYK-PYTHON-URLLIB3-5926907) | `urllib3:` <br> `1.26.16 -> 1.26.17` <br> | No | No Known Exploit . (*) Note that the real score may have changed since the PR was raised. Some vulnerabilities couldn't be fully fixed and so Snyk will still find them when the project is tested again. This may be because the vulnerability existed within more than one direct dependency, but not all of the affected dependencies could be upgraded. Check the changes in this PR to ensure they won't cause issues with your project. ------------. **Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open fix PRs.*. For more information: <img src=""https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiI4MmZhNTRjZC0yOGI4LTQ3OTUtYWFjNy02MDE0NjY3NjMwNTUiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjgyZmE1NGNkLTI4YjgtNDc5NS1hYWM3LTYwMTQ2Njc2MzA1NSJ9fQ=="" width=""0"" height=""0""/>; 🧐 [View latest project report](https://app.snyk.io/org/danking/project/b72ce54d-5de3-48e5-a1d4-6f8967681a12?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr). 🛠 [Adjust project settings](https://app.snyk",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13771:1430,test,tested,1430,https://hail.is,https://github.com/hail-is/hail/pull/13771,1,['test'],['tested']
Testability,"?someVar=val and get a new page. This is slow (full round trip cost), and puts much more load on the server (since it not only needs to make the db call, but interpret PHP/Python to render the view). . There is a good reason why JS and monolithic single page applications became popular, with all of the initial-load (bundle size) downsides: client-side rendering allows perceived performance on the order of native mobile or desktop applications. Achieving interactive UI's without JS or Web Assembly, by using server-rendered pages, is ~impossible. We will achieve this interactivity without suffering the bundle-size-before-first-render cost, at minor developer costs vs server-side-only rendering. Lastly, it is possible to abuse any technology. Javascript brings to mind ""bloated""; this is an implementation issue. PHP/Python/Perl websites also used to be slow and ugly (Geocities).; * NodeJS/Javascript/V8 JIT is consistently faster than PHP, Python, and ~Java: https://www.techempower.com/benchmarks/. ## Why NodeJS, React, etc; 1. Javascript is the only language supported by modern browsers. Web assembly will change this (compile target == web assembly, language == rust | go | python), but is not nearly as mature; 2. Ecosystem. Chosen technologies are (likely) by far the most popular. We should quantify this better; 3. Performance. NodeJS is faster than Flask, React is ~fastest JS view layer. Next makes it really easy to split app into page bundles, and (on localhost) achieves DOMContentLoaded of ~70-100ms, and faster interactivity: first loaded page (the page of the current route) is ~6-10ms.; * [Techempower]: https://www.techempower.com/benchmarks/; * [Node vs , ](https://medium.com/@mihaigeorge.c/web-rest-api-benchmark-on-a-real-life-application-ebb743a5d7a3). * React vs other client side micro bench (pay attention to ""Non-keyed""): https://krausest.github.io/js-framework-benchmark/current.html; 4. Structure, aforementioned; 5. Path to relatively performant desktop and mo",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4931:3006,benchmark,benchmarks,3006,https://hail.is,https://github.com/hail-is/hail/pull/4931,1,['benchmark'],['benchmarks']
Testability,"@Dania-Abuhijleh This is infrastructure for your benchmark project. Once this goes in, you can change your Batch Client billing project to be benchmark instead of test.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9668:49,benchmark,benchmark,49,https://hail.is,https://github.com/hail-is/hail/pull/9668,3,"['benchmark', 'test']","['benchmark', 'test']"
Testability,@GreatBrando tomorrow remind me to talk about how to test this,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6531#issuecomment-509430798:53,test,test,53,https://hail.is,https://github.com/hail-is/hail/pull/6531#issuecomment-509430798,1,['test'],['test']
Testability,"@Sun-shan According to the error message you posted, Spark itself cannot find `/hail/test/BRCA1.raw_indel.vcf`:; ```; py4j.protocol.Py4JJavaError: An error occurred while calling z:org.apache.spark.api.python.PythonRDD.collectAndServe.; : org.apache.hadoop.mapred.InvalidInputException: Input path does not exist: file:/hail/test/BRCA1.raw_indel.vcf; ```. Looking at that error message, it looks like Spark is interpreting your path as a local file system path, _not_ a hadoop path. Moreover, earlier in your posted output this line:; ```; 17/08/15 08:58:31 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; ```; suggests that you're not actually connecting to a Spark cluster with a properly configured Hadoop installation. ---. Your Spark cluster appears improperly configured. I'm not sure if `pyspark` is even connecting to your cluster. You might try looking at [this StackOverflow post](https://stackoverflow.com/questions/34642292/cant-connect-pyspark-to-master) about connecting `pyspark` to a Spark cluster. I strongly recommend running `pyspark` again and executing:; ```; spark.sparkContext.master; ```; This should print the URL of your Spark master node. If this prints a String starting with `local`, then you're definitely not connecting to a Spark cluster.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-322539635:85,test,test,85,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-322539635,2,['test'],['test']
Testability,"@Sun-shan Can you try starting `pyspark` and executing:. ```; sc.textFile(""/hail/test/BRCA1.raw_indel.vcf"").count(); ```. and share with us the results.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-322217747:81,test,test,81,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-322217747,1,['test'],['test']
Testability,"@akotlar : @danking and I discussed this in person and we can add the test once the service account infrastructure is in place in Batch. Until then, this approach will not work.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5762#issuecomment-479631417:70,test,test,70,https://hail.is,https://github.com/hail-is/hail/pull/5762#issuecomment-479631417,1,['test'],['test']
Testability,"@akotlar Ok, so I finally managed to remove the internal requests. The asyncio learning curve was higher than I expected. The final product is a lot tighter than I expected. I eliminated all the run_forever and run_once stuff, all the threading, and I was able to move the log back into server.py. It involves three new things:; - [kill the whole loop if anything goes wrong](https://github.com/hail-is/hail/pull/5844/files#diff-14c16d042ba8b8608b60b3fcd1029869R899), which works wonderfully with k8s' automatic pod restarting; - [use a concurrent thread pool](https://github.com/hail-is/hail/pull/5844/files#diff-14c16d042ba8b8608b60b3fcd1029869R904) for any legacy blocking operations; - [a blocking-to-async convertor](https://github.com/hail-is/hail/pull/5844/files#diff-14c16d042ba8b8608b60b3fcd1029869R823) and a [blocking iterator to async iterator](https://github.com/hail-is/hail/pull/5844/files#diff-14c16d042ba8b8608b60b3fcd1029869R828) both of which stick blocking operations on a separate thread pool. Legacy blocking operations might end up queueing behind one another in the ""blocking pool"", but the rest of the application continues without interruption on the main event loop. I took the chance to reorder the k8s refresh and the k8s watch functions to be closer together, but that made the diff worse :/. Probably demands another review on Monday. cc: @cseed, possibly some asyncio engineering best practices in this",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5844#issuecomment-482744047:273,log,log,273,https://hail.is,https://github.com/hail-is/hail/pull/5844#issuecomment-482744047,1,['log'],['log']
Testability,"@akotlar is right, I tested this locally.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5489#issuecomment-468433413:21,test,tested,21,https://hail.is,https://github.com/hail-is/hail/pull/5489#issuecomment-468433413,1,['test'],['tested']
Testability,@akotlar where are the other whitelists? I'll have him log into auth0 now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6265#issuecomment-499142223:55,log,log,55,https://hail.is,https://github.com/hail-is/hail/pull/6265#issuecomment-499142223,1,['log'],['log']
Testability,"@akotlar, I just realized now you've been putting these tests in `test_linalg`. We have a file called `test_nd` where all the ndarray tests are. We should probably be putting them there instead.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9117#issuecomment-662625763:56,test,tests,56,https://hail.is,https://github.com/hail-is/hail/pull/9117#issuecomment-662625763,2,['test'],['tests']
Testability,@ammekk You have to fix documentation for this method. The documentation contains an example which is failing tests,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11213#issuecomment-1021566609:110,test,tests,110,https://hail.is,https://github.com/hail-is/hail/pull/11213#issuecomment-1021566609,1,['test'],['tests']
Testability,"@asvetlov thanks for your reply, and for your work on the Sanic project! I was really curious about the Techempower issue. Do you know why Sanic, on past rounds failed to complete test subsets without error? I haven’t had much of a chance to look into that yet, but https://github.com/huge-success/sanic/issues/53 doesn’t divulge much, and my own attempts to give Sanic problems haven’t yielded anything worrisome (i.e asyncpg works great under 2000 simultaneous connection load, request standard deviation is about as tight as aiohttp, and number of extremes / timeouts is smaller than aiohttp). Techwmpower benchmark was on version 0.7, if not earlier (the linked file in the Techempower issue is 0.7), and that version may have been affected by the issue described here: https://github.com/huge-success/sanic/issues/1176 which seems to have been largely addressed. . Edit: furthermore, other recent tests showed no significant issues with Sanic https://fgimian.github.io/blog/2018/06/05/python-api-framework-benchmarks/. Still the addressing the Techempower issues may help people feel more confident.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5242#issuecomment-461425481:180,test,test,180,https://hail.is,https://github.com/hail-is/hail/pull/5242#issuecomment-461425481,4,"['benchmark', 'test']","['benchmark', 'benchmarks', 'test', 'tests']"
Testability,"@bw2 that package name is a lie, sadly. The [maven repository page](https://mvnrepository.com/artifact/org.elasticsearch/elasticsearch-spark-20_2.11/5.5.1) for `org.elasticsearch:elasticsearch-spark-20_2.11:5.5.1` lists `org.apache.spark:spark-core_2.11:2.1.0` as a dependency, which is decidedly not 2.0. We'll have to use elasticsearch-spark 5.1.2. It's a bit annoying. You'll have to extend the [spark version-specific logic](https://github.com/hail-is/hail/pull/2049/files#diff-c197962302397baf3a4cc36463dce5eaR44) in `build.gradle`. You'll want to bind a new name, something like `elasticsearchSparkVersion`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2049#issuecomment-320335957:422,log,logic,422,https://hail.is,https://github.com/hail-is/hail/pull/2049#issuecomment-320335957,1,['log'],['logic']
Testability,"@catoverdrive I dismissed your review because I added more changes to address your comment on the FIXME. I think addRegionValue now does a minimal amount of work. In particular, if you write add a region value at the top level to the same region (rvb.start(t); rvb.addRegionValue(rv); rvb.end), it doesn't modify the region but simply sets start = rv.offset. This means that rvb.start can't actually do anything, and some other add routines need to check if they need to allocate. This adds some overhead that should get compiled away in the staged version. I also improved the tests to test adding to the same as well as a different region.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2299#issuecomment-336900902:578,test,tests,578,https://hail.is,https://github.com/hail-is/hail/pull/2299#issuecomment-336900902,2,['test'],"['test', 'tests']"
Testability,"@catoverdrive I looked over this, but in a diff vs ordrdd2rb where I can't make comments. Can you reopen this as a PR against cseed:ordrdd2rb and I'll review it there? Sorry for the logistic difficulty on this one.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2246#issuecomment-332519180:182,log,logistic,182,https://hail.is,https://github.com/hail-is/hail/pull/2246#issuecomment-332519180,1,['log'],['logistic']
Testability,"@catoverdrive I pushed a fix on here. I'll let Patrick review I think, unless you want to review my piece. Unfortunately, this kills performance. The no-key benchmark is about 5-6x faster (20s) than the keyed benchmark (110s)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6267#issuecomment-499585600:157,benchmark,benchmark,157,https://hail.is,https://github.com/hail-is/hail/pull/6267#issuecomment-499585600,2,['benchmark'],['benchmark']
Testability,"@catoverdrive I pushed more improvements just as you approved, would you mind taking a look at them as well (it's minimal). Sorry about that, thanks! I also want to clarify testing with Cotton before merging, let me know if you have any thoughts on the matter.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2544#issuecomment-350770505:173,test,testing,173,https://hail.is,https://github.com/hail-is/hail/pull/2544#issuecomment-350770505,1,['test'],['testing']
Testability,@catoverdrive This looks like it's been running for 2 hours now. I would have expected it to be merged already as well. Could this cause an infinite loop -- you didn't test it locally correct?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5723#issuecomment-478703255:168,test,test,168,https://hail.is,https://github.com/hail-is/hail/pull/5723#issuecomment-478703255,1,['test'],['test']
Testability,"@catoverdrive and I discussed 0.2 interfaces and agreed that the single_key logic will be stripped from group_rows_by and group_cols_by, and we'll add explode_rows and explode_cols. This will happen in a future PR",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2497#issuecomment-348280201:76,log,logic,76,https://hail.is,https://github.com/hail-is/hail/pull/2497#issuecomment-348280201,1,['log'],['logic']
Testability,@catoverdrive looks like the tests still expect a seed,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4166#issuecomment-415881986:29,test,tests,29,https://hail.is,https://github.com/hail-is/hail/pull/4166#issuecomment-415881986,1,['test'],['tests']
Testability,"@chrisvittal ; ```; test/hail/conftest.py:10: in <module>; from hail import current_backend, init, reset_global_randomness; /usr/local/lib/python3.9/dist-packages/hail/__init__.py:54: in <module>; from . import vds # noqa: E402; /usr/local/lib/python3.9/dist-packages/hail/vds/__init__.py:1: in <module>; from . import combiner; /usr/local/lib/python3.9/dist-packages/hail/vds/combiner/__init__.py:2: in <module>; from .variant_dataset_combiner import new_combiner, load_combiner, VariantDatasetCombiner, VDSMetadata; /usr/local/lib/python3.9/dist-packages/hail/vds/combiner/variant_dataset_combiner.py:15: in <module>; from hail.vds import VariantDataset; E ImportError: cannot import name 'VariantDataset' from partially initialized module 'hail.vds' (most likely due to a circular import) (/usr/local/lib/python3.9/dist-packages/hail/vds/__init__.py); =========================== short test summary info ============================; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14087#issuecomment-1847877295:20,test,test,20,https://hail.is,https://github.com/hail-is/hail/pull/14087#issuecomment-1847877295,2,['test'],['test']
Testability,"@chrisvittal I hit a segfault on this PR in the decoder trying to do; ```; mt = hl.read_matrix_table(filename); summarized = hl.experimental.densify(mt). summarized.write(output1, overwrite=True); summarized2 = hl.read_matrix_table(output1). def test1():; 	summarized._force_count_rows(). def test2():; 	summarized2._force_count_rows(); 	; print(timeit.repeat(test1, number=1, repeat=5)); print(timeit.repeat(test2, number=1, repeat=5)); ```; The weird thing is that it appears to be sporadic, since it successfully ran all 5 iterations of test 1 and was on the last iteration of test2, judging by the number of spark stages, and it ran successfully when I just ran it a second time.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6824#issuecomment-518855752:540,test,test,540,https://hail.is,https://github.com/hail-is/hail/pull/6824#issuecomment-518855752,1,['test'],['test']
Testability,"@chrisvittal I took the plunge and also created a `MatrixHybridReader`. Changes (including above):. - FunctionBuilder now accepts `Code[Unit]` to be added to the `init` method of the function object; - SRVB now has an `init` method that should be called in the `init` method of a function object if many methods will share the SRVB; - `CodeChar` now exists; - `TextMatrixReader` exists which mimics `TextTableReader`; these should get unified at some point; - minor documentation fixes to `import_matrix_table`; - better error messages wrt using the name `row_id`, which is reserved for use by `import_matrix_table` when there are no keys specified; - several new tests, including:; - extensive testing of the product space of `header`, `delimiter`, `header`, and `entry_type` (including such weird things as using `9` as the missing value); - a pathological file: `9`-separated values with `8` representing the missing value; - several tests that trigger the pruner; - rename `LoadMatrix.scala` to `TextMatrixReader.scala`",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6987#issuecomment-529001365:664,test,tests,664,https://hail.is,https://github.com/hail-is/hail/pull/6987#issuecomment-529001365,3,['test'],"['testing', 'tests']"
Testability,@chrisvittal I won't have time to do any work on this PR for the next two weeks. Can you take over testing + benchmarking?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7951#issuecomment-580336498:99,test,testing,99,https://hail.is,https://github.com/hail-is/hail/pull/7951#issuecomment-580336498,2,"['benchmark', 'test']","['benchmarking', 'testing']"
Testability,"@chrisvittal This is all garbage, the failure makes little sense. I've started back from scratch with master, and have re-implemented all of the functionality, from this branch, needed to have the Dataproc test run (which relies on LoadVCF). . It works fine. Something else is amiss. I'm going to finish reimplementing everything in that clean slate, and when everything is running close this PR and reissue. The diff between them will show the problem area, which is in some kind of global state affecting sparkContext or RDD",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6083#issuecomment-498334543:206,test,test,206,https://hail.is,https://github.com/hail-is/hail/pull/6083#issuecomment-498334543,1,['test'],['test']
Testability,"@chrisvittal Would you mind reviewing at least the changes since @tpoterba's approval, since he's out this week? Summary of the original changes is at the top. The main changes since that, which I made while debugging failing tests, are:; * Add `PType.loadCheapSCodeField`. Both this and `loadCheapSCode` now return an `SValue`, with the former using fields instead of locals.; * `SingleCodeSCode.loadToSValue` uses fields",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10797#issuecomment-908587926:226,test,tests,226,https://hail.is,https://github.com/hail-is/hail/pull/10797#issuecomment-908587926,1,['test'],['tests']
Testability,@chrisvittal all tests passing,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6263#issuecomment-498938995:17,test,tests,17,https://hail.is,https://github.com/hail-is/hail/pull/6263#issuecomment-498938995,1,['test'],['tests']
Testability,@chrisvittal can you test again on the changes in #4809? (either on that branch or on master once it goes in?),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4718#issuecomment-440537473:21,test,test,21,https://hail.is,https://github.com/hail-is/hail/issues/4718#issuecomment-440537473,1,['test'],['test']
Testability,"@chrisvittal not sure what this error is. Doesn’t happen on local (on local all tests pass, besides the one that also fails on master, `is.hail.methods.IBDSuite.ibdPlinkSameOnRealVCF`, because I don't have Plink installed). Will try to investigate tomorrow, first step is accessing the log, but if you have suggestions I’m interested!. 2019-05-16 00:23:41 Hail: INFO: test is.hail.expr.ir.ForwardLetsSuite.testAggregators SUCCESS; 2019-05-16 00:23:41 Hail: INFO: starting test is.hail.expr.ir.ForwardLetsSuite.testForwardingOps...; dlopen: /tmp/hail_dJAhNQ/hm_fd419e9b11e18f87ceb4.so: undefined symbol: _ZN4hail2FSC1EP8_jobject",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6083#issuecomment-492892219:80,test,tests,80,https://hail.is,https://github.com/hail-is/hail/pull/6083#issuecomment-492892219,6,"['log', 'test']","['log', 'test', 'testAggregators', 'testForwardingOps', 'tests']"
Testability,"@chrisvittal your functions, sir:. ```; f = hl.experimental.define_function(; lambda a, b: (a + 7) * b, hl.tint32, hl.tint32); self.assertEqual(hl.eval(f(1, 3)), 24). ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5435:132,assert,assertEqual,132,https://hail.is,https://github.com/hail-is/hail/pull/5435,1,['assert'],['assertEqual']
Testability,"@chrisvittal, these tests actually pass the local backend. I changed the tests to reflect this, but wanted to ping you to make sure that seems reasonable.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11345#issuecomment-1059604289:20,test,tests,20,https://hail.is,https://github.com/hail-is/hail/pull/11345#issuecomment-1059604289,2,['test'],['tests']
Testability,"@chrisvittal: Ed has already used mill on his machine, and helped with the PR. It would be great to both get your eyes on the changes, as well as checking out the branch and testing the setup instructions above (I've been using a seperate git worktree to avoid clobbering my gradle based intellij project).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14147#issuecomment-1912321464:174,test,testing,174,https://hail.is,https://github.com/hail-is/hail/pull/14147#issuecomment-1912321464,1,['test'],['testing']
Testability,"@cjllanwarne I tested that the `yum` commands work in the shell for the image with the `docker run` command, and the other component of the testing is that the pipeline step is now passing on this branch :)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14677#issuecomment-2338994256:15,test,tested,15,https://hail.is,https://github.com/hail-is/hail/pull/14677#issuecomment-2338994256,2,['test'],"['tested', 'testing']"
Testability,"@cseed - Here's the minimal changes needed as a proof of concept. I converted `_select` to use `TableMapRows`, `_select_globals` to use `TableMapGlobals`, `count` to use `TableCount`, and `parallelize` to use `TableParallelize`. Future to-do items:; - Add TVoid type to Python (interpret needs to know how to return the result -- i.e. TableExport); - Add parser support and tests for TableExport, TableAggregate, and TableWrite.; - Fix pretty/parser/Python render for some IRs such as TableRange",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4582:374,test,tests,374,https://hail.is,https://github.com/hail-is/hail/pull/4582,1,['test'],['tests']
Testability,"@cseed - this PR has a bad interaction with the changes made to [optimize inside ArrayAgg emit](https://github.com/hail-is/hail/pull/5765/files). . I've added a [test that catches the problem](https://github.com/hail-is/hail/pull/5710/files#diff-3273df362c814023cfa64428acf395cfR1122). The root of the issue is that we **cannot run NormalizeNames again** inside of that optimization pass -- it generates references that collide/overwrite existing bindings available when ArrayAgg is emitted. We should be creating globally-unique names inside ForwardLets, not normalized names.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5710#issuecomment-483001172:162,test,test,162,https://hail.is,https://github.com/hail-is/hail/pull/5710#issuecomment-483001172,1,['test'],['test']
Testability,@cseed ; ```; AccessDeniedException: 403 vdc-sa@hail-vdc.iam.gserviceaccount.com does not have storage.objects.list access to hail-ci-test.; ```. The CI tests use this hail-ci-test bucket as a fake deploy area. We'll need to fix that before we can merge any CI-related PRs.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4603#issuecomment-435938023:134,test,test,134,https://hail.is,https://github.com/hail-is/hail/pull/4603#issuecomment-435938023,3,['test'],"['test', 'tests']"
Testability,"@cseed @akotlar, ok comments addressed, thanks for the improvements. re: the env var, there is now just one env var, HAIL_APISERVER_URL. no special env var for the tests. I kept the backend test.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5893#issuecomment-484171424:164,test,tests,164,https://hail.is,https://github.com/hail-is/hail/pull/5893#issuecomment-484171424,2,['test'],"['test', 'tests']"
Testability,"@cseed @danking . Hi, I tried the following command , and configured the log path , but it still not worked, are there any suggestions?. spark-submit --executor-memory 16g --executor-cores 4 --class org.broadinstitute.hail.driver.Main ******/hail-all-spark.jar --master yarn-client importvcf --log-file /user/hail/hail.log /user/hail/split_test.vcf splitmulti write -o /user/hail/split_test_1_1.vds exportvcf -o /user/hail/split_test_1_1.vcf. **ERROR:**; WARNING: Running spark-class from user-defined location.; hail: info: running: importvcf /user/hail/sample.vcf; hail: info: Coerced sorted dataset; hail: info: running: splitmulti; hail: info: running: write -o /user/hail/sample_1008.vds; hail: write: caught exception: org.apache.spark.SparkException: Job aborted.; .........; at org.apache.spark.deploy.SparkSubmit.main(SparkSubmit.scala)org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 2.0 failed 4 times, most recent failure: Lost task 0.3 in stage 2.0 (TID 5, bio-x-3): java.io.IOException: The file being written is in an invalid state. Probably caused by an error thrown previously. Current state: COLUMN; ...........; at org.apache.spark.deploy.SparkSubmit.main(SparkSubmit.scala)java.io.IOException: The file being written is in an invalid state. Probably caused by an error thrown previously. Current state: COLUMN. [splitmulti_1_1.txt](https://github.com/hail-is/hail/files/521087/splitmulti_1_1.txt)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/825#issuecomment-252825829:73,log,log,73,https://hail.is,https://github.com/hail-is/hail/issues/825#issuecomment-252825829,3,['log'],"['log', 'log-file']"
Testability,"@cseed @johnc1231 Ok here's the final iteration. One more look over is appreciated, I added a bunch of tests. Commentary very welcome on testing strategy and code.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1895#issuecomment-312064471:103,test,tests,103,https://hail.is,https://github.com/hail-is/hail/pull/1895#issuecomment-312064471,2,['test'],"['testing', 'tests']"
Testability,@cseed @tpoterba I accidentally undid the caching behavior in the tests by using the name of input variables from their name in the environment instead of just using a default set of variable names. Should be much faster now.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5578:66,test,tests,66,https://hail.is,https://github.com/hail-is/hail/pull/5578,1,['test'],['tests']
Testability,@cseed @tpoterba I added several tests around binding that make me feel much more comfortable with the correctness.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1637#issuecomment-296274513:33,test,tests,33,https://hail.is,https://github.com/hail-is/hail/pull/1637#issuecomment-296274513,1,['test'],['tests']
Testability,"@cseed @tpoterba thoughts?. Once this is merged, we can just tell people to run. ```bash; curl -LO https://raw.githubusercontent.com/hail-is/hail/master/hail/diagnose.sh | bash; ```. and send us the output. We can include all sorts of useful diagnostics here. . I only upload the log and core files to a pastebin if you pass an argument to the script a la:. ```bash; curl -LO https://raw.githubusercontent.com/hail-is/hail/master/hail/diagnose.sh | bash -s foo; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5910:280,log,log,280,https://hail.is,https://github.com/hail-is/hail/pull/5910,1,['log'],['log']
Testability,"@cseed Added the redirect logic. It feels much slower (although there may be some small optimizations available). What do you think about using popup as the default, and then catch on error and send to redirect method? https://github.com/auth0/auth0.js/issues/868. This could work well as long as blocking happened rarely. So far, I haven't been able to trigger the block in any browser (Safari, Chrome, Firefox, all latest v), with content blockers enabled (which definitely block popups on other sites).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5162#issuecomment-456667812:26,log,logic,26,https://hail.is,https://github.com/hail-is/hail/pull/5162#issuecomment-456667812,1,['log'],['logic']
Testability,@cseed Back to you. Is there a good way to test if it's actually working?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2086#issuecomment-321899435:43,test,test,43,https://hail.is,https://github.com/hail-is/hail/pull/2086#issuecomment-321899435,1,['test'],['test']
Testability,@cseed Back to you; addressed & rebased except for comment about binary log and pow.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/807#issuecomment-248978679:72,log,log,72,https://hail.is,https://github.com/hail-is/hail/pull/807#issuecomment-248978679,1,['log'],['log']
Testability,"@cseed How did you verify only one is created? `eq` is literally the JVM's `if_acmpne`. I include a snippet below. I also checked that if I explicitly define `equals`, I still get `if_acmpne`. At the very least, I'd like the issue to be replicated as a test. I agree that the right solution is for this not to be a case class if we're using reference equality. Maybe we need equals_for_tests or something?. ```; (hail) 130 dking@wmb16-359 # cat foo.scala ; case class Fizzle(x: Int, y: String). class Foo {; def fizzle(x: Fizzle, y: Fizzle): Boolean = {; return x eq y; }; def anyref(x: AnyRef, y: AnyRef): Boolean = {; return x eq y; }; }; (hail) dking@wmb16-359 # scalac foo.scala; (hail) dking@wmb16-359 # javap -c foo; Warning: Binary file foo contains Foo; Compiled from ""foo.scala""; public class Foo {; public boolean fizzle(Fizzle, Fizzle);; Code:; 0: aload_1; 1: aload_2; 2: if_acmpne 9; 5: iconst_1; 6: goto 10; 9: iconst_0; 10: ireturn. public boolean anyref(java.lang.Object, java.lang.Object);; Code:; 0: aload_1; 1: aload_2; 2: if_acmpne 9; 5: iconst_1; 6: goto 10; 9: iconst_0; 10: ireturn. public Foo();; Code:; 0: aload_0; 1: invokespecial #22 // Method java/lang/Object.""<init>"":()V; 4: return; }; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5471#issuecomment-468472896:253,test,test,253,https://hail.is,https://github.com/hail-is/hail/pull/5471#issuecomment-468472896,1,['test'],['test']
Testability,@cseed I changed `includeStart` to `includesStart` everywhere except the JSON because it broke the backwards compatibility tests. Let me know if you'd prefer I only renamed the Python attributes.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3054#issuecomment-371308286:123,test,tests,123,https://hail.is,https://github.com/hail-is/hail/pull/3054#issuecomment-371308286,1,['test'],['tests']
Testability,@cseed I changed the BGEN test to work in the case where entries table does not return rows with missing entries. Feel free to ignore my comment on your BGEN PR #3743 with regards to this test.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3720#issuecomment-397801185:26,test,test,26,https://hail.is,https://github.com/hail-is/hail/pull/3720#issuecomment-397801185,2,['test'],['test']
Testability,"@cseed I got a version working!!!! I'd like to test on other potential pipelines and make a real example that will run for demo purposes. ```; In [1]: from pyapi import Pipeline; ...: p = Pipeline(); ...:; ...: subset = (p.new_task(); ...: .label('subset'); ...: .command('plink --bfile {{bfile}} --make-bed {{tmp1}}'); ...: .command(""awk '{ print $1, $2}' {{tmp1}}.fam | sort | uniq -c | awk '{ if ($1 != 1) print $2, $3 }' > {{tmp2}}""); ...: .command(""plink --bfile {{bfile}} --remove {{tmp2}} --make-bed {{ofile}}"")); ...:; ...: shapeit_tasks = []; ...: for contig in [str(x) for x in range(1, 4)]:; ...: shapeit = (p.new_task(); ...: .label('shapeit'); ...: .command('shapeit --bed-file {{bfile}} --chr ' + contig + ' --out {{ofile}}'); ...: .inputs(bfile=subset.ofile)); ...: shapeit_tasks.append(shapeit); ...:; ...: merger = (p.new_task(); ...: .label('merge'); ...: .command('cat {{files}} >> {{ofile}}'); ...: .inputs(files=[task.ofile for task in shapeit_tasks])); ...:; ...:; ...: p.write_output(merger.ofile + "".haps"", ""gs://jigold/final_output.txt""); ...: p.run(); ...:; #! /usr/bash; set -ex. # __TASK__0 subset; __RESOURCE__0=/tmp/9CiA1t; __RESOURCE__1=/tmp/y7HdVA; __RESOURCE__2=/tmp/l7skDb; __RESOURCE__3=/tmp/McFulO; plink --bfile $__RESOURCE__1 --make-bed $__RESOURCE__0; awk '{ print $1, $2}' $__RESOURCE__0.fam | sort | uniq -c | awk '{ if ($1 != 1) print $2, $3 }' > $__RESOURCE__2; plink --bfile $__RESOURCE__1 --remove $__RESOURCE__2 --make-bed $__RESOURCE__3. # __TASK__1 shapeit; __RESOURCE__4=/tmp/PQiR68; __RESOURCE__5=/tmp/McFulO; shapeit --bed-file $__RESOURCE__5 --chr 1 --out $__RESOURCE__4. # __TASK__2 shapeit; __RESOURCE__6=/tmp/sjoOQX; __RESOURCE__7=/tmp/McFulO; shapeit --bed-file $__RESOURCE__7 --chr 2 --out $__RESOURCE__6. # __TASK__3 shapeit; __RESOURCE__8=/tmp/gNw0he; __RESOURCE__9=/tmp/McFulO; shapeit --bed-file $__RESOURCE__9 --chr 3 --out $__RESOURCE__8. # __TASK__4 merge; __RESOURCE__10=/tmp/RY0Raq; __RESOURCE__11=(/tmp/PQiR68 /tmp/sjoOQX /tmp/gNw0he)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4937:47,test,test,47,https://hail.is,https://github.com/hail-is/hail/pull/4937,1,['test'],['test']
Testability,"@cseed I had to make the CloudSQL instance have a public IP in order for testing locally (not in the cluster) to work. Should I get rid of that option? Or can we have a separate test database? As for permissions for the databases, I couldn't find a way to say a specific user could not create a database. I think we can lock down a database with SQL commands after the database has been created. This will be good to discuss on Monday. See #5615",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5618#issuecomment-473591074:73,test,testing,73,https://hail.is,https://github.com/hail-is/hail/pull/5618#issuecomment-473591074,2,['test'],"['test', 'testing']"
Testability,"@cseed I moved unwrapping of the nested insert before the TableAnnotate node, as we talked about. The code is pretty messy and I'm still tidying it up, but it's now there if you wanted to take a look. re: splats---I talked to Tim about this earlier and he didn't think that annotate needed to support them, but I added a test case anyway and it seems to work fine.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2638#issuecomment-356122522:321,test,test,321,https://hail.is,https://github.com/hail-is/hail/pull/2638#issuecomment-356122522,1,['test'],['test']
Testability,@cseed I shrunk the PR down to the minimal code change and it's still failing the `LDPruneSuite.testNoPrune` test. Do I misunderstand how to use the Encoder/Decorder stuff?. The failure isn't an assertion error. I've somehow changed the number of records that result from an LDPrune.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3391#issuecomment-382377269:96,test,testNoPrune,96,https://hail.is,https://github.com/hail-is/hail/pull/3391#issuecomment-382377269,3,"['assert', 'test']","['assertion', 'test', 'testNoPrune']"
Testability,"@cseed I still need to clean up this and write more tests, but here's more-or-less what I've got in the meantime if you wanted to take a look. Builds on #3117.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3118:52,test,tests,52,https://hail.is,https://github.com/hail-is/hail/pull/3118,1,['test'],['tests']
Testability,@cseed I think this is a better organization. The pod specs in the database are static and can be inserted into the database upon job creation. So we now assert the job tasks are never null in the database. This doesn't change the problem of how to handle a pvc/pod creation error in the database. Should we delete the record upon failure? Poll and wait for creation to succeed up to N times?,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6075:154,assert,assert,154,https://hail.is,https://github.com/hail-is/hail/pull/6075,1,['assert'],['assert']
Testability,"@cseed I think this is probably ready for review. There's a couple of things that I'm going to look at/do more that aren't in this PR:; - add better docs for how random functions behave; - add more tests for randomness in various IR nodes; - add more tests and make sure that the optimization rules preserve the context that random functions are going to be evaluated in. @tpoterba and I talked briefly about the last one and it might involve restructuring simplify, since some rules are fine in isolation but will return different results when performed in combination (and sometimes one of the rules in question doesn't even involve the random node, which is kind of difficult to account for currently)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4104#issuecomment-411878967:198,test,tests,198,https://hail.is,https://github.com/hail-is/hail/pull/4104#issuecomment-411878967,2,['test'],['tests']
Testability,"@cseed I think this should clean up the entire temp directory when we exit, although I will do some testing. Anything we create in that temp directory (or using create_temp_file) should get cleaned up automatically.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2688:100,test,testing,100,https://hail.is,https://github.com/hail-is/hail/pull/2688,1,['test'],['testing']
Testability,@cseed I think we need to bump the Batch test time limit to 360. The tests passed in 328 seconds but wait-for.py marked it as a failure as it was over 300 seconds.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6015#issuecomment-489803786:41,test,test,41,https://hail.is,https://github.com/hail-is/hail/pull/6015#issuecomment-489803786,2,['test'],"['test', 'tests']"
Testability,@cseed I tried following the structure from the batch tests. This PR should go in before #5962.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6017:54,test,tests,54,https://hail.is,https://github.com/hail-is/hail/pull/6017,1,['test'],['tests']
Testability,@cseed I was planning to dig into this to find a small IR-only test that fails (removing the need for a dataset) but I'm feeling a bit oversubscribed right now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4522#issuecomment-429133433:63,test,test,63,https://hail.is,https://github.com/hail-is/hail/issues/4522#issuecomment-429133433,1,['test'],['test']
Testability,@cseed I will make a follow up PR that changes testing to make the checked version run. This at least allows developers to turn on this behavior when debugging locally.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9217#issuecomment-669211553:47,test,testing,47,https://hail.is,https://github.com/hail-is/hail/pull/9217#issuecomment-669211553,1,['test'],['testing']
Testability,"@cseed I'm not actually sure how best to test that the regions are being handled correctly in the generated code; I've manually checked the output of a few of the tests, but unsure how to do it in general. (I also deleted TableEmit.scala and corresponding tests, since they're dead code after the SparkBackend stuff went in.)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5248:41,test,test,41,https://hail.is,https://github.com/hail-is/hail/pull/5248,3,['test'],"['test', 'tests']"
Testability,"@cseed I'm really happy with the interface now! Could you please look over this again and let me know if there are any suggestions you have before I write some tests and give this to someone to code review. I also called this `pyapi` for lack of a better name and it's currently in the batch module... ```python3; from pyapi import Pipeline, resource_group_builder. p = Pipeline() # initialize a pipeline. # Define resource group builders (used with `declare_resource_group`); rgb_bfile = resource_group_builder(bed=""{root}.bed"",; bim=""{root}.bim"",; fam=""{root}.fam""). rgb_shapeit = resource_group_builder(haps=""{root}.haps"",; log=""{root}.log""). # Import a file as a resource; file = p.write_input('gs://hail-jigold/random_file.txt'). # Import a set of input files as a resource group; input_bfile = p.write_input_group(bed='gs://hail-jigold/input.bed',; bim='gs://hail-jigold/input.bim',; fam='gs://hail-jigold/input.fam'). # Remove duplicate samples from a PLINK dataset; subset = p.new_task(); subset = (subset; .label('subset'); .declare_resource_group(tmp1=rgb_bfile, ofile=rgb_bfile); .command(f'plink --bfile {input_bfile} --make-bed {subset.tmp1}'); .command(f""awk '{{ print $1, $2}}' {subset.tmp1.fam} | sort | uniq -c | awk '{{ if ($1 != 1) print $2, $3 }}' > {subset.tmp2}""); .command(f""plink --bed {input_bfile.bed} --bim {input_bfile.bim} --fam {input_bfile.fam} --remove {subset.tmp2} --make-bed {subset.ofile}""; )). # Run shapeit for each contig from 1-3 with the output from subset; for contig in [str(x) for x in range(1, 4)]:; shapeit = p.new_task(); shapeit = (shapeit; .label('shapeit'); .declare_resource_group(ofile=rgb_shapeit); .command(f'shapeit --bed-file {subset.ofile} --chr {contig} --out {shapeit.ofile}')). # Merge the shapeit output files together; merger = p.new_task(); merger = (merger; .label('merge'); .command('cat {files} >> {ofile}'.format(files="" "".join([t.ofile.haps for t in p.select_tasks('shapeit')]),; ofile=merger.ofile))). # Write the result of the merg",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4937#issuecomment-452753741:160,test,tests,160,https://hail.is,https://github.com/hail-is/hail/pull/4937#issuecomment-452753741,3,"['log', 'test']","['log', 'tests']"
Testability,"@cseed I've fixed string slicing to do the thing you describe (converting to utf16, slicing, converting back). The Java default is to replace invalid codepoints (e.g. if only one codepoint from a two-codepoint character is kept) with the replacement character \ufffd, but when converted back to UTF8 the replacement character is just `?`. I've written a test to reflect this, but this seems pretty encoding dependent and maybe like something we should just keep in mind and pick a consistent solution for.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4844#issuecomment-473490897:354,test,test,354,https://hail.is,https://github.com/hail-is/hail/issues/4844#issuecomment-473490897,1,['test'],['test']
Testability,"@cseed I've implemented `readPartitions` on `HailContext` and `writePartitions` on `RichRDD`, re-implemented read/write of blocks on `BlockMatrix` to preserve partitioning using these, and moved MatrixValue and KeyTable row read/write to use these. readPartitions and writePartitions use `unsafeReadPartition` and `writePartition` in RichHadoopConfig. `readRow` includes `close()`, and I've added `close()` to `readBlock` as well. At first I used `using` (see `readPartition` which is remarked out), but this closes the resource before the iterator iterated in the readRows case. Yet somehow, `testWriteRead` in VSMSuite passes even with `readPartition`. This test just creates a random VDS, writes, reads, compares. I added `testWriteRead2` which imports `sample.vcf`, writes, reads, compares. And indeed, the latter fails with `readPartition`. I have no explanation for why the behavior would differ (could the former be somehow cached?). I'm not happy with the asymmetry or lake of read safety if closing isn't propagated backward (I think it is for DataInputStream), but would like to get your feedback before messing around with these functions further. I've left the filename that had ReadRowsRDD with that name so it's easier to compare, but will change prior to merging since that class is gone. No class jumps out, should I just use the first one, `ArrayInputStream`, or a name that's not a class?. `ReadRDDPartition` in file ReadRowsRDDs and `IntPartition` in `BlockMatrix` have the same definition (the latter is used for more than just reading). I'm thinking of just having IntPartition located somewhere other than BlockMatrix. Any thoughts on where?. I added `sqrt` on blockSize in `blockMatrixGen` in order to get more cases with `blockSize < min(rows, cols)`. Only 1 of 10 had this property in `readWriteIdentityRandom` and its an important case to check with respect to the GridPartitioner dealing with block indices corrected (particularly with transpose in the mix).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2367:594,test,testWriteRead,594,https://hail.is,https://github.com/hail-is/hail/pull/2367,2,['test'],"['test', 'testWriteRead']"
Testability,"@cseed I've split the packages up so they can be imported from within the appropriate init method. Edit: re-running ./gradlew shadowJar fixes this. Tests are not passing, but seemingly not because of any of these changes. If I checkout last commit in master, they also fail. Furthermore, I can restore all changes from last FS PR manually, and no benefit. ```; HEAD is now at 117c365c3 [ci] also handle batch Ready state (#5909); (hail) alex:~/projects/hail/hail/python:$ pytest test/ -x; ======================================================================================= test session starts ========================================================================================; platform darwin -- Python 3.6.8, pytest-3.8.0, py-1.7.0, pluggy-0.8.1; rootdir: /Users/alex/projects/hail/hail/python, inifile:; plugins: xdist-1.22.2, metadata-1.8.0, html-1.19.0, forked-1.0.2; collected 591 items . test/hail/test_context.py E. ============================================================================================== ERRORS ==============================================================================================; _______________________________________________________________________ ERROR at setup of Tests.test_init_hail_context_twice _______________________________________________________________________. def startTestHailContext():; global _initialized; if not _initialized:; url = os.environ.get('HAIL_TEST_SERVICE_BACKEND_URL'); if url:; hl.init(master='local[2]', min_block_size=0, quiet=True, _backend=hl.backend.ServiceBackend(url)); else:; > hl.init(master='local[2]', min_block_size=0, quiet=True). test/hail/helpers.py:18: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; hail/typecheck/check.py:561: in wrapper; return __original_func(*args_, **kwargs_); hail/context.py:264: in init; _optimizer_iterations,_backend)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5878#issuecomment-484651928:148,Test,Tests,148,https://hail.is,https://github.com/hail-is/hail/pull/5878#issuecomment-484651928,4,"['Test', 'test']","['Tests', 'test']"
Testability,@cseed Should be done now. `assembly:single` will build both jars into `target/hail-0.2-sha-jar-with-dependencies.jar` and `target/hail-0.2-sha-test-jar-with-dependencies.jar`,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5906#issuecomment-484685725:144,test,test-jar-with-dependencies,144,https://hail.is,https://github.com/hail-is/hail/pull/5906#issuecomment-484685725,1,['test'],['test-jar-with-dependencies']
Testability,"@cseed Should the behavior of the logs be to not have a link if the job is ready or pending or to report None? Right now, we report None for `status` if it's ready or pending and have a web.HTTPNotFound error for logs when it's pending or ready. I think we should have it be consistent between logs and status and I think having no links in the ready and pending case is clearer.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7449#issuecomment-549440769:34,log,logs,34,https://hail.is,https://github.com/hail-is/hail/pull/7449#issuecomment-549440769,3,['log'],['logs']
Testability,"@cseed The CI tests rely on the service waiting functionality. In particular, they do not have permissions to use `kubectl rollout status` so I can't switch to waiting for a deployment.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7564#issuecomment-557584616:14,test,tests,14,https://hail.is,https://github.com/hail-is/hail/pull/7564#issuecomment-557584616,1,['test'],['tests']
Testability,"@cseed The only test failing now is that Java test, so we should be at a point where the next thing to think about is how to have a separate ""debug"" build of Hail that uses the checked allocator. And then we'd specify that the failing test should only run on the checked allocator.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8878#issuecomment-663084550:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/8878#issuecomment-663084550,3,['test'],['test']
Testability,@cseed The part I am stuck on is the authentication for the router resolver. How does the batch2 instance in a test namespace get access to the real encryption key that the router resolver is expecting? Can you also double check the nginx configuration?,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6918:111,test,test,111,https://hail.is,https://github.com/hail-is/hail/pull/6918,1,['test'],['test']
Testability,"@cseed There are a lot of things in here that I didn't know exactly what to do, so I just got something working. You can't have async __init__ methods. Hence the work-around with `create`. Not sure what the SQL schema we want is. How to get the database set up for testing. Get it working on cloud...",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5572:265,test,testing,265,https://hail.is,https://github.com/hail-is/hail/pull/5572,1,['test'],['testing']
Testability,@cseed This is ready for review. Please check the logic for _create_pod. I added a Try/Except that sets the pod to failure if pod_creation fails.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6075#issuecomment-491011207:50,log,logic,50,https://hail.is,https://github.com/hail-is/hail/pull/6075#issuecomment-491011207,1,['log'],['logic']
Testability,"@cseed This is the IR infrastructure needed for the `groupBy` aggregator. I wrote tests by adding a `KeyedAggregator` so we can use the interpreter. I don't think it is trivial to incorporate `groupBy` into the AST / Parser. Since we're going to rip out the AST soon anyways, I decided to leave the code where it's at and expose it in Python once we can build IRs in Python.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3768:82,test,tests,82,https://hail.is,https://github.com/hail-is/hail/pull/3768,1,['test'],['tests']
Testability,"@cseed This should now be sufficient for Wed. I will probably add 2 features before then: reconnecting web sockets (though connection should infrequently drop, shouldn't affect workshop), and an admin panel to blow out users / delete notebooks. And maybe SSL. Edit: my commit https://github.com/hail-is/hail/pull/5162/commits/bac155c9713d99c68cd7d0605eb59585656c14ea makes reference to csrf. This may not be necessary: inspecting the login request I notice a nonce, generated by the auth0-js lib, sent with login and silent token rotation / refresh, which is nice. Assuming it's used to prevent replay attacks, in this case it has the same purpose as a CSRF token. Yay auth0. Edit2: Regarding performance. Scorecard page, before server-side caching takes 100ms on refresh, and 50ms on navigation from another page. This effectively means no overhead from my web implementation. Why? It takes ~50ms to return *anything* (including favicon.ico of 0 bytes), i.e 50ms is the time it takes from my computer to kubernetes and back, with no additional work done. We have 2 such requests currently when visiting app.hail.is/scorecard: one to to the web app server, one to scorecard/json. After caching (which is invalidated every 3 minutes), takes 50ms. So, if current scorecard.hail.is needed to hit a json endpoint to get data for its template, we would expect it to be no faster. Alternatively if we placed the json-generating function in the web-app's nodejs server it's response time would drop by ~50ms.; * I also am trying to use the internal DNS (SSR phase routes to http://scorecard/json, so should use kubernetes DNS; still take ~50ms to get the json... before caching).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5162#issuecomment-460071524:434,log,login,434,https://hail.is,https://github.com/hail-is/hail/pull/5162#issuecomment-460071524,2,['log'],['login']
Testability,@cseed You can take this for a spin at https://internal.hail.is/dking/website/ . It's a bit sluggish. the end-to-end timing at gateway for `api.html` (the API reference) hovers around 125ms. About 35ms is website / jinja2 rendering. Router adds anywhere from 5ms to 20ms. It seems like hitting the router-resolver and whatever else `gateway` does makes up the rest. [Service logs here](https://console.cloud.google.com/logs/query;query=labels.%22k8s-pod%2Fapp%22%3D%22gateway%22%20OR%20labels.%22k8s-pod%2Fapp%22%3D%22router%22%20OR%20labels.%22k8s-pod%2Fapp%22%3D%22website%22%0AjsonPayload.message:%22%2Fdking%2Fwebsite%2Fdocs%2F0.2%2Fapi.html%22;summaryFields=labels%252F%2522k8s-pod%252Fapp%2522:false:32:beginning?project=hail-vdc&query=%0A). I think in production it will be fine because there's a fair bit less indirection.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10056#issuecomment-780248628:375,log,logs,375,https://hail.is,https://github.com/hail-is/hail/pull/10056#issuecomment-780248628,2,['log'],['logs']
Testability,"@cseed You're really the only one who understands this well enough to review it. resolves #5168 . In order to create a test, we'd have to expose the pod_name to the clients and the tests would have to talk to k8s to ensure said pod was really deleted. Not a terrible test, but maybe more work than I care to do right now given my other commitments. See the [description of the issue in a comment on #5168](; https://github.com/hail-is/hail/issues/5168#issuecomment-456618542). cc: k8s-and-services team: @jigold @tpoterba @akotlar",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5191:119,test,test,119,https://hail.is,https://github.com/hail-is/hail/pull/5191,3,['test'],"['test', 'tests']"
Testability,"@cseed after comments in #2482, I reworked this so that for each block row, each overlapping parent partition is iterated through once, writing out the full row into files corresponding to block columns. Based on the WriteBlocksRDDPartition comment and looking at BlockedRDD, now rather than computing the indices of all non-empty overlapping parent partitions, I switched to just computing the first and last overlapping parent partitions, and the number of rows to skip in the first partition, and put this in WriteBlocksRDDPartition. I'd appreciate feedback on this approach, and whether I've put the ""right"" data in WriteBlocksRDDPartition. In particular, I'm unsure why `computeBlockRowDependencies` would have been called multiple times given that it's a private val in the class. Is the class serialized to workers before function evaluation? Is parentPartitionBoundaries recomputed as well? I don't have a clear model. The function `computeBlockRowDependencies` could be moved directly into getDependencies; I kept it separate in order to write a simple test. I'm not a huge fan of the array of tuples but it seemed more natural than three arrays.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2494:1062,test,test,1062,https://hail.is,https://github.com/hail-is/hail/pull/2494,1,['test'],['test']
Testability,@cseed an issue remains: not sure if this is the cause:. `ls: cannot access 'PARK_HOME/python/lib/py4j-*-src.zip': No such file or directory` as a result of `make test`,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5929#issuecomment-485140905:163,test,test,163,https://hail.is,https://github.com/hail-is/hail/pull/5929#issuecomment-485140905,1,['test'],['test']
Testability,@cseed back to you test hopefully pass now,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1902#issuecomment-321381973:19,test,test,19,https://hail.is,https://github.com/hail-is/hail/pull/1902#issuecomment-321381973,1,['test'],['test']
Testability,@cseed back to you. I'm open to suggestions on how to structure the tests locations / file naming.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1827#issuecomment-302134641:68,test,tests,68,https://hail.is,https://github.com/hail-is/hail/pull/1827#issuecomment-302134641,1,['test'],['tests']
Testability,"@cseed bump. This is blocking further testing on dbuf. Without this, there's a race condition where the image is deleted by CI before the entire StatefulSet starts.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7564#issuecomment-558382580:38,test,testing,38,https://hail.is,https://github.com/hail-is/hail/pull/7564#issuecomment-558382580,1,['test'],['testing']
Testability,"@cseed definitely ready for some feedback. I replaced Iterable with SharedIterable in VSM, and carried it through to the point that Main builds ... which took more than 30 lines. I had to comment out VSMSubgen because I could not get this to work in SharedIterable:. `implicit def canBuildFrom[T]: CanBuildFrom[Coll, T, SharedIterable[T]] = ReusableCBF.asInstanceOf[GenericCanBuildFrom[T]]`. I left in FIXME's wherever I used toIterable to go from SharedIterable to Iterable, such as VSM functions that will need to be implemented separately in GDS and VSM (in retrospect, I suppose I could have just searched for toIterable usages). toIterable won't yet cause problems since I haven't yet moved to MutableGenotypeStreamIterator, so I could temporarily make the test work with toIterators as well, though I'd then need to go and switch them all back later. Once the Builder issue is resolved, I'm thinking the next step would be to make SharedIterable abstract and add abstract functions that are necessary to remove the toIterables and for the tests (like `expandCollect`). Then I'd have two realizations, SharedIterableGenotype for VDS which takes advantage of copy on Genotype, and UnsharedIterable (names need adjustment) for GDS which assumes no sharing. If all tests pass, I'd then switch over to MutableGenotypeStreamIterator...and in principal everything should pass.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1570:762,test,test,762,https://hail.is,https://github.com/hail-is/hail/pull/1570,3,['test'],"['test', 'tests']"
Testability,@cseed do you have tests for this? I don't see any right now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4663#issuecomment-434401329:19,test,tests,19,https://hail.is,https://github.com/hail-is/hail/pull/4663#issuecomment-434401329,1,['test'],['tests']
Testability,@cseed done. @jbloom22 I believe I've addressed everything except for the PCs spark matrix comment and making a test value be a field.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2270#issuecomment-335644547:112,test,test,112,https://hail.is,https://github.com/hail-is/hail/pull/2270#issuecomment-335644547,1,['test'],['test']
Testability,@cseed how about `ci-test-$(cat /dev/urandom | base64 | head -c 40)`?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4241#issuecomment-417791819:21,test,test,21,https://hail.is,https://github.com/hail-is/hail/pull/4241#issuecomment-417791819,1,['test'],['test']
Testability,@cseed it looks like tests are failing with `I == Z`. Is there another place you need to carry through the Boolean as Int thing?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8537#issuecomment-612563478:21,test,tests,21,https://hail.is,https://github.com/hail-is/hail/pull/8537#issuecomment-612563478,1,['test'],['tests']
Testability,@cseed looks like something is wrong I the docs / python tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2236#issuecomment-330897057:57,test,tests,57,https://hail.is,https://github.com/hail-is/hail/pull/2236#issuecomment-330897057,1,['test'],['tests']
Testability,@cseed please hold off on this until I incorporate changes in the export branch. I want to make sure everything is working with the import/export test.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1698#issuecomment-298988120:146,test,test,146,https://hail.is,https://github.com/hail-is/hail/pull/1698#issuecomment-298988120,1,['test'],['test']
Testability,"@cseed please see comments above and look at testToKeyGsWeightRdd(), let me know if you think it's enough. (I was able to rip out the SparseVector code that was supporting the GT case as well now that we've gone generic)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2544#issuecomment-350838973:45,test,testToKeyGsWeightRdd,45,https://hail.is,https://github.com/hail-is/hail/pull/2544#issuecomment-350838973,1,['test'],['testToKeyGsWeightRdd']
Testability,@cseed surely now it will pass; set --ignore fs/google_fs.py in the doctest run. Previous error was caused by the testing of this file (since CI doesn't yet have gcsfs). https://storage.googleapis.com/hail-ci-0-1/ci/4d17fb5a7df0bb9d766eb80f4a2926b3ed7bbb70/564ab40014a5aa349a517a8353d09eac4a5273f7/index.html,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5878#issuecomment-485139453:114,test,testing,114,https://hail.is,https://github.com/hail-is/hail/pull/5878#issuecomment-485139453,1,['test'],['testing']
Testability,@cseed tests are failing because you didn't check that the indexee was type tarray,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5359#issuecomment-464059636:7,test,tests,7,https://hail.is,https://github.com/hail-is/hail/pull/5359#issuecomment-464059636,1,['test'],['tests']
Testability,@cseed tests pass,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3895#issuecomment-405725628:7,test,tests,7,https://hail.is,https://github.com/hail-is/hail/pull/3895#issuecomment-405725628,1,['test'],['tests']
Testability,"@cseed the tests compare skat and R which computes stats one group at a time, so I can compare product / explode / skat to product / explode / rskat, but that’s still only testing skat and product / explode independently. I could get some numbers out from the previous version with single_key=True and hardcode those into a test of the new version. I'd added testToKeyGsWeightRdd() specifically to check that the grouping by key checks out. I think it'd make more sense to expand that test to a case that uses product / explode. Do you agree?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2544#issuecomment-350392288:11,test,tests,11,https://hail.is,https://github.com/hail-is/hail/pull/2544#issuecomment-350392288,5,['test'],"['test', 'testToKeyGsWeightRdd', 'testing', 'tests']"
Testability,"@cseed this fixes the bug that was caught by testConstructor in your branch, but it was distinct enough that I broke it out as a separate PR, if that's ok.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3837:45,test,testConstructor,45,https://hail.is,https://github.com/hail-is/hail/pull/3837,1,['test'],['testConstructor']
Testability,@cseed what tests do you want to see?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5201#issuecomment-459189555:12,test,tests,12,https://hail.is,https://github.com/hail-is/hail/pull/5201#issuecomment-459189555,1,['test'],['tests']
Testability,"@cseed yes, if you do something like `log.info(""hi"", extra_field=31)` that will be easy to parse.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8149#issuecomment-592103445:38,log,log,38,https://hail.is,https://github.com/hail-is/hail/pull/8149#issuecomment-592103445,1,['log'],['log']
Testability,"@cseed, digesting from this and our in-person conversation:. I added a steps about job dependencies and batch closure. Regarding ""a way to refer to individual inputs/outputs"", in the original post, I gave the example of:. ```; - type: exec; name: build-jar; image: hail-pr-builder; namespace: ns; command: [""./gradlew"", ""test"", ""shadowJar""]; outputs:; - ""build/libs/hail-all-spark.jar""; - type: exec; name: pytests; image: hail-pr-builder; dependsOn:; - build-jar; command: [""./run-python-tests-using-input-jar.sh""]; ```. The outputs of a job are stated explicitly by the definition. For the `pytests` job in the example above, the input from `build-jar` is placed at `/inputs/build-jar`. Regarding ""specify a series of stacked containers to execute"", I don't see a straightforward way to implement this. It's tricky enough to have a ""anti-init""/""finalizer"" container. Inter-job I/O will be handled by batch. The user controls the image and the command and the environment variables of the build step, so they can arrange for permission to copy results to a bucket they own. Are we worried about the setting of user's wanting to run untrustworthy software? They already run arbitrary software on cloud instances that have plenty of latent credentials. I think we can at least punt on this until other functionality is in. Local disk sounds like a nice thing to add eventually. Agreed, that sounds like a nice model. I'll consider it as I envision a persistent batch system.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5193#issuecomment-459537502:321,test,test,321,https://hail.is,https://github.com/hail-is/hail/issues/5193#issuecomment-459537502,2,['test'],"['test', 'tests-using-input-jar']"
Testability,"@cseed, so I looked into it this morning and somehow your implementation failed as prev.partitions always returns null in this context (not sure why). I modified the implementation of HeadRDD and hopefully you'll like it: It can now either return an approximately the number of variants based on the number of variants in the 1st partition or an exact number of variants with a pass to compute the number of variants (in parallel and using approximation from the 1st partition -- so pretty fast). In any case, it never goes through the whole dataset and my tests indicate that it's pretty fast (see below for ExAC on Cray). Also, it retains the same partitioning as the parent RDD. Approximate version:; nSamples 60,706; nVariants 11,804; hail: info: timing:; read: 7.579s; head: 5.413s; count: 47.792s. Exact version:; nSamples 60,706; nVariants 10,000; hail: info: timing:; read: 4.472s; head: 5.283s; count: 54.490s",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/446#issuecomment-235344742:557,test,tests,557,https://hail.is,https://github.com/hail-is/hail/pull/446#issuecomment-235344742,1,['test'],['tests']
Testability,"@cseed,. > The point isn't to save the few untars, the point is to make the general facilities performant for everyone. Basically, I think directory outputs are untenable in the current design unless they are very small, which is why you're doing all this for your use case, and the tar is still probably as good (if not better) in that case. Fix it for everyone's use case so nobody has to go through this in the future. I agree directory outputs with large file counts are untenable. Are you suggesting we do this at the batch level for any directory? That feels a bit opaque, because users may expect that if they specify their output is a directory that they can selectively download certain subdirectories. At the build.yaml level, I see a couple explicit options:; ```; outputs:; - from: /io/repo/hail/resources; to: /resources.tgz; codec: gzip; ```; and; ```; inputs:; - from: /resources.tgz; to: /io/resources; codec: gzip; ```; ?. There's also this, which irks me a bit because it's punny, but:; ```; outputs:; - from: /io/repo/hail/resources; to: /resources.tgz; ```; and. ```; inputs:; - from: /resources.tgz; to: /io/resources; extract:; - .; ```; ```; inputs:; - from: /resources.tgz; to: /io/resources; extract:; - foo; - bar; ```. A little bit my reaction to this is that we're creating a DSL that provides minor value relative to the user using `tar` in their `runImage` steps. E.g. build hail is explicit and not verbose:; ```; ...; tar czf test.tar.gz -C python test; tar czf resources.tar.gz -C src/test resources; tar czf data.tar.gz -C python/hail/docs data; tar czf www-src.tar.gz www; tar czf cluster-tests.tar.gz python/cluster-tests; ```; and `test_hail_java` is fine:; ```; ...; tar xzf resources.tar.gz -C src/test; ...; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7626#issuecomment-560470857:1458,test,test,1458,https://hail.is,https://github.com/hail-is/hail/pull/7626#issuecomment-560470857,6,['test'],"['test', 'tests']"
Testability,"@cseed: It would be great if we could merge this into master soon -- there's a lot of changes here!. Highlight of major changes:; 1. Dosage is implemented in Genotype.scala; - A user can get either dosages `.dosage` or PLs `.pl`; - To go from PLs to Dosages: rescale each PL (10^(-PL/10)), take the sum of the rescaled numbers, then divide by the sum. This is assuming equal weights prior (can incorporate alternate prior later); - To go from Dosages to PLs: same transformation as before; 2. INFO score is implemented in variantqc; - No tests for info score yet as still uncertain which method to use; - My computation agrees with SNPTEST but not QCTOOL; 3. `importgen` and `exportgen` are now implemented; 4. SplitMulti will split dosages correctly except for the setting of false ref. If the original dosage with N genotypes had more than one maximum value [ex: (0.2, 0.2, 0.1, 0.1, 0.1, 0.3)], then the original genotype is -1. But after combining dosages, then there is one unique maximum value. The fakeref flag is not set in this case, but the genotype is > 0.; 5. A randomly generated genotype can have two values very close together (0.4035, 0.4036, 0.2...) that when read back in via gen file or bgen file will have rounding error (0.4035, 0.4035, 0.2...) so there is no maximal genotype anymore (gt = -1). I don't think this is a huge concern as it can only happen if the max dosage is <= 0.5, and these will get filtered out by most users anyways. **To-Do:; 1. Finalize INFO score calculation and write tests; 2. Fix null variant in PLINK code (want to do this in separate branch); 3. Modify variant qc to read parameter about data so info score only calculated for dosage data and likewise for statistics about depth, gq etc.; 4. Handle sex chromosome names in import PLINK properly (do we need to map ""23"" to ""X"", etc.?); 5. Update the readFam function in `importplink` to utilize functionality Jon wrote already",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/243#issuecomment-218212906:538,test,tests,538,https://hail.is,https://github.com/hail-is/hail/pull/243#issuecomment-218212906,2,['test'],['tests']
Testability,@cseed:; 1. We talked about finding a better way to implement this so that it's faster. I have thus far focused only on the tests and the core algorithm. The `Command` and associated docs are not yet written.; 2. I will extract `assertSameElements` and the fuzzy equality stuff into separate PRs before submitting this for review.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/738#issuecomment-245359022:124,test,tests,124,https://hail.is,https://github.com/hail-is/hail/pull/738#issuecomment-245359022,2,"['assert', 'test']","['assertSameElements', 'tests']"
Testability,"@daniel-goldstein , I tagged you because the QoB java code (everything in `is.hail.backend.service`) should really be owned by services team. @johnc1231 , I tagged you because this is a pervasive change to Query. You may want to confer with Chris and Patrick S before approving in light of Tim's absence. I'll apply WIP. Whoever approves second, please remove the WIP tag. I expect the test time to roughly halve with this change.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11212#issuecomment-1039418045:386,test,test,386,https://hail.is,https://github.com/hail-is/hail/pull/11212#issuecomment-1039418045,1,['test'],['test']
Testability,"@daniel-goldstein @danking CI is showing this as failing, but afaict all the tests are passing? is this a problem we've seen?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5837#issuecomment-482289824:77,test,tests,77,https://hail.is,https://github.com/hail-is/hail/pull/5837#issuecomment-482289824,1,['test'],['tests']
Testability,"@daniel-goldstein After this lands in main, can we do a lets encrypt rotation just to smoke test that flow while this is all front of find? Thanks!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12095#issuecomment-1255548750:92,test,test,92,https://hail.is,https://github.com/hail-is/hail/pull/12095#issuecomment-1255548750,1,['test'],['test']
Testability,@daniel-goldstein Can you take a quick look at this and make sure none of the deleted log statements are used in your monitoring infrastructure? Thanks!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11904#issuecomment-1164536883:86,log,log,86,https://hail.is,https://github.com/hail-is/hail/pull/11904#issuecomment-1164536883,1,['log'],['log']
Testability,@daniel-goldstein Does this command in `gcloud -q auth activate-service-account --key-file=/test-gsa-key/key.json` in a `delete_gcp_batch_instances` CI job still work after your auth changes?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13554#issuecomment-1737439794:92,test,test-gsa-key,92,https://hail.is,https://github.com/hail-is/hail/issues/13554#issuecomment-1737439794,1,['test'],['test-gsa-key']
Testability,"@daniel-goldstein Here's my thoughts. Sound good?; I think we simply need to add an `is_rate_limit` check to `retry_transient_errors` in hailtop, and pass rather than logging it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14595#issuecomment-2200975779:167,log,logging,167,https://hail.is,https://github.com/hail-is/hail/issues/14595#issuecomment-2200975779,1,['log'],['logging']
Testability,@daniel-goldstein I added an exit 1 after argument validation and removed the test-dataproc and wheel dependencies in the Makefile to demonstrate the functionality in these examples:. ```sh; # HAIL_PIP_VERSION=0.2.123 \; HAIL_VERSION=0.2.123-abcdef123 \ ; GIT_VERSION=abcdef123 \; REMOTE=origin \; WHEEL=/path/to/the.whl \; GITHUB_OAUTH_HEADER_FILE=/path/to/github/oauth/header/file \; HAIL_GENETICS_HAIL_IMAGE=docker://us-docker.pkg.dev/hail-vdc/hail/hailgenetics/hail:deploy-123abc \; HAIL_GENETICS_HAIL_IMAGE_PY_3_10=docker://us-docker.pkg.dev/hail-vdc/hail/hailgenetics/hail:deploy-123abc \; HAIL_GENETICS_HAIL_IMAGE_PY_3_11=docker://us-docker.pkg.dev/hail-vdc/hail/hailgenetics/hail:deploy-123abc \; HAIL_GENETICS_HAILTOP_IMAGE=docker://us-docker.pkg.dev/hail-vdc/hail/hailgenetics/hailtop:deploy-123abc \; HAIL_GENETICS_VEP_GRCH37_85_IMAGE=docker://us-docker.pkg.dev/hail-vdc/hail/hailgenetics/vep-grch37-85:deploy-123abc \; HAIL_GENETICS_VEP_GRCH38_95_IMAGE=docker://us-docker.pkg.dev/hail-vdc/hail/hailgenetics/vep-grch38-95:deploy-123abc \; WHEEL_FOR_AZURE= \; WEBSITE_TAR=/path/to/www.tar.gz \; hail/scripts/release.sh. +++ dirname -- hail/scripts/release.sh; ++ cd -- hail/scripts; ++ pwd; + SCRIPT_DIR=/Users/dking/projects/hail/hail/scripts; + arguments='HAIL_PIP_VERSION HAIL_VERSION GIT_VERSION REMOTE WHEEL GITHUB_OAUTH_HEADER_FILE HAIL_GENETICS_HAIL_IMAGE HAIL_GENETICS_HAIL_IMAGE_PY_3_10 HAIL_GENETICS_HAIL_IMAGE_PY_3_11 HAIL_GENETICS_HAILTOP_IMAGE HAIL_GENETICS_VEP_GRCH37_85_IMAGE HAIL_GENETICS_VEP_GRCH38_95_IMAGE WHEEL_FOR_AZURE WEBSITE_TAR'; + for varname in '$arguments'; + '[' -z 0.2.123 ']'; + echo HAIL_PIP_VERSION=0.2.123; HAIL_PIP_VERSION=0.2.123; + for varname in '$arguments'; + '[' -z 0.2.123-abcdef123 ']'; + echo HAIL_VERSION=0.2.123-abcdef123; HAIL_VERSION=0.2.123-abcdef123; + for varname in '$arguments'; + '[' -z abcdef123 ']'; + echo GIT_VERSION=abcdef123; GIT_VERSION=abcdef123; + for varname in '$arguments'; + '[' -z origin ']'; + echo REMOTE=origin; REMOTE=o,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14323#issuecomment-1955223409:78,test,test-dataproc,78,https://hail.is,https://github.com/hail-is/hail/pull/14323#issuecomment-1955223409,1,['test'],['test-dataproc']
Testability,@daniel-goldstein I anticipate it will pass the tests now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11040#issuecomment-965507019:48,test,tests,48,https://hail.is,https://github.com/hail-is/hail/pull/11040#issuecomment-965507019,1,['test'],['tests']
Testability,@daniel-goldstein I found an error in async_cancel that was exposed by the new version of nest_asyncio. I'm 99% sure the change is correct. Feel free to ask Dan to double check it. The issue was that `fetch_coro` is a Task and not a Future. Cancelling a task just adds the cancellation event to the event loop. You have to actually wait for it to finish before the state of the task will be cancelled. Dan wrote a bunch of tests that asserted `cancel` results in `cancelled == True`.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10705#issuecomment-888513583:423,test,tests,423,https://hail.is,https://github.com/hail-is/hail/pull/10705#issuecomment-888513583,2,"['assert', 'test']","['asserted', 'tests']"
Testability,"@daniel-goldstein I think I am fine with this change in theory. However, it is unclear to me how this would work if we added our encoded files to the repository. Would other forks have overwrite ours each time they merged changes? Would you want me to follow the new directions in my hail-jigold test project to verify the new changes are good?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11724#issuecomment-1144078361:296,test,test,296,https://hail.is,https://github.com/hail-is/hail/pull/11724#issuecomment-1144078361,1,['test'],['test']
Testability,"@daniel-goldstein Let's see if the tests pass now, but should be really close!!!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12199#issuecomment-1252805285:35,test,tests,35,https://hail.is,https://github.com/hail-is/hail/pull/12199#issuecomment-1252805285,1,['test'],['tests']
Testability,"@daniel-goldstein The logs show this:. ```; insertId: ""88db8ey9nom69366""; jsonPayload: {; asctime: ""2022-02-16 23:07:40,794""; exc_info: ""Traceback (most recent call last):; File ""/usr/local/lib/python3.7/dist-packages/batch/driver/job.py"", line 65, in notify_batch_job_complete; await request(session); File ""/usr/local/lib/python3.7/dist-packages/batch/driver/job.py"", line 56, in request; await session.post(callback, json=batch_record_to_dict(record)); File ""/usr/local/lib/python3.7/dist-packages/batch/batch.py"", line 18, in batch_record_to_dict; elif record['n_failed'] > 0:; KeyError: 'n_failed'""; filename: ""job.py""; funcNameAndLine: ""notify_batch_job_complete:69""; hail_log: 1; levelname: ""ERROR""; message: ""callback for batch 1731 failed, will not retry.""; ```. `notify_batch_job_complete` just needs to join against the volatile table.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11352#issuecomment-1049107348:22,log,logs,22,https://hail.is,https://github.com/hail-is/hail/pull/11352#issuecomment-1049107348,1,['log'],['logs']
Testability,"@daniel-goldstein When you get a chance, I'd appreciate your high level opinion on this addition before I start thoroughly testing everything. Goal is to have something before the ATGU Welcome Workshop September 5th. I know the import locations are an issue in `initialize.py`. I mainly want feedback on whether the code passes the high level smell test and whether I've over designed this with too many checks and prompts or am forgetting something that would be nice to check for.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13279#issuecomment-1648236180:123,test,testing,123,https://hail.is,https://github.com/hail-is/hail/pull/13279#issuecomment-1648236180,2,['test'],"['test', 'testing']"
Testability,@daniel-goldstein looks like there's still a test failure,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5686#issuecomment-477168302:45,test,test,45,https://hail.is,https://github.com/hail-is/hail/pull/5686#issuecomment-477168302,1,['test'],['test']
Testability,"@daniel-goldstein sorry I was a dummy, what I had didn't actually do what I thought it did. It's a bit complex to get access to test information in a fixture, but there's some docs on how to do it. I did that. Now the fixture checks and only tears down a batch when the test failed.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13326#issuecomment-1664664775:128,test,test,128,https://hail.is,https://github.com/hail-is/hail/pull/13326#issuecomment-1664664775,2,['test'],['test']
Testability,@daniel-goldstein sorry can you re-approve? I got angry at the flakiness of the event loop and considered rewriting some of the batch tests that are particularly bad offenders but then thought better of it and just retried.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14091#issuecomment-1856210907:134,test,tests,134,https://hail.is,https://github.com/hail-is/hail/pull/14091#issuecomment-1856210907,1,['test'],['tests']
Testability,@daniel-goldstein still got some parser errors in the python tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5662#issuecomment-476883070:61,test,tests,61,https://hail.is,https://github.com/hail-is/hail/pull/5662#issuecomment-476883070,1,['test'],['tests']
Testability,"@daniel-goldstein sure, functors.reduce with a backwards iterator does the trick. I also added some tests, including one that ensures we do not evaluate arguments after the non-null one.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5560#issuecomment-471116569:100,test,tests,100,https://hail.is,https://github.com/hail-is/hail/pull/5560#issuecomment-471116569,1,['test'],['tests']
Testability,@daniel-goldstein this is a one-line change that will alleviate some of our log alerts.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11383#issuecomment-1049165930:76,log,log,76,https://hail.is,https://github.com/hail-is/hail/pull/11383#issuecomment-1049165930,1,['log'],['log']
Testability,"@daniel-goldstein, I'm vaguely worried given that the tests didn't fail on your PR the other day. Let's get a simple test that filters and/or sparsifies a block and then exports.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5500:54,test,tests,54,https://hail.is,https://github.com/hail-is/hail/issues/5500,2,['test'],"['test', 'tests']"
Testability,"@daniel-goldstein, here's a much smaller test-case, though the VDS is quite large. You might try this on `gs://neale-bge/bge-wave-1.vds` to see if we can replicate.; ```python3; import hail as hl; hl.init(default_reference='GRCh38', idempotent=True); vds = hl.vds.read_vds(""gs://...""); test_intervals = ['chr13:32355250-32355251']; vds = hl.vds.filter_intervals(; vds,; [hl.parse_locus_interval(x,); for x in test_intervals]); ```. Log statements like; ```; java.net.UnknownHostException: Invalid host name: local host is: ""...-w-1/10.128.0.50""; destination host is: ""...-m.c.terra-vpc-sc-...internal."":8051; ```; suggest to me that the master node is dying, then its removed from DNS, then workers are unable to communicate with it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13960#issuecomment-1802638976:41,test,test-case,41,https://hail.is,https://github.com/hail-is/hail/issues/13960#issuecomment-1802638976,2,"['Log', 'test']","['Log', 'test-case']"
Testability,"@danking - At first glance I do not see any installation of pyspark. * `pip show pyspark` -> WARNING: Package(s) not found: pyspark. * I see mention of `pyspark 3.3.3` in `/hail/hail/python/pinned-requirements.txt` but it seems not installed as per the logs (see below); ```; pyspark==3.3.3; # via -r hail/hail/python/requirements.txt`; ``` . * I do not see any `pyspark` in `/hail/hail/python/hailtop/hailctl/deploy.yaml`. * Checking in `/usr/lib/spark` I see reference of scala 2.12.15 same as in the hail logs; ```sh; $ cat /usr/lib/spark/RELEASE ; Spark 3.3.2-amzn-0.1 built for Hadoop 3.3.3-amzn-3.1; Build flags: -Divy.home=/home/release/.ivy2 -Dsbt.ivy.home=/home/release/.ivy2 -Duser.home=/home/release -Drepo.maven.org= -Dreactor.repo=file:///home/release/.m2/repository -Dhadoop.version=3.3.3-amzn-3.1 -Dyarn.version=3.3.3-amzn-3.1 -Dhive.version=2.3.9-amzn-3 -Dparquet.version=1.12.2-amzn-3 -Dprotobuf.version=2.5.0 -Dfasterxml.jackson.version=2.13.4 -Dfasterxml.jackson.databind.version=2.13.4 -Dcommons.httpclient.version=4.5.9 -Dcommons.httpcore.version=4.4.11 -Daws.java.sdk.version=1.12.446 -Daws.kinesis.client.version=1.12.0 -Daws.kinesis.producer.version=0.12.9 -Dscala.version=2.12.15 -DrecompileMode=all -Dmaven.deploy.plugin.version=2.8.2 -Dmaven.scaladoc.skip -Pyarn -Phadoop-3.2 -Phive -Phive-thriftserver -Psparkr -Pspark-ganglia-lgpl -Pnetlib-lgpl -Pscala-2.12 -Pkubernetes -Pvolcano -Pkinesis-asl -DskipTests; ```; I still did not found why scala is downgraded to 2.12.13. <details><summary>Hail logs</summary>; <p>; # Build Hail #; WARNING: Package(s) not found: hail; REVISION is set to ""13536b531342a263b24a7165bfeec7bd02723e4b"" which is different from old value """"; printf ""13536b531342a263b24a7165bfeec7bd02723e4b"" > env/REVISION; echo 13536b531342a263b24a7165bfeec7bd02723e4b > python/hail/hail_revision; SHORT_REVISION is set to ""13536b531342"" which is different from old value """"; printf ""13536b531342"" > env/SHORT_REVISION; HAIL_PIP_VERSION is set to ""0.2.124"" whic",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221:253,log,logs,253,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221,2,['log'],['logs']
Testability,"@danking . The redirect was caused by lack of X-Forwarded-Host + X-Forwarded-Proto; * https://github.com/expressjs/express/blob/b8e50568af9c73ef1ade434e92c60d389868361d/lib/request.js#L429; * remoteAddress is the url from the last hop, not any forwarded address. > I'll revisit why ghost issues redirects with the new changes this afternoon.; Ghost doesn't read this header. They use X-Forwarded* headers, via Express: https://expressjs.com/en/guide/behind-proxies.html ; * Expresses finds ips using proxy-addr package (the getter is req.ips): https://github.com/expressjs/express/blob/3ed5090ca91f6a387e66370d57ead94d886275e1/lib/request.js#L349; * The test: https://github.com/expressjs/express/blob/3ed5090ca91f6a387e66370d57ead94d886275e1/test/req.ip.js; * proxy-addr does not support x-real-ip: https://github.com/jshttp/proxy-addr/issues/15. Ghost apparently uses X-Forwarded-For to rate limit malicious addresses:. * ""6. Include the X-Forwarded-For header, populated with the remote IP of the original request.; Without this, we aren't able to detect spam traffic patterns and your site risks being rate limited or incorrectly restricted.""; * https://ghost.org/faq/can-i-run-ghost-from-a-subdirectory/",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8107#issuecomment-587687066:654,test,test,654,https://hail.is,https://github.com/hail-is/hail/pull/8107#issuecomment-587687066,2,['test'],['test']
Testability,"@danking ; The info is as follows:; ```; [root@mg hail]# su hdfs; bash-4.2$ pyspark --jars $HAIL_HOME/build/libs/hail-all-spark.jar --conf=spark.driver.extraClassPath=$HAIL_HOME/build/libs/hail-all-spark.jar --conf=spark.executor.extraClassPath=./hail-all-spark.jar; WARNING: User-defined SPARK_HOME (/opt/cloudera/parcels/SPARK2-2.2.0.cloudera1-1.cdh5.12.0.p0.142354/lib/spark2) overrides detected (/opt/cloudera/parcels/SPARK2/lib/spark2).; WARNING: Running pyspark from user-defined location.; Python 2.7.5 (default, Aug 4 2017, 00:39:18) ; [GCC 4.8.5 20150623 (Red Hat 4.8.5-16)] on linux2; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).; 17/10/19 08:45:43 WARN util.Utils: Service 'SparkUI' could not bind on port 4040. Attempting port 4041.; Welcome to; ____ __; / __/__ ___ _____/ /__; _\ \/ _ \/ _ `/ __/ '_/; /__ / .__/\_,_/_/ /_/\_\ version 2.2.0.cloudera1; /_/. Using Python version 2.7.5 (default, Aug 4 2017 00:39:18); SparkSession available as 'spark'.; >>> import hail; >>> hc = hail.HailContext(); log4j:ERROR setFile(null,false) call failed.; java.io.FileNotFoundException: hail.log (Permission denied); 	at java.io.FileOutputStream.open0(Native Method); 	at java.io.FileOutputStream.open(FileOutputStream.java:270); 	at java.io.FileOutputStream.<init>(FileOutputStream.java:213); 	at java.io.FileOutputStream.<init>(FileOutputStream.java:133); 	at org.apache.log4j.FileAppender.setFile(FileAppender.java:294); 	at org.apache.log4j.FileAppender.activateOptions(FileAppender.java:165); 	at org.apache.log4j.config.PropertySetter.activate(PropertySetter.java:307); 	at org.apache.log4j.config.PropertySetter.setProperties(PropertySetter.java:172); 	at org.apache.log4j.config.PropertySetter.setProperties(PropertySetter.java:104); 	at org.apache.log4j.PropertyConfigurator.parseAppender(PropertyConfigurator.java:842); 	at org.apa",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-337768198:683,log,log,683,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-337768198,2,['log'],"['log', 'logging']"
Testability,@danking @cseed I think all comments addressed. . This has all been tested on the production cluster. up to https://github.com/hail-is/hail/pull/5215/commits/d2fa301644eda2434f9cfa679a452b8e24117a04,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5215#issuecomment-463037660:68,test,tested,68,https://hail.is,https://github.com/hail-is/hail/pull/5215#issuecomment-463037660,1,['test'],['tested']
Testability,"@danking @cseed should be ready for testing soon. pruned portions we're not using atm, wrote docker files, tested. if you want to run both packages on your local machine, you could use the top-level docker file (or each package's). To start a local instance of the web app, simply run:; `npm install && npm bootstrap`. To get a hot-reloading version of the web app (links to your browser, refreshes all changes): `cd packages/public && npm run dev`. To start the gateway: `cd packages/hail-api-gateway && nodemon index.js`. Dev mode routing is slow. To see a production, minified build: `cd packages/public && npm run build && npm run prod-test`.; * Build is a kind of compilation process. Dev dependencies are pruned, the app is split into static bundles, and minified. Some optimizations, like inlining of some React functions also occurs. This is independent of anything V8 does . This will also show a neat readout of all bundles:; ```; Browser assets sizes after gzip:. 2.79 kB .next/static/gZEz****/pages/_app.js; 2.42 kB .next/static/gZEz****/pages/_error.js; 502 B .next/static/gZEz****/pages/auth0callback.js; 349 B .next/static/gZEz****/pages/index.js; 745 B .next/static/gZEz****/pages/notebook.js; 856 B .next/static/gZEz****/pages/scorecard.js; 243 B .next/static/gZEz****/pages/tutorial.js; 99.4 kB .next/static/chunks/commons.294f****.js; 101 B .next/static/chunks/styles.9f25****.js; 450 B .next/static/css/commons.b770adbe.chunk.css; 5.74 kB .next/static/css/styles.4f393762.chunk.css; 6.93 kB .next/static/runtime/main-76ed****.js; 737 B .next/static/runtime/webpack-8917****.js; ```. Bundling cutoffs can be tweaked, but basically any common dependencies between pages are placed into one chunk. Chunks are loaded in parallel, and no chunks are needed to load the page; it's just HTML on initial render. At least some of the chunks could theoretically be served from a CDN (styles of course, some js). Each package expects a .env file, which organizes the environment variables used",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4931#issuecomment-454271935:36,test,testing,36,https://hail.is,https://github.com/hail-is/hail/pull/4931#issuecomment-454271935,3,['test'],"['test', 'tested', 'testing']"
Testability,"@danking @tpoterba I wasn't sure if this should go to compilers or services team. I randomly picked Dan. Who ""owns"" GoogleStorageFS? ServiceBackend? Let's discuss in staff meeting this week. Summary of changes:; - ExecuteContext aded to IRParserEnvironment (maybe should be renamed IRParserContext now?); - TableReader in general will need the filesystem for construct. This breaks the json4s de/serializer model. I started expanding the serializers and writing them by hand. Just did the TableNativeReader for now. We might reconsider the mix of custom and JSON in the printed format at some point in the future.; - A bunch of functions take a hc but only need an fs. More of this to come. ```; hl.init(_backend=hl.backend.ServiceBackend()); t = hl.read_table('gs://hail-cseed-k0ox4/sample_rows.ht'); print(t.count()); ```. ```; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.36-75a0f869d72d; LOGGING: writing to /home/cotton/hail-20200407-1502-0.2.36-75a0f869d72d.log; 346; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8485:934,LOG,LOGGING,934,https://hail.is,https://github.com/hail-is/hail/pull/8485,2,"['LOG', 'log']","['LOGGING', 'log']"
Testability,"@danking @tpoterba OK, I think I fixed this. I. - stripped out all support for required types in promoteNumeric matching the rest of expr, and assert that there are none,; - deeply strip all required types from types in the symbol table in the EvalContext constructor,; - don't generate required types in an the sample, variant annotations or on any struct fields in the genotype annotations in VSM.gen. Happy?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2455#issuecomment-346422442:143,assert,assert,143,https://hail.is,https://github.com/hail-is/hail/pull/2455#issuecomment-346422442,1,['assert'],['assert']
Testability,@danking @tpoterba This should be good to go. I tested it on the cloud.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3095#issuecomment-372359670:48,test,tested,48,https://hail.is,https://github.com/hail-is/hail/pull/3095#issuecomment-372359670,1,['test'],['tested']
Testability,"@danking Apologies for the rapid bump, but it would be great if I could test the envoy changes again tonight if you have no further requests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12402#issuecomment-1301103637:72,test,test,72,https://hail.is,https://github.com/hail-is/hail/pull/12402#issuecomment-1301103637,1,['test'],['test']
Testability,@danking Can you do an initial pass and make sure there aren't any major issues with the Python code? I am most concerned with how I setup the disk manager and the disk creation / deletion code to avoid costly mistakes. I am aware of the FIXMEs. I haven't tested this at all yet. It would be great if I could have feedback on Wednesday so I can have this PR completely done on Friday.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11253:256,test,tested,256,https://hail.is,https://github.com/hail-is/hail/pull/11253,1,['test'],['tested']
Testability,"@danking Can you give it a second look? If you're happy with this structure, then I can test it in my namespace.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13098#issuecomment-1559743010:88,test,test,88,https://hail.is,https://github.com/hail-is/hail/pull/13098#issuecomment-1559743010,1,['test'],['test']
Testability,@danking Can you give this another look from a **high level**. I haven't tested it at all and can flesh out the smaller stuff later on.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12428#issuecomment-1320568267:73,test,tested,73,https://hail.is,https://github.com/hail-is/hail/pull/12428#issuecomment-1320568267,1,['test'],['tested']
Testability,"@danking Can you take another look? The only thing I didn't address is the `Phenotypes -> List[Phenotype], VariantChunks -> List[VariantChunk]`. I don't want to rip it out yet in case Wei comes out with the new SAIGE implementation with phenotype groupings. Again, just looking for a green light to start testing it. We can figure out the question about the CLI later on.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13804#issuecomment-1771696190:305,test,testing,305,https://hail.is,https://github.com/hail-is/hail/pull/13804#issuecomment-1771696190,1,['test'],['testing']
Testability,@danking Can you take one more look before I start testing again?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11249#issuecomment-1021604713:51,test,testing,51,https://hail.is,https://github.com/hail-is/hail/pull/11249#issuecomment-1021604713,1,['test'],['testing']
Testability,"@danking Comments addressed. I also added tests for the getAuthToken function. I was on the fence about adding that to this pr, but thought it would make it easier for you to verify that substring is acting appropriately, and to see what I had in mind for query handling.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5369#issuecomment-465624040:42,test,tests,42,https://hail.is,https://github.com/hail-is/hail/pull/5369#issuecomment-465624040,1,['test'],['tests']
Testability,"@danking Do you know what's up with this test? https://ci.hail.is/batches/5921822/jobs/68 Is the test wrong? I didn't change anything about the test in this PR so I feel like I must have somehow broken a dependency, but I'm unsure how because we don't use the google client library and I doubt it's a problem with aiohttp.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11974#issuecomment-1276770148:41,test,test,41,https://hail.is,https://github.com/hail-is/hail/pull/11974#issuecomment-1276770148,3,['test'],['test']
Testability,"@danking Do you want dockerfile, makefile in this pr? Do you want unit tests in this PR? Or in separate PR?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5369#issuecomment-465230568:71,test,tests,71,https://hail.is,https://github.com/hail-is/hail/pull/5369#issuecomment-465230568,1,['test'],['tests']
Testability,@danking FYI. Let me know if you want to incorporate these fixes into your own branch and close this PR. I made the same fix you made to the list_batches test.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6726#issuecomment-515074154:154,test,test,154,https://hail.is,https://github.com/hail-is/hail/pull/6726#issuecomment-515074154,1,['test'],['test']
Testability,@danking Failing tests,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10856#issuecomment-916193815:17,test,tests,17,https://hail.is,https://github.com/hail-is/hail/pull/10856#issuecomment-916193815,1,['test'],['tests']
Testability,@danking Feel free to reassign if you have too much to do. Requires a database change. I realize there's a lot of code duplication here with how we get/show the logs. It might be worth generalizing this in the future if there's a third thing that follows this pattern.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6489:161,log,logs,161,https://hail.is,https://github.com/hail-is/hail/pull/6489,1,['log'],['logs']
Testability,@danking Have you actually seen anymore of these errors after your fix of the hadoop tests erasing each others' files? I considering closing this because I've not seen further evidence that hadoop isn't properly addressing transient errors.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12411#issuecomment-1349563987:85,test,tests,85,https://hail.is,https://github.com/hail-is/hail/pull/12411#issuecomment-1349563987,1,['test'],['tests']
Testability,@danking I added a change log for Batch. I assume this change will be released in the next version 0.2.42.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8795#issuecomment-630925598:26,log,log,26,https://hail.is,https://github.com/hail-is/hail/pull/8795#issuecomment-630925598,1,['log'],['log']
Testability,@danking I also have a PR onto your branch with randomized testing and comparison against Breeze here : https://github.com/danking/hail/pull/1,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1895#issuecomment-306268836:59,test,testing,59,https://hail.is,https://github.com/hail-is/hail/pull/1895#issuecomment-306268836,1,['test'],['testing']
Testability,"@danking I have a mostly completed draft for SAIGE in QoB. Can you take a look? I'm mainly looking for enough feedback to get a green light to actually start testing this end to end, fill in the remaining not implemented components, add documentation, add verbosity and possibly a dry run feature, and support VEP annotations natively. There are a couple of core concepts:; 1. Phenotypes - Set of phenotypes to test. I support the ability to group phenotypes together. This is in anticipation of a new version of SAIGE that Wei is going to release soon.; 2. VariantChunks - The set of variant intervals of data to test per job. If it's SAIGE-GENE, then there's also the ""groups"" to actually test within that interval.; 3. io - There's a bunch of wrappers that handle input and output files so all of that logic combined with the checkpointing logic is abstracted away from what is actually going on.; 4. steps - These are the SAIGE modules to run. They are all dataclasses with configuration options; 5. saige - There's a class that can be instantiated in Python or I started writing the framework for a CLI. This has the code that builds the DAG end to end. All configuration happens with a yaml file that can overwrite default parameters for each step such as whether to checkpoint or where the results should be written to. For the CLI, I envision you can either give a config file and/or specify `--overrides step1_null_glmm.use_checkpoint=true`. For every Saige run, I write out the configuration used to a file in the output directory as well as information about the input data and variant chunks and the batch information.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13804:158,test,testing,158,https://hail.is,https://github.com/hail-is/hail/pull/13804,6,"['log', 'test']","['logic', 'test', 'testing']"
Testability,"@danking I have unit + integration tests for 2 methods in this package. Do you want me to add them here, or in a separate PR?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5369#issuecomment-465392000:35,test,tests,35,https://hail.is,https://github.com/hail-is/hail/pull/5369#issuecomment-465392000,1,['test'],['tests']
Testability,@danking I need to address the benchmark storage requests to not be 100 Gi.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9076#issuecomment-664619127:31,benchmark,benchmark,31,https://hail.is,https://github.com/hail-is/hail/pull/9076#issuecomment-664619127,1,['benchmark'],['benchmark']
Testability,@danking I still think the name of 'jobs' should be 'job_states' and 'jobs' should be a list of the job ids. But we can figure that out in a separate PR. At least this will make testing easier for me.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5200#issuecomment-457222830:178,test,testing,178,https://hail.is,https://github.com/hail-is/hail/pull/5200#issuecomment-457222830,1,['test'],['testing']
Testability,"@danking I think I addressed most of your comments. Everything is passing. Can you look if you like the interface for `sync_check_call` etc.? If so, then can I translate your TLS commands in lists into a single string? Is there ever a reason to want to pass the list explicitly in this case?. Once you're happy with the changes, then I'll do another test round with dev deploy to make sure the cache is actually doing its thing and the garbage collection loop is working.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9095#issuecomment-665855101:350,test,test,350,https://hail.is,https://github.com/hail-is/hail/pull/9095#issuecomment-665855101,1,['test'],['test']
Testability,"@danking I think I know what is happening. If you log into a notebook, and then issue a reachability check, you get a 302, else 405. I need to support both.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5526#issuecomment-470314061:50,log,log,50,https://hail.is,https://github.com/hail-is/hail/pull/5526#issuecomment-470314061,1,['log'],['log']
Testability,@danking I think I've finally fixed everything s.t. the tests are passing,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2384#issuecomment-342374655:56,test,tests,56,https://hail.is,https://github.com/hail-is/hail/pull/2384#issuecomment-342374655,1,['test'],['tests']
Testability,@danking I tried the latest version of testng and it didn't fix the problem see my PR #3964,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3948#issuecomment-407168009:39,test,testng,39,https://hail.is,https://github.com/hail-is/hail/pull/3948#issuecomment-407168009,1,['test'],['testng']
Testability,"@danking I'm assigning this to you if you want to start looking, but I want to add some more tests before we merge it, and I think it will need to go in after #4076.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4094#issuecomment-411077664:93,test,tests,93,https://hail.is,https://github.com/hail-is/hail/pull/4094#issuecomment-411077664,1,['test'],['tests']
Testability,@danking I'm getting this error. Do you see any problem with granting that capability to the test service account?. ```; + retry gcloud -q auth activate-service-account '--key-file=/gsa-key/key.json'; + gcloud -q auth activate-service-account '--key-file=/gsa-key/key.json'; Activated service account credentials for: [test-665@hail-vdc.iam.gserviceaccount.com]; + mkdir -p /io/batch/27b395/inputs/wjDTI; + retry gsutil -u hail-vdc -m cp -R gs://hail-services-requester-pays/hello /io/batch/27b395/inputs/wjDTI/hello; + gsutil -u hail-vdc -m cp -R gs://hail-services-requester-pays/hello /io/batch/27b395/inputs/wjDTI/hello; AccessDeniedException: 403 test-665@hail-vdc.iam.gserviceaccount.com does not have serviceusage.services.use access to the Google Cloud project.; CommandException: 1 file/object could not be transferred.; + sleep 2; + gsutil -u hail-vdc -m cp -R gs://hail-services-requester-pays/hello /io/batch/27b395/inputs/wjDTI/hello; AccessDeniedException: 403 test-665@hail-vdc.iam.gserviceaccount.com does not have serviceusage.services.use access to the Google Cloud project.; CommandException: 1 file/object could not be transferred.; + sleep 5; + gsutil -u hail-vdc -m cp -R gs://hail-services-requester-pays/hello /io/batch/27b395/inputs/wjDTI/hello; AccessDeniedException: 403 test-665@hail-vdc.iam.gserviceaccount.com does not have serviceusage.services.use access to the Google Cloud project.; CommandException: 1 file/object could not be transferred.; ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9096#issuecomment-662085952:93,test,test,93,https://hail.is,https://github.com/hail-is/hail/pull/9096#issuecomment-662085952,5,['test'],"['test', 'test-']"
Testability,@danking I'm not sure I like this new test. We're only testing it works locally. I'm not sure this `NotADirectoryError` is actually raised in the cloud. This is a bit worrisome to me and I think we should move the tests to the test_copy suite where we can test against all clouds once Carolin has finished what you asked for.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11227#issuecomment-1015700143:38,test,test,38,https://hail.is,https://github.com/hail-is/hail/pull/11227#issuecomment-1015700143,4,['test'],"['test', 'testing', 'tests']"
Testability,"@danking I'm not sure if I understood your point, but I noticed some potential mismatches between versions that I've now corrected. The tests don't seem to be running to completion though. They've been running for ~ 24 hours. Is that expected?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2049#issuecomment-320089871:136,test,tests,136,https://hail.is,https://github.com/hail-is/hail/pull/2049#issuecomment-320089871,1,['test'],['tests']
Testability,"@danking I'm pretty sure using UnsafeRows doesn't work in this case. When I changed from UnsafeRow to SafeRow, the tests were passing on a saved random dataset that wasn't previously working. This depends on #3724 so you can ignore changes in Relational.scala and the python tests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3720#issuecomment-395741181:115,test,tests,115,https://hail.is,https://github.com/hail-is/hail/pull/3720#issuecomment-395741181,2,['test'],['tests']
Testability,"@danking It looks like that github change you made means reviews are invalidated by further commits to the branch. Is that what we want? I misunderstood, I thought further commits to master invalidate the checks. It's really the latter I want. Either way, I need a fresh approval (minor fix to a test).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1778#issuecomment-302273874:296,test,test,296,https://hail.is,https://github.com/hail-is/hail/pull/1778#issuecomment-302273874,1,['test'],['test']
Testability,@danking Service tests all passed. I think this is ready for review!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12428#issuecomment-1487359963:17,test,tests,17,https://hail.is,https://github.com/hail-is/hail/pull/12428#issuecomment-1487359963,1,['test'],['tests']
Testability,"@danking Set auth0 callback based on window (this turns out to be cleanest), cleaned up styles, further reduced bundle size a bit by removing use of a state management tool (that wraps any arbitrary object in an observable that can be watched), and added a basic header menu to allow logout. I think the most challenging part of using this web architecture will be managing actions on server vs browser. That is probably the only piece that isn't obvious. I added a few comments that may help; namely _app.js 's constructor runs before everything else (as it wraps all other components), but lifecycle functions (componentDidMount) run from the inner child out to the parent. Constructor runs both on server and client (since the class contains the needed functions that are translated into HTML). getInitialProps is the only lifecycle event that runs on both server and client. All other events are client only. To require something to only run on the server or browser, from getInitialProps, or constructor, check for (typeof window === 'undefined'). Not incredibly elegant, but not terribly problematic either.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4931#issuecomment-454606562:284,log,logout,284,https://hail.is,https://github.com/hail-is/hail/pull/4931#issuecomment-454606562,1,['log'],['logout']
Testability,@danking Should I be able to see the `ci-test` failure details when using my Broad affiliation?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11698#issuecomment-1087141587:41,test,test,41,https://hail.is,https://github.com/hail-is/hail/pull/11698#issuecomment-1087141587,1,['test'],['test']
Testability,"@danking Sorry to keep making you break things out, but it is really helpful for me and the changes will go in faster. Can you make a separate PR with the following changes that don't relate to passing the indices and the new index code? Specifically, the following items from your list:. ```; added row_fields which prevents reading and allocation of LID and RSID (also improved python-type-checking for row_fields and entry_fields). I changed several asserts to if's with fatals, so as not to allocate strings. We no longer copy the genotype data into a buffer in the block reader. This was forcing the fastKeys to do an unnecessary data copy. I changed the contract on BgenRecord to require that getValue is called to ""consume"" the record before the next record is taken. getValue(null) just skips bytes (no copy, no decompression). I added RegionValueBuilder.unsafeAdvance which can be used when you're creating an array of empty structs but don't want to do all the unnecessary RVB bookkeeping work. I use RegionValueBuilder.unsafeAdvance to make loading a BGEN without entry fields very fast. I fixed Table.index to not trigger a partition key info gathering; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3727#issuecomment-397281018:453,assert,asserts,453,https://hail.is,https://github.com/hail-is/hail/pull/3727#issuecomment-397281018,1,['assert'],['asserts']
Testability,@danking Tests are passing!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5330#issuecomment-463317409:9,Test,Tests,9,https://hail.is,https://github.com/hail-is/hail/pull/5330#issuecomment-463317409,1,['Test'],['Tests']
Testability,"@danking Tests are passing. What's the problem?. Strange, cloudtools is showing 2.0.0 available, but pip is installing 1.1.6. ```; + pip search cloudtools; cloudtools (2.0.0) - Collection of utilities for working on the Google Cloud Platform.; datawire-cloudtools (0.2.6) - Datawire Cloud Tools; cloudseed (0.0.1) - Cloudtools; + pip install -U cloudtools; Collecting cloudtools; Downloading https://files.pythonhosted.org/packages/47/f1/bec895151ea74b2117c66620840e9a86436b376927b557b080289b61f754/cloudtools-1.1.16-py3-none-any.whl; Installing collected packages: cloudtools; Successfully installed cloudtools-1.1.16; ```. Ah, cloudtools 1.2.0 and 2.0.0 were set up as python 2 packages, see https://pypi.org/simple/cloudtools/:. ```; cloudtools-1.1.16-py2-none-any.whl; cloudtools-1.1.16-py3-none-any.whl; cloudtools-1.2.0-py2-none-any.whl; cloudtools-2.0.0-py2-none-any.whl; ```. 1.1.16 is set up for both. @liameabbott I assume we're only supporting Python 3?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4240#issuecomment-419786154:9,Test,Tests,9,https://hail.is,https://github.com/hail-is/hail/pull/4240#issuecomment-419786154,1,['Test'],['Tests']
Testability,"@danking Thanks a lot! Is it possible that our Hail Batch accounts aren't fully set up yet? @illusional and I are getting a 401 when trying to log into https://batch.hail.is, typically after a redirect loop.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11954#issuecomment-1173221705:143,log,log,143,https://hail.is,https://github.com/hail-is/hail/pull/11954#issuecomment-1173221705,1,['log'],['log']
Testability,"@danking Thanks for taking this over! I commented out the mark_unscheduled if the sidecar fails for debugging. The sidecar is running, but I'm getting an error because it's trying to run the top level code in batch.py. Either sidecar.py needs to be separate or we need to reconfigure batch.py so it doesn't run that code. ```; Traceback (most recent call last):; File ""/usr/lib/python3.6/runpy.py"", line 193, in _run_module_as_main; ""__main__"", mod_spec); File ""/usr/lib/python3.6/runpy.py"", line 85, in _run_code; exec(code, run_globals); File ""/usr/local/lib/python3.6/dist-packages/batch/sidecar.py"", line 14, in <module>; from .batch import REFRESH_INTERVAL_IN_SECONDS, HAIL_POD_NAMESPACE, KUBERNETES_TIMEOUT_IN_SECONDS; File ""/usr/local/lib/python3.6/dist-packages/batch/batch.py"", line 83, in <module>; db = BatchDatabase.create_synchronous('/batch-user-secret/sql-config.json'); File ""/usr/local/lib/python3.6/dist-packages/batch/database.py"", line 23, in create_synchronous; run_synchronous(cls.__init__(db, config_file)); File ""/usr/local/lib/python3.6/dist-packages/batch/database.py"", line 15, in run_synchronous; return loop.run_until_complete(coro); File ""uvloop/loop.pyx"", line 1451, in uvloop.loop.Loop.run_until_complete; File ""/usr/local/lib/python3.6/dist-packages/batch/database.py"", line 210, in __init__; await super().__init__(config_file); File ""/usr/local/lib/python3.6/dist-packages/batch/database.py"", line 27, in __init__; with open(config_file, 'r') as f:; FileNotFoundError: [Errno 2] No such file or directory: '/batch-user-secret/sql-config.json'; ```. To see the logs `kubectl -n namespace logs pod_name cleanup`",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6600#issuecomment-510272888:1595,log,logs,1595,https://hail.is,https://github.com/hail-is/hail/pull/6600#issuecomment-510272888,2,['log'],['logs']
Testability,@danking Thanks to Nick there were a fair number of basic mocking tests for the dataproc CLI and I think they cover the superficial changes that comprise this PR pretty well. I altered them a bit to use the typer/click `CLIRunner` which is pretty neat! I also managed to run `test-dataproc-37` successfully. I manually tested the rest of the `hailctl` commands. It would be nice to expand this test suite to the rest of `hailctl`.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13109#issuecomment-1583277456:58,mock,mocking,58,https://hail.is,https://github.com/hail-is/hail/pull/13109#issuecomment-1583277456,5,"['mock', 'test']","['mocking', 'test', 'test-dataproc-', 'tested', 'tests']"
Testability,"@danking The latest version is the code in hail/methods/. I'm having trouble with all of the configs and how to instantiate that properly. After that, I need to figure out what inputs `run_saige` actually needs. Then I need to write util functions for creating the testing chunks and annotating the matrix table. Then I think after testing and cleaning it up, it will be sufficient for the workshop. To get it into main is going to be a lot more work to have helpful error messages, check MT is valid for this analysis, integrate it more carefully into QoB.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13588:265,test,testing,265,https://hail.is,https://github.com/hail-is/hail/pull/13588,2,['test'],['testing']
Testability,"@danking This is far from done, evidenced by the fact that for some reason I'm getting tons of QoB test failures (but some are passing! :/) but I would appreciate a first pass on this if you want to do a high-level review. I do have a rough RFC that is not up to date, so let me know if you'd prefer to start the discussion from such a doc instead of the code.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13131#issuecomment-1581539600:99,test,test,99,https://hail.is,https://github.com/hail-is/hail/pull/13131#issuecomment-1581539600,1,['test'],['test']
Testability,@danking This is passing tests now,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11617#issuecomment-1112543974:25,test,tests,25,https://hail.is,https://github.com/hail-is/hail/pull/11617#issuecomment-1112543974,1,['test'],['tests']
Testability,"@danking This should be ready for a second look. I think it's pretty close to being done and I'm happy with how the code turned out. I tested it with the checks on and everything passed with 0.1% maximum difference. I hand computed one example from the database and got the same exact cost as msec_mcpu to the limit of the database precision which was 10 decimal places. . And I ran the tests first with master and found that cost about $0.0018 and then running it with the new branch cost around $0.0021 (the test job timed out right before it completed). So I'm happy I got the same order of magnitude both ways. If you have any additional ideas for checks, would be happy to put that in. I think we should leave the checking code in for now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8759#issuecomment-629431482:135,test,tested,135,https://hail.is,https://github.com/hail-is/hail/pull/8759#issuecomment-629431482,3,['test'],"['test', 'tested', 'tests']"
Testability,@danking This should be really close to having the tests passing. The only other thing left to do once it passes in GCP is to copy the data over to Azure and make a default Azure configuration.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12428#issuecomment-1339804624:51,test,tests,51,https://hail.is,https://github.com/hail-is/hail/pull/12428#issuecomment-1339804624,1,['test'],['tests']
Testability,@danking We can delete this right? No more Cray plus Dataflow seems like it's not something we wanna be using. Plus we run tests on cloud.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/743#issuecomment-287896407:123,test,tests,123,https://hail.is,https://github.com/hail-is/hail/issues/743#issuecomment-287896407,1,['test'],['tests']
Testability,"@danking Yeah I do. I also realized that the way I'm constructing the object now uses an apply method, not a constructor. So I'll have to fiddle with the reflection a bit too. Sorry about that. Could have sworn I hit test button before submitting.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1638#issuecomment-291887240:217,test,test,217,https://hail.is,https://github.com/hail-is/hail/pull/1638#issuecomment-291887240,1,['test'],['test']
Testability,"@danking and I are giving feedback on this branch. Patrick, the test failure is due to you testing on files in scratch that are only local to your system. You should remove the test annotation @Test on scratch before pushing.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1697#issuecomment-297083904:64,test,test,64,https://hail.is,https://github.com/hail-is/hail/pull/1697#issuecomment-297083904,4,"['Test', 'test']","['Test', 'test', 'testing']"
Testability,"@danking back to you. I made progress on cleaning up linreg and logreg suites, there's more I can do in logreg especially but I'd like to keep that as a later PR. I made all changes except these:; ```; def readGt(flags: Int): Int; def skipAdDp(flags: Int): Unit; ```; I'd appreciate if you look more closely at what would be involved, I'm not sure it'd be an improvement.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1634#issuecomment-294068059:64,log,logreg,64,https://hail.is,https://github.com/hail-is/hail/pull/1634#issuecomment-294068059,2,['log'],['logreg']
Testability,@danking back to you. restarted the integration test.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1748#issuecomment-298957026:48,test,test,48,https://hail.is,https://github.com/hail-is/hail/pull/1748#issuecomment-298957026,1,['test'],['test']
Testability,@danking bump this is passing tests now. See comment.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12327#issuecomment-1292250346:30,test,tests,30,https://hail.is,https://github.com/hail-is/hail/pull/12327#issuecomment-1292250346,1,['test'],['tests']
Testability,@danking could you help me get this merged? this isn't being picked up/tested by CI,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9243#issuecomment-672397590:71,test,tested,71,https://hail.is,https://github.com/hail-is/hail/pull/9243#issuecomment-672397590,1,['test'],['tested']
Testability,"@danking danking There is a lot of things going on in this dataset that makes PCs challenging. This has 3 replicate related samples (mother and 2 children). It also contains EA, AA and Dominicans. So there is lots of recent admixture. Among the 5000 samples, there are 800 related samples. We ran eigenstrat with the 5000 samples + 2500 1000 genomes samples and those PCs look good. . So I am not sure it is the replicates that are the underlying cause. It may simply be the lack of the 1000 Genomes samples in the dataset for the PCs. I am will try adding the 1000 genomes samples to see if that fixes things. If that works, the docs would just need to recommend merging in the 1000 genomes data. I will get back to you on those results. That would be great to implement PC-Air in Hail to help streamline the processing of this type of dataset! I will be glad to test it out.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3490#issuecomment-391760451:864,test,test,864,https://hail.is,https://github.com/hail-is/hail/issues/3490#issuecomment-391760451,1,['test'],['test']
Testability,@danking fyi- looks like the test case you added is failing?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8867#issuecomment-634848956:29,test,test,29,https://hail.is,https://github.com/hail-is/hail/pull/8867#issuecomment-634848956,1,['test'],['test']
Testability,"@danking img: https://github.com/genuinetools/img. ""Standalone, daemon-less, unprivileged Dockerfile and OCI compatible container image builder. img is more cache-efficient than Docker and can also execute multiple build stages concurrently, as it internally uses BuildKit's DAG solver. The commands/UX are the same as docker {build,tag,push,pull,login,logout,save} so all you have to do is replace docker with img in your scripts, command line, and/or life."". Oops, seems it doesn't quite work unprivileged yet, see: https://github.com/genuinetools/img#running-with-docker. Waiting on an upstream docker change, no movement in two months. Hrm.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5623#issuecomment-474189290:347,log,login,347,https://hail.is,https://github.com/hail-is/hail/pull/5623#issuecomment-474189290,2,['log'],"['login', 'logout']"
Testability,@danking looks like the test is still running into GC issues?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5626#issuecomment-475318506:24,test,test,24,https://hail.is,https://github.com/hail-is/hail/pull/5626#issuecomment-475318506,1,['test'],['test']
Testability,@danking looks like this is passing tests on the newest version of cloudtools.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4240#issuecomment-419237692:36,test,tests,36,https://hail.is,https://github.com/hail-is/hail/pull/4240#issuecomment-419237692,1,['test'],['tests']
Testability,@danking off by 1 error in test:; `org.scalatest.exceptions.TestFailedException: Some(-9223372036854775807) did not contain -9223372036854775808`,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1115#issuecomment-262351018:27,test,test,27,https://hail.is,https://github.com/hail-is/hail/pull/1115#issuecomment-262351018,2,"['Test', 'test']","['TestFailedException', 'test']"
Testability,@danking reassigned you since Richard is on vacation. He approved it before I added a few more code comments and added more tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3974#issuecomment-410283581:124,test,tests,124,https://hail.is,https://github.com/hail-is/hail/pull/3974#issuecomment-410283581,1,['test'],['tests']
Testability,@danking shouldn't this be getting tested / merged?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4151#issuecomment-415795977:35,test,tested,35,https://hail.is,https://github.com/hail-is/hail/pull/4151#issuecomment-415795977,1,['test'],['tested']
Testability,@danking the lmm change can be considered a bug fix since delta should never be negative. The log change should make the tests more robust to which JVM. Let me know if this fixes the failures and I'll PR against 0.1 as well.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2132:94,log,log,94,https://hail.is,https://github.com/hail-is/hail/pull/2132,2,"['log', 'test']","['log', 'tests']"
Testability,"@danking this is ready for a look now!. There's some slight changes to interface, etc to take advantage of the new key design--mostly now it takes row fields instead of an expr. There's also a small fix to some of the partitioner/interval stuff. The python interface is gone now, and I'll put it back in a separate PR, with real docs this time. And I pulled out all the parsing logic into its own thing.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2804#issuecomment-366001940:378,log,logic,378,https://hail.is,https://github.com/hail-is/hail/pull/2804#issuecomment-366001940,1,['log'],['logic']
Testability,"@danking this is where I was at. I think I got most of the stuff that the scala tests caught, not sure about python.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3557:80,test,tests,80,https://hail.is,https://github.com/hail-is/hail/pull/3557,1,['test'],['tests']
Testability,@danking we should merge the delta change anyway as that's a bug that may result in test failures in the future (I just made PR of fix to 0.1). I think the log reg change is fine to go in as well.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2132#issuecomment-326109741:84,test,test,84,https://hail.is,https://github.com/hail-is/hail/pull/2132#issuecomment-326109741,2,"['log', 'test']","['log', 'test']"
Testability,"@danking you are a golden god. that is all. also, i will test it out for you this weekend",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2821#issuecomment-360964083:57,test,test,57,https://hail.is,https://github.com/hail-is/hail/pull/2821#issuecomment-360964083,1,['test'],['test']
Testability,"@danking: I addressed a few outstanding issues, and added a new test for coercion of unsorted-within-partitions RDDs.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/799#issuecomment-247485500:64,test,test,64,https://hail.is,https://github.com/hail-is/hail/pull/799#issuecomment-247485500,1,['test'],['test']
Testability,"@danking:. > Hey @shengqh !; > ; > Yeah, this is a bug in Kryo, a serialization library used by Spark, which cannot handle the size of data you're producing.; > ; > This is partly a deficiency in Hail: we assume that PLINK files are relatively small, in particular that the number of variants is small.; > ; > This issue was supposedly resolved in Spark 2.4.0+ and 3.0.0+ by [apache/spark@3e03303](https://github.com/apache/spark/commit/3e033035a3c0b7d46c2ae18d0d322d4af3808711) . You appear to be running Apache Spark version 3.3.2, so I'm surprised you encountered this. Can you confirm which version of the Kryo JAR you have in your environment?. I don't know the Kryo JAR. I tested on both docker images hailgenetics/hail:0.2.126-py3.11 and hailgenetics/hail:0.2.127-py3.11. > ; > Can you also share a bit of information about this PLINK file? `import_plink` could obviously be modified to support 30M+ variant PLINK files, but I'd like to understand better why such large PLINK files exist. Do you expect these files to continue to grow in size? Do other consumers of these PLINK files want one PLINK file per chromosome? Would it be possible to generate many PLINK files per chromosome such that all the PLINK files have roughly the same size in bytes?. We have a 35K cohort. The VCF format of chr1 is 2.4T. So we prefer to deliver plink bed format and hail matrix. And, the cohort will continue to grow in future. I will prefer to keep one file per chromosome. For large cohort, which format do you prefer? Hail matrix or Hail VDS?. > ; > Thanks for your feedback and help improving Hail!; > ; > Related issue: #5564 .",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14168#issuecomment-1904727993:679,test,tested,679,https://hail.is,https://github.com/hail-is/hail/issues/14168#issuecomment-1904727993,1,['test'],['tested']
Testability,"@danking; ```; [root@mg hail]# echo $HAIL_HOME; /opt/Software/hail; [root@mg hail]# echo $PYTHONPATH; :/opt/Software/hail/python:/opt/cloudera/parcels/SPARK2/lib/spark2/python:/opt/cloudera/parcels/SPARK2/lib/spark2/python/lib/py4j-0.10.4-src.zip; [root@mg hail]# cd /opt/Software/hail/python; [root@mg python]# ls; hail; [root@mg python]# cd /opt/cloudera/parcels/SPARK2/lib/spark2/python; [root@mg python]# ls; docs lib MANIFEST.in pylintrc pyspark README.md run-tests run-tests.py setup.cfg setup.py test_support; [root@mg python]# cd /opt/cloudera/parcels/SPARK2/lib/spark2/python/lib/; [root@mg lib]# ls; py4j-0.10.4-src.zip PY4J_LICENSE.txt pyspark.zip; [root@mg lib]# echo $SPARK_CLASSPATH; /opt/Software/hail/build/libs/hail-all-spark.jar; [root@mg lib]# cd /opt/Software/hail/build/libs/; [root@mg libs]# ls; hail-all-spark.jar; ```; the configuration file:; ```; export SPARK_HOME=/opt/cloudera/parcels/SPARK2/lib/spark2; export HAIL_HOME=/opt/Software/hail; export PYTHONPATH=""$PYTHONPATH:$HAIL_HOME/python:$SPARK_HOME/python:`echo $SPARK_HOME/python/lib/py4j*-src.zip`""; export SPARK_CLASSPATH=$HAIL_HOME/build/libs/hail-all-spark.jar; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2076#issuecomment-337442177:465,test,tests,465,https://hail.is,https://github.com/hail-is/hail/issues/2076#issuecomment-337442177,2,['test'],['tests']
Testability,"@gtiao here's how you can use this to log:. ```; ht.show(10, handler=lambda x: logging.info(x)); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4303#issuecomment-420030281:38,log,log,38,https://hail.is,https://github.com/hail-is/hail/pull/4303#issuecomment-420030281,2,['log'],"['log', 'logging']"
Testability,"@huy-nguyen is getting a segfault on on current release (0.2.33-5d8cae649505):; ```; #; # A fatal error has been detected by the Java Runtime Environment:; #; # SIGSEGV (0xb) at pc=0x00007fa4b25e18cd, pid=6637, tid=0x00007f9a4f1fc700; #; # JRE version: OpenJDK Runtime Environment (8.0_242-b08) (build 1.8.0_242-8u242-b08-1~deb9u1-b08); # Java VM: OpenJDK 64-Bit Server VM (25.242-b08 mixed mode linux-amd64 ); # Problematic frame:; # J 8451 C2 is.hail.annotations.Region$.loadBit(JJ)Z (33 bytes) @ 0x00007fa4b25e18cd [0x00007fa4b25e18a0+0x2d]; #; # Failed to write core dump. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again; #; # An error report file with more information is saved as:; # /tmp/cac7924b3c14494b9702ac2689c0c52d/hs_err_pid6637.log; ```; with this pipeline:; ```; def normalize_contig(input_contig: hl.expr.StringExpression) -> hl.expr.StringExpression:; return input_contig.replace(""^chr"", """"). def downsample_matrix_table(mt: hl.MatrixTable, n_divisions: int, p_threshold: float) -> hl.Table:; ​ mt = mt.choose_cols(list(range(10))); ​; x = mt.locus.global_position(); y = -hl.log10(mt.Pvalue); ​; downsampled = mt.annotate_cols(; binned=hl.agg.filter(; mt.Pvalue > p_threshold,; hl.agg.downsample(; x,; y,; label=[; normalize_contig(mt.locus.contig),; hl.str(mt.locus.position),; hl.str(mt.Pvalue),; ],; n_divisions=n_divisions; ); ),; unbinned=hl.agg.filter(; mt.Pvalue <= p_threshold,; hl.agg.collect(hl.struct(; pval=mt.Pvalue,; chrom=normalize_contig(mt.locus.contig),; pos=mt.locus.position,; ac=mt.AC,; af=mt.AF,; an=mt.N,; alleles=mt.alleles,; beta=mt.BETA,; consequence=hl.if_else(; hl.is_defined(mt.annotation),; mt.annotation,; ""N/A""; ),; gene_name=mt.gene,; is_binned=False; ); ); ); ); ​; downsampled = downsampled.select_cols(; binned=downsampled.binned.map(; lambda a_bin: hl.struct(; pval=hl.float64(a_bin[2][2]),; chrom=a_bin[2][0],; pos=hl.int32(a_bin[2][1]),; ac=hl.literal(0.0),; af=hl.literal(0.0),; an=",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8240:803,log,log,803,https://hail.is,https://github.com/hail-is/hail/issues/8240,1,['log'],['log']
Testability,@iris-garden Can you review again when you get a chance? Tests are all passing now,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13812#issuecomment-1883649177:57,Test,Tests,57,https://hail.is,https://github.com/hail-is/hail/pull/13812#issuecomment-1883649177,1,['Test'],['Tests']
Testability,"@iris-garden as I understand it, the root of this problem is that `batch.hail.is` and `auth.hail.is` are no longer (since #14180) sharing the same CSRF tokens, so as far as auth is concerned any action from `batch.hail.is` is treated the same as an action/redirect from `www.evilsite.com`. So I think our options would be - . 1. Logout redirects to an auth page, but we need one more user action from the page they land on to confirm log out; 2. Logout from batch can redirect to an auth page which automatically logs them out, but so could a redirect from `evilsite.com`, or someone could embed a `<img src=""https://auth.hail.is/user?logout"" />` tag in an email you receive.; - Do we care if people can log other users out by sending a bad email? Feels like ""yes"" but not the absolute end of the world",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14639#issuecomment-2263413023:329,Log,Logout,329,https://hail.is,https://github.com/hail-is/hail/pull/14639#issuecomment-2263413023,6,"['Log', 'log']","['Logout', 'log', 'logout', 'logs']"
Testability,@iris-garden can you grab that log file and upload here? it should live on the `CLUSTER_NAME-m` machine.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13690#issuecomment-1731820793:31,log,log,31,https://hail.is,https://github.com/hail-is/hail/issues/13690#issuecomment-1731820793,1,['log'],['log']
Testability,@jbloom this is my fault. I changed the expression to code without ensuring the VDS actually had the relevant fields. The doc test correctly points this out. I'll fix Monday.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1598#issuecomment-290987968:126,test,test,126,https://hail.is,https://github.com/hail-is/hail/pull/1598#issuecomment-290987968,1,['test'],['test']
Testability,"@jbloom22 Addressed first round of comments (though I haven't yet played with distributing the multiply in the solving for U from V case). I added a ""filterVariantsExpr"" to allow for the LOCO situation we're interested in allowing for, though I haven't tested any per-variant betas / pvals in cases where LDMatrix was used yet.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1984#issuecomment-314625073:253,test,tested,253,https://hail.is,https://github.com/hail-is/hail/pull/1984#issuecomment-314625073,1,['test'],['tested']
Testability,"@jbloom22 Ah right of course, I inadvertently had required 2.2.0 tests for 0.1, which doesn't support 2.2.0. Requirement off.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2842#issuecomment-362325035:65,test,tests,65,https://hail.is,https://github.com/hail-is/hail/pull/2842#issuecomment-362325035,1,['test'],['tests']
Testability,@jbloom22 Could you double check my `logreg` language?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2783#issuecomment-360241486:37,log,logreg,37,https://hail.is,https://github.com/hail-is/hail/pull/2783#issuecomment-360241486,1,['log'],['logreg']
Testability,"@jbloom22 I put in a rough version of a Python `BlockMatrix.to_local_matrix()`. It won't do super large matrices---it can only accommodate `MAXINT / 8 - 3` entries---but I needed something like this for testing. I was looking at maybe removing `ComputeRRM` from Scala, but it looks like a lot of the lmmreg tests are using it, so I didn't touch it for now; do you know how easy that is work around?",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2751:203,test,testing,203,https://hail.is,https://github.com/hail-is/hail/pull/2751,2,['test'],"['testing', 'tests']"
Testability,"@jbloom22 OK, I put the test back in.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2422#issuecomment-344035511:24,test,test,24,https://hail.is,https://github.com/hail-is/hail/pull/2422#issuecomment-344035511,1,['test'],['test']
Testability,@jbloom22 That would be great. We have made Nirvana even faster recently. Also we are working on reduce the overhead (i.e. time used to load the Cache) for each Nirvana process. I will test on the best blockSize again when this is done.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3266#issuecomment-391058985:185,test,test,185,https://hail.is,https://github.com/hail-is/hail/pull/3266#issuecomment-391058985,1,['test'],['test']
Testability,"@jbloom22 This is a good change. Could you please check in a small VDS from 0.1 (perhaps name it as `0.1-commithash.vds`) and add a test that checks for a `HailException` containing the text ""invalid metadata""?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2173#issuecomment-327232866:132,test,test,132,https://hail.is,https://github.com/hail-is/hail/pull/2173#issuecomment-327232866,1,['test'],['test']
Testability,"@jbloom22 This is a start. Add your content to `jobs.md`. Feel free to change the styling on the banner. You can modify the html code in `www/jobs.xslt` and the css code in `www/style.css`. For iterating, I find it helpful to add a new gradle task:. ```; task testDocs(dependsOn: ['copyPDF', 'copyWebsiteContent', 'buildIndex', 'buildJobs']); ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1934:260,test,testDocs,260,https://hail.is,https://github.com/hail-is/hail/pull/1934,1,['test'],['testDocs']
Testability,"@jbloom22 We lost our AWS EC2 instance I used for performance testing previously. I tried to build HAIL on our cluster, but was out of luck due to some Python issues. We just get another EC2 instance very recently and I haven't had a chance to test the block size yet. One thing I want to mention is that every Nirvana process will spend several seconds on reading the Cache file and Nirvana can process 10k+ variants per second (on my laptop). (I deleted my estimation as it is incorrect... ) So Nirvana prefers larger chunks of data due to the overhead of loading Cache file and relatively faster annotation speed. With other possible overhead like disk I/O (I tested HAIL with Spark running in Standalone mode, which may not be ideal) and merging the results of different Nirvana process, more Nirvana processes do not always lead a shorter processing time.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3266#issuecomment-386642917:62,test,testing,62,https://hail.is,https://github.com/hail-is/hail/pull/3266#issuecomment-386642917,3,['test'],"['test', 'tested', 'testing']"
Testability,@jbloom22 can you give the latest commit on this PR a second set of eyes? I had to fiddle with some tolerances due to https://storage.googleapis.com/hail-ci-0-1/ci/7a0732726e6873e2c0d85fed5183324ac9441d52/194ea22cd9f744a5463340130e799c8a65ca885e/index.html . I expected the test I added (`test_pcrelate_issue_5263`) to be exactly the same but it differed out at the 10th or so position.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5250#issuecomment-461123275:274,test,test,274,https://hail.is,https://github.com/hail-is/hail/pull/5250#issuecomment-461123275,1,['test'],['test']
Testability,"@jbloom22 disregard, I'm a dummy, I was compiling on the CI server and then submitting which, of course, resulted in a binary that had AVX2 instructions and the clusters we use don't have AVX2-capable processors. For the record, the useful information is stored in `/var/log/hadoop-yarn/userlogs/`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2132#issuecomment-325737476:271,log,log,271,https://hail.is,https://github.com/hail-is/hail/pull/2132#issuecomment-325737476,1,['log'],['log']
Testability,"@jbloom22 opening this PR so we have something to work from. I think the dimensions where the ability to scale with Hail will be beneficial are:; * heritability estimation of many phenotypes at once; * partitioned LDSC with potentially thousands of covariates (Ran is currently exploring this space); * multiple tests of enrichment across different annotations (fitting the ""baseline"" partitioned model with ~50 covariates + 1 annotation of interest thousands of times -- Kate has been working in this area). In this first effort, I'm trying to implement the univariate, ""vanilla"" version of LD score regression -- no partitioning/annotations, just simple linear regression of chi-squared statistics on LD scores -- though I have tried to build for the first bullet point above, heritability estimation of many phenotypes at once.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5026:312,test,tests,312,https://hail.is,https://github.com/hail-is/hail/pull/5026,1,['test'],['tests']
Testability,@jbloom22 test fail was due to `NaN != NaN`. I improved the test.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2270#issuecomment-334234954:10,test,test,10,https://hail.is,https://github.com/hail-is/hail/pull/2270#issuecomment-334234954,2,['test'],['test']
Testability,"@jigold , so, I know how to fix this this, but why didn't it fail in the PR that made this change?; ```; ________________________________ test_callback _________________________________. client = <hailtop.batch_client.client.BatchClient object at 0x7f9cbc23b610>. async def test_callback(client):; import nest_asyncio # pylint: disable=import-outside-toplevel; ; nest_asyncio.apply(); ; app = web.Application(); callback_bodies = []; callback_event = asyncio.Event(); ; def url_for(uri):; host = os.environ['HAIL_BATCH_WORKER_IP']; port = os.environ['HAIL_BATCH_WORKER_PORT']; return f'http://{host}:{port}{uri}'; ; async def callback(request):; body = await request.json(); callback_bodies.append(body); callback_event.set(); return web.Response(); ; app.add_routes([web.post('/test', callback)]); runner = web.AppRunner(app); await runner.setup(); site = web.TCPSite(runner, '0.0.0.0', 5000); await site.start(); ; try:; token = secrets.token_urlsafe(32); b = create_batch(; client, callback=url_for('/test'), attributes={'foo': 'bar', 'name': 'test_callback'}, token=token; ); head = b.create_job('alpine:3.8', command=['echo', 'head']); b.create_job('alpine:3.8', command=['echo', 'tail'], parents=[head]); b.submit(); await asyncio.wait_for(callback_event.wait(), 5 * 60); callback_body = callback_bodies[0]; ; # verify required fields present; callback_body.pop('cost'); callback_body.pop('msec_mcpu'); callback_body.pop('time_created'); callback_body.pop('time_closed'); callback_body.pop('time_completed'); callback_body.pop('duration'); callback_body.pop('duration_ms'); callback_body.pop('cost_breakdown'); > assert callback_body == {; 'id': b.id,; 'user': 'test',; 'billing_project': 'test',; 'token': token,; 'state': 'success',; 'complete': True,; 'closed': True,; 'n_jobs': 2,; 'n_completed': 2,; 'n_succeeded': 2,; 'n_failed': 0,; 'n_cancelled': 0,; 'attributes': {'foo': 'bar', 'name': 'test_callback'},; }, callback_body; E AssertionError: {'attributes': {'client_job': '8051758-182',",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13739#issuecomment-1739224427:779,test,test,779,https://hail.is,https://github.com/hail-is/hail/pull/13739#issuecomment-1739224427,1,['test'],['test']
Testability,"@jigold Can you elaborate on this one? Timeout to me means testing times out, which does happen in our current CI. Should it be closed?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5745#issuecomment-555097320:59,test,testing,59,https://hail.is,https://github.com/hail-is/hail/issues/5745#issuecomment-555097320,1,['test'],['testing']
Testability,@jigold Changes look good (approved) but something broke in the tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1446#issuecomment-283500834:64,test,tests,64,https://hail.is,https://github.com/hail-is/hail/pull/1446#issuecomment-283500834,1,['test'],['tests']
Testability,"@jigold Cotton is on vacation and I need to get this merged to unblock work on dbuf & shuffler. I believe I've addressed Cotton's concerns. You can see my modification to the CI tests as evidence of that. I'd like your review. Don't approve just yet though, I need to ensure any build.yaml rule for directories has the new `directory: recursive` annotation.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7626#issuecomment-566260967:178,test,tests,178,https://hail.is,https://github.com/hail-is/hail/pull/7626#issuecomment-566260967,1,['test'],['tests']
Testability,"@jigold Doesn't this suggest that the error's message is `'job_id'`? ; ```; > assert data['check_resource_aggregation_error'] is None, data; E AssertionError: {'check_incremental_error': None, 'check_resource_aggregation_error': ""'job_id'""}; E assert ""'job_id'"" is None; ```; The select statement for `attempt_by_job_group_resources` doesn't include a `job_id` column.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14282#issuecomment-1940328506:78,assert,assert,78,https://hail.is,https://github.com/hail-is/hail/pull/14282#issuecomment-1940328506,3,"['Assert', 'assert']","['AssertionError', 'assert']"
Testability,@jigold I added `LogStore` and `GCS` to manage non-blocking interaction with GCS.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6175#issuecomment-496662137:17,Log,LogStore,17,https://hail.is,https://github.com/hail-is/hail/pull/6175#issuecomment-496662137,1,['Log'],['LogStore']
Testability,"@jigold I fixed the tests (things got broken rebasing onto breaking, unsurprisingly). I also incorporated a change to `Table.view_join_rows` allowing for implicit joins with `Locus` and `Interval` keyed tables into `Variant` keyed datasets (cf. @cseed @tpoterba), which I needed for the skat test.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2812#issuecomment-361667453:20,test,tests,20,https://hail.is,https://github.com/hail-is/hail/pull/2812#issuecomment-361667453,2,['test'],"['test', 'tests']"
Testability,"@jigold I made sure that all the tests from `hail.tests.test_expr.Tests.test_cond` are both passing and going through the IR (except the first one, which has strings).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3210#issuecomment-375776769:33,test,tests,33,https://hail.is,https://github.com/hail-is/hail/pull/3210#issuecomment-375776769,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"@jigold I removed all the tests, so I think this is good to go in for now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6454#issuecomment-505216094:26,test,tests,26,https://hail.is,https://github.com/hail-is/hail/pull/6454#issuecomment-505216094,1,['test'],['tests']
Testability,@jigold I removed the pca_join test here. Might make more sense for that change to be part of the pca test rework.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3613#issuecomment-390661244:31,test,test,31,https://hail.is,https://github.com/hail-is/hail/pull/3613#issuecomment-390661244,2,['test'],['test']
Testability,"@jigold I stood up batch/ci in my own project from `hail-is/hail:main` and then deployed this branch, taking notes of any changes I needed to make and all seemed to work out OK. I think that's about as much as I can properly test this without trying things out in haildev/hail-vdc. The steps were as follows:. 1. Generate the configmaps used by gateway/internal-gateway. These will have the routing configuration for production services (I've edited the bootstrap instructions to match); `make -C gateway envoy-xds-config && make -C internal-gateway envoy-xds-config`; 2. … wait a few seconds for CI to quietly update these configmaps with information about testing namespaces … (can manually verify changes with `download-configmap gateway-xds-config`); 3. Deploy the new versions of gateway/internal-gateway; `make -C gateway deploy NAMESPACE=default && make -C internal-gateway NAMESPACE=default`. This worked for me in my project with no downtime, but either way I would probably do the same thing as with the previous PR where I test it in azure before making changes to hail-vdc.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12095#issuecomment-1293703346:225,test,test,225,https://hail.is,https://github.com/hail-is/hail/pull/12095#issuecomment-1293703346,3,['test'],"['test', 'testing']"
Testability,@jigold I think I'd prefer we close all PRs lower in the stack and just focus on this one PR. I feel like these changes are a logical unit and I'd rather consume them together. What do you think of that?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14170#issuecomment-1919807627:126,log,logical,126,https://hail.is,https://github.com/hail-is/hail/pull/14170#issuecomment-1919807627,1,['log'],['logical']
Testability,@jigold I think the merging of orMissing to function registry in master now makes a test fail here.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1506#issuecomment-284930607:84,test,test,84,https://hail.is,https://github.com/hail-is/hail/pull/1506#issuecomment-284930607,1,['test'],['test']
Testability,"@jigold Lets see if it builds. I added a hail-ci-build.sh to vdc, since that is a project root (I don't know whether I can specify in projects vdc/scripts/user , and vdc already existed as project). I am seeing a slightly weird accumulation of gcp service accounts that look like they're being created by my script, but I'm not really sure why that's happening; each run of the script generate 1, and this hasn't been under CI (under build log nothing suggests this script was running)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5618#issuecomment-478149347:440,log,log,440,https://hail.is,https://github.com/hail-is/hail/pull/5618#issuecomment-478149347,1,['log'],['log']
Testability,"@jigold Notebook has no tests, so it doesn't have an environment.yml that needs to be updated in the hail-ci-build-image. This configuration is only for the run-time service.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5451#issuecomment-467637462:24,test,tests,24,https://hail.is,https://github.com/hail-is/hail/pull/5451#issuecomment-467637462,1,['test'],['tests']
Testability,"@jigold OK, so here's the summary of what I learned:. We don't have tabix files for GRCh38 and we only test on small positions. Many large positions without tabix files seems to cause a problem for VEP (and make it slow, unsurprisingly). Fix seems to be to download the *indexed* homo_sapiens cache https://ftp.ensembl.org/pub/release-95/variation/indexed_vep_cache/ and upload that to our QoB VEP bucket. I presume you copied from the data we use in Dataproc? If yes, we should update that to also have tabix files. Also, in Dataproc, we use highmem machines for VEP. We should change _service_vep to also use highmem machines. <details><summary>Listing the tabix files for GRCh38 and GRCh37</summary>. ```; (base) dking@wm28c-761 /tmp % gsutil ls gs://hail-qob-vep-grch38-us-central1/homo_sapiens/95_GRCh38/\*/\*.tbi; CommandException: One or more URLs matched no objects.; ```. ```; (base) dking@wm28c-761 /tmp % gsutil ls gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/\*/\*.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/1/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/10/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/11/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/12/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/13/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/14/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/15/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/16/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/17/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/18/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/19/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapiens/85_GRCh37/2/all_vars.gz.tbi; gs://hail-qob-vep-grch37-us-central1/homo_sapi",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13989#issuecomment-1830868145:103,test,test,103,https://hail.is,https://github.com/hail-is/hail/issues/13989#issuecomment-1830868145,1,['test'],['test']
Testability,"@jigold OK, this is ready for review again. Just ripping out the user bucket logic now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8834#issuecomment-645084393:77,log,logic,77,https://hail.is,https://github.com/hail-is/hail/pull/8834#issuecomment-645084393,1,['log'],['logic']
Testability,"@jigold Ok I changed this in a way that will hopefully be more clear. The rules are as follows:. 1. We only use `ci-intermediate` for anonymous images. Images are named auth, batch, etc. even when they are in tests or dev deploys.; 1. Every image draws from the main branch cache tag, named `<DOCKER_PREFIX>/<image_name>:cache`; 2. Every image has an additional cache tag that it draws from and pushes to. For deploys, that is the same as the main branch cache, for PRs, it is `cache-pr-<pr_number>`, for dev deploys it is `cache-<dev_username>`, and for deploys conducted by CIs in a non-default namespace, it is `cache-<namespace-CI-is-in>-deploy`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11999#issuecomment-1177641450:209,test,tests,209,https://hail.is,https://github.com/hail-is/hail/pull/11999#issuecomment-1177641450,1,['test'],['tests']
Testability,"@jigold The initial scan now seems comparable, doing just `bgen_import` I get:. 0.1:; vds = hc.import_bgen('test.bgen'); real	0m29.815s; user	0m0.260s; sys	0m0.368s. 0.2:; mt = hl.import_bgen('test.bgen', ['dosage']); real	0m26.712s; user	0m0.705s; sys	0m0.119s. This is on 4 cores with a 37GB test BGEN. 0.2 seems ~15% faster now. Can you rerun the time test again once this goes and and verify you get a reasonable number of partitions to get parallelism (I'm seeing 293.) Thanks!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3945#issuecomment-405771538:108,test,test,108,https://hail.is,https://github.com/hail-is/hail/pull/3945#issuecomment-405771538,4,['test'],['test']
Testability,"@jigold and @danking, I can't see why `ci-test` is failing, unfortunately. Can you take a look?. (and I should look into setting up Hail CI in our infra as well :-))",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11435#issuecomment-1058675021:42,test,test,42,https://hail.is,https://github.com/hail-is/hail/pull/11435#issuecomment-1058675021,1,['test'],['test']
Testability,@jigold identified `ibd_prune` as one of the slowest parts of the python doc test. This method is simply not effective. Users should use `pc_relate` or `ibd` in conjunction with `KeyTable.maximal_independent_set`. I didn't reimplement `ibd_prune` in terms of them simply to save time and because getting master builds going fast is important when we have limited build agents.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2274:77,test,test,77,https://hail.is,https://github.com/hail-is/hail/pull/2274,1,['test'],['test']
Testability,"@jigold it's passing. It’s critical to process the group and agg joins at the same time, and to not reprocess the group joins or re-analyze when updating the key to the groups. i’ve added an additional test to confirm that it works when joins happen on both group and agg expressions (with the group expression of a different type (bool) than the original key (int) so that it would fail if key_by were done before processing the agg joins). I'll work on fixing the matrix table versions in another PR.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3730#issuecomment-397160205:202,test,test,202,https://hail.is,https://github.com/hail-is/hail/pull/3730#issuecomment-397160205,1,['test'],['test']
Testability,"@jigold not sure why this test is being marked as ""failed""---maybe because there are currently no tests in that filter?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9581#issuecomment-705649534:26,test,test,26,https://hail.is,https://github.com/hail-is/hail/pull/9581#issuecomment-705649534,2,['test'],"['test', 'tests']"
Testability,"@jigold one of these commits (the last one, I believe?) borrows a line from #3427 to get the tests working. I can wait for that to go in and then remove from this, if you prefer.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3431#issuecomment-384131910:93,test,tests,93,https://hail.is,https://github.com/hail-is/hail/pull/3431#issuecomment-384131910,1,['test'],['tests']
Testability,"@jigold poke on re-review, I addressed your commends in 667ff7e, created and moved the functions to linalg/utils in 3fdeaa1, and broke out the bit that finds the contig start indices into its own function in ec3a50f so I could test its behavior more rigorously. @tpoterba poking again on whether you're happy with where I moved the command (see above)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3873#issuecomment-403562202:227,test,test,227,https://hail.is,https://github.com/hail-is/hail/pull/3873#issuecomment-403562202,1,['test'],['test']
Testability,@jigold rightly pointed out I didn't add a regression test for this. @jigold next time request changes! @jbloom22 next time request tests! @cseed write tests for failures!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1272#issuecomment-273972707:54,test,test,54,https://hail.is,https://github.com/hail-is/hail/pull/1272#issuecomment-273972707,3,['test'],"['test', 'tests']"
Testability,@jigold since you already took a look I sent back to you. It passed tests on last run other than the MovieLens issue.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11589#issuecomment-1072665478:68,test,tests,68,https://hail.is,https://github.com/hail-is/hail/pull/11589#issuecomment-1072665478,1,['test'],['tests']
Testability,"@jigold test are fixed, properly clean up; I think the test should be improved to check that deletion properly cleans up expected resources (rather than simply doesn't throw an error, which will happen if deletion fails for any reason other than 404), but I think that could wait for a subsequent PR, because as written, the only way they will fail to do so is if the wrong name or namespace are supplied (else they will throw an error and the test will fail).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5618#issuecomment-478175367:8,test,test,8,https://hail.is,https://github.com/hail-is/hail/pull/5618#issuecomment-478175367,3,['test'],['test']
Testability,"@jigold that's a great suggestion. To test that this code is acutally idempotent, I wanted to do this:. Duplicate the test database createDatabase task in `ci/test/resources/build.yaml` (but with a new step name). The jobs have the same parents so they race to run first. They have distinct passwords, so the resulting secret will non-deterministically have the wrong password (e.g. A creates the user, A writes its password first, B ignores already created user, then B writes its password second), but if everything but the secret works, then I'm confident repeated attempts sharing the same secret should work!. Unfortunately, I can't test CI itself in this way because test CIs (whether in dev or in a PR) are not permitted to create databases. I took your suggestion and copied the SQL query out and ran it twice instead. That worked fine. Everything was created once.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8833#issuecomment-631672719:38,test,test,38,https://hail.is,https://github.com/hail-is/hail/pull/8833#issuecomment-631672719,5,['test'],['test']
Testability,"@jigold this is more-or-less as we talked about yesterday. I added a check within batch creation so it can only open a batch against an open billing project, and when we close a billing project we check that there all of the batches associated with it are completed (can't close a billing project mid-batch). I don't have automated tests for this yet (planning on exposing the API in the billing project test PR) but I dev-deployed it and clicked the buttons and it does the right thing.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9579:332,test,tests,332,https://hail.is,https://github.com/hail-is/hail/pull/9579,2,['test'],"['test', 'tests']"
Testability,@jigold this should be simple. Last thing Dan wanted was that I fix the test,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11777#issuecomment-1170350346:72,test,test,72,https://hail.is,https://github.com/hail-is/hail/pull/11777#issuecomment-1170350346,1,['test'],['test']
Testability,"@jigold you won the lottery, but DO NOT approve until Konrad has responded with regard to whether he's happy with the result of my manual tests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4150#issuecomment-415225079:138,test,tests,138,https://hail.is,https://github.com/hail-is/hail/pull/4150#issuecomment-415225079,1,['test'],['tests']
Testability,"@jigold you won't see the output on this job, this is a change to CI so that every PR that CI builds lists the logs. If the internal links worked and we had a test for ci2, then you'd be able to see it at the newly tested CI's website at: https://ci2.pr-6094-default-q0023anv9fmd.internal.hail.is, but neither do we test ci2 nor do these internal links seem to work.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6094#issuecomment-491899622:111,log,logs,111,https://hail.is,https://github.com/hail-is/hail/pull/6094#issuecomment-491899622,4,"['log', 'test']","['logs', 'test', 'tested']"
Testability,"@jigold, I made the following modifications to your changes:; - added a jars target to the hail/ Makefile, which does the C build and then runs maven, and removed the corresponding section of the pom.xml,; - run the Java tests in its own build step invoking java directory, so I removed the test step from pom.xml; - modified hail_build_image (the image used to run the Hail build) to install maven and the Hail dependencies (jars), no longer using gradle. The testng tests probably need better logging which I'm trying to figure out now.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6050:221,test,tests,221,https://hail.is,https://github.com/hail-is/hail/pull/6050,5,"['log', 'test']","['logging', 'test', 'testng', 'tests']"
Testability,"@jigold. > I ran a test job with the copy tool on a 10 Gi random file and matched 1.2 Gibit / second. Does this mean something like:; ```; j = b.new_job(); j.image('hailgenetics/hail:0.2.118'); j.command('python3 -m hailtop.copy ...'); ```; Or did you use a `read_input`? I'm curious if something about how we configure the input container could affect this. I doubt it, but wanted to confirm.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12923#issuecomment-1599420578:19,test,test,19,https://hail.is,https://github.com/hail-is/hail/issues/12923#issuecomment-1599420578,1,['test'],['test']
Testability,"@jjfarrell Thanks, this is good information. Can you also get the YARN container logs from a failing run? those should have more details on what exactly went wrong. Also the hail.log file might have more information on the root cause of the `ExecutorLostFailure` issue. Also, there's been about 7 weeks of development since `d602a3d`, perhaps there's some issue with that version. (I suspect it's not that, but worth trying).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4733#issuecomment-456486653:81,log,logs,81,https://hail.is,https://github.com/hail-is/hail/issues/4733#issuecomment-456486653,2,['log'],"['log', 'logs']"
Testability,"@jmarshall, thanks doing this - would you mind adding a simple unit test to lock down the behaviour?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14700#issuecomment-2397543555:68,test,test,68,https://hail.is,https://github.com/hail-is/hail/pull/14700#issuecomment-2397543555,1,['test'],['test']
Testability,"@johnc1231 Do you have a preference on how we fix this issue? I'd prefer not to manually edit the pip package just to get the test passing, and I'm questioning the value of those checks to begin with.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11502#issuecomment-1061893668:126,test,test,126,https://hail.is,https://github.com/hail-is/hail/pull/11502#issuecomment-1061893668,1,['test'],['test']
Testability,"@johnc1231 I realized there's a really easy way to catch the kinds of dead-code-after-a-goto bugs we were running into, so I went ahead and did it. The basic idea is: most operations on a CodeBuilder (which ultimately call `append`) assert that the current `code` doesn't end in a `ControlX`, such as a jump. `CodeBuilder.define` is the escape hatch, which works whether `code` ends in a jump, or doesn't, in which case the previous code falls through to the new label.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8569:233,assert,assert,233,https://hail.is,https://github.com/hail-is/hail/pull/8569,1,['assert'],['assert']
Testability,"@johnc1231 I uncommented some of the tests that I'd commented out before because they don't hit the prune error. I had to implement some stuff on PNDArray (mostly copy, and adding a case for setRequired) in order to make it work; let me know if those were missing for a reason and I'll take it out.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8073#issuecomment-585372375:37,test,tests,37,https://hail.is,https://github.com/hail-is/hail/pull/8073#issuecomment-585372375,1,['test'],['tests']
Testability,"@johnc1231 I updated this, after discovering that HadoopFS does mkdir -p, but only during writes. I also made some small changes related to backend.py and ServiceBackend, to make it at least formally possible to use ServiceBackend (issue opened to this effect). Given the state of ServiceBackend and apiserver, I did not update test_google_fs_utils.py to explicitly check mkdir -p behavior, but this is implicitly checked in the local version of the file creation test.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6887#issuecomment-531924944:464,test,test,464,https://hail.is,https://github.com/hail-is/hail/pull/6887#issuecomment-531924944,1,['test'],['test']
Testability,"@johnc1231 I've addressed these changes in the branch I'm working with to test, so I can merge them if you agree with Dan's comments. In particular, do you have evidence the caching matters? (I've removed it)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2040#issuecomment-319675886:74,test,test,74,https://hail.is,https://github.com/hail-is/hail/pull/2040#issuecomment-319675886,1,['test'],['test']
Testability,@johnc1231 It should be now. I expect this latest commit to pass tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8864#issuecomment-640909201:65,test,tests,65,https://hail.is,https://github.com/hail-is/hail/pull/8864#issuecomment-640909201,1,['test'],['tests']
Testability,"@johnc1231 You can approve. It's actually already deployed, I did that to test it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6973#issuecomment-526698057:74,test,test,74,https://hail.is,https://github.com/hail-is/hail/pull/6973#issuecomment-526698057,1,['test'],['test']
Testability,@johnc1231 `make test-dataproc` succeeded,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8150#issuecomment-591026741:17,test,test-dataproc,17,https://hail.is,https://github.com/hail-is/hail/pull/8150#issuecomment-591026741,1,['test'],['test-dataproc']
Testability,"@johnc1231 you already peeked at this, so do you mind properly reviewing it? It passes the tests now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8511#issuecomment-613040116:91,test,tests,91,https://hail.is,https://github.com/hail-is/hail/pull/8511#issuecomment-613040116,1,['test'],['tests']
Testability,@konradjk @bw2 Can you double check the test examples in `test_liftover_negative_strand` and give feedback on the interface?,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4895:40,test,test,40,https://hail.is,https://github.com/hail-is/hail/pull/4895,1,['test'],['test']
Testability,@konradjk Python tests exist. https://github.com/hail-is/hail/blob/master/hail/python/test/hail/utils/test_utils.py#L114. https://github.com/hail-is/hail/blob/d65959f65fe7c8018fcd83615e60ba8ef8233b96/hail/python/hail/fs/fs.py#L75. edit: GitHub is fancy,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7611#issuecomment-558450046:17,test,tests,17,https://hail.is,https://github.com/hail-is/hail/pull/7611#issuecomment-558450046,2,['test'],"['test', 'tests']"
Testability,@konradjk Tested,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7861#issuecomment-573827957:10,Test,Tested,10,https://hail.is,https://github.com/hail-is/hail/pull/7861#issuecomment-573827957,1,['Test'],['Tested']
Testability,"@konradjk once this builds i'll see what header is produced and run that by you for reasonable-ness. Should we be testing vep with `csq=true` as well? I could produce a second copy of the gold standard with that option and add it to the script, which would also test that this string is created correctly",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4150:114,test,testing,114,https://hail.is,https://github.com/hail-is/hail/pull/4150,2,['test'],"['test', 'testing']"
Testability,"@konradjk thanks for the succinct test case, I can reproduce.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2178#issuecomment-326819191:34,test,test,34,https://hail.is,https://github.com/hail-is/hail/issues/2178#issuecomment-326819191,1,['test'],['test']
Testability,"@lgruen Can you take a look at these changes and let me know if they'll work easily with your current deployment. If yes, then I'll test it all works next week in my namespace.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12501:132,test,test,132,https://hail.is,https://github.com/hail-is/hail/pull/12501,1,['test'],['test']
Testability,@lgruen This breaks the `test_hailctl_batch` test. You need to make sure this message doesn't get printed when running `hailctl batch submit` with the `-o json` option.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12612#issuecomment-1400479921:45,test,test,45,https://hail.is,https://github.com/hail-is/hail/pull/12612#issuecomment-1400479921,1,['test'],['test']
Testability,"@lgruen to address your question directly, AFAIK, if you set `GOOGLE_APPLICATION_CREDENTIALS`, tools will use those credentials. That's at least the intended behavior of all Hail tools. I think `gcloud auth activate-service-account` is primarily used to tell gcloud & gsutil about a key. `gcloud auth application-default login` likewise seems to be useful for getting ADC credentials if one lacks them but not necessary for using credentials with tools that check the env var.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12526#issuecomment-1338187502:321,log,login,321,https://hail.is,https://github.com/hail-is/hail/pull/12526#issuecomment-1338187502,1,['log'],['login']
Testability,"@maccum you were right that there are multiple variants at the same position, so `position = 0` can filter. (this also means the test for `r2=1.0, bp_window_size=0` is getting lucky, since you could, in principle, have perfectly correlated variants at the same position)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3704#issuecomment-394413114:129,test,test,129,https://hail.is,https://github.com/hail-is/hail/pull/3704#issuecomment-394413114,1,['test'],['test']
Testability,@natestockham As to your more specific issue can you tell me the output of this:. ```bash; echo $SPARK_HOME; echo $HAIL_HOME; echo $PYTHONPATH; ```. Can you also post the invocation you're using to trigger this test failure? I assume you're in a clone of the Hail repository and running:. ```bash; ./gradlew test -Dspark.version=2.1.0; ```. in a shell with `$SPARK_HOME` pointing to a `2.1.0` installation of Spark.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1419#issuecomment-281828119:211,test,test,211,https://hail.is,https://github.com/hail-is/hail/issues/1419#issuecomment-281828119,2,['test'],['test']
Testability,"@natestockham there's been some data science-y investigations on our end, final results not yet ready, but it looks like that test is way over constrained. Our confidence in the LMM method has not yet changed as a result of this failure. I'll be pushing a commit to remove the test failure by Monday.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1419#issuecomment-282453922:126,test,test,126,https://hail.is,https://github.com/hail-is/hail/issues/1419#issuecomment-282453922,2,['test'],['test']
Testability,"@natestockham, I cannot reproduce your issue with this master commit:. ```; dking@wmb16-359 # git log | head -n 3; commit ee646dc7fce6131dffbe86e6ebafc6e9fd224659; Author: John Compitello <johnc@broadinstitute.org>; Date: Tue Feb 21 17:15:13 2017 -0500; ```; and this invocation of gradle (the `SPARK_HOME` path is, of course, peculiar to my machine):; ```; SPARK_HOME=/Users/dking/borg/spark-2.1.0-bin-hadoop2.7 gradle test -Dspark.version=2.1.0; ```. However, the above innovation fails in the `LinearMixedRegressionSuite`:. ```; Gradle suite > Gradle test > is.hail.methods.LinearMixedRegressionSuite.genAndFitLMM FAILED; org.scalatest.exceptions.TestFailedException at LinearMixedRegressionSuite.scala:370. 1 test completed, 1 failed; ```. The test verifies that the fit beta is equivalent, within a certain precision, to `0.8410147169942509`. The fit beta produced with Spark 2.0.2 passes this test. The fit beta produced with Spark 2.1.0 is `1.3081684472318504`. I'm on Mac OS version 10.11.6. Processor is Intel Core i7. I have not yet tried on cloud machines or a GNU/Linux VM.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1419#issuecomment-281760653:98,log,log,98,https://hail.is,https://github.com/hail-is/hail/issues/1419#issuecomment-281760653,7,"['Test', 'log', 'test']","['TestFailedException', 'log', 'test']"
Testability,"@patrick-schultz , shift = -1 can lead to some pretty ugly graphs when the range of log transformed y values is small (i.e. between 0 and 1); <img width=""1093"" alt=""Screen Shot 2022-01-26 at 2 12 03 PM"" src=""https://user-images.githubusercontent.com/13773586/151230782-3e930e56-f3c7-44f0-807c-6048bea0e1ee.png"">",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11268#issuecomment-1022511402:84,log,log,84,https://hail.is,https://github.com/hail-is/hail/pull/11268#issuecomment-1022511402,1,['log'],['log']
Testability,@patrick-schultz . This is a test that catches #11335. Can you take this and patch the problem? I think something about the allowed overlap.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11354:29,test,test,29,https://hail.is,https://github.com/hail-is/hail/pull/11354,1,['test'],['test']
Testability,"@patrick-schultz @tpoterba I removed the dependence on #6534 and wrote a test to exercise the IR nodes and all the aggregators we had written. This can now be reviewed/go in independently of the other one, which was failing on a match error in Emit. (I'll request changes to block the other one from going in until we've discussed a plan for using it, since that's now the one that will send everything through the new path.)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6535#issuecomment-509383664:73,test,test,73,https://hail.is,https://github.com/hail-is/hail/pull/6535#issuecomment-509383664,1,['test'],['test']
Testability,"@patrick-schultz Alright. This passes tests locally. I'm happy with the docs verbiage. I am eager for your review!. <img width=""1105"" alt=""Screen Shot 2023-02-01 at 17 54 00"" src=""https://user-images.githubusercontent.com/106194/216184499-6b30a121-9e07-40a6-8825-dc6e7c6194bf.png"">. <img width=""1105"" alt=""Screen Shot 2023-02-01 at 17 54 10"" src=""https://user-images.githubusercontent.com/106194/216184498-5f9eaeaf-fa76-4161-acdd-81682e06aa3f.png"">",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12637#issuecomment-1412855103:38,test,tests,38,https://hail.is,https://github.com/hail-is/hail/pull/12637#issuecomment-1412855103,1,['test'],['tests']
Testability,"@patrick-schultz Are you okay with where the checkpoints are? If yes, then I'll do one last set of benchmarks and then this is ready to go!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12629#issuecomment-1409418048:99,benchmark,benchmarks,99,https://hail.is,https://github.com/hail-is/hail/pull/12629#issuecomment-1409418048,1,['benchmark'],['benchmarks']
Testability,"@patrick-schultz I added some tests and fixed behavior as a result. I think this is a valuable change, but since I've edited it directly seems like someone else should do review as well.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12735#issuecomment-1449276699:30,test,tests,30,https://hail.is,https://github.com/hail-is/hail/pull/12735#issuecomment-1449276699,1,['test'],['tests']
Testability,@patrick-schultz I addressed your comments in the second commit and added sum/count aggregators. I also refactored the tests to test them; they're otherwise still the same.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6501#issuecomment-506923400:119,test,tests,119,https://hail.is,https://github.com/hail-is/hail/pull/6501#issuecomment-506923400,2,['test'],"['test', 'tests']"
Testability,@patrick-schultz I can add more tests if you think we need it.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5355#issuecomment-463775654:32,test,tests,32,https://hail.is,https://github.com/hail-is/hail/pull/5355#issuecomment-463775654,1,['test'],['tests']
Testability,"@patrick-schultz I made sure that a failing test would show up correctly on the report, but I forgot to save the link to the build report so I can't show it to you :(",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4809#issuecomment-440756951:44,test,test,44,https://hail.is,https://github.com/hail-is/hail/pull/4809#issuecomment-440756951,1,['test'],['test']
Testability,"@patrick-schultz I wrote this up when debugging some other stuff. With this, my other stuff encounters hard to debug array index issues. That makes me a bit apprehensive to merge it b/c I can't tell if those issues are in my other stuff or real BM issues. . My specific question: how comfortable are you with the tests of BlockMatrix. Do you think it's well tested enough to just trust this PR is correct?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13807#issuecomment-1765336270:313,test,tests,313,https://hail.is,https://github.com/hail-is/hail/pull/13807#issuecomment-1765336270,2,['test'],"['tested', 'tests']"
Testability,@patrick-schultz I'm closing this for now because there's something erroring in the python tests that I don't understand. I'll re-open once I've fixed that and am more certain that I actually understand what's happening.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4165#issuecomment-413875178:91,test,tests,91,https://hail.is,https://github.com/hail-is/hail/pull/4165#issuecomment-413875178,1,['test'],['tests']
Testability,"@patrick-schultz I'm not sure if this makes sense or not, but I observed it while working on something else. It seems weird but acceptable to import an empty dictionary as any struct. Does this seem reasonable to you? How have we avoided this bug for so long?. I'm not familiar enough with this code to know how to simply reproduce the bug and add a corresponding test. Thoughts?",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14202:364,test,test,364,https://hail.is,https://github.com/hail-is/hail/pull/14202,1,['test'],['test']
Testability,"@patrick-schultz I'm sending this back to you because I made some pretty drastic changes trying to fix some errors. The biggest non-refactoring change that the original this introduces is that we can't parse IR for a persisted block matrix reader if the persisted block matrix doesn't exist. (This makes some amount of sense if you consider that we also can't parse the IR for a native block matrix reader if the file doesn't exist.). This led me down a rabbit hole of test failures since we're parsing IR/types a fair number of times, through the execution and after we get the result. After fiddling with it for a little bit, I removed UnpersistBlockMatrix. I'm not sure what I was thinking when I added it. I re-added an ""unpersist"" function to the backend to handle unpersisting BlockMatrices. It differs from the current Table/MatrixTable unpersist functions in that we only pass the id of the thing we want to unpersist, not the entire IR, since that's all we need.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9421#issuecomment-691300692:469,test,test,469,https://hail.is,https://github.com/hail-is/hail/pull/9421#issuecomment-691300692,1,['test'],['test']
Testability,@patrick-schultz I've updated this PR so that OrderedRVD.union() uses better logic to avoid the shuffling the RVDs that it's trying to merge. I did this by merging the partitioners so that each resulting partition only gets information from one original partition per input RVD. I've removed the unionDisjoint stuff because this merge logic should automatically do that in the case of disjoint RVDs.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4043#issuecomment-409679487:77,log,logic,77,https://hail.is,https://github.com/hail-is/hail/pull/4043#issuecomment-409679487,2,['log'],['logic']
Testability,@patrick-schultz Looks like some tests are failing / docs conflicts,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7134#issuecomment-542277918:33,test,tests,33,https://hail.is,https://github.com/hail-is/hail/pull/7134#issuecomment-542277918,1,['test'],['tests']
Testability,@patrick-schultz Lots of test failures,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10848#issuecomment-914526677:25,test,test,25,https://hail.is,https://github.com/hail-is/hail/pull/10848#issuecomment-914526677,1,['test'],['test']
Testability,"@patrick-schultz What should the behavior here be like?; During the execution of the above, we are getting the following message in the log:; ```; 2020-03-04 18:34:38 root: INFO: invalid partitioner: !lteqWithOverlap(-1)([[]-[]].right, [[]-[]].left); ```; These are empty range bounds, I feel like in this particular case, `lteqWithOverlap` should be true.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8138#issuecomment-594938133:136,log,log,136,https://hail.is,https://github.com/hail-is/hail/issues/8138#issuecomment-594938133,1,['log'],['log']
Testability,"@patrick-schultz do we expect that after the randomness PR we need to update random tests (in this case, balding Nichols) because the sequence of generated numbers has changed?. (Context: it appears the randomness PR accidentally disabled the test_statgen.py tests which included a balding Nichols test)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12588#issuecomment-1397329460:84,test,tests,84,https://hail.is,https://github.com/hail-is/hail/pull/12588#issuecomment-1397329460,3,['test'],"['test', 'tests']"
Testability,@patrick-schultz looks like some of the tests are failing because the implementation in Emit is missing in this PR. I don't know if you wanted to swap the order of the two PRs and write a manual test or two for the other one to test that the codegen is doing the correct thing?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6534#issuecomment-509260234:40,test,tests,40,https://hail.is,https://github.com/hail-is/hail/pull/6534#issuecomment-509260234,3,['test'],"['test', 'tests']"
Testability,@patrick-schultz this is tested in the IRSuite tests for ArraySort/ToSet/ToDict. Do you want c++ tests for the ArraySorter class?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5534#issuecomment-472072730:25,test,tested,25,https://hail.is,https://github.com/hail-is/hail/pull/5534#issuecomment-472072730,3,['test'],"['tested', 'tests']"
Testability,"@patrick-schultz you can look at the docs by opening the docs test result link below, then navigating to artifacts then navigating to the index.html page in that folder structure.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2310:62,test,test,62,https://hail.is,https://github.com/hail-is/hail/pull/2310,1,['test'],['test']
Testability,"@patrick-schultz, sorry, I missed this in-line comment. For the sake of unifying the discussion, I'll reply in PR comment so we can continue in one thread for both discussions (which I think are intimately related). > Right, but this is on the generic key_by path, and this is no longer an obvious optimization in all cases. I think my real question is: what is the new semantics for key_by? If I want to change my key from [A, B] to [B], then probably it will shuffle and choose balanced partitions, keeping roughly the same amount of parallelism, but if the existing partitioner satisfies a somewhat obscure condition that I don't have much control over, it will instead coalesce partitions.; >; > What if we gate this behavior behind a flag on TableKeyBy, and expose a way to opt in to the optimization in python?. This behavior is only accessible when TableKeyBy isSorted=true. If you've used a hidden field (only accessible through a) my newly exposed `_key_by_assert_sorted` or b) writing IR yourself) to assert that your dataset is already in the order of the new key, I'm certain you would *not* want to shuffle. Moreover, switching from `[A, B]` to `[B]` could very well reduce your effective parallelism even after a shuffle because keys are not permitted to be split across partitions. Consider a dataset keyed by `[Locus, Alleles, Gene]` with 10k partitions. If we re-key to `[Gene]` and we only have 1000 genes annotated, we'll lose partitions. In fact, in the 1:1 partition case (the case we're optimizing here) you *must* lose parallelism because each partition contains exactly one value for the key `B`. Indeed, each partition contains only one record at all!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8864#issuecomment-637177344:1011,assert,assert,1011,https://hail.is,https://github.com/hail-is/hail/pull/8864#issuecomment-637177344,1,['assert'],['assert']
Testability,@rcownie I addressed your comments and added some comments in the code and more tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3974#issuecomment-409673277:80,test,tests,80,https://hail.is,https://github.com/hail-is/hail/pull/3974#issuecomment-409673277,1,['test'],['tests']
Testability,@shulik7 just checking in. Thanks for updating the docs! Have you had a chance to test the block size?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3266#issuecomment-386617096:82,test,test,82,https://hail.is,https://github.com/hail-is/hail/pull/3266#issuecomment-386617096,1,['test'],['test']
Testability,"@tmwong2003 OK, some progress on the CI front. Thanks for your patience. A team member needs to kick off the CI job. The assigned reviewer will be responsible for that. Right now, the tests involve some sensitive tokens which need more work to be protected, so the CI logs aren't public yet. Again, the assigned reviewer should be able to share the relevant part of the logs for failures, etc. @tpoterba I kicked off the build. Can you take another look, it looks like the comments were addressed. Finally, it looks like the PR history is a bit tangled. Is it possible to clean it up so we can a reasonable commit message? Thanks!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6262#issuecomment-501887788:184,test,tests,184,https://hail.is,https://github.com/hail-is/hail/pull/6262#issuecomment-501887788,3,"['log', 'test']","['logs', 'tests']"
Testability,"@tomwhite @jkeebler Added a parquet_genotypes flag to VDS.write:. ```; import hail; hc = hail.HailContext(); vds = hc.import_vcf('sample.vcf'); vds.count(); vds.write('sample.pq.vds', overwrite=True, parquet_genotypes=True); ```. Then in the Spark shell:. ```; scala> val df = spark.read.parquet(""sample.pq.vds/rdd.parquet""); scala> df.printSchema(); root; |-- variant: struct (nullable = true); [variant and annotation fields elided]; |-- gs: array (nullable = true); | |-- element: struct (containsNull = true); | | |-- gt: integer (nullable = true); | | |-- ad: array (nullable = true); | | | |-- element: integer (containsNull = true); | | |-- dp: integer (nullable = true); | | |-- gq: integer (nullable = true); | | |-- px: array (nullable = true); | | | |-- element: integer (containsNull = true); | | |-- fakeRef: boolean (nullable = true); | | |-- isDosage: boolean (nullable = true); ```. I added correctness tests, but no performance testing on the Hail side yet. Note, the `px` field is the `PL` in the case of sequence data and 16-bit fixed-point dosages in the case of array data (See `Gentoype` for more details.) We know if we have dosage or not globally (`VariantMetadata.isDosage`), so I can customize the resulting schema in v2. Finally, I'm seeing `containsNull = true` here, but I set it to `containsNull = false` when I constructed the schema programatically. Spark/Parquet seem to be consistently ignoring my non-missing hints. Have you seen this before? Any idea why it is happening?. From `Genotype.schema`:. ```; def schema: DataType = StructType(Array(; StructField(""gt"", IntegerType),; StructField(""ad"", ArrayType(IntegerType, containsNull = false)),; StructField(""dp"", IntegerType),; StructField(""gq"", IntegerType),; StructField(""px"", ArrayType(IntegerType, containsNull = false)),; StructField(""fakeRef"", BooleanType, nullable = false),; StructField(""isDosage"", BooleanType, nullable = false))); ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1421:919,test,tests,919,https://hail.is,https://github.com/hail-is/hail/pull/1421,2,['test'],"['testing', 'tests']"
Testability,"@tomwhite I rebased and modified the code to use the recently added `AnnotationImpex` (import/export) interface. I ran the tests again the quickstart and it looks good. If you're happy with the changes, I'll merge it in. Is there plan for arrays in Kudu? We might consider serializing as JSON, say, rather than the fixed array size.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/450#issuecomment-232474916:123,test,tests,123,https://hail.is,https://github.com/hail-is/hail/pull/450#issuecomment-232474916,1,['test'],['tests']
Testability,"@tpoterba . This would some uses a bit more difficult:. (Ex: ExportBGen); ```scala; class GenAnnotationView(rowType: PStruct) extends View {; private val rsidField = rowType.fieldByName(""rsid""); private val varidField = rowType.fieldByName(""varid""). private val rsidIdx = rsidField.index; private val varidIdx = varidField.index. private var region: Region = _; private var rsidOffset: Long = _; private var varidOffset: Long = _. private var cachedVarid: String = _; private var cachedRsid: String = _. def setRegion(region: Region, offset: Long) {; this.region = region. assert(rowType.isFieldDefined(region, offset, varidIdx)); assert(rowType.isFieldDefined(region, offset, rsidIdx)); this.rsidOffset = rowType.loadField(region, offset, rsidIdx); this.varidOffset = rowType.loadField(region, offset, varidIdx). cachedVarid = null; cachedRsid = null; }. def varid(): String = {; if (cachedVarid == null); cachedVarid = PString.loadString(region, varidOffset); cachedVarid; }. def rsid(): String = {; if (cachedRsid == null); cachedRsid = PString.loadString(region, rsidOffset); cachedRsid; }; }; ``` . I could fix this by:. ```scala; class GenAnnotationView(rowType: PStruct) extends View {; private val rsidField = rowType.fieldByName(""rsid""); private val rsidFieldType = rsidField.typ.asInstanceOf[PString]; private val varidField = rowType.fieldByName(""varid""); private val varidFieldType = varidField.typ.asInstanceOf[PString]. # ... def varid(): String = {; if (cachedVarid == null); cachedVarid = varidFieldType.loadString(region, varidOffset); cachedVarid; }. def rsid(): String = {; if (cachedRsid == null); cachedRsid = rsidFieldType.loadString(region, rsidOffset); cachedRsid; }; }; ```. However, it's a bit clunkier than the utility method, and will cost a bit more memory. What do you think about keeping the method as a static method? Would you prefer it be moved off PString to some other location?. Also, this is probably a good time to discuss whether we want region in the construct",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7754#issuecomment-567164437:573,assert,assert,573,https://hail.is,https://github.com/hail-is/hail/issues/7754#issuecomment-567164437,2,['assert'],['assert']
Testability,@tpoterba : Can you test? Use the gradle command `createDocsNoTest`.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1478:20,test,test,20,https://hail.is,https://github.com/hail-is/hail/pull/1478,1,['test'],['test']
Testability,"@tpoterba ; Hi Tim , thank you ,I tried the plink1.9, and it works. but when I use the ""importvcf"" command, there are some issues, I took the advice in ""http://www.slf4j.org/codes.html"", added one of the jars in my classpath,but the issue still appeared. (1) command and the info:; root hail $ ./build/install/hail/bin/hail importvcf src/test/resources/sample.vcf.gz -f write -o sample_4.vds; hail: info: running: importvcf src/test/resources/sample.vcf.gz -f; hail: info: running: write -o sample_4.vds; SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".; SLF4J: Defaulting to no-operation (NOP) logger implementation; SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.; hail: info: while importing:; file:/***/hail/src/test/resources/sample.vcf.gz import clean; hail: info: timing:; importvcf: 736.849ms; write: 2.463s. (2) modify the classpath; I add the ""slf4j-nop.jar"" in the CLASSPATH,as follows:; root hail $ echo $CLASSPATH; .:/usr/share/java/slf4j/slf4j-nop.jar:/opt/BioDir/jdk/jdk1.8.0_91/lib/dt.jar:/opt/BioDir/jdk/jdk1.8.0_91/lib/tools.jar",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/457#issuecomment-230429438:338,test,test,338,https://hail.is,https://github.com/hail-is/hail/issues/457#issuecomment-230429438,4,"['log', 'test']","['logger', 'test']"
Testability,"@tpoterba ; Hi, Tim; I installed plink, and set the pathas follows,but when excute ""gradle check"",still have problems,I don't know how I should do ?; ------------------(1) ; root ***\* $ plink --file test. @----------------------------------------------------------@; | PLINK! | v1.07 | 10/Aug/2009 |; |----------------------------------------------------------|; | (C) 2009 Shaun Purcell, GNU General Public License, v2 |; |----------------------------------------------------------|; | For documentation, citation & bug-report instructions: |; | http://pngu.mgh.harvard.edu/purcell/plink/ |; @----------------------------------------------------------@. Web-based version check ( --noweb to skip ); ......-----------------------------------------------------------------------------------; (2) The path; export PLINK_HOME=/***/plink. ## export PATH=$PLINK_HOME:$PATH. (3) The errors:; Gradle suite > Gradle test > org.broadinstitute.hail.methods.ExportPlinkSuite.testBiallelic FAILED; java.io.FileNotFoundException at ExportPlinkSuite.scala:17; Running test: Test method test(org.broadinstitute.hail.methods.ExportSuite); Gradle suite > Gradle test > org.broadinstitute.hail.driver.GRMSuite.test FAILED; java.io.FileNotFoundException at GRMSuite.scala:20; Running test: Test method testGenotypeStream(org.broadinstitute.hail.variant.GenotypeStreamSuite); Gradle suite > Gradle test > org.broadinstitute.hail.methods.ImputeSexSuite.testImputeSexPlinkVersion FAILED; java.io.FileNotFoundException at ImputeSexSuite.scala:17; Running test: Test method test(org.broadinstitute.hail.variant.IntervalListSuite)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/457#issuecomment-230191234:200,test,test,200,https://hail.is,https://github.com/hail-is/hail/issues/457#issuecomment-230191234,16,"['Test', 'test']","['Test', 'test', 'testBiallelic', 'testGenotypeStream', 'testImputeSexPlinkVersion']"
Testability,"@tpoterba @cseed . Has the latest 0.2 version been tested on Centos 6 yet? While we have compiled and run it locally, we are unable to get the compiled version running on our Centos 6 hadoop cluster. An upgrade to Centos 7 is not planned to the spring so it would be great to verify that this can run on Centos 6.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4733#issuecomment-453607151:51,test,tested,51,https://hail.is,https://github.com/hail-is/hail/issues/4733#issuecomment-453607151,1,['test'],['tested']
Testability,"@tpoterba @cseed . If y'all can take a look at the docs, tests, and implementation, I want to merge this. I included a log of running on `profile.vcf.bgz` (which has 2500 samples) below, total time is about 3.5 minutes. I expect it to scale roughly like `O(nSamples^2)`. For Kyle's use case this performance is acceptable. Further performance, model, and usability improvements will be separate PRs. ```; dking@wmb16-359 # hail read -i profile.vds ibd -o foo; hail: info: running: read -i profile.vds; [Stage 0:==============> (1 + 3) / 4]SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".; SLF4J: Defaulting to no-operation (NOP) logger implementation; SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.; [Stage 1:============================================> (3 + 1) / 4]hail: info: running: ibd -o foo; [Stage 8:==================================================> (197 + 4) / 214]hail: info: timing:; read: 3.523s; ibd: 3m33.8s. ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/738#issuecomment-250288185:57,test,tests,57,https://hail.is,https://github.com/hail-is/hail/pull/738#issuecomment-250288185,3,"['log', 'test']","['log', 'logger', 'tests']"
Testability,"@tpoterba @cseed @jigold I tested this commend in dataflow, but this does not work.; Script; `hail importbgen -s impv1.hail.sample chr21impv1.bgen \; variantqc \; annotatevariants expr -c 'va.infoMetrc = gs.infoScore()' \; exportvariants -c 'Chrom=v.contig,rsID = va.rsid,info=infoScore,Pos=v.start,Ref=v.ref,Alt=v.alt,MAF=va.qc.AF' -o file:///medpop/afib/schoi/projects/ukbb/Result/QC/variantQC.tsv`. Log; `hail: info: running: importbgen -s impv1.hail.sample chr21impv1.bgen; hail: info: Number of BGEN files parsed: 1; hail: info: Number of samples in BGEN files: 152249; hail: info: Number of variants across all BGEN files: 982854; [Stage 0:======================================================>(155 + 1) / 156]hail: info: Coerced almost-sorted dataset; hail: info: running: variantqc; hail: info: running: annotatevariants expr -c 'va.infoMetrc = gs.infoScore()'; hail: fatal: annotatevariants expr: 'no matching signature for 'infoScore()' on 'Aggregable[Genotype]'; <input>:1:va.infoMetrc = gs.infoScore()`. Thank you",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/685#issuecomment-251701348:27,test,tested,27,https://hail.is,https://github.com/hail-is/hail/issues/685#issuecomment-251701348,2,"['Log', 'test']","['Log', 'tested']"
Testability,"@tpoterba @jbloom22 I figured out the test problem---GRM currently filters out all variants that are all gt=0 or gt=2, which is not what the old code did. (The old code kept them in as all-zero rows). This means that the number of variants used to scale the the normalized genotypes is different, and so that's why we were seeing the different behavior against PLINK. I don't particularly want to count the old dataset pre-filter, and this is what we're doing for PCA, so I think that it's probably the correct thing to do in this case, also. Maybe I can just put a note in the docs that grm will filter out all monomorphic sites?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2697#issuecomment-357055805:38,test,test,38,https://hail.is,https://github.com/hail-is/hail/pull/2697#issuecomment-357055805,1,['test'],['test']
Testability,"@tpoterba @jbloom22 I think you're off the hook for the moment, we're waiting on Jon for tests. Once this goes in, I'll rebase/revise mine.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3872#issuecomment-410486447:89,test,tests,89,https://hail.is,https://github.com/hail-is/hail/pull/3872#issuecomment-410486447,1,['test'],['tests']
Testability,"@tpoterba Another hail script ran into this too many files open issue running pc_relate. ```; pc_relate_pop2.py; import pandas as pd; import numpy as np; from scipy.special import chdtri; from numpy import median; from math import log,isnan; import matplotlib as mpl; import matplotlib.pyplot as plt; import seaborn as sns; import sys; import hail as hl; from bokeh.io import output_notebook, show, export_png, output_file, save; from pprint import pprint. pop=sys.argv[1]; maf_cutoff=0.10. # input files; #. # pfn=""file:///restricted/projectnb/adgc/imp.topmed_adsp5k/analysis/adgc.aa.pheno.txt""; # apoe_fn=""file:///restricted/projectnb/ukbiobank/ad/apoe/ukbb_hg38_imputed_phased.tsv""; mt_fn='/project/adgc/topmed2.2020_07/pop/adgc.'+pop+'.autosome.dose.mt'; mt_ld_fn='/project/adgc/topmed2.2020_07/pop/adgc.'+pop+'.autosome.dose.ld_pruned.mt'; pfn=""file:///restricted/projectnb/adgc/topmed.r2.analysis/pheno/ADGC_ea_aa_eas_hisp_graace_pheno.qced.txt""; #; # Initialize Hail for GRCh38. # hl.init(default_reference='GRCh38',log=""results/adgc_pc_relate.autosome.log"",tmp_dir=""file:///restricted/projectnb/ukbiobank/ad/analysis/ad.v1/tmp""). hl.init(default_reference='GRCh38',log=""logs/adgc_pc_relate.autosome_""+pop+"".log""); table = (hl.import_table(pfn,impute=True, missing=['','.','NA'],types={; 'FID': hl.tstr,; 'IID': hl.tstr,; 'vcfID': hl.tstr,; 'status': hl.tfloat,; 'age': hl.tfloat,; 'sex': hl.tfloat,; 'apoe': hl.tstr,; 'cohort': hl.tstr,; 'pop':hl.tstr,; 'omit':hl.tint,; 'AD': hl.tint,; 'MCI': hl.tint,; 'e2': hl.tint,; 'e3': hl.tint,; 'e4': hl.tint,; 'e44': hl.tint,; 'e34': hl.tint,; 'e33': hl.tint,; 'e24': hl.tint,; 'e23': hl.tint,; 'e22': hl.tint,; 'ACT_aa': hl.tint,; 'ACT1_ea': hl.tint,; 'ACT2_ea': hl.tint,; 'ADC1_ea': hl.tint,; 'ADC10_aa': hl.tint,; 'ADC10_eas': hl.tint,; 'ADC10_ea': hl.tint,; 'ADC10_hisp': hl.tint,; 'ADC12_aa': hl.tint,; 'ADC2_ea': hl.tint,; 'ADC3_aa': hl.tint,; 'ADC3_ea': hl.tint,; 'ADC4_ea': hl.tint,; 'ADC5_ea': hl.tint,; 'ADC6_ea': hl.tint,; 'ADC7_ea': hl.tin",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9293#issuecomment-677718403:231,log,log,231,https://hail.is,https://github.com/hail-is/hail/issues/9293#issuecomment-677718403,1,['log'],['log']
Testability,"@tpoterba Back to you. Addressed comments. Nuked MemoryBlock, moved the array to MemoryBuffer. I think I made the safety tests in MemoryBuffer complete. I changed the array to Array[Byte]. It is working. There might still be an alignment issue (x86 supports unaligned loads but with possible performance penalty) but I'm OK leaving it to be addressed separately. I think ComplexType is good but I agree we can remove representation and just fundamentalType.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2074#issuecomment-321090734:121,test,tests,121,https://hail.is,https://github.com/hail-is/hail/pull/2074#issuecomment-321090734,1,['test'],['tests']
Testability,@tpoterba Copy suggestions expected. I'm also confused by the test failures... Different tests are failing each time. Is master green? Random tests fail for me when I run unit tests against master locally as well.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4068#issuecomment-411199374:62,test,test,62,https://hail.is,https://github.com/hail-is/hail/pull/4068#issuecomment-411199374,4,['test'],"['test', 'tests']"
Testability,"@tpoterba Do you have a specific example where this fails? I think the columns are already unkeyed before export with this line:. ```; dataset = dataset._select_all(col_exprs=fam_exprs,; col_key=[],; row_exprs=bim_exprs,; entry_exprs=entry_exprs); ```. I tried making the Python test more robust where I permute the columns first so not in alphabetical order before exporting, but couldn't replicate the error. The same is true for `export_gen`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4508#issuecomment-428976439:279,test,test,279,https://hail.is,https://github.com/hail-is/hail/issues/4508#issuecomment-428976439,1,['test'],['test']
Testability,"@tpoterba Done. A few differences from your suggestion: ; 1) No real need to check at the byte level, because modulus will be at most 3 for non-4-divisible lengths (at the byte level...and we only need to check (nBits - (m1*32)) / 8 bytes anyway), and so we would test a max of 3 bytes, and usually less than that in practice.; 2) Cotton had suggested the unstated function live on Memory...but since Memory appears to only call into unsafe, Region calls its own functions, and this code relied on Region, I put the unstaged function in Region rather than Memory. . The tests live in PContainerTest. I can move them to Region, but as we need to allocate some memory, and the easiest way to do that is through ScalaToRegionValue, which requires a ptype, and we're interested in the missing bytes at the moment, the easiest translation would have the Region test calling into PContainer, so it didn't seem to matter much. Let me know if you see it differently.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7646#issuecomment-561757839:264,test,test,264,https://hail.is,https://github.com/hail-is/hail/pull/7646#issuecomment-561757839,3,['test'],"['test', 'tests']"
Testability,"@tpoterba FYI, I added MatrixTable._same (I never thought that should be user-visible.) and set min_block_size=0 in the tests so we can load sample.vcf with more than one partition. Let me know if you have objections.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2650#issuecomment-355372066:120,test,tests,120,https://hail.is,https://github.com/hail-is/hail/pull/2650#issuecomment-355372066,1,['test'],['tests']
Testability,"@tpoterba Fixed the tests and tutorials. Ready for a look. Just a rebase of 0.2 that you already reviewed, should just need a sanity check.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2039#issuecomment-318789172:20,test,tests,20,https://hail.is,https://github.com/hail-is/hail/pull/2039#issuecomment-318789172,1,['test'],['tests']
Testability,@tpoterba How do I get the java stack trace to debug the error in the docs build (failed in the Tutorial testing)?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1430#issuecomment-282137009:105,test,testing,105,https://hail.is,https://github.com/hail-is/hail/pull/1430#issuecomment-282137009,1,['test'],['testing']
Testability,@tpoterba I added a test and an issue that described the problem. I verified the test fails on `dcf43490c` a recent `master` commit.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5250#issuecomment-460729545:20,test,test,20,https://hail.is,https://github.com/hail-is/hail/pull/5250#issuecomment-460729545,2,['test'],['test']
Testability,@tpoterba I didn't see that you fixed this already. I was going to make a PR that includes an additional test. Please add the test to your commit or I can make a separate PR. https://github.com/jigold/hail/commit/024482f2917ee887542c90219b60aa67c9e96f5d,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2630#issuecomment-353794485:105,test,test,105,https://hail.is,https://github.com/hail-is/hail/pull/2630#issuecomment-353794485,2,['test'],['test']
Testability,"@tpoterba I fiat assigned you, let me know if you want me to spin the wheel of review fortune instead. doctest_setup.py has these four lines commented out:. ````; # geneskt = methods.import_interval_list('data/genes.interval_list'); # genekt = methods.import_interval_list('data/gene.interval_list'); # ds = ds.annotate_rows(genes = ???); # ds = ds.annotate_rows(gene = genekt[ds.v.locus()]); ```. which will be used by the skat tests/docs (https://github.com/hail-is/hail/pull/2812) and maybe some burden tests/examples? They require interval joins (@patrick-schultz is working on that) and product=True (I will make a separate PR). But since things are working now, I thought I'd try to get this in first.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2829#issuecomment-361425978:429,test,tests,429,https://hail.is,https://github.com/hail-is/hail/pull/2829#issuecomment-361425978,2,['test'],['tests']
Testability,"@tpoterba I had everything working locally, but hadn't updated master. Unfortunately, there's a test failure in the new test you added for `index_globals` and I can't figure out how to fix it. I tried creating the environment separately and the `pli` field was there. Could you please take a look?. ```; _____________ [doctest] hail.matrixtable.MatrixTable.index_globals _____________; [gw0] darwin -- Python 3.6.1 //anaconda/envs/py36/bin/python; UNEXPECTED EXCEPTION: AttributeError(""StructExpression instance has no field, method, or property 'pli'\n Hint: use 'describe()' to show the names of all data fields."",); Traceback (most recent call last):. File ""//anaconda/envs/py36/lib/python3.6/doctest.py"", line 1330, in __run; compileflags, 1), test.globs). File ""<doctest hail.matrixtable.MatrixTable.index_globals[0]>"", line 1, in <module>. File ""/Users/jigold/hail/build/tmp/doctest/python/hail/expr/expressions/typed_expressions.py"", line 1161, in __getattr__; raise AttributeError(get_nice_attr_error(self, item)). AttributeError: StructExpression instance has no field, method, or property 'pli'; Hint: use 'describe()' to show the names of all data fields. /Users/jigold/hail/build/tmp/doctest/python/hail/matrixtable.py:2197: UnexpectedException; ============== 1 failed, 420 passed, 13 skipped in 79.03 seconds ===============; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3620#issuecomment-390841993:96,test,test,96,https://hail.is,https://github.com/hail-is/hail/pull/3620#issuecomment-390841993,3,['test'],['test']
Testability,@tpoterba I just realized I forgot to propagate the FUSE config through to worker jobs. Should I be and I got lucky that the singular test is just doing everything driver-side? Or is there a test we can write to ensure that worker jobs access the FASTA data?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12736#issuecomment-1478404495:134,test,test,134,https://hail.is,https://github.com/hail-is/hail/pull/12736#issuecomment-1478404495,2,['test'],['test']
Testability,@tpoterba I made it lazily check for nullness so that users can still run the Java & Scala tests without installing spark.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1119#issuecomment-264290702:91,test,tests,91,https://hail.is,https://github.com/hail-is/hail/pull/1119#issuecomment-264290702,1,['test'],['tests']
Testability,"@tpoterba I still need to add some tests for GroupedMatrixTable, but what do you think about this?",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2993:35,test,tests,35,https://hail.is,https://github.com/hail-is/hail/pull/2993,1,['test'],['tests']
Testability,@tpoterba I think I've finally resolved it. Final tests are running now on the Cray.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1081:50,test,tests,50,https://hail.is,https://github.com/hail-is/hail/pull/1081,1,['test'],['tests']
Testability,@tpoterba I think your assertion was backwards. Please take a look at my changes.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11937#issuecomment-1163818592:23,assert,assertion,23,https://hail.is,https://github.com/hail-is/hail/pull/11937#issuecomment-1163818592,1,['assert'],['assertion']
Testability,"@tpoterba I'm leaving the WIP label on this for now, because I'd like to make a careful pass over everything now that it's done, to make sure late bugfixes are handled consistently throughout. But tests are passing, and should be ready for you to start digging in.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12031#issuecomment-1211202371:197,test,tests,197,https://hail.is,https://github.com/hail-is/hail/pull/12031#issuecomment-1211202371,1,['test'],['tests']
Testability,@tpoterba Instead of using `hailtop/requirements.txt` + `hail/requirements.txt` you can use `hail/pinned-requirements.txt`. It includes all the fully-pinned requirements to install hail (it is the union of the hailtop and hail requirements) and is the version of the requirements that we test with.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12829#issuecomment-1500285929:288,test,test,288,https://hail.is,https://github.com/hail-is/hail/pull/12829#issuecomment-1500285929,1,['test'],['test']
Testability,@tpoterba Is there a way to test the pip package still works?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6437#issuecomment-504535236:28,test,test,28,https://hail.is,https://github.com/hail-is/hail/pull/6437#issuecomment-504535236,1,['test'],['test']
Testability,"@tpoterba Next step for me is to get hail build jobs into a batch dag format, teach CI to read such a format, and restructure our builds to use this. Then all this log stuff will be much more straightforward.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4823#issuecomment-440801981:164,log,log,164,https://hail.is,https://github.com/hail-is/hail/pull/4823#issuecomment-440801981,1,['log'],['log']
Testability,"@tpoterba OK, this is ready for final review. Flags are now duplicated in Python so that service backend can perform all actions without starting a JVM. I have a test that verifies the flag sets, their envvars, and the default values, are all the same. I preserved the randomness behavior. We can address that in a separate PR. The flags now use the Hail `configuration_of` machinery which checks, in order:; - an explicit value (not relevant to flags); - a deprecated environment variable (these are the current flag envvars); - an environment variable with a mechanically derived name (e.g. `HAIL_QUERY_NO_WHOLE_STAGE_CODEGEN`); - the hail configuration file (usually: ""~/.config/hail/config.ini"") under the section ""query"". FWIW, hail configuration files look like this:. ```; (base) dking@wm28c-761 hail % cat ~/.config/hail/config.ini ; [query]; backend = spark; jar_url = gs://hail-query/jars/dking/0wfcw2e6sma9/f4fb19e3d387d6efc6cf0f19b95bec59c95b793a.jar. [batch]; remote_tmpdir = gs://1-day/dktmp/; billing_project = hail. ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12423#issuecomment-1411200434:162,test,test,162,https://hail.is,https://github.com/hail-is/hail/pull/12423#issuecomment-1411200434,1,['test'],['test']
Testability,"@tpoterba OK, this is ready for review. It passes with Jon's VEP test setup:. ```; Checking 'hl.vep' replicates on 'gs://hail-common/vep/vep/vep_examplars/vep_35d9e30.mt'; 2018-08-10 22:02:28 Hail: INFO: vep: annotated 1196 variants; TEST PASSED; ```. invoked as:. ```; actual = hl.vep(expected.select(), 'gs://hail-common/vep/vep/vep85-gcloud.json'); ```. I will prepare a discuss post for when it is ready to merge.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3872#issuecomment-412219934:65,test,test,65,https://hail.is,https://github.com/hail-is/hail/pull/3872#issuecomment-412219934,2,"['TEST', 'test']","['TEST', 'test']"
Testability,@tpoterba Tests are passing,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12139#issuecomment-1335247646:10,Test,Tests,10,https://hail.is,https://github.com/hail-is/hail/pull/12139#issuecomment-1335247646,1,['Test'],['Tests']
Testability,"@tpoterba That example loses the singletons (nodes with no edges that are not passed to the maximal_independent_set method). With the old method, we worked around this by collecting all the nodes in python (both nodes with edges and singleton nodes) and then filtering to remove the nodes returned by maximal_independent_set. But collecting all the nodes in python and then passing them to filter_rows is slow. So I'm moving the logic of collecting all the nodes and filtering down to Scala.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2975#issuecomment-368108496:429,log,logic,429,https://hail.is,https://github.com/hail-is/hail/pull/2975#issuecomment-368108496,1,['log'],['logic']
Testability,"@tpoterba That test doesn't pass, even with this fix:. ```; 2021-04-26 15:57:13 Hail: INFO: Running Hail version 0.2.65-77eb6e1a1cf4; 2021-04-26 15:57:14 Hail: ERROR: error from strategy JvmCompile. java.lang.RuntimeException: unrealizable value unused asymmetrically: eos=false, ped=true. 	at is.hail.expr.ir.streams.StreamProducer$.defineUnusedLabels(EmitStream.scala:29); 	at is.hail.expr.ir.Emit.$anonfun$emitI$68(Emit.scala:1080); 	at is.hail.expr.ir.IEmitCodeGen.map(Emit.scala:304); 	at is.hail.expr.ir.Emit.emitI(Emit.scala:1065); 	at is.hail.expr.ir.Emit.emitInNewBuilder$1(Emit.scala:674); 	at is.hail.expr.ir.Emit.$anonfun$emitI$26(Emit.scala:816); 	at is.hail.expr.ir.EmitCode$.fromI(Emit.scala:391); 	at is.hail.expr.ir.Emit.$anonfun$emitI$25(Emit.scala:816); 	at scala.collection.TraversableLike.$anonfun$map$1(TraversableLike.scala:286); 	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62); 	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55); 	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49); 	at scala.collection.TraversableLike.map(TraversableLike.scala:286); 	at scala.collection.TraversableLike.map$(TraversableLike.scala:279); 	at scala.collection.AbstractTraversable.map(Traversable.scala:108); 	at is.hail.expr.ir.Emit.emitI(Emit.scala:815); 	at is.hail.expr.ir.Emit$.$anonfun$apply$4(Emit.scala:99); 	at is.hail.expr.ir.EmitCodeBuilder$.scoped(EmitCodeBuilder.scala:19); 	at is.hail.expr.ir.EmitCodeBuilder$.scopedCode(EmitCodeBuilder.scala:24); 	at is.hail.expr.ir.EmitMethodBuilder.emitWithBuilder(EmitClassBuilder.scala:1044); 	at is.hail.expr.ir.WrappedEmitMethodBuilder.emitWithBuilder(EmitClassBuilder.scala:1095); 	at is.hail.expr.ir.WrappedEmitMethodBuilder.emitWithBuilder$(EmitClassBuilder.scala:1095); 	at is.hail.expr.ir.EmitFunctionBuilder.emitWithBuilder(EmitClassBuilder.scala:1192); 	at is.hail.expr.ir.Emit$.apply(Emit.scala:97); 	at is.hail.expr.ir.Compile$.apply(Compile.scala:78); 	at",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/pull/10330#issuecomment-827119604,1,['test'],['test']
Testability,@tpoterba The only things that come to mind are shuffle issues and shared filesystem bugs. Regardless we already start a cluster and it's not hard to use that existing functionality run a non-local test.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5033#issuecomment-449491735:198,test,test,198,https://hail.is,https://github.com/hail-is/hail/pull/5033#issuecomment-449491735,1,['test'],['test']
Testability,"@tpoterba The tests now all pass. I'd appreciate your input on 32965c8 , the last commit in this sequence. It shortens the names of methods, possibly truncating them more than we already do, but I had found that something was blowing memory related to large classes/constants and once the types are much larger than a few KB, they're not really that useful. Thanks!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9371#issuecomment-684054912:14,test,tests,14,https://hail.is,https://github.com/hail-is/hail/pull/9371#issuecomment-684054912,1,['test'],['tests']
Testability,"@tpoterba This should be ready for a look. It doesn't currently support InitOp, etc., but I will follow up with that once it's finished. Let me know if you want me to push TableIR tests to this PR or to split out those nodes into a separate PR.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8602#issuecomment-622126422:180,test,tests,180,https://hail.is,https://github.com/hail-is/hail/pull/8602#issuecomment-622126422,1,['test'],['tests']
Testability,"@tpoterba When you get a chance, could you please look over the PruneDeadFields code I added and also the test suite for it? I wasn't sure what to do.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4131#issuecomment-412149140:106,test,test,106,https://hail.is,https://github.com/hail-is/hail/pull/4131#issuecomment-412149140,1,['test'],['test']
Testability,@tpoterba You have a failing test when trying to TypeCheck an IR.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11155#issuecomment-994941723:29,test,test,29,https://hail.is,https://github.com/hail-is/hail/pull/11155#issuecomment-994941723,1,['test'],['test']
Testability,"@tpoterba did a quick pass of tests. Goal for the testGetNestedElement* was to test the minimal set that would prove correctness: 1) base case with 1 element, 2) collection of elements, 3) collection of nested elements, since from this we can deduce that we can handle any nested depth (although we cannot guarantee this; the tests don't account for stopping conditions by depth)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6990#issuecomment-532417330:30,test,tests,30,https://hail.is,https://github.com/hail-is/hail/pull/6990#issuecomment-532417330,4,['test'],"['test', 'testGetNestedElement', 'tests']"
Testability,@tpoterba failing the test you wrote,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11023#issuecomment-956312369:22,test,test,22,https://hail.is,https://github.com/hail-is/hail/pull/11023#issuecomment-956312369,1,['test'],['test']
Testability,"@tpoterba fixed the config issue and changed n_partitions to ensure workers are scheduled for the FASTA reading. I tested this on a single batch worker so the jobs overlapped and flexed the shared mount code, but we don't really have a guarantee in our test setup because batch has no way to force collocation of jobs (and even so we can't exactly force that the runtimes will overlap). I suppose if there's an issue here it will bubble up as a nondeterministic failure. Not great but perhaps good enough for now?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12736#issuecomment-1499151688:115,test,tested,115,https://hail.is,https://github.com/hail-is/hail/pull/12736#issuecomment-1499151688,2,['test'],"['test', 'tested']"
Testability,@tpoterba is what I changed the current test to sufficient?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5855#issuecomment-482689656:40,test,test,40,https://hail.is,https://github.com/hail-is/hail/pull/5855#issuecomment-482689656,1,['test'],['test']
Testability,"@tpoterba last time I looked at this it was good to go, but failing on a bad test that I'm fixing with #5442. If you rebase I'll approve this.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5283#issuecomment-467525836:77,test,test,77,https://hail.is,https://github.com/hail-is/hail/pull/5283#issuecomment-467525836,1,['test'],['test']
Testability,@tpoterba please take a look at the last commit: I created `linalg/utils` and put both functions inside. I also moved the tests to `test_linalg`. Are you happy with these changes?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3873#issuecomment-402296977:122,test,tests,122,https://hail.is,https://github.com/hail-is/hail/pull/3873#issuecomment-402296977,1,['test'],['tests']
Testability,"@tpoterba ready for another look. I killed isGenericGenotype. filterGenotypes just makes filtered cells null. GenotypeStream now supports null genotypes, this is a breaking change. I bumped the file version (to 0x101) and nuked the 0.1 and other legacy tests. The merge target is now the 0.2 branch. Once the CI is correctly handling 0.1 and devel/0.2, we can merge 0.2 into the master and just work out of master.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1872#issuecomment-304126037:253,test,tests,253,https://hail.is,https://github.com/hail-is/hail/pull/1872#issuecomment-304126037,1,['test'],['tests']
Testability,"@tpoterba see changes, I made it backwards compatible by adding a parameter. I'm using the Konrad xmas present now. Let's not approve until I test against local UKBB and test in a cluster (I want to ensure it works at scale too).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5078#issuecomment-452503149:142,test,test,142,https://hail.is,https://github.com/hail-is/hail/pull/5078#issuecomment-452503149,2,['test'],['test']
Testability,"@tpoterba the changes you proposed cause tests to fail (OrderingSuite.testBinarySearchOnDict) . Also, I'm confused by the proposal, because arrayRep has no fundamental type, and while we could add one, the fundamental types in PSet and PDict were constructed differently in master (PSet's elementType is not necessarily a PStruct in master). edit: Ah, I think I misunderstood, you wanted `override val fundamentalType: PArray = arrayRep.fundamentalType` I think. I could place a lazy fundamentalType on arrayRep that used whatever elementType was defined, and completely remove fundamentalType from PSet and PDict",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7687#issuecomment-565554122:41,test,tests,41,https://hail.is,https://github.com/hail-is/hail/pull/7687#issuecomment-565554122,2,['test'],"['testBinarySearchOnDict', 'tests']"
Testability,"@tpoterba the doctests are tests, no?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6841#issuecomment-519709334:27,test,tests,27,https://hail.is,https://github.com/hail-is/hail/pull/6841#issuecomment-519709334,1,['test'],['tests']
Testability,"@tpoterba this actually fails tests, am I being overly optimistic about what extract intervals can achieve? The following are the failures and they're all about the number of partitions after a filter.; ```; FAILED test/hail/extract_intervals/test_full_key.py::test_mt_lt[locus] - assert 20 == 15; FAILED test/hail/extract_intervals/test_full_key.py::test_mt_le[locus] - assert 20 == 15; FAILED test/hail/extract_intervals/test_full_key.py::test_mt_ge[locus] - assert 20 == 6; FAILED test/hail/extract_intervals/test_full_key.py::test_mt_gt[locus] - assert 20 == 6; FAILED test/hail/extract_intervals/test_full_key.py::test_ht_lt[locus] - assert 20 == 15; FAILED test/hail/extract_intervals/test_full_key.py::test_ht_le[locus] - assert 20 == 15; FAILED test/hail/extract_intervals/test_full_key.py::test_ht_ge[locus] - assert 20 == 6; FAILED test/hail/extract_intervals/test_full_key.py::test_ht_gt[locus] - assert 20 == 6; FAILED test/hail/extract_intervals/test_full_key.py::test_mt_lt[Locus] - assert 20 == 15; FAILED test/hail/extract_intervals/test_full_key.py::test_mt_le[Locus] - assert 20 == 15; FAILED test/hail/extract_intervals/test_full_key.py::test_mt_ge[Locus] - assert 20 == 6; FAILED test/hail/extract_intervals/test_full_key.py::test_mt_gt[Locus] - assert 20 == 6; FAILED test/hail/extract_intervals/test_full_key.py::test_ht_lt[Locus] - assert 20 == 15; FAILED test/hail/extract_intervals/test_full_key.py::test_ht_le[Locus] - assert 20 == 15; FAILED test/hail/extract_intervals/test_full_key.py::test_ht_ge[Locus] - assert 20 == 6; FAILED test/hail/extract_intervals/test_full_key.py::test_ht_gt[Locus] - assert 20 == 6; ======================================================================================================================================= 16 failed, 34 passed in 19.17s =======================================================================================================================================; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12484#issuecomment-1319322867:30,test,tests,30,https://hail.is,https://github.com/hail-is/hail/pull/12484#issuecomment-1319322867,33,"['assert', 'test']","['assert', 'test', 'tests']"
Testability,@tpoterba this appears to break several tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4125#issuecomment-412540177:40,test,tests,40,https://hail.is,https://github.com/hail-is/hail/pull/4125#issuecomment-412540177,1,['test'],['tests']
Testability,@tpoterba this is now tested / ready (I'll add a doc example and a bit more documentation later). Let's discuss reconciliation,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4501#issuecomment-429380091:22,test,tested,22,https://hail.is,https://github.com/hail-is/hail/pull/4501#issuecomment-429380091,1,['test'],['tested']
Testability,@tpoterba this isn't quite ready yet--I'm still struggling with the tests failing--but if you wanted to take a quick look I think I finished the other parts. If you want me to break this out into multiple PRs let me know.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2697:68,test,tests,68,https://hail.is,https://github.com/hail-is/hail/pull/2697,1,['test'],['tests']
Testability,@tpoterba this only changed the site so there were no artifacts https://storage.googleapis.com/hail-ci-0-1/ci/3a49ac588e2ffd20f6cee2fbc795b3b1fb668f3a/81c08e2d6376d6ebdf2f9e5c990137cd3ec6fdb3/job-log,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4459#issuecomment-424869066:196,log,log,196,https://hail.is,https://github.com/hail-is/hail/pull/4459#issuecomment-424869066,1,['log'],['log']
Testability,"@tpoterba tried to run some jobs on the batch2 instance in the default namespace. He ran into two errors when trying to get log files (one while the job was running and the other when it terminated):. ```; Traceback (most recent call last):; File ""/usr/local/lib/python3.6/dist-packages/aiohttp/web_protocol.py"", line 418, in start; resp = await task; File ""/usr/local/lib/python3.6/dist-packages/aiohttp/web_app.py"", line 458, in _handle; resp = await handler(request); File ""/usr/local/lib/python3.6/dist-packages/aiohttp/web_middlewares.py"", line 119, in impl; return await handler(request); File ""/usr/local/lib/python3.6/dist-packages/aiohttp_session/__init__.py"", line 152, in factory; response = await handler(request); File ""/usr/local/lib/python3.6/dist-packages/prometheus_async/aio/_decorators.py"", line 42, in time_decorator; rv = await wrapped(*args, **kw); File ""/usr/local/lib/python3.6/dist-packages/gear/auth.py"", line 86, in wrapped; return await fun(request, userdata, *args, **kwargs); File ""/usr/local/lib/python3.6/dist-packages/batch/front_end/front_end.py"", line 383, in ui_get_job_log; 'job_log': await _get_job_log(request.app, batch_id, job_id, user); File ""/usr/local/lib/python3.6/dist-packages/batch/front_end/front_end.py"", line 112, in _get_job_log; job_log = await job._read_logs(); File ""/usr/local/lib/python3.6/dist-packages/batch/batch.py"", line 49, in _read_logs; return await self.app['driver'].read_pod_logs(self._pod_name); File ""/usr/local/lib/python3.6/dist-packages/aiohttp/web_app.py"", line 160, in __getitem__; return self._state[key]; KeyError: 'driver'; ```. ```; Traceback (most recent call last):; File ""/usr/local/lib/python3.6/dist-packages/google/cloud/storage/blob.py"", line 636, in download_to_file; self._do_download(transport, file_obj, download_url, headers, start, end); File ""/usr/local/lib/python3.6/dist-packages/google/cloud/storage/blob.py"", line 574, in _do_download; download.consume(transport); File ""/usr/local/lib/python3.6/dist-pac",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7412:124,log,log,124,https://hail.is,https://github.com/hail-is/hail/pull/7412,1,['log'],['log']
Testability,@tpoterba was it not testing before? Looks like build 37 is running now. It's gonna test everything because a file was modified in the root of the repository.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4944#issuecomment-446448431:21,test,testing,21,https://hail.is,https://github.com/hail-is/hail/pull/4944#issuecomment-446448431,2,['test'],"['test', 'testing']"
Testability,@tpoterba with the table agg counter benchmark:; ```; old aggs	9.915	9.818	0.246; new aggs	9.706	9.501	0.375; ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6727#issuecomment-521003645:37,benchmark,benchmark,37,https://hail.is,https://github.com/hail-is/hail/pull/6727#issuecomment-521003645,1,['benchmark'],['benchmark']
Testability,@tpoterba you were in here recently for performance so your eyes are appreciated. I simplified things a bit and localized almost all the parsing logic to `BgenRecord`. The contract for `advance` is that it is always called when `bfis` is pointing at the start of a record _or_ at or past the `end`. Advance will return the position to the start of a record or at or past the `end`. It returns true if there was a new record found. False otherwise. I avoided a couple allocating patterns. The rest of the diffs are copy pastes and some indentation changes.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3783:145,log,logic,145,https://hail.is,https://github.com/hail-is/hail/pull/3783,1,['log'],['logic']
Testability,"@tpoterba, these are great. We should create a service that accepts and write logs so we can write a command line `hl.send_log_to_hail_team()`. (Maybe shorter.)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4421#issuecomment-424189518:78,log,logs,78,https://hail.is,https://github.com/hail-is/hail/pull/4421#issuecomment-424189518,1,['log'],['logs']
Testability,"@tpoterba. I am sorry to replied too late! ; I was going to write to a HDFS file system. In the command:; ```; spark-submit --executor-memory 16g --executor-cores 4 --class org.broadinstitute.hail.driver.Main ******/hail-all-spark.jar --master yarn-client importvcf --log-file /user/hail/hail.log /user/hail/split_test.vcf splitmulti write -o /user/hail/split_test_1_1.vds exportvcf -o /user/hail/split_test_1_1.vcf; ```; /user/hail was the HDFS path. The spark version is :; ```; root ~ $ spark-shell; Welcome to; ____ __; / __/__ ___ _____/ /__; _\ \/ _ \/ _ `/ __/ '_/; /___/ .__/\_,_/_/ /_/\_\ version 1.6.0; /_/. Using Scala version 2.10.5 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_91); Type in expressions to have them evaluated.; Type :help for more information.; ```; Thank you very much for help!. *************************From Digital China Health***********************",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1003#issuecomment-261481148:268,log,log-file,268,https://hail.is,https://github.com/hail-is/hail/issues/1003#issuecomment-261481148,2,['log'],"['log', 'log-file']"
Testability,@tpoterba: I fixed everything except the null variant in bgen block reader. The Jenkins tests are running now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/243#issuecomment-215215199:88,test,tests,88,https://hail.is,https://github.com/hail-is/hail/pull/243#issuecomment-215215199,1,['test'],['tests']
Testability,@tpoterba: It looks like multiple tests failed on Jenkins. I should have time later this afternoon to look into this.; @cseed: It took 21 minutes for this commit to be tested. Gradle suite > Gradle test > org.broadinstitute.hail.io.LoadBgenSuite.testBgenImportRandom FAILED; org.broadinstitute.hail.FatalException at LoadBgenSuite.scala:139. Gradle suite > Gradle test > org.broadinstitute.hail.io.LoadBgenSuite.testGavinExample FAILED; org.broadinstitute.hail.FatalException at LoadBgenSuite.scala:37. Gradle suite > Gradle test > org.broadinstitute.hail.methods.RenameSamplesSuite.test FAILED; org.broadinstitute.hail.FatalException at RenameSamplesSuite.scala:59,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/291#issuecomment-210432089:34,test,tests,34,https://hail.is,https://github.com/hail-is/hail/pull/291#issuecomment-210432089,8,['test'],"['test', 'testBgenImportRandom', 'testGavinExample', 'tested', 'tests']"
Testability,"@v4 (<a href=""https://github-redirect.dependabot.com/tomplus/kubernetes_asyncio/issues/210"">#210</a>)</li>; <li><a href=""https://github.com/tomplus/kubernetes_asyncio/commit/8b54424920fd58174d7b215489d4f74c7656ed3d""><code>8b54424</code></a> [chore] update changelog</li>; <li><a href=""https://github.com/tomplus/kubernetes_asyncio/commit/50fc5f8758a3f0c0da723ae766f48345e2108ce9""><code>50fc5f8</code></a> Periodically refresh ServiceAccount tokens (<a href=""https://github-redirect.dependabot.com/tomplus/kubernetes_asyncio/issues/205"">#205</a>)</li>; <li><a href=""https://github.com/tomplus/kubernetes_asyncio/commit/af050bb8b129a6648030ec11c1b0625cfd7a29dd""><code>af050bb</code></a> chore(deps): update sphinx requirement (<a href=""https://github-redirect.dependabot.com/tomplus/kubernetes_asyncio/issues/204"">#204</a>)</li>; <li><a href=""https://github.com/tomplus/kubernetes_asyncio/commit/7e7999c19300d32c04f90cc0b56f0c5488e9d787""><code>7e7999c</code></a> [chore] pin k8s version to 1.23.6 in e2e tests. (<a href=""https://github-redirect.dependabot.com/tomplus/kubernetes_asyncio/issues/206"">#206</a>)</li>; <li><a href=""https://github.com/tomplus/kubernetes_asyncio/commit/308f153f91b7942476f2d4ddda3dc8c99933d598""><code>308f153</code></a> ci: add workflow to publish sdist/wheel to PyPI (<a href=""https://github-redirect.dependabot.com/tomplus/kubernetes_asyncio/issues/202"">#202</a>)</li>; <li><a href=""https://github.com/tomplus/kubernetes_asyncio/commit/961624063383cbcdc78a61b1d18448429a61a489""><code>9616240</code></a> [chore] update changelog</li>; <li>Additional commits viewable in <a href=""https://github.com/tomplus/kubernetes_asyncio/compare/v19.15.1...23.6.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=kubernetes-asyncio&package-manager=pip&previous-version=19.15.1&new-version=23.6.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/a",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11957:14838,test,tests,14838,https://hail.is,https://github.com/hail-is/hail/pull/11957,1,['test'],['tests']
Testability,"@vladsaveliev , we've had a bit of CI instability here which is causing tests to fail. Looks like it's merged now, I'll do a release.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11435#issuecomment-1059199901:72,test,tests,72,https://hail.is,https://github.com/hail-is/hail/pull/11435#issuecomment-1059199901,1,['test'],['tests']
Testability,A CancelledError should not be an exceptional log. A user dropped the connection.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10931:46,log,log,46,https://hail.is,https://github.com/hail-is/hail/pull/10931,1,['log'],['log']
Testability,A Little Test of Using Large Numbers Of Fields,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4484:9,Test,Test,9,https://hail.is,https://github.com/hail-is/hail/pull/4484,1,['Test'],['Test']
Testability,A billing limit test failed which is concerning. I'm going to get rid of the approval until I understand why.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12283#issuecomment-1271739403:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/12283#issuecomment-1271739403,1,['test'],['test']
Testability,"A checklist of things to make this robust:. - [x] https://github.com/Nealelab/cloudtools/issues/72; - [x] we need more permissions:; ```; ++ cluster start ci-test-4d8a9b262c3687f33359d92afdae693c819dfb09-e9e8a40bb4f0c2337e5088c26186a4da4948bed2 --version devel --spark 2.2.0 --jar build/libs/hail-all-spark.jar --zip build/distributions/hail-python.zip; ERROR: (gcloud.dataproc.clusters.create) PERMISSION_DENIED: Request had insufficient authentication scopes.; ```; - [x] be certain clusters don't stick around. I am not too concerned about the latter. We should look carefully, but it appears that, by default, processes on pods [get 30s notice via TERM](https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods) before they're killed. All `cluster` needs to do is to send google a termination request. Although the command takes forever to exit after `cluster stop`, this is because it waits for the cluster to shut down before returning. I regularly issue `cluster stop` and then force-kill the `cluster` command instead of waiting for the cluster to shutdown.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4241#issuecomment-417653146:158,test,test-,158,https://hail.is,https://github.com/hail-is/hail/pull/4241#issuecomment-417653146,1,['test'],['test-']
Testability,A commit from a few months ago removed the ability to specify a single file for testing.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9229:80,test,testing,80,https://hail.is,https://github.com/hail-is/hail/pull/9229,1,['test'],['testing']
Testability,"A couple changes I made in my branch daniel-goldstein:artefact-registry-upstream need to be merged into this branch before the tests will pass. Notably [this](https://github.com/hail-is/hail/pull/10347/commits/68d7ba1cdf6ba0b49c9d4a4714217b1eeb8182c3) (I'm going to follow up about putting that in a devbin function). We can also just merge #10347 and close this PR instead, whichever you prefer.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10107#issuecomment-824919037:127,test,tests,127,https://hail.is,https://github.com/hail-is/hail/pull/10107#issuecomment-824919037,1,['test'],['tests']
Testability,"A couple of fixes to batch pool executor to both get rid of orphaned running forever jobs and exception not retrieved errors:. - `asyncio.wait` does not retrieve results. I had to change waits to gathers with return_exceptions=True to get the behavior we want.; - A timeout error with `asyncio.wait_for` cancels the task automatically. Therefore, the previous code would never cancel the batch because the task was already ""cancelled"".; - I made `asyncio_cancel` idempotent and made sure we cancel the batch if the task has been cancelled to address the issue above. I added a check to see if the batch is running before cancelling. I'm ambivalent on whether this change is necessary.; - I added an explicit test now to make sure all batches are terminated. I think this is a good change, but the downstream consequences could be if this runs forever on a deploy (relies on an explicit timeout). Although, `test_hailtop_batch_*` has explicit timeouts. So I think we're good.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10738:708,test,test,708,https://hail.is,https://github.com/hail-is/hail/pull/10738,1,['test'],['test']
Testability,"A couple of notes:. - I moved the actual writing of the InsnNodes to the method's InsnList onto the MethodBuilder (MethodBuilder.close()) itself, per Dan's suggestion. This is a little weird because it gets called in fb.classAsBytes(), and so calling it earlier will basically add the instructions again, and we should never do this. I'm thinking of adding some logic to check that a method isn't ""closed"", or at least clearing out the instruction buffer afterwards.; - I want to implement `<init>` in terms of the method builder, but we don't have a way to deal with Unit return types well yet. Dan's made a crack at this as part of #2555, so I'm going to hold off on that until I can use that.; - We realized that the auto-adding of a return op at the end of the method was causing some extra bytecode to be added at the end of the method if you explicitly called Code._return() to return the last Code object in the method. We decided that keeping the return op in MethodBuilder and just not calling _return unless returning in the middle of a method was nicer, since Scala doesn't use return x either.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2569#issuecomment-351811149:362,log,logic,362,https://hail.is,https://github.com/hail-is/hail/pull/2569#issuecomment-351811149,1,['log'],['logic']
Testability,"A few new test failures coming from better generators, I assume. IBD one looks like a weird corner case where we differ from plink when there are only three variants. I'll look at the rest soon.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1902#issuecomment-306294818:10,test,test,10,https://hail.is,https://github.com/hail-is/hail/pull/1902#issuecomment-306294818,1,['test'],['test']
Testability,"A few observations:; - `Prop` is essentially a named `Gen[Unit]`; - The type of `Prop.forAll` is `Gen[T] -> (U -> Boolean) -> Prop`; - The first two observations suggest: `Prop.forAll` has type: `Gen[T] -> (U -> Boolean) -> Gen[Unit]`; - A `Gen[Unit]` is a bit artificial because the test framework halts execution (presumably with an exception) when a counter-example is found. I instead prefer that `Prop.forAll` has type: `Gen[T] -> (U -> Boolean) -> Gen[Boolean]`; - Now `Prop.forAll` has the same type as `Gen.flatMap[Boolean]`. It seems the difference between `forAll` and `flatMap` is that `forAll` conceptually preforms a product operation while `flatMap` performs a sampling. However, I think they are, in reality, the same operation: sampling. The implementation for `GenProp3` looks like:. ``` scala; for (i <- 0 until p.count) {; val v1 = g1(p); val v2 = g2(p); val v3 = g3(p); val r = f(v1, v2, v3); if (!r) {; println(s""! ${prefix}Falsified after $i passed tests.""); println(s""> ARG_0: $v1""); println(s""> ARG_1: $v2""); println(s""> ARG_2: $v3""); assert(r); }; }; ```. Which could be re-written as:. ``` scala; for (i <- 0 until p.count) {; (for (v1 <- g1; v2 <- g2; v3 <- g3) {; if (!r) {; println(s""! ${prefix}Falsified after $i passed tests.""); println(s""> ARG_0: $v1""); println(s""> ARG_1: $v2""); println(s""> ARG_2: $v3""); assert(r); }; })(p); }; ```. The primary difference between `flatMap` and `forAll` seems to be in error reporting. We can fix this by noting `Gen[T]` is currently a Reader monad on `Parameters`. If we add a ""forAll stack"" to `Parameters` we could implement `forAll` as:. ``` scala; def forAll[T,U](gt: Gen[T], gu: T -> Gen[U]): Gen[U] =; for (t <- gt; u <- local(pushQuantified(t), gu(t)) yield u. def pushQuantified(x: Any)(Parameters p): Paramters =; new Parameters(p.rng, p.size, p.count, (x :: p.quanitifed)); ```. We complete the Reader monad transformation by adding the `local` operation to `class Gen[T]`. ``` scala; // in class Gen; def local(modify: Par",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/400#issuecomment-238901220:284,test,test,284,https://hail.is,https://github.com/hail-is/hail/issues/400#issuecomment-238901220,2,['test'],"['test', 'tests']"
Testability,"A few things. - `app.secret_key` was never used, it was an old hold over from the flask style of doing HTTP session cookies. When I translated notebook, I accidentally made it generate a new secret key every time it started up. This PR fixes it to use the secret key in the notebook secret.; - set the default image to isia; - fix the URL redirect when you go to `notebook.hail.is` with a preexisting session. I screwed this up when I switched to aiohttp. You're not supposed to put query parameters in yourself, you're supposed to use `with_query`. What I did URL encoded the `?` so it wasn't treated as a query parameter it was treated as a file with a literal `?` in the name.; - the router (see router/router.nginx.conf.in) treats 502 and 504 as if the pod was dead which redirects to the login page and deletes the pod and service if they exist, if the user does not have a valid service name in their cookie, something went wrong with the cookie and we should kill everything and start fresh, returning 502 has this effect.; - set isia image to latest one (I build this locally, it depends on some very large files, notebook1 is going away soon otherwise we'd have to have a better solution to this).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7062:793,log,login,793,https://hail.is,https://github.com/hail-is/hail/pull/7062,1,['log'],['login']
Testability,"A few things. - app.secret_key was never used, it was an old hold over from the flask style of doing HTTP session cookies. When I translated notebook, I accidentally made it generate a new secret key every time it started up. This PR fixes it to use the secret key in the notebook secret.; set the default image to isia; - fix the URL redirect when you go to notebook.hail.is with a preexisting session. I screwed this up when I switched to aiohttp. You're not supposed to put query parameters in yourself, you're supposed to use with_query. What I did URL encoded the ? so it wasn't treated as a query parameter it was treated as a file with a literal ? in the name.; - the router (see router/router.nginx.conf.in) treats 502 and 504 as if the pod was dead which redirects to the login page and deletes the pod and service if they exist, if the user does not have a valid service name in their cookie, something went wrong with the cookie and we should kill everything and start fresh, returning 502 has this effect.; - set isia image to latest one (I build this locally, it depends on some very large files, notebook1 is going away soon otherwise we'd have to have a better solution to this).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7065:781,log,login,781,https://hail.is,https://github.com/hail-is/hail/pull/7065,1,['log'],['login']
Testability,"A forthcoming change to the hail ci system will introduce deployment. This change adds `hail-ci-deploy.sh` which replicates the [""Deploy Website""](https://ci.hail.is/admin/editRunType.html?id=buildType:HailSourceCode_HailMainline_DeployWebsite&runnerId=RUNNER_29) and [""Deploy Google Cloud""](https://ci.hail.is/admin/editRunType.html?id=buildType:HailSourceCode_HailMainline_DeployDocsAndGoogleCloudSpark220&runnerId=RUNNER_10) TeamCity jobs. My general thinking for deploy jobs from the CI is that, for the time being, we'll hardcode a mapping from GitHub repository to [Kubernetes Secret](https://kubernetes.io/docs/concepts/configuration/secret/). That's where this `/secret/ci.hail.is-web-updater-rsa-key` will come from. Moreover, the CI will always authorize a gcloud account (again with a baked in mapping from GitHub repository to GCP service account) before calling the deploy script. I did not retest the master branch here. Should we do that even though a PR is only merged to master if it passes the tests? Even after locking down merging, there's still the possibility of CI bugs. cc: @cseed",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4220:1012,test,tests,1012,https://hail.is,https://github.com/hail-is/hail/pull/4220,1,['test'],['tests']
Testability,"A front_end may request a log as long as the job state is ""Running"". Ergo, we; must have a valid FS until after the job complete HTTP request to; the driver completes successfully. Seems easiest to just use the; worker's file system which can read local as well as remote files.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11509:26,log,log,26,https://hail.is,https://github.com/hail-is/hail/pull/11509,1,['log'],['log']
Testability,"A little chaos testing revealed a database integrity issue. If jobs.state = Running, instance_id must be non-null. I incorrectly had `ON DELETE SET NULL`. Instead, make sure that the instance has been deactivated (which reschedules all jobs, setting state = Ready) before deleting the instance entry. Also, feedback on cancellation.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7443:15,test,testing,15,https://hail.is,https://github.com/hail-is/hail/pull/7443,1,['test'],['testing']
Testability,"A little more context, this is the number of batch resources per project, per user. Ci and test are an order of magnitude more than Ben W. who is two orders of magnitude above his nearest competitors.; ```; +------------------------+-----------+----------+; | billing_project | user | count(*) |; +------------------------+-----------+----------+; | benchmark | benchmark | 1595 |; | broad-mpg-gnomad | mwilson | 17 |; | ci | ci | 328597 |; | daly-neale-sczmeta | fgulamal | 292 |; | daly-neale-sczmeta | tsingh | 71 |; | hail | dking | 1610 |; | hail | johnc | 5932 |; | test | test | 126717 |; | test | test-dev | 2347 |; | tgg-rare-disease | weisburd | 10534 |; | ukb-pharma-browser-dev | msolomon | 161 |; +------------------------+-----------+----------+; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9809#issuecomment-742845557:91,test,test,91,https://hail.is,https://github.com/hail-is/hail/pull/9809#issuecomment-742845557,7,"['benchmark', 'test']","['benchmark', 'test', 'test-dev']"
Testability,"A long-standing fixme in the LocalBackend was to not rely on HadoopFS, which we use with the SparkBackend for compatibility with dataproc and hdfs urls. By default, the HadoopFS doesn't understand gs urls. Users need to install the gcs-hadoop-connector (preinstalled in dataproc) to communicate with google cloud storage. Spark handles supplying credentials to the connector. Issue #13904 is caused by failing to properly supply the gcs-hadoop-connector with credentials in the LocalBackend. In the absence of config, the connector hangs while trying to fetch a token form a non-existant metadata server. The LocalBackend was designed to be a testing ground for lowered and compiled code that would eventually be run on batch, where we use the RouterFS. I propose a pragmatic fix for #13904 that ditches the HadoopFS for all but local filesystem access in the LocalBackend instead of identifying and fixing the root cause. In doing so, I made a couple of changes to how the RouterFS is configured: In the absence of the `HAIL_CLOUD` environment variable, RouterFS can handle gs and az urls iff credentials are not supplied. If the user supplies creditials, we use `HAIL_CLOUD` to decide which cloud to route to. fixes #13904",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14407:643,test,testing,643,https://hail.is,https://github.com/hail-is/hail/pull/14407,1,['test'],['testing']
Testability,"A lot of changes here. A summary:; - This subsumes notebook, so I deleted notebook and renamed notebook2 => notebook. Apologies, this makes the diff slightly harder to read.; - Added a simple messaging framework, stored in aiohttp session cookie, set message with `set_message`, handled by web_common by `base_context` by the default layout,; - Added notebook.hail.is/workshop-admin to manage and enable/disabled workshops. Workshops stored in the database.; - Workshop will be located at notebook.hail.is/workshop (I will move to workshop.hail.is as a later step); - Meta change: don't try to track dependencies on `make check` everywhere, it isn't really needed and it wasn't correct; - Rewrote code to monitor the spin up of notebooks: store notebook state in the database. I'm happy with how it turned out, it will be simpler and more reliable.; - I refactored the auth code to support the needs of workshops. I think it is also improved: simpler. Things left to do:; - ~~Port the load test code. And load test!~~; - The notebook link shouldn't be click-able if the notebook isn't ready. (Even better: If you click, launch the notebook when it is ready.); - ~~Didn't test the error case (when the notebook isn't actually available). This probably needs some work, and should get integrated into the message framework.~~; - The workshop header is a bit spare. Maybe add a slash (/) link. What would it link to?; - ~~Move notebook.hail.is/workshop to workshop.hail.is~~; - (low-prio) Finally, when the notebook state changes, we just refresh the page. Might be nice to just dynamically update HTML. Maybe react?; - (unrelated) The message framework should get used by the other services. @tpoterba I'm assigning this to you since you're point for the workshop. @akotlar knows this code if you want to re-assign. I gave you an account in my namespace, so you should be able to see/play with this at internal.hail.is/cseed/notebook. FYI @akotlar",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7112:990,test,test,990,https://hail.is,https://github.com/hail-is/hail/pull/7112,3,['test'],['test']
Testability,A minute is an unacceptable amount of time to wait for another computer. The request should fail and; the retry logic will fire.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9865:112,log,logic,112,https://hail.is,https://github.com/hail-is/hail/pull/9865,1,['log'],['logic']
Testability,"A miracle. It finally passed. That was a real slog. I pushed a bunch of non-trivial changes, so it is probably good if you give a skeptical, fresh look. Summary of new changes:; - added PType.literalPType that infers PTypes from Scala literals, use in a few places (emit for Literal, BroadcastRegionValue constructor from annotation, etc.); - require Table global and row types to be required; - same for MatrixValue, but also cols and entries (the entries array, not individual entries, which an be missing); - Don't upcast globals in TableKeyBy and TableOrderBy; - added EType setRequired; - AbstractCodecSpecs assert row and global etypes are present at the toplevel, and setRequired(true) if they are coming from encoders written by previous versions; - rename PType.copyFromType to PType.copyFromAdddres. Modify it so it can ""downcast"": convert to a PType with greater requiredness. This is used in converting TableValues to MatrixValues to satisfy the requiredness assertions. Let me know if you have any questions.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8371#issuecomment-609070509:613,assert,assert,613,https://hail.is,https://github.com/hail-is/hail/pull/8371#issuecomment-609070509,2,['assert'],"['assert', 'assertions']"
Testability,"A missing ndarray should return a missing ndarray on any operation, e.g.:. ```; hl.null(hl.tndarray(hl.tfloat, 1)).map(lambda x: x * 2); ```. - [ ] add tests; - [ ] fix `NDArrayEmitter`",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7221:152,test,tests,152,https://hail.is,https://github.com/hail-is/hail/issues/7221,1,['test'],['tests']
Testability,"A number of people have observed the same behavior, but the prometheus team closes it as not a bug. It appears to be related to suddenly adding a very large number of metrics. This started happening when I started the scale tests, which keeps the k8s system operating with about 2000 pods, working through 30k pods over time. It's possible all the added pod information is bringing down prometheus. It appears k8s is restarting prometheus between every ten and twenty minutes. It seems likely that prometheus is spending more than ten minutes to load its database. This is surprising given that the database is a mere 31 GB:. ```; Filesystem Size Used Available Use% Mounted on; overlay 94.3G 46.4G 47.9G 49% /; tmpfs 64.0M 0 64.0M 0% /dev; tmpfs 14.7G 0 14.7G 0% /sys/fs/cgroup; /dev/sdd 49.0G 31.2G 17.8G 64% /prometheus; /dev/sda1 94.3G 46.4G 47.9G 49% /etc/prometheus; /dev/sda1 94.3G 46.4G 47.9G 49% /dev/termination-log; /dev/sda1 94.3G 46.4G 47.9G 49% /etc/resolv.conf; /dev/sda1 94.3G 46.4G 47.9G 49% /etc/hostname; /dev/sda1 94.3G 46.4G 47.9G 49% /etc/hosts; shm 64.0M 0 64.0M 0% /dev/shm; tmpfs 14.7G 12.0K 14.7G 0% /var/run/secrets/kubernetes.io/serviceaccount; tmpfs 14.7G 0 14.7G 0% /proc/acpi; tmpfs 64.0M 0 64.0M 0% /proc/kcore; tmpfs 64.0M 0 64.0M 0% /proc/keys; tmpfs 64.0M 0 64.0M 0% /proc/timer_list; tmpfs 14.7G 0 14.7G 0% /proc/scsi; tmpfs 14.7G 0 14.7G 0% /sys/firmware; ```. Which isn't much larger than it was before the scaling tests. It appears to slowly increase the amount of memory it needs:; ```; 1 0 nobody S 30.9g103.7 1 11.5 /bin/prometheus --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus --web.console.libraries=/usr/share/prometheus/console_libraries --web.console.templates=/usr/share/prometheus/consoles --web.external; ```. caping out at 31.5 GB (the disk is 31.2 GB). Now, it is presumably trying to recover. It's been up for about 7 minutes. Still unavailable:; ```; /prometheus $ wget localhost:9090/monitoring/prometheus; Connecti",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6773:224,test,tests,224,https://hail.is,https://github.com/hail-is/hail/issues/6773,2,"['log', 'test']","['log', 'tests']"
Testability,"A quick and dirty local test of different performances:; ```; 2017-09-22 18:05:57 Hail: INFO: baldingnichols: generating genotypes for 20 populations, 1000 samples, and 10000 variants...; [Stage 0:> (0 + 10) / 10]2017-09-22 18:05:58 Hail: INFO: Coerced sorted dataset; [Stage 374:==========================================> (3 + 1) / 4]. phi 27.4091310501. 2017-09-22 18:06:24 Hail: INFO: baldingnichols: generating genotypes for 20 populations, 1000 samples, and 10000 variants...; 2017-09-22 18:06:24 Hail: INFO: Coerced sorted dataset; [Stage 735:==========================================> (3 + 1) / 4]. phik2 34.3392460346. 2017-09-22 18:06:58 Hail: INFO: baldingnichols: generating genotypes for 20 populations, 1000 samples, and 10000 variants...; 2017-09-22 18:06:59 Hail: INFO: Coerced sorted dataset; [Stage 1192:==========================================> (3 + 1) / 4]. phik2k0 67.0002729893. 2017-09-22 18:08:05 Hail: INFO: baldingnichols: generating genotypes for 20 populations, 1000 samples, and 10000 variants...; 2017-09-22 18:08:06 Hail: INFO: Coerced sorted dataset; [Stage 1561:==========================================> (3 + 1) / 4]. all 102.006611109. ```. Time is in seconds. The most painful operation is clearly k0, but I bet most people will only want phi, maybe phi and k2.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2249#issuecomment-331572653:24,test,test,24,https://hail.is,https://github.com/hail-is/hail/pull/2249#issuecomment-331572653,1,['test'],['test']
Testability,"A revamp of #13203, I've made no changes to the scala code so tests passing on this should mean we maintain compatibility with currently released JARs.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13211:62,test,tests,62,https://hail.is,https://github.com/hail-is/hail/pull/13211,1,['test'],['tests']
Testability,"A revival of #12122, which was reverted because the web-based code path had an error. The last commit here fixes that bug and I tested that the web path works through a dev deploy.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12177:128,test,tested,128,https://hail.is,https://github.com/hail-is/hail/pull/12177,1,['test'],['tested']
Testability,A root file was modified so it has to test every piece. One of its batch jobs gets stuck in the queue and triggers a timeout. Hopefully this passes since there's no traffic right now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4924#issuecomment-447199915:38,test,test,38,https://hail.is,https://github.com/hail-is/hail/pull/4924#issuecomment-447199915,1,['test'],['test']
Testability,"A simple but powerful extension requested by @alexb-3 and Christina to allow for synthetic genotypes with very general and realistic-looking PCA plots with [redacted]. Alex pointed out that BaldingNichols is special case of PritchardStephensDonnelly in a degenerate sense, just as one-hot encoded `Categorical(p_1,...,p_k)` is the distributional limit of `Dirichlet(a * p_1,..., a * p_k)` as `a` goes to 0. So the substantive changes took about 10 lines. It's turned on by the `mixture` parameter which defaults to False and is marked as experimental. `True` means treat `pop_dist` as the parameters of Dirichlet rather than Categorical. @alexb-3 , it'd be great if you and Christina could experiment with it and extend the documentation accordingly. Once we have that, I'll add tests and remove ""experimental"". The plots below are already quite convincing. ```; import hail as hl; import matplotlib.pyplot as plt. mt = hl.balding_nichols_model(3, 500, 50, pop_dist=[0.01, 0.02, 0.05], fst=[.2, .3, .5]); _, pcs, _ = hl.hwe_normalized_pca(mt, 3); plt.scatter(pcs.PC1.collect(), pcs.PC2.collect()); ```. ![ex0](https://user-images.githubusercontent.com/3201642/37743475-a470a372-2d40-11e8-894c-5ed0d74f3d14.png). ```; mt = hl.balding_nichols_model(3, 500, 50, pop_dist=[0.01, 0.02, 0.05], fst=[.2, .3, .5], mixture=True); ```. ![ex1](https://user-images.githubusercontent.com/3201642/37743104-decf0da8-2d3e-11e8-8d43-3e36f194fa8e.png). ```; mt = hl.balding_nichols_model(3, 500, 50, pop_dist=[0.1, 0.2, 0.5], fst=[.2, .3, .5], mixture=True); ```. ![ex2](https://user-images.githubusercontent.com/3201642/37743108-e2e4cfe0-2d3e-11e8-9860-724de2c6611c.png)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3206:779,test,tests,779,https://hail.is,https://github.com/hail-is/hail/pull/3206,1,['test'],['tests']
Testability,"A small bit of refactoring. I've moved schema and math for both LinearRegression and LinearRegressionMultiPheno to the LinearRegressionModel class, and now fit returns LinearRegressionStats which in turn have toAnnotation functions. This provides better separation of data prep and annotation from core math, in line with structure of LogisticRegression(Model), and sets stage for next step of generalizing genotype field. I've left LinearRegression3 as is for now, full consolidation may wait until 0.2.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2007:335,Log,LogisticRegression,335,https://hail.is,https://github.com/hail-is/hail/pull/2007,1,['Log'],['LogisticRegression']
Testability,"A test failed because `hailctl config unset` now returns an error if the config variable does not exist. Let me know if you think we should maintain the current behavior -- otherwise, I slightly modified the tests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13224#issuecomment-1677602623:2,test,test,2,https://hail.is,https://github.com/hail-is/hail/pull/13224#issuecomment-1677602623,2,['test'],"['test', 'tests']"
Testability,"A test timed out with this in the logs. This is some driver job. It just hangs for 2 minutes trying to talk to Azure Blob Storage presumably? Let us get some more information:. ```; 2023-06-08 20:22:28.209 JVMEntryway: INFO: Yielding control to the QoB Job.; 2023-06-08 20:22:28.210 Tokens: INFO: tokens found for namespaces {pr-12991-default-ei61x1qrplk9}; 2023-06-08 20:22:28.210 tls: INFO: ssl config file found at /batch/240df6ec091b49d8a6062b781e6700d3/secrets/ssl-config/ssl-config.json; 2023-06-08 20:24:30.873 : INFO: RegionPool: initialized for thread 10: pool-2-thread-2; 2023-06-08 20:24:31.016 ServiceBackend$: INFO: executing: iaU8w3QX6Y6hRrB9jczJds ArrayBuffer((), is.hail.utils.SerializableHadoopConfiguration@5ad5cde6); 2023-06-08 20:24:31.153 : INFO: JSON: JObject(List((name,JString(TableFilterPartitions)), (parts,JArray(List(JInt(0)))), (keep,JBool(true)))); ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13157:2,test,test,2,https://hail.is,https://github.com/hail-is/hail/pull/13157,2,"['log', 'test']","['logs', 'test']"
Testability,"A user reviewing the code pointed out that the branches of this function were backwards. Is there any easy way to construct a test that would catch this? Is `sigmoid` worth wrapping up into like `hl.math.sigmoid` or something? It seems like the name `sigmoid` refers to many things, maybe it should be `expit` like it apparently is in R and scipy?",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10606:126,test,test,126,https://hail.is,https://github.com/hail-is/hail/pull/10606,1,['test'],['test']
Testability,"A very small PR but here's the background and context behind this change. When talking to either GCP or Azure, hail chooses credentials in the following order from highest priority to lowest priority:. 1. An explicit `credential_file` argument passed to the relevant credentials class; 2. An environment variable containing the path to the credentials (`GOOGLE_APPLICATION_CREDENTIALS` or `AZURE_APPLICATION_CREDENTIALS`) (from this you can see why the code that was here is totally redundant); 3. The latent credentials present on the machine. This might be `gcloud` or `az` credentials, or the metadata server if you're on a cloud VM. I'm trying to rid the codebase of most explicit providing of credentials file paths, for two reasons:; - Quality of life. I'm already signed into the cloud with `gcloud` and `az`. I shouldn't need to download some file and provide `AZURE_APPLICATION_CREDENTIALS` to run this test. It should just use the latent credentials.; - We are trying to phase out credentials files altogether for security reasons. These files are long-lived secrets that you really don't want to leak and are currently exposed to users in Batch jobs, so they can be easily exfiltrated. Using the latent credentials on a cloud VM (the metadata server) has the benefit of only issuing short-lived access tokens which last for hours not months, so it's basically always better to use the latent credentials when possible.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13981:912,test,test,912,https://hail.is,https://github.com/hail-is/hail/pull/13981,1,['test'],['test']
Testability,"A/pylint/issues/4252"">#4252</a></p>; </li>; <li>; <p>Add new extension <code>ConfusingConsecutiveElifChecker</code>. This optional checker emits a refactoring message (R5601 <code>confusing-consecutive-elif</code>); if if/elif statements with different indentation levels follow directly one after the other.</p>; </li>; <li>; <p>New option <code>--output=&lt;file&gt;</code> to output result to a file rather than printing to stdout.</p>; <p>Closes <a href=""https://github-redirect.dependabot.com/PyCQA/pylint/issues/1070"">#1070</a></p>; </li>; <li>; <p>Use a prescriptive message for <code>unidiomatic-typecheck</code></p>; <p>Closes <a href=""https://github-redirect.dependabot.com/PyCQA/pylint/issues/3891"">#3891</a></p>; </li>; <li>; <p>Apply <code>const-naming-style</code> to module constants annotated with; <code>typing.Final</code></p>; </li>; <li>; <p>The packaging is now done via setuptools exclusively. <code>doc</code>, <code>tests</code>, <code>man</code>, <code>elisp</code> and <code>Changelog</code> are; not packaged anymore - reducing the size of the package by 75%.</p>; </li>; <li>; <p>Debian packaging is now (officially) done in <a href=""https://salsa.debian.org/python-team/packages/pylint"">https://salsa.debian.org/python-team/packages/pylint</a>.</p>; </li>; <li>; <p>The 'doc' extra-require has been removed.</p>; </li>; <li>; <p><code>__pkginfo__</code> now only contain <code>__version__</code> (also accessible with <code>pylint.__version__</code>), other meta-information are still; accessible with <code>import importlib;metadata.metadata('pylint')</code>.</p>; </li>; <li>; <p>COPYING has been renamed to LICENSE for standardization.</p>; </li>; <li>; <p>Fix false-positive <code>used-before-assignment</code> in function returns.</p>; <p>Closes <a href=""https://github-redirect.dependabot.com/PyCQA/pylint/issues/4301"">#4301</a></p>; </li>; <li>; <p>Updated <code>astroid</code> to 2.5.3</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11461:2085,test,tests,2085,https://hail.is,https://github.com/hail-is/hail/pull/11461,2,['test'],['tests']
Testability,"AC=1	GT:AD:DP:GQ:PL	./.:.:.:.:.	0/1:1,2:3:37:77,0,37; ```. Getting this error message:; ```; INFO: [pid 11941] Worker Worker(salt=943636132, workers=1, host=seqr-loading-cluster-m, username=root, pid=11941) running SeqrVCFToMTTask(source_paths=gs://seqr-bw/merged_phased_3P5CH.split.vcf.gz, dest_path=gs://seqr-bw/merged_phased_3P5CH.mt, genome_version=38, vep_runner=VEP, reference_ht_path=gs://seqr-reference-data/GRCh38/all_reference_data/combined_reference_data_grch38.ht, clinvar_ht_path=gs://seqr-reference-data/GRCh38/clinvar/clinvar.GRCh38.2020-03-29.ht, hgmd_ht_path=None, sample_type=WGS, validate=False, dataset_type=VARIANTS, remap_path=, subset_path=, vep_config_json_path=); Initializing Spark and Hail with default parameters...; Running on Apache Spark version 2.4.5; SparkUI available at http://seqr-loading-cluster-m.c.seqr-project.internal:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.34-914bd8a10ca2; LOGGING: writing to /tmp/c7e0443c47b54e91b295e2bff7b554b9/hail-20200405-1408-0.2.34-914bd8a10ca2.log; {'_Task__hash': -3818947167740532127,; 'clinvar_ht_path': 'gs://seqr-reference-data/GRCh38/clinvar/clinvar.GRCh38.2020-03-29.ht',; 'dataset_type': 'VARIANTS',; 'decrease_running_resources': <bound method TaskStatusReporter.decrease_running_resources of <luigi.worker.TaskStatusReporter object at 0x7f0583f0f588>>,; 'dest_path': 'gs://seqr-bw/merged_phased_3P5CH.mt',; 'genome_version': '38',; 'hgmd_ht_path': None,; 'param_kwargs': {'clinvar_ht_path': 'gs://seqr-reference-data/GRCh38/clinvar/clinvar.GRCh38.2020-03-29.ht',; 'dataset_type': 'VARIANTS',; 'dest_path': 'gs://seqr-bw/merged_phased_3P5CH.mt',; 'genome_version': '38',; 'hgmd_ht_path': None,; 'reference_ht_path': 'gs://seqr-reference-data/GRCh38/all_reference_data/combined_reference_data_grch38.ht',; 'remap_path': None,; 'sample_type': 'WGS',; 'source_paths': 'gs://seqr-bw/merged_phased_3P5CH.split.vcf.gz',; 'subset_path': None,; 'validate': False,; 'vep_config_",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8469:36919,LOG,LOGGING,36919,https://hail.is,https://github.com/hail-is/hail/issues/8469,1,['LOG'],['LOGGING']
Testability,"AFAICT, this has not happened since and I'm unaware of any way to programmatically check this state. I think we've essentially resolved this issue by having GitHub be aware that we are using these tests for automated tests. It appears they flagged us as OK since then.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4533#issuecomment-433530686:197,test,tests,197,https://hail.is,https://github.com/hail-is/hail/issues/4533#issuecomment-433530686,2,['test'],['tests']
Testability,"AFAICT, you didn't edit the release.sh script; do I misunderstand what you're worried about?. Can you run the dataproc tests via dev deploy and post the batch links here? I think this should do it. ```; hailctl dev deploy --branch jigold/fix-vep-grch38-cache -s test_dataproc-38 -s test_dataproc-37; ```. If those pass then I'm confident `vep-GRCh38.sh` is correct.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14071#issuecomment-1883942042:119,test,tests,119,https://hail.is,https://github.com/hail-is/hail/pull/14071#issuecomment-1883942042,1,['test'],['tests']
Testability,"AFAIK, we do not use this file, but it is a nice historical note of how to run the Hail tests on a Dataproc cluster, if we ever wanted to do that. These days we only run a limited set of tests via test-dataproc.sh. I am also open to deleting this file since it certainly does not work now.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14272:88,test,tests,88,https://hail.is,https://github.com/hail-is/hail/pull/14272,3,['test'],"['test-dataproc', 'tests']"
Testability,"AFAIK, we don't test credential discovery. A little tricky because you want to modify the file system, which isn't kosher on a developer's laptop. Also not clear what to do about, e.g., the metadata server. You could mock it, but I've always felt pretty negative about the value of mocking. You might try adding some build.yaml steps that use docker to replicate some common environments?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11207#issuecomment-1007489641:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/11207#issuecomment-1007489641,3,"['mock', 'test']","['mock', 'mocking', 'test']"
Testability,AHH!; ```; [gw1] PASSED test/hail/methods/test_qc.py::Tests::test_vep_grch37_against_dataproc ; ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12428#issuecomment-1487367426:24,test,test,24,https://hail.is,https://github.com/hail-is/hail/pull/12428#issuecomment-1487367426,2,"['Test', 'test']","['Tests', 'test']"
Testability,"AIK, no other part of our system deletes these repositories. [1]:; ```; {; ""id"": 152339517,; ""node_id"": ""MDEwOlJlcG9zaXRvcnkxNTIzMzk1MTc="",; ""name"": ""ci-test-p4a9fxo7"",; ""full_name"": ""hail-ci-test/ci-test-p4a9fxo7"",; ""private"": false,; ""owner"": {; ""login"": ""hail-ci-test"",; ""id"": 43152710,; ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjQzMTUyNzEw"",; ""avatar_url"": ""https://avatars1.githubusercontent.com/u/43152710?v=4"",; ""gravatar_id"": """",; ""url"": ""https://api.github.com/users/hail-ci-test"",; ""html_url"": ""https://github.com/hail-ci-test"",; ""followers_url"": ""https://api.github.com/users/hail-ci-test/followers"",; ""following_url"": ""https://api.github.com/users/hail-ci-test/following{/other_user}"",; ""gists_url"": ""https://api.github.com/users/hail-ci-test/gists{/gist_id}"",; ""starred_url"": ""https://api.github.com/users/hail-ci-test/starred{/owner}{/repo}"",; ""subscriptions_url"": ""https://api.github.com/users/hail-ci-test/subscriptions"",; ""organizations_url"": ""https://api.github.com/users/hail-ci-test/orgs"",; ""repos_url"": ""https://api.github.com/users/hail-ci-test/repos"",; ""events_url"": ""https://api.github.com/users/hail-ci-test/events{/privacy}"",; ""received_events_url"": ""https://api.github.com/users/hail-ci-test/received_events"",; ""type"": ""Organization"",; ""site_admin"": false; },; ""html_url"": ""https://github.com/hail-ci-test/ci-test-p4a9fxo7"",; ""description"": null,; ""fork"": false,; ""url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7"",; ""forks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/forks"",; ""keys_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/keys{/key_id}"",; ""collaborators_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/collaborators{/collaborator}"",; ""teams_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/teams"",; ""hooks_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/hooks"",; ""issue_events_url"": ""https://api.github.com/repos/hail-ci-test/ci-test-p4a9fxo7/issues/events{/numbe",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858:1808,test,test,1808,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429024858,1,['test'],['test']
Testability,AILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[18]([Ljava.lang.String;@70bfbb33)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[18]([Ljava.lang.String;@70bfbb33) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[19]([Ljava.lang.String;@3e391ee2)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[19]([Ljava.lang.String;@3e391ee2) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testCXXCodeFunctions(is.hail.nativecode.NativeCodeSuite); DEBUG: Logging set_test_msg ... Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testCXXCodeFunctions PASSED; Running test: Test method testNativeBuild(is.hail.nativecode.NativeCodeSuite). Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testNativeBuild PASSED; Running test: Test method testNativeCallSpeed(is.hail.nativecode.NativeCodeSuite). Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testNativeCallSpeed PASSED; Running test: Test method testNativeGlobal(is.hail.nativecode.NativeCodeSuite). Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testNativeGlobal PASSED; Running test: Test method testNativePtr(is.hail.nativecode.NativeCodeSuite). Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testNativePtr PASSED; Running test: Test method testNativeUpcall(is.hail.nativecode.NativeCodeSuite); DEBUG: Logging set_test_msg ... Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testNativeUpcall PASSED; Running test: Test method testObjectArray(is.hail.nativecode.NativeCodeSuite). Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testObjectArray PASSED; Running test: Test method testShuffleAndJoinDoesntMemoryLeak(is.hail.expr.ir.TableIRSuite). Gradle suite > Gradle test > is.hail.expr.ir.T,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4718:8291,test,testNativeBuild,8291,https://hail.is,https://github.com/hail-is/hail/issues/4718,4,"['Test', 'test']","['Test', 'test', 'testNativeBuild', 'testNativeCallSpeed']"
Testability,"AIL_DEBUG_MODE which does not exist; ELASTIC_MAJOR_VERSION is set to ""7"" which is different from old value """"; printf ""7"" > env/ELASTIC_MAJOR_VERSION; make -C src/main/c prebuilt; make[1]: Entering directory `/mnt/tmp/hail/hail/src/main/c'; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux Upcalls.cpp -MG -M -MF build/Upcalls.d -MT build/Upcalls.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux testutils/unit-tests.cpp -MG -M -MF build/testutils/unit-tests.d -MT build/testutils/unit-tests.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux test.cpp -MG -M -MF build/test.d -MT build/test.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux Region_test.cpp -MG -M -MF build/Region_test.d -MT build/Region_test.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux Region.cpp -MG -M -MF build/Region.d -MT build/Region.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/alternatives/jre/include/linux PartitionIterators.cpp -MG -M -MF build/PartitionIterators.d -MT build/PartitionIterators.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/etc/alternatives/jre/include -I/etc/",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221:5342,test,test,5342,https://hail.is,https://github.com/hail-is/hail/issues/13837#issuecomment-1770502221,1,['test'],['test']
Testability,AST.scala:607 schema asserts fields.nonEmpty.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/342:21,assert,asserts,21,https://hail.is,https://github.com/hail-is/hail/issues/342,1,['assert'],['asserts']
Testability,"AWS retry logic was implemented in https://github.com/hail-is/hail/commit/ceb343b22ef9096c3b06428c10ca6886fea3581f. Jackie's #13368 merged. This should squash the rest of what we've been seeing. https://github.com/hail-is/hail/pull/13883 When that's merged, I think we call this issue complete.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13351#issuecomment-1773552129:10,log,logic,10,https://hail.is,https://github.com/hail-is/hail/issues/13351#issuecomment-1773552129,1,['log'],['logic']
Testability,"AccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244); 	at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357); 	at py4j.Gateway.invoke(Gateway.java:282); 	at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132); 	at py4j.commands.CallCommand.execute(CallCommand.java:79); 	at py4j.GatewayConnection.run(GatewayConnection.java:238); 	at java.lang.Thread.run(Thread.java:748); ```. Attempting to evaluate the array first and create and ndarray from that yields a different issue, again should work:. ```python; >>> b = hl.eval(a); >>> hl.eval(hl.nd.array(b)); FatalError: AssertionError: assertion failed. Java stack trace:; java.lang.AssertionError: assertion failed; 	at scala.Predef$.assert(Predef.scala:156); 	at is.hail.types.physical.PCanonicalArray.checkedConvertFrom(PCanonicalArray.scala:320); 	at is.hail.expr.ir.Emit$$anonfun$emitI$10$$anonfun$apply$23$$anonfun$apply$24.apply(Emit.scala:815); 	at is.hail.expr.ir.Emit$$anonfun$emitI$10$$anonfun$apply$23$$anonfun$apply$24.apply(Emit.scala:811); 	at is.hail.expr.ir.IEmitCode.map(Emit.scala:234); 	at is.hail.expr.ir.Emit$$anonfun$emitI$10$$anonfun$apply$23.apply(Emit.scala:811); 	at is.hail.expr.ir.Emit$$anonfun$emitI$10$$anonfun$apply$23.apply(Emit.scala:810); 	at is.hail.expr.ir.IEmitCode.flatMap(Emit.scala:241); 	at is.hail.expr.ir.Emit$$anonfun$emitI$10.apply(Emit.scala:810); 	at is.hail.expr.ir.Emit$$anonfun$emitI$10.apply(Emit.scala:809); 	at is.hail.expr.ir.IEmitCode.flatMap(Emit.scala:241); 	at is.hail.expr.ir.Emit.emitI(Emit.scala:809); 	at is.hail.expr.ir.Emit.is$hail$expr$ir$Emit$$emitI$3(Emit.scala:1035); 	at is.hail.expr.ir.Emit$$anonfun$emit$11.apply(Emit.scala:2385); 	at is.hail.expr.ir.Emit$$anonfun$emit$",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9128:9350,assert,assert,9350,https://hail.is,https://github.com/hail-is/hail/issues/9128,1,['assert'],['assert']
Testability,Activating the service account in the test locally screwed up my local permissions. Need to fix before merging.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5762#issuecomment-479569572:38,test,test,38,https://hail.is,https://github.com/hail-is/hail/pull/5762#issuecomment-479569572,1,['test'],['test']
Testability,Actual root cause: the new logic to handle triggering a pod when a parent finished incorrectly started a pod even if the job was cancelled,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5168#issuecomment-456621353:27,log,logic,27,https://hail.is,https://github.com/hail-is/hail/issues/5168#issuecomment-456621353,1,['log'],['logic']
Testability,"Actually I get a different error when doing a small reproducible example, but looks related:. ```; ht = hl.utils.range_table(10).annotate_globals(test='yay'); ht2 = hl.utils.range_table(10).annotate_globals(test='yay'); ht.join(ht2).show(); ```; gives:; ```; Hail version: devel-c2508f35dc41; Error summary: HailException: optimization changed type!; before: Table{global:Struct{test:String,test_1:String},key:[idx],row:Struct{idx:Int32}}; after: Table{global:Struct{test:String},key:[idx],row:Struct{idx:Int32}}; Before IR:; ----------; (TableHead 11; (TableJoin inner 1; (TableMapGlobals; (TableRange 10 8); (InsertFields; (Ref Struct{} global); (test; (Str ""yay"")))); (TableMapGlobals; (TableRange 10 8); (InsertFields; (Ref Struct{} global); (test; (Str ""yay"")))))); After IR:; ---------; (TableHead 11; (TableJoin inner 1; (TableMapGlobals; (TableRange 10 8); (InsertFields; (Ref Struct{} global); (test; (Str ""yay"")))); (TableMapGlobals; (TableRange 10 8); (InsertFields; (Ref Struct{} global))))); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4311#issuecomment-420251986:146,test,test,146,https://hail.is,https://github.com/hail-is/hail/issues/4311#issuecomment-420251986,7,['test'],['test']
Testability,"Actually also fixed in 3.0.2, so will test with that for now. Trying to get all tests passing in anticipation of Google's dataproc image update and Spark 3.1.1 release.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10054#issuecomment-788986746:38,test,test,38,https://hail.is,https://github.com/hail-is/hail/pull/10054#issuecomment-788986746,2,['test'],"['test', 'tests']"
Testability,Actually call `check` on `Prop`s. Also adds a test; verifying equality of `gtPair` and `gtPairSqrt`.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/649:46,test,test,46,https://hail.is,https://github.com/hail-is/hail/pull/649,1,['test'],['test']
Testability,Actually deleted the test altogether. It's an overlap with another test in aggregatorsuite,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3485#issuecomment-387058400:21,test,test,21,https://hail.is,https://github.com/hail-is/hail/pull/3485#issuecomment-387058400,2,['test'],['test']
Testability,"Actually, comparing singular vectors is not a robust test, even accounting for sign. Suppose `A` has two equal (or nearly equal) singular values. Then there is a 2-dimensional subspace of vectors, all of which are equally good singular vectors for that singular value. If the singular values are sufficiently separated, then comparing singular vectors should be safe, but I don't think it's necessary; the other checks should force that. I think we only need to check (all approximate comparisons),; * we got the right singular values, by comparing with numpy (unless we constructed a test matrix with known singular values); * the singular vectors are orthonormal (i.e. `Ut U = Id` and `Vt V = Id`); * the factorization `A = U Sigma Vt`. Then it follows that for each right singular vector `V_i`, `A v_i = sigma_i u_i` holds approximately, so `v_i` is a good singular vector, i.e. it really does capture `sigma_i` variance, and we checked that `sigma_i` is close to the true singular value.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9727#issuecomment-730626936:53,test,test,53,https://hail.is,https://github.com/hail-is/hail/pull/9727#issuecomment-730626936,2,['test'],['test']
Testability,"Actually, it looks like you got rid of logs entirely for the JVM entryway?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11471#issuecomment-1058066720:39,log,logs,39,https://hail.is,https://github.com/hail-is/hail/pull/11471#issuecomment-1058066720,1,['log'],['logs']
Testability,"Actually, maybe we just don't want to push to any cache at all for test deployments.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11907#issuecomment-1152522572:67,test,test,67,https://hail.is,https://github.com/hail-is/hail/pull/11907#issuecomment-1152522572,1,['test'],['test']
Testability,"Actually, the change log doesn't make sense as the version of the service isn't related to the documentation/hail pip version. Thoughts on removing the change log here and just having client interface changes?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8844#issuecomment-631683697:21,log,log,21,https://hail.is,https://github.com/hail-is/hail/pull/8844#issuecomment-631683697,2,['log'],['log']
Testability,Add 10 randomly generated VCFs as testing resource,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7552:34,test,testing,34,https://hail.is,https://github.com/hail-is/hail/pull/7552,1,['test'],['testing']
Testability,Add AccessLogger which standardizes access logging across our infrastructure and crucially prints the X-Real-IP header. Also includes a fix for the google auth issue and two missing tables from delete_auth_tables.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8102:43,log,logging,43,https://hail.is,https://github.com/hail-is/hail/pull/8102,1,['log'],['logging']
Testability,Add Cochran-Armitage test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/362:21,test,test,21,https://hail.is,https://github.com/hail-is/hail/issues/362,1,['test'],['test']
Testability,Add Cochran-Mantel-Haenszel statistical test for association,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14255:40,test,test,40,https://hail.is,https://github.com/hail-is/hail/pull/14255,1,['test'],['test']
Testability,Add NDArrays to create_all_values test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8082:34,test,test,34,https://hail.is,https://github.com/hail-is/hail/pull/8082,1,['test'],['test']
Testability,Add README logic to deploy.sh,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4856:11,log,logic,11,https://hail.is,https://github.com/hail-is/hail/pull/4856,1,['log'],['logic']
Testability,Add VDS history logging,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1105:16,log,logging,16,https://hail.is,https://github.com/hail-is/hail/issues/1105,1,['log'],['logging']
Testability,Add `create-benchmark-image` task to CI,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13936:12,benchmark,benchmark-image,12,https://hail.is,https://github.com/hail-is/hail/pull/13936,1,['benchmark'],['benchmark-image']
Testability,"Add `start_hail_benchmarks` job to ci pipline, applicable to deploy and dev scopes. After all tests have run and the new release has been published, CI will create and; start the benchmark suite. The results will be written to cloud storage with the ; prefix `hail-benchmarks-2/{scope}/{hail-pip-version}-{sha}/`, where `scope` is ; `dev` or `deploy` to separate releases from dev deploys. Since `deploy` is run every merge to `main`, the release job now writes either `1` or; `0` to `release-hail-flag`; subsequent jobs may read this file to determine if this is; a release build.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14398:94,test,tests,94,https://hail.is,https://github.com/hail-is/hail/pull/14398,3,"['benchmark', 'test']","['benchmark', 'benchmarks-', 'tests']"
Testability,Add a basic test for Table.order_by,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3225:12,test,test,12,https://hail.is,https://github.com/hail-is/hail/pull/3225,1,['test'],['test']
Testability,Add a cancel button to the /batch/batches/{batch_id} page for convenience; Manually tested cancelling behavior,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11719:84,test,tested,84,https://hail.is,https://github.com/hail-is/hail/pull/11719,1,['test'],['tested']
Testability,Add a few helpful log statements and use default CPU/mem rather than explicitly specifying it in CI. This reduces cpu from 1 to 0.1. I have to parse the cgroup requirements to ensure that the host docker daemon does not exceed the limits of the build job.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9460:18,log,log,18,https://hail.is,https://github.com/hail-is/hail/pull/9460,1,['log'],['log']
Testability,Add a few more methods to benchmark module,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4940:26,benchmark,benchmark,26,https://hail.is,https://github.com/hail-is/hail/pull/4940,1,['benchmark'],['benchmark']
Testability,Add a max-idle 40m to test clusters,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4362:22,test,test,22,https://hail.is,https://github.com/hail-is/hail/pull/4362,1,['test'],['test']
Testability,Add a sentence to strptime docs to explain useful information about rounding. Add a test with negative timestamp.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7861:84,test,test,84,https://hail.is,https://github.com/hail-is/hail/pull/7861,1,['test'],['test']
Testability,Add an array range force count benchmark,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8174:31,benchmark,benchmark,31,https://hail.is,https://github.com/hail-is/hail/pull/8174,1,['benchmark'],['benchmark']
Testability,Add assertion to NA(t) that t is optional,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3910:4,assert,assertion,4,https://hail.is,https://github.com/hail-is/hail/pull/3910,1,['assert'],['assertion']
Testability,Add beginning of benchmarking system,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4793:17,benchmark,benchmarking,17,https://hail.is,https://github.com/hail-is/hail/pull/4793,1,['benchmark'],['benchmarking']
Testability,Add benchmark methods for annotate_rows and annotate_cols with many aggs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4986:4,benchmark,benchmark,4,https://hail.is,https://github.com/hail-is/hail/pull/4986,1,['benchmark'],['benchmark']
Testability,Add chained regression to Logistic / Poisson regressions,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4682:26,Log,Logistic,26,https://hail.is,https://github.com/hail-is/hail/issues/4682,1,['Log'],['Logistic']
Testability,Add change log for release 0.2.22,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7054:11,log,log,11,https://hail.is,https://github.com/hail-is/hail/pull/7054,1,['log'],['log']
Testability,Add change log to project links section on PyPI,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10459:11,log,log,11,https://hail.is,https://github.com/hail-is/hail/pull/10459,1,['log'],['log']
Testability,Add command to test for netlib BLAS / LAPACK natives,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/698:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/issues/698,1,['test'],['test']
Testability,Add entry join test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3839:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/pull/3839,1,['test'],['test']
Testability,Add environment options to skip tests requiring plink/Rscript executables,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5123:32,test,tests,32,https://hail.is,https://github.com/hail-is/hail/pull/5123,1,['test'],['tests']
Testability,Add error message to genotype check assertions,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1744:36,assert,assertions,36,https://hail.is,https://github.com/hail-is/hail/issues/1744,1,['assert'],['assertions']
Testability,Add expr functions testing contigs/loci/intervals are valid for a RG,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3259:19,test,testing,19,https://hail.is,https://github.com/hail-is/hail/pull/3259,1,['test'],['testing']
Testability,Add files created by test run to .gitignore,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4079:21,test,test,21,https://hail.is,https://github.com/hail-is/hail/pull/4079,1,['test'],['test']
Testability,Add gradle task for integration tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1827:32,test,tests,32,https://hail.is,https://github.com/hail-is/hail/pull/1827,1,['test'],['tests']
Testability,Add log count axis to histogram,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5553:4,log,log,4,https://hail.is,https://github.com/hail-is/hail/issues/5553,1,['log'],['log']
Testability,Add logging about partitioning to OrderedRDD.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/704:4,log,logging,4,https://hail.is,https://github.com/hail-is/hail/pull/704,1,['log'],['logging']
Testability,Add more tests of globals and literals in MT world.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5961:9,test,tests,9,https://hail.is,https://github.com/hail-is/hail/pull/5961,1,['test'],['tests']
Testability,"Add new command to aggregate and export statistics over intervals with; access to a 'variants' aggregator. Takes an interval list as input,; takes an export command (see exportvariants), and an output path. Exposed `Interval` in the expr language, which has `start`, `end`,; and `contains` (all locus-based). Reworked property-based testing for annotation impexes.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/543:333,test,testing,333,https://hail.is,https://github.com/hail-is/hail/pull/543,2,['test'],['testing']
Testability,Add package tests to hail.methods,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2580:12,test,tests,12,https://hail.is,https://github.com/hail-is/hail/pull/2580,1,['test'],['tests']
Testability,Add some tests for hailctl dataproc start,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9066:9,test,tests,9,https://hail.is,https://github.com/hail-is/hail/pull/9066,1,['test'],['tests']
Testability,"Add staged code generation capabilities by lowering to and emitting; `StreamLeftIntervalJoin`.; The `EmitStream` rule for this node uses a code-generated min heap* of; intervals that contain the current key in the left stream, ordered by; right endpoint. ; The row type of the join result is the left row with an array of values**; from the right table, ordered by their associated interval's right endpoint. Note that this implementation is by no means optimised. There are a number of; opportunities that I'd like to consider in subsequent changes, including:; - Laziness in restoring the heap property on push/pop from heap.; - Not deep-copying elements of the right stream when no explicit memory; management per element is required. \* This min heap is code generated instead of using an off-the-shelf; implementation as:; - we dont yet to have a mapping from `SType` to a java class or interface to; parameterise the heap with; - not obvious how to handle region memory management in an existing solution. \** The value is a row with the key fields omitted. Additional Changes:; - Make `this` an explicit argument to `CodeBuilder.invoke()`; - Gives us control which object we're dispatching on.; - Useful for generating more self-contained classes; - Previously assumed all methods were defined in the same class.; - Removed `referenceGenomes` from `ExecuteContext`; - Delegate to `Backend`; in practice these come from the backend anyway.; - These were being populated from the backend object; - Backend is mutable meaning we can add/remove fake genomes for testing",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13617:1565,test,testing,1565,https://hail.is,https://github.com/hail-is/hail/pull/13617,1,['test'],['testing']
Testability,Add struct rewrite tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3675:19,test,tests,19,https://hail.is,https://github.com/hail-is/hail/pull/3675,1,['test'],['tests']
Testability,Add table benchmarks for repetitive annotate statements,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5267:10,benchmark,benchmarks,10,https://hail.is,https://github.com/hail-is/hail/pull/5267,1,['benchmark'],['benchmarks']
Testability,Add test decorator to agg test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3899:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/3899,2,['test'],['test']
Testability,Add test for VDS with no partitioner,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/850:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/850,1,['test'],['test']
Testability,Add test please.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1373#issuecomment-279190312:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/1373#issuecomment-279190312,1,['test'],['test']
Testability,Add test that tutorial runs to CI,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1294:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/issues/1294,1,['test'],['test']
Testability,Add testCppCodegen to testAll; Remove trailing whitespace,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4637:4,test,testCppCodegen,4,https://hail.is,https://github.com/hail-is/hail/pull/4637,2,['test'],"['testAll', 'testCppCodegen']"
Testability,Add tests for hailctl dataproc modify --update-hail-version,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9103:4,test,tests,4,https://hail.is,https://github.com/hail-is/hail/pull/9103,1,['test'],['tests']
Testability,Add tests for relational function serialization roundtrips,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5840:4,test,tests,4,https://hail.is,https://github.com/hail-is/hail/pull/5840,1,['test'],['tests']
Testability,Add the rest of the matrix IR parse tests to Python,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4144:36,test,tests,36,https://hail.is,https://github.com/hail-is/hail/pull/4144,1,['test'],['tests']
Testability,"Add volumes to `batch`, which are mounted by each pod, but are not written to or read from. Key Changes; ---; - Introduce a k8s [StorageClass](https://kubernetes.io/docs/concepts/storage/storage-classes/) and associated [ResourceQuota](https://kubernetes.io/docs/concepts/policy/resource-quotas/#storage-resource-quota) which creates and destroys disks for use by k8s pods whenever a PersistentVolumeClaim is created or delete, respectively. 1GB of disk [costs 0.04 USD per month](https://cloud.google.com/compute/pricing#disk), so I feel pretty fine with a 100GB limit for each, limiting our total possible monthly cost to 8 USD per month. - If there is more than one task (ergo there is a need for a shared disk), then we create a PVC and mount it to `/volume`. We delete this PVC if 1) all tasks complete, 2) a task fails, or 3) the job is cancelled or deleted. We may want to copy data off this volume for debugging purposes. We leave such changes for future PRs. Minor Changes; ---; - decreased the exponential backoff parameter from 2 to 1.5, which in practice ~halves test time when waiting on a volume; - print POD_NAMESPACE on startup",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5503:1075,test,test,1075,https://hail.is,https://github.com/hail-is/hail/pull/5503,1,['test'],['test']
Testability,Added Jackie's test!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2630#issuecomment-353816303:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/pull/2630#issuecomment-353816303,1,['test'],['test']
Testability,"Added MutableGenotype, MutableGenotypeStreamIterator, test",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1559:54,test,test,54,https://hail.is,https://github.com/hail-is/hail/pull/1559,1,['test'],['test']
Testability,"Added Pruner tests, and update the add-ir-checklist.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8520#issuecomment-612126069:13,test,tests,13,https://hail.is,https://github.com/hail-is/hail/pull/8520#issuecomment-612126069,1,['test'],['tests']
Testability,Added SKAT-O group test command,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/618:19,test,test,19,https://hail.is,https://github.com/hail-is/hail/pull/618,1,['test'],['test']
Testability,Added TDT; tests still needed; for preliminary code review only. Merry Christmas!,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/109:11,test,tests,11,https://hail.is,https://github.com/hail-is/hail/pull/109,1,['test'],['tests']
Testability,Added Write to test to make sure annotation types are correct.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1062:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/pull/1062,1,['test'],['test']
Testability,Added `into` functionality for the copy tool. Created test in a new file to show this functionality works.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11227:54,test,test,54,https://hail.is,https://github.com/hail-is/hail/pull/11227,1,['test'],['test']
Testability,Added a benchmark for linear_regression_rows,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8050:8,benchmark,benchmark,8,https://hail.is,https://github.com/hail-is/hail/pull/8050,1,['benchmark'],['benchmark']
Testability,"Added a new test to make sure type promotion worked correctly (multiplying int matrix by float matrix), found a requiredness issue instead.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7794:12,test,test,12,https://hail.is,https://github.com/hail-is/hail/pull/7794,1,['test'],['test']
Testability,Added a test.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7478#issuecomment-551083244:8,test,test,8,https://hail.is,https://github.com/hail-is/hail/pull/7478#issuecomment-551083244,1,['test'],['test']
Testability,Added and tested FOS.split.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/122:10,test,tested,10,https://hail.is,https://github.com/hail-is/hail/pull/122,1,['test'],['tested']
Testability,"Added another commit. This should fix the math rendering problem. Works for me on all Safari, Firefox and Chrome now. Since it was hard to reproduce, not linking to the issue, we should get the community to test it first.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/637#issuecomment-241093024:207,test,test,207,https://hail.is,https://github.com/hail-is/hail/pull/637#issuecomment-241093024,1,['test'],['test']
Testability,Added benchmarks for NDArray addition and multiplication. There are 2 for multiplication because when I add something to use BLAS instead of just naive multiply it will improve the one that is using float64s.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7724:6,benchmark,benchmarks,6,https://hail.is,https://github.com/hail-is/hail/pull/7724,1,['benchmark'],['benchmarks']
Testability,Added detailed PCA docs in Pandoc format (Markdown+LaTeX).; Rewrote PCA command and SamplePCA method accordingly.; Passes preliminary testing including handling of missingness. Tests still needed.; Variant sorting in loadings output still needed.; Further issues flagged in the doc.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/202:134,test,testing,134,https://hail.is,https://github.com/hail-is/hail/pull/202,2,"['Test', 'test']","['Tests', 'testing']"
Testability,Added docs and tests,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1645#issuecomment-292270329:15,test,tests,15,https://hail.is,https://github.com/hail-is/hail/pull/1645#issuecomment-292270329,1,['test'],['tests']
Testability,"Added exp, log, log10, pow, sqrt.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/534:11,log,log,11,https://hail.is,https://github.com/hail-is/hail/pull/534,1,['log'],['log']
Testability,Added hail-batch-worker-logs bucket with a 7-day retention policy.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8742:24,log,logs,24,https://hail.is,https://github.com/hail-is/hail/pull/8742,1,['log'],['logs']
Testability,"Added index file:. ```; $ cat /tmp/test/index.tsv; /tmp/test/part-00.tsv.bgz	{""col_idx"":0}; /tmp/test/part-01.tsv.bgz	{""col_idx"":1}; /tmp/test/part-02.tsv.bgz	{""col_idx"":2}; /tmp/test/part-03.tsv.bgz	{""col_idx"":3}; /tmp/test/part-04.tsv.bgz	{""col_idx"":4}; /tmp/test/part-05.tsv.bgz	{""col_idx"":5}; /tmp/test/part-06.tsv.bgz	{""col_idx"":6}; /tmp/test/part-07.tsv.bgz	{""col_idx"":7}; /tmp/test/part-08.tsv.bgz	{""col_idx"":8}; /tmp/test/part-09.tsv.bgz	{""col_idx"":9}; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5208#issuecomment-458989639:35,test,test,35,https://hail.is,https://github.com/hail-is/hail/pull/5208#issuecomment-458989639,11,['test'],['test']
Testability,Added lapack to benchmark docker image,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7937:16,benchmark,benchmark,16,https://hail.is,https://github.com/hail-is/hail/pull/7937,1,['benchmark'],['benchmark']
Testability,Added logging line for ci error,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6685:6,log,logging,6,https://hail.is,https://github.com/hail-is/hail/pull/6685,1,['log'],['logging']
Testability,Added logging support (logs no longer written to stderr),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1085#issuecomment-260388521:6,log,logging,6,https://hail.is,https://github.com/hail-is/hail/pull/1085#issuecomment-260388521,2,['log'],"['logging', 'logs']"
Testability,"Added methods to melt a BlockMatrix into a Table with the format: [row index, column index, entry]. Added method to make a Block Matrix from a numpy matrix in python, for testing the melt() method.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2862:171,test,testing,171,https://hail.is,https://github.com/hail-is/hail/pull/2862,1,['test'],['testing']
Testability,Added more tests and single_key option. Ready for review.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1708#issuecomment-296492792:11,test,tests,11,https://hail.is,https://github.com/hail-is/hail/pull/1708#issuecomment-296492792,1,['test'],['tests']
Testability,Added multiallelic splitting to HtsjdkRecordReader. Test in SplitSuite. Also modified return type of AbstractRecordReader.readRecord,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/76:52,Test,Test,52,https://hail.is,https://github.com/hail-is/hail/pull/76,1,['Test'],['Test']
Testability,"Added multiallelic splitting to HtsjdkRecordReader. Test in SplitSuite. Also modified return type of AbstractRecordReader.readRecord. Added ""wasSplit"" field to Variant and ""fakeRef"" field to Genotype",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/80:52,Test,Test,52,https://hail.is,https://github.com/hail-is/hail/pull/80,1,['Test'],['Test']
Testability,"Added new fields in the auth database for `azure service principal name` and `azure_credentials_secret_name`; - Made `auth` only create `GSAResource` if CLOUD == 'gcp'. ## Gear; - Added `azure-vm` to the location options for `DeployConfig`. # Assumptions:; - Mapped `{'lowmen': 'F', 'standard': 'D', 'highmem': 'E'}` for machine types in Azure. This corresponds to 2Gi/core, 4Gi/core, and 8Gi/core.; - Spot price is set to -1 for now until we figure out a better billing strategy; - We look for existing network security groups to tell if a VM has been fully cleaned up already in the garbage collection loop. # To-Do:. ## Services. - Use global config and make an `AzureConfig` (@daniel-goldstein not sure if you're already doing this) instead of optional environment variables; - Azure user disks are not implemented; There's a maximum number of disks that can be mounted per machine type with a maximum of 32 along with figuring out the API calls. We'll need a semaphore of some sort.; - No activity logs loop. Not necessary for initial development and preemption billing is not working how intended anyways (will add to the list to fix!). We also don't track vm creation success rates per zone like we do with GCP. It might be good to look for VM deletion events to remove instances that are no longer present and then do a deep delete as then we'll have some redundancy and faster response times.; - Figure out how to do a deep-delete as much as possible for VMs when using the create VM REST API. This is essential for cleaning up resources for idled out workers when the driver is down for a long period of time.; - User billing based on resources used based on the `AzureInstanceConfig`; - Spot billing strategy; - Check network IP settings in the worker; - Add garbage collection CLI commands to build.yaml to clean up VMs, disks, nics, public ip addresses, and network security groups based on a tag; - Fix batch tests to be cloud agnostic. ## Infrastructure. - Create a shared SSH public k",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10970:1717,log,logs,1717,https://hail.is,https://github.com/hail-is/hail/pull/10970,1,['log'],['logs']
Testability,Added new test that checks summing mix of regular and transposed data to make sure that future changes respect striding.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9209#issuecomment-669232370:10,test,test,10,https://hail.is,https://github.com/hail-is/hail/pull/9209#issuecomment-669232370,1,['test'],['test']
Testability,Added python tests. They run from gradle with a dependency on the task test.; Fixed numerous python bugs. Added missing filter_genotypes.; Removed famsummary command.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1090:13,test,tests,13,https://hail.is,https://github.com/hail-is/hail/pull/1090,2,['test'],"['test', 'tests']"
Testability,Added requested test. Back to you @danking,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1046#issuecomment-258220342:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/1046#issuecomment-258220342,1,['test'],['test']
Testability,"Added server blocks. @cseed. Added the proxy forwarding headers for consistency (and may provide more information in logs), although they're not strictly necessary. Prometheus doesn't seem to be working, but behavior is identical without move to server blocks (namely it redirects to a default Nginx page on internal.hail.is ; same behavior with and without this change). Behavior of redirecting to ""service"".internal if missing slash still occurs; this seems to occur without hitting the namespace monitoring router (meaning `k logs router-868b794f58-r49hr -n monitoring` shows nothing). So this appears to be happening upstream. Had surprising amount of trouble /monitoring from the routes, even with corresponding changes in monitoring.yaml, and trying to rewrite in a /monitoring block (meaning tried location / and location /monitoring/*, both with and without rewrite rule `rewrite /monitoring/grafana/ /` or similar with a capture group). Something I don't quite understand, insight appreciated because I would prefer not to spend more time experimenting with this. Also, would it be reaonsalbe to not propagate the /namespace/service to internal routes (so rewrite before sending)? It seems like internal server blocks receive the full url, which means that they would need to handle those subpaths when used internally, but not when used normally (for instance I'm not sure how notebook deployed to a namespace gets away with not having a special path for `akotlar/`. Does the last commit address the goal?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7015#issuecomment-540393516:117,log,logs,117,https://hail.is,https://github.com/hail-is/hail/pull/7015#issuecomment-540393516,2,['log'],['logs']
Testability,"Added simple UI for billing projects, create, add and remove users. Hand-tested with dev deploy.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7713:73,test,tested,73,https://hail.is,https://github.com/hail-is/hail/pull/7713,1,['test'],['tested']
Testability,"Added stats.LeveneHaldane and tests. Created doc folder, LeveneHaldane.tex, and bibfile.bib; Added docs/.gitignore. Added HWEPerVariant, test/resources/HWE_test.vcf and tests. Added Utils.time, now replaced by Utils.printTime. Used Option in ""r*"" (ratio) methods for missing values, now abstracted with Utils.divOption and Utils.someIf. Added rounding-error-tolerant comparison operators Utils.D_\* and used where appropriate. replaced closeEnough with D_==",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/73:30,test,tests,30,https://hail.is,https://github.com/hail-is/hail/pull/73,3,['test'],"['test', 'tests']"
Testability,Added support for skipping Scala scheduler suite tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6768:49,test,tests,49,https://hail.is,https://github.com/hail-is/hail/pull/6768,1,['test'],['tests']
Testability,Added symmetric support for Y chromosome in MendelErrors. Addresses Issue #91 . All tests pass locally.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/137:84,test,tests,84,https://hail.is,https://github.com/hail-is/hail/pull/137,1,['test'],['tests']
Testability,"Added test + docs page, addressed all comments. Back to you.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1696#issuecomment-297134678:6,test,test,6,https://hail.is,https://github.com/hail-is/hail/pull/1696#issuecomment-297134678,1,['test'],['test']
Testability,Added test for `pAB == pAB() == pAB(.5)`; Added docs to explain the difference,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/141:6,test,test,6,https://hail.is,https://github.com/hail-is/hail/pull/141,1,['test'],['test']
Testability,"Added test for annotation.isMissing, fixed code in AST",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/215:6,test,test,6,https://hail.is,https://github.com/hail-is/hail/pull/215,1,['test'],['test']
Testability,Added test to invoke PCRelate on BN sample data (runs in ~3s).,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2594:6,test,test,6,https://hail.is,https://github.com/hail-is/hail/pull/2594,1,['test'],['test']
Testability,Added test to make sure python is calling the JVM correctly.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2595:6,test,test,6,https://hail.is,https://github.com/hail-is/hail/pull/2595,1,['test'],['test']
Testability,"Added test, ready for review.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1720#issuecomment-297238390:6,test,test,6,https://hail.is,https://github.com/hail-is/hail/pull/1720#issuecomment-297238390,1,['test'],['test']
Testability,Added testing build steps as well.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5962#issuecomment-490193339:6,test,testing,6,https://hail.is,https://github.com/hail-is/hail/pull/5962#issuecomment-490193339,1,['test'],['testing']
Testability,Added tests for filtering based on files,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/144:6,test,tests,6,https://hail.is,https://github.com/hail-is/hail/pull/144,1,['test'],['tests']
Testability,"Added the non-blocked buffer spec to `baseBufferSpecs` which now all get tested in `NativeDecoderSuite` and `NativeEncoderSuite`. `NativeEncoderSuite` used to assert that the compressed bytes produced by the Scala and C++ buffer specs were the same, which is not necessarily true. Changed it so it uses Scala buffer spec to decompress both the Scala compressed and C++ compressed outputs to assert they decompress to the same thing. The decoder suite already asserts that something encoded through Scala is decoded correctly in C++",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5890#issuecomment-484914074:73,test,tested,73,https://hail.is,https://github.com/hail-is/hail/pull/5890#issuecomment-484914074,4,"['assert', 'test']","['assert', 'asserts', 'tested']"
Testability,"Added the python test, it returns bogus results in `main` so it's a good one.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10695#issuecomment-886712569:17,test,test,17,https://hail.is,https://github.com/hail-is/hail/pull/10695#issuecomment-886712569,1,['test'],['test']
Testability,Added the straightforward implementations to get them in the IRFunctionRegistry. They are not optimal from the computational complexity perspective (e.g. union is n log m instead of n + m). I will improve them in a separate PR.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3552:165,log,log,165,https://hail.is,https://github.com/hail-is/hail/pull/3552,1,['log'],['log']
Testability,Added the tests you suggested,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8377#issuecomment-605284219:10,test,tests,10,https://hail.is,https://github.com/hail-is/hail/pull/8377#issuecomment-605284219,1,['test'],['tests']
Testability,"Added to Python BlockMatrix:; - `fill` w/ test; - `sum` w/ test (useful for LD scores among other things). Added to Scala BlockMatrix:; - `fill`; - `apply` to factor out common motif in `fromBreezeMatrix`, `random`, `fill`; - `sum`, `rowSum`, `colSum` via `reduce`, `rowReduce`, `colReduce`. Added `maybeBlockRows` and `maybeBlockCols` to GridPartitioner, and changed `maybeSparse` to the more descriptive `maybeBlocks` to match. Regarding the implementations of `sum`, `rowSum`, `colSum`: I tested Breeze op `sum(a(::, *))` against Breeze matrix multiplication by a vector of ones at the block level, and found the latter to be four times faster on laptop (17s vs 4.5s for 1000 iterations). ```; @Test ; def sum() {; val a = BDM.rand[Double](4096, 4096); printTime {; var i = 0; while (i < 1000) {; //val c = breeze.linalg.sum(a(*, ::)); val b = BDV.ones[Double](4096); val c = a * b; i += 1; }; }; }; ```. However, I didn't implement `sum` over (say) rows using distributed multiply because the parallelism would be reduced from the number of blocks to the number of blockCols. Two other small changes:; - added a suggestion in the `from_entry_expr` doc based on seeing a user make this mistake.; - changed `random` to multiply the partition index by a large prime so that consecutive seeds don't produce the same blocks shifted over.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3672:42,test,test,42,https://hail.is,https://github.com/hail-is/hail/pull/3672,4,"['Test', 'test']","['Test', 'test', 'tested']"
Testability,Added to daniels tested omnibus,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11554#issuecomment-1063202778:17,test,tested,17,https://hail.is,https://github.com/hail-is/hail/pull/11554#issuecomment-1063202778,1,['test'],['tested']
Testability,Added to tested omnibus,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11526#issuecomment-1061064639:9,test,tested,9,https://hail.is,https://github.com/hail-is/hail/pull/11526#issuecomment-1061064639,1,['test'],['tested']
Testability,"Added tutorial for make_children, make_parents, and the various relatedness tests",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12097:76,test,tests,76,https://hail.is,https://github.com/hail-is/hail/pull/12097,1,['test'],['tests']
Testability,"Added typecheck to SkatSuite as regression test. keysType was being passed instead of keyType, which resulted for example in Array[String] instead of String as the type of key when the variantKeys was an Array[String] annotation and singleKey was False.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2220:43,test,test,43,https://hail.is,https://github.com/hail-is/hail/pull/2220,1,['test'],['test']
Testability,Added vdsFromMatrix to TestUtils,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/967:23,Test,TestUtils,23,https://hail.is,https://github.com/hail-is/hail/pull/967,1,['Test'],['TestUtils']
Testability,Added:; - NDArray class with toJSON; - NDArray to SafeRow.read to go from RV to Annotation; - NDArrayto RegionValueBuilder.addAnnotation to go from Annotation to RV; - NDArray to JSONAnnotationImpex. Next steps:; ndarray 4: genValue on TNDArray in Scala with tests in TypeSuite; ndarray 5: JSON importers/exporters for NumPy NDArrays; ndarray 6: MakeNDArray IR; ndarray 7: Add MakeNDArray to cxx.emit,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5117:259,test,tests,259,https://hail.is,https://github.com/hail-is/hail/pull/5117,1,['test'],['tests']
Testability,"Adding ""WIP"" tag since I had a test failure from `make test-dataproc`. Seems like I have a mix of reference genomes somewhere.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8268#issuecomment-596564071:31,test,test,31,https://hail.is,https://github.com/hail-is/hail/pull/8268#issuecomment-596564071,2,['test'],"['test', 'test-dataproc']"
Testability,Adding VEP splitting logic into split_multi_hts,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4218:21,log,logic,21,https://hail.is,https://github.com/hail-is/hail/pull/4218,1,['log'],['logic']
Testability,"Adding a new compiler pass (lowering MatrixIR to TableIR) exposed a problem in Simplify. The logic for preventing some simplifications from triggering if they would introduce non-determinism was broken, and fixing it required a pretty complete overhaul. Fortunately, I think it's now a lot simpler. Besides the rewrite of the high level Simplify architecture, I also:; * Changed `testRepartitioningSimplifyRules` to something that failed in the old version.; * Changed the `copy` signature on the IR hierarchy to be more precise (to avoid unnecessary coercions).; * Grouped the Simplify rules into IR, MatrixIR, and TableIR. After the reorganization, a couple of rule redundancies became evident.; * A couple of vals in PruneSuite required running the compiler. When I had a bug in Simplify, this was causing the test runner to fail before any tests were run, on class initialization of PruneSuite, which gives very little help in diagnosing the issue. I made them lazy vals to prevent this in the future.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4564:93,log,logic,93,https://hail.is,https://github.com/hail-is/hail/pull/4564,4,"['log', 'test']","['logic', 'test', 'testRepartitioningSimplifyRules', 'tests']"
Testability,"Adding a simple reproducible example. ```python; ht = hl.Table.from_pandas(pd.DataFrame({""variant"":['chr1:123:C:T']})); ht = ht.key_by(**hl.parse_variant(ht.variant)); pd_table = ht.to_pandas(); pd_table.to_pickle(os.path.join(bucket, 'test.pkl')); ```. The two examples below do not cause the same error. ; ```python; ht = hl.Table.from_pandas(pd.DataFrame({""foo"":['bar']})); ht = hl.Table.from_pandas(pd.DataFrame({""foo"":[1, 2, 3]})); ```. Hope this helps.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14004#issuecomment-1808416604:236,test,test,236,https://hail.is,https://github.com/hail-is/hail/issues/14004#issuecomment-1808416604,1,['test'],['test']
Testability,Adding the WIP label to prevent merging until Tim has given the ok on benchmarks,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8292#issuecomment-597808897:70,benchmark,benchmarks,70,https://hail.is,https://github.com/hail-is/hail/pull/8292#issuecomment-597808897,1,['benchmark'],['benchmarks']
Testability,Addressed all comments except for the addition of property-based tests. Will loop back around when adding those to all my test suites soon if that's OK.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/80#issuecomment-161827387:65,test,tests,65,https://hail.is,https://github.com/hail-is/hail/pull/80#issuecomment-161827387,2,['test'],"['test', 'tests']"
Testability,"Addressed both comments: testRegionValue now tests all types, not just structs, and exercises the visitor (by calling pretty).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2299#issuecomment-336567541:25,test,testRegionValue,25,https://hail.is,https://github.com/hail-is/hail/pull/2299#issuecomment-336567541,2,['test'],"['testRegionValue', 'tests']"
Testability,"Addressed comments, ready for another look. Change to `Gen.partition` revealed a few other bugs in master, which don't have elegant solutions:; 1. orderedPartitioner either needs an `empty` boolean flag, or a special `EmptyOrderedPartitioner` where `partitioner.nPartitions` is 0. Otherwise, rdd.fullOuterJoin(other) crashes because it looks at partitioner nPartitions instead of rdd nPartitions. This fix involves more logic in VSM.read as well.; 2. OrderedLeftJoinRDD needs to cache partitions and pass them to OrderedRDDIterator. There is no guarantee that `getPartitions` can be called on an executor, and this was crashing in particular for ParallelCollectionRDDs.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/717#issuecomment-244904495:420,log,logic,420,https://hail.is,https://github.com/hail-is/hail/pull/717#issuecomment-244904495,1,['log'],['logic']
Testability,Addressed comments. ; - Refactored to a separate module and added module-level tests. ; - Cleaned up TypeChecker interface to call recursively down,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1727#issuecomment-299293790:79,test,tests,79,https://hail.is,https://github.com/hail-is/hail/pull/1727#issuecomment-299293790,1,['test'],['tests']
Testability,Addressed comments. My question about it being sufficiently tested still stands.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11151#issuecomment-1018000957:60,test,tested,60,https://hail.is,https://github.com/hail-is/hail/pull/11151#issuecomment-1018000957,1,['test'],['tested']
Testability,Addressed comments. That test was messed up. Added typecheck and fixed everything up so it passes.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2294#issuecomment-336480884:25,test,test,25,https://hail.is,https://github.com/hail-is/hail/pull/2294#issuecomment-336480884,1,['test'],['test']
Testability,"Addressed, want me to benchmark again?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10766#issuecomment-929489998:22,benchmark,benchmark,22,https://hail.is,https://github.com/hail-is/hail/pull/10766#issuecomment-929489998,1,['benchmark'],['benchmark']
Testability,Addresses #6701 . This PR:. - Converts CI output logs to same format as batch by using the standard `hailtop.gear.configure_logging`. ; - Removes separate sending of ci logs to a local `ci.log` file on the ci pod. (Was anyone using this? I assume not).,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6713:49,log,logs,49,https://hail.is,https://github.com/hail-is/hail/pull/6713,3,['log'],"['log', 'logs']"
Testability,"Addresses this error:; ```; ERROR | 2019-06-17 09:41:59,615 | web_protocol.py | log_exception:355 | Error handling request; Traceback (most recent call last):; File ""/usr/local/lib/python3.6/dist-packages/aiohttp/web_protocol.py"", line 418, in start; resp = await task; File ""/usr/local/lib/python3.6/dist-packages/aiohttp/web_app.py"", line 458, in _handle; resp = await handler(request); File ""/usr/local/lib/python3.6/dist-packages/aiohttp/web_urldispatcher.py"", line 157, in handler_wrapper; result = await result; File ""/usr/local/lib/python3.6/dist-packages/batch/server/server.py"", line 849, in create_batch; await create_job(batch.id, userdata, job_params); File ""/usr/local/lib/python3.6/dist-packages/batch/server/server.py"", line 628, in create_job; pvc_size=pvc_size); File ""/usr/local/lib/python3.6/dist-packages/batch/server/server.py"", line 398, in create_job; await job._create_pod(); File ""/usr/local/lib/python3.6/dist-packages/batch/server/server.py"", line 190, in _create_pod; self._pvc_name = await self._create_pvc(); File ""/usr/local/lib/python3.6/dist-packages/batch/server/server.py"", line 165, in _create_pvc; await self.mark_complete(None, failed=True, failure_reason=str(err)); File ""/usr/local/lib/python3.6/dist-packages/batch/server/server.py"", line 526, in mark_complete; await self._mark_job_task_complete(task_name, pod_log, exit_code); File ""/usr/local/lib/python3.6/dist-packages/batch/server/server.py"", line 288, in _mark_job_task_complete; assert self._pod_name is not None; AssertionError; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6367:1478,assert,assert,1478,https://hail.is,https://github.com/hail-is/hail/pull/6367,2,"['Assert', 'assert']","['AssertionError', 'assert']"
Testability,Adds LMM constructors `from_mixed_effects` and `from_kinship` and improves lmm math documentation and testing.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4056:102,test,testing,102,https://hail.is,https://github.com/hail-is/hail/pull/4056,1,['test'],['testing']
Testability,"Adds `copy_spark_log_on_error` init configuration option. When true, driver logs are copied to the remote tmpdir if an error occurs. This is useful in support cases where users cannot copy logs off the dataproc server themselves as it has already shut down.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14447:76,log,logs,76,https://hail.is,https://github.com/hail-is/hail/pull/14447,2,['log'],['logs']
Testability,"Adds `writekudu` and `readkudu` commands for storing a VariantSampleMatrix in Kudu. Note that only biallelic variants can be stored at the moment, so `splitmulti` should be used. Sample run. ```; SPARK_MASTER=yarn-client; # chr1 in 6m52.6s; spark-submit \; --master $SPARK_MASTER \; --driver-memory 3G \; --num-executors 14 \; --executor-cores 1 \; --executor-memory 3G \; --conf spark.io.compression.codec=lzf \; --conf spark.yarn.executor.memoryOverhead=600 \; build/libs/hail-all-spark.jar \; importvcf -f vcf-1000genomes/ALL.chr1.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf splitmulti writekudu -o file:///home/tom/sample.vds -t variants -m bottou06.sjc.cloudera.com --drop; # read (2 min or so); spark-submit \; --master $SPARK_MASTER \; --driver-memory 3G \; --num-executors 14 \; --executor-cores 1 \; --executor-memory 3G \; --conf spark.io.compression.codec=lzf \; --conf spark.yarn.executor.memoryOverhead=600 \; build/libs/hail-all-spark.jar \; readkudu -i file:///home/tom/sample.vds -t variants -m bottou06.sjc.cloudera.com count ; ```. To install Kudu on a cluster, see http://www.cloudera.com/documentation/betas/kudu/0-5-0/topics/kudu_installation.html#concept_u4s_tbq_dt_unique_1, and follow the instructions for installing from parcels. The CDS file is available at http://archive.cloudera.com/beta/kudu/csd/. You can also run Kudu locally using a VM, see http://getkudu.io/docs/quickstart.html. This is suitable for running unit tests.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/242:1466,test,tests,1466,https://hail.is,https://github.com/hail-is/hail/pull/242,1,['test'],['tests']
Testability,"Adds a MatrixTable for all variant-gene cis-eQTL associations tested in each tissue (including non-significant associations) for GTEx v8. MatrixTable has columns keyed by tissue, and contain all available tissues from GTEx V8. The `GTEx_MatrixTables` notebook documents how the MatrixTable were generated. . The eQTL MatrixTable is ~220 GiB.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10535:62,test,tested,62,https://hail.is,https://github.com/hail-is/hail/pull/10535,1,['test'],['tested']
Testability,Adds a job token to track jobs submitted by a client. I think this *should* fix the hanging issue we've been seeing on the ci with the distributed backend test.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6418:155,test,test,155,https://hail.is,https://github.com/hail-is/hail/pull/6418,1,['test'],['test']
Testability,"Adds functionality to allow `hardy_weinberg_test` to return p-value from one-sided exact test of excess heterozygosity by passing `one_sided=True`. By default, `one_sided=False` and the p-value returned is from the two-sided exact test of HWE.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10989:89,test,test,89,https://hail.is,https://github.com/hail-is/hail/pull/10989,2,['test'],['test']
Testability,Adds log option to `plot.histogram2d`; Also adds `joint_plot` to plot init,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5980:5,log,log,5,https://hail.is,https://github.com/hail-is/hail/pull/5980,1,['log'],['log']
Testability,Adds readBiallelicDosage to genotype and an additional dosage test.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1634:62,test,test,62,https://hail.is,https://github.com/hail-is/hail/pull/1634,1,['test'],['test']
Testability,"Adds support for TableIR nodes, as well as some test coverage for all supported TableIR nodes. I think I'm going to choose not to support RelationalLetTable at this point; I think we lift relational lets before we lower MatrixTables, so we would never need to support it currently in our normal lowering pipeline.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8738:48,test,test,48,https://hail.is,https://github.com/hail-is/hail/pull/8738,1,['test'],['test']
Testability,"Adds tests for sparse block matrices in python, which are currently failing in backends with bm lowering.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14582:5,test,tests,5,https://hail.is,https://github.com/hail-is/hail/pull/14582,1,['test'],['tests']
Testability,"Adds the `BlockMatrix` implementation of `pc_relate` and associated tests. Currently, this will only run on the local backend.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10873:68,test,tests,68,https://hail.is,https://github.com/hail-is/hail/pull/10873,1,['test'],['tests']
Testability,Adds the `docker_root_image` to the global config in `build.py` so that #10107 can pass CI tests without manually redeploying CI.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10340:91,test,tests,91,https://hail.is,https://github.com/hail-is/hail/pull/10340,1,['test'],['tests']
Testability,"Adds the ability to rerun/retry queries from the nearest `CollectDistributedArray` (`CDA`) IR site. Computes a ""Semantic Hash"" of the top-level IR, which is split and shared among the various constituent `CDA` calls in a query. The `CDA` procedure looks in an execution cache for the results of each partition for that call and uses/updates the cache with successful partition computations. . The nature of the staged- lower and execute model means we don't know how many `CDA` calls that will be generated ahead of time. Thus we treat the ""Semantic Hash"" in a similar way to an RNG state variable and generate a key from the Semantic Hash every time every time we encounter a `CDA`. Since an `ExecutionContext` is re-used for multiple queries in tests while a `SemanticHash` is coupled to one query, the two were kept separate. To minimise the amount of manual state handling, the code was transformed to use a ""State"" monad (abstracted as `MonadLower`). Since the `ExecuteContext` is used nearly everywhere the semantic hash is required, the `ExecuteContext` was absorbed into the `MonadLower` interface. `Lower` is a simple, concrete instance of `MonadLower`, and is used to adapt statements into `MonadLower` expressions.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13194:747,test,tests,747,https://hail.is,https://github.com/hail-is/hail/pull/13194,1,['test'],['tests']
Testability,Adds the tall skinny (table of NDArrays) implementation of `pc_relate` and associated tests.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10874:86,test,tests,86,https://hail.is,https://github.com/hail-is/hail/pull/10874,1,['test'],['tests']
Testability,"Adds:; - A `n_max_attempts` field to the client job object (defaulting to 20); - A `n_max_attempts` reader in the front_end which stores the field into the database; - And a database field to store it in; - A change in the batch driver to fail jobs which have already had their allowed maximum number of attempts. Some judgement call justification - . - Why fail the job on attempt ""n+1"" instead of during the tidy-up of job ""n""?; - Personally I prefer a code-driven max-out over adding any more business logic into database procedures.; - The mark job complete action is triggered from the worker VM not the driver, and I didn't want to add max-out business logic into the worker either.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14682:505,log,logic,505,https://hail.is,https://github.com/hail-is/hail/pull/14682,2,['log'],['logic']
Testability,Adjust the 'resource' discovery logic,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4316:32,log,logic,32,https://hail.is,https://github.com/hail-is/hail/pull/4316,1,['log'],['logic']
Testability,Admittedly a debatable choice but worthwhile in the context of tests which generate tiny pipelines dominated by CDA overhead,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12736#issuecomment-1485548034:63,test,tests,63,https://hail.is,https://github.com/hail-is/hail/pull/12736#issuecomment-1485548034,1,['test'],['tests']
Testability,"After #7879 merges, I'll rebase this, adding regions to `mux` and `decode`. Then we should benchmark before merging this.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7891:91,benchmark,benchmark,91,https://hail.is,https://github.com/hail-is/hail/pull/7891,1,['benchmark'],['benchmark']
Testability,"After linear and logistic, the most common regression is poission (count data):; https://en.wikipedia.org/wiki/Poisson_regression. Adding it involves a minimal change to the logistic regression code. We could consider other common cases later, like probit and log-linear.; https://en.wikipedia.org/wiki/Generalized_linear_model#Link_function",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1569:17,log,logistic,17,https://hail.is,https://github.com/hail-is/hail/issues/1569,3,['log'],"['log-linear', 'logistic']"
Testability,"After looking more at the build logs here, as I was curious as to how the tests passed, when `make` was run in compilation, it ran the target for `simd/simd.h`, which ran the `$(LIBSIMDPP)` target, which ran `tar xzf $(LIBSIMDPP).tar.gz`. Thus accidentally creating the necessary dependencies before the `test` target is run later in the CI build.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5331#issuecomment-463907719:32,log,logs,32,https://hail.is,https://github.com/hail-is/hail/pull/5331#issuecomment-463907719,3,"['log', 'test']","['logs', 'test', 'tests']"
Testability,"After merge, addition of Let, RunAggScan, and ArrayFold2 all tests pass besides testMakeArrayWithDifferentRequiredeness (result mismatch). Will fix tomorrow. org.scalatest.exceptions.TestFailedException: t.valuesSimilar(res, expected, t.valuesSimilar$default$3, t.valuesSimilar$default$4) was false; result=WrappedArray(null, [0,null]); expect=WrappedArray(null, [2,WrappedArray(1)]); strategy=JvmCompile). However, I'm still concerned about the complexity of the lowering step, for instance, the Let should not be needed, but in practice was. Also need to understand why/whether the other IR, besides the child, of ArrayFold, and ArrayFold2 need/do not need to be streamified. Followed Streamify.ArrayFold here, and investigated some (for instance in ArrayFold2 streamifying the seq IR breaks typecheck), but should be more principled. edit: One difference from master run of this test is that we're generating MakeStream instead of MakeArray. for:. MakeTuple(ArrayBuffer((0,MakeArray(ArrayBuffer(GetTupleElement(In(0,PCTuple[0:PCStruct{a:PInt32,b:PCArray[PInt32]},1:+PCStruct{a:+PInt32,b:+PCArray[PInt32]}]),0), GetTupleElement(In(0,PCTuple[0:PCStruct{a:PInt32,b:PCArray[PInt32]},1:+PCStruct{a:+PInt32,b:+PCArray[PInt32]}]),1)),array<struct{a: int32, b: array<int32>}>))))",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8063#issuecomment-583812669:61,test,tests,61,https://hail.is,https://github.com/hail-is/hail/pull/8063#issuecomment-583812669,4,"['Test', 'test']","['TestFailedException', 'test', 'testMakeArrayWithDifferentRequiredeness', 'tests']"
Testability,"After spending a couple of hours reading about g++ ABI versions, I'm feeling much less; positive about the plan of building multiple libraries. It seems there are 11 different ABI versions; (most of them are minor bugfixes which were never default behavior for any version of g++,; but still ...). I'm mulling an alternative plan of saying ""well, you've got to have g++, c++, or clang++ somewhere; on your $PATH, or else you've got to define CXX, and also make, but I've got the C++ sources in the ; jarfile and I'll build you a fresh libboot.so and libhail.so if I haven't done it already"". That would involve a little bit more jarfile/Resource magic - but nothing any harder than I've already; done with the header files; avoid a big testing headache; and I hope get us past the whole; ""locking-down"" argument. And then at a later date I'll think about how to have the option of packaging; a recent clang so that we can get C++17 (and perhaps more consistent compile speed than g++); across a wide range on Linuxes. Accordingly I'll close this for now and re-open it when I have a working solution for the library issue.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3973#issuecomment-410111491:736,test,testing,736,https://hail.is,https://github.com/hail-is/hail/pull/3973#issuecomment-410111491,1,['test'],['testing']
Testability,"After spending a few hours digging through log4j and trying a bunch of approaches, I wasn't able to fix our current approach of adding appenders to the consoleLog after log4j has already been configured. Instead, we set up log4j in initial configuration to have the appenders we want. Also moved logging config from HailContext to backend, where it should be. . Storing the StringSocketAppender on the static object is definitely a bit funky, but it's being allocated inside log4j and I don't see a simpler way to store it for retrieval later.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12783:296,log,logging,296,https://hail.is,https://github.com/hail-is/hail/pull/12783,1,['log'],['logging']
Testability,Aggressive pruner AssertionError,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4754:18,Assert,AssertionError,18,https://hail.is,https://github.com/hail-is/hail/issues/4754,1,['Assert'],['AssertionError']
Testability,"Agh, failing one of my memory tests. Will dig in to it",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8315#issuecomment-600173212:30,test,tests,30,https://hail.is,https://github.com/hail-is/hail/pull/8315#issuecomment-600173212,1,['test'],['tests']
Testability,"Agh, mostly unrelated tests are failing because of a bug that I've fixed in a different PR. I'll wait for that to go in (should go in tomorrow), then rebase and dismiss",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7209#issuecomment-539190745:22,test,tests,22,https://hail.is,https://github.com/hail-is/hail/pull/7209#issuecomment-539190745,1,['test'],['tests']
Testability,Agreed on both of these. I'll write some doc and add a few tests (maybe one for the long format and one for the matrix one).,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/837#issuecomment-249248847:59,test,tests,59,https://hail.is,https://github.com/hail-is/hail/pull/837#issuecomment-249248847,1,['test'],['tests']
Testability,"Agreed that `hailctl init` is maybe the wrong name b/c `hailctl` also controls Dataproc. `hailctl batch init` seems right to me. I agree that `hailctl config init` seems wrong if we're creating buckets. On the issue of login, I think we can appease both points of view. If you're not logged in, have `hailctl batch init` do this:; ```; You are not currently logged in to Hail. Redirecting you to a login screen. ... user does login flow ... In the future, you can use hailctl auth login to login to Hail. ... continue with hailctl batch init ...; ```. I think we should punt on addressing domain. Broad users don't need to interact with it at all. What are the other concerns about how this is developing?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13279#issuecomment-1662837421:219,log,login,219,https://hail.is,https://github.com/hail-is/hail/pull/13279#issuecomment-1662837421,7,['log'],"['logged', 'login']"
Testability,"Agreed, much better. Can we add some tests for some of this functionality?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13506#issuecomment-1695719128:37,test,tests,37,https://hail.is,https://github.com/hail-is/hail/pull/13506#issuecomment-1695719128,1,['test'],['tests']
Testability,Agreed. So we leave the instance_id in until persistence is in and we have alternate service accounts for tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5866#issuecomment-485469027:106,test,tests,106,https://hail.is,https://github.com/hail-is/hail/pull/5866#issuecomment-485469027,1,['test'],['tests']
Testability,Ah great. I just wanted to make sure the new code was getting exercised by the IR tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5534#issuecomment-472084593:82,test,tests,82,https://hail.is,https://github.com/hail-is/hail/pull/5534#issuecomment-472084593,1,['test'],['tests']
Testability,"Ah ok. I was seeing some `kill -9` that are now gone when excluding the `current_task`. > It is problematic because somewhere else we're not properly stopping an infinite loop. Ideally we'll get to a place where we try to kill a pod and if it doesn't terminate in, say, 5 seconds, we fail the CI tests. Ya it might not deliver great clarity on where the error is coming from but at least we can actively kill and log an error if it's unable to do the ""right"" thing within say 5 seconds. That and I'm unsure how else to solve this problem",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9944#issuecomment-769239445:296,test,tests,296,https://hail.is,https://github.com/hail-is/hail/pull/9944#issuecomment-769239445,2,"['log', 'test']","['log', 'tests']"
Testability,"Ah shit, that's in `-Wextra`? @chrisvittal do you know if that patch also passes the tests? I was worried that change would break something.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5354#issuecomment-464148672:85,test,tests,85,https://hail.is,https://github.com/hail-is/hail/pull/5354#issuecomment-464148672,1,['test'],['tests']
Testability,"Ah there is some upcast that happens before we get to case class TableUnion:. ```scala; case class TableUnion(children: IndexedSeq[TableIR]) extends TableIR {; assert(children.forall(c => c.typ.rowType == children.head.typ.rowType)); println(""ALL SAME""); ```. If this is added, ""ALL SAME"" gets printed 16 times after ""RESULT"". Not sure why that isn't 8 (maybe due to a lowering pass causing a copy?) or 24, but that's less important. edit: Nope, these tables must be interpreted as being of both non-missing types in the ""maybeNull"" column by the import function, or I'm specifying the type wrong:. ```python; def union(...):; left_key = self.key.dtype; for i, ht, in enumerate(tables):; if left_key != ht.key.dtype:; raise ValueError(...); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8008#issuecomment-580777705:160,assert,assert,160,https://hail.is,https://github.com/hail-is/hail/pull/8008#issuecomment-580777705,1,['assert'],['assert']
Testability,"Ah yeah good point I forgot about that. You have to construct a string to avoid truncation a la:; ```; (base) dking@wm28c-761 /tmp % cat foo.py; def test():; assert False, 'b' * 1000; =========================================== test session starts ============================================; (base) dking@wm28c-761 /tmp % pytest foo.py; platform darwin -- Python 3.10.9, pytest-7.4.3, pluggy-1.3.0; rootdir: /private/tmp; configfile: pytest.ini; plugins: xdist-2.5.0, timeout-2.2.0, instafail-0.5.0, devtools-0.12.2, asyncio-0.21.1, timestamper-0.0.9, metadata-3.0.0, html-1.22.1, anyio-4.2.0, forked-1.6.0, accept-0.1.9, image-diff-0.0.11; asyncio: mode=strict; collected 1 item . foo.py F [100%]. ================================================= FAILURES =================================================; ___________________________________________________ test ___________________________________________________. def test():; > assert False, 'b' * 1000; E AssertionError: bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb; E assert False. foo",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14151#issuecomment-1889800019:149,test,test,149,https://hail.is,https://github.com/hail-is/hail/pull/14151#issuecomment-1889800019,4,"['assert', 'test']","['assert', 'test']"
Testability,"Ah, I also nuked testBgenImportRandom with no replacement. Is there any reason to think Gavin's example is not a complete test?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3743#issuecomment-396455388:17,test,testBgenImportRandom,17,https://hail.is,https://github.com/hail-is/hail/pull/3743#issuecomment-396455388,2,['test'],"['test', 'testBgenImportRandom']"
Testability,"Ah, I forgot this is potentially a laptop-running test and not in a batch job! Definitely would require some more thought.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11207#issuecomment-1007491902:50,test,test,50,https://hail.is,https://github.com/hail-is/hail/pull/11207#issuecomment-1007491902,1,['test'],['test']
Testability,"Ah, I might have to add type stubs to the right requirements file. Let me try that and if that works I'll request you for a review.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11502#issuecomment-1062081951:29,stub,stubs,29,https://hail.is,https://github.com/hail-is/hail/pull/11502#issuecomment-1062081951,1,['stub'],['stubs']
Testability,"Ah, I understand. Yeah, I think comparing to dataproc is a sufficient test. A handful of variants is probably fine. It looks like we at one point had test data, but John C commented that out when he made VEP requester pays. I'm not sure why. Look in hail/python/cluster-tests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12428#issuecomment-1446791627:70,test,test,70,https://hail.is,https://github.com/hail-is/hail/pull/12428#issuecomment-1446791627,3,['test'],"['test', 'tests']"
Testability,"Ah, I understand. You're correct that pushing to the `cache` tag disassociates that tag with any image that was previously associated with it. That image is still in the registry though. I thought that was sufficient for the cache to work. (I was wrong, see below!). AFAICT, this change doesn't prevent PR tests from pushing to the `cache` tag. This change just makes the tests run by the CI-in-the-PR not overwrite the cache. Every image build for a PR (which is tested by default namespace CI) will still overwrite the cache tag. AFAICT, this; ```; --import-cache type=registry,ref=gcr.io/hail-vdc/foo; ```; Will use as a cache source the `latest` tag in the `gcr.io/hail-vdc/foo` repository. It is *not* sufficient for an image to be present in the repository and untagged or with a different tag from `latest`. In particular, every push to the `cache` tag prevents us from using other images even though they are in the registry! For example, I pushed two images to `cache`:. ```; (base) # gcloud container images list-tags gcr.io/hail-vdc/dktest; DIGEST TAGS TIMESTAMP; fb551d9bdb94 2022-06-10T14:16:39; afb4c5ad2d7b cache,latest 2022-06-10T14:15:55; ```. If I rebuild [1] the most recently pushed image with; ```; --import-cache type=registry,ref=gcr.io/hail-vdc/dktest:cache; ```; it succeeds in getting the cache. If I rebuild the other image with the same import-cache, it does not see that the (untagged) image is already there! . ---. This all suggests that all our attempts at image caching are failing terribly. Options:; 1. Only deploy builds push to a `:cache` tag, everyone uses that tag.; 2. List all the tags in the repository and include them all as --cache-from's (this doesn't actually work: https://github.com/moby/moby/issues/34715#issuecomment-425933774); 3. Push a tag for each git SHA and then include as --cache-from's the last ten git SHAs on this branch, the most recent common commit with main (i.e. `git merge-base origin/main this-branch`), maybe the current main, and ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11907#issuecomment-1152646800:306,test,tests,306,https://hail.is,https://github.com/hail-is/hail/pull/11907#issuecomment-1152646800,3,['test'],"['tested', 'tests']"
Testability,"Ah, I was accidentally modifying an installed version of Hail. I recovered the files and brought them in. I deleted that other debug_info. It doesn't include the batch information. Now every batch test in batch/ and in hail/ should be consistently using `Batch.debug_info`",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10953#issuecomment-939112813:197,test,test,197,https://hail.is,https://github.com/hail-is/hail/pull/10953#issuecomment-939112813,1,['test'],['test']
Testability,"Ah, I was hoping the pca tests would start passing on the local backend with this change, but there are of course pruner issues. I'll have to try and craft a test that runs into this error.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10330#issuecomment-820620715:25,test,tests,25,https://hail.is,https://github.com/hail-is/hail/pull/10330#issuecomment-820620715,2,['test'],"['test', 'tests']"
Testability,"Ah, I've been running into this as well and didn't know why. Testing all the hooks seems reasonable.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13875#issuecomment-1773441587:61,Test,Testing,61,https://hail.is,https://github.com/hail-is/hail/issues/13875#issuecomment-1773441587,1,['Test'],['Testing']
Testability,"Ah, OK, this is actually quite sensible. I have to tell gradle that this is a test jar, I do that by saying I want my class path to look like the test class path at runtime. A wrinkle is that I have to explicitly request our own code too (that's the first diff line). I'm actually quite pleased that our grade file has become a bit more standard and less custom.; ```diff; task shadowTestJar(type: ShadowJar) {; archiveClassifier = 'spark-test'; + from sourceSets.test.output; + configurations = [project.configurations.testRuntimeClasspath]; }; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13551#issuecomment-1710347695:78,test,test,78,https://hail.is,https://github.com/hail-is/hail/pull/13551#issuecomment-1710347695,5,['test'],"['test', 'testRuntimeClasspath']"
Testability,"Ah, `test_define_function` isn't marked as part of the QoB test suite. It needs a `@qobtest`",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14579#issuecomment-2174366715:59,test,test,59,https://hail.is,https://github.com/hail-is/hail/pull/14579#issuecomment-2174366715,1,['test'],['test']
Testability,"Ah, and this isn't a bug in `main` because `test_batch_invariants` depends on the QoB tests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13353#issuecomment-1660807887:86,test,tests,86,https://hail.is,https://github.com/hail-is/hail/pull/13353#issuecomment-1660807887,1,['test'],['tests']
Testability,"Ah, duh, thanks! And ya I do want to make it easier to get to error logs from the PR namespace.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11352#issuecomment-1049187048:68,log,logs,68,https://hail.is,https://github.com/hail-is/hail/pull/11352#issuecomment-1049187048,1,['log'],['logs']
Testability,"Ah, edit them specifically in the linear regression benchmark test? Is there a reason we'd want that as opposed to just setting them in the benchmark suite's dockerfile or something?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8050#issuecomment-583461086:52,benchmark,benchmark,52,https://hail.is,https://github.com/hail-is/hail/pull/8050#issuecomment-583461086,3,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"Ah, good catch! Yep, this is a bug in the current master. That logic should be replaced with the conversions, and `makeDouble` and `makeLong` should go away.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/758#issuecomment-245465288:63,log,logic,63,https://hail.is,https://github.com/hail-is/hail/pull/758#issuecomment-245465288,1,['log'],['logic']
Testability,"Ah, it was just a new test file that used `setUpModule = startTestHailContext`. Btw, after this merges, no need to do that anymore. Now pytest fixtures always ensure there's a hail context.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12139#issuecomment-1332740641:22,test,test,22,https://hail.is,https://github.com/hail-is/hail/pull/12139#issuecomment-1332740641,1,['test'],['test']
Testability,"Ah, nice -- it had been a little while since I've done log arithmetic and it was fun to work out the formula equivalence :)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2369#issuecomment-341190936:55,log,log,55,https://hail.is,https://github.com/hail-is/hail/pull/2369#issuecomment-341190936,1,['log'],['log']
Testability,"Ah, service backend tests need to depend on deploy_memory",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11471#issuecomment-1059462873:20,test,tests,20,https://hail.is,https://github.com/hail-is/hail/pull/11471#issuecomment-1059462873,1,['test'],['tests']
Testability,"Ah, so I had run make prebuilt in src/main/c after the last master merge (https://github.com/hail-is/hail/pull/6083/commits/acc617674d1e023c7ef514180edf0e9cb86701df), but running it again seemed to change the dylib. Maybe I didn't commit the correct change. Pushing. Also, could this be caused by the fact that this is compiled on OSX?. edit: I see nativeLibPrebuilt just runs make prebuilt, so this is either a platform difference or didn't commit the correct prebuilt files during merge. edit2: maybe not surprisingly, running this changes `prebuilt/lib/darwin/*.dylib` , but not `prebuilt/lib/linux-x86-64/*.so`. edit3: in the makefile:. ```make; UNAME_S :=$(shell uname -s). # ... stuff; ifeq ($(UNAME_S),Linux); LIBFLAGS += -rdynamic -shared; LIBBOOT := lib/linux-x86-64/libboot.so; LIBHAIL := lib/linux-x86-64/libhail.so; ifneq ($(filter %86,$(UNAME_P)),); LIBBOOT := lib/linux-x86/libboot.so; LIBHAIL := lib/linux-x86/libhail.so; endif; endif; ifeq ($(UNAME_S),Darwin); LIBFLAGS += -dynamiclib -Wl,-undefined,dynamic_lookup; LIBBOOT := lib/darwin/libboot.dylib; LIBHAIL := lib/darwin/libhail.dylib; endif; ```. So as it stands, I think we would need to have CI run make prebuilt before running hail tests (since anything I check in won't matter), or cross-compile. I must be wrong...",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6083#issuecomment-492897454:1206,test,tests,1206,https://hail.is,https://github.com/hail-is/hail/pull/6083#issuecomment-492897454,1,['test'],['tests']
Testability,"Ah, the fix was just merged, CI should test and merge this within 30 minutes.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9875#issuecomment-759878545:39,test,test,39,https://hail.is,https://github.com/hail-is/hail/pull/9875#issuecomment-759878545,1,['test'],['test']
Testability,"Ah, the mix of reference genomes is coming from me running all the ""cluster_tests"" for GRCh38 cluster as well. One of the tests hardcodes 37",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8268#issuecomment-596593742:122,test,tests,122,https://hail.is,https://github.com/hail-is/hail/pull/8268#issuecomment-596593742,1,['test'],['tests']
Testability,"Ah, the reason this never went in is a lint failure. . ```; /usr/local/lib/python3.7/dist-packages/hailtop/hailctl/dataproc/submit.py:27:59: E713 test for membership should be 'not in'; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10863#issuecomment-941145164:146,test,test,146,https://hail.is,https://github.com/hail-is/hail/pull/10863#issuecomment-941145164,1,['test'],['test']
Testability,"Ah, yeah. `StreamAgg` doesn't have an interpret case. I think the only way to implement it would be to compile the aggregator, as we do in the `TableAggregate` case. Probably about a day of work. But I don't see any great reason Interpret needs to support this. I'd vote to change the test to be like testRelationalLetMatrixTable, forcing it to be interpreted as a `TableAggregate`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13336#issuecomment-1665623861:285,test,test,285,https://hail.is,https://github.com/hail-is/hail/pull/13336#issuecomment-1665623861,2,['test'],"['test', 'testRelationalLetMatrixTable']"
Testability,"Ah. We haven't tested against Spark 2.2 yet, so that could be the issue. We currently test / deploy against 2.0.2 and 2.1.0, though I imagine we'll update these versions to 2.1.x and 2.2.x soon.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2062#issuecomment-319677826:15,test,tested,15,https://hail.is,https://github.com/hail-is/hail/issues/2062#issuecomment-319677826,2,['test'],"['test', 'tested']"
Testability,"All 10 seconds are saved in the one test that uses volumes. That test takes ~2 minutes (four pods, each takes about 30 seconds to mount the volume and execute). The 10 seconds are presumably volume creation time (which happens in the background while non-volume using tests run).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5852#issuecomment-481821270:36,test,test,36,https://hail.is,https://github.com/hail-is/hail/pull/5852#issuecomment-481821270,3,['test'],"['test', 'tests']"
Testability,"All of the linreg, logreg, lmm, skat field names need to be converted. Feel free to push back for future PR.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3000#issuecomment-369023286:19,log,logreg,19,https://hail.is,https://github.com/hail-is/hail/pull/3000#issuecomment-369023286,1,['log'],['logreg']
Testability,All python tests are failing with import errors.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8656#issuecomment-621225819:11,test,tests,11,https://hail.is,https://github.com/hail-is/hail/pull/8656#issuecomment-621225819,1,['test'],['tests']
Testability,"All test/checks for this pr pass. There is a CI related error, a cluster being issued a delete operation when existing delete operations:. """"""; + gcloud dataproc clusters delete ci-test-n42my5i1 --async; The cluster 'ci-test-n42my5i1' and all attached disks will be deleted. Do you want to continue (Y/n)? ; ERROR: (gcloud.dataproc.clusters.delete) FAILED_PRECONDITION: Cannot delete cluster 'ci-test-n42my5i1' while it has other pending delete operations.; """"""",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5878#issuecomment-485153266:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/5878#issuecomment-485153266,4,['test'],"['test', 'test-']"
Testability,All tests pass,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7904#issuecomment-575935878:4,test,tests,4,https://hail.is,https://github.com/hail-is/hail/pull/7904#issuecomment-575935878,1,['test'],['tests']
Testability,"All that messy state twiddling is because Scala's `Iterator` is the wrong model for most things we use it for, which is why I made `FlipbookIterator`. Using that, what you have would become; ```scala; private class BgenRecordStateMachine(; ctx: RVDContext,; p: BgenPartition,; settings: BgenSettings; ) extends StateMachine[RegionValue] {; private[this] val bfis = p.makeInputStream; private[this] val rv = RegionValue(ctx.region); private[this] val rvb = ctx.rvb; ; def isValid: Boolean = p.isValid; def value: RegionValue = rv; def advance() { p.advance(); findNextVariant() }; private def findNextVariant() {; // same as existing advance(), but without advancing p; }. findNextVariant() // make sure iterator is initialized in first valid state; }; ```; giving `BgenPartition` a `FlipbookIterator` style interface, with `isValid`, `value`, and `advance()` instead of `hasNext()` and `next()`. Then to create a new iterator `FlipbookIterator(new BgenRecordStateMachine(...))`. But honestly, what you had was clear enough, so if you benchmarked and the allocation isn't an issue, you should do whatever you find most readable. I've been conditioned to avoid `Option` in low-level code, but I don't have a good intuition for when it is or isn't actually a problem.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3893#issuecomment-404156507:1034,benchmark,benchmarked,1034,https://hail.is,https://github.com/hail-is/hail/pull/3893#issuecomment-404156507,1,['benchmark'],['benchmarked']
Testability,All the matrix IR tests were in a method in `TableIRTests`. Moved them out into a separate class to stay consistent.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5532:18,test,tests,18,https://hail.is,https://github.com/hail-is/hail/pull/5532,1,['test'],['tests']
Testability,All the tests are passing but something is hanging.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12731#issuecomment-1518359172:8,test,tests,8,https://hail.is,https://github.com/hail-is/hail/pull/12731#issuecomment-1518359172,1,['test'],['tests']
Testability,Allocate more workers to testing dataproc,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11271:25,test,testing,25,https://hail.is,https://github.com/hail-is/hail/pull/11271,1,['test'],['testing']
Testability,Allow `expect` in tests that don't kill and print multiple failures,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/169:18,test,tests,18,https://hail.is,https://github.com/hail-is/hail/issues/169,1,['test'],['tests']
Testability,"Allow the Genotype in VSM to be null. This means you can't call `g.gt` anymore, since `g` might be null. Moved the user-visible Genotype functions to the Genotype companion object and made them null-safe. This makes the behavior of filterGenotypes between VariantDataset and GenericDataset consistent. Fixed the tests. @tpoterba ready for another look.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1872#issuecomment-305223718:312,test,tests,312,https://hail.is,https://github.com/hail-is/hail/pull/1872#issuecomment-305223718,1,['test'],['tests']
Testability,"Allow the inner stream in a `StreamGrouped` or `StreamGroupByKey` to be unused, by recognizing when the `apply` method on the inner stream is never called, and calling it ourselves with a dummy consumer which just asserts the contained code paths are unreachable.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8886:214,assert,asserts,214,https://hail.is,https://github.com/hail-is/hail/pull/8886,1,['assert'],['asserts']
Testability,"Already done:; - Made a public bucket in us-central1 with requester pays on (gs://qob-vep-grch37-us-central1); - Uploaded the configuration file for grch37 in us-central1 to gs://hail-common/qob-vep/; - Documentation. To-Do items:; - Mirror the loftee base image in our artifact registry; - Replicate the data in Azure and create an Azure configuration file (can't make this requester pays, so not sure what to do here); - Add instructions for setting up a config file in the respective infra READMEs; - Write tests; - Get GRCh38 working; - Modify the cloud run functions for ACR cleanup to cleanup the vep-grch37 and eventually vep-grch38 images",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12428:510,test,tests,510,https://hail.is,https://github.com/hail-is/hail/pull/12428,1,['test'],['tests']
Testability,Alright alright jeez I can't program any more. I also needed to explicitly request that all the test and main classes from our project should be in the JAR.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13551#issuecomment-1710705353:96,test,test,96,https://hail.is,https://github.com/hail-is/hail/pull/13551#issuecomment-1710705353,1,['test'],['test']
Testability,Alright cool. I'll hold off on handling the failing test until you do that.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1590#issuecomment-288752989:52,test,test,52,https://hail.is,https://github.com/hail-is/hail/pull/1590#issuecomment-288752989,1,['test'],['test']
Testability,"Alright! I stopped being lazy and actually tested all this. I copied the code from the step into a file and removed the left-hand indentation. I called that file `/tmp/foo.sh`. I ran this:. ```; python3 ~/projects/hail/ci/jinja2_render.py '{""code"":{""developers"":[{""username"":""cchurch""},{""username"":""dking""},{""username"":""jigold""},{""username"":""dgoldste""}, {""username"":""irademac""},{""username"":""parsa""},{""username"":""test-dev""},{""username"":""cseed""},{""username"":""cvittal""},{""username"":""ehigham""},{""username"":""gsmith""},{""username"":""jwander""},{""username"":""nwatts""},{""username"":""pschultz""}]}}' \; /tmp/foo.sh \; 	/tmp/foo.sh.out; sh /tmp/foo.sh.out; ```. And it correctly skipped test-dev entirely, it printed ""Skipping cchurch because they have no namespace."" and it created the appropriate cronjobs for everyone else. I then re-ran it to verify it indicated no changes. I then listed all the cronjobs:. ```; (base) dking@wm28c-761 hail % k get cronjob --all-namespaces; NAMESPACE NAME SCHEDULE SUSPEND ACTIVE LAST SCHEDULE AGE; cseed dev-namespace-scaledown-cseed 0 20 * * 1,2,3,4,5 False 0 <none> 13s; cseed dev-namespace-scaleup-cseed 0 9 * * 1,2,3,4,5 False 0 <none> 90m; cvittal dev-namespace-scaledown-cvittal 0 20 * * 1,2,3,4,5 False 0 <none> 12s; cvittal dev-namespace-scaleup-cvittal 0 9 * * 1,2,3,4,5 False 0 <none> 90m; dgoldste dev-namespace-scaledown-dgoldste 0 20 * * 1,2,3,4,5 False 0 <none> 4m2s; dgoldste dev-namespace-scaleup-dgoldste 0 9 * * 1,2,3,4,5 False 0 <none> 90m; dking dev-namespace-scaledown-dking 0 20 * * 1,2,3,4,5 False 0 <none> 9m22s; dking dev-namespace-scaleup-dking 0 9 * * 1,2,3,4,5 False 0 <none> 90m; ehigham dev-namespace-scaledown-ehigham 0 20 * * 1,2,3,4,5 False 0 <none> 11s; ehigham dev-namespace-scaleup-ehigham 0 9 * * 1,2,3,4,5 False 0 <none> 90m; gsmith dev-namespace-scaledown-gsmith 0 20 * * 1,2,3,4,5 False 0 <none> 10s; gsmith dev-namespace-scaleup-gsmith 0 9 * * 1,2,3,4,5 False 0 <none> 90m; irademac dev-namespace-scaledown-irademac 0 20 * * 1,2,3,4,5 Fa",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13426:43,test,tested,43,https://hail.is,https://github.com/hail-is/hail/pull/13426,3,['test'],"['test-dev', 'tested']"
Testability,"Alright, I snagged the PR namespace from the CI:. ```; pr-13135-default-u5tt5011yt5w; ```. Then I went to the Azure [Log Analytics workspace haildev-logs](https://portal.azure.com/#@haildev.onmicrosoft.com/resource/subscriptions/22cd45fe-f996-4c51-af67-ef329d977519/resourceGroups/haildev/providers/Microsoft.OperationalInsights/workspaces/haildev-logs/logs). I went to ""Queries"", selected ""DK's AKS Pod Logs"", modified the namespace to the aforementioned one, and added a filter for ""hail-az://"". ```; let startTimestamp = ago(2h);; KubePodInventory; | where TimeGenerated > startTimestamp; | extend PodName=Name; | where Namespace == ""pr-13135-default-u5tt5011yt5w"" and PodName startswith ""batch-driver""; | distinct ContainerID, PodName, Namespace; | join (; ContainerLog; | where TimeGenerated > startTimestamp; ) on ContainerID; | project TimeGenerated, message=parse_json(LogEntry).message, LogEntry=parse_json(LogEntry); | where message contains ""hail-az://""; | order by TimeGenerated desc; ```. That revealed the batch logs path:. ```; EXAMPLE BATCH_JOB_LOGS_PATH hail-az://haildevtest/test/batch/logs/we5a79QlczzdluUx8kT2Vh/batch/1/1/abc123/main/log; ```. In the [failing PR test job logs](https://ci.azure.hail.is/batches/3956877/jobs/152), I found the batch id:. ```; [2023-06-09 12:43:34] test/hail/methods/test_impex.py::BGENTests::test_import_bgen_row_fields; -------------------------------- live log call ---------------------------------; INFO batch_client.aioclient:aioclient.py:753 created batch 1148. INFO batch_client.aioclient:aioclient.py:770 updated batch 1148. FAILED; ```. I listed the job logs:. ```; (base) dking@wm28c-761 hail % az storage blob list --account-name haildevtest --container test --prefix batch/logs/we5a79QlczzdluUx8kT2Vh/batch/1148/ -o table; Name Blob Type Blob Tier Length Content Type Last Modified Snapshot; ----------------------------------------------------------------------------- ----------- ----------- -------- ------------------------ ---------",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13160:117,Log,Log,117,https://hail.is,https://github.com/hail-is/hail/pull/13160,8,"['Log', 'log']","['Log', 'LogEntry', 'Logs', 'logs']"
Testability,"Alright, I've addressed all of the above, you were right I was able to move things up to PContainer and simplify some of the code there. I didn't do the one decorator to test cxx and java in this PR because the cxx shape test ended up using some things I haven't implemented on jvm side yet so for now I just made a separate test. I'll add that in a separate PR.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6874#issuecomment-523600895:170,test,test,170,https://hail.is,https://github.com/hail-is/hail/pull/6874#issuecomment-523600895,3,['test'],['test']
Testability,"Alright, adjusted this to also make sure we don't pass a 0 into `dgeqrf` as the `LDA` argument and also to make sure that we test multiplying when only the inner dimension is a 0. Should be good for review now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8621#issuecomment-620162545:125,test,test,125,https://hail.is,https://github.com/hail-is/hail/pull/8621#issuecomment-620162545,1,['test'],['test']
Testability,"Alright, all tested, should be good :+1:",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7862#issuecomment-574322586:13,test,tested,13,https://hail.is,https://github.com/hail-is/hail/pull/7862#issuecomment-574322586,1,['test'],['tested']
Testability,"Alright, replaced it with `throw new AssertionError(...)` because Scala can't infer that `assert(false)` always fails.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7682#issuecomment-566206151:37,Assert,AssertionError,37,https://hail.is,https://github.com/hail-is/hail/pull/7682#issuecomment-566206151,2,"['Assert', 'assert']","['AssertionError', 'assert']"
Testability,"Alrighty @danking, I was able to spin up a dataproc cluster and open a notebook:. ```python; hailctl dataproc start --region us-central1 my-first-cluster-2; hailctl dataproc connect my-first-cluster-2 notebook; ```. and paste the example analysis script from the [dataproc page](https://hail.is/docs/0.2/install/dataproc.html) in the docs into the notebook, and it ran successfully!. Any other tests you think are warranted here, or is this fix all set?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12965#issuecomment-1536483087:394,test,tests,394,https://hail.is,https://github.com/hail-is/hail/pull/12965#issuecomment-1536483087,1,['test'],['tests']
Testability,"Also add explicit asserts at the top of adjust_for_{add, remove}. We got it for free for remove (since .remove throws if missing) but for add.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7485:18,assert,asserts,18,https://hail.is,https://github.com/hail-is/hail/pull/7485,1,['assert'],['asserts']
Testability,Also add more logging,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9880:14,log,logging,14,https://hail.is,https://github.com/hail-is/hail/pull/9880,1,['log'],['logging']
Testability,Also add test case for unterminated string with nice error message (use `interceptFatal`).,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/493#issuecomment-235044203:9,test,test,9,https://hail.is,https://github.com/hail-is/hail/issues/493#issuecomment-235044203,1,['test'],['test']
Testability,Also add test for vds.sampleqc.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10727:9,test,test,9,https://hail.is,https://github.com/hail-is/hail/pull/10727,1,['test'],['test']
Testability,"Also added fix for issue #389 . Removed withScope function from implementation of leftOuterJoin. Not sure what the effect of leaving this function out, but the tests worked fine.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/398#issuecomment-220695888:160,test,tests,160,https://hail.is,https://github.com/hail-is/hail/pull/398#issuecomment-220695888,1,['test'],['tests']
Testability,Also added google-cloud-logging,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6934#issuecomment-524422872:24,log,logging,24,https://hail.is,https://github.com/hail-is/hail/pull/6934#issuecomment-524422872,1,['log'],['logging']
Testability,"Also added:. test namespace; test-svc service account with all privileges in test, use for test batch jobs by CI; disabled livenessProbe while restarting creates new pods",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4596#issuecomment-431735363:13,test,test,13,https://hail.is,https://github.com/hail-is/hail/pull/4596#issuecomment-431735363,4,['test'],"['test', 'test-svc']"
Testability,Also all the tests need to be fixed.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6083#issuecomment-491423332:13,test,tests,13,https://hail.is,https://github.com/hail-is/hail/pull/6083#issuecomment-491423332,1,['test'],['tests']
Testability,Also allow incremental file creation. Necessary for forthcoming work that reconfigures the dependency structure of the pipeline benchmarks.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7591:128,benchmark,benchmarks,128,https://hail.is,https://github.com/hail-is/hail/pull/7591,1,['benchmark'],['benchmarks']
Testability,"Also big change, going to test this manually",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11522#issuecomment-1061048298:26,test,test,26,https://hail.is,https://github.com/hail-is/hail/pull/11522#issuecomment-1061048298,1,['test'],['test']
Testability,"Also build infrastructure for repartitioning table stages without shuffle. Test does not pass with `allRelational` due to method splitting issues, but did pass when I fixed a few locals=>fields and disabled EstimableEmitter splitting logic.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8741:75,Test,Test,75,https://hail.is,https://github.com/hail-is/hail/pull/8741,2,"['Test', 'log']","['Test', 'logic']"
Testability,"Also changed `assertCompatibleLocalMatrix` to used `isCompact`, which is the intended condition. The current one doesn't rule out extra trailing values in data.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3141:14,assert,assertCompatibleLocalMatrix,14,https://hail.is,https://github.com/hail-is/hail/pull/3141,1,['assert'],['assertCompatibleLocalMatrix']
Testability,"Also deleted `test_blanczos_against_hail`, no reason to compare them, that test can never work on the service, and we want to delete the Spark one soon.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10383#issuecomment-827607930:75,test,test,75,https://hail.is,https://github.com/hail-is/hail/pull/10383#issuecomment-827607930,1,['test'],['test']
Testability,Also fixed and tested `hailctl dataproc modify`,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6297:15,test,tested,15,https://hail.is,https://github.com/hail-is/hail/pull/6297,1,['test'],['tested']
Testability,"Also fixed getting the logs for a job. - I didn't realize the context manager for asyncio_timeout was throwing an asyncio.TimeoutError. Now, I handle the TimeoutError exception and then throw our own exception after we've uploaded the logs and cleaned up the container. This way it still shows up as an error. - I noticed the logs were being cached when a user gets the logs while the job is running and we don't update the cache until the job is complete. Therefore, I think from the code, if the user asks for the logs part-way through the job running, they wouldn't see any updates until the job is completed. I'm not sure why no-one has complained about this yet, so might be good to double check that this is indeed a bug.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8280:23,log,logs,23,https://hail.is,https://github.com/hail-is/hail/pull/8280,5,['log'],['logs']
Testability,"Also fixed some test bugs (the pattern matching tests didn't actually test that the pattern was found...just that if it is found, it has the right value).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7556:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/7556,3,['test'],"['test', 'tests']"
Testability,"Also included useful changes that made it possible to diagnose and fix this problem including:. - No longer dropping metrics for test namespaces. I checked the prometheus disk and we have plenty of space to add these additional metrics. Very useful for diagnosing test time latencies.; - Add prometheus scraping for envoy pods. Gives us many great metrics like number of 2xx, 3xx, 4xx and 5xx requests per upstream, rate limit enforcement, even time until the cert expires; - Made `Connection reset` a retry-once error. A connection reset can sometimes be indistinguishable from non-transient errors when the client is not able to inspect the response code before the reset clears the TCP buffer. We take multiple consecutive resets to mean an intentional action from the server indicating that the client is doing something wrong and retrying will not help. I have put off adding gzip compression to gateway in this PR. It was working fine with all of our services except for grafana, in which it was messing up the websocket connection for some reason. I'll dig into that separately.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12425:129,test,test,129,https://hail.is,https://github.com/hail-is/hail/pull/12425,2,['test'],['test']
Testability,"Also increase the logging in the batch tests: set the log format, log when tests start/end.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7990:18,log,logging,18,https://hail.is,https://github.com/hail-is/hail/pull/7990,5,"['log', 'test']","['log', 'logging', 'tests']"
Testability,Also moved pipeline to hailtop so it is including in the Hail package. The tests remain in the pipeline/ subproject directory. @konradjk You'll have to import pipeline with `from hailtop import pipeline` after this. FYI @jigold,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6445#issuecomment-504701295:75,test,tests,75,https://hail.is,https://github.com/hail-is/hail/pull/6445#issuecomment-504701295,1,['test'],['tests']
Testability,Also need to see benchmarks.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6266#issuecomment-506857050:17,benchmark,benchmarks,17,https://hail.is,https://github.com/hail-is/hail/pull/6266#issuecomment-506857050,1,['benchmark'],['benchmarks']
Testability,"Also not the most sophisticated thing but littering the test and the things it calls with print statements, making sure the tests print in real-time, and kicking off another test is something else I'd try.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12731#issuecomment-1507073010:56,test,test,56,https://hail.is,https://github.com/hail-is/hail/pull/12731#issuecomment-1507073010,3,['test'],"['test', 'tests']"
Testability,Also refactor BGEN ptype logic. stacked on #7941,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7943:25,log,logic,25,https://hail.is,https://github.com/hail-is/hail/pull/7943,1,['log'],['logic']
Testability,Also removed 2.1.0 from deployed versions. When this goes in I'll remove the CI tests againt 2.1.0.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2656#issuecomment-355463197:80,test,tests,80,https://hail.is,https://github.com/hail-is/hail/pull/2656#issuecomment-355463197,1,['test'],['tests']
Testability,"Also removed unused domain names (test, dev1) and added internal for future use to route to internal namespaces.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6058:34,test,test,34,https://hail.is,https://github.com/hail-is/hail/pull/6058,1,['test'],['test']
Testability,"Also some changes to make it possible to run through Python. These tests are obviously not sufficient, but they are a good start.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8396:67,test,tests,67,https://hail.is,https://github.com/hail-is/hail/pull/8396,1,['test'],['tests']
Testability,Also that step=0 fails (@patrick-schultz has some nice exception asserts coming for the IR tests),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3648#issuecomment-391577744:65,assert,asserts,65,https://hail.is,https://github.com/hail-is/hail/issues/3648#issuecomment-391577744,2,"['assert', 'test']","['asserts', 'tests']"
Testability,Also! Chris' zstd change should make a modest across the board improvement to test times.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13076#issuecomment-1563164408:78,test,test,78,https://hail.is,https://github.com/hail-is/hail/pull/13076#issuecomment-1563164408,1,['test'],['test']
Testability,"Also, I double checked and the only place the deletion logic was used was `upload_logs`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11429#issuecomment-1054582071:55,log,logic,55,https://hail.is,https://github.com/hail-is/hail/pull/11429#issuecomment-1054582071,1,['log'],['logic']
Testability,"Also, I forgot to test that the query that does the audit doesn't lock any tables from writes.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11990#issuecomment-1172526665:18,test,test,18,https://hail.is,https://github.com/hail-is/hail/pull/11990#issuecomment-1172526665,1,['test'],['test']
Testability,"Also, I just tested this out with my own jar/zip and it does exactly what I wanted it to! So at least there's one empirical test",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5819#issuecomment-481007218:13,test,tested,13,https://hail.is,https://github.com/hail-is/hail/pull/5819#issuecomment-481007218,2,['test'],"['test', 'tested']"
Testability,"Also, I see there are no tests for the new features.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1157#issuecomment-266540995:25,test,tests,25,https://hail.is,https://github.com/hail-is/hail/pull/1157#issuecomment-266540995,1,['test'],['tests']
Testability,"Also, I think you've referenced the wrong log, the one from your original reporting email is: https://storage.googleapis.com/hail-ci-0-1/ci/7aa524504b8bafe0a4af859e73bc4f9efdaa052c/414f3f183bd5f2ec04e1c732522cbc0b8b1fca31/job-log. The log you referenced appears to be failing because another process (presumably `batch`) has already bound to port 5000. Perhaps `batch`'s `hail-ci-build.sh` is not properly cleaning up processes when it exits.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4517#issuecomment-429026174:42,log,log,42,https://hail.is,https://github.com/hail-is/hail/issues/4517#issuecomment-429026174,3,['log'],['log']
Testability,"Also, I wanna take another run through on Monday before we merge this. I think it will pass the tests, but I also think it needs another careful look to ensure its resetting in all the right places and serializing in all the right places.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3414#issuecomment-383249693:96,test,tests,96,https://hail.is,https://github.com/hail-is/hail/pull/3414#issuecomment-383249693,1,['test'],['tests']
Testability,"Also, I'll check the SQL carefully once the tests pass.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13372#issuecomment-1673793639:44,test,tests,44,https://hail.is,https://github.com/hail-is/hail/pull/13372#issuecomment-1673793639,1,['test'],['tests']
Testability,"Also, I'm not opposed to doing a migration of the existing batches to having rows in the updates table. It will just take some work to write a chunking script because we don't want to do the migration all in one transaction. Luckily this code doesn't have to be as well tested as other migrations.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12010#issuecomment-1219917934:270,test,tested,270,https://hail.is,https://github.com/hail-is/hail/pull/12010#issuecomment-1219917934,1,['test'],['tested']
Testability,"Also, I'm not sure why `test_define_function` doesn't fail in the service backend tests. We should figure that out. If we could modify that to fail before this fix, I think that would be enough to merge this.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14579#issuecomment-2174365088:82,test,tests,82,https://hail.is,https://github.com/hail-is/hail/pull/14579#issuecomment-2174365088,1,['test'],['tests']
Testability,"Also, a quick look at the log shows some AST operations you're using don't have IR conversions, namely: annotate, drop, abs and contains (which @catoverdrive has a PR for: https://github.com/hail-is/hail/pull/3458). Those would be good additions (maybe as a separate PR.)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3335#issuecomment-385312916:26,log,log,26,https://hail.is,https://github.com/hail-is/hail/pull/3335#issuecomment-385312916,1,['log'],['log']
Testability,"Also, can you add a larger test with 1024 elements? Maybe check 557th element is correct after 556 extractMax operations?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2147#issuecomment-324725390:27,test,test,27,https://hail.is,https://github.com/hail-is/hail/pull/2147#issuecomment-324725390,1,['test'],['test']
Testability,"Also, consider whether you can use RegressionUtils.toHWENormalizedGtArray in the main code, not just the test.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1648#issuecomment-293415826:105,test,test,105,https://hail.is,https://github.com/hail-is/hail/pull/1648#issuecomment-293415826,1,['test'],['test']
Testability,"Also, do we test emitter stuff like this anywhere?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7587#issuecomment-557233459:12,test,test,12,https://hail.is,https://github.com/hail-is/hail/pull/7587#issuecomment-557233459,1,['test'],['test']
Testability,"Also, do you have tests to know this is working?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4630#issuecomment-432739112:18,test,tests,18,https://hail.is,https://github.com/hail-is/hail/pull/4630#issuecomment-432739112,1,['test'],['tests']
Testability,"Also, interesting to note: . Home page (with menu bar, dark icon, not logged in): 1.5KB .gz . Logged in: 3.1KB. Bundle size: on order of 100KB. However, 30% of this is the auth0 client library; we can modify it to save space. I've commented on an issue with some light guidance on how to save 5.5KB of that. Effectively 70KB for React + React-Dom + Webpack tooling + all page js compares quite favorably with a jquery-only solution, while being faster than jQuery (https://github.com/jonmiles/react-performance-tests, https://medium.com/thothzocial-engineering/rendering-speed-performance-challenge-with-famous-front-end-framework-196c876a68af), far easier to manage, and with a much large ecosystem (and jquery-only solution would do nothing for universal rendering). The React side should drop this year substantially. They are also interested in writing a compiler to completely remove the vdom, compiling to optimized javascript or maybe web assembly. That may be something interesting to us as well.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4931#issuecomment-454608700:70,log,logged,70,https://hail.is,https://github.com/hail-is/hail/pull/4931#issuecomment-454608700,3,"['Log', 'log', 'test']","['Logged', 'logged', 'tests']"
Testability,"Also, just to make sure, you tested this with dev deploy?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11798#issuecomment-1125272065:29,test,tested,29,https://hail.is,https://github.com/hail-is/hail/pull/11798#issuecomment-1125272065,1,['test'],['tested']
Testability,"Also, looks like tests are unhappy.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1973#issuecomment-317271753:17,test,tests,17,https://hail.is,https://github.com/hail-is/hail/pull/1973#issuecomment-317271753,1,['test'],['tests']
Testability,"Also, needs the test for hanging when trying to contact another ""worker""",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10796#issuecomment-905768874:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/10796#issuecomment-905768874,1,['test'],['test']
Testability,"Also, wrt the `hail` alias, that only sets the environment variable for that single execution of `python`. You will need to run:; ```bash; export PYTHONPATH=$SPARK_HOME/python:$SPARK_HOME/python/lib/py4j-0.10.4-src.zip:$HAIL_HOME/python; ```; before running `./gradlew test`, otherwise it's very likely that you will see a variety of errors related to Spark. I am surprised that you saw an error about Breeze natives. An inappropriate `$PYTHON_PATH` should trigger a failure much earlier than the section of code that uses of Breeze natives.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1419#issuecomment-281862423:269,test,test,269,https://hail.is,https://github.com/hail-is/hail/issues/1419#issuecomment-281862423,1,['test'],['test']
Testability,"Also, you can use `haildev` for the RG and `22cd45fe-f996-4c51-af67-ef329d977519` for the subscription id for these tests. The changes to the tests you made seem totally reasonable.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12877#issuecomment-1522222236:116,test,tests,116,https://hail.is,https://github.com/hail-is/hail/pull/12877#issuecomment-1522222236,2,['test'],['tests']
Testability,Also:; - expand assertEvalsTo interface; - typeCheck expected and result in assertEvalsTo; - fix hist expected's types,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3649:16,assert,assertEvalsTo,16,https://hail.is,https://github.com/hail-is/hail/pull/3649,2,['assert'],['assertEvalsTo']
Testability,Alternate hypothesis that I'm not sure whether we can test: we forgot to unfreeze azure CI for a week?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13050#issuecomment-1561903635:54,test,test,54,https://hail.is,https://github.com/hail-is/hail/issues/13050#issuecomment-1561903635,1,['test'],['test']
Testability,"Alternatively, I could set default `covariates=[1.0]` in lin, log, and skat. I feel like you, @tpoterba and I discussed this but I can't recall if/what we concluded. I'll post explanation of changes on discuss once in.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4067#issuecomment-409990215:62,log,log,62,https://hail.is,https://github.com/hail-is/hail/pull/4067#issuecomment-409990215,1,['log'],['log']
Testability,"Although Dataproc does not have a public Spark 3-based GA release schedule yet, it'd probably be helpful to start supporting a Spark 3 build; tagging @tpoterba for context. I'm not familiar with the release process internally, so let me know what other changes need to be made to accommodate this. In particular, this PR likely needs to change the PySpark requirements specified in https://github.com/hail-is/hail/blob/main/hail/python/requirements.txt. This PR builds on changes from #9199. The code changes are due to Scala 2.12 and Spark 3 changes:. - `y` in `x << y` must be an int; - `mutable.Stack` is deprecated; - `JavaConversions` is deprecated; - `addTaskCompletionListener` is overloaded; - `Row.merge()` is deprecated. The build changes are as follows:. - Upgraded Breeze from 1.0 to 1.1 due to a known bug: https://github.com/scalanlp/breeze/issues/772; - Downgraded from Json4s 3.7.0-M5 to 3.5.3 due to a known bug: https://github.com/json4s/json4s/issues/507; - Upgraded to `scalatest 3.0.5` for Scala 2.12 compatibility; - Update the `pyspark` version in `python/requirements.txt` to match `SCALA_VERSION` during `make install-deps`. The following testing commands pass (at least to the degree that `main` does):. - `make -j8 test SCALA_VERSION=2.11.12 SPARK_VERSION=2.4.5`; - `make -j8 test SCALA_VERSION=2.12.8 SPARK_VERSION=3.0.0`",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9524:1164,test,testing,1164,https://hail.is,https://github.com/hail-is/hail/pull/9524,3,['test'],"['test', 'testing']"
Testability,"Although the test is still running now, I am pretty sure the following solution solved the problem. ```; #https://discuss.hail.is/t/i-get-a-negativearraysizeexception-when-loading-a-plink-file/899. export PYSPARK_SUBMIT_ARGS=""--driver-java-options '-XX:hashCode=0' --conf 'spark.executor.extraJavaOptions=-XX:hashCode=0' pyspark-shell"". ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14168#issuecomment-1897770087:13,test,test,13,https://hail.is,https://github.com/hail-is/hail/issues/14168#issuecomment-1897770087,1,['test'],['test']
Testability,An additional detail that I fixed in this change is that we no longer need to load the log file into memory on the worker in order to send it to the batch pod (by using `FileResponse`). It would also be nice to do this; - when the worker is uploading the file; - on the batch pod by somehow chaining the StreamResponse from the worker/blob storage to the client. but these felt like bigger changes that would've needed to touch more of the code so I left those out for now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12666#issuecomment-1422737869:87,log,log,87,https://hail.is,https://github.com/hail-is/hail/pull/12666#issuecomment-1422737869,1,['log'],['log']
Testability,"An example of a script that currently fails on `main` but passes in this PR:. ```python; import hailtop.batch as hb. def test_python_function(*values):; # making this function smaller with 102 jobs submits successfully?; print(*values); h = hash(values); print(f'Hash is {h}'); # this return is important, otherwise it submits successfully; return h. if __name__ == '__main__':; b = hb.Batch('Scale size recursion test'); # 101 submits, 102 fails; for i in range(101):; j = b.new_python_job(f'Function call {i+1}'); j.call(test_python_function, i + 1). submitted = b.run(wait=False); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14576#issuecomment-2161133045:414,test,test,414,https://hail.is,https://github.com/hail-is/hail/pull/14576#issuecomment-2161133045,1,['test'],['test']
Testability,"An overhaul of our NumPy ndarray and BlockMatrix conversion, proceeding through binary on disk compatibly with the NumPy `tofile` and `fromfile` functions. For expediency, I still use Breeze matrix as an (internal) intermediate, resulting in an extra copy and max 2^31 size. Longer term, we should avoid routing through Breeze, add compression, etc, but this gets us a lot of bang for the buck in the face of intolerable py4j slowness. In fact, on laptop, the local byte transport piece is about 50x faster through disk than the ""faster"" direction of py4j (java to python via byte array), so now 90% of the time is spent localizing and distributing serialized blocks. E.g. reading a 8192 x 8192 block matrix with 4 blocks and converting to NumPy takes about 12s. Converting the local matrix to NumPy takes a bit over 1s. The current ""slower"" py4j direction (python to java) falls over even on tiny matrices. Main changes:; - added `tofile, to_numpy, fromfile, from_numpy` to BlockMatrix, which are explained in the docs with examples and tested in `test_linalg`.; - deleted all breeze related functions in utils.java; - added a `StreamRawBlockBufferSpec` (better name?) which behaves like the `StreamBlockBufferSpec` except that it only writes the (raw) blocks without adding length data to the stream. This allows for re-using readDoubles and writeDoubles as implemented in BlockingBuffer.; - added readDoubles and writeDoubles using this buffer spec on RichDenseMatrixDouble, and a test.; - along the way, added a `hl.tmp_dir()` function to allow users to inspect the tmp_dir used with `BlockMatrix.from_entry_expr`, as noted in that documentation.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3114:1038,test,tested,1038,https://hail.is,https://github.com/hail-is/hail/pull/3114,2,['test'],"['test', 'tested']"
Testability,"An update. I'm working with debugging info from the AoU VDS creation cluster. A VDS creation was run using an n1-highmem-8 driver. The cluster is created by hailctl with no custom driver settings; <details><summary>template for hailctl dataproc start</summary>. [Source](https://github.com/broadinstitute/gatk/blob/ah_var_store/scripts/variantstore/wdl/extract/run_in_hail_cluster.py#L36C1-L48C1). ```; hailctl dataproc start ; --autoscaling-policy={autoscaling_policy}; --worker-machine-type {worker_machine_type}; --region {region}; --project {gcs_project}; --service-account {account}; --num-master-local-ssds 1; --num-worker-local-ssds 1 ; --max-idle=60m; --max-age=1440m; --subnet=projects/{gcs_project}/regions/{region}/subnetworks/subnetwork; {cluster_name}; ```. </details>. I have the driver node syslogs as well as the Hail log file. For some reason all logs other than the Hail logs are missing from this file. We separately need to determine why all the Spark logs etc. are missing. Based on the syslog, after system start up and just before the Jupyter notebook starts, the system is already using ~8,500MiB:; ```; Nov 22 14:29:51 vds-cluster-91f3f4c1-b737-m earlyoom[4115]: mem avail: 43808 of 52223 MiB (83.89%), swap free: 0 of 0 MiB ( 0.00%); ```; So, the effective maximum memory that Hail could possibly use is around 43808MiB. After the Notebook and Spark initialize we're down to 42,700 MiB (about ~1000MiB more in use).; ```; Nov 22 14:30:06 vds-cluster-91f3f4c1-b737-m earlyoom[4115]: mem avail: 42760 of 52223 MiB (81.88%), swap free: 0 of 0 MiB ( 0.00%); ```. `hailctl` sets the VM RAM limit to 80% of the instance type's memory, so 80% * 52GiB = 42598MiB. This means the JVM is permitted to effectively use all the remaining memory. At time of sigkill the total memory allocated by the JVM was about 2000MiB below the max heap size. Note that the heap is contained within all memory allocated by the JVM.; ```; Nov 22 15:31:05 vds-cluster-91f3f4c1-b737-m earlyoom[4115]: mem ",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13960#issuecomment-1832531419:834,log,log,834,https://hail.is,https://github.com/hail-is/hail/issues/13960#issuecomment-1832531419,4,['log'],"['log', 'logs']"
Testability,And I removed the genAndFitTest as this new test is an exact comparison of fit h2 with another tool rather than a statistical check. We will keep the issue of why the old test was flaky open here #1416,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1475#issuecomment-284275408:44,test,test,44,https://hail.is,https://github.com/hail-is/hail/pull/1475#issuecomment-284275408,2,['test'],['test']
Testability,And I think all the tests are passing now as well,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6874#issuecomment-523602549:20,test,tests,20,https://hail.is,https://github.com/hail-is/hail/pull/6874#issuecomment-523602549,1,['test'],['tests']
Testability,And I'll add this test.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3748#issuecomment-396727910:18,test,test,18,https://hail.is,https://github.com/hail-is/hail/issues/3748#issuecomment-396727910,1,['test'],['test']
Testability,And a typical interaction for a current 2.0.2 user:. ```bash; dking@wmb16-359 # gradle compileScala . FAILURE: Build failed with an exception. * Where:; Build file '/Users/dking/projects/hail2/build.gradle' line: 39. * What went wrong:; A problem occurred evaluating root project 'hail'.; > Please generate a gradle.properties file first by executing ./configure. * Try:; Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. BUILD FAILED. Total time: 1.413 secs; 1 dking@wmb16-359 # ./configure; With what version of Spark will you run Hail? (default: 2.0.2); ; using default version: 2.0.2; dking@wmb16-359 # gradle compileScala; The Task.leftShift(Closure) method has been deprecated and is scheduled to be removed in Gradle 5.0. Please use Task.doLast(Action) instead.; at build_2mbp15794fq4sj14khxclz0wz.run(/Users/dking/projects/hail2/build.gradle:168); :compileJava UP-TO-DATE; :nativeLib; (cd libsimdpp-2.0-rc2 && cmake .); -- Configuring done; -- Generating done; -- Build files have been written to: /Users/dking/projects/hail2/src/main/c/libsimdpp-2.0-rc2; :compileScala UP-TO-DATE. BUILD SUCCESSFUL. Total time: 4.418 secs,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1613#issuecomment-290201637:471,log,log,471,https://hail.is,https://github.com/hail-is/hail/pull/1613#issuecomment-290201637,1,['log'],['log']
Testability,"And conversely, the fact that test_table is split up suggests to me that table.py should probably be split to match. But this pr should probably stick to test reorganization.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3887#issuecomment-402166053:154,test,test,154,https://hail.is,https://github.com/hail-is/hail/pull/3887#issuecomment-402166053,1,['test'],['test']
Testability,"And here's a dev deploy that runs the dataproc tests. Don't approve until these tests pass! We don't run them on ordinary PRs because they're expensive and slow. We do run them on main commits. For this PR, the chance of having broken dataproc is high enough that we should ensure the tests pass before merging into main. https://ci.hail.is/batches/8121061",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14158#issuecomment-1930642516:47,test,tests,47,https://hail.is,https://github.com/hail-is/hail/pull/14158#issuecomment-1930642516,3,['test'],['tests']
Testability,"And if you have performance benchmarks already, make a note of them here.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1884#issuecomment-304078746:28,benchmark,benchmarks,28,https://hail.is,https://github.com/hail-is/hail/pull/1884#issuecomment-304078746,1,['benchmark'],['benchmarks']
Testability,"And indeed:. > Cluster name 'ci-test-7ncBRTSJAgu1t8kTtltIXse5A1RwFFih0cIBma6T' must match pattern `(?:[a-z](?:[-a-z0-9]{0,49}[a-z0-9])?)`. And indeed, no upper case.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4241#issuecomment-417797285:32,test,test-,32,https://hail.is,https://github.com/hail-is/hail/pull/4241#issuecomment-417797285,1,['test'],['test-']
Testability,And let there be tests!. @patrick-schultz sending to you since Tim is a bit overloaded on PRs.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12768#issuecomment-1478134967:17,test,tests,17,https://hail.is,https://github.com/hail-is/hail/pull/12768#issuecomment-1478134967,1,['test'],['tests']
Testability,"And the block it's failing on:. ```; if not args.skip_filtering:; pruned_mt = hl.read_matrix_table(qc_mt_path('joint', ld_pruned=True)); exome_project_table = hl.read_table(qc_ht_path('exomes', 'hard_filters')).select('data_type', 's', 'project_id'); genome_project_table = hl.read_table(qc_ht_path('genomes', 'hard_filters')).select('data_type', 's', 'project_id'); project_table = exome_project_table.union(genome_project_table); exome_pop_table = hl.read_table(qc_ht_path('exomes', 'pop_platform')).select('data_type', 's', 'pop'); genome_pop_table = hl.read_table(qc_ht_path('genomes', 'pop_platform')).select('data_type', 's', 'pop'); pop_table = exome_pop_table.union(genome_pop_table); pop_table = pop_table.annotate(project_id=project_table[pop_table.key].project_id); pruned_mt = pruned_mt.annotate_cols(meta=pop_table[pruned_mt.col_key]); variants, samples = pruned_mt.count(); logger.info(f'{samples} samples, {variants} variants found in original joint MT'). if args.population == 'all':; sample_criteria = True; elif args.population == 'eur':; sample_criteria = (pruned_mt.meta.pop == ""nfe"") | (pruned_mt.meta.pop == ""fin""); else:; sample_criteria = pruned_mt.meta.pop == args.population. pruned_mt = pruned_mt.filter_cols(sample_criteria); variants, samples = pruned_mt.count(); logger.info(f'{samples} samples, {variants} variants found in {args.population} in joint MT'). pca_mt, related_mt = split_mt_by_relatedness(pruned_mt). pca_mt = pca_mt.filter_rows((hl.agg.mean(pca_mt.GT.n_alt_alleles()) / 2 > 0.001) &; (hl.agg.fraction(hl.is_defined(pca_mt.GT)) > 0.999)); pca_mt = hl.ld_prune(pca_mt, r2=0.1, n_cores=args.num_cores); related_mt = related_mt.filter_rows(hl.is_defined(pca_mt[related_mt.row_key, :])); pca_mt.write(f""{qc_temp_data_prefix('joint')}.{args.population}.unrelated.filtered.mt"", args.overwrite); related_mt.write(f""{qc_temp_data_prefix('joint')}.{args.population}.related.filtered.mt"", args.overwrite). ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3446#issuecomment-384672067:888,log,logger,888,https://hail.is,https://github.com/hail-is/hail/issues/3446#issuecomment-384672067,2,['log'],['logger']
Testability,"And we have linear mixed regression. So I consider this closed as further single-variant linear and logistic methods will be by demand, not by EPACTS support.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/133#issuecomment-279516849:100,log,logistic,100,https://hail.is,https://github.com/hail-is/hail/issues/133#issuecomment-279516849,1,['log'],['logistic']
Testability,"And we plan to enable the test long-term in the follow up PR, right?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8960#issuecomment-644218677:26,test,test,26,https://hail.is,https://github.com/hail-is/hail/pull/8960#issuecomment-644218677,1,['test'],['test']
Testability,AndComputeWithIndex$3$adapted(ServiceBackend.scala:114); E 	at is.hail.backend.service.ServiceBackend$$anon$2.$anonfun$call$1(ServiceBackend.scala:122); E 	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23); E 	at is.hail.services.package$.retryTransientErrors(package.scala:124); E 	at is.hail.backend.service.ServiceBackend$$anon$2.call(ServiceBackend.scala:122); E 	at is.hail.backend.service.ServiceBackend$$anon$2.call(ServiceBackend.scala:119); E 	at java.util.concurrent.FutureTask.run(FutureTask.java:266); E 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149); E 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624); E 	at java.lang.Thread.run(Thread.java:750); E ; E ; E ; E ; E Hail version: 0.2.115-f6017673dbb6; E Error summary: RuntimeException: Stream is already closed. /usr/local/lib/python3.8/dist-packages/hail/backend/service_backend.py:477: FatalError; ------------------------------ Captured log call -------------------------------; INFO batch_client.aioclient:aioclient.py:753 created batch 3776913; INFO batch_client.aioclient:aioclient.py:770 updated batch 3776913; INFO batch_client.aioclient:aioclient.py:770 updated batch 3776913; INFO batch_client.aioclient:aioclient.py:770 updated batch 3776913; INFO batch_client.aioclient:aioclient.py:770 updated batch 3776913; INFO batch_client.aioclient:aioclient.py:770 updated batch 3776913; INFO batch_client.aioclient:aioclient.py:770 updated batch 3776913; INFO batch_client.aioclient:aioclient.py:770 updated batch 3776913; INFO batch_client.aioclient:aioclient.py:770 updated batch 3776913; INFO backend.service_backend:java.py:190 krylov_factorization: Beginning iteration 1/4; INFO batch_client.aioclient:aioclient.py:770 updated batch 3776913; INFO backend.service_backend:java.py:190 krylov_factorization: Beginning iteration 2/4; INFO batch_client.aioclient:aioclient.py:770 updated batch 3776913; INFO backend.service_backend:java.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12976:23426,log,log,23426,https://hail.is,https://github.com/hail-is/hail/issues/12976,1,['log'],['log']
Testability,"AnnotateAllelesExpr, FilterAlleles and SplitMulti entrypoints moved to method objects.; Removed wasSplit from MatrixTable. Methods that require biallelics are only checked in python using the @require_biallelic decorator. They are checked every time.; Removed user-facing verify_biallelic.; Removed filter_multi in favor of filter_variants_expr('v.isBiallelic').; Renamed annotate_alleles_expr_generic => annotate_alleles_expr and annotate_alleles_expr => annotate_alleles_expr_hts, similarly for split_multi and filter_alleles.; Moved the _hts variants to Python, left duplicate Scala versions where needed.; Fixed bug in filter_alleles related to moving variants. This wasn't caught by gen-based tests because they rarely generate examples with duplicate loci.; Moved annotate_alleles tests to python. Each time we move a test to Python, an angel gets its wings.; Don't filter multi-allelics in ld_prune since it is marked as requiring biallelics. The change to not check biallelics in scala is potentially controversial. I appreciate your thoughts on that, @tpoterba.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2603:698,test,tests,698,https://hail.is,https://github.com/hail-is/hail/pull/2603,3,['test'],"['test', 'tests']"
Testability,Another attempt at getting the batch ui up. Add ui tests (just verify successful status code) to hopefully reduce the iteration time.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6209:51,test,tests,51,https://hail.is,https://github.com/hail-is/hail/pull/6209,1,['test'],['tests']
Testability,"Another set of eyes on this would be great. My current thoughts on this:. I only looked at the failure in PCA. I was never able to reproduce. My next step to try to reproduce was to run PCA on Lindo's full dataset on dataproc (can't use batch because the error is in spark PCA). I did look carefully through the stack trace, trying to understand what could possibly be happening. The number 177860 from the error isn't either matrix dimension, which is 210234 by 8893. Everything in `org.apache.spark.mllib.linalg.EigenValueDecomposition$.symmetricEigs(EigenValueDecomposition.scala:106)` is independent of the number of rows, so only the number 8893 of cols should be relevent. I wrote a simple test to execute spark PCA with 8893 rows in scala, so I could step through with a debugger:; ```scala; var mt = rangeMatrix(10000, 8893); mt = MatrixMapEntries(mt, InsertFields(Ref(""g"", mt.typ.entryType), Seq(""a"" -> F64(1)))); val t = MatrixToTableApply(mt, PCA(""a"", 10, false)); val n = TableToValueApply(t, ForceCountTable()); assertEvalsTo(n, 8893L); ```; The array `v` in `symmetricEigs` has length 177860 = 8893*20, and I didn't find anything else with that size. The only line I could find that could generate an exception that looks like this is line 555 of `dev.ludovic.netlib.arpack.AbstractARPACK.dsaupd`; ```scala; public void dsaupd(org.netlib.util.intW ido, String bmat, int n, String which, int nev, org.netlib.util.doubleW tol, double[] resid, int offsetresid, int ncv, double[] v, int offsetv, int ldv, int[] iparam, int offsetiparam, int[] ipntr, int offsetipntr, double[] workd, int offsetworkd, double[] workl, int offsetworkl, int lworkl, org.netlib.util.intW info) {; if (debug) System.err.println(""dsaupd"");; checkArgument(""DSAUPD"", 2, lsame(""I"", bmat) || lsame(""G"", bmat));; checkArgument(""DSAUPD"", 3, n >= 0);; checkArgument(""DSAUPD"", 4, lsame(""LA"", which) || lsame(""SA"", which) || lsame(""LM"", which) || lsame(""SM"", which) || lsame(""BE"", which));; checkArgument(""DSAUPD"", 5, 0 < ne",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13688#issuecomment-1760360313:696,test,test,696,https://hail.is,https://github.com/hail-is/hail/issues/13688#issuecomment-1760360313,1,['test'],['test']
Testability,"Another strange dataproc failure:. ```; + cluster submit ci-test-e8jon1wrnx2o python/cluster-tests/cluster-read-vcfs-check.py; Job [38fe2b2b5b92430d9961e3226e0c0731] submitted.; Waiting for job output...; WARNING: Job terminated, but output did not finish streaming.; ERROR: (gcloud.dataproc.jobs.submit.pyspark) Job [38fe2b2b5b92430d9961e3226e0c0731] failed with error:; Task not found; ```. I'm not even sure what a task is in this context. Will bump to retest.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6010#issuecomment-489360265:60,test,test-,60,https://hail.is,https://github.com/hail-is/hail/pull/6010#issuecomment-489360265,2,['test'],"['test-', 'tests']"
Testability,"Another try at #10796. It's all the same excpet I've fixed the `test_cant_submit_to_default_with_other_ns_creds` test, which had been wiping the `deploy-config.json` after trying to read AND write to it. Now the test tries to change the `default_namespace` to `""default""`. This should succeed in the default namespace but is expected to fail in other namespaces.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10854:113,test,test,113,https://hail.is,https://github.com/hail-is/hail/pull/10854,2,['test'],['test']
Testability,Any info from the log file? Spark is usually pretty noisy about what it's up to,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/10832#issuecomment-914321577:18,log,log,18,https://hail.is,https://github.com/hail-is/hail/issues/10832#issuecomment-914321577,1,['log'],['log']
Testability,"Any page that was not a root page did not render properly because it; pointed to relative locations for the css and js resources. Moreover,; the 404 page incorrectly used a relative load for the navbar. These; changes change the template.xslt to use an absolute; protocol-agnostic (useful for testing locally without TLS/SSL) URL and; change 404.xslt to use an absolute load of the navbar. Currently, 404 is the only page that might appear at a non-root URL.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4936:293,test,testing,293,https://hail.is,https://github.com/hail-is/hail/pull/4936,1,['test'],['testing']
Testability,"Anyone using recent versions of the hail-base image to connect to Google Storage has encountered MethodNotFound errors like this:; ```; Activated service account credentials for: [dpalmer-o8fe7@hail-vdc.iam.gserviceaccount.com]; 2020-03-23 20:00:58 WARN NativeCodeLoader:62 - Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).; Initializing Spark and Hail with default parameters...; Running on Apache Spark version 2.4.0; SparkUI available at http://59dd09c396e8:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.34-2684f0214a05; LOGGING: writing to /hail-20200323-2000-0.2.34-2684f0214a05.log; Traceback (most recent call last):; File ""/scripts/hail_test.py"", line 3, in <module>; bam = hl.import_table('gs://dalio_bipolar_w1_w2_hail_02/analysis/gene_sets/BP_including_BPSCZ_MAC5_gene_set_counts_per_sample.tsv'); File ""</usr/local/lib/python3.6/dist-packages/decorator.py:decorator-gen-1276>"", line 2, in import_table; File ""/hail/python/hail/typecheck/check.py"", line 585, in wrapper; return __original_func(*args_, **kwargs_); File ""/hail/python/hail/methods/impex.py"", line 1511, in import_table; t = Table(TableRead(tr)); File ""/hail/python/hail/table.py"", line 334, in __init__; self._type = self._tir.typ; File ""/hail/python/hail/ir/base_ir.py"", line 303, in typ; self._compute_type(); File ""/hail/python/hail/ir/table_ir.py"", line 215, in _compute_type; self._type = Env.backend().table_type(self); File ""/hail/python/hail/backend/backend.py"", line 121, in table_type; jir = self._to_java_ir(tir); File ""/hail/python/hail/backend/backend.py"", line 105, in _to_java_ir; ir._jir = ir.parse(r(ir), ir_map=r.jirs); File ""/hail/python/hail/ir/base_ir.py"", line 311, in parse; return Env.hail().expr.ir.IRParser.parse_table_ir(code, ref_map, ir_map); File ""/spark-2.4.0-b",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8343:395,log,log,395,https://hail.is,https://github.com/hail-is/hail/issues/8343,4,"['LOG', 'log']","['LOGGING', 'log', 'logging']"
Testability,"Apologies for the size, this PR got a bit out of hand. Let me know if you want me to try to break it up. Changes:; - Use custom status for pods, stored in pod and job tables as json. See Pod.status and Container.status in worker.py for the format. Example at the end. Note, ""container_statuses"" items have a field ""container_status"", because container is used in two ways: as a substep of a pod/job, and as docker container. My last renaming proposal got shot down, but we clearly need to improve this in a later PR.; - Heavily reworked worker.py. I believe this fixes https://github.com/hail-is/hail/issues/7350. The main design idea is to having all state creation and cleanup in Pod.run and Container.run.; - worker: Just support pods/status and pods/log, not container level status or logs.; - Pod now writes final status, not containers. Individual containers write their logs.; - I time all the steps of the Pod container (creating, starting, running, uploading log, etc.) with a timing called ""runtime"" which is how long the docker container itself took to start/run. That's usually 4-6 seconds. However, if you log into a machine and run `docker run --rm ubuntu:18.04 echo hi` it takes 1-2 seconds. It would be good to find out where the extra 3-4 seconds are coming from (I feel like @jigold might have some insight into this. Comparing our container config to the docker command line's might be useful here.); - Stop using (value, err) style exception handling. I think we should be able to design this with very little explicit exception handling, mainly in critical blocks to maintain the program invariants.; - Pods can have error status in 1 of 3 ways: the pod itself failed (e.g. couldn't read k8s secrets), one of the pod containers error out (e.g. pull failed due to invalid image), and the docker container finished but the final container status had an ""Error"" field. Next step is to remove pods and merge the pod and job tables. ```; {; ""name"": ""batch-2-job-1"",; ""batch_id"": 2,; ""j",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7354:754,log,log,754,https://hail.is,https://github.com/hail-is/hail/pull/7354,4,['log'],"['log', 'logs']"
Testability,"Apologies, I should have caught this in review. This at least lets you filter the tests, but they should also be properly executable. I'll fix that.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8557#issuecomment-614089797:82,test,tests,82,https://hail.is,https://github.com/hail-is/hail/pull/8557#issuecomment-614089797,1,['test'],['tests']
Testability,"Apologies, should have caught this. I think we can improve the UI testing picture. In particular, would be useful to have a staging area (we may already entirely have this with dev namespace, I would like to have a shared space for the reviewer (and myself) to play with the implementation issued in the PR, maybe a link in CI to the deployed web app?), test data (so we can see the table filled), and a local dev strategy with hot reloading (make a change, script recompiles and reloads your browser). I also need to be more familiar with developing behind dev namespaces. Before:; <img width=""1484"" alt=""Screenshot 2020-01-29 22 56 56"" src=""https://user-images.githubusercontent.com/5543229/73418742-a79baf80-42ea-11ea-990d-c7ce43660c90.png"">. After:; <img width=""1480"" alt=""Screenshot 2020-01-29 22 56 31"" src=""https://user-images.githubusercontent.com/5543229/73418726-9a7ec080-42ea-11ea-8453-7a0956dc3c67.png"">",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8000:66,test,testing,66,https://hail.is,https://github.com/hail-is/hail/pull/8000,2,['test'],"['test', 'testing']"
Testability,"Apparently Hail needs to be installed even to build the docs without tests? I don't know why but I ran into this today. Seems wrong that we need it installed to build the docs, but 🤷‍♂",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6996:69,test,tests,69,https://hail.is,https://github.com/hail-is/hail/pull/6996,1,['test'],['tests']
Testability,"Appears unrelated to hail version. JAR and ZIP:; ```; gs://hail-common/builds/0.2/jars/hail-0.2-3b1cb0772301-Spark-2.2.0.jar; gs://hail-common/builds/0.2/python/hail-0.2-3b1cb0772301.zip; ```. In Google Chrome we see 404s for; ```; GET http://localhost:8123/spark/api/v1/applications; ```; which happened repeatedly if you try to evaluate a cell. On the leader node of the spark cluster, `journalctl -u jupyter` shows:; ```; -- Logs begin at Fri 2019-03-01 19:54:49 UTC, end at Fri 2019-03-01 20:11:51 UTC. --; Mar 01 19:59:03 dk-m systemd[1]: Started Jupyter Notebook.; Mar 01 19:59:04 dk-m python[5149]: [I 19:59:04.630 NotebookApp] Writing notebook server cookie secret to /root/.local/share/jupyter/runtime/notebook_cookie_secret; Mar 01 19:59:04 dk-m python[5149]: [W 19:59:04.796 NotebookApp] All authentication is disabled. Anyone who can connect to this server will be able to run code.; Mar 01 19:59:04 dk-m python[5149]: [D 19:59:04.802 NotebookApp] Paths used for configuration of jupyter_notebook_config:; Mar 01 19:59:04 dk-m python[5149]: /etc/jupyter/jupyter_notebook_config.json; Mar 01 19:59:04 dk-m python[5149]: [D 19:59:04.803 NotebookApp] Paths used for configuration of jupyter_notebook_config:; Mar 01 19:59:04 dk-m python[5149]: /usr/local/etc/jupyter/jupyter_notebook_config.json; Mar 01 19:59:04 dk-m python[5149]: [D 19:59:04.804 NotebookApp] Paths used for configuration of jupyter_notebook_config:; Mar 01 19:59:04 dk-m python[5149]: /opt/conda/etc/jupyter/jupyter_notebook_config.json; Mar 01 19:59:04 dk-m python[5149]: [D 19:59:04.804 NotebookApp] Paths used for configuration of jupyter_notebook_config:; Mar 01 19:59:04 dk-m python[5149]: /root/.jupyter/jupyter_notebook_config.json; Mar 01 19:59:04 dk-m python[5149]: [W 19:59:04.904 NotebookApp] Error loading server extension jupyter_spark; Mar 01 19:59:04 dk-m python[5149]: Traceback (most recent call last):; Mar 01 19:59:04 dk-m python[5149]: File ""/opt/conda/lib/python3.6/site-packages/notebook/notebookapp.p",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5505:428,Log,Logs,428,https://hail.is,https://github.com/hail-is/hail/issues/5505,1,['Log'],['Logs']
Testability,"Apply the deploy logic to testing. `TARGET_BRANCH` is set by the ci, see: https://github.com/hail-is/ci/blob/master/pr-build-script. Renamed needs-redeploy.py => project-changed.py.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4404:17,log,logic,17,https://hail.is,https://github.com/hail-is/hail/pull/4404,2,"['log', 'test']","['logic', 'testing']"
Testability,Apply the same logic as used in batch to gateway to get better cache behavior.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5807:15,log,logic,15,https://hail.is,https://github.com/hail-is/hail/pull/5807,1,['log'],['logic']
Testability,ApplyBinaryPrimOp and ApplyUnaryPrimOp IRSuite Tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4466:47,Test,Tests,47,https://hail.is,https://github.com/hail-is/hail/pull/4466,1,['Test'],['Tests']
Testability,"Approved, but it seems like this test is in fact passing the local backend, so you remove `fails_local_backend`.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11563#issuecomment-1065535308:33,test,test,33,https://hail.is,https://github.com/hail-is/hail/pull/11563#issuecomment-1065535308,1,['test'],['test']
Testability,"Approving since the semantics didn't change, but we're not running the R test?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6194#issuecomment-496509626:73,test,test,73,https://hail.is,https://github.com/hail-is/hail/pull/6194#issuecomment-496509626,1,['test'],['test']
Testability,Are the benchmarks you posted on #11061 for this branch?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11060#issuecomment-971550658:8,benchmark,benchmarks,8,https://hail.is,https://github.com/hail-is/hail/pull/11060#issuecomment-971550658,1,['benchmark'],['benchmarks']
Testability,"Are there tests for the existence of these files? (I can see how that would be counterproductive if tests fail because the files move, but on the other hand, it's information you may want to know - maybe an ""optional"" test?)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9693#issuecomment-724919692:10,test,tests,10,https://hail.is,https://github.com/hail-is/hail/pull/9693#issuecomment-724919692,3,['test'],"['test', 'tests']"
Testability,"Argparse automatically transforms internal dashes of argument names into underscores for optional arguments, but [not for positional arguments](https://bugs.python.org/issue15125), so this currently breaks on line 87 with `args.login_id` not being a valid attribute. I tested that this change works with the minimal example:. ```python; import argparse. def main():; parser = argparse.ArgumentParser(description='foo'). parser.add_argument('username', help='The username of the initial user.'); parser.add_argument('login_id', metavar='login-id', help='The login id of the initial user.'). args = parser.parse_args(). print(args.username, '\t', args.login_id). main(); ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11171:269,test,tested,269,https://hail.is,https://github.com/hail-is/hail/pull/11171,3,"['log', 'test']","['login', 'login-id', 'tested']"
Testability,"Around 0348 I was executing `curl ci.hail.is/status` and repeatedly getting error responses, unfortunately I lost the error responses (that curl was piping into something that blew up on non-json data). The most recent response was a gateway timeout. The most recent logs are:. ```; INFO	| 2018-10-23 03:41:29,166 	| prs.py 	| heal_target:139 | deploying Nealelab/cloudtools:master; INFO	| 2018-10-23 03:41:29,350 	| prs.py 	| try_deploy:179 | already deployed c49bb905d3ba4d791150c3627c3c9ebde006a55a; INFO	| 2018-10-23 03:41:29,351 	| ci.py 	| <lambda>:366 | 127.0.0.1 ""POST /heal HTTP/1.1"" 200 -; INFO	| 2018-10-23 03:42:04,032 	| ci.py 	| <lambda>:366 | 10.56.143.15 ""POST /test-ci-6oi3jysu.batch-pods/push HTTP/1.0"" 404 -; INFO	| 2018-10-23 03:42:04,196 	| ci.py 	| <lambda>:366 | 10.56.143.15 ""POST /test-ci-6oi3jysu.batch-pods/pull_request HTTP/1.0"" 404 -; INFO	| 2018-10-23 03:42:04,677 	| ci.py 	| <lambda>:366 | 10.56.143.15 ""POST /test-ci-6oi3jysu.batch-pods/pull_request_review HTTP/1.0"" 404 -; INFO	| 2018-10-23 03:42:37,944 	| ci.py 	| <lambda>:366 | 127.0.0.1 ""POST /refresh_github_state HTTP/1.1"" 200 -; ERROR	| 2018-10-23 03:48:38,045 	| ci.py 	| polling_event_loop:357 | Could not poll due to exception: HTTPConnectionPool(host='127.0.0.1', port=5000): Read timed out. (read timeout=360); ```; [hail-ci.log](https://github.com/hail-is/hail/files/2504423/hail-ci.log)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4607:267,log,logs,267,https://hail.is,https://github.com/hail-is/hail/issues/4607,6,"['log', 'test']","['log', 'logs', 'test-ci-']"
Testability,As I briefly mentioned over Zulip we’d may want to increase the proxy_timeout above 60s default (it appears you hit the limit in your test). There may be some other parameters to address as well,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6454#issuecomment-505182631:134,test,test,134,https://hail.is,https://github.com/hail-is/hail/pull/6454#issuecomment-505182631,1,['test'],['test']
Testability,"As a step towards coralling the specification of the binding structure of the IR into one place, this rewrites `Bindings` to use only a single method of the `GenericBindingEnv` interface, `newBlock`, which therefore captures all possibilities of how a node can modify its parent's environment in a child. Later work refactors this to return an object encoding this modification, instead of returning a modified environment, which allows the caller complete flexibility in how to maintain an environment appropriately for their use case. This PR leaves in the old `Bindings` implementation, with an assertion that they agree. The PR stacked above this, #14495, deletes the old implementation. This way CI asserts that this refactoring hasn't changed any behavior.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14475:598,assert,assertion,598,https://hail.is,https://github.com/hail-is/hail/pull/14475,2,['assert'],"['assertion', 'asserts']"
Testability,"As an example of this slash issue, the following config (deployed right now) doesn't work. ```; location /monitoring/grafana {; proxy_pass http://grafana/;; }. location /monitoring/grafana/ {; proxy_pass http://grafana/;; }; ```. Routing to https://internal.hail.is/monitoring/grafana appears to not hit the router (`k logs router-759c675b98-8mp67 -n monitoring -f`). Suggests problem is upstream of router-759. https://internal.hail.is/monitoring/grafana/ works fine, as expected. Trailing slash on GF_SERVER_ROOT_URL has no effect, as expect, since before grafana gets anything, the router should receive the request.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7015#issuecomment-540645336:319,log,logs,319,https://hail.is,https://github.com/hail-is/hail/pull/7015#issuecomment-540645336,1,['log'],['logs']
Testability,"As an extra safety net that this PR doesn't change any binding semantics, the ""split up matrix/table/value"" commit passed ci with an assertion on every bindings query that the old and new implementations agree.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14404#issuecomment-2027600400:133,assert,assertion,133,https://hail.is,https://github.com/hail-is/hail/pull/14404#issuecomment-2027600400,1,['assert'],['assertion']
Testability,"As it stands, assumes canonical-only ptypes. Should stub this.virtualType == that.virtualType, or remove it altogether in favor of having callers use the comparison directly. Once requiredeness removed from virtual types.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7926:52,stub,stub,52,https://hail.is,https://github.com/hail-is/hail/issues/7926,1,['stub'],['stub']
Testability,"As mentioned in #14580, IR can get quite big, especially as it can contain an arbitrary amount of encoded literals from the user's python session. Tested manually, by making a very very large literal, running a pipeline with it on 0.2.132, observing the failure seen in #14650, then running the same pipeline with this change, and it succeeds as normal. Resolves #14650",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14651:147,Test,Tested,147,https://hail.is,https://github.com/hail-is/hail/pull/14651,1,['Test'],['Tested']
Testability,"As of #14056, there is ambiguity when referring to the configuration value `domain`. - In the `global-config`, this is the root domain of the entire hail system. This is the same across all namespaces.; - In the `deploy-config` of a namespace N, this refers to the root domain served by applications of that namespace. In production (namespace `default`), this is `hail.is`, the same as the root domain of the entire system. In other namespaces, this is `internal.hail.is`. Setting the `HAIL_DOMAIN` environment variable in the k8s deployments from the `global-config` overrides what should be `internal.hail.is` to `hail.is`, breaking any form of redirection. There's really no need to set this environment variable at all, as its value can be derived from the `deploy-config`. This PR removes that environment variable. I tested this in my development namespace.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14164:824,test,tested,824,https://hail.is,https://github.com/hail-is/hail/pull/14164,1,['test'],['tested']
Testability,"As part of our work with generating All of Us datasets, we needed to copy around a million gcs objects. Our `Copier` infrastructure 'should' be able to handle that, but it kept falling with robustness issues. What finally worked was using GCS's [rewrite](https://cloud.google.com/storage/docs/json_api/v1/objects/rewrite) api. This allowed us to copy data without reading it, allowing the copies to complete in a fraction of the time while also reducing bandwidth needs. There are two components to this:; 1. Research what specific APIs we can take advantage of; 2. Update our code to use them when we can, for the `Copier`, and the new sync tool (#14248). Here's the code I used for making the rewrite requests for merging a set of matrix tables together, the progress bar code was for visibility. ```python3; async def rewrite(; gfs: GoogleStorageAsyncFS,; src: str,; dst: str,; progress: Optional[rich.progress.Progress] = None,; file_tid: Optional[rich.progress.TaskID] = None,; requests_tid: Optional[rich.progress.TaskID] = None,; ):; assert (progress is None) == (file_tid is None) == (requests_tid is None); src_bkt, src_name = gfs.get_bucket_and_name(src); dst_bkt, dst_name = gfs.get_bucket_and_name(dst); if not src_name:; raise IsABucketError(src); if not dst_name:; raise IsABucketError(dst); client = gfs._storage_client; path = (; f'/b/{src_bkt}/o/{urllib.parse.quote(src_name, safe="""")}/rewriteTo'; f'/b/{dst_bkt}/o/{urllib.parse.quote(dst_name, safe="""")}'; ); kwargs = {'json': '', 'params': {}}; client._update_params_with_user_project(kwargs, src_bkt); response = await retry_transient_errors(client.post, path, **kwargs); if progress is not None:; progress.update(requests_tid, advance=1); while not response['done']:; kwargs['params']['rewriteToken'] = response['rewriteToken']; response = await retry_transient_errors(client.post, path, **kwargs); if progress is not None:; progress.update(requests_tid, advance=1); if progress is not None:; progress.update(file_tid, advance=1)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14601:1041,assert,assert,1041,https://hail.is,https://github.com/hail-is/hail/issues/14601,1,['assert'],['assert']
Testability,"As part of the ci2 work, I want to set things up so it is possible (and easy!) to spin up independent copies of the entire stack for development, testing and staging. To that end, I'm breaking apart gateway, into gateway and router. Each publicly accessible namespace will have a router, and gateway will only be responsible for stripping encryption and forwarding requests to these routers. Requests like `...mynamespace.internal.hail.is` will get forwarded to the router for `mynamespace`. All other requests will get forwarded to the default namespace router. I will so modify gateway in another PR.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5867:146,test,testing,146,https://hail.is,https://github.com/hail-is/hail/pull/5867,1,['test'],['testing']
Testability,As written:. - `make -C hail doctest` runs the normal tests.; - `test_python_docs` only tests the RST files (e.g. [see this deploy](https://batch.hail.is/batches/8097884/jobs/127)),MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14112:54,test,tests,54,https://hail.is,https://github.com/hail-is/hail/pull/14112,2,['test'],['tests']
Testability,Assertion Error when reading table,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4325:0,Assert,Assertion,0,https://hail.is,https://github.com/hail-is/hail/issues/4325,1,['Assert'],['Assertion']
Testability,Assertion error in RVB,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7693#issuecomment-563585896:0,Assert,Assertion,0,https://hail.is,https://github.com/hail-is/hail/pull/7693#issuecomment-563585896,1,['Assert'],['Assertion']
Testability,Assertion error related to ndarray/extract,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8325:0,Assert,Assertion,0,https://hail.is,https://github.com/hail-is/hail/issues/8325,1,['Assert'],['Assertion']
Testability,Assertion error when filtering rows based on locus position,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12280:0,Assert,Assertion,0,https://hail.is,https://github.com/hail-is/hail/issues/12280,1,['Assert'],['Assertion']
Testability,Assertion error when using mt.annotate_rows() with different partition keys,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3119:0,Assert,Assertion,0,https://hail.is,https://github.com/hail-is/hail/issues/3119,1,['Assert'],['Assertion']
Testability,AssertionError,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3074:0,Assert,AssertionError,0,https://hail.is,https://github.com/hail-is/hail/issues/3074,3,['Assert'],['AssertionError']
Testability,AssertionError after several variant QC steps.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3063:0,Assert,AssertionError,0,https://hail.is,https://github.com/hail-is/hail/issues/3063,1,['Assert'],['AssertionError']
Testability,AssertionError on MendelErrors,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3039:0,Assert,AssertionError,0,https://hail.is,https://github.com/hail-is/hail/issues/3039,1,['Assert'],['AssertionError']
Testability,AssertionError on column join,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3235:0,Assert,AssertionError,0,https://hail.is,https://github.com/hail-is/hail/issues/3235,1,['Assert'],['AssertionError']
Testability,AssertionError on dropping field that was a key,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8751:0,Assert,AssertionError,0,https://hail.is,https://github.com/hail-is/hail/issues/8751,1,['Assert'],['AssertionError']
Testability,AssertionError on key_by,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3516:0,Assert,AssertionError,0,https://hail.is,https://github.com/hail-is/hail/issues/3516,1,['Assert'],['AssertionError']
Testability,AssertionError when filtering columns of a MatrixTable,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3173:0,Assert,AssertionError,0,https://hail.is,https://github.com/hail-is/hail/issues/3173,1,['Assert'],['AssertionError']
Testability,AssertionErrors are not caught,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1383:0,Assert,AssertionErrors,0,https://hail.is,https://github.com/hail-is/hail/pull/1383,1,['Assert'],['AssertionErrors']
Testability,Assertions.newAssertionFailedException$(Assertions.scala:527); 	at org.scalatest.testng.TestNGSuite.newAssertionFailedException(TestNGSuite.scala:67); 	at org.scalatest.Assertions$AssertionsHelper.macroAssert(Assertions.scala:501); 	at is.hail.io.fs.FSSuite.largeDirectoryOperations(FSSuite.scala:413); 	at is.hail.io.fs.FSSuite.largeDirectoryOperations$(FSSuite.scala:398); 	at is.hail.io.fs.GoogleStorageFSSuite.largeDirectoryOperations(GoogleStorageFSSuite.scala:10); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333). test is.hail.io.fs.GoogleStorage,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13827:1559,test,testng,1559,https://hail.is,https://github.com/hail-is/hail/issues/13827,1,['test'],['testng']
Testability,AssertionsHelper.macroAssert(Assertions.scala:501); at is.hail.io.fs.FSSuite.largeDirectoryOperations(FSSuite.scala:445); at is.hail.io.fs.FSSuite.largeDirectoryOperations$(FSSuite.scala:430); at is.hail.io.fs.GoogleStorageFSSuite.largeDirectoryOperations(GoogleStorageFSSuite.scala:10); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:498); at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:136); at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:658); at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:219); at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50); at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:923); at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:192); at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128); at java.util.ArrayList.forEach(ArrayList.java:1259); at org.testng.TestRunner.privateRun(TestRunner.java:808); at org.testng.TestRunner.run(TestRunner.java:603); at org.testng.SuiteRunner.runTest(SuiteRunner.java:429); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:423); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:383); at org.testng.SuiteRunner.run(SuiteRunner.java:326); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1249); at org.testng.TestNG.runSuitesLocally(TestNG.java:1169); at org.testng.TestNG.runSuites(TestNG.java:1092); at org.testng.TestNG,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547:1531,Test,TestInvoker,1531,https://hail.is,https://github.com/hail-is/hail/issues/13827#issuecomment-1957725547,1,['Test'],['TestInvoker']
Testability,Assigned Dan but feel free to look as well @cseed . Admittedly I'm not 100% sure that the CLI code is correct because I just changed it to make a request instead of just calling the function and I cannot test it until the endpoint exists.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6612#issuecomment-510549867:204,test,test,204,https://hail.is,https://github.com/hail-is/hail/pull/6612#issuecomment-510549867,1,['test'],['test']
Testability,"Assigning @tpoterba since he (and cotton) have the most context to review this. A few preliminaries:. 1. I noticed the proxy headers were not quite right when you're testing this without SSL or on some non-standard port. `$host` does not include the port, `$http_host` does. `$scheme` returns `http` or `https` depending on how the user connected to gateway; 2. The admin privilege check was too restrictive, if `delete_worker_pod` is called by `/new` there's no need to check admin privs; 3. I realized that the timeout logic wasn't quite right because a misconfigured gateway (I was testing with a broken gateway config) will return 5xx codes, but that doesn't mean the server is alive. We probably should error here, but I'm hesitant to add new error modes so close to a tutorial. Ok, how does this work? Basically, if the gateway cannot connect to the notebook pod, we intercept the error and redirect the user to the ""create new notebook"" webpage. That webpage deletes whatever remains of the users previous notebook pod & service. Here are the pieces:. 1. `recursive_error_pages on;` the internet suggests that without this we cannot use `error_page` with an ""internal"" rule (the `@` rules are internal rules that users cannot directly access); 2. `proxy_connect_timeout` defaults to 60s which is a shit user experience if your pod dies. Honestly, I might set this to 100ms. This is all inside a datacenter.; 3. `proxy_intercept_errors` permits us to use `error_page` with 5xx errors from failing to connect to the proxy. ---. I tested this with a pile of hacks to deploy this into an anonymous namespace in `vdc`. I'm not ready to PR those changes, they need a clean up before others use them. Sometime next week I hope to get that in. Getting it requires some restructuring of `vdc/` and `gateway/` to be more modular.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4974:166,test,testing,166,https://hail.is,https://github.com/hail-is/hail/pull/4974,4,"['log', 'test']","['logic', 'tested', 'testing']"
Testability,"Assigning to Daniel 2 because the scorecard beacon is tired. This removes the workshop login option (previously agreed upon with Cotton), which makes the login.html page totally useless; so I've converted the login link to hit the old /login POST endpoint, and converted the POST to a GET. I think this is semantically fine, because no credentials (or other data) is actually sent to that endpoint (as workshop password is kaput), making that endpoint solely issue a redirect. Since login.html is gone, I also no longer redirect to it. Instead, unauthorized users are redirected to /error, and I refactored this redirect into a function since it's now used identically in 2 places. I've also imported the jwt library, so that jwt.exceptions.InvalidTokenError is in scope, and made some minor cleanup. cc @cseed",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6078:87,log,login,87,https://hail.is,https://github.com/hail-is/hail/pull/6078,5,['log'],['login']
Testability,Assigning to Tim so it shows up in his review queue. He has some fixes he wanted to get released that probably need to be added to the change log.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12891#issuecomment-1514980397:142,log,log,142,https://hail.is,https://github.com/hail-is/hail/pull/12891#issuecomment-1514980397,1,['log'],['log']
Testability,"Assuming the tests are passing, this should be pretty close to being done. I propose we both sleep on it and relook at it tomorrow morning, triple check we're only modifying the `v3` tables and then merge it once we both feel good about it.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13213#issuecomment-1622103825:13,test,tests,13,https://hail.is,https://github.com/hail-is/hail/pull/13213#issuecomment-1622103825,1,['test'],['tests']
Testability,"At first glance, the tests look fine to me. More thorough tests could be done using the data files here; https://github.com/broadinstitute/picard/blob/e0bb690d57f73fd2495fc5a77b497e9696f51f81/src/test/java/picard/util/LiftoverVcfTest.java#L65-L99. The interface also looks fine in terms of a non-breaking way to add strand info.; Is the plan to use this to implement a hl.liftover(mt) function that includes the checks from https://github.com/broadinstitute/picard/blob/master/src/main/java/picard/vcf/LiftoverVcf.java#L350-L397 ?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4895#issuecomment-444648897:21,test,tests,21,https://hail.is,https://github.com/hail-is/hail/pull/4895#issuecomment-444648897,3,['test'],"['test', 'tests']"
Testability,At least the Batch tests are catching things. My change caused always_run jobs to not be run...,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6128#issuecomment-493586302:19,test,tests,19,https://hail.is,https://github.com/hail-is/hail/pull/6128#issuecomment-493586302,1,['test'],['tests']
Testability,"At some point (highly likely that it was the Ubuntu 20.04 -> 22.04 upgrade) Batch went from using cgroups v1 to cgroups v2 for setting containers' CPU and memory limits. We mostly don't touch cgroups, the container runtime handles that for us, but we poll the `cgroupfs` for recoding memory usage and CPU utilization. The accounting mechanism changed between v1 and v2 so batch was silently failing to collect these metrics. Deploying these changes into my namespace got me back the following plots (compiling hail):. <img width=""701"" alt=""Screenshot 2023-09-14 at 5 47 24 PM"" src=""https://github.com/hail-is/hail/assets/24440116/0f470e5a-7feb-4b9e-bac6-f560c8366d8e"">. The reason why we fail silently when the file doesn't exist is because we are letting the container runtime manage the cgroup, and there is a race condition between the container exiting + the cgroup getting destroyed and our polling of this file. We could probably do a better job reporting an error, like this though, perhaps logging errors if we fail to read this file more than X number of times.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13626:998,log,logging,998,https://hail.is,https://github.com/hail-is/hail/pull/13626,1,['log'],['logging']
Testability,"At some point in the distant past I fixed `refresh_review_state` (full state refresh from GH) but failed to fix `github_pull_request_review` (where web hooks come in). As a result, CI is very confused about https://github.com/hail-is/hail/pull/4644, wherein a `COMMENTED` review came in after a `APPROVED` review. I eliminated the duplicate, incorrect implementation of review status and replaced references to it with references to the correct (and tested) review status function.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4673:450,test,tested,450,https://hail.is,https://github.com/hail-is/hail/pull/4673,1,['test'],['tested']
Testability,"At some point, we should think about how to improve the discoverability and machine-verifiability of our APIs. Currently the tightest type of job log is rather complex. If the performance is OK, I think we should move towards classes that define the request and response types of each call. ---. The main difference is `hail-pip-install` having `retry`. If pip exits with a non-zero exit code, we'll just rerun the command exactly, at most four more times. This mitigates missing retry logic in `pip` itself. For example, [this job](https://ci.hail.is/batches/167314/jobs/27) failed because pip encountered a connection reset while downloading a file. Ideally, pip would simply retry the download. Since we don't control the pip source code, I use a retry that treats all of pip as a black box. There's definitely a failure mode: if you specify a package that doesn't exist, pip will error five times in a row and take ~30 seconds before the retry logic gives up. I'm OK with this because pip should basically never fail for legitimate reasons.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9906#issuecomment-775241278:146,log,log,146,https://hail.is,https://github.com/hail-is/hail/pull/9906#issuecomment-775241278,3,['log'],"['log', 'logic']"
Testability,"At time of writing dependabot doesn't have a great way to bulk update dependencies across unrelated lockfiles in the repo, which often require manual intervention because we assert that we're always using the same package version everywhere. It's also just a lot of noise and hogs CI time. We've decided to move to a periodic bulk-update process + using repo Security alerts.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14504:174,assert,assert,174,https://hail.is,https://github.com/hail-is/hail/pull/14504,1,['assert'],['assert']
Testability,Attempt to list files not deleted if deleteManyFiles test fails,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11869:53,test,test,53,https://hail.is,https://github.com/hail-is/hail/pull/11869,1,['test'],['test']
Testability,Auth's css is broken because the css isn't compiled in the docker image (something that the local dev server does not test). I deployed this into my namespace to make sure that the css inside the docker image works.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14615:118,test,test,118,https://hail.is,https://github.com/hail-is/hail/pull/14615,1,['test'],['test']
Testability,"Azure already has a Jupyter system in place, so I worked within that. As a result, I took a very different approach from `hailctl dataproc`. I'm not sure how many of the configuration settings done in `hailctl dataproc` are necessary in Azure. I also do not plan to add special support for any special parameters from Azure. If a user wants to, for example, configure auto-scaling, they can use pass through arguments. There are three files that need to be hosted somewhere: two startup scripts and an Azure-specific wheel file. For the startup scripts, I just rely on GitHub tagged raw files. For the wheel file, I placed it in hail common and use the public HTTP endpoint. For development, you have to manually upload the files you want to override and invoke `hailctl hdinsight` like this:; ```; hailctl hdinsight; start \; clustername \; password \; password \; storageaccount \; --install-hail-uri https://raw.githubusercontent.com/danking/hail/dk-hdinsight-test/hail/python/hailtop/hailctl/hdinsight/resources/install-hail.sh \; --install-native-deps-uri https://raw.githubusercontent.com/danking/hail/dk-hdinsight-test/hail/python/hailtop/hailctl/hdinsight/resources/install-native-deps.sh \; --wheel-uri https://storage.googleapis.com/hail-common/dking/hail-0.2.79-py3-none-any.whl; ```; We could make this easier, but I'd rather spend that time on the query service. cc: @jigold",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11180:963,test,test,963,https://hail.is,https://github.com/hail-is/hail/pull/11180,2,['test'],['test']
Testability,"Azure is currently running this internal-gateway/gateway, and PRs seem to be doing no worse, and sometimes better afaict, than the nginx in GCP, save for the Connection reset retrying which once in a handful of PRs will stall the test until timeout. If we decide to merge this I would want to watch a few subsequent PRs to confirm that they're not stalling and if so I would feel confident rolling out envoy to gcp as well (and can resize the k8s pool immediately after!)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12425#issuecomment-1303825690:230,test,test,230,https://hail.is,https://github.com/hail-is/hail/pull/12425#issuecomment-1303825690,1,['test'],['test']
Testability,Azure seems to have pervasively higher latency than GCP. This should reduce the amount of warning logs we receive.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12473:98,log,logs,98,https://hail.is,https://github.com/hail-is/hail/pull/12473,1,['log'],['logs']
Testability,BGEN benchmarks before/after:; ```; $ hb compare 0.2.61-ffa3169a657f-bgen-cb-before.json 0.2.61-126a8c8d5147-bgen-cb.json; Benchmark Name Ratio Time 1 Time 2; -------------- ----- ------ ------; import_bgen_force_count_all 98.0% 144.232 141.289; import_bgen_filter_count 97.9% 142.950 139.965; import_bgen_force_count_just_gp 96.1% 146.766 141.000; import_bgen_info_score 95.0% 197.271 187.353; ----------------------; Harmonic mean: 96.7%; Geometric mean: 96.7%; Arithmetic mean: 96.7%; Median: 97.0%; ```. I think this is within noise of no change.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9992:5,benchmark,benchmarks,5,https://hail.is,https://github.com/hail-is/hail/pull/9992,2,"['Benchmark', 'benchmark']","['Benchmark', 'benchmarks']"
Testability,"BLAS's DGEMM has an option for transposing input matrix, which is effectively just transposing. I've added support for this. It should save time and memory to not have to copy into column major format. . Didn't end up making my linear regression benchmark much faster, maybe 3%. It's using a bit less memory too.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10453:246,benchmark,benchmark,246,https://hail.is,https://github.com/hail-is/hail/pull/10453,1,['benchmark'],['benchmark']
Testability,BPE tests with timeouts need to explicitly cancel their jobs.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10761:4,test,tests,4,https://hail.is,https://github.com/hail-is/hail/pull/10761,1,['test'],['tests']
Testability,"Back to you, merged to master and passing all tests.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/136#issuecomment-184786953:46,test,tests,46,https://hail.is,https://github.com/hail-is/hail/pull/136#issuecomment-184786953,1,['test'],['tests']
Testability,"Back to you. I made some inline comments before starting review, see both. Test failure is due to not changing high_kin to related_pairs on the right hand side, etc. in doc example.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2148#issuecomment-326106858:75,Test,Test,75,https://hail.is,https://github.com/hail-is/hail/pull/2148#issuecomment-326106858,1,['Test'],['Test']
Testability,"Back to you. I've added `require(vds.wasSplit)` to LinearRegression, LogisticRegression, and LinearMixedRegression, ToNormalizedRowMatrix, ToNormalizedIndexedRowMatrix, ToHWENormalizedIndexedRowMatrix. I think this is more reasonable than a fatal since the existing fatals would be tripped through the Python or Scala APIs. I've also noted `// requires bi-allelic` above the corresponding functions in RegressionUtils.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1425#issuecomment-286551014:69,Log,LogisticRegression,69,https://hail.is,https://github.com/hail-is/hail/pull/1425#issuecomment-286551014,1,['Log'],['LogisticRegression']
Testability,"Back to you. Looks great! Still needs tests. Sounds like you have independent python code: put that in `src/test/resources` along with the output on a non-trivial example with missingness and compare against that. Finally, it would be good to have a graphical comparison with PLINK after these changes a la Kyle's plots from before.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/202#issuecomment-188772599:38,test,tests,38,https://hail.is,https://github.com/hail-is/hail/pull/202#issuecomment-188772599,2,['test'],"['test', 'tests']"
Testability,"Back to you. Overall, looks great, esp. the test vs R.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/455#issuecomment-232711401:44,test,test,44,https://hail.is,https://github.com/hail-is/hail/pull/455#issuecomment-232711401,1,['test'],['test']
Testability,Back to you. There's also an ExprSuite test failing due to the switch from Double to Int.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1733#issuecomment-299016246:39,test,test,39,https://hail.is,https://github.com/hail-is/hail/pull/1733#issuecomment-299016246,1,['test'],['test']
Testability,Balding-Nichols is used in `lmmreg` tests.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/32#issuecomment-279513351:36,test,tests,36,https://hail.is,https://github.com/hail-is/hail/issues/32#issuecomment-279513351,1,['test'],['tests']
Testability,Balding-Nichols test is failing. Perhaps the seed is not propagating to all generators now?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1086#issuecomment-260404138:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/1086#issuecomment-260404138,1,['test'],['test']
Testability,Bare asserts in Hail,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12952:5,assert,asserts,5,https://hail.is,https://github.com/hail-is/hail/issues/12952,1,['assert'],['asserts']
Testability,"Bascially grabbed the relevant bits from SparkBackend and ServiceBackend. Enabled by setting HAIL_QUERY_BACKEND=local. Needs HAIL_HOME and SPARK_HOME set to find jars, and hardcodes the py4j jar version that comes with Spark 2.4.x. Will have to work on ripping out Spark dependency. Currently uses HadoopFS for the file system in Java. GoogleFS in Python works with gs:// or local files, I just copied it and ripped out the Google stuff. Some some rough ideas from some of your old work, @johnc1231 (py4jbackend). Current results on the Python tests:. > == 470 failed, 245 passed, 87 skipped, 15 warnings, 1 error in 270.61 seconds ==",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8860:544,test,tests,544,https://hail.is,https://github.com/hail-is/hail/pull/8860,1,['test'],['tests']
Testability,Base image builds in tests are taking a long time. I think the root image changed. This empty PR will force a re-deploy and the :latest image will get updated.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8336:21,test,tests,21,https://hail.is,https://github.com/hail-is/hail/pull/8336,1,['test'],['tests']
Testability,"Based heavily on #13238, this reduces QoB tests to a minimal number of integration tests + tests known to specifically flex Batch backend functionality.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13620:42,test,tests,42,https://hail.is,https://github.com/hail-is/hail/pull/13620,3,['test'],['tests']
Testability,"Based off of discussion in #11907, this aims to avoid separate PRs from clobbering the image cache tag and sets up PR-specific cache tags per image. Note that using `ci-intermediate` was also detrimental to the image cache and I don't think different images sharing layers under the common name holds much value. I think we should ultimately get rid of `ci-intermediate` entirely and explicitly name our images so that they don't ruin each other's caches. I tested this in my namespace's CI. Here's the image build times from two consecutive dev deploys:. Before | After; :-------------------------:|:-------------------------:; ![Screen Shot 2022-07-05 at 6 14 36 PM](https://user-images.githubusercontent.com/24440116/177426924-5d5ade8c-0cee-4a0e-b477-2156d4e01e78.png) | ![Screen Shot 2022-07-05 at 6 14 45 PM](https://user-images.githubusercontent.com/24440116/177426882-c0029760-42ae-471d-b48c-daa0eadea448.png). I don't personally see the need for adding more SHAs to the cache as mentioned in #11907, a per-PR cache seems like exactly what you would want. The one drawback I can think of here is that a deploy won't make use of the cache from the PR that resulted in the commit to main. I believe the commit SHAs would be different because we squash so other than devising a way to trace the commit back to the PR I don't see how we can easily connect the two. Still, I feel like it's not a big deal since it will still use the previously deployed commit as a cache, so most deploys will still be very fast and no one's waiting on deploys in the same way as we wait on PRs and dev deploys.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11999:458,test,tested,458,https://hail.is,https://github.com/hail-is/hail/pull/11999,1,['test'],['tested']
Testability,"Based on #4049. Start with ""Added queryByKey methods"". I added a new element in internal nodes that records the largest key in the child block. I tried to add as many varied tests as possible, but definitely suggest any you think I am missing. Here's information on the binary search leftmost and rightmost algorithms:; https://en.wikipedia.org/wiki/Binary_search_algorithm. Java's version doesn't guarantee which element it returns if there are duplicates.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4121:174,test,tests,174,https://hail.is,https://github.com/hail-is/hail/pull/4121,1,['test'],['tests']
Testability,"Based on #9076. This PR caches input files at `/cache` on the worker. I do not support wildcard characters in filenames. I had to change the Flock implementation to only lock the directories and not a file if a file name is given. This is because we don't know if a user means a file or directory a priori. For example, `gs://jigold/test`. Is that a directory test or a file test? I figured more coarse-grained locking was fine.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9095:333,test,test,333,https://hail.is,https://github.com/hail-is/hail/pull/9095,3,['test'],['test']
Testability,"Basic abstraction of element-wise operations between BlockMatrix objects and ""small"" values (scalars, NDArrays). Major additions include:; - Addition of element type to BlockMatrixType; - BlockMatrixMap2 which applies a binary op to two BlockMatrixIR nodes of the same shape. This sets up groundwork for element-wise operations, though in the long term can be phased out and replaced with an OuterProduct/Map.; - BlockMatrixBroadcast which wraps a BlockMatrixIR to give it a new shape. Broadcasts are never actually realized and are matched against in the execute of BlockMatrixMap2 so the appropriate BlockMatrix method can be called to perform the broadcast operation. Since the only supported values that can be broadcast are scalars, row vectors and column vectors, there is a corresponding enumeration to indicate the direction of broadcast. This can be generalized to an arbitrary index expression when higher-dimensional broadcasts/transformations are supported.; - ValueToBlockMatrix node that takes any IR to a BlockMatrixIR. Currently only supports a F64 and MakeArray. As this could generalize to any IR node that reduces to a tensor, all BlockMatrixType fields are not expected to be derived values of the interpreted IR and left as inputs to the ValueToBlockMatrix IR node. ### Workarounds; - MakeArrays are used to wrap vector values that came from NDArrays. Since ValueToBlockMatrix requires a shape and the BlockMatrix interface can only construct matrices given a 1-D array of data, I just flatten 2D arrays on the python side.; - To satisfy the BlockMatrix interface, some row/col vectors need to be interpreted to arrays and some need to be further constructed into BlockMatrix instances. ### Remaining tasks; - Implement a BlockMatrixMap for Unary ops; - Use IR instead of ApplyBinaryPrimOp for BlockMatrixMap2; - Update Typecheck for IR in Map nodes and children IR nodes in ValueToBlockMatrix; - Test methods to check evaluation of Apply*Op on BlockMatrices",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5220:1918,Test,Test,1918,https://hail.is,https://github.com/hail-is/hail/pull/5220,1,['Test'],['Test']
Testability,"Basic filesystem class, currently only implements Hadoop calls. Tests pass. Not sure what we'd like to do with the docstring, so left it. All apparently random formatting changes are to force compliance with pep8",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5874:64,Test,Tests,64,https://hail.is,https://github.com/hail-is/hail/pull/5874,1,['Test'],['Tests']
Testability,"Basically all naming, rids these test files of linting errors. We do a lot of reassigning a `BatchBuilder` variable to a `Batch` and so I consolidated around `bb` and `b`. A couple instances where I remove debug_info from an assert statement is because the associated `Batch` object would not exist, since that assert is triggered by an error that's raised before the `Batch` object is created.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12147:33,test,test,33,https://hail.is,https://github.com/hail-is/hail/pull/12147,3,"['assert', 'test']","['assert', 'test']"
Testability,"Basically, I had no idea how RBAC worked. Now I have some idea. I now feel a bit uneasy about having the test namespace destroyed and recreated by batch deploy. Maybe when I better understand k8s security, I'll change to that. For now, we just grant the minimal permissions to delete any PVCs (i.e. hard drives, i.e. expensive shit) that are sitting around before we deploy a new batch system. I tested that this will succeed with `kubectl can-i --as system:serviceaccount:batch-pods:deploy-svc delete pvc -n test` and `-n batch-pods`. Don't ask my how I found out that the syntax to refer to the deploy-svc service account was that. I don't even remember where I stumbled across that.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5502:105,test,test,105,https://hail.is,https://github.com/hail-is/hail/pull/5502,3,['test'],"['test', 'tested']"
Testability,"Batch Client:; - Added new parameter max_idle_time (seconds); - Removed BatchBuilder and fused it with Batch; - Added 2 new operations:; - Commit ; - Close; - Kept submit which is the same as close for backwards compatibility reasons; - commit, close, and submit now return the batch so these methods can be chained together; - create_batch stayed the same. Tests:; - Added 3 new tests for new functionality; - Renamed a bunch of variables in the tests and cleaned up the variables. Database:; - Added time_last_updated for determining how long a batch has been idle; - Added max_idle_time; - Added a closed field and changed the possible states for a batch to created, running, and complete (removed open); - Changed close_batch to be commit_staged_jobs. Changes were made to make sure this worked even if there were 0 jobs to actually commit. ; - Changed cancel_batch to always set cancelled = 1 and closed = 1 regardless of whether the batch is actually running. The time_completed is only set if no jobs are currently running. Otherwise, the time_completed will be set in MJC. **It also commits any jobs that are pending before cancelling the batch.** I'm not sure if we want this behavior or not. Driver:; - Runs a loop every 60 seconds to close batches with max_idle_time greater than that specified. UI:; - The UI changed the batches table to be time_created instead of time_closed as the Submitted/Created column. The duration is the time from time_complete - time_created for newer batches instead of time_complete - time_closed.; - Added a close button; - An open batch (even one just in the created state) can be cancelled or closed. **This might be confusing**. Other:; - Cancel is idempotent; - Getting the batch state and time_completed correct was tricky.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10484:358,Test,Tests,358,https://hail.is,https://github.com/hail-is/hail/pull/10484,3,"['Test', 'test']","['Tests', 'tests']"
Testability,Batch add extra scheduling logging,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9461:27,log,logging,27,https://hail.is,https://github.com/hail-is/hail/pull/9461,1,['log'],['logging']
Testability,Batch eval for tests by putting expressions in a tuple and using `Begin` for write statements. This helps dramatically by avoiding the c++ compilation time on every assert.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6359:15,test,tests,15,https://hail.is,https://github.com/hail-is/hail/pull/6359,2,"['assert', 'test']","['assert', 'tests']"
Testability,Batch forgot how to log.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6873:20,log,log,20,https://hail.is,https://github.com/hail-is/hail/pull/6873,1,['log'],['log']
Testability,Batch front-end pods cannot handle large job logs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13328:45,log,logs,45,https://hail.is,https://github.com/hail-is/hail/issues/13328,1,['log'],['logs']
Testability,"Batch had a bug that left a batch in a bad state. To unstick CI, we deleted the bad batch manually, but CI could not handle a 404'ing batch. We change CI's logic to now handle 404'ing deploy batches.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6107:156,log,logic,156,https://hail.is,https://github.com/hail-is/hail/pull/6107,1,['log'],['logic']
Testability,Batch hung again. [ci.log](https://github.com/hail-is/hail/files/2693248/ci.log); [batch.log](https://github.com/hail-is/hail/files/2693249/batch.log),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4984#issuecomment-448465860:22,log,log,22,https://hail.is,https://github.com/hail-is/hail/issues/4984#issuecomment-448465860,4,['log'],['log']
Testability,Batch started hanging which prevented CI from making progress. Unclear what happened. [batch-deployment.txt](https://github.com/hail-is/hail/files/2681748/batch-deployment.txt); [batch.log](https://github.com/hail-is/hail/files/2681749/batch.log); [ci-deployment.txt](https://github.com/hail-is/hail/files/2681750/ci-deployment.txt); [ci.log](https://github.com/hail-is/hail/files/2681751/ci.log),MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4984:185,log,log,185,https://hail.is,https://github.com/hail-is/hail/issues/4984,4,['log'],['log']
Testability,"Batch threads are closed after at most 30 minutes (meaning no more jobs may be submitted in that batch; ergo, crucially, no more jobs may depend on the output of jobs in the batch). The user can specify a shorter time-to-live via the `ttl` parameter. The batch server achieves this via a [scheduler](https://docs.python.org/3/library/sched.html) thread which runs scheduled events. When a batch is created a close event is scheduled for its TTL. This also exposes `is_open` in the JSON response to `GET /batches/<batch_id>` which the tests use to verify a batch has been closed.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5233:534,test,tests,534,https://hail.is,https://github.com/hail-is/hail/pull/5233,1,['test'],['tests']
Testability,"Because `BlockMatrix` is strictly 2-D but the IR backing it represents 0, 1 and 2-D arrays, we have to track whether 1-D vectors are really row or column vectors, and convert back and forth to their ""matrix shape"". This caused a mismatch of the 2-D vs 1-D type when transposing a row vector to a column vector and trying to do col vector + row vector. We assert that dimensions that aren't being broadcasted to a larger length retain their original length. This uncovered a related bug in the conversion between 1-D vector length and 2-D matrix dimensions.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6018:355,assert,assert,355,https://hail.is,https://github.com/hail-is/hail/pull/6018,1,['assert'],['assert']
Testability,"Because of the unpredictable way that git clone might realize the requirements files, I removed the pinned-requirements file as a dependency of the changed targets. In both cases, regenerating that file (either in CI as part of the deploy.yaml target or on a cluster for `install-on-cluster`) could cause a dataproc cluster running with untested dependency versions even if the requirements.txt files are unchanged. I do, however, require that the pinned-requirements files be compatible using the same check we do in CI. I performed the following manual testing:; 1. Creating a dataproc cluster through `hailctl dataproc start`; 2. ssh'ing into said cluster, cloning this branch and running `make -C hail install-on-cluster` to completion; 3. Updating the requirements.txt file to something incompatible and successfully installing on cluster again with updated pinned requirements. However, I'm not sure I'm actually doing this right. I checked that in step 2 I was *not* regenerating any pinned-requirments files, but in step 3 make updated the pinned requirements without me telling it to, I'm guessing because of the wheel's dependence on `PY_FILES` and I changed the source under hail/python. So I don't entirely understand why I have this desirable result.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12510#issuecomment-1338482256:555,test,testing,555,https://hail.is,https://github.com/hail-is/hail/pull/12510#issuecomment-1338482256,1,['test'],['testing']
Testability,"Been having problems running hail on dataflow, the latest:. Log file: /humgen/atgu1/fs03/jkoskela/hail.log. hail: info: running: importvcf /user/jkoskela/ibd/vcf/99percent_finns_plus_AD_IBD_NFID_ALL.vcf.bgz; [Stage 0:====================================================>(1049 + 1) / 1050]hail: info: Ordering unsorted dataset with network shuffle[A^[[A; [Stage 1:====================================================>(1043 + 7) / 1050]hail: importvcf: caught exception: java.lang.ClassCastException: java.lang.Long cannot be cast to java.lang.Integer; at scala.runtime.BoxesRunTime.unboxToInt(BoxesRunTime.java:106); at org.apache.spark.rdd.OrderedRDD$$anonfun$calculateKeyRanges$1.apply(OrderedRDD.scala:143); at org.apache.spark.rdd.OrderedRDD$$anonfun$calculateKeyRanges$1.apply(OrderedRDD.scala:142); at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33); at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108); at org.apache.spark.rdd.OrderedRDD$.calculateKeyRanges(OrderedRDD.scala:142); at org.apache.spark.rdd.OrderedRDD$.apply(OrderedRDD.scala:117); at org.broadinstitute.hail.RichPairRDD$.toOrderedRDD$extension(Utils.scala:482); at org.broadinstitute.hail.io.vcf.LoadVCF$.apply(LoadVCF.scala:267); at org.broadinstitute.hail.driver.ImportVCF$.run(ImportVCF.scala:85); at org.broadinstitute.hail.driver.ImportVCF$.run(ImportVCF.scala:31); at org.broadinstitute.hail.driver.Command.runCommand(Command.scala:239); at org.broadinstitute.hail.driver.Main$.runCommand(Main.scala:120); at org.broadinstitute.hail.driver.Main$$anonfun$runCommands$1$$anonfun$1.apply(Main.scala:144); at org.broadinstitute.hail.driver.Main$$anonfun$runCommands$1$$anonfun$1.apply(Main.scala:144); at org.broadinstitute.hail.Utils$.time(Utils.scala:1282); at org.broadinstitute.hail.driver.Main$$anonfun$runCommands$1.apply(Main.scala:143); at org.broadinstitute.hail.driver.Main$$anonfun$runCommands$1.apply(Main.scala:137); at scala.collection.IndexedSeqOptimized$class.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/673:60,Log,Log,60,https://hail.is,https://github.com/hail-is/hail/issues/673,2,"['Log', 'log']","['Log', 'log']"
Testability,"Before change:. ```; {""config"": {""cores"": 1, ""version"": ""0.2.57-e20c00f05c78"", ""timestamp"": ""2020-09-24 08:27:24.863298"", ""system"": ""darwin""}, ""benchmarks"": [{""name"": ""hwe_normalized_pca_blanczos_small_data_10_iterations"", ""failed"": false, ""timed_out"": false, ""times"": [54.736854666000006, 46.213391341000005, 52.75462794499998]}]}; ```. After change: . ```; {""config"": {""cores"": 1, ""version"": ""0.2.57-c013f70fe868"", ""timestamp"": ""2020-09-24 08:32:23.991129"", ""system"": ""darwin""}, ""benchmarks"": [{""name"": ""hwe_normalized_pca_blanczos_small_data_10_iterations"", ""failed"": false, ""timed_out"": false, ""times"": [28.998368115000005, 40.65512770199999, 28.816323178000005]}]}; ```. Obvious improvement, nearly 2x.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9498#issuecomment-698315046:144,benchmark,benchmarks,144,https://hail.is,https://github.com/hail-is/hail/pull/9498#issuecomment-698315046,2,['benchmark'],['benchmarks']
Testability,"Before execution, Hail Batch and Hail Query should assert that no referenced buckets have storage classes with elevated read costs.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13003:51,assert,assert,51,https://hail.is,https://github.com/hail-is/hail/issues/13003,1,['assert'],['assert']
Testability,"Before this change, testing just the n_partitions method of Table takes nearly a minute, 52s of which is spent in ""setup"". Admittedly, this setup is shared across multiple tests, but this is an unacceptable burden for iterating on one method. ```; 52.30s setup hail/table.py::hail.table.Table.n_partitions; 3.07s call hail/table.py::hail.table.Table.n_partitions; ```. After this change, the setup time significantly reduces. The call gets slower, presumably because the JVM is not warm. I think the setup time is now dominated by Hail JVM initialization. ```; 11.77s call hail/table.py::hail.table.Table.n_partitions; 9.68s setup hail/table.py::hail.table.Table.n_partitions; ```; This reduces the practical runtime of this test by 50%. This commit adds 72kB to the repository:. ```; $ git diff-tree -r -c -M -C --no-commit-id HEAD | awk '{print $4}' | git cat-file --batch-check | awk 'BEGIN {s=0} {s+= $3} END {print s}'; 72998; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14111:20,test,testing,20,https://hail.is,https://github.com/hail-is/hail/pull/14111,3,['test'],"['test', 'testing', 'tests']"
Testability,"Before we can simplify the binding structure, we need to stop duplicating it all over the place. This PR rewrites `FreeVariables` so that it no longer needs special logic for particular nodes, hard coding binding structure (redundantly). To do this, it takes advantage of the new `Bindings`, which operates on a `GenericBindingEnv` interface. It adds a new implementation of this interface specifically for computing free variables, then simply does a generic traversal of the IR using this custom binging environment. While I find the new implementation far simpler and more obviously correct than the old, I do expect it to further simplify once I'm able to start modifying the core binding structure.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14451:165,log,logic,165,https://hail.is,https://github.com/hail-is/hail/pull/14451,1,['log'],['logic']
Testability,"Below, when I say ""a table `t` is ordered"" I mean `t.rvd.isInstanceOf[OrderedRVD]`. The goals of this PR are to; * Choose more efficient implementation options when a table is ordered, such as in joins.; * Preserve ordering when reading and writing table to disk (this already worked, but was not enforced in tests).; * Make the `key` field on `Table` and `TableType` optional. `key` should almost never be an empty list, because if ordered this would force all rows to compare equal under the key ordering, hence there can be only one partition. Instead, make `key = None`, in which case the table is required to be backed by an `UnpartitionedRVD`.; * Tables should by default be ordered. In particular, make `Table.keyBy` sort the table by default.; * Fix joins to allow the case where the left has a shorter partition key than the right. This is accomplished by fixing `RepartitionedOrderedRDD` to allow the new partition key to be shorter than the old.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3442:309,test,tests,309,https://hail.is,https://github.com/hail-is/hail/pull/3442,1,['test'],['tests']
Testability,"Ben came across an image in the wild with a null `Env` field in the manifest, which caused the following error:; ```; Error; Traceback (most recent call last):; File ""/usr/local/lib/python3.9/dist-packages/batch/worker/worker.py"", line 868, in _run; timed_out = await self._run_until_done_or_deleted(self._run_container); File ""/usr/local/lib/python3.9/dist-packages/batch/worker/worker.py"", line 1010, in _run_until_done_or_deleted; return await run_until_done_or_deleted(self.deleted_event, f, *args, **kwargs); File ""/usr/local/lib/python3.9/dist-packages/batch/worker/worker.py"", line 680, in run_until_done_or_deleted; return step.result(); File ""/usr/local/lib/python3.9/dist-packages/batch/worker/worker.py"", line 1066, in _run_container; await self._write_container_config(); File ""/usr/local/lib/python3.9/dist-packages/batch/worker/worker.py"", line 1106, in _write_container_config; config = await self.container_config(); File ""/usr/local/lib/python3.9/dist-packages/batch/worker/worker.py"", line 1166, in container_config; 'env': self._env(),; File ""/usr/local/lib/python3.9/dist-packages/batch/worker/worker.py"", line 1354, in _env; self.image.image_config['Config']['Env'] + self.env + CLOUD_WORKER_API.cloud_specific_env_vars_for_user_jobs; TypeError: unsupported operand type(s) for +: 'NoneType' and 'list'; ```. He fixed it by creating the following docker image:. ```docker; FROM jargene/hapice:1.0; ```. It could be that old versions of docker allowed this to be empty but have since made it `[]`, which would mean this would be unfortunately very annoying to test but nonetheless pretty trivial to fix.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13720:1580,test,test,1580,https://hail.is,https://github.com/hail-is/hail/pull/13720,1,['test'],['test']
Testability,Benchmark Makefile Should Check Project,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8366:0,Benchmark,Benchmark,0,https://hail.is,https://github.com/hail-is/hail/issues/8366,1,['Benchmark'],['Benchmark']
Testability,Benchmark NDArray Addition and Multiplication,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7724:0,Benchmark,Benchmark,0,https://hail.is,https://github.com/hail-is/hail/pull/7724,1,['Benchmark'],['Benchmark']
Testability,Benchmark is now like 80s. Not sure why it got slower from before.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2253#issuecomment-334887071:0,Benchmark,Benchmark,0,https://hail.is,https://github.com/hail-is/hail/pull/2253#issuecomment-334887071,1,['Benchmark'],['Benchmark']
Testability,"Benchmark methods:; ```python; @benchmark(args=profile_25.handle('mt')); def variant_and_sample_qc_nested_with_filters_2(mt_path):; mt = hl.read_matrix_table(mt_path); mt = hl.variant_qc(mt); mt = mt.filter_rows(mt.variant_qc.call_rate >= .8); mt = hl.sample_qc(mt); mt = mt.filter_cols(mt.sample_qc.call_rate >= .8); mt = hl.variant_qc(mt); mt = mt.filter_rows(mt.variant_qc.call_rate >= .98); mt = hl.sample_qc(mt); mt = mt.filter_cols(mt.sample_qc.call_rate >= .98); mt.count(). @benchmark(args=profile_25.handle('mt')); def variant_and_sample_qc_nested_with_filters_4(mt_path):; mt = hl.read_matrix_table(mt_path); mt = hl.variant_qc(mt); mt = mt.filter_rows(mt.variant_qc.call_rate >= .8); mt = hl.sample_qc(mt); mt = mt.filter_cols(mt.sample_qc.call_rate >= .8); mt = hl.variant_qc(mt); mt = mt.filter_rows(mt.variant_qc.call_rate >= .98); mt = hl.sample_qc(mt); mt = mt.filter_cols(mt.sample_qc.call_rate >= .98); mt = hl.variant_qc(mt); mt = mt.filter_rows(mt.variant_qc.call_rate >= .99); mt = hl.sample_qc(mt); mt = mt.filter_cols(mt.sample_qc.call_rate >= .99); mt = hl.variant_qc(mt); mt = mt.filter_rows(mt.variant_qc.call_rate >= .999); mt = hl.sample_qc(mt); mt = mt.filter_cols(mt.sample_qc.call_rate >= .999); mt.count(); ```; Runtime:; ```; 2020-01-29 14:26:59,755: INFO: [1/2] Running variant_and_sample_qc_nested_with_filters_2...; 2020-01-29 14:28:05,672: INFO: burn in: 65.91s; 2020-01-29 14:29:05,205: INFO: run 1: 59.53s; 2020-01-29 14:30:00,993: INFO: run 2: 55.79s; 2020-01-29 14:31:00,966: INFO: run 3: 59.97s; 2020-01-29 14:31:00,966: INFO: [2/2] Running variant_and_sample_qc_nested_with_filters_4...; 2020-01-29 14:51:21,937: INFO: burn in: 1220.90s; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8010:0,Benchmark,Benchmark,0,https://hail.is,https://github.com/hail-is/hail/issues/8010,3,"['Benchmark', 'benchmark']","['Benchmark', 'benchmark']"
Testability,Benchmark pt1,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9174:0,Benchmark,Benchmark,0,https://hail.is,https://github.com/hail-is/hail/pull/9174,1,['Benchmark'],['Benchmark']
Testability,Benchmark:; ```; $ hail-bench compare /tmp/before.json /tmp/after.json; Name Ratio Time 1 Time 2; ---- ----- ------ ------; write_profile_mt 100.4% 31.130 31.249; ----------------------; Geometric mean: 100.4%; Simple mean: 100.4%; Median: 100.4%; ```,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7934:0,Benchmark,Benchmark,0,https://hail.is,https://github.com/hail-is/hail/pull/7934,1,['Benchmark'],['Benchmark']
Testability,"Benchmark:; ```python; @benchmark; def per_row_stats_star_star():; mt = hl.read_matrix_table(resource('gnomad_dp_simulation.mt')); mt.annotate_rows(**hl.agg.stats(mt.x))._force_count_rows(); ```. This branch:; ```; running per_row_stats_star_star...; run 1 took 14.53s; run 2 took 16.56s; run 3 took 15.05s; Mean, Median: 15.38s, 15.05s; ```. Master:; ```; running per_row_stats_star_star...; run 1 took 31.47s; run 2 took 37.34s; run 3 took 26.67s; Mean, Median: 31.83s, 31.47s; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6506:0,Benchmark,Benchmark,0,https://hail.is,https://github.com/hail-is/hail/pull/6506,2,"['Benchmark', 'benchmark']","['Benchmark', 'benchmark']"
Testability,"Benchmarking:. Generated 100k by 10k IndexedRowMatrix of random doubles between 0 and 1, converted to BlockMatrix and multiplied it by its transpose. This was on 128 cores. . The multiplication took 35 seconds using my new method. It took 252 seconds without changes.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1595#issuecomment-289141495:0,Benchmark,Benchmarking,0,https://hail.is,https://github.com/hail-is/hail/pull/1595#issuecomment-289141495,1,['Benchmark'],['Benchmarking']
Testability,Benchmarks (not to be trusted anyway):. Master:. ```; [1/1] Running table_aggregate_counter...; run 1: 10.02; run 2: 9.72; run 3: 9.19; run 4: 9.30; run 5: 10.87; table_aggregate_counter	9.819	9.717	0.602; ```. PR:; ```; [1/1] Running table_aggregate_counter...; run 1: 9.74; run 2: 8.73; run 3: 8.30; run 4: 8.43; run 5: 10.30; table_aggregate_counter	9.099	8.728	0.787; ```,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6831:0,Benchmark,Benchmarks,0,https://hail.is,https://github.com/hail-is/hail/pull/6831,1,['Benchmark'],['Benchmarks']
Testability,Benchmarks look good now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10539#issuecomment-869920597:0,Benchmark,Benchmarks,0,https://hail.is,https://github.com/hail-is/hail/pull/10539#issuecomment-869920597,1,['Benchmark'],['Benchmarks']
Testability,Benchmarks look identical:; ```; Harmonic mean: 98.8%; Geometric mean: 99.1%; Arithmetic mean: 99.3%; Median: 99.4%; ```,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9253#issuecomment-673068628:0,Benchmark,Benchmarks,0,https://hail.is,https://github.com/hail-is/hail/pull/9253#issuecomment-673068628,1,['Benchmark'],['Benchmarks']
Testability,"Benchmarks on this are not good, still investigating.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10001#issuecomment-780674239:0,Benchmark,Benchmarks,0,https://hail.is,https://github.com/hail-is/hail/pull/10001#issuecomment-780674239,1,['Benchmark'],['Benchmarks']
Testability,"Benchmarks show that this doesn't change performance, with the exception of making linear_regression_rows_nd about 4x slower. the unreliability of ndarray performance is being solved separately.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10490#issuecomment-846021565:0,Benchmark,Benchmarks,0,https://hail.is,https://github.com/hail-is/hail/pull/10490#issuecomment-846021565,1,['Benchmark'],['Benchmarks']
Testability,Benchmarks vs a hardcoded take-the-old-path branch:. ```; Geometric mean: 99.5%; Simple mean: 99.8%; Median: 99.5%; ```,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7879:0,Benchmark,Benchmarks,0,https://hail.is,https://github.com/hail-is/hail/pull/7879,1,['Benchmark'],['Benchmarks']
Testability,"Benchmarks: https://gist.github.com/tpoterba/7b41c0e8c48ea7b1dec03dee8bce1c72. It looks like this change made Hail slower, but I'm pretty sure this is noise. These:; ```; join_p1000_p10 130.8% 132.532 173.404; union_p1000_p10 129.7% 107.998 140.027; union_p10_p1000 128.6% 116.013 149.201; ``` . Don't have any stream IRs!",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10229#issuecomment-814324282:0,Benchmark,Benchmarks,0,https://hail.is,https://github.com/hail-is/hail/pull/10229#issuecomment-814324282,1,['Benchmark'],['Benchmarks']
Testability,Benchmarks:; https://gist.github.com/johnc1231/7f59fe3a1684f2dc6321eff2a3ec2841,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11306#issuecomment-1049052019:0,Benchmark,Benchmarks,0,https://hail.is,https://github.com/hail-is/hail/pull/11306#issuecomment-1049052019,1,['Benchmark'],['Benchmarks']
Testability,Benchmarks:; https://gist.github.com/tpoterba/f74d9428a58b3ab705ded53be35e207d,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10482#issuecomment-902179489:0,Benchmark,Benchmarks,0,https://hail.is,https://github.com/hail-is/hail/pull/10482#issuecomment-902179489,1,['Benchmark'],['Benchmarks']
Testability,"Besides the question to Jackie, I'd still like a bit of clarity on https://github.com/hail-is/hail/pull/9219#discussion_r469015358 (if you want me to add an entrypoint-override image and test). The question there: is the appropriate place a buildImage step (and dependency for test_hailtop_batch), or in Makefile as you stated (I couldn't see how batch/Makefile was being used by CI, may have missed it)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9219#issuecomment-673080598:187,test,test,187,https://hail.is,https://github.com/hail-is/hail/pull/9219#issuecomment-673080598,1,['test'],['test']
Testability,"Better attempt at fixing this issue compared to #9298, will benchmark.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9304#issuecomment-675747090:60,benchmark,benchmark,60,https://hail.is,https://github.com/hail-is/hail/pull/9304#issuecomment-675747090,1,['benchmark'],['benchmark']
Testability,"Better place to post things like this would be discuss.hail.is (because it's probably a configuration issue with your cluster and not a bug in hail). I'd guess you don't have BLAS installed on your cluster. If you check the hail.log file, do you have lines like. ```; Failed to load implementation from: com.github.fommil.netlib.NativeSystemLAPACK; Failed to load implementation from: com.github.fommil.netlib.NativeSystemBLAS; ```. ?. See here: https://hail.is/docs/0.2/getting_started.html#common-installation-issues",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7008#issuecomment-529008947:229,log,log,229,https://hail.is,https://github.com/hail-is/hail/issues/7008#issuecomment-529008947,1,['log'],['log']
Testability,"Between `BlockMatrixIRSuite.scala`, `test_linalg.py`, and the methods that use BlockMatrix, I think the BlockMatrix lowering is decently tested. And this change is certainly one we have to make. I can give it a careful review to look for potential issues.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13807#issuecomment-1766527794:137,test,tested,137,https://hail.is,https://github.com/hail-is/hail/pull/13807#issuecomment-1766527794,1,['test'],['tested']
Testability,Big job logs can brick a worker,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13329:8,log,logs,8,https://hail.is,https://github.com/hail-is/hail/issues/13329,1,['log'],['logs']
Testability,"Bigger than I expected, but:; 1. Re-enable the FS tests and create a Gradle target for them so they can be run locally.; 2. Allow the FS tests to be easily used locally by not hardcoding a particular key file path.; 3. Skip GoogleStorageFSSuite when `CLOUD` is not `gcp`; 4. Remove irrelevant env vars from non-FS Scala tests.; 5. Eliminate the ""hail_repl"" image and deployment which was scoped dev anyway and never used.; 6. Add hail_pip_installed_image which can be used to execute `hailtop.aiotools.copy`.; 7. Use copy in two places in build.yaml.; 8. Add a command line argument for configuring the number of concurrent transfers which sets an upper bound on the number of open source files (and, additionally, open destination files). On my MacBook, I can't seem to open 100 local files simultaneously. I set the default low enough that local use should work by default.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11089:50,test,tests,50,https://hail.is,https://github.com/hail-is/hail/pull/11089,3,['test'],['tests']
Testability,Binary search changed to return the size of the keys if the given key was greater than all existing keys. The randomized tests weren't updated and would fail intermittently in this case. Added in a check for this case and asserted that the given key is in fact greater than the entire keyset. Resolves #5630,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5651:121,test,tests,121,https://hail.is,https://github.com/hail-is/hail/pull/5651,2,"['assert', 'test']","['asserted', 'tests']"
Testability,"BinarySearch no longer exists. #2974 adds a test for this case, I believe.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2876#issuecomment-369430474:44,test,test,44,https://hail.is,https://github.com/hail-is/hail/issues/2876#issuecomment-369430474,1,['test'],['test']
Testability,Bioconductor seems to rebuild the entire universe and is a huge drag on our Docker builds. We should run R's PCRelate on a few randomly generated test datasets and save them into hail's repo and use them for testing.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4439:146,test,test,146,https://hail.is,https://github.com/hail-is/hail/issues/4439,2,['test'],"['test', 'testing']"
Testability,Blanczos PCA Benchmarks,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9399:13,Benchmark,Benchmarks,13,https://hail.is,https://github.com/hail-is/hail/pull/9399,1,['Benchmark'],['Benchmarks']
Testability,Block blobs are intended for single bulk uploads while append blobs are meant to be blobs that are appended to over a long period of times (think logs). Our python implementation also uses block blobs so this was just an oversight from the beginning.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12590:146,log,logs,146,https://hail.is,https://github.com/hail-is/hail/pull/12590,1,['log'],['logs']
Testability,"BlockMatrix log, abs",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3671:12,log,log,12,https://hail.is,https://github.com/hail-is/hail/pull/3671,1,['log'],['log']
Testability,"Bowing out of this one as it is too spicy for my taste. Happy to test it on my pipelines once its passing tests and ready, but someone else should probably do the code review.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4128#issuecomment-413510162:65,test,test,65,https://hail.is,https://github.com/hail-is/hail/pull/4128#issuecomment-413510162,2,['test'],"['test', 'tests']"
Testability,"Breeze diag only works on square matrices, whereas BlockMatrix diagonal was written for arbitrary matrices, consistent with NumPy. Update avoids Breeze diag, tests non-square matrix with multiple blocks, and deletes shortened operator `diag` as unnecessary.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3180:158,test,tests,158,https://hail.is,https://github.com/hail-is/hail/pull/3180,1,['test'],['tests']
Testability,"Bringing over the azure-specific changes from #10970, this reflects the test batch instance that is currently running in azure.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11055:72,test,test,72,https://hail.is,https://github.com/hail-is/hail/pull/11055,1,['test'],['test']
Testability,"Btw, I actually don't understand how one would use this function (not clear to me from the docs nor the test)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8865#issuecomment-641489296:104,test,test,104,https://hail.is,https://github.com/hail-is/hail/pull/8865#issuecomment-641489296,1,['test'],['test']
Testability,Build against:; - google cloud / latest 1.X version: 1.6.2; - cray version; - data flow version. just tests against latest 1.X version.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/742:102,test,tests,102,https://hail.is,https://github.com/hail-is/hail/issues/742,1,['test'],['tests']
Testability,"Building locally confirmed it ran for Spark 3.2 with commons lang fix. Will follow up later with some kind of compilation test against Spark 3.2, but for now let's just do this.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11410#issuecomment-1050116738:122,test,test,122,https://hail.is,https://github.com/hail-is/hail/pull/11410#issuecomment-1050116738,1,['test'],['test']
Testability,"Building off your previous user creation logic PR. Summary of changes:; - Add auth/users admin page with list of users and automated add, delete user.; - Bit of database reorg, user_id is gone, users table is now auth.users.; - Added state to users table, `active` for active users. Adding (deleting) users just sets state to `adding` (`deleting`); - Added a new service (doesn't serve requests) auth-driver that watches the database and processes adding, deleting users. Only one replica, runs every ~60s; - Don't actually delete users, just mark them deleted. This is so we don't lose billing information for users we're deleting. This will need more thought once we understand what the financial record keeping constraints are. Maybe we purge users after 90 days? Maybe keep them forever?; - Added Auth > Users header link; - gsa-key now has a single file, `key.json` instead of `privateKeyData`.; - Added cleanup_auth_tables dev-only build step; - batch account not actually needed, removed (but we keep around batch-gsa-key). I have two more code sharing PRs after this goes in:; - Move GoogleClient to gear and unify with the existing logic in batch (which is a bit disorganized); - EventHandler is basically the same logic in the batch scheduler. Again, move to gear and use there. One last change that might be nice but I didn't bother with: auth could send auth-driver a notification when the database changes so it can process requests immediately. (We do this in batch, for example.) Maybe we if we expect to be adding more users. Obviously, we'll have to purge the old user resources and re-add the users once this goes in. A note on testing: I'm reluctant to give tests the privileges necessary to test this (basically full access to the google project and the cluster). I think I'm inclined to chalk this up a ""infrastructure"" and plan to test it on a separate staging k8s cluster for infrastructure changes. For now, I tested almost all the logic with a slightly tweaked version to get ",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7694:41,log,logic,41,https://hail.is,https://github.com/hail-is/hail/pull/7694,1,['log'],['logic']
Testability,"Builds on @jigold 's fixes in #3724 . I tested the new AST branch before I added the IR branch as well as in notebook using still-un-IRed functions (like `signum`), but I'm not sure the best way to force that branch to be continue to be tested.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3730:40,test,tested,40,https://hail.is,https://github.com/hail-is/hail/pull/3730,2,['test'],['tested']
Testability,"Builds on @jigold's PR: https://github.com/hail-is/hail/pull/4582. First pipeline executed via API!. Start the server:. ```; $ hail hail/python/hail-apiserver/hail-apiserver.py; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2-cc8ca5cfae35; * Serving Flask app ""hail-apiserver"" (lazy loading); * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit); ```. Run a hail pipeline:. ```; $ hail; >>> import hail as hl; >>> hl.init(_backend=hl.backend.ServiceBackend('localhost', 5000)); Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2-cc8ca5cfae35; >>> t = hl.Table.parallelize([hl.struct(a=1), hl.struct(a=5)]); >>> t.count(); 2; >>> ; ```. and on the server logs:. ```; 2018-10-19 22:36:18 Hail: INFO: execute: (TableCount (TableParallelize None (MakeArray None (MakeStruct (a (I32 1))) (MakeStruct (a (I32 5)))))); 2018-10-19 22:36:18 Hail: INFO: result: {'type': 'int64', 'value': '2'}; 127.0.0.1 - - [19/Oct/2018 22:36:18] ""POST /execute HTTP/1.1"" 200 -; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4589:733,log,logs,733,https://hail.is,https://github.com/hail-is/hail/pull/4589,1,['log'],['logs']
Testability,"Builds on a few pending PRs. This shouldn't be reviewed until it is passing. Right now, about 50 tests are failing. Spot checked a few, they are all in missing aggregators: Counter, general collect (@jigold has a PR), general take, takeBy, collectAsSet and int32/float32 sum, array sum (might just be a promotion issue). @catoverdrive let's coordinate on these. I can't quite rip out all the AST eval infrastructure because the function registry method implementations are used for type inference. It will have to wait until we go directly from Python to IR, and then get ripped out along with the function registry, AST parser and AST classes. > 480 additions and 3,235 deletions. Delicious.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3757:97,test,tests,97,https://hail.is,https://github.com/hail-is/hail/pull/3757,1,['test'],['tests']
Testability,"Builds on https://github.com/hail-is/hail/pull/3852 to avoid a conflict nightmare. You probably don't want to reivew until that goes in. This adds TableIR parser. TableImport is missing because handling the import options requires a bit more work. Tested by pretty printing/parsing example TableIR and verifying the result is the same. Also added (most of the) MatrixIR parser, but it is untested, that will come in part (3). Had to change some Array => IndexedSeq in various places to get proper equality. Rewrote Parser.quotedLiteral to avoid JVM stack depth limits when parsing non-small string literals.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3853:248,Test,Tested,248,https://hail.is,https://github.com/hail-is/hail/pull/3853,1,['Test'],['Tested']
Testability,"Builds on: https://github.com/hail-is/hail/pull/2074. Added optimized unsafe row add to region value builder. Tests are faster than toward_fullgeneric_4, 0.1 (8m2s vs 9m18s, 0.1: 8m20s).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2081:110,Test,Tests,110,https://hail.is,https://github.com/hail-is/hail/pull/2081,1,['Test'],['Tests']
Testability,"Builds on: https://github.com/hail-is/hail/pull/2299. History of BTT is somewhat obscure. Now we just serialize the type in Unsafe{Row, IndexedSeq}. And some small additional improvements along the way:. Renamed UnsafeIndexedSeqAnnotation => UnsafeIndexedSeq.; Cache specialized Array types in UnsafeRow to avoid allocation.; Fixed ordering disagreement for Variant (added regression test).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2301:384,test,test,384,https://hail.is,https://github.com/hail-is/hail/pull/2301,1,['test'],['test']
Testability,"Builds on: https://github.com/hail-is/hail/pull/2711 (genericintervals7). You probably want to wait until that goes in to review. @konradjk Unfortunately, we don't have automated tests for VEP yet. I'm bump the priority on that to make changing VEP safer, but in the mean time, can I ask you to run this on a small example to make sure we didn't break anything? Thanks!. @jbloom22 Can you do the same for Nirvana?",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2722:179,test,tests,179,https://hail.is,https://github.com/hail-is/hail/pull/2722,1,['test'],['tests']
Testability,"Builds on: https://github.com/hail-is/hail/pull/3268. Well, moved the to the tests section. The test section is becoming a real cesspool.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3269:77,test,tests,77,https://hail.is,https://github.com/hail-is/hail/pull/3269,2,['test'],"['test', 'tests']"
Testability,"Builds on: https://github.com/hail-is/hail/pull/5101. I'm not going to assign this directly, but break it up because it is pretty spicy (>5K lines changed). This gets us to 9 tests failing against the service, with 22 tests skipped that use to/from_spark or BlockMatrix. Start the server:. ```; $ hail python/hail-apiserver/hail-apiserver.py; ```. Run the tests:. ```; $ HAIL_TEST_SERVICE_BACKEND_URL='http://localhost:5000' gw testPython; ```. Failures:. ```; FAIL python/test/hail/methods/test_family_methods.py::Tests::test_tdt; FAIL python/test/hail/methods/test_impex.py::ImportMatrixTableTests::test_import_matrix_table; FAIL python/test/hail/methods/test_misc.py::Tests::test_maximal_independent_set; FAIL python/test/hail/methods/test_misc.py::Tests::test_maximal_independent_set2; FAIL python/test/hail/methods/test_misc.py::Tests::test_maximal_independent_set3; FAIL python/test/hail/methods/test_misc.py::Tests::test_maximal_independent_set_types; FAIL python/test/hail/methods/test_misc.py::Tests::test_rename_duplicates; FAIL python/test/hail/methods/test_qc.py::Tests::test_concordance; FAIL python/test/hail/methods/test_statgen.py::Tests::test_ibd; ======= 9 failed, 460 passed, 22 skipped, 24 warnings in 233.52 seconds ========; ```. The tdt failure is due to a latent pruner bug I haven't finished tracking down yet. The remaining tests are easily fixed but adding relational functions for: import table, MIS and IBD. Rename duplicates and concordance should just be re-written in Python. Reference genomes will need some work to be multi-user. We need to eliminate the global reference genome state in the JVM, add it to Python, and include references with requests. This means the reference function registration will need to get revamped.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5121:175,test,tests,175,https://hail.is,https://github.com/hail-is/hail/pull/5121,22,"['Test', 'test']","['Tests', 'test', 'testPython', 'tests']"
Testability,"Builds on: https://github.com/hail-is/hail/pull/5161 (approved, should land shortly). Add reference operations to Backend. This is a first cut/stop gap. The backend needs to be per-user stateless, so we should eventually track the references in Python send references along with IR in execute and resolve references during parsing. Moved defaultReference to Python. A little cleanup in TestUtils. This is the last PR of my big service push. There some additional things to do, I'll create an issue with bullet points to track them.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5196:386,Test,TestUtils,386,https://hail.is,https://github.com/hail-is/hail/pull/5196,1,['Test'],['TestUtils']
Testability,Bump google-cloud-logging from 1.12.1 to 3.0.0 in /docker,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11574:18,log,logging,18,https://hail.is,https://github.com/hail-is/hail/pull/11574,1,['log'],['logging']
Testability,Bump on this. Request for benchmark was 20 days ago.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4396#issuecomment-434065807:26,benchmark,benchmark,26,https://hail.is,https://github.com/hail-is/hail/pull/4396#issuecomment-434065807,1,['benchmark'],['benchmark']
Testability,Bump org.testng:testng from 6.8.21 to 7.7.1 in /hail,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12665:9,test,testng,9,https://hail.is,https://github.com/hail-is/hail/pull/12665,2,['test'],['testng']
Testability,Bump pillow from 10.1.0 to 10.2.0 in /benchmark/python,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14193:38,benchmark,benchmark,38,https://hail.is,https://github.com/hail-is/hail/pull/14193,1,['benchmark'],['benchmark']
Testability,Bump pillow from 10.2.0 to 10.3.0 in /benchmark/python,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14439:38,benchmark,benchmark,38,https://hail.is,https://github.com/hail-is/hail/pull/14439,1,['benchmark'],['benchmark']
Testability,Bump python-json-logger from 0.1.11 to 2.0.2 in /docker,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11467:17,log,logger,17,https://hail.is,https://github.com/hail-is/hail/pull/11467,1,['log'],['logger']
Testability,Bump. This needs to go into production before we do massive scale tests since Standard_SSD charges per IO operation.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11123#issuecomment-990100370:66,test,tests,66,https://hail.is,https://github.com/hail-is/hail/pull/11123#issuecomment-990100370,1,['test'],['tests']
Testability,Bump. Will be awesome to get this in. Let me know if you want help. Looks like the tests are passing but there's a python problem.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2374#issuecomment-344966947:83,test,tests,83,https://hail.is,https://github.com/hail-is/hail/pull/2374#issuecomment-344966947,1,['test'],['tests']
Testability,"Bumping this PR, I'd like it to land so I can nail down exactly why my flags PR is causing BN tests to fail.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12139#issuecomment-1317326725:94,test,tests,94,https://hail.is,https://github.com/hail-is/hail/pull/12139#issuecomment-1317326725,1,['test'],['tests']
Testability,"Bumps [aiodns](https://github.com/saghul/aiodns) from 2.0.0 to 3.0.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/saghul/aiodns/releases"">aiodns's releases</a>.</em></p>; <blockquote>; <h2>3.0.0</h2>; <ul>; <li>Release wheels and source to PyPI with GH actions</li>; <li>Try to make tests more resilient</li>; <li>Don't build universal wheels</li>; <li>Migrate CI to GH Actions</li>; <li>Fix TXT CHAOS test</li>; <li>Add support for CAA queries</li>; <li>Support Python &gt;= 3.6</li>; <li>Bump pycares dependency</li>; <li>Drop tasks.py</li>; <li>Allow specifying dnsclass for queries</li>; <li>Set URL to https</li>; <li>Add license args in setup.py</li>; <li>Converted Type Annotations to Py3 syntax Closes</li>; <li>Only run mypy on cpython versions</li>; <li>Also fix all type errors with latest mypy - pycares seems to have no typing / stubs so lets ignore it via <code>mypy.ini</code></li>; <li>setup: typing exists since Python 3.5</li>; <li>Fix type annotation of gethostbyname()</li>; <li>Updated README</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/saghul/aiodns/blob/master/ChangeLog"">aiodns's changelog</a>.</em></p>; <blockquote>; <h1>3.0.0</h1>; <ul>; <li>Release wheels and source to PyPI with GH actions</li>; <li>Try to make tests more resilient</li>; <li>Don't build universal wheels</li>; <li>Migrate CI to GH Actions</li>; <li>Fix TXT CHAOS test</li>; <li>Add support for CAA queries</li>; <li>Support Python &gt;= 3.6</li>; <li>Bump pycares dependency</li>; <li>Drop tasks.py</li>; <li>Allow specifying dnsclass for queries</li>; <li>Set URL to https</li>; <li>Add license args in setup.py</li>; <li>Converted Type Annotations to Py3 syntax Closes</li>; <li>Only run mypy on cpython versions</li>; <li>Also fix all type errors with latest mypy - pycares seems to have no typing / stubs so lets ignore it via <code>mypy.ini</code></li>; <li>setup:",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11570:333,test,tests,333,https://hail.is,https://github.com/hail-is/hail/pull/11570,3,"['stub', 'test']","['stubs', 'test', 'tests']"
Testability,"Bumps [aiohttp](https://github.com/aio-libs/aiohttp) from 3.6.0 to 3.7.4.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/aio-libs/aiohttp/releases"">aiohttp's releases</a>.</em></p>; <blockquote>; <h2>aiohttp 3.7.3 release</h2>; <h2>Features</h2>; <ul>; <li>Use Brotli instead of brotlipy; <code>[#3803](https://github.com/aio-libs/aiohttp/issues/3803) &lt;https://github.com/aio-libs/aiohttp/issues/3803&gt;</code>_</li>; <li>Made exceptions pickleable. Also changed the repr of some exceptions.; <code>[#4077](https://github.com/aio-libs/aiohttp/issues/4077) &lt;https://github.com/aio-libs/aiohttp/issues/4077&gt;</code>_</li>; </ul>; <h2>Bugfixes</h2>; <ul>; <li>Raise a ClientResponseError instead of an AssertionError for a blank; HTTP Reason Phrase.; <code>[#3532](https://github.com/aio-libs/aiohttp/issues/3532) &lt;https://github.com/aio-libs/aiohttp/issues/3532&gt;</code>_</li>; <li>Fix <code>web_middlewares.normalize_path_middleware</code> behavior for patch without slash.; <code>[#3669](https://github.com/aio-libs/aiohttp/issues/3669) &lt;https://github.com/aio-libs/aiohttp/issues/3669&gt;</code>_</li>; <li>Fix overshadowing of overlapped sub-applications prefixes.; <code>[#3701](https://github.com/aio-libs/aiohttp/issues/3701) &lt;https://github.com/aio-libs/aiohttp/issues/3701&gt;</code>_</li>; <li>Make <code>BaseConnector.close()</code> a coroutine and wait until the client closes all connections. Drop deprecated &quot;with Connector():&quot; syntax.; <code>[#3736](https://github.com/aio-libs/aiohttp/issues/3736) &lt;https://github.com/aio-libs/aiohttp/issues/3736&gt;</code>_</li>; <li>Reset the <code>sock_read</code> timeout each time data is received for a <code>aiohttp.client</code> response.; <code>[#3808](https://github.com/aio-libs/aiohttp/issues/3808) &lt;https://github.com/aio-libs/aiohttp/issues/3808&gt;</code>_</li>; <li>Fixed type annotation for add_view method of UrlDispatcher to accept any subclass of Vie",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10115:755,Assert,AssertionError,755,https://hail.is,https://github.com/hail-is/hail/pull/10115,1,['Assert'],['AssertionError']
Testability,"Bumps [aiohttp](https://github.com/aio-libs/aiohttp) from 3.8.1 to 3.8.3.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/aio-libs/aiohttp/releases"">aiohttp's releases</a>.</em></p>; <blockquote>; <h2>3.8.3</h2>; <p>.. attention::</p>; <p>This is the last :doc:<code>aiohttp &lt;index&gt;</code> release tested under; Python 3.6. The 3.9 stream is dropping it from the CI and the; distribution package metadata.</p>; <h2>Bugfixes</h2>; <ul>; <li>; <p>Increased the upper boundary of the :doc:<code>multidict:index</code> dependency; to allow for the version 6 -- by :user:<code>hugovk</code>.</p>; <p>It used to be limited below version 7 in :doc:<code>aiohttp &lt;index&gt;</code> v3.8.1 but; was lowered in v3.8.2 via :pr:<code>6550</code> and never brought back, causing; problems with dependency pins when upgrading. :doc:<code>aiohttp &lt;index&gt;</code> v3.8.3; fixes that by recovering the original boundary of <code>&lt; 7</code>.; (<a href=""https://github-redirect.dependabot.com/aio-libs/aiohttp/issues/6950"">#6950</a>)</p>; </li>; </ul>; <hr />; <h1>3.8.2 (2022-09-20, subsequently yanked on 2022-09-21)</h1>; <p>.. note::</p>; <p>This release has some compatibility fixes for Python 3.11 but it may; still have some quirks. Some tests are still flaky in the CI.</p>; <p>.. caution::</p>; <p>This release has been yanked from PyPI. Modern pip will not pick it; up automatically. The reason is that is has <code>multidict &lt; 6</code> set in; the distribution package metadata (see :pr:<code>6950</code>). Please, use; <code>aiohttp ~= 3.8.3, != 3.8.1</code> instead, if you can.</p>; <h2>Bugfixes</h2>; <ul>; <li>Added support for registering :rfc:<code>OPTIONS &lt;9110#OPTIONS&gt;</code>; HTTP method handlers via :py:class:<code>~aiohttp.web.RouteTableDef</code>.; (<a href=""https://github-redirect.dependabot.com/aio-libs/aiohttp/issues/4663"">#4663</a>)</li>; <li>Started supporting :rfc:<code>authority-form &lt;9112#authority-form&gt;</",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12296:350,test,tested,350,https://hail.is,https://github.com/hail-is/hail/pull/12296,1,['test'],['tested']
Testability,"Bumps [aiohttp](https://github.com/aio-libs/aiohttp) from 3.9.1 to 3.9.3.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/aio-libs/aiohttp/releases"">aiohttp's releases</a>.</em></p>; <blockquote>; <h2>3.9.3</h2>; <h2>Bug fixes</h2>; <ul>; <li>; <p>Fixed backwards compatibility breakage (in 3.9.2) of <code>ssl</code> parameter when set outside; of <code>ClientSession</code> (e.g. directly in <code>TCPConnector</code>) -- by :user:<code>Dreamsorcerer</code>.</p>; <p><em>Related issues and pull requests on GitHub:</em>; <a href=""https://redirect.github.com/aio-libs/aiohttp/issues/8097"">#8097</a>, <a href=""https://redirect.github.com/aio-libs/aiohttp/issues/8098"">#8098</a>.</p>; </li>; </ul>; <h2>Miscellaneous internal changes</h2>; <ul>; <li>; <p>Improved test suite handling of paths and temp files to consistently use pathlib and pytest fixtures.</p>; <p><em>Related issues and pull requests on GitHub:</em>; <a href=""https://redirect.github.com/aio-libs/aiohttp/issues/3957"">#3957</a>.</p>; </li>; </ul>; <hr />; <h2>3.9.2</h2>; <h2>Bug fixes</h2>; <ul>; <li>; <p>Fixed server-side websocket connection leak.</p>; <p><em>Related issues and pull requests on GitHub:</em>; <a href=""https://redirect.github.com/aio-libs/aiohttp/issues/7978"">#7978</a>.</p>; </li>; <li>; <p>Fixed <code>web.FileResponse</code> doing blocking I/O in the event loop.</p>; <p><em>Related issues and pull requests on GitHub:</em>; <a href=""https://redirect.github.com/aio-libs/aiohttp/issues/8012"">#8012</a>.</p>; </li>; <li>; <p>Fixed double compress when compression enabled and compressed file exists in server file responses.</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/aio-libs/aiohttp/blob/master/CHANGES.rst"">aiohttp's changelog</a>.</em></p>; <blockquote>; <h1>3.9.3 (2024-01-29)</h1>; <h2>Bug fixes</h2>; <ul>; <li>; <p",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14219:809,test,test,809,https://hail.is,https://github.com/hail-is/hail/pull/14219,2,['test'],['test']
Testability,"Bumps [anyio](https://github.com/agronholm/anyio) from 3.6.1 to 3.6.2.; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/agronholm/anyio/blob/3.6.2/docs/versionhistory.rst"">anyio's changelog</a>.</em></p>; <blockquote>; <h1>Version history</h1>; <p>This library adheres to <code>Semantic Versioning 2.0 &lt;http://semver.org/&gt;</code>_.</p>; <p><strong>3.6.2</strong></p>; <ul>; <li>Pinned Trio to &lt; 0.22 to avoid incompatibility with AnyIO's <code>ExceptionGroup</code> class; causing <code>AttributeError: 'NonBaseMultiError' object has no attribute '_exceptions'</code>; (AnyIO 4 is unaffected)</li>; </ul>; <p><strong>3.6.1</strong></p>; <ul>; <li>Fixed exception handler in the asyncio test runner not properly handling a context; that does not contain the <code>exception</code> key</li>; </ul>; <p><strong>3.6.0</strong></p>; <ul>; <li>; <p>Fixed <code>TypeError</code> in <code>get_current_task()</code> on asyncio when using a custom <code>Task</code> factory</p>; </li>; <li>; <p>Updated type annotations on <code>run_process()</code> and <code>open_process()</code>:</p>; <ul>; <li><code>command</code> now accepts accepts bytes and sequences of bytes</li>; <li><code>stdin</code>, <code>stdout</code> and <code>stderr</code> now accept file-like objects; (PR by John T. Wodder II)</li>; </ul>; </li>; <li>; <p>Changed the pytest plugin to run both the setup and teardown phases of asynchronous; generator fixtures within a single task to enable use cases such as cancel scopes and; task groups where a context manager straddles the <code>yield</code></p>; </li>; </ul>; <p><strong>3.5.0</strong></p>; <ul>; <li>Added <code>start_new_session</code> keyword argument to <code>run_process()</code> and <code>open_process()</code>; (PR by Jordan Speicher)</li>; <li>Fixed deadlock in synchronization primitives on asyncio which can happen if a task acquiring a; primitive is hit with a native (not AnyIO) cancellation with just the right timing, le",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12362:736,test,test,736,https://hail.is,https://github.com/hail-is/hail/pull/12362,1,['test'],['test']
Testability,"Bumps [azure-core-http-netty](https://github.com/Azure/azure-sdk-for-java) from 1.10.0 to 1.12.7.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/Azure/azure-sdk-for-java/releases"">azure-core-http-netty's releases</a>.</em></p>; <blockquote>; <h2>azure-core-http-netty_1.12.7</h2>; <h2>1.12.7 (2022-11-04)</h2>; <h3>Other Changes</h3>; <h4>Dependency Updates</h4>; <ul>; <li>Upgraded <code>azure-core</code> from <code>1.33.0</code> to <code>1.34.0</code>.</li>; </ul>; <h2>azure-core-http-okhttp_1.11.4</h2>; <h2>1.11.4 (2022-11-04)</h2>; <h3>Other Changes</h3>; <h4>Dependency Updates</h4>; <ul>; <li>Upgraded <code>azure-core</code> from <code>1.33.0</code> to <code>1.34.0</code>.</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/Azure/azure-sdk-for-java/commit/1034e2cd384b753b6bcca3e0fbf3ae2276a9d2b6""><code>1034e2c</code></a> Reduce Test Times from Slow Tests (<a href=""https://github-redirect.dependabot.com/Azure/azure-sdk-for-java/issues/31954"">#31954</a>)</li>; <li><a href=""https://github.com/Azure/azure-sdk-for-java/commit/00e2e72c82b9804e3b726ff5aa93465cbc3a613a""><code>00e2e72</code></a> Fix Bug in Ignoring Response Body (<a href=""https://github-redirect.dependabot.com/Azure/azure-sdk-for-java/issues/31952"">#31952</a>)</li>; <li><a href=""https://github.com/Azure/azure-sdk-for-java/commit/577e3af11b1d68422840f70a33c62a9e97df1cdb""><code>577e3af</code></a> Cosmos spark3.3 support (<a href=""https://github-redirect.dependabot.com/Azure/azure-sdk-for-java/issues/31666"">#31666</a>)</li>; <li><a href=""https://github.com/Azure/azure-sdk-for-java/commit/c558cf20a36c119106da9551b52deae687655d7c""><code>c558cf2</code></a> Prepare Core Libraries for November 2022 Release (<a href=""https://github-redirect.dependabot.com/Azure/azure-sdk-for-java/issues/31950"">#31950</a>)</li>; <li><a href=""https://github.com/Azure/azure-sdk-for-java/commit/1907997b1d42ebe739aeff9c028c417c",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12460:954,Test,Test,954,https://hail.is,https://github.com/hail-is/hail/pull/12460,2,['Test'],"['Test', 'Tests']"
Testability,"Bumps [azure-identity](https://github.com/Azure/azure-sdk-for-python) from 1.8.0 to 1.9.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/Azure/azure-sdk-for-python/releases"">azure-identity's releases</a>.</em></p>; <blockquote>; <h2>azure-identity_1.9.0</h2>; <h2>1.9.0 (2022-04-05)</h2>; <h3>Features Added</h3>; <ul>; <li>Added PII logging if logging.DEBUG is enabled. (<a href=""https://github-redirect.dependabot.com/Azure/azure-sdk-for-python/issues/23203"">#23203</a>)</li>; </ul>; <h3>Breaking Changes</h3>; <ul>; <li><code>validate_authority</code> support is not available in 1.9.0.</li>; </ul>; <h3>Bugs Fixed</h3>; <ul>; <li>Added check on <code>content</code> from msal response. (<a href=""https://github-redirect.dependabot.com/Azure/azure-sdk-for-python/issues/23483"">#23483</a>)</li>; <li>Fixed the issue that async OBO credential does not refresh correctly. (<a href=""https://github-redirect.dependabot.com/Azure/azure-sdk-for-python/issues/21981"">#21981</a>)</li>; </ul>; <h3>Other Changes</h3>; <ul>; <li>Removed <code>resource_id</code>, please use <code>identity_config</code> instead.</li>; <li>Renamed argument name <code>get_assertion</code> to <code>func</code> for <code>ClientAssertionCredential</code>.</li>; </ul>; <h2>azure-identity_1.9.0b1</h2>; <h2>1.9.0b1 (2022-03-08)</h2>; <h3>Features Added</h3>; <ul>; <li>Added <code>validate_authority</code> support for msal client (<a href=""https://github-redirect.dependabot.com/Azure/azure-sdk-for-python/issues/22625"">#22625</a>)</li>; <li>Added <code>resource_id</code> support for user-assigned managed identity (<a href=""https://github-redirect.dependabot.com/Azure/azure-sdk-for-python/issues/22329"">#22329</a>)</li>; <li>Added <code>ClientAssertionCredential</code> support (<a href=""https://github-redirect.dependabot.com/Azure/azure-sdk-for-python/issues/22328"">#22328</a>)</li>; <li>Updated App service API version to &quot;2019-08-01&quot; (<a href=""https://github-redir",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11752:382,log,logging,382,https://hail.is,https://github.com/hail-is/hail/pull/11752,2,['log'],['logging']
Testability,"Bumps [boto3](https://github.com/boto/boto3) from 1.26.6 to 1.26.9.; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/boto/boto3/blob/develop/CHANGELOG.rst"">boto3's changelog</a>.</em></p>; <blockquote>; <h1>1.26.9</h1>; <ul>; <li>api-change:<code>customer-profiles</code>: [<code>botocore</code>] This release enhances the SearchProfiles API by providing functionality to search for profiles using multiple keys and logical operators.</li>; <li>api-change:<code>lakeformation</code>: [<code>botocore</code>] This release adds a new parameter &quot;Parameters&quot; in the DataLakeSettings.</li>; <li>api-change:<code>managedblockchain</code>: [<code>botocore</code>] Updating the API docs data type: NetworkEthereumAttributes, and the operations DeleteNode, and CreateNode to also include the supported Goerli network.</li>; <li>api-change:<code>proton</code>: [<code>botocore</code>] Add support for CodeBuild Provisioning</li>; <li>api-change:<code>rds</code>: [<code>botocore</code>] This release adds support for restoring an RDS Multi-AZ DB cluster snapshot to a Single-AZ deployment or a Multi-AZ DB instance deployment.</li>; <li>api-change:<code>workdocs</code>: [<code>botocore</code>] Added 2 new document related operations, DeleteDocumentVersion and RestoreDocumentVersions.</li>; <li>api-change:<code>xray</code>: [<code>botocore</code>] This release enhances GetServiceGraph API to support new type of edge to represent links between SQS and Lambda in event-driven applications.</li>; </ul>; <h1>1.26.8</h1>; <ul>; <li>api-change:<code>glue</code>: [<code>botocore</code>] Added links related to enabling job bookmarks.</li>; <li>api-change:<code>iot</code>: [<code>botocore</code>] This release add new api listRelatedResourcesForAuditFinding and new member type IssuerCertificates for Iot device device defender Audit.</li>; <li>api-change:<code>license-manager</code>: [<code>botocore</code>] AWS License Manager now supports onboarded Managem",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12466:457,log,logical,457,https://hail.is,https://github.com/hail-is/hail/pull/12466,1,['log'],['logical']
Testability,"Bumps [com.azure:azure-core-http-netty](https://github.com/Azure/azure-sdk-for-java) from 1.13.3 to 1.13.6.; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/Azure/azure-sdk-for-java/commit/0e7e5a9589c61bb06193c8e887b6b631679f0902""><code>0e7e5a9</code></a> Skip coverage requirements for azure-core-test (<a href=""https://redirect.github.com/Azure/azure-sdk-for-java/issues/36254"">#36254</a>)</li>; <li><a href=""https://github.com/Azure/azure-sdk-for-java/commit/67df6924e911a1cb65a7f891a05e943dd66f274f""><code>67df692</code></a> Update broken links for test proxy documentation (<a href=""https://redirect.github.com/Azure/azure-sdk-for-java/issues/36250"">#36250</a>)</li>; <li><a href=""https://github.com/Azure/azure-sdk-for-java/commit/f2a67eb377d06f9478bc5e6c8bfc282cbcaa7508""><code>f2a67eb</code></a> [Form Recognizer] Address API view feedback (<a href=""https://redirect.github.com/Azure/azure-sdk-for-java/issues/36233"">#36233</a>)</li>; <li><a href=""https://github.com/Azure/azure-sdk-for-java/commit/e618ba1f0869480eff22a0682213bf7baa42a714""><code>e618ba1</code></a> Channel health check improvement for cancelled requests (<a href=""https://redirect.github.com/Azure/azure-sdk-for-java/issues/36225"">#36225</a>)</li>; <li><a href=""https://github.com/Azure/azure-sdk-for-java/commit/d464be7d9248d773b4aa793ad71c0eca77e8c450""><code>d464be7</code></a> Prepare Core Libraries for August 2023 Release (<a href=""https://redirect.github.com/Azure/azure-sdk-for-java/issues/36239"">#36239</a>)</li>; <li><a href=""https://github.com/Azure/azure-sdk-for-java/commit/530cc4378c650f7fe7c7a528dd119993961088a3""><code>530cc43</code></a> mgmt, upgrade network 2023-04 (<a href=""https://redirect.github.com/Azure/azure-sdk-for-java/issues/36242"">#36242</a>)</li>; <li><a href=""https://github.com/Azure/azure-sdk-for-java/commit/7e3b6a5634be16f65c02523c7d84f9b5b27f4e42""><code>7e3b6a5</code></a> Update TRC API azure core (<a href=""https://redirect.github.com/Azure/azure-sdk-for-jav",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13591:327,test,test,327,https://hail.is,https://github.com/hail-is/hail/pull/13591,2,['test'],['test']
Testability,"Bumps [com.github.samtools:htsjdk](https://github.com/samtools/htsjdk) from 3.0.4 to 4.0.1.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/samtools/htsjdk/releases"">com.github.samtools:htsjdk's releases</a>.</em></p>; <blockquote>; <h2>4.0.1</h2>; <p>This is a tiny release which bumps some dependency versions and adds two small convenience methods to Genotype.</p>; <h2>What's Changed</h2>; <ul>; <li>Move the EnaRefServiceTest to the externalAPI test group by <a href=""https://github.com/lbergelson""><code>@​lbergelson</code></a> in <a href=""https://redirect.github.com/samtools/htsjdk/pull/1675"">samtools/htsjdk#1675</a></li>; <li>two methods for Genotype: HasRefAllele HasAltAllele by <a href=""https://github.com/lindenb""><code>@​lindenb</code></a> in <a href=""https://redirect.github.com/samtools/htsjdk/pull/1678"">samtools/htsjdk#1678</a></li>; <li>Update two remaining out of date dependencies by <a href=""https://github.com/lbergelson""><code>@​lbergelson</code></a> in <a href=""https://redirect.github.com/samtools/htsjdk/pull/1677"">samtools/htsjdk#1677</a></li>; </ul>; <p><strong>Full Changelog</strong>: <a href=""https://github.com/samtools/htsjdk/compare/4.0.0...4.0.1"">https://github.com/samtools/htsjdk/compare/4.0.0...4.0.1</a></p>; <h2>4.0.0</h2>; <h2>Moving forward</h2>; <p>This is the first release to be built exclusively for java 17. Java 17 features are now allowed in our source code and we will no longer support older versions of java. We've also updated dependencies to fix security issues. There are several small bug fixes as well.</p>; <h3>JSON dependency:</h3>; <p>We've dropped the MJSON library which was no longer being updated and replaced it with a similarly small json library from org.json</p>; <h2>What's Changed</h2>; <ul>; <li>Migrate to Java 17 by <a href=""https://github.com/lbergelson""><code>@​lbergelson</code></a> in <a href=""https://redirect.github.com/samtools/htsjdk/pull/1649"">samtools/htsjdk#1649</a></l",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13576:496,test,test,496,https://hail.is,https://github.com/hail-is/hail/pull/13576,1,['test'],['test']
Testability,"Bumps [de.undercouch.download](https://github.com/michel-kraemer/gradle-download-task) from 5.3.0 to 5.3.1.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/michel-kraemer/gradle-download-task/releases"">de.undercouch.download's releases</a>.</em></p>; <blockquote>; <h2>5.3.1</h2>; <p>Bug fixes:</p>; <ul>; <li>Downgrade slf4j to fix warning on console about missing slf4j provider</li>; <li>Allow <code>download</code> and <code>verify</code> extensions to be created on demand in custom tasks, so these tasks can be made compatible with Gradle's configuration cache (see <a href=""https://github-redirect.dependabot.com/michel-kraemer/gradle-download-task/issues/284"">#284</a>). Thanks to <a href=""https://github.com/liblit""><code>@​liblit</code></a> for testing!</li>; </ul>; <p>Maintenance:</p>; <ul>; <li>Update dependencies</li>; <li>Improve documentation</li>; <li>Add integration tests for Gradle 6.9.3 and 7.6</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/michel-kraemer/gradle-download-task/commit/a0374fc7c895ae53309ea351e989571204e0ea5f""><code>a0374fc</code></a> Bump up version number to 5.3.1</li>; <li><a href=""https://github.com/michel-kraemer/gradle-download-task/commit/612f57a382b8640cc730dc5e75d1c809e3e772bd""><code>612f57a</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/michel-kraemer/gradle-download-task/issues/291"">#291</a> from michel-kraemer/dependabot/npm_and_yarn/screencas...</li>; <li><a href=""https://github.com/michel-kraemer/gradle-download-task/commit/53af1049f5514afe58e884d487d7c57dae47759d""><code>53af104</code></a> Bump http-cache-semantics from 4.1.0 to 4.1.1 in /screencast</li>; <li><a href=""https://github.com/michel-kraemer/gradle-download-task/commit/398c14c05c6448b380ac35c6095598299c5e23c5""><code>398c14c</code></a> Update dependencies</li>; <li><a href=""https://github.com/michel-kraemer/gradle-download-task",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12707:801,test,testing,801,https://hail.is,https://github.com/hail-is/hail/pull/12707,2,['test'],"['testing', 'tests']"
Testability,"Bumps [de.undercouch.download](https://github.com/michel-kraemer/gradle-download-task) from 5.3.1 to 5.4.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/michel-kraemer/gradle-download-task/releases"">de.undercouch.download's releases</a>.</em></p>; <blockquote>; <h2>5.4.0</h2>; <p>New features:</p>; <ul>; <li>Add possibility to set request <code>method</code> and <code>body</code></li>; </ul>; <p>Maintenance:</p>; <ul>; <li>Update dependencies</li>; <li>Improve documentation</li>; <li>Add integration tests for Gradle 8.0.1</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/michel-kraemer/gradle-download-task/commit/4c983ed5cd229fa64912294737c858c2ba8486d6""><code>4c983ed</code></a> Bump up version number to 5.4.0</li>; <li><a href=""https://github.com/michel-kraemer/gradle-download-task/commit/cc20442ab67bf37687c08e67af7e7de3a21c8fbe""><code>cc20442</code></a> Add integration tests for Gradle 8.0.2</li>; <li><a href=""https://github.com/michel-kraemer/gradle-download-task/commit/472920e572e4cf45d321868874ced50ad8d1e2d5""><code>472920e</code></a> Add possibility to set request method and body</li>; <li><a href=""https://github.com/michel-kraemer/gradle-download-task/commit/82e70cae2a8d48b4f5165a9b543d4e65bb793d88""><code>82e70ca</code></a> Update dependencies</li>; <li><a href=""https://github.com/michel-kraemer/gradle-download-task/commit/86a15f1c16eb729dc71b6caf30237d07b8e0bb01""><code>86a15f1</code></a> Fix compiler warnings and deprecations</li>; <li><a href=""https://github.com/michel-kraemer/gradle-download-task/commit/86363072c8239330b28976109a622bdd073507b6""><code>8636307</code></a> Negative timeouts are actually not allowed</li>; <li><a href=""https://github.com/michel-kraemer/gradle-download-task/commit/4ff0ff0e63e0dd45f231990d0dcebffde6e6b709""><code>4ff0ff0</code></a> Update dependencies</li>; <li><a href=""https://github.com/michel-kraemer/gradle-download-",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12893:554,test,tests,554,https://hail.is,https://github.com/hail-is/hail/pull/12893,2,['test'],['tests']
Testability,"Bumps [docker](https://github.com/docker/docker-py) from 5.0.3 to 6.0.1.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/docker/docker-py/releases"">docker's releases</a>.</em></p>; <blockquote>; <h2>6.0.1</h2>; <h2>🐛 Bugfixes</h2>; <ul>; <li>Fix for <code>The pipe has been ended</code> errors on Windows (<a href=""https://github-redirect.dependabot.com/docker/docker-py/issues/3056"">#3056</a>)</li>; <li>Support floats for timestamps in Docker logs (<code>since</code> / <code>until</code>) (<a href=""https://github-redirect.dependabot.com/docker/docker-py/issues/3031"">#3031</a>)</li>; </ul>; <h2>What's Changed</h2>; <ul>; <li>docs: install package in ReadTheDocs build by <a href=""https://github.com/milas""><code>@​milas</code></a> in <a href=""https://github-redirect.dependabot.com/docker/docker-py/pull/3032"">docker/docker-py#3032</a></li>; <li>Use latest stable syntax for Dockerfiles by <a href=""https://github.com/thaJeztah""><code>@​thaJeztah</code></a> in <a href=""https://github-redirect.dependabot.com/docker/docker-py/pull/3035"">docker/docker-py#3035</a></li>; <li>feat: add support for floats to docker logs params since / until sinc… by <a href=""https://github.com/ArchiMoebius""><code>@​ArchiMoebius</code></a> in <a href=""https://github-redirect.dependabot.com/docker/docker-py/pull/3031"">docker/docker-py#3031</a></li>; <li>Change prune test to use anonymous volumes by <a href=""https://github.com/cpuguy83""><code>@​cpuguy83</code></a> in <a href=""https://github-redirect.dependabot.com/docker/docker-py/pull/3051"">docker/docker-py#3051</a></li>; <li>socket: handle npipe close by <a href=""https://github.com/nicks""><code>@​nicks</code></a> in <a href=""https://github-redirect.dependabot.com/docker/docker-py/pull/3056"">docker/docker-py#3056</a></li>; </ul>; <h2>New Contributors</h2>; <ul>; <li><a href=""https://github.com/ArchiMoebius""><code>@​ArchiMoebius</code></a> made their first contribution in <a href=""https://github-redirect.de",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12475:491,log,logs,491,https://hail.is,https://github.com/hail-is/hail/pull/12475,1,['log'],['logs']
Testability,"Bumps [google-cloud-logging](https://github.com/googleapis/python-logging) from 1.12.1 to 3.0.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/googleapis/python-logging/releases"">google-cloud-logging's releases</a>.</em></p>; <blockquote>; <h2>v3.0.0</h2>; <h2><a href=""https://github.com/googleapis/python-logging/compare/v2.7.0...v3.0.0"">3.0.0</a> (2022-01-27)</h2>; <h3>⚠ BREAKING CHANGES</h3>; <ul>; <li>make logging API more friendly to use (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/422"">#422</a>)</li>; <li>api consistency between HTTP and Gapic layers (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/375"">#375</a>)</li>; <li>support string-encoded json (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/339"">#339</a>)</li>; <li>Infer default resource in logger (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/315"">#315</a>)</li>; <li>support json logs (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/316"">#316</a>)</li>; <li>deprecate AppEngineHandler and ContainerEngineHandler (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/310"">#310</a>)</li>; </ul>; <h3>Features</h3>; <ul>; <li>add api key support (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/472"">#472</a>) (<a href=""https://github.com/googleapis/python-logging/commit/81ca8c616acb988be1fbecfc2a0b1a5b39280149"">81ca8c6</a>)</li>; <li>add json_fields extras argument for adding to jsonPayload (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/447"">#447</a>) (<a href=""https://github.com/googleapis/python-logging/commit/a760e02371a55d6262e42de9e0222fffa2c7192b"">a760e02</a>)</li>; <li>avoid importing grpc when explicitly disabled (<a href=""https://github-redirect.dependabot.com/googleapis/python-logging/issues/",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11574:20,log,logging,20,https://hail.is,https://github.com/hail-is/hail/pull/11574,10,['log'],"['logger', 'logging']"
Testability,"Bumps [junixsocket-core](https://github.com/kohlschutter/junixsocket) from 2.3.2 to 2.6.1.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/kohlschutter/junixsocket/releases"">junixsocket-core's releases</a>.</em></p>; <blockquote>; <h2>junixsocket 2.6.1</h2>; <ul>; <li>Add AFSocket.checkConnectionClosed to probe connection status</li>; <li>Fix connection status checks and error handling</li>; <li>Fix bind behavior on Windows, support re-bind with reuseAddress</li>; <li>Fix and improve unit tests/selftests, remove several false-positive errors found in the wild (Azure Cloudshell/Microsoft CBL-Mariner 2.0, Amazon EC2, OpenBSD, etc.)</li>; <li>Fix SimpleTestServer demo, actually counting now to 5, not 6.</li>; <li>Make builds reproducible, align timestamps with git commit</li>; </ul>; <p>NOTE: If you're seeing unexpected errors in selftest, please verify with the attached <code>junixsocket-selftest-2.6.1-hotpatch-jar-with-dependencies.jar</code>. There may be false-positive socket timeout issues on very slow machines (e.g., qemu s390).</p>; <h2>junixsocket 2.6.0</h2>; <ul>; <li>Add support for GraalVM native-image</li>; <li>Add support for native-image selftest</li>; <li>Add support for AF_VSOCK (on Linux, and some macOS VMs)</li>; <li>Reintroduce deprecated legacy constructors for AFUNIXSocketAddress that were removed in 2.5.0.</li>; <li>Parent POM has been renamed from junixsocket-parent to junixsocket</li>; </ul>; <h2>junixsocket 2.5.2</h2>; <ul>; <li>Fix address handling in the Abstract Namespace</li>; <li>Fix support for very large datagrams (&gt; 1MB)</li>; <li>Fix InetAddress-wrapping of long addresses</li>; <li>Update Xcode support script, crossclang</li>; <li>Bump postgresql version in demo code</li>; <li>Fix dependency for custom architecture artifact</li>; </ul>; <h2>junixsocket 2.5.1</h2>; <ul>; <li>Add support for IBM z/OS (experimental, binary not included)</li>; <li>Add support for building from source on arm64",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12483:540,test,tests,540,https://hail.is,https://github.com/hail-is/hail/pull/12483,1,['test'],['tests']
Testability,"Bumps [keyrings-alt](https://github.com/jaraco/keyrings.alt) from 3.5.2 to 4.2.0.; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/jaraco/keyrings.alt/blob/main/CHANGES.rst"">keyrings-alt's changelog</a>.</em></p>; <blockquote>; <h1>v4.2.0</h1>; <p><a href=""https://github-redirect.dependabot.com/jaraco/keyrings.alt/issues/46"">#46</a>: EncryptedFileKeyring now supports both pycryptodome and; pycryptodomex (preferring the latter).</p>; <h1>v4.1.2</h1>; <p>Updated to work with keyring 23.9+ (no longer depending on properties; module).</p>; <h1>v4.1.1</h1>; <p>Refresh package metadata.</p>; <p>Enrolled with Tidelift.</p>; <h1>v4.1.0</h1>; <p><a href=""https://github-redirect.dependabot.com/jaraco/keyrings.alt/issues/44"">#44</a>: Bump upper bound on pyfs.</p>; <p>Refresh package metadata.</p>; <h1>v4.0.2</h1>; <p><a href=""https://github-redirect.dependabot.com/jaraco/keyrings.alt/issues/43"">#43</a>: Tests are no longer included in the install.</p>; <h1>v4.0.1</h1>; <p>Package refresh and minor cleanup.</p>; <h1>v4.0.0</h1>; <p><a href=""https://github-redirect.dependabot.com/jaraco/keyrings.alt/issues/41"">#41</a>: Instead of PyCrypto or PyCryptodome, the encrypting backend; now relies on PyCryptodomex.</p>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/jaraco/keyrings.alt/commit/a2ef1a8e15859bb90f499e6be88c14468f246f8e""><code>a2ef1a8</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/jaraco/keyrings.alt/issues/46"">#46</a> from TheChymera/cryptodome</li>; <li><a href=""https://github.com/jaraco/keyrings.alt/commit/dfab9b2846f7a19bebe788046b167a19a579fb45""><code>dfab9b2</code></a> 👹 Feed the hobgoblins (delint).</li>; <li><a href=""https://github.com/jaraco/keyrings.alt/commit/757afb5d5f3ada3d954eff981e9279f4e348f1e9""><code>757afb5</code></a> ⚫ Fade to black.</li>; <li><a href=""https://github.com/jaraco/keyrings.alt/commit/1614724e27124672f723735ff208a59a",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12448:947,Test,Tests,947,https://hail.is,https://github.com/hail-is/hail/pull/12448,1,['Test'],['Tests']
Testability,"Bumps [libsass](https://github.com/sass/libsass-python) from 0.19.2 to 0.21.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/sass/libsass-python/releases"">libsass's releases</a>.</em></p>; <blockquote>; <h2>libsass 0.21.0</h2>; <ul>; <li>Fix build on OpenBSD. [#310 by Denis Fondras].</li>; <li>Produce abi3 wheels on windows. [#322 by Anthony Sottile]</li>; <li>Make the manpage build reproducible. [#319 by Chris Lamb]</li>; <li>Follow up the libsass upstream: 3.6.5 --- See the release notes of LibSass <a href=""https://github.com/sass/libsass/releases/tag/3.6.5"">3.6.5</a>. [#344 by Anthony Sottile]</li>; </ul>; <h2>libsass 0.20.1</h2>; <ul>; <li>(no changes, re-releasing to test build automation)</li>; </ul>; <h2>libsass 0.20.0</h2>; <ul>; <li>Produce abi3 wheels on macos / linux [#307 by Anthony Sottile]</li>; <li>Follow up the libsass upstream: 3.6.4 --- See the release notes of LibSass <a href=""https://github.com/sass/libsass/releases/tag/3.6.4"">3.6.4</a>. [#313 by Anthony Sottile]</li>; </ul>; <h2>libsass 0.19.4</h2>; <ul>; <li>Follow up the libsass upstream: 3.6.3 --- See the release notes of LibSass <a href=""https://github.com/sass/libsass/releases/tag/3.6.3"">3.6.3</a>. [#304 by Anthony Sottile]</li>; </ul>; <h2>libsass 0.19.3</h2>; <ul>; <li>Follow up the libsass upstream: 3.6.2 --- See the release notes of LibSass <a href=""https://github.com/sass/libsass/releases/tag/3.6.2"">3.6.2</a>. [#302 by Anthony Sottile]</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/sass/libsass-python/blob/master/docs/changes.rst"">libsass's changelog</a>.</em></p>; <blockquote>; <h1>Changelog</h1>; <h2>Version 0.21.1</h2>; <p>Released on May 20, 2021.</p>; <ul>; <li>Fix build on OpenBSD. [:issue:<code>310</code> by Denis Fondras].</li>; <li>Produce abi3 wheels on windows. [:issue:<code>322</code> by Anthony Sottile]</li>; <li>Make the manpage build reproducib",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11508:729,test,test,729,https://hail.is,https://github.com/hail-is/hail/pull/11508,1,['test'],['test']
Testability,"Bumps [minimist](https://github.com/substack/minimist) from 1.2.5 to 1.2.6.; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/substack/minimist/commit/7efb22a518b53b06f5b02a1038a88bd6290c2846""><code>7efb22a</code></a> 1.2.6</li>; <li><a href=""https://github.com/substack/minimist/commit/ef88b9325f77b5ee643ccfc97e2ebda577e4c4e2""><code>ef88b93</code></a> security notice for additional prototype pollution issue</li>; <li><a href=""https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d""><code>c2b9819</code></a> isConstructorOrProto adapted from PR</li>; <li><a href=""https://github.com/substack/minimist/commit/bc8ecee43875261f4f17eb20b1243d3ed15e70eb""><code>bc8ecee</code></a> test from prototype pollution PR</li>; <li>See full diff in <a href=""https://github.com/substack/minimist/compare/1.2.5...1.2.6"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=minimist&package-manager=npm_and_yarn&previous-version=1.2.5&new-version=1.2.6)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and blo",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11653:736,test,test,736,https://hail.is,https://github.com/hail-is/hail/pull/11653,1,['test'],['test']
Testability,"Bumps [mypy](https://github.com/python/mypy) from 0.780 to 0.931.; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python/mypy/commit/4486d764c07a1cee9792d691e8e85cedfed2a451""><code>4486d76</code></a> Bump version to 0.931</li>; <li><a href=""https://github.com/python/mypy/commit/d7fe756ddf2c5166a336c02624dccf74111f32a6""><code>d7fe756</code></a> Restore removed builtin_type() api method (<a href=""https://github-redirect.dependabot.com/python/mypy/issues/11932"">#11932</a>)</li>; <li><a href=""https://github.com/python/mypy/commit/4d64557848de9a7749412270d0e93dd9e3e1a494""><code>4d64557</code></a> stubtest: fix literal type construction (<a href=""https://github-redirect.dependabot.com/python/mypy/issues/11931"">#11931</a>)</li>; <li><a href=""https://github.com/python/mypy/commit/5b3280e667aea60c4a22b3e1df4fad6c5df421bd""><code>5b3280e</code></a> Fix crash on <code>ErasedType</code> and <code>covers_at_runtime</code> (<a href=""https://github-redirect.dependabot.com/python/mypy/issues/11924"">#11924</a>)</li>; <li><a href=""https://github.com/python/mypy/commit/73de602cf62f7a68eaa6a11bf04f01eebaf9a034""><code>73de602</code></a> Stricter None handling with --no-strict-optional (<a href=""https://github-redirect.dependabot.com/python/mypy/issues/11717"">#11717</a>)</li>; <li><a href=""https://github.com/python/mypy/commit/221a7f34cbfdc0dafe7f84042f2a707cbfdbf60f""><code>221a7f3</code></a> Fix PEP 585 type aliases in stubs (<a href=""https://github-redirect.dependabot.com/python/mypy/issues/11918"">#11918</a>)</li>; <li><a href=""https://github.com/python/mypy/commit/b40c3d0bae812d3c38096973e84479e20353d5a9""><code>b40c3d0</code></a> Handle <code>NoReturn</code> type aliases (<a href=""https://github-redirect.dependabot.com/python/mypy/issues/11912"">#11912</a>)</li>; <li><a href=""https://github.com/python/mypy/commit/3f2143d55c2f2ec6afc44b42541901aaaf12614a""><code>3f2143d</code></a> Always allow use of <code>type[T]</code> in stubs (<a href=""https://github-redir",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11498:629,stub,stubtest,629,https://hail.is,https://github.com/hail-is/hail/pull/11498,1,['stub'],['stubtest']
Testability,"Bumps [nanoid](https://github.com/ai/nanoid) from 3.1.23 to 3.2.0.; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/ai/nanoid/blob/main/CHANGELOG.md"">nanoid's changelog</a>.</em></p>; <blockquote>; <h1>Change Log</h1>; <p>This project adheres to <a href=""http://semver.org/"">Semantic Versioning</a>.</p>; <h2>3.2</h2>; <ul>; <li>Added <code>--size</code> and <code>--alphabet</code> arguments to binary (by Vitaly Baev).</li>; </ul>; <h2>3.1.32</h2>; <ul>; <li>Reduced <code>async</code> exports size (by Artyom Arutyunyan).</li>; <li>Moved from Jest to uvu (by Vitaly Baev).</li>; </ul>; <h2>3.1.31</h2>; <ul>; <li>Fixed collision vulnerability on object in <code>size</code> (by Artyom Arutyunyan).</li>; </ul>; <h2>3.1.30</h2>; <ul>; <li>Reduced size for project with <code>brotli</code> compression (by Anton Khlynovskiy).</li>; </ul>; <h2>3.1.29</h2>; <ul>; <li>Reduced npm package size.</li>; </ul>; <h2>3.1.28</h2>; <ul>; <li>Reduced npm package size.</li>; </ul>; <h2>3.1.27</h2>; <ul>; <li>Cleaned <code>dependencies</code> from development tools.</li>; </ul>; <h2>3.1.26</h2>; <ul>; <li>Improved performance (by Eitan Har-Shoshanim).</li>; <li>Reduced npm package size.</li>; </ul>; <h2>3.1.25</h2>; <ul>; <li>Fixed <code>browserify</code> support.</li>; </ul>; <h2>3.1.24</h2>; <ul>; <li>Fixed <code>browserify</code> support (by Artur Paikin).</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/ai/nanoid/commit/23b136929a6d58f32e31b269534a3ce3f680a086""><code>23b1369</code></a> Release 3.2 version</li>; <li><a href=""https://github.com/ai/nanoid/commit/967788efce880960512f969a56f8f22f3fc20bae""><code>967788e</code></a> Remove TS test tools</li>; <li><a href=""https://github.com/ai/nanoid/commit/27eaa90cd207a7782bbcf17343092ae87dd62164""><code>27eaa90</code></a> Simplify new binary tool</li>; <li><a href=""https://github.com/ai/nanoid/commit/a9d91239931dc77506381874826d297aee71d6",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11284:250,Log,Log,250,https://hail.is,https://github.com/hail-is/hail/pull/11284,2,['Log'],['Log']
Testability,"Bumps [nbconvert](https://github.com/jupyter/nbconvert) from 6.5.0 to 6.5.1.; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/jupyter/nbconvert/commit/7471b75a506b2fec776613e50e4f2234b97f3c8e""><code>7471b75</code></a> Release 6.5.1</li>; <li><a href=""https://github.com/jupyter/nbconvert/commit/c1943e0e9fd0ad6abd7d8dae380474cca4b04a31""><code>c1943e0</code></a> Fix pre-commit</li>; <li><a href=""https://github.com/jupyter/nbconvert/commit/8685e9378086e8d82a0df92505fe386095f929ad""><code>8685e93</code></a> Fix tests</li>; <li><a href=""https://github.com/jupyter/nbconvert/commit/0abf2906bc6c7170c8d70bc0df6995d21c5aeaf1""><code>0abf290</code></a> Run black and prettier</li>; <li><a href=""https://github.com/jupyter/nbconvert/commit/418d545ae596d95f5ea82d141c68fd1abc99f1a6""><code>418d545</code></a> Run test on 6.x branch</li>; <li><a href=""https://github.com/jupyter/nbconvert/commit/bef65d7ab2a469b01e4aa25f44c0f20326f7c7c5""><code>bef65d7</code></a> Convert input to string prior to escape HTML</li>; <li><a href=""https://github.com/jupyter/nbconvert/commit/0818628718c4a5d3ddd671fbd4881bf176e7d6e2""><code>0818628</code></a> Check input type before escaping</li>; <li><a href=""https://github.com/jupyter/nbconvert/commit/b206470f9ecd71b006a37dd1298dd3d9e3dd46dd""><code>b206470</code></a> GHSL-2021-1017, GHSL-2021-1020, GHSL-2021-1021</li>; <li><a href=""https://github.com/jupyter/nbconvert/commit/a03cbb8a8d04d47aefec51e7b1b816045682aed5""><code>a03cbb8</code></a> GHSL-2021-1026, GHSL-2021-1025</li>; <li><a href=""https://github.com/jupyter/nbconvert/commit/48fe71eb3335caf4e03166e56e0d16efcfbeaf44""><code>48fe71e</code></a> GHSL-2021-1024</li>; <li>Additional commits viewable in <a href=""https://github.com/jupyter/nbconvert/compare/6.5...6.5.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=nbconvert&package-manager=pip&previous-version=6.5.0",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12125:540,test,tests,540,https://hail.is,https://github.com/hail-is/hail/pull/12125,2,['test'],"['test', 'tests']"
Testability,"Bumps [nbsphinx](https://github.com/spatialaudio/nbsphinx) from 0.8.3 to 0.8.8.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/spatialaudio/nbsphinx/releases"">nbsphinx's releases</a>.</em></p>; <blockquote>; <h2>nbsphinx 0.8.8</h2>; <p><a href=""https://pypi.org/project/nbsphinx/0.8.8/"">https://pypi.org/project/nbsphinx/0.8.8/</a></p>; <ul>; <li>Support for the <code>sphinx_codeautolink</code> extension</li>; <li>Basic support for the <code>text</code> builder</li>; </ul>; <h2>nbsphinx 0.8.7</h2>; <p><a href=""https://pypi.org/project/nbsphinx/0.8.7/"">https://pypi.org/project/nbsphinx/0.8.7/</a></p>; <ul>; <li>Fix assertion error in LaTeX build with Sphinx 4.1.0+</li>; </ul>; <h2>nbsphinx 0.8.6</h2>; <p><a href=""https://pypi.org/project/nbsphinx/0.8.6/"">https://pypi.org/project/nbsphinx/0.8.6/</a></p>; <ul>; <li>Support for Jinja2 version 3</li>; </ul>; <h2>nbsphinx 0.8.5</h2>; <p><a href=""https://pypi.org/project/nbsphinx/0.8.5/"">https://pypi.org/project/nbsphinx/0.8.5/</a></p>; <ul>; <li>Freeze Jinja2 version to 2.11 (for now, until a bugfix is found)</li>; <li>Add <code>theme_comparison.py</code> tool for creating multiple versions (with different HTML themes) of the docs at once</li>; </ul>; <h2>nbsphinx 0.8.4</h2>; <p><a href=""https://pypi.org/project/nbsphinx/0.8.4/"">https://pypi.org/project/nbsphinx/0.8.4/</a></p>; <ul>; <li>Support for <code>mathjax3_config</code> (for Sphinx &gt;= 4)</li>; <li>Force loading MathJax on HTML pages generated from notebooks (can be disabled with <code>nbsphinx_assume_equations = False</code>)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/spatialaudio/nbsphinx/blob/master/NEWS.rst"">nbsphinx's changelog</a>.</em></p>; <blockquote>; <p>Version 0.8.8 -- 2021-12-31 -- PyPI__ -- diff__</p>; <ul>; <li>Support for the <code>sphinx_codeautolink</code> extension</li>; <li>Basic support for the <code>text</code> b",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11477:667,assert,assertion,667,https://hail.is,https://github.com/hail-is/hail/pull/11477,1,['assert'],['assertion']
Testability,"Bumps [nest-asyncio](https://github.com/erdewit/nest_asyncio) from 1.5.4 to 1.5.6.; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/erdewit/nest_asyncio/commit/fe3616358ce3cd7fdd5d50acb50020ac6eb6902b""><code>fe36163</code></a> Remove old travis file</li>; <li><a href=""https://github.com/erdewit/nest_asyncio/commit/5d3795ca0f2024d6e4d475101560e1dc96db93e9""><code>5d3795c</code></a> v1.5.6</li>; <li><a href=""https://github.com/erdewit/nest_asyncio/commit/9dd34446e87ad5bc30d6f151932d7f26899f0a31""><code>9dd3444</code></a> Add Python 3.11 support</li>; <li><a href=""https://github.com/erdewit/nest_asyncio/commit/ae731dcc2a779f4c27e0188100a72fb7ac2f129a""><code>ae731dc</code></a> Update test workflow, add mypy and flake8</li>; <li><a href=""https://github.com/erdewit/nest_asyncio/commit/99d4ddde7c1df05537f6a31f5e9adf1c9c80fdb7""><code>99d4ddd</code></a> Fix flake8 and mypy errors</li>; <li><a href=""https://github.com/erdewit/nest_asyncio/commit/8b5ec6c6fda3d45eab0cd08af1f9cf49855ebbcf""><code>8b5ec6c</code></a> v1.5.5</li>; <li><a href=""https://github.com/erdewit/nest_asyncio/commit/3cfd2c8bc453174ec0be57cd3bb8ec16dbcde1b4""><code>3cfd2c8</code></a> Potential fix for issue <a href=""https://github-redirect.dependabot.com/erdewit/nest_asyncio/issues/65"">#65</a></li>; <li><a href=""https://github.com/erdewit/nest_asyncio/commit/616d9a5e15d8d75e3343422778e49af2e9ac80ea""><code>616d9a5</code></a> Patch asyncio.get_event_loop to not require a running loop, fixes <a href=""https://github-redirect.dependabot.com/erdewit/nest_asyncio/issues/70"">#70</a></li>; <li>See full diff in <a href=""https://github.com/erdewit/nest_asyncio/compare/v1.5.4...v1.5.6"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=nest-asyncio&package-manager=pip&previous-version=1.5.4&new-version=1.5.6)](https://docs.github.com/en/github/managing-security-vulnerabilities/about",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12303:716,test,test,716,https://hail.is,https://github.com/hail-is/hail/pull/12303,1,['test'],['test']
Testability,"Bumps [numpy](https://github.com/numpy/numpy) from 1.21.6 to 1.23.4.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/numpy/numpy/releases"">numpy's releases</a>.</em></p>; <blockquote>; <h2>v1.23.4</h2>; <h1>NumPy 1.23.4 Release Notes</h1>; <p>NumPy 1.23.4 is a maintenance release that fixes bugs discovered after; the 1.23.3 release and keeps the build infrastructure current. The main; improvements are fixes for some annotation corner cases, a fix for a; long time <code>nested_iters</code> memory leak, and a fix of complex vector dot; for very large arrays. The Python versions supported for this release; are 3.8-3.11.</p>; <p>Note that the mypy version needs to be 0.981+ if you test using Python; 3.10.7, otherwise the typing tests will fail.</p>; <h2>Contributors</h2>; <p>A total of 8 people contributed to this release. People with a &quot;+&quot; by; their names contributed a patch for the first time.</p>; <ul>; <li>Bas van Beek</li>; <li>Charles Harris</li>; <li>Matthew Barber</li>; <li>Matti Picus</li>; <li>Ralf Gommers</li>; <li>Ross Barnowski</li>; <li>Sebastian Berg</li>; <li>Sicheng Zeng +</li>; </ul>; <h2>Pull requests merged</h2>; <p>A total of 13 pull requests were merged for this release.</p>; <ul>; <li><a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/22368"">#22368</a>: BUG: Add <code>__array_api_version__</code> to <code>numpy.array_api</code> namespace</li>; <li><a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/22370"">#22370</a>: MAINT: update sde toolkit to 9.0, fix download link</li>; <li><a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/22382"">#22382</a>: BLD: use macos-11 image on azure, macos-1015 is deprecated</li>; <li><a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/22383"">#22383</a>: MAINT: random: remove <code>get_info</code> from &quot;extending with Cython&quot;...</li>; <li><a href=""https://github-redirect.dependabot.com/numpy/numpy/pul",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12441:732,test,test,732,https://hail.is,https://github.com/hail-is/hail/pull/12441,2,['test'],"['test', 'tests']"
Testability,"Bumps [org.testng:testng](https://github.com/cbeust/testng) from 6.8.21 to 7.7.1.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/cbeust/testng/releases"">org.testng:testng's releases</a>.</em></p>; <blockquote>; <h2>TestNG v7.7.1</h2>; <h2>What's Changed</h2>; <ul>; <li>Streamline overloaded assertion methods for Groovy by <a href=""https://github.com/krmahadevan""><code>@​krmahadevan</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2858"">cbeust/testng#2858</a></li>; </ul>; <p><strong>Full Changelog</strong>: <a href=""https://github.com/cbeust/testng/compare/7.7.0...7.7.1"">https://github.com/cbeust/testng/compare/7.7.0...7.7.1</a></p>; <h2>TestNG v7.7.0</h2>; <h2>What's Changed</h2>; <ul>; <li>Replace FindBugs by SpotBugs by <a href=""https://github.com/gruenich""><code>@​gruenich</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2781"">cbeust/testng#2781</a></li>; <li>Gradle: Drop forUseAtConfigurationTime() by <a href=""https://github.com/gruenich""><code>@​gruenich</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2783"">cbeust/testng#2783</a></li>; <li>Added ability to provide custom message to assertThrows\expectThrows methods by <a href=""https://github.com/anatolyuzhakov""><code>@​anatolyuzhakov</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2793"">cbeust/testng#2793</a></li>; <li>Fix issue 2801 - Only resolve hostname once by <a href=""https://github.com/spkrka""><code>@​spkrka</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2802"">cbeust/testng#2802</a></li>; <li>[SECURITY] Fix Zip Slip Vulnerability; by <a href=""https://github.com/JLLeitschuh""><code>@​JLLeitschuh</code></a> in <a href=""https://github-redirect.dependabot.com/cbeust/testng/pull/2806"">cbeust/testng#2806</a></li>; <li>GITHUB-2807 - Failsafe buildStackTrace by <a href=""https://github.com/seregamorph""><code",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12665:11,test,testng,11,https://hail.is,https://github.com/hail-is/hail/pull/12665,15,"['Test', 'assert', 'test']","['TestNG', 'assertion', 'testng']"
Testability,"Bumps [parsy](https://github.com/python-parsy/parsy) from 1.1.0 to 2.1.; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-parsy/parsy/blob/master/docs/history.rst"">parsy's changelog</a>.</em></p>; <blockquote>; <h2>2.1 - 2023-02-22</h2>; <ul>; <li>Dropped support for Python 3.7</li>; <li>Test against Python 3.11</li>; <li>Added docstrings and basic type hints to all primitives and main methods</li>; </ul>; <h2>2.0 - 2022-09-08</h2>; <ul>; <li>Dropped support for Python &lt; 3.6</li>; <li>Added :meth:<code>Parser.until</code>. Thanks <code>@mcdeoliveira &lt;https://github.com/mcdeoliveira&gt;</code>_!</li>; <li>:meth:<code>Parser.optional</code> now supports an optional default argument to be returned instead of <code>None</code>.</li>; </ul>; <h2>1.4.0 - 2021-11-15</h2>; <ul>; <li>Documentation improvements.</li>; <li>Added <code>group</code> parameter to :func:<code>regex</code> - thanks <code>@camerondm9 &lt;https://github.com/camerondm9&gt;</code>_.</li>; <li>Support <code>bytes</code> with :func:<code>regex</code> as well as <code>str</code> - thanks <code>@quack4 &lt;https://github.com/quack4&gt;</code>_.</li>; <li>Added :class:<code>forward_declaration</code>.</li>; </ul>; <h2>1.3.0 - 2019-08-03</h2>; <ul>; <li>Documentation improvements.</li>; <li>Added :func:<code>peek</code> - thanks <code>@lisael &lt;https://github.com/lisael&gt;</code>_.</li>; <li>Removed Python 3.3 support</li>; <li>Added Python 3.7 support</li>; <li>:meth:<code>Parser.combine_dict</code> now strips keys that start with <code>_</code>.</li>; </ul>; <h2>1.2.0 - 2017-11-15</h2>; <ul>; <li>Added <code>transform</code> argument to :func:<code>string</code> and :func:<code>string_from</code>.</li>; <li>Made :meth:<code>Parser.combine_dict</code> accept lists of name value pairs,; and filter out keys with value <code>None</code>.</li>; <li>Added :func:<code>from_enum</code>.</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summa",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12934:336,Test,Test,336,https://hail.is,https://github.com/hail-is/hail/pull/12934,1,['Test'],['Test']
Testability,"Bumps [protobuf](https://github.com/protocolbuffers/protobuf) from 3.19.6 to 4.21.12.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/protocolbuffers/protobuf/releases"">protobuf's releases</a>.</em></p>; <blockquote>; <h2>Protocol Buffers v3.20.3</h2>; <h1>Java</h1>; <ul>; <li>Refactoring java full runtime to reuse sub-message builders and prepare to; migrate parsing logic from parse constructor to builder.</li>; <li>Move proto wireformat parsing functionality from the private &quot;parsing; constructor&quot; to the Builder class.</li>; <li>Change the Lite runtime to prefer merging from the wireformat into mutable; messages rather than building up a new immutable object before merging. This; way results in fewer allocations and copy operations.</li>; <li>Make message-type extensions merge from wire-format instead of building up; instances and merging afterwards. This has much better performance.</li>; <li>Fix TextFormat parser to build up recurring (but supposedly not repeated); sub-messages directly from text rather than building a new sub-message and; merging the fully formed message into the existing field.</li>; <li>This release addresses a <a href=""https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-h4h5-3hr4-j3g2"">Security Advisory for Java users</a></li>; </ul>; <h2>Protocol Buffers v3.20.2</h2>; <h1>C++</h1>; <ul>; <li>Reduce memory consumption of MessageSet parsing</li>; <li>This release addresses a <a href=""https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-8gq9-2x98-w8hf"">Security Advisory for C++ and Python users</a></li>; </ul>; <h2>Protocol Buffers v3.20.1</h2>; <h1>PHP</h1>; <ul>; <li>Fix building packaged PHP extension (<a href=""https://github-redirect.dependabot.com/protocolbuffers/protobuf/issues/9727"">#9727</a>)</li>; <li>Fixed composer.json to only advertise compatibility with PHP 7.0+. (<a href=""https://github-redirect.dependabot.com/protocolbuffers/protobuf/issues/9",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12563:416,log,logic,416,https://hail.is,https://github.com/hail-is/hail/pull/12563,1,['log'],['logic']
Testability,"Bumps [protobuf](https://github.com/protocolbuffers/protobuf) from 3.20.2 to 4.21.9.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/protocolbuffers/protobuf/releases"">protobuf's releases</a>.</em></p>; <blockquote>; <h2>Protocol Buffers v3.20.3</h2>; <h1>Java</h1>; <ul>; <li>Refactoring java full runtime to reuse sub-message builders and prepare to; migrate parsing logic from parse constructor to builder.</li>; <li>Move proto wireformat parsing functionality from the private &quot;parsing; constructor&quot; to the Builder class.</li>; <li>Change the Lite runtime to prefer merging from the wireformat into mutable; messages rather than building up a new immutable object before merging. This; way results in fewer allocations and copy operations.</li>; <li>Make message-type extensions merge from wire-format instead of building up; instances and merging afterwards. This has much better performance.</li>; <li>Fix TextFormat parser to build up recurring (but supposedly not repeated); sub-messages directly from text rather than building a new sub-message and; merging the fully formed message into the existing field.</li>; <li>This release addresses a <a href=""https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-h4h5-3hr4-j3g2"">Security Advisory for Java users</a></li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li>See full diff in <a href=""https://github.com/protocolbuffers/protobuf/commits"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=protobuf&package-manager=pip&previous-version=3.20.2&new-version=4.21.9)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase ",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12518:415,log,logic,415,https://hail.is,https://github.com/hail-is/hail/pull/12518,1,['log'],['logic']
Testability,"Bumps [pycares](https://github.com/saghul/pycares) from 4.2.2 to 4.3.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/saghul/pycares/releases"">pycares's releases</a>.</em></p>; <blockquote>; <h2>4.3.0</h2>; <h2>What's Changed</h2>; <ul>; <li>Bump cibuildwheel to build for Python 3.11 + CI total time speedups by <a href=""https://github.com/Jackenmen""><code>@​Jackenmen</code></a> in <a href=""https://github-redirect.dependabot.com/saghul/pycares/pull/174"">saghul/pycares#174</a></li>; <li>Fix tests that depended on external sites by <a href=""https://github.com/Jackenmen""><code>@​Jackenmen</code></a> in <a href=""https://github-redirect.dependabot.com/saghul/pycares/pull/180"">saghul/pycares#180</a></li>; <li>Complete the Python 3.11 support by <a href=""https://github.com/Jackenmen""><code>@​Jackenmen</code></a> in <a href=""https://github-redirect.dependabot.com/saghul/pycares/pull/179"">saghul/pycares#179</a></li>; <li>Drop CPython 3.6 by <a href=""https://github.com/saghul""><code>@​saghul</code></a> in <a href=""https://github-redirect.dependabot.com/saghul/pycares/pull/181"">saghul/pycares#181</a></li>; <li>Improve test compatibility with pytest by <a href=""https://github.com/saghul""><code>@​saghul</code></a> in <a href=""https://github-redirect.dependabot.com/saghul/pycares/pull/182"">saghul/pycares#182</a></li>; <li>Update c-ares submodule to 1.18.1 by <a href=""https://github.com/saghul""><code>@​saghul</code></a> in <a href=""https://github-redirect.dependabot.com/saghul/pycares/pull/183"">saghul/pycares#183</a></li>; </ul>; <p><strong>Full Changelog</strong>: <a href=""https://github.com/saghul/pycares/compare/pycares-4.2.2...pycares-4.3.0"">https://github.com/saghul/pycares/compare/pycares-4.2.2...pycares-4.3.0</a></p>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/saghul/pycares/commit/036aafd253b39f7459a86a5574daae8c5b681bc2""><code>036aafd</code></a> Bump version to 4.3.0",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12559:542,test,tests,542,https://hail.is,https://github.com/hail-is/hail/pull/12559,1,['test'],['tests']
Testability,"Bumps [pytest-asyncio](https://github.com/pytest-dev/pytest-asyncio) from 0.21.1 to 0.23.6.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/pytest-dev/pytest-asyncio/releases"">pytest-asyncio's releases</a>.</em></p>; <blockquote>; <h2>pytest-asyncio 0.23.6</h2>; <h1>0.23.6 (2024-03-19)</h1>; <ul>; <li>Fix compatibility with pytest 8.2 <a href=""https://redirect.github.com/pytest-dev/pytest-asyncio/pull/800"">#800</a></li>; </ul>; <h2>Known issues</h2>; <p>As of v0.23, pytest-asyncio attaches an asyncio event loop to each item of the test suite (i.e. session, packages, modules, classes, functions) and allows tests to be run in those loops when marked accordingly. Pytest-asyncio currently assumes that async fixture scope is correlated with the new event loop scope. This prevents fixtures from being evaluated independently from the event loop scope and breaks some existing test suites (see <a href=""https://redirect.github.com/pytest-dev/pytest-asyncio/issues/706"">#706</a>). For example, a test suite may require all fixtures and tests to run in the same event loop, but have async fixtures that are set up and torn down for each module. If you're affected by this issue, please continue using the v0.21 release, until it is resolved.</p>; <h2>pytest-asyncio 0.23.5.post1</h2>; <h1>0.23.5 (2024-02-09)</h1>; <ul>; <li>Declare compatibility with pytest 8 <a href=""https://redirect.github.com/pytest-dev/pytest-asyncio/issues/737"">#737</a></li>; <li>Fix typing errors with recent versions of mypy <a href=""https://redirect.github.com/pytest-dev/pytest-asyncio/issues/769"">#769</a></li>; <li>Prevent DeprecationWarning about internal use of <code>asyncio.get_event_loop()</code> from affecting test cases <a href=""https://redirect.github.com/pytest-dev/pytest-asyncio/issues/757"">#757</a></li>; </ul>; <h2>Known issues</h2>; <p>As of v0.23, pytest-asyncio attaches an asyncio event loop to each item of the test suite (i.e. session, packages, module",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14507:583,test,test,583,https://hail.is,https://github.com/hail-is/hail/pull/14507,3,['test'],"['test', 'tests']"
Testability,"Bumps [pytest](https://github.com/pytest-dev/pytest) from 6.2.5 to 7.0.1.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/pytest-dev/pytest/releases"">pytest's releases</a>.</em></p>; <blockquote>; <h2>7.0.1</h2>; <h1>pytest 7.0.1 (2022-02-11)</h1>; <h2>Bug Fixes</h2>; <ul>; <li><a href=""https://github-redirect.dependabot.com/pytest-dev/pytest/issues/9608"">#9608</a>: Fix invalid importing of <code>importlib.readers</code> in Python 3.9.</li>; <li><a href=""https://github-redirect.dependabot.com/pytest-dev/pytest/issues/9610"">#9610</a>: Restore [UnitTestFunction.obj]{.title-ref} to return unbound rather than bound method.; Fixes a crash during a failed teardown in unittest TestCases with non-default [__init__]{.title-ref}.; Regressed in pytest 7.0.0.</li>; <li><a href=""https://github-redirect.dependabot.com/pytest-dev/pytest/issues/9636"">#9636</a>: The <code>pythonpath</code> plugin was renamed to <code>python_path</code>. This avoids a conflict with the <code>pytest-pythonpath</code> plugin.</li>; <li><a href=""https://github-redirect.dependabot.com/pytest-dev/pytest/issues/9642"">#9642</a>: Fix running tests by id with <code>::</code> in the parametrize portion.</li>; <li><a href=""https://github-redirect.dependabot.com/pytest-dev/pytest/issues/9643"">#9643</a>: Delay issuing a <code>~pytest.PytestWarning</code>{.interpreted-text role=&quot;class&quot;} about diamond inheritance involving <code>~pytest.Item</code>{.interpreted-text role=&quot;class&quot;} and; <code>~pytest.Collector</code>{.interpreted-text role=&quot;class&quot;} so it can be filtered using <code>standard warning filters &lt;warnings&gt;</code>{.interpreted-text role=&quot;ref&quot;}.</li>; </ul>; <h2>7.0.0</h2>; <h1>pytest 7.0.0 (2022-02-03)</h1>; <p>(<strong>Please see the full set of changes for this release also in the 7.0.0rc1 notes below</strong>)</p>; <h2>Deprecations</h2>; <ul>; <li>; <p><a href=""https://github-redirect.dependabot.com/pytest-dev/pyte",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11516:725,Test,TestCases,725,https://hail.is,https://github.com/hail-is/hail/pull/11516,3,['Test'],['TestCases']
Testability,"Bumps [pytest](https://github.com/pytest-dev/pytest) from 7.1.1 to 7.1.3.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/pytest-dev/pytest/releases"">pytest's releases</a>.</em></p>; <blockquote>; <h2>7.1.3</h2>; <h1>pytest 7.1.3 (2022-08-31)</h1>; <h2>Bug Fixes</h2>; <ul>; <li><a href=""https://github-redirect.dependabot.com/pytest-dev/pytest/issues/10060"">#10060</a>: When running with <code>--pdb</code>, <code>TestCase.tearDown</code> is no longer called for tests when the <em>class</em> has been skipped via <code>unittest.skip</code> or <code>pytest.mark.skip</code>.</li>; <li><a href=""https://github-redirect.dependabot.com/pytest-dev/pytest/issues/10190"">#10190</a>: Invalid XML characters in setup or teardown error messages are now properly escaped for JUnit XML reports.</li>; <li><a href=""https://github-redirect.dependabot.com/pytest-dev/pytest/issues/10230"">#10230</a>: Ignore <code>.py</code> files created by <code>pyproject.toml</code>-based editable builds introduced in <a href=""https://pip.pypa.io/en/stable/news/#v21-3"">pip 21.3</a>.</li>; <li><a href=""https://github-redirect.dependabot.com/pytest-dev/pytest/issues/3396"">#3396</a>: Doctests now respect the <code>--import-mode</code> flag.</li>; <li><a href=""https://github-redirect.dependabot.com/pytest-dev/pytest/issues/9514"">#9514</a>: Type-annotate <code>FixtureRequest.param</code> as <code>Any</code> as a stop gap measure until <code>8073</code>{.interpreted-text role=&quot;issue&quot;} is fixed.</li>; <li><a href=""https://github-redirect.dependabot.com/pytest-dev/pytest/issues/9791"">#9791</a>: Fixed a path handling code in <code>rewrite.py</code> that seems to work fine, but was incorrect and fails in some systems.</li>; <li><a href=""https://github-redirect.dependabot.com/pytest-dev/pytest/issues/9917"">#9917</a>: Fixed string representation for <code>pytest.approx</code>{.interpreted-text role=&quot;func&quot;} when used to compare tuples.</li>; </ul>; <h2>Imp",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12187:461,Test,TestCase,461,https://hail.is,https://github.com/hail-is/hail/pull/12187,2,"['Test', 'test']","['TestCase', 'tests']"
Testability,"Bumps [python-json-logger](https://github.com/madzak/python-json-logger) from 0.1.11 to 2.0.2.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/madzak/python-json-logger/releases"">python-json-logger's releases</a>.</em></p>; <blockquote>; <h2>v2.0.2</h2>; <h3>Added</h3>; <ul>; <li>Officially supporting 3.9 - <a href=""https://github.com/felixonmars""><code>@​felixonmars</code></a>.</li>; <li>You can now add static fields to log objects - <a href=""https://github.com/cosimomeli""><code>@​cosimomeli</code></a>.</li>; </ul>; <h3>Changed</h3>; <ul>; <li>Dropped 3.4 support.</li>; <li>Dropped Travis CI for Github Actions.</li>; <li>Wheel should build for python 3 instead of just 3.4 now.</li>; </ul>; <h2>v2.0.1</h2>; <h2>Added</h2>; <ul>; <li>Support Pypi long descripton - <a href=""https://github.com/ereli-cb""><code>@​ereli-cb</code></a></li>; </ul>; <h2>Changed</h2>; <ul>; <li>You can now rename output fields - <a href=""https://github.com/schlitzered""><code>@​schlitzered</code></a></li>; </ul>; <h2>v2.0.0</h2>; <p>No release notes provided.</p>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/madzak/python-json-logger/blob/master/CHANGELOG.md"">python-json-logger's changelog</a>.</em></p>; <blockquote>; <h2>[2.0.2] - 2021-07-27</h2>; <h3>Added</h3>; <ul>; <li>Officially supporting 3.9 - <a href=""https://github.com/felixonmars""><code>@​felixonmars</code></a>.</li>; <li>You can now add static fields to log objects - <a href=""https://github.com/cosimomeli""><code>@​cosimomeli</code></a>.</li>; </ul>; <h3>Changed</h3>; <ul>; <li>Dropped 3.4 support.</li>; <li>Dropped Travis CI for Github Actions.</li>; <li>Wheel should build for python 3 instead of just 3.4 now.</li>; </ul>; <h2>[2.0.1] - 2020-10-12</h2>; <h3>Added</h3>; <ul>; <li>Support Pypi long descripton - <a href=""https://github.com/ereli-cb""><code>@​ereli-cb</code></a></li>; </ul>; <h3>Changed</h3>; <ul>; <li>You",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11467:19,log,logger,19,https://hail.is,https://github.com/hail-is/hail/pull/11467,5,['log'],"['log', 'logger']"
Testability,"Bumps [rich](https://github.com/Textualize/rich) from 12.6.0 to 13.5.2.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/Textualize/rich/releases"">rich's releases</a>.</em></p>; <blockquote>; <h2>v13.5.2</h2>; <p>Bugfix</p>; <h2>[13.5.2] - 2023-08-01</h2>; <h3>Fixed</h3>; <ul>; <li>Fixed Text.expand_tabs assertion error</li>; </ul>; <h2>v13.5.1</h2>; <p>Very minor update to URL highlighting</p>; <h2>[13.5.1] - 2023-07-31</h2>; <h3>Fixed</h3>; <ul>; <li>Fix tilde character (<code>~</code>) not included in link regex when printing to console <a href=""https://redirect.github.com/Textualize/rich/issues/3057"">Textualize/rich#3057</a></li>; </ul>; <h2>Mostly cake, one or two puppies</h2>; <p><a href=""https://textual.textualize.io/blog/2023/07/29/pull-requests-are-cake-or-puppies/"">https://textual.textualize.io/blog/2023/07/29/pull-requests-are-cake-or-puppies/</a></p>; <h2>[13.5.0] - 2023-07-29</h2>; <h3>Fixed</h3>; <ul>; <li>Fixed Text.expand_tabs not expanding spans.</li>; <li>Fixed TimeElapsedColumn from showing negative.</li>; <li>Fix for escaping strings with a trailing backslash <a href=""https://redirect.github.com/Textualize/rich/issues/2987"">Textualize/rich#2987</a></li>; <li>Fixed exception in Markdown with partial table <a href=""https://redirect.github.com/Textualize/rich/issues/3053"">Textualize/rich#3053</a></li>; <li>Fixed the HTML export template so that the <code>&lt;html&gt;</code> tag comes before the <code>&lt;head&gt;</code> tag <a href=""https://redirect.github.com/Textualize/rich/issues/3021"">Textualize/rich#3021</a></li>; <li>Fixed issue with custom classes overwriting <code>__eq__</code> <a href=""https://redirect.github.com/Textualize/rich/issues/2875"">Textualize/rich#2875</a></li>; <li>Fix rich.pretty.install breakage in iPython <a href=""https://redirect.github.com/Textualize/rich/issues/3013"">Textualize/rich#3013</a></li>; </ul>; <h3>Added</h3>; <ul>; <li>Added Text.extend_style method.</li>; <li>Added Spa",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13380:351,assert,assertion,351,https://hail.is,https://github.com/hail-is/hail/pull/13380,2,['assert'],['assertion']
Testability,"Bumps [rich](https://github.com/Textualize/rich) from 12.6.0 to 13.5.3.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/Textualize/rich/releases"">rich's releases</a>.</em></p>; <blockquote>; <h2>Markdown fixes</h2>; <h2>[13.5.3] - 2023-09-17</h2>; <h3>Fixed</h3>; <ul>; <li>Markdown table rendering issue with inline styles and links <a href=""https://redirect.github.com/Textualize/rich/issues/3115"">Textualize/rich#3115</a></li>; <li>Fix Markdown code blocks on a light background <a href=""https://redirect.github.com/Textualize/rich/issues/3123"">Textualize/rich#3123</a></li>; </ul>; <h2>v13.5.2</h2>; <p>Bugfix</p>; <h2>[13.5.2] - 2023-08-01</h2>; <h3>Fixed</h3>; <ul>; <li>Fixed Text.expand_tabs assertion error</li>; </ul>; <h2>v13.5.1</h2>; <p>Very minor update to URL highlighting</p>; <h2>[13.5.1] - 2023-07-31</h2>; <h3>Fixed</h3>; <ul>; <li>Fix tilde character (<code>~</code>) not included in link regex when printing to console <a href=""https://redirect.github.com/Textualize/rich/issues/3057"">Textualize/rich#3057</a></li>; </ul>; <h2>Mostly cake, one or two puppies</h2>; <p><a href=""https://textual.textualize.io/blog/2023/07/29/pull-requests-are-cake-or-puppies/"">https://textual.textualize.io/blog/2023/07/29/pull-requests-are-cake-or-puppies/</a></p>; <h2>[13.5.0] - 2023-07-29</h2>; <h3>Fixed</h3>; <ul>; <li>Fixed Text.expand_tabs not expanding spans.</li>; <li>Fixed TimeElapsedColumn from showing negative.</li>; <li>Fix for escaping strings with a trailing backslash <a href=""https://redirect.github.com/Textualize/rich/issues/2987"">Textualize/rich#2987</a></li>; <li>Fixed exception in Markdown with partial table <a href=""https://redirect.github.com/Textualize/rich/issues/3053"">Textualize/rich#3053</a></li>; <li>Fixed the HTML export template so that the <code>&lt;html&gt;</code> tag comes before the <code>&lt;head&gt;</code> tag <a href=""https://redirect.github.com/Textualize/rich/issues/3021"">Textualize/rich#3021</a></li>;",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13651:746,assert,assertion,746,https://hail.is,https://github.com/hail-is/hail/pull/13651,2,['assert'],['assertion']
Testability,"Bumps [rich](https://github.com/Textualize/rich) from 12.6.0 to 13.6.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/Textualize/rich/releases"">rich's releases</a>.</em></p>; <blockquote>; <h2>The Python 3.12 release</h2>; <p>Mostly a meta update in readiness for the release of Python3.12</p>; <h2>[13.6.0] - 2023-09-30</h2>; <h3>Added</h3>; <ul>; <li>Added Python 3.12 to classifiers.</li>; </ul>; <h2>Markdown fixes</h2>; <h2>[13.5.3] - 2023-09-17</h2>; <h3>Fixed</h3>; <ul>; <li>Markdown table rendering issue with inline styles and links <a href=""https://redirect.github.com/Textualize/rich/issues/3115"">Textualize/rich#3115</a></li>; <li>Fix Markdown code blocks on a light background <a href=""https://redirect.github.com/Textualize/rich/issues/3123"">Textualize/rich#3123</a></li>; </ul>; <h2>v13.5.2</h2>; <p>Bugfix</p>; <h2>[13.5.2] - 2023-08-01</h2>; <h3>Fixed</h3>; <ul>; <li>Fixed Text.expand_tabs assertion error</li>; </ul>; <h2>v13.5.1</h2>; <p>Very minor update to URL highlighting</p>; <h2>[13.5.1] - 2023-07-31</h2>; <h3>Fixed</h3>; <ul>; <li>Fix tilde character (<code>~</code>) not included in link regex when printing to console <a href=""https://redirect.github.com/Textualize/rich/issues/3057"">Textualize/rich#3057</a></li>; </ul>; <h2>Mostly cake, one or two puppies</h2>; <p><a href=""https://textual.textualize.io/blog/2023/07/29/pull-requests-are-cake-or-puppies/"">https://textual.textualize.io/blog/2023/07/29/pull-requests-are-cake-or-puppies/</a></p>; <h2>[13.5.0] - 2023-07-29</h2>; <h3>Fixed</h3>; <ul>; <li>Fixed Text.expand_tabs not expanding spans.</li>; <li>Fixed TimeElapsedColumn from showing negative.</li>; <li>Fix for escaping strings with a trailing backslash <a href=""https://redirect.github.com/Textualize/rich/issues/2987"">Textualize/rich#2987</a></li>; <li>Fixed exception in Markdown with partial table <a href=""https://redirect.github.com/Textualize/rich/issues/3053"">Textualize/rich#3053</a></li>; <li>Fixed",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13758:957,assert,assertion,957,https://hail.is,https://github.com/hail-is/hail/pull/13758,2,['assert'],['assertion']
Testability,"Bumps [scipy](https://github.com/scipy/scipy) from 1.9.3 to 1.10.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/scipy/scipy/releases"">scipy's releases</a>.</em></p>; <blockquote>; <h1>SciPy 1.10.0 Release Notes</h1>; <p>SciPy <code>1.10.0</code> is the culmination of <code>6</code> months of hard work. It contains; many new features, numerous bug-fixes, improved test coverage and better; documentation. There have been a number of deprecations and API changes; in this release, which are documented below. All users are encouraged to; upgrade to this release, as there are a large number of bug-fixes and; optimizations. Before upgrading, we recommend that users check that; their own code does not use deprecated SciPy functionality (to do so,; run your code with <code>python -Wd</code> and check for <code>DeprecationWarning</code> s).; Our development attention will now shift to bug-fix releases on the; 1.10.x branch, and on adding new features on the main branch.</p>; <p>This release requires Python <code>3.8+</code> and NumPy <code>1.19.5</code> or greater.</p>; <p>For running on PyPy, PyPy3 <code>6.0+</code> is required.</p>; <h1>Highlights of this release</h1>; <ul>; <li>A new dedicated datasets submodule (<code>scipy.datasets</code>) has been added, and is; now preferred over usage of <code>scipy.misc</code> for dataset retrieval.</li>; <li>A new <code>scipy.interpolate.make_smoothing_spline</code> function was added. This; function constructs a smoothing cubic spline from noisy data, using the; generalized cross-validation (GCV) criterion to find the tradeoff between; smoothness and proximity to data points.</li>; <li><code>scipy.stats</code> has three new distributions, two new hypothesis tests, three; new sample statistics, a class for greater control over calculations; involving covariance matrices, and many other enhancements.</li>; </ul>; <h1>New features</h1>; <h1><code>scipy.datasets</code> introduction</h1>; ",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13227:415,test,test,415,https://hail.is,https://github.com/hail-is/hail/pull/13227,1,['test'],['test']
Testability,"Bumps [sortedcontainers](https://github.com/grantjenks/python-sortedcontainers) from 2.1.0 to 2.4.0.; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/grantjenks/python-sortedcontainers/blob/master/HISTORY.rst"">sortedcontainers's changelog</a>.</em></p>; <blockquote>; <h2>2.4.0 (2021-05-16)</h2>; <p><strong>API Changes</strong></p>; <ul>; <li>Implement SortedDict methods: <strong>or</strong>, <strong>ror</strong>, and <strong>ior</strong> per PEP 584.</li>; </ul>; <h2>2.3.0 (2020-11-08)</h2>; <p><strong>Bugfixes</strong></p>; <ul>; <li>Make sort order stable when updating with large iterables.</li>; </ul>; <h2>2.2.2 (2020-06-07)</h2>; <p><strong>Miscellaneous</strong></p>; <ul>; <li>Add &quot;small slice&quot; optimization to <code>SortedList.__getitem__</code>.</li>; <li>Silence warning when testing <code>SortedList.iloc</code>.</li>; </ul>; <h2>2.2.1 (2020-06-06)</h2>; <p><strong>Miscellaneous</strong></p>; <ul>; <li>Fix a warning regarding <code>classifiers</code> in setup.py.</li>; </ul>; <h2>2.2.0 (2020-06-06)</h2>; <p><strong>Miscellaneous</strong></p>; <ul>; <li>Change SortedDict to avoid cycles for CPython reference counting.</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/grantjenks/python-sortedcontainers/commit/a1f52d6713dd2c2713a881d4f4d86ed68ff71cab""><code>a1f52d6</code></a> Bump version to 2.4.0</li>; <li><a href=""https://github.com/grantjenks/python-sortedcontainers/commit/2678a78b6dacbe2352bff7876a26759d84971dac""><code>2678a78</code></a> Implement SortedDict methods: <strong>or</strong>, <strong>ror</strong>, and <strong>ior</strong> (<a href=""https://github-redirect.dependabot.com/grantjenks/python-sortedcontainers/issues/171"">#171</a>)</li>; <li><a href=""https://github.com/grantjenks/python-sortedcontainers/commit/9887989b21fc21fe572e0b4c30a3f3aa1eabbdca""><code>9887989</code></a> Bump version to 2.3.0</li>; <li><a href=""https://github.com/gra",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11476:844,test,testing,844,https://hail.is,https://github.com/hail-is/hail/pull/11476,1,['test'],['testing']
Testability,"Bumps [sphinx-autodoc-typehints](https://github.com/tox-dev/sphinx-autodoc-typehints) from 1.11.1 to 1.18.1.; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/tox-dev/sphinx-autodoc-typehints/blob/main/CHANGELOG.md"">sphinx-autodoc-typehints's changelog</a>.</em></p>; <blockquote>; <h2>1.18.1</h2>; <ul>; <li>Fix mocked module import not working when used as guarded import</li>; </ul>; <h2>1.18.0</h2>; <ul>; <li>Support and require <code>nptyping&gt;=2</code></li>; <li>Handle <code>UnionType</code></li>; </ul>; <h2>1.17.1</h2>; <ul>; <li>Mark it as requiring <code>nptyping&lt;2</code></li>; </ul>; <h2>1.17.0</h2>; <ul>; <li>Add <code>typehints_use_rtype</code> option</li>; <li>Handles <code>TypeError</code> when getting source code via inspect</li>; </ul>; <h2>1.16.0</h2>; <ul>; <li>Add support for type subscriptions with multiple elements, where one or more elements are tuples; e.g.,; <code>nptyping.NDArray[(Any, ...), nptyping.Float]</code></li>; <li>Fix bug for arbitrary types accepting singleton subscriptions; e.g., <code>nptyping.Float[64]</code></li>; <li>Resolve forward references</li>; <li>Expand and better handle <code>TypeVar</code></li>; <li>Add intershpinx reference link for <code>...</code> to <code>Ellipsis</code> (as is just an alias)</li>; </ul>; <h2>1.15.3</h2>; <ul>; <li>Prevents reaching inner blocks that contains <code>if TYPE_CHECKING</code></li>; </ul>; <h2>1.15.2</h2>; <ul>; <li>Log a warning instead of crashing when a type guard import fails to resolve</li>; <li>When resolving type guard imports if the target module does not have source code (such is the case for C-extension; modules) do nothing instead of crashing</li>; </ul>; <h2>1.15.1</h2>; <ul>; <li>Fix <code>fully_qualified</code> should be <code>typehints_fully_qualified</code></li>; </ul>; <h2>1.15.0</h2>; <ul>; <li>Resolve type guard imports before evaluating annotations for objects</li>; <li>Remove <code>set_type_checking_flag</code> flag as this",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11773:353,mock,mocked,353,https://hail.is,https://github.com/hail-is/hail/pull/11773,1,['mock'],['mocked']
Testability,"Bumps [sphinxcontrib-katex](https://github.com/hagenw/sphinxcontrib-katex) from 0.5.1 to 0.8.6.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/hagenw/sphinxcontrib-katex/releases"">sphinxcontrib-katex's releases</a>.</em></p>; <blockquote>; <h2>Release v0.8.6</h2>; <ul>; <li>Fixed: allow to work with Sphinx&gt;=4.0.0</li>; </ul>; <h2>Release v0.8.5</h2>; <ul>; <li>Fixed: remove extra space after inline math when using pre-rendering</li>; </ul>; <h2>Release v0.8.4</h2>; <ul>; <li>Changed: increase top padding of equations by 2px</li>; </ul>; <h2>Release v0.8.3</h2>; <ul>; <li>Fixed: building of documentation on RTD</li>; </ul>; <h2>Release v0.8.2</h2>; <ul>; <li>Fixed: PyPI package version number</li>; </ul>; <h2>Release v0.8.0</h2>; <ul>; <li>Added: support for Python 3.9</li>; <li>Added: support for Sphinx&gt;=4.0.0</li>; <li>Added: tests for Windows and macOS</li>; <li>Changed: switch to KaTeX 0.13.11</li>; <li>Changed: switched CI tests from Travis to Github Actions</li>; <li>Changed: running sphinx will now fail in pre-render mode; if KaTeX fails</li>; <li>Removed: support for Python 2.7, 3.4, 3.5</li>; </ul>; <h2>sphinxcontrib-katex 0.7.2</h2>; <ul>; <li>Fixed: Sphinx&gt;=4.0.0 is not supported at the moment</li>; </ul>; <h2>sphinxcontrib-katex 0.7.1</h2>; <ul>; <li>Fixed: label of fraction example in docs</li>; </ul>; <h2>sphinxcontrib-katex 0.7.0</h2>; <ul>; <li>Added: fraction example to docs</li>; <li>Changed: switch to KaTeX 0.12.0</li>; <li>Changed: add small top and bottom padding to equations</li>; </ul>; <h2>sphinxcontrib-katex 0.6.1</h2>; <p><a href=""https://pypi.org/project/sphinxcontrib-katex/0.6.1/"">https://pypi.org/project/sphinxcontrib-katex/0.6.1/</a></p>; <ul>; <li>Fixed: run katex under Windows</li>; </ul>; <h2>sphinxcontrib-katex 0.6.0</h2>; <p><a href=""https://pypi.org/project/sphinxcontrib-katex/0.6.0/"">https://pypi.org/project/sphinxcontrib-katex/0.6.0/</a></p>; <ul>; <li>Changed: switch to Kate",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11458:892,test,tests,892,https://hail.is,https://github.com/hail-is/hail/pull/11458,2,['test'],['tests']
Testability,"Bumps [tabulate](https://github.com/astanin/python-tabulate) from 0.8.3 to 0.8.9.; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/astanin/python-tabulate/blob/master/CHANGELOG"">tabulate's changelog</a>.</em></p>; <blockquote>; <ul>; <li>0.8.9: Bug fix. Revert support of decimal separators.</li>; <li>0.8.8: Python 3.9 support, 3.10 ready.; New formats: <code>unsafehtml</code>, <code>latex_longtable</code>, <code>fancy_outline</code>.; Support lists of UserDicts as input.; Support hyperlinks in terminal output.; Improve testing on systems with proxies.; Migrate to pytest.; Various bug fixes and improvements.</li>; <li>0.8.7: Bug fixes. New format: <code>pretty</code>. HTML escaping.</li>; <li>0.8.6: Bug fixes. Stop supporting Python 3.3, 3.4.</li>; <li>0.8.5: Fix broken Windows package. Minor documentation updates.</li>; <li>0.8.4: Bug fixes.</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li>See full diff in <a href=""https://github.com/astanin/python-tabulate/commits/v0.8.9"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=tabulate&package-manager=pip&previous-version=0.8.3&new-version=0.8.9)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR a",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11478:566,test,testing,566,https://hail.is,https://github.com/hail-is/hail/pull/11478,2,['test'],['testing']
Testability,"Bumps [tqdm](https://github.com/tqdm/tqdm) from 4.42.1 to 4.63.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/tqdm/tqdm/releases"">tqdm's releases</a>.</em></p>; <blockquote>; <h2>tqdm v4.63.0 stable</h2>; <ul>; <li>add <code>__reversed__()</code></li>; <li>add efficient <code>__contains__()</code></li>; <li>improve CLI startup time (replace <code>pkg_resources</code> =&gt; <code>importlib</code>)</li>; <li><code>tqdm.autonotebook</code> warning &amp; <code>std</code> fallback on missing <code>ipywidgets</code> (<a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1218"">#1218</a> &lt;- <a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1082"">#1082</a>, <a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1217"">#1217</a>)</li>; <li>warn on positional CLI arguments</li>; <li>misc build/test framework updates; <ul>; <li>enable <code>py3.10</code> tests</li>; <li>add <code>conda</code> dependencies</li>; <li>update pre-commit hooks</li>; <li>fix <code>pytest</code> config (<code>nbval</code>, <code>asyncio</code>)</li>; <li>fix dependencies &amp; tests</li>; <li>fix site deployment</li>; </ul>; </li>; </ul>; <h2>tqdm v4.62.3 stable</h2>; <ul>; <li>fix minor typo (<a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1246"">#1246</a>)</li>; <li>minor example fix (<a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1246"">#1246</a>)</li>; <li>misc tidying &amp; refactoring</li>; <li>misc build/dev framework updates; <ul>; <li>update dependencies</li>; <li>update linters</li>; <li>update docs deployment branches</li>; </ul>; </li>; <li>misc test/ci updates; <ul>; <li>test forks</li>; <li>tidy OS &amp; Python version tests</li>; <li>bump primary python version 3.7 =&gt; 3.8</li>; <li>beta py3.10 testing</li>; <li>fix py2.7 tests</li>; <li>better timeout handling</li>; </ul>; </li>; </ul>; <h2>tqdm v4.62.2 stable</h2>; <ul>; <li>fix notebook memory leak (<a href=""https",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11587:882,test,test,882,https://hail.is,https://github.com/hail-is/hail/pull/11587,1,['test'],['test']
Testability,"Bumps [tqdm](https://github.com/tqdm/tqdm) from 4.42.1 to 4.64.1.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/tqdm/tqdm/releases"">tqdm's releases</a>.</em></p>; <blockquote>; <h2>tqdm v4.64.1 stable</h2>; <ul>; <li>support <code>ipywidgets&gt;=8</code> (<a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1366"">#1366</a>, <a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1361"">#1361</a> &lt;- <a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1310"">#1310</a>, <a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1359"">#1359</a>, <a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1360"">#1360</a>, <a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1364"">#1364</a>); <ul>; <li>fix jupyter lab display</li>; <li>update notebook tests</li>; </ul>; </li>; </ul>; <h2>tqdm v4.64.0 stable</h2>; <ul>; <li>add <code>contrib.slack</code> (<a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1313"">#1313</a>)</li>; </ul>; <h2>tqdm v4.63.2 stable</h2>; <ul>; <li><code>rich</code>: expose <code>options</code> kwargs (<a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1282"">#1282</a>)</li>; <li><code>autonotebook</code>: re-enable VSCode (<a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1309"">#1309</a>)</li>; <li>misc docs typos (<a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1301"">#1301</a>, <a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1299"">#1299</a>)</li>; <li>update dev dependencies (<a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1311"">#1311</a>)</li>; </ul>; <h2>tqdm v4.63.1 stable</h2>; <ul>; <li>fix stderr/stdout missing <code>flush()</code> (<a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1248"">#1248</a> &lt;- <a href=""https://github-redirect.dependabot.com/tqdm/tqdm/issues/1177"">#1177</a>)</li>; <li>misc speed improvements/optimisations",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12260:862,test,tests,862,https://hail.is,https://github.com/hail-is/hail/pull/12260,1,['test'],['tests']
Testability,"CC: @danking . I tested this change works by replicating Lindo's job download (~80 Gi) on an overloaded node with 8 simultaneous jobs trying to download data in parallel. Before this proposed change and after I fixed some other issues in #10522, 75% of his jobs would fail with this error (the ones I presume on the persistent SSDs rather than the local SSDs):. ```; Traceback (most recent call last):; File ""/usr/local/lib/python3.7/runpy.py"", line 193, in _run_module_as_main; ""__main__"", mod_spec); File ""/usr/local/lib/python3.7/runpy.py"", line 85, in _run_code; exec(code, run_globals); File ""/usr/local/lib/python3.7/site-packages/batch/copy/__main__.py"", line 34, in <module>; asyncio.run(main()); File ""/usr/local/lib/python3.7/asyncio/runners.py"", line 43, in run; return loop.run_until_complete(main); File ""/usr/local/lib/python3.7/asyncio/base_events.py"", line 587, in run_until_complete; return future.result(); concurrent.futures._base.CancelledError; ```. Now, all of the downloads succeed after my change. I found this link to be very helpful figuring out what the issue was. ; https://bugs.python.org/issue33413",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10534:17,test,tested,17,https://hail.is,https://github.com/hail-is/hail/pull/10534,1,['test'],['tested']
Testability,"CHANGELOG: ABS blob URIs in the format of `https://<ACCOUNT_NAME>.blob.core.windows.net/<CONTAINER_NAME>/<PATH>` are now supported. The `hail-az` scheme for referencing blobs in ABS is now deprecated and will be removed in an upcoming release. This PR introduces the https addressing of blobs in ABS and phases out hail-az. The test suite converts completely to testing `https`, but both schemes are still supported. We can have confidence that this did not break completely break the `hail-az` scheme because our test bucket configuration is still using `hail-az` (and must until this PR is merged. So some of the test suite + all the service backend tests are flexing the `https` code path, and then the inter_cloud tests are flexing the `hail-az` code path. After this merges, we'll need the following PRs. - Update the azure terraform to use `https` instead of `hail-az` and apply the changes; - Remove support for the hail-az scheme. This will be a breaking change as the copy tool and batch worker will stop being able to transfer files and logs for that scheme. It seems like there is large support for dropping this scheme entirely though so I'd rather make this change while there is little use on azure.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12917:328,test,test,328,https://hail.is,https://github.com/hail-is/hail/pull/12917,7,"['log', 'test']","['logs', 'test', 'testing', 'tests']"
Testability,"CHANGELOG: Add `composable` option to parallel text export for use with `gsutil compose`. The BGZF spec reccommends one empty BGZF block be written at the end of; at the end a BGZF file. The `gsutil compose` command concatenates a list; of objects into one composite object. We recently discovered that when; these empty blocks are present in the middle of a file, utilities like; tabix will output pointers to them (as from a reading perspective, the; empty blocks are equivalent to the next block). This will hit assertions; in code like htsjdk that checks to make sure that seek operations from; tabix virtual pointers point to the end of a block if and only if that; block is end of file. This is a bug in tabix implementations.; Furthermore, the end-of-file marker probably shouldn't be appended to; BGZF streams in the first place. In order to improve interoperability of hail with other tools, we add; the 'composable' output option to export types. 'composable' behaves; like 'separate_header', except we do not write the end-of-file marker at; the end of the header or every partition written, and an extra, empty; bgz file with the end-of-file marker is written to `part-composable-end`; which should sort later than any partfile written from the RDD and thus; should be amenable to globbing.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8854:515,assert,assertions,515,https://hail.is,https://github.com/hail-is/hail/pull/8854,1,['assert'],['assertions']
Testability,CHANGELOG: Added concatenate and plink_merge functions that use tree aggregation when merging. I tested the PLINK function locally since we don't have tests that use PLINK (can't remember exactly why).,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9527:97,test,tested,97,https://hail.is,https://github.com/hail-is/hail/pull/9527,2,['test'],"['tested', 'tests']"
Testability,CHANGELOG: Changed cost per instance from $0.02170 to $0.021935 from switching to using local SSDs. - Added 1 local SSD (375 GB) and formatted it in the worker run script.; - Changed the resource for boot-disk to just disk and modified the worker config. I figured there was no reason to have a separate boot disk in the resources as long as all disks are assumed to be fractions of the instance based on the number of cores being used.; - Changed the worker boot disk from 100 GB to 20 GB; - Changed the worker to move all docker files and batch files to the Local SSD from the boot disk. Can you double check my math for the documentation?. Is it possible it takes longer for an instance to boot up with a local SSD? One of my earlier tests had workers stuck in STAGING. This resolved itself later on so I'm assuming it was a Google error.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8844:737,test,tests,737,https://hail.is,https://github.com/hail-is/hail/pull/8844,1,['test'],['tests']
Testability,"CHANGELOG: Eliminate quadratic behavior in `BlockMatrix.to_matrix_table_row_major`. Users should expect significant reduction in run-time. There are two significant changes in this PR:; - Teach `LZ4InputBlockBuffer` how to skip bytes without decompressing every block, and; - Teach BlockMatrix to use a small cache of rows when converting from a BlockMatrix to a row-wise RDD. ### Blocked LZ4 Byte Skipping. We compress in blocks of 16 KiB. The blocks begin with an 32-bit integer indicating the decompressed length. When we're skipping large numbers of bytes we can request an `LZ4InputBlockBuffer` to skip decompression if the entire block will be skipped. ### BlockMatrix Blocks to Rows Caching; Currently, for every row in every block, BM opens a file, skips to the appropriate location, reads that one row, writes it into an RVB, and then closes the file. This has terrible cache and I/O performance. Instead, we allocate 32 MiB to cache the rows of each block. We divide the cache evenly across all rows. The new implementation requires the cache can at least fit one row of the block, with 32 MiB we're good up to ~4 million (total) columns. We'll need to reimplement this to also use a tree-aggregate long before we get to 4 million columns. ### Benchmark Results. This branch vs main (3149211fb79b):; ```; Benchmark Name Ratio Time 1 Time 2; -------------- ----- ------ ------; to_matrix_table_row_major 716.3% 251.300 1800.000; ----------------------; Harmonic mean: 716.3%; Geometric mean: 716.3%; Arithmetic mean: 716.3%; Median: 716.3%; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9328:1254,Benchmark,Benchmark,1254,https://hail.is,https://github.com/hail-is/hail/pull/9328,2,['Benchmark'],['Benchmark']
Testability,"CHANGELOG: Fix #13356 and fix #13409. In QoB pipelines with 10K or more partitions, transient ""Corrupted block detected"" errors were common. This was caused by incorrect retry logic. That logic has been fixed. I now assume we cannot reuse a ReadChannel after any exception occurs during read. We also do not assume that the ReadChannel ""atomically"", in some sense, modifies the ByteBuffer. In particular, if we encounter any error, we blow away the ByteBuffer and restart our read entirely. As I described in [this comment to #13409](https://github.com/hail-is/hail/issues/13409#issuecomment-1737926184), I have a 10K partition pipeline which was reliably producing this error but now reliably *does not* produce this error (it produces another one, #13721, fix forthcoming for that too).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13730:176,log,logic,176,https://hail.is,https://github.com/hail-is/hail/pull/13730,2,['log'],['logic']
Testability,"CHANGELOG: Fix #13979, affecting Query-on-Batch and manifesting most frequently as ""com.github.luben.zstd.ZstdException: Corrupted block detected"". This PR upgrades google-cloud-storage from 2.29.1 to 2.30.1. The google-cloud-storage java library has a bug present at least since 2.29.0 in which simply incorrect data was returned. https://github.com/googleapis/java-storage/issues/2301 . The issue seems related to their use of multiple intremediate ByteBuffers. As far as I can tell, this is what could happen:. 1. If there's no channel, open a new channel with the current position.; 2. Read *some* data from the input ByteChannel into an intermediate ByteBuffer.; 3. While attempting to read more data into a subsequent intermediate ByteBuffer, an retryable exception occurs.; 4. The exception bubbles to google-cloud-storage's error handling, which frees the channel and loops back to (1). The key bug is that the intermediate buffers have data but the `position` hasn't been updated. When we recreate the channel we will jump to the wrong position and re-read some data. Lucky for us, between Zstd and our assertions, this usually crashes the program instead of silently returning bad data. This is the third bug we have found in Google's cloud storage java library. The previous two:. 1. https://github.com/hail-is/hail/issues/13721; 2. https://github.com/hail-is/hail/issues/13937. Be forewarned: the next time we see bizarre networking or data corruption issues, check if updating google-cloud-storage fixes the problem.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14080:1112,assert,assertions,1112,https://hail.is,https://github.com/hail-is/hail/pull/14080,1,['assert'],['assertions']
Testability,"CHANGELOG: Fix a major correctness bug ocurring when calling `BlockMatrix.transpose` on sparse BlockMatrices. Symmetric matrices are not affected. It seems like `BlockMatrix.transpose` has been broken for a while when the matrix is sparse. . I added `PerBlockMatrixSparsifier` as a way to sparsify particular blocks of a `BlockMatrix` from python. This is just so we can write tests / diagnose user errors based on sparsity patterns. I also wrote a helper function to sparsify numpy matrices for testing purposes. . The crucial fix here is to `GridPartitioner.transpose`. That function is supposed to return a pair of the form `(GridPartitioner, Int => Int)`, where the first of the pair is the new `GridPartitioner` for the transposed thing, and the second of the pair is a function that takes in a partition number and returns the partition number of its parent partition. Crucially, it's a function from new partition ids to old partition ids. I believe that code I'm removing did the opposite. Refresher on `GridPartitioner`: There are 3 coordinate systems:. There's ""coordinate"", which is (row, column). There's ""blockIndex"", which is the column major numbering of all blocks. And there's ""partitionIndex"", which is similar to numbering by blockIndex but it skips the sparse blocks",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8867:377,test,tests,377,https://hail.is,https://github.com/hail-is/hail/pull/8867,2,['test'],"['testing', 'tests']"
Testability,"CHANGELOG: Fixed #13346. Previously, when parsing VCFs, Hail failed on INFO or FORMAT fields with missing elements because the meaning of ""."" could be ambiguous. Hail now resovles the ambiguity, when possible, using the number of alleles. If the meaning is still ambiguous after considering the number of alleles, Hail uses a new `hl.import_vcf` parameter to resolve the ambiguity. See the `hl.import_vcf` docs for details. See https://github.com/hail-is/hail-rfcs/pull/8 for details on the problem and the solution. I assessed the effect of removing the `array_elements_required=True` fast path by evaluating the following code against this PR's tip commit `cd06c248e4` and `0.2.120` (`f00f916faf`). I ran it three times per commit and report each individual time as well as the average. ```; In [1]: import hail as hl. In [2]: %%time; ...: mt = hl.import_vcf(; ...: '/Users/dking/projects/hail-data/ALL.chr21.raw.HC.vcf.bgz'; ...: ); ...: mt._force_count_rows(); ```. | commit | run 1 (s) | run 2 (s) | run 3 (s) | average (s) | warm average (s) |; |--------------------------|-----------|-----------|-----------|-------------|------------------|; | `cd06c248e4` (this PR) | 116s | 80s | 77s | 91+-18 | 78.5 +- 1.5 |; | `f00f916faf` (`0.2.120`) | 112s | 80s | 79s | 90+-15 | 79.5 +- 0.5 |. This is what I expected. For a VCF with no ambiguity and few instances of ""."", we've added a very minor amount of new work. ---. Note that I had to specifically override the Number setting for certain FORMAT and INFO fields because they were set to `.` in the benchmarked VCF. If this error appears in a 1KG VCF, it must be fairly common.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13465:1552,benchmark,benchmarked,1552,https://hail.is,https://github.com/hail-is/hail/pull/13465,1,['benchmark'],['benchmarked']
Testability,"CHANGELOG: Fixed a memory leak triggered by `hl.literal(...).contains(...). This bug is present elsewhere in the code generator, but the set; contains function is probably the worst place for it to happen.; This leads to a full copy of the set where the binary search; is executed. The core problem was a bug in PArrayBackedContainer not casting; its codes properly, leading to the no-op coerce logic in PCanonicalArray; being bypassed in favor of the generic copy-the-world implementation of; `store`. The test I have added catches the memory leak, but now fails at; compile time at the assertion to `PCanonicalArray.store` instead.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10451:395,log,logic,395,https://hail.is,https://github.com/hail-is/hail/pull/10451,3,"['assert', 'log', 'test']","['assertion', 'logic', 'test']"
Testability,"CHANGELOG: Fixed bug where making NDArrays of non-numeric types would fail. Non-numeric ndarrays still cannot be collected to python though. . NDArrays of non numeric types are broken, have been for a while. No one seems to use them for that currently, so it hasn't been an issue, but I suspect with `dndarray` or BlockedMatrixTable experiments it's going to be desirable. . This PR starts to address that problem by doing the following:. 1. `checkedConvertFrom`, which only supported primitive arrays, is replaced with the more flexible `copyFromType`. As this was the only use of `checkedConvertFrom`, I removed it altogether. . 2. Add tests that show that it's now possible to make an ndarray of non-numeric types, so long as the only things that get returned in python are numbers. The remaining problems all involve conversions to numpy. If you never convert to numpy, things should be fine:. 1. I need to get strides out of the Java ndarray representation. Strides make no sense for non-numeric objects after converting from Java to Python. We say the size of a required tuple of 3 int32's is 12 bytes, but that's not going to be the size of the python object. 2. Strings are tricky too, since the numpy string dtype comes with a max length, so we'll have to do a pass over the strings to figure out how large the largest one is before converting.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9503:638,test,tests,638,https://hail.is,https://github.com/hail-is/hail/pull/9503,1,['test'],['tests']
Testability,"CHANGELOG: Fixed bugs in the identity by descent implementation for Query on Batch. This PR fixes #14052. There were two bugs in how we compute IBD. In addition, the tests weren't running in QoB and the test dataset we were using doesn't have enough variability to catch errors. I used Balding Nichols generated data instead. Do we need to set the seed in the tests here?",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14062:166,test,tests,166,https://hail.is,https://github.com/hail-is/hail/pull/14062,3,['test'],"['test', 'tests']"
Testability,"CHANGELOG: Fixed incorrect error message when incorrect type specifid with hl.loop. I added a test that gave a bad error message, then rearranged code in `hl.loop` to improve the error message. Prior to this change, the error a user would get here is that they wrote a loop that isn't tail recursive, because hail would insert an implicit cast when trying to unify types, and the casting would wrap the recursive loop call. Now, we check to make sure the loop's return type is correct before analyzing whether it's tail recursive, which I believe removes the possibility of getting a tail recursion error when you should be getting a type error.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10174:94,test,test,94,https://hail.is,https://github.com/hail-is/hail/pull/10174,1,['test'],['test']
Testability,CHANGELOG: Fixed partitioning logic in `hl.import_plink`,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10662:30,log,logic,30,https://hail.is,https://github.com/hail-is/hail/pull/10662,1,['log'],['logic']
Testability,"CHANGELOG: Fixes #13697, a long standing issue with QoB, in which a failing partition job or driver job is not failed in the Batch UI. I am not sure why we did not do this this way in the first place. If a JVMJob raises an exception, Batch will mark the job as failed. Ergo, we should raise an exception when a driver or a worker fails!. Here's an example: I used a simple pipeline that write to a bucket to which I have read-only access. You can see an example Batch (where every partition fails): https://batch.hail.is/batches/8046901. [1]. ```python3; import hail as hl; hl.utils.range_table(3, n_partitions=3).write('gs://neale-bge/foo.ht'); ```. NB: I removed the `log.error` in `handleForPython` because that log is never necessary. That function converts a stack of exceptions into a triplet of the short message, the full exception with stack trace, and a Hail error id (if present). That triplet is always passed along to someone else who logs the exception. (FWIW, the error id indicates a Python source location that is associated with the error. On the Python-side, we can look up that error id and provide a better stack trace.). [1] You'll notice the logs are missing. I noticed this as well, it's a new bug. I fixed it in https://github.com/hail-is/hail/pull/13729.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13715:670,log,log,670,https://hail.is,https://github.com/hail-is/hail/pull/13715,4,['log'],"['log', 'logs']"
Testability,"CHANGELOG: Hail Query-on-Batch previously used Class A Operations for all interaction with blobs. This change ensures that QoB only uses Class A Operations when necessary. Inspired by @jigold 's file system improvement campaign, I pursued the avoidance of ""list"" operations. I anticipate this reduces flakiness in Azure (which is tracked in #13351) and cost in Azure. I enforced aiotools.fs terminology on hail.fs and Scala:. 1. `FileStatus`. Metadata about a blob or file. It does not know if a directory exists at this path. 2. `FileListEntry`. Metadata from a list operation. It knows if a directory exists at this path. Variable names were updated to reflect this distinction:. 1. `fileStatus` / `fileStatuses`. 2. `fle`/ `fles` / `fileListEntry` / `fileListEntries`, respectively. `listStatus` renamed to `listDirectory` for clarity. In both Azure and Google, `fileStatus` does not use a list operation. `fileListEntry` can be used when we must know if a directory exists. I just rewrote this from first principles because:; 1. In neither Google nor Azure did it check if the path was a directory and a file.; 2. In Google, if the directory entry wasn't in the first page, it would fail (NB: there are fifteen non-control characters in ASCII before `/`, if the page size is 15 or fewer, we'd miss the first entry with a `/` at the end).; 3. In Azure, we issued both a get and a list. There are now unit tests for this method. ---. 1. `copyMerge` and `concatenateFiles` previously used `O(N_FILES)` list operations, they now use `O(N_FILES)` get operations.; 2. Writers that used `exists` to check for a _SUCCESS file now use a get operation.; 3. Index readers, import BGEN, and import plink all now check file size with a get operation. That said, overall, the bulk of our Class A Operations are probably writes.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13885:1408,test,tests,1408,https://hail.is,https://github.com/hail-is/hail/pull/13885,1,['test'],['tests']
Testability,"CHANGELOG: Hail Query-on-Batch previously used Class A Operations for all interaction with blobs. This change ensures that QoB only uses Class A Operations when necessary. Inspired by @jigold 's file system improvement campaign, I pursued the avoidance of ""list"" operations. I anticipate this reduces flakiness in Azure (which is tracked in #13351) and cost in Azure. I enforced aiotools.fs terminology on hail.fs and Scala:. 1. `FileStatus`. Metadata about a blob or file. It does not know if a directory exists at this path. 2. `FileListEntry`. Metadata from a list operation. It knows if a directory exists at this path. Variable names were updated to reflect this distinction:. 1. `fileStatus` / `fileStatuses`. 2. `fle`/ `fles` / `fileListEntry` / `fileListEntries`, respectively. `listStatus` renamed to `listDirectory` for clarity. In both Azure and Google, `fileStatus` does not use a list operation. `getFileListEntry` can be used when we must know if a directory exists. I just rewrote this from first principles because:; 1. In neither Google nor Azure did it check if the path was a directory and a file.; 2. In Google, if the directory entry wasn't in the first page, it would fail (NB: there are fifteen non-control characters in ASCII before `/`, if the page size is 15 or fewer, we'd miss the first entry with a `/` at the end).; 3. In Azure, we issued both a get and a list. There are now unit tests for this method. ---. 1. `copyMerge` and `concatenateFiles` previously used `O(N_FILES)` list operations, they now use `O(N_FILES)` get operations.; 2. Writers that used `exists` to check for a _SUCCESS file now use a get operation.; 3. Index readers, import BGEN, and import plink all now check file size with a get operation. That said, overall, the bulk of our Class A Operations are probably writes.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13452:1411,test,tests,1411,https://hail.is,https://github.com/hail-is/hail/pull/13452,1,['test'],['tests']
Testability,"CHANGELOG: Hail supports identity_by_descent on Apple M1 and M2 chips; however, your Java installation must be an arm64 installation. Using x86_64 Java with Hail on Apple M1 or M2 will cause SIGILL errors. If you have an Apple M1 or Apple M2 and `/usr/libexec/java_home -V` does not include `(arm64)`, you must switch to an arm64 version of the JVM. Fixes (hail#14000). Fixes #14000. Hail has never supported its native functionality on Mac OS X Apple M1 chips. In particular, we only built x86_64 compatible dylibs. M1 chips will try to simulate a very basic x86_64 ISA using Rosetta 2 but our x86_64 dylibs expect the ISA of at least sandybridge, which includes some SIMD instructions not supported by Rosetta 2. This PR bifurcates our native build into x86_64 and arm64 targets which live in build/x86_64 and build/arm64, respectively. In Linux, this moves where the object files live, but should otherwise have no effect. The test and benchmark targets use the ""native"" build which always points at the x86_64 object files. The shared object targets, LIBBOOT & LIBHAIL, explicitly depend on x86_64 because that is the only linux architecture we support. In OS X, we only test and benchmark the ""native"" build, which is detected using `uname -m`. For the shared objects (the dylibs) we have four new files: libboot and libbhail for x86_64 and for arm64. Each pair files is placed in `darwin/x86_64/` and `darwin/arm64/`, respectively. Those dylibs are never meant to escape the src/main/c world. The LIBBOOT and LIBHAIL targets (which are invoked by hail/Makefile) combine the two architecture-specific dylibs into a ""universal"" dylib. You can verify this by running `file` on the dylibs. Here I run them on the new ""prebuilt"" files which are in this PR:. ```; (base) dking@wm28c-761 hail % file hail/prebuilt/lib/darwin/libboot.dylib; hail/prebuilt/lib/darwin/libboot.dylib: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit dynamically linked shared library x86_64] [arm64:Mach-",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14006:930,test,test,930,https://hail.is,https://github.com/hail-is/hail/pull/14006,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"CHANGELOG: Implement the KING method for relationship inference as hl.methods.king. Just look at the last commit. The other commits are PRs that I hope will merge; on Tuesday. This PR implements `hl.methods.king` a new, relatively fast, method for; relationship inference on genotype data. I am eager for criticism of the ""Notes""; section in which I attempt to describe the KING method to a Hail user with only; a basic understanding of genotype matrices and Hail. I also include a benchmark which exercises MT->BM, matrix multiply, and; BM->MT. We have an opportunity for a substantial improvement in performance by; BM->replacing the BM interface by one which permits multiple entry fields. In; BM->particular, note that I have to convert from row-partitioning to; BM->block-partitioning four times!",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9343:482,benchmark,benchmark,482,https://hail.is,https://github.com/hail-is/hail/pull/9343,1,['benchmark'],['benchmark']
Testability,"CHANGELOG: Improve error message when combining incompatibly indexed fields in certain operations including array indexing. See test cases for straightforward examples. In main, none of the test code triggers errors. You have to execute the table to actually trigger an error in IR serialization which will reference `""sa""` which is totally meaningless to the user (let alone many Hail engineers).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12566:128,test,test,128,https://hail.is,https://github.com/hail-is/hail/pull/12566,2,['test'],['test']
Testability,"CHANGELOG: In QoB, Hail's file systems now correctly list all files in a directory, not just the first 1000. This could manifest in an import_table or import_vcf which used a glob expression. In such a case, only the first 1000 files would have been included in the resulting Table or MatrixTable. I also moved two GSFS-only tests into the FSSuite. There should be very few tests that are cloud-specific.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13434:325,test,tests,325,https://hail.is,https://github.com/hail-is/hail/pull/13434,2,['test'],['tests']
Testability,"CHANGELOG: In Query-on-Batch, `hl.logistic_regression('firth', ...)` is now supported. Forgive me: I cleaned up and unified the look of the (now three) `fit` methods. A few of the sweeping cleanups:; 1. num_iter, max_iter, and cur_iter are now n_iterations, max_iterations, and iteration.; 2. Pervasive use of broadcasting functions rather than map.; 3. `log_lkhd` only evaluated on the last iteration (in particular, its not bound before the `case`); 4. `select` as the last step rather than `drop` (we didn't drop all the unnecessary fields previously).; 5. `select_globals` to make sure we only keep the `null_fit`. Major changes in this PR:; 1. Add no_crash to triangular_solve; 2. Split the epacts tests by type (now easy to run all firth tests with `-k firth`).; 3. Firth fitting and test. A straight copy from Scala. I honestly don't understand what this is doing.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12816:703,test,tests,703,https://hail.is,https://github.com/hail-is/hail/pull/12816,3,['test'],"['test', 'tests']"
Testability,"CHANGELOG: In Query-on-Batch, driver and worker logs no longer buffer so messages should arrive in the UI after a fixed delay rather than proportional to the frequency of log messages.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13067:48,log,logs,48,https://hail.is,https://github.com/hail-is/hail/pull/13067,2,['log'],"['log', 'logs']"
Testability,"CHANGELOG: In Query-on-Batch, retries of certain errors has been increased from once to five times. This should reduce the occurrence of transient errors such as ""Connection reset"" and `SocketException`. ---. The old approach doesn't work because it doesn't have the retry logic around the invocation. Moreover, the old approach wouldn't retry transient errors encountered after a retry once error. The new approach address both.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13021:273,log,logic,273,https://hail.is,https://github.com/hail-is/hail/pull/13021,1,['log'],['logic']
Testability,"CHANGELOG: Query on Spark now officially supports Spark 3.3.0 and Dataproc 2.1.x. Tested on dataproc via `make -C hail test-dataproc-37`. Updating the dependencies introduced a few new linting checks that I fixed here. Updating pyspark necessitated a couple of changes, namely a different py4j jar and they removed `SparkSession._wrapped` (but maybe we didn't need that anyway? not sure). Most importantly, the newer spark version brings with it a newer jackson version which is sufficient for the azure-storage-blob dependency, meaning we don't need to build against two different spark versions for spark and batch.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12701:82,Test,Tested,82,https://hail.is,https://github.com/hail-is/hail/pull/12701,2,"['Test', 'test']","['Tested', 'test-dataproc-']"
Testability,"CHANGELOG: Query-on-Batch now supports `hl.skat(..., logistic=False)`. I also added actual tests for `hl.skat`, which were lost at some point. I am somewhat not confident in my documentation and comments, because the SKAT paper is terse and unclear. I would really apprecaiate strong criticism of the documentation and the code comments.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12637:53,log,logistic,53,https://hail.is,https://github.com/hail-is/hail/pull/12637,2,"['log', 'test']","['logistic', 'tests']"
Testability,"CHANGELOG: Reading data from public blobs is now supported in Azure. On current main, the following test fails:; ```python; def test_can_access_public_blobs():; public_mt = 'hail-az://azureopendatastorage/gnomad/release/3.1/mt/genomes/gnomad.genomes.v3.1.hgdp_1kg_subset.mt'; assert hl.hadoop_exists(public_mt); mt = hl.read_matrix_table(public_mt); mt.describe(); ```. The `hadoop_exists` fails in the python fs with a `ClientAuthenticationError` and the QoB pipeline fails on the Query Driver with a 401. See [zulip](https://hail.zulipchat.com/#narrow/stream/300487-Hail-Batch-Dev/topic/Azure.20public.20blobs/near/284186815) for additional context. I contemplated whether we should have a public container in our infrastructure for running tests, but the lack of requester pays makes that feel not great. Azure's paying for the opendatastorage account so I figured it would be ok for us to test against it (and the test only reads metadata), but happy to take alternative suggestions.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12900:100,test,test,100,https://hail.is,https://github.com/hail-is/hail/pull/12900,5,"['assert', 'test']","['assert', 'test', 'tests']"
Testability,"CHANGELOG: Reduce latency on simple pipelines by as much as 50% by reducing decoding time. Force count essentially tests decoding because it forces decoding but then just increments a counter by one. Analysis of profile results indicates that the array inplace decoder was perhaps 50% of time, but exactly what part of decoding was unclear. I attempted many different things. I eventually settled on loop unrolling as the primary benefit. After team meeting, I applied @patrick-schultz 's advice to use bit twiddling to further improve the speed. ---. I assessed the latency using `time python3` on this file:. ```python; import hail as hl; hl.init(master='local[1]'); hl._set_flags(write_ir_files='1'); hl.read_matrix_table('/Users/dking/projects/hail-data/foo.mt')._force_count_rows(); ```. `foo.mt` is a subset of the `variant_data` from a VDS with ~80k samples, ~300k variants, stored in ~1.6GiB. 1. This PR: 34s, 33s; 2. no twiddling: 43s, 43s https://github.com/hail-is/hail/compare/main...danking:hail:unroll-64; 3. no twiddling & 8 element blocks: 37s, 38s https://github.com/hail-is/hail/compare/main...danking:hail:unroll-8; 4. `main` (`481cfc201b [query] fix backoff code (#13713)`): 68s, 69s. In YourKit, I observe that (1) reads 50-70MB/s with one core whereas (4) reads 15-35MB/s. I also assessed the 10-core latency and JIT effects:. - (1) starts at ~12s, warms to ~6s (+- 0.5s). Peak bandwidth 490MB/s.; - (4) starts at ~17s and warms up to ~11s (+- 2s). Peak bandwidth ~250MB/s. I suspect, with this PR, the multi-core speed is fast enough to saturate any of our file stores (including my laptop, which I think taps out just around ~500MB/s). Big thanks to everyone who contributed, particularly @patrick-schultz, whose suggestion to use bit-twiddling, squeezeed another 10% off the 8 element blocks.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13776:115,test,tests,115,https://hail.is,https://github.com/hail-is/hail/pull/13776,1,['test'],['tests']
Testability,"CHANGELOG: Since 0.2.110, `hailctl dataproc` set the heap size of the driver JVM dangerously high. It is now set to an appropriate level. This issue manifests in a variety of inscrutable ways including RemoteDisconnectedError and socket closed. See issue #13960 for details. In Dataproc versions 1.5.74, 2.0.48, and 2.1.0, Dataproc introduced [""memory protection""](https://cloud.google.com/dataproc/docs/support/troubleshoot-oom-errors#memory_protection) which is a euphemism for a newly aggressive OOMKiller. When the OOMKiller kills the JVM driver process, there is no hs_err_pid...log file, no exceptional log statements, and no clean shutdown of any sockets. The process is simply SIGTERM'ed and then SIGKILL'ed. From Hail 0.2.83 through Hail 0.2.109 (released February 2023), Hail was pinned to Dataproc 2.0.44. From Hail 0.2.15 onwards, `hailctl dataproc`, by default, reserves 80% of the advertised memory of the driver node for the use of the Hail Query Driver JVM process. For example, Google advertises that an n1-highmem-8 has 52 GiB of RAM, so Hail sets the `spark:spark.driver.memory` property to 41g (we always round down). Before aggressive memory protection, this setting was sufficient to protect the driver from starving itself of memory. Unfortunately, Hail 0.2.110 upgraded to Dataproc 2.1.2 which enabled ""memory protection"". Moreover, in the years since Hail 0.2.15, the memory in use by system processes on Dataproc driver nodes appears to have increased. Due to these two circumstances, the driver VM's memory usage can grow high enough to trigger the OOMKiller before the JVM triggers a GC. Consider, for example, these slices of the syslog of the n1-highmem-8 driver VM of a Dataproc cluster:. ```; Nov 22 14:26:51 vds-cluster-91f3f4c1-b737-m earlyoom[4115]: earlyoom v1.6.2; Nov 22 14:26:51 vds-cluster-91f3f4c1-b737-m earlyoom[4115]: mem total: 52223 MiB, swap total: 0 MiB; Nov 22 14:26:51 vds-cluster-91f3f4c1-b737-m earlyoom[4115]: sending SIGTERM when mem <= 0.12% and ",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14066:584,log,log,584,https://hail.is,https://github.com/hail-is/hail/pull/14066,2,['log'],['log']
Testability,CHANGELOG: The Batch LocalBackend now sets the working directory for dockerized jobs to the root directory instead of the temp directory. Tested with the following:. ```; In [1]: import hailtop.batch as hb; ...: b = hb.Batch(backend=hb.LocalBackend()); ...: j = b.new_job(); ...: j.image('ubuntu:20.04'); ...: j.command('pwd'); ...: b.run(); ...:; ...:; /; Batch completed successfully!; ```,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12845:138,Test,Tested,138,https://hail.is,https://github.com/hail-is/hail/pull/12845,1,['Test'],['Tested']
Testability,"CHANGELOG: Use indexed VEP cache files for GRCh38 on both dataproc and QoB. Fixes #13989. In this PR, I did the following:; 1. Installed samtools into the Docker image to get rid of errors in the log output; 2. Added the `--merged` flag so that VEP will use the directory `homo_sapiens_merged` for the cache. Outstanding Issues:; 1. The FASTA files that are in `homo_sapiens/` were not present in the merged dataset. Do we keep both the `homo_sapiens` and `homo_sapiens_merged/` directories in our bucket or do we transfer the FASTA files to the merged directory?; 2. Once we decide the answer to (1), then I can fix this in dataproc. The easiest thing to do is to add the tar file with the `_merged` data to the dataproc vep folders and use the `--merged` flag. However, that will double the startup time for VEP on a worker node in dataproc. Before:; <img width=""617"" alt=""Screenshot 2023-12-05 at 12 42 16 PM"" src=""https://github.com/hail-is/hail/assets/1693348/bee7fff5-782c-4f19-aa88-26383ed386b7"">. After:; <img width=""619"" alt=""Screenshot 2023-12-05 at 12 46 30 PM"" src=""https://github.com/hail-is/hail/assets/1693348/3d731759-6c69-4f1c-9c73-92bfb05c239a"">",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14071:196,log,log,196,https://hail.is,https://github.com/hail-is/hail/pull/14071,1,['log'],['log']
Testability,"CHANGELOG: `hl.Table.parallelize` is much more flexible and now successfully imports most Hail-compatible data. I really wanted to load the hail-is/hail pull requests into Hail. I did not want to specify; the types of all 271 fields. I souped up Hail's `impute_type`:. - If an empty array, set, dict or `None` appears at any nesting level, but a ""peer"" is non-empty and; non-missing, we accept the peer's type.; - We take the union of two struct types as long as they agree on their intersection.; - If we discover a dict that cannot be imputed as a Hail dict, we try to impute it as a struct. If you like this change, I'll add tests. Note: I had to change `HailType` to include `None`.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10045:628,test,tests,628,https://hail.is,https://github.com/hail-is/hail/pull/10045,1,['test'],['tests']
Testability,"CHANGELOG: `hl.export_vcf` is now substantially faster on simple pipelines. I fell into a bit of a rabbit hole. I started off using the balding nichols model as my test dataset. I improved random number generation a bit by making `rand_unif` into a method, but eventually bailed out to focus on other improvements. I also originally used `vcf.bgz` but bgzip is quite slow and it obscured the slow parts of what I could control, i.e. hail. I finally settled on this test case run against the Spark backend:; ```; import hail as hl; hl.init(master='local[1]'); hl._set_flags(write_ir_files='1'); mt = hl.utils.range_matrix_table(n_rows=1000_000, n_cols=4_000); mt = mt.key_cols_by(s = hl.str(mt.col_idx)); mt = mt.key_rows_by(locus = hl.locus(""1"", mt.row_idx + 1), alleles = ['G', 'T']); mt = mt.annotate_entries(GT = hl.call(mt.row_idx % 2, mt.col_idx % 2)); hl.export_vcf(mt, '/tmp/foo.vcf'); ```; It generates a 15GiB file. My initial tests, which used the balding nichols model, had write times of ~8MiB/s. With all my changes, I once saw 177 MIB/s but I think that may have been a fluke. I see pretty consistent ~110MiB/s in the profiler's estimate of bandwidth to the FileOutputStream. When measured by `time python3 test.py` this script writes at ~93MiB/s. Ideally we would hit 250MiB/s (1/8th of an n1-standard-8's network bandwidth), but, considering that we have to split that bandwidth with reading in most cases, ~91 MiB/s ain't so bad. On main, this pipeline writes at 32 MiB/s. The wins in decreasing order of importance were:; 1. Use buffered I/O. All of our exporters should now use buffered I/O because I changed it in the EmitMethodBuilder. I didn't change it in HadoopFS because (a) Hail's native I/O has buffering and (b) buffering and position tracking requires work.; 2. Avoid String allocation, String to UTF8 conversion, and Array[Byte] allocation in VCF writing. In particular, for the most common types of Calls, I just return the UTF8 byte array in a switch statement.; 3. Use",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12733:164,test,test,164,https://hail.is,https://github.com/hail-is/hail/pull/12733,3,['test'],"['test', 'tests']"
Testability,"CHANGELOG: `hl.skat(..., logistic=True)` now supported in the Batch backend.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12643:25,log,logistic,25,https://hail.is,https://github.com/hail-is/hail/pull/12643,1,['log'],['logistic']
Testability,"CHANGELOG: fix LocalBackend.run() succeeding when intermediate command fails. Stacked on #9219 as that PR is essentially approved, and to avoid a merge conflict. The commit in this PR is https://github.com/hail-is/hail/pull/9297/commits/cbc3bbe7f14c01d44c89995a03375d983fc14f4f. Caused by associativity of the ternary conditional ('set -e' + 'x' is the operand `a` in `a if cond else b`). Easy reproduction case on main:. ```python; def test_single_job_with_mixed_shells(self):; b = self.batch(); j = b.new_job(); j.command(f'echoddd ""hello""'); j2 = b.new_job(); j2.command(f'echo ""world""'). self.assertRaises(Exception, b.run); ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9297:597,assert,assertRaises,597,https://hail.is,https://github.com/hail-is/hail/pull/9297,1,['assert'],['assertRaises']
Testability,"CHANGELOG: fix a bug which caused jobs with a large number of partitions (close to 100k) to run out of memory on the driver after all partitions finish. Cap number of threads allocated when reading results of a cda on the driver. ~Still waiting on a test to confirm this fixes the bad scaling with number of partitions.~. We were reading cda results with a threadpool containing one thread per partition, but kept all but 1000 threads blocked. This changes to use a threadpool of 1000 threads. We still use a surprising amount of memory when reading results, but this change will likely allow jobs with ~100k partitions to complete. fixes #13533",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13634:250,test,test,250,https://hail.is,https://github.com/hail-is/hail/pull/13634,1,['test'],['test']
Testability,"CHANGELOG: make hail's optimization rewriting filters to interval-filters smarter and more robust. Completely rewrites ExtractIntervalFilters. Instead of matching against very specific patterns, and failing completely for things that don't quite match (e.g. an input is let bound, or the fold implementing ""locus is contained in a set of intervals"" is written slightly differently), this uses a standard abstract interpretation framework, which is almost completely insensitive to the form of the IR, only depending on the semantics. It also correctly handles missing key fields, where the previous implementation often produced an unsound transformation of the IR. Also adds a much more thorough test suite than we had before. At the top level, the analysis takes a boolean typed IR `cond` in an environment where there is a reference to some `key`, and produces a set `intervals`, such that `cond` is equivalent to `cond & intervals.contains(key)` (in other words `cond` implies `intervals.contains(key)`, or `intervals` contains all rows where `cond` is true). This means for instance it is safe to replace `TableFilter(t, cond)` with `TableFilter(TableFilterIntervals(t, intervals), cond)`. Then in a second pass it rewrites `cond` to `cond2`, such that `cond & (intervals.contains(key))` is equivalent to `cond2 & intervals.contains(key)` (in other words `cond` implies `cond2`, and `cond2 & intervals.contains(key)` implies `cond`). This means it is safe to replace the `TableFilter(t, cond)` with `TableFilter(TableFilterIntervals(t, intervals), cond2)`. A common example is when `cond` can be completely captured by the interval filter, i.e. `cond` is equivant to `intervals.contains(key)`, in which case we can take `cond2 = True`, and the `TableFilter` can be optimized away. This all happens in the function; ```scala; def extractPartitionFilters(ctx: ExecuteContext, cond: IR, ref: Ref, key: IndexedSeq[String]): Option[(IR, IndexedSeq[Interval])] = {; if (key.isEmpty) None; else {; val e",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13355:697,test,test,697,https://hail.is,https://github.com/hail-is/hail/pull/13355,1,['test'],['test']
Testability,CI JSON Logging,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6713:8,Log,Logging,8,https://hail.is,https://github.com/hail-is/hail/pull/6713,1,['Log'],['Logging']
Testability,CI Should Have JSON Logging Format,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6701:20,Log,Logging,20,https://hail.is,https://github.com/hail-is/hail/issues/6701,1,['Log'],['Logging']
Testability,CI cannot test itself if batch is still running,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4531:10,test,test,10,https://hail.is,https://github.com/hail-is/hail/issues/4531,1,['test'],['test']
Testability,"CI gets the logs for every failing job in the batch and sends it with the deploy_status response. This performs O(n_jobs) work for a single request, but this API is developers only and used only by the deploy test which has a small batch. We can revisit if this becomes a problem.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8337:12,log,logs,12,https://hail.is,https://github.com/hail-is/hail/pull/8337,2,"['log', 'test']","['logs', 'test']"
Testability,"CI had restarted >150 times because every time it came up it tried to start some job pods. It appears that batch did not respond to these job start-ups, causing CI to hang. Unclear why CI didn't timeout. Or, perhaps, the timeout was longer than the health check timeout, so it was always restarted before the HTTP request timed out. [batch-describe.txt](https://github.com/hail-is/hail/files/2496565/batch-describe.txt); [batch.log](https://github.com/hail-is/hail/files/2496566/batch.log); [ci-describe.txt](https://github.com/hail-is/hail/files/2496567/ci-describe.txt); [ci.log](https://github.com/hail-is/hail/files/2496568/ci.log)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4584:428,log,log,428,https://hail.is,https://github.com/hail-is/hail/issues/4584,4,['log'],['log']
Testability,CI is testing all open PRs after a master change,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5550:6,test,testing,6,https://hail.is,https://github.com/hail-is/hail/issues/5550,1,['test'],['testing']
Testability,"CI logic is around the assignee, not requested reviewer (still not sure what that means / how the API looks)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6346#issuecomment-501841086:3,log,logic,3,https://hail.is,https://github.com/hail-is/hail/pull/6346#issuecomment-501841086,1,['log'],['logic']
Testability,"CI needs a way to retry a PR without pushing a new commit. # Previous Discussion; I manually deleted the batch for #6561 this morning to test how CI would respond. I thought this bit would heal the situation appropriately:. https://github.com/hail-is/hail/blob/6a725fec7eca9357866b6d3ca7d89f3fef3d5deb/ci/ci/github.py#L395-L410. However, it's not working. Randomly assigned @johnc1231",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6582:137,test,test,137,https://hail.is,https://github.com/hail-is/hail/issues/6582,1,['test'],['test']
Testability,CI should let a PR job against an out-of-date target finish if the source SHA is the latest and has never been tested completely,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4438:111,test,tested,111,https://hail.is,https://github.com/hail-is/hail/issues/4438,1,['test'],['tested']
Testability,"CI test failure means not known to be safe to merge into master. Agreed re: minimizing false failures (i.e. failure due to system load but it's actually an OK change). I think in practice much less than 30s is fine, this test has been in for a month or two and this is the first time I saw it fail.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5503#issuecomment-470264865:3,test,test,3,https://hail.is,https://github.com/hail-is/hail/pull/5503#issuecomment-470264865,2,['test'],['test']
Testability,"CI testing needs GitHub tokens. We should be able to use OAuth and username/password credentials to create these tokens. CI testing also needs some GCP service accounts. We can use `kubectl` to create these. We can store the root secrets (a YAML with username/password pairs for the hail users) on the Broad servers. Then we use the developer's latent Broad credentials to retrieve the GitHub credentials and re-generate all of the necessary secrets in a fresh k8s cluster. One issue is that we have 2FA enabled for all hail accounts and the CI committer account needs to be in this org in order to use the ""merge button"". We should probably disable 2FA for the org and disable it on that account (hail-hephaestus). cc: @cseed",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4556:3,test,testing,3,https://hail.is,https://github.com/hail-is/hail/issues/4556,2,['test'],['testing']
Testability,"CI was getting 422s from GitHub. Using a; `raise_for_status=True` ClientSession circumvented gidgethubs native; error handling logic smothering the HTTP response body where github; places critical debugging information. Aiohttp is aware that; `raise_for_status` provides no access to the response body. They addressed; this in https://github.com/aio-libs/aiohttp/pulls/3892, but that has not; been released because 4.0.0 has not yet been released. Moreover, `gidgethub` incorrectly handles the too many statuses response. I'll PR a fix into their repo. For now, I've added a bit more information the logs and fixed the main issue, the missing `['status']`. Another relevant issue: https://github.com/aio-libs/aiohttp/issues/4600.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8480:127,log,logic,127,https://hail.is,https://github.com/hail-is/hail/pull/8480,2,['log'],"['logic', 'logs']"
Testability,CI will automatically merge once the tests pass!,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11747#issuecomment-1095250569:37,test,tests,37,https://hail.is,https://github.com/hail-is/hail/pull/11747#issuecomment-1095250569,1,['test'],['tests']
Testability,CPU use is flat after that test completes successfully.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12731#issuecomment-1518360615:27,test,test,27,https://hail.is,https://github.com/hail-is/hail/pull/12731#issuecomment-1518360615,1,['test'],['test']
Testability,"CQA/pylint/commit/b9ecb4d70d23f7a6d05cc14e94c26fd8d3261d0f""><code>b9ecb4d</code></a> Fix false positive for <code>useless-super-delegation</code> for variadics (<a href=""https://github-redirect.dependabot.com/PyCQA/pylint/issues/6949"">#6949</a>)</li>; <li><a href=""https://github.com/PyCQA/pylint/commit/f881219a66deaf9cef6467ba27c3385bc98dad82""><code>f881219</code></a> Bump pylint to 2.14.2, update changelog</li>; <li><a href=""https://github.com/PyCQA/pylint/commit/988d882b56f9eca8ba1825b86b59e92b824ca1c3""><code>988d882</code></a> Treat <code>--errors-only</code> as a disable, not a paired enable/disable (<a href=""https://github-redirect.dependabot.com/PyCQA/pylint/issues/6937"">#6937</a>)</li>; <li><a href=""https://github.com/PyCQA/pylint/commit/386e7782b78a6e1baf0edd57cff893f3a08fb33c""><code>386e778</code></a> Mix incorrect parsing of multi-line options in <code>ini</code> files</li>; <li><a href=""https://github.com/PyCQA/pylint/commit/7cd7c8cbedd8258ad151e13da4036b42602351a7""><code>7cd7c8c</code></a> Add regression test for <a href=""https://github-redirect.dependabot.com/PyCQA/pylint/issues/6895"">#6895</a> (<a href=""https://github-redirect.dependabot.com/PyCQA/pylint/issues/6898"">#6898</a>)</li>; <li><a href=""https://github.com/PyCQA/pylint/commit/d6fa3416825fb7c398e4d8bee11a8ae0b3a39f07""><code>d6fa341</code></a> Mark <code>no-self-use</code> as moved to extensions (<a href=""https://github-redirect.dependabot.com/PyCQA/pylint/issues/6932"">#6932</a>)</li>; <li>Additional commits viewable in <a href=""https://github.com/PyCQA/pylint/compare/v2.13.5...v2.14.3"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pylint&package-manager=pip&previous-version=2.13.5&new-version=2.14.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with th",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11971:2170,test,test,2170,https://hail.is,https://github.com/hail-is/hail/pull/11971,1,['test'],['test']
Testability,"CRYPTOGRAPHY-6126975](https://snyk.io/vuln/SNYK-PYTHON-CRYPTOGRAPHY-6126975) | `cryptography:` <br> `3.3.2 -> 42.0.2` <br> | No | Proof of Concept ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | **489/1000** <br/> **Why?** Has a fix available, CVSS 5.5 | NULL Pointer Dereference <br/>[SNYK-PYTHON-CRYPTOGRAPHY-6210214](https://snyk.io/vuln/SNYK-PYTHON-CRYPTOGRAPHY-6210214) | `cryptography:` <br> `3.3.2 -> 42.0.2` <br> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | **519/1000** <br/> **Why?** Has a fix available, CVSS 6.1 | Information Exposure <br/>[SNYK-PYTHON-REQUESTS-5595532](https://snyk.io/vuln/SNYK-PYTHON-REQUESTS-5595532) | `requests:` <br> `2.27.1 -> 2.31.0` <br> | No | No Known Exploit . (*) Note that the real score may have changed since the PR was raised. Some vulnerabilities couldn't be fully fixed and so Snyk will still find them when the project is tested again. This may be because the vulnerability existed within more than one direct dependency, but not all of the affected dependencies could be upgraded. Check the changes in this PR to ensure they won't cause issues with your project. ------------. **Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open fix PRs.*. For more information: <img src=""https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiIxM2UyYzQ2MC1mZTA2LTQwOTktYWRhYi1lMWY4ZmE5MzFkZTAiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjEzZTJjNDYwLWZlMDYtNDA5OS1hZGFiLWUxZjhmYTkzMWRlMCJ9fQ=="" width=""0"" height=""0""/>; 🧐 [View latest project report](https://app.snyk.io/org/danking/project/c1c98f6a-57c6-4ecc-a329-3b744cab74bd?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr). 🛠 [Adjust project settings](https://app.snyk",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14329:10151,test,tested,10151,https://hail.is,https://github.com/hail-is/hail/pull/14329,1,['test'],['tested']
Testability,"CVSS 3.4 | Open Redirect <br/>[SNYK-PYTHON-TORNADO-5537286](https://snyk.io/vuln/SNYK-PYTHON-TORNADO-5537286) | `tornado:` <br> `6.2 -> 6.3.3` <br> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | **494/1000** <br/> **Why?** Has a fix available, CVSS 5.6 | HTTP Request Smuggling <br/>[SNYK-PYTHON-TORNADO-5840803](https://snyk.io/vuln/SNYK-PYTHON-TORNADO-5840803) | `tornado:` <br> `6.2 -> 6.3.3` <br> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | **539/1000** <br/> **Why?** Has a fix available, CVSS 6.5 | HTTP Request Smuggling <br/>[SNYK-PYTHON-TORNADO-6041512](https://snyk.io/vuln/SNYK-PYTHON-TORNADO-6041512) | `tornado:` <br> `6.2 -> 6.3.3` <br> | No | No Known Exploit . (*) Note that the real score may have changed since the PR was raised. Some vulnerabilities couldn't be fully fixed and so Snyk will still find them when the project is tested again. This may be because the vulnerability existed within more than one direct dependency, but not all of the affected dependencies could be upgraded. Check the changes in this PR to ensure they won't cause issues with your project. ------------. **Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open fix PRs.*. For more information: <img src=""https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiI0OWRkZWE4YS05NjJjLTQ4ODktYjgwMC0zZDY0YjgyYTBiMzgiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjQ5ZGRlYThhLTk2MmMtNDg4OS1iODAwLTNkNjRiODJhMGIzOCJ9fQ=="" width=""0"" height=""0""/>; 🧐 [View latest project report](https://app.snyk.io/org/danking/project/fa47fca0-549b-41a3-8bf7-bcda4ca9a617?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr). 🛠 [Adjust project settings](https://app.snyk",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14109:4959,test,tested,4959,https://hail.is,https://github.com/hail-is/hail/pull/14109,1,['test'],['tested']
Testability,"CVSS 3.4 | Open Redirect <br/>[SNYK-PYTHON-TORNADO-5537286](https://snyk.io/vuln/SNYK-PYTHON-TORNADO-5537286) | `tornado:` <br> `6.2 -> 6.3.3` <br> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | **494/1000** <br/> **Why?** Has a fix available, CVSS 5.6 | HTTP Request Smuggling <br/>[SNYK-PYTHON-TORNADO-5840803](https://snyk.io/vuln/SNYK-PYTHON-TORNADO-5840803) | `tornado:` <br> `6.2 -> 6.3.3` <br> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | **539/1000** <br/> **Why?** Has a fix available, CVSS 6.5 | HTTP Request Smuggling <br/>[SNYK-PYTHON-TORNADO-6041512](https://snyk.io/vuln/SNYK-PYTHON-TORNADO-6041512) | `tornado:` <br> `6.2 -> 6.3.3` <br> | No | No Known Exploit . (*) Note that the real score may have changed since the PR was raised. Some vulnerabilities couldn't be fully fixed and so Snyk will still find them when the project is tested again. This may be because the vulnerability existed within more than one direct dependency, but not all of the affected dependencies could be upgraded. Check the changes in this PR to ensure they won't cause issues with your project. ------------. **Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open fix PRs.*. For more information: <img src=""https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiI0ZDFlNzI4ZS0yNjljLTQ5YTItYTJkMC1iZjFjMDQ5NjZlMjkiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjRkMWU3MjhlLTI2OWMtNDlhMi1hMmQwLWJmMWMwNDk2NmUyOSJ9fQ=="" width=""0"" height=""0""/>; 🧐 [View latest project report](https://app.snyk.io/org/danking/project/fa47fca0-549b-41a3-8bf7-bcda4ca9a617?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr). 🛠 [Adjust project settings](https://app.snyk",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14026:3634,test,tested,3634,https://hail.is,https://github.com/hail-is/hail/pull/14026,1,['test'],['tested']
Testability,"CVSS 3.4 | Open Redirect <br/>[SNYK-PYTHON-TORNADO-5537286](https://snyk.io/vuln/SNYK-PYTHON-TORNADO-5537286) | `tornado:` <br> `6.2 -> 6.3.3` <br> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | **494/1000** <br/> **Why?** Has a fix available, CVSS 5.6 | HTTP Request Smuggling <br/>[SNYK-PYTHON-TORNADO-5840803](https://snyk.io/vuln/SNYK-PYTHON-TORNADO-5840803) | `tornado:` <br> `6.2 -> 6.3.3` <br> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | **539/1000** <br/> **Why?** Has a fix available, CVSS 6.5 | HTTP Request Smuggling <br/>[SNYK-PYTHON-TORNADO-6041512](https://snyk.io/vuln/SNYK-PYTHON-TORNADO-6041512) | `tornado:` <br> `6.2 -> 6.3.3` <br> | No | No Known Exploit . (*) Note that the real score may have changed since the PR was raised. Some vulnerabilities couldn't be fully fixed and so Snyk will still find them when the project is tested again. This may be because the vulnerability existed within more than one direct dependency, but not all of the affected dependencies could be upgraded. Check the changes in this PR to ensure they won't cause issues with your project. ------------. **Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open fix PRs.*. For more information: <img src=""https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiI1MTRiNWVkZS0yNmZhLTQxMDYtODMxMC1jMmNlZWQ3YzA4YTkiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjUxNGI1ZWRlLTI2ZmEtNDEwNi04MzEwLWMyY2VlZDdjMDhhOSJ9fQ=="" width=""0"" height=""0""/>; 🧐 [View latest project report](https://app.snyk.io/org/danking/project/20159ae6-a5aa-42fa-845a-c89f5bcbf999?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr). 🛠 [Adjust project settings](https://app.snyk",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14365:4293,test,tested,4293,https://hail.is,https://github.com/hail-is/hail/pull/14365,1,['test'],['tested']
Testability,"CVSS 3.4 | Open Redirect <br/>[SNYK-PYTHON-TORNADO-5537286](https://snyk.io/vuln/SNYK-PYTHON-TORNADO-5537286) | `tornado:` <br> `6.2 -> 6.3.3` <br> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | **494/1000** <br/> **Why?** Has a fix available, CVSS 5.6 | HTTP Request Smuggling <br/>[SNYK-PYTHON-TORNADO-5840803](https://snyk.io/vuln/SNYK-PYTHON-TORNADO-5840803) | `tornado:` <br> `6.2 -> 6.3.3` <br> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | **539/1000** <br/> **Why?** Has a fix available, CVSS 6.5 | HTTP Request Smuggling <br/>[SNYK-PYTHON-TORNADO-6041512](https://snyk.io/vuln/SNYK-PYTHON-TORNADO-6041512) | `tornado:` <br> `6.2 -> 6.3.3` <br> | No | No Known Exploit . (*) Note that the real score may have changed since the PR was raised. Some vulnerabilities couldn't be fully fixed and so Snyk will still find them when the project is tested again. This may be because the vulnerability existed within more than one direct dependency, but not all of the affected dependencies could be upgraded. Check the changes in this PR to ensure they won't cause issues with your project. ------------. **Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open fix PRs.*. For more information: <img src=""https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiI3YjUwZjkzNy0zZjY4LTRkZjItYjliMC0zZjRiYzUyNmIwNWIiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjdiNTBmOTM3LTNmNjgtNGRmMi1iOWIwLTNmNGJjNTI2YjA1YiJ9fQ=="" width=""0"" height=""0""/>; 🧐 [View latest project report](https://app.snyk.io/org/danking/project/fa47fca0-549b-41a3-8bf7-bcda4ca9a617?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr). 🛠 [Adjust project settings](https://app.snyk",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14244:2196,test,tested,2196,https://hail.is,https://github.com/hail-is/hail/pull/14244,1,['test'],['tested']
Testability,"CVSS 3.4 | Open Redirect <br/>[SNYK-PYTHON-TORNADO-5537286](https://snyk.io/vuln/SNYK-PYTHON-TORNADO-5537286) | `tornado:` <br> `6.2 -> 6.3.3` <br> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | **494/1000** <br/> **Why?** Has a fix available, CVSS 5.6 | HTTP Request Smuggling <br/>[SNYK-PYTHON-TORNADO-5840803](https://snyk.io/vuln/SNYK-PYTHON-TORNADO-5840803) | `tornado:` <br> `6.2 -> 6.3.3` <br> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | **539/1000** <br/> **Why?** Has a fix available, CVSS 6.5 | HTTP Request Smuggling <br/>[SNYK-PYTHON-TORNADO-6041512](https://snyk.io/vuln/SNYK-PYTHON-TORNADO-6041512) | `tornado:` <br> `6.2 -> 6.3.3` <br> | No | No Known Exploit . (*) Note that the real score may have changed since the PR was raised. Some vulnerabilities couldn't be fully fixed and so Snyk will still find them when the project is tested again. This may be because the vulnerability existed within more than one direct dependency, but not all of the affected dependencies could be upgraded. Check the changes in this PR to ensure they won't cause issues with your project. ------------. **Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open fix PRs.*. For more information: <img src=""https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiJiYzkzNDY4ZC02OGU5LTRmYWMtYTMzNS1mODcyNjE3MDZmNDgiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6ImJjOTM0NjhkLTY4ZTktNGZhYy1hMzM1LWY4NzI2MTcwNmY0OCJ9fQ=="" width=""0"" height=""0""/>; 🧐 [View latest project report](https://app.snyk.io/org/danking/project/20159ae6-a5aa-42fa-845a-c89f5bcbf999?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr). 🛠 [Adjust project settings](https://app.snyk",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14211:4223,test,tested,4223,https://hail.is,https://github.com/hail-is/hail/pull/14211,1,['test'],['tested']
Testability,"Caitlin uses these three in a pipeline she's trying to run, so this should get her a little closer to being 100% IR. I added three new IR pieces:; - `str` on ints and floats (implemented using Scala string method); - `StringSlice` IR node corresponding to java.lang.String.substring (the python-like negative indexing is implemented in the function registry); - `StringLength` IR node to calculate number of bytes present in the String (in particular, this incorrectly reports length 4 for the poop emoji). I added two suites to test these new IR nodes.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3698:529,test,test,529,https://hail.is,https://github.com/hail-is/hail/pull/3698,1,['test'],['test']
Testability,"Call(a, phased=True); for a in [; [0, 1], [0, 0], [0, 1], [0, 0], [1, 0],; [1, 1], [0, 1], [1, 1], [0, 0], [0, 1],; [1, 0], [0, 0], [1, 0], [0, 0], [0, 0],; [1, 1], [1, 1], [1, 0], [0, 1], [1, 1],; [1, 1], [1, 1], [1, 1], [1, 1], [1, 1]]]; > assert actual == expected; E assert [Call(alleles=[0, 0], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[1, 0], phased=True), Call(alleles=[1, 0], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[1, 0], phased=True), Call(alleles=[0, 1], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[1, 1], phased=True)] == [Call(alleles=[0, 1], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[0, 1], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[1, 0], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[0, 1], phased=True), Call(alleles=[1, 1], phased=True), Call(alleles=[0, 0], phased=True), Call(alleles=[0, 1], phased=True), Call(alleles=[1, 0], phased=True), Call",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12588#issuecomment-1397330495:696,assert,assert,696,https://hail.is,https://github.com/hail-is/hail/pull/12588#issuecomment-1397330495,2,['assert'],['assert']
Testability,"CallStreams are tested directly in HardCallSetSuite, but HardCallSet only indirectly in the final test of LinearRegressionSuite. So I think I should add a more direct test within HardCallSetSuite off of a small vcf.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/210:16,test,tested,16,https://hail.is,https://github.com/hail-is/hail/pull/210,3,['test'],"['test', 'tested']"
Testability,"Calling `fb.result()` generates stalled execution, no warnings or errors raised. Should generate some error message, or potentially the result (memory address). cc @catoverdrive . Test case. ```scala; def testString() {; val rt = PString(); val input = ""hello""; val fb = FunctionBuilder.functionBuilder[Region, String, Long]; val srvb = new StagedRegionValueBuilder(fb, rt). fb.emit(; Code(; srvb.start(),; srvb.addString(fb.getArg[String](2)),; srvb.end(); ); ). val region = Region(); val rv = RegionValue(region). val res1 = fb.result()()(region, input); println(""Past res1""). val res2 = fb.result()()(region, input); // never reached; println(""Past res2""); }; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7384:180,Test,Test,180,https://hail.is,https://github.com/hail-is/hail/issues/7384,2,"['Test', 'test']","['Test', 'testString']"
Testability,"Can I ask you to add the same scan test here for rows and cols? This will mostly help protect against us trying to introduce an optimization that inadvertently breaks scans, which we've done in the past for e.g. filter intervals.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7394#issuecomment-547637893:35,test,test,35,https://hail.is,https://github.com/hail-is/hail/pull/7394#issuecomment-547637893,1,['test'],['test']
Testability,Can I close this and create an asana task to add a BOM test?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6342#issuecomment-658296305:55,test,test,55,https://hail.is,https://github.com/hail-is/hail/issues/6342#issuecomment-658296305,1,['test'],['test']
Testability,Can I close this if the other PR is passing tests?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12263#issuecomment-1267520808:44,test,tests,44,https://hail.is,https://github.com/hail-is/hail/pull/12263#issuecomment-1267520808,1,['test'],['tests']
Testability,"Can approve this now if you want, but really we should have a test that we respect Spark confs being passed in at least.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11691#issuecomment-1080623876:62,test,test,62,https://hail.is,https://github.com/hail-is/hail/pull/11691#issuecomment-1080623876,1,['test'],['test']
Testability,"Can confirm that at least locally, the environment variable caused a table to be written with packed integers, and the tests passed with the flag on (I assume).",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7821#issuecomment-595913767:119,test,tests,119,https://hail.is,https://github.com/hail-is/hail/pull/7821#issuecomment-595913767,1,['test'],['tests']
Testability,"Can confirm that this ""fixes"" it, since current master results in:; ```; Hail version: devel-f4fc571b4570; Error summary: AssertionError: assertion failed: type mismatch:; name: global; actual: +Struct{}; expect: Struct{}; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4128#issuecomment-412775955:122,Assert,AssertionError,122,https://hail.is,https://github.com/hail-is/hail/pull/4128#issuecomment-412775955,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,"Can we add a test something like:; ```; mt = hl.utils.range_matrix_table(1,1); mt = mt.annotate_entries(x = 1); mt = mt.key_cols_by(col_idx = mt.col_idx + 10); assert str(mt.show()) == '''+---------+-------+; | row_idx | 10.x |; +---------+-------+; | int32 | int32 |; +---------+-------+; | 0 | 1 |; +---------+-------+; '''; ```; ?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9123#issuecomment-662709112:13,test,test,13,https://hail.is,https://github.com/hail-is/hail/pull/9123#issuecomment-662709112,2,"['assert', 'test']","['assert', 'test']"
Testability,Can we add a test that triggers it? I think Nick's example from Zulip should do it.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9631#issuecomment-714582672:13,test,test,13,https://hail.is,https://github.com/hail-is/hail/pull/9631#issuecomment-714582672,1,['test'],['test']
Testability,"Can we follow up with a test that creates one job which echos its IP and port and then listens, then the test will try to curl the public IP and port?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11250#issuecomment-1021554196:24,test,test,24,https://hail.is,https://github.com/hail-is/hail/pull/11250#issuecomment-1021554196,2,['test'],['test']
Testability,Can we have a test that catches it?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5033#issuecomment-449469191:14,test,test,14,https://hail.is,https://github.com/hail-is/hail/pull/5033#issuecomment-449469191,1,['test'],['test']
Testability,Can you add a test that drops rsid and lid fields? See message above.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3779#issuecomment-398382290:14,test,test,14,https://hail.is,https://github.com/hail-is/hail/pull/3779#issuecomment-398382290,1,['test'],['test']
Testability,Can you add the method wrapping and run benchmarks?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10510#issuecomment-867194564:40,benchmark,benchmarks,40,https://hail.is,https://github.com/hail-is/hail/pull/10510#issuecomment-867194564,1,['benchmark'],['benchmarks']
Testability,Can you also test this? As far as I know you're the only one who knows how.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3122:13,test,test,13,https://hail.is,https://github.com/hail-is/hail/pull/3122,1,['test'],['test']
Testability,Can you benchmark this on profile225?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3503#issuecomment-386722408:8,benchmark,benchmark,8,https://hail.is,https://github.com/hail-is/hail/pull/3503#issuecomment-386722408,1,['benchmark'],['benchmark']
Testability,Can you benchmark?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11060#issuecomment-967201497:8,benchmark,benchmark,8,https://hail.is,https://github.com/hail-is/hail/pull/11060#issuecomment-967201497,1,['benchmark'],['benchmark']
Testability,Can you confirm there are already existing tests for each of the code paths used in this code?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13253#issuecomment-1640372916:43,test,tests,43,https://hail.is,https://github.com/hail-is/hail/pull/13253#issuecomment-1640372916,1,['test'],['tests']
Testability,"Can you describe the issue with TContainer nodes, and possibly create a test with an example that makes sure we streamify it properly?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8063#issuecomment-586537288:72,test,test,72,https://hail.is,https://github.com/hail-is/hail/pull/8063#issuecomment-586537288,1,['test'],['test']
Testability,"Can you double check we don't need to explicitly tell nginx to use more than 1 core? I'm looking here:. https://www.nginx.com/blog/thread-pools-boost-performance-9x/#Configuring-Thread-Pools; https://www.nginx.com/blog/thread-pools-boost-performance-9x/#Benchmarking. Otherwise, I think this change is fine, although we do already have a minimum of two copies of internal-gateway at any time. Is this change better than increasing the number of copies of internal-gateway? I assume that the response time to increases in load will be faster with your proposed change.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11876#issuecomment-1145004769:254,Benchmark,Benchmarking,254,https://hail.is,https://github.com/hail-is/hail/pull/11876#issuecomment-1145004769,1,['Benchmark'],['Benchmarking']
Testability,Can you give an example or a test case you think will fail?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2060#issuecomment-322262037:29,test,test,29,https://hail.is,https://github.com/hail-is/hail/pull/2060#issuecomment-322262037,1,['test'],['test']
Testability,Can you include a failing test?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1207#issuecomment-268570534:26,test,test,26,https://hail.is,https://github.com/hail-is/hail/pull/1207#issuecomment-268570534,1,['test'],['test']
Testability,Can you make the same change to benchmark/Makefile?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13957#issuecomment-1789596118:32,benchmark,benchmark,32,https://hail.is,https://github.com/hail-is/hail/pull/13957#issuecomment-1789596118,1,['benchmark'],['benchmark']
Testability,Can you run benchmarks to make sure the code size doesn't cause any corresponding slowdown?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10905#issuecomment-941238170:12,benchmark,benchmarks,12,https://hail.is,https://github.com/hail-is/hail/pull/10905#issuecomment-941238170,1,['benchmark'],['benchmarks']
Testability,Can you share the latest benchmarks (even if just restricted to the previously slow ones)?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12981#issuecomment-1569142143:25,benchmark,benchmarks,25,https://hail.is,https://github.com/hail-is/hail/pull/12981#issuecomment-1569142143,1,['benchmark'],['benchmarks']
Testability,"Can you take a look at the new structure and see if it's better? If so, then I'll test everything again making sure there's no errors in the logs.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10920#issuecomment-949956416:82,test,test,82,https://hail.is,https://github.com/hail-is/hail/pull/10920#issuecomment-949956416,2,"['log', 'test']","['logs', 'test']"
Testability,"Can you take another look now?. I added two new fields to the jobs table to help with indexing and order bys. This should make the queries simpler and allow us to revert back to the old scheduler that Cotton wrote that was optimitzed. The regions_bits_rep is just a 0/1 for each region. So [us-east1, us-central1] could be ""1100000"". I also realized that I could aggregate the ready cores per user and then order them after unioning each user. I think this will perform better. From small tests, the autoscaler query seemed much better, but I'll want to do one last load test once you're okay with this approach.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12221#issuecomment-1274632733:489,test,tests,489,https://hail.is,https://github.com/hail-is/hail/pull/12221#issuecomment-1274632733,2,['test'],"['test', 'tests']"
Testability,"Can you take another look, Cotton? This PR:; - sets up the conf as we did in Main (fixes the issues Konrad has had in the last days); - sets up logging properly; - handles exceptions correctly. All new methods that call into scala VDS operations need to wrap in try/except",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1085#issuecomment-261416007:144,log,logging,144,https://hail.is,https://github.com/hail-is/hail/pull/1085#issuecomment-261416007,1,['log'],['logging']
Testability,Can you take another look? I'm getting test errors in other PRs that I hope this PR fixes.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10696#issuecomment-887830765:39,test,test,39,https://hail.is,https://github.com/hail-is/hail/pull/10696#issuecomment-887830765,1,['test'],['test']
Testability,"Can you test how much time this adds to `test_pipeline`? The original problem should be fixed now that this would have caught (spec in database too big). I'm a little worried about every ci build adding 500 spec, status, and log files, but those are going into a 1 day bucket now and it's probably not very expensive for the API calls. Maybe this should be part of a separate batch benchmark suite that's run before major changes?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7864#issuecomment-580346915:8,test,test,8,https://hail.is,https://github.com/hail-is/hail/pull/7864#issuecomment-580346915,3,"['benchmark', 'log', 'test']","['benchmark', 'log', 'test']"
Testability,"Can't fail the assertion if it's not there to check. We still need the other parts of this change, because otherwise, we were reading too much.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9304#issuecomment-677864463:15,assert,assertion,15,https://hail.is,https://github.com/hail-is/hail/pull/9304#issuecomment-677864463,1,['assert'],['assertion']
Testability,"Can't really test this easily, unfortunately. CHANGELOG: Fix integer overflow error when reading files >2G with `hl.import_plink`",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8948:13,test,test,13,https://hail.is,https://github.com/hail-is/hail/pull/8948,1,['test'],['test']
Testability,Can't see why the tests are failing :( Perhaps the CI app needs to be redeployed manually first.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10107#issuecomment-797361165:18,test,tests,18,https://hail.is,https://github.com/hail-is/hail/pull/10107#issuecomment-797361165,1,['test'],['tests']
Testability,Caused by: java.lang.AssertionError: assertion failed; 	at scala.Predef$.assert(Predef.scala:156); 	at is.hail.variant.GenotypeBuilder.write(Genotype.scala:1269); 	at is.hail.variant.GenotypeStreamBuilder.$plus$eq(GenotypeStream.scala:156); 	at is.hail.variant.GenotypeStreamBuilder.$plus$eq(GenotypeStream.scala:148); 	at scala.collection.generic.Growable$$anonfun$$plus$plus$eq$1.apply(Growable.scala:59); 	at scala.collection.generic.Growable$$anonfun$$plus$plus$eq$1.apply(Growable.scala:59); 	at scala.collection.Iterator$class.foreach(Iterator.scala:893); 	at is.hail.utils.richUtils.RichIterable$$anon$3$$anon$9.foreach(RichIterable.scala:38),MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2004#issuecomment-318079424:21,Assert,AssertionError,21,https://hail.is,https://github.com/hail-is/hail/pull/2004#issuecomment-318079424,3,"['Assert', 'assert']","['AssertionError', 'assert', 'assertion']"
Testability,"Caveats:; * the copy-to-GS at the end is crashing without a good error message,; but probably permissions, even though I've given my service account; access to that bucket.; * this runs all benchmarks in replicate. We should split them up; in a randomized (deterministic?) way so that the wall time is; shorter.; * needs to dump into a database instead of json files on GS.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6908:190,benchmark,benchmarks,190,https://hail.is,https://github.com/hail-is/hail/pull/6908,1,['benchmark'],['benchmarks']
Testability,Change batch dependency structure of build.py to free up test resources,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6673:57,test,test,57,https://hail.is,https://github.com/hail-is/hail/issues/6673,1,['test'],['test']
Testability,Change log for release 0.2.29. Currently I have the date set for tomorrow since i didn't know if it would make it in today. Could always change it.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7738:7,log,log,7,https://hail.is,https://github.com/hail-is/hail/pull/7738,1,['log'],['log']
Testability,Changed list of tests in hail/build.gradle testCppCodegen,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4326#issuecomment-422401985:16,test,tests,16,https://hail.is,https://github.com/hail-is/hail/pull/4326#issuecomment-422401985,2,['test'],"['testCppCodegen', 'tests']"
Testability,"Changes look good, thanks for that! We need to add automated tests if we're going to keep this functionality.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3122#issuecomment-372146159:61,test,tests,61,https://hail.is,https://github.com/hail-is/hail/pull/3122#issuecomment-372146159,1,['test'],['tests']
Testability,"Changes since last review:; - Method now takes expressions for call and (optionally) scores.; - Block matrix and table of scores annotated and collected from source.cols() sent to Python, processed using int indices, column names restored on python side (thanks @tpoterba); - Fixed bug that silently dropped `n_samples / block_size` proportion of pairs, Python test checks it; - Extended Python tests to compare k and scores paths, test counts, min_kinship, maf, block_size; - Tuned tolerances on comparison with R from Python; - Extended to general column key, removing unique key check, noted in docs; - MEMORY_AND_DISK caching as default (thanks @konradjk) on Scala side; - The diagonal fix meant phi is computed with parallelism up to the number of diagonal blocks, rather than parallelism 1. But that's still likely a bottleneck as phi requires computing and point-wise dividing two big gram matrices. I now write phi to disk and read it back in, which squares the parallelism up to the number of blocks in phi. I think this should also improve the stability of the many downstream calculations derived from phi, esp. if pre-emptibles are used. No longer cacheing phi, but I left caching on the other matrices. @konradjk let us know how this version compares next time you run it.; - Noted in FIXME room for further improvement when fusing blocks: `replace join with zipPartitions, throw away lower triangular blocks sooner, avoid the nulls`; - Updated docs accordingly; - Deleted a bunch of code in PCRelate and PCRelateSuite",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3211#issuecomment-376725104:361,test,test,361,https://hail.is,https://github.com/hail-is/hail/pull/3211#issuecomment-376725104,3,['test'],"['test', 'tests']"
Testability,"Changes the first argument that Emit expects to be a SparkFunctionContext, which currently holds a region and a SparkEnv (currently a stub; will be fleshed out as we start writing code to call back into Spark.) This should let us be more flexible in our ability to pass other necessary (non-IR-value) inputs, such as a hadoop configuration, to the function without relying on function argument ordering and accounting. builds on #5457.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5459:134,stub,stub,134,https://hail.is,https://github.com/hail-is/hail/pull/5459,1,['stub'],['stub']
Testability,"Changes to make sure that only the annotation datasets are visible on the docs page, now that the `datasets.json` config file contains all available datasets. Overview:. - In `datasets.json`, moved ""key_properties"" inside an ""annotation_db"" field, like `""annotation_db"": {""key_properties"": []}`, so that only the datasets with the ""annotation_db"" key are shown in the annotation DB docs page. Removed ""key_properties"" from non-annotation datasets. - Minor reformatting changes to docs page, added a reference genome column to the HTML table. - Updated deploy script to reflect the filename change from `annotation_db.json` to `datasets.json`. - Modified checks for keys in dicts from `assert key in doc, doc` to `assert key in doc` in `DatasetVersion.from_json()` and `Dataset.from_name_and_json()`. Since the `doc` that is passed to these methods from the checked in JSON file is just a dict like `doc = {""annotation_db"": {""key_properties"": [...]}, ""description"": ..., ""url"": ..., ""versions"": [...]}` this seems to work fine. Let me know if `key in doc, doc` form was used for other reasons I've overlooked.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9546:685,assert,assert,685,https://hail.is,https://github.com/hail-is/hail/pull/9546,2,['assert'],['assert']
Testability,"Changes:. - Rename Pipeline class to Batch; - Rename Task class to Job; - Rename pipeline module to batch; - Update getting started page to reflect module is at hailtop.batch; - Update website location (build.yaml, Makefile, web_common); - Update conf.py to use batch as the docs name; - Fix all examples in docs to use batch, job; - Go through docs text and change references to pipelines to batches and tasks to jobs; - Move pipeline/test/test_pipeline.py to hail/python/test/hailtop/batch/; - Update tests to use batch, job; - Update benchmark suite; - Rename BatchBackend to ServiceBackend; - Consolidate test_pipeline into test_hailtop_batch; - Update Hail makefile to build batch docs rather than pipeline docs. I did *NOT* change the navbar to point to the batch docs since it won't exist until the next release.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8453#issuecomment-610595606:436,test,test,436,https://hail.is,https://github.com/hail-is/hail/pull/8453#issuecomment-610595606,4,"['benchmark', 'test']","['benchmark', 'test', 'tests']"
Testability,Changes:. -Added RichIndexedRowMatrix with new method .toBlockMatrixDense(); -Added tests for new method ; -Changed ComputeRRM to use new method,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1595:84,test,tests,84,https://hail.is,https://github.com/hail-is/hail/pull/1595,1,['test'],['tests']
Testability,"Changes:; - Remove the per-job callback. Nobody is relying on this.; - The batch callback should send batch metadata, not job metadata. This is already what the CI is expecting (I think the only callback user).; - Switch to aiohttp for the callback, not threading/requests. @tpoterba this will speed up merges in the CI by a few minutes. Now the callback is ignored and its the periodic poll loop that notices the finished tests.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7331:423,test,tests,423,https://hail.is,https://github.com/hail-is/hail/pull/7331,1,['test'],['tests']
Testability,"Changes:; - When looking up log in gs, return None if we get 404/NotFound.; - Make sure the number of created jobs matches expected. This handles the case where job creation fails but /close still gets called.; - make bounded gather take awaitables, raise exceptions by default",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7436:28,log,log,28,https://hail.is,https://github.com/hail-is/hail/pull/7436,1,['log'],['log']
Testability,"Changes:; - add cpu/memory field to workshops; - simplified workshop login logic a bit: workshops_session is just workshop name, token and guest user id, userdata for workshops is id and workshop, workshop auth decorator verifies workshop is valid to before creating userdata,; - make sure to check active everywhere,",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7157:69,log,login,69,https://hail.is,https://github.com/hail-is/hail/pull/7157,2,['log'],"['logic', 'login']"
Testability,"Changes:; - added monitoring setup (Prometheus, Grafana) to monitoring namespace; - I'm considering monitoring part of ""infrastructure"", no automated tests, gateway and router-resolver changes already deployed; - authenticated_users_only always passes userdata as second argument; - added authenticated_developers_only decorator to hailjwt, no userdata; - gateway forwards to internal namespaces: internal.hail.is/namespace proxies to router.namespace, so in general you'll go to internal.hail.is/namespace/service/the/real/url; - proxy only if namespace has router service and authorized developer; - add router to monitoring namespace that proxies for prometheus and grafana; - restrict ci to authorized developers. monitoring/grafana-cluster.json is an export of an initial Grafana monitoring dashboard that I constructed through the UI. If you're logged in as a developer, you can see Grafana at internal.hail.is/monitoring/grafana. The admin password is in the usual place.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6242:150,test,tests,150,https://hail.is,https://github.com/hail-is/hail/pull/6242,2,"['log', 'test']","['logged', 'tests']"
Testability,"Changes:; - batch2: send job_spec to worker instead of kubernetes pod spec; - batch2: create containers on worker from job_spec; - move job_spec_to_k8s_pod_spec to batch, only used there now; - simplified volume handling somewhat: Volume now means docker volume, cspec has list of volume mounts. As usual, will probably need a bit of testing.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7332:334,test,testing,334,https://hail.is,https://github.com/hail-is/hail/pull/7332,1,['test'],['testing']
Testability,"Changes:; - correct the interpretation of less and greater.; - improve the formatting and verbiage of the docs,; - expand upon the statistical definition alluded to previously in only the less; case,; - add python tests which would have caught this error,; - add python tests which test against `scipy`,; - deprecate the use of `'two.sided'`, an R-ism, document the preferred use of; `'two-sided'`, a Python-ism, and; - fix an error message in Scala that used yet another naming of the two sided test.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8420:214,test,tests,214,https://hail.is,https://github.com/hail-is/hail/pull/8420,4,['test'],"['test', 'tests']"
Testability,"Changes:; - create a custom job spec schema for what a job means to us; - hand-rolled validator; - use in bath_client, /jobs/create endpoints in batch, batch2; - slightly changed create_job interface around volumes, docker socket and secrets, update usage; - wrote route to convert this to a k8s pod spec, use when actually creating jobs. The secret has a namespace, but it is ignored by the servers. Eventually, batch should be able to pull secrets from wherever, but needs to enforce permissions on who can use what secrets. This was a long-standing issue that I think now has a clearer path. We can get rid of the mount docker socket option by making the worker support a build (rather than run) task. The validator should really go in the server code, but it needs to be shared between batch and batch2 for now. Plan is to push this through batch2 to remove the dependence on the k8s pod serialization. When that's done, the job to pod spec routine can go into batch (and go away when CI uses batch2). Will be interested to benchmark my validator vs. the previous cerberus + k8s validation/serialization.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7313:1028,benchmark,benchmark,1028,https://hail.is,https://github.com/hail-is/hail/pull/7313,1,['benchmark'],['benchmark']
Testability,"Changes:; - four containers: setup container, main container, cleanup container, keep alive container; - cleanup container waits for an HTTP message from batch before cleaning up; - keep alive container stays alive until batch sends it an HTTP message (this prevents terminated pod GC); - split `mark_complete` into three simpler methods; - extract several parts of former `mark_complete` into named helper methods; - `LogStore.results_filename` is gone, if the logs are present, the pod has already been run",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6746:419,Log,LogStore,419,https://hail.is,https://github.com/hail-is/hail/pull/6746,2,"['Log', 'log']","['LogStore', 'logs']"
Testability,Changes:; - move LoggingTimer to hailtop.utils; - add timer_description option to fetchall functions in gear.database; - add descriptions for all scheduler queries. We have to call the timer inside fetchall because it is an async generator. The other database functions can be timed by the client code with LoggingTimer directly.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7953:17,Log,LoggingTimer,17,https://hail.is,https://github.com/hail-is/hail/pull/7953,2,['Log'],['LoggingTimer']
Testability,"Changes; ---; - introduce consistent naming of the three types of hail versions (see; build.gradle comment). - add `hail_pip_version` to `_generated_version_info.py` which is used by; `setup.py`. - add `hail/python/deploy.sh` which should not be called directly but handles; generated PYPI compatible packages and uploading to PYPI. - `generate-build-info.sh` is now the *only* authoritative source on hail; versioning (it generates *exactly* two files, one for JARs and one for the; python library). - fix: actually activate the anonymous conda env in `hail-ci-build.sh`'s ; pip test. Janitorial; ---; - ignore python/hail.egg-info. - sort lines in hail/.gitignore. - add `hail/python/hail/docs/__init__.py` so that we can use relative imports; in `conf.py`. - remove commented out code in makeDocs.sh. - makeDocs.sh now has `set -x`. Notes; ---. You can test deployment locally with:. ```; HAIL_TWINE_CREDS_FOLDER=/path/to/twine/creds ./gradlew deploy -D hail.pip-version-suffix=.devN; ```; where `.devN` is some currently unused dev version suffix. You can check these by running `python hail/list_pypi_versions.py hail`. These dev versions are not visible to end users.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4812:580,test,test,580,https://hail.is,https://github.com/hail-is/hail/pull/4812,2,['test'],['test']
Testability,ChannelInboundHandler.java:105); 	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:357); 	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:343); 	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:336); 	io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102); 	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:357); 	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:343); 	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:336); 	io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:293); 	io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:267); 	; 	at org.apache.spark.SparkContext.assertNotStopped(SparkContext.scala:100); 	at org.apache.spark.SparkContext.cancelAllJobs(SparkContext.scala:2209); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at sparklyr.Invoke.invoke(invoke.scala:139); 	at sparklyr.StreamHandler.handleMethodCall(stream.scala:123); 	at sparklyr.StreamHandler.read(stream.scala:66); 	at sparklyr.BackendHandler.channelRead0(handler.scala:51); 	at sparklyr.BackendHandler.channelRead0(handler.scala:4); 	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105); 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:357); 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:343); 	at io.n,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4513:10205,assert,assertNotStopped,10205,https://hail.is,https://github.com/hail-is/hail/issues/4513,1,['assert'],['assertNotStopped']
Testability,"Checked https://internal.hail.is/cseed/notebook2/notebook. Crash on trying to create a notebook. Minor styling fixes as well (Hail logo is tiny), can be delayed for future PR.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7064#issuecomment-532038340:131,log,logo,131,https://hail.is,https://github.com/hail-is/hail/pull/7064#issuecomment-532038340,1,['log'],['logo']
Testability,Checked that PartitioningSuite doesn't get an out of memory error on bgen branch and ExprSuite.testImpexes takes less than a second now.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1748#issuecomment-298948635:95,test,testImpexes,95,https://hail.is,https://github.com/hail-is/hail/pull/1748#issuecomment-298948635,1,['test'],['testImpexes']
Testability,"Checkpointing the VCF made it, if anything, slower.; ```; 254.81s call hail/methods/relatedness/test_pc_relate.py::test_pc_relate_against_R_truth; 189.52s call hail/methods/test_pca.py::test_spectra_2[triplet0]; 95.37s call hail/vds/test_vds.py::test_truncate_reference_blocks; 92.80s call hail/methods/test_qc.py::Tests::test_vep_grch38_against_dataproc; 86.83s call hail/backend/test_service_backend.py::test_tiny_driver_has_tiny_memory; 68.86s call hail/matrixtable/test_matrix_table.py::test_read_write_balding_nichols_model; ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13076#issuecomment-1564883408:315,Test,Tests,315,https://hail.is,https://github.com/hail-is/hail/pull/13076#issuecomment-1564883408,1,['Test'],['Tests']
Testability,"Chris, the main thing that needs reviewing is the implementation of `sizeToStoreInBytes`. The `EmitStreamDistribute` stuff is just adding `sizeInBytes` to every write out, and the `LowerDistributedSort` stuff is mostly logic to track sizes and make sure that if a single row is bigger than our size cutoff, we don't get stuck in an infinite loop",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11381#issuecomment-1054617159:219,log,logic,219,https://hail.is,https://github.com/hail-is/hail/pull/11381#issuecomment-1054617159,1,['log'],['logic']
Testability,"Christina reports https://hail.zulipchat.com/#narrow/stream/123010-Hail-0.2E2.20support/topic/initialization.20action.20failed.20in.20starting.20cluster:; ```; ERROR: (gcloud.dataproc.jobs.submit.pyspark) Job [d0a8142009bf49a1a51f5276576aeddb] failed with error:; Google Cloud Dataproc Agent reports job failure. If logs are available, they can be found in 'gs://dataproc-c3e3c3c1-4a54-41e4-aa06-83d5d2ce80ec-us/google-cloud-dataproc-metainfo/c174dc73-2817-4ec1-8c2d-ae4e0c4f91ae/jobs/d0a8142009bf49a1a51f5276576aeddb/driveroutput'.; Traceback (most recent call last):; File ""/Users/cchen/anaconda/envs/hail-env/bin/hailctl"", line 10, in <module>; sys.exit(main()); File ""/Users/cchen/anaconda/envs/hail-env/lib/python3.7/site-packages/hailctl/__main__.py"", line 90, in main; module(args); File ""/Users/cchen/anaconda/envs/hail-env/lib/python3.7/site-packages/hailctl/dataproc/cli.py"", line 99, in main; jmp[args.module].main(args, pass_through_args); File ""/Users/cchen/anaconda/envs/hail-env/lib/python3.7/site-packages/hailctl/dataproc/submit.py"", line 72, in main; check_call(cmd); File ""/Users/cchen/anaconda/envs/hail-env/lib/python3.7/subprocess.py"", line 347, in check_call; raise CalledProcessError(retcode, cmd); subprocess.CalledProcessError: Command '['gcloud', 'dataproc', 'jobs', 'submit', 'pyspark', 'ukbb_hdpca.py', '--cluster=chen', '--files=', '--py-files=/var/folders/6h/ll2dv8t15zs9pzf4g6kjb2rrt2fc9q/T/pyscripts_2740r0cj.zip', '--properties=']' returned non-zero exit status 1.; ```; The file does not exist but there are files with the same prefix but a `.000000001` suffix or similar. Grace reports (a possibly unrelated issue) https://hail.zulipchat.com/#narrow/stream/123010-Hail-0.2E2.20support/topic/Cryptic.20array.20concordance.20error:; ```; ERROR: (gcloud.dataproc.jobs.submit.pyspark) Job [873db5659acd43f7b539dcb17182959d] entered state [ERROR] while waiting for [DONE].; Traceback (most recent call last):; File ""/miniconda3/bin/hailctl"", line 10, in <module>; sys.ex",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6565:316,log,logs,316,https://hail.is,https://github.com/hail-is/hail/issues/6565,1,['log'],['logs']
Testability,Citation for log4j1 programmatic configuration breaking log4j2: https://logging.apache.org/log4j/2.x/manual/migration.html#limitations-of-the-log4j-1-x-bridge,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12941#issuecomment-1524328047:72,log,logging,72,https://hail.is,https://github.com/hail-is/hail/pull/12941#issuecomment-1524328047,1,['log'],['logging']
Testability,Class(ClassLoader.java:756); 	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142); 	at java.net.URLClassLoader.defineClass(URLClassLoader.java:468); 	at java.net.URLClassLoader.access$100(URLClassLoader.java:74); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:369); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:363); 	at java.security.AccessController.doPrivileged(Native Method); 	at java.net.URLClassLoader.findClass(URLClassLoader.java:362); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:418); 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:351); 	at org.testng.internal.ClassHelper.forName(ClassHelper.java:94); 	at org.testng.xml.XmlClass.loadClass(XmlClass.java:78); 	at org.testng.xml.XmlClass.getSupportClass(XmlClass.java:89); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:25); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:18); 	at org.testng.TestRunner.initMethods(TestRunner.java:408); 	at org.testng.TestRunner.init(TestRunner.java:235); 	at org.testng.TestRunner.init(TestRunner.java:205); 	at org.testng.TestRunner.<init>(TestRunner.java:153); 	at org.testng.SuiteRunner$DefaultTestRunnerFactory.newTestRunner(SuiteRunner.java:536); 	at org.testng.SuiteRunner.init(SuiteRunner.java:159); 	at org.testng.SuiteRunner.<init>(SuiteRunner.java:113); 	at org.testng.TestNG.createSuiteRunner(TestNG.java:1299); 	at org.testng.TestNG.createSuiteRunners(TestNG.java:1286); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); Caused by: java.lang.ClassNotFoundException: is.hail.relocated.org.apache.commons.math3.distribution.AbstractIntegerDistribution; 	at java.net.URLClassLoader.findClass(URLClassLoader.java:382); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:418); 	at sun.misc.Lau,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460:1571,test,testng,1571,https://hail.is,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460,1,['test'],['testng']
Testability,ClassLoader.defineClass(URLClassLoader.java:468); 	at java.net.URLClassLoader.access$100(URLClassLoader.java:74); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:369); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:363); 	at java.security.AccessController.doPrivileged(Native Method); 	at java.net.URLClassLoader.findClass(URLClassLoader.java:362); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:418); 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:351); 	at org.testng.internal.ClassHelper.forName(ClassHelper.java:94); 	at org.testng.xml.XmlClass.loadClass(XmlClass.java:78); 	at org.testng.xml.XmlClass.getSupportClass(XmlClass.java:89); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:25); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:18); 	at org.testng.TestRunner.initMethods(TestRunner.java:408); 	at org.testng.TestRunner.init(TestRunner.java:235); 	at org.testng.TestRunner.init(TestRunner.java:205); 	at org.testng.TestRunner.<init>(TestRunner.java:153); 	at org.testng.SuiteRunner$DefaultTestRunnerFactory.newTestRunner(SuiteRunner.java:536); 	at org.testng.SuiteRunner.init(SuiteRunner.java:159); 	at org.testng.SuiteRunner.<init>(SuiteRunner.java:113); 	at org.testng.TestNG.createSuiteRunner(TestNG.java:1299); 	at org.testng.TestNG.createSuiteRunners(TestNG.java:1286); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); Caused by: java.lang.ClassNotFoundException: is.hail.relocated.org.apache.commons.math3.distribution.AbstractIntegerDistribution; 	at java.net.URLClassLoader.findClass(URLClassLoader.java:382); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:418); 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:351); 	... 30 more,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460:1691,Test,TestRunner,1691,https://hail.is,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460,1,['Test'],['TestRunner']
Testability,ClassLoader.java:142); 	at java.net.URLClassLoader.defineClass(URLClassLoader.java:468); 	at java.net.URLClassLoader.access$100(URLClassLoader.java:74); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:369); 	at java.net.URLClassLoader$1.run(URLClassLoader.java:363); 	at java.security.AccessController.doPrivileged(Native Method); 	at java.net.URLClassLoader.findClass(URLClassLoader.java:362); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:418); 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:351); 	at org.testng.internal.ClassHelper.forName(ClassHelper.java:94); 	at org.testng.xml.XmlClass.loadClass(XmlClass.java:78); 	at org.testng.xml.XmlClass.getSupportClass(XmlClass.java:89); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:25); 	at org.testng.internal.ClassInfoMap.<init>(ClassInfoMap.java:18); 	at org.testng.TestRunner.initMethods(TestRunner.java:408); 	at org.testng.TestRunner.init(TestRunner.java:235); 	at org.testng.TestRunner.init(TestRunner.java:205); 	at org.testng.TestRunner.<init>(TestRunner.java:153); 	at org.testng.SuiteRunner$DefaultTestRunnerFactory.newTestRunner(SuiteRunner.java:536); 	at org.testng.SuiteRunner.init(SuiteRunner.java:159); 	at org.testng.SuiteRunner.<init>(SuiteRunner.java:113); 	at org.testng.TestNG.createSuiteRunner(TestNG.java:1299); 	at org.testng.TestNG.createSuiteRunners(TestNG.java:1286); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.TestNG.privateMain(TestNG.java:1364); 	at org.testng.TestNG.main(TestNG.java:1333); Caused by: java.lang.ClassNotFoundException: is.hail.relocated.org.apache.commons.math3.distribution.AbstractIntegerDistribution; 	at java.net.URLClassLoader.findClass(URLClassLoader.java:382); 	at java.lang.ClassLoader.loadClass(ClassLoader.java:418); 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352); 	at java.lang.ClassLoader.loadC,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460:1654,Test,TestRunner,1654,https://hail.is,https://github.com/hail-is/hail/pull/8700#issuecomment-624324460,1,['Test'],['TestRunner']
Testability,Cleanup logs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6850:8,log,logs,8,https://hail.is,https://github.com/hail-is/hail/pull/6850,1,['log'],['logs']
Testability,Close for now? Doesn't make sense to merge if it makes tests slower.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3450#issuecomment-385005092:55,test,tests,55,https://hail.is,https://github.com/hail-is/hail/pull/3450#issuecomment-385005092,1,['test'],['tests']
Testability,"Closes #4527; Closes #4761. This is a workaround to prevent issues with MatrixUnionRows when the; entries arrays are in different places in the rvRowType in each of the; children. Furthermore, it prevents issues if the entries array is; pruned and then re-added later in rebuild, where it will often be; inserted, likely by MatrixMapRows, at the end of the rvRowType. This; rearrangement caused the type equality assertion in Optimize to fail.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4891:413,assert,assertion,413,https://hail.is,https://github.com/hail-is/hail/pull/4891,1,['assert'],['assertion']
Testability,Closes #4922 . I don't really see the problem with having them in two separate test methods though.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7836:79,test,test,79,https://hail.is,https://github.com/hail-is/hail/pull/7836,1,['test'],['test']
Testability,Closes hail-is/hail-tasks#2. @danking Can you take a look at this before I start testing? I think the query/log4j.properties file still needs to be there to configure the logs that show up for the JVM and not the user's jobs.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11471:81,test,testing,81,https://hail.is,https://github.com/hail-is/hail/pull/11471,2,"['log', 'test']","['logs', 'testing']"
Testability,Closes https://github.com/hail-is/hail-tasks/issues/3. Stacked on #11396. I haven't tested this code at all.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11397:84,test,tested,84,https://hail.is,https://github.com/hail-is/hail/pull/11397,1,['test'],['tested']
Testability,Closes https://github.com/hail-is/hail-tasks/issues/7. I tested this in my namespace.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11567:57,test,tested,57,https://hail.is,https://github.com/hail-is/hail/pull/11567,1,['test'],['tested']
Testability,"Closes https://github.com/hail-is/hail/issues/14485. Tested that this works by deploying the branch to my dev namespace and pointing my dev config at it:. ```bash; hailctl dev deploy -b iris-garden/hail:batch/deprecated-apis -s deploy_batch,add_developers; hailctl dev config set default_namespace irademac; ```. And then running the following:. ```python; from hailtop.batch import ServiceBackend; batch_client = await ServiceBackend(billing_project='test', remote_tmpdir='gs://irademac/test/')._batch_client(); # one of the deprecated endpoints; await batch_client._get(""/api/v1alpha/batches/402/jobs/1/log""); ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14621:53,Test,Tested,53,https://hail.is,https://github.com/hail-is/hail/pull/14621,4,"['Test', 'log', 'test']","['Tested', 'log', 'test']"
Testability,Closing since it makes linreg benchmark much slower and I don't understand why yet.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10465#issuecomment-834383154:30,benchmark,benchmark,30,https://hail.is,https://github.com/hail-is/hail/pull/10465#issuecomment-834383154,1,['benchmark'],['benchmark']
Testability,Closing this so we don't have to keep re-testing. @alexb-3 resubmit after you're reviewed it and you are ready to get it in to the master.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/593#issuecomment-248638035:41,test,testing,41,https://hail.is,https://github.com/hail-is/hail/pull/593#issuecomment-248638035,1,['test'],['testing']
Testability,Closing this while I dev deploy test it.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7910#issuecomment-576348264:32,test,test,32,https://hail.is,https://github.com/hail-is/hail/pull/7910#issuecomment-576348264,1,['test'],['test']
Testability,Closing while I address test failure.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1548#issuecomment-286622901:24,test,test,24,https://hail.is,https://github.com/hail-is/hail/pull/1548#issuecomment-286622901,1,['test'],['test']
Testability,Closing while I resolve test failures and do some clean up,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2254#issuecomment-332244947:24,test,test,24,https://hail.is,https://github.com/hail-is/hail/pull/2254#issuecomment-332244947,1,['test'],['test']
Testability,Closing while I test out changes.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10656#issuecomment-885229140:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/10656#issuecomment-885229140,1,['test'],['test']
Testability,Closing while we set up testing.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2127#issuecomment-325806107:24,test,testing,24,https://hail.is,https://github.com/hail-is/hail/pull/2127#issuecomment-325806107,1,['test'],['testing']
Testability,"Cloud benchmark: with 20k-gene-annotated 1k genomes hardcall VDS (37.2 million variants, 2535 samples, 3 covariates), using 1000 partitions and 342 cores (24 workers, 16 cores each) on GCP, it takes about 60s to do linear burden test and output linregKT to TSV, and another 60s to output the sampleKT to TSV. ```; linreg_kt, sample_kt = (hc.read('gs://jbloom/ALL.1KG.qc.hardcalls.p1000.burden.vds'); .linreg_burden('gene',; 	 'va.geneSet',; 	 'gs.map(g => va.weight * g.gt).sum()',; 'sa.pheno',; ['sa.cov1', 'sa.cov2'])). linreg_kt.export('gs://jbloom/burden_linreg.tsv.gz'); sample_kt.export('gs://jbloom/burden_samples.tsv.gz'); ```",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1708#issuecomment-296402338:6,benchmark,benchmark,6,https://hail.is,https://github.com/hail-is/hail/pull/1708#issuecomment-296402338,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,Code looks good. It looks like there's something wrong with the gradle cpp test configuration.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4594#issuecomment-433123340:75,test,test,75,https://hail.is,https://github.com/hail-is/hail/pull/4594#issuecomment-433123340,1,['test'],['test']
Testability,"Combined with vdsFromMatrix, this allows Alex to generate a vds and then vcf with a proscribed population structure as needed for methods dev. Later we can move this to main and/or integrate into our generative testing framework.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1011:211,test,testing,211,https://hail.is,https://github.com/hail-is/hail/pull/1011,1,['test'],['testing']
Testability,Combining hl agg group_by tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7836:26,test,tests,26,https://hail.is,https://github.com/hail-is/hail/pull/7836,1,['test'],['tests']
Testability,Command: . hail-new read -i /user/aganna/CANCER.vep.vds \; renamesamples -i file:///humgen/atgu1/fs03/wip/aganna/HCSCORE/CANCER/key_old_new_names \; filtersamples --keep -c 'file:///humgen/atgu1/fs03/wip/aganna/HCSCORE/CANCER/samples_to_keep.sample_list' \; filtervariants --keep -c 'va.pass' \; filtergenotypes --remove -c '(g.isHet && ((g.ad[0] / g.dp) < 0.2 || (g.ad[0] / g.dp) > 0.8)) || g.gq < 20' \; variantqc \; filtervariants --keep -c 'va.qc.callRate > 0.80 && va.qc.MAC > 0' \; exportplink -o file:///humgen/atgu1/fs03/wip/aganna/HCSCORE/CANCER/CANCER \; count \; write -o /user/aganna/CANCER.vep.qced.vds. Attached log:. [hail.log.txt](https://github.com/broadinstitute/hail/files/228583/hail.log.txt),MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/325:626,log,log,626,https://hail.is,https://github.com/hail-is/hail/issues/325,3,['log'],['log']
Testability,"Command:. hail read -i /user/aganna/annotated_test22.vds \; filtervariants expr \; --keep -c 'v.contig == ""22""' \; annotatevariants expr -c 'va.andrea.URV = (va.qc.nNonRef == 1 && va.exac.info.AC.isEmpty)' \; annotatevariants expr -c 'va.andrea.URVEXAC = (va.qc.nNonRef == 1 && (va.exac.info.AC.isEmpty || va.exac.info.AC[1] < 3))' \; exportvariants -c 'v, va.andrea.URV ,va.andrea.URVEXAC, va.qc.nNonRef' -o file:///humgen/atgu1/fs03/wip/aganna/HCSCORE/test. Error:. [Stage 1:> (268 + 184) / 14326]Exception in thread ""main"" org.apache.spark.SparkException: Job aborted due to stage failure: Task 37 in stage 1.0 failed 30 times, most recent failure: Lost task 37.29 in stage 1.0 (TID 3338, dataflow02.broadinstitute.org): java.lang.IndexOutOfBoundsException: 1. [hail.log.txt](https://github.com/broadinstitute/hail/files/250349/hail.log.txt)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/367:454,test,test,454,https://hail.is,https://github.com/hail-is/hail/issues/367,3,"['log', 'test']","['log', 'test']"
Testability,"Command:. hail-new read -i /user/lfran/exac_all.split.vds \; filtersamples --remove -c ""file:///humgen/atgu1/fs03/wip/aganna/HCSCORE/CANCER/samples_to_keep.sample_list"" \; variantqc \; filtervariants --keep -c 'va.qc.MAC > 0' \; count \; filtersamples --keep -c 'false' \; write -o /user/aganna/exac_noCANCER.split.onlygeno.vep.NEWHAIL.vds. Error:. Exception in thread ""main"" java.lang.NoClassDefFoundError: org/broadinstitute/hail/methods/VCFReport$; at org.broadinstitute.hail.driver.Main$.runCommands(Main.scala:125); at org.broadinstitute.hail.driver.Main$.main(Main.scala:276); at org.broadinstitute.hail.driver.Main.main(Main.scala); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.apache.spark.deploy.SparkSubmit$.org$apache$spark$deploy$SparkSubmit$$runMain(SparkSubmit.scala:672); at org.apache.spark.deploy.SparkSubmit$.doRunMain$1(SparkSubmit.scala:180); at org.apache.spark.deploy.SparkSubmit$.submit(SparkSubmit.scala:205); at org.apache.spark.deploy.SparkSubmit$.main(SparkSubmit.scala:120); at org.apache.spark.deploy.SparkSubmit.main(SparkSubmit.scala); Caused by: java.lang.ClassNotFoundException: org.broadinstitute.hail.methods.VCFReport$; at java.net.URLClassLoader.findClass(URLClassLoader.java:381); at java.lang.ClassLoader.loadClass(ClassLoader.java:424); at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331); at java.lang.ClassLoader.loadClass(ClassLoader.java:357). Hail log attached. [hail.log.txt](https://github.com/broadinstitute/hail/files/225215/hail.log.txt)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/309:1657,log,log,1657,https://hail.is,https://github.com/hail-is/hail/issues/309,3,['log'],['log']
Testability,"Commandline:. ```; hail -l /xchip/cga_home/gtiao/Hail/hail.re-import.log importvcf $VCF \; filtervariants all \; count \; filtersamples list -i 'file:///xchip/cga_home/gtiao/37k/germline_cancer_joint_calling.restricted_samples.sample_list' --remove \; count \; exportsamples -c 's.id' -o file:///xchip/cga_home/gtiao/37k/Hail/samples_after_removing_restricted.txt; ```. Error message:. ```; hail: info: running: exportsamples -c s.id -o file:///xchip/cga_home/gtiao/37k/Hail/samples_after_removing_restricted.txt; hail: exportsamples: fatal: does not support multiallelics.; Run `splitmulti' first.; ```. It works if I insert ""splitmulti"" after the import command, but then I drop all variants, so this seems a very silly requirement.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/382:69,log,log,69,https://hail.is,https://github.com/hail-is/hail/issues/382,1,['log'],['log']
Testability,Commandline:. ```; hail-new -l /home/unix/gtiao/hail.rename.log \; read -i /user/gtiao/37k/germline_cancer_joint_calling.no_restricted.GQ20_AB.split.VEP.vds \; renamesamples -i file:///xchip/cga_home/gtiao/37k/Hail/germline_cancer_joint_calling.no_restricted.GQ20_AB.split.VEP.sample_id_map.txt \; write -o /user/gtiao/37k/germline_cancer_joint_calling.no_restricted.GQ20_AB.split.VEP.no_spaces.vds. ```. Error message:. ```; hail: info: running: read -i /user/gtiao/37k/germline_cancer_joint_calling.no_restricted.GQ20_AB.split.VEP.vds; [Stage 0:=============================> (1 + 1) / 2]hail: info: running: renamesamples -i file:///xchip/cga_home/gtiao/37k/Hail/germline_cancer_joint_calling.no_restricted.GQ20_AB.split.VEP.sample_id_map.txt; hail: renamesamples: caught exception: org.apache.hadoop.fs.ChecksumException: Checksum error: file:/xchip/cga_home/gtiao/37k/Hail/germline_cancer_joint_calling.no_restricted.GQ20_AB.split.VEP.sample_id_map.txt at 175616 exp: -1352655701 got: 441984571. ```,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/347:60,log,log,60,https://hail.is,https://github.com/hail-is/hail/issues/347,1,['log'],['log']
Testability,"Commented out the phased test -- this was meant to fail, and I didn't intend to fix that in this PR (it's hard, we need to change the Call representation...)",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11023#issuecomment-958005579:25,test,test,25,https://hail.is,https://github.com/hail-is/hail/pull/11023#issuecomment-958005579,1,['test'],['test']
Testability,"Comments addressed. You asked about scalars so I've rounded that out with support for any combination of scalar and block matrix, as well as unary + and -, testing in notebook along the way. I've marked the class with experimental.rst until I've stabilized the interface with robust testing of all operations in subsequent broadcasting PR. I fixed the process_joins bug as noted, but stopped there in this PR since just switching to select_entries will end up calling the expression machinery twice. The right solution requires simultaneous changes on the Scala side. I'll make a PR to check if `entry_expr` is a field, if not to use `select_entries` to make it one, and then change `MatrixTable.writeBlockMatrix` to take a field rather than an expression. Sound good?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3072#issuecomment-370569833:156,test,testing,156,https://hail.is,https://github.com/hail-is/hail/pull/3072#issuecomment-370569833,2,['test'],['testing']
Testability,"Comments should be addressed, but I wasn't able to test it locally so there could still be problems...",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5981#issuecomment-488026847:51,test,test,51,https://hail.is,https://github.com/hail-is/hail/pull/5981#issuecomment-488026847,1,['test'],['test']
Testability,Commit log is the description of what changed.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7004#issuecomment-528714248:7,log,log,7,https://hail.is,https://github.com/hail-is/hail/pull/7004#issuecomment-528714248,1,['log'],['log']
Testability,"Commits</summary>; <ul>; <li><a href=""https://github.com/apache/commons-codec/commit/c89d2af770f05457fbefa5fb4713c888bf177fb2""><code>c89d2af</code></a> Prepare for 1.15 release</li>; <li><a href=""https://github.com/apache/commons-codec/commit/ba81ed5dc06661d931a4bb8f7abaa51ee5300396""><code>ba81ed5</code></a> Use gav=true for the maven central redirect</li>; <li><a href=""https://github.com/apache/commons-codec/commit/cb629f03516e21ba7daeb4dd9a7b5fe3c76fc841""><code>cb629f0</code></a> Update maven central badge</li>; <li><a href=""https://github.com/apache/commons-codec/commit/b8090b34914ef456a1262292b554c7a5e1e623e8""><code>b8090b3</code></a> Fix coverage badge to use the 'master' branch not the default 'trunk'</li>; <li><a href=""https://github.com/apache/commons-codec/commit/fa0562e71e2661768c4d2e324ff978aa2af1be08""><code>fa0562e</code></a> Test Context toString has debugging info</li>; <li><a href=""https://github.com/apache/commons-codec/commit/f39003c953df152ff737474d2d2f27b611963a1c""><code>f39003c</code></a> Test isInAlphabet</li>; <li><a href=""https://github.com/apache/commons-codec/commit/9ac33a12a500bbc3ea40685aac61c95169443957""><code>9ac33a1</code></a> Test all constructors</li>; <li><a href=""https://github.com/apache/commons-codec/commit/3535c17eccb2251fc518aa545a800b4922c8dc35""><code>3535c17</code></a> Test encode of null and empty array with an offset</li>; <li><a href=""https://github.com/apache/commons-codec/commit/e42dfe1ff2f273926fd759abea82b1c7b3021985""><code>e42dfe1</code></a> Fix test names</li>; <li><a href=""https://github.com/apache/commons-codec/commit/536587931cb77538709c57455165379a74e2f04f""><code>5365879</code></a> Test the codec policy property</li>; <li>Additional commits viewable in <a href=""https://github.com/apache/commons-codec/compare/commons-codec-1.11...rel/commons-codec-1.15"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-na",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12385:3825,Test,Test,3825,https://hail.is,https://github.com/hail-is/hail/pull/12385,1,['Test'],['Test']
Testability,"Conda is still installed in the pr-builder, and in hail/hail-ci-build.sh to test pip install. I'll rip those out in later PRs and we'll be 100% conda-free.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5905:76,test,test,76,https://hail.is,https://github.com/hail-is/hail/pull/5905,1,['test'],['test']
Testability,"Config`) before initializing a `ServiceBackend`, however as of #14651 we are setting this limit in the `Backend` constructor itself. This represents a regression from #14567. https://github.com/hail-is/hail/blob/3fa74f091fe0eb8c0f0a24c2a0bad124f5d54da6/hail/src/main/scala/is/hail/backend/service/ServiceBackend.scala#L458-L472. The solution is probably to restore this override in `ServiceBackendAPI.main`, or alternatively, refactor so that we create the `ServiceBackend` instance earlier. ### Version. 0.2.133. ### Relevant log output. ```shell; 2024-11-05 02:43:37.202 JVMEntryway: INFO: is.hail.JVMEntryway received arguments:; 2024-11-05 02:43:37.202 JVMEntryway: INFO: 0: /hail-jars/gs:__hail-query-daaf463550_jars_4c60fddb171a52c21f41a81995c53a28e375c26b.jar.jar; 2024-11-05 02:43:37.202 JVMEntryway: INFO: 1: is.hail.backend.service.Main; 2024-11-05 02:43:37.202 JVMEntryway: INFO: 2: /batch/990e17d5209d429196c84ce010acab9d; 2024-11-05 02:43:37.202 JVMEntryway: INFO: 3: /batch/990e17d5209d429196c84ce010acab9d/log; 2024-11-05 02:43:37.202 JVMEntryway: INFO: 4: gs://hail-query-daaf463550/jars/4c60fddb171a52c21f41a81995c53a28e375c26b.jar; 2024-11-05 02:43:37.202 JVMEntryway: INFO: 5: driver; 2024-11-05 02:43:37.202 JVMEntryway: INFO: 6: execute(...); 2024-11-05 02:43:37.202 JVMEntryway: INFO: 7: gs://cpg-bioheart-hail/batch-tmp/tmp/hail/sRjJqvkZ3l9nmKuUErfNZv/jHpWQ6lemx/in; 2024-11-05 02:43:37.202 JVMEntryway: INFO: 8: gs://cpg-bioheart-hail/batch-tmp/tmp/hail/sRjJqvkZ3l9nmKuUErfNZv/jHpWQ6lemx/out; 2024-11-05 02:43:37.202 JVMEntryway: INFO: Yielding control to the QoB Job.; 2024-11-05 02:43:37.206 ServiceBackendAPI$: INFO: BatchClient allocated.; 2024-11-05 02:43:37.207 ServiceBackendAPI$: INFO: BatchConfig parsed.; 2024-11-05 02:43:37.209 GoogleStorageFS$: INFO: Initializing google storage client from service account key; 2024-11-05 02:43:37.783 JVMEntryway: ERROR: QoB Job threw an exception.; java.lang.reflect.InvocationTargetException: null; 	at jdk.internal.reflect.Nati",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14749:1296,log,log,1296,https://hail.is,https://github.com/hail-is/hail/issues/14749,1,['log'],['log']
Testability,Confirmed that test K8s SAs cannot list secrets outside their namespace,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13000#issuecomment-1536852243:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/pull/13000#issuecomment-1536852243,1,['test'],['test']
Testability,"Confirmed that this prebuilt libhail.so can run tests with HAIL_ENABLE_CPP_CODEGEN=1; on a dataproc node with the default 1.2 image (debian8 and g++-4.9.2). The dataproc nodes have g++ and make already installed, so this PR should suffice to; make them work with C++ codegen.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4422#issuecomment-424477261:48,test,tests,48,https://hail.is,https://github.com/hail-is/hail/pull/4422#issuecomment-424477261,1,['test'],['tests']
Testability,"Confirmed, this failure is not happening on local. . ```sh; (base) alex:~/projects/hail/hail:$ ./gradlew test --tests is.hail.expr.ir.ForwardLetsSuite.testForwardingOps; :checkSettings; check: seed = 1, size = 1000, count = 10; :compileJava UP-TO-DATE; :generateBuildInfo; :nativeLib; c++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/include/darwin Region.cpp -MG -M -MF build/Region.d -MT build/Region.o; c++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/include/darwin Hadoop.cpp -MG -M -MF build/Hadoop.d -MT build/Hadoop.o; c++ -o build/Region.o -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/include/darwin -MD -MF build/Region.d -MT build/Region.o -c Region.cpp; c++ -o build/Hadoop.o -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/include/darwin -MD -MF build/Hadoop.d -MT build/Hadoop.o -c Hadoop.cpp; c++ -fvisibility=default -dynamiclib -Wl,-undefined,dynamic_lookup -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6083#issuecomment-492893925:105,test,test,105,https://hail.is,https://github.com/hail-is/hail/pull/6083#issuecomment-492893925,3,['test'],"['test', 'testForwardingOps', 'tests']"
Testability,"Consider this pipeline, which measures the speed of single-core decoding.; ```; import hail as hl; hl.init(master='local[1]'); vds = hl.vds.read_vds(...); vds.variant_data._force_count_rows(); ```. On a 2021 MacBook Pro, [YourKit reports](https://github.com/hail-is/hail/pull/13787#issuecomment-1756358633) ~60MiB/s of bandwidth and 100% CPU use. Substantial amounts of time are reported in Zstd and I/O, #13840 endeavors to address those issues. Even with these issues addressed, we anticipate decoding to use a substantial portion of CPU time. In particular, our decoders perform a fair number of branches to handle missingness (consider that an array is stored as: length, bitset indicating which values are non-missing, the non-missing values). #13787 demonstrated a 50% reduction in run-time ([see benchmarks from before this change](https://github.com/hail-is/hail/pull/13776)) primarily due to replacing iteration (which branches O(N) times) with bitset-driven iteration over the missing bits (which branches O(N_PRESENT) times). Unfortunately, using the ideas in #13787 to improve struct decoding is tricky because struct fields are heterogenous. We could generate 16 different decoders and branch on 4 bits of missingness, but that is fairly large code. However, if we are decoding large arrays of structs (such as a whole partition or an entries array), we could ""transpose"" the data and store a struct of arrays, with one array per-field. This representation has several benefits:. 1. We may use the bitset-driven iteration from #13787.; 2. For fixed-width contiguous element types, we can use `memcpy` for rapid decoding.; 3. O(1) skipping off the unused fields of O(N) structs. ; 5. General purpose compression should perform better due to locality of data types.; 6. We have the opportunity to apply data-type aware compression on each array. This change does require a novel set of PTypes to map the Array(Struct) operations onto the physical Struct(Array) representation.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13841:803,benchmark,benchmarks,803,https://hail.is,https://github.com/hail-is/hail/issues/13841,1,['benchmark'],['benchmarks']
Testability,"Consider, for example, this deploy: https://ci.hail.is/batches/7956812. `test-dataproc-37` succeeded but `test-dataproc-38` failed (it timed out b/c the master failed to come online). You can see the error logs for the cluster here: https://cloudlogging.app.goo.gl/t1ux8oqy11Ba2dih7. It states a certain file either did not exist or we did not have permission to access it. [`test_dataproc-37`](https://batch.hail.is/batches/7956812/jobs/193) and [`test_dataproc-38`](https://batch.hail.is/batches/7956812/jobs/194) started around the same time and both uploaded four files into:. gs://hail-30-day/hailctl/dataproc/ci_test_dataproc/0.2.121-7343e9c368dc/. And then set it to public read/write. The public read/write means that permissions are not the issue. Instead, the issue is that there must be some sort of race condition in GCS which means that if you ""patch"" (aka overwrite) an existing file, it is possible that a concurrent reader will see the file as not existing. Unfortunately, I cannot confirm this with audit logs of the writes and read because [public objects do not generate audit logs](https://cloud.google.com/logging/docs/audit#data-access).; > Publicly available resources that have the Identity and Access Management policies [allAuthenticatedUsers](https://cloud.google.com/iam/docs/overview#allauthenticatedusers) or [allUsers](https://cloud.google.com/iam/docs/overview#allusers) don't generate audit logs. Resources that can be accessed without logging into a Google Cloud, Google Workspace, Cloud Identity, or Drive Enterprise account don't generate audit logs. This helps protect end-user identities and information.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13573:73,test,test-dataproc-,73,https://hail.is,https://github.com/hail-is/hail/pull/13573,9,"['log', 'test']","['logging', 'logs', 'test-dataproc-']"
Testability,"Contains the business logic, and a small readme to explain expected use. No '.env' file is committed here, because this is dangerous. In a future revision of this code, there may be secrets needed; if they are stored in .env, as is idiomatic, we could more easily commit them with a checked-in .env. Ref: https://devcenter.heroku.com/articles/node-best-practices#be-environmentally-aware",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5369:22,log,logic,22,https://hail.is,https://github.com/hail-is/hail/pull/5369,1,['log'],['logic']
Testability,"Contains user creation logic. Obvious improvements: update tests, add bit of logic to add resources to multiple namespaces (or define which resources should go in which namespace): right now gcp-sa-key needs to be in batch-pods, and (I think?) also default namespace. Has some duplicated database creation logic with auth. Please let me know what you'd like changed!. cc @cseed, @danking, @johnc1231",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6619:23,log,logic,23,https://hail.is,https://github.com/hail-is/hail/pull/6619,4,"['log', 'test']","['logic', 'tests']"
Testability,"Context(spark.sparkContext); Running on Apache Spark version 2.0.2; SparkUI available at http://192.168.1.122:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.1-20613ed; >>> table = hc.import_table('data/1kg_annotations.txt', impute=True).key_by('Sample'); 2018-02-22 20:29:45 Hail: INFO: Reading table to impute column types; 2018-02-22 20:29:45 Hail: INFO: Finished type imputation; Loading column `Sample' as type String (imputed); Loading column `Population' as type String (imputed); Loading column `SuperPopulation' as type String (imputed); Loading column `isFemale' as type Boolean (imputed); Loading column `PurpleHair' as type Boolean (imputed); Loading column `CaffeineConsumption' as type Int (imputed); >>> common_vds = hc.read('/mnt/d/metistream/hail/data/1kg.vds'); >>> common_vds = common_vds.annotate_samples_table(table, root='sa'); SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".; SLF4J: Defaulting to no-operation (NOP) logger implementation; SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.; >>> common_vds = common_vds.sample_qc(); >>> common_vds = common_vds.filter_samples_expr('sa.qc.dpMean >= 4 && sa.qc.callRate >= 0.97'); >>> common_vds = common_vds.filter_genotypes('let ab = g.ad[1] / g.ad.sum() in ((g.isHomRef && ab <= 0.1) || (g.isHet && ab >= 0.25 && ab <= 0.75) ||(g.isHomVar && ab >= 0.9))'); // class version 52.0 (52); // access flags 0x1; public class is/hail/codegen/generated/C0 implements java/io/Serializable is/hail/asm4s/AsmFunction2 {. // access flags 0x1; public apply([Ljava/lang/Object;Lscala/collection/mutable/ArrayBuffer;)Ljava/lang/Object;; L0; ALOAD 2; LDC 2; INVOKEVIRTUAL scala/collection/mutable/ArrayBuffer.apply (I)Ljava/lang/Object;; CHECKCAST org/apache/spark/sql/Row; ASTORE 3; ALOAD 3; IFNULL L1; ALOAD 3; LDC 5; INVOKEINTERFACE org/apache/spark/sql/Row.get (I)Ljava/lang/Object;; CHECKCAST org/apache/spark/sql/Row; GOTO L2; L1; FRAME APPEND [o",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2966:3106,log,logger,3106,https://hail.is,https://github.com/hail-is/hail/issues/2966,1,['log'],['logger']
Testability,"Context: https://hail.zulipchat.com/#narrow/stream/300487-Hail-Batch-Dev/topic/adding.20service.20account.20name.20to.20users.20list/near/349228510. It's useful for our automation to include this in the REST response get any get user call. I don't know how testing works, if needed, could you guide me how to add tests to cover this?",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12889:257,test,testing,257,https://hail.is,https://github.com/hail-is/hail/pull/12889,2,['test'],"['testing', 'tests']"
Testability,Convert BGEN asserts to ifs for performance,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3771:13,assert,asserts,13,https://hail.is,https://github.com/hail-is/hail/pull/3771,1,['assert'],['asserts']
Testability,Convert trio matrix test to api2,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2814:20,test,test,20,https://hail.is,https://github.com/hail-is/hail/issues/2814,1,['test'],['test']
Testability,"Cool, tests pass now. Turns out that the issue was not the changes that I made to `context.py`, not the scala side changes. The python side initialization steps are not actually idempotent, so if the context has already been set up, we immediately return instead of running them again.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4068#issuecomment-411239262:6,test,tests,6,https://hail.is,https://github.com/hail-is/hail/pull/4068#issuecomment-411239262,1,['test'],['tests']
Testability,"Cool. There's some things that I want to rework, namely the split logic for `Group()` (either splitting it into a separate IR node as you suggested or reworking some of the CodeAggregator stuff so that the logic becomes the same), but I think that doesn't affect the workingness of this code so I was going to leave that part as-is for now.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4555#issuecomment-430448925:66,log,logic,66,https://hail.is,https://github.com/hail-is/hail/pull/4555#issuecomment-430448925,2,['log'],['logic']
Testability,"Copied over from the Zulip thread:. Dan and I still have work to figure out the authentication strategy for browser-based REST requests, but as a workaround I've added a tiny aiohttp proxy that uses the python client library to fulfill the requests, which could enable local frontend work while we figure out the right way to do authentication and streaming data through websockets. Implementing the polling and separating it logically from the view components was actually a nice little case study in how to do this in React/Svelte, but is far from an honest or thorough comparison. If you want to run it for yourself, you can pull down the branch in that PR and then do the following (which I'll write dev docs for if this is something that we actually want to check in):. Install node if you do not have it; Run npm install in the $HAIL, $HAIL/js_common, and $HAIL/batch2/react-batch (or svelte-batch) directories; In one terminal in $HAIL/batch2, run python proxy.py; In another terminal in one of the react-batch or svelte-batch directories, run npm run dev; Go to localhost:3000 in your browser if it didn't pop up automatically",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10504:426,log,logically,426,https://hail.is,https://github.com/hail-is/hail/pull/10504,1,['log'],['logically']
Testability,Copy paste login,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8563:11,log,login,11,https://hail.is,https://github.com/hail-is/hail/pull/8563,1,['log'],['login']
Testability,Core dump in cppCodeGen tests on Ubuntu 18.04,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4718:24,test,tests,24,https://hail.is,https://github.com/hail-is/hail/issues/4718,1,['test'],['tests']
Testability,"Core infrastructure enclosed. Opening now to enable feedback as I continue to higher level interfaces, tests, and examples.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3397:103,test,tests,103,https://hail.is,https://github.com/hail-is/hail/pull/3397,1,['test'],['tests']
Testability,Correcting an oversight from #11273 . Probably we should test that all build.yaml dependencies exist in the future (Services team seems to be replacing build.yaml with something new?),MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11275:57,test,test,57,https://hail.is,https://github.com/hail-is/hail/pull/11275,1,['test'],['test']
Testability,"Cotton -- I fixed the changes you suggested and it should be ready to be merged. For the multiarray of size 0, I tested that you can create the object, but using the apply for (0,0) throws an error.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/79#issuecomment-161677715:113,test,tested,113,https://hail.is,https://github.com/hail-is/hail/pull/79#issuecomment-161677715,1,['test'],['tested']
Testability,"Cotton and I discussed several weeks ago that we should build a debugging allocator for testing/debugging issues like the above. You were a natural candidate to work on this, given how you were digging pretty deeply into region stuff, and even started working on something similar. Shall we set up a chat in the next day or two to talk about this? Sounds like it's now a high-prio need.",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8957#issuecomment-644136378:88,test,testing,88,https://hail.is,https://github.com/hail-is/hail/pull/8957#issuecomment-644136378,1,['test'],['testing']
Testability,Cotton has a vcf he generated for testing BGZipCodec: see BGZipCodecSuite. This has a lot of the edge cases.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9304#issuecomment-676497772:34,test,testing,34,https://hail.is,https://github.com/hail-is/hail/pull/9304#issuecomment-676497772,1,['test'],['testing']
Testability,Could also do a scala test that asserts about memory usage.,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10695#issuecomment-886215090:22,test,test,22,https://hail.is,https://github.com/hail-is/hail/pull/10695#issuecomment-886215090,2,"['assert', 'test']","['asserts', 'test']"
Testability,Could we add a specific test for compatibilty on JDK 8 and move the default forward? We're on a crash course of incompatibility with the current python3.6 / ubuntu:18.04 / Java 8 restrictions. From Oracle's pages it feels like Java 8 will simply never die...,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11046#issuecomment-965471326:24,test,test,24,https://hail.is,https://github.com/hail-is/hail/pull/11046#issuecomment-965471326,1,['test'],['test']
Testability,"Could you give some context on the two different places in the driver we're checking the number of attempts? What are those two places, and why do we need two?. Also, have you done anything to test how much adding joins with the `attempts` table slows down those queries?",MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14682#issuecomment-2356218496:193,test,test,193,https://hail.is,https://github.com/hail-is/hail/pull/14682#issuecomment-2356218496,1,['test'],['test']
Testability,Could you please do one more broad look over this before I start testing again with the new changes?,MatchSource.ISSUE_COMMENT,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13279#issuecomment-1677683100:65,test,testing,65,https://hail.is,https://github.com/hail-is/hail/pull/13279#issuecomment-1677683100,1,['test'],['testing']
