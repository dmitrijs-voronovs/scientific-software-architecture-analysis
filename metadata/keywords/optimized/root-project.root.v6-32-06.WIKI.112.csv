quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Testability,"  ; Double_t AndersonDarling2SamplesTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarling2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 2-Sample Test. ;  ; Double_t AndersonDarlingTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarlingTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 1-Sample Test. ;  ; Double_t KolmogorovSmirnov2SamplesTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; void KolmogorovSmirnov2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; Double_t KolmogorovSmirnovTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void KolmogorovSmirnovTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void operator() (ETestType test, Double_t &pvalue, Double_t &testStat) const;  The class's unary functions performing the gif test according to the ETestType provided. ;  ; Double_t operator() (ETestType test=kAD, const Char_t *option=""p"") const;  Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value specific to the test type. ;  ; void SetDistribution (EDistribution dist, const std::vector< double > &distParams={});  Sets the distribution for the predefined distribution types and optionally its parameters for 1-sample tests. ;  ; void SetUserCDF (const IGenFunction &cdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; template<class Dist > ; void SetUserCDF (Dist &cdf, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; void SetUserDistribution (const IGenFunction &dist, GoFTest::EUserDistribution userDist=kPDF, Double_t xmin=1, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:3873,test,test,3873,doc/master/classROOT_1_1Math_1_1GoFTest.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html,3,['test'],"['test', 'testStat']"
Testability,  ; RooAbsReal * _func = nullptr;  Pointer to original input function. ;  ; std::vector< std::unique_ptr< RooAbsTestStatistic > > _gofArray;  ! Array of sub-contexts representing part of the combined test statistic ;  ; GOFOpMode _gofOpMode = Slave;  Operation mode of test statistic instance. ;  ; bool _init = false;  ! Is object initialized ;  ; pRooRealMPFE * _mpfeArray = nullptr;  ! Array of parallel execution frond ends ;  ; RooFit::MPSplit _mpinterl = RooFit::BulkPartition;  Use interleaving strategy rather than N-wise split for partitioning of dataset for multiprocessor-split. ;  ; Int_t _nCPU = 1;  Number of processors to use in parallel calculation mode. ;  ; Int_t _nEvents = 0;  Total number of events in test statistic calculation. ;  ; Int_t _numSets = 1;  Total number of partitions in parallel calculation mode. ;  ; ROOT::Math::KahanSum< double > _offset {0.0};  ! Offset as KahanSum to avoid loss of precision ;  ; RooSetProxy _paramSet;  Parameters of the test statistic (=parameters of the input function) ;  ; const RooArgSet * _projDeps = nullptr;  Pointer to set with projected observables. ;  ; std::string _rangeName;  Name of range in which to calculate test statistic. ;  ; Int_t _setNum = 0;  Partition number of this instance in parallel calculation mode. ;  ; Int_t _simCount = 1;  Total number of component p.d.f.s in RooSimultaneous (if any) ;  ; bool _splitRange = false;  Split rangeName in RooSimultaneous index labels if true. ;  ; const bool _takeGlobalObservablesFromData = false;  If the global observable values are taken from data. ;  ; bool _verbose = false;  Verbose messaging if true. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChi2Var.html:62375,test,test,62375,doc/master/classRooChi2Var.html,https://root.cern,https://root.cern/doc/master/classRooChi2Var.html,1,['test'],['test']
Testability,"  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions; void prepareFFTBinning (RooRealVar &convVar) const;  Try to improve the binning and inform user if possible. ;  . Friends; class FFTCacheElem;  ; class RooConvGenContext;  . Additional Inherited Members;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #incl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFFTConvPdf.html:82895,test,testArg,82895,doc/master/classRooFFTConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooFFTConvPdf.html,4,['test'],['testArg']
Testability,"  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinWidthFunction.html:46799,log,logging,46799,doc/master/classRooBinWidthFunction.html,https://root.cern,https://root.cern/doc/master/classRooBinWidthFunction.html,140,['log'],['logging']
Testability,"  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; Int_t BuildLowerPlot ();  Build the lower plot according to which constructor was called, and which options were passed. ;  ; virtual void ConnectPadsSignals ();  Connect some signals from the pads to handle them Allows correctly work also after reading ratioplot from the file. ;  ; void CreateGridlines ();  Create a grid lines. ;  ; virtual void CreateVisualAxes ();  Creates the TGaxis objects that are used for consistent display of the axes. ;  ; void ImportAxisAttributes (TGaxis *gaxis, TAxis *axis);  Internal method to import TAxis attributes to a TGaxis. ;  ; virtual void Init (TH1 *h1, TH1 *h2, Option_t *option="""");  Internal method that shares constructor logic. ;  ; void SetPadMargins ();  Sets the margins of all the pads to the value specified in class members. ;  ; virtual void SetupPads ();  Setup the pads. ;  ; virtual void SyncAxesRanges ();  Syncs the axes ranges from the shared ones to the actual ones. ;  ; virtual Bool_t SyncPadMargins ();  Figures out which pad margin has deviated from the stored ones, to figure out what the new nominal is and set the other pad to it subsequently. ;  ; void UpdateGridlines ();  Update positions of grid lines. ;  ; virtual void UpdateVisualAxes ();  Update TGaxis attributes. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fC1 = 1.;  Stores the scale factor for h1 (or THStack sum) ;  ; Double_t fC2 = 1.;  Stores the scale factor for h2. ;  ; Color_t f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRatioPlot.html:19822,log,logic,19822,doc/master/classTRatioPlot.html,https://root.cern,https://root.cern/doc/master/classTRatioPlot.html,1,['log'],['logic']
Testability,"  ; void AddSignalTestEvent (const std::vector< Double_t > &event, Double_t weight=1.0);  add signal testing event ;  ; void AddSignalTrainingEvent (const std::vector< Double_t > &event, Double_t weight=1.0);  add signal training event ;  ; void AddSignalTree (TString datFileS, Double_t weight=1.0, Types::ETreeType treetype=Types::kMaxTreeType);  add signal tree from text file ;  ; void AddSignalTree (TTree *signal, Double_t weight, const TString &treetype);  ; void AddSignalTree (TTree *signal, Double_t weight=1.0, Types::ETreeType treetype=Types::kMaxTreeType);  number of signal events (used to compute significance) ;  ; void AddSpectator (const TString &expression, const TString &title="""", const TString &unit="""", Double_t min=0, Double_t max=0);  user inserts target in data set info ;  ; void AddTarget (const TString &expression, const TString &title="""", const TString &unit="""", Double_t min=0, Double_t max=0);  user inserts target in data set info ;  ; void AddTestEvent (const TString &className, const std::vector< Double_t > &event, Double_t weight);  add signal test event ;  ; void AddTrainingEvent (const TString &className, const std::vector< Double_t > &event, Double_t weight);  add signal training event ;  ; void AddTree (TTree *tree, const TString &className, Double_t weight, const TCut &cut, const TString &treeType);  number of signal events (used to compute significance) ;  ; void AddTree (TTree *tree, const TString &className, Double_t weight=1.0, const TCut &cut="""", Types::ETreeType tt=Types::kMaxTreeType);  ; void AddVariable (const TString &expression, char type='F', Double_t min=0, Double_t max=0);  user inserts discriminating variable in data set info ;  ; void AddVariable (const TString &expression, const TString &title, const TString &unit, char type='F', Double_t min=0, Double_t max=0);  user inserts discriminating variable in data set info ;  ; void AddVariablesArray (const TString &expression, int size, char type='F', Double_t min=0, Double_t m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataLoader.html:2902,test,test,2902,doc/master/classTMVA_1_1DataLoader.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataLoader.html,1,['test'],['test']
Testability,"  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual Int_t GetContour (Double_t *levels=nullptr);  Return contour values into array levels. ;  ; virtual Double_t GetContourLevel (Int_t level) const;  Return the number of contour levels. ;  ; virtual Double_t GetMaximum (Double_t *x) const;  Return maximum value of the function See TF2::GetMinimum. ;  ; virtual Double_t GetMaximum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the maximum value of the function. ;  ; virtual Double_t GetMaximumXY (Double_t &x, Double_t &y) const;  Compute the X and Y values corresponding to the maximum value of the function. ;  ; virtual Double_t GetMinimum (Double_t *x) const;  Return minimum/maximum value of the function. ;  ; virtual Double_t GetMinimum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Double_t GetMinimumXY (Double_t &x, Double_t &y) const;  Compute the X and Y values corresponding to the minimum value of the function. ;  ; Int_t GetNpy () const;  ; char * GetObjectInfo (Int_t px, Int_t py) const override;  Redefines TObject::GetObjectInfo. ;  ; Double_t GetRandom (Double_t xmin, Double_t xmax, TRandom *rng=nullptr, Option_t *opt=nullptr) override;  Return a random number following this function shape. ;  ; Double_t GetRandom (TRandom *rng=nullptr, Option_t *opt=nullptr) override;  Return a random number following this function shape. ;  ; virtual void GetRandom2 (Double_t &xrandom, Double_t &yrandom, TRandom *rng=nullptr);  Return 2 random numbers following this function shape. ;  ; virtual void GetRange (Double_t &xmin, Double_t &xmax) const;  Return range of a 1-D function. ;  ; virtual void GetRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const;  Return range of a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF2.html:5639,log,logx,5639,doc/master/classTF2.html,https://root.cern,https://root.cern/doc/master/classTF2.html,1,['log'],['logx']
Testability,"  ; void graphVizTree (const char *fileName, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Create a GraphViz .dot file visualizing the expression tree headed by this RooAbsArg object. ;  ; void graphVizTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCategory.html:19580,test,testArg,19580,doc/master/classRooCategory.html,https://root.cern,https://root.cern/doc/master/classRooCategory.html,2,['test'],['testArg']
Testability,"  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; double _absMin = 0.0;  absolute minimum of -log(L) ;  ; bool _absMinValid = false;  flag if absmin is up-to-date ;  ; std::unique_ptr< RooMinimizer > _minimizer = nullptr;  ! Internal minimizer instance ;  ; Int_t _neval = 0;  Number evaluations used in last minimization. ;  ; RooRealProxy _nll;  Input -log(L) function. ;  ; RooSetProxy _obs;  Parameters of profile likelihood. ;  ; RooArgSet _obsAbsMin;  Observable values at absolute minimum. ;  ; RooSetProxy _par;  Marginalised parameters of likelihood. ;  ; RooArgSet _paramAbsMin;  Parameter values at absolute minimum. ;  ; std::map< std::string, bool > _paramFixed;  Parameter constant status at last time of use. ;  ; bool _startFromMin = true;  Always start minimization for global minimum? ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProfileLL.html:55669,log,log,55669,doc/master/classRooProfileLL.html,https://root.cern,https://root.cern/doc/master/classRooProfileLL.html,1,['log'],['log']
Testability,"  CTPosixThreadCleanUp;  CTPosixThreadFactory;  CTPostScriptInterface to PostScript ;  CTPRegexp;  CTPrimaryOld version of a dynamic particle class created by event generators ;  CTPrincipalPrincipal Components Analysis (PCA) ;  CTProcessEventTimer;  CTProcessIDA TProcessID identifies a ROOT job in a unique way in time and space ;  CTProcessUUIDThis class is a specialized TProcessID managing the list of UUIDs ;  CTProfileProfile Historam ;  CTProfile2DProfile2D histograms are used to display the mean value of Z and its RMS for each cell in X,Y ;  CTProfile3DProfile3D histograms are used to display the mean value of T and its RMS for each cell in X,Y,Z ;  CTProfileHelper;  ►CTProofThis class controls a Parallel ROOT Facility, PROOF, cluster ;  CMD5Mod_t;  CTProofBenchSteering class for PROOF benchmarks ;  CTProofBenchDataSetHandle operations on datasets used by ProofBench ;  CTProofBenchRunAbstract base class for PROOF benchmark runs ;  CTProofBenchRunCPUCPU-intensive PROOF benchmark test generates events and fill 1, 2, or 3-D histograms ;  CTProofBenchRunDataReadI/O-intensive PROOF benchmark test reads in event files distributed on the cluster ;  CTProofChain;  CTProofCondor;  CTProofDebug;  CTProofDesc;  CTProofDrawImplement Tree drawing using PROOF ;  CTProofDrawEntryList;  CTProofDrawEventList;  CTProofDrawGraph;  CTProofDrawHist;  ►CTProofDrawListOfGraphs;  CPoint3D_t;  ►CTProofDrawListOfPolyMarkers3D;  CPoint4D_t;  CTProofDrawPolyMarker3D;  CTProofDrawProfile;  CTProofDrawProfile2D;  CTProofInputHandler;  CTProofInterruptHandler;  CTProofLimitsFinderClass to find axis limits and synchronize them between workers ;  CTProofLiteThis class starts a PROOF session on the local machine: no daemons, client and master merged, communications via UNIX-like sockets ;  CTProofLockPath;  CTProofLockPathGuard;  CTProofLogImplementation of the PROOF session log handler ;  CTProofLogElem;  CTProofMergePrg;  CTProofMgrThe PROOF manager interacts with the PROOF server coordinator ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:177420,test,test,177420,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['test'],['test']
Testability,"  Frame-buffer object. More...;  ; class  TGLFont;  A wrapper class for FTFont. More...;  ; class  TGLFontManager;  A FreeType GL font manager. More...;  ; class  TGLFormat;  Encapsulation of format / contents of an OpenGL buffer. More...;  ; class  TGLH2PolyPainter;  Paint TH2Poly. More...;  ; class  TGLHistPainter;  The histogram painter class using OpenGL. More...;  ; class  TGLIsoPainter;  ""gliso"" option for TH3. More...;  ; class  TGLLegoPainter;  Plot-painter implementing LEGO rendering of TH2 histograms in cartesian, polar, cylindrical and spherical coordinates. More...;  ; class  TGLLightSet;  Encapsulates a set of lights for OpenGL. More...;  ; class  TGLLightSetSubEditor;  Sub-editor for TGLLightSet. More...;  ; class  TGLLine3;  3D space, fixed length, line class, with direction / length 'vector', passing through point 'vertex'. More...;  ; class  TGLLockable;  Simple locking interface used by viewer and scene. More...;  ; class  TGLLogicalShape;  Abstract logical shape - a GL 'drawable' - base for all shapes - faceset sphere etc. More...;  ; class  TGLManip;  Abstract base class for viewer manipulators, which allow direct in viewer manipulation of a (TGlPhysicalShape) object - currently translation, scaling and rotation along/round objects local axes. More...;  ; class  TGLManipSet;  Combine all available manipulators in a collection. More...;  ; class  TGLMatrix;  16 component (4x4) transform matrix - column MAJOR as per GL. More...;  ; class  TGLObject;  Base-class for direct OpenGL renderers. More...;  ; class  TGLOrthoCamera;  Orthographic projection camera. More...;  ; class  TGLOutput;  Wrapper class for GL capture & output routines. More...;  ; class  TGLOverlayButton;  GL-overlay button. More...;  ; class  TGLOverlayElement;  An overlay element. More...;  ; class  TGLOverlayList;  Manage a collection of overlay elements. More...;  ; class  TGLOvlSelectRecord;  Selection record for overlay objects. More...;  ; class  TGLPadPainter;  ""Delegating"" p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__opengl.html:4728,log,logical,4728,doc/master/group__opengl.html,https://root.cern,https://root.cern/doc/master/group__opengl.html,1,['log'],['logical']
Testability,  GSLMultiFitFunctionAdapter.h;  GSLMultiFitFunctionWrapper.h;  GSLMultiMinFunctionAdapter.h;  GSLMultiMinFunctionWrapper.h;  GSLMultiMinimizer.h;  GSLMultiRootFinder.cxx;  GSLMultiRootFunctionAdapter.h;  GSLMultiRootFunctionWrapper.h;  GSLMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngROOTWrapper.h;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  LinkDef.h;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;  TMatrixTCramerInv.h;  TMatrixTLazy.h;  TMatrixTSparse.h;  TM,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:49207,test,testGSLIntegration,49207,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['test'],['testGSLIntegration']
Testability,  GSLMultiFitFunctionAdapter.h;  GSLMultiFitFunctionWrapper.h;  GSLMultiMinFunctionAdapter.h;  GSLMultiMinFunctionWrapper.h;  GSLMultiMinimizer.h;  GSLMultiRootFinder.cxx;  GSLMultiRootFunctionAdapter.h;  GSLMultiRootFunctionWrapper.h;  GSLMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngROOTWrapper.h;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;  TMatrixTCramerInv.h;  TMatrixTLazy.h;  TMatrixTSparse.h;  TMatrixTSym.h;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:47785,test,testGSLIntegration,47785,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['testGSLIntegration']
Testability,  GSLMultiRootFunctionWrapper.h;  GSLMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngROOTWrapper.h;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  LinkDef.h;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;  TMatrixTCramerInv.h;  TMatrixTLazy.h;  TMatrixTSparse.h;  TMatrixTSym.h;  TMatrixTSymCramerInv.h;  TMatrixTUtils.h;  TVector.h;  TVectorD.h;  TVectorDfwd.h;  TVectorF.h;  TVectorFfwd.h;  TVectorfwd.h;  TVectorT.h;  ► src;  TDecompBase.cxx;  TDecompBK.cxx;  TDecom,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:49412,test,testRandomDist,49412,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['test'],['testRandomDist']
Testability,  GSLMultiRootFunctionWrapper.h;  GSLMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngROOTWrapper.h;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;  TMatrixTCramerInv.h;  TMatrixTLazy.h;  TMatrixTSparse.h;  TMatrixTSym.h;  TMatrixTSymCramerInv.h;  TMatrixTUtils.h;  TVector.h;  TVectorD.h;  TVectorDfwd.h;  TVectorF.h;  TVectorFfwd.h;  TVectorfwd.h;  TVectorT.h;  ► src;  TDecompBase.cxx;  TDecompBK.cxx;  TDecompChol.cxx;  ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:47990,test,testRandomDist,47990,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['testRandomDist']
Testability,"  HybridResult;  Class encapsulating the result of the HybridCalculatorOriginal. More...;  ; class  HypoTestCalculator;  HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. More...;  ; class  HypoTestCalculatorGeneric;  Common base class for the Hypothesis Test Calculators. More...;  ; class  HypoTestInverter;  A class for performing a hypothesis test inversion by scanning the hypothesis test results of a HypoTestCalculator for various values of the parameter of interest. More...;  ; class  HypoTestInverterPlot;  Class to plot a HypoTestInverterResult, the output of the HypoTestInverter calculator. More...;  ; class  HypoTestInverterResult;  HypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval. More...;  ; class  HypoTestPlot;  This class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.g. More...;  ; class  HypoTestResult;  HypoTestResult is a base class for results from hypothesis tests. More...;  ; class  IntervalCalculator;  IntervalCalculator is an interface class for a tools which produce RooStats ConfIntervals. More...;  ; struct  LikelihoodFunction;  ; class  LikelihoodInterval;  LikelihoodInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  LikelihoodIntervalPlot;  This class provides simple and straightforward utilities to plot a LikelihoodInterval object. More...;  ; class  MarkovChain;  Stores the steps in a Markov Chain of points. More...;  ; class  MaxLikelihoodEstimateTestStat;  MaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter. More...;  ; class  MCMCCalculator;  Bayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function. More...;  ; class  MCMCInterval;  MCMCInterval is a c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceRooStats.html:3382,test,tests,3382,doc/master/namespaceRooStats.html,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html,1,['test'],['tests']
Testability,"  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w Passing an out-of-range bin leads to undefined behavior. ;  ; TH1D & operator= (const TH1D &h1);  Operator =. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeInte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile.html:11797,test,test,11797,doc/master/classTProfile.html,https://root.cern,https://root.cern/doc/master/classTProfile.html,1,['test'],['test']
Testability,  MixMaxEngine.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  TComplex.cxx;  TDataPointN.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.h;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h;  Polynomial.h;  QuantFuncMathMore.h;  QuasiRandom.h;  RootFinderAlgorithms.h;  SpecFuncMathMore,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:46289,test,testRootFinder,46289,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,1,['test'],['testRootFinder']
Testability,"  Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2] for a 3-D histogram By default the integral is computed as the sum of bin contents in the range. ;  ; Double_t Integral (Option_t *option="""") const override;  Return integral of bin contents. ;  ; virtual Double_t IntegralAndError (Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Int_t binz1, Int_t binz2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2] for a 3-D histogram. ;  ; Double_t Interpolate (Double_t x, Double_t y, Double_t z) const override;  Given a point P(x,y,z), Interpolate approximates the value via trilinear interpolation based on the 8 nearest bin center points (corner of the cube surrounding the points) The Algorithm is described in http://en.wikipedia.org/wiki/Trilinear_interpolation The given values (x,y,z) must be between first bin center and last bin center for each coordinate: ;  ; Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const override;  Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ;  ; virtual TH1 * Project3D (Option_t *option=""x"") const;  Project a 3-d histogram into 1 or 2-d histograms depending on the option parameter, which may contain a combination of the characters x,y,z,e. ;  ; virtual TH1D * ProjectionX (const char *name=""_px"", Int_t iymin=0, Int_t iymax=-1, Int_t izmin=0, Int_t izmax=-1, Option_t *option="""") const;  Project a 3-D histogram into a 1-D histogram along X. ;  ; virtual TH1D * ProjectionY (const char *name=""_py"", Int_t ixmin=0, Int_t ixmax=-1, Int_t izmin=0, Int_t izmax=-1, Option_t *option="""") const;  Project a 3-D histogram into a 1-D histogram along Y. ;  ; virtual TH1D * ProjectionZ (const char *name=""_pz"", Int_t ixmin=0, Int_t ixmax=-1, Int_t iymin=0, Int_t iymax=-1, Option_t *option="""") const;  Project a 3-D histogram into a 1-D histogram along Z. ;  ; virtual TH3 * Rebin3D (Int_t n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile3D.html:13638,test,test,13638,doc/master/classTProfile3D.html,https://root.cern,https://root.cern/doc/master/classTProfile3D.html,2,['test'],['test']
Testability,"  Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2] for a 3-D histogram By default the integral is computed as the sum of bin contents in the range. ;  ; Double_t Integral (Option_t *option="""") const override;  Return integral of bin contents. ;  ; virtual Double_t IntegralAndError (Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Int_t binz1, Int_t binz2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2] for a 3-D histogram. ;  ; Double_t Interpolate (Double_t x, Double_t y, Double_t z) const override;  Given a point P(x,y,z), Interpolate approximates the value via trilinear interpolation based on the 8 nearest bin center points (corner of the cube surrounding the points) The Algorithm is described in http://en.wikipedia.org/wiki/Trilinear_interpolation The given values (x,y,z) must be between first bin center and last bin center for each coordinate: ;  ; Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const override;  Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ;  ; virtual TH1 * Project3D (Option_t *option=""x"") const;  Project a 3-d histogram into 1 or 2-d histograms depending on the option parameter, which may contain a combination of the characters x,y,z,e. ;  ; virtual TProfile2D * Project3DProfile (Option_t *option=""xy"") const;  Project a 3-d histogram into a 2-d profile histograms depending on the option parameter option may contain a combination of the characters x,y,z option = ""xy"" return the x versus y projection into a TProfile2D histogram option = ""yx"" return the y versus x projection into a TProfile2D histogram option = ""xz"" return the x versus z projection into a TProfile2D histogram option = ""zx"" return the z versus x projection into a TProfile2D histogram option = ""yz"" return the y versus z projection into a TProfile2D histogram option = ""zy"" return the z versus y projection",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLTH3Composition.html:9843,test,test,9843,doc/master/classTGLTH3Composition.html,https://root.cern,https://root.cern/doc/master/classTGLTH3Composition.html,14,['test'],['test']
Testability,  TAxis.hxx;  THist.hxx;  THistBinIter.hxx;  THistBufferedFill.hxx;  THistConcurrentFill.hxx;  THistData.hxx;  THistDrawable.hxx;  THistDrawOptions.hxx;  THistImpl.hxx;  THistUtils.hxx;  THistView.hxx;  ► src;  TAxis.cxx;  THistDrawable.cxx;  ► test;  speedtest.cxx;  ► histpainter;  ► inc;  Hoption.h;  Hparam.h;  LinkDef.h;  TGraph2DPainter.h;  TGraphPainter.h;  THistPainter.h;  TLego.h;  TPainter3dAlgorithms.h;  TPaletteAxis.h;  ► src;  TGraph2DPainter.cxx;  TGraphPainter.cxx;  THistPainter.cxx;  TPainter3dAlgorithms.cxx;  TPaletteAxis.cxx;  ► v7;  ► src;  THistPainter.cxx;  ► spectrum;  ► inc;  LinkDef.h;  TSpectrum.h;  TSpectrum2.h;  TSpectrum2Fit.h;  TSpectrum2Transform.h;  TSpectrum3.h;  TSpectrumFit.h;  TSpectrumTransform.h;  ► src;  TSpectrum.cxx;  TSpectrum2.cxx;  TSpectrum2Fit.cxx;  TSpectrum2Transform.cxx;  TSpectrum3.cxx;  TSpectrumFit.cxx;  TSpectrumTransform.cxx;  ► spectrumpainter;  ► inc;  LinkDef.h;  TSpectrum2Painter.h;  ► src;  TSpectrum2Painter.cxx;  ► html;  ► doc;  ► macros;  testmacro.C;  ► inc;  LinkDef.h;  TClassDocOutput.h;  TDocDirective.h;  TDocInfo.h;  TDocOutput.h;  TDocParser.h;  THtml.h;  ► src;  TClassDocOutput.cxx;  TDocDirective.cxx;  TDocInfo.cxx;  TDocOutput.cxx;  TDocParser.cxx;  THtml.cxx;  ► io;  ► castor;  ► inc;  LinkDef.h;  TCastorFile.h;  ► src;  TCastorFile.cxx;  ► chirp;  ► inc;  LinkDef.h;  TChirpFile.h;  ► src;  TChirpFile.cxx;  ► dcache;  ► inc;  LinkDef.h;  TDCacheFile.h;  ► src;  TDCacheFile.cxx;  ► gfal;  ► inc;  LinkDef.h;  TGFALFile.h;  ► src;  TGFALFile.cxx;  ► hdfs;  ► inc;  LinkDef.h;  THDFSFile.h;  ► src;  THDFSFile.cxx;  ► io;  ► inc;  LinkDef.h;  TArchiveFile.h;  TBufferFile.h;  TBufferJSON.h;  TCollectionProxyFactory.h;  TContainerConverters.h;  TDirectoryFile.h;  TEmulatedCollectionProxy.h;  TEmulatedMapProxy.h;  TFile.h;  TFileCacheRead.h;  TFileCacheWrite.h;  TFileMerger.h;  TFilePrefetch.h;  TFPBlock.h;  TFree.h;  TGenCollectionProxy.h;  TGenCollectionStreamer.h;  TKey.h;  TKeyMapFile.h;  TLockFile.h;  ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:37093,test,testmacro,37093,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['test'],['testmacro']
Testability,  TKeyXML.h;  TXMLEngine.h;  TXMLFile.h;  TXMLPlayer.h;  TXMLSetup.h;  ► src;  TBufferXML.cxx;  TKeyXML.cxx;  TXMLEngine.cxx;  TXMLFile.cxx;  TXMLPlayer.cxx;  TXMLSetup.cxx;  ► xmlparser;  ► inc;  TDOMParser.h;  TSAXParser.h;  TXMLAttr.h;  TXMLDocument.h;  TXMLNode.h;  TXMLParser.h;  ► src;  TDOMParser.cxx;  TSAXParser.cxx;  TXMLAttr.cxx;  TXMLDocument.cxx;  TXMLNode.cxx;  TXMLParser.cxx;  ► math;  ► fftw;  ► inc;  TFFTComplex.h;  TFFTComplexReal.h;  TFFTReal.h;  TFFTRealComplex.h;  ► src;  TFFTComplex.cxx;  TFFTComplexReal.cxx;  TFFTReal.cxx;  TFFTRealComplex.cxx;  ► foam;  ► inc;  TFoam.h;  TFoamCell.h;  TFoamIntegrand.h;  TFoamMaxwt.h;  TFoamSampler.h;  TFoamVect.h;  ► src;  TFoam.cxx;  TFoamCell.cxx;  TFoamIntegrand.cxx;  TFoamMaxwt.cxx;  TFoamSampler.cxx;  TFoamVect.cxx;  ► fumili;  ► inc;  TFumili.h;  TFumiliMinimizer.h;  ► src;  TFumili.cxx;  TFumiliMinimizer.cxx;  ► genetic;  ► inc;  ► Math;  GeneticMinimizer.h;  ► src;  GeneticMinimizer.cxx;  ► test;  GAMinTutorial.cxx;  testGAMinimizer.cxx;  timeGA.cxx;  ► genvector;  ► inc;  ► Math;  ► GenVector;  3DConversions.h;  3DDistances.h;  AxisAngle.h;  AxisAnglefwd.h;  BitReproducible.h;  Boost.h;  Boostfwd.h;  BoostX.h;  BoostXfwd.h;  BoostY.h;  BoostYfwd.h;  BoostZ.h;  BoostZfwd.h;  Cartesian2D.h;  Cartesian2Dfwd.h;  Cartesian3D.h;  Cartesian3Dfwd.h;  CoordinateSystemTags.h;  Cylindrical3D.h;  Cylindrical3Dfwd.h;  CylindricalEta3D.h;  CylindricalEta3Dfwd.h;  DisplacementVector2D.h;  DisplacementVector2Dfwd.h;  DisplacementVector3D.h;  DisplacementVector3Dfwd.h;  eta.h;  etaMax.h;  EulerAngles.h;  EulerAnglesfwd.h;  GenVector_exception.h;  GenVectorIO.h;  LorentzRotation.h;  LorentzRotationfwd.h;  LorentzVector.h;  LorentzVectorfwd.h;  Plane3D.h;  Polar2D.h;  Polar2Dfwd.h;  Polar3D.h;  Polar3Dfwd.h;  PositionVector2D.h;  PositionVector2Dfwd.h;  PositionVector3D.h;  PositionVector3Dfwd.h;  PtEtaPhiE4D.h;  PtEtaPhiE4Dfwd.h;  PtEtaPhiM4D.h;  PtEtaPhiM4Dfwd.h;  PxPyPzE4D.h;  PxPyPzE4Dfwd.h;  PxPyPzM4D.h;  PxPyPzM4Df,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:39051,test,testGAMinimizer,39051,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['testGAMinimizer']
Testability,  TODBCRow.cxx;  TODBCServer.cxx;  TODBCStatement.cxx;  ► oracle;  ► inc;  TOracleResult.h;  TOracleRow.h;  TOracleServer.h;  TOracleStatement.h;  ► src;  TOracleResult.cxx;  TOracleRow.cxx;  TOracleServer.cxx;  TOracleStatement.cxx;  ► pgsql;  ► inc;  TPgSQLResult.h;  TPgSQLRow.h;  TPgSQLServer.h;  TPgSQLStatement.h;  ► src;  TPgSQLResult.cxx;  TPgSQLRow.cxx;  TPgSQLServer.cxx;  TPgSQLStatement.cxx;  ► sapdb;  ► inc;  TSapDBResult.h;  TSapDBRow.h;  TSapDBServer.h;  ► src;  TSapDBResult.cxx;  TSapDBRow.cxx;  TSapDBServer.cxx;  ► sqlite;  ► inc;  TSQLiteResult.h;  TSQLiteRow.h;  TSQLiteServer.h;  TSQLiteStatement.h;  ► src;  TSQLiteResult.cxx;  TSQLiteRow.cxx;  TSQLiteServer.cxx;  TSQLiteStatement.cxx;  ► tmva;  ► pymva;  ► inc;  ► TMVA;  MethodPyAdaBoost.h;  MethodPyGTB.h;  MethodPyKeras.h;  MethodPyRandomForest.h;  PyMethodBase.h;  ► src;  MethodPyAdaBoost.cxx;  MethodPyGTB.cxx;  MethodPyKeras.cxx;  MethodPyRandomForest.cxx;  PyMethodBase.cxx;  ► test;  Classification.C;  testPyAdaBoostClassification.C;  testPyAdaBoostMulticlass.C;  testPyGTBClassification.C;  testPyGTBMulticlass.C;  testPyKerasClassification.C;  testPyKerasMulticlass.C;  testPyKerasRegression.C;  testPyRandomForestClassification.C;  testPyRandomForestMulticlass.C;  ► rmva;  ► inc;  ► TMVA;  MethodC50.h;  MethodRSNNS.h;  MethodRSVM.h;  MethodRXGB.h;  RMethodBase.h;  ► src;  MethodC50.cxx;  MethodRSNNS.cxx;  MethodRSVM.cxx;  MethodRXGB.cxx;  RMethodBase.cxx;  ► test;  Classification.C;  ► tmva;  ► inc;  ► TMVA;  ► DNN;  ► Architectures;  ► Cpu;  Blas.h;  CpuBuffer.h;  CpuMatrix.h;  ► Cuda;  CudaBuffers.h;  CudaMatrix.h;  Device.h;  Cpu.h;  Cuda.h;  Reference.h;  DataLoader.h;  Functions.h;  Layer.h;  Minimizers.h;  Net.h;  BDTEventWrapper.h;  BinarySearchTree.h;  BinarySearchTreeNode.h;  BinaryTree.h;  CCPruner.h;  CCTreeWrapper.h;  ClassifierFactory.h;  ClassInfo.h;  Config.h;  Configurable.h;  ConvergenceTest.h;  CostComplexityPruneTool.h;  CrossEntropy.h;  CrossValidation.h;  DataInputHandler.h;  ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:85100,test,testPyAdaBoostClassification,85100,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['testPyAdaBoostClassification']
Testability,  TrackLinkDef.h;  ► splot;  ► inc;  LinkDef.h;  TSPlot.h;  ► src;  TSPlot.cxx;  ► unuran;  ► inc;  LinkDef.h;  TUnuran.h;  TUnuranBaseDist.h;  TUnuranContDist.h;  TUnuranDiscrDist.h;  TUnuranEmpDist.h;  TUnuranMultiContDist.h;  TUnuranSampler.h;  ► src;  TUnuran.cxx;  TUnuranContDist.cxx;  TUnuranDiscrDist.cxx;  TUnuranEmpDist.cxx;  TUnuranMultiContDist.cxx;  TUnuranSampler.cxx;  UnuranDistr.h;  UnuranDistrAdapter.h;  UnuranRng.h;  ► test;  unuranDiscrete.cxx;  unuranDistr.cxx;  unuranHist.cxx;  unuranMulti2D.cxx;  unuranMultiDim.cxx;  unuranSimple.cxx;  ► vdt;  ► include;  ► vdt;  asin.h;  atan.h;  atan2.h;  cos.h;  exp.h;  inv.h;  log.h;  sin.h;  sincos.h;  sqrt.h;  tan.h;  vdtcore_common.h;  vdtMath.h;  ► tests;  stressVdt.cxx;  ► misc;  ► memstat;  ► inc;  LinkDef.h;  TMemStat.h;  TMemStatBacktrace.h;  TMemStatDef.h;  TMemStatHelpers.h;  TMemStatHook.h;  TMemStatMng.h;  ► src;  TMemStat.cxx;  TMemStatBacktrace.cxx;  TMemStatHelpers.cxx;  TMemStatHook.cxx;  TMemStatMng.cxx;  ► test;  leak_test.C;  run.C;  ► table;  ► inc;  LinkDef.h;  tableDescriptor.h;  TCernLib.h;  TChair.h;  TColumnView.h;  TDataSet.h;  TDataSetIter.h;  TDsKey.h;  TFileIter.h;  TFileSet.h;  TGenericTable.h;  TIndexTable.h;  TObjectSet.h;  TPoints3D.h;  TPointsArray3D.h;  TPolyLineShape.h;  TResponseTable.h;  TTable.h;  TTable3Points.h;  TTableDescriptor.h;  TTableIter.h;  TTableMap.h;  TTablePadView3D.h;  TTablePoints.h;  TTableSorter.h;  Ttypes.h;  TVolume.h;  TVolumePosition.h;  TVolumeView.h;  TVolumeViewIter.h;  ► src;  TCernLib.cxx;  TChair.cxx;  TColumnView.cxx;  TDataSet.cxx;  TDataSetIter.cxx;  TDsKey.cxx;  TFileIter.cxx;  TFileSet.cxx;  TGenericTable.cxx;  TIndexTable.cxx;  TObjectSet.cxx;  TPoints3D.cxx;  TPointsArray3D.cxx;  TPolyLineShape.cxx;  TResponseTable.cxx;  TTable.cxx;  TTable3Points.cxx;  TTableDescriptor.cxx;  TTableIter.cxx;  TTableMap.cxx;  TTablePadView3D.cxx;  TTablePoints.cxx;  TTableSorter.cxx;  TVolume.cxx;  TVolumePosition.cxx;  TVolumeView.cxx;  TVolumeViewIter.c,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:58489,test,test,58489,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['test'],['test']
Testability,"  backprop learning mode (sequential or batch) ;  ; TString fBpModeS;  backprop learning mode option string (sequential or batch) ;  ; bool fCalculateErrors;  compute inverse hessian matrix at the end of the training ;  ; Double_t fDecayRate;  decay rate for above learning rate ;  ; std::vector< std::pair< Float_t, Float_t > > * fDeviationsFromTargets;  deviation from the targets, event weight ;  ; Bool_t fEpochMon;  create and fill epoch-wise monitoring histograms (makes outputfile big!) ;  ; Int_t fGA_nsteps;  GA settings: number of steps. ;  ; Int_t fGA_preCalc;  GA settings: number of pre-calc steps. ;  ; Double_t fGA_SC_factor;  GA settings: SC_factor. ;  ; Int_t fGA_SC_rate;  GA settings: SC_rate. ;  ; Int_t fGA_SC_steps;  GA settings: SC_steps. ;  ; Double_t fLastAlpha;  line search variable ;  ; Double_t fLearnRate;  learning rate for synapse weight adjustments ;  ; Double_t fPrior;  zjh ;  ; std::vector< Double_t > fPriorDev;  zjh ;  ; Int_t fResetStep;  reset time (how often we clear hessian matrix) ;  ; Float_t fSamplingEpoch;  fraction of epochs where sampling is used ;  ; Float_t fSamplingFraction;  fraction of events which is sampled for training ;  ; Bool_t fSamplingTesting;  The testing sample is sampled. ;  ; Bool_t fSamplingTraining;  The training sample is sampled. ;  ; Float_t fSamplingWeight;  changing factor for event weights when sampling is turned on ;  ; Double_t fTau;  line search variable ;  ; Int_t fTestRate;  test for overtraining performed at each #th epochs ;  ; ETrainingMethod fTrainingMethod;  method of training, BP or GA ;  ; TString fTrainMethodS;  training method option param ;  ; Int_t fUpdateLimit;  zjh ;  ; bool fUseRegulator;  zjh ;  ; Float_t fWeightRange;  suppress outliers for the estimator calculation ;  . Static Private Attributes; static const Bool_t fgPRINT_BATCH = kFALSE;  debug flags ;  ; static const Int_t fgPRINT_ESTIMATOR_INC = 10;  debug flags ;  ; static const Bool_t fgPRINT_SEQ = kFALSE;  debug flags ;  . Additio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html:35136,test,testing,35136,doc/master/classTMVA_1_1MethodMLP.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html,1,['test'],['testing']
Testability,  debug.h;  helperimpl.h;  intrinsics.h;  limits.h;  macros.h;  mask.h;  math.h;  shuffle.h;  types.h;  undomacros.h;  vector.h;  vectorhelper.h;  cpuid.h;  global.h;  support.h;  vector.h;  version.h;  ► src;  avx_sorthelper.cpp;  const.cpp;  cpuid.cpp;  support.cpp;  trigonometric.cpp;  ► tests;  arithmetics.cpp;  casts.cpp;  const.h;  convert-sincos-reference.cpp;  deinterleave.cpp;  expandandmerge.cpp;  gather.cpp;  implicit_type_conversion.cpp;  implicit_type_conversion_failures.cpp;  linkTest0.cpp;  linkTest1.cpp;  linkTestLib0.cpp;  linkTestLib1.cpp;  linkTestLib2.cpp;  linkTestLib3.cpp;  load.cpp;  mask.cpp;  math.cpp;  memory.cpp;  scalaraccess.cpp;  scatter.cpp;  sse_blend.cpp;  stlcontainer.cpp;  store.cpp;  supportfunctions.cpp;  swizzles.cpp;  ulp.h;  unittest.h;  utils.cpp;  vectormemoryhelper.h;  makeTest.py;  ► vdt;  ► include;  ► vdt;  asin.h;  atan.h;  atan2.h;  cos.h;  exp.h;  inv.h;  log.h;  sin.h;  sincos.h;  sqrt.h;  tan.h;  vdtcore_common.h;  vdtMath.h;  ► tests;  stressVdt.cxx;  ► misc;  ► memstat;  ► inc;  LinkDef.h;  TMemStat.h;  TMemStatBacktrace.h;  TMemStatDef.h;  TMemStatHelpers.h;  TMemStatHook.h;  TMemStatMng.h;  ► src;  TMemStat.cxx;  TMemStatBacktrace.cxx;  TMemStatHelpers.cxx;  TMemStatHook.cxx;  TMemStatMng.cxx;  ► test;  leak_test.C;  run.C;  ► table;  ► inc;  LinkDef.h;  tableDescriptor.h;  TCernLib.h;  TChair.h;  TColumnView.h;  TDataSet.h;  TDataSetIter.h;  TDsKey.h;  TFileIter.h;  TFileSet.h;  TGenericTable.h;  TIndexTable.h;  TObjectSet.h;  TPoints3D.h;  TPointsArray3D.h;  TPolyLineShape.h;  TResponseTable.h;  TTable.h;  TTable3Points.h;  TTableDescriptor.h;  TTableIter.h;  TTableMap.h;  TTablePadView3D.h;  TTablePoints.h;  TTableSorter.h;  Ttypes.h;  TVolume.h;  TVolumePosition.h;  TVolumeView.h;  TVolumeViewIter.h;  ► src;  TCernLib.cxx;  TChair.cxx;  TColumnView.cxx;  TDataSet.cxx;  TDataSetIter.cxx;  TDsKey.cxx;  TFileIter.cxx;  TFileSet.cxx;  TGenericTable.cxx;  TIndexTable.cxx;  TObjectSet.cxx;  TPoints3D.cxx;  TPoints,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:59851,test,tests,59851,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,1,['test'],['tests']
Testability,"  hksimple.C;   Illustrates the advantages of a TH1K histogram ;  ; file  hlabels1.C;   1-D histograms with alphanumeric labels ;  ; file  hlabels2.C;   2-D histograms with alphanumeric labels. ;  ; file  hlHisto1.C;  This tutorial demonstrates how the highlight mechanism can be used on an histogram. ;  ; file  hlHisto2.C;  This tutorial demonstrates how the highlight mechanism can be used on an histogram. ;  ; file  hlHisto3.C;  This tutorial demonstrates how the highlight mechanism can be used on a ntuple. ;  ; file  hlHisto4.C;  This tutorial demonstrates how the highlight mechanism can be used on an histogram. ;  ; file  hstack.C;   Example of stacked histograms: class THStack. ;  ; file  hstackpads.C;   Drawing stack histograms on subpads. ;  ; file  hsum.C;   Histograms filled and drawn in a loop. ;  ; file  hsumTimer.C;   Demo of Timers. ;  ; file  legendautoplaced.C;   The legend can be placed automatically in the current pad in an empty space found at painting time. ;  ; file  logscales.C;   Draw parametric functions with log scales. ;  ; file  movepalette.C;   When an histogram is drawn with the option COLZ, a palette is automatically drawn vertically on the right side of the plot. ;  ; file  multicolor.C;   Use a THStack to show a 2-D hist with cells with different colors. ;  ; file  NormalizeHistogram.C;   Normalizing a Histogram ;  ; file  ratioplot1.C;   Example creating a simple ratio plot of two histograms using the pois division option. ;  ; file  ratioplot1.py;   Example creating a simple ratio plot of two histograms using the pois division option. ;  ; file  ratioplot2.C;   Example of a fit residual plot. ;  ; file  ratioplot2.py;   Example of a fit residual plot. ;  ; file  ratioplot3.C;   Example which shows how you can get the graph of the lower plot and set the y axis range for it. ;  ; file  ratioplot3.py;   Example which shows how you can get the graph of the lower plot and set the y axis range for it. ;  ; file  ratioplot4.C;   Example that",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__hist.html:3297,log,logscales,3297,doc/master/group__tutorial__hist.html,https://root.cern,https://root.cern/doc/master/group__tutorial__hist.html,1,['log'],['logscales']
Testability,  kalman.C;  matrix_op.h;  matrix_util.h;  matrixOperations.C;  stressKalman.cxx;  stressOperations.cxx;  testInversion.cxx;  testIO.cxx;  testKalman.cxx;  testOperations.cxx;  testSMatrix.cxx;  TestTimer.h;  Track.h;  TrackLinkDef.h;  ► splot;  ► inc;  TSPlot.h;  ► src;  TSPlot.cxx;  ► unuran;  ► inc;  TUnuran.h;  TUnuranBaseDist.h;  TUnuranContDist.h;  TUnuranDiscrDist.h;  TUnuranEmpDist.h;  TUnuranMultiContDist.h;  TUnuranSampler.h;  ► src;  TUnuran.cxx;  TUnuranContDist.cxx;  TUnuranDiscrDist.cxx;  TUnuranEmpDist.cxx;  TUnuranMultiContDist.cxx;  TUnuranSampler.cxx;  UnuranDistr.h;  UnuranDistrAdapter.h;  UnuranRng.h;  ► test;  unuranDiscrete.cxx;  unuranDistr.cxx;  unuranHist.cxx;  unuranMulti2D.cxx;  unuranMultiDim.cxx;  unuranSimple.cxx;  ► misc;  ► memstat;  ► inc;  TMemStat.h;  TMemStatBacktrace.h;  TMemStatDef.h;  TMemStatHelpers.h;  TMemStatHook.h;  TMemStatMng.h;  ► src;  TMemStat.cxx;  TMemStatBacktrace.cxx;  TMemStatHelpers.cxx;  TMemStatHook.cxx;  TMemStatMng.cxx;  ► test;  leak_test.C;  run.C;  ► table;  ► inc;  tableDescriptor.h;  TCernLib.h;  TChair.h;  TColumnView.h;  TDataSet.h;  TDataSetIter.h;  TDsKey.h;  TFileIter.h;  TFileSet.h;  TGenericTable.h;  TIndexTable.h;  TObjectSet.h;  TPoints3D.h;  TPointsArray3D.h;  TPolyLineShape.h;  TResponseTable.h;  TTable.h;  TTable3Points.h;  TTableDescriptor.h;  TTableIter.h;  TTableMap.h;  TTablePadView3D.h;  TTablePoints.h;  TTableSorter.h;  Ttypes.h;  TVolume.h;  TVolumePosition.h;  TVolumeView.h;  TVolumeViewIter.h;  ► src;  TCernLib.cxx;  TChair.cxx;  TColumnView.cxx;  TDataSet.cxx;  TDataSetIter.cxx;  TDsKey.cxx;  TFileIter.cxx;  TFileSet.cxx;  TGenericTable.cxx;  TIndexTable.cxx;  TObjectSet.cxx;  TPoints3D.cxx;  TPointsArray3D.cxx;  TPolyLineShape.cxx;  TResponseTable.cxx;  TTable.cxx;  TTable3Points.cxx;  TTableDescriptor.cxx;  TTableIter.cxx;  TTableMap.cxx;  TTablePadView3D.cxx;  TTablePoints.cxx;  TTableSorter.cxx;  TVolume.cxx;  TVolumePosition.cxx;  TVolumeView.cxx;  TVolumeViewIter.cxx;  ► monte,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:56754,test,test,56754,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['test']
Testability,"  main constructor ;  ; virtual ~RuleCut ();  destructor ;  ; Bool_t EvalEvent (const Event &eve);  ; Char_t GetCutDoMax (Int_t is) const;  ; Char_t GetCutDoMin (Int_t is) const;  ; Double_t GetCutMax (Int_t is) const;  ; Double_t GetCutMin (Int_t is) const;  ; Double_t GetCutNeve () const;  ; Bool_t GetCutRange (Int_t sel, Double_t &rmin, Double_t &rmax, Bool_t &dormin, Bool_t &dormax) const;  get cut range for a given selector ;  ; UInt_t GetNcuts () const;  get number of cuts ;  ; UInt_t GetNvars () const;  ; Double_t GetPurity () const;  ; UInt_t GetSelector (Int_t is) const;  ; void SetCutDoMax (Int_t i, Bool_t v);  ; void SetCutDoMin (Int_t i, Bool_t v);  ; void SetCutMax (Int_t i, Double_t v);  ; void SetCutMin (Int_t i, Double_t v);  ; void SetNeve (Double_t n);  ; void SetNvars (UInt_t nc);  ; void SetPurity (Double_t ssb);  ; void SetSelector (Int_t i, UInt_t s);  . Private Member Functions; void Copy (const RuleCut &other);  ; MsgLogger & Log () const;  message logger ;  ; void MakeCuts (const std::vector< const TMVA::Node * > &nodes);  Construct the cuts from the given array of nodes. ;  . Private Attributes; std::vector< Char_t > fCutDoMax;  ; std::vector< Char_t > fCutDoMin;  ; std::vector< Double_t > fCutMax;  ; std::vector< Double_t > fCutMin;  ; Double_t fCutNeve;  ; MsgLogger * fLogger;  ; Double_t fPurity;  ; std::vector< UInt_t > fSelector;  . #include <TMVA/RuleCut.h>; Constructor & Destructor Documentation. ◆ RuleCut() [1/3]. TMVA::RuleCut::RuleCut ; (; const std::vector< const TMVA::Node * > & ; nodes). main constructor ; Definition at line 40 of file RuleCut.cxx. ◆ RuleCut() [2/3]. TMVA::RuleCut::RuleCut ; (; const RuleCut & ; other). inline . Definition at line 44 of file RuleCut.h. ◆ RuleCut() [3/3]. TMVA::RuleCut::RuleCut ; (; ). empty constructor ; Definition at line 51 of file RuleCut.cxx. ◆ ~RuleCut(). TMVA::RuleCut::~RuleCut ; (; ). virtual . destructor ; Definition at line 61 of file RuleCut.cxx. Member Function Documentation. ◆ Copy()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleCut.html:1498,log,logger,1498,doc/master/classTMVA_1_1RuleCut.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleCut.html,1,['log'],['logger']
Testability,"  na49view.pyThis macro generates two views of the NA49 detector ;  na49visible.pySet visibility attributes for the NA49 geometry Set Shape attributes ;  ntuple1.py Ntuple drawing example ;  numberEntry.py;  parse_CSV_file_with_TTree_ReadStream.pyThis function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream ;  pyroot001_arrayInterface.py This tutorial illustrates the conversion of STL vectors and TVec to numpy arrays without copying the data ;  pyroot002_TTreeAsMatrix.py This tutorial shows how a TTree can be quickly converted to a numpy array or a pandas.DataFrame ;  pyroot003_prettyPrinting.py This tutorial illustrates the pretty printing feature of PyROOT, which reveals the content of the object if a string representation is requested, e.g., by Python's print statement ;  qtexample.pyQt example ;  ratioplot.py Display two histograms and their ratio ;  rootmarks.pyPrints a summary of all ROOT benchmarks (must be run before) The ROOTMARK number printed is by reference to a Pentium IV 2.4 Ghz (with 512 MBytes memory and 120 GBytes IDE disk) taken by definition as 600 ROOTMARKS in batch mode in executing python benchmarks.py ;  shapes.py Draw the geometry using the x3d viewver ;  staff.py example of macro to read data from an ascii file and create a root file with a Tree ;  surfaces.py Surfaces example ;  test.py ;  tornado.pyTornado example ;  tree.py This macro displays the Tree data structures ;  zdemo.py This macro is an example of graphs in log scales with annotations ;  ► pythia;  pythia8.CPythia8 basic example ;  pythiaExample.CUsing Pythia6 with ROOT ;  ► quadp;  portfolio.C This macro shows in detail the use of the quadratic programming package quadp ;  Quad.cxx;  Quad.h;  ► r;  DataFrame.C ;  example.C Simple example on how to use ROOT-R interface ;  Function.C ;  Functor.C Example to create class Functor ;  GlobalMinimization.C Example based in http://cran.r-project.org/web/packages/DEoptim/DEopti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:146371,benchmark,benchmarks,146371,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['benchmark'],['benchmarks']
Testability,  ► pgsql;  ► inc;  TPgSQLResult.h;  TPgSQLRow.h;  TPgSQLServer.h;  TPgSQLStatement.h;  ► src;  TPgSQLResult.cxx;  TPgSQLRow.cxx;  TPgSQLServer.cxx;  TPgSQLStatement.cxx;  ► sapdb;  ► inc;  TSapDBResult.h;  TSapDBRow.h;  TSapDBServer.h;  ► src;  TSapDBResult.cxx;  TSapDBRow.cxx;  TSapDBServer.cxx;  ► sqlite;  ► inc;  TSQLiteResult.h;  TSQLiteRow.h;  TSQLiteServer.h;  TSQLiteStatement.h;  ► src;  TSQLiteResult.cxx;  TSQLiteRow.cxx;  TSQLiteServer.cxx;  TSQLiteStatement.cxx;  ► tmva;  ► pymva;  ► inc;  ► TMVA;  MethodPyAdaBoost.h;  MethodPyGTB.h;  MethodPyKeras.h;  MethodPyRandomForest.h;  PyMethodBase.h;  ► src;  MethodPyAdaBoost.cxx;  MethodPyGTB.cxx;  MethodPyKeras.cxx;  MethodPyRandomForest.cxx;  PyMethodBase.cxx;  ► test;  Classification.C;  testPyAdaBoostClassification.C;  testPyAdaBoostMulticlass.C;  testPyGTBClassification.C;  testPyGTBMulticlass.C;  testPyKerasClassification.C;  testPyKerasMulticlass.C;  testPyKerasRegression.C;  testPyRandomForestClassification.C;  testPyRandomForestMulticlass.C;  ► rmva;  ► inc;  ► TMVA;  MethodC50.h;  MethodRSNNS.h;  MethodRSVM.h;  MethodRXGB.h;  RMethodBase.h;  ► src;  MethodC50.cxx;  MethodRSNNS.cxx;  MethodRSVM.cxx;  MethodRXGB.cxx;  RMethodBase.cxx;  ► test;  Classification.C;  ► tmva;  ► inc;  ► TMVA;  ► DNN;  ► Architectures;  ► Cpu;  Blas.h;  CpuBuffer.h;  CpuMatrix.h;  ► Cuda;  CudaBuffers.h;  CudaMatrix.h;  Device.h;  Cpu.h;  Cuda.h;  Reference.h;  DataLoader.h;  Functions.h;  Layer.h;  Minimizers.h;  Net.h;  BDTEventWrapper.h;  BinarySearchTree.h;  BinarySearchTreeNode.h;  BinaryTree.h;  CCPruner.h;  CCTreeWrapper.h;  ClassifierFactory.h;  ClassInfo.h;  Config.h;  Configurable.h;  ConvergenceTest.h;  CostComplexityPruneTool.h;  CrossEntropy.h;  CrossValidation.h;  DataInputHandler.h;  DataLoader.h;  DataSet.h;  DataSetFactory.h;  DataSetInfo.h;  DataSetManager.h;  DecisionTree.h;  DecisionTreeNode.h;  Envelope.h;  Event.h;  ExpectedErrorPruneTool.h;  Factory.h;  FitterBase.h;  GeneticAlgorithm.h;  GeneticFitter.h;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:85333,test,testPyRandomForestMulticlass,85333,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['testPyRandomForestMulticlass']
Testability, ␛[0;36mdataset/weights/TMVAClassification_MLPBNN.weights.xml␛[0m; MLPBNN : Building Network. ; : Initializing weights; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_DNN_CPU.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_SVM.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_BDT.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_RuleFit.weights.xml␛[0m; Factory : ␛[1mTest all methods␛[0m; Factory : Test method: Cuts for Classification performance; : ; Cuts : [dataset] : Evaluation of Cuts on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.00226 sec ; Factory : Test method: CutsD for Classification performance; : ; CutsD : [dataset] : Evaluation of CutsD on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.00756 sec ; Factory : Test method: Likelihood for Classification performance; : ; Likelihood : [dataset] : Evaluation of Likelihood on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.0108 sec ; Factory : Test method: LikelihoodPCA for Classification performance; : ; LikelihoodPCA : [dataset] : Evaluation of LikelihoodPCA on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.0197 sec ; Factory : Test method: PDERS for Classification performance; : ; PDERS : [dataset] : Evaluation of PDERS on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.937 sec ; Factory : Test method: PDEFoam for Classification performance; : ; PDEFoam : [dataset] : Evaluation of PDEFoam on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.072 sec ; Factory : Test method: KNN for Classification performance; : ; KNN : [dataset] : Evaluation of KNN on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.2 sec ; Factory : Test method: LD for Classification performance; : ; LD : ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:65789,test,testing,65789,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['test'],['testing']
Testability," ◆ Class(). static TClass * RooStats::LikelihoodIntervalPlot::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooStats::LikelihoodIntervalPlot::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooStats::LikelihoodIntervalPlot::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 93 of file LikelihoodIntervalPlot.h. ◆ DeclFileName(). static const char * RooStats::LikelihoodIntervalPlot::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 93 of file LikelihoodIntervalPlot.h. ◆ Draw(). void LikelihoodIntervalPlot::Draw ; (; const Option_t * ; options = nullptr). override . draw the likelihood interval or contour for the 1D case a RooPlot is drawn by default of the profiled Log-Likelihood ratio if option ""TF1"" is used the objects are drawn using a TF1 scanning the LL function in a grid of the set points (by default the TF1 can be customized by setting maximum and the number of points to scan ; draw the log of the profiled likelihood function in 1D with the interval or as a 2D plot with the contours.; Higher dimensional intervals cannot be drawn. One needs to call SetPlotParameters to project interval in 1 or 2dim. Options for drawing 1D intervals; For 1D problem the log of the profiled likelihood function is drawn by default in a RooPlot as a RooCurve The plotting range (default is the full parameter range) and the precision of the RooCurve can be specified by using SetRange(x1,x2) and SetPrecision(eps). SetNPoints(npoints) can also be used (default is npoints=100) Optionally the function can be drawn as a TF1 (option=""tf1"") obtained by sampling the given npoints in the given range. Options for drawing 2D intervals; For 2D case, a contour and optionally the profiled likelihood function is drawn by sampling npoints in the given range. A 2d histogram of nbinsX=nbinsY =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1LikelihoodIntervalPlot.html:17597,log,log,17597,doc/master/classRooStats_1_1LikelihoodIntervalPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1LikelihoodIntervalPlot.html,1,['log'],['log']
Testability," ◆ GetStop(). Int_t TProofBenchRunCPU::GetStop ; (; ); const. inline . Definition at line 122 of file TProofBenchRunCPU.h. ◆ IsA(). TClass * TProofBenchRunCPU::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TProofBenchRun.; Definition at line 133 of file TProofBenchRunCPU.h. ◆ Print(). void TProofBenchRunCPU::Print ; (; Option_t * ; option = """"); const. overridevirtual . Show settings. ; Implements TProofBenchRun.; Definition at line 593 of file TProofBenchRunCPU.cxx. ◆ Run() [1/2]. void TProofBenchRunCPU::Run ; (; const char * ; , . Int_t ; , . Int_t ; , . Int_t ; , . Int_t ; , . Int_t ; , . Int_t ;  . ). inlineoverridevirtual . Implements TProofBenchRun.; Definition at line 99 of file TProofBenchRunCPU.h. ◆ Run() [2/2]. void TProofBenchRunCPU::Run ; (; Long64_t ; nevents, . Int_t ; start, . Int_t ; stop, . Int_t ; step, . Int_t ; ntries, . Int_t ; debug, . Int_t ; draw . ). overridevirtual . Run benchmark Input parameters nevents: Number of events to run per file. ; When it is -1, use data member fNEvents. start: Start scan with 'start' workers. When it is -1, use data member fStart. When 0, the same number of workers are activated on all nodes. stop: Stop scan at 'stop' workers. When it is -1 , use data member fStop. step: Scan every 'step' workers. When it is -1, use data member fStep. ntries: Number of repetitions. When it is -1, use data member fNTries. debug: debug switch. When it is -1, use data member fDebug. draw: draw switch. When it is -1, use data member fDraw. Returns Nothing ; Implements TProofBenchRun.; Definition at line 242 of file TProofBenchRunCPU.cxx. ◆ SetDebug(). void TProofBenchRunCPU::SetDebug ; (; Int_t ; debug). inline . Definition at line 113 of file TProofBenchRunCPU.h. ◆ SetDirProofBench(). void TProofBenchRunCPU::SetDirProofBench ; (; TDirectory * ; dir). inline . Definition at line 115 of file TProofBenchRunCPU.h. ◆ SetDraw(). void TProofBenchRunCPU::SetDraw ; (; Int_t ; draw). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofBenchRunCPU.html:18280,benchmark,benchmark,18280,doc/master/classTProofBenchRunCPU.html,https://root.cern,https://root.cern/doc/master/classTProofBenchRunCPU.html,1,['benchmark'],['benchmark']
Testability, ◆ _binWidth. double RooKeysPdf::_binWidth. private . Definition at line 77 of file RooKeysPdf.h. ◆ _dataPts. double* RooKeysPdf::_dataPts = nullptr. private . Definition at line 60 of file RooKeysPdf.h. ◆ _dataWgts. double* RooKeysPdf::_dataWgts = nullptr. private . Definition at line 61 of file RooKeysPdf.h. ◆ _hi. double RooKeysPdf::_hi. private . Definition at line 77 of file RooKeysPdf.h. ◆ _lo. double RooKeysPdf::_lo. private . Definition at line 77 of file RooKeysPdf.h. ◆ _lookupTable. double RooKeysPdf::_lookupTable[_nPoints+1]. private . Definition at line 66 of file RooKeysPdf.h. ◆ _mirrorLeft. bool RooKeysPdf::_mirrorLeft = false. private . Definition at line 70 of file RooKeysPdf.h. ◆ _mirrorRight. bool RooKeysPdf::_mirrorRight = false. private . Definition at line 71 of file RooKeysPdf.h. ◆ _nEvents. Int_t RooKeysPdf::_nEvents = 0. private . Definition at line 59 of file RooKeysPdf.h. ◆ _nPoints. constexpr int RooKeysPdf::_nPoints {1000}. staticconstexprprivate . Definition at line 65 of file RooKeysPdf.h. ◆ _nSigma. const double RooKeysPdf::_nSigma. staticprivate . Initial value:= std::sqrt(-2. *; std::log(std::numeric_limits<double>::epsilon())). Definition at line 57 of file RooKeysPdf.h. ◆ _rho. double RooKeysPdf::_rho. private . Definition at line 78 of file RooKeysPdf.h. ◆ _sumWgt. double RooKeysPdf::_sumWgt = 0.0. private . Definition at line 63 of file RooKeysPdf.h. ◆ _varName. Char_t RooKeysPdf::_varName[128]. private . Definition at line 76 of file RooKeysPdf.h. ◆ _weights. double* RooKeysPdf::_weights = nullptr. private . Definition at line 62 of file RooKeysPdf.h. ◆ _x. RooRealProxy RooKeysPdf::_x. protected . Definition at line 51 of file RooKeysPdf.h. Libraries for RooKeysPdf:. [legend]; The documentation for this class was generated from the following files:; roofit/roofit/inc/RooKeysPdf.h; roofit/roofit/src/RooKeysPdf.cxx. RooKeysPdf. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:57 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooKeysPdf.html:81306,log,log,81306,doc/master/classRooKeysPdf.html,https://root.cern,https://root.cern/doc/master/classRooKeysPdf.html,1,['log'],['log']
Testability,"! display-list id base; Bool_tTGLLogicalShape::fDLCache! use display list caching; Int_tTGLLogicalShape::fDLSize! display-list size for different LODs; UShort_tTGLLogicalShape::fDLValid! display-list validity bit-field; TObject*TGLLogicalShape::fExternalObj! Also plays the role of ID.; TGLPhysicalShape*TGLLogicalShape::fFirstPhysical! first replica; Bool_tTGLObject::fMultiColorAre multiple colors used for object rendering.; Bool_tTGLLogicalShape::fOwnExtObj! External object is a fake; TGLPlotPainter*fPlotPainter; UInt_tTGLLogicalShape::fRef! physical instance ref counting; Bool_tTGLLogicalShape::fRefStrong! Strong ref (delete on 0 ref); not in scene; TGLScene*TGLLogicalShape::fScene! scene where object is stored (can be zero!); static Bool_tTGLLogicalShape::fgIgnoreSizeForCameraInterest. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TGLPlot3D(); Destructor. void SetPainter(TGLPlotPainter* p); Set painter object and destroy the old one. TGLPlot3D* InstantiatePlot(TObject* obj); Instantiate the correct plot-painter for given object.; Protected method. TGLPlot3D* CreatePlot(TH3* h, TPolyMarker3D* pm); Create GL plot for specified TH3 and polymarker. TGLPlot3D* CreatePlot(TObject* obj, Option_t* opt, TVirtualPad* pad); Create GL plot for specified object and options.; Which axes are logarithmic is determined from a pad. TGLPlot3D* CreatePlot(TObject* obj, Option_t* opt, Bool_t logx, Bool_t logy, Bool_t logz); Create GL plot for specified object and options.; Which axes are logarithmic is determined from explicit arguments. TGLPlot3D& operator=(const TGLPlot3D& ). Bool_t KeepDuringSmartRefresh() const; { return kFALSE; }. » Author: Matevz Tadel 2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-03-13 19:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLPlot3D.html:5036,log,logarithmic,5036,root/html534/TGLPlot3D.html,https://root.cern,https://root.cern/root/html534/TGLPlot3D.html,5,['log'],"['logarithmic', 'logx', 'logy', 'logz']"
Testability,"!' to use Softmax neurons for the; output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument.; training and test are two cuts (see TTreeFormula) defining events; to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor,; or later with the suited setter method. ~TMultiLayerPerceptron(); Destructor. void SetData(TTree* ); Set the data source. void SetEventWeight(const char* ); Set the event weight. void SetTrainingDataSet(TEventList* train); Sets the Training dataset.; Those events will be used for the minimization. void SetTestDataSet(TEventList* test); Sets the Test dataset.; Those events will not be used for the minimization but for control. void SetTrainingDataSet(const char* train); Sets the Training dataset.; Those events will be used for the minimization.; Note that the tree must be already defined. void SetTestDataSet(const char* test); Sets the Test dataset.; Those events will not be used for the minimization but for control.; Note that the tree must be already defined. void SetLearningMethod(TMultiLayerPerceptron::ELearningMethod method); Sets the learning method.; Available methods are: kStochastic, kBatch,; kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS.; (look at the constructor for the complete description; of learning methods and parameters). void SetEta(Double_t eta); Sets Eta - used in stochastic minimisation; (look at the constructor for the complete description; of learning methods and parameters). void SetEpsilon(Double_t eps); Sets Epsilon - used in stochastic minimisation; (look at the constructor for the complete description; of learning methods and parameters). void SetDelta(Double_t delta); Sets Delta - used in stochastic minimisation; (look at the constructor for the complete description; of learning methods and parameters). void SetEtaDecay(Double_t ed); Sets EtaDecay - Eta *= E",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:23203,test,test,23203,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,6,['test'],['test']
Testability,"!; Int_tfNewColorIndex; Int_tfNodesxnumber of nodes in x dimension of grid; Int_tfNodesynumber of nodes in y dimension of grid; Double_tfNuSli; Int_tfPenColorcolor of spectrum; Int_tfPenDashstyle of pen; Int_tfPenWidthwidth of line; Double_tfRainbow1Stepdetermines the first component step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group; Double_tfRainbow2Stepdetermines the second component step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group; Double_tfRainbow3Stepdetermines the third component step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group; Int_tfShadingdetermines whether the picture will shaded, smoothed (no shading, shading), for rainbowed display modes only; Int_tfShadowdetermines whether shadow will be drawn (no shadow, shadow), for rainbowed display modes with shading according to light; TStringTNamed::fTitleobject title; Double_tfTxx; Double_tfTxy; Double_tfTyx; Double_tfTyy; Double_tfTyz; Int_tfViewAnglerotation angle of the view, it can be 0, 90, 180, 270 degrees; Double_tfVx; Double_tfVy; Int_tfXe; Int_tfXlightx position of fictive light source, applies only for rainbowed display modes with shading according to light; Int_tfXmaxx-end channel of spectrum; Int_tfXminx-starting channel of spectrum; Int_tfXs; Int_tfXt; Int_tfYe; Int_tfYlighty position of fictive light source, applies only for rainbowed display modes with shading according to light; Int_tfYmaxy-end channel of spectrum; Int_tfYminy-starting channel of spectrum; Int_tfYs; Int_tfYt; Double_tfZ; Double_tfZPresetValue; Double_tfZeq; Int_tfZlightz position of fictive light source, applies only for rainbowed display modes with shading according to light; Double_tfZmaxcounts full scale; Double_tfZminbase counts; Int_tfZscalez scale (linear, log, sqrt).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Painter.html:13566,log,log,13566,root/html528/TSpectrum2Painter.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Painter.html,6,['log'],['log']
Testability,"!fDataErrorLowPtr );; 553 assert( fCoordErrors.size() == fDim );; 554 assert( fCoordErrorsPtr.size() == fDim );; 555 ; 556 fData[ fNPoints ] = val;; 557 ; 558 for( unsigned int i=0; i<fDim; i++ ); 559 {; 560 assert( &fCoordErrors[i].front() == fCoordErrorsPtr[i] );; 561 ; 562 fCoordErrors[i][ fNPoints ] = ex[i];; 563 }; 564 // in this case we store the y error and not the inverse; 565 fDataError[ fNPoints ] = eval;; 566 ; 567 FitData::Add( x );; 568 fSumContent += val;; 569 if (val != 0 || eval != 1.0) fSumError2 += eval*eval;; 570 if (!fIsWeighted); 571 if (val != 0 && std::abs( eval*eval/val - 1.0) > 1.E-12) fIsWeighted = true;; 572 }; 573 ; 574 /**; 575 add multi-dim coordinate data with both error in coordinates and value; 576 */; 577 void BinData::Add( const double* x, double val, const double* ex, double elval, double ehval ); 578 {; 579 assert( kAsymError == fErrorType );; 580 ; 581 assert( !fData.empty() && fDataPtr );; 582 assert( !fDataErrorHigh.empty() && fDataErrorHighPtr );; 583 assert( !fDataErrorLow.empty() && fDataErrorLowPtr );; 584 assert( fDataError.empty() && !fDataErrorPtr );; 585 assert( fCoordErrors.size() == fDim );; 586 assert( fCoordErrorsPtr.size() == fDim );; 587 ; 588 fData[ fNPoints ] = val;; 589 ; 590 for( unsigned int i=0; i<fDim; i++ ); 591 {; 592 assert( &fCoordErrors[i].front() == fCoordErrorsPtr[i] );; 593 ; 594 fCoordErrors[i][ fNPoints ] = ex[i];; 595 }; 596 ; 597 fDataErrorLow[ fNPoints ] = elval;; 598 fDataErrorHigh[ fNPoints ] = ehval;; 599 ; 600 FitData::Add( x );; 601 fSumContent += val;; 602 if (val != 0 || elval != 1.0 || ehval != 1.0 ); 603 fSumError2 += (elval+ehval)*(elval+ehval)/4;; 604 }; 605 ; 606 ; 607 /**; 608 add the bin width data, a pointer to an array with the bin upper edge information.; 609 This is needed when fitting with integral or Bin volume normalization options; 610 The information is added for the previously inserted point.; 611 BinData::Add must be called before; 612 */; 613 void BinData::AddBinUpEdg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:18081,assert,assert,18081,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['assert'],['assert']
Testability,""" << Endl;; 1352 break;; 1353 ; 1354 case kIsometricWelcomeMsg:; 1355 logger << "" ___ ___ ___ ___ "" << Endl;; 1356 logger << "" /\\ \\ /\\__\\ /\\__\\ /\\ \\ "" << Endl;; 1357 logger << "" \\:\\ \\ /::| | /:/ / /::\\ \\ "" << Endl;; 1358 logger << "" \\:\\ \\ /:|:| | /:/ / /:/\\:\\ \\ "" << Endl;; 1359 logger << "" /::\\ \\ /:/|:|__|__ /:/__/ ___ /::\\~\\:\\ \\ "" << Endl;; 1360 logger << "" /:/\\:\\__\\ /:/ |::::\\__\\ |:| | /\\__\\ /:/\\:\\ \\:\\__\\ "" << Endl;; 1361 logger << "" /:/ \\/__/ \\/__/~~/:/ / |:| |/:/ / \\/__\\:\\/:/ / "" << Endl;; 1362 logger << ""/:/ / /:/ / |:|__/:/ / \\::/ / "" << Endl;; 1363 logger << ""\\/__/ /:/ / \\::::/__/ /:/ / "" << Endl;; 1364 logger << "" /:/ / ~~~~ /:/ / "" << Endl;; 1365 logger << "" \\/__/ \\/__/ "" << Endl << Endl;; 1366 break;; 1367 ; 1368 case kBlockWelcomeMsg:; 1369 logger << Endl;; 1370 logger << ""_|_|_|_|_| _| _| _| _| _|_| "" << Endl;; 1371 logger << "" _| _|_| _|_| _| _| _| _| "" << Endl;; 1372 logger << "" _| _| _| _| _| _| _|_|_|_| "" << Endl;; 1373 logger << "" _| _| _| _| _| _| _| "" << Endl;; 1374 logger << "" _| _| _| _| _| _| "" << Endl << Endl;; 1375 break;; 1376 ; 1377 case kLeanWelcomeMsg:; 1378 logger << Endl;; 1379 logger << ""_/_/_/_/_/ _/ _/ _/ _/ _/_/ "" << Endl;; 1380 logger << "" _/ _/_/ _/_/ _/ _/ _/ _/ "" << Endl;; 1381 logger << "" _/ _/ _/ _/ _/ _/ _/_/_/_/ "" << Endl;; 1382 logger << "" _/ _/ _/ _/ _/ _/ _/ "" << Endl;; 1383 logger << ""_/ _/ _/ _/ _/ _/ "" << Endl << Endl;; 1384 break;; 1385 ; 1386 case kLogoWelcomeMsg:; 1387 logger << Endl;; 1388 logger << ""_/_/_/_/_/ _| _| _| _| _|_| "" << Endl;; 1389 logger << "" _/ _|_| _|_| _| _| _| _| "" << Endl;; 1390 logger << "" _/ _| _| _| _| _| _|_|_|_| "" << Endl;; 1391 logger << "" _/ _| _| _| _| _| _| "" << Endl;; 1392 logger << ""_/ _| _| _| _| _| "" << Endl << Endl;; 1393 break;; 1394 ; 1395 case kSmall1WelcomeMsg:; 1396 logger << "" _____ __ ____ ___ "" << Endl;; 1397 logger << ""|_ _| \\/ \\ \\ / /_\\ "" << Endl;; 1398 logger << "" | | | |\\/| |\\ V / _ \\ "" << Endl;; 1399 logger << "" |_| |",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:48484,log,logger,48484,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,1,['log'],['logger']
Testability,""" <confdir>. void HandleSocketInput(); Handle input coming from the client or from the master server. Int_t HandleSocketInput(TMessage* mess, Bool_t all); Process input coming from the client or from the master server.; If 'all' is kFALSE, process only those messages that can be handled; during query processing.; Returns -1 if the message could not be processed, <-1 if something went; wrong. Returns 1 if the action may have changed the parallel state.; Returns 2 if the message has to be enqueued.; Returns 0 otherwise. Bool_t AcceptResults(Int_t connections, TVirtualProofPlayer* mergerPlayer); Accept and merge results from a set of workers. void HandleUrgentData(); Handle Out-Of-Band data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore (i.e. when kKeepAlive; has failed). Bool_t IsParallel() const; True if in parallel mode. void Print(Option_t* option = """") const; Print status of slave server. void RedirectOutput(const char* dir = 0, const char* mode = ""w""); Redirect stdout to a log file. This log file will be flushed to the; client or master after each command. void Reset(const char* dir); Reset PROOF environment to be ready for execution of next command. Int_t ReceiveFile(const char* file, Bool_t bin, Long64_t size); Receive a file, either sent by a client or a master server.; If bin is true it is a binary file, other wise it is an ASCII; file and we need to check for Windows \r tokens. Returns -1 in; case of error, 0 otherwise. void Run(Bool_t retrn = kFALSE); Main server eventloop. void SendLogFile(Int_t status = 0, Int_t start = -1, Int_t end = -1); Send log file to master.; If start > -1 send only bytes in the range from start to end,; if end <= start send everything from start. void SendStatistics(); Send statistics of slave server to master or client. void SendParallel(Bool_t async = kFALSE); Send number of parallel nodes to master or client. Int_t UnloadPackage(const char* package); Removes link to package in wor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofServ.html:23849,log,log,23849,root/html534/TProofServ.html,https://root.cern,https://root.cern/root/html534/TProofServ.html,3,['log'],['log']
Testability,""" <confdir>. void HandleSocketInput(); Handle input coming from the client or from the master server. Int_t HandleSocketInput(TMessage* mess, Bool_t all); Process input coming from the client or from the master server.; If 'all' is kFALSE, process only those messages that can be handled; during qurey processing.; Returns -1 if the message could not be processed, <-1 if something went; wrong. Returns 1 if the action may have changed the parallel state.; Returns 2 if the message has to be enqueued.; Returns 0 otherwise. Bool_t AcceptResults(Int_t connections, TVirtualProofPlayer* mergerPlayer); Accept and merge results from a set of workers. void HandleUrgentData(); Handle Out-Of-Band data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore (i.e. when kKeepAlive; has failed). Bool_t IsParallel() const; True if in parallel mode. void Print(Option_t* option = """") const; Print status of slave server. void RedirectOutput(const char* dir = 0, const char* mode = ""w""); Redirect stdout to a log file. This log file will be flushed to the; client or master after each command. void Reset(const char* dir); Reset PROOF environment to be ready for execution of next command. Int_t ReceiveFile(const char* file, Bool_t bin, Long64_t size); Receive a file, either sent by a client or a master server.; If bin is true it is a binary file, other wise it is an ASCII; file and we need to check for Windows \r tokens. Returns -1 in; case of error, 0 otherwise. void Run(Bool_t retrn = kFALSE); Main server eventloop. void SendLogFile(Int_t status = 0, Int_t start = -1, Int_t end = -1); Send log file to master.; If start > -1 send only bytes in the range from start to end,; if end <= start send everything from start. void SendStatistics(); Send statistics of slave server to master or client. void SendParallel(Bool_t async = kFALSE); Send number of parallel nodes to master or client. Int_t UnloadPackage(const char* package); Removes link to package in wor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofServ.html:22892,log,log,22892,root/html528/TProofServ.html,https://root.cern,https://root.cern/root/html528/TProofServ.html,3,['log'],['log']
Testability,""""") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); Int_tRooAbsPdf::minDimNormValueCaching() const; virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/Roo2DKeysPdf.html:20825,test,testArg,20825,root/html526/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html526/Roo2DKeysPdf.html,62,['test'],['testArg']
Testability,""""") override;  reset data members ;  ; Double_t Determinant () const;  computes determinant of the rotation matrix ;  ; void FastRotZ (const Double_t *sincos);  Perform a rotation about Z having the sine/cosine of the rotation angle. ;  ; void GetAngles (Double_t &phi, Double_t &theta, Double_t &psi) const;  Retrieve Euler angles. ;  ; void GetAngles (Double_t &theta1, Double_t &phi1, Double_t &theta2, Double_t &phi2, Double_t &theta3, Double_t &phi3) const;  Retrieve rotation angles. ;  ; void GetInverse (Double_t *invmat) const;  Get the inverse rotation matrix (which is simply the transpose) ;  ; Double_t GetPhiRotation (Bool_t fixX=kFALSE) const;  Returns rotation angle about Z axis in degrees. ;  ; const Double_t * GetRotationMatrix () const override;  ; const Double_t * GetScale () const override;  ; const Double_t * GetTranslation () const override;  ; TGeoHMatrix Inverse () const override;  Return a temporary inverse of this. ;  ; TClass * IsA () const override;  ; Bool_t IsValid () const;  Perform orthogonality test for rotation. ;  ; void LocalToMaster (const Double_t *local, Double_t *master) const override;  convert a point by multiplying its column vector (x, y, z, 1) to matrix inverse ;  ; void LocalToMasterBomb (const Double_t *local, Double_t *master) const override;  convert a point by multiplying its column vector (x, y, z, 1) to matrix inverse ;  ; void LocalToMasterVect (const Double_t *local, Double_t *master) const override;  convert a vector by multiplying its column vector (x, y, z, 1) to matrix inverse ;  ; TGeoMatrix * MakeClone () const override;  Make a clone of this matrix. ;  ; void MasterToLocal (const Double_t *master, Double_t *local) const override;  convert a point by multiplying its column vector (x, y, z, 1) to matrix ;  ; void MasterToLocalBomb (const Double_t *master, Double_t *local) const override;  convert a point by multiplying its column vector (x, y, z, 1) to matrix ;  ; void MasterToLocalVect (const Double_t *master, Doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoRotation.html:2157,test,test,2157,doc/master/classTGeoRotation.html,https://root.cern,https://root.cern/doc/master/classTGeoRotation.html,1,['test'],['test']
Testability,"""""); boolbasic_ios<char,char_traits<char> >::bad() const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidbasic_ios<char,char_traits<char> >::clear(ios_base::iostate __state = goodbit); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; basic_ios<char,char_traits<char> >&basic_ios<char,char_traits<char> >::copyfmt(const basic_ios<char,char_traits<char> >& __rhs); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static voidEnableOutput(); static TMVA::MsgLogger&Endmsg(TMVA::MsgLogger& logger); boolbasic_ios<char,char_traits<char> >::eof() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; ios_base::iostatebasic_ios<char,char_traits<char> >::exceptions() const; voidbasic_ios<char,char_traits<char> >::exceptions(ios_base::iostate __except); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); boolbasic_ios<char,char_traits<char> >::fail() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; basic_ios<char,char_traits<char> >::char_typebasic_ios<char,char_traits<char> >::fill() const; basic_ios<char,char_traits<char> >::char_typebasic_ios<char,char_traits<char> >::fill(basic_ios<char,char_traits<char> >::char_type __ch); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MsgLogger.html:1781,log,logger,1781,root/html602/TMVA__MsgLogger.html,https://root.cern,https://root.cern/root/html602/TMVA__MsgLogger.html,2,['log'],['logger']
Testability,""") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); Int_tRooAbsPdf::minDimNormValueCaching() const; virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); virtual voidnormLeafServerList(RooArgSet& list) const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooResolutionModel.html:22466,test,testArg,22466,root/html528/RooResolutionModel.html,https://root.cern,https://root.cern/root/html528/RooResolutionModel.html,1,['test'],['testArg']
Testability,""") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); Int_tRooAbsPdf::minDimNormValueCaching() const; virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); virtual voidnormLeafServerList(RooArgSet& list) const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooResolutionModel.html:22802,test,testArg,22802,root/html530/RooResolutionModel.html,https://root.cern,https://root.cern/root/html530/RooResolutionModel.html,1,['test'],['testArg']
Testability,""");; 1061 return foundSymbol;; 1062}; 1063 ; 1064/// Checks if there is an ASTFile on disk for the given module \c M.; 1065static bool HasASTFileOnDisk(clang::Module *M, const clang::Preprocessor &PP, std::string *FullFileName = nullptr); 1066{; 1067 const HeaderSearchOptions &HSOpts = PP.getHeaderSearchInfo().getHeaderSearchOpts();; 1068 ; 1069 std::string ModuleFileName;; 1070 if (!HSOpts.PrebuiltModulePaths.empty()); 1071 // Load the module from *only* in the prebuilt module path.; 1072 ModuleFileName = PP.getHeaderSearchInfo().getPrebuiltModuleFileName(M->Name);; 1073 if (FullFileName); 1074 *FullFileName = ModuleFileName;; 1075 ; 1076 return !ModuleFileName.empty();; 1077}; 1078 ; 1079static bool HaveFullGlobalModuleIndex = false;; 1080static GlobalModuleIndex *loadGlobalModuleIndex(cling::Interpreter &interp); 1081{; 1082 CompilerInstance &CI = *interp.getCI();; 1083 Preprocessor &PP = CI.getPreprocessor();; 1084 auto ModuleManager = CI.getASTReader();; 1085 assert(ModuleManager);; 1086 // StringRef ModuleIndexPath = HSI.getModuleCachePath();; 1087 // HeaderSearch& HSI = PP.getHeaderSearchInfo();; 1088 // HSI.setModuleCachePath(TROOT::GetSharedLibDir().Data());; 1089 std::string ModuleIndexPath = TROOT::GetSharedLibDir().Data();; 1090 if (ModuleIndexPath.empty()); 1091 return nullptr;; 1092 // Get an existing global index. This loads it if not already loaded.; 1093 ModuleManager->resetForReload();; 1094 ModuleManager->loadGlobalIndex();; 1095 GlobalModuleIndex *GlobalIndex = ModuleManager->getGlobalIndex();; 1096 ; 1097 // For finding modules needing to be imported for fixit messages,; 1098 // we need to make the global index cover all modules, so we do that here.; 1099 if (!GlobalIndex && !HaveFullGlobalModuleIndex) {; 1100 ModuleMap &MMap = PP.getHeaderSearchInfo().getModuleMap();; 1101 bool RecreateIndex = false;; 1102 for (ModuleMap::module_iterator I = MMap.module_begin(), E = MMap.module_end(); I != E; ++I) {; 1103 Module *TheModule = I->second;; 1104 //",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:38825,assert,assert,38825,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['assert'],['assert']
Testability,""");; TFile * inputFile = getDataFile(infileName);; ; TMVA::DataLoader *dataloader=new TMVA::DataLoader(""datasetcvreg"");; ; dataloader->AddVariable(""var1"", ""Variable 1"", ""units"", 'F');; dataloader->AddVariable(""var2"", ""Variable 2"", ""units"", 'F');; ; // Add the variable carrying the regression target; dataloader->AddTarget(""fvalue"");; ; TTree * regTree = (TTree*)inputFile->Get(""TreeR"");; dataloader->AddRegressionTree(regTree, 1.0);; ; // Individual events can be weighted; // dataloader->SetWeightExpression(""weight"", ""Regression"");; ; std::cout << ""--- TMVACrossValidationRegression: Using input file: "" << inputFile->GetName() << std::endl;; ; // Bypasses the normal splitting mechanism, CV uses a new system for this.; // Unfortunately the old system is unhappy if we leave the test set empty so; // we ensure that there is at least one event by placing the first event in; // it.; // You can with the selection cut place a global cut on the defined; // variables. Only events passing the cut will be using in training/testing.; // Example: `TCut selectionCut = ""var1 < 1"";`; TCut selectionCut = """";; dataloader->PrepareTrainingAndTestTree(selectionCut, ""nTest_Regression=1""; "":SplitMode=Block""; "":NormMode=NumEvents""; "":!V"");; ; // --------------------------------------------------------------------------; ; //; // This sets up a CrossValidation class (which wraps a TMVA::Factory; // internally) for 2-fold cross validation. The data will be split into the; // two folds randomly if `splitExpr` is `""""`.; //; // One can also give a deterministic split using spectator variables. An; // example would be e.g. `""int(fabs([spec1]))%int([NumFolds])""`.; //; UInt_t numFolds = 2;; TString analysisType = ""Regression"";; TString splitExpr = """";; ; TString cvOptions = Form(""!V""; "":!Silent""; "":ModelPersistence""; "":!FoldFileOutput""; "":AnalysisType=%s""; "":NumFolds=%i""; "":SplitExpr=%s"",; analysisType.Data(), numFolds, splitExpr.Data());; ; TMVA::CrossValidation cv{""TMVACrossValidationRegression"", dat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVACrossValidationRegression_8C.html:17158,test,testing,17158,doc/master/TMVACrossValidationRegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVACrossValidationRegression_8C.html,1,['test'],['testing']
Testability,""");; gROOT->Macro(""output.C"");. void FillBinarySearchTree(const TMVA::Event* ev, Bool_t NoNegWeights = kFALSE); Insert event to internal foam density PDEFoamDistr. void DeleteBinarySearchTree(); Delete the fDistr object, which contains the binary search tree. void Init(); Initialize binary search tree, stored in object of type; PDEFoamDistr. void SetFoamType(TMVA::EFoamType ft); Set the foam type. This determinates the method of the; calculation of the density during the foam build-up. void ReadStream(istream& ); Read PDEFoam variables from stream 'istr'. void PrintStream(ostream& ) const; Write PDEFoam variables to stream 'os'. void AddXMLTo(void* parent); write foam variables to xml. void ReadXML(void* parent). Float_t VarTransform(Int_t idim, Float_t x) const. std::vector<Float_t> VarTransform(vector<Float_t>& invec) const. Float_t VarTransformInvers(Int_t idim, Float_t x) const. std::vector<Float_t> VarTransformInvers(vector<Float_t>& invec) const. PDEFoamDistr* GetDistr() const; { assert(fDistr); return fDistr; }. void SetnCells(Long_t nCells); {fNCells =nCells;}. void SetnSampl(Long_t nSampl); {fNSampl =nSampl;}. void SetnBin(Int_t nBin); {fNBin = nBin;}. void SetEvPerBin(Int_t EvPerBin); {fEvPerBin =EvPerBin;}. void SetNElements(UInt_t numb); {fNElements = numb;}. void SetVolumeFraction(Float_t vfr); {fVolFrac = vfr;}. void SetFillFoamWithOrigWeights(Bool_t new_val); {fFillFoamWithOrigWeights=new_val;}. void SetDTSeparation(TMVA::EDTSeparation new_val); {fDTSeparation=new_val;}. void SetPeekMax(Bool_t new_val); { fPeekMax = new_val; }. Int_t GetTotDim() const; coverity[ -tainted_data_return ]. {return fDim; }. TString GetFoamName() const; {return fName; }. UInt_t GetNElements() const; {return fNElements; }. Float_t GetVolumeFraction() const; {return fVolFrac;}. EFoamType GetFoamType() const; {return fFoamType;}. UInt_t GetNActiveCells() const; {return fNoAct;}. UInt_t GetNInActiveCells() const; {return GetNCells()-GetNActiveCells();}. UInt_t GetNCells() const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__PDEFoam.html:28857,assert,assert,28857,root/html528/TMVA__PDEFoam.html,https://root.cern,https://root.cern/root/html528/TMVA__PDEFoam.html,1,['assert'],['assert']
Testability,""", ""px"", x, [-0.1, 0.004]); py = ROOT.RooPolynomial(""py"", ""py"", y, [0.1, -0.004]); pz = ROOT.RooPolynomial(""pz"", ""pz"", z); bkg = ROOT.RooProdPdf(""bkg"", ""bkg"", [px, py, pz]); ; # Create composite pdf sig+bkg; fsig = ROOT.RooRealVar(""fsig"", ""signal fraction"", 0.1, 0.0, 1.0); model = ROOT.RooAddPdf(""model"", ""model"", [sig, bkg], [fsig]); ; data = model.generate({x, y, z}, 20000); ; # Project pdf and data on x; # -------------------------------------------------; ; # Make plain projection of data and pdf on x observable; frame = x.frame(Title=""Projection of 3D data and pdf on X"", Bins=40); data.plotOn(frame); model.plotOn(frame); ; # Define projected signal likelihood ratio; # ----------------------------------------------------------------------------------; ; # Calculate projection of signal and total likelihood on (y,z) observables; # i.e. integrate signal and composite model over x; sigyz = sig.createProjection({x}); totyz = model.createProjection({x}); ; # Construct the log of the signal / signal+background probability; llratio_func = ROOT.RooFormulaVar(""llratio"", ""log10(@0)-log10(@1)"", [sigyz, totyz]); ; # Plot data with a LL ratio cut; # -------------------------------------------------------; ; # Calculate the llratio value for each event in the dataset; data.addColumn(llratio_func); ; # Extract the subset of data with large signal likelihood; dataSel = data.reduce(Cut=""llratio>0.7""); ; # Make plot frame; frame2 = x.frame(Title=""Same projection on X with LLratio(y,z)>0.7"", Bins=40); ; # Plot select data on frame; dataSel.plotOn(frame2); ; # Make MC projection of pdf with same LL ratio cut; # ---------------------------------------------------------------------------------------------; ; # Generate large number of events for MC integration of pdf projection; mcprojData = model.generate({x, y, z}, 10000); ; # Calculate LL ratio for each generated event and select MC events with; # llratio)0.7; mcprojData.addColumn(llratio_func); mcprojDataSel = mcprojData.reduce(Cu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf316__llratioplot_8py.html:1930,log,log,1930,doc/master/rf316__llratioplot_8py.html,https://root.cern,https://root.cern/doc/master/rf316__llratioplot_8py.html,1,['log'],['log']
Testability,""", . TString ; fitType = ""FitGA"" . ). Iterates through all booked methods and sees if they use parameter tuning and if so does just that, i.e. calls ""Method::Train()"" for different parameter settings and keeps in mind the ""optimal one""... and that's the one that will later on be used in the main training loop. ; Definition at line 701 of file Factory.cxx. ◆ OptimizeAllMethodsForClassification(). void TMVA::Factory::OptimizeAllMethodsForClassification ; (; TString ; fomType = ""ROCIntegral"", . TString ; fitType = ""FitGA"" . ). inline . Definition at line 110 of file Factory.h. ◆ OptimizeAllMethodsForRegression(). void TMVA::Factory::OptimizeAllMethodsForRegression ; (; TString ; fomType = ""ROCIntegral"", . TString ; fitType = ""FitGA"" . ). inline . Definition at line 111 of file Factory.h. ◆ PrintHelpMessage(). void TMVA::Factory::PrintHelpMessage ; (; const TString & ; datasetname, . const TString & ; methodTitle = """" . ); const. Print predefined help message of classifier. ; Iterate over methods and test. ; Definition at line 1333 of file Factory.cxx. ◆ RootBaseDir(). TDirectory * TMVA::Factory::RootBaseDir ; (; ). inline . Definition at line 149 of file Factory.h. ◆ SetInputTreesFromEventAssignTrees(). void TMVA::Factory::SetInputTreesFromEventAssignTrees ; (; ). private . ◆ SetVerbose(). void TMVA::Factory::SetVerbose ; (; Bool_t ; v = kTRUE). Definition at line 343 of file Factory.cxx. ◆ Streamer(). virtual void TMVA::Factory::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::Configurable. ◆ StreamerNVirtual(). void TMVA::Factory::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 227 of file Factory.h. ◆ TestAllMethods(). void TMVA::Factory::TestAllMethods ; (; ). Evaluates all booked methods on the testing data and adds the output to the Results in the corresponiding DataSet. ; Definition at line 1271 of file Factory.cxx. ◆ TrainAllMethods(). void TMVA::Factory::TrainAll",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Factory.html:34047,test,test,34047,doc/master/classTMVA_1_1Factory.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html,1,['test'],['test']
Testability,""", nbin, 0.0, 1.0 );; if (Use[""SVM_Poly""]) histSVMP = new TH1F( ""MVA_SVM_Poly"", ""MVA_SVM_Poly"", nbin, 0.0, 1.0 );; if (Use[""SVM_Lin""]) histSVML = new TH1F( ""MVA_SVM_Lin"", ""MVA_SVM_Lin"", nbin, 0.0, 1.0 );; if (Use[""FDA_MT""]) histFDAMT = new TH1F( ""MVA_FDA_MT"", ""MVA_FDA_MT"", nbin, -2.0, 3.0 );; if (Use[""FDA_GA""]) histFDAGA = new TH1F( ""MVA_FDA_GA"", ""MVA_FDA_GA"", nbin, -2.0, 3.0 );; if (Use[""Category""]) histCat = new TH1F( ""MVA_Category"", ""MVA_Category"", nbin, -2., 2. );; if (Use[""Plugin""]) histPBdt = new TH1F( ""MVA_PBDT"", ""MVA_BDT"", nbin, -0.8, 0.8 );; ; // PDEFoam also returns per-event error, fill in histogram, and also fill significance; if (Use[""PDEFoam""]) {; histPDEFoam = new TH1F( ""MVA_PDEFoam"", ""MVA_PDEFoam"", nbin, 0, 1 );; histPDEFoamErr = new TH1F( ""MVA_PDEFoamErr"", ""MVA_PDEFoam error"", nbin, 0, 1 );; histPDEFoamSig = new TH1F( ""MVA_PDEFoamSig"", ""MVA_PDEFoam significance"", nbin, 0, 10 );; }; ; // Book example histogram for probability (the other methods are done similarly); TH1F *probHistFi(0), *rarityHistFi(0);; if (Use[""Fisher""]) {; probHistFi = new TH1F( ""MVA_Fisher_Proba"", ""MVA_Fisher_Proba"", nbin, 0, 1 );; rarityHistFi = new TH1F( ""MVA_Fisher_Rarity"", ""MVA_Fisher_Rarity"", nbin, 0, 1 );; }; ; // Prepare input tree (this must be replaced by your data source); // in this example, there is a toy tree with signal and one with background events; // we'll later on use only the ""signal"" events for the test in this example.; //; TFile *input(0);; TString fname = ""./tmva_class_example.root"";; if (!gSystem->AccessPathName( fname )) {; input = TFile::Open( fname ); // check if file in local directory exists; }; else {; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD""); // if not: download from ROOT server; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }; std::cout << ""--- TMVAClassificationApp : Using input file: "" << input->GetName() << std::endl;; ; // Event l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassificationApplication_8C.html:14676,test,test,14676,doc/master/TMVAClassificationApplication_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassificationApplication_8C.html,1,['test'],['test']
Testability,""","", ""~"", ""="" in name by ""_""; Replace ""A::X<A::Y>"" by ""A::X<-p0Y>"",; ""A::B::X<A::B::Y>"" by ""A::B::X<-p1Y>"", etc. void ProcessDocInDir(ostream& out, const char* indir, const char* outdir, const char* linkdir); Write links to files indir/*.txt, indir/*.html (non-recursive) to out.; If one of the files is called ""index.{html,txt}"" it will be; included in out (instead of copying it to outdir and generating a link; to linkdir). txt files are passed through Convert().; The files' links are sorted alphabetically. void ReferenceEntity(TSubString& str, TClass* entity, const char* comment = 0); Create a reference to a class documentation page.; str encloses the text to create the reference for (e.g. name of instance).; comment will be added e.g. as tooltip text.; After the reference is put into str.String(), str will enclose the reference; and the original text. Example:; Input:; str.String(): ""a gHtml test""; str.Begin(): 2; str.Length(): 5; Output:; str.String(): ""a <a href=""THtml.html"">gHtml</a> test""; str.Begin(): 2; str.Length(): 30. void ReferenceEntity(TSubString& str, TDataMember* entity, const char* comment = 0); Create a reference to a data member documentation page.; str encloses the text to create the reference for (e.g. name of instance).; comment will be added e.g. as tooltip text.; After the reference is put into str.String(), str will enclose the reference; and the original text. Example:; Input:; str.String(): ""a gHtml test""; str.Begin(): 2; str.Length(): 5; Output:; str.String(): ""a <a href=""THtml.html"">gHtml</a> test""; str.Begin(): 2; str.Length(): 30. void ReferenceEntity(TSubString& str, TDataType* entity, const char* comment = 0); Create a reference to a type documentation page.; str encloses the text to create the reference for (e.g. name of instance).; comment will be added e.g. as tooltip text.; After the reference is put into str.String(), str will enclose the reference; and the original text. Example:; Input:; str.String(): ""a gHtml test""; str.Begin()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDocOutput.html:13374,test,test,13374,root/html528/TDocOutput.html,https://root.cern,https://root.cern/root/html528/TDocOutput.html,6,['test'],['test']
Testability,""",""test hstack"",10,-4,4);; h3->FillRandom(""gaus"",10000);; h3->SetFillColor(kGreen);; hs->Add(h3);; TCanvas *cs = new TCanvas(""cs"",""cs"",10,10,700,900);; TText T; T.SetTextFont(42); T.SetTextAlign(21);; cs->Divide(2,2);; cs->cd(1); hs->Draw(); T.DrawTextNDC(.5,.95,""Default drawing option"");; cs->cd(2); hs->Draw(""nostack""); T.DrawTextNDC(.5,.95,""Option \""nostack\"""");; cs->cd(3); hs->Draw(""nostackb""); T.DrawTextNDC(.5,.95,""Option \""nostackb\"""");; cs->cd(4); hs->Draw(""lego1""); T.DrawTextNDC(.5,.95,""Option \""lego1\"""");; return cs;; }; A more complex example:. Picture; Source. TCanvas *hstack() {; // Example of stacked histograms: class THStack; //; // Author: Rene Brun. THStack *hs = new THStack(""hs"",""Stacked 1D histograms"");; //create three 1-d histograms; TH1F *h1st = new TH1F(""h1st"",""test hstack"",100,-4,4);; h1st->FillRandom(""gaus"",20000);; h1st->SetFillColor(kRed);; h1st->SetMarkerStyle(21);; h1st->SetMarkerColor(kRed);; hs->Add(h1st);; TH1F *h2st = new TH1F(""h2st"",""test hstack"",100,-4,4);; h2st->FillRandom(""gaus"",15000);; h2st->SetFillColor(kBlue);; h2st->SetMarkerStyle(21);; h2st->SetMarkerColor(kBlue);; hs->Add(h2st);; TH1F *h3st = new TH1F(""h3st"",""test hstack"",100,-4,4);; h3st->FillRandom(""gaus"",10000);; h3st->SetFillColor(kGreen);; h3st->SetMarkerStyle(21);; h3st->SetMarkerColor(kGreen);; hs->Add(h3st);. TCanvas *cst = new TCanvas(""cst"",""stacked hists"",10,10,700,700);; cst->SetFillColor(41);; cst->Divide(2,2);; // in top left pad, draw the stack with defaults; cst->cd(1);; hs->Draw();; // in top right pad, draw the stack in non-stack mode; // and errors option; cst->cd(2);; gPad->SetGrid();; hs->Draw(""nostack,e1p"");; //in bottom left, draw in stack mode with ""lego1"" option; cst->cd(3);; gPad->SetFrameFillColor(17);; gPad->SetTheta(3.77);; gPad->SetPhi(2.9);; hs->Draw(""lego1"");. cst->cd(4);; //create two 2-D histograms and draw them in stack mode; gPad->SetFrameFillColor(17);; THStack *a = new THStack(""a"",""Stacked 2D histograms"");; TF2 *f1 = new TF2(""f1"",; ""xygaus",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/THStack.html:2169,test,test,2169,root/html604/THStack.html,https://root.cern,https://root.cern/root/html604/THStack.html,3,['test'],['test']
Testability,""".x hist/hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x graphics/canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x graphics/formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x hist/fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit/fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""draw2dopt"", "".x hist/draw2dopt.C"",; ""Drawing Options for 2D Histograms"");; bar.AddButton(""graph"", "".x graphs/graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x graphics/tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x geom/shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""file_layout"", "".x io/file.C"",; ""The ROOT file format"");; bar.AddButton(""tree_layout"", "".x tree/tree.C"",; ""The Tree Data Structure"");; bar.AddButton(""ntuple1"", "".x tree/ntuple1.C"",; ""Ntuples and Selections"");; bar.AddButton(""run benchmarks"", "".x legacy/benchmarks.C"",; ""Runs all the ROOT benchmarks"");; bar.AddButton(""rootmarks"", "".x legacy/rootmarks.C"",; ""Prints an estimated ROOTMARKS for your machine"");; bar.AddButton(""edit_hsimple"", "".!vi hsimple.C &"",; ""Invokes the text editor on file hsimple.C"");; bar.AddButton(""Close Bar"", ""bar.Hide()"",; ""Close ControlBar"");; bar.Show();; }; TControlBarA Control Bar is a fully user configurable tool which provides fast access to frequently used operati...Definition TControlBar.h:26; . Definition at line 26 of file TControlBar.h. Public Types; enum  { kVertical = 1; , kHorizontal = 2; };  ;  Public Types inherited from TControlBarButton; enum  { kButton = 1; , kDrawnButton; , kSeparator; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTControlBar.html:2342,benchmark,benchmarks,2342,doc/master/classTControlBar.html,https://root.cern,https://root.cern/doc/master/classTControlBar.html,1,['benchmark'],['benchmarks']
Testability,"""; 37#include ""Math/SpecFuncMathMore.h""; 38 ; 39#include <cmath>; 40 ; 41namespace ROOT {; 42namespace Math {; 43 ; 44static const double eu = 0.577215664901532860606; // Euler's constant; 45 ; 46Vavilov::Vavilov(); 47{; 48}; 49 ; 50Vavilov::~Vavilov(); 51{; 52 // destructor (clean up resources); 53}; 54 ; 55 ; 56double Vavilov::Mode() const {; 57 double x = -4.22784335098467134e-01-std::log(GetKappa())-GetBeta2();; 58 if (x>-0.223172) x = -0.223172;; 59 double eps = 0.01;; 60 double dx;; 61 ; 62 do {; 63 double p0 = Pdf (x - eps);; 64 double p1 = Pdf (x);; 65 double p2 = Pdf (x + eps);; 66 double y1 = 0.5*(p2-p0)/eps;; 67 double y2 = (p2-2*p1+p0)/(eps*eps);; 68 dx = - y1/y2;; 69 x += dx;; 70 if (fabs(dx) < eps) eps = 0.1*fabs(dx);; 71 } while (fabs(dx) > 1E-5);; 72 return x;; 73}; 74 ; 75double Vavilov::Mode(double kappa, double beta2) {; 76 SetKappaBeta2 (kappa, beta2);; 77 return Mode();; 78}; 79 ; 80double Vavilov::Mean() const {; 81 return Mean (GetKappa(), GetBeta2());; 82}; 83 ; 84double Vavilov::Mean(double kappa, double beta2) {; 85 return eu-1-std::log(kappa)-beta2;; 86}; 87 ; 88double Vavilov::Variance() const {; 89 return Variance (GetKappa(), GetBeta2());; 90}; 91 ; 92double Vavilov::Variance(double kappa, double beta2) {; 93 return (1-0.5*beta2)/kappa;; 94}; 95 ; 96double Vavilov::Skewness() const {; 97 return Skewness (GetKappa(), GetBeta2());; 98}; 99 ; 100double Vavilov::Skewness(double kappa, double beta2) {; 101 return (0.5-beta2/3)/(kappa*kappa) * std::pow ((1-0.5*beta2)/kappa, -1.5);; 102}; 103 ; 104 ; 105double Vavilov::Kurtosis() const {; 106 return Kurtosis (GetKappa(), GetBeta2());; 107}; 108 ; 109double Vavilov::Kurtosis(double kappa, double beta2) {; 110 return (1./3-0.25*beta2)*pow (1-0.5*beta2, -2)/kappa;; 111}; 112 ; 113 ; 114} // namespace Math; 115} // namespace ROOT; SpecFuncMathCore.h; SpecFuncMathMore.h; y2Option_t Option_t TPoint TPoint const char y2Definition TGWin32VirtualXProxy.cxx:70; y1Option_t Option_t TPoint TPoint const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Vavilov_8cxx_source.html:2653,log,log,2653,doc/master/Vavilov_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Vavilov_8cxx_source.html,1,['log'],['log']
Testability,"""; : Use ""FSmart"" cuts for variable: 'myvar1'; : Use ""FSmart"" cuts for variable: 'myvar2'; : Use ""FSmart"" cuts for variable: 'var3'; : Use ""FSmart"" cuts for variable: 'var4'; Factory : Booking method: ␛[1mLikelihood␛[0m; : ; Factory : Booking method: ␛[1mLikelihoodPCA␛[0m; : ; LikelihoodPCA : [dataset] : Create Transformation ""PCA"" with events from all classes.; : ; : Transformation, Variable selection : ; : Input : variable 'myvar1' <---> Output : variable 'myvar1'; : Input : variable 'myvar2' <---> Output : variable 'myvar2'; : Input : variable 'var3' <---> Output : variable 'var3'; : Input : variable 'var4' <---> Output : variable 'var4'; Factory : Booking method: ␛[1mPDERS␛[0m; : ; Factory : Booking method: ␛[1mPDEFoam␛[0m; : ; Factory : Booking method: ␛[1mKNN␛[0m; : ; Factory : Booking method: ␛[1mLD␛[0m; : ; : Rebuilding Dataset dataset; : Building event vectors for type 2 Signal; : Dataset[dataset] : create input formulas for tree TreeS; : Building event vectors for type 2 Background; : Dataset[dataset] : create input formulas for tree TreeB; DataSetFactory : [dataset] : Number of events in input trees; : ; : ; : Number of training and testing events; : ---------------------------------------------------------------------------; : Signal -- training events : 1000; : Signal -- testing events : 5000; : Signal -- training and testing events: 6000; : Background -- training events : 1000; : Background -- testing events : 5000; : Background -- training and testing events: 6000; : ; DataSetInfo : Correlation matrix (Signal):; : ----------------------------------------; : myvar1 myvar2 var3 var4; : myvar1: +1.000 +0.038 +0.748 +0.922; : myvar2: +0.038 +1.000 -0.058 +0.128; : var3: +0.748 -0.058 +1.000 +0.831; : var4: +0.922 +0.128 +0.831 +1.000; : ----------------------------------------; DataSetInfo : Correlation matrix (Background):; : ----------------------------------------; : myvar1 myvar2 var3 var4; : myvar1: +1.000 -0.021 +0.783 +0.931; : myvar2: -0.021 +1.00",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:3683,test,testing,3683,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,5,['test'],['testing']
Testability,"""X""); voidSetLabelOffset(Float_t offset = 0.0050000000000000001, Option_t* axis = ""X""); voidSetLabelSize(Float_t size = 0.040000000000000001, Option_t* axis = ""X""); voidSetLegendBorderSize(Width_t size = 4); voidSetLegendFillColor(Color_t color = 0); voidSetLegendFont(Style_t font = 62); voidSetLegoInnerR(Float_t rad = 0.5); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); voidSetLineScalePS(Float_t scale = 3); virtual voidTAttLine::SetLineStyle(Style_t lstyle); voidSetLineStyleString(Int_t i, const char* text); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t mcolor = 1); virtual voidTAttMarker::SetMarkerColorAlpha(Color_t mcolor, Float_t malpha); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidSetNdivisions(Int_t n = 510, Option_t* axis = ""X""); voidSetNumberContours(Int_t number = 20); static voidTObject::SetObjectStat(Bool_t stat); voidSetOptDate(Int_t datefl = 1); voidSetOptFile(Int_t file = 1); voidSetOptFit(Int_t fit = 1); voidSetOptLogx(Int_t logx = 1); voidSetOptLogy(Int_t logy = 1); voidSetOptLogz(Int_t logz = 1); voidSetOptStat(Int_t stat = 1); voidSetOptStat(Option_t* stat); voidSetOptTitle(Int_t tit = 1); voidSetPadBorderMode(Int_t mode = 1); voidSetPadBorderSize(Width_t size = 1); voidSetPadBottomMargin(Float_t margin = 0.10000000000000001); voidSetPadColor(Color_t color = 19); voidSetPadGridX(Bool_t gridx); voidSetPadGridY(Bool_t gridy); voidSetPadLeftMargin(Float_t margin = 0.10000000000000001); voidSetPadRightMargin(Float_t margin = 0.10000000000000001); voidSetPadTickX(Int_t tickx); voidSetPadTickY(Int_t ticky); voidSetPadTopMargin(Flo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TStyle.html:13216,log,logx,13216,root/html602/TStyle.html,https://root.cern,https://root.cern/root/html602/TStyle.html,3,['log'],"['logx', 'logy', 'logz']"
Testability,"""observed"" data; mu_observed = 2.5; sigma = 1.5; workspace = build_ws(mu_observed, sigma); x_var = workspace[""x""]; mu_var = workspace[""mu""]; gauss = workspace[""gauss""]; uniform = workspace[""uniform""]; obs_data = workspace[""obs_data""]; ; # Training the model; model = SBI(workspace); model.model_data(""gauss"", ""x"", ""mu"", n_samples_train); model.reference_data(""uniform"", ""x"", n_samples_train); model.preprocessing(); model.train_classifier(); sbi_model = model; ; ; # Compute the likelihood ratio of the classifier for analysis purposes; def learned_likelihood_ratio(x, mu):; n = max(len(x), len(mu)); X = np.zeros((n, 2)); X[:, 0] = x; X[:, 1] = mu; prob = sbi_model.classifier.predict_proba(X)[:, 1]; return prob / (1 - prob); ; ; # Compute the learned likelihood ratio; llhr_learned = ROOT.RooFit.bindFunction(""MyBinFunc"", learned_likelihood_ratio, x_var, mu_var); ; # Compute the real likelihood ratio; llhr_calc = ROOT.RooFormulaVar(""llhr_calc"", ""x[0] / x[1]"", [gauss, uniform]); ; # Create the exact negative log likelihood functions for Gaussian model; nll_gauss = gauss.createNLL(obs_data); ROOT.SetOwnership(nll_gauss, True); ; # Create the learned pdf and NLL sum based on the learned likelihood ratio; pdf_learned = ROOT.RooWrapperPdf(""learned_pdf"", ""learned_pdf"", llhr_learned, True); ; nllr_learned = pdf_learned.createNLL(obs_data); ROOT.SetOwnership(nllr_learned, True); ; # Compute the morphed nll; morphing(ROOT.RooMomentMorphFuncND.Linear); nll_morph = workspace[""morph""].createNLL(obs_data); ROOT.SetOwnership(nll_morph, True); ; # Plot the negative logarithmic summed likelihood; frame1 = mu_var.frame(Title=""NLL of SBI vs. Morphing;mu;NLL"", Range=(2.2, 2.8)); nllr_learned.plotOn(frame1, LineColor=""kP6Blue"", ShiftToZero=True, Name=""learned""); nll_gauss.plotOn(frame1, LineColor=""kP6Blue+1"", ShiftToZero=True, Name=""gauss""); ROOT.RooAbsReal.setEvalErrorLoggingMode(""Ignore"") # Silence some warnings; nll_morph.plotOn(frame1, LineColor=""kP6Blue+2"", ShiftToZero=True, Name=""morphed""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf615__simulation__based__inference_8py.html:6829,log,log,6829,doc/master/rf615__simulation__based__inference_8py.html,https://root.cern,https://root.cern/doc/master/rf615__simulation__based__inference_8py.html,1,['log'],['log']
Testability,#0] PROGRESS:Generation -- RooMCStudy::run: sample 220; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 210; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 200; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 190; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 180; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 170; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 160; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 150; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-750.903) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.726225 a1=-0.429497 mean=5.03871 nbkg=129.53 nsig=136.644 sig1frac=0.687558; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 140; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-740.756) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.899536 a1=-0.345881 mean=5.03897 nbkg=135.176 nsig=129.13 sig1frac=0.899393; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-677.604) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.766597 a1=-0.547838 mean=5.03836 nbkg=119.039 nsig=121.817 sig1frac=0.213703; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 130; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-777.498) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.527582 a1=-0.893856 mean=5.24753 nbkg=162.951 nsig=65.9357 sig1frac=0.970262; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FC,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8C.html:24692,log,log,24692,doc/master/rf801__mcstudy_8C.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8C.html,2,['log'],['log']
Testability,"#include ""TAxis.h""; #include ""TH1.h""; using namespace RooFit;; ; void rf601_intminuit(); {; // S e t u p p d f a n d l i k e l i h o o d; // -----------------------------------------------; ; // Observable; RooRealVar x(""x"", ""x"", -20, 20);; ; // Model (intentional strong correlations); RooRealVar mean(""mean"", ""mean of g1 and g2"", 0);; RooRealVar sigma_g1(""sigma_g1"", ""width of g1"", 3);; RooGaussian g1(""g1"", ""g1"", x, mean, sigma_g1);; ; RooRealVar sigma_g2(""sigma_g2"", ""width of g2"", 4, 3.0, 6.0);; RooGaussian g2(""g2"", ""g2"", x, mean, sigma_g2);; ; RooRealVar frac(""frac"", ""frac"", 0.5, 0.0, 1.0);; RooAddPdf model(""model"", ""model"", RooArgList(g1, g2), frac);; ; // Generate 1000 events; std::unique_ptr<RooDataSet> data{model.generate(x, 1000)};; ; // Construct unbinned likelihood of model w.r.t. data; std::unique_ptr<RooAbsReal> nll{model.createNLL(*data)};; ; // I n t e r a c t i v e m i n i m i z a t i o n , e r r o r a n a l y s i s; // -------------------------------------------------------------------------------; ; // Create MINUIT interface object; RooMinimizer m(*nll);; ; // Activate verbose logging of MINUIT parameter space stepping; m.setVerbose(true);; ; // Call MIGRAD to minimize the likelihood; m.migrad();; ; // Print values of all parameters, that reflect values (and error estimates); // that are back propagated from MINUIT; std::unique_ptr<RooArgSet>{model.getParameters(x)}->Print(""s"");; ; // Disable verbose logging; m.setVerbose(false);; ; // Run HESSE to calculate errors from d2L/dp2; m.hesse();; ; // Print value (and error) of sigma_g2 parameter, that reflects; // value and error back propagated from MINUIT; sigma_g2.Print();; ; // Run MINOS on sigma_g2 parameter only; m.minos(sigma_g2);; ; // Print value (and error) of sigma_g2 parameter, that reflects; // value and error back propagated from MINUIT; sigma_g2.Print();; ; // S a v i n g r e s u l t s , c o n t o u r p l o t s; // ---------------------------------------------------------; ; // Save a snaps",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf601__intminuit_8C.html:1627,log,logging,1627,doc/master/rf601__intminuit_8C.html,https://root.cern,https://root.cern/doc/master/rf601__intminuit_8C.html,1,['log'],['logging']
Testability,"#include <map>; #include <string>; ; #include ""TFile.h""; #include ""TTree.h""; #include ""TString.h""; #include ""TSystem.h""; #include ""TROOT.h""; ; ; #include ""TMVA/Tools.h""; #include ""TMVA/Factory.h""; #include ""TMVA/DataLoader.h""; #include ""TMVA/TMVAMultiClassGui.h""; ; ; using namespace TMVA;; ; void TMVAMulticlass( TString myMethodList = """" ); {; ; // This loads the library; TMVA::Tools::Instance();; ; // to get access to the GUI and all tmva macros; //; // TString tmva_dir(TString(gRootDir) + ""/tmva"");; // if(gSystem->Getenv(""TMVASYS"")); // tmva_dir = TString(gSystem->Getenv(""TMVASYS""));; // gROOT->SetMacroPath(tmva_dir + ""/test/:"" + gROOT->GetMacroPath() );; // gROOT->ProcessLine("".L TMVAMultiClassGui.C"");; ; ; //---------------------------------------------------------------; // Default MVA methods to be trained + tested; std::map<std::string,int> Use;; Use[""MLP""] = 1;; Use[""BDTG""] = 1;; #ifdef R__HAS_TMVAGPU; Use[""DL_CPU""] = 1;; Use[""DL_GPU""] = 1;; #else; Use[""DL_CPU""] = 1;; Use[""DL_GPU""] = 0;; #endif; Use[""FDA_GA""] = 0;; Use[""PDEFoam""] = 1;; ; //---------------------------------------------------------------; ; std::cout << std::endl;; std::cout << ""==> Start TMVAMulticlass"" << std::endl;; ; if (myMethodList != """") {; for (std::map<std::string,int>::iterator it = Use.begin(); it != Use.end(); it++) it->second = 0;; ; std::vector<TString> mlist = TMVA::gTools().SplitString( myMethodList, ',' );; for (UInt_t i=0; i<mlist.size(); i++) {; std::string regMethod(mlist[i]);; ; if (Use.find(regMethod) == Use.end()) {; std::cout << ""Method \"""" << regMethod << ""\"" not known in TMVA under this name. Choose among the following:"" << std::endl;; for (std::map<std::string,int>::iterator it = Use.begin(); it != Use.end(); it++) std::cout << it->first << "" "";; std::cout << std::endl;; return;; }; Use[regMethod] = 1;; }; }; ; // Create a new root output file.; TString outfileName = ""TMVAMulticlass.root"";; TFile* outputFile = TFile::Open( outfileName, ""RECREATE"" );; ; TMVA::Factory ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:32262,test,tested,32262,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['test'],['tested']
Testability,"%m month (01-12); // %y year without century; // %Y year with century; //; // for time :; // %H hour (24-hour clock); // %I hour (12-hour clock); // %p local equivalent of AM or PM; // %M minute (00-59); // %S seconds (00-61); // %% %; // The other characters are output as is. gt2->GetXaxis()->SetTimeFormat(""y. %Y %F2000-01-01 00:00:00"");; gPad->Modified();; return ct;; }; An other example showing how to define the time offset as 2003, January 1st; using histograms axis. Picture; Source. TCanvas *timeonaxis2() {; // Define the time offset as 2003, January 1st; //Author: Olivier Couet. TCanvas *ct2 = new TCanvas(""ct2"",""ct2"",10,10,700,500);. TDatime T0(2003, 1, 1, 0, 0, 0);; int X0 = T0.Convert();; gStyle->SetTimeOffset(X0);. // Define the lowest histogram limit as 2002, September 23rd; TDatime T1(2002, 9, 23, 0, 0, 0);; int X1 = T1.Convert()-X0;. // Define the highest histogram limit as 2003, March 7th; TDatime T2(2003, 3, 7, 0, 0, 0);; int X2 = T2.Convert(1)-X0;. TH1F * h1 = new TH1F(""h1"",""test"",100,X1,X2);. TRandom r;; for (Int_t i=0;i<30000;i++) {; Double_t noise = r.Gaus(0.5*(X1+X2),0.1*(X2-X1));; h1->Fill(noise);; }. h1->GetXaxis()->SetTimeDisplay(1);; h1->GetXaxis()->SetLabelSize(0.03);; h1->GetXaxis()->SetTimeFormat(""%Y/%m/%d"");; h1->Draw();; return ct2;; }. . Function Members (Methods); public:. virtual~TGaxis(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdjustBinSize(Double_t A1, Double_t A2, Int_t nold, Double_t& BinLow, Double_t& BinHigh, Int_t& nbins, Double_t& BinWidth); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidCenterLabels(Bool_t center = kTRUE); virtual voidCenterTitle(Bool_t center = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTLine::Copy(TObject& line)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGaxis.html:21504,test,test,21504,root/html604/TGaxis.html,https://root.cern,https://root.cern/root/html604/TGaxis.html,1,['test'],['test']
Testability,"& ""Inconsistent enum fwd decl (end)!"");; 2168 while (isspace(fwdDeclsLine[posEnumNameEnd])); 2169 --posEnumNameEnd;; 2170 // posEnumNameEnd now points to the last character of the name.; 2171 ; 2172 std::string enumName = fwdDeclsLine.substr(posEnumName,; 2173 posEnumNameEnd - posEnumName + 1);; 2174 ; 2175 if (clang::NamedDecl* enumDecl; 2176 = cling::utils::Lookup::Named(&fInterpreter->getSema(),; 2177 enumName.c_str(), DC)) {; 2178 // We have an existing enum decl (forward or definition);; 2179 // skip this.; 2180 R__ASSERT(llvm::dyn_cast<clang::EnumDecl>(enumDecl) && ""not an enum decl!"");; 2181 (void)enumDecl;; 2182 continue;; 2183 }; 2184 }; 2185 }; 2186 ; 2187 fwdDeclsCodeLessEnums += fwdDeclsLine + ""\n"";; 2188 }; 2189 }; 2190 ; 2191 if (!fwdDeclsCodeLessEnums.empty()){ // Avoid the overhead if nothing is to be declared; 2192 auto compRes = fInterpreter->declare(fwdDeclsCodeLessEnums, &T);; 2193 assert(cling::Interpreter::kSuccess == compRes &&; 2194 ""The forward declarations could not be compiled"");; 2195 if (compRes!=cling::Interpreter::kSuccess){; 2196 Warning(""TCling::RegisterModule"",; 2197 ""Problems in compiling forward declarations for module %s: '%s'"",; 2198 modulename, fwdDeclsCodeLessEnums.c_str()) ;; 2199 }; 2200 else if (T){; 2201 // Loop over all decls in the transaction and go through them all; 2202 // to mark them properly.; 2203 // In order to do that, we first iterate over all the DelayedCallInfos; 2204 // within the transaction. Then we loop over all Decls in the DeclGroupRef; 2205 // contained in the DelayedCallInfos. For each decl, we traverse.; 2206 ExtLexicalStorageAdder elsa;; 2207 for (auto dciIt = T->decls_begin();dciIt!=T->decls_end();dciIt++){; 2208 cling::Transaction::DelayCallInfo& dci = *dciIt;; 2209 for(auto dit = dci.m_DGR.begin(); dit != dci.m_DGR.end(); ++dit) {; 2210 clang::Decl* declPtr = *dit;; 2211 elsa.TraverseDecl(declPtr);; 2212 }; 2213 }; 2214 }; 2215 }; 2216 ; 2217 // Now we register all the headers necessary for the cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:84451,assert,assert,84451,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['assert'],['assert']
Testability,"& ) const; check for ""silence"" option in configuration option string. Bool_t CheckForVerboseOption(const TString& ) const; check if verbosity ""V"" set in option. void UsefulSortDescending(vector<Double_t>& ); sort vector. void UsefulSortAscending(vector<Double_t>& ); sort vector. Int_t GetIndexMaxElement(vector<Double_t>& ); find index of maximum entry in vector. Int_t GetIndexMinElement(vector<Double_t>& ); find index of minimum entry in vector. Bool_t ContainsRegularExpression(const TString& s); check if regular expression; helper function to search for ""$!%^&()'<>?= "" in a string. TString ReplaceRegularExpressions(const TString& s, const TString& replace = ""+""); replace regular expressions; helper function to remove all occurences ""$!%^&()'<>?= "" from a string; and replace all ::,$,*,/,+,- with _M_,_S_,_T_,_D_,_P_,_M_ respectively. const TString& Color(const TString& ); human readable color strings. void FormattedOutput(const vector<Double_t>& , const vector<TString>& , const TString titleVars, const TString titleValues, TMVA::MsgLogger& logger, TString format = ""%+1.3f""); formatted output of simple table. void FormattedOutput(const TMatrixD& , const vector<TString>& , TMVA::MsgLogger& logger); formatted output of matrix (with labels). void FormattedOutput(const TMatrixD& , const vector<TString>& vert, const vector<TString>& horiz, TMVA::MsgLogger& logger); formatted output of matrix (with labels). TString GetXTitleWithUnit(const TString& title, const TString& unit); histogramming utility. TString GetYTitleWithUnit(const TH1& h, const TString& unit, Bool_t normalised); histogramming utility. void WriteFloatArbitraryPrecision(Float_t val, ostream& os); writes a float value with the available precision to a stream. void ReadFloatArbitraryPrecision(Float_t& val, istream& is); reads a float value with the available precision from a stream. Bool_t HasAttr(void* node, const char* attrname); add attribute from xml. void ReadAttr(void* node, const char* attrname, TString&",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Tools.html:9283,log,logger,9283,root/html528/TMVA__Tools.html,https://root.cern,https://root.cern/root/html528/TMVA__Tools.html,6,['log'],['logger']
Testability,"& a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const Double32_t& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const Double32_t& rhs) const; element wise comparison. bool operator<(const Double32_t& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j). read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j). read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](int j); { return (*fMat)(fRow,j); }. const T & operator[](int j); { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const Double32_t& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const Double32_t& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const Double32_t& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const Double32_t& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Ka",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:7344,assert,assert,7344,root/html526/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,8,['assert'],['assert']
Testability,"& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); Create a chi-2 from a series of x and y value stored in a dataset.; The y values can either be the event weights (default), or can be another column designated; by the YVar() argument. The y value must have errors defined for the chi-2 to; be well defined. The following named arguments are supported. Options to control construction of the chi^2. YVar(RooRealVar& yvar) -- Designate given column in dataset as Y value; Integrate(Bool_t flag) -- Integrate function over range specified by X errors; rather than take value at bin center. RooAbsReal* createChi2(RooDataSet& data, const RooLinkedList& cmdList); Internal back-end function to create a chi^2 from a function and a dataset. RooFitResult* chi2FitDriver(RooAbsReal& fcn, RooLinkedList& cmdList); Internal driver function for chi2 fits. void setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); Set evaluation error logging mode. Options are. PrintErrors - Print each error through RooMsgService() as it occurs; CollectErrors - Accumulate errors, but do not print them. A subsequent call; to printEvalErrors() will print a summary; CountErrors - Accumulate error count, but do not print them. Double_t getVal(const RooArgSet* set = 0) const; Return value and unit accessors. Double_t getVal(const RooArgSet& set) const; { return _fast ? _value : getValV(&set) ; }. const Text_t * getUnit() const; Return string with unit description. void setUnit(const char* unit); Set unit description to given string. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Interface to force RooRealIntegral to offer given observable for internal integration; even if this is deemed unsafe. This default implementation returns always flase. void forceNumInt(Bool_t flag = kTRUE); If flag is true, all advertised analytical integrals will be ignored; and all integrals are calculated numerically. Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsReal.html:78814,log,logging,78814,root/html532/RooAbsReal.html,https://root.cern,https://root.cern/root/html532/RooAbsReal.html,1,['log'],['logging']
Testability,"& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); Create a chi-2 from a series of x and y value stored in a dataset.; The y values can either be the event weights (default), or can be another column designated; by the YVar() argument. The y value must have errors defined for the chi-2 to; be well defined. The following named arguments are supported. Options to control construction of the chi^2. YVar(RooRealVar& yvar) -- Designate given column in dataset as Y value; Integrate(Bool_t flag) -- Integrate function over range specified by X errors; rather than take value at bin center. RooAbsReal* createChi2(RooDataSet& data, const RooLinkedList& cmdList); Internal back-end function to create a chi^2 from a function and a dataset. RooFitResult* chi2FitDriver(RooAbsReal& fcn, RooLinkedList& cmdList); Internal driver function for chi2 fits. void setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); Set evaluation error logging mode. Options are. PrintErrors - Print each error through RooMsgService() as it occurs; CollectErrors - Accumulate errors, but do not print them. A subsequent call; to printEvalErrors() will print a summary; CountErrors - Accumulate error count, but do not print them. Double_t getVal(const RooArgSet* set = 0) const; Return value and unit accessors. const Text_t * getUnit() const; Return string with unit description. void setUnit(const char* unit); Set unit description to given string. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Interface to force RooRealIntegral to offer given observable for internal integration; even if this is deemed unsafe. This default implementation returns always flase. void forceNumInt(Bool_t flag = kTRUE); If flag is true, all advertised analytical integrals will be ignored; and all integrals are calculated numerically. RooAbsReal* createIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsReal.html:77941,log,logging,77941,root/html528/RooAbsReal.html,https://root.cern,https://root.cern/root/html528/RooAbsReal.html,2,['log'],['logging']
Testability,"& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); Create a chi-2 from a series of x and y value stored in a dataset.; The y values can either be the event weights (default), or can be another column designated; by the YVar() argument. The y value must have errors defined for the chi-2 to; be well defined. The following named arguments are supported. Options to control construction of the chi^2. YVar(RooRealVar& yvar) -- Designate given column in dataset as Y value; Integrate(Bool_t flag) -- Integrate function over range specified by X errors; rather than take value at bin center. RooAbsReal* createChi2(RooDataSet& data, const RooLinkedList& cmdList); Internal back-end function to create a chi^2 from a function and a dataset. RooFitResult* chi2FitDriver(RooAbsReal& fcn, RooLinkedList& cmdList); Internal driver function for chi2 fits. void setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); Set evaluation error logging mode. Options are. PrintErrors - Print each error through RooMsgService() as it occurs; CollectErrors - Accumulate errors, but do not print them. A subsequent call; to printEvalErrors() will print a summary; CountErrors - Accumulate error count, but do not print them. void setParameterizeIntegral(const RooArgSet& paramVars). Double_t getVal(const RooArgSet* set = 0) const; Return value and unit accessors. Double_t getVal(const RooArgSet& set) const; { return _fast ? _value : getValV(&set) ; }. const Text_t * getUnit() const; Return string with unit description. void setUnit(const char* unit); Set unit description to given string. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Interface to force RooRealIntegral to offer given observable for internal integration; even if this is deemed unsafe. This default implementation returns always flase. void forceNumInt(Bool_t flag = kTRUE); If flag is true, all advertised analytical integrals will be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsReal.html:81244,log,logging,81244,root/html534/RooAbsReal.html,https://root.cern,https://root.cern/root/html534/RooAbsReal.html,3,['log'],['logging']
Testability,"& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); RooAbsData&data(); const RooAbsData&data() const; virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsOptTestStatistic.html:9517,test,testArg,9517,root/html528/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html528/RooAbsOptTestStatistic.html,12,['test'],['testArg']
Testability,"& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TestStatSampler(); TestStatSampler();. {}. SamplingDistribution* GetSamplingDistribution(RooArgSet& paramsOfInterest); Main interface to get a ConfInterval, pure virtual. Double_t EvaluateTestStatistic(RooAbsData& data, RooArgSet& paramsOfInterest); Main interface to evaluate the test statistic on a dataset. TestStatistic* GetTestStatistic() const; Get the TestStatistic. Double_t ConfidenceLevel() const; Get the Confidence level for the test. void Initialize(RooAbsArg& testStatistic, RooArgSet& paramsOfInterest, RooArgSet& nuisanceParameters); Common Initialization. void SetPdf(RooAbsPdf& ); Set the Pdf, add to the the workspace if not already there. void SetPriorNuisance(RooAbsPdf* ); How to randomize the prior. Set to NULL to deactivate randomization. void SetParametersForTestStat(const RooArgSet& ); specify the values of parameters used when evaluating test statistic. void SetNuisanceParameters(const RooArgSet& ); REMOVE THIS; specify the parameters of interest in the interval; virtual void SetParameters(const RooArgSet&) = 0;; specify the nuisance parameters (eg. the rest of the parameters). void SetObservables(const RooArgSet& ); specify the observables in the dataset (needed to evaluate the test statistic). void SetGlobalObservables(const RooArgSet& ); specify the conditional observables. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). void SetTestStatistic(RooStats::TestStatistic* testStatistic); Set the TestStatistic (want the argument to be a function of the data & parameter points. void SetSamplingDistName(const char* name); Set the name of the sampling distribution used for plotting. » A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__TestStatSampler.html:2787,test,test,2787,root/html528/RooStats__TestStatSampler.html,https://root.cern,https://root.cern/root/html528/RooStats__TestStatSampler.html,3,['test'],['test']
Testability,"& iset); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::none(), const RooCmdArg arg8 = RooCmdArg::none()); RooAbsReal*RooAbsPdf::createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); Int_tRooAbsAnaConvPdf::declareBasis(const char* expression, const RooArgList& params); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumGenConfig*RooAbsPdf::defaultGeneratorConfig(); static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooBCPEffDecay.html:8805,test,testArg,8805,root/html526/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html526/RooBCPEffDecay.html,16,['test'],['testArg']
Testability,"& o); voidRooStats::ToyMCSampler::SetMaxToys(Double_t t); virtual voidRooStats::ToyMCSampler::SetNEventsPerToy(const Int_t nevents); virtual voidRooStats::ToyMCSampler::SetNToys(const Int_t ntoy); virtual voidRooStats::ToyMCSampler::SetNuisanceParameters(const RooArgSet& np); virtual voidRooStats::ToyMCSampler::SetObservables(const RooArgSet& o); virtual voidSetParametersForTestStat(const RooArgSet& nullpoi); virtual voidSetPdf(RooAbsPdf& pdf); virtual voidRooStats::ToyMCSampler::SetPriorNuisance(RooAbsPdf* pdf); voidRooStats::ToyMCSampler::SetProofConfig(RooStats::ProofConfig* pc = __null); voidRooStats::ToyMCSampler::SetProtoData(const RooDataSet* d); voidSetReuseNLL(bool r = true); virtual voidRooStats::ToyMCSampler::SetSamplingDistName(const char* name); virtual voidRooStats::ToyMCSampler::SetTestSize(Double_t size); virtual voidRooStats::ToyMCSampler::SetTestStatistic(RooStats::TestStatistic* t); virtual voidRooStats::ToyMCSampler::SetTestStatistic(RooStats::TestStatistic* testStatistic, unsigned int i); voidRooStats::ToyMCSampler::SetToysBothTails(Double_t toys, Double_t low_threshold, Double_t high_threshold); voidRooStats::ToyMCSampler::SetToysLeftTail(Double_t toys, Double_t threshold); voidRooStats::ToyMCSampler::SetToysRightTail(Double_t toys, Double_t threshold); voidRooStats::ToyMCSampler::SetUseMultiGen(Bool_t flag); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); RooStats::TestStatSamplerRooStats::TestStatSampler::TestStatSampler(); RooStats::TestStatSamplerRooStats::TestStatSampler::TestStatSampler(const RooStats::TestStatSampler&); RooStats::ToyMCImportanceSamplerToyMCImportanceSampler(); RooStats::ToyMCImportanceSamplerToyMCImportanceSampler(const RooStats::ToyMCImportanceSampler&); RooStats::ToyMCImportanceSamplerToyMCImportanceSampler(RooStats::TestStatistic& ts, Int_t ntoys); RooStats::ToyMCSamplerRooStats::ToyMCSampler::ToyMCSampler(); RooStats::T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__ToyMCImportanceSampler.html:4646,test,testStatistic,4646,root/html602/RooStats__ToyMCImportanceSampler.html,https://root.cern,https://root.cern/root/html602/RooStats__ToyMCImportanceSampler.html,2,['test'],['testStatistic']
Testability,"& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); virtual voidRooResolutionModel::normLeafServerList(RooArgSet& list) const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAddModel.html:23312,test,testArg,23312,root/html530/RooAddModel.html,https://root.cern,https://root.cern/root/html530/RooAddModel.html,8,['test'],['testArg']
Testability,"& other); Copy ctor. TGeoRotation(const TGeoMatrix& other); Copy ctor. TGeoRotation(const char* name); Named rotation constructor. TGeoRotation(const char* name, Double_t phi, Double_t theta, Double_t psi); Default rotation constructor with Euler angles. Phi is the rotation angle about; Z axis and is done first, theta is the rotation about new Y and is done; second, psi is the rotation angle about new Z and is done third. All angles are in; degrees. TGeoRotation(const char* name, Double_t theta1, Double_t phi1, Double_t theta2, Double_t phi2, Double_t theta3, Double_t phi3); Rotation constructor a la GEANT3. Angles theta(i), phi(i) are the polar and azimuthal; angles of the (i) axis of the rotated system with respect to the initial non-rotated; system.; Example : the identity matrix (no rotation) is composed by; theta1=90, phi1=0, theta2=90, phi2=90, theta3=0, phi3=0; SetBit(kGeoRotation);. TGeoMatrix& Inverse() const; Return a temporary inverse of this. Bool_t IsValid() const; Perform orthogonality test for rotation. void Clear(Option_t* option = """"); reset data members. void FastRotZ(Double_t* sincos); Perform a rotation about Z having the sine/cosine of the rotation angle. Double_t GetPhiRotation(Bool_t fixX = kFALSE) const; --- Returns rotation angle about Z axis in degrees. If the rotation is a pure; rotation about Z, fixX parameter does not matter, otherwise its meaning is:; - fixX = true : result is the phi angle of the projection of the rotated X axis in the un-rotated XY; - fixX = false : result is the phi angle of the projection of the rotated Y axis - 90 degrees. void LocalToMaster(const Double_t* local, Double_t* master) const; convert a point by multiplying its column vector (x, y, z, 1) to matrix inverse. void MasterToLocal(const Double_t* master, Double_t* local) const; convert a point by multiplying its column vector (x, y, z, 1) to matrix. TGeoMatrix * MakeClone() const; Make a clone of this matrix. void RotateX(Double_t angle); Rotate about X axis o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoRotation.html:16296,test,test,16296,root/html528/TGeoRotation.html,https://root.cern,https://root.cern/root/html528/TGeoRotation.html,2,['test'],['test']
Testability,"& other); Copy ctor. TGeoRotation(const TGeoMatrix& other); Copy ctor. TGeoRotation(const char* name); Named rotation constructor. TGeoRotation(const char* name, Double_t phi, Double_t theta, Double_t psi); Default rotation constructor with Euler angles. Phi is the rotation angle about; Z axis and is done first, theta is the rotation about new Y and is done; second, psi is the rotation angle about new Z and is done third. All angles are in; degrees. TGeoRotation(const char* name, Double_t theta1, Double_t phi1, Double_t theta2, Double_t phi2, Double_t theta3, Double_t phi3); Rotation constructor a la GEANT3. Angles theta(i), phi(i) are the polar and azimuthal; angles of the (i) axis of the rotated system with respect to the initial non-rotated; system.; Example : the identity matrix (no rotation) is composed by; theta1=90, phi1=0, theta2=90, phi2=90, theta3=0, phi3=0; SetBit(kGeoRotation);. TGeoMatrix& Inverse() const; Return a temporary inverse of this. Bool_t IsValid() const; Perform orthogonality test for rotation. void Clear(Option_t* option = """"); reset data members. void FastRotZ(const Double_t* sincos); Perform a rotation about Z having the sine/cosine of the rotation angle. Double_t GetPhiRotation(Bool_t fixX = kFALSE) const; --- Returns rotation angle about Z axis in degrees. If the rotation is a pure; rotation about Z, fixX parameter does not matter, otherwise its meaning is:; - fixX = true : result is the phi angle of the projection of the rotated X axis in the un-rotated XY; - fixX = false : result is the phi angle of the projection of the rotated Y axis - 90 degrees. void LocalToMaster(const Double_t* local, Double_t* master) const; convert a point by multiplying its column vector (x, y, z, 1) to matrix inverse. void MasterToLocal(const Double_t* master, Double_t* local) const; convert a point by multiplying its column vector (x, y, z, 1) to matrix. TGeoMatrix * MakeClone() const; Make a clone of this matrix. void RotateX(Double_t angle); Rotate about X ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoRotation.html:16402,test,test,16402,root/html532/TGeoRotation.html,https://root.cern,https://root.cern/root/html532/TGeoRotation.html,4,['test'],['test']
Testability,"& paramPoint); virtual RooStats::SamplingDistribution*GetSamplingDistributionSingleWorker(RooArgSet& paramPoint); virtual RooStats::TestStatistic*GetTestStatistic() const; virtual voidInitialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; RooStats::TestStatSampler&RooStats::TestStatSampler::operator=(const RooStats::TestStatSampler&); static voidSetAlwaysUseMultiGen(Bool_t flag); virtual voidSetAsimovNuisancePar(Bool_t i = kTRUE); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetExpectedNuisancePar(Bool_t i = kTRUE); voidSetGenerateAutoBinned(Bool_t autoBinned = kTRUE); voidSetGenerateBinned(bool binned = true); voidSetGenerateBinnedTag(const char* binnedTag = """"); virtual voidSetGlobalObservables(const RooArgSet& o); voidSetImportanceDensity(RooAbsPdf* p); voidSetImportanceSnapshot(const RooArgSet& s); voidSetMaxToys(Double_t t); virtual voidSetNEventsPerToy(const Int_t nevents); virtual voidSetNToys(const Int_t ntoy); virtual voidSetNuisanceParameters(const RooArgSet& np); virtual voidSetObservables(const RooArgSet& o); virtual voidSetParametersForTestStat(const RooArgSet& nullpoi); virtual voidSetPdf(RooAbsPdf& pdf); virtual voidSetPriorNuisance(RooAbsPdf* pdf); voidSetProofConfig(RooStats::ProofConfig* pc = NULL); voidSetProtoData(const RooDataSet* d); virtual voidSetSamplingDistName(const char* name); virtual voidSetTestSize(Double_t size); virtual voidSetTestStatistic(RooStats::TestStatistic* testStatistic); voidSetToysBothTails(Double_t toys, Double_t low_threshold, Double_t high_threshold); voidSetToysLeftTail(Double_t toys, Double_t threshold); voidSetToysRightTail(Double_t toys, Double_t threshold); voidSetUseMultiGen(Bool_t flag); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); RooStats::ToyMCSamplerToyMCSampler(); RooStats::ToyMCSamplerToyMCSampler(const RooStats::ToyMCSampler&); RooStats::ToyMCSamplerToyMCSampler(RooStats::TestStatistic& ts, Int_t ntoys).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__ToyMCSampler.html:2597,test,testStatistic,2597,root/html532/RooStats__ToyMCSampler.html,https://root.cern,https://root.cern/root/html532/RooStats__ToyMCSampler.html,1,['test'],['testStatistic']
Testability,"& str, TClass* entity, const char* comment = 0); Create a reference to a class documentation page.; str encloses the text to create the reference for (e.g. name of instance).; comment will be added e.g. as tooltip text.; After the reference is put into str.String(), str will enclose the reference; and the original text. Example:; Input:; str.String(): ""a gHtml test""; str.Begin(): 2; str.Length(): 5; Output:; str.String(): ""a <a href=""THtml.html"">gHtml</a> test""; str.Begin(): 2; str.Length(): 30. void ReferenceEntity(TSubString& str, TDataMember* entity, const char* comment = 0); Create a reference to a data member documentation page.; str encloses the text to create the reference for (e.g. name of instance).; comment will be added e.g. as tooltip text.; After the reference is put into str.String(), str will enclose the reference; and the original text. Example:; Input:; str.String(): ""a gHtml test""; str.Begin(): 2; str.Length(): 5; Output:; str.String(): ""a <a href=""THtml.html"">gHtml</a> test""; str.Begin(): 2; str.Length(): 30. void ReferenceEntity(TSubString& str, TDataType* entity, const char* comment = 0); Create a reference to a type documentation page.; str encloses the text to create the reference for (e.g. name of instance).; comment will be added e.g. as tooltip text.; After the reference is put into str.String(), str will enclose the reference; and the original text. Example:; Input:; str.String(): ""a gHtml test""; str.Begin(): 2; str.Length(): 5; Output:; str.String(): ""a <a href=""THtml.html"">gHtml</a> test""; str.Begin(): 2; str.Length(): 30. void ReferenceEntity(TSubString& str, TMethod* entity, const char* comment = 0); Create a reference to a method documentation page.; str encloses the text to create the reference for (e.g. name of instance).; comment will be added e.g. as tooltip text.; After the reference is put into str.String(), str will enclose the reference; and the original text. Example:; Input:; str.String(): ""a gHtml test""; str.Begin(): 2; str.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDocOutput.html:13917,test,test,13917,root/html528/TDocOutput.html,https://root.cern,https://root.cern/root/html528/TDocOutput.html,6,['test'],['test']
Testability,"& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooFirstMoment&operator=(const RooFirstMoment&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Int_tRooAbsMoment::order() const; Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFirstMoment.html:19544,test,testArg,19544,root/html602/RooFirstMoment.html,https://root.cern,https://root.cern/root/html602/RooFirstMoment.html,2,['test'],['testArg']
Testability,"& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); PiecewiseInterpolation&operator=(const PiecewiseInterpolation&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); const RooArgList&paramList() const; PiecewiseInterpolation(); PiecewiseInterpolation(const PiecewiseInterpolation& other, const char* name = 0); PiecewiseInterpolation(const char* name, const char* title, const RooAbsReal& nominal, const RooArgList& lowSet, const RooArgList& highSet, const RooArgList& paramSet, Bool_t takeOwnerShip = kFALSE); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/PiecewiseInterpolation.html:19445,test,testArg,19445,root/html602/PiecewiseInterpolation.html,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html,2,['test'],['testArg']
Testability,"& theOption = ""MC:150:10000:"");; 69 ; 70 MethodCuts( DataSetInfo& theData,; 71 const TString& theWeightFile);; 72 ; 73 // this is a workaround which is necessary since CINT is not capable of handling dynamic casts; 74 static MethodCuts* DynamicCast( IMethod* method ) { return dynamic_cast<MethodCuts*>(method); }; 75 ; 76 virtual ~MethodCuts( void );; 77 ; 78 virtual Bool_t HasAnalysisType( Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets );; 79 ; 80 // training method; 81 void Train( void );; 82 ; 83 using MethodBase::ReadWeightsFromStream;; 84 ; 85 void AddWeightsXMLTo ( void* parent ) const;; 86 ; 87 void ReadWeightsFromStream( std::istream & i );; 88 void ReadWeightsFromXML ( void* wghtnode );; 89 ; 90 // calculate the MVA value (for CUTs this is just a dummy); 91 Double_t GetMvaValue( Double_t* err = nullptr, Double_t* errUpper = nullptr );; 92 ; 93 // write method specific histos to target file; 94 void WriteMonitoringHistosToFile( void ) const;; 95 ; 96 // test the method; 97 void TestClassification();; 98 ; 99 // also overwrite --> not computed for cuts; 100 Double_t GetSeparation ( TH1*, TH1* ) const { return -1; }; 101 Double_t GetSeparation ( PDF* = nullptr, PDF* = nullptr ) const { return -1; }; 102 Double_t GetSignificance( void ) const { return -1; }; 103 Double_t GetmuTransform ( TTree *) { return -1; }; 104 Double_t GetEfficiency ( const TString&, Types::ETreeType, Double_t& );; 105 Double_t GetTrainingEfficiency(const TString& );; 106 ; 107 // rarity distributions (signal or background (default) is uniform in [0,1]); 108 Double_t GetRarity( Double_t, Types::ESBType ) const { return 0; }; 109 ; 110 // accessors for Minuit; 111 Double_t ComputeEstimator( std::vector<Double_t> & );; 112 ; 113 Double_t EstimatorFunction( std::vector<Double_t> & );; 114 Double_t EstimatorFunction( Int_t ievt1, Int_t ievt2 );; 115 ; 116 void SetTestSignalEfficiency( Double_t effS ) { fTestSignalEff = effS; }; 117 ; 118 // retrieve cut values for given s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8h_source.html:3458,test,test,3458,doc/master/MethodCuts_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8h_source.html,1,['test'],['test']
Testability,"& user, TString& passwd); Try to get user name and passwd from the ~/.rootnetrc or; ~/.netrc files. For more info see the version with 4 arguments.; This version is maintained for backward compatability reasons. Bool_t CheckNetrc(TString& user, TString& passwd, Bool_t& pwhash, Bool_t srppwd); Try to get user name and passwd from the ~/.rootnetrc or; ~/.netrc files. First ~/.rootnetrc is tried, after that ~/.netrc.; These files will only be used when their access masks are 0600.; Returns kTRUE if user and passwd were found for the machine; specified in the URL. If kFALSE, user and passwd are """".; If srppwd == kTRUE then a SRP ('secure') pwd is searched for in; the files.; The boolean pwhash is set to kTRUE if the returned passwd is to; be understood as password hash, i.e. if the 'password-hash' keyword; is found in the 'machine' lines; not implemented for 'secure'; and the .netrc file.; The format of these files are:. # this is a comment line; machine <machine fqdn> login <user> password <passwd>; machine <machine fqdn> login <user> password-hash <passwd>. and in addition ~/.rootnetrc also supports:. secure <machine fqdn> login <user> password <passwd>. <machine fqdn> may be a domain name or contain the wild card '*'. for the secure protocols. All lines must start in the first column. const char * GetGlobalUser(); Static method returning the global user. Bool_t GetGlobalPwHash(); Static method returning the global password hash flag. Bool_t GetGlobalSRPPwd(); Static method returning the global SRP password flag. TDatime GetGlobalExpDate(); Static method returning default expiring date for new validity contexts. const char * GetDefaultUser(); Static method returning the default user information. const char * GetKrb5Principal(); Static method returning the principal to be used to init Krb5 tickets. Bool_t GetAuthReUse(); Static method returning the authentication reuse settings. Bool_t GetPromptUser(); Static method returning the prompt user settings. const char * GetAu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAuthenticate.html:12656,log,login,12656,root/html526/TAuthenticate.html,https://root.cern,https://root.cern/root/html526/TAuthenticate.html,14,['log'],['login']
Testability,"& xz \\; yx & yy & yz \\; zx & zy & zz; \end{array}; \right|\]; It describes a so-called active rotation, i.e. a rotation of objects inside a static system of coordinates. In case you want to rotate the frame and want to know the coordinates of objects in the rotated system, you should apply the inverse rotation to the objects. If you want to transform coordinates from the rotated frame to the original frame you have to apply the direct transformation. A rotation around a specified axis means counterclockwise rotation around the positive direction of the axis.; 17.3.1 Declaration, Access, Comparisons; TRotation r; // r initialized as identity; TRotation m(r); // m = r; There is no direct way to set the matrix elements - to ensure that a TRotation always describes a real rotation. But you can get the values by with the methods XX()..ZZ() or the (,) operator:; Double_t xx = r.XX(); // the same as xx=r(0,0); xx = r(0,0);; if (r==m) {...} // test for equality; if (r!=m) {..} // test for inequality; if (r.IsIdentity()) {...} // test for identity; 17.3.2 Rotation around Axes; The following matrices describe counter-clockwise rotations around the coordinate axes and are implemented in: RotateX(),RotateY() and RotateZ():; \[; Rx(a) = \left|; \begin{array}{ccc}; 1 & 0 & 0 \\; 0 & cos(a) & -sin(a) \\; 0 & sin(a) & cos(a); \end{array}; \right|; Ry(a) = \left|; \begin{array}{ccc}; cos(a) & 0 & sin(a) \\; 0 & 1 & 0 \\; -sin(a) & 0 & cos(a); \end{array}; \right|; Rz(a) = \left|; \begin{array}{ccc}; cos(a) & -sin(a) & 0 \\; sin(a) & cos(a) & 0 \\; 0 & 0 & 1; \end{array}; \right|; \]; r.RotateX(TMath::Pi()); // rotation around the x-axis; 17.3.3 Rotation around Arbitrary Axis; The Rotate() method allows you to rotate around an arbitrary vector (not necessary a unit one) and returns the result.; r.Rotate(TMath::Pi()/3,TVector3(3,4,5));; It is possible to find a unit vector and an angle, which describe the same rotation as the current one:; Double_t angle;; TVector3 axis;; r.GetAngle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:863786,test,test,863786,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['test']
Testability,"&) const; RooAbsReal&model() const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooNumConvPdf.html:24240,test,testArg,24240,root/html530/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html530/RooNumConvPdf.html,2,['test'],['testArg']
Testability,"&); virtual voidSetNuisanceParameters(const RooArgSet&); virtual voidSetObservables(const RooArgSet&); virtual voidSetParametersForTestStat(const RooArgSet&); virtual voidSetPdf(RooAbsPdf&); virtual voidSetPriorNuisance(RooAbsPdf*); virtual voidSetSamplingDistName(const char* name); virtual voidSetTestSize(Double_t size); virtual voidSetTestStatistic(RooStats::TestStatistic* testStatistic); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); RooStats::TestStatSamplerTestStatSampler(); RooStats::TestStatSamplerTestStatSampler(const RooStats::TestStatSampler&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TestStatSampler(); TestStatSampler();. {}. SamplingDistribution* GetSamplingDistribution(RooArgSet& paramsOfInterest); Main interface to get a ConfInterval, pure virtual. Double_t EvaluateTestStatistic(RooAbsData& data, RooArgSet& paramsOfInterest); Main interface to evaluate the test statistic on a dataset. TestStatistic* GetTestStatistic() const; Get the TestStatistic. Double_t ConfidenceLevel() const; Get the Confidence level for the test. void Initialize(RooAbsArg& testStatistic, RooArgSet& paramsOfInterest, RooArgSet& nuisanceParameters); Common Initialization. void SetPdf(RooAbsPdf& ); Set the Pdf, add to the the workspace if not already there. void SetPriorNuisance(RooAbsPdf* ); How to randomize the prior. Set to NULL to deactivate randomization. void SetParametersForTestStat(const RooArgSet& ); specify the values of parameters used when evaluating test statistic. void SetNuisanceParameters(const RooArgSet& ); REMOVE THIS; specify the parameters of interest in the interval; virtual void SetParameters(const RooArgSet&) = 0;; specify the nuisance parameters (eg. the rest of the parameters). void SetObservables(const RooArgSet& ); specify the observables in the dataset (needed to evaluate the test statistic). void Se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__TestStatSampler.html:2352,test,test,2352,root/html602/RooStats__TestStatSampler.html,https://root.cern,https://root.cern/root/html602/RooStats__TestStatSampler.html,2,['test'],['test']
Testability,"&); voidSetNBins(Int_t bins); virtual voidSetNuisanceParameters(const RooArgSet&); voidSetParameterPointsToTest(RooAbsData& pointsToTest); virtual voidSetParameters(const RooArgSet&); virtual voidSetPdf(RooAbsPdf&); voidSetPOIPointsToTest(RooAbsData& poiToTest); virtual voidSetTestSize(Double_t size); virtual voidShowMembers(TMemberInspector&); virtual Double_tSize() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidUseAdaptiveSampling(bool flag = true). private:. voidCreateParameterPoints() const; voidCreateTestStatSampler() const. Data Members; private:. Bool_tfAdaptiveSamplingcontrols use of adaptive sampling algorithm; Double_tfAdditionalNToysFactorgive user ability to ask for more toys; RooStats::ConfidenceBelt*fConfBelt; Bool_tfCreateBeltcontrols use if ConfidenceBelt should be saved to a TFile; RooAbsData&fDatadata set ; Bool_tfDoProfileConstructioninstead of full construction over nuisance parametrs, do profile; Bool_tfFluctuateDatatell ToyMCSampler to fluctuate number of entries in dataset; RooStats::ModelConfig&fModel; Int_tfNbinsnumber of samples per variable; RooAbsData*fPOIToTestvalue of POI points to perform the construction; RooAbsData*fPointsToTestpoints to perform the construction; Bool_tfSaveBeltToFilecontrols use if ConfidenceBelt should be saved to a TFile; Double_tfSizesize of the test (eg. specified rate of Type I error); RooStats::ToyMCSampler*fTestStatSamplerthe test statistic sampler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FeldmanCousins(RooAbsData& data, RooStats::ModelConfig& model); standard constructor. ~FeldmanCousins(); destructor; if(fOwnsWorkspace && fWS) delete fWS;. void SetModel(const RooStats::ModelConfig& ); set the model. TestStatSampler* GetTestStatSampler() const. void CreateTestStatSampler() const; specify the Test Statistic and create a ToyMC test statistic sampler. void CreateParameterPoints() const; specify the paramet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__FeldmanCousins.html:3903,test,test,3903,root/html534/RooStats__FeldmanCousins.html,https://root.cern,https://root.cern/root/html534/RooStats__FeldmanCousins.html,1,['test'],['test']
Testability,"&expression, const TString &title, const TString &unit, char type='F', Double_t min=0, Double_t max=0)user inserts discriminating variable in data set infoDefinition DataLoader.cxx:485; TMVA::DataLoader::PrepareFoldDataSetvoid PrepareFoldDataSet(CvSplit &s, UInt_t foldNumber, Types::ETreeType tt=Types::kTraining)Function for assigning the correct folds to the testing or training set.Definition DataLoader.cxx:670; TMVA::DataSetInfoClass that contains all the data information.Definition DataSetInfo.h:62; TMVA::DataSetManagerClass that contains all the data information.Definition DataSetManager.h:51; TMVA::MsgLogger::SetSourcevoid SetSource(const std::string &source)Definition MsgLogger.h:68; TMVA::Types::kMulticlass@ kMulticlassDefinition Types.h:129; TMVA::Types::kNoAnalysisType@ kNoAnalysisTypeDefinition Types.h:130; TMVA::Types::kRegression@ kRegressionDefinition Types.h:128; TMVA::Types::ETreeTypeETreeTypeDefinition Types.h:142; TMVA::Types::kMaxTreeType@ kMaxTreeTypealso used as temporary storage for trees not yet assigned for testing;training...Definition Types.h:145; TMVA::Types::kTraining@ kTrainingDefinition Types.h:143; TMVA::Types::kTesting@ kTestingDefinition Types.h:144; TMVA::VarTransformHandlerDefinition VarTransformHandler.h:41; TMVA::VarTransformHandler::VarianceThresholdTMVA::DataLoader * VarianceThreshold(Double_t threshold)Computes variance of all the variables and returns a new DataLoader with the selected variables whose...Definition VarTransformHandler.cxx:84; TMatrixT< Double_t >; TNamed::SetNamevirtual void SetName(const char *name)Set the name of the TNamed.Definition TNamed.cxx:140; TStringBasic string class.Definition TString.h:139; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::AtofDouble_t Atof() constReturn floating-point value contained in string.Definition TString.cxx:2054; TString::IsFloatBool_t IsFloat() constReturns kTRUE if string contains a floating point or integer number.Definition",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataLoader_8cxx_source.html:38827,test,testing,38827,doc/master/DataLoader_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataLoader_8cxx_source.html,1,['test'],['testing']
Testability,"& ; source, . const TVectorT< Element > & ; select . ). Multiply target by the source, element-by-element only where select[i] != 0.0. ; Definition at line 2052 of file TVectorT.cxx. ◆ Mult(). template<class Element1 , class Element2 , class Element3 > . Element1 TMatrixTAutoloadOps::Mult ; (; const TVectorT< Element1 > & ; v1, . const TMatrixT< Element2 > & ; m, . const TVectorT< Element3 > & ; v2 . ). Perform v1 * M * v2, a scalar result. ; Definition at line 1542 of file TVectorT.cxx. ◆ operator!=() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator!= ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 != source2 ; Definition at line 2842 of file TMatrixT.cxx. ◆ operator!=() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator!= ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). logical operation source1 != source2 ; Definition at line 2870 of file TMatrixT.cxx. ◆ operator!=() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator!= ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 != source2 ; Definition at line 2898 of file TMatrixT.cxx. ◆ operator&&() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator&& ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). Logical AND. ; Definition at line 2466 of file TMatrixT.cxx. ◆ operator&&() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator&& ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). Logical AND. ; Definition at line 2491 of file TMatrixT.cxx. ◆ operator&&() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator&& ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Elemen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:26716,log,logical,26716,doc/master/namespaceTMatrixTAutoloadOps.html,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html,1,['log'],['logical']
Testability,"'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Protected Member Functions; double evaluatePartition (std::size_t firstEvent, std::size_t lastEvent, std::size_t stepSize) const override;  Calculate chi^2 in partition from firstEvent to lastEvent using given stepSize Throughout the calculation, we use Kahan's algorithm for summing to prevent loss of precision - this is a factor four more expensive than straight addition, but since evaluating the PDF is usually much more expensive than that, we tolerate the additional cost... ;  ;  Protected Member Functions inherited from RooAbsOptTestStatistic; virtual bool allowFunctionCache ();  ; void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true) override;  Driver function to propagate constant term optimizations in test statistic. ;  ; void initSlave (RooAbsReal &real, RooAbsData &indata, const RooArgSet &projDeps, const char *rangeName, const char *addCoefRangeName);  ; void optimizeCaching ();  This method changes the value caching logic for all nodes that depends on any of the observables as defined by the given dataset. ;  ; void optimizeConstantTerms (bool, bool=true);  Driver function to activate global constant term optimization. ;  ; void printCompactTreeHook (std::ostream &os, const char *indent="""") override;  Catch print hook function and forward to function clone. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursive) override;  Catch server redirect calls and forward to internal clone of function. ;  ; virtual RooArgSet requiredExtraObservables () const;  ; void runRecalculateCache (std::size_t firstEvent, std::size_t lastEvent, std::size_t stepSize) const override;  ; bool setDataSlave (RooAbsData &data, bool cloneData=true, bool ownNewDataAnyway=false) override;  Change dataset that is used to given one. ;  ;  Protected Member Functions inherited from RooAbsTestStatistic; do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChi2Var.html:50729,log,logic,50729,doc/master/classRooChi2Var.html,https://root.cern,https://root.cern/doc/master/classRooChi2Var.html,1,['log'],['logic']
Testability,"'time' = >unixtimestamp<. Bool_t SendProcessingStatus(const char* status, Bool_t restarttimer = kFALSE); Send the procesing status 'status' to MonaLisa following the; processing scheme:; <site> --> <jobid> --> 'status' = <status>; Used, to set the processing status of individual subtaks e.g. the; status of a batch (sub-)job or the status of a PROOF slave; participating in query <jobid>. Bool_t SendProcessingProgress(Double_t nevent, Double_t nbytes, Bool_t force = kFALSE); Send the procesing progress to MonaLisa. Bool_t SendFileOpenProgress(TFile* file, TList* openphases, const char* openphasename, Bool_t forcesend = kFALSE); Send the fileopen progress to MonaLisa.; If openphases=0 it means that the information is to be stored; in a temp space, since there is not yet an object where to attach it to.; This is typical in the static Open calls.; The temp openphases are put into a list as soon as one is specified. If thisopenphasename=0 it means that the stored phases (temp and object); have to be cleared. Bool_t SendFileCloseEvent(TFile* file). Bool_t SendFileReadProgress(TFile* file). Bool_t SendFileWriteProgress(TFile* file). Bool_t SendFileCheckpoint(TFile* file). Bool_t SendParameters(TList* valuelist, const char* identifier = 0); Send the parameters to MonaLisa. void SetLogLevel(const char* loglevel = ""WARNING""); Set MonaLisa log level. void Print(Option_t* option = """") const; Print info about MonaLisa object. TMonaLisaValue& operator=(const TMonaLisaWriter& ). TMonaLisaWriter(const TMonaLisaWriter& ). ApMon * GetApMon() const; { return fApmon; }. void Verbose(Bool_t onoff); { fVerbose = onoff; }. » Author: Andreas Peters 5/10/2005 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/monalisa:$Id: TMonaLisaWriter.h 23209 2008-04-14 13:25:09Z rdm $ » Last generated: 2011-07-04 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMonaLisaWriter.html:14975,log,loglevel,14975,root/html530/TMonaLisaWriter.html,https://root.cern,https://root.cern/root/html530/TMonaLisaWriter.html,2,['log'],"['log', 'loglevel']"
Testability,"'time' = >unixtimestamp<. Bool_t SendProcessingStatus(const char* status, Bool_t restarttimer = kFALSE); Send the procesing status 'status' to MonaLisa following the; processing scheme:; <site> --> <jobid> --> 'status' = <status>; Used, to set the processing status of individual subtaks e.g. the; status of a batch (sub-)job or the status of a PROOF slave; participating in query <jobid>. Bool_t SendProcessingProgress(Double_t nevent, Double_t nbytes, Bool_t force = kFALSE); Send the procesing progress to MonaLisa. Bool_t SendFileOpenProgress(TFile* file, TList* openphases, const char* openphasename, Bool_t forcesend = kFALSE); Send the fileopen progress to MonaLisa.; If openphases=0 it means that the information is to be stored; in a temp space, since there is not yet an object where to attach it to.; This is typical in the static Open calls.; The temp openphases are put into a list as soon as one is specified. If thisopenphasename=0 it means that the stored phases (temp and object); have to be cleared. Bool_t SendFileCloseEvent(TFile* file). Bool_t SendFileReadProgress(TFile* file). Bool_t SendFileWriteProgress(TFile* file). Bool_t SendFileCheckpoint(TFile* file). Bool_t SendParameters(TList* valuelist, const char* identifier = 0); Send the parameters to MonaLisa. void SetLogLevel(const char* loglevel = ""WARNING""); Set MonaLisa log level. void Print(Option_t* option = """") const; Print info about MonaLisa object. TMonaLisaValue& operator=(const TMonaLisaWriter& ). TMonaLisaWriter(const TMonaLisaWriter& ). ApMon * GetApMon() const; { return fApmon; }. void Verbose(Bool_t onoff); { fVerbose = onoff; }. » Author: Andreas Peters 5/10/2005 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/monalisa:$Id: TMonaLisaWriter.h 23209 2008-04-14 13:25:09Z rdm $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMonaLisaWriter.html:14975,log,loglevel,14975,root/html532/TMonaLisaWriter.html,https://root.cern,https://root.cern/root/html532/TMonaLisaWriter.html,2,['log'],"['log', 'loglevel']"
Testability,"( (bb * xx) <= 1.0 && xx <= 0.95); 500 {; 501 t = pseries(aa, bb, xx);; 502 goto done;; 503 }; 504 ; 505**/; 506 w = 1.0 - xx;; 507 ; 508/* Reverse a and b if x is greater than the mean. */; 509/* aa,bb > 1 -> sharp rise at x=aa/(aa+bb) */; 510 if( xx > (aa/(aa+bb)) ); 511 {; 512 flag = 1;; 513 a = bb;; 514 b = aa;; 515 xc = xx;; 516 x = w;; 517 }; 518 else; 519 {; 520 a = aa;; 521 b = bb;; 522 xc = w;; 523 x = xx;; 524 }; 525 ; 526 if( flag == 1 && (b * x) <= 1.0 && x <= 0.95); 527 {; 528 t = pseries(a, b, x);; 529 goto done;; 530 }; 531 ; 532/* Choose expansion for better convergence. */; 533 y = x * (a+b-2.0) - (a-1.0);; 534 if( y < 0.0 ); 535 w = incbcf( a, b, x );; 536 else; 537 w = incbd( a, b, x ) / xc;; 538 ; 539/* Multiply w by the factor; 540 a b _ _ _; 541 x (1-x) | (a+b) / ( a | (a) | (b) ) . */; 542 ; 543 y = a * std::log(x);; 544 t = b * std::log(xc);; 545 if( (a+b) < kMAXSTIR && std::abs(y) < kMAXLOG && std::abs(t) < kMAXLOG ); 546 {; 547 t = pow(xc,b);; 548 t *= pow(x,a);; 549 t /= a;; 550 t *= w;; 551 t *= ROOT::Math::Cephes::gamma(a+b) / (ROOT::Math::Cephes::gamma(a) * ROOT::Math::Cephes::gamma(b));; 552 goto done;; 553 }; 554/* Resort to logarithms. */; 555 y += t + lgam(a+b) - lgam(a) - lgam(b);; 556 y += std::log(w/a);; 557 if( y < kMINLOG ); 558 t = 0.0;; 559 else; 560 t = std::exp(y);; 561 ; 562done:; 563 ; 564 if( flag == 1 ); 565 {; 566 if( t <= kMACHEP ); 567 t = 1.0 - kMACHEP;; 568 else; 569 t = 1.0 - t;; 570 }; 571 return( t );; 572}; 573/*---------------------------------------------------------------------------*/; 574 ; 575/*---------------------------------------------------------------------------*/; 576 ; 577/* Continued fraction expansion #1; 578 * for incomplete beta integral; 579 */; 580 ; 581double incbcf( double a, double b, double x ); 582{; 583 double xk, pk, pkm1, pkm2, qk, qkm1, qkm2;; 584 double k1, k2, k3, k4, k5, k6, k7, k8;; 585 double r, t, ans, thresh;; 586 int n;; 587 ; 588 k1 = a;; 589 k2 = a + b;; 590 k3 = a;; 591 k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/SpecFuncCephes_8cxx_source.html:12262,log,log,12262,doc/master/SpecFuncCephes_8cxx_source.html,https://root.cern,https://root.cern/doc/master/SpecFuncCephes_8cxx_source.html,3,['log'],"['log', 'logarithms']"
Testability,"( data,nullPOI, 0 ); }. TestStatistic* GetTestStatistic(unsigned int i) const. TestStatistic* GetTestStatistic(unsigned int i) const; { return GetTestStatistic(0); }. Double_t ConfidenceLevel() const; { return 1. - fSize; }. void Initialize(RooAbsArg& , RooArgSet& , RooArgSet& ); { return fNToys; }. void SetNToys(const Int_t ntoy); { fNToys = ntoy; }. void SetNEventsPerToy(const Int_t nevents); Forces n events even for extended PDFs. Set NEvents=0 to; use the Poisson distributed events from the extended PDF. void SetParametersForTestStat(const RooArgSet& nullpoi); Set the Pdf, add to the the workspace if not already there. void SetPdf(RooAbsPdf& pdf); { fPdf = &pdf; ClearCache(); }. void SetPriorNuisance(RooAbsPdf* pdf); How to randomize the prior. Set to NULL to deactivate randomization. void SetNuisanceParameters(const RooArgSet& np); specify the nuisance parameters (eg. the rest of the parameters). { fNuisancePars = &np; }. void SetObservables(const RooArgSet& o); specify the observables in the dataset (needed to evaluate the test statistic). { fObservables = &o; }. void SetGlobalObservables(const RooArgSet& o); specify the conditional observables. { fGlobalObservables = &o; }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). { fSize = size; }. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). { fSize = 1. - cl; }. void SetTestStatistic(RooStats::TestStatistic* testStatistic, unsigned int i); Set the TestStatistic (want the argument to be a function of the data & parameter points. void SetTestStatistic(RooStats::TestStatistic* t); { return SetTestStatistic(t,0); }. void SetExpectedNuisancePar(Bool_t i = kTRUE); { fExpectedNuisancePar = i; }. void SetAsimovNuisancePar(Bool_t i = kTRUE); { fExpectedNuisancePar = i; }. void SetGenerateBinned(bool binned = true); control to use bin data generation (=> see RooFit::AllBinned(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__ToyMCSampler.html:9543,test,test,9543,root/html534/RooStats__ToyMCSampler.html,https://root.cern,https://root.cern/root/html534/RooStats__ToyMCSampler.html,3,['test'],['test']
Testability,"(""Dataset[%s] : "",dsi.GetName()); 1666 << setiosflags(ios::left) << std::setw(maxL); 1667 << dsi.GetClassInfo(cls)->GetName() << "" -- ""; 1668 << ""training events : "" << trainingSizePerClass.at(cls) << Endl;; 1669 Log() << kDEBUG << ""\t(sum of weights: "" << trainingSumWeightsPerClass.at(cls) << "")""; 1670 << "" - requested were "" << eventCounts[cls].nTrainingEventsRequested << "" events"" << Endl;; 1671 Log() << kINFO //<< Form(""Dataset[%s] : "",dsi.GetName()); 1672 << setiosflags(ios::left) << std::setw(maxL); 1673 << dsi.GetClassInfo(cls)->GetName() << "" -- ""; 1674 << ""testing events : "" << testingSizePerClass.at(cls) << Endl;; 1675 Log() << kDEBUG << ""\t(sum of weights: "" << testingSumWeightsPerClass.at(cls) << "")""; 1676 << "" - requested were "" << eventCounts[cls].nTestingEventsRequested << "" events"" << Endl;; 1677 Log() << kINFO //<< Form(""Dataset[%s] : "",dsi.GetName()); 1678 << setiosflags(ios::left) << std::setw(maxL); 1679 << dsi.GetClassInfo(cls)->GetName() << "" -- ""; 1680 << ""training and testing events: ""; 1681 << (trainingSizePerClass.at(cls)+testingSizePerClass.at(cls)) << Endl;; 1682 Log() << kDEBUG << ""\t(sum of weights: ""; 1683 << (trainingSumWeightsPerClass.at(cls)+testingSumWeightsPerClass.at(cls)) << "")"" << Endl;; 1684 if(eventCounts[cls].nEvAfterCut<eventCounts[cls].nEvBeforeCut) {; 1685 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << setiosflags(ios::left) << std::setw(maxL); 1686 << dsi.GetClassInfo(cls)->GetName() << "" -- ""; 1687 << ""due to the preselection a scaling factor has been applied to the numbers of requested events: ""; 1688 << eventCounts[cls].cutScaling() << Endl;; 1689 }; 1690 }; 1691 Log() << kINFO << Endl;; 1692 ; 1693 // for information purposes; 1694 dsi.SetTrainingSumSignalWeights(trainingSumSignalWeights);; 1695 dsi.SetTrainingSumBackgrWeights(trainingSumBackgrWeights);; 1696 dsi.SetTestingSumSignalWeights(testingSumSignalWeights);; 1697 dsi.SetTestingSumBackgrWeights(testingSumBackgrWeights);; 1698 ; 1699 ; 1700}; Configur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:78476,test,testing,78476,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['test'],['testing']
Testability,"(""Dataset[%s] : "",dsi.GetName())<< ""check number of training/testing events, requested and available number of events and for class "" << cls << Endl;; 1095 ; 1096 // check if enough or too many events are already in the training/testing eventvectors of the class cls; 1097 EventVector& eventVectorTraining = tmpEventVector[ Types::kTraining ].at(cls);; 1098 EventVector& eventVectorTesting = tmpEventVector[ Types::kTesting ].at(cls);; 1099 EventVector& eventVectorUndefined = tmpEventVector[ Types::kMaxTreeType ].at(cls);; 1100 ; 1101 Int_t availableTraining = eventVectorTraining.size();; 1102 Int_t availableTesting = eventVectorTesting.size();; 1103 Int_t availableUndefined = eventVectorUndefined.size();; 1104 ; 1105 Float_t presel_scale;; 1106 if (fScaleWithPreselEff) {; 1107 presel_scale = eventCounts[cls].cutScaling();; 1108 if (presel_scale < 1); 1109 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" you have opted for scaling the number of requested training/testing events\n to be scaled by the preselection efficiency""<< Endl;; 1110 }else{; 1111 presel_scale = 1.; // this scaling was too confusing to most people, including me! Sorry... (Helge); 1112 if (eventCounts[cls].cutScaling() < 1); 1113 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" you have opted for interpreting the requested number of training/testing events\n to be the number of events AFTER your preselection cuts"" << Endl;; 1114 ; 1115 }; 1116 ; 1117 // If TrainTestSplit_<class> is set, set number of requested training events to split*num_all_events; 1118 // Requested number of testing events is set to zero and therefore takes all other events; 1119 // The option TrainTestSplit_<class> overrides nTrain_<class> or nTest_<class>; 1120 if(eventCounts[cls].TrainTestSplitRequested < 1.0 && eventCounts[cls].TrainTestSplitRequested > 0.0){; 1121 eventCounts[cls].nTrainingEventsRequested = Int_t(eventCounts[cls].TrainTestSplitRequested*(availableTraining+availableTesting+availableUndefin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:47978,test,testing,47978,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['test'],['testing']
Testability,"() << kWARNING << Form(""Dataset[%s] : "", method->fDataSetInfo.GetName()); 1796 << ""<TestAllMethods> cannot compute correlation matrices"" << Endl;; 1797 ; 1798 // print overlap matrices; 1799 Log() << kINFO << Form(""Dataset[%s] : "", method->fDataSetInfo.GetName()); 1800 << ""The following \""overlap\"" matrices contain the fraction of events for which "" << Endl;; 1801 Log() << kINFO << Form(""Dataset[%s] : "", method->fDataSetInfo.GetName()); 1802 << ""the MVAs 'i' and 'j' have returned conform answers about \""signal-likeness\"""" << Endl;; 1803 Log() << kINFO << Form(""Dataset[%s] : "", method->fDataSetInfo.GetName()); 1804 << ""An event is signal-like, if its MVA output exceeds the following value:"" << Endl;; 1805 gTools().FormattedOutput(rvec, *theVars, ""Method"", ""Cut value"", Log());; 1806 Log() << kINFO << Form(""Dataset[%s] : "", method->fDataSetInfo.GetName()); 1807 << ""which correspond to the working point: eff(signal) = 1 - eff(background)"" << Endl;; 1808 ; 1809 // give notice that cut method has been excluded from this test; 1810 if (nmeth != (Int_t)methods->size()); 1811 Log() << kINFO << Form(""Dataset[%s] : "", method->fDataSetInfo.GetName()); 1812 << ""Note: no correlations and overlap with cut method are provided at present"" << Endl;; 1813 ; 1814 if (nmeth > 1) {; 1815 Log() << kINFO << Endl;; 1816 Log() << kINFO << Form(""Dataset[%s] : "", method->fDataSetInfo.GetName()); 1817 << ""Inter-MVA overlap matrix (signal):"" << Endl;; 1818 gTools().FormattedOutput(*overlapS, *theVars, Log());; 1819 Log() << kINFO << Endl;; 1820 ; 1821 Log() << kINFO << Form(""Dataset[%s] : "", method->fDataSetInfo.GetName()); 1822 << ""Inter-MVA overlap matrix (background):"" << Endl;; 1823 gTools().FormattedOutput(*overlapB, *theVars, Log());; 1824 }; 1825 ; 1826 // cleanup; 1827 delete tpSig;; 1828 delete tpBkg;; 1829 delete corrMatS;; 1830 delete corrMatB;; 1831 delete theVars;; 1832 delete overlapS;; 1833 delete overlapB;; 1834 delete[] dvec;; 1835 }; 1836 }; 1837 }; 1838 // --------------------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:75162,test,test,75162,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['test'],['test']
Testability,"() << std::setw(10) << ""Epoch"" << "" | ""; 1002 << std::setw(12) << ""Train Err.""; 1003 << std::setw(12) << ""Test Err.""; 1004 << std::setw(12) << ""GFLOP/s""; 1005 << std::setw(12) << ""Conv. Steps"" << Endl;; 1006 std::string separator(62, '-');; 1007 Log() << separator << Endl;; 1008 }; 1009 ; 1010 while (!converged); 1011 {; 1012 stepCount++;; 1013 ; 1014 // Perform minimization steps for a full epoch.; 1015 trainingData.Shuffle();; 1016 for (size_t i = 0; i < batchesInEpoch; i += nThreads) {; 1017 batches.clear();; 1018 for (size_t j = 0; j < nThreads; j++) {; 1019 batches.reserve(nThreads);; 1020 batches.push_back(trainingData.GetBatch());; 1021 }; 1022 if (settings.momentum > 0.0) {; 1023 minimizer.StepMomentum(net, nets, batches, settings.momentum);; 1024 } else {; 1025 minimizer.Step(net, nets, batches);; 1026 }; 1027 }; 1028 ; 1029 if ((stepCount % minimizer.GetTestInterval()) == 0) {; 1030 ; 1031 // Compute test error.; 1032 Double_t testError = 0.0;; 1033 for (auto batch : testData) {; 1034 auto inputMatrix = batch.GetInput();; 1035 auto outputMatrix = batch.GetOutput();; 1036 testError += testNet.Loss(inputMatrix, outputMatrix);; 1037 }; 1038 testError /= (Double_t) (nTestSamples / settings.batchSize);; 1039 ; 1040 //Log the loss value; 1041 fTrainHistory.AddValue(""testError"",stepCount,testError);; 1042 ; 1043 end = std::chrono::system_clock::now();; 1044 ; 1045 // Compute training error.; 1046 Double_t trainingError = 0.0;; 1047 for (auto batch : trainingData) {; 1048 auto inputMatrix = batch.GetInput();; 1049 auto outputMatrix = batch.GetOutput();; 1050 trainingError += net.Loss(inputMatrix, outputMatrix);; 1051 }; 1052 trainingError /= (Double_t) (nTrainingSamples / settings.batchSize);; 1053 //Log the loss value; 1054 fTrainHistory.AddValue(""trainingError"",stepCount,trainingError);; 1055 ; 1056 // Compute numerical throughput.; 1057 std::chrono::duration<double> elapsed_seconds = end - start;; 1058 double seconds = elapsed_seconds.count();; 1059 double nFlo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:36929,test,testData,36929,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['test'],['testData']
Testability,"() const; Bool_tTObject::IsOnHeap() const; Bool_tIsParallel() const; Bool_tIsProofd() const; virtual Bool_tTNamed::IsSortable() const; Bool_tIsValid() const; Bool_tIsWaiting() const; Bool_tTObject::IsZombie() const; virtual Int_tLoad(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); static voidTQObject::LoadRQ_OBJECT(); voidLogMessage(const char* msg, Bool_t all)SIGNAL ; static voidLogViewer(const char* url = 0, Int_t sessionidx = 0); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; static TProofMgr*Mgr(const char* url); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; static TProof*Open(const char* url = 0, const char* conffile = 0, const char* confdir = 0, Int_t loglevel = 0); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); Int_tPing(); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Long64_tProcess(const char* selector, Long64_t nentries, Option_t* option = """"); virtual Long64_tProcess(TDSet* dset, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); virtual Long64_tProcess(TFileCollection* fc, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); virtual Long64_tProcess(const char* dsetname, const char* selector, Option_t* option = """", Lo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:10944,log,loglevel,10944,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,1,['log'],['loglevel']
Testability,"() const; Bool_tTProof::IsWaiting() const; Bool_tTObject::IsZombie() const; virtual Int_tTProof::Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); static voidTQObject::LoadRQ_OBJECT(); voidTProof::LogMessage(const char* msg, Bool_t all)SIGNAL ; static voidTProof::LogViewer(const char* url = 0, Int_t sessionidx = 0); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; static TProofMgr*TProof::Mgr(const char* url); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static TProof*TProof::Open(const char* url = 0, const char* conffile = 0, const char* confdir = 0, Int_t loglevel = 0); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); virtual voidTObject::Paint(Option_t* option = """"); Int_tTProof::Ping(); virtual voidTObject::Pop(); virtual voidTProof::Print(Option_t* option = """") const; virtual Long64_tProcess(const char* sel, Long64_t nent, Option_t* o = """"); virtual Long64_tProcess(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); virtual Long64_tProcess(TFileCollection* fc, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0); virtual Long64_tProcess(const char* dsname, const char* sel, Option_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofSuperMaster.html:11995,log,loglevel,11995,root/html530/TProofSuperMaster.html,https://root.cern,https://root.cern/root/html530/TProofSuperMaster.html,2,['log'],['loglevel']
Testability,"() const; Bool_tTProof::IsWaiting() const; Bool_tTObject::IsZombie() const; virtual Int_tTProof::Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); static voidTQObject::LoadRQ_OBJECT(); voidTProof::LogMessage(const char* msg, Bool_t all)SIGNAL ; static voidTProof::LogViewer(const char* url = 0, Int_t sessionidx = 0); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; static TProofMgr*TProof::Mgr(const char* url); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static TProof*TProof::Open(const char* url = 0, const char* conffile = 0, const char* confdir = 0, Int_t loglevel = 0); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); virtual voidTObject::Paint(Option_t* option = """"); Int_tTProof::Ping(); virtual voidTObject::Pop(); virtual voidTProof::Print(Option_t* option = """") const; virtual Long64_tProcess(const char* sel, Long64_t nent, Option_t* o = """"); virtual Long64_tProcess(TSelector* sel, Long64_t nent, Option_t* o = """"); virtual Long64_tProcess(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); virtual Long64_tProcess(TFileCollection* fc, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofSuperMaster.html:12877,log,loglevel,12877,root/html534/TProofSuperMaster.html,https://root.cern,https://root.cern/root/html534/TProofSuperMaster.html,1,['log'],['loglevel']
Testability,"() const; Bool_tTProof::IsWaiting() const; Bool_tTObject::IsZombie() const; virtual Int_tTProof::Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); static voidTQObject::LoadRQ_OBJECT(); voidTProof::LogMessage(const char* msg, Bool_t all)SIGNAL ; static voidTProof::LogViewer(const char* url = 0, Int_t sessionidx = 0); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; static TProofMgr*TProof::Mgr(const char* url); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static TProof*TProof::Open(const char* url = 0, const char* conffile = 0, const char* confdir = 0, Int_t loglevel = 0); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); virtual voidTObject::Paint(Option_t* option = """"); Int_tTProof::Ping(); virtual voidTObject::Pop(); virtual voidTProof::Print(Option_t* option = """") const; virtual Long64_tTProof::Process(const char* selector, Long64_t nentries, Option_t* option = """"); virtual Long64_tTProof::Process(TDSet* dset, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); virtual Long64_tTProof::Process(TFileCollection* fc, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofCondor.html:11959,log,loglevel,11959,root/html530/TProofCondor.html,https://root.cern,https://root.cern/root/html530/TProofCondor.html,2,['log'],['loglevel']
Testability,"() const; Bool_tTProof::IsWaiting() const; Bool_tTObject::IsZombie() const; virtual Int_tTProof::Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); static voidTQObject::LoadRQ_OBJECT(); voidTProof::LogMessage(const char* msg, Bool_t all)SIGNAL ; static voidTProof::LogViewer(const char* url = 0, Int_t sessionidx = 0); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; static TProofMgr*TProof::Mgr(const char* url); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static TProof*TProof::Open(const char* url = 0, const char* conffile = 0, const char* confdir = 0, Int_t loglevel = 0); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); virtual voidTObject::Paint(Option_t* option = """"); Int_tTProof::Ping(); virtual voidTObject::Pop(); virtual voidTProof::Print(Option_t* option = """") const; virtual Long64_tTProof::Process(const char* selector, Long64_t nentries, Option_t* option = """"); virtual Long64_tTProof::Process(TSelector* selector, Long64_t nentries, Option_t* option = """"); virtual Long64_tTProof::Process(TDSet* dset, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); virtual Long64_tTProof::Process(TFileCollection* fc, const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofCondor.html:12841,log,loglevel,12841,root/html534/TProofCondor.html,https://root.cern,https://root.cern/root/html534/TProofCondor.html,1,['log'],['loglevel']
Testability,"() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*createFundamental(const char* newname = 0) const; Roo1DTable*createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsCategory.html:3272,test,testArg,3272,root/html532/RooAbsCategory.html,https://root.cern,https://root.cern/root/html532/RooAbsCategory.html,1,['test'],['testArg']
Testability,"() const; virtual Bool_tTNamed::IsSortable() const; Bool_tIsTty() const; Bool_tIsValid() const; Bool_tIsWaiting() const; Bool_tTObject::IsZombie() const; virtual Int_tLoad(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); voidLogMessage(const char* msg, Bool_t all)SIGNAL ; static voidLogViewer(const char* url = 0, Int_t sessionidx = 0); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; static TProofMgr*Mgr(const char* url); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static TProof*Open(const char* url = 0, const char* conffile = 0, const char* confdir = 0, Int_t loglevel = 0); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); Int_tPing(); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Long64_tProcess(const char* selector, Long64_t nentries, Option_t* option = """"); virtual Long64_tProcess(TSelector* selector, Long64_t nentries, Option_t* option = """"); virtual Long64_tProcess(TDSet* dset, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); virtual Long64_tProcess(TFileCollection* fc, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); virtual Long64_tProcess(TDSet* ds",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProof.html:11623,log,loglevel,11623,root/html602/TProof.html,https://root.cern,https://root.cern/root/html602/TProof.html,2,['log'],['loglevel']
Testability,"() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; RooStats::HybridCalculatorOriginalHybridCalculatorOriginal(const char* name = 0); RooStats::HybridCalculatorOriginalHybridCalculatorOriginal(const RooStats::HybridCalculatorOriginal&); RooStats::HybridCalculatorOriginalHybridCalculatorOriginal(RooAbsData& data, const RooStats::ModelConfig& sb_model, const RooStats::ModelConfig& b_model, bool GenerateBinned = false, int testStatistics = 1, int ntoys = 1000); RooStats::HybridCalculatorOriginalHybridCalculatorOriginal(RooAbsPdf& sb_model, RooAbsPdf& b_model, RooArgList& observables, const RooArgSet* nuisance_parameters = 0, RooAbsPdf* prior_pdf = 0, bool GenerateBinned = false, int testStatistics = 1, int ntoys = 1000); RooStats::HybridCalculatorOriginalHybridCalculatorOriginal(RooAbsData& data, RooAbsPdf& sb_model, RooAbsPdf& b_model, const RooArgSet* nuisance_parameters = 0, RooAbsPdf* prior_pdf = 0, bool GenerateBinned = false, int testStatistics = 1, int ntoys = 1000); RooStats::HypoTestCalculatorRooStats::HypoTestCalculator::HypoTestCalculator(); RooStats::HypoTestCalculatorRooStats::HypoTestCalculator::HypoTestCalculator(const RooStats::HypoTestCalculator&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator dele",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HybridCalculatorOriginal.html:5609,test,testStatistics,5609,root/html602/RooStats__HybridCalculatorOriginal.html,https://root.cern,https://root.cern/root/html602/RooStats__HybridCalculatorOriginal.html,2,['test'],['testStatistics']
Testability,"() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; RooStats::HybridCalculatorOriginalHybridCalculatorOriginal(const char* name = 0); RooStats::HybridCalculatorOriginalHybridCalculatorOriginal(const RooStats::HybridCalculatorOriginal&); RooStats::HybridCalculatorOriginalHybridCalculatorOriginal(RooAbsData& data, const RooStats::ModelConfig& sb_model, const RooStats::ModelConfig& b_model, bool GenerateBinned = false, int testStatistics = 1, int ntoys = 1000); RooStats::HybridCalculatorOriginalHybridCalculatorOriginal(RooAbsPdf& sb_model, RooAbsPdf& b_model, RooArgList& observables, const RooArgSet* nuisance_parameters = 0, RooAbsPdf* prior_pdf = 0, bool GenerateBinned = false, int testStatistics = 1, int ntoys = 1000); RooStats::HybridCalculatorOriginalHybridCalculatorOriginal(RooAbsData& data, RooAbsPdf& sb_model, RooAbsPdf& b_model, const RooArgSet* nuisance_parameters = 0, RooAbsPdf* prior_pdf = 0, bool GenerateBinned = false, int testStatistics = 1, int ntoys = 1000); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::ope",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HybridCalculatorOriginal.html:5599,test,testStatistics,5599,root/html528/RooStats__HybridCalculatorOriginal.html,https://root.cern,https://root.cern/root/html528/RooStats__HybridCalculatorOriginal.html,1,['test'],['testStatistics']
Testability,"() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; RooStats::HybridCalculatorOriginalHybridCalculatorOriginal(const char* name = 0); RooStats::HybridCalculatorOriginalHybridCalculatorOriginal(const RooStats::HybridCalculatorOriginal&); RooStats::HybridCalculatorOriginalHybridCalculatorOriginal(RooAbsData& data, const RooStats::ModelConfig& sb_model, const RooStats::ModelConfig& b_model, bool GenerateBinned = false, int testStatistics = 1, int ntoys = 1000); RooStats::HybridCalculatorOriginalHybridCalculatorOriginal(RooAbsPdf& sb_model, RooAbsPdf& b_model, RooArgList& observables, const RooArgSet* nuisance_parameters = 0, RooAbsPdf* prior_pdf = 0, bool GenerateBinned = false, int testStatistics = 1, int ntoys = 1000); RooStats::HybridCalculatorOriginalHybridCalculatorOriginal(RooAbsData& data, RooAbsPdf& sb_model, RooAbsPdf& b_model, const RooArgSet* nuisance_parameters = 0, RooAbsPdf* prior_pdf = 0, bool GenerateBinned = false, int testStatistics = 1, int ntoys = 1000); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HybridCalculatorOriginal.html:5609,test,testStatistics,5609,root/html530/RooStats__HybridCalculatorOriginal.html,https://root.cern,https://root.cern/root/html530/RooStats__HybridCalculatorOriginal.html,3,['test'],['testStatistics']
Testability,"() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; virtual Bool_tisValid() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); const RooArgSet&numIntCatVars() const; const RooArgSet&numIntRealVa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooRealIntegral.html:16553,log,logEvalError,16553,root/html532/RooRealIntegral.html,https://root.cern,https://root.cern/root/html532/RooRealIntegral.html,1,['log'],['logEvalError']
Testability,"() const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; MethodBase * fCurrentMethod;  ; UInt_t fCurrentMethodIdx;  ; std::vector< IMethod * > fMethods;  vector of all classifiers ;  ; std::vector< Double_t > fMethodWeight;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodCompositeBase.html:27153,test,testing,27153,doc/master/classTMVA_1_1MethodCompositeBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCompositeBase.html,2,"['log', 'test']","['logger', 'testing']"
Testability,"() constget the momentum (e.g. for SGD)Definition NeuralNet.h:772; TMVA::DNN::Settings::count_Esize_t count_EDefinition NeuralNet.h:842; TMVA::DNN::Settings::m_timerTimer m_timertimer for monitoringDefinition NeuralNet.h:832; TMVA::DNN::Settings::testRepetitionssize_t testRepetitions() consthow often is the test data testedDefinition NeuralNet.h:768; TMVA::DNN::Settings::clearvoid clear(std::string histoName)for monitoringDefinition NeuralNet.h:824; TMVA::DNN::Settings::endTestCyclevirtual void endTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:805; TMVA::DNN::Settings::fMinimizerTypeMinimizerType fMinimizerTypeDefinition NeuralNet.h:855; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x, double y)for monitoringDefinition NeuralNet.h:822; TMVA::DNN::Settings::setMonitoringvoid setMonitoring(std::shared_ptr< Monitoring > ptrMonitoring)prepared for monitoringDefinition NeuralNet.h:764; TMVA::DNN::Settings::testIterationvirtual void testIteration()callback for monitoring and logggingDefinition NeuralNet.h:806; TMVA::DNN::Settings::m_convergenceStepssize_t m_convergenceStepsnumber of steps without improvement to consider the DNN to have convergedDefinition NeuralNet.h:837; TMVA::DNN::Settings::hasConvergedvirtual bool hasConverged(double testError)has this training converged already?Definition NeuralNet.cxx:485; TMVA::DNN::Settings::minimizerTypeMinimizerType minimizerType() constwhich minimizer shall be used (e.g. SGD)Definition NeuralNet.h:774; TMVA::DNN::Settings::m_dropOutstd::vector< double > m_dropOutDefinition NeuralNet.h:850; TMVA::DNN::Settings::m_minProgressdouble m_minProgresscurrent limits for the progress barDefinition NeuralNet.h:833; TMVA::DNN::Settings::cyclevirtual void cycle(double progress, TString text)Definition NeuralNet.h:799; TMVA::DNN::Settings::setProgressLimitsvirtual void setProgressLimits(double minProgress=0, double maxProgress=100)Definition NeuralNet.h:790; TMVA::DNN::Settings::m_maxProgressd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:73034,test,testIterationvirtual,73034,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,3,"['log', 'test']","['logggingDefinition', 'testIteration', 'testIterationvirtual']"
Testability,"()));; 742 trainPattern.back ().addInput (1.0); // bias node; 743 }; 744 }; 745 ; 746 for (auto &event : eventCollectionTesting) {; 747 const std::vector<Float_t>& values = event->GetValues();; 748 if (fAnalysisType == Types::kClassification) {; 749 double outputValue = event->GetClass () == 0 ? 0.9 : 0.1;; 750 testPattern.push_back(Pattern (values.begin(),; 751 values.end(),; 752 outputValue,; 753 event->GetWeight()));; 754 testPattern.back().addInput(1.0);; 755 } else if (fAnalysisType == Types::kMulticlass) {; 756 std::vector<Float_t> oneHot(DataInfo().GetNClasses(), 0.0);; 757 oneHot[event->GetClass()] = 1.0;; 758 testPattern.push_back(Pattern (values.begin(), values.end(),; 759 oneHot.cbegin(), oneHot.cend(),; 760 event->GetWeight()));; 761 testPattern.back().addInput(1.0);; 762 } else {; 763 const std::vector<Float_t>& targets = event->GetTargets ();; 764 testPattern.push_back(Pattern(values.begin(),; 765 values.end(),; 766 targets.begin(),; 767 targets.end(),; 768 event->GetWeight ()));; 769 testPattern.back ().addInput (1.0); // bias node; 770 }; 771 }; 772 ; 773 TMVA::DNN::Net net;; 774 std::vector<double> weights;; 775 ; 776 net.SetIpythonInteractive(fInteractive, &fExitFromTraining, &fIPyMaxIter, &fIPyCurrentIter);; 777 ; 778 net.setInputSize(fNet.GetInputWidth() + 1);; 779 net.setOutputSize(fNet.GetOutputWidth() + 1);; 780 ; 781 for (size_t i = 0; i < fNet.GetDepth(); i++) {; 782 EActivationFunction f = fNet.GetLayer(i).GetActivationFunction();; 783 EnumFunction g = EnumFunction::LINEAR;; 784 switch(f) {; 785 case EActivationFunction::kIdentity: g = EnumFunction::LINEAR; break;; 786 case EActivationFunction::kRelu: g = EnumFunction::RELU; break;; 787 case EActivationFunction::kSigmoid: g = EnumFunction::SIGMOID; break;; 788 case EActivationFunction::kTanh: g = EnumFunction::TANH; break;; 789 case EActivationFunction::kFastTanh: g = EnumFunction::TANH; break;; 790 case EActivationFunction::kSymmRelu: g = EnumFunction::SYMMRELU; break;; 791 case EActivatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:27240,test,testPattern,27240,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['test'],['testPattern']
Testability,"()->GetEventY(); }. TObject * GetSelected() const. { return GetCanvas()->GetSelected(); }. Int_t GetSelectedX() const. { return GetCanvas()->GetSelectedX(); }. Int_t GetSelectedY() const. { return GetCanvas()->GetSelectedY(); }. TVirtualPad * GetSelectedPad() const. { return GetCanvas()->GetSelectedPad(); }. UInt_t GetAllBits() const; ----- bit manipulation. { return fBits; }. void SetAllBits(UInt_t f); { fBits = f; }. void SetBit(UInt_t f); { fBits |= f & kBitMask; }. void ResetBit(UInt_t f); { fBits &= ~(f & kBitMask); }. Bool_t TestBit(UInt_t f) const; { return (Bool_t) ((fBits & f) != 0); }. Int_t TestBits(UInt_t f) const; { return (Int_t) (fBits & f); }. void InvertBit(UInt_t f); { fBits ^= f & kBitMask; }. TQtCanvasPainter * CanvasDecorator(); { return fCanvasDecorator; }. void SetCanvasDecorator(TQtCanvasPainter* decorator); { fCanvasDecorator = decorator;}. void EnableSignalEvents(UInt_t f); { SetBit (f); }. void DisableSignalEvents(UInt_t f); { ResetBit(f); }. Bool_t IsSignalEventEnabled(UInt_t f) const; { return TestBit (f); }. void EmitSignal(UInt_t f); {if (IsSignalEventEnabled(f)) EmitTestedSignal();}. void SetIgnoreLeaveEnter(int ignoreLE = 1); { fIgnoreLeaveEnter = ignoreLE; }. TQtWidget(const TQtWidget& ). void operator=(const TQtWidget& ); ----- Private bits, clients can only test but not change them. void ResetCanvas(); { fCanvas = 0;}. bool IsDoubleBuffered() const; { return fDoubleBufferOn; }. void EmitCanvasPainted(); { emit CanvasPainted(); }. void CanvasPainted(); emit the Qt signal when the double buffer of the TCamvas has been filled up. void Saved(bool ok). void RootEventProcessed(TObject* selected, unsigned int event, TCanvas* c). » Author: Valeri Fine 21/01/2002 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/qt:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TQtWidget.html:31614,test,test,31614,root/html604/TQtWidget.html,https://root.cern,https://root.cern/root/html604/TQtWidget.html,1,['test'],['test']
Testability,"()->GetEventY(); }. TObject * GetSelected() const. { return GetCanvas()->GetSelected(); }. Int_t GetSelectedX() const. { return GetCanvas()->GetSelectedX(); }. Int_t GetSelectedY() const. { return GetCanvas()->GetSelectedY(); }. TVirtualPad * GetSelectedPad() const. { return GetCanvas()->GetSelectedPad(); }. UInt_t GetAllBits() const; ----- bit manipulation. { return fBits; }. void SetAllBits(UInt_t f); { fBits = f; }. void SetBit(UInt_t f); { fBits |= f & kBitMask; }. void ResetBit(UInt_t f); { fBits &= ~(f & kBitMask); }. Bool_t TestBit(UInt_t f) const; { return (Bool_t) ((fBits & f) != 0); }. Int_t TestBits(UInt_t f) const; { return (Int_t) (fBits & f); }. void InvertBit(UInt_t f); { fBits ^= f & kBitMask; }. TQtCanvasPainter * CanvasDecorator(); { return fCanvasDecorator; }. void SetCanvasDecorator(TQtCanvasPainter* decorator); { fCanvasDecorator = decorator;}. void EnableSignalEvents(UInt_t f); { SetBit (f); }. void DisableSignalEvents(UInt_t f); { ResetBit(f); }. Bool_t IsSignalEventEnabled(UInt_t f) const; { return TestBit (f); }. void EmitSignal(UInt_t f); {if (IsSignalEventEnabled(f)) EmitTestedSignal();}. void SetIgnoreLeaveEnter(int ignoreLE = 1); { fIgnoreLeaveEnter = ignoreLE; }. TQtWidget(const TQtWidget& ). void operator=(const TQtWidget& ); ----- Private bits, clients can only test but not change them. void ResetCanvas(); { fCanvas = 0;}. bool IsDoubleBuffered() const; { return fDoubleBufferOn; }. void EmitCanvasPainted(); { emit CanvasPainted(); }. void CanvasPainted(); emit the Qt signal when the double buffer of the TCamvas has been filled up. void Saved(bool ok). void RootEventProcessed(TObject* selected, unsigned int event, TCanvas* c). » Author: Valeri Fine 21/01/2002 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/qt:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQtWidget.html:31614,test,test,31614,root/html602/TQtWidget.html,https://root.cern,https://root.cern/root/html602/TQtWidget.html,1,['test'],['test']
Testability,"()->SetBinLabel(ibiny, fTotalHistogram->GetYaxis()->GetBinLabel(ibiny));; 1961 }; 1962 ; 1963 //copying style information; 1964 TAttLine::Copy(*hist);; 1965 TAttFill::Copy(*hist);; 1966 TAttMarker::Copy(*hist);; 1967 hist->SetStats(false);; 1968 ; 1969 return;; 1970 ; 1971}; 1972////////////////////////////////////////////////////////////////////////////////; 1973/**; 1974Calculates the boundaries for the frequentist Clopper-Pearson interval; 1975 ; 1976This interval is recommended by the PDG.; 1977 ; 1978\param[in] total number of total events; 1979\param[in] passed 0 <= number of passed events <= total; 1980\param[in] level confidence level; 1981\param[in] bUpper true - upper boundary is returned; 1982 ;false - lower boundary is returned; 1983 ; 1984Calculation:; 1985 ; 1986The lower boundary of the Clopper-Pearson interval is the ""exact"" inversion; 1987of the test:; 1988 \f{eqnarray*}{; 1989 P(x \geq passed; total) &=& \frac{1 - level}{2}\\; 1990 P(x \geq passed; total) &=& 1 - P(x \leq passed - 1; total)\\; 1991 &=& 1 - \frac{1}{norm} * \int_{0}^{1 - \varepsilon} t^{total - passed} (1 - t)^{passed - 1} dt\\; 1992 &=& 1 - \frac{1}{norm} * \int_{\varepsilon}^{1} t^{passed - 1} (1 - t)^{total - passed} dt\\; 1993 &=& \frac{1}{norm} * \int_{0}^{\varepsilon} t^{passed - 1} (1 - t)^{total - passed} dt\\; 1994 &=& I_{\varepsilon}(passed,total - passed + 1); 1995 \f}; 1996The lower boundary is therefore given by the \f$ \frac{1 - level}{2}\f$ quantile; 1997of the beta distribution.; 1998 ; 1999The upper boundary of the Clopper-Pearson interval is the ""exact"" inversion; 2000of the test:; 2001 \f{eqnarray*}{; 2002 P(x \leq passed; total) &=& \frac{1 - level}{2}\\; 2003 P(x \leq passed; total) &=& \frac{1}{norm} * \int_{0}^{1 - \varepsilon} t^{total - passed - 1} (1 - t)^{passed} dt\\; 2004 &=& \frac{1}{norm} * \int_{\varepsilon}^{1} t^{passed} (1 - t)^{total - passed - 1} dt\\; 2005 &=& 1 - \frac{1}{norm} * \int_{0}^{\varepsilon} t^{passed} (1 - t)^{total - passed - 1} dt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEfficiency_8cxx_source.html:80821,test,test,80821,doc/master/TEfficiency_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEfficiency_8cxx_source.html,1,['test'],['test']
Testability,"(). ; If called on first() this method returns NULL. Otherwise it will return the option with the same Descriptor::index that precedes this option on the command line. ; Definition at line 656 of file OptionParser.h. ◆ prevwrap(). Option * ROOT::option::Option::prevwrap ; (; ). inline . Returns a pointer to the previous element of the linked list with wrap-around from first() to last(). ; If called on first() this method returns last(). Otherwise it will return the option with the same Descriptor::index that precedes this option on the command line. ; Definition at line 669 of file OptionParser.h. ◆ tag(). static Option * ROOT::option::Option::tag ; (; Option * ; ptr). inlinestaticprivate . Definition at line 834 of file OptionParser.h. ◆ type(). int ROOT::option::Option::type ; (; ); const. inline . Returns Descriptor::type of this Option's Descriptor, or 0 if this Option is invalid (unused). ; Because this method (and last(), too) can be used even on unused Options with desc==0, you can (provided you arrange your types properly) switch on type() without testing validity first. enum OptionType { UNUSED=0, DISABLED=0, ENABLED=1 };; enum OptionIndex { FOO };; const Descriptor usage[] = {; { FOO, ENABLED, """", ""enable-foo"", Arg::None, 0 },; { FOO, DISABLED, """", ""disable-foo"", Arg::None, 0 },; { 0, 0, 0, 0, 0, 0 } };; ...; switch(options[FOO].last()->type()) // no validity check required!; {; case ENABLED: ...; case DISABLED: ... // UNUSED==DISABLED !; }; ROOT::option::Arg::Nonestatic ArgStatus None(const Option &, bool)For options that don't take an argument: Returns ARG_NONE.Definition OptionParser.h:907. Definition at line 544 of file OptionParser.h. ◆ untag(). static Option * ROOT::option::Option::untag ; (; Option * ; ptr). inlinestaticprivate . Definition at line 839 of file OptionParser.h. Member Data Documentation. ◆ arg. const char* ROOT::option::Option::arg. Pointer to this Option's argument (if any). ; NULL if this option has no argument. Do not confuse this w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html:12327,test,testing,12327,doc/v632/classROOT_1_1option_1_1Option.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html,2,['test'],['testing']
Testability,"(). ROOT::Math::IBaseFunctionMultiDim* Clone() const. Bool_t Synchronize(vector<ROOT::Fit::ParameterSettings>& parameters, Bool_t optConst, Bool_t verbose). Double_t GetPdfParamVal(Int_t index); Access PDF parameter value by ordinal index (needed by MINUIT). Double_t GetPdfParamErr(Int_t index); Access PDF parameter error by ordinal index (needed by MINUIT). void SetPdfParamErr(Int_t index, Double_t value); Modify PDF parameter error by ordinal index (needed by MINUIT). void ClearPdfParamAsymErr(Int_t index); Modify PDF parameter error by ordinal index (needed by MINUIT). void SetPdfParamErr(Int_t index, Double_t loVal, Double_t hiVal); Modify PDF parameter error by ordinal index (needed by MINUIT). void BackProp(const ROOT::Fit::FitResult& results); Transfer MINUIT fit results back into RooFit objects. Bool_t SetLogFile(const char* inLogfile); Change the file name for logging of a RooMinimizer of all MINUIT steppings; through the parameter space. If inLogfile is null, the current log file; is closed and logging is stopped. void ApplyCovarianceMatrix(TMatrixDSym& V); Apply results of given external covariance matrix. i.e. propagate its errors; to all RRV parameter representations and give this matrix instead of the; HESSE matrix at the next save() call. Bool_t SetPdfParamVal(const Int_t& index, const Double_t& value) const; RooRealVar* par = (RooRealVar*)_floatParamList->at(index);. void updateFloatVec(). double DoEval(const double* x) const. unsigned int NDim() const; { return _nDim; }. RooArgList* GetFloatParamList(); { return _floatParamList; }. RooArgList* GetConstParamList(); { return _constParamList; }. RooArgList* GetInitFloatParamList(); { return _initFloatParamList; }. RooArgList* GetInitConstParamList(); { return _initConstParamList; }. void SetEvalErrorWall(Bool_t flag); { _doEvalErrorWall = flag ; }. void SetPrintEvalErrors(Int_t numEvalErrors); { _printEvalErrors = numEvalErrors ; }. std::ofstream* GetLogFile(); { return _logfile; }. void SetVerbose(Boo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMinimizerFcn.html:3699,log,log,3699,root/html602/RooMinimizerFcn.html,https://root.cern,https://root.cern/root/html602/RooMinimizerFcn.html,4,['log'],"['log', 'logging']"
Testability,"(). UInt_t TFile::GetOpenTimeout ; (; ). static . Returns open timeout (in ms). ; Definition at line 4734 of file TFile.cxx. ◆ GetOption(). Option_t * TFile::GetOption ; (; ); const. inlineoverridevirtual . Reimplemented from TObject.; Definition at line 240 of file TFile.h. ◆ GetReadaheadSize(). Int_t TFile::GetReadaheadSize ; (; ). static . Static function returning the readahead buffer size. ; Definition at line 4599 of file TFile.cxx. ◆ GetReadCalls(). virtual Int_t TFile::GetReadCalls ; (; ); const. inlinevirtual . Definition at line 244 of file TFile.h. ◆ GetReadStreamerInfo(). Bool_t TFile::GetReadStreamerInfo ; (; ). static . If the streamerinfos are to be read at file opening. ; See TFile::SetReadStreamerInfo for more documentation. ; Definition at line 3742 of file TFile.cxx. ◆ GetRecordHeader(). Int_t TFile::GetRecordHeader ; (; char * ; buf, . Long64_t ; first, . Int_t ; maxbytes, . Int_t & ; nbytes, . Int_t & ; objlen, . Int_t & ; keylen . ). Read the logical record header starting at a certain postion. ; Parameters. [in]bufpointer to buffer ; [in]firstread offset ; [in]maxbytesBytes which are read into buf. ; [out]nbytesNumber of bytes in record if negative, this is a deleted record if 0, cannot read record, wrong value of argument first ; [out]objlenUncompressed object size ; [out]keylenLength of logical record header. The function reads nread bytes where nread is the minimum of maxbytes and the number of bytes before the end of file. The function returns nread. Note that the arguments objlen and keylen are returned only if maxbytes >=16 ; Definition at line 1301 of file TFile.cxx. ◆ GetRelOffset(). Long64_t TFile::GetRelOffset ; (; ); const. inline . Definition at line 251 of file TFile.h. ◆ GetSeekFree(). virtual Long64_t TFile::GetSeekFree ; (; ); const. inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 252 of file TFile.h. ◆ GetSeekInfo(). virtual Long64_t TFile::GetSeekInfo ; (; ); const. inlinevirtual . Reimplemented i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:68131,log,logical,68131,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,2,['log'],['logical']
Testability,"(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); const RooArgList&paramList() const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/PiecewiseInterpolation.html:18432,test,testArg,18432,root/html528/PiecewiseInterpolation.html,https://root.cern,https://root.cern/root/html528/PiecewiseInterpolation.html,1,['test'],['testArg']
Testability,"(); Removes previously defined convolution window, reverting to convolution from -inf to +inf. void setConvolutionWindow(RooAbsReal& centerParam, RooAbsReal& widthParam, Double_t widthScaleFactor = 1); Restrict convolution integral to finite range [ x - C - S*W, x - C + S*W ]; where x is current value of convolution variablem, C = centerParam, W=widthParam and S = widthScaleFactor; Inputs centerParam and withParam can be function expressions (RooAbsReal, RooFormulaVar) etc. void setCallWarning(Int_t threshold = 2000); Activate warning messages if number of function calls needed for evaluation of convolution integral; exceeds given threshold. void setCallProfiling(Bool_t flag, Int_t nbinX = 40, Int_t nbinCall = 40, Int_t nCallHigh = 1000); Activate call profile if flag is set to true. A 2-D histogram is kept that stores the required number; of function calls versus the value of x, the convolution variable. All clones of RooNumConvolution objects will keep logging to the histogram of the original class; so that performance of temporary object clones, such as used in e.g. fitting, plotting and generating; are all logged in a single place. Function caller should take ownership of profiling histogram as it is not deleted at the RooNumConvolution dtor. Calling this function with flag set to false will deactivate call profiling and delete the profiling histogram. void printCompactTreeHook(ostream& os, const char* indent = """"); Hook function to intercept printCompactTree() calls so that it can print out; the content of its private cache in the print sequence. TObject* clone(const char* newname) const; { return new RooNumConvolution(*this,newname) ; }. RooNumIntConfig& convIntConfig(); { _init = kFALSE ; return _convIntConfig ; }. const RooNumIntConfig& convIntConfig() const; { _init = kFALSE ; return _convIntConfig ; }. const TH2* profileData() const; { return _doProf ? _callHist : 0 ; }. RooRealVar& var() const; Access components. { return (RooRealVar&) _origVar.arg() ; }. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNumConvolution.html:38225,log,logging,38225,root/html528/RooNumConvolution.html,https://root.cern,https://root.cern/root/html528/RooNumConvolution.html,6,['log'],['logging']
Testability,"(); Removes previously defined convolution window, reverting to convolution from -inf to +inf. void setConvolutionWindow(RooAbsReal& centerParam, RooAbsReal& widthParam, Double_t widthScaleFactor = 1); Restrict convolution integral to finite range [ x - C - S*W, x - C + S*W ]; where x is current value of convolution variablem, C = centerParam, W=widthParam and S = widthScaleFactor; Inputs centerParam and withParam can be function expressions (RooAbsReal, RooFormulaVar) etc. void setCallWarning(Int_t threshold = 2000); Activate warning messages if number of function calls needed for evaluation of convolution integral; exceeds given threshold. void setCallProfiling(Bool_t flag, Int_t nbinX = 40, Int_t nbinCall = 40, Int_t nCallHigh = 1000); Activate call profile if flag is set to true. A 2-D histogram is kept that stores the required number; of function calls versus the value of x, the convolution variable. All clones of RooNumConvolution objects will keep logging to the histogram of the original class; so that performance of temporary object clones, such as used in e.g. fitting, plotting and generating; are all logged in a single place. Function caller should take ownership of profiling histogram as it is not deleted at the RooNumConvolution dtor. Calling this function with flag set to false will deactivate call profiling and delete the profiling histogram. void printCompactTreeHook(ostream& os, const char* indent = """"); Hook function to intercept printCompactTree() calls so that it can print out; the content of its private cache in the print sequence. TObject* clone(const char* newname) const; { return new RooNumConvolution(*this,newname) ; }. RooNumIntConfig& convIntConfig(); { _init = kFALSE ; return _convIntConfig ; }. const RooNumIntConfig& convIntConfig(); { _init = kFALSE ; return _convIntConfig ; }. const TH2* profileData() const; { return _doProf ? _callHist : 0 ; }. RooRealVar& var() const; Access components. { return (RooRealVar&) _origVar.arg() ; }. RooAbs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumConvolution.html:37984,log,logging,37984,root/html526/RooNumConvolution.html,https://root.cern,https://root.cern/root/html526/RooNumConvolution.html,1,['log'],['logging']
Testability,"(); process user options. void SingleTrain(); initialization. void FindMVACut(TMVA::MethodBase* method); find the CUT on the individual MVA that defines an event as; correct or misclassified (to be used in the boosting process). Double_t SingleBoost(TMVA::MethodBase* method). Double_t AdaBoost(TMVA::MethodBase* method, Bool_t useYesNoLeaf); the standard (discrete or real) AdaBoost algorithm. Double_t Bagging(); Bagging or Bootstrap boosting, gives new random poisson weight for every event. void GetHelpMessage() const; Get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". const TMVA::Ranking* CreateRanking(). Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); return boosted MVA response. Double_t GetBoostROCIntegral(Bool_t , TMVA::Types::ETreeType , Bool_t CalcOverlapIntergral = kFALSE); Calculate the ROC integral of a single classifier or even the; whole boosted classifier. The tree type (training or testing; sample) is specified by 'eTT'. If tree type kTraining is set, the original training sample is; used to compute the ROC integral (original weights). - singleMethod - if kTRUE, return ROC integral of single (last; trained) classifier; if kFALSE, return ROC; integral of full classifier. - eTT - tree type (Types::kTraining / Types::kTesting). - CalcOverlapIntergral - if kTRUE, the overlap integral of the; signal/background MVA distributions; is calculated and stored in; 'fOverlap_integral'. void CalcMVAValues(); Calculate MVA values of current method fMethods.back() on; training sample. void MonitorBoost(TMVA::Types::EBoostStage stage, UInt_t methodIdx = 0); fill various monitoring histograms from information of the individual classifiers that; have been boosted.; of course.... this depends very much on the individual classifiers, and so far, only for; Decision Trees, this monitoring is actually implemented. MethodBoost(const TString& jobName, const TString& methodTitle, TMVA::DataSetIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodBoost.html:23258,test,testing,23258,root/html602/TMVA__MethodBoost.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodBoost.html,2,['test'],['testing']
Testability,"(); process user options. void SingleTrain(); initialization. void FindMVACut(TMVA::MethodBase* method); find the CUT on the individual MVA that defines an event as; correct or misclassified (to be used in the boosting process). Double_t SingleBoost(TMVA::MethodBase* method). Double_t AdaBoost(TMVA::MethodBase* method, Bool_t useYesNoLeaf); the standard (discrete or real) AdaBoost algorithm. Double_t Bagging(); Bagging or Bootstrap boosting, gives new random poisson weight for every event. void GetHelpMessage() const; Get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". const TMVA::Ranking* CreateRanking(). Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); return boosted MVA response. Double_t GetBoostROCIntegral(Bool_t , TMVA::Types::ETreeType , Bool_t CalcOverlapIntergral = kFALSE); Calculate the ROC integral of a single classifier or even the; whole boosted classifier. The tree type (training or testing; sample) is specified by 'eTT'. If tree type kTraining is set, the original training sample is; used to compute the ROC integral (original weights). - singleMethod - if kTRUE, return ROC integral of single (last; trained) classifier; if kFALSE, return ROC; integral of full classifier. - eTT - tree type (Types::kTraining / Types::kTesting). - CalcOverlapIntergral - if kTRUE, the overlap integral of the; signal/background MVA distributions; is calculated and stored in; 'fOverlap_integral'. void CalcMVAValues(); Calculate MVA values of current method fMethods.back() on; training sample. void MonitorBoost(TMVA::Types::EBoostStage stage, UInt_t methodIdx = 0); fill various monitoring histograms from information of the individual classifiers that; have been boosted.; of course.... this depends very much on the individual classifiers, and so far, only for; Decision Trees, this monitoring is actually implemented. void SetBoostedMethodName(TString methodName); { fBoostedMethodName = methodNam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodBoost.html:21542,test,testing,21542,root/html534/TMVA__MethodBoost.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodBoost.html,1,['test'],['testing']
Testability,"(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<Double32_t> >::Scalar tolerance = 100*std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html:15575,log,log,15575,root/html528/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,4,['log'],['log']
Testability,"(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px();",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html:15088,log,log,15088,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,4,['log'],['log']
Testability,"(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<Double32_t> >::Scalar tolerance = 100*std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html:15575,log,log,15575,root/html528/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,4,['log'],['log']
Testability,"(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px();",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html:15088,log,log,15088,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,4,['log'],['log']
Testability,"(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar tolerance = 100*std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px();",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html:15293,log,log,15293,root/html528/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,4,['log'],['log']
Testability,"(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html:14804,log,log,14804,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,4,['log'],['log']
Testability,"(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar tolerance = 100*std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px();",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html:15293,log,log,15293,root/html528/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,4,['log'],['log']
Testability,"(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html:14804,log,log,14804,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,4,['log'],['log']
Testability,"();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinWidthFunction.html:46668,log,logged,46668,doc/master/classRooBinWidthFunction.html,https://root.cern,https://root.cern/doc/master/classRooBinWidthFunction.html,140,['log'],['logged']
Testability,"();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. Scalar Dot(const OtherLorentzVector & q); ------ Operations combining two Lorentz vectors ------. scalar (Dot) product of two LorentzVector vectors (metric is -,-,-,+); Enable the product using any other LorentzVector implementing; the x(), y() , y() and t() member functions; \param q any LorentzVector implementing the x(), y() , z() and t(); member functions; \return the result of v.q of type according to the base scalar type of v. return operator*(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& a) const; LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar tolerance = 100*std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect() const; TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Sca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html:18873,log,log,18873,root/html526/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html,1,['log'],['log']
Testability,"();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. Scalar Dot(const OtherLorentzVector & q); ------ Operations combining two Lorentz vectors ------. scalar (Dot) product of two LorentzVector vectors (metric is -,-,-,+); Enable the product using any other LorentzVector implementing; the x(), y() , y() and t() member functions; \param q any LorentzVector implementing the x(), y() , z() and t(); member functions; \return the result of v.q of type according to the base scalar type of v. return operator*(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& a) const; LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar tolerance = 100*std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect() const; TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Sca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html:17267,log,log,17267,root/html526/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html,1,['log'],['log']
Testability,"(1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=fals",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChebychev.html:61515,test,testArg,61515,doc/master/classRooChebychev.html,https://root.cern,https://root.cern/doc/master/classRooChebychev.html,36,['test'],['testArg']
Testability,"(; const Char_t * ; option = ""p""); const. Kolmogorov-Smirnov 1-Sample Test. ; Returns default p-value; option ""t"" returns the test statistic value ""Dn"". ; Definition at line 945 of file GoFTest.cxx. ◆ KolmogorovSmirnovTest() [2/2]. void ROOT::Math::GoFTest::KolmogorovSmirnovTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Kolmogorov-Smirnov 1-Sample Test. ; The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm and described and taken from (4) Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge University Press ; Definition at line 921 of file GoFTest.cxx. ◆ LogNormalCDF(). Double_t ROOT::Math::GoFTest::LogNormalCDF ; (; Double_t ; x); const. private . ◆ LogSample(). void ROOT::Math::GoFTest::LogSample ; (; ). private . Applies the logarithm to the sample when the specified distribution to test is LogNormal. ; Definition at line 303 of file GoFTest.cxx. ◆ operator()() [1/2]. void ROOT::Math::GoFTest::operator() ; (; ETestType ; test, . Double_t & ; pvalue, . Double_t & ; testStat . ); const. The class's unary functions performing the gif test according to the ETestType provided. ; Definition at line 208 of file GoFTest.cxx. ◆ operator()() [2/2]. Double_t ROOT::Math::GoFTest::operator() ; (; ETestType ; test = kAD, . const Char_t * ; option = ""p"" . ); const. Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value specific to the test type. ; Definition at line 225 of file GoFTest.cxx. ◆ operator=(). GoFTest ROOT::Math::GoFTest::operator= ; (; GoFTest & ; gof). private . Disallowed assign operator. . ◆ PValueAD1Sample(). Double_t ROOT::Math::GoFTest::PValueAD1Sample ; (; Double_t ; A2); const. private . Computation of the 1-Sample Anderson-Darling Test's p-value. ; Definition at line 483 of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:16062,log,logarithm,16062,doc/master/classROOT_1_1Math_1_1GoFTest.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html,2,"['log', 'test']","['logarithm', 'test']"
Testability,"(; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3464 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3408 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input paramete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:120837,log,logging,120837,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['log'],['logging']
Testability,"(; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3545 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3490 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input paramete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:122167,log,logging,122167,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['log'],['logging']
Testability,"(ArrayL const &lhs, size_t const lhs_size, ArrayR const &rhs, size_t const rhs_size);  . Detailed Description; Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ; Template Parameters. TThe new type to convert to. ; isDynamicIf true, dynamic_cast is used, otherwise static_cast is used. . Typedef Documentation. ◆ make_indices. template<size_t Start, size_t Last, size_t Step = 1> . using ROOT::Detail::make_indices = typedef typename make_indices_< Start, Last, Step >::type. Definition at line 148 of file span.hxx. ◆ TRangeStaticCast. template<typename T > . using ROOT::Detail::TRangeStaticCast = typedef TRangeCast<T, false>. TRangeStaticCast is an adapter class that allows the typed iteration through a TCollection. ; This requires the collection to contain elements of the type requested (or a derived class). Any deviation from this expectation will only be caught/reported by an assert in debug builds.; This is best used with a TClonesArray, for other cases prefered TRangeDynCast.; The typical use is: for(auto bcl : TRangeStaticCast<TBaseClass>( *tbaseClassClonesArrayPtr )) {; ... use bcl as a TBaseClass*; }; for(auto bcl : TRangeStaticCast<TBaseClass>( tbaseClassClonesArrayPtr )) {; ... use bcl as a TBaseClass*; }; a#define a(i)Definition RSha256.hxx:99; ROOT::Detail::TRangeCastDefinition TCollection.h:311; TBaseClassEach class (see TClass) has a linked list of its base class(es).Definition TBaseClass.h:33; Template Parameters. TThe new type to convert to. . Definition at line 337 of file TCollection.h. Function Documentation. ◆ HasBeenDeleted(). R__ALWAYS_INLINE bool ROOT::Detail::HasBeenDeleted ; (; const TObject * ; obj). Check if the TObject's memory has been deleted. ; WarningThis should be only used for error mitigation as the answer is only sometimes correct. It actually just checks whether the object has been deleted, so this w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Detail.html:3554,assert,assert,3554,doc/master/namespaceROOT_1_1Detail.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail.html,2,['assert'],['assert']
Testability,"(ClassInfo_t *info, void *arena, bool dtorOnly) const final;  ; void ClassInfo_Destruct (ClassInfo_t *info, void *arena) const final;  ; ClassInfo_t * ClassInfo_Factory (Bool_t all=kTRUE) const final;  ; ClassInfo_t * ClassInfo_Factory (ClassInfo_t *cl) const final;  ; ClassInfo_t * ClassInfo_Factory (const char *name) const final;  ; ClassInfo_t * ClassInfo_Factory (DeclId_t declid) const final;  ; const char * ClassInfo_FileName (ClassInfo_t *info) const final;  ; const char * ClassInfo_FullName (ClassInfo_t *info) const final;  ; Longptr_t ClassInfo_GetBaseOffset (ClassInfo_t *fromDerived, ClassInfo_t *toBase, void *address, bool isDerivedObject) const final;  ; int ClassInfo_GetMethodNArg (ClassInfo_t *info, const char *method, const char *proto, Bool_t objectIsConst=false, ROOT::EFunctionMatchMode mode=ROOT::kConversionMatch) const final;  ; EDataType ClassInfo_GetUnderlyingType (ClassInfo_t *info) const final;  ; bool ClassInfo_HasDefaultConstructor (ClassInfo_t *info, Bool_t testio=kFALSE) const final;  ; bool ClassInfo_HasMethod (ClassInfo_t *info, const char *name) const final;  ; void ClassInfo_Init (ClassInfo_t *info, const char *funcname) const final;  ; void ClassInfo_Init (ClassInfo_t *info, int tagnum) const final;  ; bool ClassInfo_IsBase (ClassInfo_t *info, const char *name) const final;  ; bool ClassInfo_IsEnum (const char *name) const final;  ; bool ClassInfo_IsLoaded (ClassInfo_t *info) const final;  ; bool ClassInfo_IsScopedEnum (ClassInfo_t *info) const final;  ; bool ClassInfo_IsValid (ClassInfo_t *info) const final;  ; bool ClassInfo_IsValidMethod (ClassInfo_t *info, const char *method, const char *proto, Bool_t objectIsConst, Longptr_t *offset, ROOT::EFunctionMatchMode=ROOT::kConversionMatch) const final;  ; bool ClassInfo_IsValidMethod (ClassInfo_t *info, const char *method, const char *proto, Longptr_t *offset, ROOT::EFunctionMatchMode=ROOT::kConversionMatch) const final;  ; const char * ClassInfo_Name (ClassInfo_t *info) const final;  ; vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:7783,test,testio,7783,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['test'],['testio']
Testability,"(Double_t eta); voidSetEtaDecay(Double_t ed); voidSetEventWeight(const char*); voidSetLearningMethod(TMultiLayerPerceptron::ELearningMethod method); static voidTObject::SetObjectStat(Bool_t stat); voidSetReset(Int_t reset); voidSetTau(Double_t tau); voidSetTestDataSet(TEventList* test); voidSetTestDataSet(const char* test); voidSetTrainingDataSet(TEventList* train); voidSetTrainingDataSet(const char* train); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TMultiLayerPerceptron(); TMultiLayerPerceptron(const char* layout, TTree* data = 0, const char* training = ""Entry$%2==0"", const char* test = """", TNeuron::ENeuronType type = TNeuron::kSigmoid, const char* extF = """", const char* extD = """"); TMultiLayerPerceptron(const char* layout, TTree* data, TEventList* training, TEventList* test, TNeuron::ENeuronType type = TNeuron::kSigmoid, const char* extF = """", const char* extD = """"); TMultiLayerPerceptron(const char* layout, const char* weight, TTree* data = 0, const char* training = ""Entry$%2==0"", const char* test = """", TNeuron::ENeuronType type = TNeuron::kSigmoid, const char* extF = """", const char* extD = """"); TMultiLayerPerceptron(const char* layout, const char* weight, TTree* data, TEventList* training, TEventList* test, TNeuron::ENeuronType type = TNeuron::kSigmoid, const char* extF = """", const char* extD = """"); voidTrain(Int_t nEpoch, Option_t* option = ""text"", Double_t minE = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMultiLayerPerceptron.html:14579,test,test,14579,root/html602/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html602/TMultiLayerPerceptron.html,6,['test'],['test']
Testability,"(Double_t mean=0, Double_t sigma=1)Samples a random number from the standard Normal (Gaussian) Distribution with the given mean and sigm...Definition TRandom.cxx:275; TStyle::SetTitleHvoid SetTitleH(Float_t h=0)Definition TStyle.h:416. The histogram limits times in seconds. If wmin and wmax are the histogram limits, the time axis will spread around the time offset value from TimeOffset+wmin to TimeOffset+wmax. Until now all the examples had a lowest value equal to 0. The following example demonstrates how to define the histogram limits relatively to the time offset value.; {; // Define the time offset as 2003, January 1st; TDatime T0(2003,1,1,0,0,0);; auto X0 = T0.Convert();; gStyle->SetTimeOffset(X0);; ; // Define the lowest histogram limit as 2002, September 23rd; TDatime T1(2002,9,23,0,0,0);; auto X1 = T1.Convert()-X0;; ; // Define the highest histogram limit as 2003, March 7th; TDatime T2(2003,3,7,0,0,0);; auto X2 = T2.Convert(1)-X0;; ; auto h1 = new TH1F(""h1"",""test"",100,X1,X2);; ; TRandom r;; for (Int_t i=0;i<30000;i++) {; Double_t noise = r.Gaus(0.5*(X1+X2),0.1*(X2-X1));; h1->Fill(noise);; }; ; h1->GetXaxis()->SetTimeDisplay(1);; h1->GetXaxis()->SetLabelSize(0.03);; h1->GetXaxis()->SetTimeFormat(""%Y/%m/%d"");; h1->Draw();; }; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TAttAxis::SetLabelSizevirtual void SetLabelSize(Float_t size=0.04)Set size of axis labels.Definition TAttAxis.cxx:203; TAxis::SetTimeDisplayvirtual void SetTimeDisplay(Int_t value)Definition TAxis.h:171; TAxis::SetTimeFormatvirtual void SetTimeFormat(const char *format="""")Change the format used for time plotting.Definition TAxis.cxx:1157; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGaxis.html:22903,test,test,22903,doc/master/classTGaxis.html,https://root.cern,https://root.cern/doc/master/classTGaxis.html,1,['test'],['test']
Testability,"(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { return fTxtConfig->GetText(); }. const char * GetUserName() const; { return fTxtUsrName->GetText(); }. Bool_t IsSync() const; { return (Bool_t)(fSync->GetState() == kButtonDown); }. void SetAddEnabled(Bool_t on = kTRUE). void SetConnectEnabled(Bool_t on = kTRUE). void SetName(const char* str); { fTxtName->SetText(str); }. void SetAddress(const char* str); { fTxtAddress->SetText(str); }. void SetPortNumber(Int_t port); { fNumPort->SetIntNumber(port); }. void SetLogLevel(Int_t log); { fLogLevel->SetIntNumber(log); }. void SetConfigText(const char* str); { fTxtConfig->SetText(str); }. void SetUserName(const char* str); { fTxtUsrName->SetText(str); }. void SetSync(Bool_t sync). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-03-14 16:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSessionServerFrame.html:21582,log,log,21582,root/html534/TSessionServerFrame.html,https://root.cern,https://root.cern/root/html534/TSessionServerFrame.html,2,['log'],['log']
Testability,"(Float_t titlesize)Definition TGaxis.h:129; TGaxis::SetTitlevirtual void SetTitle(const char *title="""")Change the title of the axis.Definition TGaxis.cxx:2942; TGaxis::SetLabelSizevoid SetLabelSize(Float_t labelsize)Definition TGaxis.h:107; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; f1TF1 * f1Definition legend1.C:11; c2return c2Definition legend2.C:14. Note that this functionality has some limitations and does not follow all the TGaxis setting. In particular the number of divisions or the maximum number digits do not apply. Logarithmic axis; By default axis are linear. To define a TGaxis as logarithmic, it is enough to create it with the option ""G"".; When plotting an histogram or a graph the logarithmic scale can be set using:. gPad->SetLogx(1); set the logarithmic scale on the X axis; gPad->SetLogy(1); set the logarithmic scale on the Y axis. When the SetMoreLogLabels() method is called more labels are drawn when in logarithmic scale and there is a small number of decades (less than 3). Blank axis; To draw only the axis tick marks without the axis body, it is enough to specify the option ""B"". It useful to superpose axis. Arrow on axis; SinceROOT version 6.27/01:; To draw an arrow at the end of the axis use the option "">"". To draw it at the beginning of the axis use the option ""<"". To draw it on both ends use ""<>"".; {; auto c = new TCanvas(""c"",""c"",0,0,500,500);; c->Range(-11,-11,11,11);; ; auto f2 = new TF1(""x2"",""x*x"",-10,10);; f2->SetLineColor(kRed);; f2->Draw(""same"");; ; auto f3 = new TF1(""x3"",""x*x*x"",-10,10);; f3->SetLineColor(kBlue);; f3->Draw(""same"");; ; // Draw the axis with arrows; auto ox = new TGaxis(-10,0,10,0,-10.,10.,510,""+-S>"");; ox->SetTickSize(0.009);; ox->SetLabelFont(42);; ox->SetLabelSize(0.025);; ox->Draw();; auto oy = new TGaxis(0,-10,0,10,-10,10,510,""+-S>"");; oy->SetTickSize(0.009);; oy->SetLabelFont(42);; oy->SetLabelSize(0.025);; oy->Draw();; }; c#define c(i)Definition RSha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGaxis.html:7293,log,logarithmic,7293,doc/master/classTGaxis.html,https://root.cern,https://root.cern/doc/master/classTGaxis.html,1,['log'],['logarithmic']
Testability,"(Int_t first = 0, Int_t last = -1) const; Integrate the TGraph data within a given (index) range; Note that this function computes the area of the polygon enclosed by the points of the TGraph.; The polygon segments, which are defined by the points of the TGraph, do not need to form a closed polygon,; since the last polygon segment, which closes the polygon, is taken as the line connecting the last TGraph point; with the first one. It is clear that the order of the point is essential in defining the polygon.; Also note that the segments should not intersect. NB: if last=-1 (default) last is set to the last point.; if (first <0) the first point (0) is taken. Method:; There are many ways to calculate the surface of a polygon. It all depends on what kind of data; you have to deal with. The most evident solution would be to divide the polygon in triangles and; calculate the surface of them. But this can quickly become complicated as you will have to test; every segments of every triangles and check if they are intersecting with a current polygon's; segment or if it goes outside the polygon. Many calculations that would lead to many problems...; The solution (implemented by R.Brun); Fortunately for us, there is a simple way to solve this problem, as long as the polygon's; segments don't intersect.; It takes the x coordinate of the current vertex and multiply it by the y coordinate of the next; vertex. Then it subtracts from it the result of the y coordinate of the current vertex multiplied; by the x coordinate of the next vertex. Then divide the result by 2 to get the surface/area.; Sources; http://forums.wolfram.com/mathgroup/archive/1998/Mar/msg00462.html; http://stackoverflow.com/questions/451426/how-do-i-calculate-the-surface-area-of-a-2d-polygon. Int_t IsInside(Double_t x, Double_t y) const; Return 1 if the point (x,y) is inside the polygon defined by; the graph vertices 0 otherwise. Algorithm:; The loop is executed with the end-point coordinates of a line segment; (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraph.html:36304,test,test,36304,root/html534/TGraph.html,https://root.cern,https://root.cern/root/html534/TGraph.html,3,['test'],['test']
Testability,"(Int_t ipar) const; return error of parameter ipar. Double_t GetParameter(Int_t ipar) const; return current value of parameter ipar. Int_t GetParameter(Int_t ipar, char* name, Double_t& value, Double_t& verr, Double_t& vlow, Double_t& vhigh) const; Get various ipar parameter attributs:. cname: parameter name; value: parameter value; verr: parameter error; vlow: lower limit; vhigh: upper limit; WARNING! parname must be suitably dimensionned in the calling function. const char * GetParName(Int_t ipar) const; return name of parameter ipar. Int_t GetErrors(Int_t ipar, Double_t& eplus, Double_t& eminus, Double_t& eparab, Double_t& globcc) const; Return errors after MINOs; not implemented. Int_t GetStats(Double_t& amin, Double_t& edm, Double_t& errdef, Int_t& nvpar, Int_t& nparx) const; return global fit parameters; amin : chisquare; edm : estimated distance to minimum; errdef; nvpar : number of variable parameters; nparx : total number of parameters. Double_t GetSumLog(Int_t ); return Sum(log(i) i=0,n; used by log likelihood fits. void InvertZ(Int_t ); Inverts packed diagonal matrix Z by square-root method.; Matrix elements corresponding to; fix parameters are removed. n: number of variable parameters. Bool_t IsFixed(Int_t ipar) const; return kTRUE if parameter ipar is fixed, kFALSE othersise). Int_t Minimize(); *; FUMILI; Based on ideas, proposed by I.N. Silin; [See NIM A440, 2000 (p431)]; converted from FORTRAN to C by; Sergey Yaschenko <s.yaschenko@fz-juelich.de>. *. This function is called after setting theoretical function; by means of TFumili::SetUserFunc and initializing parameters.; Optionally one can set FCN function (see TFumili::SetFCN and TFumili::Eval); If FCN is undefined then user has to provide data arrays by calling; TFumili::SetData procedure. TFumili::Minimize return following values:; 0 - fit is converged; -2 - function is not decreasing (or bad derivatives); -3 - error estimations are infinite; -4 - maximum number of iterations is exceeded. void Prin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFumili.html:19990,log,log,19990,root/html528/TFumili.html,https://root.cern,https://root.cern/root/html528/TFumili.html,12,['log'],['log']
Testability,"(Int_t n, const Float_t* x, const Float_t* y); Poly-marker. void DrawPolyMarker(); Poly-marker. void DrawText(Double_t x, Double_t y, const char* text, TVirtualPadPainter::ETextMode mode); Draw text. This operation is especially; dangerous if in locked state -; ftgl will assert on zero texture size; (which is result of bad GL context). void DrawText(Double_t , Double_t , const wchar_t* , TVirtualPadPainter::ETextMode ); Draw text. This operation is especially; dangerous if in locked state -; ftgl will assert on zero texture size; (which is result of bad GL context). void DrawTextNDC(Double_t x, Double_t y, const char* text, TVirtualPadPainter::ETextMode mode); Draw text in NDC. This operation is especially; dangerous if in locked state -; ftgl will assert on zero texture size; (which is result of bad GL context). void DrawTextNDC(Double_t , Double_t , const wchar_t* , TVirtualPadPainter::ETextMode ); Draw text in NDC. This operation is especially; dangerous if in locked state -; ftgl will assert on zero texture size; (which is result of bad GL context). void SaveProjectionMatrix() const; Save the projection matrix.; Attention! GL_PROJECTION will become the current matrix; after this call!. void RestoreProjectionMatrix() const; Restore the projection matrix.; Attention! GL_PROJECTION will become the current matrix; after this call!. void SaveModelviewMatrix() const; Save the modelview matrix.; Attention! GL_MODELVIEW will become the current matrix; after this call!. void RestoreModelviewMatrix() const; Restore the modelview matrix.; Attention! GL_MODELVIEW will become the current matrix; after this call!. void SaveViewport(); Extract and save the current viewport. void RestoreViewport(); Restore the saved viewport. void SaveImage(TVirtualPad* pad, const char* fileName, Int_t type) const; Using TImage save frame-buffer contents as a picture. void DrawPixels(const unsigned char* pixelData, UInt_t width, UInt_t height, Int_t dstX, Int_t dstY, Bool_t enableBlending). voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLPadPainter.html:9234,assert,assert,9234,root/html534/TGLPadPainter.html,https://root.cern,https://root.cern/root/html534/TGLPadPainter.html,3,['assert'],['assert']
Testability,"(Option_t *option="""") constReturn total number of zip bytes in the branch if option =""*"" includes all sub-branches of this branc...Definition TBranch.cxx:2238; TCanvasThe Canvas class.Definition TCanvas.h:23; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TLegendThis class displays a legend box (TPaveText) containing several legend entries.Definition TLegend.h:23; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TRandom3Random number generator class based on M.Definition TRandom3.h:27; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; double; c1return c1Definition legend1.C:41; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::TSeqITSeq< int > TSeqIDefinition TSeq.hxx:203; TMVA_SOFIE_GNN_Parser.treetreeDefinition TMVA_SOFIE_GNN_Parser.py:169; TMath::RMSDouble_t RMS(Long64_t n, const T *a, const Double_t *w=nullptr)Returns the Standard Deviation of an array a with length n.Definition TMath.h:1188; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; TMath::Log10Double_t Log10(Double_t x)Returns the common (base-10) logarithm of x.Definition TMath.h:762. tutorialsiodouble32.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/double32_8C_source.html:11337,log,logarithm,11337,doc/master/double32_8C_source.html,https://root.cern,https://root.cern/doc/master/double32_8C_source.html,1,['log'],['logarithm']
Testability,"(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); Int_tRooAbsPdf::minDimNormValueCaching() const; virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); virtual voidRooResolutionModel::normLeafServerList(RooArgSet& list) const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddModel.html:21820,test,testArg,21820,root/html526/RooAddModel.html,https://root.cern,https://root.cern/root/html526/RooAddModel.html,4,['test'],['testArg']
Testability,"(RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; virtual double expectedEvents (const RooArgSet *nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; virtual ExtendMode extendMode () const;  Returns ability of PDF to provide extended likelihood terms. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBMixDecay.html:10081,log,log,10081,doc/master/classRooBMixDecay.html,https://root.cern,https://root.cern/doc/master/classRooBMixDecay.html,10,['log'],['log']
Testability,"(RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; virtual double expectedEvents (const RooArgSet *nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; virtual ExtendMode extendMode () const;  Returns ability of PDF to provide extended likelihood terms. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; virtual RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const;  Interface function to create a generator context from a p.d.f. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBreitWigner.html:4473,log,log,4473,doc/master/classRooBreitWigner.html,https://root.cern,https://root.cern/doc/master/classRooBreitWigner.html,52,['log'],['log']
Testability,"(RooArgSet*, double) const. private:. RooStats::SamplingDistribution*GenerateSamplingDistribution(RooStats::ModelConfig* thisModel, double obsTestStat, RooAbsPdf* impDens = __null, const RooArgSet* impSnapshot = __null) const; voidSetAdaptiveLimits(Double_t obsTestStat, Bool_t forNull) const; voidSetupSampler(const RooStats::ModelConfig& model) const. Data Members; protected:. const RooStats::ModelConfig*fAltModel; unsigned intfAltToysSeedto have same toys for alternate; const RooAbsData*fData; RooStats::TestStatSampler*fDefaultSampler; RooStats::TestStatistic*fDefaultTestStat; const RooStats::ModelConfig*fNullModel; RooStats::TestStatSampler*fTestStatSampler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HypoTestCalculatorGeneric(const RooAbsData& data, const RooStats::ModelConfig& altModel, const RooStats::ModelConfig& nullModel, RooStats::TestStatSampler* sampler = 0); Constructor. When test stat sampler is not provided; uses ToyMCSampler and RatioOfProfiledLikelihoodsTestStat; and nToys = 1000.; User can : GetTestStatSampler()->SetNToys( # ). void SetupSampler(const RooStats::ModelConfig& model) const; common setup for both models. ~HypoTestCalculatorGeneric(). HypoTestResult* GetHypoTest() const. void UseSameAltToys(); to re-use same toys for alternate hypothesis. HypoTestCalculatorGeneric(const RooAbsData& data, const RooStats::ModelConfig& altModel, const RooStats::ModelConfig& nullModel, RooStats::TestStatSampler* sampler = 0). void SetNullModel(const RooStats::ModelConfig& nullModel); set the model for the null hypothesis (only B). { fNullModel = &nullModel; }. const RooAbsData * GetData(void); { return fData; }. const ModelConfig* GetNullModel(void); { return fNullModel; }. const RooArgSet* GetFitInfo() const; set the model for the alternate hypothesis (S+B). { return NULL; }. void SetAlternateModel(const RooStats::ModelConfig& altModel); { fAltModel = &altModel; }. const ModelConfig* GetAlternateModel(void); Se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HypoTestCalculatorGeneric.html:2964,test,test,2964,root/html602/RooStats__HypoTestCalculatorGeneric.html,https://root.cern,https://root.cern/root/html602/RooStats__HypoTestCalculatorGeneric.html,2,['test'],['test']
Testability,"(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooBCPEffDecay&operator=(const RooBCPEffDecay&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooBCPEffDecay.html:23905,test,testArg,23905,root/html602/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html602/RooBCPEffDecay.html,2,['test'],['testArg']
Testability,"(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooBCPGenDecay&operator=(const RooBCPGenDecay&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooBCPGenDecay.html:23835,test,testArg,23835,root/html602/RooBCPGenDecay.html,https://root.cern,https://root.cern/root/html602/RooBCPGenDecay.html,2,['test'],['testArg']
Testability,"(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooBreitWigner&operator=(const RooBreitWigner&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooBreitWigner.html:23138,test,testArg,23138,root/html602/RooBreitWigner.html,https://root.cern,https://root.cern/root/html602/RooBreitWigner.html,2,['test'],['testArg']
Testability,"(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooExponential&operator=(const RooExponential&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooExponential.html:23053,test,testArg,23053,root/html602/RooExponential.html,https://root.cern,https://root.cern/root/html602/RooExponential.html,2,['test'],['testArg']
Testability,"(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooMomentMorph&operator=(const RooMomentMorph&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMomentMorph.html:22944,test,testArg,22944,root/html602/RooMomentMorph.html,https://root.cern,https://root.cern/root/html602/RooMomentMorph.html,2,['test'],['testArg']
Testability,"(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooNovosibirsk&operator=(const RooNovosibirsk&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNovosibirsk.html:23172,test,testArg,23172,root/html602/RooNovosibirsk.html,https://root.cern,https://root.cern/root/html602/RooNovosibirsk.html,2,['test'],['testArg']
Testability,"(TFileMerger* merger, const char* path); voidInit(const char* path, const char* dsname); voidNotifyError(const char* errmsg); TProofOutputFile&operator=(const TProofOutputFile&); voidSetDir(const char* dir); voidSetFileName(const char* name); voidSetWorkerOrdinal(const char* ordinal); voidUnlink(const char* path). Data Members; public:. enum ERunType { kMerge; kDataset; };; enum ETypeOpt { kRemote; kLocal; kCreate; kRegister; kOverwrite; kVerify; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TFileCollection*fDataSetInstance of the file collection in 'dataset' mode; TStringfDirname of the directory to be exported; TStringfFileName; Bool_tfIsLocalkTRUE if the file is in the sandbox; TStringfLocalHostHost where the file was created; Bool_tfMerged; TFileMerger*fMergerInstance of the file merger in 'merge' mode; TStringfOptionsAnchoroptions and anchor string including delimiters, e.g. ""?myopts#myanchor""; TStringfOutputFileName; TStringfRawDirname of the local directory where to create the file; TProofOutputFile::ERunTypefRunTypeType of run (see enum ERunType); UInt_tfTypeOptOption (see enum ETypeOpt); TStringfWorkerOrdinal. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofOutputFile(const char* path, TProofOutputFile::ERunType type, UInt_t opt = kRemote, const char* dsname = 0); Main constructor. TProofOutputFile(const char* path, const char* option = ""M"", const char* dsname = 0); Constructor with the old signature, kept for convenience and backard compatibility.; Options:; 'M' merge: finally merge the created files; 'L' local: copy locally the files before merging (implies 'M'); 'D' dataset: create a TFileCollection; 'R' ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofOutputFile.html:6881,sandbox,sandbox,6881,root/html528/TProofOutputFile.html,https://root.cern,https://root.cern/root/html528/TProofOutputFile.html,1,['sandbox'],['sandbox']
Testability,"(TH1* theHist, Double_t norm = 1.); Double_tNormVariable(Double_t x, Double_t xmin, Double_t xmax); TMVA::Tools&operator=(const TMVA::Tools&); vector<Int_t>*ParseANNOptionString(TString theOptions, Int_t nvar, vector<Int_t>* nodes); TList*ParseFormatLine(TString theString, const char* sep = "":""); TH1*projNormTH1F(TTree* theTree, const TString& theVarName, const TString& name, Int_t nbins, Double_t xmin, Double_t xmax, const TString& cut); voidReadAttr(void* node, const char* attrname, TString& value); voidReadAttr<TString>(void* node, const char* attrname, TString& value); voidReadFloatArbitraryPrecision(Float_t& val, istream& is); voidReadTMatrixDFromXML(void* node, const char* name, TMatrixD* mat); voidReadTVectorDFromXML(void* node, const char* name, TVectorD* vec); TStringReplaceRegularExpressions(const TString& s, const TString& replace = ""+""); voidROOTVersionMessage(TMVA::MsgLogger& logger); voidScale(vector<Double_t>&, Double_t); voidScale(vector<Float_t>&, Float_t); vector<TString>SplitString(const TString& theOpt, const char separator) const; TStringStringFromDouble(Double_t d); TStringStringFromInt(Long_t i); voidTMVACitation(TMVA::MsgLogger& logger, TMVA::Tools::ECitation citType = kPlainText); voidTMVAVersionMessage(TMVA::MsgLogger& logger); voidTMVAWelcomeMessage(); voidTMVAWelcomeMessage(TMVA::MsgLogger& logger, TMVA::Tools::EWelcomeMessage m = kStandardWelcomeMsg); TMVA::ToolsTools(const TMVA::Tools&); TH2F*TransposeHist(const TH2F&); voidUsefulSortAscending(vector<Double_t>&); voidUsefulSortAscending(vector<vector<Double_t> >&, vector<TString>* vs = 0); voidUsefulSortDescending(vector<Double_t>&); voidUsefulSortDescending(vector<vector<Double_t> >&, vector<TString>* vs = 0); voidWriteFloatArbitraryPrecision(Float_t val, ostream& os); voidWriteTMatrixDToXML(void* node, const char* name, TMatrixD* mat); voidWriteTVectorDToXML(void* node, const char* name, TVectorD* vec); TXMLEngine&xmlengine(); intxmlenginebuffersize(). private:. Double_tGetYMean_binX(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__Tools.html:3801,log,logger,3801,root/html602/TMVA__Tools.html,https://root.cern,https://root.cern/root/html602/TMVA__Tools.html,8,['log'],['logger']
Testability,"(TProof::ESlaves list = kActive); Transfer the current state of the master to the active slave servers.; The current state includes: the current working directory, etc.; Returns the number of active slaves. Returns -1 in case of error. Int_t SendInitialState(); Transfer the initial (i.e. current) state of the master to all; slave servers. Currently the initial state includes: log level.; Returns the number of active slaves. Returns -1 in case of error. Bool_t CheckFile(const char* file, TSlave* sl, Long_t modtime, Int_t cpopt = (kCp | kCpBin)); Check if a file needs to be send to the slave. Use the following; algorithm:; - check if file appears in file map; - if yes, get file's modtime and check against time in map,; if modtime not same get md5 and compare against md5 in map,; if not same return kTRUE.; - if no, get file's md5 and modtime and store in file map, ask; slave if file exists with specific md5, if yes return kFALSE,; if no return kTRUE.; The options 'cpopt' define if to copy things from cache to sandbox and what.; To retrieve from the cache the binaries associated with the file TProof::kCpBin; must be set in cpopt; the default is copy everything.; Returns kTRUE in case file needs to be send, returns kFALSE in case; file is already on remote node. Int_t SendFile(const char* file, Int_t opt = (kBinary | kForward | kCp | kCpBin), const char* rfile = 0, TSlave* sl = 0); Send a file to master or slave servers. Returns number of slaves; the file was sent to, maybe 0 in case master and slaves have the same; file system image, -1 in case of error.; If defined, send to worker 'wrk' only.; If defined, the full path of the remote path will be rfile.; If rfile = ""cache"" the file is copied to the remote cache instead of the sandbox; (to copy to the cache on a different name use rfile = ""cache:newname"").; The mask 'opt' is an or of ESendFileOpt:. kAscii (0x0) if set true ascii file transfer is used; kBinary (0x1) if set true binary file transfer is used; kForce (0x2) i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProof.html:66889,sandbox,sandbox,66889,root/html602/TProof.html,https://root.cern,https://root.cern/root/html602/TProof.html,2,['sandbox'],['sandbox']
Testability,"([eventID]))%int([NumFolds])"". Project : TMVA - a ROOT-integrated toolkit for multivariate data analysis; Package : TMVA; Root Macro: TMVACrossValidation. ; DataSetInfo : [datasetcv] : Added class ""Signal""; : Add Tree of type Signal with 1000 events; DataSetInfo : [datasetcv] : Added class ""Background""; : Add Tree of type Background with 1000 events; <HEADER> Factory : You are running ROOT Version: 6.33.01, Oct 10, 2023; : ; : _/_/_/_/_/ _| _| _| _| _|_| ; : _/ _|_| _|_| _| _| _| _| ; : _/ _| _| _| _| _| _|_|_|_| ; : _/ _| _| _| _| _| _| ; : _/ _| _| _| _| _| ; : ; : ___________TMVA Version 4.2.1, Feb 5, 2015; : ; : Rebuilding Dataset datasetcv; : Building event vectors for type 2 Signal; : Dataset[datasetcv] : create input formulas for tree ; : Building event vectors for type 2 Background; : Dataset[datasetcv] : create input formulas for tree ; <HEADER> DataSetFactory : [datasetcv] : Number of events in input trees; : ; : ; : Number of training and testing events; : ---------------------------------------------------------------------------; : Signal -- training events : 999; : Signal -- testing events : 1; : Signal -- training and testing events: 1000; : Background -- training events : 999; : Background -- testing events : 1; : Background -- training and testing events: 1000; : ; <HEADER> DataSetInfo : Correlation matrix (Signal):; : ------------------------; : x y; : x: +1.000 +0.075; : y: +0.075 +1.000; : ------------------------; <HEADER> DataSetInfo : Correlation matrix (Background):; : ------------------------; : x y; : x: +1.000 +0.020; : y: +0.020 +1.000; : ------------------------; <HEADER> DataSetFactory : [datasetcv] : ; : ; : ; : ; : ========================================; : ========================================; : ; <HEADER> Factory : Booking method: BDTG_fold1; : ; <HEADER> BDTG_fold1 : #events: (reweighted) sig: 500 bkg: 500; : #events: (unweighted) sig: 500 bkg: 500; : Training 100 Decision Trees ... patience please; : Elapsed time for training ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVACrossValidation_8C.html:2850,test,testing,2850,doc/master/TMVACrossValidation_8C.html,https://root.cern,https://root.cern/doc/master/TMVACrossValidation_8C.html,5,['test'],['testing']
Testability,"(anonymous)TObject::kZombie. private:. RooArgList*_constParamList; TStopwatch_cumulTimer; Bool_t_doEvalErrorWall; Int_t_evalCounter; TMatrixDSym*_extV; RooArgList*_floatParamList; vector<RooAbsArg*>_floatParamVec; RooAbsReal*_func; Bool_t_handleLocalErrors; RooArgList*_initConstParamList; RooArgList*_initFloatParamList; ofstream*_logfile; Int_t_maxEvalMult; Double_t_maxFCN; Int_t_nPar; Int_t_numBadNLL; Int_t_optConst; Int_t_printEvalErrors; Int_t_printLevel; Bool_t_profile; Int_t_status; vector<pair<string,int> >_statusHistory; static TVirtualFitter*_theFitter; TStopwatch_timer; Bool_t_verbose; Int_t_warnLevel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup method called by atexit handler installed by RooSentinel; to delete all global heap objects when the program is terminated. RooMinuit(RooAbsReal& function); Construct MINUIT interface to given function. Function can be anything,; but is typically a -log(likelihood) implemented by RooNLLVar or a chi^2; (implemented by RooChi2Var). Other frequent use cases are a RooAddition; of a RooNLLVar plus a penalty or constraint term. This class propagates; all RooFit information (floating parameters, their values and errors); to MINUIT before each MINUIT call and propagates all MINUIT information; back to the RooFit object at the end of each call (updated parameter; values, their (asymmetric errors) etc. The default MINUIT error level; for HESSE and MINOS error analysis is taken from the defaultErrorLevel(); value of the input function. ~RooMinuit(); Destructor. void setStrategy(Int_t strat); Change MINUIT strategy to istrat. Accepted codes; are 0,1,2 and represent MINUIT strategies for dealing; most efficiently with fast FCNs (0), expensive FCNs (2); and 'intermediate' FCNs (1). void setErrorLevel(Double_t level); Set the level for MINUIT error analysis to the given; value. This function overrides the default value; that is taken in the RooMinuit constructor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMinuit.html:9199,log,log,9199,root/html602/RooMinuit.html,https://root.cern,https://root.cern/root/html602/RooMinuit.html,2,['log'],['log']
Testability,"(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTMVA::MethodBase::SetCurrentEvent(Long64_t ievt) const; virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidSetTestSignalEfficiency(Double_t effS); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodCuts.html:13089,test,testTime,13089,root/html528/TMVA__MethodCuts.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodCuts.html,1,['test'],['testTime']
Testability,"(compiled) (NA):(NA) 0 public: virtual void SetBBoxY1(const Int_t y);; (compiled) (NA):(NA) 0 public: virtual void SetBBoxY2(const Int_t y);; (compiled) (NA):(NA) 0 public: static class TClass *Class();; (compiled) (NA):(NA) 0 public: static const char *Class_Name();; (compiled) (NA):(NA) 0 public: static Version_t Class_Version();; (compiled) (NA):(NA) 0 public: static void Dictionary();; (compiled) (NA):(NA) 0 public: virtual class TClass *IsA() const;; (compiled) (NA):(NA) 0 public: virtual void ShowMembers(class TMemberInspector &insp) const;; (compiled) (NA):(NA) 0 public: virtual void Streamer(class TBuffer &);; (compiled) (NA):(NA) 0 public: void StreamerNVirtual(class TBuffer &ClassDef_StreamerNVirtual_b);; (compiled) (NA):(NA) 0 public: static const char *DeclFileName();; (compiled) (NA):(NA) 0 public: static int ImplFileLine();; (compiled) (NA):(NA) 0 public: static const char *ImplFileName();; (compiled) (NA):(NA) 0 public: static int DeclFileLine();; root [] .> test.log; root [] l.Dump();; root [] .>; root [] ?; Here we see:. Use .class as quick help and reference; Unix like I/O redirection using .> out.txt and unredirection with .>; Use ? to get help on all ‘‘raw’’ interpreter commands; Use @ to abort a multi-line command. Now let us execute a multi-line command:; root [] {; root [] ? TLine l;; root [] ? for (int i = 0; i < 5; i++) {; root [] ? l.SetX1(i);; root [] ? l.SetY1(i+1);; root [] ? l.Print();; root [] ? }; root [] ? }; TLine X1=0.000000 Y1=1.000000 X2=0.000000 Y2=0.000000; TLine X1=1.000000 Y1=2.000000 X2=0.000000 Y2=0.000000; TLine X1=2.000000 Y1=3.000000 X2=0.000000 Y2=0.000000; TLine X1=3.000000 Y1=4.000000 X2=0.000000 Y2=0.000000; TLine X1=4.000000 Y1=5.000000 X2=0.000000 Y2=0.000000; root [] .q; Here we note:. A multi-line command starts with a { and ends with a }.; Inside continuation, every line has to be correctly terminated with a ; (like in ""real’’ C++).; All objects are created in global scope.; There is no way to back up; you are be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:262005,log,log,262005,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['log'],['log']
Testability,"(const IGenFunction &dist, GoFTest::EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution function for 1-sample test using the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ; void SetUserDistribution (Dist &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution function for 1-sample test as a generic functor object. ;  ; void SetUserPDF (const IGenFunction &pdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distribution as a probability density function for 1-sample tests using the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ; void SetUserPDF (Dist &pdf, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution as a probability density function for 1-sample tests. ;  . Static Public Member Functions; static void AndersonDarling2SamplesTest (const ROOT::Fit::BinData &data1, const ROOT::Fit::BinData &data2, Double_t &pvalue, Double_t &testStat);  Compute the 2-Sample Anderson Darling test for binned data assuming equal data are present at the bin center values. ;  ; static Double_t PValueADKSamples (size_t nsamples, Double_t A2);  Computation of the K-Sample Anderson-Darling Test's p-value as described in (1) ;  . Private Member Functions;  GoFTest ();  Disallowed default constructor. ;  ;  GoFTest (GoFTest &gof);  Disallowed copy constructor. ;  ; Double_t ExponentialCDF (Double_t x) const;  ; Double_t GaussianCDF (Double_t x) const;  ; void Instantiate (const Double_t *sample, size_t sampleSize);  ; Double_t LogNormalCDF (Double_t x) const;  ; void LogSample ();  Applies the logarithm to the sample when the specified distribution to test is LogNormal. ;  ; GoFTest operator= (GoFTest &gof);  Disallowed assign operator. ;  ; Double_t PValueAD1Sample (Double_t A2) const;  Computation of the 1-Sample Anderson-Darling Test's p-value. ;  ; void SetCDF ();  ; void SetDistributionFunction (const IGenFu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:5861,test,testStat,5861,doc/master/classROOT_1_1Math_1_1GoFTest.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html,2,['test'],"['test', 'testStat']"
Testability,"(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooConstVar&operator=(const RooConstVar&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooConstVar.html:19358,test,testArg,19358,root/html602/RooConstVar.html,https://root.cern,https://root.cern/root/html602/RooConstVar.html,2,['test'],['testArg']
Testability,"(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooErrorVar&operator=(const RooErrorVar&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooErrorVar.html:23124,test,testArg,23124,root/html602/RooErrorVar.html,https://root.cern,https://root.cern/root/html602/RooErrorVar.html,2,['test'],['testArg']
Testability,"(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooHistFunc&operator=(const RooHistFunc&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooHistFunc.html:19478,test,testArg,19478,root/html602/RooHistFunc.html,https://root.cern,https://root.cern/root/html602/RooHistFunc.html,2,['test'],['testArg']
Testability,"(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooLegendre&operator=(const RooLegendre&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooLegendre.html:19274,test,testArg,19274,root/html602/RooLegendre.html,https://root.cern,https://root.cern/root/html602/RooLegendre.html,2,['test'],['testArg']
Testability,"(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooRealMPFE&operator=(const RooRealMPFE&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooRealMPFE.html:20254,test,testArg,20254,root/html602/RooRealMPFE.html,https://root.cern,https://root.cern/root/html602/RooRealMPFE.html,2,['test'],['testArg']
Testability,"(const RooArgSet& depList) const; virtual Bool_tRooAbsRealLValue::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; virtual Bool_tRooAbsRealLValue::isValidReal(Double_t value, Bool_t printError = kFALSE) const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; virtual Double_tRooAbsRealLValue::jacobian() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); virtual Int_tRooAbsRealLValue::numBins(const char* rangeName = 0) const; virtual Int_tRooAbsRealLValue::numBins(const RooAbsBinning& binning) const; Int_tRooAbsArg::numCaches() const; stat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooErrorVar.html:20145,log,logEvalError,20145,root/html532/RooErrorVar.html,https://root.cern,https://root.cern/root/html532/RooErrorVar.html,2,['log'],['logEvalError']
Testability,"(const RooArgSet& paramsOfInterest); virtual RooAbsPdf*createProjection(const RooArgSet& iset); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::none(), const RooCmdArg arg8 = RooCmdArg::none()); RooAbsReal*RooAbsPdf::createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumGenConfig*RooAbsPdf::defaultGeneratorConfig(); static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProjectedPdf.html:8822,test,testArg,8822,root/html526/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html526/RooProjectedPdf.html,4,['test'],['testArg']
Testability,"(const RooArgSet&); virtual voidSetPdf(RooAbsPdf&); virtual voidSetPriorNuisance(RooAbsPdf*); virtual voidSetSamplingDistName(const char* name); virtual voidSetTestSize(Double_t size); virtual voidSetTestStatistic(RooStats::TestStatistic* testStatistic); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TestStatSampler(); TestStatSampler();. {}. SamplingDistribution* GetSamplingDistribution(RooArgSet& paramsOfInterest); Main interface to get a ConfInterval, pure virtual. Double_t EvaluateTestStatistic(RooAbsData& data, RooArgSet& paramsOfInterest); Main interface to evaluate the test statistic on a dataset. TestStatistic* GetTestStatistic() const; Get the TestStatistic. Double_t ConfidenceLevel() const; Get the Confidence level for the test. void Initialize(RooAbsArg& testStatistic, RooArgSet& paramsOfInterest, RooArgSet& nuisanceParameters); Common Initialization. void SetPdf(RooAbsPdf& ); Set the Pdf, add to the the workspace if not already there. void SetPriorNuisance(RooAbsPdf* ); How to randomize the prior. Set to NULL to deactivate randomization. void SetParametersForTestStat(const RooArgSet& ); specify the values of parameters used when evaluating test statistic. void SetNuisanceParameters(const RooArgSet& ); REMOVE THIS; specify the parameters of interest in the interval; virtual void SetParameters(const RooArgSet&) = 0;; specify the nuisance parameters (eg. the rest of the parameters). void SetObservables(const RooArgSet& ); specify the observables in the dataset (needed to evaluate the test statistic). void SetGlobalObservables(const RooArgSet& ); specify the conditional observables. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). void SetConfidenceLevel(Double_t cl); set the confidence level for th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__TestStatSampler.html:2414,test,testStatistic,2414,root/html534/RooStats__TestStatSampler.html,https://root.cern,https://root.cern/root/html534/RooStats__TestStatSampler.html,1,['test'],['testStatistic']
Testability,"(const TBuffer3D& buffer, Bool_t includeRaw) const; Validate if the passed 'buffer' contains all sections we require to add object.; Returns Int_t combination of TBuffer::ESection flags still required - or; TBuffer3D::kNone if buffer is valid.; If 'includeRaw' is kTRUE check for kRaw/kRawSizes - skip otherwise.; See base/src/TVirtualViewer3D.cxx for description of viewer architecture. TGLLogicalShape* CreateNewLogical(const TBuffer3D& buffer) const; Create and return a new TGLLogicalShape from the supplied buffer. CreateNewPhysical(UInt_t physicalID, const TBuffer3D& buffer, const TGLLogicalShape& logical) const; Create and return a new TGLPhysicalShape with id 'ID', using; 'buffer' placement information (translation etc), and bound to; suppled 'logical'. void ComposePolymarker(const TList* padPrimitives). RootCsg::TBaseMesh* BuildComposite(); Build and return composite shape mesh. TGLLogicalShape* AttemptDirectRenderer(TObject* id); Try to construct an appropriate logical-shape sub-class based; on id'class, following convention that SomeClassGL is a suitable; renderer for class SomeClass. TGLScenePad(const TGLScenePad& ). TGLScenePad& operator=(const TGLScenePad& ). virtual ~TGLScenePad(); {}. TVirtualPad* GetPad() const; void SetPad(TVirtualPad* p) { fPad = p; /* also need to drop contents */ }. { return fPad; }. Bool_t GetSmartRefresh() const; { return fSmartRefresh; }. void SetSmartRefresh(Bool_t smart_ref); { fSmartRefresh = smart_ref; }. Bool_t CanLoopOnPrimitives() const; TVirtualViewer3D interface. { return kTRUE; }. Int_t DistancetoPrimitive(Int_t , Int_t ); For now handled by viewer. { return 9999; }. void ExecuteEvent(Int_t , Int_t , Int_t ); {}. Bool_t PreferLocalFrame() const; { return kTRUE; }. Bool_t BuildingScene() const; { return CurrentLock() == kModifyLock; }. » Author: Matevz Tadel, Jun 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLScenePad.h 38817 2011-04-13 09:32:44Z couet $ » Last generated: ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLScenePad.html:16374,log,logical-shape,16374,root/html530/TGLScenePad.html,https://root.cern,https://root.cern/root/html530/TGLScenePad.html,2,['log'],['logical-shape']
Testability,"(const TBuffer3D& buffer, Bool_t includeRaw) const; Validate if the passed 'buffer' contains all sections we require to add object.; Returns Int_t combination of TBuffer::ESection flags still required - or; TBuffer3D::kNone if buffer is valid.; If 'includeRaw' is kTRUE check for kRaw/kRawSizes - skip otherwise.; See base/src/TVirtualViewer3D.cxx for description of viewer architecture. TGLLogicalShape* CreateNewLogical(const TBuffer3D& buffer) const; Create and return a new TGLLogicalShape from the supplied buffer. CreateNewPhysical(UInt_t physicalID, const TBuffer3D& buffer, const TGLLogicalShape& logical) const; Create and return a new TGLPhysicalShape with id 'ID', using; 'buffer' placement information (translation etc), and bound to; suppled 'logical'. void ComposePolymarker(const TList* padPrimitives). RootCsg::TBaseMesh* BuildComposite(); Build and return composite shape mesh. TGLLogicalShape* AttemptDirectRenderer(TObject* id); Try to construct an appropriate logical-shape sub-class based; on id'class, following convention that SomeClassGL is a suitable; renderer for class SomeClass. TGLScenePad(const TGLScenePad& ). TGLScenePad& operator=(const TGLScenePad& ). virtual ~TGLScenePad(); {}. TVirtualPad* GetPad() const; { return fPad; }. void SetPad(TVirtualPad* p); { fPad = p; }. Bool_t GetSmartRefresh() const; { return fSmartRefresh; }. void SetSmartRefresh(Bool_t smart_ref); { fSmartRefresh = smart_ref; }. Bool_t CanLoopOnPrimitives() const; TVirtualViewer3D interface. { return kTRUE; }. Int_t DistancetoPrimitive(Int_t , Int_t ); For now handled by viewer. { return 9999; }. void ExecuteEvent(Int_t , Int_t , Int_t ); {}. Bool_t PreferLocalFrame() const; { return kTRUE; }. Bool_t BuildingScene() const; { return CurrentLock() == kModifyLock; }. » Author: Matevz Tadel, Jun 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-03-13 19:26; This page has been automatically generated. For comments or sug",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLScenePad.html:16657,log,logical-shape,16657,root/html534/TGLScenePad.html,https://root.cern,https://root.cern/root/html534/TGLScenePad.html,1,['log'],['logical-shape']
Testability,"(const TBuffer3D& buffer, Bool_t includeRaw) const; Validate if the passed 'buffer' contains all sections we require to add object.; Returns Int_t combination of TBuffer::ESection flags still required - or; TBuffer3D::kNone if buffer is valid.; If 'includeRaw' is kTRUE check for kRaw/kRawSizes - skip otherwise.; See base/src/TVirtualViewer3D.cxx for description of viewer architecture. TGLLogicalShape* CreateNewLogical(const TBuffer3D& buffer) const; Create and return a new TGLLogicalShape from the supplied buffer. CreateNewPhysical(UInt_t physicalID, const TBuffer3D& buffer, const TGLLogicalShape& logical) const; Create and return a new TGLPhysicalShape with id 'ID', using; 'buffer' placement information (translation etc), and bound to; suppled 'logical'. void ComposePolymarker(const TList* padPrimitives). RootCsg::TBaseMesh* BuildComposite(); Build and return composite shape mesh. TGLLogicalShape* AttemptDirectRenderer(TObject* id); Try to construct an appropriate logical-shape sub-class based; on id'class, following convention that SomeClassGL is a suitable; renderer for class SomeClass. TGLScenePad(const TGLScenePad& ). TGLScenePad& operator=(const TGLScenePad& ). virtual ~TGLScenePad(); {}. TVirtualPad* GetPad() const; { return fPad; }. void SetPad(TVirtualPad* p); { fPad = p; }. Bool_t GetSmartRefresh() const; { return fSmartRefresh; }. void SetSmartRefresh(Bool_t smart_ref); { fSmartRefresh = smart_ref; }. Bool_t CanLoopOnPrimitives() const; TVirtualViewer3D interface. { return kTRUE; }. Int_t DistancetoPrimitive(Int_t , Int_t ); For now handled by viewer. { return 9999; }. void ExecuteEvent(Int_t , Int_t , Int_t ); {}. Bool_t PreferLocalFrame() const; { return kTRUE; }. Bool_t BuildingScene() const; { return CurrentLock() == kModifyLock; }. » Author: Matevz Tadel, Jun 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-02 15:53; This page has been automatically generated. For comments or sug",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGLScenePad.html:17248,log,logical-shape,17248,root/html604/TGLScenePad.html,https://root.cern,https://root.cern/root/html604/TGLScenePad.html,1,['log'],['logical-shape']
Testability,"(const TBuffer3D& buffer, Bool_t includeRaw) const; Validate if the passed 'buffer' contains all sections we require to add object.; Returns Int_t combination of TBuffer::ESection flags still required - or; TBuffer3D::kNone if buffer is valid.; If 'includeRaw' is kTRUE check for kRaw/kRawSizes - skip otherwise.; See base/src/TVirtualViewer3D.cxx for description of viewer architecture. TGLLogicalShape* CreateNewLogical(const TBuffer3D& buffer) const; Create and return a new TGLLogicalShape from the supplied buffer. CreateNewPhysical(UInt_t physicalID, const TBuffer3D& buffer, const TGLLogicalShape& logical) const; Create and return a new TGLPhysicalShape with id 'ID', using; 'buffer' placement information (translation etc), and bound to; suppled 'logical'. void ComposePolymarker(const TList* padPrimitives). RootCsg::TBaseMesh* BuildComposite(); Build and return composite shape mesh. TGLLogicalShape* AttemptDirectRenderer(TObject* id); Try to construct an appropriate logical-shape sub-class based; on id'class, following convention that SomeClassGL is a suitable; renderer for class SomeClass. TGLScenePad(const TGLScenePad& ). TGLScenePad& operator=(const TGLScenePad& ). virtual ~TGLScenePad(); {}. TVirtualPad* GetPad() const; { return fPad; }. void SetPad(TVirtualPad* p); { fPad = p; }. Bool_t GetSmartRefresh() const; { return fSmartRefresh; }. void SetSmartRefresh(Bool_t smart_ref); { fSmartRefresh = smart_ref; }. Bool_t CanLoopOnPrimitives() const; TVirtualViewer3D interface. { return kTRUE; }. Int_t DistancetoPrimitive(Int_t , Int_t ); For now handled by viewer. { return 9999; }. void ExecuteEvent(Int_t , Int_t , Int_t ); {}. Bool_t PreferLocalFrame() const; { return kTRUE; }. Bool_t BuildingScene() const; { return CurrentLock() == kModifyLock; }. » Author: Matevz Tadel, Jun 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-30 14:54; This page has been automatically generated. For comments or sug",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLScenePad.html:17248,log,logical-shape,17248,root/html602/TGLScenePad.html,https://root.cern,https://root.cern/root/html602/TGLScenePad.html,1,['log'],['logical-shape']
Testability,"(const char* dataset = 0); voidShowDataSetQuota(Option_t* opt = 0); virtual voidShowDataSets(const char* uri = """", const char* optStr = """"); voidShowEnabledPackages(Bool_t all = kFALSE); voidShowFeedback() const; voidShowLog(Int_t qry = -1); voidShowLog(const char* queryref); virtual voidShowMembers(TMemberInspector& insp) const; voidShowMissingFiles(TQueryResult* qr = 0); voidShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); voidShowParameters(const char* wildcard = ""PROOF_*"") const; voidShowQueries(Option_t* opt = """"); virtual voidShowStagingStatusDataSet(const char* dataset, const char* optStr = ""filter:SsCc""); virtual Int_tTNamed::Sizeof() const; voidStartupMessage(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; voidStopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTouch(); TProof(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Int_tUploadDataSet(const char*, TList*, const char* = 0, Int_t = 0, TList* = 0); Int_tUploadDataSet(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tUploadDataSetFromFile(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tUploadPackage(const char* par, TProof::EUploadPackageOpt opt = kUntar, TList* workers = 0); virtual voidTObject::UseCurrentStyle(); Bool_tUseDynamicStartup() const; virtual Int_tVerifyDataSet(const char* dataset, const char* optStr = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProof.html:17787,log,loglevel,17787,root/html602/TProof.html,https://root.cern,https://root.cern/root/html602/TProof.html,2,['log'],['loglevel']
Testability,"(const char* logfile = 0); Change the file name for logging of a RooMinuit of all MINUIT steppings; through the parameter space. If inLogfile is null, the current log file; is closed and logging is stopped. Double_t getPdfParamVal(Int_t index); Access PDF parameter value by ordinal index (needed by MINUIT). Double_t getPdfParamErr(Int_t index); Access PDF parameter error by ordinal index (needed by MINUIT). Bool_t setPdfParamVal(Int_t index, Double_t value, Bool_t verbose = kFALSE); Modify PDF parameter value by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t value); Modify PDF parameter error by ordinal index (needed by MINUIT). void clearPdfParamAsymErr(Int_t index); Modify PDF parameter error by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t loVal, Double_t hiVal); Modify PDF parameter error by ordinal index (needed by MINUIT). void profileStart(); Start profiling timer. void profileStop(); Stop profiling timer and report results of last session. void backProp(); Transfer MINUIT fit results back into RooFit objects. void applyCovarianceMatrix(TMatrixDSym& V); Apply results of given external covariance matrix. i.e. propagate its errors; to all RRV parameter representations and give this matrix instead of the; HESSE matrix at the next save() call. RooMinuit(RooAbsReal& function). void setEvalErrorWall(Bool_t flag); { _doEvalErrorWall = flag ; }. void setPrintEvalErrors(Int_t numEvalErrors); { _printEvalErrors = numEvalErrors ; }. void setVerbose(Bool_t flag = kTRUE); { _verbose = flag ; }. void setProfile(Bool_t flag = kTRUE); { _profile = flag ; }. Int_t getNPar() const; { return _nPar ; }. ofstream* logfile() const; { return _logfile ; }. Double_t& maxFCN(); { return _maxFCN ; }. » Last changed: Mon Dec 7 13:48:15 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMinuit.html:14029,log,logfile,14029,root/html526/RooMinuit.html,https://root.cern,https://root.cern/root/html526/RooMinuit.html,1,['log'],['logfile']
Testability,"(const char* logfile = 0); Change the file name for logging of a RooMinuit of all MINUIT steppings; through the parameter space. If inLogfile is null, the current log file; is closed and logging is stopped. Double_t getPdfParamVal(Int_t index); Access PDF parameter value by ordinal index (needed by MINUIT). Double_t getPdfParamErr(Int_t index); Access PDF parameter error by ordinal index (needed by MINUIT). Bool_t setPdfParamVal(Int_t index, Double_t value, Bool_t verbose = kFALSE); Modify PDF parameter value by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t value); Modify PDF parameter error by ordinal index (needed by MINUIT). void clearPdfParamAsymErr(Int_t index); Modify PDF parameter error by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t loVal, Double_t hiVal); Modify PDF parameter error by ordinal index (needed by MINUIT). void profileStart(); Start profiling timer. void profileStop(); Stop profiling timer and report results of last session. void backProp(); Transfer MINUIT fit results back into RooFit objects. void applyCovarianceMatrix(TMatrixDSym& V); Apply results of given external covariance matrix. i.e. propagate its errors; to all RRV parameter representations and give this matrix instead of the; HESSE matrix at the next save() call. RooMinuit(RooAbsReal& function). void setEvalErrorWall(Bool_t flag); { _doEvalErrorWall = flag ; }. void setPrintEvalErrors(Int_t numEvalErrors); { _printEvalErrors = numEvalErrors ; }. void setVerbose(Bool_t flag = kTRUE); { _verbose = flag ; }. void setProfile(Bool_t flag = kTRUE); { _profile = flag ; }. Int_t getNPar() const; { return _nPar ; }. ofstream* logfile() const; { return _logfile ; }. Double_t& maxFCN(); { return _maxFCN ; }. » Last changed: Sat Oct 9 20:48:31 2010 » Last generated: 2010-10-09 20:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMinuit.html:14015,log,logfile,14015,root/html528/RooMinuit.html,https://root.cern,https://root.cern/root/html528/RooMinuit.html,1,['log'],['logfile']
Testability,"(const char* message, const char* serverValueString = 0) const; static voidlogEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tmaxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*mean(RooRealVar& obs); RooMoment*mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tminTrialSamples(const RooArgSet&) const; RooMoment*moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tnumEvalErrorItems(); static Int_tnumEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_toperator==(Double_t value) const; virtual Bool_toperator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsReal.html:17079,test,testArg,17079,root/html532/RooAbsReal.html,https://root.cern,https://root.cern/root/html532/RooAbsReal.html,1,['test'],['testArg']
Testability,"(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Int_tfLookupIndexwant a small footprint reference to the RooArgSet for particular parameter point; Double_tfLowerLimitlower limit on test statistic; Double_tfUpperLimitupper limit on test statistic. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t GetLookupIndex(Double_t cl, Double_t leftside); get index for cl,leftside pair. AcceptanceRegion(); {}. virtual ~AcceptanceRegion(); {}. AcceptanceRegion(Int_t lu, Double_t ll, Double_t ul). Double_t GetLowerLimit(); {return fLowerLimit;}. Double_t GetUpperLimit(); {return fUpperLimit;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-06-30 14:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__AcceptanceRegion.html:6401,test,test,6401,root/html602/RooStats__AcceptanceRegion.html,https://root.cern,https://root.cern/root/html602/RooStats__AcceptanceRegion.html,2,['test'],['test']
Testability,"(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Int_tfLookupIndexwant a small footprint reference to the RooArgSet for particular parameter point; Double_tfLowerLimitlower limit on test statistic; Double_tfUpperLimitupper limit on test statistic. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t GetLookupIndex(Double_t cl, Double_t leftside); get index for cl,leftside pair. AcceptanceRegion(); {}. virtual ~AcceptanceRegion(); {}. AcceptanceRegion(Int_t lu, Double_t ll, Double_t ul). Double_t GetLowerLimit(); {return fLowerLimit;}. Double_t GetUpperLimit(); {return fUpperLimit;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-09-08 17:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooStats__AcceptanceRegion.html:6401,test,test,6401,root/html604/RooStats__AcceptanceRegion.html,https://root.cern,https://root.cern/root/html604/RooStats__AcceptanceRegion.html,2,['test'],['test']
Testability,"(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; const RooCatType*RooAbsCategory::lookupType(Int_t index, Bool_t printError = kFALSE) const; const RooCatType*RooAbsCategory::lookupType(const char* label, Bool_t printError = kFALSE) const; const RooCatType*RooAbsCategory::lookupType(const RooCatType& type, Bool_t printError = kFALSE) const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); virtual Int_tRooAbsCategoryLValue::numBins(const char* rangeName) const; Int_tRooAbsArg::numCaches() const; Int_tRooAbsCategory::numTypes(const char* = 0) const; Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Bool_tRooAbsCategory::operator!=(Int_t index); Bool_tRooAbsCategory::operator!=(const char* label); Bool_tRooAbsCategory::operator!=(const RooAbsArg& other); RooAbsArg&RooAbsCategoryLValue::operator=(int index); RooAbsArg&RooAbsCategoryLValue::operator=(const char* label); RooAbsArg&RooAbsCategoryLValue::operator=(const RooAbsCategory& other); Bool_tRooAbsCategory::operator==(Int_t index) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCategory.html:11004,test,testArg,11004,root/html534/RooCategory.html,https://root.cern,https://root.cern/root/html534/RooCategory.html,1,['test'],['testArg']
Testability,"(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; const RooCatType*RooAbsCategory::lookupType(Int_t index, Bool_t printError = kFALSE) const; const RooCatType*RooAbsCategory::lookupType(const char* label, Bool_t printError = kFALSE) const; const RooCatType*RooAbsCategory::lookupType(const RooCatType& type, Bool_t printError = kFALSE) const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); virtual Int_tRooAbsCategoryLValue::numBins(const char* rangeName) const; Int_tRooAbsArg::numCaches() const; Int_tRooAbsCategory::numTypes(const char* = 0) const; Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Bool_tRooAbsCategory::operator!=(Int_t index); Bool_tRooAbsCategory::operator!=(const char* label); Bool_tRooAbsCategory::operator!=(const RooAbsArg& other); RooCategory&operator=(const RooCategory&); Bool_tRooAbsCategory::operator==(Int_t index) const; Bool_tRooAbsCategory::operator==(const char* label) const; virtual Bool_tRooAbsCategory::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCategory.html:10868,test,testArg,10868,root/html602/RooCategory.html,https://root.cern,https://root.cern/root/html602/RooCategory.html,2,['test'],['testArg']
Testability,"(dropFractions.size () > dropIndex); 763 dropFraction = dropFractions.at (dropIndex);; 764 ; 765 fillDropContainer (dropContainer, dropFraction, _numNodes);; 766 }; 767 isWeightsForDrop = true;; 768 }; 769 ; 770 // execute training cycle; 771 trainError = trainCycle (minimizer, weights, begin (trainPattern), end (trainPattern), settings, dropContainer);; 772 ; 773 ; 774 // ------ check if we have to execute a test ------------------; 775 bool hasConverged = false;; 776 if (testCycleCount % settings.testRepetitions () == 0) // we test only everye ""testRepetitions"" repetition; 777 {; 778 if (isWeightsForDrop); 779 {; 780 dropOutWeightFactor (weights, dropFractions);; 781 isWeightsForDrop = false;; 782 }; 783 ; 784 ; 785 testError = 0;; 786 //double weightSum = 0;; 787 settings.startTestCycle ();; 788 if (settings.useMultithreading ()); 789 {; 790 size_t numThreads = std::thread::hardware_concurrency ();; 791 size_t patternPerThread = testPattern.size () / numThreads;; 792 std::vector<Batch> batches;; 793 auto itPat = testPattern.begin ();; 794 // auto itPatEnd = testPattern.end ();; 795 for (size_t idxThread = 0; idxThread < numThreads-1; ++idxThread); 796 {; 797 batches.push_back (Batch (itPat, itPat + patternPerThread));; 798 itPat += patternPerThread;; 799 }; 800 if (itPat != testPattern.end ()); 801 batches.push_back (Batch (itPat, testPattern.end ()));; 802 ; 803 std::vector<std::future<std::tuple<double,std::vector<double>>>> futures;; 804 for (auto& batch : batches); 805 {; 806 // -------------------- execute each of the batch ranges on a different thread -------------------------------; 807 futures.push_back (; 808 std::async (std::launch::async, [&](); 809 {; 810 std::vector<double> localOutput;; 811 pass_through_type passThrough (settings, batch, dropContainerTest);; 812 double testBatchError = (*this) (passThrough, weights, ModeOutput::FETCH, localOutput);; 813 return std::make_tuple (testBatchError, localOutput);; 814 }); 815 );; 816 }; 817 ; 818 auto itBat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:23616,test,testPattern,23616,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['test'],['testPattern']
Testability,"(e.g. ""electrons"", ""muons"" but also ""pions.fPt""); the leaf branches (e.g. ""muons.fPt"") contain data that you can draw. Instead of using the TBrowser you can also use C++:; tree->Draw(""muons.fPt""). This will again produce a histogram, now for the muons momentum. Note that MockupX is an imaginary but terrible experiment, its data doesn't make much sense - but for examining how to analyze it's just fine.; Selections; You define what data to draw (the muons' momentum in above example). But you might also want to not draw the value for all muons, but only for selected one - for example for those that have an electron in the event that has caused the experiment's trigger (""yes we want to keep this data!"") do fire. You do that with a second parameter:; tree->Draw(""muons.fPt"", ""electrons.fTriggered""). As you now restrict the drawn electrons to a subset of the original ones, you should see that there are less entries in the histogram. Did that work?; . ‹ 4. Histogramming; up; 5. Fitting ›. Navigate through this book; 0. Setting up ROOT; 1. Extracting an object from a TFile; 2. Running code in ROOT; 4. Histogramming; 3. Examining a TTree's data; 5. Fitting; 6. Multivariate Analysis; 7. Using the TTreeReader; 8. Efficiency Calculation; 9. Fitting By Coding; 10. Go Parallel!; TutorialSelector.C; 11. Done!. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/3-examining-ttrees-data.html:4756,test,tests,4756,d/3-examining-ttrees-data.html,https://root.cern,https://root.cern/d/3-examining-ttrees-data.html,1,['test'],['tests']
Testability,"(e.g. spheres/tubes in OpenGL) and can draw these based on an abstract description. Others always require a tessellation description based on TBuffer3D’s kRaw / kRawSizes points/lines/segments sections.; Some need the 3D object positions in the master (world) frame, others can cope with local frames and a translation matrix to place the object.; Some require bounding boxes for objects - others do not. Similarly some viewer clients are only capable of providing positions in master frame, cannot provide bounding boxes etc. Additionally we do not want to incur the cost of expensive tessellation operations if the viewer does not require them. To cope with these variations the TBuffer3D objects are filled by negotiation with the viewer. TBuffer3D class hierarchy. TBuffer3D classes are conceptually divided into enumerated sections: kCore, kBoundingBox, kRaw - see the class diagram and the file TBuffer3D.h for more details. The TBuffer3D methods SectionsValid(), SetSectionsValid(), ClearSectionsValid() are used to test, set, clear these section validity flags e.g.; buffer.SetSectionsValid(TBuffer3D::kShapeSpecific);; ...; if (buffer.SectionsValid(TBuffer3D:: kShapeSpecific)) {; ...; }; The sections found in the base TBuffer3D (kCore/kBoundingBox/kRawSizes/kRaw) are sufficient to describe any tessellated shape in a generic fashion. An additional kShapeSpecific section is added in TBuffer3D derived classes, allowing a more abstract shape description (“a sphere of inner radius x, outer radius y”). This enables a viewer, which knows how to draw (tessellate) the shape itself to do so, while providing a generic fallback suitable for all viewers. The rules for client negotiation with the viewer are:. If suitable specialized TBuffer3D class exists, use it, otherwise use TBuffer3D.; Complete the mandatory kCore section.; Complete the kShapeSpecific section if applicable.; Complete the kBoundingBox if you can.; Pass this buffer to the viewer using one of the TBuffer3D::AddObject() me",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:406781,test,test,406781,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['test']
Testability,"(el + eh); 291 assert( !fDataErrorPtr && fDataErrorHighPtr && fDataErrorLowPtr );; 292 assert( fDataError.empty() );; 293 assert( fDataErrorHigh.empty() || &fDataErrorHigh.front() == fDataErrorHighPtr );; 294 assert( fDataErrorLow.empty() || &fDataErrorLow.front() == fDataErrorLowPtr );; 295 assert( fDataErrorLow.empty() == fDataErrorHigh.empty() );; 296 ; 297 double eh = fDataErrorHighPtr[ ipoint ];; 298 double el = fDataErrorLowPtr[ ipoint ];; 299 ; 300 return (el+eh) / 2.0;; 301 }; 302 ; 303 assert( fErrorType == kCoordError );; 304 return fDataErrorPtr[ ipoint ];; 305 }; 306 ; 307 void GetAsymError( unsigned int ipoint, double& lowError, double& highError ) const; 308 {; 309 assert( fErrorType == kAsymError );; 310 assert( !fDataErrorPtr && fDataErrorHighPtr && fDataErrorLowPtr );; 311 assert( fDataError.empty() );; 312 assert( fDataErrorHigh.empty() || &fDataErrorHigh.front() == fDataErrorHighPtr );; 313 assert( fDataErrorLow.empty() || &fDataErrorLow.front() == fDataErrorLowPtr );; 314 assert( fDataErrorLow.empty() == fDataErrorHigh.empty() );; 315 ; 316 lowError = fDataErrorLowPtr[ ipoint ];; 317 highError = fDataErrorHighPtr[ ipoint ];; 318 }; 319 ; 320 /**; 321 Return the inverse of error on the value for the given fit point; 322 useful when error in the coordinates are not stored and then this is used directly this as the weight in; 323 the least square function; 324 */; 325 double InvError( unsigned int ipoint ) const; 326 {; 327 assert( ipoint < fMaxPoints );; 328 assert( kValueError == fErrorType || kCoordError == fErrorType ||; 329 kAsymError == fErrorType || kNoError == fErrorType );; 330 ; 331 if ( fErrorType == kNoError ); 332 {; 333 assert( !fDataErrorPtr && !fDataErrorHighPtr && !fDataErrorLowPtr );; 334 assert( fDataError.empty() && fDataErrorHigh.empty() && fDataErrorLow.empty() );; 335 return 1.0;; 336 }; 337 ; 338 if ( fErrorType == kValueError ) // need to invert (inverror is stored); 339 {; 340 assert( fDataErrorPtr && !fDataErrorHighPtr && ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8h_source.html:10927,assert,assert,10927,doc/master/BinData_8h_source.html,https://root.cern,https://root.cern/doc/master/BinData_8h_source.html,1,['assert'],['assert']
Testability,"(f1,someoption);. To retrieve a function by name from this list, do:. TF1 *f1 = (TF1*)h->GetListOfFunctions()->FindObject(name);. or. TF1 *f1 = h->GetFunction(name);. Associated functions are automatically painted when an histogram is drawn.; To avoid the painting of the associated functions the option HIST; should be added to the list of the options used to paint the histogram.; Drawing using OpenGL; The class TGLHistPainter allows to paint data set using the OpenGL 3D; graphics library. The plotting options start with GL keyword.; In addition, in order to inform canvases that OpenGL should be used to render; 3D representations, the following option should be set:. gStyle->SetCanvasPreferGL(true);. General information: plot types and supported options; The following types of plots are provided:; For lego plots the supported options are:. ""GLLEGO""; Draw a lego plot. It works also for TH2Poly. ""GLLEGO2; Bins with color levels. ""GLLEGO3; Cylindrical bars. Lego painter in cartesian supports logarithmic scales for X, Y, Z.; In polar only Z axis can be logarithmic, in cylindrical only Y.; For surface plots (TF2 and TH2) the supported options are:. ""GLSURF"" ; Draw a surface. ""GLSURF1""; Surface with color levels. ""GLSURF2""; The same as ""GLSURF1"" but without polygon outlines. ""GLSURF3""; Color level projection on top of plot (works only in cartesian coordinate; system). ""GLSURF4""; Same as ""GLSURF"" but without polygon outlines. The surface painting in cartesian coordinates supports logarithmic scales along; X, Y, Z axis. In polar coordinates only the Z axis can be logarithmic,; in cylindrical coordinates only the Y axis.; Additional options to SURF and LEGO - Coordinate systems:. "" ""; Default, cartesian coordinates system. ""POL""; Polar coordinates system. ""CYL""; Cylindrical coordinates system. ""SPH""; Spherical coordinates system. TH3 as boxes (spheres); The supported options are:. GLBOX"" ; TH3 as a set of boxes, size of box is proportional to bin content. GLBOX1""; The same as ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THistPainter.html:69605,log,logarithmic,69605,root/html528/THistPainter.html,https://root.cern,https://root.cern/root/html528/THistPainter.html,3,['log'],['logarithmic']
Testability,"(f1,someoption);. To retrieve a function by name from this list, do:. TF1 *f1 = (TF1*)h->GetListOfFunctions()->FindObject(name);. or. TF1 *f1 = h->GetFunction(name);. Associated functions are automatically painted when an histogram is drawn.; To avoid the painting of the associated functions the option HIST; should be added to the list of the options used to paint the histogram.; Drawing using OpenGL; The class TGLHistPainter allows to paint data set using the OpenGL 3D; graphics library. The plotting options start with GL keyword.; In addition, in order to inform canvases that OpenGL should be used to render; 3D representations, the following option should be set:. gStyle->SetCanvasPreferGL(true);. General information: plot types and supported options; The following types of plots are provided:; For lego plots the supported options are:. ""GLLEGO""; Draw a lego plot. It works also for TH2Poly. ""GLLEGO2; Bins with color levels. ""GLLEGO3; Cylindrical bars. Lego painter in cartesian supports logarithmic scales for X, Y, Z.; In polar only Z axis can be logarithmic, in cylindrical only Y.; For surface plots (TF2 and TH2) the supported options are:. ""GLSURF"" ; Draw a surface. ""GLSURF1""; Surface with color levels. ""GLSURF2""; The same as ""GLSURF1"" but without polygon outlines. ""GLSURF3""; Color level projection on top of plot (works only in cartesian coordinate; system). ""GLSURF4""; Same as ""GLSURF"" but without polygon outlines. The surface painting in cartesian coordinates supports logarithmic scales along; X, Y, Z axis. In polar coordinates only the Z axis can be logarithmic,; in cylindrical coordinates only the Y axis.; Additional options to SURF and LEGO - Coordinate systems:. "" ""; Default, cartesian coordinates system. ""POL""; Polar coordinates system. ""CYL""; Cylindrical coordinates system. ""SPH""; Spherical coordinates system. TH3 as color boxes; The supported option is:. ""GLCOL"" ; H3 is drawn using semi-transparent colored boxes.; See $ROOTSYS/tutorials/gl/glvox1.C. TH3 as",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THistPainter.html:74807,log,logarithmic,74807,root/html534/THistPainter.html,https://root.cern,https://root.cern/root/html534/THistPainter.html,3,['log'],['logarithmic']
Testability,"(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 714 fDataErrorLowPtr = fDataErrorLow.empty() ? nullptr : &fDataErrorLow.front();; 715 ; 716 fDataError.clear();; 717 fDataErrorPtr = nullptr;; 718 }; 719 else; 720 {; 721 assert(false);; 722 }; 723 }; 724 ; 725 void BinData::InitBinEdge(); 726 {; 727 fBinEdge.resize( fDim );; 728 ; 729 for( unsigned int i=0; i<fDim; i++ ); 730 {; 731 fBinEdge[i].reserve(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 732 }; 733 ; 734 if ( fpTmpBinEdgeVector ); 735 {; 736 delete[] fpTmpBinEdgeVector;; 737 fpTmpBinEdgeVector = nullptr;; 738 }; 739 ; 740 fpTmpBinEdgeVector = new double[ fDim ];; 741 }; 742 ; 743 void BinData::UnWrap( ); 744 {; 745 assert( fWrapped );; 746 assert( kValueError == fErrorType || kCoordError == fErrorType ||; 747 kAsymError == fErrorType || kNoError == fErrorType );; 748 assert( fDataError.empty() || &fDataError.front() == fDataErrorPtr );; 749 assert( fDataErrorHigh.empty() || &fDataErrorHigh.front() == fDataErrorHighPtr );; 750 assert( fDataErrorLow.empty() || &fDataErrorLow.front() == fDataErrorLowPtr );; 751 assert( fDataErrorLow.empty() == fDataErrorHigh.empty() );; 752 ; 753 assert( fData.empty() );; 754 assert( fDataPtr );; 755 ; 756 unsigned vectorPadding = FitData::VectorPadding(fNPoints);; 757 fData.resize(fNPoints + vectorPadding);; 758 std::copy( fDataPtr, fDataPtr + fNPoints, fData.begin() );; 759 fDataPtr = fData.empty() ? nullptr : &fData.front();; 760 ; 761 for ( unsigned int i=0; i < fDim; i++ ); 762 {; 763 assert( fCoordErrorsPtr[i] );; 764 assert( fCoordErrors.empty() || &fCoordErrors[i].front() == fCoordErrorsPtr[i] );; 765 }; 766 ; 767 if( kValueError == fErrorType || kCoordError == fErrorType ); 768 {; 769 assert( fDataError.empty() );; 770 assert( fDataErrorPtr );; 771 ; 772 fDataError.resize(fNPoints + vectorPadding);; 773 std::copy(fDataErrorPtr, fDataErrorPtr + fNPoints + vectorPadding, fDataError.begin());; 774 fDataErrorPtr = fDataError.empty() ? nullptr : &fDataError.front();",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:22827,assert,assert,22827,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['assert'],['assert']
Testability,"(int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TQueryResultManager.h>. Inheritance diagram for TQueryResultManager:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TQueryResultManager(). TQueryResultManager::TQueryResultManager ; (; const char * ; qdir, . const char * ; stag, . const char * ; sdir, . TProofLockPath * ; lck, . FILE * ; logfile = 0 . ). Constructor. ; Definition at line 42 of file TQueryResultManager.cxx. ◆ ~TQueryResultManager(). TQueryResultManager::~TQueryResultManager ; (; ). override . Cleanup. ; Not really necessary since after this dtor there is no live anyway. ; Definition at line 62 of file TQueryResultManager.cxx. Member Function Documentation. ◆ AddLogFile(). void TQueryResultManager::AddLogFile ; (; TProofQueryResult * ; pq). private . Add part of log file concerning TQueryResult pq to its macro container. ; Definition at line 72 of file TQueryResultManager.cxx. ◆ ApplyMaxQueries(). Int_t TQueryResultManager::ApplyMaxQueries ; (; Int_t ; mxq). Scan the queries directory and remove the oldest ones (and relative dirs, if empty) in such a way only 'mxq' queries are kept. ; Return 0 on success, -1 in case of problems ; Definition at line 236 of file TQueryResultManager.cxx. ◆ Class(). static TClass * TQueryResultManager::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TQueryResultManager::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TQueryResultManager::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 84 of file TQueryResultManager.h. ◆ CleanupQueriesDir(). Int_t TQueryResultManager::CleanupQueriesDir ; (; ). Remove all queries results referring to previous sessions. ; Definition at line 107 of file TQuer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQueryResultManager.html:13028,log,log,13028,doc/master/classTQueryResultManager.html,https://root.cern,https://root.cern/doc/master/classTQueryResultManager.html,1,['log'],['log']
Testability,"(list->FindObject(""MyClass""));; if (info) auto classversionid = info->GetClassVersion();; delete list;; TStreamerInfoDescribes a persistent version of a class.Definition TStreamerInfo.h:39; TStreamerInfo::GetClassVersionInt_t GetClassVersion() const overrideDefinition TStreamerInfo.h:161. Definition at line 1445 of file TFile.cxx. ◆ GetStreamerInfoListImpl(). TFile::InfoListRet TFile::GetStreamerInfoListImpl ; (; bool ; lookupSICache). protectedvirtual . See documentation of GetStreamerInfoList for more details. ; This is an internal method which returns the list of streamer infos and also information about the success of the operation. ; Reimplemented in TXMLFile, and TSQLFile.; Definition at line 1376 of file TFile.cxx. ◆ GetType(). TFile::EFileType TFile::GetType ; (; const char * ; name, . Option_t * ; option = """", . TString * ; prefix = nullptr . ). static . Resolve the file type as a function of the protocol field in 'name'. ; If defined, the string 'prefix' is added when testing the locality of a 'name' with network-like structure (i.e. root://host//path); if the file is local, on return 'prefix' will contain the actual local path of the file. ; Definition at line 4821 of file TFile.cxx. ◆ GetVersion(). Int_t TFile::GetVersion ; (; ); const. inline . Definition at line 245 of file TFile.h. ◆ IncrementFileCounter(). void TFile::IncrementFileCounter ; (; ). static . Definition at line 4620 of file TFile.cxx. ◆ IncrementProcessIDs(). virtual void TFile::IncrementProcessIDs ; (; ). inlinevirtual . Definition at line 257 of file TFile.h. ◆ Init(). void TFile::Init ; (; Bool_t ; create). protectedvirtual . Initialize a TFile object. ; Parameters. [in]createCreate a new file. TFile implementations providing asynchronous open functionality need to override this method to run the appropriate checks before calling this standard initialization part. See TNetXNGFile::Init for an example. ; Reimplemented in TNetFile, TNetXNGFile, TDavixFile, and TWebFile.; Definition at li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFile.html:71195,test,testing,71195,doc/master/classTFile.html,https://root.cern,https://root.cern/doc/master/classTFile.html,1,['test'],['testing']
Testability,"(list->FindObject(""MyClass""));; if (info) auto classversionid = info->GetClassVersion();; delete list;; TStreamerInfoDescribes a persistent version of a class.Definition TStreamerInfo.h:39; TStreamerInfo::GetClassVersionInt_t GetClassVersion() const overrideDefinition TStreamerInfo.h:202. Definition at line 1445 of file TFile.cxx. ◆ GetStreamerInfoListImpl(). TFile::InfoListRet TFile::GetStreamerInfoListImpl ; (; bool ; lookupSICache). protectedvirtual . See documentation of GetStreamerInfoList for more details. ; This is an internal method which returns the list of streamer infos and also information about the success of the operation. ; Reimplemented in TXMLFile, and TSQLFile.; Definition at line 1376 of file TFile.cxx. ◆ GetType(). TFile::EFileType TFile::GetType ; (; const char * ; name, . Option_t * ; option = """", . TString * ; prefix = nullptr . ). static . Resolve the file type as a function of the protocol field in 'name'. ; If defined, the string 'prefix' is added when testing the locality of a 'name' with network-like structure (i.e. root://host//path); if the file is local, on return 'prefix' will contain the actual local path of the file. ; Definition at line 4821 of file TFile.cxx. ◆ GetVersion(). Int_t TFile::GetVersion ; (; ); const. inline . Definition at line 245 of file TFile.h. ◆ IncrementFileCounter(). void TFile::IncrementFileCounter ; (; ). static . Definition at line 4620 of file TFile.cxx. ◆ IncrementProcessIDs(). virtual void TFile::IncrementProcessIDs ; (; ). inlinevirtual . Definition at line 257 of file TFile.h. ◆ Init(). void TFile::Init ; (; Bool_t ; create). protectedvirtual . Initialize a TFile object. ; Parameters. [in]createCreate a new file. TFile implementations providing asynchronous open functionality need to override this method to run the appropriate checks before calling this standard initialization part. See TXNetFile::Init for an example. ; Reimplemented in TXNetFile, TNetFile, TNetXNGFile, TDavixFile, and TWebFile.; Definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:71261,test,testing,71261,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,1,['test'],['testing']
Testability,"(not fit). However they are present in the estimated functional ; Definition at line 98 of file TSpectrum2Fit.h. ◆ fFixRo. Bool_t TSpectrum2Fit::fFixRo. protected . logical value of correlation coefficient, which allows to fix the parameter (not to fit). ; Definition at line 104 of file TSpectrum2Fit.h. ◆ fFixSigmaX. Bool_t TSpectrum2Fit::fFixSigmaX. protected . logical value of sigma x parameter, which allows to fix the parameter (not to fit). ; Definition at line 102 of file TSpectrum2Fit.h. ◆ fFixSigmaY. Bool_t TSpectrum2Fit::fFixSigmaY. protected . logical value of sigma y parameter, which allows to fix the parameter (not to fit). ; Definition at line 103 of file TSpectrum2Fit.h. ◆ fFixSx. Bool_t TSpectrum2Fit::fFixSx. protected . logical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 109 of file TSpectrum2Fit.h. ◆ fFixSxy. Bool_t TSpectrum2Fit::fFixSxy. protected . logical value of s parameter for 2D peaks, which allows to fix the parameter (not to fit). ; Definition at line 106 of file TSpectrum2Fit.h. ◆ fFixSy. Bool_t TSpectrum2Fit::fFixSy. protected . logical value of s parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ; Definition at line 110 of file TSpectrum2Fit.h. ◆ fFixTx. Bool_t TSpectrum2Fit::fFixTx. protected . logical value of t parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 107 of file TSpectrum2Fit.h. ◆ fFixTxy. Bool_t TSpectrum2Fit::fFixTxy. protected . logical value of t parameter for 2D peaks, which allows to fix the parameter (not to fit). ; Definition at line 105 of file TSpectrum2Fit.h. ◆ fFixTy. Bool_t TSpectrum2Fit::fFixTy. protected . logical value of t parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ; Definition at line 108 of file TSpectrum2Fit.h. ◆ fNPeaks. Int_t TSpectrum2Fit::fNPeaks. protected . number of peaks present in fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:86489,log,logical,86489,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['log'],['logical']
Testability,"(not verified) on Thu, 07/23/2015 - 21:52 Permalink . CINT need to be communitized, that's the whole problem . Indeed, for decade, Cint never made it to open-source because of ROOT dependencies and backward compatiblities. Now that I am seeing this arguement is no more, and we are going to dig up some old grave.. I don't see why Cint shouldn't be taking over by open source or boost. I don't see how we are going to leverage on Clang/Cling at all... all I am seeing is regression session will be made at a far higher degree. I ""plussoie"" Renee's point, mixing technologies is a very , veRY, VERY bad idea. Mostly because Python isn't an ISO standard like many others langage. We should stick to C++ ISO and that's all we need. Adding few more features in Cint isn't a big deal. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:52 Permalink . CINT and Open Source . Hi Daniel,; Thank you for your comment! As a matter of fact, CINT does not depend on ROOT at all. It is open source. It was used in commercial products independently of ROOT. I also don't see where the connection between cling and a python dependence comes in?; Given the amount of work that went into GCC to bring C++11 support I find it unrealistic that we (not compiler people!) would be able to lift CINT to C++11...; Cheers, Axel. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:21146,test,tests,21146,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,1,['test'],['tests']
Testability,"(ostream& o) const; voidScaleBoostWeight(Double_t s) const; voidSetBoostWeight(Double_t w) const; voidSetClass(UInt_t t); voidSetDoNotBoost() const; static voidSetIgnoreNegWeightsInTraining(Bool_t); static voidSetIsTraining(Bool_t); voidSetSpectator(UInt_t ivar, Float_t value); voidSetTarget(UInt_t itgt, Float_t value); voidSetVal(UInt_t ivar, Float_t val); voidSetVariableArrangement(vector<UInt_t>*const m) const; voidSetWeight(Double_t w). Data Members; private:. Double_tfBoostWeightinternal weight to be set by boosting algorithm; UInt_tfClassclass number; Bool_tfDoNotBoostmark event as not to be boosted (used to compensate for events with negative event weights; Bool_tfDynamicis set when the dynamic values are taken; vector<Float_t>fSpectators""visisting"" variables not used in MVAs ; mutable, to be able to copy the dynamic values in there; vector<Float_t>fTargetstarget values for regression; vector<Float_t>fValuesthe event values ; mutable, to be able to copy the dynamic values in there; vector<Float_t*>*fValuesDynamicthe event values; vector<Float_t>fValuesRearrangedthe event values ; mutable, to be able to copy the dynamic values in there; vector<UInt_t>*fVariableArrangementneeded for MethodCategories, where we can train on other than the main variables; Double_tfWeightevent weight (product of global and individual weights); static Bool_tfgIgnoreNegWeightsInTraining; static Bool_tfgIsTrainingmark if we are in an actual training or ""evaluation/testing"" phase --> ignoreNegWeights only in actual training !. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Event(); copy constructor. Event(const vector<Float_t>& values, const vector<Float_t>& targetValues, UInt_t theClass = 0, Double_t weight = 1., Double_t boostweight = 1.); constructor. Event(const vector<Float_t>& values, const vector<Float_t>& targetValues, const vector<Float_t>& spectatorValues, UInt_t theClass = 0, Double_t weight = 1., Double_t boostweight = 1.); constr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__Event.html:3057,test,testing,3057,root/html602/TMVA__Event.html,https://root.cern,https://root.cern/root/html602/TMVA__Event.html,2,['test'],['testing']
Testability,"(plotClones.find(plotVars.at(2)->GetName()));; 1018 zaxis= hist->GetZaxis();; 1019 assert(nullptr != zvar && nullptr != zaxis);; 1020 if (scaleForDensity) {; 1021 scaleFactor*= (zaxis->GetXmax() - zaxis->GetXmin())/zbins;; 1022 }; 1023 // fall through to next case...; 1024 case 2:; 1025 ybins= hist->GetNbinsY();; 1026 yvar= dynamic_cast<RooRealVar*>(plotClones.find(plotVars.at(1)->GetName()));; 1027 yaxis= hist->GetYaxis();; 1028 assert(nullptr != yvar && nullptr != yaxis);; 1029 if (scaleForDensity) {; 1030 scaleFactor*= (yaxis->GetXmax() - yaxis->GetXmin())/ybins;; 1031 }; 1032 // fall through to next case...; 1033 case 1:; 1034 xbins= hist->GetNbinsX();; 1035 xvar= dynamic_cast<RooRealVar*>(plotClones.find(plotVars.at(0)->GetName()));; 1036 xaxis= hist->GetXaxis();; 1037 assert(nullptr != xvar && nullptr != xaxis);; 1038 if (scaleForDensity) {; 1039 scaleFactor*= (xaxis->GetXmax() - xaxis->GetXmin())/xbins;; 1040 }; 1041 break;; 1042 default:; 1043 coutE(InputArguments) << ClassName() << ""::"" << GetName() << "":fillHistogram: cannot fill histogram with ""; 1044 << hdim << "" dimensions"" << std::endl;; 1045 break;; 1046 }; 1047 ; 1048 // Loop over the input histogram's bins and fill each one with our projection's; 1049 // value, calculated at the center.; 1050 RooAbsReal::setEvalErrorLoggingMode(RooAbsReal::CollectErrors) ;; 1051 Int_t xbin(0);; 1052 Int_t ybin(0);; 1053 Int_t zbin(0);; 1054 Int_t bins= xbins*ybins*zbins;; 1055 for(Int_t bin= 0; bin < bins; bin++) {; 1056 switch(hdim) {; 1057 case 3:; 1058 if(bin % (xbins*ybins) == 0) {; 1059 zbin++;; 1060 zvar->setVal(zaxis->GetBinCenter(zbin));; 1061 }; 1062 // fall through to next case...; 1063 case 2:; 1064 if(bin % xbins == 0) {; 1065 ybin= (ybin%ybins) + 1;; 1066 yvar->setVal(yaxis->GetBinCenter(ybin));; 1067 }; 1068 // fall through to next case...; 1069 case 1:; 1070 xbin= (xbin%xbins) + 1;; 1071 xvar->setVal(xaxis->GetBinCenter(xbin));; 1072 break;; 1073 default:; 1074 coutE(InputArguments) << ""RooAbsReal::fil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:42326,assert,assert,42326,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['assert'],['assert']
Testability,"(shift) to the projection of worldRef onto viewport,; returning the resultant world vector which equates to it. Useful for making; 3D world objects track mouse moves. Camera must have valid frustum cache - call Apply(). Bool_t OfInterest(const TGLBoundingBox& box, Bool_t ignoreSize) const; Calculate if the an object defined by world frame bounding box; is 'of interest' to the camera. This is defined as box:. i) intersecting completely or partially (kInside/kPartial) with; cameras interest box (fInterestBox); ii) having significant length OR volume ratio compared to this; interest box. If a box is 'of interest' returns kTRUE, kFALSE otherwise. See; TGLCamera::UpdateInterest() for more details of camera interest; box. Note: Length/volume ratios NOT dependent on the projected size; of box at current camera configuration as we do not want; continual changes. This is used when (re) populating the scene; with objects from external client. TODO: Might be more logical to move this test out to client -; and have accessor for fInterestBox instead?. Bool_t UpdateInterest(Bool_t force); Update the internal interest box (fInterestBox) of the camera.; The interest box is an orientated bounding box, calculated as; an expanded container round the frustum. It is used to test if; if object bounding boxes are of interest (should be accepted; into viewer scene) for a camera - see TGLCamera::OfInterest(). The interest box is updated if the frustum is no longer contained; in the existing one, or a new one calculated on the current frustum; differs significantly in volume (camera has been zoomed/dollyed; sizable amount). If the interest box is updated we return kTRUE - kFALSE otherwise. void ResetInterest(); Clear out the existing interest box. Bool_t AdjustAndClampVal(Double_t& val, Double_t min, Double_t max, Int_t screenShift, Int_t screenShiftRange, Bool_t mod1, Bool_t mod2) const; Adjust a passed REFERENCE value 'val', based on screenShift delta.; Two modifier flags ('mod1' / 'mod2' ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLCamera.html:14282,log,logical,14282,root/html528/TGLCamera.html,https://root.cern,https://root.cern/root/html528/TGLCamera.html,12,"['log', 'test']","['logical', 'test']"
Testability,"(size_t sz, void* vp); RooMinimizer&operator=(const RooMinimizer&); voidoptimizeConst(Int_t flag); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); RooMinimizer(RooAbsReal& function); RooFitResult*save(const char* name = 0, const char* title = 0); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidsaveStatus(const char* label, Int_t status); Int_tseek(); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidsetEps(Double_t eps); voidsetErrorLevel(Double_t level); voidsetEvalErrorWall(Bool_t flag); Bool_tsetLogFile(const char* logf = 0); voidsetMaxFunctionCalls(Int_t n); voidsetMaxIterations(Int_t n); voidsetMinimizerType(const char* type); static voidTObject::SetObjectStat(Bool_t stat); voidsetOffsetting(Bool_t flag); voidsetPrintEvalErrors(Int_t numEvalErrors); Int_tsetPrintLevel(Int_t newLevel); voidsetProfile(Bool_t flag = kTRUE); voidsetStrategy(Int_t strat); virtual voidTObject::SetUniqueID(UInt_t uid); voidsetVerbose(Bool_t flag = kTRUE); virtual voidShowMembers(TMemberInspector& insp) const; Int_tsimplex(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMinimizer.html:5707,log,logf,5707,root/html602/RooMinimizer.html,https://root.cern,https://root.cern/root/html602/RooMinimizer.html,2,['log'],['logf']
Testability,"(std::size_t firstEvent, std::size_t lastEvent, std::size_t stepSize) const override;  ; bool setDataSlave (RooAbsData &data, bool cloneData=true, bool ownNewDataAnyway=false) override;  Change dataset that is used to given one. ;  ;  Protected Member Functions inherited from RooAbsTestStatistic; double evaluate () const override;  Calculate and return value of test statistic. ;  ; virtual double getCarry () const;  ; bool initialize ();  One-time initialization of the test statistic. ;  ; void initMPMode (RooAbsReal *real, RooAbsData *data, const RooArgSet *projDeps, std::string const &rangeName, std::string const &addCoefRangeName);  Initialize multi-processor calculation mode. ;  ; void initSimMode (RooSimultaneous *pdf, RooAbsData *data, const RooArgSet *projDeps, std::string const &rangeName, std::string const &addCoefRangeName);  Initialize simultaneous p.d.f processing mode. ;  ; Int_t numSets () const;  ; void printCompactTreeHook (std::ostream &os, const char *indent="""") override;  Add extra information on component test statistics when printing itself as part of a tree structure. ;  ; virtual bool processEmptyDataSets () const;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursive) override;  Forward server redirect calls to component test statistics. ;  ; void setEventCount (Int_t nEvents);  ; void setMPSet (Int_t setNum, Int_t numSets);  Set MultiProcessor set number identification of this instance. ;  ; Int_t setNum () const;  ; void setSimCount (Int_t simCount);  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChi2Var.html:52412,test,test,52412,doc/master/classRooChi2Var.html,https://root.cern,https://root.cern/doc/master/classRooChi2Var.html,1,['test'],['test']
Testability,"(u,...Definition TGLParametric.h:35; where FORMULA is the same string (mathematical expression), as in TF2, but you should use 'u' (or 'U') instead of 'x' and 'v' (or 'V') instead of 'y'.; Call equation->Draw(); Parametric surfaces support 21 color ""schemes"", you can change the color:; place mouse cursor above surface (surface is selected in pad); press 's' or 'S'. ; void glparametric(); {; gStyle->SetCanvasPreferGL(kTRUE);; TCanvas *c = new TCanvas(""canvas"",""Parametric surfaces with gl"", 100, 10,; 700, 700);; c->SetFillColor(42);; gStyle->SetFrameFillColor(42);; ; c->Divide(2, 2);; c->cd(1);; TGLParametricEquation *p1 = new TGLParametricEquation(""Conchoid"",; ""1.2 ^ u * (1 + cos(v)) * cos(u)"",; ""1.2 ^ u * (1 + cos(v)) * sin(u)"",; ""1.2 ^ u * sin(v) - 1.5 * 1.2 ^ u"",; 0., 6 * TMath::Pi(), 0., TMath::TwoPi());; p1->Draw();; ; c->cd(2);; TGLParametricEquation *p2 = new TGLParametricEquation(""Apple"",; ""cos(u) * (4 + 3.8 * cos(v)) "",; ""sin(u) * (4 + 3.8 * cos(v))"",; ""(cos(v) + sin(v) - 1) * (1 + sin(v)) * log(1 - pi * v / 10) + 7.5 * sin(v)"",; 0, TMath::TwoPi(), -TMath::Pi(), TMath::Pi());; p2->Draw();; ; c->cd(3);; TGLParametricEquation *p3 = new TGLParametricEquation(""Toupie"",; ""(abs(u) - 1) ^ 2 * cos(v)"",; ""(abs(u) - 1) ^ 2 * sin(v)"",; ""u"",; -1., 1., 0, TMath::TwoPi());; p3->Draw();; ; c->cd(4);; TGLParametricEquation *p4 = new TGLParametricEquation(""Trangluoid trefoil"",; ""2 * sin(3 * u) / (2 + cos(v))"",; ""2 * (sin(u) + 2 * sin(2 * u)) / (2 + cos(v + 2 * pi / 3))"",; ""(cos(u) - 2 * cos(2 * u)) * (2 + cos(v)) * (2 + cos(v + 2 * pi / 3)) / 4"",; -TMath::Pi(), TMath::Pi(), -TMath::Pi(), TMath::Pi());; p4->Draw();; }; c#define c(i)Definition RSha256.hxx:101; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TCanvasThe Canvas class.Definition TCanvas.h:23; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TStyle::SetFrameFillColorvoid SetFrameFillColor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/glparametric_8C.html:1895,log,log,1895,doc/master/glparametric_8C.html,https://root.cern,https://root.cern/doc/master/glparametric_8C.html,1,['log'],['log']
Testability,"(x, mu):; n = max(len(x), len(mu)); X = np.zeros((n, 2)); X[:, 0] = x; X[:, 1] = mu; prob = sbi_model.classifier.predict_proba(X)[:, 1]; return prob / (1 - prob); ; ; # Compute the learned likelihood ratio; llhr_learned = ROOT.RooFit.bindFunction(""MyBinFunc"", learned_likelihood_ratio, x_var, mu_var); ; # Compute the real likelihood ratio; llhr_calc = ROOT.RooFormulaVar(""llhr_calc"", ""x[0] / x[1]"", [gauss, uniform]); ; # Create the exact negative log likelihood functions for Gaussian model; nll_gauss = gauss.createNLL(obs_data); ROOT.SetOwnership(nll_gauss, True); ; # Create the learned pdf and NLL sum based on the learned likelihood ratio; pdf_learned = ROOT.RooWrapperPdf(""learned_pdf"", ""learned_pdf"", llhr_learned, True); ; nllr_learned = pdf_learned.createNLL(obs_data); ROOT.SetOwnership(nllr_learned, True); ; # Compute the morphed nll; morphing(ROOT.RooMomentMorphFuncND.Linear); nll_morph = workspace[""morph""].createNLL(obs_data); ROOT.SetOwnership(nll_morph, True); ; # Plot the negative logarithmic summed likelihood; frame1 = mu_var.frame(Title=""NLL of SBI vs. Morphing;mu;NLL"", Range=(2.2, 2.8)); nllr_learned.plotOn(frame1, LineColor=""kP6Blue"", ShiftToZero=True, Name=""learned""); nll_gauss.plotOn(frame1, LineColor=""kP6Blue+1"", ShiftToZero=True, Name=""gauss""); ROOT.RooAbsReal.setEvalErrorLoggingMode(""Ignore"") # Silence some warnings; nll_morph.plotOn(frame1, LineColor=""kP6Blue+2"", ShiftToZero=True, Name=""morphed""); ROOT.RooAbsReal.setEvalErrorLoggingMode(""PrintErrors""); ; # Plot the likelihood functions; frame2 = x_var.frame(Title=""Likelihood ratio r(x|#mu=2.5);x;p_{gauss}/p_{uniform}""); llhr_learned.plotOn(frame2, LineColor=""kP6Blue"", Name=""learned_ratio""); llhr_calc.plotOn(frame2, LineColor=""kP6Blue+1"", Name=""exact""); ; # Write the plots into one canvas to show, or into separate canvases for saving.; single_canvas = True; ; c = ROOT.TCanvas("""", """", 1200 if single_canvas else 600, 600); if single_canvas:; c.Divide(2); c.cd(1); ROOT.gPad.SetLeftMargin(0.15); frame1.G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf615__simulation__based__inference_8py.html:7383,log,logarithmic,7383,doc/master/rf615__simulation__based__inference_8py.html,https://root.cern,https://root.cern/doc/master/rf615__simulation__based__inference_8py.html,1,['log'],['logarithmic']
Testability,") - p->GetNargsOpt())) {; 2140 fun.fFound = true;; 2141 break;; 2142 }; 2143 }; 2144 }; 2145 if (!fun.fFound) {; 2146 // try to look into all the global functions in gROOT; 2147 TFunction *f;; 2148 {; 2149 R__LOCKGUARD(gROOTMutex);; 2150 f = (TFunction *)gROOT->GetListOfGlobalFunctions(true)->FindObject(fun.fName);; 2151 }; 2152 // if found a function with matching arguments; 2153 if (f && fun.GetNargs() <= f->GetNargs() && fun.GetNargs() >= f->GetNargs() - f->GetNargsOpt()) {; 2154 fun.fFound = true;; 2155 }; 2156 }; 2157 ; 2158 if (!fun.fFound) {; 2159 // ignore not found functions; 2160 if (gDebug); 2161 Info(""TFormula"", ""Could not find %s function with %d argument(s)"", fun.GetName(), fun.GetNargs());; 2162 fun.fFound = false;; 2163 }; 2164#endif; 2165 } else {; 2166 TFormula *old = nullptr;; 2167 {; 2168 R__LOCKGUARD(gROOTMutex);; 2169 old = (TFormula *)gROOT->GetListOfFunctions()->FindObject(gNamePrefix + fun.fName);; 2170 }; 2171 if (old) {; 2172 // we should not go here (this analysis is done before in ExtractFunctors); 2173 assert(false);; 2174 fun.fFound = true;; 2175 TString pattern = TString::Format(""{%s}"", fun.GetName());; 2176 TString replacement = old->GetExpFormula();; 2177 PreProcessFormula(replacement);; 2178 ExtractFunctors(replacement);; 2179 formula.ReplaceAll(pattern, replacement);; 2180 continue;; 2181 }; 2182 // looking for default variables defined in fVars; 2183 ; 2184 map<TString, TFormulaVariable>::iterator varsIt = fVars.find(fun.GetName());; 2185 if (varsIt != fVars.end()) {; 2186 ; 2187 TString name = (*varsIt).second.GetName();; 2188 Double_t value = (*varsIt).second.fValue;; 2189 ; 2190 AddVariable(name, value); // this set the cling variable; 2191 if (!fVars[name].fFound) {; 2192 ; 2193 fVars[name].fFound = true;; 2194 int varDim = (*varsIt).second.fArrayPos; // variable dimensions (0 for x, 1 for y, 2, for z); 2195 if (varDim >= fNdim) {; 2196 fNdim = varDim + 1;; 2197 ; 2198 // we need to be sure that all other variables are added w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFormula_8cxx_source.html:83133,assert,assert,83133,doc/master/TFormula_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFormula_8cxx_source.html,1,['assert'],['assert']
Testability,") . Definition at line 189 of file QuantFuncMathCore.cxx. ◆ landau_quantile_c(). double ROOT::Math::landau_quantile_c ; (; double ; z, . double ; xi = 1 . ). Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the landau distribution (landau_cdf_c). ; Implemented using landau_quantile; Parameters. zThe argument \(z\) ; xiThe width parameter \(\xi\) . Definition at line 396 of file QuantFuncMathCore.cxx. ◆ lognormal_quantile(). double ROOT::Math::lognormal_quantile ; (; double ; x, . double ; m, . double ; s . ). Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the lognormal distribution (lognormal_cdf). ; For detailed description see Mathworld. The implementation used is that of GSL. ; Definition at line 151 of file QuantFuncMathCore.cxx. ◆ lognormal_quantile_c(). double ROOT::Math::lognormal_quantile_c ; (; double ; x, . double ; m, . double ; s . ). Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the lognormal distribution (lognormal_cdf_c). ; For detailed description see Mathworld. The implementation used is that of GSL. ; Definition at line 143 of file QuantFuncMathCore.cxx. ◆ normal_quantile(). double ROOT::Math::normal_quantile ; (; double ; z, . double ; sigma . ). Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the normal (Gaussian) distribution (normal_cdf). ; For detailed description see Mathworld. It can also be evaluated using gaussian_quantile which will call the same implementation. It is implemented using the function ROOT::Math::Cephes::ndtri taken from Cephes. ; Definition at line 134 of file QuantFuncMathCore.cxx. ◆ normal_quantile_c(). double ROOT::Math::normal_quantile_c ; (; double ; z, . double ; sigma . ). Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the normal (Gaussian) distribution (normal_cdf_c). ; For detailed description see Mathworld. It can also be ev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__QuantFunc.html:18226,log,lognormal,18226,doc/master/group__QuantFunc.html,https://root.cern,https://root.cern/doc/master/group__QuantFunc.html,1,['log'],['lognormal']
Testability,") << ""Training sample: You are trying to mix events in alternate mode although the classes have different event numbers. This works but the alternation stops at the last event of the smaller class.""<<Endl;; 1388 }; 1389 if (tmpEventVector[Types::kTesting].at(cls).size() != tmpEventVector[Types::kTesting].at(0).size()){; 1390 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Testing sample: You are trying to mix events in alternate mode although the classes have different event numbers. This works but the alternation stops at the last event of the smaller class.""<<Endl;; 1391 }; 1392 }; 1393 typedef EventVector::iterator EvtVecIt;; 1394 EvtVecIt itEvent, itEventEnd;; 1395 ; 1396 // insert first class; 1397 Log() << kDEBUG << ""insert class 0 into training and test vector"" << Endl;; 1398 trainingEventVector->insert( trainingEventVector->end(), tmpEventVector[Types::kTraining].at(0).begin(), tmpEventVector[Types::kTraining].at(0).end() );; 1399 testingEventVector->insert( testingEventVector->end(), tmpEventVector[Types::kTesting].at(0).begin(), tmpEventVector[Types::kTesting].at(0).end() );; 1400 ; 1401 // insert other classes; 1402 EvtVecIt itTarget;; 1403 for( UInt_t cls = 1; cls < dsi.GetNClasses(); ++cls ){; 1404 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""insert class "" << cls << Endl;; 1405 // training vector; 1406 itTarget = trainingEventVector->begin() - 1; // start one before begin; 1407 // loop over source; 1408 for( itEvent = tmpEventVector[Types::kTraining].at(cls).begin(), itEventEnd = tmpEventVector[Types::kTraining].at(cls).end(); itEvent != itEventEnd; ++itEvent ){; 1409 // if( std::distance( itTarget, trainingEventVector->end()) < Int_t(cls+1) ) {; 1410 if( (trainingEventVector->end() - itTarget) < Int_t(cls+1) ) {; 1411 itTarget = trainingEventVector->end();; 1412 trainingEventVector->insert( itTarget, itEvent, itEventEnd ); // fill in the rest without mixing; 1413 break;; 1414 }else{; 1415 itTarget += cls+1;; 1416 trainingEvent",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:63236,test,testingEventVector,63236,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,2,['test'],['testingEventVector']
Testability,") \geq -1 \). ; Definition at line 334 of file SpecFuncMathMore.cxx. ◆ lambert_Wm1(). double ROOT::Math::lambert_Wm1 ; (; double ; x). Calculates the Lambert W function on branch -1. ; The Lambert W functions are defined to be the solution of the equation. \[ W(x) \exp(W(x)) = x \]. For detailed description see Mathworld or Wikipedia.; This function implements the Lambert W function on branch -1, which is real valued and defined for \( -1/e \seq x < 0 \) with \( W_{-1}(x) \seq -1 \). ; Definition at line 341 of file SpecFuncMathMore.cxx. ◆ legendre(). double ROOT::Math::legendre ; (; unsigned ; l, . double ; x . ). Calculates the Legendre polynomials. . \[ P_{l}(x) = \frac{1}{2^l l!} \frac{d^l}{dx^l} (x^2 - 1)^l \]. for \(l \geq 0, |x|\leq1\) in the Rodrigues representation. For detailed description see Mathworld. The implementation used is that of GSL. ; Definition at line 349 of file SpecFuncMathMore.cxx. ◆ lgamma(). double ROOT::Math::lgamma ; (; double ; x). Calculates the logarithm of the gamma function. ; The implementation used is that of Cephes from S. Moshier. ; Definition at line 74 of file SpecFuncMathCore.cxx. ◆ riemann_zeta(). double ROOT::Math::riemann_zeta ; (; double ; x). Calculates the Riemann zeta function. . \[ \zeta (x) = \left\{ \begin{array}{cl} \sum_{k=1}^{\infty}k^{-x} & \mbox{for $x > 1$} \\ 2^x \pi^{x-1} \sin{(\frac{1}{2}\pi x)} \Gamma(1-x) \zeta (1-x) & \mbox{for $x < 1$} \end{array} \right. \]. For detailed description see Mathworld. The implementation used is that of GSL.; CHECK WHETHER THE IMPLEMENTATION CALCULATES X<1 ; Definition at line 360 of file SpecFuncMathMore.cxx. ◆ sinint(). double ROOT::Math::sinint ; (; double ; x). Calculates the sine integral. . \[ Si(x) = - \int_{0}^{x} \frac{\sin t}{t} dt \]. For detailed description see Mathworld. The implementation used is that of CERNLIB, based on Y.L. Luke, The special functions and their approximations, v.II, (Academic Press, New York l969) 325-326. ; Definition at line 122 of file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__SpecFunc.html:25771,log,logarithm,25771,doc/master/group__SpecFunc.html,https://root.cern,https://root.cern/doc/master/group__SpecFunc.html,1,['log'],['logarithm']
Testability,") const overrideimplementation of the evaluation function. Must be implemented by derived classesDefinition TF1.cxx:209; TF1_EvalWrapper::EvalNMomDouble_t EvalNMom(Double_t x) constDefinition TF1.cxx:224; TF1_EvalWrapper::TF1_EvalWrapperTF1_EvalWrapper(TF1 *f, const Double_t *par, bool useAbsVal, Double_t n=1, Double_t x0=0)Definition TF1.cxx:190; TF1_EvalWrapper::fAbsValBool_t fAbsValDefinition TF1.cxx:233; TF11-Dim function classDefinition TF1.h:233; TF1::fFunctorstd::unique_ptr< TF1FunctorPointer > fFunctor! Functor object to wrap any C++ callable objectDefinition TF1.h:287; TF1::GetMinimumXvirtual Double_t GetMinimumX(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constReturns the X value corresponding to the minimum value of the function on the (xmin,...Definition TF1.cxx:1823; TF1::GetMinimumvirtual Double_t GetMinimum(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constReturns the minimum value of the function on the (xmin, xmax) interval.Definition TF1.cxx:1696; TF1::GetXmaxvirtual Double_t GetXmax() constDefinition TF1.h:584; TF1::ReleaseParametervirtual void ReleaseParameter(Int_t ipar)Release parameter number ipar during a fit operation.Definition TF1.cxx:3151; TF1::SetParErrorvirtual void SetParError(Int_t ipar, Double_t error)Set error for parameter number ipar.Definition TF1.cxx:3479; TF1::RejectPointstatic void RejectPoint(Bool_t reject=kTRUE)Static function to set the global flag to reject points the fgRejectPoint global flag is tested by al...Definition TF1.cxx:3683; TF1::EAddToListEAddToListAdd to list behavior.Definition TF1.h:240; TF1::EAddToList::kDefault@ kDefault; TF1::EAddToList::kNo@ kNo; TF1::EAddToList::kAdd@ kAdd; TF1::Derivativevirtual Double_t Derivative(Double_t x, Double_t *params=nullptr, Double_t epsilon=0.001) constReturns the first derivative of the function at point x, computed by Richardson's extrapolation metho...Definition TF1.c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:174133,log,logx,174133,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['log'],['logx']
Testability,") const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsTestStatistic::offset() const; virtual Double_tRooAbsTestStatistic::offsetCarry() const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsOptTestStatistic.html:20831,test,testArg,20831,root/html534/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html534/RooAbsOptTestStatistic.html,5,['test'],['testArg']
Testability,") const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tmaxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooLegendre.html:17243,test,testArg,17243,root/html528/RooLegendre.html,https://root.cern,https://root.cern/root/html528/RooLegendre.html,2,['test'],['testArg']
Testability,") const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tmaxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooLegendre.html:17235,test,testArg,17235,root/html530/RooLegendre.html,https://root.cern,https://root.cern/root/html530/RooLegendre.html,4,['test'],['testArg']
Testability,") const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); const RooArgList&lowList() const; virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooJeffreysPrior.html:21003,log,logEvalError,21003,root/html534/RooJeffreysPrior.html,https://root.cern,https://root.cern/root/html534/RooJeffreysPrior.html,3,['log'],['logEvalError']
Testability,") const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); const RooArgList&lowList() const; virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/PiecewiseInterpolation.html:17508,log,logEvalError,17508,root/html534/PiecewiseInterpolation.html,https://root.cern,https://root.cern/root/html534/PiecewiseInterpolation.html,3,['log'],['logEvalError']
Testability,") const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); MINIMIZER*minimizer(); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; RooAbsReal&nll(); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooProfileLL.html:17884,log,logEvalError,17884,root/html534/RooProfileLL.html,https://root.cern,https://root.cern/root/html534/RooProfileLL.html,1,['log'],['logEvalError']
Testability,") const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); RooMinimizer*minimizer(); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; RooAbsReal&nll(); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooProfileLL.html:17702,log,logEvalError,17702,root/html602/RooProfileLL.html,https://root.cern,https://root.cern/root/html602/RooProfileLL.html,2,['log'],['logEvalError']
Testability,") const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notif",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsAnaConvPdf.html:23736,log,logEvalError,23736,root/html534/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsAnaConvPdf.html,195,['log'],['logEvalError']
Testability,") const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tmustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsPdf.html:24921,log,logEvalError,24921,root/html534/RooAbsPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsPdf.html,3,['log'],['logEvalError']
Testability,") const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; RooAbsReal&nll(); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__RooBarlowBeestonLL.html:17417,log,logEvalError,17417,root/html534/RooStats__HistFactory__RooBarlowBeestonLL.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__RooBarlowBeestonLL.html,3,['log'],['logEvalError']
Testability,") const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Roo1DMomentMorphFunction.html:17492,log,logEvalError,17492,root/html534/Roo1DMomentMorphFunction.html,https://root.cern,https://root.cern/root/html534/Roo1DMomentMorphFunction.html,135,['log'],['logEvalError']
Testability,") const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tnumBins() const; Int_tRooAbsArg::numCaches() const; static Int_tRooAbsRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ParamHistFunc.html:17866,log,logEvalError,17866,root/html534/ParamHistFunc.html,https://root.cern,https://root.cern/root/html534/ParamHistFunc.html,3,['log'],['logEvalError']
Testability,") const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsReal&model() const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNumConvPdf.html:23366,log,logEvalError,23366,root/html534/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html534/RooNumConvPdf.html,3,['log'],['logEvalError']
Testability,") const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsReal&model() const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNumConvolution.html:19680,log,logEvalError,19680,root/html534/RooNumConvolution.html,https://root.cern,https://root.cern/root/html534/RooNumConvolution.html,3,['log'],['logEvalError']
Testability,") const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; virtual RooAbsGenContext*RooResolutionModel::modelGenContext(const RooAbsAnaConvPdf&, const RooArgSet&, const RooDataSet*, const RooArgSet*, Bool_t) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAddModel.html:22389,log,logEvalError,22389,root/html534/RooAddModel.html,https://root.cern,https://root.cern/root/html534/RooAddModel.html,9,['log'],['logEvalError']
Testability,") const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; virtual RooAbsGenContext*modelGenContext(const RooAbsAnaConvPdf& convPdf, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooTruthModel.html:21740,log,logEvalError,21740,root/html534/RooTruthModel.html,https://root.cern,https://root.cern/root/html534/RooTruthModel.html,3,['log'],['logEvalError']
Testability,") const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; virtual RooAbsGenContext*modelGenContext(const RooAbsAnaConvPdf&, const RooArgSet&, const RooDataSet*, const RooArgSet*, Bool_t) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooResolutionModel.html:23498,log,logEvalError,23498,root/html534/RooResolutionModel.html,https://root.cern,https://root.cern/root/html534/RooResolutionModel.html,3,['log'],['logEvalError']
Testability,") const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsReal*mean(); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* ds",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsMoment.html:17473,log,logEvalError,17473,root/html534/RooAbsMoment.html,https://root.cern,https://root.cern/root/html534/RooAbsMoment.html,3,['log'],['logEvalError']
Testability,") const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tmaxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCBShape.html:20988,log,logEvalError,20988,root/html534/RooCBShape.html,https://root.cern,https://root.cern/root/html534/RooCBShape.html,9,['log'],['logEvalError']
Testability,") const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tmaxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooHistFunc.html:17645,log,logEvalError,17645,root/html534/RooHistFunc.html,https://root.cern,https://root.cern/root/html534/RooHistFunc.html,9,['log'],['logEvalError']
Testability,") const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; RooStats::HybridCalculatorHybridCalculator(const char* name = 0); RooStats::HybridCalculatorHybridCalculator(const RooStats::HybridCalculator&); RooStats::HybridCalculatorHybridCalculator(RooAbsData& data, const RooStats::ModelConfig& sb_model, const RooStats::ModelConfig& b_model, bool GenerateBinned = false, int testStatistics = 1, int ntoys = 1000); RooStats::HybridCalculatorHybridCalculator(RooAbsPdf& sb_model, RooAbsPdf& b_model, RooArgList& observables, const RooArgSet* nuisance_parameters = 0, RooAbsPdf* prior_pdf = 0, bool GenerateBinned = false, int testStatistics = 1, int ntoys = 1000); RooStats::HybridCalculatorHybridCalculator(RooAbsData& data, RooAbsPdf& sb_model, RooAbsPdf& b_model, const RooArgSet* nuisance_parameters = 0, RooAbsPdf* prior_pdf = 0, bool GenerateBinned = false, int testStatistics = 1, int ntoys = 1000); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::ope",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HybridCalculator.html:5512,test,testStatistics,5512,root/html526/RooStats__HybridCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__HybridCalculator.html,1,['test'],['testStatistics']
Testability,") const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; RooArgListcreateStatConstraintTerms(RooWorkspace* proto, vector<string>& constraintTerms, ParamHistFunc& paramHist, TH1* uncertHist, RooStats::HistFactory::EstimateSummary::ConstraintType type, Double_t minSigma); voidCustomize(RooWorkspace* proto, const char* pdfNameChar, map<string,string> renameMap); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidEditSyst(RooWorkspace* proto, const char* pdfNameChar, map<string,double> gammaSyst, map<string,double> uniformSyst, map<string,double> logNormSyst, map<string,double> noSyst); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; stringFilePrefixStr(string); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFitModel(RooWorkspace*, string, string, string, bool = false); voidFormatFrameForLikelihood(RooPlot* frame, string XTitle = string(""#sigma / #sigma_{SM}""), string YTitle = string(""-log likelihood"")); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__HistFactory__HistoToWorkspaceFactoryFast.html:2320,log,logNormSyst,2320,root/html532/RooStats__HistFactory__HistoToWorkspaceFactoryFast.html,https://root.cern,https://root.cern/root/html532/RooStats__HistFactory__HistoToWorkspaceFactoryFast.html,1,['log'],['logNormSyst']
Testability,") const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tRooAbsArg::isCloneOf(const RooAbsArg& other) const; Bool_tRooAbsArg::isConstant() const; virtual Bool_tRooAbsArg::isDerived() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; virtual Bool_tisValid() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); const Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooRealIntegral.html:16129,log,logEvalError,16129,root/html528/RooRealIntegral.html,https://root.cern,https://root.cern/root/html528/RooRealIntegral.html,2,['log'],['logEvalError']
Testability,") const; voidclearValueAndShapeDirty() const; voidclearValueDirty() const; TIterator*clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*Clone(const char* newname = 0) const; virtual RooAbsArg*cloneTree(const char* newname = 0) const; virtual Int_tCompare(const TObject* other) const; virtual voidconstOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tcrc32(const char* data); virtual RooAbsArg*createFundamental(const char* newname = 0) const; virtual Int_tdefaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tdependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tdependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tdependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tdependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tdependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tdependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsArg.html:3428,test,testArg,3428,root/html532/RooAbsArg.html,https://root.cern,https://root.cern/root/html532/RooAbsArg.html,1,['test'],['testArg']
Testability,") const;  ; virtual Bool_t GetPointsOnFacet (Int_t index, Int_t npoints, Double_t *array) const;  ; Bool_t GetPointsOnSegments (Int_t npoints, Double_t *array) const override;  ; Bool_t IsCylType () const override;  ; virtual Bool_t IsNullBox () const;  ; Bool_t IsValidBox () const override;  ; Double_t Safety (const Double_t *point, Bool_t in=kTRUE) const override;  ; void Safety_v (const Double_t *points, const Bool_t *inside, Double_t *safe, Int_t vecsize) const override;  ; void SetBoxDimensions (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ; void SetBoxPoints (Double_t *points) const;  ; void SetDimensions (Double_t *param) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoShape;  TGeoShape ();  Default constructor. ;  ;  TGeoShape (const char *name);  Default constructor. ;  ;  ~TGeoShape () override;  Destructor. ;  ; virtual void AfterStreamer ();  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Test for shape navigation methods. ;  ; virtual void ClearThreadData () const;  ; virtual void CreateThreadData (Int_t);  ; void Draw (Option_t *option="""") override;  Draw this shape. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute mouse actions on this shape. ;  ; Int_t GetId () const;  ; const char * GetName () const override;  Get the shape name. ;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; void InvertShapeBit (UInt_t f);  ; virtual Bool_t IsAssembly () const;  ; virtual Bool_t IsComposite () const;  ; virtual Bool_t IsReflected () const;  ; Bool_t IsRunTimeShape () const;  ; Bool_t IsValid () const;  ; virtual Bool_t IsVecGeom () const;  ; void Paint (Option_t *option="""") override;  Paint this shape. ;  ; void ResetShapeBit (UInt_t f);  ; void SetId (Int_t id);  ; void SetRuntime (Bool_t flag=kTRUE);  ; void SetShapeBit (UInt_t f);  ; void SetShapeBit (UInt_t f, Bool_t se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTessellated.html:8765,test,testNo,8765,doc/master/classTGeoTessellated.html,https://root.cern,https://root.cern/doc/master/classTGeoTessellated.html,1,['test'],['testNo']
Testability,") const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::ostream &os, const char *indent="""", const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on given ostream. ;  ; virtual void printCompactTreeHook (std::ostream &os",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinWidthFunction.html:25902,test,testArg,25902,doc/master/classRooBinWidthFunction.html,https://root.cern,https://root.cern/doc/master/classRooBinWidthFunction.html,122,['test'],['testArg']
Testability,") const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::ostream &os, const char *indent="""", const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on given ostream. ;  ; void printComponentTree (const char *indent="""", con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumConvolution.html:28702,test,testArg,28702,doc/master/classRooNumConvolution.html,https://root.cern,https://root.cern/doc/master/classRooNumConvolution.html,1,['test'],['testArg']
Testability,") const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::ostream &os, const char *indent="""", const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on given ostream. ;  ; virtual void printCompactTreeHook (std::ostream &os, const char *ind="""");  Hook function interface for object to insert additional information when",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction1Binding.html:26020,test,testArg,26020,doc/master/classRooCFunction1Binding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction1Binding.html,15,['test'],['testArg']
Testability,") const;  Return the number of entries filled so far. ;  ; bool IsStagedClusterCommittingEnabled () const;  . Private Member Functions;  RNTupleFillContext (const RNTupleFillContext &)=delete;  ;  RNTupleFillContext (std::unique_ptr< RNTupleModel > model, std::unique_ptr< Internal::RPageSink > sink);  ; RNTupleFillContext & operator= (const RNTupleFillContext &)=delete;  . Private Attributes; NTupleSize_t fLastFlushed = 0;  ; std::size_t fMaxUnzippedClusterSize;  Limit for committing cluster no matter the other tunables. ;  ; Detail::RNTupleMetrics fMetrics;  ; std::unique_ptr< RNTupleModel > fModel;  Needs to be destructed before fSink. ;  ; std::uint64_t fNBytesFilled = 0;  The total number of bytes filled into all the so far committed clusters, i.e. ;  ; std::uint64_t fNBytesFlushed = 0;  The total number of bytes written to storage (i.e., after compression) ;  ; NTupleSize_t fNEntries = 0;  ; std::unique_ptr< Internal::RPageSink > fSink;  ; bool fStagedClusterCommitting = false;  Whether to enable staged cluster committing, where only an explicit call to CommitStagedClusters() will logically append the clusters to the RNTuple. ;  ; std::vector< Internal::RPageSink::RStagedCluster > fStagedClusters;  Vector of currently staged clusters. ;  ; std::size_t fUnzippedClusterSize = 0;  Keeps track of the number of bytes written into the current cluster. ;  ; std::size_t fUnzippedClusterSizeEst;  Estimator of uncompressed cluster size, taking into account the estimated compression ratio. ;  . Friends; class RNTupleParallelWriter;  ; class RNTupleWriter;  . #include <ROOT/RNTupleFillContext.hxx>; Constructor & Destructor Documentation. ◆ RNTupleFillContext() [1/2]. ROOT::Experimental::RNTupleFillContext::RNTupleFillContext ; (; std::unique_ptr< RNTupleModel > ; model, . std::unique_ptr< Internal::RPageSink > ; sink . ). private . Definition at line 29 of file RNTupleFillContext.cxx. ◆ RNTupleFillContext() [2/2]. ROOT::Experimental::RNTupleFillContext::RNTupleFillContext ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleFillContext.html:3065,log,logically,3065,doc/master/classROOT_1_1Experimental_1_1RNTupleFillContext.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleFillContext.html,1,['log'],['logically']
Testability,") consthow often is the test data testedDefinition NeuralNet.h:768; TMVA::DNN::Settings::endTestCyclevirtual void endTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:805; TMVA::DNN::Settings::testIterationvirtual void testIteration()callback for monitoring and logggingDefinition NeuralNet.h:806; TMVA::DNN::Settings::hasConvergedvirtual bool hasConverged(double testError)has this training converged already?Definition NeuralNet.cxx:485; TMVA::DNN::Settings::cyclevirtual void cycle(double progress, TString text)Definition NeuralNet.h:799; TMVA::DNN::Settings::endTrainCyclevirtual void endTrainCycle(double)callback for monitoring and loggingDefinition NeuralNet.h:788; TMVA::DNN::Settings::dropFractionsconst std::vector< double > & dropFractions() constDefinition NeuralNet.h:762; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x)for monitoringDefinition NeuralNet.h:821; TMVA::DNN::Settings::testSamplevirtual void testSample(double, double, double, double)virtual function to be used for monitoring (callback)Definition NeuralNet.h:781; TMVA::DNN::Settings::plotvoid plot(std::string histoName, std::string options, int pad, EColor color)for monitoringDefinition NeuralNet.h:823; TMVA::DNN::Settings::startTrainCyclevirtual void startTrainCycle()Definition NeuralNet.h:782; TMVA::DNN::Settings::convergenceStepssize_t convergenceSteps() consthow many steps until training is deemed to have convergedDefinition NeuralNet.h:766; TMVA::DNN::Settings::factorWeightDecaydouble factorWeightDecay() constget the weight-decay factorDefinition NeuralNet.h:769; TMVA::DNN::Settings::maxConvergenceCountsize_t maxConvergenceCount() constreturns the max convergence count so farDefinition NeuralNet.h:828; TMVA::DNN::Settings::padsvoid pads(int numPads)preparation for monitoringDefinition NeuralNet.h:818; TMVA::DNN::Settings::batchSizesize_t batchSize() constmini-batch sizeDefinition NeuralNet.h:767; TMVA::DNN::Settings::computeResultvirtual void computeR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:68251,test,testSamplevirtual,68251,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,2,['test'],"['testSample', 'testSamplevirtual']"
Testability,") controls the maximum number; of iteration of the Brent algorithm; If the flag logx is set the grid search is done in log step size; This is done automatically if the log scale is set in the current Pad. NOTE: see also TF1::GetMaximumX and TF1::GetX. Double_t GetMaximumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.0E-10, Int_t maxiter = 100, Bool_t logx = false) const; Return the X value corresponding to the maximum value of the function; Method:; First, the grid search is used to bracket the maximum; with the step size = (xmax-xmin)/fNpx.; This way, the step size can be controlled via the SetNpx() function.; If the function is unimodal or if its extrema are far apart, setting; the fNpx to a small value speeds the algorithm up many times.; Then, Brent's method is applied on the bracketed interval; epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; of iteration of the Brent algorithm; If the flag logx is set the grid search is done in log step size; This is done automatically if the log scale is set in the current Pad. NOTE: see also TF1::GetX. Double_t GetMinimum(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.0E-10, Int_t maxiter = 100, Bool_t logx = false) const; Returns the minimum value of the function on the (xmin, xmax) interval; Method:; First, the grid search is used to bracket the maximum; with the step size = (xmax-xmin)/fNpx. This way, the step size; can be controlled via the SetNpx() function. If the function is; unimodal or if its extrema are far apart, setting the fNpx to; a small value speeds the algorithm up many times.; Then, Brent's method is applied on the bracketed interval; epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; of iteration of the Brent algorithm; If the flag logx is set the grid search is done in lo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TF1.html:43842,log,logx,43842,root/html602/TF1.html,https://root.cern,https://root.cern/root/html602/TF1.html,6,['log'],"['log', 'logx']"
Testability,") function, print the sum of all event sizes. This sum shows you the real power of a TTree: even though you can analyze large amounts of data (our example tree with 22MB is tiny!) ROOT needs just a few MB of your RAM, no matter how many events you analyze. Imagine what it would be like if you had to load all data into memory, e.g. using a simple vector!; void EventSelector::Terminate(); {; // ... int sizeInMB = fTotalDataSize/1024/1024;; printf(""Total size of all events: %d MB\n"", sizeInMB);; }. If, for any reason, you don't manage to get it to work, you can download a working selector file here: CountEventSelector.C; Here again, if you are using ROOT via ssh, you have to download the file with wget from your remote directory:; wget http://root-mirror.github.io/training/intro/CountEventSelector.C; Note: You will have to use it that way:; EventTree->Process(""CountEventSelector.C""). . ‹ Compiling Your Code (also known as ACLiC); up; Histogramming in a Selector ›. Navigate through this book; Meet a TTree; Accessing a TTree With a TBrowser; Using TTree::Draw() to access a TTree; TTree and Its Data; Using a Macro to Read a TTree; Histogramming; Fit Panel; Compiling Your Code (also known as ACLiC); Accessing a TTree With a TSelector; Histogramming in a Selector; Using a TSelector with PROOF; The End. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/accessing-ttree-tselector.html:9751,test,tests,9751,d/accessing-ttree-tselector.html,https://root.cern,https://root.cern/d/accessing-ttree-tselector.html,1,['test'],['tests']
Testability,") member. ; Definition at line 1286 of file TUnixSystem.cxx. ◆ Chmod(). int TUnixSystem::Chmod ; (; const char * ; file, . UInt_t ; mode . ). overridevirtual . Set the file permission bits. Returns -1 in case or error, 0 otherwise. ; Reimplemented from TSystem.; Definition at line 1893 of file TUnixSystem.cxx. ◆ Class(). static TClass * TUnixSystem::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TUnixSystem::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TUnixSystem::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 219 of file TUnixSystem.h. ◆ CloseConnection(). void TUnixSystem::CloseConnection ; (; int ; sock, . Bool_t ; force = kFALSE . ). overridevirtual . Close socket. ; Reimplemented from TSystem.; Definition at line 3298 of file TUnixSystem.cxx. ◆ Closelog(). void TUnixSystem::Closelog ; (; ). overridevirtual . Close connection to system log daemon. ; Reimplemented from TSystem.; Definition at line 2663 of file TUnixSystem.cxx. ◆ ClosePipe(). int TUnixSystem::ClosePipe ; (; FILE * ; pipe). overridevirtual . Close the pipe. ; Reimplemented from TSystem.; Definition at line 2171 of file TUnixSystem.cxx. ◆ ConnectService(). int TUnixSystem::ConnectService ; (; const char * ; server, . int ; port, . int ; tcpwindowsize, . const char * ; protocol = ""tcp"" . ). Connect to service servicename on server servername. ; Definition at line 3201 of file TUnixSystem.cxx. ◆ CopyFile(). int TUnixSystem::CopyFile ; (; const char * ; f, . const char * ; t, . Bool_t ; overwrite = kFALSE . ). overridevirtual . Copy a file. ; If overwrite is true and file already exists the file will be overwritten. Returns 0 when successful, -1 in case of file open failure, -2 in case the file already exists and overwrite was false and -3 in case of error during copy. ; Reimplemented from TSystem.; Definition at line 1598 of file TUnixSystem.cxx. ◆",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnixSystem.html:43241,log,log,43241,doc/master/classTUnixSystem.html,https://root.cern,https://root.cern/doc/master/classTUnixSystem.html,1,['log'],['log']
Testability,") override;  Save axis attributes as C++ statement(s) on output stream out. ;  ; virtual void Set (Int_t nbins, const Double_t *xbins);  Initialize axis with variable bins. ;  ; virtual void Set (Int_t nbins, const Float_t *xbins);  Initialize axis with variable bins. ;  ; virtual void Set (Int_t nbins, Double_t xmin, Double_t xmax);  Initialize axis with fix bins. ;  ; void SetAlphanumeric (Bool_t alphanumeric=kTRUE);  Set axis alphanumeric. ;  ; virtual void SetBinLabel (Int_t bin, const char *label);  Set label for bin. ;  ; void SetCanExtend (Bool_t canExtend);  ; void SetDecimals (Bool_t dot=kTRUE);  Sets the decimals flag By default, blank characters are stripped, and then the label is correctly aligned. ;  ; virtual void SetDefaults ();  Set axis default values (from TStyle) ;  ; void SetDrawOption (Option_t *="""") override;  Set drawing option for object. ;  ; virtual void SetLimits (Double_t xmin, Double_t xmax);  ; void SetMoreLogLabels (Bool_t more=kTRUE);  Set the kMoreLogLabels bit flag When this option is selected more labels are drawn when in log scale and there is a small number of decades (<3). ;  ; void SetNoAlphanumeric (Bool_t noalpha=kTRUE);  ; void SetNoExponent (Bool_t noExponent=kTRUE);  Set the NoExponent flag By default, an exponent of the form 10^N is used when the label value are either all very small or very large. ;  ; virtual void SetParent (TObject *obj);  ; virtual void SetRange (Int_t first=0, Int_t last=0);  Set the viewing range for the axis using bin numbers. ;  ; virtual void SetRangeUser (Double_t ufirst, Double_t ulast);  Set the viewing range for the axis from ufirst to ulast (in user coordinates, that is, the ""natural"" axis coordinates). ;  ; virtual void SetTicks (Option_t *option=""+"");  Set ticks orientation. ;  ; virtual void SetTimeDisplay (Int_t value);  ; virtual void SetTimeFormat (const char *format="""");  Change the format used for time plotting. ;  ; virtual void SetTimeOffset (Double_t toffset, Option_t *option=""loca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAxis.html:7588,log,log,7588,doc/master/classTAxis.html,https://root.cern,https://root.cern/doc/master/classTAxis.html,1,['log'],['log']
Testability,") overrideTGeoPaintervirtual; CheckShape(TGeoShape *shape, Int_t testNo, Int_t nsamples, Option_t *option) overrideTGeoPaintervirtual; Class()TVirtualGeoPainterstatic; Class_Name()TVirtualGeoPainterstatic; Class_Version()TVirtualGeoPainterinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *="""")TObjectinlinevirtual; ClearVisibleVolumes()TGeoPainterprotected; Clone(const char *newname="""") constTObjectvirtual; Compare(const TObject *obj) constTObjectvirtual; Copy(TObject &object) constTObjectvirtual; CountNodes(TGeoVolume *vol, Int_t level) constTGeoPainter; CountVisibleN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPainter-members.html:1480,test,testNo,1480,doc/master/classTGeoPainter-members.html,https://root.cern,https://root.cern/doc/master/classTGeoPainter-members.html,1,['test'],['testNo']
Testability,") {; 2675 if (eyh != 0. && DrawYUp) gPad->PaintLine(x,yup1,x,yup2);; 2676 if (eyl != 0. && DrawYLow) gPad->PaintLine(x,ylow1,x,ylow2);; 2677 }; 2678 if (endLines) {; 2679 if (braticks) {; 2680 if (eyh != 0. && yup2 == yup && DrawYUp) {; 2681 xb[0] = x-tx; yb[0] = yup2-ty;; 2682 xb[1] = x-tx; yb[1] = yup2;; 2683 xb[2] = x+tx; yb[2] = yup2;; 2684 xb[3] = x+tx; yb[3] = yup2-ty;; 2685 gPad->PaintPolyLine(4, xb, yb);; 2686 }; 2687 if (eyl != 0. && ylow2 == ylow && DrawYLow) {; 2688 xb[0] = x-tx; yb[0] = ylow2+ty;; 2689 xb[1] = x-tx; yb[1] = ylow2;; 2690 xb[2] = x+tx; yb[2] = ylow2;; 2691 xb[3] = x+tx; yb[3] = ylow2+ty;; 2692 gPad->PaintPolyLine(4, xb, yb);; 2693 }; 2694 } else {; 2695 if (eyh != 0. && yup2 == yup && DrawYUp) gPad->PaintLine(x-tx,yup2,x+tx,yup2);; 2696 if (eyl != 0. && ylow2 == ylow && DrawYLow) gPad->PaintLine(x-tx,ylow2,x+tx,ylow2);; 2697 }; 2698 }; 2699 }; 2700 }; 2701 }; 2702 if (!brackets && !axis) PaintGraphSimple(theGraph, option);; 2703 gPad->ResetBit(TGraph::kClipFrame);; 2704 ; 2705 if (option3) {; 2706 Int_t logx = gPad->GetLogx();; 2707 Int_t logy = gPad->GetLogy();; 2708 gPad->SetLogx(0);; 2709 gPad->SetLogy(0);; 2710 if (option4) PaintGraph(theGraph, 2*theNpoints, xline.data(), yline.data(),""FC"");; 2711 else PaintGraph(theGraph, 2*theNpoints, xline.data(), yline.data(),""F"");; 2712 gPad->SetLogx(logx);; 2713 gPad->SetLogy(logy);; 2714 }; 2715}; 2716 ; 2717////////////////////////////////////////////////////////////////////////////////; 2718/// [Paint this TGraphMultiErrors with its current attributes.](\ref GrP3); 2719 ; 2720void TGraphPainter::PaintGraphMultiErrors(TGraph *theGraph, Option_t *option); 2721{; 2722 if (!theGraph->InheritsFrom(TGraphMultiErrors::Class())) {; 2723 PaintHelper(theGraph, option);; 2724 return;; 2725 }; 2726 ; 2727 auto tg = (TGraphMultiErrors *)theGraph;; 2728 ; 2729 Int_t NYErrors = tg->GetNYErrors();; 2730 if (NYErrors <= 0) {; 2731 PaintGraphSimple(tg, option);; 2732 return;; 2733 }; 2734 ; 2735 TString tsOpt = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:96557,log,logx,96557,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,2,['log'],"['logx', 'logy']"
Testability,")%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 524 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [4/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 318 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [5/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:32090,test,test,32090,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['test'],['test']
Testability,")); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TTreeCacheUnzip ();  ;  TTreeCacheUnzip (TTree *tree, Int_t buffersize=0);  Constructor. ;  ;  ~TTreeCacheUnzip () override;  Destructor. (in general called by the TFile destructor) ;  ; Int_t AddBranch (const char *branch, bool subbranches=false) override;  Add a branch to the list of branches to be stored in the cache this function is called by TBranch::GetBasket Returns: ;  ; Int_t AddBranch (TBranch *b, bool subbranches=false) override;  Add a branch to the list of branches to be stored in the cache this function is called by TBranch::GetBasket Returns: ;  ; Int_t CreateTasks ();  We create a TTaskGroup and asynchronously maps each group of baskets(> 100 kB in total) to a task. ;  ; bool FillBuffer () override;  Fill the cache buffer with the branches in the cache. ;  ; Int_t GetNFound ();  ; Int_t GetNMissed ();  ; Int_t GetNUnzip ();  ; Int_t GetRecordHeader (char *buf, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header from the buffer buf. ;  ; Int_t GetUnzipBuffer (char **buf, Long64_t pos, Int_t len, bool *free) override;  We try to read a buffer that has already been unzipped Returns -1 in case of read failure, 0 in case it's not in the cache and n>0 in case read from cache (number of bytes copied). ;  ; Int_t GetUnzipGroupSize ();  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print cache statistics. ;  ; Int_t ReadBufferExt (char *buf, Long64_t pos, Int_t len, Int_t &loc) override;  ; void ResetCache () override;  This will delete the list of buffers that are in the unzipping cache and will reset certain values in the cache. ;  ; Int_t SetBufferSize (Int_t buffersize) override;  Change the underlying buffer size of the cache. ;  ; void SetEntryRange (Long64_t emin, Long64_t emax) override;  Set the minimum and maximum entry number to be processed this information h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCacheUnzip.html:2441,log,logical,2441,doc/v632/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/v632/classTTreeCacheUnzip.html,1,['log'],['logical']
Testability,")); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TTreeCacheUnzip ();  ;  TTreeCacheUnzip (TTree *tree, Int_t buffersize=0);  Constructor. ;  ;  ~TTreeCacheUnzip () override;  Destructor. (in general called by the TFile destructor) ;  ; Int_t AddBranch (const char *branch, bool subbranches=false) override;  Add a branch to the list of branches to be stored in the cache this function is called by TBranch::GetBasket Returns: ;  ; Int_t AddBranch (TBranch *b, bool subbranches=false) override;  Add a branch to the list of branches to be stored in the cache this function is called by TBranch::GetBasket Returns: ;  ; Int_t CreateTasks ();  We create a TTaskGroup and asynchronously maps each group of baskets(> 100 kB in total) to a task. ;  ; bool FillBuffer () override;  Fill the cache buffer with the branches in the cache. ;  ; Int_t GetNFound ();  ; Int_t GetNMissed ();  ; Int_t GetNUnzip ();  ; Int_t GetRecordHeader (char *buf, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header from the buffer buf. ;  ; Int_t GetUnzipBuffer (char **buf, Long64_t pos, Int_t len, bool *free) override;  We try to read a buffer that has already been unzipped Returns -1 in case of read failure, 0 in case it's not in the cache and n>0 in case read from cache (number of bytes copied). ;  ; Int_t GetUnzipGroupSize ();  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print cache statistics. ;  ; Int_t ReadBufferExt (char *buf, Long64_t pos, Int_t len, Int_t &loc) override;  ; void ResetCache () override;  This will delete the list of buffers that are in the unzipping cache and will reset certain values in the cache. ;  ; Int_t SetBufferSize (Long64_t buffersize) override;  Change the underlying buffer size of the cache. ;  ; void SetEntryRange (Long64_t emin, Long64_t emax) override;  Set the minimum and maximum entry number to be processed this informatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCacheUnzip.html:2442,log,logical,2442,doc/master/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/master/classTTreeCacheUnzip.html,1,['log'],['logical']
Testability,"));. Deprecation of legacy iterators; The following methods related to the RooFit legacy iterators are deprecated and will be removed in ROOT 6.34. They should be replaced with the suitable STL-compatible interfaces, or you can just use range-based loops:. RooAbsArg::clientIterator(): use clients() and begin(), end() or range-based loops instead; RooAbsArg::valueClientIterator(): use valueClients(); RooAbsArg::shapeClientIterator(): use shapeClients(); RooAbsArg::serverIterator(): use servers(); RooAbsArg::valueClientMIterator(): use valueClients(); RooAbsArg::shapeClientMIterator(): use shapeClients(); RooAbsArg::serverMIterator(): use servers(); RooAbsCollection::createIterator(): use begin(), end() and range-based for loops; RooAbsCollection::iterator(): same; RooAbsCollection::fwdIterator(): same; RooWorkspace::componentIterator(): use RooWorkspace::components() with range-based loop. Deprecation of legacy test statistics classes in public interface; Instantiating the following classes and even including their header files is deprecated, and the headers will be removed in ROOT 6.34:. RooAbsTestStatistic; RooAbsOptTestStatistic; RooNLLVar; RooChi2Var; RooXYChi2Var. Please use the higher-level functions RooAbsPdf::createNLL() and RooAbsPdf::createChi2() if you want to create objects that represent test statistics.; Change of RooParamHistFunc; The RooParamHistFunc didn’t take any observable RooRealVar as constructor argument. It assumes as observable the internal variables in the passed RooDataHist. This means it was in most contexts unusable, because the input can’t be changed, other than loading a different bin in the dataset.; Furthermore, there was actually a constructor that took a RooAbsArg x, but it was simply ignored.; To fix all these problems, the existing constructors were replaced by a new one that takes the observable explicitly.; Since the old constructors resulted in wrong computation graphs that caused trouble with the new CPU evaluation backend, the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:13203,test,test,13203,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['test'],['test']
Testability,"));; 734 trainPattern.back().addInput(1.0);; 735 } else {; 736 const std::vector<Float_t>& targets = event->GetTargets ();; 737 trainPattern.push_back(Pattern(values.begin(),; 738 values.end(),; 739 targets.begin(),; 740 targets.end(),; 741 event->GetWeight ()));; 742 trainPattern.back ().addInput (1.0); // bias node; 743 }; 744 }; 745 ; 746 for (auto &event : eventCollectionTesting) {; 747 const std::vector<Float_t>& values = event->GetValues();; 748 if (fAnalysisType == Types::kClassification) {; 749 double outputValue = event->GetClass () == 0 ? 0.9 : 0.1;; 750 testPattern.push_back(Pattern (values.begin(),; 751 values.end(),; 752 outputValue,; 753 event->GetWeight()));; 754 testPattern.back().addInput(1.0);; 755 } else if (fAnalysisType == Types::kMulticlass) {; 756 std::vector<Float_t> oneHot(DataInfo().GetNClasses(), 0.0);; 757 oneHot[event->GetClass()] = 1.0;; 758 testPattern.push_back(Pattern (values.begin(), values.end(),; 759 oneHot.cbegin(), oneHot.cend(),; 760 event->GetWeight()));; 761 testPattern.back().addInput(1.0);; 762 } else {; 763 const std::vector<Float_t>& targets = event->GetTargets ();; 764 testPattern.push_back(Pattern(values.begin(),; 765 values.end(),; 766 targets.begin(),; 767 targets.end(),; 768 event->GetWeight ()));; 769 testPattern.back ().addInput (1.0); // bias node; 770 }; 771 }; 772 ; 773 TMVA::DNN::Net net;; 774 std::vector<double> weights;; 775 ; 776 net.SetIpythonInteractive(fInteractive, &fExitFromTraining, &fIPyMaxIter, &fIPyCurrentIter);; 777 ; 778 net.setInputSize(fNet.GetInputWidth() + 1);; 779 net.setOutputSize(fNet.GetOutputWidth() + 1);; 780 ; 781 for (size_t i = 0; i < fNet.GetDepth(); i++) {; 782 EActivationFunction f = fNet.GetLayer(i).GetActivationFunction();; 783 EnumFunction g = EnumFunction::LINEAR;; 784 switch(f) {; 785 case EActivationFunction::kIdentity: g = EnumFunction::LINEAR; break;; 786 case EActivationFunction::kRelu: g = EnumFunction::RELU; break;; 787 case EActivationFunction::kSigmoid: g = EnumFunctio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:26982,test,testPattern,26982,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['test'],['testPattern']
Testability,"), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLTH3Composition.html:14086,test,test,14086,doc/master/classTGLTH3Composition.html,https://root.cern,https://root.cern/doc/master/classTGLTH3Composition.html,15,['test'],['test']
Testability,"). Bool_t TColor::SaveColor ; (; std::ostream & ; out, . Int_t ; ci . ). static . Save a color with index > 228 as a C++ statement(s) on output stream out. ; Return kFALSE if color not saved in the output stream ; Definition at line 2543 of file TColor.cxx. ◆ SetAlpha(). virtual void TColor::SetAlpha ; (; Float_t ; a). inlinevirtual . Definition at line 70 of file TColor.h. ◆ SetColorThreshold(). void TColor::SetColorThreshold ; (; Float_t ; t). static . This method specifies the color threshold used by GetColor to retrieve a color. ; Parameters. [in]tColor threshold. By default is equal to 1./31. or 1./255. depending on the number of available color planes. When GetColor is called, it scans the defined colors and compare them to the requested color. If the Red Green and Blue values passed to GetColor are Rr Gr Br and Rd Gd Bd the values of a defined color. These two colors are considered equal if (abs(Rr-Rd) < t & abs(Br-Bd) < t & abs(Br-Bd) < t). If this test passes, the color defined by Rd Gd Bd is returned by GetColor.; To make sure GetColor will return a color having exactly the requested R G B values it is enough to specify a nul : TColor::SetColorThreshold(0.);; TColor::SetColorThresholdstatic void SetColorThreshold(Float_t t)This method specifies the color threshold used by GetColor to retrieve a color.Definition TColor.cxx:1987; To reset the color threshold to its default value it is enough to do: TColor::SetColorThreshold(-1.);. Definition at line 1987 of file TColor.cxx. ◆ SetGrayscale(). void TColor::SetGrayscale ; (; Bool_t ; set = kTRUE). static . Set whether all colors should return grayscale values. ; Definition at line 2592 of file TColor.cxx. ◆ SetName(). void TColor::SetName ; (; const char * ; name). overridevirtual . Set the color name and change also the name of the ""dark"" and ""bright"" associated colors if they exist. ; Reimplemented from TNamed.; Definition at line 1826 of file TColor.cxx. ◆ SetPalette(). void TColor::SetPalette ; (; Int_t ; n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTColor.html:65826,test,test,65826,doc/master/classTColor.html,https://root.cern,https://root.cern/doc/master/classTColor.html,1,['test'],['test']
Testability,"). Int_t TProofLite::Remove ; (; const char * ; ref, . Bool_t ; all . ). Handle remove request. ; Definition at line 2340 of file TProofLite.cxx. ◆ RemoveDataSet(). Int_t TProofLite::RemoveDataSet ; (; const char * ; uri, . const char * ; = 0 . ). overridevirtual . Remove the specified dataset from the PROOF cluster. ; Files are not deleted. ; Reimplemented from TProof.; Definition at line 2104 of file TProofLite.cxx. ◆ RequestStagingDataSet(). Bool_t TProofLite::RequestStagingDataSet ; (; const char * ; dataset). overridevirtual . Allows users to request staging of a particular dataset. ; Requests are saved in a special dataset repository and must be honored by the endpoint. This is the special PROOF-Lite re-implementation of the TProof function and includes code originally implemented in TProofServ. ; Reimplemented from TProof.; Definition at line 2131 of file TProofLite.cxx. ◆ ResolveKeywords(). void TProofLite::ResolveKeywords ; (; TString & ; s, . const char * ; ord, . const char * ; logfile . ). private . Resolve some keywords in 's' <logfilewrk>, <user>, <rootsys>, <cpupin> ; Definition at line 801 of file TProofLite.cxx. ◆ SendInputDataFile(). void TProofLite::SendInputDataFile ; (; ). overrideprivatevirtual . Make sure that the input data objects are available to the workers in a dedicated file in the cache; the objects are taken from the dedicated list and / or the specified file. ; If the fInputData is empty the specified file is sent over. If there is no specified file, a file named ""inputdata.root"" is created locally with the content of fInputData and sent over to the master. If both fInputData and the specified file are not empty, a copy of the file is made locally and augmented with the content of fInputData. ; Reimplemented from TProof.; Definition at line 2310 of file TProofLite.cxx. ◆ SetDataSetTreeName(). Int_t TProofLite::SetDataSetTreeName ; (; const char * ; dataset, . const char * ; treename . ). overridevirtual . Set/Change the name of the def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:64492,log,logfile,64492,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['log'],['logfile']
Testability,"). private . Transfer the current state of the master to the active slave servers. ; The current state includes: the current working directory, etc. Returns the number of active slaves. Returns -1 in case of error. ; Definition at line 6742 of file TProof.cxx. ◆ SendDataSetStatus(). void TProof::SendDataSetStatus ; (; const char * ; msg, . UInt_t ; n, . UInt_t ; tot, . Bool_t ; st . ). Send or notify data set status. ; Definition at line 9336 of file TProof.cxx. ◆ SendFile(). Int_t TProof::SendFile ; (; const char * ; file, . Int_t ; opt = (kBinary | kForward | kCp | kCpBin), . const char * ; rfile = 0, . TSlave * ; wrk = 0 . ). protected . Send a file to master or slave servers. ; Returns number of slaves the file was sent to, maybe 0 in case master and slaves have the same file system image, -1 in case of error. If defined, send to worker 'wrk' only. If defined, the full path of the remote path will be rfile. If rfile = ""cache"" the file is copied to the remote cache instead of the sandbox (to copy to the cache on a different name use rfile = ""cache:newname""). The mask 'opt' is an or of ESendFileOpt: kAscii (0x0) if set true ascii file transfer is used; kBinary (0x1) if set true binary file transfer is used; kForce (0x2) if not set an attempt is done to find out; whether the file really needs to be downloaded; (a valid copy may already exist in the cache; from a previous run); the bit is set by; UploadPackage, since the check is done elsewhere.; kForward (0x4) if set, ask server to forward the file to slave; or submaster (meaningless for slave servers).; kCpBin (0x8) Retrieve from the cache the binaries associated; with the file; kCp (0x10) Retrieve the files from the cache. Definition at line 6894 of file TProof.cxx. ◆ SendGroupView(). Int_t TProof::SendGroupView ; (; ). private . Send to all active slaves servers the current slave group size and their unique id. ; Returns number of active slaves. Returns -1 in case of error. ; Definition at line 6460 of file TProo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:138456,sandbox,sandbox,138456,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['sandbox'],['sandbox']
Testability,"). private:. voidInitTreePruningMetaData(TMVA::DecisionTreeNode* n); TMVA::MsgLogger&Log() const; voidOptimize(TMVA::DecisionTree* dt, Double_t weights). Data Members; private:. TMVA::MsgLogger*fLogger! output stream to save logging information; Int_tfOptimalK! the optimal index of the prune sequence; vector<TMVA::DecisionTreeNode*,allocator<TMVA::DecisionTreeNode*> >fPruneSequence! map of weakest links (i.e., branches to prune) -> pruning index; vector<Double_t>fPruneStrengthList! map of alpha -> pruning index; vector<Double_t>fQualityIndexList! map of R(T) -> pruning index; TMVA::SeparationBase*fQualityIndexTool! the quality index used to calculate R(t), R(T) = sum[t in ~T]{ R(t) }. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CostComplexityPruneTool( SeparationBase* qualityIndex ); the constructor for the cost complexity prunig. ~CostComplexityPruneTool(); the destructor for the cost complexity prunig. CalculatePruningInfo(TMVA::DecisionTree* dt, const vector<TMVA::Event*,allocator<TMVA::Event*> >* testEvents = NULL, Bool_t isAutomatic = kFALSE). void InitTreePruningMetaData(TMVA::DecisionTreeNode* n); initialise ""meta data"" for the pruning, like the ""costcomplexity"", the; critical alpha, the minimal alpha down the tree, etc... for each node!!. void Optimize(TMVA::DecisionTree* dt, Double_t weights); after the critical alpha values (at which the corresponding nodes would; be pruned away) had been established in the ""InitMetaData"" we need now:; automatic pruning:; find the value of ""alpha"" for which the test sample gives minimal error,; on the tree with all nodes pruned that have alpha_critital < alpha,; fixed parameter pruning. CostComplexityPruneTool( SeparationBase* qualityIndex = NULL ). » Last changed: Mon Jul 4 15:34:00 2011 » Last generated: 2011-07-04 15:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__CostComplexityPruneTool.html:1922,test,testEvents,1922,root/html530/TMVA__CostComplexityPruneTool.html,https://root.cern,https://root.cern/root/html530/TMVA__CostComplexityPruneTool.html,2,['test'],"['test', 'testEvents']"
Testability,"). private:. voidInitTreePruningMetaData(TMVA::DecisionTreeNode* n); TMVA::MsgLogger&Log() const; voidOptimize(TMVA::DecisionTree* dt, Double_t weights). Data Members; private:. TMVA::MsgLogger*fLogger! output stream to save logging information; Int_tfOptimalK! the optimal index of the prune sequence; vector<TMVA::DecisionTreeNode*,allocator<TMVA::DecisionTreeNode*> >fPruneSequence! map of weakest links (i.e., branches to prune) -> pruning index; vector<Double_t>fPruneStrengthList! map of alpha -> pruning index; vector<Double_t>fQualityIndexList! map of R(T) -> pruning index; TMVA::SeparationBase*fQualityIndexTool! the quality index used to calculate R(t), R(T) = sum[t in ~T]{ R(t) }. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CostComplexityPruneTool( SeparationBase* qualityIndex ); the constructor for the cost complexity prunig. ~CostComplexityPruneTool(); the destructor for the cost complexity prunig. CalculatePruningInfo(TMVA::DecisionTree* dt, const vector<TMVA::Event*,allocator<TMVA::Event*> >* testEvents = NULL, Bool_t isAutomatic = kFALSE). void InitTreePruningMetaData(TMVA::DecisionTreeNode* n); initialise ""meta data"" for the pruning, like the ""costcomplexity"", the; critical alpha, the minimal alpha down the tree, etc... for each node!!. void Optimize(TMVA::DecisionTree* dt, Double_t weights); after the critical alpha values (at which the corresponding nodes would; be pruned away) had been established in the ""InitMetaData"" we need now:; automatic pruning:; find the value of ""alpha"" for which the test sample gives minimal error,; on the tree with all nodes pruned that have alpha_critital < alpha,; fixed parameter pruning. CostComplexityPruneTool( SeparationBase* qualityIndex = NULL ). » Last changed: Thu Nov 3 20:19:25 2011 » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__CostComplexityPruneTool.html:1922,test,testEvents,1922,root/html532/TMVA__CostComplexityPruneTool.html,https://root.cern,https://root.cern/root/html532/TMVA__CostComplexityPruneTool.html,2,['test'],"['test', 'testEvents']"
Testability,"). static constexpr Version_t RooHistConstraint::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 41 of file RooHistConstraint.h. ◆ clone(). TObject * RooHistConstraint::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 22 of file RooHistConstraint.h. ◆ DeclFileName(). static const char * RooHistConstraint::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 41 of file RooHistConstraint.h. ◆ evaluate(). double RooHistConstraint::evaluate ; (; ); const. overrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 173 of file RooHistConstraint.cxx. ◆ getLogVal(). double RooHistConstraint::getLogVal ; (; const RooArgSet * ; set = nullptr); const. overridevirtual . Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ; Reimplemented from RooAbsPdf.; Definition at line 200 of file RooHistConstraint.cxx. ◆ IsA(). TClass * RooHistConstraint::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 41 of file RooHistConstraint.h. ◆ selfNormalized(). bool RooHistConstraint::selfNormalized ; (; ); const. inlineoverridevirtual . It makes only sense to use the RooHistConstraint when normalized over the set of all gammas, in which case it is self-normalized because the used TMath::Poisson function is normalized. ; Reimplemented from RooAbsPdf.; Definition at line 29 of file RooHistConstraint.h. ◆ Streamer(). void RooHistConstraint::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooHistConstraint::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . De",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistConstraint.html:75957,log,log,75957,doc/master/classRooHistConstraint.html,https://root.cern,https://root.cern/doc/master/classRooHistConstraint.html,2,['log'],['log']
Testability,"); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/DataLoader.h>. Inheritance diagram for TMVA::DataLoader:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ DataAssignType. enum TMVA::DataLoader::DataAssignType. private . EnumeratorkUndefined ; kAssignTrees ; kAssignEvents . Definition at line 199 of file DataLoader.h. Constructor & Destructor Documentation. ◆ DataLoader(). TMVA::DataLoader::DataLoader ; (; TString ; thedlName = ""default""). Definition at line 80 of file DataLoader.cxx. ◆ ~DataLoader(). TMVA::DataLoader::~DataLoader ; (; void ; ). virtual . Definition at line 96 of file DataLoader.cxx. Member Function Documentation. ◆ AddBackgroundTestEvent(). void TMVA::DataLoader::AddBackgroundTestEvent ; (; const std::vector< Double_t > & ; event, . Double_t ; weight = 1.0 . ). add signal training event ; Definition at line 252 of f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataLoader.html:21147,log,logger,21147,doc/master/classTMVA_1_1DataLoader.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataLoader.html,1,['log'],['logger']
Testability,"); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/Reader.h>. Inheritance diagram for TMVA::Reader:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Reader() [1/5]. TMVA::Reader::Reader ; (; const TString & ; theOption = """", . Bool_t ; verbose = 0 . ). constructor ; Definition at line 123 of file Reader.cxx. ◆ Reader() [2/5]. TMVA::Reader::Reader ; (; std::vector< std::string > & ; varNames, . const TString & ; theOption = """", . Bool_t ; verbose = 0 . ). constructor ; Definition at line 178 of file Reader.cxx. ◆ Reader() [3/5]. TMVA::Reader::Reader ; (; const std::string & ; varNames, . const TString & ; theOption, . Bool_t ; verbose = 0 . ). constructor ; Definition at line 208 of file Reader.cxx. ◆ Reader() [4/5]. TMVA::Reader::Reader ; (; std::vector< TString > & ; varNames, . const TString & ; theOption = """", . Bool_t ; verb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Reader.html:20729,log,logger,20729,doc/master/classTMVA_1_1Reader.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Reader.html,1,['log'],['logger']
Testability,"); Create thread data for n threads max. void SetIz(Int_t iz); Set current z-plane. void SetSeg(Int_t iseg); Set current segment. TGeoXtru(); dummy ctor. TGeoXtru(Int_t nz); Default constructor. TGeoXtru(Double_t* param); Default constructor in GEANT3 style; param[0] = nz // number of z planes. param[1] = z1 // Z position of first plane; param[2] = x1 // X position of first plane; param[3] = y1 // Y position of first plane; param[4] = scale1 // scale factor for first plane. param[4*(nz-1]+1] = zn; param[4*(nz-1)+2] = xn; param[4*(nz-1)+3] = yn; param[4*(nz-1)+4] = scalen. TGeoXtru(const TGeoXtru& ); copy constructor. TGeoXtru& operator=(const TGeoXtru& ); assignment operator. ~TGeoXtru(); destructor. Double_t Capacity() const; Compute capacity [length^3] of this shape. void ComputeBBox(); compute bounding box of the pcon. void ComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. Bool_t Contains(const Double_t* point) const; test if point is inside this shape. Int_t DistancetoPrimitive(Int_t px, Int_t py); compute closest distance from point px,py to each corner. void DrawPolygon(Option_t* option = """"); Draw the section polygon. Double_t DistToPlane(const Double_t* point, const Double_t* dir, Int_t iz, Int_t ivert, Double_t stepmax, Bool_t in) const; Compute distance to a Xtru lateral surface. Double_t DistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from inside point to surface of the polycone; locate Z segment. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from outside point to surface of the tube; Warning(""DistFromOutside"", ""not implemented"");. Bool_t DefinePolygon(Int_t nvert, const Double_t* xv, const Double_t* yv); Creates the polygon representing the blueprint of any Xtru sect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoXtru.html:16190,test,test,16190,root/html534/TGeoXtru.html,https://root.cern,https://root.cern/root/html534/TGeoXtru.html,3,['test'],['test']
Testability,"); Default Constructor. . virtual ~BrentRootFinder(); Default Destructor. . {}. bool SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). bool Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); Returns the X value corresponding to the function value fy for (xmin<x<xmax).; Method:; First, the grid search is used to bracket the maximum; with the step size = (xmax-xmin)/fNpx. This way, the step size; can be controlled via the SetNpx() function. If the function is; unimodal or if its extrema are far apart, setting the fNpx to; a small value speeds the algorithm up many times.; Then, Brent's method is applied on the bracketed interval. \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position.; \@param absTol desired relative error in the minimum position. void SetNpx(int npx); Set the number of point used to bracket root using a grid . { fNpx = npx; }. void SetLogScan(bool on). Set a log grid scan (default is equidistant bins); will work only if xlow > 0. { fLogScan = on; }. double Root() const; Returns root value. Need to call first Solve(). . { return fRoot; }. int Status() const; Returns status of last estimate. If = 0 is OK . { return fStatus; }. int Iterations() const; Return number of iteration used to find minimum . { return fNIter; }. const char* Name() const; Return name of root finder algorithm (""BrentRootFinder""). . void SetDefaultNpx(int npx); static function used to modify the default parameters; set number of default Npx used at construction time (when SetNpx is not called); Default value is 100. void SetDefaultNSearch(int n); set number of times the bracketing search in combination with is done to find a good interval; Default value is 10. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__BrentRootFinder.html:3861,log,log,3861,root/html602/ROOT__Math__BrentRootFinder.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__BrentRootFinder.html,1,['log'],['log']
Testability,"); Default Constructor. . virtual ~BrentRootFinder(); Default Destructor. . {}. bool SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). bool Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); Returns the X value corresponding to the function value fy for (xmin<x<xmax).; Method:; First, the grid search is used to bracket the maximum; with the step size = (xmax-xmin)/fNpx. This way, the step size; can be controlled via the SetNpx() function. If the function is; unimodal or if its extrema are far apart, setting the fNpx to; a small value speeds the algorithm up many times.; Then, Brent's method is applied on the bracketed interval. \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position.; \@param absTol desired relative error in the minimum position. void SetNpx(int npx); Set the number of point used to bracket root using a grid . { fNpx = npx; }. void SetLogScan(bool on). Set a log grid scan (default is equidistant bins); will work only if xlow > 0. { fLogScan = on; }. double Root() const; Returns root value. Need to call first Solve(). . { return fRoot; }. int Status() const; Returns status of last estimate. If = 0 is OK . { return fStatus; }. int Iterations() const; Return number of iteration used to find minimum . { return fNIter; }. const char* Name() const; Return name of root finder algorithm (""BrentRootFinder""). . void SetDefaultNpx(int npx); static function used to modify the default parameters; set number of default Npx used at construction time (when SetNpx is not called); Default value is 100. void SetDefaultNSearch(int n); set number of times the bracketing search in combination with is done to find a good interval; Default value is 10. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__BrentRootFinder.html:3861,log,log,3861,root/html604/ROOT__Math__BrentRootFinder.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__BrentRootFinder.html,1,['log'],['log']
Testability,"); Int_tsetWarnLevel(Int_t newLevel); virtual voidShowMembers(TMemberInspector& insp); Int_tsimplex(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidzeroEvalCount(). protected:. voidapplyCovarianceMatrix(TMatrixDSym& V); voidbackProp(); voidclearPdfParamAsymErr(Int_t index); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Int_tgetNPar() const; Double_tgetPdfParamErr(Int_t index); Double_tgetPdfParamVal(Int_t index); ofstream*logfile() const; voidTObject::MakeZombie(); Double_t&maxFCN(); voidprofileStart(); voidprofileStop(); voidsaveStatus(const char* label, Int_t status); voidsetPdfParamErr(Int_t index, Double_t value); voidsetPdfParamErr(Int_t index, Double_t loVal, Double_t hiVal); virtual Bool_tsetPdfParamVal(Int_t index, Double_t value, Bool_t verbose = kFALSE); Bool_tsynchronize(Bool_t verbose). private:. RooMinuit(const RooMinuit&). Data Members; public:. enum Strategy { Speed; Balance; Robustness; };; enum PrintLevel { None; Reduced; Normal; ExtraForProblem; Maximum; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. RooArgList*_constParamList; TStopwatch_cumulTimer; Bool_t_doEvalErrorWall; Int_t_evalCounter; TMatrixDSym*_extV; RooArgList*_floatParamList; RooAbsReal*_func; Bool_t_handleLocalErrors; RooArgList*_initConstParamLi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMinuit.html:6716,log,logfile,6716,root/html532/RooMinuit.html,https://root.cern,https://root.cern/root/html532/RooMinuit.html,1,['log'],['logfile']
Testability,"); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction2PdfBinding<double,double,double>&operator=(const RooCFunction2PdfBinding<double,double,double>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction2PdfBinding_double_double_double_.html:23758,test,testArg,23758,root/html602/RooCFunction2PdfBinding_double_double_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction2PdfBinding_double_double_double_.html,2,['test'],['testArg']
Testability,"); User-defined set of points to test. Double_t Size() const; This class can make regularly spaced scans based on range stored in RooRealVars.; Choose number of steps for a rastor scan (common for each dimension); void SetNumSteps(Int_t);; This class can make regularly spaced scans based on range stored in RooRealVars.; Choose number of steps for a rastor scan (specific for each dimension); void SetNumSteps(map<RooAbsArg, Int_t>); Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void SetData(RooAbsData& data); Set the DataSet. { fData = &data; }. void SetPdf(RooAbsPdf& pdf); Set the Pdf, add to the the workspace if not already there. { 	fPdf = &pdf; }. void SetParameters(const RooArgSet& set); specify the parameters of interest in the interval. { fPOI.removeAll(); fPOI.add(set); }. void SetNuisanceParameters(const RooArgSet& set); specify the nuisance parameters (eg. the rest of the parameters). {fNuisParams.removeAll(); fNuisParams.add(set);}. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size;}. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl;}. ConfidenceBelt* GetConfidenceBelt(); {return fConfBelt;}. void UseAdaptiveSampling(bool flag = true); {fAdaptiveSampling=flag;}. void SaveBeltToFile(bool flag = true). void CreateConfBelt(bool flag = true); {fCreateBelt = flag;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: NeymanConstruction.h 31276 2009-11-18 15:06:42Z moneta $ » Last generated: 2009-12-07 13:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__NeymanConstruction.html:12279,test,test,12279,root/html526/RooStats__NeymanConstruction.html,https://root.cern,https://root.cern/root/html526/RooStats__NeymanConstruction.html,1,['test'],['test']
Testability,"); const. Gets the x axis of the lower ref graph. ; Shortcut for:; rp->GetLowerRefGraph()->GetXaxis();. Definition at line 798 of file TRatioPlot.cxx. ◆ GetLowerRefYaxis(). TAxis * TRatioPlot::GetLowerRefYaxis ; (; ); const. Gets the y axis of the lower ref graph. ; Shortcut for:; rp->GetLowerRefGraph()->GetYaxis();. Definition at line 812 of file TRatioPlot.cxx. ◆ GetLowYaxis(). TAxis * TRatioPlot::GetLowYaxis ; (; ); const. inline . Definition at line 188 of file TRatioPlot.h. ◆ GetSeparationMargin(). Float_t TRatioPlot::GetSeparationMargin ; (; ); const. Return the separation margin value. ; Definition at line 538 of file TRatioPlot.cxx. ◆ GetUpperPad(). TPad * TRatioPlot::GetUpperPad ; (; ); const. inline . Definition at line 214 of file TRatioPlot.h. ◆ GetUpperRefObject(). TObject * TRatioPlot::GetUpperRefObject ; (; ); const. virtual . Return the reference object. ; Its the first TH1 or THStack type object in the upper pads list of primitives. Note that it returns a TObject, so you need to test and cast it to use it. ; Definition at line 738 of file TRatioPlot.cxx. ◆ GetUpperRefXaxis(). TAxis * TRatioPlot::GetUpperRefXaxis ; (; ); const. Gets the x axis of the object returned by TRatioPlot::GetUpperRefObject. ; Definition at line 755 of file TRatioPlot.cxx. ◆ GetUpperRefYaxis(). TAxis * TRatioPlot::GetUpperRefYaxis ; (; ); const. Gets the y axis of the object returned by TRatioPlot::GetUpperRefObject. ; Definition at line 774 of file TRatioPlot.cxx. ◆ GetUpYaxis(). TAxis * TRatioPlot::GetUpYaxis ; (; ); const. inline . Definition at line 187 of file TRatioPlot.h. ◆ GetXaxis(). TAxis * TRatioPlot::GetXaxis ; (; ); const. inline . Definition at line 186 of file TRatioPlot.h. ◆ ImportAxisAttributes(). void TRatioPlot::ImportAxisAttributes ; (; TGaxis * ; gaxis, . TAxis * ; axis . ). protected . Internal method to import TAxis attributes to a TGaxis. ; Copied from TGaxis::ImportAxisAttributes ; Definition at line 1710 of file TRatioPlot.cxx. ◆ Init(). void TRatioPl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRatioPlot.html:34690,test,test,34690,doc/master/classTRatioPlot.html,https://root.cern,https://root.cern/doc/master/classTRatioPlot.html,1,['test'],['test']
Testability,"); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 56 of file TBenchmark.h. ◆ operator=(). TBenchmark & TBenchmark::operator= ; (; const TBenchmark & ; bm). protected . Assignment operator. ; Definition at line 64 of file TBenchmark.cxx. ◆ Print(). void TBenchmark::Print ; (; Option_t * ; name = """"); const. overridevirtual . Prints parameters of Benchmark name. ; Reimplemented from TObject.; Definition at line 137 of file TBenchmark.cxx. ◆ Reset(). void TBenchmark::Reset ; (; ). virtual . Reset all Benchmarks. ; Definition at line 147 of file TBenchmark.cxx. ◆ Show(). void TBenchmark::Show ; (; const char * ; name). virtual . Stops Benchmark name and Prints results. ; Definition at line 155 of file TBenchmark.cxx. ◆ Start(). void TBenchmark::Start ; (; const char * ; name). virtual . Starts Benchmark with the specified name. ; An independent timer (see class TStopwatch) is started. The name of the benchmark is entered into the list of benchmarks. Benchmark can be stopped via TBenchmark::Stop(). Results can be printed via TBenchmark::Print(). TBenchmark::Show() can be used to stop benchmark and print results. If name is an already existing benchmark, timing will resume. A summary of all benchmarks can be seen via TBenchmark::Summary(). ; Definition at line 172 of file TBenchmark.cxx. ◆ Stop(). void TBenchmark::Stop ; (; const char * ; name). virtual . Terminates Benchmark with specified name. ; Definition at line 201 of file TBenchmark.cxx. ◆ Streamer(). void TBenchmark::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TBenchmark::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 56 of file TBenchmark.h. ◆ Summary(). void TBenchmark::Summary ; (; Float_t & ; rt, . Float_t & ; cp . ). virtual . Prints a summary of all benchmarks. ; Definition at line 214 of file ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBenchmark.html:15008,benchmark,benchmark,15008,doc/master/classTBenchmark.html,https://root.cern,https://root.cern/doc/master/classTBenchmark.html,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"); model.summary(); return model; ; def PrepareData() :; #get the input data; inputFileName = ""Higgs_data.root""; inputFile = ""http://root.cern.ch/files/"" + inputFileName; ; df1 = ROOT.RDataFrame(""sig_tree"", inputFile); sigData = df1.AsNumpy(columns=['m_jj', 'm_jjj', 'm_lv', 'm_jlv', 'm_bb', 'm_wbb', 'm_wwbb']); #print(sigData); ; # stack all the 7 numpy array in a single array (nevents x nvars); xsig = np.column_stack(list(sigData.values())); data_sig_size = xsig.shape[0]; print(""size of data"", data_sig_size); ; # make SOFIE inference on background data; df2 = ROOT.RDataFrame(""bkg_tree"", inputFile); bkgData = df2.AsNumpy(columns=['m_jj', 'm_jjj', 'm_lv', 'm_jlv', 'm_bb', 'm_wbb', 'm_wwbb']); xbkg = np.column_stack(list(bkgData.values())); data_bkg_size = xbkg.shape[0]; ; ysig = np.ones(data_sig_size); ybkg = np.zeros(data_bkg_size); inputs_data = np.concatenate((xsig,xbkg),axis=0); inputs_targets = np.concatenate((ysig,ybkg),axis=0); ; #split data in training and test data; ; x_train, x_test, y_train, y_test = train_test_split(; inputs_data, inputs_targets, test_size=0.50, random_state=1234); ; return x_train, y_train, x_test, y_test; ; def TrainModel(model, x, y, name) :; model.fit(x,y,epochs=10,batch_size=50); modelFile = name + '.h5'; model.save(modelFile); return modelFile; ; ### run the models; ; x_train, y_train, x_test, y_test = PrepareData(); ; ## create models and train them; ; model1 = TrainModel(CreateModel(4,64),x_train, y_train, 'Higgs_Model_4L_50'); model2 = TrainModel(CreateModel(4,64),x_train, y_train, 'Higgs_Model_4L_200'); model3 = TrainModel(CreateModel(4,64),x_train, y_train, 'Higgs_Model_2L_500'); ; #evaluate with SOFIE the 3 trained models; ; ; def GenerateModelCode(modelFile, generatedHeaderFile):; model = ROOT.TMVA.Experimental.SOFIE.PyKeras.Parse(modelFile); ; print(""Generating inference code for the Keras model from "",modelFile,""in the header "", generatedHeaderFile); #Generating inference code using a ROOT binary file; model.Generate(ROOT.TM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__SOFIE__Models_8py.html:2349,test,test,2349,doc/master/TMVA__SOFIE__Models_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__SOFIE__Models_8py.html,1,['test'],['test']
Testability,"); string range=""[0,-1,1]"";. void MakeTotalExpected(RooWorkspace* proto, string totName, string , string , int lowBin, int highBin, vector<string>& syst_x_expectedPrefixNames, vector<string>& normByNames); for ith bin calculate totN_i = lumi * sum_j expected_j * syst_j. void AddPoissonTerms(RooWorkspace* proto, string prefix, string obsPrefix, string expPrefix, int lowBin, int highBin, vector<string>& likelihoodTermNames). Relate observables to expected for each bin; later modify variable named expPrefix_i to be product of terms. void SetObsToExpected(RooWorkspace* proto, string obsPrefix, string expPrefix, int lowBin, int highBin). set observed to expected. void Customize(RooWorkspace* proto, const char* pdfNameChar, map<string,string> renameMap). void EditSyst(RooWorkspace* proto, const char* pdfNameChar, map<string,double> gammaSyst, map<string,double> uniformSyst, map<string,double> logNormSyst); cout << ""in edit, gammamap.size = "" << gammaSyst.size() << "", unimap.size = "" << uniformSyst.size() << endl;. void PrintCovarianceMatrix(RooFitResult* result, RooArgSet* params, string filename); FILE * pFile;. RooWorkspace* MakeSingleChannelModel(vector<RooStats::HistFactory::EstimateSummary> summary, vector<string> systToFix, bool doRatio = false). RooWorkspace* MakeCombinedModel(vector<string> , vector<RooWorkspace*> ). void FitModel(RooWorkspace* , string , string , string , bool = false). void FormatFrameForLikelihood(RooPlot* frame, string XTitle = string(""#sigma / #sigma_{SM}""), string YTitle = string(""-log likelihood"")). TDirectory * Makedirs(TDirectory* file, vector<string> names). TDirectory * Mkdir(TDirectory* file, string name). » Author: Kyle Cranmer, Akira Shibata » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: cranmer $ » Last generated: 2010-12-08 11:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HistFactory__HistoToWorkspaceFactory.html:10841,log,log,10841,root/html528/RooStats__HistFactory__HistoToWorkspaceFactory.html,https://root.cern,https://root.cern/root/html528/RooStats__HistFactory__HistoToWorkspaceFactory.html,1,['log'],['log']
Testability,"); string range=""[0,-1,1]"";. void MakeTotalExpected(RooWorkspace* proto, string totName, string , string , int lowBin, int highBin, vector<string>& syst_x_expectedPrefixNames, vector<string>& normByNames); for ith bin calculate totN_i = lumi * sum_j expected_j * syst_j. void AddPoissonTerms(RooWorkspace* proto, string prefix, string obsPrefix, string expPrefix, int lowBin, int highBin, vector<string>& likelihoodTermNames). Relate observables to expected for each bin; later modify variable named expPrefix_i to be product of terms. void SetObsToExpected(RooWorkspace* proto, string obsPrefix, string expPrefix, int lowBin, int highBin). set observed to expected. void Customize(RooWorkspace* proto, const char* pdfNameChar, map<string,string> renameMap). void EditSyst(RooWorkspace* proto, const char* pdfNameChar, map<string,double> gammaSyst, map<string,double> uniformSyst, map<string,double> logNormSyst); cout << ""in edit, gammamap.size = "" << gammaSyst.size() << "", unimap.size = "" << uniformSyst.size() << endl;. void PrintCovarianceMatrix(RooFitResult* result, RooArgSet* params, string filename); FILE * pFile;. RooWorkspace* MakeSingleChannelModel(vector<RooStats::HistFactory::EstimateSummary> summary, vector<string> systToFix, bool doRatio = false). RooWorkspace* MakeCombinedModel(vector<string> , vector<RooWorkspace*> ). void FitModel(RooWorkspace* , string , string , string , bool = false). void FormatFrameForLikelihood(RooPlot* frame, string XTitle = string(""#sigma / #sigma_{SM}""), string YTitle = string(""-log likelihood"")). TDirectory * Makedirs(TDirectory* file, vector<string> names). TDirectory * Mkdir(TDirectory* file, string name). » Author: Kyle Cranmer, Akira Shibata » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: cranmer $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HistFactory__HistoToWorkspaceFactory.html:10906,log,log,10906,root/html530/RooStats__HistFactory__HistoToWorkspaceFactory.html,https://root.cern,https://root.cern/root/html530/RooStats__HistFactory__HistoToWorkspaceFactory.html,2,['log'],['log']
Testability,"); string range=""[0,-1,1]"";. void MakeTotalExpected(RooWorkspace* proto, string totName, string , string , int lowBin, int highBin, vector<string>& syst_x_expectedPrefixNames, vector<string>& normByNames); for ith bin calculate totN_i = lumi * sum_j expected_j * syst_j. void AddPoissonTerms(RooWorkspace* proto, string prefix, string obsPrefix, string expPrefix, int lowBin, int highBin, vector<string>& likelihoodTermNames). Relate observables to expected for each bin; later modify variable named expPrefix_i to be product of terms. void SetObsToExpected(RooWorkspace* proto, string obsPrefix, string expPrefix, int lowBin, int highBin). set observed to expected. void Customize(RooWorkspace* proto, const char* pdfNameChar, map<string,string> renameMap). void EditSyst(RooWorkspace* proto, const char* pdfNameChar, map<string,double> gammaSyst, map<string,double> uniformSyst, map<string,double> logNormSyst); cout << ""in edit, gammamap.size = "" << gammaSyst.size() << "", unimap.size = "" << uniformSyst.size() << endl;. void PrintCovarianceMatrix(RooFitResult* result, RooArgSet* params, string filename); FILE * pFile;. RooWorkspace* MakeSingleChannelModel(vector<RooStats::HistFactory::EstimateSummary> summary, vector<string> systToFix, bool doRatio = false). RooWorkspace* MakeCombinedModel(vector<string> , vector<RooWorkspace*> ). void FitModel(RooWorkspace* , string , string , string , bool = false). void FormatFrameForLikelihood(RooPlot* frame, string XTitle = string(""#sigma / #sigma_{SM}""), string YTitle = string(""-log likelihood"")). TDirectory * Makedirs(TDirectory* file, vector<string> names). TDirectory * Mkdir(TDirectory* file, string name). » Author: Kyle Cranmer, Akira Shibata » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: cranmer $ » Last generated: 2011-12-02 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__HistFactory__HistoToWorkspaceFactory.html:10898,log,log,10898,root/html532/RooStats__HistFactory__HistoToWorkspaceFactory.html,https://root.cern,https://root.cern/root/html532/RooStats__HistFactory__HistoToWorkspaceFactory.html,1,['log'],['log']
Testability,"); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(); virtual voidInit(); virtual voidProcessOptions(); Double_tTransformLikelihoodOutput(Double_t ps, Double_t pb) const. Data Members; public:. enum TMVA::MethodBase::EWeightFileType { kROOT; kTEXT; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Int_tfAverageEvtPerBi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodLikelihood.html:17453,test,testing,17453,root/html530/TMVA__MethodLikelihood.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodLikelihood.html,3,['test'],['testing']
Testability,"); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(); virtual voidInit(); virtual voidProcessOptions(); Double_tTransformLikelihoodOutput(Double_t ps, Double_t pb) const. Data Members; public:. enum TMVA::MethodBase::EWeightFileType { kROOT; kTEXT; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in representative histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Int_tfAverageEvtPerBinaverage events per bin; used to calculate fNbins; Int_t*fAverageEvtPerBinVarBa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodLikelihood.html:16912,test,testing,16912,root/html528/TMVA__MethodLikelihood.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodLikelihood.html,1,['test'],['testing']
Testability,"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); voidTMVA::ConvergenceTest::SetConvergenceParameters(Int_t steps, Double_t improvement); voidTMVA::ConvergenceTest::SetCurrentValue(Float_t value); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); voidTMVA::MethodANNBase::SetNeuronInputCalculator(TMVA::TNeuronInput* inputCalculator); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; Float_tTMVA::ConvergenceTest::SpeedControl(UInt_t ofSteps); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodMLP.html:13617,test,testTime,13617,root/html602/TMVA__MethodMLP.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodMLP.html,2,['test'],['testTime']
Testability,"); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Bool_tRooAbsCategory::operator!=(Int_t index); Bool_tRooAbsCategory::operator!=(const char* label); Bool_tRooAbsCategory::operator!=(const RooAbsArg& other); RooCategory&operator=(const RooCategory&); Bool_tRooAbsCategory::operator==(Int_t index) const; Bool_tRooAbsCategory::operator==(const char* label) const; virtual Bool_tRooAbsCategory::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidRooAbsArg::Print(Option_t* options = 0) const; virtual voidRooAbsArg::printAddress(ostream& os) const; virtual voidRooAbsArg::printArgs(ostream& os) const; virtual voidRooAbsArg::printClassName(ostream& os) const; voidRooAbsArg::printCompactTree(const char* indent = """", const char* fileName = 0, const char* namePat = 0, RooAbsArg* client = 0); voidRooAbsArg::printCompactTree(ostream& os, const char* indent = """", const char* namePat = 0, RooAbsArg* client = 0); virtual voidRooAbsArg::printCompactTreeHook(ostream& os, const char* ind = """"); voidRooAbsArg::printComponentTree(const char* indent = """", const char* namePat = 0, Int_t nLevel = 999); voidRooAbsArg::printDirty(Bool_t depth = kTRUE) const; virtual voidRooPrintable::printExtras(ostream& os) const; virtual voidRooAbsArg::printMetaArgs(ostream&) const; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCategory.html:12113,test,testArg,12113,root/html602/RooCategory.html,https://root.cern,https://root.cern/root/html602/RooCategory.html,2,['test'],['testArg']
Testability,"); voidTrainOneEventFast(Int_t ievt, Float_t*& branchVar, Int_t& type); voidUpdateNetwork(Double_t desired, Double_t eventWeight = 1.); voidUpdateNetwork(const vector<Float_t>& desired, Double_t eventWeight = 1.); voidUpdatePriors(); voidUpdateRegulators(); voidUpdateSynapses(). Data Members; public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one; static TMVA::MethodMLP::ETrainingMethodkBFGS; static TMVA::MethodMLP::ETrainingMethodkBP; static TMVA::MethodMLP::EBPTrainingModekBatch; static TObject::(anonymous)TObject::kBitMask; static TMVA::MethodANNBase::EEstimatorTMVA::MethodANNBase::kCE; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TMVA::MethodMLP::ETrainingMethodkGA; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TMVA::MethodANNBase::EEstimatorTMVA::MethodANNBase::kMSE; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TMVA::MethodMLP::EBPTrainingModekSequential; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::TActivation*TMVA::MethodANNBase::fActivationactivation function to be used for hidden layers; TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodMLP.html:19413,test,testing,19413,root/html602/TMVA__MethodMLP.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodMLP.html,2,['test'],['testing']
Testability,"); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. Scalar Dot(const OtherLorentzVector & q); ------ Operations combining two Lorentz vectors ------. scalar (Dot) product of two LorentzVector vectors (metric is -,-,-,+); Enable the product using any other LorentzVector implementing; the x(), y() , y() and t() member functions; \param q any LorentzVector implementing the x(), y() , z() and t(); member functions; \return the result of v.q of type according to the base scalar type of v. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar tolerance = 100*std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html:17963,log,log,17963,root/html528/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html,4,['log'],['log']
Testability,"); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. Scalar Dot(const OtherLorentzVector & q); ------ Operations combining two Lorentz vectors ------. scalar (Dot) product of two LorentzVector vectors (metric is -,-,-,+); Enable the product using any other LorentzVector implementing; the x(), y() , y() and t() member functions; \param q any LorentzVector implementing the x(), y() , z() and t(); member functions; \return the result of v.q of type according to the base scalar type of v. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar tolerance = 100*std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html:17225,log,log,17225,root/html528/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html,4,['log'],['log']
Testability,"); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. Scalar Dot(const OtherLorentzVector & q); ------ Operations combining two Lorentz vectors ------. scalar (Dot) product of two LorentzVector vectors (metric is -,-,-,+); Enable the product using any other LorentzVector implementing; the x(), y() , y() and t() member functions; \param q any LorentzVector implementing the x(), y() , z() and t(); member functions; \return the result of v.q of type according to the base scalar type of v. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar tolerance = 100*std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html:18805,log,log,18805,root/html528/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html,4,['log'],['log']
Testability,"); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. Scalar Dot(const OtherLorentzVector & q); ------ Operations combining two Lorentz vectors ------. scalar (Dot) product of two LorentzVector vectors (metric is -,-,-,+); Enable the product using any other LorentzVector implementing; the x(), y() , y() and t() member functions; \param q any LorentzVector implementing the x(), y() , z() and t(); member functions; \return the result of v.q of type according to the base scalar type of v. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar tolerance = 100*std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html:17199,log,log,17199,root/html528/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html,4,['log'],['log']
Testability,");  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBMixDecay.html:61325,log,logging,61325,doc/master/classRooBMixDecay.html,https://root.cern,https://root.cern/doc/master/classRooBMixDecay.html,74,['log'],['logging']
Testability,");  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::unique_ptr< RooPolyFunc > taylorExpand (const char *name, const char *title, RooAbsReal &func, const RooArgList &observables, int order=1, std::vector< double > const &observableValues={}, double eps1=1e-6, double eps2=1e-3);  Taylor expanding given function in terms of observables around observableValues. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPolyFunc.html:46688,log,logging,46688,doc/master/classRooPolyFunc.html,https://root.cern,https://root.cern/doc/master/classRooPolyFunc.html,1,['log'],['logging']
Testability,");  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual void DeclareOptions ()=0;  ; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1FitterBase.html:12794,log,logger,12794,doc/master/classTMVA_1_1FitterBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html,1,['log'],['logger']
Testability,");  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::ostream &os, const char *indent="""", const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on given ostream. ;  ; virtual void printCompactTreeHook (std::ostream &os",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPolynomial.html:37066,test,testArg,37066,doc/master/classRooPolynomial.html,https://root.cern,https://root.cern/doc/master/classRooPolynomial.html,1,['test'],['testArg']
Testability,");  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Attributes; bool _logx = false;  Flag indicating logarithmic scaling of x values. ;  ; bool _logy = false;  Flag indicating logarithmic scaling of y values. ;  ; std::unique_ptr< TSpline > _spline;  The spline object. ;  ; RooRealProxy _x;  The independent variable. ;  . Additional Inherited Members;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSpline.html:56154,log,logarithmic,56154,doc/master/classRooSpline.html,https://root.cern,https://root.cern/doc/master/classRooSpline.html,1,['log'],['logarithmic']
Testability,");  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual double CalcNLL (double xL);  ; virtual bool ShouldTakeStep (double d);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooArgSet fChainParams;  RooRealVars that are stored in the chain. ;  ; RooAbsReal * fFunction = nullptr;  function that will generate likelihood values ;  ; Int_t fNumBurnInSteps = 0;  number of iterations to discard as burn-in, starting from the first ;  ; Int_t fNumIters = 0;  number of iterations to run metropolis algorithm ;  ; RooArgSet fParameters;  RooRealVars that define all parameter space. ;  ; ProposalFunction * fPropFunc = nullptr;  Proposal function for MCMC integration. ;  ; enum FunctionSign fSign = kSignUnset;  whether the likelihood is negative (like NLL) or positive ;  ; enum FunctionType fType = kTypeUnset;  whether the likelihood is on a regular, log, (or other) scale ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <RooStats/MetropolisHastings.h>. Inheritance diagram for RooStats::MetropolisHastings:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ FunctionSign. enum RooStats::MetropolisHastings::FunctionSign. EnumeratorkNegative ; kPositive ; kSignUnset . Definition at line 28 of file MetropolisHastings.h. ◆ FunctionType. enum RooStats::MetropolisHastings::FunctionType. EnumeratorkRegular ; kLog ; kTypeUnset . Definition at line 29 of file MetropolisHastings.h. Constructor & Destructor Documentation. ◆ MetropolisHastings() [1/2]. RooStats::MetropolisHastings::MetropolisHastings ; (; ). default . default constructor . ◆ MetropolisHastings() [2/2]. MetropolisHastings::MetropolisHasting",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1MetropolisHastings.html:13455,log,log,13455,doc/master/classRooStats_1_1MetropolisHastings.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1MetropolisHastings.html,1,['log'],['log']
Testability,");; #endif; Step 2: Load the ABC class in the script.; // Check if ABC is already loaded; if (!TClass::GetDict(""ABC"")) {; gROOT->ProcessLine("".L ABCClass.C++"");; }. // Use the Class; ABC *v = new ABC;; v->p = (sqrt((v->a * v->a)+ (v->b * v->b)+(v->c * v->c)));; 16 Collection Classes; Collections are a key feature of the ROOT system. Many, if not most, of the applications you write will use collections. If you have used parameterized C++ collections or polymorphic collections before, some of this material will be review. However, much of this chapter covers aspects of collections specific to the ROOT system. When you have read this chapter, you will know. How to create instances of collections; The difference between lists, arrays, hash tables, maps, etc.; How to add and remove elements of a collection; How to search a collection for a specific element; How to access and modify collection elements; How to iterate over a collection to access collection elements; How to manage memory for collections and collection elements; How collection elements are tested for equality (IsEqual()); How collection elements are compared (Compare()) in case of sorted collections; How collection elements are hashed (Hash()) in hash tables. 16.1 Understanding Collections; A collection is a group of related objects. You will find it easier to manage a large number of items as a collection. For example, a diagram editor might manage a collection of points and lines. A set of widgets for a graphical user interface can be placed in a collection. A geometrical model can be described by collections of shapes, materials and rotation matrices. Collections can themselves be placed in collections. Collections act as flexible alternatives to traditional data structures of computers science such as arrays, lists and trees.; 16.1.1 General Characteristics; The ROOT collections are polymorphic containers that hold pointers to TObjects, so:. They can only hold objects that inherit from TObject; They retu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:839736,test,tested,839736,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['tested']
Testability,");; 244extern ""C"" void type_of_call hldir(DEFCHAR,DEFCHAR);; 245#endif; 246 ; 247Bool_t THbookFile::fgPawInit = kFALSE;; 248Int_t *THbookFile::fgLuns = nullptr;; 249 ; 250ClassImp(THbookFile);; 251 ; 252////////////////////////////////////////////////////////////////////////////////; 253///the constructor; 254 ; 255THbookFile::THbookFile() : fLun(0),fLrecl(0); 256{; 257 fList = new TList();; 258 fKeys = new TList();; 259}; 260 ; 261////////////////////////////////////////////////////////////////////////////////; 262/// Constructor for an HBook file object; 263 ; 264THbookFile::THbookFile(const char *fname, Int_t lrecl); 265 :TNamed(fname,""""); 266{; 267 // Initialize the Hbook/Zebra store; 268 Int_t i;; 269 if (!fgPawInit) {; 270 fgPawInit = kTRUE;; 271 lq = &pawc[9];; 272 iq = &pawc[17];; 273 void *qq = iq;; 274 q = (float*)qq;; 275 int pawc_size = PAWC_SIZE;; 276 hlimit(pawc_size);; 277 fgLuns = new Int_t[10];; 278 for (i=0;i<10;i++) fgLuns[i] = 0;; 279 }; 280 ; 281 //find a free logical unit (max 10); 282 fLun = 0;; 283 for (i=0;i<10;i++) {; 284 if (fgLuns[i] == 0) {; 285 fLun = 10+i;; 286 fgLuns[i] = 1;; 287 break;; 288 }; 289 }; 290 if (fLun == 0) {; 291 Error(""THbookFile"",""Too many HbookFiles\n"");; 292 return;; 293 }; 294 char topdir[20];; 295 snprintf(topdir,19,""lun%d"",fLun);; 296 ; 297 Int_t ier = 0;; 298#ifndef WIN32; 299 hropen(fLun,PASSCHAR(topdir),PASSCHAR(fname),PASSCHAR(""p""),lrecl,ier,strlen(topdir),strlen(fname),1);; 300#else; 301 hropen(fLun,PASSCHAR(topdir),PASSCHAR(fname),PASSCHAR(""p""),lrecl,ier);; 302#endif; 303 fLrecl = lrecl;; 304 SetTitle(topdir);; 305 snprintf(topdir,19,""//lun%d"",fLun);; 306 fCurDir = topdir;; 307 ; 308 if (ier) printf ("" Error on hropen was %d \n"", ier);; 309 if (quest[0]) {; 310 printf(""Error cannot open input file: %s\n"",fname);; 311 }; 312 if (ier || quest[0]) {; 313 fgLuns[fLun-10]=0;; 314 fLun = 0;; 315 fList = nullptr;; 316 fKeys = nullptr;; 317 MakeZombie();; 318 return;; 319 }; 320 ; 321 gROOT->GetListOfBrowsables()->A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THbookFile_8cxx_source.html:9682,log,logical,9682,doc/master/THbookFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THbookFile_8cxx_source.html,1,['log'],['logical']
Testability,");; 336}; 337 ; 338inline double logNormal(double x, double k, double m0); 339{; 340 return ROOT::Math::lognormal_pdf(x, std::log(m0), std::abs(std::log(k)));; 341}; 342 ; 343inline double logNormalStandard(double x, double sigma, double mu); 344{; 345 return ROOT::Math::lognormal_pdf(x, mu, std::abs(sigma));; 346}; 347 ; 348inline double effProd(double eff, double pdf); 349{; 350 return eff * pdf;; 351}; 352 ; 353inline double nll(double pdf, double weight, int binnedL, int doBinOffset); 354{; 355 if (binnedL) {; 356 // Special handling of this case since std::log(Poisson(0,0)=0 but can't be; 357 // calculated with usual log-formula since std::log(mu)=0. No update of result; 358 // is required since term=0.; 359 if (std::abs(pdf) < 1e-10 && std::abs(weight) < 1e-10) {; 360 return 0.0;; 361 }; 362 if (doBinOffset) {; 363 return pdf - weight - weight * (std::log(pdf) - std::log(weight));; 364 }; 365 return pdf - weight * std::log(pdf) + TMath::LnGamma(weight + 1);; 366 } else {; 367 return -weight * std::log(pdf);; 368 }; 369}; 370 ; 371inline double recursiveFraction(double *a, unsigned int n); 372{; 373 double prod = a[0];; 374 ; 375 for (unsigned int i = 1; i < n; ++i) {; 376 prod *= 1.0 - a[i];; 377 }; 378 ; 379 return prod;; 380}; 381 ; 382inline double cbShape(double m, double m0, double sigma, double alpha, double n); 383{; 384 double t = (m - m0) / sigma;; 385 if (alpha < 0); 386 t = -t;; 387 ; 388 double absAlpha = std::abs((double)alpha);; 389 ; 390 if (t >= -absAlpha) {; 391 return std::exp(-0.5 * t * t);; 392 } else {; 393 double a = std::pow(n / absAlpha, n) * std::exp(-0.5 * absAlpha * absAlpha);; 394 double b = n / absAlpha - absAlpha;; 395 ; 396 return a / std::pow(b - t, n);; 397 }; 398}; 399 ; 400// For RooCBShape; 401inline double approxErf(double arg); 402{; 403 if (arg > 5.0); 404 return 1.0;; 405 if (arg < -5.0); 406 return -1.0;; 407 ; 408 return TMath::Erf(arg);; 409}; 410 ; 411/// @brief Function to calculate the integral of an un-normalized R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MathFuncs_8h_source.html:11533,log,log,11533,doc/master/MathFuncs_8h_source.html,https://root.cern,https://root.cern/doc/master/MathFuncs_8h_source.html,4,['log'],['log']
Testability,");; 360 if (obj) return (Int_t)obj->GetUniqueID();; 361 ; 362 // if labels is not in the list and we have already labels; 363 if (!IsAlphanumeric()) {; 364 // if bins without labels exist or if the axis cannot be set to alphanumeric; 365 if (HasBinWithoutLabel() || !CanBeAlphanumeric() ) {; 366 Info(""FindBin"",""Label %s is not in the list and the axis is not alphanumeric - ignore it"",label);; 367 return -1;; 368 }; 369 else {; 370 Info(""FindBin"",""Label %s not in the list. It will be added to the histogram"",label);; 371 SetCanExtend(kTRUE);; 372 SetAlphanumeric(kTRUE);; 373 }; 374 }; 375 ; 376 //Not yet in the list. Can we extend the axis ?; 377 assert ( CanExtend() && IsAlphanumeric() );; 378 // {; 379 // if (gDebug>0); 380 // Info(""FindBin"",""Label %s is not in the list and the axis cannot be extended - the entry will be added in the underflow bin"",label);; 381 // return 0;; 382 // }; 383 ; 384 Int_t n = fLabels->GetEntries();; 385 ; 386 //may be we have to resize the histogram (doubling number of channels); 387 if (n >= fNbins) ((TH1*)fParent)->LabelsInflate(GetName());; 388 ; 389 //add new label to the list: assign bin number; 390 obj = new TObjString(label);; 391 fLabels->Add(obj);; 392 obj->SetUniqueID(n+1);; 393 return n+1;; 394}; 395 ; 396////////////////////////////////////////////////////////////////////////////////; 397/// Find bin number with label.; 398/// If the List of labels does not exist or the label does not exist just return -1 .; 399/// Do not attempt to modify the axis. This is different than FindBin; 400 ; 401Int_t TAxis::FindFixBin(const char *label) const; 402{; 403 //create list of labels if it does not exist yet; 404 if (!fLabels) return -1;; 405 ; 406 // search for label in the existing list and return it if it exists; 407 TObjString *obj = (TObjString*)fLabels->FindObject(label);; 408 if (obj) return (Int_t)obj->GetUniqueID();; 409 return -1;; 410}; 411 ; 412 ; 413//////////////////////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAxis_8cxx_source.html:12082,assert,assert,12082,doc/master/TAxis_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TAxis_8cxx_source.html,1,['assert'],['assert']
Testability,");; TFile f(""ht.root"",""recreate"");; auto T = new TTree(""T"",""test"");; auto hpx = new TH1F(""hpx"",""This is the px distribution"",100,-4,4);; auto hpxpy = new TH2F(""hpxpy"",""py vs px"",40,-4,4,40,-4,4);; auto hprof = new TProfile(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);; T->Branch(""hpx"",""TH1F"",&hpx,32000,0);; T->Branch(""hpxpy"",""TH2F"",&hpxpy,32000,0);; T->Branch(""hprof"",""TProfile"",&hprof,32000,0);; Float_t px, py, pz;; for (Int_t i = 0; i < 25000; i++) {; if (i%1000 == 0) printf(""at entry: %d\n"",i);; gRandom->Rannor(px,py);; pz = px*px + py*py;; hpx->Fill(px);; hpxpy->Fill(px,py);; hprof->Fill(px,pz);; T->Fill();; }; T->Print();; f.Write();; gBenchmark->Show(""hsimple"");; }; ; void htr1() {; // Connect Tree generated by htw and show histograms for entry 12345; auto f = new TFile(""ht.root"");; auto T = (TTree*)f->Get(""T"");; TH1F *hpx = nullptr;; TH2F *hpxpy = nullptr;; TProfile *hprof = nullptr;; T->SetBranchAddress(""hpx"",&hpx);; T->SetBranchAddress(""hpxpy"",&hpxpy);; T->SetBranchAddress(""hprof"",&hprof);; T->GetEntry(12345);; auto c1 = new TCanvas(""c1"",""test"",10,10,600,1000);; c1->Divide(1,3);; c1->cd(1);; hpx->Draw();; c1->cd(2);; hpxpy->Draw();; c1->cd(3);; hprof->Draw();; c1->Print(""htr1.png"");; }; ; void htr2() {; // Connect Tree generated by htw and show histograms for entry 12345; // a variant of htr1; auto f = new TFile(""ht.root"");; auto T = (TTree*)f->Get(""T"");; auto c1 = new TCanvas(""c1"",""test"",10,10,600,1000);; c1->Divide(1,3);; c1->cd(1);; T->Draw(""hpx.Draw()"","""",""goff"",1,12345);; c1->cd(2);; T->Draw(""hpxpy.Draw()"","""",""goff"",1,12345);; c1->cd(3);; T->Draw(""hprof.Draw()"","""",""goff"",1,12345);; c1->Print(""htr2.png"");; }; ; void htr3() {; // Connect Tree generated by htw; // read all histograms and plot the RMS of hpx versus the Mean of hprof; // for each of the 25000 entries; auto f = new TFile(""ht.root"");; auto T = (TTree*)f->Get(""T"");; auto c1 = new TCanvas(""c1"",""test"",10,10,600,400);; T->Draw(""hpx.GetRMS():hprof.GetMean()"");; c1->Print(""htr3.png"");; }; ; void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/htest_8C.html:1649,test,test,1649,doc/master/htest_8C.html,https://root.cern,https://root.cern/doc/master/htest_8C.html,1,['test'],['test']
Testability,");; cutg->SetVarX(""y"");; cutg->SetVarY(""x"");; cutg->SetPoint(0,-0.3586207,1.509534);; cutg->SetPoint(1,-1.894181,-0.529661);; cutg->SetPoint(2,0.07780173,-1.21822);; cutg->SetPoint(3,-1.0375,-0.07944915);; cutg->SetPoint(4,0.756681,0.1853814);; cutg->SetPoint(5,-0.3586207,1.509534);; TCutG::TCutGTCutG()TCutG default constructor.Definition TCutG.cxx:99; TCutG::SetVarYvirtual void SetVarY(const char *vary)Set Y variable.Definition TCutG.cxx:412; TCutG::SetVarXvirtual void SetVarX(const char *varx)Set X variable.Definition TCutG.cxx:402; TGraph::SetPointvirtual void SetPoint(Int_t i, Double_t x, Double_t y)Set x and y values for point number i.Definition TGraph.cxx:2342; Example of use of a TCutG in TTree::Draw: tree.Draw(""x:y"",""mycutg && z>0 && sqrt(x)>1""); A Graphical cut may be drawn via TGraph::Draw. It can be edited like a normal TGraph. Being a TGraph the drawing options and behavior relatives to graphs apply. They are listed in the TGraphPainter description. See in particular ""Graphs in logarithmic scale"".; A Graphical cut may be saved to a file via TCutG::Write. ; Definition at line 20 of file TCutG.h. Public Member Functions;  TCutG ();  TCutG default constructor. ;  ;  TCutG (const char *name, Int_t n, const Double_t *x, const Double_t *y);  TCutG normal constructor. ;  ;  TCutG (const char *name, Int_t n, const Float_t *x, const Float_t *y);  TCutG normal constructor. ;  ;  TCutG (const char *name, Int_t n=0);  TCutG normal constructor. ;  ;  TCutG (const TCutG &cutg);  TCutG copy constructor. ;  ;  ~TCutG () override;  TCutG destructor. ;  ; virtual Double_t Area () const;  Compute the area inside this TCutG The algorithm uses Stoke's theorem over the border of the closed polygon. ;  ; virtual void Center (Double_t &cx, Double_t &cy) const;  Compute the center x,y of this TCutG The algorithm uses Stoke's theorem over the border of the closed polygon. ;  ; TObject * GetObjectX () const;  ; TObject * GetObjectY () const;  ; const char * GetVarX () const;  ; co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCutG.html:3446,log,logarithmic,3446,doc/master/classTCutG.html,https://root.cern,https://root.cern/doc/master/classTCutG.html,1,['log'],['logarithmic']
Testability,");; let tree = await file.readObject(""ntuple;1"");; draw(""drawing"", tree, ""px:py::pz>5"");; To get access to selected branches, one should use TSelector class:; import { openFile } from 'https://root.cern/js/latest/modules/io.mjs';; import { draw } from 'https://root.cern/js/latest/modules/draw.mjs';; import { TSelector, treeProcess } from 'https://root.cern/js/latest/modules/tree.mjs';. let file = await openFile(""https://root.cern/js/files/hsimple.root"");; let tree = await file.readObject(""ntuple;1"");; let selector = new TSelector();. selector.AddBranch(""px"");; selector.AddBranch(""py"");. let cnt = 0, sumpx = 0, sumpy = 0;. selector.Begin = function() {; // function called before reading of TTree starts; }. selector.Process = function() {; // function called for every entry; sumpx += this.tgtobj.px;; sumpy += this.tgtobj.py;; cnt++;; }. selector.Terminate = function(res) {; if (!res || (cnt === 0)) return;; let meanpx = sumpx/cnt, meanpy = sumpy/cnt;; console.log(`Results meanpx = ${meanpx} meanpy = ${meanpy}`);; }. await treeProcess(tree, selector);; Here is running example and source code; This examples shows how read TTree from binary file and create TSelector object. Logically it is similar to original TSelector class - for every read entry TSelector::Process() method is called. Selected branches can be accessed from tgtobj data member. At the end of tree reading TSelector::Terminate() method will be called.; As third parameter of treeProcess() function one could provide object with arguments; let args = { numentries: 1000, firstentry: 500 };; treeProcess(tree, selector, args);; 1.11.6 TGeo API; Any supported TGeo object can be drawn directly with normal draw() function.; If necessary, one can create three.js model for supported object directly and use such model separately. This can be done with the function:; import { build } from './path_to_jsroot/modules/geom/TGeoPainter.mjs';; let opt = { numfaces: 100000 };; let obj3d = build(obj, opt);; scene.add( obj3d );; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html:29806,log,log,29806,root/htmldoc/guides/JSROOT/JSROOT.html,https://root.cern,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html,1,['log'],['log']
Testability,");; myErf2->SetParameter(1, 3.);; myErf2->SetParameter(2, 0.8);; myErf2->Draw();. Try out what happens when you change the values for 5, 3 and 0.8 (simply by calling myErf2->SetParameter(...);)!; Fitting a TF1; Now that we have a nice TF1 we can fit it to the TEfficiency object by calling eff->Fit(). Here is the complete code you need to add to the end of effX():; ...; void effX() {; ...; auto effErf = [](double* x, double* p) {; return (TMath::Erf((x[0] - p[0]) / p[1]) + 1) / 2. * p[2];; };. TF1* myErf = new TF1(""myErf"", effErf, 0., 10., 3);; myErf->SetParameter(0, 5.);; myErf->SetParameter(1, 5.);; myErf->SetParameter(2, 1.);. eff->Fit(myErf);; }. Parameter Initialization and Fitting; You must initialize the parameters to sensible values - this is especially important for higher dimensional fits, e.g. with a TF2. Fitting is magic, but only within limits. Try with completely bogus parameters and you'll see how the fit fails!; . ‹ 8. Efficiency Calculation; up; 10. Go Parallel! ›. Navigate through this book; 0. Setting up ROOT; 1. Extracting an object from a TFile; 2. Running code in ROOT; 4. Histogramming; 3. Examining a TTree's data; 5. Fitting; 6. Multivariate Analysis; 7. Using the TTreeReader; 8. Efficiency Calculation; 9. Fitting By Coding; 10. Go Parallel!; TutorialSelector.C; 11. Done!. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/9-fitting-coding.html:4799,test,tests,4799,d/9-fitting-coding.html,https://root.cern,https://root.cern/d/9-fitting-coding.html,1,['test'],['tests']
Testability,")Round to nearest integer. Rounds half integers to the nearest even integer.Definition TMath.h:693; TMath::BinomialIDouble_t BinomialI(Double_t p, Int_t n, Int_t k)Suppose an event occurs with probability p per trial Then the probability P of its occurring k or mor...Definition TMath.cxx:2141; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::VavilovDouble_t Vavilov(Double_t x, Double_t kappa, Double_t beta2)Returns the value of the Vavilov probability density function.Definition TMath.cxx:2778; TMath::BinomialDouble_t Binomial(Int_t n, Int_t k)Calculates the binomial coefficient n over k.Definition TMath.cxx:2111; TMath::NormalizeFloat_t Normalize(Float_t v[3])Normalize a vector v in place.Definition TMath.cxx:518; TMath::ProbDouble_t Prob(Double_t chi2, Int_t ndf)Computation of the probability for a certain Chi-squared (chi2) and number of degrees of freedom (ndf...Definition TMath.cxx:637; TMath::Log2Double_t Log2(Double_t x)Returns the binary (base-2) logarithm of x.Definition TMath.cxx:107; TMath::BesselK1Double_t BesselK1(Double_t x)Modified Bessel function I_1(x)Definition TMath.cxx:1529; TMath::BubbleHighvoid BubbleHigh(Int_t Narr, Double_t *arr1, Int_t *arr2)Bubble sort variant to obtain the order of an array's elements into an index in order to do more usef...Definition TMath.cxx:1314; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; TMath::BesselI1Double_t BesselI1(Double_t x)Modified Bessel function K_0(x)Definition TMath.cxx:1494; TMath::ErfDouble_t Erf(Double_t x)Computation of the error function erf(x).Definition TMath.cxx:190; TMath::PermuteBool_t Permute(Int_t n, Int_t *a)Simple recursive algorithm to find the permutations of n natural numbers, not necessarily all distinc...Definition TMath.cxx:2557; TMath::QuietNaNDouble_t QuietNaN()Returns a quiet NaN as defined by IEEE 754.Definition TMath.h:902; TMath",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8cxx_source.html:121540,log,logarithm,121540,doc/master/TMath_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMath_8cxx_source.html,1,['log'],['logarithm']
Testability,")TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Float_t*fATreeEventevent variables; Int_tfATreeTypetype of event (=classIndex); Float_tfATreeWeightweight of the event; TMVA::Types::EAnalysisTypefAnalysisType! the training type; TMVA::Factory::DataAssignTypefDataAssignType! flags for data assigning; TMVA::DataInputHandler*fDataInputHandler; TMVA::DataSetManager*fDataSetManagerDSMTEST; vector<TMVA::VariableTransformBase*>fDefaultTrfs! list of transformations on default DataSet; TStringfJobName! jobname, used as extension in weight file names; TMVA::Factory::MVectorfMethods! all MVA methods; TStringfOptions! option string given by construction (presently only ""V""); vector<TTree*>fTestAssignTree! for each class: tmp tree if user wants to assign the events directly; vector<TTree*>fTrainAssignTree! for each class: tmp tree if user wants to assign the events directly; TStringfTransformations! List of transformations to test; Bool_tfVerbose! verbose mode; static TFile*fgTargetFile! ROOT output file; static TMVA::Factory::DataAssignTypekAssignEvents; static TMVA::Factory::DataAssignTypekAssignTrees; static TMVA::Factory::DataAssignTypekUndefined. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: L. Moneta Fri Dec 22 14:43:33 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 15:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__Factory.html:13018,test,test,13018,root/html602/TMVA__Factory.html,https://root.cern,https://root.cern/root/html602/TMVA__Factory.html,1,['test'],['test']
Testability,")TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Float_t*fATreeEventevent variables; Int_tfATreeTypetype of event (=classIndex); Float_tfATreeWeightweight of the event; TMVA::Types::EAnalysisTypefAnalysisType! the training type; TMVA::Factory::DataAssignTypefDataAssignType! flags for data assigning; TMVA::DataInputHandler*fDataInputHandler; TMVA::DataSetManager*fDataSetManagerDSMTEST; vector<TMVA::VariableTransformBase*>fDefaultTrfs! list of transformations on default DataSet; TStringfJobName! jobname, used as extension in weight file names; TMVA::Factory::MVectorfMethods! all MVA methods; TStringfOptions! option string given by construction (presently only ""V""); vector<TTree*>fTestAssignTree! for each class: tmp tree if user wants to assign the events directly; vector<TTree*>fTrainAssignTree! for each class: tmp tree if user wants to assign the events directly; TStringfTransformations! List of transformations to test; Bool_tfVerbose! verbose mode; static TFile*fgTargetFile! ROOT output file; static TMVA::Factory::DataAssignTypekAssignEvents; static TMVA::Factory::DataAssignTypekAssignTrees; static TMVA::Factory::DataAssignTypekUndefined. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: L. Moneta Fri Dec 22 14:43:33 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__Factory.html:13018,test,test,13018,root/html604/TMVA__Factory.html,https://root.cern,https://root.cern/root/html604/TMVA__Factory.html,1,['test'],['test']
Testability,"* > * fVarPdfBreference PDFs (background)Definition MethodCuts.h:210; TMVA::MethodCuts::fEffMethodEEffMethod fEffMethodchosen efficiency calculation methodDefinition MethodCuts.h:170; TMVA::MethodCuts::fTmpCutMinDouble_t * fTmpCutMintemporary minimum requirementDefinition MethodCuts.h:186; TMVA::MethodCuts::GetMvaValueDouble_t GetMvaValue(Double_t *err=nullptr, Double_t *errUpper=nullptr)cut evaluation: returns 1.0 if event passed, 0.0 otherwiseDefinition MethodCuts.cxx:432; TMVA::MethodCuts::GetSeparationDouble_t GetSeparation(PDF *=nullptr, PDF *=nullptr) constcompute ""separation"" defined asDefinition MethodCuts.h:101; TMVA::MethodCuts::fCutMinDouble_t ** fCutMinminimum requirementDefinition MethodCuts.h:184; TMVA::MethodCuts::fVarHistSstd::vector< TH1 * > * fVarHistSreference histograms (signal)Definition MethodCuts.h:205; TMVA::MethodCuts::fRmsBstd::vector< Double_t > * fRmsBRMSs of variables (background)Definition MethodCuts.h:200; TMVA::MethodCuts::fEffSMaxDouble_t fEffSMaxused to test optimized signal efficiencyDefinition MethodCuts.h:174; TMVA::MethodCuts::EFitParametersEFitParametersDefinition MethodCuts.h:161; TMVA::MethodCuts::kForceMax@ kForceMaxDefinition MethodCuts.h:163; TMVA::MethodCuts::kNotEnforced@ kNotEnforcedDefinition MethodCuts.h:161; TMVA::MethodCuts::kForceMin@ kForceMinDefinition MethodCuts.h:162; TMVA::MethodCuts::kForceSmart@ kForceSmartDefinition MethodCuts.h:164; TMVA::MethodCuts::fVarHistB_smoothstd::vector< TH1 * > * fVarHistB_smoothsmoothed reference histograms (background)Definition MethodCuts.h:208; TMVA::MethodCuts::GetmuTransformDouble_t GetmuTransform(TTree *)Definition MethodCuts.h:103; TMVA::MethodCuts::fVarPdfSstd::vector< PDF * > * fVarPdfSreference PDFs (signal)Definition MethodCuts.h:209; TMVA::MethodCuts::GetEffsfromSelectionvoid GetEffsfromSelection(Double_t *cutMin, Double_t *cutMax, Double_t &effS, Double_t &effB)compute signal and background efficiencies from event counting for given cut sampleDefinition MethodCuts.cx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8h_source.html:16414,test,test,16414,doc/master/MethodCuts_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8h_source.html,1,['test'],['test']
Testability,"* TMVA::DataSet::GetEvent ; (; Long64_t ; ievt); const. inline . Definition at line 73 of file DataSet.h. ◆ GetEvent() [3/3]. const Event * TMVA::DataSet::GetEvent ; (; Long64_t ; ievt, . Types::ETreeType ; type . ); const. inline . Definition at line 76 of file DataSet.h. ◆ GetEventCollection(). const std::vector< TMVA::Event * > & TMVA::DataSet::GetEventCollection ; (; Types::ETreeType ; type = Types::kMaxTreeType); const. inline . Definition at line 216 of file DataSet.h. ◆ GetEventCollectionAsTree(). const TTree * TMVA::DataSet::GetEventCollectionAsTree ; (; ). ◆ GetNClassEvents(). Long64_t TMVA::DataSet::GetNClassEvents ; (; Int_t ; type, . UInt_t ; classNumber . ). Definition at line 168 of file DataSet.cxx. ◆ GetNEvents(). Long64_t TMVA::DataSet::GetNEvents ; (; Types::ETreeType ; type = Types::kMaxTreeType); const. inline . Definition at line 206 of file DataSet.h. ◆ GetNEvtBkgdTest(). Long64_t TMVA::DataSet::GetNEvtBkgdTest ; (; ). return number of background test events in dataset ; Definition at line 435 of file DataSet.cxx. ◆ GetNEvtBkgdTrain(). Long64_t TMVA::DataSet::GetNEvtBkgdTrain ; (; ). return number of background training events in dataset ; Definition at line 451 of file DataSet.cxx. ◆ GetNEvtSigTest(). Long64_t TMVA::DataSet::GetNEvtSigTest ; (; ). return number of signal test events in dataset ; Definition at line 427 of file DataSet.cxx. ◆ GetNEvtSigTrain(). Long64_t TMVA::DataSet::GetNEvtSigTrain ; (; ). return number of signal training events in dataset ; Definition at line 443 of file DataSet.cxx. ◆ GetNSpectators(). UInt_t TMVA::DataSet::GetNSpectators ; (; ); const. access the number of targets through the datasetinfo ; Definition at line 232 of file DataSet.cxx. ◆ GetNTargets(). UInt_t TMVA::DataSet::GetNTargets ; (; ); const. access the number of targets through the datasetinfo ; Definition at line 224 of file DataSet.cxx. ◆ GetNTestEvents(). Long64_t TMVA::DataSet::GetNTestEvents ; (; ); const. inline . Definition at line 69 of file Da",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataSet.html:20793,test,test,20793,doc/master/classTMVA_1_1DataSet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSet.html,1,['test'],['test']
Testability,"* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsTestStatistic::offset() const; virtual Double_tRooAbsTestStatistic::offsetCarry() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooChi2Var&operator=(const RooChi2Var&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooChi2Var.html:20375,test,testArg,20375,root/html602/RooChi2Var.html,https://root.cern,https://root.cern/root/html602/RooChi2Var.html,2,['test'],['testArg']
Testability,"* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tok() const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFormulaVar.html:17913,test,testArg,17913,root/html526/RooFormulaVar.html,https://root.cern,https://root.cern/root/html526/RooFormulaVar.html,2,['test'],['testArg']
Testability,"* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsCachedReal.html:17583,test,testArg,17583,root/html526/RooAbsCachedReal.html,https://root.cern,https://root.cern/root/html526/RooAbsCachedReal.html,92,['test'],['testArg']
Testability,"* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Int_torder() const; Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooDerivative.html:17296,test,testArg,17296,root/html526/RooDerivative.html,https://root.cern,https://root.cern/root/html526/RooDerivative.html,2,['test'],['testArg']
Testability,"* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* fram",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsOptTestStatistic.html:18156,test,testArg,18156,root/html526/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html526/RooAbsOptTestStatistic.html,12,['test'],['testArg']
Testability,"* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; Bool_tok() const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooFormulaVar.html:18280,test,testArg,18280,root/html530/RooFormulaVar.html,https://root.cern,https://root.cern/root/html530/RooFormulaVar.html,2,['test'],['testArg']
Testability,"* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsCachedReal.html:17950,test,testArg,17950,root/html530/RooAbsCachedReal.html,https://root.cern,https://root.cern/root/html530/RooAbsCachedReal.html,91,['test'],['testArg']
Testability,"* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Int_torder() const; Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooDerivative.html:17663,test,testArg,17663,root/html530/RooDerivative.html,https://root.cern,https://root.cern/root/html530/RooDerivative.html,2,['test'],['testArg']
Testability,"* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsOptTestStatistic.html:18525,test,testArg,18525,root/html530/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html530/RooAbsOptTestStatistic.html,9,['test'],['testArg']
Testability,"* n = NULL); virtual TMVA::Node*CreateNode(UInt_t size = 0) const; virtual TMVA::BinaryTree*CreateTree() const; TMVA::Node*GetLeftDaughter(TMVA::Node* n); UInt_tGetNNodes() const; TMVA::Node*GetRightDaughter(TMVA::Node* n); virtual TMVA::Node*GetRoot() const; UInt_tGetTotalTreeDepth() const; virtual TClass*IsA() const; TMVA::BinaryTree&operator=(const TMVA::BinaryTree&); virtual voidPrint(ostream& os) const; virtual voidRead(istream& istr, UInt_t tmva_Version_Code = TMVA_VERSION_CODE); virtual voidReadXML(void* node, UInt_t tmva_Version_Code = TMVA_VERSION_CODE); voidSetRoot(TMVA::Node* r); voidSetTotalTreeDepth(Int_t depth); voidSetTotalTreeDepth(TMVA::Node* n = NULL); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidDeleteNode(TMVA::Node*); TMVA::MsgLogger&Log() const. Data Members; protected:. UInt_tfDepthmaximal depth in tree reached; UInt_tfNNodestotal number of nodes in the tree (counted); TMVA::Node*fRootthe root node of the tree; static TMVA::MsgLogger*fgLoggermessage logger, static to save resources . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~BinaryTree( void ); destructor (deletes the nodes and ""events"" if owned by the tree. void DeleteNode(TMVA::Node* ); protected, recursive, function used by the class destructor and when Pruning. TMVA::Node* GetLeftDaughter(TMVA::Node* n); get left daughter node current node ""n"". TMVA::Node* GetRightDaughter(TMVA::Node* n); get right daughter node current node ""n"". UInt_t CountNodes(TMVA::Node* n = NULL); return the number of nodes in the tree. (make a new count --> takes time). void Print(ostream& os) const; recursively print the tree. void* AddXMLTo(void* parent) const; add attributes to XML. void ReadXML(void* node, UInt_t tmva_Version_Code = TMVA_VERSION_CODE); read attributes from XML. void Read(istream& istr, UInt_t tmva_Version_Code = TMVA_VERSION_CODE); Read the binary tree from an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__BinaryTree.html:1741,log,logger,1741,root/html528/TMVA__BinaryTree.html,https://root.cern,https://root.cern/root/html528/TMVA__BinaryTree.html,3,['log'],['logger']
Testability,"* n); TMVA::MsgLogger&Log() const; voidOptimize(TMVA::DecisionTree* dt, Double_t weights). Data Members; protected:. Double_tTMVA::IPruneTool::B; Double_tTMVA::IPruneTool::S; Double_tTMVA::IPruneTool::fPruneStrength. private:. TMVA::MsgLogger*fLogger! output stream to save logging information; Int_tfOptimalK! the optimal index of the prune sequence; vector<TMVA::DecisionTreeNode*>fPruneSequence! map of weakest links (i.e., branches to prune) -> pruning index; vector<Double_t>fPruneStrengthList! map of alpha -> pruning index; vector<Double_t>fQualityIndexList! map of R(T) -> pruning index; TMVA::SeparationBase*fQualityIndexTool! the quality index used to calculate R(t), R(T) = sum[t in ~T]{ R(t) }. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CostComplexityPruneTool( SeparationBase* qualityIndex ); the constructor for the cost complexity prunig. ~CostComplexityPruneTool(); the destructor for the cost complexity prunig. CalculatePruningInfo(TMVA::DecisionTree* dt, const TMVA::IPruneTool::EventSample* testEvents = __null, Bool_t isAutomatic = kFALSE). void InitTreePruningMetaData(TMVA::DecisionTreeNode* n); initialise ""meta data"" for the pruning, like the ""costcomplexity"", the; critical alpha, the minimal alpha down the tree, etc... for each node!!. void Optimize(TMVA::DecisionTree* dt, Double_t weights); after the critical alpha values (at which the corresponding nodes would; be pruned away) had been established in the ""InitMetaData"" we need now:; automatic pruning:; find the value of ""alpha"" for which the test sample gives minimal error,; on the tree with all nodes pruned that have alpha_critital < alpha,; fixed parameter pruning. CostComplexityPruneTool( SeparationBase* qualityIndex = NULL ). » Last changed: Tue Jun 30 15:15:25 2015 » Last generated: 2015-06-30 15:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__CostComplexityPruneTool.html:2280,test,testEvents,2280,root/html602/TMVA__CostComplexityPruneTool.html,https://root.cern,https://root.cern/root/html602/TMVA__CostComplexityPruneTool.html,2,['test'],"['test', 'testEvents']"
Testability,"* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. boolDoCheckInputs() const; voidRunToys(vector<double>& bVals, vector<double>& sbVals, unsigned int nToys, bool usePriors) const. Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. RooAbsPdf*fBModelThe pdf of the background model; RooAbsData*fDatapointer to the data sets ; boolfGenerateBinnedFlag to control binned generation; unsigned intfNToysnumber of Toys MC; const RooArgSet*fNuisanceParametersCollection of the nuisance parameters in the model; RooArgList*fObservablesCollection of the observables of the model; RooAbsPdf*fPriorPdfPrior PDF of the nuisance parameters; RooAbsPdf*fSbModelThe pdf of the signal+background model; unsigned intfTestStatisticsIdxIndex of the test statistics to use; boolfTmpDoExtended; boolfUsePriorPdfuse a prior for nuisance parameters . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HybridCalculatorOriginal(const char* name = 0); constructor with name and title; set default parameters. HybridCalculatorOriginal(RooAbsPdf& sb_model, RooAbsPdf& b_model, RooArgList& observables, const RooArgSet* nuisance_parameters = 0, RooAbsPdf* prior_pdf = 0, bool GenerateBinned = false, int testStatistics = 1, int ntoys = 1000); HybridCalculatorOriginal constructor without specifying a data set; the user need to specify the models in the S+B case and B-only case,; the list of observables of the model(s) (for MC-generation), the list of parameters; that are marginalised and the prior distribution of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HybridCalculatorOriginal.html:10260,test,test,10260,root/html528/RooStats__HybridCalculatorOriginal.html,https://root.cern,https://root.cern/root/html528/RooStats__HybridCalculatorOriginal.html,4,['test'],['test']
Testability,"* name, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2); Default constructor specifying minimum and maximum radius. TGeoTubeSeg(Double_t* params); Default constructor specifying minimum and maximum radius; param[0] = Rmin; param[1] = Rmax; param[2] = dz; param[3] = phi1; param[4] = phi2. ~TGeoTubeSeg(); destructor. Double_t Capacity() const; Computes capacity of the shape in [length^3]. Double_t Capacity(Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2); Computes capacity of the shape in [length^3]. void ComputeBBox(); compute bounding box of the tube segment. void ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. void ComputeNormalS(Double_t* point, Double_t* dir, Double_t* norm, Double_t rmin, Double_t rmax, Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2); Compute normal to closest surface from POINT. Bool_t Contains(Double_t* point) const; test if point is inside this tube segment; first check if point is inside the tube. Int_t DistancetoPrimitive(Int_t px, Int_t py); compute closest distance from point px,py to each corner. Double_t DistFromInsideS(Double_t* point, Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2, Double_t cm, Double_t sm, Double_t cdfi); Compute distance from inside point to surface of the tube segment (static); Boundary safe algorithm.; Do Z. Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to surface of the tube segment; Boundary safe algorithm. Double_t DistFromOutsideS(Double_t* point, Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2, Double_t cm, Double_t sm, Double_t cdfi); Static method to compute distance to arbitrary tube segment from outside point; Boundary safe algorithm. Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoTubeSeg.html:14185,test,test,14185,root/html528/TGeoTubeSeg.html,https://root.cern,https://root.cern/root/html528/TGeoTubeSeg.html,3,['test'],['test']
Testability,"* options = """"); Paint the parallel coordinates graph. void PaintEntries(TParallelCoordSelect* sel = __null); Loop over the entries and paint them. void RemoveVariable(TParallelCoordVar* var); Delete a variable from the graph. TParallelCoordVar* RemoveVariable(const char* var); Delete the variable ""vartitle"" from the graph. void ResetTree(); Reset the tree entry list to the initial one.. void SaveEntryLists(const char* filename = """", Bool_t overwrite = kFALSE); Save the entry lists in a root file ""filename.root"". void SavePrimitive(ostream& out, Option_t* options); Save the TParallelCoord in a macro. void SaveTree(const char* filename = """", Bool_t overwrite = kFALSE); Save the tree in a file if fTreeFileName == """". void SetAxesPosition(); Update the position of the axes. void SetAxisHistogramBinning(Int_t n = 100); Set the same histogram axis binning for all axis. void SetAxisHistogramHeight(Double_t h = 0.5); Set the same histogram axis height for all axis. void SetGlobalLogScale(Bool_t ); All axes in log scale. void SetGlobalScale(Bool_t gl); Constraint all axes to the same scale. void SetAxisHistogramLineWidth(Int_t lw = 2); Set the same histogram axis line width for all axis. void SetCandleChart(Bool_t can); Set a candle chart display. void SetCurrentFirst(Long64_t ); Set the first entry to be dispayed. void SetCurrentN(Long64_t ); Set the number of entry to be displayed. TParallelCoordSelect* SetCurrentSelection(const char* title); Set the selection beeing edited. void SetCurrentSelection(TParallelCoordSelect* sel); Set the selection beeing edited. void SetDotsSpacing(Int_t s = 0); Set dots spacing. Modify the line style 11.; If the canvas support transparency dot spacing is ignored. void SetEntryList(TParallelCoord* para, TEntryList* enlist); Set the entry lists of ""para"". void SetGlobalMax(Double_t max); Force all variables to adopt the same max. void SetGlobalMin(Double_t min); Force all variables to adopt the same min. void SetLiveRangesUpdate(Bool_t ); If ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TParallelCoord.html:16763,log,log,16763,root/html602/TParallelCoord.html,https://root.cern,https://root.cern/root/html602/TParallelCoord.html,2,['log'],['log']
Testability,"* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); MINIMIZER*minimizer(); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; RooAbsReal&nll(); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; Int_tnumEval() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooProfileLL.html:19075,test,testArg,19075,root/html534/RooProfileLL.html,https://root.cern,https://root.cern/root/html534/RooProfileLL.html,1,['test'],['testArg']
Testability,"* u, Int_t flag); Minimization function for H1s using a Chisquare method; Default method (function evaluated at center of bin); for each point the cache contains the following info; -1D : bc,e, xc (bin content, error, x of center of bin); -2D : bc,e, xc,yc; -3D : bc,e, xc,yc,zc. void FitChisquareI(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Chisquare method; The ""I""ntegral method is used; for each point the cache contains the following info; -1D : bc,e, xc,xw (bin content, error, x of center of bin, x bin width of bin); -2D : bc,e, xc,xw,yc,yw; -3D : bc,e, xc,xw,yc,yw,zc,zw. void FitLikelihood(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Likelihood method*-*-*-*-*-*; Basically, it forms the likelihood by determining the Poisson; probability that given a number of entries in a particular bin,; the fit would predict it's value. This is then done for each bin,; and the sum of the logs is taken as the likelihood.; Default method (function evaluated at center of bin); for each point the cache contains the following info; -1D : bc,e, xc (bin content, error, x of center of bin); -2D : bc,e, xc,yc; -3D : bc,e, xc,yc,zc. void FitLikelihoodI(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Likelihood method*-*-*-*-*-*; Basically, it forms the likelihood by determining the Poisson; probability that given a number of entries in a particular bin,; the fit would predict it's value. This is then done for each bin,; and the sum of the logs is taken as the likelihood.; The ""I""ntegral method is used; for each point the cache contains the following info; -1D : bc,e, xc,xw (bin content, error, x of center of bin, x bin width of bin); -2D : bc,e, xc,xw,yc,yw; -3D : bc,e, xc,xw,yc,yw,zc,zw. TFitter(const TFitter& ). TFitter& operator=(const TFitter& ). TMinuit * GetMinuit() const; {return fMinuit;}. » Author: Rene ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFitter.html:16252,log,logs,16252,root/html528/TFitter.html,https://root.cern,https://root.cern/root/html528/TFitter.html,6,['log'],['logs']
Testability,"*)h->GetListOfFunctions()->FindObject(name);; or TF1 *f1 = h->GetFunction(name);; Associated functions are automatically painted when an histogram is drawn. To avoid the painting of the associated functions the option HIST should be added to the list of the options used to paint the histogram. Drawing using OpenGL; The class TGLHistPainter allows to paint data set using the OpenGL 3D graphics library. The plotting options start with GL keyword. In addition, in order to inform canvases that OpenGL should be used to render 3D representations, the following option should be set: gStyle->SetCanvasPreferGL(true);; General information: plot types and supported options; The following types of plots are provided:; For lego plots the supported options are:. Option Description . ""GLLEGO"" Draw a lego plot. It works also for TH2Poly. . ""GLLEGO2"" Bins with color levels. . ""GLLEGO3"" Cylindrical bars. . Lego painter in cartesian supports logarithmic scales for X, Y, Z. In polar only Z axis can be logarithmic, in cylindrical only Y.; For surface plots (TF2 and TH2) the supported options are:. Option Description . ""GLSURF"" Draw a surface. . ""GLSURF1"" Surface with color levels . ""GLSURF2"" The same as ""GLSURF1"" but without polygon outlines. . ""GLSURF3"" Color level projection on top of plot (works only in cartesian coordinate system). . ""GLSURF4"" Same as ""GLSURF"" but without polygon outlines. . The surface painting in cartesian coordinates supports logarithmic scales along X, Y, Z axis. In polar coordinates only the Z axis can be logarithmic, in cylindrical coordinates only the Y axis.; Additional options to SURF and LEGO - Coordinate systems:. Option Description . "" "" Default, cartesian coordinates system. . ""POL"" Polar coordinates system. . ""CYL"" Cylindrical coordinates system. . ""SPH"" Spherical coordinates system. . TH3 as color boxes; The supported option is:. Option Description . ""GLCOL"" H3 is drawn using semi-transparent colored boxes. See $ROOTSYS/tutorials/gl/glvox1.C. . TH3 as",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:124024,log,logarithmic,124024,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,1,['log'],['logarithmic']
Testability,"*/; 524 void BinData::Add( const double* x, double val, double eval ); 525 {; 526 assert( kValueError == fErrorType );; 527 assert( !fData.empty() && fDataPtr );; 528 assert( fDataErrorHigh.empty() && !fDataErrorHighPtr );; 529 assert( fDataErrorLow.empty() && !fDataErrorLowPtr );; 530 assert( !fDataError.empty() && fDataErrorPtr );; 531 assert( fCoordErrors.empty() && fCoordErrorsPtr.empty() );; 532 ; 533 fData[ fNPoints ] = val;; 534 fDataError[ fNPoints ] = (eval != 0.0) ? 1.0/eval : 0.0;; 535 ; 536 FitData::Add( x );; 537 fSumContent += val;; 538 if (val != 0 || eval != 1.0) fSumError2 += eval*eval;; 539 if (!fIsWeighted); 540 if (val != 0 && std::abs( eval*eval/val - 1.0) > 1.E-12) fIsWeighted = true;; 541 }; 542 ; 543 /**; 544 add multi-dim coordinate data with both error in coordinates and value; 545 */; 546 void BinData::Add( const double* x, double val, const double* ex, double eval ); 547 {; 548 assert( kCoordError == fErrorType );; 549 assert( !fData.empty() && fDataPtr );; 550 assert( !fDataError.empty() && fDataErrorPtr );; 551 assert( fDataErrorHigh.empty() && !fDataErrorHighPtr );; 552 assert( fDataErrorLow.empty() && !fDataErrorLowPtr );; 553 assert( fCoordErrors.size() == fDim );; 554 assert( fCoordErrorsPtr.size() == fDim );; 555 ; 556 fData[ fNPoints ] = val;; 557 ; 558 for( unsigned int i=0; i<fDim; i++ ); 559 {; 560 assert( &fCoordErrors[i].front() == fCoordErrorsPtr[i] );; 561 ; 562 fCoordErrors[i][ fNPoints ] = ex[i];; 563 }; 564 // in this case we store the y error and not the inverse; 565 fDataError[ fNPoints ] = eval;; 566 ; 567 FitData::Add( x );; 568 fSumContent += val;; 569 if (val != 0 || eval != 1.0) fSumError2 += eval*eval;; 570 if (!fIsWeighted); 571 if (val != 0 && std::abs( eval*eval/val - 1.0) > 1.E-12) fIsWeighted = true;; 572 }; 573 ; 574 /**; 575 add multi-dim coordinate data with both error in coordinates and value; 576 */; 577 void BinData::Add( const double* x, double val, const double* ex, double elval, double ehval ); 578 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:16927,assert,assert,16927,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['assert'],['assert']
Testability,"*TGFrame::fgBckgndGC; static Pixmap_tTGScrollBar::fgBckgndPixmap; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Int_tTGScrollBar::fgScrollBarWidth; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGVScrollBar(const TGWindow* p = 0, UInt_t w = 2, UInt_t h = 4, UInt_t options = kVerticalFrame, Pixel_t back = GetDefaultFrameBackground()); Create a vertical scrollbar. void Layout(); Layout and move vertical scrollbar components. Bool_t HandleButton(Event_t* event); Handle mouse button event in vertical scrollbar. Bool_t HandleMotion(Event_t* event); Handle mouse motion in a vertical scrollbar. void SetRange(Int_t range, Int_t page_size); Set range of vertical scrollbar. void SetPosition(Int_t pos); Set logical slider position of vertical scrollbar. void SavePrimitive(ostream& out, Option_t* option = """"); Save an vertical scrollbar as a C++ statement(s) on output stream out. TGDimension GetDefaultSize() const; { return TGDimension(fWidth, GetScrollBarWidth()); }. virtual ~TGVScrollBar(); { }. » Author: Fons Rademakers 10/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGScrollBar.h 23115 2008-04-10 13:35:37Z rdm $ » Last generated: 2010-09-23 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGVScrollBar.html:20535,log,logical,20535,root/html528/TGVScrollBar.html,https://root.cern,https://root.cern/root/html528/TGVScrollBar.html,1,['log'],['logical']
Testability,"*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearShapeDirty() const; voidclearValueDirty() const; TIterator*clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*Clone(const char* newname = 0) const; virtual RooAbsArg*cloneTree(const char* newname = 0) const; virtual Int_tCompare(const TObject* other) const; virtual voidconstOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidcopyList(TList& dest, const TList& source); static UInt_tcrc32(const char* data); virtual RooAbsArg*createFundamental(const char* newname = 0) const; virtual Int_tdefaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tdependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tdependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tdependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tdependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tdependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tdependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsArg.html:3236,test,testArg,3236,root/html526/RooAbsArg.html,https://root.cern,https://root.cern/root/html526/RooAbsArg.html,3,['test'],['testArg']
Testability,"*f1, Double_t c1=1)Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2),...Definition TH1.cxx:2840; TH1::GetMinimumvirtual Double_t GetMinimum(Double_t minval=-FLT_MAX) constReturn minimum value larger than minval of bins in the range, unless the value has been overridden by...Definition TH1.cxx:8635; TH1::LoggedInconsistencyint LoggedInconsistency(const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) constDefinition TH1.cxx:883; TH1::CheckConsistentSubAxesstatic bool CheckConsistentSubAxes(const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0)Check that two sub axis are the same.Definition TH1.cxx:1640; TH1::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove object from the list of functions.Definition TH1.cxx:6576; TH1::fYaxisTAxis fYaxisY axis descriptor.Definition TH1.h:91; TH1::KolmogorovTestvirtual Double_t KolmogorovTest(const TH1 *h2, Option_t *option="""") constStatistical test of compatibility in shape between this histogram and h2, using Kolmogorov test.Definition TH1.cxx:8178; TH1::GetSumOfWeightsvirtual Double_t GetSumOfWeights() constReturn the sum of weights excluding under/overflows.Definition TH1.cxx:7917; TH1::SmoothArraystatic void SmoothArray(Int_t NN, Double_t *XX, Int_t ntimes=1)Smooth array xx, translation of Hbook routine hsmoof.F.Definition TH1.cxx:6768; TH1::GetCentervirtual void GetCenter(Double_t *center) constFill array with center of bins for 1D histogram Better to use h1.GetXaxis()->GetCenter(center)Definition TH1.cxx:9174; TH1::fPainterTVirtualHistPainter * fPainter! Pointer to histogram painterDefinition TH1.h:112; TH1::SetBinsvirtual void SetBins(Int_t nx, Double_t xmin, Double_t xmax)Redefine x axis parameters.Definition TH1.cxx:8767; TH1::FindFixBinvirtual Int_t FindFixBin(Double_t x, Double_t y=0, Double_t z=0) constReturn Global bin number corresponding to x,y,z.Definition TH1.cxx:3705; TH1::SetBinContentvirtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8h_source.html:83231,test,test,83231,doc/master/TH1_8h_source.html,https://root.cern,https://root.cern/doc/master/TH1_8h_source.html,2,['test'],['test']
Testability,"*f1, Double_t c1=1)Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2),...Definition TH1.cxx:2840; TH1::GetMinimumvirtual Double_t GetMinimum(Double_t minval=-FLT_MAX) constReturn minimum value larger than minval of bins in the range, unless the value has been overridden by...Definition TH1.cxx:8635; TH1::LoggedInconsistencyint LoggedInconsistency(const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) constDefinition TH1.cxx:883; TH1::CheckConsistentSubAxesstatic bool CheckConsistentSubAxes(const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0)Check that two sub axis are the same.Definition TH1.cxx:1640; TH1::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove object from the list of functions.Definition TH1.cxx:6576; TH1::fYaxisTAxis fYaxisY axis descriptor.Definition TH1.h:91; TH1::KolmogorovTestvirtual Double_t KolmogorovTest(const TH1 *h2, Option_t *option="""") constStatistical test of compatibility in shape between this histogram and h2, using Kolmogorov test.Definition TH1.cxx:8178; TH1::GetSumOfWeightsvirtual Double_t GetSumOfWeights() constReturn the sum of weights excluding under/overflows.Definition TH1.cxx:7917; TH1::SmoothArraystatic void SmoothArray(Int_t NN, Double_t *XX, Int_t ntimes=1)Smooth array xx, translation of Hbook routine hsmoof.F.Definition TH1.cxx:6768; TH1::GetCentervirtual void GetCenter(Double_t *center) constFill array with center of bins for 1D histogram Better to use h1.GetXaxis()->GetCenter(center)Definition TH1.cxx:9174; TH1::fPainterTVirtualHistPainter * fPainter! Pointer to histogram painterDefinition TH1.h:112; TH1::SetBinsvirtual void SetBins(Int_t nx, Double_t xmin, Double_t xmax)Redefine x axis parameters.Definition TH1.cxx:8767; TH1::FindFixBinvirtual Int_t FindFixBin(Double_t x, Double_t y=0, Double_t z=0) constReturn Global bin number corresponding to x,y,z.Definition TH1.cxx:3705; TH1::Sumw2virtual void Sum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:458736,test,test,458736,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,2,['test'],['test']
Testability,*fEnabledPackageslist of enabled packages; Bool_tfEndMastertrue for a master in direct contact only with workers; THashList*fGlobalPackageDirListlist of directories containing global packages libs; TStringfGroupgroup the user belongs to; Int_tfGroupIdslave unique id in the active slave group; Int_tfGroupPrioritypriority of group the user belongs to (0 - 100); Int_tfGroupSizesize of the active slave group; Long64_tfHWMBoxSizeHigh-Water-Mark on the sandbox size; Bool_tfIdleTRUE if idle; TIdleTOTimer*fIdleTOTimerTimer used to control children state; TStringfImageimage name of the session; TFileHandler*fInputHandlerInput socket handler; Bool_tfInterruptif true macro execution will be stopped; TStopwatchfLatencymeasures latency of packet requests; FILE*fLogFilelog file; Int_tfLogFileDeslog file descriptor; Long64_tfLogFileMaxSizemax size for log files (enabled if > 0); Int_tfLogLeveldebug logging level; Bool_tfMasterServtrue if we are a master server; Long64_tfMaxBoxSizeMax size of the sandbox; Int_tfMaxQueriesMax number of queries fully kept; Int_tfMergedWorkersNumber of workers merged; TMonitor*fMergingMonitorMonitor for merging sockets; TServerSocket*fMergingSocketSocket used for merging outputs if submerger; Long64_tfMsgSizeHWMHigh-Water-Mark on the size of messages with results; Int_tfNcmdcommand history number; TStringfOrdinalslave ordinal number; TStringfOutputFilepath with the temporary results of the current or last query; TStringfPackageDirdirectory containing packages and user libs; TProofLockPath*fPackageLockpackage dir locker; TVirtualProofPlayer*fPlayeractual player; TStringfPrefixPrefix identifying the node; TProof*fProofPROOF talking to slave servers; Int_tfProtocolprotocol version number; TQueryResultManager*fQMgrQuery-result manager; TMutex*fQMtxTo protect async msg queue; TStringfQueryDirdirectory containing query results and status; TProofLockPath*fQueryLockquery dir locker; Int_tfQuerySeqNumsequential number of the current or last query; TList*fQueue,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofServ.html:19596,sandbox,sandbox,19596,root/html602/TProofServ.html,https://root.cern,https://root.cern/root/html602/TProofServ.html,2,['sandbox'],['sandbox']
Testability,"*n/(m+n))*dn. Accuracy: The function is far too accurate for any imaginable application.; Probabilities less than 10^-15 are returned as zero.; However, remember that the formula is only valid for ""large"" n.; Theta function inversion formula is used for z <= 1. This function was translated by Rene Brun from PROBKL in CERNLIB. Double_t KolmogorovTest(Int_t na, const Double_t* a, Int_t nb, const Double_t* b, Option_t* option); Statistical test whether two one-dimensional sets of points are compatible; with coming from the same parent distribution, using the Kolmogorov test.; That is, it is used to compare two experimental distributions of unbinned data. Input:; a,b: One-dimensional arrays of length na, nb, respectively.; The elements of a and b must be given in ascending order.; option is a character string to specify options; ""D"" Put out a line of ""Debug"" printout; ""M"" Return the Maximum Kolmogorov distance instead of prob. Output:; The returned value prob is a calculated confidence level which gives a; statistical test for compatibility of a and b.; Values of prob close to zero are taken as indicating a small probability; of compatibility. For two point sets drawn randomly from the same parent; distribution, the value of prob should be uniformly distributed between; zero and one.; in case of error the function return -1; If the 2 sets have a different number of points, the minimum of; the two sets is used. Method:; The Kolmogorov test is used. The test statistic is the maximum deviation; between the two integrated distribution functions, multiplied by the; normalizing factor (rdmax*sqrt(na*nb/(na+nb)). Code adapted by Rene Brun from CERNLIB routine TKOLMO (Fred James); (W.T. Eadie, D. Drijard, F.E. James, M. Roos and B. Sadoulet,; Statistical Methods in Experimental Physics, (North-Holland,; Amsterdam 1971) 269-271). Method Improvement by Jason A Detwiler (JADetwiler@lbl.gov). The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop; over the two so",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMath.html:17903,test,test,17903,root/html528/TMath.html,https://root.cern,https://root.cern/root/html528/TMath.html,6,['test'],['test']
Testability,"* Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Results; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; MsgLogger & Log () const;  . Private Attributes; MsgLogger * fLogger;  ! message logger ;  ; std::vector< std::vector< Float_t > > fRegValues;  mva values (Results) ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ResultsRegression.html:10809,log,logger,10809,doc/master/classTMVA_1_1ResultsRegression.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ResultsRegression.html,1,['log'],['logger']
Testability,"* DrawCopy (Option_t *option="""") const override;  Draw a copy of this function with its current attributes-*. ;  ; virtual Int_t GetContour (Double_t *levels=nullptr);  Return contour values into array levels. ;  ; virtual Double_t GetContourLevel (Int_t level) const;  Return the number of contour levels. ;  ; virtual Double_t GetMaximum (Double_t *x) const;  Return maximum value of the function See TF2::GetMinimum. ;  ; virtual Double_t GetMaximum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the maximum value of the function. ;  ; virtual Double_t GetMaximumXY (Double_t &x, Double_t &y) const;  Compute the X and Y values corresponding to the maximum value of the function. ;  ; virtual Double_t GetMinimum (Double_t *x) const;  Return minimum/maximum value of the function. ;  ; virtual Double_t GetMinimum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Double_t GetMinimumXY (Double_t &x, Double_t &y) const;  Compute the X and Y values corresponding to the minimum value of the function. ;  ; Int_t GetNpy () const;  ; char * GetObjectInfo (Int_t px, Int_t py) const override;  Redefines TObject::GetObjectInfo. ;  ; Double_t GetRandom (Double_t xmin, Double_t xmax, TRandom *rng=nullptr, Option_t *opt=nullptr) override;  Return a random number following this function shape. ;  ; Double_t GetRandom (TRandom *rng=nullptr, Option_t *opt=nullptr) override;  Return a random number following this function shape. ;  ; virtual void GetRandom2 (Double_t &xrandom, Double_t &yrandom, TRandom *rng=nullptr);  Return 2 random numbers following this function shape. ;  ; virtual Double_t GetYmax () const;  ; virtual Double_t GetYmin () const;  ; virtual Double_t Mean2X (Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t epsilon=0.000001);  ; virtual Double_t Mean2Y (Doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF3.html:12251,log,logx,12251,doc/master/classTF3.html,https://root.cern,https://root.cern/doc/master/classTF3.html,1,['log'],['logx']
Testability,"+); ������ decon->SetBinContent(i + 1,j + 1, source[i][j]);��. �� }; �� decon->Draw(""SURF"");� ; �� };  . Int_t SearchHighRes(Double_t** source, Double_t** dest, Int_t ssizex, Int_t ssizey, Double_t sigma, Double_t threshold, Bool_t backgroundRemove, Int_t deconIterations, Bool_t markov, Int_t averWindow). TWO-DIMENSIONAL HIGH-RESOLUTION PEAK SEARCH FUNCTION; This function searches for peaks in source spectrum; It is based on deconvolution method. First the background is; removed (if desired), then Markov spectrum is calculated; (if desired), then the response function is generated; according to given sigma and deconvolution is carried out. Function parameters:; source-pointer to the matrix of source spectrum; dest-pointer to the matrix of resulting deconvolved spectrum; ssizex-x length of source spectrum; ssizey-y length of source spectrum; sigma-sigma of searched peaks, for details we refer to manual; threshold-threshold value in % for selected peaks, peaks with; amplitude less than threshold*highest_peak/100; are ignored, see manual; backgroundRemove-logical variable, set if the removal of; background before deconvolution is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow-averanging window of searched peaks, for details; we refer to manual (applies only for Markov method). . Peaks searching;  ; Goal:; to identify automatically the peaks in spectrum with the presence of the; continuous background, one-fold coincidences (ridges) and statistical; fluctuations - noise. ;  ; The common problems connected with correct peak; identification in two-dimensional coincidence spectra are. non-sensitivity to noise, i.e., only statistically; relevant peaks should be identified; non-sensitivity of the algorithm to continuous; background; non-sensitivity to one-fold coincidences (coincidences; peak � background",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrum2.html:36059,log,logical,36059,root/html602/TSpectrum2.html,https://root.cern,https://root.cern/root/html602/TSpectrum2.html,4,['log'],['logical']
Testability,"++i); 1885 // xInput.emplace_back(Matrix_t(n1,n2));; 1886 ; 1887 // create pointer to output matrix used for the predictions; 1888 Matrix_t yHat(deepNet.GetBatchSize(), deepNet.GetOutputWidth() );; 1889 ; 1890 // use timer; 1891 Timer timer( nEvents, GetName(), kTRUE );; 1892 ; 1893 if (logProgress); 1894 Log() << kHEADER << Form(""[%s] : "",DataInfo().GetName()); 1895 << ""Evaluation of "" << GetMethodName() << "" on ""; 1896 << (Data()->GetCurrentType() == Types::kTraining ? ""training"" : ""testing""); 1897 << "" sample ("" << nEvents << "" events)"" << Endl;; 1898 ; 1899 ; 1900 // eventg loop; 1901 std::vector<double> mvaValues(nEvents);; 1902 ; 1903 ; 1904 for ( Long64_t ievt = firstEvt; ievt < lastEvt; ievt+=batchSize) {; 1905 ; 1906 Long64_t ievt_end = ievt + batchSize;; 1907 // case of batch prediction for; 1908 if (ievt_end <= lastEvt) {; 1909 ; 1910 if (ievt == firstEvt) {; 1911 Data()->SetCurrentEvent(ievt);; 1912 size_t nVariables = GetEvent()->GetNVariables();; 1913 ; 1914 if (n1 == batchSize && n0 == 1) {; 1915 if (n2 != nVariables) {; 1916 Log() << kFATAL << ""Input Event variable dimensions are not compatible with the built network architecture""; 1917 << "" n-event variables "" << nVariables << "" expected input matrix "" << n1 << "" x "" << n2; 1918 << Endl;; 1919 }; 1920 } else {; 1921 if (n1*n2 != nVariables || n0 != batchSize) {; 1922 Log() << kFATAL << ""Input Event variable dimensions are not compatible with the built network architecture""; 1923 << "" n-event variables "" << nVariables << "" expected input tensor "" << n0 << "" x "" << n1 << "" x "" << n2; 1924 << Endl;; 1925 }; 1926 }; 1927 }; 1928 ; 1929 auto batch = testData.GetTensorBatch();; 1930 auto inputTensor = batch.GetInput();; 1931 ; 1932 auto xInput = batch.GetInput();; 1933 // make the prediction; 1934 deepNet.Prediction(yHat, xInput, fOutputFunction);; 1935 for (size_t i = 0; i < batchSize; ++i) {; 1936 double value = yHat(i,0);; 1937 mvaValues[ievt + i] = (TMath::IsNaN(value)) ? -999. : value;; 1938 }; 1939 }",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:75851,test,testing,75851,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,2,['test'],"['testData', 'testing']"
Testability,"+1) in these cases and also to; y(i+2) at a triple knot. the representation (*) remains; valid in each open interval (x(i),x(i+1)). at a double knot,; x(j) = x(j+1), the output coefficients have the following values:; y(j) = s(x(j)) = y(j+1); b(j) = s'(x(j)) = b(j+1); c(j) = s""(x(j))/2 = c(j+1); d(j) = s""'(x(j))/6 = d(j+1); e(j) = s""""(x(j)-0)/24 e(j+1) = s""""(x(j)+0)/24; f(j) = s""""'(x(j)-0)/120 f(j+1) = s""""'(x(j)+0)/120; at a triple knot, x(j) = x(j+1) = x(j+2), the output; coefficients have the following values:; y(j) = s(x(j)) = y(j+1) = y(j+2); b(j) = s'(x(j)) = b(j+1) = b(j+2); c(j) = s""(x(j))/2 = c(j+1) = c(j+2); d(j) = s""'((x(j)-0)/6 d(j+1) = 0 d(j+2) = s""'(x(j)+0)/6; e(j) = s""""(x(j)-0)/24 e(j+1) = 0 e(j+2) = s""""(x(j)+0)/24; f(j) = s""""'(x(j)-0)/120 f(j+1) = 0 f(j+2) = s""""'(x(j)+0)/120. void Test(); Test method for TSpline5. n number of data points.; m 2*m-1 is order of spline.; m = 3 always for quintic spline.; nn,nm1,mm,; mm1,i,k,; j,jj temporary integer variables.; z,p temporary double precision variables.; x[n] the sequence of knots.; y[n] the prescribed function values at the knots.; a[200][6] two dimensional array whose columns are; the computed spline coefficients; diff[5] maximum values of differences of values and; derivatives to right and left of knots.; com[5] maximum values of coefficients. test of TSpline5 with nonequidistant knots and; equidistant knots follows. void Streamer(TBuffer& ); Stream an object of class TSpline5. void GetKnot(Int_t i, Double_t& x, Double_t& y) const. void GetCoeff(Int_t i, Double_t &x, Double_t &y, Double_t &b, Double_t &c, Double_t &d). TSpline5(); {}. virtual ~TSpline5(); {if (fPoly) delete [] fPoly;}. » Author: Federico Carminati 28/02/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-03-14 16:50; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSpline5.html:16181,test,test,16181,root/html534/TSpline5.html,https://root.cern,https://root.cern/root/html534/TSpline5.html,1,['test'],['test']
Testability,"+1) in these cases and also to; y(i+2) at a triple knot. the representation (*) remains; valid in each open interval (x(i),x(i+1)). at a double knot,; x(j) = x(j+1), the output coefficients have the following values:; y(j) = s(x(j)) = y(j+1); b(j) = s'(x(j)) = b(j+1); c(j) = s""(x(j))/2 = c(j+1); d(j) = s""'(x(j))/6 = d(j+1); e(j) = s""""(x(j)-0)/24 e(j+1) = s""""(x(j)+0)/24; f(j) = s""""'(x(j)-0)/120 f(j+1) = s""""'(x(j)+0)/120; at a triple knot, x(j) = x(j+1) = x(j+2), the output; coefficients have the following values:; y(j) = s(x(j)) = y(j+1) = y(j+2); b(j) = s'(x(j)) = b(j+1) = b(j+2); c(j) = s""(x(j))/2 = c(j+1) = c(j+2); d(j) = s""'((x(j)-0)/6 d(j+1) = 0 d(j+2) = s""'(x(j)+0)/6; e(j) = s""""(x(j)-0)/24 e(j+1) = 0 e(j+2) = s""""(x(j)+0)/24; f(j) = s""""'(x(j)-0)/120 f(j+1) = 0 f(j+2) = s""""'(x(j)+0)/120. void Test(); Test method for TSpline5. n number of data points.; m 2*m-1 is order of spline.; m = 3 always for quintic spline.; nn,nm1,mm,; mm1,i,k,; j,jj temporary integer variables.; z,p temporary double precision variables.; x[n] the sequence of knots.; y[n] the prescribed function values at the knots.; a[200][6] two dimensional array whose columns are; the computed spline coefficients; diff[5] maximum values of differences of values and; derivatives to right and left of knots.; com[5] maximum values of coefficients. test of TSpline5 with nonequidistant knots and; equidistant knots follows. void Streamer(TBuffer& ); Stream an object of class TSpline5. void GetKnot(Int_t i, Double_t& x, Double_t& y) const. void GetCoeff(Int_t i, Double_t &x, Double_t &y, Double_t &b, Double_t &c, Double_t &d). TSpline5(); {}. virtual ~TSpline5(); {if (fPoly) delete [] fPoly;}. » Author: Federico Carminati 28/02/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TSpline5.html:16715,test,test,16715,root/html604/TSpline5.html,https://root.cern,https://root.cern/root/html604/TSpline5.html,1,['test'],['test']
Testability,"+1) in these cases and also to; y(i+2) at a triple knot. the representation (*) remains; valid in each open interval (x(i),x(i+1)). at a double knot,; x(j) = x(j+1), the output coefficients have the following values:; y(j) = s(x(j)) = y(j+1); b(j) = s'(x(j)) = b(j+1); c(j) = s""(x(j))/2 = c(j+1); d(j) = s""'(x(j))/6 = d(j+1); e(j) = s""""(x(j)-0)/24 e(j+1) = s""""(x(j)+0)/24; f(j) = s""""'(x(j)-0)/120 f(j+1) = s""""'(x(j)+0)/120; at a triple knot, x(j) = x(j+1) = x(j+2), the output; coefficients have the following values:; y(j) = s(x(j)) = y(j+1) = y(j+2); b(j) = s'(x(j)) = b(j+1) = b(j+2); c(j) = s""(x(j))/2 = c(j+1) = c(j+2); d(j) = s""'((x(j)-0)/6 d(j+1) = 0 d(j+2) = s""'(x(j)+0)/6; e(j) = s""""(x(j)-0)/24 e(j+1) = 0 e(j+2) = s""""(x(j)+0)/24; f(j) = s""""'(x(j)-0)/120 f(j+1) = 0 f(j+2) = s""""'(x(j)+0)/120. void Test(); Test method for TSpline5. n number of data points.; m 2*m-1 is order of spline.; m = 3 always for quintic spline.; nn,nm1,mm,; mm1,i,k,; j,jj temporary integer variables.; z,p temporary double precision variables.; x[n] the sequence of knots.; y[n] the prescribed function values at the knots.; a[200][6] two dimensional array whose columns are; the computed spline coefficients; diff[5] maximum values of differences of values and; derivatives to right and left of knots.; com[5] maximum values of coefficients. test of TSpline5 with nonequidistant knots and; equidistant knots follows. void Streamer(TBuffer& ); Stream an object of class TSpline5. void GetKnot(Int_t i, Double_t& x, Double_t& y) const. void GetCoeff(Int_t i, Double_t &x, Double_t &y, Double_t &b, Double_t &c, Double_t &d). TSpline5(); {}. virtual ~TSpline5(); {if (fPoly) delete [] fPoly;}. » Author: Federico Carminati 28/02/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpline5.html:16715,test,test,16715,root/html602/TSpline5.html,https://root.cern,https://root.cern/root/html602/TSpline5.html,1,['test'],['test']
Testability,", ""C"", 1, kMagenta);; 891 ; 892 ; 893 // setup error plots and progress bar variables for JsMVA; 894 if (fInteractive){; 895 fInteractive->AddPoint(cycleCount, trainError, testError);; 896 if (*fExitFromTraining) break;; 897 *fIPyCurrentIter = 100*(double)settings.maxConvergenceCount () /(double)settings.convergenceSteps ();; 898 }; 899 ; 900 if (hasConverged); 901 break;; 902 ; 903 if ((int)cycleCount % 10 == 0) {; 904 ; 905 TString convText = TString::Format( ""(train/test/epo/conv/maxco): %.3g/%.3g/%d/%d/%d"",; 906 trainError,; 907 testError,; 908 (int)cycleCount,; 909 (int)settings.convergenceCount (),; 910 (int)settings.maxConvergenceCount ());; 911 double progress = 100*(double)settings.maxConvergenceCount () /(double)settings.convergenceSteps ();; 912 settings.cycle (progress, convText);; 913 }; 914 }; 915 while (true);; 916 settings.endTrainCycle (trainError);; 917 ; 918 TString convText = TString::Format( ""(train/test/epoch): %.4g/%.4g/%d"", trainError, testError, (int)cycleCount);; 919 double progress = 100*(double)settings.maxConvergenceCount() /(double)settings.convergenceSteps ();; 920 settings.cycle (progress, convText);; 921 ; 922 return testError;; 923 }; 924 ; 925 ; 926 ; 927/*! \brief execute a single training cycle; 928 *; 929 * uses multithreading if turned on; 930 *; 931 * \param minimizer the minimizer to be used (e.g. SGD); 932 * \param weights the weight container with all the synapse weights; 933 * \param itPatternBegin begin of the pattern container; 934 * \param itPatternEnd the end of the pattern container; 935 * \param settings the settings for this training (e.g. multithreading or not, regularization, etc.); 936 * \param dropContainer the data for dropping-out nodes (regularization technique); 937 */; 938 template <typename Iterator, typename Minimizer>; 939 inline double Net::trainCycle (Minimizer& minimizer, std::vector<double>& weights,; 940 Iterator itPatternBegin, Iterator itPatternEnd, Settings& settings, DropContainer& dropContainer)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:27978,test,testError,27978,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['test'],['testError']
Testability,", ""PDEFoamBoost"",; 382 ""!H:!V:Boost_Num=30:Boost_Transform=linear:SigBgSeparate=F:MaxDepth=4:UseYesNoCell=T:DTLogic=MisClassificationError:FillFoamWithOrigWeights=F:TailCut=0:nActiveCells=500:nBin=20:Nmin=400:Kernel=None:Compress=T"" );; 383 ; 384 // K-Nearest Neighbour classifier (KNN); 385 if (Use[""KNN""]); 386 factory->BookMethod( dataloader, TMVA::Types::kKNN, ""KNN"",; 387 ""H:nkNN=20:ScaleFrac=0.8:SigmaFact=1.0:Kernel=Gaus:UseKernel=F:UseWeight=T:!Trim"" );; 388 ; 389 // H-Matrix (chi2-squared) method; 390 if (Use[""HMatrix""]); 391 factory->BookMethod( dataloader, TMVA::Types::kHMatrix, ""HMatrix"", ""!H:!V:VarTransform=None"" );; 392 ; 393 // Linear discriminant (same as Fisher discriminant); 394 if (Use[""LD""]); 395 factory->BookMethod( dataloader, TMVA::Types::kLD, ""LD"", ""H:!V:VarTransform=None:CreateMVAPdfs:PDFInterpolMVAPdf=Spline2:NbinsMVAPdf=50:NsmoothMVAPdf=10"" );; 396 ; 397 // Fisher discriminant (same as LD); 398 if (Use[""Fisher""]); 399 factory->BookMethod( dataloader, TMVA::Types::kFisher, ""Fisher"", ""H:!V:Fisher:VarTransform=None:CreateMVAPdfs:PDFInterpolMVAPdf=Spline2:NbinsMVAPdf=50:NsmoothMVAPdf=10"" );; 400 ; 401 // Fisher with Gauss-transformed input variables; 402 if (Use[""FisherG""]); 403 factory->BookMethod( dataloader, TMVA::Types::kFisher, ""FisherG"", ""H:!V:VarTransform=Gauss"" );; 404 ; 405 // Composite classifier: ensemble (tree) of boosted Fisher classifiers; 406 if (Use[""BoostedFisher""]); 407 factory->BookMethod( dataloader, TMVA::Types::kFisher, ""BoostedFisher"",; 408 ""H:!V:Boost_Num=20:Boost_Transform=log:Boost_Type=AdaBoost:Boost_AdaBoostBeta=0.2:!Boost_DetailedMonitoring"" );; 409 ; 410 // Function discrimination analysis (FDA) -- test of various fitters - the recommended one is Minuit (or GA or SA); 411 if (Use[""FDA_MC""]); 412 factory->BookMethod( dataloader, TMVA::Types::kFDA, ""FDA_MC"",; 413 ""H:!V:Formula=(0)+(1)*x0+(2)*x1+(3)*x2+(4)*x3:ParRanges=(-1,1);(-10,10);(-10,10);(-10,10);(-10,10):FitMethod=MC:SampleSize=100000:Sigma=0.1"" );; 414 ; 415 if (U",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C_source.html:19654,log,log,19654,doc/master/TMVAClassification_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C_source.html,1,['log'],['log']
Testability,", ""\\csc"");; y -= step ; l.DrawMathText(x1, y, ""\\deg""); l.DrawText(x2, y, ""\\deg"");; y -= step ; l.DrawMathText(x1, y, ""\\det""); l.DrawText(x2, y, ""\\det"");; y -= step ; l.DrawMathText(x1, y, ""\\dim""); l.DrawText(x2, y, ""\\dim"");; y -= step ; l.DrawMathText(x1, y, ""\\exp""); l.DrawText(x2, y, ""\\exp"");; y -= step ; l.DrawMathText(x1, y, ""\\gcd""); l.DrawText(x2, y, ""\\gcd"");; y -= step ; l.DrawMathText(x1, y, ""\\hom""); l.DrawText(x2, y, ""\\hom"");; y -= step ; l.DrawMathText(x1, y, ""\\inf""); l.DrawText(x2, y, ""\\inf"");; y -= step ; l.DrawMathText(x1, y, ""\\ker""); l.DrawText(x2, y, ""\\ker"");; y -= step ; l.DrawMathText(x1, y, ""\\lg""); l.DrawText(x2, y, ""\\lg"");; y -= step ; l.DrawMathText(x1, y, ""\\lim""); l.DrawText(x2, y, ""\\lim"");; y -= step ; l.DrawMathText(x1, y, ""\\liminf""); l.DrawText(x2, y, ""\\liminf"");; y -= step ; l.DrawMathText(x1, y, ""\\limsup""); l.DrawText(x2, y, ""\\limsup"");; y -= step ; l.DrawMathText(x1, y, ""\\ln""); l.DrawText(x2, y, ""\\ln"");; y -= step ; l.DrawMathText(x1, y, ""\\log""); l.DrawText(x2, y, ""\\log"");; y -= step ; l.DrawMathText(x1, y, ""\\max""); l.DrawText(x2, y, ""\\max"");; y -= step ; l.DrawMathText(x1, y, ""\\min""); l.DrawText(x2, y, ""\\min"");; y -= step ; l.DrawMathText(x1, y, ""\\sec""); l.DrawText(x2, y, ""\\sec"");; y -= step ; l.DrawMathText(x1, y, ""\\sin""); l.DrawText(x2, y, ""\\sin"");; y -= step ; l.DrawMathText(x1, y, ""\\sinh""); l.DrawText(x2, y, ""\\sinh"");; y -= step ; l.DrawMathText(x1, y, ""\\sup""); l.DrawText(x2, y, ""\\sup"");; y -= step ; l.DrawMathText(x1, y, ""\\tan""); l.DrawText(x2, y, ""\\tan"");; y -= step ; l.DrawMathText(x1, y, ""\\tanh""); l.DrawText(x2, y, ""\\tanh"");. return c1;; }. Function Members (Methods); public:. virtual~TMathText(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMathText.html:52199,log,log,52199,root/html602/TMathText.html,https://root.cern,https://root.cern/root/html602/TMathText.html,2,['log'],['log']
Testability,", ""\\csc"");; y -= step ; l.DrawMathText(x1, y, ""\\deg""); l.DrawText(x2, y, ""\\deg"");; y -= step ; l.DrawMathText(x1, y, ""\\det""); l.DrawText(x2, y, ""\\det"");; y -= step ; l.DrawMathText(x1, y, ""\\dim""); l.DrawText(x2, y, ""\\dim"");; y -= step ; l.DrawMathText(x1, y, ""\\exp""); l.DrawText(x2, y, ""\\exp"");; y -= step ; l.DrawMathText(x1, y, ""\\gcd""); l.DrawText(x2, y, ""\\gcd"");; y -= step ; l.DrawMathText(x1, y, ""\\hom""); l.DrawText(x2, y, ""\\hom"");; y -= step ; l.DrawMathText(x1, y, ""\\inf""); l.DrawText(x2, y, ""\\inf"");; y -= step ; l.DrawMathText(x1, y, ""\\ker""); l.DrawText(x2, y, ""\\ker"");; y -= step ; l.DrawMathText(x1, y, ""\\lg""); l.DrawText(x2, y, ""\\lg"");; y -= step ; l.DrawMathText(x1, y, ""\\lim""); l.DrawText(x2, y, ""\\lim"");; y -= step ; l.DrawMathText(x1, y, ""\\liminf""); l.DrawText(x2, y, ""\\liminf"");; y -= step ; l.DrawMathText(x1, y, ""\\limsup""); l.DrawText(x2, y, ""\\limsup"");; y -= step ; l.DrawMathText(x1, y, ""\\ln""); l.DrawText(x2, y, ""\\ln"");; y -= step ; l.DrawMathText(x1, y, ""\\log""); l.DrawText(x2, y, ""\\log"");; y -= step ; l.DrawMathText(x1, y, ""\\max""); l.DrawText(x2, y, ""\\max"");; y -= step ; l.DrawMathText(x1, y, ""\\min""); l.DrawText(x2, y, ""\\min"");; y -= step ; l.DrawMathText(x1, y, ""\\sec""); l.DrawText(x2, y, ""\\sec"");; y -= step ; l.DrawMathText(x1, y, ""\\sin""); l.DrawText(x2, y, ""\\sin"");; y -= step ; l.DrawMathText(x1, y, ""\\sinh""); l.DrawText(x2, y, ""\\sinh"");; y -= step ; l.DrawMathText(x1, y, ""\\sup""); l.DrawText(x2, y, ""\\sup"");; y -= step ; l.DrawMathText(x1, y, ""\\tan""); l.DrawText(x2, y, ""\\tan"");; y -= step ; l.DrawMathText(x1, y, ""\\tanh""); l.DrawText(x2, y, ""\\tanh"");; ; return c1;; }. Function Members (Methods); public:. TMathText(); TMathText(const TMathText& text); TMathText(Double_t x, Double_t y, const char* text); virtual~TMathText(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMathText.html:52217,log,log,52217,root/html534/TMathText.html,https://root.cern,https://root.cern/root/html534/TMathText.html,1,['log'],['log']
Testability,", -1 on error. Int_t SetOutFile(const char* outfile, Bool_t verbose = kTRUE); Set the output file; Return 0 on success, -1 on error. Int_t RunCPU(Long64_t nevents = -1, Int_t start = -1, Int_t stop = -1, Int_t step = -1); Perform the CPU run; Return 0 on success, -1 on error. Int_t RunCPUx(Long64_t nevents = -1, Int_t start = -1, Int_t stop = -1); Perform the CPU run scanning over the number of workers per node; Return 0 on success, -1 on error. void DrawCPU(const char* outfile, const char* opt = ""std:""); Draw the CPU speedup plot.; opt = 'std:' draw standard evt/s plot; 'stdx:' draw standard evt/s plot, 1 worker per node; 'norm:' draw normalized plot; 'normx:' draw normalized plot, 1 worker per node. Int_t RunDataSet(const char* dset = ""BenchDataSet"", Int_t start = 1, Int_t stop = -1, Int_t step = 1); Perform a test using dataset 'dset'; Return 0 on success, -1 on error; Open the file for the results. Int_t RunDataSetx(const char* dset = ""BenchDataSet"", Int_t start = 1, Int_t stop = -1); Perform a test using dataset 'dset' scanning over the number of workers; per node.; Return 0 on success, -1 on error; Open the file for the results. void DrawDataSet(const char* outfile, const char* opt = ""std:"", const char* type = ""mbs""); Draw the CPU speedup plot.; opt = 'std:' Standard scaling plot; 'norm:' Normalized scaling plot; 'stdx:' Standard scaling plot, 1 worker per node; 'normx:' Normalized scaling plot, 1 worker per node; type = 'mbs' MB/s scaling plots (default); 'evts' Event/s scaling plots. Int_t ReleaseCache(const char* dset); Release memory cache for dataset 'dset'; Return 0 on success, -1 on error. Int_t RemoveDataSet(const char* dset); Physically remove the dataset 'dset', i.e. remove the dataset and the files; it describes; Return 0 on success, -1 on error. Int_t MakeDataSet(const char* dset = 0, Long64_t nevt = -1, const char* fnroot = ""event"", Bool_t regenerate = kFALSE); Create the largest dataset for the run.; Defaults for; dataset name, filename root; are;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofBench.html:9033,test,test,9033,root/html530/TProofBench.html,https://root.cern,https://root.cern/root/html530/TProofBench.html,1,['test'],['test']
Testability,", . Double_t & ; vhigh . ); const. overridevirtual . Get all parameter info (name, value, errors) ; Implements TVirtualFitter.; Definition at line 563 of file TBackCompFitter.cxx. ◆ GetParError(). Double_t TBackCompFitter::GetParError ; (; Int_t ; ipar); const. overridevirtual . Parameter error. ; Implements TVirtualFitter.; Definition at line 541 of file TBackCompFitter.cxx. ◆ GetParName(). const char * TBackCompFitter::GetParName ; (; Int_t ; ipar); const. overridevirtual . Return name of parameter ipar. ; Implements TVirtualFitter.; Definition at line 590 of file TBackCompFitter.cxx. ◆ GetStats(). Int_t TBackCompFitter::GetStats ; (; Double_t & ; amin, . Double_t & ; edm, . Double_t & ; errdef, . Int_t & ; nvpar, . Int_t & ; nparx . ); const. overridevirtual . Get fit statistical information. ; Implements TVirtualFitter.; Definition at line 600 of file TBackCompFitter.cxx. ◆ GetSumLog(). Double_t TBackCompFitter::GetSumLog ; (; Int_t ; i). overridevirtual . Sum of log (un-needed) ; Implements TVirtualFitter.; Definition at line 613 of file TBackCompFitter.cxx. ◆ GetTFitResult(). TFitResult * TBackCompFitter::GetTFitResult ; (; ); const. Get a copy of the Fit result returning directly a new TFitResult. ; Return a new copy of the TFitResult object which needs to be deleted later by the user. ; Definition at line 787 of file TBackCompFitter.cxx. ◆ IsA(). TClass * TBackCompFitter::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 143 of file TBackCompFitter.h. ◆ IsFixed(). Bool_t TBackCompFitter::IsFixed ; (; Int_t ; ipar); const. overridevirtual . Query if parameter ipar is fixed. ; Implements TVirtualFitter.; Definition at line 621 of file TBackCompFitter.cxx. ◆ PrintResults(). void TBackCompFitter::PrintResults ; (; Int_t ; level, . Double_t ; amin . ); const. overridevirtual . Print the fit result. ; Use PrintResults function in case of Minuit for old -style printing ; Implements T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBackCompFitter.html:32693,log,log,32693,doc/master/classTBackCompFitter.html,https://root.cern,https://root.cern/doc/master/classTBackCompFitter.html,1,['log'],['log']
Testability,", . TMVA::DataLoader * ; dataloader, . TFile * ; outputFile, . TString ; options . ). explicit . Definition at line 277 of file CrossValidation.cxx. ◆ ~CrossValidation(). TMVA::CrossValidation::~CrossValidation ; (; ). default . Member Function Documentation. ◆ Class(). static TClass * TMVA::CrossValidation::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::CrossValidation::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::CrossValidation::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 175 of file CrossValidation.h. ◆ DeclFileName(). static const char * TMVA::CrossValidation::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 175 of file CrossValidation.h. ◆ Evaluate(). void TMVA::CrossValidation::Evaluate ; (; ). virtual . Does training, test set evaluation and performance evaluation of using cross-evalution. ; Implements TMVA::Envelope.; Definition at line 587 of file CrossValidation.cxx. ◆ GetFactory(). Factory & TMVA::CrossValidation::GetFactory ; (; ). inline . Definition at line 140 of file CrossValidation.h. ◆ GetNumFolds(). UInt_t TMVA::CrossValidation::GetNumFolds ; (; ). inline . Definition at line 137 of file CrossValidation.h. ◆ GetResults(). const std::vector< TMVA::CrossValidationResult > & TMVA::CrossValidation::GetResults ; (; ); const. Definition at line 699 of file CrossValidation.cxx. ◆ GetSplitExpr(). TString TMVA::CrossValidation::GetSplitExpr ; (; ). inline . Definition at line 138 of file CrossValidation.h. ◆ InitOptions(). void TMVA::CrossValidation::InitOptions ; (; ). Definition at line 321 of file CrossValidation.cxx. ◆ IsA(). virtual TClass * TMVA::CrossValidation::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::Envelope.; Definition at line 175 of file CrossValidati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CrossValidation.html:20918,test,test,20918,doc/master/classTMVA_1_1CrossValidation.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CrossValidation.html,1,['test'],['test']
Testability,", . const Bool_t * ; fixPositionY1, . const Double_t * ; ampInit, . const Bool_t * ; fixAmp, . const Double_t * ; ampInitX1, . const Bool_t * ; fixAmpX1, . const Double_t * ; ampInitY1, . const Bool_t * ; fixAmpY1 . ). This function sets the following fitting parameters of peaks: . sigmaX - initial value of sigma x parameter; fixSigmaX - logical value of sigma x parameter, which allows to fix the parameter (not to fit); sigmaY - initial value of sigma y parameter; fixSigmaY - logical value of sigma y parameter, which allows to fix the parameter (not to fit); ro - initial value of ro parameter (correlation coefficient); fixRo - logical value of ro parameter, which allows to fix the parameter (not to fit); positionInitX - array of initial values of peaks x positions; fixPositionX - array of logical values which allow to fix appropriate x positions (not fit). However they are present in the estimated functional.; positionInitY - array of initial values of peaks y positions; fixPositionY - array of logical values which allow to fix appropriate y positions (not fit). However they are present in the estimated functional.; ampInit - array of initial values of 2D peaks amplitudes; fixAmp - array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; ampInitX1 - array of initial values of amplitudes of 1D ridges in x direction; fixAmpX1 - array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional; ampInitY1 - array of initial values of amplitudes of 1D ridges in y direction; fixAmpY1 - array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional . Definition at line 5583 of file TSpectrum2Fit.cxx. ◆ SetTailParameters(). void TSpectrum2Fit::SetTailParameters ; (; Double_t ; tInitXY, . Bool_t ; fixTxy, .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:73170,log,logical,73170,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['log'],['logical']
Testability,", . const char * ; comment = 0 . ). virtual . Create a reference to a data member documentation page. ; str encloses the text to create the reference for (e.g. name of instance). comment will be added e.g. as tooltip text. After the reference is put into str.String(), str will enclose the reference and the original text. Example: Input: str.String(): ""a gHtml test"" str.Begin(): 2 str.Length(): 5 Output: str.String(): ""a <a href=""THtml.html"">gHtml</a> test"" str.Begin(): 2 str.Length(): 30 ; Definition at line 1814 of file TDocOutput.cxx. ◆ ReferenceEntity() [3/4]. void TDocOutput::ReferenceEntity ; (; TSubString & ; str, . TDataType * ; entity, . const char * ; comment = 0 . ). virtual . Create a reference to a type documentation page. ; str encloses the text to create the reference for (e.g. name of instance). comment will be added e.g. as tooltip text. After the reference is put into str.String(), str will enclose the reference and the original text. Example: Input: str.String(): ""a gHtml test"" str.Begin(): 2 str.Length(): 5 Output: str.String(): ""a <a href=""THtml.html"">gHtml</a> test"" str.Begin(): 2 str.Length(): 30 ; Definition at line 1866 of file TDocOutput.cxx. ◆ ReferenceEntity() [4/4]. void TDocOutput::ReferenceEntity ; (; TSubString & ; str, . TMethod * ; entity, . const char * ; comment = 0 . ). virtual . Create a reference to a method documentation page. ; str encloses the text to create the reference for (e.g. name of instance). comment will be added e.g. as tooltip text. After the reference is put into str.String(), str will enclose the reference and the original text. Example: Input: str.String(): ""a gHtml test"" str.Begin(): 2 str.Length(): 5 Output: str.String(): ""a <a href=""THtml.html"">gHtml</a> test"" str.Begin(): 2 str.Length(): 30 ; Definition at line 1909 of file TDocOutput.cxx. ◆ ReferenceIsRelative(). Bool_t TDocOutput::ReferenceIsRelative ; (; const char * ; reference); const. virtual . Check whether reference is a relative reference, and can (o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocOutput.html:24981,test,test,24981,doc/master/classTDocOutput.html,https://root.cern,https://root.cern/doc/master/classTDocOutput.html,1,['test'],['test']
Testability,", 0};; 419}; 420 ; 421// this function is meant to be called by the jitted code generated by BookFilterJit; 422template <typename F, typename PrevNode>; 423void JitFilterHelper(F &&f, const char **colsPtr, std::size_t colsSize, std::string_view name,; 424 std::weak_ptr<RJittedFilter> *wkJittedFilter, std::shared_ptr<PrevNode> *prevNodeOnHeap,; 425 RColumnRegister *colRegister) noexcept; 426{; 427 if (wkJittedFilter->expired()) {; 428 // The branch of the computation graph that needed this jitted code went out of scope between the type; 429 // jitting was booked and the time jitting actually happened. Nothing to do other than cleaning up.; 430 delete wkJittedFilter;; 431 delete colRegister;; 432 delete prevNodeOnHeap;; 433 return;; 434 }; 435 ; 436 const ColumnNames_t cols(colsPtr, colsPtr + colsSize);; 437 delete[] colsPtr;; 438 ; 439 const auto jittedFilter = wkJittedFilter->lock();; 440 ; 441 // mock Filter logic -- validity checks and Define-ition of RDataSource columns; 442 using Callable_t = std::decay_t<F>;; 443 using F_t = RFilter<Callable_t, PrevNode>;; 444 using ColTypes_t = typename TTraits::CallableTraits<Callable_t>::arg_types;; 445 constexpr auto nColumns = ColTypes_t::list_size;; 446 CheckFilter(f);; 447 ; 448 auto &lm = *jittedFilter->GetLoopManagerUnchecked(); // RLoopManager must exist at this time; 449 auto ds = lm.GetDataSource();; 450 ; 451 if (ds != nullptr); 452 AddDSColumns(cols, lm, *ds, ColTypes_t(), *colRegister);; 453 ; 454 jittedFilter->SetFilter(; 455 std::unique_ptr<RFilterBase>(new F_t(std::forward<F>(f), cols, *prevNodeOnHeap, *colRegister, name)));; 456 // colRegister points to the columns structure in the heap, created before the jitted call so that the jitter can; 457 // share data after it has lazily compiled the code. Here the data has been used and the memory can be freed.; 458 delete colRegister;; 459 delete prevNodeOnHeap;; 460 delete wkJittedFilter;; 461}; 462 ; 463namespace DefineTypes {; 464struct RDefineTag {};; 465struct ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/InterfaceUtils_8hxx_source.html:19997,mock,mock,19997,doc/master/InterfaceUtils_8hxx_source.html,https://root.cern,https://root.cern/doc/master/InterfaceUtils_8hxx_source.html,2,"['log', 'mock']","['logic', 'mock']"
Testability,", B_2, … , B_N is also created. A node B_i does not represent a unique object in the geometry because its container A might be at its turn positioned as node inside several other volumes. Only when a complete branch of nodes is fully defined up to the top node in the geometry, a given path:/TOP_1/…/A_3/B_7 will represent a unique object. Its global transformation matrix can be computed as the pile-up of all local transformations in its branch. We will therefore call logical graph the hierarchy defined by nodes and volumes. The expansion of the logical graph by all possible paths defines a tree structure where all nodes are unique “touchable” objects. We will call this the “physical tree”. Unlike the logical graph, the physical tree can become a huge structure with several millions of nodes in case of complex geometries; therefore, it is not always a good idea to keep it transient in memory. Since the logical and physical structures are correlated, the modeller rather keeps track only of the current branch, updating the current global matrix at each change of the level in geometry. The current physical node is not an object that can be asked for at a given moment, but rather represented by the combination: current node/current global matrix. However, physical nodes have unique ID’s that can be retrieved for a given modeller state. These can be fed back to the modeller in order to force a physical node to become current. The advantage of this comes from the fact that all navigation queries check first the current node; therefore the location of a point in the geometry can be saved as a starting state for later use.; Nodes can be declared as overlapping in case they do overlap with other nodes inside the same container or extrude this container (see also ‘Checking the Geometry’). Non-overlapping nodes can be created with:; TGeoVolume::AddNode(TGeoVolume *daughter,Int_t copy_No,; TGeoMatrix *matr);; The creation of overlapping nodes can be done with a similar prototype:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:932770,log,logical,932770,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['log'],['logical']
Testability,", Bool_t regenerate=kFALSE);  Create the largest dataset for the run. ;  ; Int_t OpenOutFile (Bool_t wrt=kFALSE, Bool_t verbose=kTRUE);  Set the otuput file Return 0 on success, -1 on error. ;  ; Int_t ReleaseCache (const char *dset);  Release memory cache for dataset 'dset' Return 0 on success, -1 on error. ;  ; Int_t RemoveDataSet (const char *dset);  Physically remove the dataset 'dset', i.e. ;  ; Int_t RunCPU (Long64_t nevents=-1, Int_t start=-1, Int_t stop=-1, Int_t step=-1);  Perform the CPU run Return 0 on success, -1 on error. ;  ; Int_t RunCPUx (Long64_t nevents=-1, Int_t start=-1, Int_t stop=-1);  Perform the CPU run scanning over the number of workers per node Return 0 on success, -1 on error. ;  ; Int_t RunDataSet (const char *dset=""BenchDataSet"", Int_t start=1, Int_t stop=-1, Int_t step=1);  Perform a test using dataset 'dset' Return 0 on success, -1 on error Open the file for the results. ;  ; Int_t RunDataSetx (const char *dset=""BenchDataSet"", Int_t start=1, Int_t stop=-1);  Perform a test using dataset 'dset' scanning over the number of workers per node. ;  ; void SetCPUPar (const char *par);  ; void SetCPUSel (const char *sel);  ; void SetDataGenPar (const char *par);  ; void SetDataGenSel (const char *sel);  ; void SetDataPar (const char *par);  ; void SetDataSel (const char *sel);  ; void SetDebug (Bool_t debug=kTRUE);  ; void SetHistType (TPBHistType *histtype);  ; void SetNFilesWrk (Int_t nf=0);  ; void SetNHist (Int_t nh);  ; void SetNTries (Int_t nt);  ; Int_t SetOutFile (const char *outfile, Bool_t verbose=kTRUE);  Set the output file Return 0 on success, -1 on error. ;  ; void SetProofDS (TProof *p);  Set the PROOF instance to be used for dataset operations, like releasing cache ... Use SetProofDS(0) to reset and using the default PROOF. ;  ; void SetReadType (TPBReadType *readtype);  ; void SetReleaseCache (Bool_t on=kTRUE);  ; void SetSelOption (const char *opt);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofBench.html:2133,test,test,2133,doc/master/classTProofBench.html,https://root.cern,https://root.cern/doc/master/classTProofBench.html,1,['test'],['test']
Testability,", Double_t& parmin, Double_t& parmax) const; virtual const char*TFormula::GetParName(Int_t ipar) const; virtual Int_tTFormula::GetParNumber(const char* name) const; virtual Double_tGetProb() const; virtual Int_tGetQuantiles(Int_t nprobSum, Double_t* q, const Double_t* probSum); virtual Double_tGetRandom(); virtual Double_tGetRandom(Double_t xmin, Double_t xmax); virtual voidGetRange(Double_t& xmin, Double_t& xmax) const; virtual voidGetRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; virtual voidGetRange(Double_t& xmin, Double_t& ymin, Double_t& zmin, Double_t& xmax, Double_t& ymax, Double_t& zmax) const; virtual Double_tGetSave(const Double_t* x); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_tGetX(Double_t y, Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; TAxis*GetXaxis() const; virtual Double_tGetXmax() const; virtual Double_tGetXmin() const; TAxis*GetYaxis() const; TAxis*GetZaxis() const; virtual Double_tGradientPar(Int_t ipar, const Double_t* x, Double_t eps = 0.01); virtual voidGradientPar(const Double_t* x, Double_t* grad, Double_t eps = 0.01); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInitArgs(const Double_t* x, const Double_t* params); static voidInitStandardFunctions(); virtual voidTObject::Inspect() constMENU ; virtual Double_tIntegral(Double_t a, Double_t b, const Double_t* params = 0, Double_t epsilon = 1e-12); virtual Double_tIntegral(Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t epsilon = 1e-12); virtual Double_tIntegral(Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t az, Double_t bz, Double_t epsilon = 1e-12); virtual Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TF1.html:11904,log,logx,11904,root/html528/TF1.html,https://root.cern,https://root.cern/root/html528/TF1.html,4,['log'],['logx']
Testability,", GEANT4, where we have very large number repeated placements of relatively few logical (unique) shapes. Some viewers (OpenGL only at present) are able to take advantage of this by identifying unique logical shapes from the fID logical ID member of TBuffer3D. If repeated addition of the same fID is found, the shape is cached already - and the costly tessellation does not need to be sent again. The viewer can also perform internal GL specific caching with considerable performance gains in these cases.; For this to work correctly the logical object in must be described in TBuffer3D in the local reference frame, complete with the local/master translation. The viewer indicates this through the interface method; PreferLocalFrame(); If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D containing the same fID, and different fLocalMaster placements.; For viewers supporting logical/physical objects, the TBuffer3D content refers to the properties of logical object, with the fLocalMaster transform and the fColor and fTransparency attributes, which can be varied for each physical object.; As a minimum requirement all clients must be capable of filling the raw tessellation of the object buffer, in the master reference frame. Conversely viewers must always be capable of displaying the object described by this buffer. Scene Rebuilds; It should be understood that AddObject is not an explicit command to the viewer; it may for various reasons decide to ignore it:; It already has the object internally cached .; The object falls outside some 'interest' limits of the viewer camera.; The object is too small to be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition, simply indicating it does not require you to provide further information about this object. You should not try to make any assumptions about what the viewer did with it.; This enables the viewer to be connected to a client which sends potentially millions o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBuffer3D.html:6282,log,logical,6282,doc/master/classTBuffer3D.html,https://root.cern,https://root.cern/doc/master/classTBuffer3D.html,2,['log'],['logical']
Testability,", Int_t NbkgTest,; 158 const TString& otherOpt=""SplitMode=Random:!V"" );; 159 ; 160 // Cross validation; 161 void MakeKFoldDataSet(CvSplit & s);; 162 void PrepareFoldDataSet(CvSplit & s, UInt_t foldNumber, Types::ETreeType tt = Types::kTraining);; 163 void RecombineKFoldDataSet(CvSplit & s, Types::ETreeType tt = Types::kTraining);; 164 ; 165 const DataSetInfo& GetDefaultDataSetInfo(){ return DefaultDataSetInfo(); }; 166 ; 167 TH2* GetCorrelationMatrix(const TString& className);; 168 ; 169 //Copy method use in VI and CV DEPRECATED: you can just call Clone DataLoader *dl2=(DataLoader *)dl1->Clone(""dl2""); 170 DataLoader* MakeCopy(TString name);; 171 friend void DataLoaderCopy(TMVA::DataLoader* des, TMVA::DataLoader* src);; 172 DataInputHandler& DataInput() { return *fDataInputHandler; }; 173 ; 174 private:; 175 ; 176 ; 177 DataSetInfo& DefaultDataSetInfo();; 178 void SetInputTreesFromEventAssignTrees();; 179 ; 180 ; 181 private:; 182 ; 183 // data members; 184 ; 185 ; 186 DataSetManager* fDataSetManager; // DSMTEST; 187 ; 188 ; 189 DataInputHandler* fDataInputHandler; ///<->; 190 ; 191 std::vector<TMVA::VariableTransformBase*> fDefaultTrfs; ///< list of transformations on default DataSet; 192 ; 193 // cd to local directory; 194 TString fOptions; ///< option string given by construction (presently only ""V""); 195 TString fTransformations; ///< List of transformations to test; 196 Bool_t fVerbose; ///< verbose mode; 197 ; 198 // flag determining the way training and test data are assigned to DataLoader; 199 enum DataAssignType { kUndefined = 0,; 200 kAssignTrees,; 201 kAssignEvents };; 202 DataAssignType fDataAssignType; ///< flags for data assigning; 203 std::vector<TTree*> fTrainAssignTree; ///< for each class: tmp tree if user wants to assign the events directly; 204 std::vector<TTree*> fTestAssignTree; ///< for each class: tmp tree if user wants to assign the events directly; 205 ; 206 Int_t fATreeType = 0; ///< type of event (=classIndex); 207 Float_t fATreeWeight = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataLoader_8h_source.html:8576,test,test,8576,doc/master/DataLoader_8h_source.html,https://root.cern,https://root.cern/doc/master/DataLoader_8h_source.html,2,['test'],['test']
Testability,", Int_t averWindow). One-dimensional high-resolution peak search function. This function searches for peaks in source spectrum. It is based on; deconvolution method. First the background is removed (if desired), then; Markov smoothed spectrum is calculated (if desired), then the response; function is generated according to given sigma and deconvolution is; carried out. The order of peaks is arranged according to their heights in; the spectrum after background elimination. The highest peak is the first in; the list. On success it returns number of found peaks.; ; Function parameters:. source: pointer to the vector of source spectrum.; destVector: pointer to the vector of resulting deconvolved spectrum.; ssize: length of source spectrum.; sigma: sigma of searched peaks, for details we refer to manual.; threshold: threshold value in % for selected peaks, peaks with; amplitude less than threshold*highest_peak/100; are ignored, see manual.; backgroundRemove: logical variable, set if the removal of; background before deconvolution is desired.; deconIterations-number of iterations in deconvolution operation.; markov: logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow: averanging window of searched peaks, for details; we refer to manual (applies only for Markov method).; . Peaks searching:. The goal of this function is to identify automatically the peaks in spectrum; with the presence of the continuous background and statistical; fluctuations - noise.; ; The common problems connected with correct peak identification are:; ; non-sensitivity to noise, i.e., only statistically; relevant peaks should be identified.; non-sensitivity of the algorithm to continuous; background.; ability to identify peaks close to the edges of the; spectrum region. Usually peak finders fail to detect them.; resolution, decomposition of Double_tts and multiplets.; The algorithm should be able to recognize close ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrum.html:52157,log,logical,52157,root/html602/TSpectrum.html,https://root.cern,https://root.cern/root/html602/TSpectrum.html,2,['log'],['logical']
Testability,", Int_t averWindow). One-dimensional high-resolution peak search function. This function searches for peaks in source spectrum. It is based on; deconvolution method. First the background is removed (if desired), then; Markov smoothed spectrum is calculated (if desired), then the response; function is generated according to given sigma and deconvolution is; carried out. The order of peaks is arranged according to their heights in; the spectrum after background elimination. The highest peak is the first in; the list. On success it returns number of found peaks.; ; Function parameters:. source: pointer to the vector of source spectrum.; destVector: pointer to the vector of resulting deconvolved spectrum.; ssize: length of source spectrum.; sigma: sigma of searched peaks, for details we refer to manual.; threshold: threshold value in % for selected peaks, peaks with; amplitude less than threshold*highest_peak/100; are ignored, see manual.; backgroundRemove: logical variable, set if the removal of; background before deconvolution is desired.; deconIterations-number of iterations in deconvolution operation.; markov: logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow: averanging window of searched peaks, for details; we refer to manual (applies only for Markov method).; . Peaks searching:. The goal of this function is to identify automatically the peaks in spectrum; with the presence of the continuous background and statistical; fluctuations - noise.; ; The common problems connected with correct peak identification are:; ; non-sensitivity to noise, i.e., only statistically; relevant peaks should be identified.; non-sensitivity of the algorithm to continuous; background.; ability to identify peaks close to the edges of the; spectrum region. Usually peak finders fail to detect them.; resolution, decomposition of doublets and multiplets.; The algorithm should be able to recognize close po",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum.html:50998,log,logical,50998,root/html528/TSpectrum.html,https://root.cern,https://root.cern/root/html528/TSpectrum.html,4,['log'],['logical']
Testability,", Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidDoGlobalFit() const; voidDoReset() const; RooAbsData*RooStats::CombinedCalculator::GetData() const; RooAbsPdf*RooStats::CombinedCalculator::GetPdf() const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. RooFitResult*fFitResultinternal result of gloabl fit . protected:. RooArgSetRooStats::CombinedCalculator::fAlternateParamsRooArgSet specifying alternate parameters for hypothesis test // Is it used ????; RooAbsData*RooStats::CombinedCalculator::fData; TStringTNamed::fNameobject identifier; RooArgSetRooStats::CombinedCalculator::fNuisParamsRooArgSet specifying nuisance parameters for interval; RooArgSetRooStats::CombinedCalculator::fNullParamsRooArgSet specifying null parameters for hypothesis test; RooArgSetRooStats::CombinedCalculator::fPOIRooArgSet specifying parameters of interest for interval; RooAbsPdf*RooStats::CombinedCalculator::fPdf; Double_tRooStats::CombinedCalculator::fSizesize of the test (eg. specified rate of Type I error); TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ProfileLikelihoodCalculator(); default dummy constructor. ProfileLikelihoodCalculator(RooAbsData& data, RooAbsPdf& pdf, const RooArgSet& paramsOfInterest, Double_t size = 0.05, const RooArgSet* nullParams = 0); constructor from the data, a model pdf and the parameter of Interest.; If nuisance parameters are present they should be specified as part of the model; i.e. the model pdf is a combined pdf for the poi and the nuisance; The default test size used is 0.05 ( for a 95% interval); A set for the null paramete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__ProfileLikelihoodCalculator.html:9453,test,test,9453,root/html526/RooStats__ProfileLikelihoodCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__ProfileLikelihoodCalculator.html,3,['test'],['test']
Testability,", Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); static TConfidenceLevel*ComputeLimit(TH1* s, TH1* b, TH1* d, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); static TConfidenceLevel*ComputeLimit(Double_t s, Double_t b, Int_t d, TVectorD* se, TVectorD* be, TObjArray*, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); static TConfidenceLevel*ComputeLimit(TH1* s, TH1* b, TH1* d, TVectorD* se, TVectorD* be, TObjArray*, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); virtual TClass*IsA() const; TLimit&operator=(const TLimit&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. static boolFluctuate(TLimitDataSource* input, TLimitDataSource* output, bool init, TRandom*, bool stat = false); static Double_tLogLikelihood(Double_t s, Double_t b, Double_t b2, Double_t d). Data Members; private:. static TOrdCollection*fgSystNamesCollection of systematics names; static TArrayD*fgTablea log table... just to speed up calculation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TConfidenceLevel * ComputeLimit(TLimitDataSource* data, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); class TLimit. Algorithm to compute 95% C.L. limits using the Likelihood ratio; semi-bayesian method.; It takes signal, background and data histograms wrapped in a; TLimitDataSource as input and runs a set of Monte Carlo experiments in; order to compute the limits. If needed, inputs are fluctuated according; to systematics. The output is a TConfidenceLevel. class TLimitDataSource. Takes the signal, background and data histograms as well as different; systematics sources to form the TLimit input. class TConfidenceLevel. Final result of the TLimit algorithm. It is created just after the; time-consuming part and can be stored in a TFile for further processing.; It contains light methods to return CLs, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TLimit.html:2406,log,log,2406,root/html534/TLimit.html,https://root.cern,https://root.cern/root/html534/TLimit.html,1,['log'],['log']
Testability,", Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooFunctor1DPdfBinding&operator=(const RooFunctor1DPdfBinding&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFunctor1DPdfBinding.html:23620,test,testArg,23620,root/html602/RooFunctor1DPdfBinding.html,https://root.cern,https://root.cern/root/html602/RooFunctor1DPdfBinding.html,2,['test'],['testArg']
Testability,", Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooNonCentralChiSquare&operator=(const RooNonCentralChiSquare&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNonCentralChiSquare.html:24364,test,testArg,24364,root/html602/RooNonCentralChiSquare.html,https://root.cern,https://root.cern/root/html602/RooNonCentralChiSquare.html,2,['test'],['testArg']
Testability,", ItTruth itTruthBegin, ItTruth /*itTruthEnd*/, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc /*itInvActFnc*/, double patternWeight); 413 {; 414 bool hasDeltas = (itDelta != itDeltaEnd);; 415 ; 416 double errorSum = 0.0;; 417 for (ItProbability itProbability = itProbabilityBegin; itProbability != itProbabilityEnd; ++itProbability); 418 {; 419 double probability = *itProbability;; 420 double truth = *itTruthBegin;; 421 /* truth = truth < 0.1 ? 0.1 : truth; */; 422 /* truth = truth > 0.9 ? 0.9 : truth; */; 423 truth = truth < 0.5 ? 0.1 : 0.9;; 424 if (hasDeltas); 425 {; 426 double delta = probability - truth;; 427 (*itDelta) = delta*patternWeight;; 428// (*itDelta) = (*itInvActFnc)(probability) * delta * patternWeight;; 429 ++itDelta;; 430 }; 431 double error (0);; 432 if (probability == 0) // protection against log (0); 433 {; 434 if (truth >= 0.5); 435 error += 1.0;; 436 }; 437 else if (probability == 1); 438 {; 439 if (truth < 0.5); 440 error += 1.0;; 441 }; 442 else; 443 error += - (truth * log (probability) + (1.0-truth) * log (1.0-probability)); // cross entropy function; 444 errorSum += error * patternWeight;; 445 ; 446 }; 447 return errorSum;; 448 }; 449 ; 450 ; 451 ; 452 ; 453/*! \brief soft-max-cross-entropy error function (for mutual exclusive cross-entropy); 454 *; 455 *; 456 */; 457 template <typename ItOutput, typename ItTruth, typename ItDelta, typename ItInvActFnc>; 458 double softMaxCrossEntropy (ItOutput itProbabilityBegin, ItOutput itProbabilityEnd, ItTruth itTruthBegin, ItTruth /*itTruthEnd*/, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc /*itInvActFnc*/, double patternWeight); 459 {; 460 double errorSum = 0.0;; 461 ; 462 bool hasDeltas = (itDelta != itDeltaEnd);; 463 // output - truth; 464 ItTruth itTruth = itTruthBegin;; 465 for (auto itProbability = itProbabilityBegin; itProbability != itProbabilityEnd; ++itProbability, ++itTruth); 466 {; 467// assert (itTruth != itTruthEnd);; 468 double probability = (*itProbability);; 469 double truth = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:13029,log,log,13029,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['log'],['log']
Testability,", RooDecay, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooLandau, RooLognormal, RooNonCPEigenDecay, RooPoisson, RooUniform, RooAddModel, RooBinSamplingPdf, RooMultiVarGaussian, RooProdPdf, and RooTruthModel.; Definition at line 1522 of file RooAbsPdf.cxx. ◆ getGeneratorConfig(). const RooNumGenConfig * RooAbsPdf::getGeneratorConfig ; (; ); const. Return the numeric MC generator configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 2651 of file RooAbsPdf.cxx. ◆ getLogProbabilities(). void RooAbsPdf::getLogProbabilities ; (; std::span< const double > ; pdfValues, . double * ; output . ); const. Definition at line 671 of file RooAbsPdf.cxx. ◆ getLogVal(). double RooAbsPdf::getLogVal ; (; const RooArgSet * ; set = nullptr); const. virtual . Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ; Reimplemented in RooLegacyExpPoly, and RooHistConstraint.; Definition at line 620 of file RooAbsPdf.cxx. ◆ getNorm() [1/2]. double RooAbsPdf::getNorm ; (; const RooArgSet & ; nset); const. inline . Get normalisation term needed to normalise the raw values returned by getVal(). ; Note that getVal(normalisationVariables) will automatically apply the normalisation term returned here. Parameters. nsetSet of variables to normalise over. . Definition at line 195 of file RooAbsPdf.h. ◆ getNorm() [2/2]. double RooAbsPdf::getNorm ; (; const RooArgSet * ; nset = nullptr); const. virtual . Get normalisation term needed to normalise the raw values returned by getVal(). ; Note that getVal(normalisationVariables) will automatically apply the normalisation term returned here. Parameters. nsetSet of variables to normalise over. . Reimplemented in RooResolutionModel.; Definition at line 419 of file RooAbsPdf.cxx. ◆ getNormIntegral(). co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:128148,log,log,128148,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,2,['log'],['log']
Testability,", TClass* receiver_class, void* receiver, const char* slot); TSlave*CreateSlave(const char* url, const char* ord, Int_t perf, const char* image, const char* workdir); TSlave*CreateSubmaster(const char* url, const char* ord, const char* image, const char* msd, Int_t nwk = 1); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; static Bool_tGetFileInCmd(const char* cmd, TString& fn); static Int_tGetInputData(TList* input, const char* cachedir, TString& emsg); TList*GetListOfActiveSlaves() const; TVirtualProofPlayer*GetPlayer() const; TPluginHandler*GetProgressDialog() const; Int_tGetSandbox(TString& sb, Bool_t assert = kFALSE, const char* rc = 0); virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidHandleLibIncPath(const char* what, Bool_t add, const char* dirs); Int_tHandleOutputOptions(TString& opt, TString& target, Int_t action); Int_tInit(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); voidInitMembers(); virtual TVirtualProofPlayer*MakePlayer(const char* player = 0, TSocket* s = 0); voidTObject::MakeZombie(); voidPrepareInputDataFile(TString& dataFile); Int_tRemoveWorkers(TList* wrks); static Int_tSaveInputData(TQueryResult* qr, const char* cachedir, TString& emsg); virtual voidSaveWorkerInfo(); Int_tSendFile(const char* file, Int_t opt = (kBinary | kForward | kCp | kCpBin), const char* rfile = 0, TSlave* sl = 0); static Int_tSendInputData(TQueryResult* qr, TProof* p, TString& emsg); virtual voidSendInputDataFile(); voidSetDSet(TDSet* dset); voidSetFeedback(TString& opt, TString& optfb, Int_t action); voidSetPlayer(TVirtualProofPlayer* player); static void*SlaveStartupThread(void* arg); virtual Bool_tStartSlaves(Bool_t attach = kFALSE); static voidSystemCmd(const char* cmd, Int_t fdout); TProof(); voidUpdateDialog(); virtual voidValidateDSet(TDSet* dset); Int_tVerifyDataSetParallel(const char* uri, const char* optStr).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProof.html:20446,log,loglevel,20446,root/html602/TProof.html,https://root.cern,https://root.cern/root/html602/TProof.html,1,['log'],['loglevel']
Testability,", TH2S, TH2I, TH2L, TH2F, TH2D, TH3, TH3C, TH3S, TH3I, TH3L, TH3F, and TH3D.; Definition at line 1277 of file TH1.cxx. ◆ AddDirectory(). void TH1::AddDirectory ; (; Bool_t ; add = kTRUE). static . Sets the flag controlling the automatic add of histograms in memory. ; By default (fAddDirectory = kTRUE), histograms are automatically added to the list of objects in memory. Note that one histogram can be removed from its support directory by calling h->SetDirectory(nullptr) or h->SetDirectory(dir) to add it to the list of objects in the directory dir.; NOTE that this is a static function. To call it, use; TH1::AddDirectory ; Definition at line 1294 of file TH1.cxx. ◆ AddDirectoryStatus(). Bool_t TH1::AddDirectoryStatus ; (; ). static . Static function: cannot be inlined on Windows/NT. ; Definition at line 754 of file TH1.cxx. ◆ AndersonDarlingTest() [1/2]. Double_t TH1::AndersonDarlingTest ; (; const TH1 * ; h2, . Double_t & ; advalue . ); const. virtual . Same function as above but returning also the test statistic value. ; Definition at line 8080 of file TH1.cxx. ◆ AndersonDarlingTest() [2/2]. Double_t TH1::AndersonDarlingTest ; (; const TH1 * ; h2, . Option_t * ; option = """" . ); const. virtual . Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ; The AD 2 sample test formula are derived from the paper F.W Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; The test is implemented in root in the ROOT::Math::GoFTest class It is the same formula ( (6) in the paper), and also shown in this preprint; Binned data are considered as un-binned data with identical observation happening in the bin center.; Parameters. [in]h2Pointer to 1D histogram ; [in]optionis a character string to specify options; ""D"" Put out a line of ""Debug"" printout; ""T"" Return the normalized A-D test statistic. Note1: Underflow and overflow are not considered in the test; Note2: The test works only for un-weighted histogram (i.e. rep",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:79969,test,test,79969,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['test'],['test']
Testability,", TString); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. virtual Double_tEstimatorFunction(vector<Double_t>&); Double_tGetBkgEffAtSigEff(Double_t sigEff = 0.5); Double_tGetBkgRejAtSigEff(Double_t sigEff = 0.5); Double_tGetFOM(); TMVA::MethodBase*GetMethod(); voidGetMVADists(); Double_tGetROCIntegral(); vector<int>GetScanIndices(int val, vector<int> base); Double_tGetSeparation(); Double_tGetSigEffAtBkgEff(Double_t bkgEff = 0.1); TMVA::MsgLogger&Log() const; voidoptimizeFit(); voidoptimizeScan(). Data Members; private:. map<std::vector<Double_t>,Double_t>fAlreadyTrainedParCombinationsave parameters for which the FOM is already known (GA seems to evaluate the same parameters several times); TStringfFOMTypethe FOM type (Separation, ROC integra.. whaeter you implemented..; vector<Float_t>fFOMvsItergraph showing the develompment of the Figure Of Merit values during the fit; TMVA::MsgLogger*fLoggermessage logger; TMVA::MethodBase *constfMethodThe MVA method to be evaluated; TH1D*fMvaBkgMVA distrituion for bakgr. events, used for spline fit; TH1D*fMvaBkgFineBinMVA distrituion for bakgr. events; TH1D*fMvaSigMVA distrituion for signal events, used for spline fit; TH1D*fMvaSigFineBinMVA distrituion for signal events; Bool_tfNotDoneYetflat to indicate of Method Transformations have been optained yet or not (normally done in MethodBase::TrainMethod); TStringfOptimizationFitTypewhich type of optimisation procedure to be used ; map<TString,TMVA::Interval*>fTuneParametersparameters included in the tuning; map<TString,Double_t>fTunedParametersparameters included in the tuning. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; OptimizeConfigParameters(TMVA::MethodBase *const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); Constructor which sets either ""Classification or Regr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__OptimizeConfigParameters.html:1956,log,logger,1956,root/html534/TMVA__OptimizeConfigParameters.html,https://root.cern,https://root.cern/root/html534/TMVA__OptimizeConfigParameters.html,1,['log'],['logger']
Testability,", UInt_t *mapVarInFisher);  calculate the fisher coefficients for the event sample and the variables used ;  ; Int_t GetNNodesBeforePruning ();  ; Node * GetNode (ULong_t sequence, UInt_t depth);  retrieve node from the tree. ;  ; Double_t GetNodePurityLimit () const;  ; Double_t GetPruneStrength () const;  ; void GetRandomisedVariables (Bool_t *useVariable, UInt_t *variableMap, UInt_t &nVars);  ; virtual DecisionTreeNode * GetRoot () const;  ; Double_t GetSumWeights (const EventConstList *validationSample) const;  calculate the normalization factor for a pruning validation sample ;  ; Int_t GetTreeID ();  ; std::vector< Double_t > GetVariableImportance ();  Return the relative variable importance, normalized to all variables together having the importance 1. ;  ; Double_t GetVariableImportance (UInt_t ivar);  returns the relative importance of variable ivar ;  ; virtual TClass * IsA () const;  ; void PruneNode (TMVA::DecisionTreeNode *node);  prune away the subtree below the node ;  ; void PruneNodeInPlace (TMVA::DecisionTreeNode *node);  prune a node temporarily (without actually deleting its descendants which allows testing the pruned tree quality for many different pruning stages without ""touching"" the tree. ;  ; Double_t PruneTree (const EventConstList *validationSample=nullptr);  prune (get rid of internal nodes) the Decision tree to avoid overtraining several different pruning methods can be applied as selected by the variable ""fPruneMethod"". ;  ; void SetAnalysisType (Types::EAnalysisType t);  ; void SetMinLinCorrForFisher (Double_t min);  ; void SetNodePurityLimit (Double_t p);  ; void SetNVars (Int_t n);  ; void SetParentTreeInNodes (Node *n=nullptr);  descend a tree to find all its leaf nodes, fill max depth reached in the tree at the same time. ;  ; void SetPruneMethod (EPruneMethod m=kCostComplexityPruning);  ; void SetPruneStrength (Double_t p);  ; void SetTreeID (Int_t treeID);  ; void SetUseExclusiveVars (Bool_t t=kTRUE);  ; void SetUseFisherCuts (Bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html:6294,test,testing,6294,doc/master/classTMVA_1_1DecisionTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html,1,['test'],['testing']
Testability,", const TMatrixT< Element > &source2)operation this = source1+source2Definition TMatrixT.cxx:2303; TMatrixTAutoloadOps::AtMultBvoid AtMultB(const Element *const ap, Int_t ncolsa, const Element *const bp, Int_t nb, Int_t ncolsb, Element *cp)Elementary routine to calculate matrix multiplication A^T*B.Definition TMatrixT.cxx:3104; TMatrixTAutoloadOps::operator>=TMatrixT< Element > operator>=(const TMatrixT< Element > &source1, const TMatrixT< Element > &source2)logical operation source1 >= source2Definition TMatrixT.cxx:2649; TMatrixTAutoloadOps::ElementMultTMatrixT< Element > & ElementMult(TMatrixT< Element > &target, const TMatrixT< Element > &source)Multiply target by the source, element-by-element.Definition TMatrixT.cxx:2985; TMatrixTAutoloadOps::operator||TMatrixT< Element > operator||(const TMatrixT< Element > &source1, const TMatrixT< Element > &source2)Logical OR.Definition TMatrixT.cxx:2525; TMatrixTAutoloadOps::operator<TMatrixT< Element > operator<(const TMatrixT< Element > &source1, const TMatrixT< Element > &source2)logical operation source1 < source2Definition TMatrixT.cxx:2779; TMatrixTAutoloadOps::operator>TMatrixT< Element > operator>(const TMatrixT< Element > &source1, const TMatrixT< Element > &source2)logical operation source1 > source2Definition TMatrixT.cxx:2584; TMatrixTAutoloadOps::AddTMatrixT< Element > & Add(TMatrixT< Element > &target, Element scalar, const TMatrixT< Element > &source)Modify addition: target += scalar * source.Definition TMatrixT.cxx:2936; TMatrixTAutoloadOps::ElementDivTMatrixT< Element > & ElementDiv(TMatrixT< Element > &target, const TMatrixT< Element > &source)Divide target by the source, element-by-element.Definition TMatrixT.cxx:3025; TMatrixTAutoloadOps::MultElement1 Mult(const TVectorT< Element1 > &v1, const TMatrixT< Element2 > &m, const TVectorT< Element3 > &v2)Perform v1 * M * v2, a scalar result.Definition TVectorT.cxx:1542; TMatrixTAutoloadOps::operator-TMatrixT< Element > operator-(const TMatrixT< Element > &so",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMatrixT_8cxx_source.html:140282,log,logical,140282,doc/master/TMatrixT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMatrixT_8cxx_source.html,1,['log'],['logical']
Testability,", const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidInit(); voidPrintCoefficients(); virtual voidProcessOptions(). Data Members; public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TMVA::MethodPDEFoam::EKernelkGaus; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TMVA::MethodPDEFoam::EKernelkLinN; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TMVA::MethodPDEFoam::EKernelkNone; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodPDEFoam.html:16934,test,testing,16934,root/html602/TMVA__MethodPDEFoam.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodPDEFoam.html,2,['test'],['testing']
Testability,", const char *alg=nullptr);  Minimise the function passed in the constructor. ;  ; std::string const & minimizerType () const;  ; int minos ();  Execute MINOS. ;  ; int minos (const RooArgSet &minosParamList);  Execute MINOS for given list of parameters. ;  ; void optimizeConst (int flag);  If flag is true, perform constant term optimization on function being minimized. ;  ; RooFit::OwningPtr< RooFitResult > save (const char *name=nullptr, const char *title=nullptr);  Save and return a RooFitResult snapshot of current minimizer status. ;  ; void saveStatus (const char *label, int status);  ; int seek ();  Execute SEEK. ;  ; void setEps (double eps);  Change MINUIT epsilon. ;  ; void setErrorLevel (double level);  Set the level for MINUIT error analysis to the given value. ;  ; void setEvalErrorWall (bool flag);  ; bool setLogFile (const char *logf=nullptr);  ; void setMaxFunctionCalls (int n);  Change maximum number of likelihood function class from MINUIT (RooMinimizer default 500 * #parameters) ;  ; void setMaxIterations (int n);  Change maximum number of MINUIT iterations (RooMinimizer default 500 * #parameters) ;  ; void setMinimizerType (std::string const &type);  Choose the minimizer algorithm. ;  ; void setOffsetting (bool flag);  Enable internal likelihood offsetting for enhanced numeric precision. ;  ; void setPrintEvalErrors (int numEvalErrors);  ; void setPrintLevel (int newLevel);  Change the MINUIT internal printing level. ;  ; void setProfile (bool flag=true);  ; void setRecoverFromNaNStrength (double strength);  Try to recover from invalid function values. ;  ; void setStrategy (int istrat);  Change MINUIT strategy to istrat. ;  ; void setVerbose (bool flag=true);  ; int simplex ();  Execute SIMPLEX. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void zeroEvalCount ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMinimizer.html:4255,log,logf,4255,doc/master/classRooMinimizer.html,https://root.cern,https://root.cern/doc/master/classRooMinimizer.html,1,['log'],['logf']
Testability,", const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidSetBins(const RooAbsCollection& coll, Int_t numBins) const; voidSetupBasicUsage(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooArgList*fAxeswhich variables to put on each axis; RooArgSetfChainParamsparameters to store in the chain (if not specified they are all of them ); RooAbsData*fDatapointer to the data (owned by the workspace); Double_tfDeltaacceptable error for Keys cutoffs being equal; Double_tfEpsilonacceptable error for Keys interval determination; RooStats::MCMCInterval::IntervalTypefIntervalTypetype of interval to find; Double_tfLeftSideTFleft side tail-fraction for interval; TStringTNamed::fNameobject identifier; RooArgSetfNuisParamsnuisance parameters for interval (not really used); Int_tfNumBinsset the number of bins to create for each; Int_tfNumBurnInStepsnumber of iterations to discard as burn-in, starting from the first; Int_tfNumItersnumber of iterations to run metropolis algorithm; RooArgSetfPOIparameters of interest for interval; RooAbsPdf*fPdfpointer to common PDF (owned by the workspace); RooAbsPdf*fPriorPdfpointer to prior PDF (owned by the workspace); RooStats::ProposalFunction*fPropFuncProposal function for MCMC integration; Double_tfSizesize of the test (eg. specified rate of Type I error); TStringTNamed::fTitleobject title; Bool_tfUseKeyswhether to use kernel estimation to determine interval; Bool_tfUseSparseHistwhether to use sparse histogram (if using hist at all). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MCMCCalculator(). MCMCCalculator(RooAbsData& data, const RooStats::ModelConfig& model). void SetModel(const RooStats::ModelConfig& model); set the model. v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__MCMCCalculator.html:8405,test,test,8405,root/html532/RooStats__MCMCCalculator.html,https://root.cern,https://root.cern/root/html532/RooStats__MCMCCalculator.html,1,['test'],['test']
Testability,", const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tmaxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooLegendre.html:17338,test,testArg,17338,root/html528/RooLegendre.html,https://root.cern,https://root.cern/root/html528/RooLegendre.html,2,['test'],['testArg']
Testability,", const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tmaxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooLegendre.html:17330,test,testArg,17330,root/html530/RooLegendre.html,https://root.cern,https://root.cern/root/html530/RooLegendre.html,4,['test'],['testArg']
Testability,", const char* mother, Int_t ndiv, Int_t iaxis); The same as previous but in double precision; Create a new volume by dividing an existing one.; It divides a previously defined volume; name Volume name; mother Mother volume name; ndiv Number of divisions; iaxis Axis value:; X,Y,Z of CAXIS will be translated to 1,2,3 for IAXIS. void Gsdvt(const char* name, const char* mother, Double_t step, Int_t iaxis, Int_t numed, Int_t ndvmx); Create a new volume by dividing an existing one.; Divide mother into ndiv divisions called name; along axis iaxis starting at coordinate value c0i.; The new volume created will be medium number numed.; Create a new volume by dividing an existing one; Divide mother into divisions called name along; axis iaxis in steps of step. If not exactly divisible; will make as many as possible and will center them; with respect to the mother. Divisions will have medium; number numed. If numed is 0, numed of mother is taken.; ndvmx is the expected maximum number of divisions; (If 0, no protection tests are performed in Geant3). void Gsord(const char* name, Int_t iax); Create a new volume by dividing an existing one; Divides mother into divisions called name along; axis iaxis starting at coordinate value c0 with step; size step.; The new volume created will have medium number numed.; If numed is 0, numed of mother is taken.; ndvmx is the expected maximum number of divisions; (If 0, no protection tests are performed in Geant3); Flag volume name whose contents will have to be ordered; along axis iax, by setting the search flag to -iax; (Geant3 only). void Gspos(const char* name, Int_t nr, const char* mother, Double_t x, Double_t y, Double_t z, Int_t irot, const char* konly = ""ONLY""); Position a volume into an existing one.; It positions a previously defined volume in the mother.; name Volume name; nr Copy number of the volume; mother Mother volume name; x X coord. of the volume in mother ref. sys.; y Y coord. of the volume in mother ref. sys.; z Z coord. of th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualMC.html:21493,test,tests,21493,root/html528/TVirtualMC.html,https://root.cern,https://root.cern/root/html528/TVirtualMC.html,6,['test'],['tests']
Testability,", const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsReal*mean(); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsMoment.html:18501,test,testArg,18501,root/html534/RooAbsMoment.html,https://root.cern,https://root.cern/root/html534/RooAbsMoment.html,1,['test'],['testArg']
Testability,", const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsReal*mean(); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooAbsMoment&operator=(const RooAbsMoment&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsMoment.html:18496,test,testArg,18496,root/html602/RooAbsMoment.html,https://root.cern,https://root.cern/root/html602/RooAbsMoment.html,2,['test'],['testArg']
Testability,", const char* where); Execute 'action' (see EAdminExecType in 'XProofProtocol.h') at 'where'; (default master), with options 'how', on 'what'. The option specified by; 'how' are typically unix option for the relate commands. In addition to; the unix authorizations, the limitations are:. action = kRm limited to the sandbox (but basic dirs cannot be; removed) and on files owned by the user in the; allowed directories; action = kTail option '-f' is not supported and will be ignored. Int_t GetFile(const char* remote, const char* local, const char* opt = 0); Get file 'remote' into 'local' from the master.; If opt contains ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; If opt contains ""silent"" standard notificatons are not printed (errors and; warnings and prompts still are).; Return 0 on success, -1 on error. Int_t PutFile(const char* local, const char* remote, const char* opt = 0); Put file 'local'to 'remote' to the master; If opt is ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; Return 0 on success, -1 on error. void CpProgress(const char* pfx, Long64_t bytes, Long64_t size, TStopwatch* watch, Bool_t cr = kFALSE); Print file copy progress. Int_t Cp(const char* src, const char* dst = 0, const char* opts = 0); Copy files in/out of the sandbox. Either 'src' or 'dst' must be in the; sandbox.; Return 0 on success, -1 on error. TXProofMgr(const char* url, Int_t loglevel = -1, const char* alias = """"). Bool_t IsValid() const; { return fSocket; }. TProof * AttachSession(Int_t id, Bool_t gui = kFALSE); { return TProofMgr::AttachSession(id, gui); }. » Author: G. Ganis, Nov 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-06-02 16:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TXProofMgr.html:17585,sandbox,sandbox,17585,root/html604/TXProofMgr.html,https://root.cern,https://root.cern/root/html604/TXProofMgr.html,3,"['log', 'sandbox']","['loglevel', 'sandbox']"
Testability,", const char* where); Execute 'action' (see EAdminExecType in 'XProofProtocol.h') at 'where'; (default master), with options 'how', on 'what'. The option specified by; 'how' are typically unix option for the relate commands. In addition to; the unix authorizations, the limitations are:. action = kRm limited to the sandbox (but basic dirs cannot be; removed) and on files owned by the user in the; allowed directories; action = kTail option '-f' is not supported and will be ignored. Int_t GetFile(const char* remote, const char* local, const char* opt = 0); Get file 'remote' into 'local' from the master.; If opt contains ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; If opt contains ""silent"" standard notificatons are not printed (errors and; warnings and prompts still are).; Return 0 on success, -1 on error. Int_t PutFile(const char* local, const char* remote, const char* opt = 0); Put file 'local'to 'remote' to the master; If opt is ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; Return 0 on success, -1 on error. void CpProgress(const char* pfx, Long64_t bytes, Long64_t size, TStopwatch* watch, Bool_t cr = kFALSE); Print file copy progress. Int_t Cp(const char* src, const char* dst = 0, const char* opts = 0); Copy files in/out of the sandbox. Either 'src' or 'dst' must be in the; sandbox.; Return 0 on success, -1 on error. TXProofMgr(const char* url, Int_t loglevel = -1, const char* alias = """"). Bool_t IsValid() const; { return fSocket; }. TProof * AttachSession(Int_t id, Bool_t gui = kFALSE); { return TProofMgr::AttachSession(id, gui); }. » Author: G. Ganis, Nov 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXProofMgr.html:17585,sandbox,sandbox,17585,root/html602/TXProofMgr.html,https://root.cern,https://root.cern/root/html602/TXProofMgr.html,3,"['log', 'sandbox']","['loglevel', 'sandbox']"
Testability,", double xi=1, double x0=0);  Complement of the distribution function of the Landau distribution (upper tail). ;  ; double landau_xm1 (double x, double xi=1, double x0=0);  First moment (mean) of the truncated Landau distribution. ;  ; double landau_xm2 (double x, double xi=1, double x0=0);  Second moment of the truncated Landau distribution. ;  ; template<class T > ; T Lmag (const SVector< T, 4 > &rhs);  Lmag: Minkowski Lorentz-Vector norm (only for 4-dim vectors) Length of a vector Lorentz-Vector: \( |\vec{v}| = \sqrt{v_0^2 - v_1^2 - v_2^2 -v_3^2} \). ;  ; template<class A , class T > ; T Lmag (const VecExpr< A, T, 4 > &rhs);  ; template<class T > ; T Lmag2 (const SVector< T, 4 > &rhs);  Lmag2: Square of Minkowski Lorentz-Vector norm (only for 4D Vectors) Template to compute \( |\vec{v}|^2 = v_0^2 - v_1^2 - v_2^2 -v_3^2 \). ;  ; template<class A , class T > ; T Lmag2 (const VecExpr< A, T, 4 > &rhs);  ; double log1p (double x);  declarations for functions which are not implemented by some compilers ;  ; double lognormal_cdf (double x, double m, double s, double x0=0);  Cumulative distribution function of the lognormal distribution (lower tail). ;  ; double lognormal_cdf_c (double x, double m, double s, double x0=0);  Complement of the cumulative distribution function of the lognormal distribution (upper tail). ;  ; template<class char_t , class traits_t > ; std::basic_ios< char_t, traits_t > & machine_readable (std::basic_ios< char_t, traits_t > &ios);  ; template<class T , unsigned int D> ; T Mag (const SVector< T, D > &rhs);  Vector magnitude (Euclidean norm) Compute : \( |\vec{v}| = \sqrt{\sum_iv_i^2} \). ;  ; template<class A , class T , unsigned int D> ; T Mag (const VecExpr< A, T, D > &rhs);  ; template<class T , unsigned int D> ; T Mag2 (const SVector< T, D > &rhs);  Vector magnitude square Template to compute \(|\vec{v}|^2 = \sum_iv_i^2 \). ;  ; template<class A , class T , unsigned int D> ; T Mag2 (const VecExpr< A, T, D > &rhs);  ; template<class T > ; co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math.html:60193,log,lognormal,60193,doc/master/namespaceROOT_1_1Math.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html,2,['log'],['lognormal']
Testability,", each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : Layout: ""TANH|50,TANH|50,TANH|50,LINEAR"" [Layout of the network.]; : ErrorStrategy: ""SUMOFSQUARES"" [Loss function: Mean squared error (regression) or cross entropy (binary classification).]; : WeightInitialization: ""XAVIERUNIFORM"" [Weight initialization strategy]; : Architecture: ""CPU"" [Which architecture to perform the training on.]; : TrainingStrategy: ""LearningRate=1e-3,Momentum=0.3,ConvergenceSteps=20,BatchSize=50,TestRepetitions=1,WeightDecay=0.0,Regularization=None,Optimizer=Adam"" [Defines the training strategies.]; : - Default:; : VerbosityLevel: ""Default"" [Verbosity level]; : CreateMVAPdfs: ""False"" [Create PDFs for classifier outputs (signal and background)]; : IgnoreNegWeightsInTraining: ""False"" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]; : InputLayout: ""0|0|0"" [The Layout of the input]; : BatchLayout: ""0|0|0"" [The Layout of the batch]; : RandomSeed: ""0"" [Random seed used for weight initialization and batch shuffling]; : ValidationSize: ""20%"" [Part of the training data to use for validation. Specify as 0.2 or 20% to use a fifth of the data set as validation set. Specify as 100 to use exactly 100 events. (Default: 20%)]; DNN_CPU : [datasetreg] : Create Transformation ""G"" with events from all classes.; : ; : Transformation, Variable selection : ; : Input : variable 'var1' <---> Output : variable 'var1'; : Input : variable 'var2' <---> Output : variable 'var2'; : Will now use the CPU architecture with BLAS and IMT support !; Factory : Booking method: ␛[1mBDTG␛[0m; : ; <WARNING> : Value for option maxdepth was previously set to 3; : the option NegWeightTreatment=InverseBoostNegWeights does not exist for BoostType=Grad; : --> change to new default NegWeightTreatment=Pray; Factory : ␛[1mTrain all meth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:4227,test,testing,4227,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['test'],['testing']
Testability,", end;; 998 start = std::chrono::system_clock::now();; 999 ; 1000 if (!fInteractive) {; 1001 Log() << std::setw(10) << ""Epoch"" << "" | ""; 1002 << std::setw(12) << ""Train Err.""; 1003 << std::setw(12) << ""Test Err.""; 1004 << std::setw(12) << ""GFLOP/s""; 1005 << std::setw(12) << ""Conv. Steps"" << Endl;; 1006 std::string separator(62, '-');; 1007 Log() << separator << Endl;; 1008 }; 1009 ; 1010 while (!converged); 1011 {; 1012 stepCount++;; 1013 ; 1014 // Perform minimization steps for a full epoch.; 1015 trainingData.Shuffle();; 1016 for (size_t i = 0; i < batchesInEpoch; i += nThreads) {; 1017 batches.clear();; 1018 for (size_t j = 0; j < nThreads; j++) {; 1019 batches.reserve(nThreads);; 1020 batches.push_back(trainingData.GetBatch());; 1021 }; 1022 if (settings.momentum > 0.0) {; 1023 minimizer.StepMomentum(net, nets, batches, settings.momentum);; 1024 } else {; 1025 minimizer.Step(net, nets, batches);; 1026 }; 1027 }; 1028 ; 1029 if ((stepCount % minimizer.GetTestInterval()) == 0) {; 1030 ; 1031 // Compute test error.; 1032 Double_t testError = 0.0;; 1033 for (auto batch : testData) {; 1034 auto inputMatrix = batch.GetInput();; 1035 auto outputMatrix = batch.GetOutput();; 1036 testError += testNet.Loss(inputMatrix, outputMatrix);; 1037 }; 1038 testError /= (Double_t) (nTestSamples / settings.batchSize);; 1039 ; 1040 //Log the loss value; 1041 fTrainHistory.AddValue(""testError"",stepCount,testError);; 1042 ; 1043 end = std::chrono::system_clock::now();; 1044 ; 1045 // Compute training error.; 1046 Double_t trainingError = 0.0;; 1047 for (auto batch : trainingData) {; 1048 auto inputMatrix = batch.GetInput();; 1049 auto outputMatrix = batch.GetOutput();; 1050 trainingError += net.Loss(inputMatrix, outputMatrix);; 1051 }; 1052 trainingError /= (Double_t) (nTrainingSamples / settings.batchSize);; 1053 //Log the loss value; 1054 fTrainHistory.AddValue(""trainingError"",stepCount,trainingError);; 1055 ; 1056 // Compute numerical throughput.; 1057 std::chrono::duration<double> ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:36861,test,test,36861,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['test'],['test']
Testability,", epsrel, maxpts);; 2868 result = imd.Integral(a, b);; 2869 relerr = (result != 0) ? imd.Error() / std::abs(result) : imd.Error();; 2870 nfnevl = 0;; 2871 ifail = imd.Status();; 2872 }; 2873 ; 2874 ; 2875 return result;; 2876}; 2877 ; 2878 ; 2879////////////////////////////////////////////////////////////////////////////////; 2880/// Return kTRUE if the function is valid; 2881 ; 2882Bool_t TF1::IsValid() const; 2883{; 2884 if (fFormula) return fFormula->IsValid();; 2885 if (fMethodCall) return fMethodCall->IsValid();; 2886 // function built on compiled functors are always valid by definition; 2887 // (checked at compiled time); 2888 // invalid is a TF1 where the functor is null pointer and has not been saved; 2889 if (!fFunctor && fSave.empty()) return kFALSE;; 2890 return kTRUE;; 2891}; 2892 ; 2893 ; 2894//______________________________________________________________________________; 2895 ; 2896 ; 2897void TF1::Print(Option_t *option) const; 2898{; 2899 if (fType == EFType::kFormula) {; 2900 printf(""Formula based function: %s \n"", GetName());; 2901 assert(fFormula);; 2902 fFormula->Print(option);; 2903 } else if (fType > 0) {; 2904 if (fType == EFType::kInterpreted); 2905 printf(""Interpreted based function: %s(double *x, double *p). Ndim = %d, Npar = %d \n"", GetName(), GetNdim(),; 2906 GetNpar());; 2907 else if (fType == EFType::kCompositionFcn) {; 2908 printf(""Composition based function: %s. Ndim = %d, Npar = %d \n"", GetName(), GetNdim(), GetNpar());; 2909 if (!fComposition); 2910 printf(""fComposition not found!\n""); // this would be bad; 2911 } else {; 2912 if (fFunctor); 2913 printf(""Compiled based function: %s based on a functor object. Ndim = %d, Npar = %d\n"", GetName(),; 2914 GetNdim(), GetNpar());; 2915 else {; 2916 printf(""Function based on a list of points from a compiled based function: %s. Ndim = %d, Npar = %d, Npx ""; 2917 ""= %zu\n"",; 2918 GetName(), GetNdim(), GetNpar(), fSave.size());; 2919 if (fSave.empty()); 2920 Warning(""Print"", ""Function %s is base",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:110967,assert,assert,110967,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['assert'],['assert']
Testability,", ie, can it appear on the left-hand side; of an assignment expression? LValues are also special since they can; potentially be analytically integrated and generated. RooArgSet* getParameters(const RooAbsData* data, Bool_t stripDisconnected = kTRUE) const. RooArgSet* getParameters(const RooAbsData& data, Bool_t stripDisconnected = kTRUE) const; Return the parameters of this p.d.f when used in conjuction with dataset 'data'. RooArgSet* getObservables(const RooArgSet& set, Bool_t valueOnly = kTRUE) const; Return the observables of _this_ pdf given a set of observables. return getObservables(&set,valueOnly). RooArgSet* getDependents(const RooArgSet& set) const; --- Obsolete functions for backward compatibility. { return getObservables(set) ; }. RooArgSet* getDependents(const RooAbsData* set) const; { return getObservables(set) ; }. RooArgSet* getDependents(const RooArgSet* depList) const; { return getObservables(depList) ; }. Bool_t dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; { return observableOverlaps(dset,testArg) ; }. Bool_t dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; { return observableOverlaps(depList, testArg) ; }. Bool_t checkDependents(const RooArgSet* nset) const; { return checkObservables(nset) ; }. Bool_t recursiveCheckDependents(const RooArgSet* nset) const; --- End obsolete functions for backward compatibility. { return recursiveCheckObservables(nset) ; }. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); I/O streaming interface (machine readable). void writeToStream(ostream& os, Bool_t compact) const. void Print(Option_t* options = 0) const; Printing interface (human readable). void printMetaArgs(ostream& ) const; {}. const std::set<std::string>& attributes() const; Returns set of names of boolean attributes defined. const std::map<std::string,std::string>& stringAttributes() const; Returns map<string,string> with all string attributes defined. const std::set<std::s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsArg.html:38553,test,testArg,38553,root/html528/RooAbsArg.html,https://root.cern,https://root.cern/root/html528/RooAbsArg.html,6,['test'],['testArg']
Testability,", ie, can it appear on the left-hand side; of an assignment expression? LValues are also special since they can; potentially be analytically integrated and generated. RooArgSet* getParameters(const RooAbsData* data, Bool_t stripDisconnected = kTRUE) const. RooArgSet* getParameters(const RooAbsData& data, Bool_t stripDisconnected = kTRUE) const; Return the parameters of this p.d.f when used in conjuction with dataset 'data'. RooArgSet* getObservables(const RooArgSet& set, Bool_t valueOnly = kTRUE) const; Return the observables of _this_ pdf given a set of observables. return getObservables(&set,valueOnly). RooArgSet* getDependents(const RooArgSet& set) const; --- Obsolete functions for backward compatibility. { return getObservables(set) ; }. RooArgSet* getDependents(const RooAbsData* set) const; { return getObservables(set) ; }. RooArgSet* getDependents(const RooArgSet* depList) const; { return getObservables(depList) ; }. Bool_t dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; { return observableOverlaps(dset,testArg) ; }. Bool_t dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; { return observableOverlaps(depList, testArg) ; }. Bool_t checkDependents(const RooArgSet* nset) const; { return checkObservables(nset) ; }. Bool_t recursiveCheckDependents(const RooArgSet* nset) const; --- End obsolete functions for backward compatibility. { return recursiveCheckObservables(nset) ; }. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); I/O streaming interface (machine readable). void writeToStream(ostream& os, Bool_t compact) const. void Print(Option_t* options = 0) const; Printing interface (human readable). void printMetaArgs(ostream& ) const; {}. const std::set<std::string>& attributes() const; Returns set of names of boolean attributes defined. const std::map<std::string,std::string>& stringAttributes() const; Returns std::map<string,string> with all string attributes defined. const std::set<s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsArg.html:41621,test,testArg,41621,root/html534/RooAbsArg.html,https://root.cern,https://root.cern/root/html534/RooAbsArg.html,6,['test'],['testArg']
Testability,", please consider the following citation; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201]. More documentation and updates are available on; http://www.desy.de/~sschmitt. As compared to TUnfold, TUndolfDensity adds the following functionality; * background subtraction (see documentation of TUnfoldSys); * error propagation (see documentation of TUnfoldSys); * regularisation schemes respecting the bin widths; * support for complex, multidimensional input distributions. Complex binning schemes are imposed on the measurements y and; on the result vector x with the help of the class TUnfoldBinning; The components of x or y are part of multi-dimensional distributions.; The bin widths along the relevant directions in these distributions; are used to calculate bin densities (number of events divided by bin width); or to calculate derivatives taking into account the proper distance of; adjacent bin centers. Complex binning schemes. in literature on unfolding, the ""standard"" test case is a; one-dimensional distribution without underflow or overflow bins.; The migration matrix is almost diagonal. This ""standard"" case is rarely realized for real problems. Often one has to deal with multi-dimensional input distributions.; In addition, there are underflow and overflow bins; or other background bins, possibly determined with the help of auxillary; measurements. In TUnfoldDensity, such complex binning schemes are handled with the help; of the class TUnfoldBinning. For each vector there is a tree; structure. The tree nodes hold multi-dimensiopnal distributions. For example, the ""measurement"" tree could have two leaves, one for; the primary distribution and one for auxillary measurements. Similarly, the ""truth"" tree could have two leaves, one for the; signal and one for the background. each of the leaves may then have a multi-dimensional distribution. The class TUnfoldBinning takes care to map all bins of the; ""measurement"" to the one-dimensional vector y.; Similarly, the ""truth"" b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfoldDensity.html:1659,test,test,1659,root/html534/TUnfoldDensity.html,https://root.cern,https://root.cern/root/html534/TUnfoldDensity.html,3,['test'],['test']
Testability,", pz;; for (Int_t i = 0; i < 25000; i++) {; if (i%1000 == 0) printf(""at entry: %d\n"",i);; gRandom->Rannor(px,py);; pz = px*px + py*py;; hpx->Fill(px);; hpxpy->Fill(px,py);; hprof->Fill(px,pz);; T->Fill();; }; T->Print();; f.Write();; gBenchmark->Show(""hsimple"");; }; ; void htr1() {; // Connect Tree generated by htw and show histograms for entry 12345; auto f = new TFile(""ht.root"");; auto T = (TTree*)f->Get(""T"");; TH1F *hpx = nullptr;; TH2F *hpxpy = nullptr;; TProfile *hprof = nullptr;; T->SetBranchAddress(""hpx"",&hpx);; T->SetBranchAddress(""hpxpy"",&hpxpy);; T->SetBranchAddress(""hprof"",&hprof);; T->GetEntry(12345);; auto c1 = new TCanvas(""c1"",""test"",10,10,600,1000);; c1->Divide(1,3);; c1->cd(1);; hpx->Draw();; c1->cd(2);; hpxpy->Draw();; c1->cd(3);; hprof->Draw();; c1->Print(""htr1.png"");; }; ; void htr2() {; // Connect Tree generated by htw and show histograms for entry 12345; // a variant of htr1; auto f = new TFile(""ht.root"");; auto T = (TTree*)f->Get(""T"");; auto c1 = new TCanvas(""c1"",""test"",10,10,600,1000);; c1->Divide(1,3);; c1->cd(1);; T->Draw(""hpx.Draw()"","""",""goff"",1,12345);; c1->cd(2);; T->Draw(""hpxpy.Draw()"","""",""goff"",1,12345);; c1->cd(3);; T->Draw(""hprof.Draw()"","""",""goff"",1,12345);; c1->Print(""htr2.png"");; }; ; void htr3() {; // Connect Tree generated by htw; // read all histograms and plot the RMS of hpx versus the Mean of hprof; // for each of the 25000 entries; auto f = new TFile(""ht.root"");; auto T = (TTree*)f->Get(""T"");; auto c1 = new TCanvas(""c1"",""test"",10,10,600,400);; T->Draw(""hpx.GetRMS():hprof.GetMean()"");; c1->Print(""htr3.png"");; }; ; void htest() {; htw();; htr1();; htr2();; htr3();; }; f#define f(i)Definition RSha256.hxx:104; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; gBenchmarkR__EXTERN TBenchmark * gBenchmarkDefinition TBenchmark.h:59; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TBenchmark::Startvirtual void Start(const char *name)Starts Benchmark with the specified name.Definition TB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/htest_8C.html:2000,test,test,2000,doc/master/htest_8C.html,https://root.cern,https://root.cern/doc/master/htest_8C.html,1,['test'],['test']
Testability,", statistical analysis and visualization. A (mostly historically interesting) list of ROOT talks and publications. Paper presented at the AIHENP conference in Laussanne 1996.; ROOT - An Object Oriented Data Analysis Framework; Slides of the presentation at CHEP'97 conference in Berlin.; ROOT - An Interactive Object Oriented Framework and its application to NA49 data analysis; Paper presented at the CHEP'97 conference in Berlin.; ROOT - An Interactive Object Oriented Framework and its application to NA49 data analysis; Paper published in ""Interface Magazine"" (Japanese Engineering Magazine).; The Power of Object Oriented Frameworks; Slides used in various presentations of the ROOT system.; This is a compressed tar file including a README file and about 40 Postscript files.; First three parts of a ROOT course.; Part1, part2 and part3 (the course is not finished yet and part 3 ends quite abruptly).; First comparison between ROOT, Objectivity/DB and LHC++ histOOgrams.; Paper and full source of used test programs.; Papers presented at HEPVis'98 at SLAC from Jan 28-30, 1998. ROOT Status Report; Atlfast++, the Atlas Fast Simulation program based on ROOT; gh2root, the GEANT3 to ROOT conversion tool; New ROOT GUI Classes. Paper published in the Linux Journal, Issue 51, July 1998.; ROOT: An Object-Oriented Data Analysis Framework. CHEP 2012. ROOT overview presented by Fons Rademakers. Cling - The LLVM-based C++ Interpreter presented by Vassil Vassilev.; ROOT I/O in Javascript presented by Bertrand Bellenot.; PEAC - A set of tools to quickly enable PROOF on a cluster poster presented by Gerri Ganis and Martin Vala.; Preparing for the new C++11 standard poster presented by Axel Naumann;; ROOT: High Quality, Systematically poster presented by Axel Naumann;; Improvements in ROOT I/O poster presented by Philippe Canal. An Exhibition Booth for demonstrating recent developments in data processing software used at the LHC presented by the CERN PH-SFT group (in Kimmel).; Papers NOT by ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/publications.html:3392,test,test,3392,d/publications.html,https://root.cern,https://root.cern/d/publications.html,1,['test'],['test']
Testability,", std::begin (nothing), std::end (nothing), 10000, outputContainer, true);; 1084 return error;; 1085 }; 1086 ; 1087 ; 1088 template <typename Weights, typename Gradients, typename PassThrough>; 1089 double Net::operator() (PassThrough& settingsAndBatch, Weights& weights, Gradients& gradients) const; 1090 {; 1091 std::vector<double> nothing;; 1092 assert (numWeights () == weights.size ());; 1093 assert (weights.size () == gradients.size ());; 1094 double error = forward_backward(m_layers, settingsAndBatch, std::begin (weights), std::end (weights), std::begin (gradients), std::end (gradients), 0, nothing, false);; 1095 return error;; 1096 }; 1097 ; 1098 template <typename Weights, typename Gradients, typename PassThrough, typename OutContainer>; 1099 double Net::operator() (PassThrough& settingsAndBatch, Weights& weights, Gradients& gradients, ModeOutput eFetch, OutContainer& outputContainer) const; 1100 {; 1101 MATH_UNUSED(eFetch);; 1102 assert (numWeights () == weights.size ());; 1103 assert (weights.size () == gradients.size ());; 1104 double error = forward_backward(m_layers, settingsAndBatch, std::begin (weights), std::end (weights), std::begin (gradients), std::end (gradients), 0, outputContainer, true);; 1105 return error;; 1106 }; 1107 ; 1108 ; 1109 ; 1110 template <typename LayerContainer, typename DropContainer, typename ItWeight, typename ItGradient>; 1111 std::vector<std::vector<LayerData>> Net::prepareLayerData (LayerContainer& _layers,; 1112 Batch& batch,; 1113 const DropContainer& dropContainer,; 1114 ItWeight itWeightBegin,; 1115 ItWeight /*itWeightEnd*/,; 1116 ItGradient itGradientBegin,; 1117 ItGradient itGradientEnd,; 1118 size_t& totalNumWeights) const; 1119 {; 1120 LayerData::const_dropout_iterator itDropOut;; 1121 bool usesDropOut = !dropContainer.empty ();; 1122 if (usesDropOut); 1123 itDropOut = std::begin (dropContainer);; 1124 ; 1125 if (_layers.empty ()); 1126 throw std::string (""no layers in this net"");; 1127 ; 1128 ; 1129 // ----------- cr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:35423,assert,assert,35423,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['assert'],['assert']
Testability,", va_list va) const; Double_tTMVA::PDEFoamDensityBase::GetBoxVolume(); TMVA::MsgLogger&TMVA::PDEFoamDensityBase::Log() const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::BinarySearchTree*TMVA::PDEFoamDensityBase::fBstBinary tree to find events within a volume; TMVA::MsgLogger*TMVA::PDEFoamDensityBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamEventDensity(); {}. PDEFoamEventDensity(vector<Double_t> box); User construcor. Parameters:. - box - size of sampling box. PDEFoamEventDensity(const TMVA::PDEFoamEventDensity& ); Copy constructor. Double_t Density(vector<Double_t>& Xarg, Double_t& event_density); This function is needed during the foam buildup. It returns the; event density within the range-searching volume (specified by; fBox). Parameters:. - xev - event vector (in [fXmin,fXmax]) to place the box at. - event_density - here the event density is stored. Returns:. Number of events (event weights), which were found in the; range-searching volume at point 'xev', divided by the box; volume. virtual ~PDEFoamEventDensity(); {}. » Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt » Copyright (c) 2008, 2010: *; » Last changed: root/tmva $Id$ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__PDEFoamEventDensity.html:6762,log,logger,6762,root/html602/TMVA__PDEFoamEventDensity.html,https://root.cern,https://root.cern/root/html602/TMVA__PDEFoamEventDensity.html,2,['log'],['logger']
Testability,", void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Private Member Functions; Int_t Broadcast (const char *mess, Int_t kind=kMESS_STRING, Int_t type=kRRT_Undef);  Broadcast a character string buffer to the remote session. ;  ; Int_t Broadcast (const TMessage &mess);  Broadcast a message to the remote session. ;  ; Int_t Broadcast (Int_t kind, Int_t type=kRRT_Undef);  ; Int_t BroadcastObject (const TObject *obj, Int_t kind=kMESS_OBJECT);  Broadcast an object to the remote session. ;  ; Int_t BroadcastRaw (const void *buffer, Int_t length);  Broadcast a raw buffer of specified length to the remote session. ;  ; Bool_t CheckFile (const char *file, Long_t modtime);  Check if a file needs to be send to the server. ;  ; Int_t Collect (Long_t timeout=-1);  Collect responses from the remote server. ;  ; Int_t CollectInput ();  Collect and analyze available input from the socket. ;  ; void RecvLogFile (Int_t size);  Receive the log file from the server. ;  . Private Attributes; THashList * fFileList;  ; Bool_t fInterrupt;  ; TSignalHandler * fIntHandler;  ; TString fLogFilePath;  ; TMonitor * fMonitor;  ; TString fName;  ; Int_t fProtocol;  ; TObject * fReceivedObject;  ; TSeqCollection * fRootFiles;  ; TSocket * fSocket;  ; TUrl fUrl;  ; TRemoteObject * fWorkingDir;  . Static Private Attributes; static Int_t fgPortAttempts = 100;  ; static Int_t fgPortLower = 49152;  ; static Int_t fgPortUpper = 65535;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TApplication;  TApplication ();  Default ctor. Can be used by classes deriving from TApplication. ;  ; virtual void Forum (const char *line);  The function ("".forum <type>"") submits a new post on the ROOT forum via web browser. ;  ; virtual void GitHub (const char *line);  The function ("".gh <type>"") submits a new issue on GitHub via web",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationRemote.html:19192,log,log,19192,doc/master/classTApplicationRemote.html,https://root.cern,https://root.cern/doc/master/classTApplicationRemote.html,1,['log'],['log']
Testability,", void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooMinimizer&operator=(const RooMinimizer&); voidoptimizeConst(Bool_t flag); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); RooFitResult*save(const char* name = 0, const char* title = 0); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); Int_tseek(); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidsetEps(Double_t eps); voidsetErrorLevel(Double_t level); voidsetEvalErrorWall(Bool_t flag); Bool_tsetLogFile(const char* logf = 0); voidsetMinimizerType(const char* type); static voidTObject::SetObjectStat(Bool_t stat); voidsetPrintEvalErrors(Int_t numEvalErrors); Int_tsetPrintLevel(Int_t newLevel); voidsetProfile(Bool_t flag = kTRUE); voidsetStrategy(Int_t strat); virtual voidTObject::SetUniqueID(UInt_t uid); voidsetVerbose(Bool_t flag = kTRUE); virtual voidShowMembers(TMemberInspector& insp); Int_tsimplex(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooMinimizer.html:5593,log,logf,5593,root/html530/RooMinimizer.html,https://root.cern,https://root.cern/root/html530/RooMinimizer.html,1,['log'],['logf']
Testability,", when you set a point it will be in the histogram coordinates.; For a newly created blank pad, one may use TPad::Range to set the user coordinate system. This function is defined as:; void Range(float x1,float y1,float x2,float y2); The arguments x1, x2 defines the new range in the x direction, and the y1, y2 define the new range in the y-direction.; root[] TCanvas MyCanvas (""MyCanvas""); root[] gPad->Range(-100,-100,100,100); This will set the active pad to have both coordinates to go from -100 to 100, with the center of the pad at (0,0). You can visually check the coordinates by viewing the status bar in the canvas. To display the status bar select Event Status entry in the View canvas menu. The status bar. 9.3.2.2 The Normalized Coordinate System (NDC); Normalized coordinates are independent of the window size and of the user system. The coordinates range from 0 to 1 and (0, 0) corresponds to the bottom-left corner of the pad. Several internal ROOT functions use the NDC system (3D primitives, PostScript, log scale mapping to linear scale). You may want to use this system if the user coordinates are not known ahead of time.; 9.3.2.3 The Pixel Coordinate System; The least common is the pixel coordinate system, used by functions such as DistancetoPrimitive() and ExecuteEvent(). Its primary use is for cursor position, which is always given in pixel coordinates. If (px,py) is the cursor position, px=0 and py=0 corresponds to the top-left corner of the pad, which is the standard convention in windowing systems.; 9.3.2.4 Using NDC for a particular Object; Most of the time, you will be using the user coordinate system. But sometimes, you will want to use NDC. For example, if you want to draw text always at the same place over a histogram, no matter what the histogram coordinates are. There are two ways to do this. You can set the NDC for one object or may convert NDC to user coordinates. Most graphical objects offer an option to be drawn in NDC. For instance, a line (TLin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:309223,log,log,309223,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['log'],['log']
Testability,", which allows to fix the parameter (not to fit). ; Definition at line 113 of file TSpectrum2Fit.h. ◆ fFixAmp. Bool_t* TSpectrum2Fit::fFixAmp. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 99 of file TSpectrum2Fit.h. ◆ fFixAmpX1. Bool_t* TSpectrum2Fit::fFixAmpX1. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional ; Definition at line 100 of file TSpectrum2Fit.h. ◆ fFixAmpY1. Bool_t* TSpectrum2Fit::fFixAmpY1. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional ; Definition at line 101 of file TSpectrum2Fit.h. ◆ fFixAx. Bool_t TSpectrum2Fit::fFixAx. protected . logical value of ax parameter, which allows to fix the parameter (not to fit). ; Definition at line 114 of file TSpectrum2Fit.h. ◆ fFixAy. Bool_t TSpectrum2Fit::fFixAy. protected . logical value of ay parameter, which allows to fix the parameter (not to fit). ; Definition at line 115 of file TSpectrum2Fit.h. ◆ fFixBx. Bool_t TSpectrum2Fit::fFixBx. protected . logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 111 of file TSpectrum2Fit.h. ◆ fFixBy. Bool_t TSpectrum2Fit::fFixBy. protected . logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ; Definition at line 112 of file TSpectrum2Fit.h. ◆ fFixPositionX. Bool_t* TSpectrum2Fit::fFixPositionX. protected . [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 95 of file TSpectrum2Fit.h. ◆ fFixPositionX1. Bool_t* TSpectrum2Fit::f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:83836,log,logical,83836,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['log'],['logical']
Testability,", which allows to fix the parameter (not to fit); -positionInitX - aray of initial values of peaks x positions; -fixPositionX - array of logical values which allow to fix appropriate x positions (not fit). However they are present in the estimated functional.; -positionInitY - aray of initial values of peaks y positions; -fixPositionY - array of logical values which allow to fix appropriate y positions (not fit). However they are present in the estimated functional.; -ampInit - aray of initial values of 2D peaks amplitudes; -fixAmp - aray of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; -ampInitX1 - aray of initial values of amplitudes of 1D ridges in x direction; -fixAmpX1 - aray of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional; -ampInitY1 - aray of initial values of amplitudes of 1D ridges in y direction; -fixAmpY1 - aray of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional. void SetBackgroundParameters(Double_t a0Init, Bool_t fixA0, Double_t axInit, Bool_t fixAx, Double_t ayInit, Bool_t fixAy). SETTER FUNCTION. This function sets the following fitting parameters of background:; -a0Init - initial value of a0 parameter (backgroud is estimated as a0+ax*x+ay*y); -fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); -axInit - initial value of ax parameter; -fixAx - logical value of ax parameter, which allows to fix the parameter (not to fit); -ayInit - initial value of ay parameter; -fixAy - logical value of ay parameter, which allows to fix the parameter (not to fit). void SetTailParameters(Double_t tInitXY, Bool_t fixTxy, Double_t tInitX, Bool_t fixTx, Double_t tInitY, Bool_t fixTy, Double_t bInitX, Bool_t fixBx, Double_t bInitY, Bool_t fixBy, Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Fit.html:65959,log,logical,65959,root/html528/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Fit.html,6,['log'],['logical']
Testability,",""[0]*x*sin([1]*x)"",-3,3);. This creates a function of variable x with 2 parameters.; The parameters must be initialized via:. fa->SetParameter(0,value_first_parameter);; fa->SetParameter(1,value_second_parameter);. Parameters may be given a name:. fa->SetParName(0,""Constant"");. Example b:; >; TF1 *fb = new TF1(""fb"",""gaus(0)*expo(3)"",0,10);. gaus(0) is a substitute for [0]*exp(-0.5*((x-[1])/[2])**2); and (0) means start numbering parameters at 0.; expo(3) is a substitute for exp([3]+[4]*x). Case 2: inline expression using TMath functions with parameters; >; TF1 *fb2 = new TF1(""fa3"",""TMath::Landau(x,[0],[1],0)"",-5,10);; fb2->SetParameters(0.2,1.3);; fb2->Draw();. C - A general C function with parameters; Consider the macro myfunc.C below:. // Macro myfunc.C; Double_t myfunction(Double_t *x, Double_t *par); {; Float_t xx =x[0];; Double_t f = TMath::Abs(par[0]*sin(par[1]*xx)/xx);; return f;; }; void myfunc(); {; TF1 *f1 = new TF1(""myfunc"",myfunction,0,10,2);; f1->SetParameters(2,1);; f1->SetParNames(""constant"",""coefficient"");; f1->Draw();; }; void myfit(); {; TH1F *h1=new TH1F(""h1"",""test"",100,0,10);; h1->FillRandom(""myfunc"",20000);; TF1 *f1=gROOT->GetFunction(""myfunc"");; f1->SetParameters(800,1);; h1->Fit(""myfunc"");; }. In an interactive session you can do:. Root > .L myfunc.C; Root > myfunc();; Root > myfit();. TF1 objects can reference other TF1 objects (thanks John; Odonnell) of type A or B defined above. This excludes CINT interpreted functions; and compiled functions. However, there is a restriction. A function cannot; reference a basic function if the basic function is a polynomial polN.; Example:. {; TF1 *fcos = new TF1 (""fcos"", ""[0]*cos(x)"", 0., 10.);; fcos->SetParNames( ""cos"");; fcos->SetParameter( 0, 1.1);; TF1 *fsin = new TF1 (""fsin"", ""[0]*sin(x)"", 0., 10.);; fsin->SetParNames( ""sin"");; fsin->SetParameter( 0, 2.1);; TF1 *fsincos = new TF1 (""fsc"", ""fcos+fsin"");; TF1 *fs2 = new TF1 (""fs2"", ""fsc+fsc"");; }. D - A general C++ function object (functor) with paramet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TF1.html:2653,test,test,2653,root/html528/TF1.html,https://root.cern,https://root.cern/root/html528/TF1.html,7,['test'],['test']
Testability,",...) constIssue error message.Definition TObject.cxx:987; TObject::Hashvirtual ULong_t Hash() constReturn hash value for this object.Definition TObject.cxx:515; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented in TEnvRec, TNamed, TObjString, TParameter< AParamType >, TParameter< Long64_t >, TCollection, TPair, TASImagePlugin, TASPluginGS, TPad, TImagePlugin, TPave, TGObject, TGPicture, TIconBoxThumb, TClassDocInfo, THtml::TFileSysEntry, TStatistic, TDrawFeedback, TStatsFeedback, and RooLinkedList.; Definition at line 515 of file TObject.cxx. ◆ HasInconsistentHash(). Bool_t TObject::HasInconsistentHash ; (; ); const. inline . Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ; missing call to RecursiveRemove in destructor).; Note: Since the consistency is only tested for during inserts, this routine will return true for object that have never been inserted whether or not they have a consistent setup. This has no negative side-effect as searching for the object with the right or wrong Hash will always yield a not-found answer (Since anyway no hash can be guaranteed unique, there is always a check) ; Definition at line 358 of file TObject.h. ◆ Info(). void TObject::Info ; (; const char * ; location, . const char * ; fmt, .  ; ... . ); const. virtual . Issue info message. ; Use ""location"" to specify the method where the warning occurred. Accepts standard printf formatting arguments. ; Definition at line 961 of file TObject.cxx. ◆ InheritsFrom() [1/2]. Bool_t TObject::InheritsFrom ; (; const char * ; classname); const. virtual . Returns kTRUE if object inherits from class ""classname"". ; Reimplemented in TClass.; Definition at line 525 of file TObject.cxx. ◆ InheritsFrom() [2/2]. Bool_t TObject::InheritsFrom ; (; const TClass * ; cl); const. virtual . Returns kTRUE if object inherits from TClass c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTObject.html:44098,test,tested,44098,doc/v632/classTObject.html,https://root.cern,https://root.cern/doc/v632/classTObject.html,1,['test'],['tested']
Testability,",...) constIssue error message.Definition TObject.cxx:993; TObject::Hashvirtual ULong_t Hash() constReturn hash value for this object.Definition TObject.cxx:520; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented in TEnvRec, TNamed, TObjString, TParameter< AParamType >, TParameter< Long64_t >, TCollection, TPair, TASImagePlugin, TASPluginGS, TPad, TImagePlugin, TPave, TGObject, TGPicture, TIconBoxThumb, TClassDocInfo, THtml::TFileSysEntry, TStatistic, TDrawFeedback, TStatsFeedback, and RooLinkedList.; Definition at line 520 of file TObject.cxx. ◆ HasInconsistentHash(). Bool_t TObject::HasInconsistentHash ; (; ); const. inline . Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ; missing call to RecursiveRemove in destructor).; Note: Since the consistency is only tested for during inserts, this routine will return true for object that have never been inserted whether or not they have a consistent setup. This has no negative side-effect as searching for the object with the right or wrong Hash will always yield a not-found answer (Since anyway no hash can be guaranteed unique, there is always a check) ; Definition at line 358 of file TObject.h. ◆ Info(). void TObject::Info ; (; const char * ; location, . const char * ; fmt, .  ; ... . ); const. virtual . Issue info message. ; Use ""location"" to specify the method where the warning occurred. Accepts standard printf formatting arguments. ; Definition at line 967 of file TObject.cxx. ◆ InheritsFrom() [1/2]. Bool_t TObject::InheritsFrom ; (; const char * ; classname); const. virtual . Returns kTRUE if object inherits from class ""classname"". ; Reimplemented in TClass.; Definition at line 530 of file TObject.cxx. ◆ InheritsFrom() [2/2]. Bool_t TObject::InheritsFrom ; (; const TClass * ; cl); const. virtual . Returns kTRUE if object inherits from TClass c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObject.html:43823,test,tested,43823,doc/master/classTObject.html,https://root.cern,https://root.cern/doc/master/classTObject.html,1,['test'],['tested']
Testability,",.01);; sumstat += chi2[n];; pt[n] = TMath::Sqrt(px[n]*px[n] + py[n]*py[n]);; }; t3->Fill();; t3f->Fill();; }; // Write the two files; t3->Print();; f.cd();; t3->Write();; fr.cd();; t3f->Write();; }. // Function to read the two files and add the friend; void tree3r() {; TFile *f = new TFile(""tree3.root"");; TTree *t3 = (TTree*)f->Get(""t3"");; // Add the second tree to the first tree as a friend; t3->AddFriend(""t3f"",""tree3f.root"");; // Draw pz which is in the first tree and use pt; // in the condition. pt is in the friend tree.; t3->Draw(""pz"",""pt>3"");; }. // This is executed when typing .x tree3.C; void tree3() {; tree3w();; tree3r();; }; 12.17 Example 4: A Tree with an Event Class; This example is a simplified version of $ROOTSYS/test/MainEvent.cxx and where Event objects are saved in a tree. The full definition of Event is in $ROOTSYS/test/Event.h. To execute this macro, you will need the library $ROOTSYS/test/libEvent.so. If it does not exist you can build the test directory applications by following the instruction in the $ROOTSYS/test/README file.; In this example we will show. the difference in splitting or not splitting a branch; how to read selected branches of the tree,; how to print a selected entry. 12.17.1 The Event Class; Event is a descendent of TObject. As such it inherits the data members of TObject and its methods such as Dump() and Inspect()andWrite(). In addition, because it inherits from TObject it can be a member of a collection. To summarize, the advantages of inheriting from a TObject are:. Inherit the Write, Inspect, and Dump methods; Enables a class to be a member of a ROOT collection; Enables RTTI. Below is the list of the Event data members. It contains a character array, several integers, a floating-point number, and an EventHeader object. The EventHeader class is described in the following paragraph. Event also has two pointers, one to a TClonesArray of tracks and one to a histogram. The string “->” in the comment field of the members *fTra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:575001,test,test,575001,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['test'],['test']
Testability,",100,-2,2);; h2->Draw();. TF1 *f1=new TF1(""f1"",""-x"",-10,10);; TGaxis *A1 = new TGaxis(0,2,10,2,""f1"",510,""-"");; A1->SetTitle(""axis with decreasing values"");; A1->Draw();. TF1 *f2=new TF1(""f2"",""exp(x)"",0,2);; TGaxis *A2 = new TGaxis(1,1,9,1,""f2"");; A2->SetTitle(""exponential axis"");; A2->SetLabelSize(0.03);; A2->SetTitleSize(0.03);; A2->SetTitleOffset(1.2);; A2->Draw();. TF1 *f3=new TF1(""f3"",""log10(x)"",1,1000);; TGaxis *A3 = new TGaxis(2,-2,2,0,""f3"",505,""G"");; A3->SetTitle(""logarithmic axis"");; A3->SetLabelSize(0.03);; A3->SetTitleSize(0.03);; A3->SetTitleOffset(1.2);; A3->Draw();; return c2;; }; Logarithmic axis; By default axis are linear. To define a TGaxis as logarithmic, it is; enough to create it with the option ""G"". When plotting an histogram or a graph the logarithmic scale can be set using:. gPad->SetLogx(1); set the logarithmic scale on the X axis; gPad->SetLogy(1); set the logarithmic scale on the Y axis. When the SetMoreLogLabels() method is called more labels are drawn; when in logarithmic scale and there is a small number of decades (less than 3).; Blank axis; To draw only the axis tick marks without the axis body, it is enough to specify; the option ""B"". It useful to superpose axis.; Tick marks' orientation; By default tick marks are drawn on the positive side of the axis, except for; vertical axis for which the default is negative. The chop parameter; allows to control the tick marks orientation:. chopt = ""+"": tick marks are drawn on Positive side. (default); chopt =""-"": tick mark are drawn on the negative side.; chopt = ""+-"": tick marks are drawn on both sides of the axis.; chopt = ""U"": Unlabelled axis, default is labeled. Tick marks' size; By default, tick marks have a length equal to 3 per cent of the axis length.; When the option ""S"" is specified, the length of the tick marks is equal to; fTickSize*axis_length, where fTickSize may be set via; TGaxis::SetTickSize. When plotting an histogram h the tick marks size can be changed using:. h->GetXaxis()->",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGaxis.html:5355,log,logarithmic,5355,root/html604/TGaxis.html,https://root.cern,https://root.cern/root/html604/TGaxis.html,1,['log'],['logarithmic']
Testability,",; 136 fSamples(std::vector<std::vector<Double_t> >(2)),; 137 fTestSampleFromH0(kFALSE) {; 138 Bool_t badSampleArg = sample1 == nullptr || sample1Size == 0;; 139 if (badSampleArg) {; 140 std::string msg = ""'sample1"";; 141 msg += !sample1Size ? ""Size' cannot be zero"" : ""' cannot be zero-length"";; 142 MATH_ERROR_MSG(""GoFTest"", msg.c_str());; 143 assert(!badSampleArg);; 144 }; 145 badSampleArg = sample2 == nullptr || sample2Size == 0;; 146 if (badSampleArg) {; 147 std::string msg = ""'sample2"";; 148 msg += !sample2Size ? ""Size' cannot be zero"" : ""' cannot be zero-length"";; 149 MATH_ERROR_MSG(""GoFTest"", msg.c_str());; 150 assert(!badSampleArg);; 151 }; 152 std::vector<const Double_t*> samples(2);; 153 std::vector<size_t> samplesSizes(2);; 154 samples[0] = sample1;; 155 samples[1] = sample2;; 156 samplesSizes[0] = sample1Size;; 157 samplesSizes[1] = sample2Size;; 158 SetSamples(samples, samplesSizes);; 159 }; 160 ; 161 GoFTest::GoFTest(size_t sampleSize, const Double_t* sample, EDistribution dist, const std::vector<double> & distParams); 162 : fDist(dist),; 163 fSamples(std::vector<std::vector<Double_t> >(1)),; 164 fTestSampleFromH0(kTRUE) {; 165 Bool_t badSampleArg = sample == nullptr || sampleSize == 0;; 166 if (badSampleArg) {; 167 std::string msg = ""'sample"";; 168 msg += !sampleSize ? ""Size' cannot be zero"" : ""' cannot be zero-length"";; 169 MATH_ERROR_MSG(""GoFTest"", msg.c_str());; 170 assert(!badSampleArg);; 171 }; 172 std::vector<const Double_t*> samples(1, sample);; 173 std::vector<size_t> samplesSizes(1, sampleSize);; 174 SetSamples(samples, samplesSizes);; 175 SetParameters(distParams);; 176 SetCDF();; 177 }; 178 ; 179 GoFTest::~GoFTest() {}; 180 ; 181 void GoFTest::SetSamples(std::vector<const Double_t*> samples, const std::vector<size_t> samplesSizes) {; 182 fCombinedSamples.assign(std::accumulate(samplesSizes.begin(), samplesSizes.end(), 0u), 0.0);; 183 size_t combinedSamplesSize = 0;; 184 for (size_t i = 0; i < samples.size(); ++i) {; 185 fSamples[i].assign(sam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:4887,assert,assert,4887,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,1,['assert'],['assert']
Testability,",; 30 fPointer(p); 31{; 32 if (fPointer) fStatus = fPointer->Status();; 33}; 34 ; 35////////////////////////////////////////////////////////////////////////////////; 36/// Constructor from a TFitResult pointer; 37 ; 38TFitResultPtr::TFitResultPtr(TFitResult * p) :; 39 fStatus(-1),; 40 fPointer(std::shared_ptr<TFitResult>(p)); 41{; 42 if (fPointer) fStatus = fPointer->Status();; 43}; 44 ; 45TFitResultPtr::TFitResultPtr(const TFitResultPtr& rhs) :; 46 fStatus(rhs.fStatus), fPointer(rhs.fPointer); 47{; 48}; 49 ; 50////////////////////////////////////////////////////////////////////////////////; 51/// Destructor. Delete the contained TFitResult pointer if needed; 52/// if ( fPointer != 0); 53/// delete fPointer;; 54 ; 55TFitResultPtr::~TFitResultPtr(); 56{; 57}; 58 ; 59////////////////////////////////////////////////////////////////////////////////; 60/// Implement the de-reference operator to make the class acts as a pointer to a TFitResult; 61/// assert in case the class does not contain a pointer to TFitResult; 62 ; 63TFitResult& TFitResultPtr::operator*() const; 64{; 65 if (!fPointer) {; 66 Error(""TFitResultPtr"",""TFitResult is empty - use the fit option S"");; 67 }; 68 return *fPointer;; 69}; 70 ; 71////////////////////////////////////////////////////////////////////////////////; 72/// Implement the -> operator to make the class acts as a pointer to a TFitResult.; 73/// assert in case the class does not contain a pointer to TFitResult; 74 ; 75TFitResult* TFitResultPtr::operator->() const; 76{; 77 if (!fPointer) {; 78 Error(""TFitResultPtr"",""TFitResult is empty - use the fit option S"");; 79 }; 80 return fPointer.get();; 81}; 82 ; 83////////////////////////////////////////////////////////////////////////////////; 84/// Return contained pointer; 85 ; 86TFitResult * TFitResultPtr::Get() const {; 87 return fPointer.get();; 88}; 89 ; 90////////////////////////////////////////////////////////////////////////////////; 91/// Assignment operator.; 92/// if needed copy the TFitR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFitResultPtr_8cxx_source.html:2313,assert,assert,2313,doc/master/TFitResultPtr_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFitResultPtr_8cxx_source.html,1,['assert'],['assert']
Testability,",; 8258 nc,; 8259 "":"",; 8260 cnonce,; 8261 "":"",; 8262 qop,; 8263 "":"",; 8264 ha2,; 8265 NULL);; 8266 ; 8267 return mg_strcasecmp(response, expected_response) == 0;; 8268}; 8269 ; 8270 ; 8271#if !defined(NO_FILESYSTEMS); 8272/* Use the global passwords file, if specified by auth_gpass option,; 8273 * or search for .htpasswd in the requested directory. */; 8274static void; 8275open_auth_file(struct mg_connection *conn,; 8276 const char *path,; 8277 struct mg_file *filep); 8278{; 8279 if ((conn != NULL) && (conn->dom_ctx != NULL)) {; 8280 char name[UTF8_PATH_MAX];; 8281 const char *p, *e,; 8282 *gpass = conn->dom_ctx->config[GLOBAL_PASSWORDS_FILE];; 8283 int truncated;; 8284 ; 8285 if (gpass != NULL) {; 8286 /* Use global passwords file */; 8287 if (!mg_fopen(conn, gpass, MG_FOPEN_MODE_READ, filep)) {; 8288#if defined(DEBUG); 8289 /* Use mg_cry_internal here, since gpass has been; 8290 * configured. */; 8291 mg_cry_internal(conn, ""fopen(%s): %s"", gpass, strerror(ERRNO));; 8292#endif; 8293 }; 8294 /* Important: using local struct mg_file to test path for; 8295 * is_directory flag. If filep is used, mg_stat() makes it; 8296 * appear as if auth file was opened.; 8297 * TODO(mid): Check if this is still required after rewriting; 8298 * mg_stat */; 8299 } else if (mg_stat(conn, path, &filep->stat); 8300 && filep->stat.is_directory) {; 8301 mg_snprintf(conn,; 8302 &truncated,; 8303 name,; 8304 sizeof(name),; 8305 ""%s/%s"",; 8306 path,; 8307 PASSWORDS_FILE_NAME);; 8308 ; 8309 if (truncated || !mg_fopen(conn, name, MG_FOPEN_MODE_READ, filep)) {; 8310#if defined(DEBUG); 8311 /* Don't use mg_cry_internal here, but only a trace, since; 8312 * this is a typical case. It will occur for every directory; 8313 * without a password file. */; 8314 DEBUG_TRACE(""fopen(%s): %s"", name, strerror(ERRNO));; 8315#endif; 8316 }; 8317 } else {; 8318 /* Try to find .htpasswd in requested directory. */; 8319 for (p = path, e = p + strlen(p) - 1; e > p; e--) {; 8320 if (e[0] == '/') {; 8321 break;; 83",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:239323,test,test,239323,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['test'],['test']
Testability,",; 8259 nc,; 8260 "":"",; 8261 cnonce,; 8262 "":"",; 8263 qop,; 8264 "":"",; 8265 ha2,; 8266 NULL);; 8267 ; 8268 return mg_strcasecmp(response, expected_response) == 0;; 8269}; 8270 ; 8271 ; 8272#if !defined(NO_FILESYSTEMS); 8273/* Use the global passwords file, if specified by auth_gpass option,; 8274 * or search for .htpasswd in the requested directory. */; 8275static void; 8276open_auth_file(struct mg_connection *conn,; 8277 const char *path,; 8278 struct mg_file *filep); 8279{; 8280 if ((conn != NULL) && (conn->dom_ctx != NULL)) {; 8281 char name[UTF8_PATH_MAX];; 8282 const char *p, *e,; 8283 *gpass = conn->dom_ctx->config[GLOBAL_PASSWORDS_FILE];; 8284 int truncated;; 8285 ; 8286 if (gpass != NULL) {; 8287 /* Use global passwords file */; 8288 if (!mg_fopen(conn, gpass, MG_FOPEN_MODE_READ, filep)) {; 8289#if defined(DEBUG); 8290 /* Use mg_cry_internal here, since gpass has been; 8291 * configured. */; 8292 mg_cry_internal(conn, ""fopen(%s): %s"", gpass, strerror(ERRNO));; 8293#endif; 8294 }; 8295 /* Important: using local struct mg_file to test path for; 8296 * is_directory flag. If filep is used, mg_stat() makes it; 8297 * appear as if auth file was opened.; 8298 * TODO(mid): Check if this is still required after rewriting; 8299 * mg_stat */; 8300 } else if (mg_stat(conn, path, &filep->stat); 8301 && filep->stat.is_directory) {; 8302 mg_snprintf(conn,; 8303 &truncated,; 8304 name,; 8305 sizeof(name),; 8306 ""%s/%s"",; 8307 path,; 8308 PASSWORDS_FILE_NAME);; 8309 ; 8310 if (truncated || !mg_fopen(conn, name, MG_FOPEN_MODE_READ, filep)) {; 8311#if defined(DEBUG); 8312 /* Don't use mg_cry_internal here, but only a trace, since; 8313 * this is a typical case. It will occur for every directory; 8314 * without a password file. */; 8315 DEBUG_TRACE(""fopen(%s): %s"", name, strerror(ERRNO));; 8316#endif; 8317 }; 8318 } else {; 8319 /* Try to find .htpasswd in requested directory. */; 8320 for (p = path, e = p + strlen(p) - 1; e > p; e--) {; 8321 if (e[0] == '/') {; 8322 break;; 83",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:239355,test,test,239355,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['test'],['test']
Testability,",int>fXBins; Bool_tfXLog; pair<double,double>fXRange; pair<double,double>fXRangeScaled; Double_tfXScale; pair<int,int>fYBins; Bool_tfYLog; pair<double,double>fYRange; pair<double,double>fYRangeScaled; Double_tfYScale; pair<int,int>fZBins; Bool_tfZLog; pair<double,double>fZRange; pair<double,double>fZRangeScaled; Double_tfZScale. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLPlotCoordinates(); Constructor. ~TGLPlotCoordinates(); Destructor. void SetCoordType(EGLCoordType type); If coord type was changed, plot must reset sections (if any),; set fModified. EGLCoordType GetCoordType() const; Get coordinates type. void SetXLog(Bool_t xLog); If log changed, sections must be reset,; set fModified. Bool_t GetXLog() const; Get X log. void SetYLog(Bool_t yLog); If log changed, sections must be reset,; set fModified. Bool_t GetYLog() const; Get Y log. void SetZLog(Bool_t zLog); If log changed, sections must be reset,; set fModified. Bool_t GetZLog() const; Get Z log. void ResetModified(); Reset modified. Bool_t Modified() const; Modified. Bool_t SetRanges(const TH1* hist, Bool_t errors = kFALSE, Bool_t zBins = kFALSE); Set bin ranges, ranges. Int_t GetNXBins() const; Number of X bins. Int_t GetNYBins() const; Number of Y bins. Int_t GetNZBins() const; Number of Z bins. const Rgl::BinRange_t & GetXBins() const; X bins range. const Rgl::BinRange_t & GetYBins() const; Y bins range. const Rgl::BinRange_t & GetZBins() const; Z bins range. const Rgl::Range_t & GetXRange() const; X range. Double_t GetXLength() const; X length. const Rgl::Range_t & GetYRange() const; Y range. Double_t GetYLength() const; Y length. const Rgl::Range_t & GetZRange() const; Z range. Double_t GetZLength() const; Z length. const Rgl::Range_t & GetXRangeScaled() const; Scaled range. const Rgl::Range_t & GetYRangeScaled() const; Scaled range. const Rgl::Range_t & GetZRangeScaled() const; Scaled range. Double_t GetFactor() const; Get factor. Bool_t SetRangesCartes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLPlotCoordinates.html:3362,log,log,3362,root/html528/TGLPlotCoordinates.html,https://root.cern,https://root.cern/root/html528/TGLPlotCoordinates.html,4,['log'],['log']
Testability,",y,z), Interpolate approximates the value via trilinear interpolation based on the 8 nearest bin center points (corner of the cube surrounding the points) The Algorithm is described in http://en.wikipedia.org/wiki/Trilinear_interpolation The given values (x,y,z) must be between first bin center and last bin center for each coordinate: ; fXAxis.GetBinCenter(1) < x < fXaxis.GetBinCenter(nbinX) AND fYAxis.GetBinCenter(1) < y < fYaxis.GetBinCenter(nbinY) AND fZAxis.GetBinCenter(1) < z < fZaxis.GetBinCenter(nbinZ) ; Reimplemented from TH1.; Definition at line 1458 of file TH3.cxx. ◆ IsA(). TClass * TH3::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TH1.; Reimplemented in TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, and TProfile3D.; Definition at line 152 of file TH3.h. ◆ KolmogorovTest(). Double_t TH3::KolmogorovTest ; (; const TH1 * ; h2, . Option_t * ; option = """" . ); const. overridevirtual . Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ; Default: Ignore under- and overflow bins in comparison; option is a character string to specify options ""U"" include Underflows in test ""O"" include Overflows ""N"" include comparison of normalizations ""D"" Put out a line of ""Debug"" printout ""M"" Return the Maximum Kolmogorov distance instead of prob; The returned function value is the probability of test (much less than one means NOT compatible); The KS test uses the distance between the pseudo-CDF's obtained from the histogram. Since in more than 1D the order for generating the pseudo-CDF is arbitrary, we use the pseudo-CDF's obtained from all the possible 6 combinations of the 3 axis. The average of all the maximum distances obtained is used in the tests. ; Reimplemented from TH1.; Definition at line 1532 of file TH3.cxx. ◆ operator=(). TH3 & TH3::operator= ; (; const TH3 & ; ). privatedelete . ◆ Project3D(). TH1 * TH3::Project3D ; (; Option_t * ; option = ""x""); const. virtual . Project a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3.html:89150,test,test,89150,doc/master/classTH3.html,https://root.cern,https://root.cern/doc/master/classTH3.html,2,['test'],['test']
Testability,"---------- Loop over the points---------------------; 6424 for (k=first; k<=last; k++) {; 6425 ; 6426 // get the data; 6427 // xp = X position of the current point; 6428 // yp = Y position of the current point; 6429 // ex1 = Low X error; 6430 // ex2 = Up X error; 6431 // ey1 = Low Y error; 6432 // ey2 = Up Y error; 6433 // (xi,yi) = Error bars coordinates; 6434 ; 6435 // apply offset on errors for bar histograms; 6436 Double_t xminTmp = gPad->XtoPad(fXaxis->GetBinLowEdge(k));; 6437 Double_t xmaxTmp = gPad->XtoPad(fXaxis->GetBinUpEdge(k));; 6438 if (Hoption.Logx) {; 6439 xminTmp = TMath::Power(10, xminTmp);; 6440 xmaxTmp = TMath::Power(10, xmaxTmp);; 6441 }; 6442 Double_t w = (xmaxTmp-xminTmp)*width;; 6443 xminTmp += offset*(xmaxTmp-xminTmp);; 6444 xmaxTmp = xminTmp + w;; 6445 xp = (xminTmp+xmaxTmp)/2.;; 6446 ; 6447 if (Hoption.Logx) {; 6448 if (xp <= 0) goto L30;; 6449 if (xp < logxmin) goto L30;; 6450 if (xp > TMath::Power(10,xmax)) break;; 6451 } else {; 6452 if (xp < xmin) goto L30;; 6453 if (xp > xmax) break;; 6454 }; 6455 yp = factor*fH->GetBinContent(k);; 6456 if (optionI0 && yp==0) goto L30;; 6457 if (fixbin) {; 6458 ex1 = xerror*Hparam.xbinsize;; 6459 } else {; 6460 delta = fH->GetBinWidth(k);; 6461 ex1 = xerror*delta;; 6462 }; 6463 if (fH->GetBinErrorOption() == TH1::kNormal) {; 6464 ey1 = factor*fH->GetBinError(k);; 6465 ey2 = ey1;; 6466 } else {; 6467 ey1 = factor*fH->GetBinErrorLow(k);; 6468 ey2 = factor*fH->GetBinErrorUp(k);; 6469 }; 6470 ex2 = ex1;; 6471 ; 6472 xi4 = xp;; 6473 xi3 = xp;; 6474 xi2 = xp + ex2;; 6475 xi1 = xp - ex1;; 6476 ; 6477 yi1 = yp;; 6478 yi2 = yp;; 6479 yi3 = yp - ey1;; 6480 yi4 = yp + ey2;; 6481 ; 6482 // take the LOG if necessary; 6483 if (Hoption.Logx) {; 6484 xi1 = TMath::Log10(TMath::Max(xi1,logxmin));; 6485 xi2 = TMath::Log10(TMath::Max(xi2,logxmin));; 6486 xi3 = TMath::Log10(TMath::Max(xi3,logxmin));; 6487 xi4 = TMath::Log10(TMath::Max(xi4,logxmin));; 6488 }; 6489 if (Hoption.Logy) {; 6490 yi1 = TMath::Log10(TMath::Max(yi1,lo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:237109,log,logxmin,237109,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['log'],['logxmin']
Testability,"-------------------------------------------------------------------------------------------------; : ; <HEADER> Dataset:datasetBkg0 : Created tree 'TestTree' with 200 events; : ; <HEADER> Dataset:datasetBkg0 : Created tree 'TrainTree' with 200 events; : ; <HEADER> Factory : Thank you for using TMVA!; : For citation information, please visit: http://tmva.sf.net/citeTMVA.html; <HEADER> DataSetInfo : [datasetBkg1] : Added class ""Signal""; : Add Tree TreeS of type Signal with 200 events; <HEADER> DataSetInfo : [datasetBkg1] : Added class ""Background""; : Add Tree TreeB1 of type Background with 200 events; <HEADER> Factory : Booking method: BDTG; : ; : the option NegWeightTreatment=InverseBoostNegWeights does not exist for BoostType=Grad; : --> change to new default NegWeightTreatment=Pray; : Rebuilding Dataset datasetBkg1; : Building event vectors for type 2 Signal; : Dataset[datasetBkg1] : create input formulas for tree TreeS; : Building event vectors for type 2 Background; : Dataset[datasetBkg1] : create input formulas for tree TreeB1; <HEADER> DataSetFactory : [datasetBkg1] : Number of events in input trees; : ; : ; : Number of training and testing events; : ---------------------------------------------------------------------------; : Signal -- training events : 100; : Signal -- testing events : 100; : Signal -- training and testing events: 200; : Background -- training events : 100; : Background -- testing events : 100; : Background -- training and testing events: 200; : ; <HEADER> DataSetInfo : Correlation matrix (Signal):; : ----------------------------------------; : var1 var2 var3 var4; : var1: +1.000 +0.427 +0.620 +0.834; : var2: +0.427 +1.000 +0.756 +0.779; : var3: +0.620 +0.756 +1.000 +0.854; : var4: +0.834 +0.779 +0.854 +1.000; : ----------------------------------------; <HEADER> DataSetInfo : Correlation matrix (Background):; : ----------------------------------------; : var1 var2 var3 var4; : var1: +1.000 +0.390 +0.543 +0.801; : var2: +0.390 +1.000 +0.787 +",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html:11206,test,testing,11206,doc/master/TMVAMultipleBackgroundExample_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html,5,['test'],['testing']
Testability,"-------------------------------------------------------------------------------------------------; : ; <HEADER> Dataset:datasetBkg1 : Created tree 'TestTree' with 200 events; : ; <HEADER> Dataset:datasetBkg1 : Created tree 'TrainTree' with 200 events; : ; <HEADER> Factory : Thank you for using TMVA!; : For citation information, please visit: http://tmva.sf.net/citeTMVA.html; <HEADER> DataSetInfo : [datasetBkg2] : Added class ""Signal""; : Add Tree TreeS of type Signal with 200 events; <HEADER> DataSetInfo : [datasetBkg2] : Added class ""Background""; : Add Tree TreeB2 of type Background with 200 events; <HEADER> Factory : Booking method: BDTG; : ; : the option NegWeightTreatment=InverseBoostNegWeights does not exist for BoostType=Grad; : --> change to new default NegWeightTreatment=Pray; : Rebuilding Dataset datasetBkg2; : Building event vectors for type 2 Signal; : Dataset[datasetBkg2] : create input formulas for tree TreeS; : Building event vectors for type 2 Background; : Dataset[datasetBkg2] : create input formulas for tree TreeB2; <HEADER> DataSetFactory : [datasetBkg2] : Number of events in input trees; : ; : ; : Number of training and testing events; : ---------------------------------------------------------------------------; : Signal -- training events : 100; : Signal -- testing events : 100; : Signal -- training and testing events: 200; : Background -- training events : 100; : Background -- testing events : 100; : Background -- training and testing events: 200; : ; <HEADER> DataSetInfo : Correlation matrix (Signal):; : ----------------------------------------; : var1 var2 var3 var4; : var1: +1.000 +0.427 +0.620 +0.834; : var2: +0.427 +1.000 +0.756 +0.779; : var3: +0.620 +0.756 +1.000 +0.854; : var4: +0.834 +0.779 +0.854 +1.000; : ----------------------------------------; <HEADER> DataSetInfo : Correlation matrix (Background):; : ----------------------------------------; : var1 var2 var3 var4; : var1: +1.000 -0.689 -0.032 +0.201; : var2: -0.689 +1.000 +0.051 -",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html:20282,test,testing,20282,doc/master/TMVAMultipleBackgroundExample_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html,5,['test'],['testing']
Testability,"-------------------------------------------------------------------------------; : ; <HEADER> Factory : Thank you for using TMVA!; : For citation information, please visit: http://tmva.sf.net/citeTMVA.html; <HEADER> Factory : Booking method: Fisher_fold2; : ; <HEADER> Fisher_fold2 : Results for Fisher coefficients:; : -----------------------; : Variable: Coefficient:; : -----------------------; : x: +0.501; : y: +0.467; : (offset): -0.000; : -----------------------; : Elapsed time for training with 998 events: 0.000263 sec ; <HEADER> Fisher_fold2 : [datasetcv] : Evaluation of Fisher_fold2 on training sample (998 events); : Elapsed time for evaluation of 998 events: 7.08e-05 sec ; : Creating xml weight file: datasetcv/weights/TMVACrossValidation_Fisher_fold2.weights.xml; : Creating standalone class: datasetcv/weights/TMVACrossValidation_Fisher_fold2.class.C; <HEADER> Factory : Test all methods; <HEADER> Factory : Test method: Fisher_fold2 for Classification performance; : ; <HEADER> Fisher_fold2 : [datasetcv] : Evaluation of Fisher_fold2 on testing sample (1000 events); : Elapsed time for evaluation of 1000 events: 8.2e-05 sec ; <HEADER> Factory : Evaluate all methods; <HEADER> Factory : Evaluate classifier: Fisher_fold2; : ; <HEADER> Fisher_fold2 : [datasetcv] : Loop over test events and fill histograms with classifier response...; : ; : ; : Evaluation results ranked by best signal efficiency and purity (area); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA ; : Name: Method: ROC-integ; : datasetcv Fisher_fold2 : 0.966; : -------------------------------------------------------------------------------------------------------------------; : ; : Testing efficiency compared to training efficiency (overtraining check); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA Signal efficiency: from test sample (fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVACrossValidation_8C.html:11700,test,testing,11700,doc/master/TMVACrossValidation_8C.html,https://root.cern,https://root.cern/doc/master/TMVACrossValidation_8C.html,1,['test'],['testing']
Testability,"-----------------------------------------------------------; : Start of deep neural network training on CPU using MT, nthreads = 1; : ; TFHandler_DNN_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : m_jj: 0.0043655 0.99836 [ -3.2801 5.7307 ]; : m_jjj: 0.0044371 0.99827 [ -3.2805 5.7307 ]; : m_lv: 0.0054053 1.0003 [ -3.2810 5.7307 ]; : m_jlv: 0.0044637 0.99837 [ -3.2803 5.7307 ]; : m_bb: 0.0043676 0.99847 [ -3.2797 5.7307 ]; : m_wbb: 0.0042343 0.99744 [ -3.2803 5.7307 ]; : m_wwbb: 0.0046014 0.99948 [ -3.2802 5.7307 ]; : -----------------------------------------------------------; : ***** Deep Learning Network *****; DEEP NEURAL NETWORK: Depth = 5 Input = ( 1, 1, 7 ) Batch size = 128 Loss function = C; Layer 0 DENSE Layer: ( Input = 7 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 1 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 2 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 3 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 4 DENSE Layer: ( Input = 64 , Width = 1 ) Output = ( 1 , 128 , 1 ) Activation Function = Identity; : Using 11200 events for training and 2800 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 0.868652; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.659892 0.620582 0.589558 0.0469541 20523.3 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.604286 0.594787 0.586926 0.0471912 20632.4 0; : 3 | 0.58117 0.603906",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:23812,test,testing,23812,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,1,['test'],['testing']
Testability,"-----------------------------------------------------------; : Start of deep neural network training on CPU using MT, nthreads = 1; : ; TFHandler_DNN_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : m_jj: 0.0043655 0.99836 [ -3.2801 5.7307 ]; : m_jjj: 0.0044371 0.99827 [ -3.2805 5.7307 ]; : m_lv: 0.0054053 1.0003 [ -3.2810 5.7307 ]; : m_jlv: 0.0044637 0.99837 [ -3.2803 5.7307 ]; : m_bb: 0.0043676 0.99847 [ -3.2797 5.7307 ]; : m_wbb: 0.0042343 0.99744 [ -3.2803 5.7307 ]; : m_wwbb: 0.0046014 0.99948 [ -3.2802 5.7307 ]; : -----------------------------------------------------------; : ***** Deep Learning Network *****; DEEP NEURAL NETWORK: Depth = 5 Input = ( 1, 1, 7 ) Batch size = 128 Loss function = C; Layer 0 DENSE Layer: ( Input = 7 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 1 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 2 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 3 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 4 DENSE Layer: ( Input = 64 , Width = 1 ) Output = ( 1 , 128 , 1 ) Activation Function = Identity; : Using 11200 events for training and 2800 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 1.171; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.66619 0.628056 0.587341 0.0468945 20605.2 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.605139 0.593298 0.586597 0.0468674 20632.5 0; : 3 Minimum Test error fou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:23875,test,testing,23875,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,1,['test'],['testing']
Testability,"---------------------------------------------------------. root [0]; To start ROOT you can type root at the system prompt. This starts up Cling, the ROOT command line C/C++ interpreter, and it gives you the ROOT prompt (root[0]).; It is possible to launch ROOT with some command line options, as shown below:; % root -?; Usage: root [-l] [-b] [-n] [-q] [dir] [[file:]data.root]; [file1.C ... fileN.C]; Options:; -b : run in batch mode without graphics; -n : do not execute logon and logoff macros as specified in .rootrc; -q : exit after processing command line macro files; -l : do not show splash screen; -x : exit on exception; dir : if dir is a valid directory cd to it before executing. -? : print usage; -h : print usage; --help : print usage; -config : print ./configure options. -b ROOT session runs in batch mode, without graphics display. This mode is useful in case one does not want to set the DISPLAY or cannot do it for some reason.; -n usually, launching a ROOT session will execute a logon script and quitting will execute a logoff script. This option prevents the execution of these two scripts.; it is also possible to execute a script without entering a ROOT session. One simply adds the name of the script(s) after the ROOT command. Be warned: after finishing the execution of the script, ROOT will normally enter a new session.; -q process command line script files and exit. For example if you would like to run a script myMacro.C in the background, redirect the output into a file myMacro.log, and exit after the script execution, use the following syntax:; root -b -q myMacro.C > myMacro.log; If you need to pass a parameter to the script use:; root -b -q 'myMacro.C(3)' > myMacro.log; Be mindful of the quotes, i.e. if you need to pass a string as a parameter, the syntax is:; root -b -q 'myMacro.C(""text"")' > myMacro.log; You can build a shared library with ACLiC and then use this shared library on the command line for a quicker execution (i.e. the compiled speed rather th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:33491,log,logon,33491,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['log'],"['logoff', 'logon']"
Testability,"-----------------------------------------------------; : var1: 0.077270 0.29534 [ -1.1155 1.0914 ]; : var2: 0.068045 0.27981 [ -1.0016 1.0000 ]; : var3: 0.027548 0.24565 [ -0.80459 0.85902 ]; : var4: -0.034157 0.25816 [ -1.0000 0.83435 ]; : -----------------------------------------------------------; TFHandler_DL_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 0.077270 0.29534 [ -1.1155 1.0914 ]; : var2: 0.068045 0.27981 [ -1.0016 1.0000 ]; : var3: 0.027548 0.24565 [ -0.80459 0.85902 ]; : var4: -0.034157 0.25816 [ -1.0000 0.83435 ]; : -----------------------------------------------------------; : ; : 1-vs-rest performance metrics per class; : -------------------------------------------------------------------------------------------------------; : ; : Considers the listed class as signal and the other classes; : as background, reporting the resulting binary performance.; : A score of 0.820 (0.850) means 0.820 was acheived on the; : test set and 0.850 on the training set.; : ; : Dataset MVA Method ROC AUC Sig eff@B=0.01 Sig eff@B=0.10 Sig eff@B=0.30 ; : Name: / Class: test (train) test (train) test (train) test (train) ; : ; : dataset BDTG ; : ------------------------------; : Signal 0.968 (0.978) 0.508 (0.605) 0.914 (0.945) 0.990 (0.996) ; : bg0 0.910 (0.931) 0.256 (0.288) 0.737 (0.791) 0.922 (0.956) ; : bg1 0.947 (0.954) 0.437 (0.511) 0.833 (0.856) 0.971 (0.971) ; : bg2 0.978 (0.982) 0.585 (0.678) 0.951 (0.956) 0.999 (0.996) ; : ; : dataset MLP ; : ------------------------------; : Signal 0.970 (0.975) 0.596 (0.632) 0.933 (0.938) 0.988 (0.993) ; : bg0 0.929 (0.934) 0.303 (0.298) 0.787 (0.793) 0.949 (0.961) ; : bg1 0.962 (0.967) 0.467 (0.553) 0.881 (0.906) 0.985 (0.992) ; : bg2 0.975 (0.979) 0.629 (0.699) 0.929 (0.940) 0.998 (0.998) ; : ; : dataset PDEFoam ; : ------------------------------; : Signal 0.916 (0.928) 0.294 (0.382) 0.744 (0.782) 0.932 (0.952) ; : bg0 0.837 (0.848) 0.109 (0.147) 0.519 (0.543) 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:23933,test,test,23933,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['test'],['test']
Testability,"---------------------------------------------------; : m_jj: 1.0447 0.66216 [ 0.14661 10.222 ]; : m_jjj: 1.0275 0.37015 [ 0.34201 5.6016 ]; : m_lv: 1.0500 0.15582 [ 0.29757 2.8989 ]; : m_jlv: 1.0053 0.39478 [ 0.41660 5.8799 ]; : m_bb: 0.97464 0.52138 [ 0.10941 5.5163 ]; : m_wbb: 1.0296 0.35719 [ 0.38878 3.9747 ]; : m_wwbb: 0.95617 0.30368 [ 0.44118 4.0728 ]; : -----------------------------------------------------------; : ; : Evaluation results ranked by best signal efficiency and purity (area); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA ; : Name: Method: ROC-integ; : dataset DNN_CPU : 0.759; : dataset BDT : 0.754; : dataset PyKeras : 0.752; : dataset Likelihood : 0.698; : dataset Fisher : 0.642; : -------------------------------------------------------------------------------------------------------------------; : ; : Testing efficiency compared to training efficiency (overtraining check); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA Signal efficiency: from test sample (from training sample) ; : Name: Method: @B=0.01 @B=0.10 @B=0.30 ; : -------------------------------------------------------------------------------------------------------------------; : dataset DNN_CPU : 0.129 (0.138) 0.392 (0.444) 0.662 (0.711); : dataset BDT : 0.098 (0.099) 0.393 (0.402) 0.657 (0.681); : dataset PyKeras : 0.138 (0.111) 0.408 (0.410) 0.656 (0.661); : dataset Likelihood : 0.085 (0.082) 0.355 (0.363) 0.580 (0.596); : dataset Fisher : 0.015 (0.015) 0.121 (0.131) 0.487 (0.506); : -------------------------------------------------------------------------------------------------------------------; : ; Dataset:dataset : Created tree 'TestTree' with 6000 events; : ; Dataset:dataset : Created tree 'TrainTree' with 14000 events; : ; Factory : ␛[1mThank you for using TMVA!␛[0m; : ␛[1mFor citation information, please v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:55649,test,test,55649,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,1,['test'],['test']
Testability,"---------------------------------------------------; : m_jj: 1.0447 0.66216 [ 0.14661 10.222 ]; : m_jjj: 1.0275 0.37015 [ 0.34201 5.6016 ]; : m_lv: 1.0500 0.15582 [ 0.29757 2.8989 ]; : m_jlv: 1.0053 0.39478 [ 0.41660 5.8799 ]; : m_bb: 0.97464 0.52138 [ 0.10941 5.5163 ]; : m_wbb: 1.0296 0.35719 [ 0.38878 3.9747 ]; : m_wwbb: 0.95617 0.30368 [ 0.44118 4.0728 ]; : -----------------------------------------------------------; : ; : Evaluation results ranked by best signal efficiency and purity (area); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA ; : Name: Method: ROC-integ; : dataset DNN_CPU : 0.762; : dataset PyKeras : 0.757; : dataset BDT : 0.754; : dataset Likelihood : 0.698; : dataset Fisher : 0.642; : -------------------------------------------------------------------------------------------------------------------; : ; : Testing efficiency compared to training efficiency (overtraining check); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA Signal efficiency: from test sample (from training sample) ; : Name: Method: @B=0.01 @B=0.10 @B=0.30 ; : -------------------------------------------------------------------------------------------------------------------; : dataset DNN_CPU : 0.147 (0.142) 0.404 (0.444) 0.678 (0.708); : dataset PyKeras : 0.132 (0.121) 0.404 (0.410) 0.669 (0.673); : dataset BDT : 0.098 (0.099) 0.393 (0.402) 0.657 (0.681); : dataset Likelihood : 0.085 (0.082) 0.355 (0.363) 0.580 (0.596); : dataset Fisher : 0.015 (0.015) 0.121 (0.131) 0.487 (0.506); : -------------------------------------------------------------------------------------------------------------------; : ; Dataset:dataset : Created tree 'TestTree' with 6000 events; : ; Dataset:dataset : Created tree 'TrainTree' with 14000 events; : ; Factory : ␛[1mThank you for using TMVA!␛[0m; : ␛[1mFor citation information, please v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:56153,test,test,56153,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,1,['test'],['test']
Testability,"-----------------------------------------------; | Welcome to ROOT 6.10/01 http://root.cern.ch |; | (c) 1995-2017, The ROOT Team |; | Built for macosx64 |; | From heads/v6-10-00-patches@v6-10-00-25-g9f78c3a, Jul 03 2017, 11:39:44 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; -------------------------------------------------------------------------. root [0] .x hsimple.C; Now execute demos.C, which brings up the button bar shown on the left. You can click on any button to execute another example. To see the source, open the corresponding source file (for example fit1.C). Once you are done, and want to quit the ROOT session, you can do so by typing .q.; root[] .x demos.C; root[] .q; 20.2 $ROOTSYS/test; The test directory contains a set of examples that represent all areas of the framework. When a new release is cut, the examples in this directory are compiled and run to test the new release’s backward compatibility.; We see these source files:. Makefile; Makefile to build all test programs. hsimple.cxx; Simple test program that creates and saves some histograms. MainEvent.cxx; Simple test program that creates a ROOT Tree object and fills it with some simple structures but also with complete histograms. This program uses the files Event.cxx, EventCint.cxx and Event.h. An example of a procedure to link this program is in bind_Event. Note that the Makefile invokes the rootcling utility to generate the Cling interface EventCint.cxx. Event.cxx; Implementation for classes Event and Track. minexam.cxx; Simple test program for data fitting. tcollex.cxx; Example usage of the ROOT collection classes. tcollbm.cxx; Benchmarks of ROOT collection classes. ctorture.cxx; Test program for the class TComplex. tstring.cxx; Example usage of the ROOT string class. vmatrix.cxx; Verification program for the TMatrix class. vvector.cxx; Verification program for the TVectorclass. vlazy.cxx; Verification program for lazy matrices. hworld.cxx; Small program showing basic grap",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1075451,test,test,1075451,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['test']
Testability,"---------------------------------------------; : Evaluate regression method: DNN_CPU; : TestRegression (testing); : Calculate regression for all events; : Elapsed time for evaluation of 9000 events: 0.23 sec ; : TestRegression (training); : Calculate regression for all events; : Elapsed time for evaluation of 1000 events: 0.0277 sec ; TFHandler_DNN_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: -0.027271 1.0264 [ -3.3694 5.7307 ]; : var2: 0.0028453 0.98623 [ -5.7307 5.7307 ]; : fvalue: 163.91 83.651 [ 1.6186 394.84 ]; : -----------------------------------------------------------; TFHandler_DNN_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: -0.027271 1.0264 [ -3.3694 5.7307 ]; : var2: 0.0028453 0.98623 [ -5.7307 5.7307 ]; : fvalue: 163.91 83.651 [ 1.6186 394.84 ]; : -----------------------------------------------------------; : Evaluate regression method: BDTG; : TestRegression (testing); : Calculate regression for all events; : Elapsed time for evaluation of 9000 events: 2.09 sec ; : TestRegression (training); : Calculate regression for all events; : Elapsed time for evaluation of 1000 events: 0.234 sec ; TFHandler_BDTG : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 3.3352 1.1893 [ 0.00020069 5.0000 ]; : var2: 2.4860 1.4342 [ 0.00071490 5.0000 ]; : fvalue: 163.91 83.651 [ 1.6186 394.84 ]; : -----------------------------------------------------------; : ; : Evaluation results ranked by smallest RMS on test sample:; : (""Bias"" quotes the mean deviation of the regression from true target.; : ""MutInf"" is the ""Mutual Information"" between regression and target.; : Indicated by ""_T"" are the corresponding ""truncated"" quantities ob-; : tained when removing events deviating more than 2sigma from average.); : ----------------------------------------------------------------------------------------------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:131836,test,testing,131836,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['test'],['testing']
Testability,"--------------------------------------; // ```; // End of tree registration; ; // Set individual event weights (the variables must exist in the original TTree); // - for signal : `dataloader->SetSignalWeightExpression (""weight1*weight2"");`; // - for background: `dataloader->SetBackgroundWeightExpression(""weight1*weight2"");`; dataloader->SetBackgroundWeightExpression( ""weight"" );; ; // Apply additional cuts on the signal and background samples (can be different); TCut mycuts = """"; // for example: TCut mycuts = ""abs(var1)<0.5 && abs(var2-0.5)<1"";; TCut mycutb = """"; // for example: TCut mycutb = ""abs(var1)<0.5"";; ; // Tell the dataloader how to use the training and testing events; //; // If no numbers of events are given, half of the events in the tree are used; // for training, and the other half for testing:; //; // dataloader->PrepareTrainingAndTestTree( mycut, ""SplitMode=random:!V"" );; //; // To also specify the number of testing events, use:; //; // dataloader->PrepareTrainingAndTestTree( mycut,; // ""NSigTrain=3000:NBkgTrain=3000:NSigTest=3000:NBkgTest=3000:SplitMode=Random:!V"" );; dataloader->PrepareTrainingAndTestTree( mycuts, mycutb,; ""nTrain_Signal=1000:nTrain_Background=1000:SplitMode=Random:NormMode=NumEvents:!V"" );; ; // ### Book MVA methods; //; // Please lookup the various method configuration options in the corresponding cxx files, eg:; // src/MethoCuts.cxx, etc, or here: http://tmva.sourceforge.net/old_site/optionRef.html; // it is possible to preset ranges in the option string in which the cut optimisation should be done:; // ""...:CutRangeMin[2]=-1:CutRangeMax[2]=1""..."", where [2] is the third input variable; ; // Cut optimisation; if (Use[""Cuts""]); factory->BookMethod( dataloader, TMVA::Types::kCuts, ""Cuts"",; ""!H:!V:FitMethod=MC:EffSel:SampleSize=200000:VarProp=FSmart"" );; ; if (Use[""CutsD""]); factory->BookMethod( dataloader, TMVA::Types::kCuts, ""CutsD"",; ""!H:!V:FitMethod=MC:EffSel:SampleSize=200000:VarProp=FSmart:VarTransform=Decorrelate"" );; ; if (Us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:90889,test,testing,90889,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,3,['test'],['testing']
Testability,---------------------------------; SVM : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_SVM : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.12216 0.20255 [ -1.0614 1.0246 ]; : myvar2: -0.12333 0.30492 [ -1.2280 0.99911 ]; : var3: 0.097148 0.21347 [ -1.0158 0.99984 ]; : var4: 0.17495 0.23851 [ -1.2661 1.0694 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: BDT; : ; BDT : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_BDT : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.21781 1.7248 [ -9.8605 7.9024 ]; : myvar2: -0.062175 1.1106 [ -4.0854 4.0259 ]; : var3: 0.16451 1.0589 [ -5.3563 4.6422 ]; : var4: 0.43566 1.2253 [ -6.9675 5.0307 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: RuleFit; : ; RuleFit : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_RuleFit : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.21781 1.7248 [ -9.8605 7.9024 ]; : myvar2: -0.062175 1.1106 [ -4.0854 4.0259 ]; : var3: 0.16451 1.0589 [ -5.3563 4.6422 ]; : var4: 0.43566 1.2253 [ -6.9675 5.0307 ]; : -----------------------------------------------------------; : ; : Evaluation results ranked by best signal efficiency and purity (area); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA ; : Name: Method: ROC-integ; : dataset DNN_CPU : 0.921; : dataset LD : 0.921; : dataset MLPBNN : 0.919; : dataset LikelihoodPCA : 0.913; : dataset CutsD : 0.908; : dataset SVM : 0.898; : dataset RuleFit : 0.881; : dataset BDT : 0.881; : dataset KNN : 0.838; : dataset PDEFoam : 0.822; : dataset PDERS : 0.797; : dataset Cuts ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:77700,test,test,77700,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['test'],['test']
Testability,"------------------------------; 427 ; 428 // this method is used to decide whether an event is signal- or background-like; 429 // the reference cut ""xC"" is taken to be where; 430 // Int_[-oo,xC] { PDF_S(x) dx } = Int_[xC,+oo] { PDF_B(x) dx }; 431 virtual Bool_t IsSignalLike();; 432 virtual Bool_t IsSignalLike(Double_t mvaVal);; 433 ; 434 ; 435 Bool_t HasMVAPdfs() const { return fHasMVAPdfs; }; 436 virtual void SetAnalysisType( Types::EAnalysisType type ) { fAnalysisType = type; }; 437 Types::EAnalysisType GetAnalysisType() const { return fAnalysisType; }; 438 Bool_t DoRegression() const { return fAnalysisType == Types::kRegression; }; 439 Bool_t DoMulticlass() const { return fAnalysisType == Types::kMulticlass; }; 440 ; 441 // setter method for suppressing writing to XML and writing of standalone classes; 442 void DisableWriting(Bool_t setter){ fModelPersistence = setter?kFALSE:kTRUE; }//DEPRECATED; 443 ; 444 protected:; 445 mutable const Event *fTmpEvent; //! temporary event when testing on a different DataSet than the own one; 446 DataSet *fTmpData = nullptr; //! temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues); 447 // helper variables for JsMVA; 448 IPythonInteractive *fInteractive = nullptr;; 449 bool fExitFromTraining = false;; 450 UInt_t fIPyMaxIter = 0, fIPyCurrentIter = 0;; 451 ; 452 public:; 453 ; 454 // initializing IPythonInteractive class (for JsMVA only); 455 inline void InitIPythonInteractive(){; 456 if (fInteractive) delete fInteractive;; 457 fInteractive = new IPythonInteractive();; 458 }; 459 ; 460 // get training errors (for JsMVA only); 461 inline TMultiGraph* GetInteractiveTrainingError(){return fInteractive->Get();}; 462 ; 463 // stop's the training process (for JsMVA only); 464 inline void ExitFromTraining(){; 465 fExitFromTraining = true;; 466 }; 467 ; 468 // check's if the training ended (for JsMVA only); 469 inline bool TrainingEnded(){; 470 if (fExitFromTraining && fInteractive){; 471 delete ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodBase_8h_source.html:19936,test,testing,19936,doc/master/MethodBase_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html,1,['test'],['testing']
Testability,"-----------------------------; : No variable ranking supplied by classifier: DNN_CPU; : No variable ranking supplied by classifier: SVM; BDT : Ranking result (top variable is best ranked); : ----------------------------------------; : Rank : Variable : Variable Importance; : ----------------------------------------; : 1 : var4 : 2.697e-01; : 2 : myvar1 : 2.467e-01; : 3 : myvar2 : 2.460e-01; : 4 : var3 : 2.377e-01; : ----------------------------------------; RuleFit : Ranking result (top variable is best ranked); : -------------------------------; : Rank : Variable : Importance; : -------------------------------; : 1 : var4 : 1.000e+00; : 2 : myvar1 : 6.981e-01; : 3 : var3 : 5.947e-01; : 4 : myvar2 : 4.105e-01; : -------------------------------; TH1.Print Name = TrainingHistory_DNN_CPU_trainingError, Entries= 0, Total sum= 15.1237; TH1.Print Name = TrainingHistory_DNN_CPU_valError, Entries= 0, Total sum= 14.7947; Factory : === Destroy and recreate all methods via weight files for testing ===; : ; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_Cuts.weights.xml␛[0m; : Read cuts optimised using sample of MC events; : Reading 100 signal efficiency bins for 4 variables; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_CutsD.weights.xml␛[0m; : Read cuts optimised using sample of MC events; : Reading 100 signal efficiency bins for 4 variables; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_Likelihood.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_LikelihoodPCA.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_PDERS.weights.xml␛[0m; : signal and background scales: 0.001 0.001; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_PDEFoam.weights.xml␛[0m; : Read foams from file: ␛[0;36mdataset/weights/TMVAClassification_PDEFoam.weights_foams.root␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_KNN.weights.xml␛[0m; : Creating kd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:63173,test,testing,63173,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['test'],['testing']
Testability,"--------------------------; 146 ; 147 // prepare tree branch with the method's discriminating variable; 148 void AddOutput( Types::ETreeType type, Types::EAnalysisType analysisType );; 149 ; 150 // performs classifier training; 151 // calls methods Train() implemented by derived classes; 152 void TrainMethod();; 153 ; 154 // optimize tuning parameters; 155 virtual std::map<TString,Double_t> OptimizeTuningParameters(TString fomType=""ROCIntegral"", TString fitType=""FitGA"");; 156 virtual void SetTuneParameters(std::map<TString,Double_t> tuneParameters);; 157 ; 158 virtual void Train() = 0;; 159 ; 160 // store and retrieve time used for training; 161 void SetTrainTime( Double_t trainTime ) { fTrainTime = trainTime; }; 162 Double_t GetTrainTime() const { return fTrainTime; }; 163 ; 164 // store and retrieve time used for testing; 165 void SetTestTime ( Double_t testTime ) { fTestTime = testTime; }; 166 Double_t GetTestTime () const { return fTestTime; }; 167 ; 168 // performs classifier testing; 169 virtual void TestClassification();; 170 virtual Double_t GetKSTrainingVsTest(Char_t SorB, TString opt=""X"");; 171 ; 172 // performs multiclass classifier testing; 173 virtual void TestMulticlass();; 174 ; 175 // performs regression testing; 176 virtual void TestRegression( Double_t& bias, Double_t& biasT,; 177 Double_t& dev, Double_t& devT,; 178 Double_t& rms, Double_t& rmsT,; 179 Double_t& mInf, Double_t& mInfT, // mutual information; 180 Double_t& corr,; 181 Types::ETreeType type );; 182 ; 183 // options treatment; 184 virtual void Init() = 0;; 185 virtual void DeclareOptions() = 0;; 186 virtual void ProcessOptions() = 0;; 187 virtual void DeclareCompatibilityOptions(); // declaration of past options; 188 ; 189 // reset the Method --> As if it was not yet trained, just instantiated; 190 // virtual void Reset() = 0;; 191 //for the moment, I provide a dummy (that would not work) default, just to make; 192 // compilation/running w/o parameter optimisation still possible; 193 vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodBase_8h_source.html:5819,test,testing,5819,doc/master/MethodBase_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html,1,['test'],['testing']
Testability,"------------------------; 147 ; 148 std::cout << std::endl;; 149 std::cout << ""==> Start TMVAClassification"" << std::endl;; 150 ; 151 // Select methods (don't look at this code - not of interest); 152 if (myMethodList != """") {; 153 for (std::map<std::string,int>::iterator it = Use.begin(); it != Use.end(); it++) it->second = 0;; 154 ; 155 std::vector<TString> mlist = TMVA::gTools().SplitString( myMethodList, ',' );; 156 for (UInt_t i=0; i<mlist.size(); i++) {; 157 std::string regMethod(mlist[i]);; 158 ; 159 if (Use.find(regMethod) == Use.end()) {; 160 std::cout << ""Method \"""" << regMethod << ""\"" not known in TMVA under this name. Choose among the following:"" << std::endl;; 161 for (std::map<std::string,int>::iterator it = Use.begin(); it != Use.end(); it++) std::cout << it->first << "" "";; 162 std::cout << std::endl;; 163 return 1;; 164 }; 165 Use[regMethod] = 1;; 166 }; 167 }; 168 ; 169 // --------------------------------------------------------------------------------------------------; 170 ; 171 // Here the preparation phase begins; 172 ; 173 // Read training and test data; 174 // (it is also possible to use ASCII format as input -> see TMVA Users Guide); 175 // Set the cache directory for the TFile to the current directory. The input; 176 // data file will be downloaded here if not present yet, then it will be read; 177 // from the cache path directly.; 178 TFile::SetCacheFileDir(""."");; 179 std::unique_ptr<TFile> input{TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"")};; 180 if (!input || input->IsZombie()) {; 181 throw std::runtime_error(""ERROR: could not open data file"");; 182 }; 183 std::cout << ""--- TMVAClassification : Using input file: "" << input->GetName() << std::endl;; 184 ; 185 // Register the training and test trees; 186 ; 187 TTree *signalTree = (TTree*)input->Get(""TreeS"");; 188 TTree *background = (TTree*)input->Get(""TreeB"");; 189 ; 190 // Create a ROOT output file where TMVA will store ntuples, histograms, etc.; 191 TString o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C_source.html:6356,test,test,6356,doc/master/TMVAClassification_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C_source.html,1,['test'],['test']
Testability,"---------------------; ; # The ARGUS background shape has a sharp kinematic cutoff at m=m0; # and is prone to evaluation errors if the cutoff parameter m0; # is floated: when the pdf cutoff value is lower than that in data; # events with m>m0 will have zero probability; ; # Perform unbinned ML fit. Print detailed error messages for up to; # 10 events per likelihood evaluation. The default error handling strategy; # is to return a very high value of the likelihood to MINUIT if errors occur,; # which will force MINUIT to retreat from the problematic area; ; argus.fitTo(data, PrintEvalErrors=10); ; # Perform another fit. In self configuration only the number of errors per; # likelihood evaluation is shown, it is greater than zero. The; # EvalErrorWall(kFALSE) arguments disables the default error handling strategy; # and will cause the actual (problematic) value of the likelihood to be passed; # to MINUIT.; #; # NB: Use of self option is NOT recommended as default strategt as broken -log(L) values; # can often be lower than 'good' ones because offending events are removed.; # ROOT.This may effectively create a False minimum in problem areas. ROOT.This is clearly; # illustrated in the second plot; ; m0.setError(0.1); argus.fitTo(data, PrintEvalErrors=0, EvalErrorWall=False); ; # Plot likelihood as function of m0; # ------------------------------------------------------------------; ; # Construct likelihood function of model and data; nll = argus.createNLL(data); ; # Plot likelihood in m0 in range that includes problematic values; # In self configuration no messages are printed for likelihood evaluation errors,; # but if an likelihood value evaluates with error, corresponding value; # on the curve will be set to the value given in EvalErrorValue().; ; frame2 = m0.frame(Range=(5.288, 5.293), Title=""-log(L) scan vs m0, regions masked""); nll.plotOn(frame2, ShiftToZero=True, PrintEvalErrors=-1, EvalErrorValue=(nll.getVal() + 10), LineColor=""r""); frame2.SetMaximum(15); frame2.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf606__nllerrorhandling_8py.html:1994,log,log,1994,doc/master/rf606__nllerrorhandling_8py.html,https://root.cern,https://root.cern/doc/master/rf606__nllerrorhandling_8py.html,1,['log'],['log']
Testability,"-----------------; : ; : ; : Confusion matrices for all methods; : -------------------------------------------------------------------------------------------------------; : ; : Does a binary comparison between the two classes given by a ; : particular row-column combination. In each case, the class ; : given by the row is considered signal while the class given ; : by the column index is considered background.; : ; : === Showing confusion matrix for method : BDTG ; : (Signal Efficiency for Background Efficiency 0.01%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.497 (0.373) 0.710 (0.693) 0.680 (0.574) ; : bg0 0.271 (0.184) - 0.239 (0.145) 0.705 (0.667) ; : bg1 0.855 (0.766) 0.369 (0.222) - 0.587 (0.578) ; : bg2 0.714 (0.585) 0.705 (0.581) 0.648 (0.601) - ; : ; : (Signal Efficiency for Background Efficiency 0.10%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.911 (0.853) 0.991 (0.981) 0.945 (0.913) ; : bg0 0.833 (0.774) - 0.654 (0.582) 0.930 (0.901) ; : bg1 0.971 (0.980) 0.716 (0.681) - 0.871 (0.862) ; : bg2 0.976 (0.951) 0.971 (0.973) 0.936 (0.941) - ; : ; : (Signal Efficiency for Background Efficiency 0.30%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.978 (0.957) 0.999 (1.000) 0.998 (0.997) ; : bg0 0.965 (0.926) - 0.874 (0.835) 0.991 (0.976) ; : bg1 1.000 (0.999) 0.916 (0.894) - 0.988 (0.985) ; : bg2 0.999 (0.999) 0.997 (0.999) 0.996 (0.997) - ; : ; : === Showing confusion matrix for method : MLP ; : (Signal Efficiency for Background Efficiency 0.01%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.465 (0.490) 0.974 (0.953) 0.632 (0.498) ; : bg0 0.320 (0.269) - 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:26487,test,test,26487,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,4,['test'],['test']
Testability,"------------; : var1: 0.070769 0.28960 [ -1.0000 1.0000 ]; : var2: 0.074130 0.28477 [ -1.0000 1.0000 ]; : var3: 0.026106 0.24582 [ -1.0000 1.0000 ]; : var4: -0.034951 0.25587 [ -1.0000 1.0000 ]; : -----------------------------------------------------------; : Start of deep neural network training on CPU using MT, nthreads = 1; : ; TFHandler_DL_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 0.070769 0.28960 [ -1.0000 1.0000 ]; : var2: 0.074130 0.28477 [ -1.0000 1.0000 ]; : var3: 0.026106 0.24582 [ -1.0000 1.0000 ]; : var4: -0.034951 0.25587 [ -1.0000 1.0000 ]; : -----------------------------------------------------------; : ***** Deep Learning Network *****; DEEP NEURAL NETWORK: Depth = 4 Input = ( 1, 1, 4 ) Batch size = 100 Loss function = C; Layer 0 DENSE Layer: ( Input = 4 , Width = 100 ) Output = ( 1 , 100 , 100 ) Activation Function = Tanh; Layer 1 DENSE Layer: ( Input = 100 , Width = 50 ) Output = ( 1 , 100 , 50 ) Activation Function = Tanh; Layer 2 DENSE Layer: ( Input = 50 , Width = 10 ) Output = ( 1 , 100 , 10 ) Activation Function = Tanh; Layer 3 DENSE Layer: ( Input = 10 , Width = 4 ) Output = ( 1 , 100 , 4 ) Activation Function = Identity; : Using 3200 events for training and 800 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 0.691476; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.605916 0.542204 0.0761789 0.00657979 45977.6 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.512732 0.499825 0.0771995 0.00657724 45311.5 0; : 3 Minimum Test error found - save the configuration ; : 3 | 0.47749",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:14365,test,testing,14365,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['test'],['testing']
Testability,----------; LikelihoodPCA : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_LikelihoodPCA : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 1.1147 2.2628 [ -12.508 10.719 ]; : myvar2: -0.25554 1.1225 [ -4.1578 3.8995 ]; : var3: -0.19401 0.58225 [ -2.2950 1.8880 ]; : var4: -0.32038 0.33412 [ -1.3929 0.88819 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: PDERS; : ; PDERS : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_PDERS : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.21781 1.7248 [ -9.8605 7.9024 ]; : myvar2: -0.062175 1.1106 [ -4.0854 4.0259 ]; : var3: 0.16451 1.0589 [ -5.3563 4.6422 ]; : var4: 0.43566 1.2253 [ -6.9675 5.0307 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: PDEFoam; : ; PDEFoam : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_PDEFoam : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.21781 1.7248 [ -9.8605 7.9024 ]; : myvar2: -0.062175 1.1106 [ -4.0854 4.0259 ]; : var3: 0.16451 1.0589 [ -5.3563 4.6422 ]; : var4: 0.43566 1.2253 [ -6.9675 5.0307 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: KNN; : ; KNN : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_KNN : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.21781 1.7248 [ -9.8605 7.9024 ]; : myvar2: -0.062175 1.1106 [ -4.0854 4.0259 ]; : var3: 0.16451 1.0589 [ -5.3563 4.6422 ]; : var4: 0.43566 1.2253 [ -6.9675 5.0307 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: LD; : ; LD : [datase,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:72553,test,test,72553,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['test'],['test']
Testability,"---; ; # Perform fit and save result; r = model.fitTo(data, Save=True, PrintLevel=-1); ; # Print fit results; # ---------------------------------; ; # Summary printing: Basic info plus final values of floating fit parameters; r.Print(); ; # Verbose printing: Basic info, of constant parameters, and; # final values of floating parameters, correlations; r.Print(""v""); ; # Visualize correlation matrix; # -------------------------------------------------------; ; # Construct 2D color plot of correlation matrix; ROOT.gStyle.SetOptStat(0); ROOT.gStyle.SetPalette(1); hcorr = r.correlationHist(); ; # Visualize ellipse corresponding to single correlation matrix element; frame = ROOT.RooPlot(sigma1, sig1frac, 0.45, 0.60, 0.65, 0.90); frame.SetTitle(""Covariance between sigma1 and sig1frac""); r.plotOn(frame, sigma1, sig1frac, ""ME12ABHV""); ; # Access fit result information; # ---------------------------------------------------------; ; # Access basic information; print(""EDM = "", r.edm()); print(""-log(L) minimum = "", r.minNll()); ; # Access list of final fit parameter values; print(""final value of floating parameters""); r.floatParsFinal().Print(""s""); ; # Access correlation matrix elements; print(""correlation between sig1frac and a0 is "", r.correlation(sig1frac, a0)); print(""correlation between bkgfrac and mean is "", r.correlation(""bkgfrac"", ""mean"")); ; # Extract covariance and correlation matrix as ROOT.TMatrixDSym; cor = r.correlationMatrix(); cov = r.covarianceMatrix(); ; # Print correlation, matrix; print(""correlation matrix""); cor.Print(); print(""covariance matrix""); cov.Print(); ; # Persist fit result in root file; # -------------------------------------------------------------; ; # Open ROOT file save save result; f = ROOT.TFile(""rf607_fitresult.root"", ""RECREATE""); r.Write(""rf607""); f.Close(); ; # In a clean ROOT session retrieve the persisted fit result as follows:; # r = gDirectory.Get(""rf607""); ; c = ROOT.TCanvas(""rf607_fitresult"", ""rf607_fitresult"", 800, 400); c.Divide(2)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf607__fitresult_8py.html:2692,log,log,2692,doc/master/rf607__fitresult_8py.html,https://root.cern,https://root.cern/doc/master/rf607__fitresult_8py.html,1,['log'],['log']
Testability,"--; ; // The ARGUS background shape has a sharp kinematic cutoff at m=m0; // and is prone to evaluation errors if the cutoff parameter m0; // is floated: when the pdf cutoff value is lower than that in data; // events with m>m0 will have zero probability; ; // Perform unbinned ML fit. Print detailed error messages for up to; // 10 events per likelihood evaluation. The default error handling strategy; // is to return a very high value of the likelihood to MINUIT if errors occur,; // which will force MINUIT to retreat from the problematic area; ; argus.fitTo(*data, PrintEvalErrors(10));; ; // Perform another fit. In this configuration only the number of errors per; // likelihood evaluation is shown, if it is greater than zero. The; // EvalErrorWall(false) arguments disables the default error handling strategy; // and will cause the actual (problematic) value of the likelihood to be passed; // to MINUIT.; //; // NB: Use of this option is NOT recommended as default strategy as broken -log(L) values; // can often be lower than 'good' ones because offending events are removed.; // This may effectively create a false minimum in problem areas. This is clearly; // illustrated in the second plot; ; m0.setError(0.1);; argus.fitTo(*data, PrintEvalErrors(0), EvalErrorWall(false));; ; // P l o t l i k e l i h o o d a s f u n c t i o n o f m 0; // ------------------------------------------------------------------; ; // Construct likelihood function of model and data; std::unique_ptr<RooAbsReal> nll{argus.createNLL(*data)};; ; // Plot likelihood in m0 in range that includes problematic values; // In this configuration no messages are printed for likelihood evaluation errors,; // but if an likelihood value evaluates with error, the corresponding value; // on the curve will be set to the value given in EvalErrorValue().; ; RooPlot *frame2 = m0.frame(Range(5.288, 5.293), Title(""-log(L) scan vs m0, problematic regions masked""));; nll->plotOn(frame2, PrintEvalErrors(-1), ShiftToZero(), E",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf606__nllerrorhandling_8C.html:2217,log,log,2217,doc/master/rf606__nllerrorhandling_8C.html,https://root.cern,https://root.cern/doc/master/rf606__nllerrorhandling_8C.html,1,['log'],['log']
Testability,"-00-patches@v6-10-00-25-g9f78c3a, Jul 03 2017, 11:39:44 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; -------------------------------------------------------------------------. root [0] .x hsimple.C; Now execute demos.C, which brings up the button bar shown on the left. You can click on any button to execute another example. To see the source, open the corresponding source file (for example fit1.C). Once you are done, and want to quit the ROOT session, you can do so by typing .q.; root[] .x demos.C; root[] .q; 20.2 $ROOTSYS/test; The test directory contains a set of examples that represent all areas of the framework. When a new release is cut, the examples in this directory are compiled and run to test the new release’s backward compatibility.; We see these source files:. Makefile; Makefile to build all test programs. hsimple.cxx; Simple test program that creates and saves some histograms. MainEvent.cxx; Simple test program that creates a ROOT Tree object and fills it with some simple structures but also with complete histograms. This program uses the files Event.cxx, EventCint.cxx and Event.h. An example of a procedure to link this program is in bind_Event. Note that the Makefile invokes the rootcling utility to generate the Cling interface EventCint.cxx. Event.cxx; Implementation for classes Event and Track. minexam.cxx; Simple test program for data fitting. tcollex.cxx; Example usage of the ROOT collection classes. tcollbm.cxx; Benchmarks of ROOT collection classes. ctorture.cxx; Test program for the class TComplex. tstring.cxx; Example usage of the ROOT string class. vmatrix.cxx; Verification program for the TMatrix class. vvector.cxx; Verification program for the TVectorclass. vlazy.cxx; Verification program for lazy matrices. hworld.cxx; Small program showing basic graphics. guitest.cxx; Example usage of the ROOT GUI classes. gui viewer .cxx; Another ROOT GUI example program. Hello.cxx; Dancing text example. Aclock.cxx; Analog clock (a la ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1075561,test,test,1075561,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['test']
Testability,"-1, Bool_t deactonfail = kFALSE); Int_tCollect(TList* slaves, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); TSlave*CreateSlave(const char* url, const char* ord, Int_t perf, const char* image, const char* workdir); TSlave*CreateSubmaster(const char* url, const char* ord, const char* image, const char* msd); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; static Bool_tGetFileInCmd(const char* cmd, TString& fn); static Int_tGetInputData(TList* input, const char* cachedir, TString& emsg); TList*GetListOfActiveSlaves() const; TVirtualProofPlayer*GetPlayer() const; TPluginHandler*GetProgressDialog() const; Int_tGetSandbox(TString& sb, Bool_t assert = kFALSE, const char* rc = 0); virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidHandleLibIncPath(const char* what, Bool_t add, const char* dirs); Int_tInit(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); voidInitMembers(); virtual TVirtualProofPlayer*MakePlayer(const char* player = 0, TSocket* s = 0); voidTObject::MakeZombie(); voidPrepareInputDataFile(TString& dataFile); Int_tRemoveWorkers(TList* wrks); static Int_tSaveInputData(TQueryResult* qr, const char* cachedir, TString& emsg); virtual voidSaveWorkerInfo(); Int_tSendFile(const char* file, Int_t opt = (kBinary|kForward|kCp|kCpBin), const char* rfile = 0, TSlave* sl = 0); static Int_tSendInputData(TQueryResult* qr, TProof* p, TString& emsg); virtual voidSendInputDataFile(); voidSetDSet(TDSet* dset); voidSetPlayer(TVirtualProofPlayer* player); static void*SlaveStartupThread(void* arg); virtual Bool_tStartSlaves(Bool_t attach",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProof.html:18558,assert,assert,18558,root/html530/TProof.html,https://root.cern,https://root.cern/root/html530/TProof.html,2,['assert'],['assert']
Testability,-1.0158 0.99984 ]; : var4: 0.17495 0.23851 [ -1.2661 1.0694 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: SVM; : ; TFHandler_SVM : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.12216 0.20255 [ -1.0614 1.0246 ]; : myvar2: -0.12333 0.30492 [ -1.2280 0.99911 ]; : var3: 0.097148 0.21347 [ -1.0158 0.99984 ]; : var4: 0.17495 0.23851 [ -1.2661 1.0694 ]; : -----------------------------------------------------------; SVM : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_SVM : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.12216 0.20255 [ -1.0614 1.0246 ]; : myvar2: -0.12333 0.30492 [ -1.2280 0.99911 ]; : var3: 0.097148 0.21347 [ -1.0158 0.99984 ]; : var4: 0.17495 0.23851 [ -1.2661 1.0694 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: BDT; : ; BDT : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_BDT : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.21781 1.7248 [ -9.8605 7.9024 ]; : myvar2: -0.062175 1.1106 [ -4.0854 4.0259 ]; : var3: 0.16451 1.0589 [ -5.3563 4.6422 ]; : var4: 0.43566 1.2253 [ -6.9675 5.0307 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: RuleFit; : ; RuleFit : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_RuleFit : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.21781 1.7248 [ -9.8605 7.9024 ]; : myvar2: -0.062175 1.1106 [ -4.0854 4.0259 ]; : var3: 0.16451 1.0589 [ -5.3563 4.6422 ]; : var4: 0.43566 1.2253 [ -6.9675 5.0307 ]; : -----------------------------------------------------------; : ; : Evaluation results ranked by best signal ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:77208,test,test,77208,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['test'],['test']
Testability,"-14)^{2}+1} (1); 1943///\f]; 1944/// defined on the interval [4,16]. Events distributed according to the formula; 1945/// (1) are simulated to create the unweighted histogram. Uniformly distributed; 1946/// events are simulated for the weighted histogram with weights calculated by; 1947/// formula (1). Each histogram has the same number of bins: 20. Fig.1 shows; 1948/// the result of comparison of the unweighted histogram with 200 events; 1949/// (minimal expected frequency equal to one) and the weighted histogram with; 1950/// 500 events (minimal expected frequency equal to 25); 1951/// Begin_Macro; 1952/// ../../../tutorials/math/chi2test.C; 1953/// End_Macro; 1954/// Fig 1. An example of comparison of the unweighted histogram with 200 events; 1955/// and the weighted histogram with 500 events:; 1956/// 1. unweighted histogram;; 1957/// 2. weighted histogram;; 1958/// 3. normalized residuals plot;; 1959/// 4. normal Q-Q plot of residuals.; 1960///; 1961/// The value of the test statistic \f$ \chi^{2} \f$ is equal to; 1962/// 21.09 with p-value equal to 0.33, therefore the hypothesis of identity of; 1963/// the two histograms can be accepted for 0.05 significant level. The behavior; 1964/// of the normalized residuals plot (see Fig. 1c) and the normal Q-Q plot; 1965/// (see Fig. 1d) of residuals are regular and we cannot identify the outliers; 1966/// or bins with a big influence on \f$ \chi^{2} \f$.; 1967///; 1968/// The second example presents the same two histograms but 17 events was added; 1969/// to content of bin number 15 in unweighted histogram. Fig.2 shows the result; 1970/// of comparison of the unweighted histogram with 217 events (minimal expected; 1971/// frequency equal to one) and the weighted histogram with 500 events (minimal; 1972/// expected frequency equal to 25); 1973/// Begin_Macro; 1974/// ../../../tutorials/math/chi2test.C(17); 1975/// End_Macro; 1976/// Fig 2. An example of comparison of the unweighted histogram with 217 events; 1977/// and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:79379,test,test,79379,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['test'],['test']
Testability,"-> no tick marks.; ndiv=2 --> 2 divisions, one tick mark in the middle of the axis. chopt : Drawing options (see below).; gridlength: grid length on main tick marks. Examples:. Picture; Source. {; TCanvas *c2 = new TCanvas(""c2"",""c2"",10,10,700,500);. gStyle->SetOptStat(0);. TH2F *h2 = new TH2F(""h"",""Axes"",100,0,10,100,-2,2);; h2->Draw();. TF1 *f1=new TF1(""f1"",""-x"",-10,10);; TGaxis *A1 = new TGaxis(0,2,10,2,""f1"",510,""-"");; A1->SetTitle(""axis with decreasing values"");; A1->Draw();. TF1 *f2=new TF1(""f2"",""exp(x)"",0,2);; TGaxis *A2 = new TGaxis(1,1,9,1,""f2"");; A2->SetTitle(""exponential axis"");; A2->SetLabelSize(0.03);; A2->SetTitleSize(0.03);; A2->SetTitleOffset(1.2);; A2->Draw();. TF1 *f3=new TF1(""f3"",""log10(x)"",1,1000);; TGaxis *A3 = new TGaxis(2,-2,2,0,""f3"",505,""G"");; A3->SetTitle(""logarithmic axis"");; A3->SetLabelSize(0.03);; A3->SetTitleSize(0.03);; A3->SetTitleOffset(1.2);; A3->Draw();; return c2;; }; Logarithmic axis; By default axis are linear. To define a TGaxis as logarithmic, it is; enough to create it with the option ""G"". When plotting an histogram or a graph the logarithmic scale can be set using:. gPad->SetLogx(1); set the logarithmic scale on the X axis; gPad->SetLogy(1); set the logarithmic scale on the Y axis. When the SetMoreLogLabels() method is called more labels are drawn; when in logarithmic scale and there is a small number of decades (less than 3).; Blank axis; To draw only the axis tick marks without the axis body, it is enough to specify; the option ""B"". It useful to superpose axis.; Tick marks' orientation; By default tick marks are drawn on the positive side of the axis, except for; vertical axis for which the default is negative. The chop parameter; allows to control the tick marks orientation:. chopt = ""+"": tick marks are drawn on Positive side. (default); chopt =""-"": tick mark are drawn on the negative side.; chopt = ""+-"": tick marks are drawn on both sides of the axis.; chopt = ""U"": Unlabelled axis, default is labeled. Tick marks' size; By de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGaxis.html:5021,log,logarithmic,5021,root/html604/TGaxis.html,https://root.cern,https://root.cern/root/html604/TGaxis.html,1,['log'],['logarithmic']
Testability,"->AddVariable( ""var2"", &var2 );; ; // Spectator variables declared in the training have to be added to the reader, too; Float_t spec1,spec2;; reader->AddSpectator( ""spec1:=var1*2"", &spec1 );; reader->AddSpectator( ""spec2:=var1*3"", &spec2 );; ; // --- Book the MVA methods; ; TString dir = ""datasetreg/weights/"";; TString prefix = ""TMVARegression"";; ; // Book method(s); for (std::map<std::string,int>::iterator it = Use.begin(); it != Use.end(); it++) {; if (it->second) {; TString methodName = it->first + "" method"";; TString weightfile = dir + prefix + ""_"" + TString(it->first) + "".weights.xml"";; reader->BookMVA( methodName, weightfile );; }; }; ; // Book output histograms; TH1* hists[100];; Int_t nhists = -1;; for (std::map<std::string,int>::iterator it = Use.begin(); it != Use.end(); it++) {; TH1* h = new TH1F( it->first.c_str(), TString(it->first) + "" method"", 100, -100, 600 );; if (it->second) hists[++nhists] = h;; }; nhists++;; ; // Prepare input tree (this must be replaced by your data source); // in this example, there is a toy tree with signal and one with background events; // we'll later on use only the ""signal"" events for the test in this example.; //; TFile *input(0);; TString fname = ""./tmva_reg_example.root"";; if (!gSystem->AccessPathName( fname )) {; input = TFile::Open( fname ); // check if file in local directory exists; }; else {; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_reg_example.root"", ""CACHEREAD""); // if not: download from ROOT server; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }; std::cout << ""--- TMVARegressionApp : Using input file: "" << input->GetName() << std::endl;; ; // --- Event loop; ; // Prepare the tree; // - here the variable names have to corresponds to your tree; // - you can use the same variables as above which is slightly faster,; // but of course you can use different ones and copy the values inside the event loop; //; TTree* theTree = (TTree*)inpu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegressionApplication_8C.html:5968,test,test,5968,doc/master/TMVARegressionApplication_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegressionApplication_8C.html,1,['test'],['test']
Testability,"->GetD() and/or using pseudo-experiments. ; Covariance matrices on the measured spectrum (for either the total uncertainties or individual sources of uncertainties) can be propagated to covariance matrices using the GetUnfoldCovMatrix method, which uses pseudo experiments for the propagation. In addition, GetAdetCovMatrix allows for the propagation of the statistical uncertainties on the response matrix using pseudo experiments. The covariance matrix corresponding to Bcov is also computed as described in Nucl. Instrum. Meth. A372, 469 (1996) [hep-ph/9509307] and can be obtained from tsvdunf->GetXtau() and its (regularisation independent) inverse from tsvdunf->GetXinv(). The distribution of singular values can be retrieved using tsvdunf->GetSV(). ; See also the tutorial for a toy example. ; Definition at line 46 of file TSVDUnfold.h. Public Member Functions;  TSVDUnfold (const TH1D *bdat, const TH1D *bini, const TH1D *xini, const TH2D *Adet);  Alternative constructor User provides data and MC test spectra, as well as detector response matrix, diagonal covariance matrix of measured spectrum built from the uncertainties on measured spectrum. ;  ;  TSVDUnfold (const TH1D *bdat, TH2D *Bcov, const TH1D *bini, const TH1D *xini, const TH2D *Adet);  Default constructor Initialisation of TSVDUnfold User provides data and MC test spectra, as well as detector response matrix and the covariance matrix of the measured distribution. ;  ;  TSVDUnfold (const TSVDUnfold &other);  Copy constructor. ;  ;  ~TSVDUnfold () override;  Destructor. ;  ; Double_t ComputeChiSquared (const TH1D &truspec, const TH1D &unfspec);  Helper routine to compute chi-squared between distributions using the computed inverse of the covariance matrix for the unfolded spectrum as given in paper. ;  ; TH2D * GetAdetCovMatrix (Int_t ntoys, Int_t seed=1);  Determine covariance matrix of unfolded spectrum from finite statistics in response matrix using pseudo experiments ""ntoys"" - number of pseudo experiments use",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSVDUnfold.html:3553,test,test,3553,doc/master/classTSVDUnfold.html,https://root.cern,https://root.cern/doc/master/classTSVDUnfold.html,1,['test'],['test']
Testability,"->GetName() << "" -- ""; 1680 << ""training and testing events: ""; 1681 << (trainingSizePerClass.at(cls)+testingSizePerClass.at(cls)) << Endl;; 1682 Log() << kDEBUG << ""\t(sum of weights: ""; 1683 << (trainingSumWeightsPerClass.at(cls)+testingSumWeightsPerClass.at(cls)) << "")"" << Endl;; 1684 if(eventCounts[cls].nEvAfterCut<eventCounts[cls].nEvBeforeCut) {; 1685 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << setiosflags(ios::left) << std::setw(maxL); 1686 << dsi.GetClassInfo(cls)->GetName() << "" -- ""; 1687 << ""due to the preselection a scaling factor has been applied to the numbers of requested events: ""; 1688 << eventCounts[cls].cutScaling() << Endl;; 1689 }; 1690 }; 1691 Log() << kINFO << Endl;; 1692 ; 1693 // for information purposes; 1694 dsi.SetTrainingSumSignalWeights(trainingSumSignalWeights);; 1695 dsi.SetTrainingSumBackgrWeights(trainingSumBackgrWeights);; 1696 dsi.SetTestingSumSignalWeights(testingSumSignalWeights);; 1697 dsi.SetTestingSumBackgrWeights(testingSumBackgrWeights);; 1698 ; 1699 ; 1700}; Configurable.h; DataInputHandler.h; DataSetFactory.h; DataSetInfo.h; DataSet.h; Event.h; MsgLogger.h; d#define d(i)Definition RSha256.hxx:102; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; Int_tint Int_tDefinition RtypesCore.h:45; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; Float_tfloat Float_tDefinition RtypesCore.h:57; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Double_tdouble Double_tDefinition RtypesCore.h:59; Long64_tlong long Long64_tDefinition RtypesCore.h:69; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; TBranch.h; TEventList.h; TFile.h; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; TMath.h; TMatrixDT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:79414,test,testingSumBackgrWeights,79414,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['test'],['testingSumBackgrWeights']
Testability,"->GetParameters().data());; f_sum->SetParName(1, ""NBackground"");; f_sum->SetParName(0, ""NSignal"");; for (int i = 2; i < f_sum->GetNpar(); ++i); f_sum->SetParName(i, fnorm_exp_cb->GetParName(i));; ; // GENERATE HISTOGRAM TO FIT ..............................................................; TStopwatch w;; w.Start();; TH1D *h_sum = new TH1D(""h_ExpCB"", ""Exponential Bkg + CrystalBall function"", nBins, -5., 5.);; h_sum->FillRandom(""fsum"", nEvents);; printf(""Time to generate %d events: "", nEvents);; w.Print();; ; // need to scale histogram with width since we are fitting a density; h_sum->Sumw2();; h_sum->Scale(1., ""width"");; ; // fit - use Minuit2 if available; ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""Minuit2"");; new TCanvas(""Fit"", ""Fit"", 800, 1000);; // do a least-square fit of the spectrum; auto result = h_sum->Fit(""fsum"", ""SQ"");; result->Print();; h_sum->Draw();; printf(""Time to fit using ROOT TF1Normsum: "");; w.Print();; ; // test if parameters are fine; std::vector<double> pref = {nsig, nbkg, signal_mean};; for (unsigned int i = 0; i < pref.size(); ++i) {; if (!TMath::AreEqualAbs(pref[i], f_sum->GetParameter(i), f_sum->GetParError(i) * 10.)); Error(""testFitNormSum"", ""Difference found in fitted %s - difference is %g sigma"", f_sum->GetParName(i),; (f_sum->GetParameter(i) - pref[i]) / f_sum->GetParError(i));; }; ; gStyle->SetOptStat(0);; // add parameters; auto t1 = new TLatex(; -2.5, 300000, TString::Format(""%s = %8.0f #pm %4.0f"", ""NSignal"", f_sum->GetParameter(0), f_sum->GetParError(0)));; auto t2 = new TLatex(; -2.5, 270000, TString::Format(""%s = %8.0f #pm %4.0f"", ""Nbackgr"", f_sum->GetParameter(1), f_sum->GetParError(1)));; t1->Draw();; t2->Draw();; }; MinimizerOptions.h; TCanvas.h; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; TF1NormSum.h; TF1.h; TFitResult.h; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; resultOption_t Option_t TPoint TPoint const char GetTextMagnitu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fitNormSum_8C.html:3152,test,test,3152,doc/master/fitNormSum_8C.html,https://root.cern,https://root.cern/doc/master/fitNormSum_8C.html,1,['test'],['test']
Testability,"->GetTitleSize());; 972 SetBit(TAxis::kCenterTitle, axis->TestBit(TAxis::kCenterTitle));; 973 SetBit(TAxis::kCenterLabels, axis->TestBit(TAxis::kCenterLabels));; 974 SetBit(TAxis::kRotateTitle, axis->TestBit(TAxis::kRotateTitle));; 975 SetBit(TAxis::kNoExponent, axis->TestBit(TAxis::kNoExponent));; 976 SetBit(TAxis::kTickPlus, axis->TestBit(TAxis::kTickPlus));; 977 SetBit(TAxis::kTickMinus, axis->TestBit(TAxis::kTickMinus));; 978 SetBit(TAxis::kMoreLogLabels, axis->TestBit(TAxis::kMoreLogLabels));; 979 if (axis->GetDecimals()) SetBit(TAxis::kDecimals); //the bit is in TAxis::fAxis2; 980 SetTimeFormat(axis->GetTimeFormat());; 981}; 982 ; 983////////////////////////////////////////////////////////////////////////////////; 984/// Draw this axis with its current attributes.; 985 ; 986void TGaxis::Paint(Option_t *); 987{; 988 if (!gPad) return;; 989 ; 990 Double_t wmin = fWmin;; 991 Double_t wmax = fWmax;; 992 Int_t ndiv = fNdiv;; 993 ; 994 // following code required to support toggle of lin/log scales; 995 Double_t x1 = gPad->XtoPad(fX1);; 996 Double_t y1 = gPad->YtoPad(fY1);; 997 Double_t x2 = gPad->XtoPad(fX2);; 998 Double_t y2 = gPad->YtoPad(fY2);; 999 ; 1000 PaintAxis(x1,y1,x2,y2,wmin,wmax,ndiv,fChopt.Data(),fGridLength);; 1001}; 1002 ; 1003////////////////////////////////////////////////////////////////////////////////; 1004/// Control function to draw an axis.; 1005/// Original authors: O.Couet C.E.Vandoni N.Cremel-Somon.; 1006/// Modified and converted to C++ class by Rene Brun.; 1007 ; 1008void TGaxis::PaintAxis(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax,; 1009 Double_t &wmin, Double_t &wmax, Int_t &ndiv, Option_t *chopt,; 1010 Double_t gridlength, Bool_t drawGridOnly); 1011{; 1012 if (!gPad) return;; 1013 ; 1014 const char *where = ""PaintAxis"";; 1015 ; 1016 Double_t alfa, beta, ratio1, ratio2, grid_side;; 1017 Double_t axis_lengthN = 0;; 1018 Double_t axis_length0 = 0;; 1019 Double_t axis_length1 = 0;; 1020 Double_t axis_length;; 1021 Double_t at",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGaxis_8cxx_source.html:34498,log,log,34498,doc/master/TGaxis_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGaxis_8cxx_source.html,1,['log'],['log']
Testability,"->SetGrid();; ; gBenchmark->Start(""hsum"");; ; // Create some histograms.; auto total = new TH1F(""total"",""This is the total distribution"",100,-4,4);; auto main = new TH1F(""main"",""Main contributor"",100,-4,4);; auto s1 = new TH1F(""s1"",""This is the first signal"",100,-4,4);; auto s2 = new TH1F(""s2"",""This is the second signal"",100,-4,4);; total->Sumw2(); // store the sum of squares of weights; total->SetMarkerStyle(21);; total->SetMarkerSize(0.7);; main->SetFillColor(16);; s1->SetFillColor(42);; s2->SetFillColor(46);; TSlider *slider = nullptr;; ; // Fill histograms randomly; gRandom->SetSeed();; const Int_t kUPDATE = 500;; Float_t xs1, xs2, xmain;; for ( Int_t i=0; i<10000; i++) {; xmain = gRandom->Gaus(-1,1.5);; xs1 = gRandom->Gaus(-0.5,0.5);; xs2 = gRandom->Landau(1,0.15);; main->Fill(xmain);; s1->Fill(xs1,0.3);; s2->Fill(xs2,0.2);; total->Fill(xmain);; total->Fill(xs1,0.3);; total->Fill(xs2,0.2);; if (i && (i%kUPDATE) == 0) {; if (i == kUPDATE) {; total->Draw(""e1p"");; main->Draw(""same"");; s1->Draw(""same"");; s2->Draw(""same"");; c1->Update();; slider = new TSlider(""slider"",; ""test"",4.2,0,4.6,total->GetMaximum(),38);; slider->SetFillColor(46);; }; if (slider) slider->SetRange(0., 1.*i/10000.);; c1->Modified();; c1->Update();; }; }; slider->SetRange(0., 1.);; c1->Modified();; gBenchmark->Show(""hsum"");; }; mainint main()Definition Prototype.cxx:12; s1#define s1(x)Definition RSha256.hxx:91; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; gBenchmarkR__EXTERN TBenchmark * gBenchmarkDefinition TBenchmark.h:59; kUPDATE@ kUPDATEDefinition TFitParametersDialog.cxx:46; totalstatic unsigned int totalDefinition TGWin32ProxyDefs.h:40; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TBenchmark::Startvirtual void Start(const char *name)Starts Benchmark with the specified name.Definition TBenchmark.cxx:172; TBenchmark::Showv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hsum_8C.html:1540,test,test,1540,doc/master/hsum_8C.html,https://root.cern,https://root.cern/doc/master/hsum_8C.html,1,['test'],['test']
Testability,"->fStreamerImpl = &TClass::StreamerStreamerInfo;; 6146 }; 6147 }; 6148 ; 6149 if (fStreamer) {; 6150 kl->fStreamerType = kExternal;; 6151 kl->fStreamerImpl = &TClass::StreamerExternal;; 6152 }; 6153 ; 6154 if (const_cast<TClass *>(this)->GetClassMethodWithPrototype(""Hash"", """", kTRUE)) {; 6155 kl->SetBit(kHasLocalHashMember);; 6156 }; 6157 ; 6158 if (GetClassInfo()) {; 6159 // In the case where the TClass for one of ROOT's core class; 6160 // (eg TClonesArray for map<int,TClonesArray*>) is requested; 6161 // during the execution of rootcling, we could end up in a situation; 6162 // where we should have the information (since TClonesArray has; 6163 // a dictionary as part of libCore) but do not because the user; 6164 // only include a forward declaration of TClonesArray and we do not; 6165 // forcefully load the header file either (because the autoparsing; 6166 // is intentionally disabled).; 6167 kl->fClassProperty = gCling->ClassInfo_ClassProperty(fClassInfo);; 6168 // Must set this last since other threads may read fProperty; 6169 // and think all test bits have been properly set.; 6170 kl->fProperty = gCling->ClassInfo_Property(fClassInfo);; 6171 }; 6172 } else {; 6173 ; 6174 if (fStreamer) {; 6175 kl->fStreamerType = kExternal;; 6176 kl->fStreamerImpl = &TClass::StreamerExternal;; 6177 }; 6178 ; 6179 kl->fStreamerType |= kEmulatedStreamer;; 6180 kl->SetStreamerImpl();; 6181 // fProperty was *not* set so that it can be forced to be recalculated; 6182 // next time.; 6183 return 0;; 6184 }; 6185 ; 6186 return fProperty;; 6187}; 6188 ; 6189////////////////////////////////////////////////////////////////////////////////; 6190/// Internal routine to set calculate the class properties that can only be; 6191/// known at run-time, for example whether the Hash member function and the; 6192/// destructor are consistent.; 6193 ; 6194void TClass::SetRuntimeProperties(); 6195{; 6196 // For now, no need to lock this routines as fRuntimeProperties is; 6197 // the only atomic set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:237460,test,test,237460,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['test'],['test']
Testability,"->fStreamerImpl = &TClass::StreamerStreamerInfo;; 6213 }; 6214 }; 6215 ; 6216 if (fStreamer) {; 6217 kl->fStreamerType = kExternal;; 6218 kl->fStreamerImpl = &TClass::StreamerExternal;; 6219 }; 6220 ; 6221 if (const_cast<TClass *>(this)->GetClassMethodWithPrototype(""Hash"", """", kTRUE)) {; 6222 kl->SetBit(kHasLocalHashMember);; 6223 }; 6224 ; 6225 if (GetClassInfo()) {; 6226 // In the case where the TClass for one of ROOT's core class; 6227 // (eg TClonesArray for map<int,TClonesArray*>) is requested; 6228 // during the execution of rootcling, we could end up in a situation; 6229 // where we should have the information (since TClonesArray has; 6230 // a dictionary as part of libCore) but do not because the user; 6231 // only include a forward declaration of TClonesArray and we do not; 6232 // forcefully load the header file either (because the autoparsing; 6233 // is intentionally disabled).; 6234 kl->fClassProperty = gCling->ClassInfo_ClassProperty(fClassInfo);; 6235 // Must set this last since other threads may read fProperty; 6236 // and think all test bits have been properly set.; 6237 kl->fProperty = gCling->ClassInfo_Property(fClassInfo);; 6238 }; 6239 } else {; 6240 ; 6241 if (fStreamer) {; 6242 kl->fStreamerType = kExternal;; 6243 kl->fStreamerImpl = &TClass::StreamerExternal;; 6244 }; 6245 ; 6246 kl->fStreamerType |= kEmulatedStreamer;; 6247 kl->SetStreamerImpl();; 6248 // fProperty was *not* set so that it can be forced to be recalculated; 6249 // next time.; 6250 return 0;; 6251 }; 6252 ; 6253 return fProperty;; 6254}; 6255 ; 6256////////////////////////////////////////////////////////////////////////////////; 6257/// Internal routine to set calculate the class properties that can only be; 6258/// known at run-time, for example whether the Hash member function and the; 6259/// destructor are consistent.; 6260 ; 6261void TClass::SetRuntimeProperties(); 6262{; 6263 // For now, no need to lock this routines as fRuntimeProperties is; 6264 // the only atomic set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:240211,test,test,240211,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['test'],['test']
Testability,"->qop = value;; 8411 } else if (!strcmp(name, ""nc"")) {; 8412 ah->nc = value;; 8413 } else if (!strcmp(name, ""nonce"")) {; 8414 ah->nonce = value;; 8415 }; 8416 }; 8417 ; 8418#if !defined(NO_NONCE_CHECK); 8419 /* Read the nonce from the response. */; 8420 if (ah->nonce == NULL) {; 8421 return 0;; 8422 }; 8423 s = NULL;; 8424 nonce = strtoull(ah->nonce, &s, 10);; 8425 if ((s == NULL) || (*s != 0)) {; 8426 return 0;; 8427 }; 8428 ; 8429 /* Convert the nonce from the client to a number. */; 8430 nonce ^= conn->dom_ctx->auth_nonce_mask;; 8431 ; 8432 /* The converted number corresponds to the time the nounce has been; 8433 * created. This should not be earlier than the server start. */; 8434 /* Server side nonce check is valuable in all situations but one:; 8435 * if the server restarts frequently, but the client should not see; 8436 * that, so the server should accept nonces from previous starts. */; 8437 /* However, the reasonable default is to not accept a nonce from a; 8438 * previous start, so if anyone changed the access rights between; 8439 * two restarts, a new login is required. */; 8440 if (nonce < (uint64_t)conn->phys_ctx->start_time) {; 8441 /* nonce is from a previous start of the server and no longer valid; 8442 * (replay attack?) */; 8443 return 0;; 8444 }; 8445 /* Check if the nonce is too high, so it has not (yet) been used by the; 8446 * server. */; 8447 if (nonce >= ((uint64_t)conn->phys_ctx->start_time; 8448 + conn->dom_ctx->nonce_count)) {; 8449 return 0;; 8450 }; 8451#else; 8452 (void)nonce;; 8453#endif; 8454 ; 8455 /* CGI needs it as REMOTE_USER */; 8456 if (ah->user != NULL) {; 8457 conn->request_info.remote_user =; 8458 mg_strdup_ctx(ah->user, conn->phys_ctx);; 8459 } else {; 8460 return 0;; 8461 }; 8462 ; 8463 return 1;; 8464}; 8465 ; 8466 ; 8467static const char *; 8468mg_fgets(char *buf, size_t size, struct mg_file *filep); 8469{; 8470 if (!filep) {; 8471 return NULL;; 8472 }; 8473 ; 8474 if (filep->access.fp != NULL) {; 8475 return fgets(buf, (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:243654,log,login,243654,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['log'],['login']
Testability,"->qop = value;; 8412 } else if (!strcmp(name, ""nc"")) {; 8413 ah->nc = value;; 8414 } else if (!strcmp(name, ""nonce"")) {; 8415 ah->nonce = value;; 8416 }; 8417 }; 8418 ; 8419#if !defined(NO_NONCE_CHECK); 8420 /* Read the nonce from the response. */; 8421 if (ah->nonce == NULL) {; 8422 return 0;; 8423 }; 8424 s = NULL;; 8425 nonce = strtoull(ah->nonce, &s, 10);; 8426 if ((s == NULL) || (*s != 0)) {; 8427 return 0;; 8428 }; 8429 ; 8430 /* Convert the nonce from the client to a number. */; 8431 nonce ^= conn->dom_ctx->auth_nonce_mask;; 8432 ; 8433 /* The converted number corresponds to the time the nounce has been; 8434 * created. This should not be earlier than the server start. */; 8435 /* Server side nonce check is valuable in all situations but one:; 8436 * if the server restarts frequently, but the client should not see; 8437 * that, so the server should accept nonces from previous starts. */; 8438 /* However, the reasonable default is to not accept a nonce from a; 8439 * previous start, so if anyone changed the access rights between; 8440 * two restarts, a new login is required. */; 8441 if (nonce < (uint64_t)conn->phys_ctx->start_time) {; 8442 /* nonce is from a previous start of the server and no longer valid; 8443 * (replay attack?) */; 8444 return 0;; 8445 }; 8446 /* Check if the nonce is too high, so it has not (yet) been used by the; 8447 * server. */; 8448 if (nonce >= ((uint64_t)conn->phys_ctx->start_time; 8449 + conn->dom_ctx->nonce_count)) {; 8450 return 0;; 8451 }; 8452#else; 8453 (void)nonce;; 8454#endif; 8455 ; 8456 /* CGI needs it as REMOTE_USER */; 8457 if (ah->user != NULL) {; 8458 conn->request_info.remote_user =; 8459 mg_strdup_ctx(ah->user, conn->phys_ctx);; 8460 } else {; 8461 return 0;; 8462 }; 8463 ; 8464 return 1;; 8465}; 8466 ; 8467 ; 8468static const char *; 8469mg_fgets(char *buf, size_t size, struct mg_file *filep); 8470{; 8471 if (!filep) {; 8472 return NULL;; 8473 }; 8474 ; 8475 if (filep->access.fp != NULL) {; 8476 return fgets(buf, (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:243686,log,login,243686,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['log'],['login']
Testability,"-and-customize multiple models (modelPdf1,modelPdf2) according to ParamSplit and; ParamSplitConstrained() specifications and return a RooSimultaneous p.d.f. of all built clones,; using the specified master index to map prototype p.d.f.s to master states; Interface to RooCustomizer. EDIT::name( orig, substNode=origNode), ... ] -- Create a clone of input object orig, with the specified replacements operations executed; EDIT::name( orig, origNode=$REMOVE(), ... ] -- Create clone of input removing term origNode from all PROD() terms that contained it; EDIT::name( orig, origNode=$REMOVE(prodname,...), ... ] -- As above, but restrict removal of origNode to PROD term(s) prodname,... Interface to RooClassFactory. CEXPR::name('expr',var,...] -- Create an custom compiled p.d.f that evaluates the given expression; cexpr::name('expr',var,...] -- Create an custom compiled function that evaluates the given expression. $MetaType(...) - Meta argument that does not result in construction of an object but is used logically organize; input arguments in certain operator p.d.f. constructions. The defined meta arguments are context dependent. The only meta argument that is defined globally is $Alias(typeName,aliasName) to; define aliases for type names. For the definition of meta arguments in operator p.d.f.s; see the definitions below. std::string processExpression(const char* expr); Process a single high-level expression or list of; expressions. The returned string a the reduced expression where; all inline object creations have been executed and substituted; with the name of the created object. e.g. 'RooGaussian::g(x,m,s)' --> 'g'; '{x(-10,10),s} --> '{x,s}'. std::string processCompositeExpression(const char* arg); Process a single composite expression. e.g. 'A=RooGaussian::g[x,m,s]' --> 'A=g'; e.g. 'f[0,1]*RooGaussian::g[x,m,s]' --> 'f*g'; e.g. 'RooGaussian::g(x,y,s)|x' --> g|x'; e.g. '$MetaArg(RooGaussian::g[x,m,s],blah)' --> '$MetaArg(g,blah)'. std::string processSingleExpression(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooFactoryWSTool.html:16542,log,logically,16542,root/html530/RooFactoryWSTool.html,https://root.cern,https://root.cern/root/html530/RooFactoryWSTool.html,5,['log'],['logically']
Testability,"-level p.d.f evaluates to NaN @ numerator=wrap_pdf=59.1285, denominator=wrap_pdf_Int[pTV]=200921; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=0.338546 cHl3=0.879879 cHq3=-1.35856; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=0.372361 cHl3=0.491134 cHq3=-0.886807; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=5.8312, denominator=wrap_pdf_Int[pTV]=12183.6; ; [#1] INFO:Fitting -- RooAbsPdf::fitTo(wrap_pdf) Calculating sum-of-weights-squared correction matrix for covariance matrix; [#1] INFO:InputArguments -- RooAbsData::plotOn(pseudo_dh) INFO: dataset has non-integer weights, auto-selecting SumW2 errors instead of Poisson errors; [#1] INFO:Plotting -- RooPlot::updateFitRangeNorm: New event count of 7389.24 will supersede previous event count of 9313.81 for normalization of PDF projections; DateJanuary 2022 ; AuthorRahul Balasubramanian ; Definition in file rf712_lagrangianmorphfit.C. tutorialsroofitrf712_lagrangianmorphfit.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html:16218,log,log,16218,doc/master/rf712__lagrangianmorphfit_8C.html,https://root.cern,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html,1,['log'],['log']
Testability,"-mode interface based on ncurses. Tig has been written by Jonas Fonseca.; See the full Tig manual for a detailed description.; Obtaining Tig; Tig is available as package from many Linux distributions. On Debian/Ubuntu it is available with the package name tig from the default repositories.; On RHEL-based systems it is available from the additional repository RepoForge.; On OS X it is easily installed via Homebrew:; brew install tig. Tig pager mode; Many git commands can be piped into tig. When tig is invoked this way, it is in pager mode: output will be colored according to the input format, and colored.; For instance it is possible to pipe the differences of one file like this:; git diff path/to/file.cxx | tig. or see the changes of one revision like this:; git show b204d4c87 | tig. The most important interactive tig commands are:. 'h': opens the help screen; 'q': closes current window; 'Q': closes all windows and exits. Log view; Tig invoked without any argument spawns a full log view with one line per commit including author, date and log message. Heads of the different branches are clearly indicated. To see a graph view indicating branching graphically (just like git log --oneline --graph), do:; tig --all. A log can be selected with Enter to see the revision changes.; An example of useful application of the log view is interactive cherry-picking: just press 'C' to cherry-pick currently selected commit into your current branch.; Blame view; Blame view is extremely useful to see which lines were committed by whom. It is an improved version of the standard git blame command with a much clearer and interactive output.; Each line can be selected to display the associated full commit log and diff. Usage:; tig blame path/to/file.cxx. Interactive staging and current status; tig status opens an interactive display to quickly select files to be staged. Move over the file and press 'u' to (un)stage it. The .gitconfig file; This file contains global (~/.gitconfig) or reposit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-tips-and-tricks.html:17175,log,log,17175,d/git-tips-and-tricks.html,https://root.cern,https://root.cern/d/git-tips-and-tricks.html,2,['log'],['log']
Testability,"-par);; 207 } else {; 208 double out = x * std::log(par) - TMath::LnGamma(x + 1.) - par;; 209 return std::exp(out);; 210 }; 211}; 212 ; 213inline double flexibleInterpSingle(unsigned int code, double low, double high, double boundary, double nominal,; 214 double paramVal, double res); 215{; 216 if (code == 0) {; 217 // piece-wise linear; 218 if (paramVal > 0) {; 219 return paramVal * (high - nominal);; 220 } else {; 221 return paramVal * (nominal - low);; 222 }; 223 } else if (code == 1) {; 224 // piece-wise log; 225 if (paramVal >= 0) {; 226 return res * (std::pow(high / nominal, +paramVal) - 1);; 227 } else {; 228 return res * (std::pow(low / nominal, -paramVal) - 1);; 229 }; 230 } else if (code == 2) {; 231 // parabolic with linear; 232 double a = 0.5 * (high + low) - nominal;; 233 double b = 0.5 * (high - low);; 234 double c = 0;; 235 if (paramVal > 1) {; 236 return (2 * a + b) * (paramVal - 1) + high - nominal;; 237 } else if (paramVal < -1) {; 238 return -1 * (2 * a - b) * (paramVal + 1) + low - nominal;; 239 } else {; 240 return a * std::pow(paramVal, 2) + b * paramVal + c;; 241 }; 242 } else if (code == 3) {; 243 // parabolic version of log-normal; 244 double a = 0.5 * (high + low) - nominal;; 245 double b = 0.5 * (high - low);; 246 double c = 0;; 247 if (paramVal > 1) {; 248 return (2 * a + b) * (paramVal - 1) + high - nominal;; 249 } else if (paramVal < -1) {; 250 return -1 * (2 * a - b) * (paramVal + 1) + low - nominal;; 251 } else {; 252 return a * std::pow(paramVal, 2) + b * paramVal + c;; 253 }; 254 } else if (code == 4) {; 255 double x = paramVal;; 256 if (x >= boundary) {; 257 return x * (high - nominal);; 258 } else if (x <= -boundary) {; 259 return x * (nominal - low);; 260 }; 261 ; 262 // interpolate 6th degree; 263 double t = x / boundary;; 264 double eps_plus = high - nominal;; 265 double eps_minus = nominal - low;; 266 double S = 0.5 * (eps_plus + eps_minus);; 267 double A = 0.0625 * (eps_plus - eps_minus);; 268 ; 269 return x * (S + t * A * (15",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MathFuncs_8h_source.html:7292,log,log-normal,7292,doc/master/MathFuncs_8h_source.html,https://root.cern,https://root.cern/doc/master/MathFuncs_8h_source.html,1,['log'],['log-normal']
Testability,"-running with ord = ""restore"" restores the saved list; Return <0 if something went wrong (-2 if at least one worker was not found); or the number of workers with status change (on master; 0 on client). void SaveActiveList(); Save current list of active workers. Int_t RestoreActiveList(); Restore saved list of active workers. TProof * Open(const char* url = 0, const char* conffile = 0, const char* confdir = 0, Int_t loglevel = 0); Start a PROOF session on a specific cluster. If cluster is 0 (the; default) then the PROOF Session Viewer GUI pops up and 0 is returned.; If cluster is ""lite://"" we start a PROOF-lite session.; If cluster is """" (empty string) then we connect to the cluster specified; by 'Proof.LocalDefault', defaulting to ""lite://"".; If cluster is ""pod://"" (case insensitive), then we connect to a PROOF cluster; managed by PROOF on Demand (PoD, http://pod.gsi.de ).; Via conffile a specific PROOF config file in the confir directory can be specified.; Use loglevel to set the default loging level for debugging.; The appropriate instance of TProofMgr is created, if not; yet existing. The instantiated TProof object is returned.; Use TProof::cd() to switch between PROOF sessions.; For more info on PROOF see the TProof ctor. TProofMgr * Mgr(const char* url); Get instance of the effective manager for 'url'; Return 0 on failure. void Reset(const char* url, Bool_t hard = kFALSE); Wrapper around TProofMgr::Reset(...). const TList * GetEnvVars(); Get environemnt variables. void AddEnvVar(const char* name, const char* value); Add an variable to the list of environment variables passed to proofserv; on the master and slaves. void DelEnvVar(const char* name); Remove an variable from the list of environment variables passed to proofserv; on the master and slaves. void ResetEnvVars(); Clear the list of environment variables passed to proofserv; on the master and slaves. void SaveWorkerInfo(); Save information about the worker set in the file .workers in the working; dir. Call",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:98311,log,loglevel,98311,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,4,['log'],"['loging', 'loglevel']"
Testability,"-s}{\kappa}}\). \( \gamma = 0.5772156649\dots\) is Euler's constant.; For the class Vavilov, Pdf returns the Vavilov distribution as function of Landau's parameter \(\lambda_L = \lambda_V/\kappa - \ln \kappa\), which is the convention used in the CERNLIB routines, and in the tables by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons: Tabulation of the Vavilov distribution, pp 187-203 in: National Research Council (U.S.), Committee on Nuclear Science: Studies in penetration of charged particles in matter, Nat. Akad. Sci. Publication 1133, Nucl. Sci. Series Report No. 39, Washington (Nat. Akad. Sci.) 1964, 388 pp. Available from Google books; Therefore, for small values of \(\kappa < 0.01\), pdf approaches the Landau distribution.; For values \(\kappa > 10\), the Gauss approximation should be used with \(\mu\) and \(\sigma\) given by Vavilov::Mean(kappa, beta2) and sqrt(Vavilov::Variance(kappa, beta2).; The original Vavilov pdf is obtained by v.Pdf(lambdaV/kappa-log(kappa))/kappa.; Two subclasses are provided:; VavilovFast uses the algorithm by A. Rotondi and P. Montagna, Fast calculation of Vavilov distribution, Nucl. Instr. and Meth. B47 (1990) 215-224, which has been implemented in CERNLIB (G115).; VavilovAccurate uses the algorithm by B. Schorr, Programs for the Landau and the Vavilov distributions and the corresponding random numbers, Computer Phys. Comm. 7 (1974) 215-224, which has been implemented in CERNLIB (G116). Both subclasses store coefficients needed to calculate \(p(\lambda; \kappa, \beta^2)\) for fixed values of \(\kappa\) and \(\beta^2\). Changing these values is computationally expensive.; VavilovFast is about 5 times faster for the calculation of the Pdf than VavilovAccurate; initialization takes about 100 times longer than calculation of the Pdf value. For the quantile calculation, VavilovFast is 30 times faster for the initialization, and 6 times faster for subsequent calculations. Initialization for Quantile takes 27 (11)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Vavilov.html:2024,log,log,2024,doc/master/classROOT_1_1Math_1_1Vavilov.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Vavilov.html,1,['log'],['log']
Testability,"-width histogram.; 5///; 6/// This tutorial illustrates how to:; 7/// - create a variable bin-width histogram with a binning such; 8/// that the population per bin is about the same.; 9/// - rebin a variable bin-width histogram into another one.; 10///; 11/// \macro_image; 12/// \macro_code; 13///; 14/// \author Rene Brun; 15 ; 16#include ""TH1.h""; 17#include ""TCanvas.h""; 18void rebin() {; 19 //create a fix bin histogram; 20 TH1F *h = new TH1F(""h"",""test rebin"",100,-3,3);; 21 Int_t nentries = 1000;; 22 h->FillRandom(""gaus"",nentries);; 23 Double_t xbins[1001];; 24 Int_t k=0;; 25 TAxis *axis = h->GetXaxis();; 26 for (Int_t i=1;i<=100;i++) {; 27 Int_t y = (Int_t)h->GetBinContent(i);; 28 if (y <=0) continue;; 29 Double_t dx = axis->GetBinWidth(i)/y;; 30 Double_t xmin = axis->GetBinLowEdge(i);; 31 for (Int_t j=0;j<y;j++) {; 32 xbins[k] = xmin +j*dx;; 33 k++;; 34 }; 35 }; 36 xbins[k] = axis->GetXmax();; 37 //create a variable bin-width histogram out of fix bin histogram; 38 //new rebinned histogram should have about 10 entries per bin; 39 TH1F *hnew = new TH1F(""hnew"",""rebinned"",k,xbins);; 40 hnew->FillRandom(""gaus"",10*nentries);; 41 ; 42 //rebin hnew keeping only 50% of the bins; 43 Double_t xbins2[501];; 44 Int_t kk=0;; 45 for (Int_t j=0;j<k;j+=2) {; 46 xbins2[kk] = xbins[j];; 47 kk++;; 48 }; 49 xbins2[kk] = xbins[k];; 50 TH1F *hnew2 = (TH1F*)hnew->Rebin(kk,""hnew2"",xbins2);; 51 ; 52 //draw the 3 histograms; 53 TCanvas *c1 = new TCanvas(""c1"",""c1"",800,1000);; 54 c1->Divide(1,3);; 55 c1->cd(1);; 56 h->Draw();; 57 c1->cd(2);; 58 hnew->Draw();; 59 c1->cd(3);; 60 hnew2->Draw();; 61}; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; TCanvas.h; TH1.h; xminfloat xminDefinition THbookFile.cxx:95; nentriesint nentriesDefinition THbookFile.cxx:91; TAxisClass to manage histogram axis.Definition TAxis.h:31; TAxis::GetXmaxDouble_t GetXmax() constDefinition TAxis.h:140; TAxis::GetBinLowEdgevirtual Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rebin_8C_source.html:710,test,test,710,doc/master/rebin_8C_source.html,https://root.cern,https://root.cern/doc/master/rebin_8C_source.html,1,['test'],['test']
Testability,"-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetMaximumX and TF1::GetX ; Reimplemented in TF2.; Definition at line 1614 of file TF1.cxx. ◆ GetMaximumStored(). virtual Double_t TF1::GetMaximumStored ; (; ); const. inlinevirtual . Definition at line 501 of file TF1.h. ◆ GetMaximumX(). Double_t TF1::GetMaximumX ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the X value corresponding to the maximum value of the function. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetX ; Definition at line 1655 of file TF1.cxx. ◆ GetMethodCall(). TMethodCall * TF1::GetMethodCall ; (; ); const. inline . Definition at line 522 of file TF1.h. ◆ GetMinimum(). Double_t T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:75774,log,logx,75774,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,1,['log'],['logx']
Testability,"-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetMaximumX and TF1::GetX ; Reimplemented in TF2.; Definition at line 1696 of file TF1.cxx. ◆ GetMinimumStored(). virtual Double_t TF1::GetMinimumStored ; (; ); const. inlinevirtual . Definition at line 505 of file TF1.h. ◆ GetMinimumX(). Double_t TF1::GetMinimumX ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the X value corresponding to the minimum value of the function on the (xmin, xmax) interval. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetX ; Definition at line 1823 of file TF1.cxx. ◆ GetMinMaxNDim(). Double_t TF1::GetMinMaxNDim ; (; Double_t * ; x, . Bool_t ; findmax, . Double_t ; epsilon = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:78102,log,logx,78102,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,1,['log'],['logx']
Testability,". ). Get into 'env' the value of integer RC env variable 'rcenv' on node 'ord'. ; Definition at line 6665 of file TProof.cxx. ◆ GetRC() [3/3]. Int_t TProof::GetRC ; (; const char * ; RCenv, . TString & ; env, . const char * ; ord = ""0"" . ). Get into 'env' the value of string RC env variable 'rcenv' on node 'ord'. ; Definition at line 6717 of file TProof.cxx. ◆ GetRealTime(). Float_t TProof::GetRealTime ; (; ); const. inline . Definition at line 930 of file TProof.h. ◆ GetRemoteProtocol(). Int_t TProof::GetRemoteProtocol ; (; ); const. inline . Definition at line 913 of file TProof.h. ◆ GetRunStatus(). ERunStatus TProof::GetRunStatus ; (; ); const. inline . Definition at line 943 of file TProof.h. ◆ GetSandbox(). Int_t TProof::GetSandbox ; (; TString & ; sb, . Bool_t ; assert = kFALSE, . const char * ; rc = 0 . ). protected . Set the sandbox path from ' Proof.Sandbox' or the alternative var 'rc'. ; Use the existing setting or the default if nothing is found. If 'assert' is kTRUE, make also sure that the path exists. Return 0 on success, -1 on failure ; Definition at line 1016 of file TProof.cxx. ◆ GetSeqNum(). Int_t TProof::GetSeqNum ; (; ); const. inline . Definition at line 918 of file TProof.h. ◆ GetSessionID(). Int_t TProof::GetSessionID ; (; ); const. inline . Definition at line 919 of file TProof.h. ◆ GetSessionTag(). const char * TProof::GetSessionTag ; (; ); const. inline . Definition at line 909 of file TProof.h. ◆ GetStagingStatusDataSet(). TFileCollection * TProof::GetStagingStatusDataSet ; (; const char * ; dataset). virtual . Obtains a TFileCollection showing the staging status of the specified dataset. ; A valid dataset manager and dataset staging requests repository must be present on the endpoint. ; Reimplemented in TProofLite.; Definition at line 11073 of file TProof.cxx. ◆ GetStatistics(). void TProof::GetStatistics ; (; Bool_t ; verbose = kFALSE). Get statistics about CPU time, real time and bytes read. ; If verbose, print the resuls (always availab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:105739,assert,assert,105739,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['assert'],['assert']
Testability,. ); const. inline . check if distribution has a defined domain and return in case its domain ; Definition at line 139 of file TUnuranContDist.h. ◆ HasCdf(). bool TUnuranContDist::HasCdf ; (; ); const. inline . check if a cdf function is provided for the distribution ; Definition at line 148 of file TUnuranContDist.h. ◆ HasMode(). bool TUnuranContDist::HasMode ; (; ); const. inline . check if distribution has a pre-computed mode ; Definition at line 153 of file TUnuranContDist.h. ◆ HasPdfArea(). bool TUnuranContDist::HasPdfArea ; (; ); const. inline . check if distribution has a pre-computed area below the Pdf ; Definition at line 159 of file TUnuranContDist.h. ◆ IsA(). TClass * TUnuranContDist::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TUnuranBaseDist.; Definition at line 216 of file TUnuranContDist.h. ◆ IsLogPdf(). bool TUnuranContDist::IsLogPdf ; (; ); const. inline . flag to control if given function represent the log of a pdf ; Definition at line 175 of file TUnuranContDist.h. ◆ Mode(). double TUnuranContDist::Mode ; (; ); const. inline . return the mode (x location of maximum of the pdf) ; Definition at line 164 of file TUnuranContDist.h. ◆ operator=(). TUnuranContDist & TUnuranContDist::operator= ; (; const TUnuranContDist & ; rhs). Assignment operator. ; Definition at line 78 of file TUnuranContDist.cxx. ◆ Pdf(). double TUnuranContDist::Pdf ; (; double ; x); const. evaluate the Probability Density function. ; Used by the UnuRan algorithms ; Definition at line 137 of file TUnuranContDist.cxx. ◆ PdfArea(). double TUnuranContDist::PdfArea ; (; ); const. inline . return area below the pdf ; Definition at line 169 of file TUnuranContDist.h. ◆ SetCdf() [1/2]. void TUnuranContDist::SetCdf ; (; const ROOT::Math::IGenFunction & ; cdf). set cdf distribution using a generic function interface ; Definition at line 117 of file TUnuranContDist.cxx. ◆ SetCdf() [2/2]. void TUnuranContDist::SetCdf ; (; TF1 * ; cdf),MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnuranContDist.html:10229,log,log,10229,doc/master/classTUnuranContDist.html,https://root.cern,https://root.cern/doc/master/classTUnuranContDist.html,1,['log'],['log']
Testability,". 0. Setting up ROOT | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 0. Setting up ROOT. Downloading; If you don't have ROOT yet, download it! We have binaries but you can also build it your",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/0-setting-root.html:716,test,tests,716,d/0-setting-root.html,https://root.cern,https://root.cern/d/0-setting-root.html,1,['test'],['tests']
Testability,". 1. Extracting an object from a TFile | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 1. Extracting an object from a TFile. File can be local on your disk or remote accessible for instance ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/1-extracting-object-tfile.html:734,test,tests,734,d/1-extracting-object-tfile.html,https://root.cern,https://root.cern/d/1-extracting-object-tfile.html,1,['test'],['tests']
Testability,". 10. Go Parallel! | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 10. Go Parallel!. Why you care; Number crunching takes time. If you look at top (open a terminal, type top) in Linux or you",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/10-go-parallel.html:714,test,tests,714,d/10-go-parallel.html,https://root.cern,https://root.cern/d/10-go-parallel.html,1,['test'],['tests']
Testability,". 11. Done! | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 11. Done!. Congratulations for finishing the tutorials! Here are a few relevant pointers on where to go from here:; The forum; Bug",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/11-done.html:707,test,tests,707,d/11-done.html,https://root.cern,https://root.cern/d/11-done.html,1,['test'],['tests']
Testability,". 2. Running code in ROOT | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 2. Running code in ROOT. Interpreting; ROOT executes your C++ code. There are two ways: loading it into the interpre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/2-running-code-root.html:721,test,tests,721,d/2-running-code-root.html,https://root.cern,https://root.cern/d/2-running-code-root.html,1,['test'],['tests']
Testability,". 3. Examining a TTree's data | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 3. Examining a TTree's data. The TTree; A TTree is a collection of similar data. It is the collection used by ba",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/3-examining-ttrees-data.html:725,test,tests,725,d/3-examining-ttrees-data.html,https://root.cern,https://root.cern/d/3-examining-ttrees-data.html,1,['test'],['tests']
Testability,". 4. Histogramming | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 4. Histogramming. What is a histogram?; Our TTree contains for instance the energy of all electrons. What we usually care a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/4-histogramming.html:714,test,tests,714,d/4-histogramming.html,https://root.cern,https://root.cern/d/4-histogramming.html,1,['test'],['tests']
Testability,". 5. Fitting | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 5. Fitting. Distributions; Some analyses want to check theory predictions that exist as a function definition. Others want to use",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/5-fitting.html:708,test,tests,708,d/5-fitting.html,https://root.cern,https://root.cern/d/5-fitting.html,1,['test'],['tests']
Testability,". 6. Multivariate Analysis | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 6. Multivariate Analysis. Multiple Variables; The muon trigger should fire more likely for higher muon momenta - le",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/6-multivariate-analysis.html:722,test,tests,722,d/6-multivariate-analysis.html,https://root.cern,https://root.cern/d/6-multivariate-analysis.html,1,['test'],['tests']
Testability,". 7. Using the TTreeReader | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 7. Using the TTreeReader. Accessing Value from a TTree; Up to now we have used TTree's ability to parse TTree::Draw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/7-using-ttreereader.html:722,test,tests,722,d/7-using-ttreereader.html,https://root.cern,https://root.cern/d/7-using-ttreereader.html,1,['test'],['tests']
Testability,". 8. Efficiency Calculation | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 8. Efficiency Calculation. Efficiency; Basically all analyses involve selections on parameters - as an example we ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/8-efficiency-calculation.html:723,test,tests,723,d/8-efficiency-calculation.html,https://root.cern,https://root.cern/d/8-efficiency-calculation.html,1,['test'],['tests']
Testability,". 9. Fitting By Coding | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 9. Fitting By Coding. TF1; In ROOT you can fit histograms (or TEfficiency objects) using formulas that you provide, and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/9-fitting-coding.html:718,test,tests,718,d/9-fitting-coding.html,https://root.cern,https://root.cern/d/9-fitting-coding.html,1,['test'],['tests']
Testability,". ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome First Steps With ROOT. The ROOT framework provides a number of classes, grouped into several class cathegories. To start using ROOT, you may find useful to browse the following documents:. Processing data with ROOT (to learn about the interactive and batch use of ROOT); Analyzing data with ROOT (about histograms and trees; mathematical and statistical tools); Showing results with ROOT (explaining pads, 2D and 3D graphics, and the GUI editor); Simulation in ROOT (about the virtual Monte Carlo and the geometry packages); ROOT I/O (explaining how to use ROOT files and trees, and how to access data from d/b or other nodes). . Processing data with ROOT ›. Navigate through this book; Processing data with ROOT; Showing results with ROOT; Simulation in ROOT; ROOT I/O. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/first-steps-root-1.html:3164,test,tests,3164,d/first-steps-root-1.html,https://root.cern,https://root.cern/d/first-steps-root-1.html,2,['test'],['tests']
Testability,". ; Definition at line 542 of file RooMCStudy.cxx. ◆ fit() [2/2]. bool RooMCStudy::fit ; (; Int_t ; nSamples, . TList & ; dataSetList . ). Fit 'nSamples' datasets, as supplied in 'dataSetList'. ; Definition at line 557 of file RooMCStudy.cxx. ◆ fitParams(). const RooArgSet * RooMCStudy::fitParams ; (; Int_t ; sampleNum); const. Return an argset with the fit parameters for the given sample number. ; NB: The fit parameters are only stored for successful fits, thus the maximum sampleNum can be less that the number of generated samples and if so, the indices will be out of synch with genData() and fitResult() ; Definition at line 813 of file RooMCStudy.cxx. ◆ fitParDataSet(). const RooDataSet & RooMCStudy::fitParDataSet ; (; ). Return a RooDataSet containing the post-fit parameters of each toy cycle. ; This dataset also contains any additional output that was generated by study modules that were added to this RooMCStudy. By default, the two following variables are added (apart from fit parameters):; NLL: The value of the negative log-likelihood for each run.; ngen: Number of events generated for each run. . Definition at line 793 of file RooMCStudy.cxx. ◆ fitResult(). const RooFitResult * RooMCStudy::fitResult ; (; Int_t ; sampleNum); const. Return the RooFitResult of the fit with the given run number. ; NoteFit results are not saved by default. This requires passing FitOptions(Save(), ...) to the constructor. ; Definition at line 831 of file RooMCStudy.cxx. ◆ fitSample(). bool RooMCStudy::fitSample ; (; RooAbsData * ; genSample). protected . Internal method. ; Fit given dataset with fit model. If fit converges (TMinuit status code zero) The fit results are appended to the fit results dataset; If the fit option ""r"" is supplied, the RooFitResult objects will always be saved, regardless of the fit status. RooFitResults objects can be retrieved later via fitResult(). ; Definition at line 648 of file RooMCStudy.cxx. ◆ genData(). RooAbsData * RooMCStudy::genData ; (; Int_t ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMCStudy.html:25722,log,log-likelihood,25722,doc/master/classRooMCStudy.html,https://root.cern,https://root.cern/doc/master/classRooMCStudy.html,1,['log'],['log-likelihood']
Testability,". ; Definition at line 754 of file TH1.cxx. ◆ AndersonDarlingTest() [1/2]. Double_t TH1::AndersonDarlingTest ; (; const TH1 * ; h2, . Double_t & ; advalue . ); const. virtual . Same function as above but returning also the test statistic value. ; Definition at line 8080 of file TH1.cxx. ◆ AndersonDarlingTest() [2/2]. Double_t TH1::AndersonDarlingTest ; (; const TH1 * ; h2, . Option_t * ; option = """" . ); const. virtual . Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ; The AD 2 sample test formula are derived from the paper F.W Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; The test is implemented in root in the ROOT::Math::GoFTest class It is the same formula ( (6) in the paper), and also shown in this preprint; Binned data are considered as un-binned data with identical observation happening in the bin center.; Parameters. [in]h2Pointer to 1D histogram ; [in]optionis a character string to specify options; ""D"" Put out a line of ""Debug"" printout; ""T"" Return the normalized A-D test statistic. Note1: Underflow and overflow are not considered in the test; Note2: The test works only for un-weighted histogram (i.e. representing counts); Note3: The histograms are not required to have the same X axis; Note4: The test works only for 1-dimensional histograms . Definition at line 8062 of file TH1.cxx. ◆ AutoP2FindLimits(). Int_t TH1::AutoP2FindLimits ; (; Double_t ; xmi, . Double_t ; xma . ). protectedvirtual . Buffer-based estimate of the histogram range using the power of 2 algorithm. ; Used by the autobin power of 2 algorithm.; Works on arguments (min and max from fBuffer) and internal inputs: fXmin, fXmax, NBinsX (from fXaxis), ... Result save internally in fXaxis.; Overloaded by TH2 and TH3.; Return -1 if internal inputs are inconsistent, 0 otherwise. ; Definition at line 1343 of file TH1.cxx. ◆ AutoP2GetBins(). Int_t TH1::AutoP2GetBins ; (; Int_t ; n). inlinestaticprotected . Auxiliary functi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:80816,test,test,80816,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['test'],['test']
Testability,". ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome Support. Top level support is what makes ROOT a success. We do our utmost to solve any issues as soon as possible. To make this task as efficient as possible for us follow these few simple rules. In case you think you have found a bug, please first search the forum and roottalk digests to see if the issue has already been discussed. If not then please file a bug report. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/support.html:2752,test,tests,2752,d/support.html,https://root.cern,https://root.cern/d/support.html,1,['test'],['tests']
Testability,". ; For this, extract the logs and take the names of TProofLogElements ; Definition at line 145 of file TProofProgressMemoryPlot.cxx. ◆ Clear(). void TProofProgressMemoryPlot::Clear ; (; Option_t * ; = nullptr). overridevirtual . Clear the canvases. ; Reimplemented from TObject.; Definition at line 181 of file TProofProgressMemoryPlot.cxx. ◆ DoAveragePlot(). TGraph * TProofProgressMemoryPlot::DoAveragePlot ; (; Int_t & ; max_el, . Int_t & ; min_el . ). protected . Create the average plots. ; Definition at line 381 of file TProofProgressMemoryPlot.cxx. ◆ DoAveragePlotOld(). TGraph * TProofProgressMemoryPlot::DoAveragePlotOld ; (; Int_t & ; max_el, . Int_t & ; min_el . ). protected . ◆ DoMasterPlot(). TGraph * TProofProgressMemoryPlot::DoMasterPlot ; (; TProofLogElem * ; ple). protected . a master or submaster log display without meaningful labels for now ; Definition at line 609 of file TProofProgressMemoryPlot.cxx. ◆ DoPlot(). void TProofProgressMemoryPlot::DoPlot ; (; ). Draw the plot from the logs. ; Definition at line 192 of file TProofProgressMemoryPlot.cxx. ◆ DoWorkerPlot(). TGraph * TProofProgressMemoryPlot::DoWorkerPlot ; (; TProofLogElem * ; ple). protected . Make a memory consumption graph for a worker. ; Definition at line 553 of file TProofProgressMemoryPlot.cxx. ◆ ParseLine(). Int_t TProofProgressMemoryPlot::ParseLine ; (; TString ; l, . Long64_t & ; v, . Long64_t & ; r, . Long64_t & ; e . ). protected . Extract from line 'l' the virtual memory 'v', the resident memory 'r' and the number of events 'e'. ; The line is assumed to be in the form ""... Memory 130868 virtual 31540 ... event 5550"" The fields are only filled if >= 0 . Return 0 on success, -1 if any of the values could not be filled (the output fields are not touched in such a case). ; Definition at line 507 of file TProofProgressMemoryPlot.cxx. ◆ Select(). void TProofProgressMemoryPlot::Select ; (; Int_t ; id). actions of select all/clear all button ; Definition at line 644 of file TProofProgressM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofProgressMemoryPlot.html:38758,log,logs,38758,doc/master/classTProofProgressMemoryPlot.html,https://root.cern,https://root.cern/doc/master/classTProofProgressMemoryPlot.html,1,['log'],['logs']
Testability,". ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TProofProgressLog Class ReferenceGUI » Session Viewer. ; Dialog used to display Proof session logs from the Proof progress dialog. ; It uses TProofMgr::GetSessionLogs() mechanism internally ; Definition at line 31 of file TProofProgressLog.h. Public Member Functions;  TProofProgressLog (const char *url=nullptr, Int_t sessionidx=0, Int_t w=700, Int_t h=600);  Create a window frame for log messages. ;  ;  TProofProgressLog (TProofProgressDialog *d, Int_t w=700, Int_t h=600);  Create a window frame for log messages. ;  ;  ~TProofProgressLog () override;  Destructor. ;  ; void AddBuffer (const char *buffer);  Add text to the window. ;  ; void BuildLogList (Bool_t create=kFALSE);  Build the list of workers. ;  ; void Clear (Option_t *=nullptr) override;  Clear log window. ;  ; void CloseWindow () override;  Handle close button or when closed via window manager action. ;  ; void DoLog (Bool_t grep=kFALSE);  Display logs. ;  ; TClass * IsA () const override;  ; void LoadBuffer (const char *buffer);  Load a text buffer in the window. ;  ; void LoadFile (const char *file);  Load a file in the window. ;  ; void LogMessage (const char *msg, Bool_t all);  Load/append a log msg in the log frame, if open. ;  ; void NoLineEntry ();  Enable/disable the line number entry. ;  ; void Popup ();  Show log window. ;  ; void Rebuild ();  Rebuild the log info for a new entered session. ;  ; void SaveToFile ();  Save the logs to a file Only the name of the file is taken, no expansion. ;  ; void Select (Int_t id, Bool_t all=kTRUE);  actions of select all/clear all button ;  ; void SetGrepView ();  Sets the view of grep filters according to the value of checkboxes. ;  ; void SetUrl (const char *url);  ; void Streamer (TBuffer &) override;  S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofProgressLog.html:1063,log,log,1063,doc/master/classTProofProgressLog.html,https://root.cern,https://root.cern/doc/master/classTProofProgressLog.html,1,['log'],['log']
Testability,". ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; RooStats::HypoTestResult Class ReferenceRooFit » RooStats. ; HypoTestResult is a base class for results from hypothesis tests. ; Any tool inheriting from HypoTestCalculator can return a HypoTestResult. As such, it stores a p-value for the null-hypothesis (eg. background-only) and an alternate hypothesis (eg. signal+background). The p-values can also be transformed into confidence levels ( \(CL_{b}\), \(CL_{s+b}\)) in a trivial way. The ratio of the \(CL_{s+b}\) to \(CL_{b}\) is often called \(CL_{s}\), and is considered useful, though it is not a probability. Finally, the p-value of the null can be transformed into a number of equivalent Gaussian sigma using the Significance method.; The p-value of the null for a given test statistic is rigorously defined and this is the starting point for the following conventions. Conventions used in this class; The p-value for the null and alternate are on the same side of the observed value of the test statistic. This is the more standard convention and avoids confusion when doing inverted tests.; For exclusion, we also want the formula \(CL_{s} = CL_{s+b} / CL_{b}\) to hold which therefore defines our conventions for \(CL_{s+b}\) and \(CL_{b}\). \(CL_{s}\) was specifically invented for exclusion and therefore all quantities need be related through the assignments as they are for exclusion: \(CL_{s+b} = p_{s+b}\); \(CL_{b} = p_{b}\). This is derived by considering the scenarios of a powerful and not powerful inverted test, where for the not so powerful test, \(CL_{s}\) must be close to one.; For results of Hypothesis tests, \(CL_{s}\) has no similar direct interpretation as for exclusion and can be larger than one. ; Definition at line 22 of file HypoTestResult.h. Public Member Functions;  Hy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html:1018,test,test,1018,doc/master/classRooStats_1_1HypoTestResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html,1,['test'],['test']
Testability,". ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rebin.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Rebin a variable bin-width histogram. ; This tutorial illustrates how to:; create a variable bin-width histogram with a binning such that the population per bin is about the same.; rebin a variable bin-width histogram into another one. ; #include ""TH1.h""; #include ""TCanvas.h""; void rebin() {; //create a fix bin histogram; TH1F *h = new TH1F(""h"",""test rebin"",100,-3,3);; Int_t nentries = 1000;; h->FillRandom(""gaus"",nentries);; Double_t xbins[1001];; Int_t k=0;; TAxis *axis = h->GetXaxis();; for (Int_t i=1;i<=100;i++) {; Int_t y = (Int_t)h->GetBinContent(i);; if (y <=0) continue;; Double_t dx = axis->GetBinWidth(i)/y;; Double_t xmin = axis->GetBinLowEdge(i);; for (Int_t j=0;j<y;j++) {; xbins[k] = xmin +j*dx;; k++;; }; }; xbins[k] = axis->GetXmax();; //create a variable bin-width histogram out of fix bin histogram; //new rebinned histogram should have about 10 entries per bin; TH1F *hnew = new TH1F(""hnew"",""rebinned"",k,xbins);; hnew->FillRandom(""gaus"",10*nentries);; ; //rebin hnew keeping only 50% of the bins; Double_t xbins2[501];; Int_t kk=0;; for (Int_t j=0;j<k;j+=2) {; xbins2[kk] = xbins[j];; kk++;; }; xbins2[kk] = xbins[k];; TH1F *hnew2 = (TH1F*)hnew->Rebin(kk,""hnew2"",xbins2);; ; //draw the 3 histograms; TCanvas *c1 = new TCanvas(""c1"",""c1"",800,1000);; c1->Divide(1,3);; c1->cd(1);; h->Draw();; c1->cd(2);; hnew->Draw();; c1->cd(3);; hnew2->Draw();; }; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; TCanvas.h; TH1.h; xminfloat xminDefinition THbookFile.cxx:95; nentriesint nentriesDefinition THbookFile.cxx:91; TAxisClass to manage histogram axis.Definition TAxis.h:31; TAxis::GetXmaxDouble_t GetXmax() constDefinition TAxis.h:140; TAxis::GetBinLowEdgevirtual Double_t GetBinLowEdge(Int_t bin) constReturn low edge of bin.Definition",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rebin_8C.html:554,test,test,554,doc/master/rebin_8C.html,https://root.cern,https://root.cern/doc/master/rebin_8C.html,1,['test'],['test']
Testability,". ; Returns by default the p-value; option ""t"" returns the test statistic value ""Dn"". ; Definition at line 913 of file GoFTest.cxx. ◆ KolmogorovSmirnov2SamplesTest() [2/2]. void ROOT::Math::GoFTest::KolmogorovSmirnov2SamplesTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Kolmogorov-Smirnov 2-Samples Test. ; The Kolmogorov-Smirnov 2-Samples Test algorithm is described at http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/ks2samp.htm and described and taken from https://root.cern/doc/master/namespaceTMath.html ; Definition at line 896 of file GoFTest.cxx. ◆ KolmogorovSmirnovTest() [1/2]. Double_t ROOT::Math::GoFTest::KolmogorovSmirnovTest ; (; const Char_t * ; option = ""p""); const. Kolmogorov-Smirnov 1-Sample Test. ; Returns default p-value; option ""t"" returns the test statistic value ""Dn"". ; Definition at line 945 of file GoFTest.cxx. ◆ KolmogorovSmirnovTest() [2/2]. void ROOT::Math::GoFTest::KolmogorovSmirnovTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Kolmogorov-Smirnov 1-Sample Test. ; The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm and described and taken from (4) Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge University Press ; Definition at line 921 of file GoFTest.cxx. ◆ LogNormalCDF(). Double_t ROOT::Math::GoFTest::LogNormalCDF ; (; Double_t ; x); const. private . ◆ LogSample(). void ROOT::Math::GoFTest::LogSample ; (; ). private . Applies the logarithm to the sample when the specified distribution to test is LogNormal. ; Definition at line 303 of file GoFTest.cxx. ◆ operator()() [1/2]. void ROOT::Math::GoFTest::operator() ; (; ETestType ; test, . Double_t & ; pvalue, . Double_t & ; testStat . ); const. The class's unary functions performing the gif test according to the ETestType provide",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:15415,test,testStat,15415,doc/master/classROOT_1_1Math_1_1GoFTest.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html,1,['test'],['testStat']
Testability,". ;  ; Double_t Ldexp (Double_t x, Int_t exp);  Returns the result of multiplying x (the significant) by 2 raised to the power of exp (the exponent). ;  ; constexpr Double_t Ln10 ();  Natural log of 10 (to convert log to ln) ;  ; Double_t LnGamma (Double_t z);  Computation of ln[gamma(z)] for all z. ;  ; template<typename Iterator > ; Iterator LocMax (Iterator first, Iterator last);  Returns index of array with the maximum element. ;  ; template<typename T > ; Long64_t LocMax (Long64_t n, const T *a);  Returns index of array with the maximum element. ;  ; template<typename Iterator > ; Iterator LocMin (Iterator first, Iterator last);  Returns index of array with the minimum element. ;  ; template<typename T > ; Long64_t LocMin (Long64_t n, const T *a);  Returns index of array with the minimum element. ;  ; Double_t Log (Double_t x);  Returns the natural logarithm of x. ;  ; Double_t Log10 (Double_t x);  Returns the common (base-10) logarithm of x. ;  ; Double_t Log2 (Double_t x);  Returns the binary (base-2) logarithm of x. ;  ; constexpr Double_t LogE ();  Base-10 log of e (to convert ln to log) ;  ; Double_t LogNormal (Double_t x, Double_t sigma, Double_t theta=0, Double_t m=1);  Computes the density of LogNormal distribution at point x. ;  ; Double_t Max (Double_t a, Double_t b);  Returns the largest of a and b. ;  ; Float_t Max (Float_t a, Float_t b);  Returns the largest of a and b. ;  ; Int_t Max (Int_t a, Int_t b);  Returns the largest of a and b. ;  ; Long64_t Max (Long64_t a, Long64_t b);  Returns the largest of a and b. ;  ; Long_t Max (Long_t a, Long_t b);  Returns the largest of a and b. ;  ; Short_t Max (Short_t a, Short_t b);  Returns the largest of a and b. ;  ; UInt_t Max (UInt_t a, UInt_t b);  Returns the largest of a and b. ;  ; ULong64_t Max (ULong64_t a, ULong64_t b);  Returns the largest of a and b. ;  ; ULong_t Max (ULong_t a, ULong_t b);  Returns the largest of a and b. ;  ; UShort_t Max (UShort_t a, UShort_t b);  Returns the largest of a and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMath.html:12762,log,logarithm,12762,doc/master/namespaceTMath.html,https://root.cern,https://root.cern/doc/master/namespaceTMath.html,1,['log'],['logarithm']
Testability,". ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisqua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1C.html:2569,test,test,2569,doc/master/classTH1C.html,https://root.cern,https://root.cern/doc/master/classTH1C.html,6,['test'],['test']
Testability,". A suggested work flow for distributed projects: NoSY | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development » Git Primer A suggested work flow for distributed projects: NoSY. Overview; Building on the tips an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/suggested-work-flow-distributed-projects-nosy.html:750,test,tests,750,d/suggested-work-flow-distributed-projects-nosy.html,https://root.cern,https://root.cern/d/suggested-work-flow-distributed-projects-nosy.html,1,['test'],['tests']
Testability,". About ROOT | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome About ROOT. ROOT is a framework for data processing, born at CERN, at the heart of the research on high-energy physics. Every day, thousands of physicists u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/about-root.html:708,test,tests,708,d/about-root.html,https://root.cern,https://root.cern/d/about-root.html,1,['test'],['tests']
Testability,". Accessing a TTree With a TBrowser | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Accessing a TTree With a TBrowser. Now, with the TFile still open, let's do some i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/accessing-ttree-tbrowser.html:731,test,tests,731,d/accessing-ttree-tbrowser.html,https://root.cern,https://root.cern/d/accessing-ttree-tbrowser.html,1,['test'],['tests']
Testability,". Accessing a TTree With a TSelector | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Accessing a TTree With a TSelector. What is a Selector?; To benefit from many ROO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/accessing-ttree-tselector.html:732,test,tests,732,d/accessing-ttree-tselector.html,https://root.cern,https://root.cern/d/accessing-ttree-tselector.html,1,['test'],['tests']
Testability,". Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RLogChannel() [1/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; ). default . Construct an anonymous channel. . ◆ RLogChannel() [2/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; ELogLevel ; verbosity). inlineexplicit . Construct an anonymous channel with a default verbosity. ; Definition at line 113 of file RLogger.hxx. ◆ RLogChannel() [3/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; const std::string & ; name). inline . Construct a log channel given its name, which is part of the diagnostics. ; Definition at line 116 of file RLogger.hxx. Member Function Documentation. ◆ GetEffectiveVerbosity(). ELogLevel ROOT::Experimental::RLogChannel::GetEffectiveVerbosity ; (; const RLogManager & ; mgr); const. inline . Definition at line 313 of file RLogger.hxx. ◆ GetName(). const std::string & ROOT::Experimental::RLogChannel::GetName ; (; ); const. inline . Definition at line 126 of file RLogger.hxx. ◆ GetVerbosity(). ELogLevel ROOT::Experimental::RLogChannel::GetVerbosity ; (; ); const. inline . Definition at line 123 of file RLogger.hxx. ◆ SetVerbosity(). ELogLevel ROOT::Experimental::RLogChannel::SetVerbosity ; (; ELogLevel ; verbosity). inline . Definition at line 118 of file RLogger.hxx. Member Data Documentation. ◆ fName. std::string ROOT::Experimental::RLogChannel::fName. private . Name as shown in diagnostics. ; Definition at line 103 of file RLogger.hxx. ◆ fVerbosity. ELogLevel ROOT::Experimental::RLogChannel::fVerbosity = ELogLevel::kUnse",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html:2493,log,log,2493,doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html,2,['log'],['log']
Testability,". As a result, the PointSetInterval class is used to ; represent the result. The user indicate which points in the parameter space to perform the constrution by providing; a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be considered is factorized and so is the ; creation of the sampling distribution of the test statistic (which is done by a concrete class implementing the DistributionCreator interface). As a result, this class basically just drives the construction by:. using a DistributionCreator to create the SamplingDistribution of a user-defined test statistic for each parameter point of interest,; defining the acceptance region in the data by finding the thresholds on the test statistic such that the integral of the sampling distribution is of the appropriate size and consistent with the limits of integration (eg. upper/lower/central limits), ; and finally updating the PointSetInterval based on whether the value of the test statistic evaluated on the data are in the acceptance region. Function Members (Methods); public:. virtual~NeymanConstruction(); voidAdditionalNToysFactor(double fact); static TClass*Class(); virtual Double_tConfidenceLevel() const; voidCreateConfBelt(bool flag = true); RooStats::ConfidenceBelt*GetConfidenceBelt(); virtual RooStats::PointSetInterval*GetInterval() const; RooStats::TestStatSampler*GetTestStatSampler(); RooStats::IntervalCalculatorRooStats::IntervalCalculator::IntervalCalculator(); RooStats::IntervalCalculatorRooStats::IntervalCalculator::IntervalCalculator(const RooStats::IntervalCalculator&); virtual TClass*IsA() const; RooStats::NeymanConstructionNeymanConstruction(const RooStats::NeymanConstruction&); RooStats::NeymanConstructionNeymanConstruction(RooAbsData& data, RooStats::ModelConfig& model); RooStats::NeymanConstruction&operator=(const RooStats::NeymanConstruction&); voidSaveBeltToFile(bool flag = true); virtual voidSetConfidenceLevel(Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__NeymanConstruction.html:2320,test,test,2320,root/html602/RooStats__NeymanConstruction.html,https://root.cern,https://root.cern/root/html602/RooStats__NeymanConstruction.html,2,['test'],['test']
Testability,". As a result, the PointSetInterval class is used to ; represent the result. The user indicate which points in the parameter space to perform the constrution by providing; a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be considered is factorized and so is the ; creation of the sampling distribution of the test statistic (which is done by a concrete class implementing the DistributionCreator interface). As a result, this class basically just drives the construction by:. using a DistributionCreator to create the SamplingDistribution of a user-defined test statistic for each parameter point of interest,; defining the acceptance region in the data by finding the thresholds on the test statistic such that the integral of the sampling distribution is of the appropriate size and consistent with the limits of integration (eg. upper/lower/central limits), ; and finally updating the PointSetInterval based on whether the value of the test statistic evaluated on the data are in the acceptance region. Function Members (Methods); public:. virtual~NeymanConstruction(); voidAdditionalNToysFactor(double fact); static TClass*Class(); virtual Double_tConfidenceLevel() const; voidCreateConfBelt(bool flag = true); RooStats::ConfidenceBelt*GetConfidenceBelt(); virtual RooStats::PointSetInterval*GetInterval() const; RooStats::TestStatSampler*GetTestStatSampler(); virtual TClass*IsA() const; RooStats::NeymanConstructionNeymanConstruction(const RooStats::NeymanConstruction&); RooStats::NeymanConstructionNeymanConstruction(RooAbsData& data, RooStats::ModelConfig& model); RooStats::IntervalCalculator&RooStats::IntervalCalculator::operator=(const RooStats::IntervalCalculator&); voidSaveBeltToFile(bool flag = true); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData& data); voidSetLeftSideTailFraction(Double_t leftSideFraction = 0.); virtual voidSetModel(const RooStats::ModelConfig& mode",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__NeymanConstruction.html:2320,test,test,2320,root/html528/RooStats__NeymanConstruction.html,https://root.cern,https://root.cern/root/html528/RooStats__NeymanConstruction.html,4,['test'],['test']
Testability,". As a result, the PointSetInterval class is used to ; represent the result. The user indicate which points in the parameter space to perform the constrution by providing; a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be considered is factorized and so is the ; creation of the sampling distribution of the test statistic (which is done by a concrete class implementing the DistributionCreator interface). As a result, this class basically just drives the construction by:. using a DistributionCreator to create the SamplingDistribution of a user-defined test statistic for each parameter point of interest,; defining the acceptance region in the data by finding the thresholds on the test statistic such that the integral of the sampling distribution is of the appropriate size and consistent with the limits of integration (eg. upper/lower/central limits), ; and finally updating the PointSetInterval based on whether the value of the test statistic evaluated on the data are in the acceptance region. Function Members (Methods); public:. virtual~NeymanConstruction(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenceLevel() const; virtual voidTNamed::Copy(TObject& named) const; voidCreateConfBelt(bool flag = true); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__NeymanConstruction.html:2335,test,test,2335,root/html526/RooStats__NeymanConstruction.html,https://root.cern,https://root.cern/root/html526/RooStats__NeymanConstruction.html,1,['test'],['test']
Testability,". Blog | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » News Blog. ROOT::RWhy! ; ## Background. ROOT is implementing new interfaces following new interface styles. We follow [C++ Core Guidelines](https://github.com/i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog.html:702,test,tests,702,d/blog.html,https://root.cern,https://root.cern/d/blog.html,1,['test'],['tests']
Testability,". Building ROOT | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Building ROOT. Introduction; ROOT uses the CMake cross-platform build-generator tool as a primary build system. CMake does not build the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/building-root.html:711,test,tests,711,d/building-root.html,https://root.cern,https://root.cern/d/building-root.html,1,['test'],['tests']
Testability,". Cancels a dataset staging request. ; Returns kTRUE on success, kFALSE on failure. Dataset not found equals to a failure. ; Reimplemented in TProofLite.; Definition at line 11046 of file TProof.cxx. ◆ cd(). void TProof::cd ; (; Int_t ; id = -1). Set session with 'id' the default one. ; If 'id' is not found in the list, the current session is set as default ; Definition at line 10496 of file TProof.cxx. ◆ CheckFile(). Bool_t TProof::CheckFile ; (; const char * ; file, . TSlave * ; slave, . Long_t ; modtime, . Int_t ; cpopt = (kCp | kCpBin) . ). private . Check if a file needs to be send to the slave. ; Use the following algorithm:; check if file appears in file map; if yes, get file's modtime and check against time in map, if modtime not same get md5 and compare against md5 in map, if not same return kTRUE.; if no, get file's md5 and modtime and store in file map, ask slave if file exists with specific md5, if yes return kFALSE, if no return kTRUE. The options 'cpopt' define if to copy things from cache to sandbox and what. To retrieve from the cache the binaries associated with the file TProof::kCpBin must be set in cpopt; the default is copy everything. Returns kTRUE in case file needs to be send, returns kFALSE in case file is already on remote node. . Definition at line 6799 of file TProof.cxx. ◆ Class(). static TClass * TProof::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TProof::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TProof::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 1073 of file TProof.h. ◆ CleanGDirectory(). void TProof::CleanGDirectory ; (; TList * ; ol). private . Remove links to objects in list 'ol' from gDirectory. ; Definition at line 3046 of file TProof.cxx. ◆ CleanupSession(). Int_t TProof::CleanupSession ; (; const char * ; sessiontag). Send cleanup request for the session specified by ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:73270,sandbox,sandbox,73270,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['sandbox'],['sandbox']
Testability,". Code Owners | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Code Owners. ROOT consists of several loosely coupled but consistently designed parts. The ""code owners"" of these parts are experts that revi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/code-owners.html:709,test,tests,709,d/code-owners.html,https://root.cern,https://root.cern/d/code-owners.html,1,['test'],['tests']
Testability,". Coding Conventions | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Coding Conventions. Naming conventions; Class definition conventions. Inline; Declaration Order. Avoid raw C types; Exception handling",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/coding-conventions.html:716,test,tests,716,d/coding-conventions.html,https://root.cern,https://root.cern/d/coding-conventions.html,1,['test'],['tests']
Testability,". Collaborate With Us | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Contribute Collaborate With Us. We warmly welcome external contributions to the ROOT! By providing code, you agree to transfer your copyright on ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/collaborate-with-us.html:717,test,tests,717,d/collaborate-with-us.html,https://root.cern,https://root.cern/d/collaborate-with-us.html,1,['test'],['tests']
Testability,". Compiling Your Code (also known as ACLiC) | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Compiling Your Code (also known as ACLiC). You can run your code as compil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/compiling-your-code-also-known-aclic.html:739,test,tests,739,d/compiling-your-code-also-known-aclic.html,https://root.cern,https://root.cern/d/compiling-your-code-also-known-aclic.html,1,['test'],['tests']
Testability,". Contact Us | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » About Contact Us. You can contact the ROOT developers in the following ways, in order of preference:. Via the RootTalk web forum. Use this forum to post y",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/contact-us.html:708,test,tests,708,d/contact-us.html,https://root.cern,https://root.cern/d/contact-us.html,1,['test'],['tests']
Testability,". Courses | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Courses. This page lists a number of ROOT tutorials and courses. Some are made by third parties others by the ROOT team.; Basic. ROOT Basic Cou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/courses.html:705,test,tests,705,d/courses.html,https://root.cern,https://root.cern/d/courses.html,1,['test'],['tests']
Testability,". Creating a Pull Request | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development » Git Primer Creating a Pull Request. Prerequisites. You have set up git on our system; You have registered a GitHub account and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/creating-pull-request.html:721,test,tests,721,d/creating-pull-request.html,https://root.cern,https://root.cern/d/creating-pull-request.html,1,['test'],['tests']
Testability,". Definition at line 69 of file DataSet.h. ◆ GetNTrainingEvents(). Long64_t TMVA::DataSet::GetNTrainingEvents ; (; ); const. inline . Definition at line 68 of file DataSet.h. ◆ GetNVariables(). UInt_t TMVA::DataSet::GetNVariables ; (; ); const. access the number of variables through the datasetinfo ; Definition at line 216 of file DataSet.cxx. ◆ GetResults(). TMVA::Results * TMVA::DataSet::GetResults ; (; const TString & ; resultsName, . Types::ETreeType ; type, . Types::EAnalysisType ; analysistype . ). Definition at line 265 of file DataSet.cxx. ◆ GetTestEvent(). const Event * TMVA::DataSet::GetTestEvent ; (; Long64_t ; ievt); const. inline . Definition at line 75 of file DataSet.h. ◆ GetTrainingEvent(). const Event * TMVA::DataSet::GetTrainingEvent ; (; Long64_t ; ievt); const. inline . Definition at line 74 of file DataSet.h. ◆ GetTree(). TTree * TMVA::DataSet::GetTree ; (; Types::ETreeType ; type). create the test/trainings tree with all the variables, the weights, the classes, the targets, the spectators, the MVA outputs ; Definition at line 609 of file DataSet.cxx. ◆ HasNegativeEventWeights(). Bool_t TMVA::DataSet::HasNegativeEventWeights ; (; ); const. inline . Definition at line 101 of file DataSet.h. ◆ IncrementNClassEvents(). void TMVA::DataSet::IncrementNClassEvents ; (; Int_t ; type, . UInt_t ; classNumber . ). Definition at line 151 of file DataSet.cxx. ◆ InitSampling(). void TMVA::DataSet::InitSampling ; (; Float_t ; fraction, . Float_t ; weight, . UInt_t ; seed = 0 . ). initialize random or importance sampling ; Definition at line 459 of file DataSet.cxx. ◆ IsA(). virtual TClass * TMVA::DataSet::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 175 of file DataSet.h. ◆ Log(). MsgLogger & TMVA::DataSet::Log ; (; ); const. inlineprivate . Definition at line 164 of file DataSet.h. ◆ MoveTrainingBlock(). void TMVA::DataSet::MoveTrainingBlock ; (; Int_t ; blockInd, . Types::ETreeTy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataSet.html:22705,test,test,22705,doc/master/classTMVA_1_1DataSet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSet.html,1,['test'],['test']
Testability,". Development | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome Development. The links in this menu and in the block on your right are intended for the ROOT developers and for people who want to contribute to the ROOT s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/development.html:709,test,tests,709,d/development.html,https://root.cern,https://root.cern/d/development.html,1,['test'],['tests']
Testability,". Do we need yet another custom C++ interpreter? | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Blogs » Axel Naumann's blog Do we need yet another custom C++ interpreter?. Axel Naumann on Thu, 12/22/2011 - 22:13 . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:744,test,tests,744,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,1,['test'],['tests']
Testability,". Documentation | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome Documentation. ROOT provides different types of documentation:. The Reference Guide, which is generated by doxygen provides an up-to-date full code docum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/documentation.html:711,test,tests,711,d/documentation.html,https://root.cern,https://root.cern/d/documentation.html,1,['test'],['tests']
Testability,". Downloading ROOT | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Download Downloading ROOT. We are developing ROOT according to the principle of Release early and release often. However, since a very large portion",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/downloading-root.html:714,test,tests,714,d/downloading-root.html,https://root.cern,https://root.cern/d/downloading-root.html,1,['test'],['tests']
Testability,". Error messages logged in this; way can be printed in a structured way, eliminating duplicates and with the ability; to truncate the list by printEvalErrors. This is the standard mode of error logging; during MINUIT operations. If enableEvalErrorLogging() is false, all errors; reported through this method are passed for immediate printing through RooMsgService.; A string with server names and values is constructed automatically for error logging; purposes, unless a custom string with similar information is passed as argument. void clearEvalErrorLog(); Clear the stack of evaluation error messages. void printEvalErrors(ostream& os = std::cout, Int_t maxPerNode = 10000000); Print all outstanding logged evaluation error on the given ostream. If maxPerNode; is zero, only the number of errors for each source (object with unique name) is listed.; If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; per source of errors. A truncation message is shown if there were more errors logged; than shown. Int_t numEvalErrors(); Return the number of logged evaluation errors since the last clearing. void fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); Fix the interpretation of the coefficient of any RooAddPdf component in; the expression tree headed by this object to the given set of observables. If the force flag is false, the normalization choice is only fixed for those; RooAddPdf components that have the default 'automatic' interpretation of; coefficients (i.e. the interpretation is defined by the observables passed; to getVal()). If force is true, also RooAddPdf that already have a fixed; interpretation are changed to a new fixed interpretation. void fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); Fix the interpretation of the coefficient of any RooAddPdf component in; the expression tree headed by this object to the given set of observables. If the force flag is false, the normalization",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:63034,log,logged,63034,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,7,['log'],['logged']
Testability,". First Steps With ROOT | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome First Steps With ROOT. The ROOT framework provides a number of classes, grouped into several class cathegories. To start using ROOT, you may find",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/first-steps-root-1.html:719,test,tests,719,d/first-steps-root-1.html,https://root.cern,https://root.cern/d/first-steps-root-1.html,2,['test'],['tests']
Testability,". Fit Panel | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Fit Panel. As you can see, the fit (solid line) doesn't really describe the data: a polynomial is nowhere ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/fit-panel.html:707,test,tests,707,d/fit-panel.html,https://root.cern,https://root.cern/d/fit-panel.html,1,['test'],['tests']
Testability,". Formatting Comments for Doxygen | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Formatting Comments for Doxygen. The ROOT team has adopted Doxygen for generating the reference manual. Here you will fin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/formatting-comments-doxygen.html:729,test,tests,729,d/formatting-comments-doxygen.html,https://root.cern,https://root.cern/d/formatting-comments-doxygen.html,1,['test'],['tests']
Testability,". Frequently Asked Questions | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Frequently Asked Questions; [expand all][collapse all]. How to generate a dictionary . A dictionary is a source file that on",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/faq-page.html:724,test,tests,724,d/faq-page.html,https://root.cern,https://root.cern/d/faq-page.html,1,['test'],['tests']
Testability,". Function documentation; void ClearThreadData() const. void SetIz(Int_t iz); Set current z-plane. void SetSeg(Int_t iseg); Set current segment. TGeoXtru(); dummy ctor. TGeoXtru(Int_t nz); Default constructor. TGeoXtru(Double_t* param); Default constructor in GEANT3 style; param[0] = nz // number of z planes. param[1] = z1 // Z position of first plane; param[2] = x1 // X position of first plane; param[3] = y1 // Y position of first plane; param[4] = scale1 // scale factor for first plane. param[4*(nz-1]+1] = zn; param[4*(nz-1)+2] = xn; param[4*(nz-1)+3] = yn; param[4*(nz-1)+4] = scalen. TGeoXtru(const TGeoXtru& ); copy constructor. TGeoXtru& operator=(const TGeoXtru& ); assignment operator. ~TGeoXtru(); destructor. Double_t Capacity() const; Compute capacity [length^3] of this shape. void ComputeBBox(); compute bounding box of the pcon. void ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. Bool_t Contains(Double_t* point) const; test if point is inside this shape. Int_t DistancetoPrimitive(Int_t px, Int_t py); compute closest distance from point px,py to each corner. Double_t DistToPlane(Double_t* point, Double_t* dir, Int_t iz, Int_t ivert, Double_t stepmax, Bool_t in) const; Compute distance to a Xtru lateral surface. Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from inside point to surface of the polycone; locate Z segment. Double_t DistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from outside point to surface of the tube; Warning(""DistFromOutside"", ""not implemented"");. Bool_t DefinePolygon(Int_t nvert, const Double_t* xv, const Double_t* yv); Creates the polygon representing the blueprint of any Xtru section.; nvert = number of vertices >2; xv[nvert] = array of X vertex positions; yv[nvert] = array of Y verte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoXtru.html:15127,test,test,15127,root/html532/TGeoXtru.html,https://root.cern,https://root.cern/root/html532/TGeoXtru.html,1,['test'],['test']
Testability,". Git How Tos | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development » Git Primer Git How Tos. Overview; Building on the tips and other points explained elsewhere, this workflow has the following advantages rel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-how-tos.html:709,test,tests,709,d/git-how-tos.html,https://root.cern,https://root.cern/d/git-how-tos.html,1,['test'],['tests']
Testability,". Git Primer | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Git Primer. These links collect the minimal amount of knowledge about git a ROOT contributor needs to know:. Git How Tos; NoSY Workflow; Git T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-primer.html:708,test,tests,708,d/git-primer.html,https://root.cern,https://root.cern/d/git-primer.html,1,['test'],['tests']
Testability,". Git Tips and Tricks | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development » Git Primer Git Tips and Tricks. Overview; This page gives some helpful hints and tricks on using git, along with a suggested work-f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-tips-and-tricks.html:717,test,tests,717,d/git-tips-and-tricks.html,https://root.cern,https://root.cern/d/git-tips-and-tricks.html,1,['test'],['tests']
Testability,". Github ssh key | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development » Git Primer Github ssh key. Using Github with ssh keys is preferred, as it's much easier to use. Here is how to set it up:; 1. Create an ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/github-ssh-key.html:712,test,tests,712,d/github-ssh-key.html,https://root.cern,https://root.cern/d/github-ssh-key.html,1,['test'],['tests']
Testability,". Given a point P(x,y), Interpolate approximates the value via bilinear interpolation based on the four nearest bin centers see Wikipedia, Bilinear Interpolation Andy Mastbaum 10/8/2008 vaguely based on R.Raja 6-Sep-2008. ; Reimplemented from TH1.; Reimplemented in TH2Poly.; Definition at line 1366 of file TH2.cxx. ◆ Interpolate() [3/3]. Double_t TH2::Interpolate ; (; Double_t ; x, . Double_t ; y, . Double_t ; z . ); const. overridevirtual . illegal for a TH2 ; Reimplemented from TH1.; Reimplemented in TH2Poly.; Definition at line 1440 of file TH2.cxx. ◆ IsA(). TClass * TH2::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TH1.; Reimplemented in TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH2Poly, TProfile2D, and TProfile2Poly.; Definition at line 133 of file TH2.h. ◆ KolmogorovTest(). Double_t TH2::KolmogorovTest ; (; const TH1 * ; h2, . Option_t * ; option = """" . ); const. overridevirtual . Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ; Default: Ignore under- and overflow bins in comparison; option is a character string to specify options; ""U"" include Underflows in test; ""O"" include Overflows; ""N"" include comparison of normalizations; ""D"" Put out a line of ""Debug"" printout; ""M"" Return the Maximum Kolmogorov distance instead of prob. The returned function value is the probability of test (much less than one means NOT compatible); The KS test uses the distance between the pseudo-CDF's obtained from the histogram. Since in 2D the order for generating the pseudo-CDF is arbitrary, two pairs of pseudo-CDF are used, one starting from the x axis the other from the y axis and the maximum distance is the average of the two maximum distances obtained.; Code adapted by Rene Brun from original HBOOK routine HDIFF ; Reimplemented from TH1.; Definition at line 1470 of file TH2.cxx. ◆ operator=(). TH2 & TH2::operator= ; (; const TH2 & ; ). privatedelete . ◆ ProfileX(). TProfile * TH2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2.html:91531,test,test,91531,doc/master/classTH2.html,https://root.cern,https://root.cern/doc/master/classTH2.html,2,['test'],['test']
Testability,". Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Anna Kreshuk 10/04/2006; 3 ; 4#ifndef ROOT_TVirtualFFT; 5#define ROOT_TVirtualFFT; 6 ; 7//////////////////////////////////////////////////////////////////////////; 8//; 9// TVirtualFFT; 10//; 11// TVirtualFFT is an interface class for Fast Fourier Transforms.; 12//; 13//; 14//; 15// The default FFT library is FFTW. To use it, FFTW3 library should already; 16// be installed, and ROOT should be have fftw3 module enabled, with the directories; 17// of fftw3 include file and library specified (see installation instructions).; 18// Function SetDefaultFFT() allows to change the default library.; 19//; 20// Available transform types:; 21// FFT:; 22// - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); 23// in one or more dimensions, -1 in the exponent; 24// - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); 25// in one or more dimensions, +1 in the exponent; 26// - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); 27// in one or more dimensions,; 28// - ""C2R"" - inverse transforms to ""R2C"", taking complex input; 29// (storing the non-redundant half of a logically Hermitian array); 30// to real output; 31// - ""R2HC"" - a real-input DFT with output in ""halfcomplex"" format,; 32// i.e. real and imaginary parts for a transform of size n stored as; 33// r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; 34// - ""HC2R"" - computes the reverse of FFTW_R2HC, above; 35// - ""DHT"" - computes a discrete Hartley transform; 36//; 37// Sine/cosine transforms:; 38// Different types of transforms are specified by parameter kind of the SineCosine() static; 39// function. 4 different kinds of sine and cosine transforms are available; 40// DCT-I (REDFT00 in FFTW3 notation)- kind=0; 41// DCT-II (REDFT10 in FFTW3 notation)- kind=1; 42// DCT-III(REDFT01 in FFTW3 notation)- kind=2; 43// DCT-IV (REDFT11 in FFTW3 notation)- kind=3; 44// DST-I (RODFT00 in FFTW3 notation",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TVirtualFFT_8h_source.html:1346,log,logically,1346,doc/master/TVirtualFFT_8h_source.html,https://root.cern,https://root.cern/doc/master/TVirtualFFT_8h_source.html,1,['log'],['logically']
Testability,". Guidelines for submitting a bug | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Support Guidelines for submitting a bug. Introduction; The RootTalk mailing list and forum can be used to pass information of general",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/guidelines-submitting-bug.html:729,test,tests,729,d/guidelines-submitting-bug.html,https://root.cern,https://root.cern/d/guidelines-submitting-bug.html,1,['test'],['tests']
Testability,". Histogramming in a Selector | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Histogramming in a Selector. Preparation; As previously, we provide a ready-made TSelect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/histogramming-selector.html:725,test,tests,725,d/histogramming-selector.html,https://root.cern,https://root.cern/d/histogramming-selector.html,1,['test'],['tests']
Testability,". Histogramming | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Histogramming. Preparation; Start from the previously used macro (AnalyzeTree.C).; Adding a Variable; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/histogramming.html:711,test,tests,711,d/histogramming.html,https://root.cern,https://root.cern/d/histogramming.html,1,['test'],['tests']
Testability,". How To | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation How To. Developer's Tips . Graphics and GUI . Histograms . Input/Output . Jupyter Notebooks . Language Bindings . Legacy . Linear Algebra . Mult",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/howtos.html:704,test,tests,704,d/howtos.html,https://root.cern,https://root.cern/d/howtos.html,1,['test'],['tests']
Testability,". How to create a ROOTbook? | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome How to create a ROOTbook?. ROOT 6.07 Onwards; The minimal version of Jupyter required in this case is 4.0.; Note that the sudo command might ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/how/how-create-rootbook.html:723,test,tests,723,d/how/how-create-rootbook.html,https://root.cern,https://root.cern/d/how/how-create-rootbook.html,1,['test'],['tests']
Testability,". How to setup ROOT externals from AFS/CVMFS | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development How to setup ROOT externals from AFS/CVMFS. The following instructions are useful for setting up an environmen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/how-setup-root-externals-afscvmfs.html:740,test,tests,740,d/how-setup-root-externals-afscvmfs.html,https://root.cern,https://root.cern/d/how-setup-root-externals-afscvmfs.html,1,['test'],['tests']
Testability,". How to use the ROOT Jenkins | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development How to use the ROOT Jenkins. The ROOT project uses a Jenkins instance to schedule a number of software development procedures",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/how-use-root-jenkins.html:725,test,tests,725,d/how-use-root-jenkins.html,https://root.cern,https://root.cern/d/how-use-root-jenkins.html,1,['test'],['tests']
Testability,". However they are present in the estimated functional ;  ; Bool_t * fFixPositionX1;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY1;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t fFixRo;  logical value of correlation coefficient, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaX;  logical value of sigma x parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaY;  logical value of sigma y parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSx;  logical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSxy;  logical value of s parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSy;  logical value of s parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTx;  logical value of t parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTxy;  logical value of t parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTy;  logical value of t parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Int_t fNPeaks;  number of peaks present in fit, input parameter, it should be > 0 ;  ; Int_t fNumberIterations;  number of iterations in fitting procedure, input parameter, it should be > 0 ;  ; Double_t * fPositionCalcX;  [fNPeaks] array of calculated values of x positions of 2D peaks, output parameters ;  ; Double_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:28041,log,logical,28041,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['log'],['logical']
Testability,". Index of CINT. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT; » CINT. Index of CINT; CINT - The C++ Interpreter; The CINT package consists of. CINT; the current CINT core: interpreter, parser, etc.; CINT7; the new CINT core, using Reflex instead of arrays of C structures; Reflex; A C++ library for reflection data, i.e. to store information about available types, members, their sizes, etc.; Cintex; An interface between Reflex and the current CINT version. More information can be obtained from the CINT website.; The main area of work is currently getting CINT7 to work as well as the old CINT.; Once this merge with Reflex is finished, CINT will be a lot easier to maintain, use less memory, and also run faster than the current CINT.; You can watch our progress in the nightly test status for the rows labeled new.; The next major overhaul will convert CINT into a true C++ layout and make it thread-safe, with >= one interpreter per thread.; We have a draft proposal for the new layout written as C++ headers; a document describing this will follow.; For now you can peek at the subversion repository containing the set of headers.; Further Reading; bytecode; cint; cintapi; extlib; ifdef; limitati; limitnum; makecint; message; ref; List of Classes; CINT Modules; REFLEX. » Last changed: 2009-12-14 18:22 » Last generated: 2009-12-14 18:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/CINT_Index.html:810,test,test,810,root/html526/CINT_Index.html,https://root.cern,https://root.cern/root/html526/CINT_Index.html,1,['test'],['test']
Testability,". Index of CINT. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT; » CINT. Index of CINT; CINT - The C++ Interpreter; The CINT package consists of. CINT; the current CINT core: interpreter, parser, etc.; CINT7; the new CINT core, using Reflex instead of arrays of C structures; Reflex; A C++ library for reflection data, i.e. to store information about available types, members, their sizes, etc.; Cintex; An interface between Reflex and the current CINT version. More information can be obtained from the CINT website.; The main area of work is currently getting CINT7 to work as well as the old CINT.; Once this merge with Reflex is finished, CINT will be a lot easier to maintain, use less memory, and also run faster than the current CINT.; You can watch our progress in the nightly test status for the rows labeled new.; The next major overhaul will convert CINT into a true C++ layout and make it thread-safe, with >= one interpreter per thread.; We have a draft proposal for the new layout written as C++ headers; a document describing this will follow.; For now you can peek at the subversion repository containing the set of headers.; Further Reading; bytecode; cint; cintapi; extlib; ifdef; limitati; limitnum; makecint; message; ref; List of Classes; CINT Modules; REFLEX. » Last changed: 2010-12-15 15:10 » Last generated: 2010-12-15 15:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/CINT_Index.html:810,test,test,810,root/html528/CINT_Index.html,https://root.cern,https://root.cern/root/html528/CINT_Index.html,1,['test'],['test']
Testability,". Interfacing ROOT and Spark | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Interfacing ROOT and Spark. Presently two ways are available to exploit the widely adopted Spark technology for carrying out",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/interfacing-root-and-spark.html:724,test,tests,724,d/interfacing-root-and-spark.html,https://root.cern,https://root.cern/d/interfacing-root-and-spark.html,1,['test'],['tests']
Testability,". Introductory Tutorials | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses Introductory Tutorials. Overview; The goal of this tutorial session is to learn how to read a tree from a ROOT file, e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/introductory-tutorials-1.html:720,test,tests,720,d/introductory-tutorials-1.html,https://root.cern,https://root.cern/d/introductory-tutorials-1.html,2,['test'],['tests']
Testability,". License | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » About License. The ROOT system is being made available under the LGPL 2.1 or (at your option) any later version, which allows ROOT to be used in a wide range",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/license.html:705,test,tests,705,d/license.html,https://root.cern,https://root.cern/d/license.html,1,['test'],['tests']
Testability,". Mailing List mode on Discourse | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Support Mailing List mode on Discourse. Here is how to enable the ""mailing list mode"" feature on our Discourse forum. If you visit you",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/mailing-list-mode-discourse.html:728,test,tests,728,d/mailing-list-mode-discourse.html,https://root.cern,https://root.cern/d/mailing-list-mode-discourse.html,1,['test'],['tests']
Testability,". Meet a TTree | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Meet a TTree. We have created an example ROOT file containing a TTree: a typical data container used e.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/meet-ttree.html:710,test,tests,710,d/meet-ttree.html,https://root.cern,https://root.cern/d/meet-ttree.html,1,['test'],['tests']
Testability,". Meetings | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Meetings. All ROOT-related meetings ca be found in ROOT's Indico category; the upcoming ones can be seen here to the right.; Weekly Developers M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/meetings.html:706,test,tests,706,d/meetings.html,https://root.cern,https://root.cern/d/meetings.html,1,['test'],['tests']
Testability,". News | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome News. 02-02-2019 ; Full Totem Analysis based on RDataFrame and distributed on a big Spark cluster with PyRDF! ; Milosz Blaszkiewicz and Aleksandra Mnich (AGH Univ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/news.html:702,test,tests,702,d/news.html,https://root.cern,https://root.cern/d/news.html,1,['test'],['tests']
Testability,". Options to control flow of fit procedure. Minimizer(type,algo) -- Choose minimization package and algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer; interface, but others can be specified (through RooMinimizer interface). Select OldMinuit to use; MINUIT through the old RooMinuit interface. Type Algorithm; ------ ---------; OldMinuit migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); Minuit migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); Minuit2 migrad, simplex, minimize, scan; GSLMultiMin conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent; GSLSimAn -. InitialHesse(Bool_t flag) -- Flag controls if HESSE before MIGRAD as well, off by default; Optimize(Bool_t flag) -- Activate constant term optimization of test statistic during minimization (on by default); Hesse(Bool_t flag) -- Flag controls if HESSE is run after MIGRAD, on by default; Minos(Bool_t flag) -- Flag controls if MINOS is run after HESSE, off by default; Minos(const RooArgSet& set) -- Only run MINOS on given subset of arguments; Save(Bool_t flag) -- Flac controls if RooFitResult object is produced and returned, off by default; Strategy(Int_t flag) -- Set Minuit strategy (0 through 2, default is 1); FitOptions(const char* optStr) -- Steer fit with classic options string (for backward compatibility). Use of this option; excludes use of any of the new style steering options. SumW2Error(Bool_t flag) -- Apply correaction to errors and covariance matrix using sum-of-weights covariance matrix; to obtain correct error for weighted likelihood fits. If this option is activated the; corrected covariance matrix is calculated as Vcorr = V C-1 V, where V is the original; covariance matrix and C is the inverse of the covariance matrix calculated using the; weights squared. Options to control informational output. Verbose(Bool_t flag) -- Flag controls if verbose output is printed (NLL, parameter changes during fit; Timer(Bool_t flag) -- Time",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsPdf.html:57402,test,test,57402,root/html534/RooAbsPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsPdf.html,3,['test'],['test']
Testability,". Previous Developers | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » About Previous Developers. The following people have been working on ROOT for some time in their career and ROOT would not be what it is without ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/previous-developers.html:717,test,tests,717,d/previous-developers.html,https://root.cern,https://root.cern/d/previous-developers.html,1,['test'],['tests']
Testability,". Processing data with ROOT | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » First Steps With ROOT Processing data with ROOT. The ROOT framework consists of many classes, grouped into several categories. Finally, the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/processing-data-root.html:723,test,tests,723,d/processing-data-root.html,https://root.cern,https://root.cern/d/processing-data-root.html,1,['test'],['tests']
Testability,". Program of Work | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Program of Work. The program of work is guided by the project vision laid out here, and documented for the relevant years in the followin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/program-work.html:713,test,tests,713,d/program-work.html,https://root.cern,https://root.cern/d/program-work.html,1,['test'],['tests']
Testability,". Project Founders | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » About Project Founders. Rene Brun ; ; Rene, a lifetime developer of ROOT. He joined CERN in 1973. While working with C. Rubbia at the ISR he develop",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/project-founders.html:714,test,tests,714,d/project-founders.html,https://root.cern,https://root.cern/d/project-founders.html,1,['test'],['tests']
Testability,. Protected Attributes; std::vector< Float_t > classValues;  ; TString fFilenameClassifier;  ; TString fInit;  ; Double_t fLearningRate;  ; TString fLoss;  ; Int_t fMaxDepth;  ; TString fMaxFeatures;  ; TString fMaxLeafNodes;  ; Int_t fMinSamplesLeaf;  ; Int_t fMinSamplesSplit;  ; Double_t fMinWeightFractionLeaf;  ; Int_t fNestimators;  ; UInt_t fNoutputs;  ; UInt_t fNvars;  ; TString fRandomState;  ; Double_t fSubsample;  ; Int_t fVerbose;  ; Bool_t fWarmStart;  ; std::vector< Double_t > mvaValues;  ; PyObject * pInit;  ; PyObject * pLearningRate;  ; PyObject * pLoss;  ; PyObject * pMaxDepth;  ; PyObject * pMaxFeatures;  ; PyObject * pMaxLeafNodes;  ; PyObject * pMinSamplesLeaf;  ; PyObject * pMinSamplesSplit;  ; PyObject * pMinWeightFractionLeaf;  ; PyObject * pNestimators;  ; PyObject * pRandomState;  ; PyObject * pSubsample;  ; PyObject * pVerbose;  ; PyObject * pWarmStart;  ;  Protected Attributes inherited from TMVA::PyMethodBase; PyObject * fClassifier;  ; PyObject * fLocalNS;  ; PyObject * fModule;  ; PyObject * fPyReturn;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPyGTB.html:25893,test,testing,25893,doc/master/classTMVA_1_1MethodPyGTB.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPyGTB.html,2,"['log', 'test']","['logger', 'testing']"
Testability,". Publications | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Publications. In case you want to cite ROOT in your own publications, this is the preferred reference. Rene Brun and Fons Rademakers,; ROO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/publications.html:710,test,tests,710,d/publications.html,https://root.cern,https://root.cern/d/publications.html,1,['test'],['tests']
Testability,". ROOT 6 Analysis Workshop | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome ROOT 6 Analysis Workshop. Abstract; This tutorial will guide you through an example analysis with ROOT 6. It shows the recommended practices f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/root-6-analysis-workshop-1.html:722,test,tests,722,d/root-6-analysis-workshop-1.html,https://root.cern,https://root.cern/d/root-6-analysis-workshop-1.html,2,['test'],['tests']
Testability,". ROOT 7 | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development ROOT 7. For the first time since 20 year (i.e. ever), the ROOT team plans to break backward compatibility for crucial interfaces - once.; This new",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/root-7.html:704,test,tests,704,d/root-7.html,https://root.cern,https://root.cern/d/root-7.html,1,['test'],['tests']
Testability,". ROOT I/O | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » First Steps With ROOT ROOT I/O. The ROOT framework consists of many classes, grouped into several categories. Finally, the latter are grouped into few top-l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/root-io.html:706,test,tests,706,d/root-io.html,https://root.cern,https://root.cern/d/root-io.html,1,['test'],['tests']
Testability,". ROOT User Guides and Manuals | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation ROOT User Guides and Manuals. ROOT Guides. Title; Quick Link; All Links. Reference Guide; head / 6.08; all releases. User'",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/root-user-guides-and-manuals.html:726,test,tests,726,d/root-user-guides-and-manuals.html,https://root.cern,https://root.cern/d/root-user-guides-and-manuals.html,1,['test'],['tests']
Testability,". ROOT Version 6.32 Release Notes. ROOT Version 6.32 Release Notes; 2024-05-26. Introduction; Deprecation and Removal; Core Libraries; I/O Libraries; hadd respects compression settings. TTree Libraries; Add files from subdirectories with TChain::Add globbing; Improved efficiency of TTree friends with indices. RNTuple; Histogram Libraries; Parallelism; RooFit Libraries; New CPU likelihood evaluation backend by default; Asymptotically correct uncertainties for extended unbinned likelihood fits; Compile your code with memory safe interfaces; Removal of some memory-unsafe interfaces; Deprecation of legacy iterators; Deprecation of legacy test statistics classes in public interface; Change of RooParamHistFunc; Renaming of some RooFit classes. RDataFrame; Graphics backends; 2D Graphics Libraries; 3D Graphics Libraries; REve. PROOF Libraries; PyROOT; Different representation of std::string; No more implicit conversion of static size char buffer to Python strings; Deprecate the attribute pythonization of TDirectory in favor of item-getting syntax; Removal of Python 2 support; More usage of the public cppyy API. Class Reference Guide; Build, Configuration and Testing Infrastructure; Bugs and Issues fixed in this release; Release 6.32.02; Items addressed in this release. Release 6.32.04; Items addressed in this release. Release 6.32.06; Items addressed in this release. HEAD of the v6-32-00-patches branch. Introduction; ROOT version 6.32.00 was released on 28 May 2024. This release is a long term support one, ideal for inclusion in production or data taking software stacks of experiments.; For more information, see:; http://root.cern; The following people have contributed to this new version:; Anton Alkin, Sungkyunkwan University; Guilherme Amadio, CERN/IT,; Abhigyan Acherjee, University of Cincinnati,; Bertrand Bellenot, CERN/EP-SFT,; Jakob Blomer, CERN/EP-SFT,; Rene Brun,; Carsten Burgard, DESY; Will Buttinger, RAL,; Philippe Canal, FNAL,; Jolly Chen, CERN/EP-SFT,; Olivier Co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:642,test,test,642,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['test'],['test']
Testability,". ROOT a Data analysis Framework | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . . Getting Started. . Reference Guide. . Forum. . Gallery.  ; ROOT is ...; A modular scientific software toolkit. It provides all the functionalities need",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/index.html:728,test,tests,728,d/index.html,https://root.cern,https://root.cern/d/index.html,1,['test'],['tests']
Testability,". ROOT: Classification Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classification Class ReferenceTMVA. ; Class to perform two class classification. ; The first step before any analysis is to prepare the data, to do that you need to create an object of TMVA::DataLoader, in this object you need to configure the variables and the number of events to train/test. The class TMVA::Experimental::Classification needs a TMVA::DataLoader object, optional a TFile object to save the results and some extra options in a string like ""V:Color:Transformations=I;D;P;U;G:Silent:DrawProgressBar:ModelPersistence:Jobs=2"" where: V = verbose output Color = coloured screen output Silent = batch mode: boolean silent flag inhibiting any output from TMVA Transformations = list of transformations to test. DrawProgressBar = draw progress bar to display training and testing. ModelPersistence = to save the trained model in xml or serialized files. Jobs = number of ml methods to test/train in parallel using MultiProc, requires to call Evaluate method. Basic example. void classification(UInt_t jobs = 2); {; TMVA::Tools::Instance();; ; TFile *input(0);; TString fname = ""./tmva_class_example.root"";; if (!gSystem->AccessPathName(fname)) {; input = TFile::Open(fname); // check if file in local directory exists; } else {; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"");; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }; ; // Register the training and test trees; ; TTree *signalTree = (TTree *)input->Get(""TreeS"");; TTree *background = (TTree *)input->Get(""TreeB"");; ; TMVA::DataLoader *dataloader = new TMVA::DataLoader(""dataset"");; ; dataloader->AddVariable(""myvar1 := var1+var2"", 'F');; dataloader->AddVariable(""myvar2 := var1-var2"", ""Expression 2"", """", 'F');; dataloader->AddVariable(""var3"", ""Variable 3"", ""units"", 'F');; dataloader->AddVariable(""var4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Classification.html:409,test,test,409,doc/master/classTMVA_1_1Classification.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Classification.html,3,['test'],"['test', 'testing']"
Testability,". ROOT: Containers. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; ContainersCore ROOT classes. ; The containers and generators the ROOT framework offers. ; Collections are a key feature of the ROOT system. Many, if not most, of the applications you write will use collections. If you have used polymorphic C++ collections before, some of this material will be review. However, much of this tutorial covers aspects of collections specific to the ROOT system. In this tutorial the following features will be demonstrated:. Using collections; How to create instances of collections; The difference between lists, ordered collections, hash-tables, maps, etc.; How to add and remove elements of a collection; How to search a collection for a specific element; How to access and modify collection elements; How to iterate over a collection; How to manage memory for collections and collection elements; How collection elements are tested for equality (IsEqual()); How collection elements are compared (Compare()) in case of sorted collections; How collection elements are hashed (Hash()) in hash tables . Classes; class  TArray;  Abstract array base class. More...;  ; class  TArrayC;  Array of chars or bytes (8 bits per element). More...;  ; class  TArrayD;  Array of doubles (64 bits per element). More...;  ; class  TArrayF;  Array of floats (32 bits per element). More...;  ; class  TArrayI;  Array of integers (32 bits per element). More...;  ; class  TArrayL;  Array of longs (32 or 64 bits per element). More...;  ; class  TArrayL64;  Array of long64s (64 bits per element). More...;  ; class  TArrayS;  Array of shorts (16 bits per element). More...;  ; class  TBits;  Container of bits. More...;  ; class  TBtree;  B-tree class. More...;  ; class  TClassTable;  This class registers for all classes their name, id and dictionary function in a hash table. More...;  ; class  TClonesArray;  An array of clone (identical) objects. More...;  ; class  TColl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Containers.html:970,test,tested,970,doc/master/group__Containers.html,https://root.cern,https://root.cern/doc/master/group__Containers.html,1,['test'],['tested']
Testability,". ROOT: Fit Method Classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Fit Method ClassesMath » MathCore » Fitting and Parameter Estimation. ; Classes describing Fit Method functions. . Classes; class  ROOT::Math::BasicFitMethodFunction< FunctionType >;  FitMethodFunction class Interface for objective functions (like chi2 and likelihood used in the fit) In addition to normal function interface provide interface for calculating each data contribution to the function which is required by some algorithm (like Fumili) More...;  ; class  ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >;  Chi2FCN class for binned fits using the least square methods. More...;  ; class  ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >;  LogLikelihoodFCN class for likelihood fits. More...;  ; class  ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >;  class evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__FitMethodFunc.html:927,log,log,927,doc/master/group__FitMethodFunc.html,https://root.cern,https://root.cern/doc/master/group__FitMethodFunc.html,1,['log'],['log']
Testability,". ROOT: Graphs tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Graphs tutorialsTutorials. ; Examples showing the ""graphs classes"" usage. . Files; file  annotation3d.C;   This example show how to put some annotation on a 3D plot using 3D polylines. ;  ; file  approx.C;   Macro to test interpolation function Approx ;  ; file  bent.C;   Bent error bars ;  ; file  bent.py;   Bent error bars. ;  ; file  exclusiongraph.C;   Draw three graphs with an exclusion zone. ;  ; file  exclusiongraph2.C;   Draw several graphs with an exclusion zones. ;  ; file  gerrors.C;   Draw a graph with error bars ;  ; file  gerrors2.C;   Draw two graphs with error bars ;  ; file  gmultierrors.C;   Draw a graph with multiple y errors ;  ; file  graph.C;   Draw a simple graph. ;  ; file  graph2derrorsfit.C;   Draw and fit a TGraph2DErrors ;  ; file  graphApply.C;   A macro to demonstrate the functionality of TGraph::Apply() method. ;  ; file  graphpalettecolor.C;   Palette coloring for graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  graphpolar.C;   Create and draw a polar graph. ;  ; file  graphpolar2.C;   Create and draw a polar graph with PI axis ;  ; file  graphpolar3.C;   Create and draw a polar graph with PI axis using a TF1. ;  ; file  graphreverse.C;   This example test all the various case of reverse graphs combined with logarithmic scale. ;  ; file  graphShade.C;   Show how to shade an area between two graphs ;  ; file  graphstruct.C;   Draw a simple graph structure. ;  ; file  graphtext.C;   Draw a graph with text attached to each point. ;  ; file  gtime.C;   Example of TGraphTime. ;  ; file  gtime2.C;   Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program. ;  ; file  hlGraph1.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ; file  hlGraph2.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__graphs.html:332,test,test,332,doc/master/group__tutorial__graphs.html,https://root.cern,https://root.cern/doc/master/group__tutorial__graphs.html,1,['test'],['test']
Testability,. ROOT: IO tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; IO tutorialsTutorials. ; These tutorials illustrate some of the capabilities of the ROOT IO subsystem. . Files; file  copyFiles.C;   Example of script showing how to copy all objects (including directories) from a source file. ;  ; file  dirs.C;   This macro illustrates how to create a hierarchy of directories in a Root file. ;  ; file  double32.C;   Tutorial illustrating use and precision of the Double32_t data type You should run this tutorial with ACLIC: a dictionary will be automatically created. ;  ; file  fildir.C;   This macro displays the ROOT Directory data structure ;  ; file  file.C;   This macro displays the physical ROOT file structure ;  ; file  float16.C;   Tutorial illustrating use and precision of the Float16_t data type. ;  ; file  hadd.C;   Macro to add histogram files This macro is kept for didactical purposes only: use instead the executable $ROOTSYS/bin/hadd ! ;  ; file  importCode.C;   Example of script showing how to create a ROOT file with subdirectories. ;  ; file  loopdir.C;   Example script to loop over all the objects of a ROOT file directory and print in Postscript all the TH1 derived objects. ;  ; file  loopdir11.C;   Example script to loop over all the objects of a ROOT file directory and print in Postscript all the TH1 derived objects. ;  ; file  mergeSelective.C;   Merge only part of the content of a set of files. ;  ; file  readCode.C;   Example of script showing how to navigate in a ROOT file with sub-directories and read the objects in each sub-directory. ;  ; file  testMergeCont.C;   Macro demonstrating the merging of containers. ;  ; file  testTMPIFile.C;  This macro shows the usage of TMPIFile to simulate event reconstruction and merging them in parallel. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__io.html:1639,test,testMergeCont,1639,doc/master/group__tutorial__io.html,https://root.cern,https://root.cern/doc/master/group__tutorial__io.html,2,['test'],"['testMergeCont', 'testTMPIFile']"
Testability,". ROOT: Legacy tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; Legacy tutorialsTutorials. ; Legacy Tutorials. ; Some of ROOT's tutorials demonstrate interfaces that are not recommended anymore, because ROOT or C++ itself now offer superior ones. These have been moved here ""for the record"". . Modules;  Containers tutorials;  Examples showing the ""containers' classes"" usage.. ;  ;  Multi Layer Perceptron tutorials;  Examples showing the Multi Layer Perceptron classes. ;  ;  Regexp tutorials;  Examples for ROOT's regular expressions. ;  ;  Thread tutorials;  Thread examples. ;  . Files; file  benchmarks.C;  This macro run several tests and produces an benchmark report. ;  ; file  geant3tasks.C;  This script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects. ;  ; file  htmlex.C;  This file demonstrates how THtml can document sources. ;  ; file  MyTasks.cxx;  A set of classes deriving from TTask. ;  ; file  ProofNtuple.C;  Selector to fill a simple ntuple. ;  ; file  ProofNtuple.h;  Selector to fill a simple ntuple. ;  ; file  ProofPythia.C;  Selector to generate Monte Carlo events with Pythia8. ;  ; file  ProofPythia.h;  Selector to generate Monte Carlo events with Pythia8. ;  ; file  rootalias.C;  Defines aliases: ;  ; file  rootenv.C;  Produce a picture of the ROOT environment. ;  ; file  rootmarks.C;  Prints a summary of all ROOT benchmarks (must be run before). ;  ; file  tasks.C;  Example of TTasks. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__legacy.html:660,benchmark,benchmarks,660,doc/master/group__tutorial__legacy.html,https://root.cern,https://root.cern/doc/master/group__tutorial__legacy.html,4,"['benchmark', 'test']","['benchmark', 'benchmarks', 'tests']"
Testability,". ROOT: Math tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Math tutorialsTutorials. ; Examples showing the Math classes. . Files; file  Bessel.C;   Show the different kinds of Bessel functions available in ROOT To execute the macro type in: ;  ; file  Bessel.py;   Show the different kinds of Bessel functions available in ROOT To execute the macro type in: ;  ; file  binomial.C;   tutorial illustrating the use of TMath::Binomial can be run with: ;  ; file  BreitWigner.C;   Tutorial illustrating how to create a plot comparing a Breit Wigner to a Relativistic Breit Wigner ;  ; file  ChebyshevPol.C;   Example of Chebyshev polynomials using new TFormula pre-defined definitions of chebyshev polynomials ;  ; file  chi2test.C;   Example to use chi2 test for comparing two histograms One unweighted histogram is compared with a weighted histogram. ;  ; file  CrystalBall.C;   Example of CrystalBall Function and its distribution (pdf and cdf) ;  ; file  exampleFunction.py;   Example of using Python functions and input to numerical algorithm using the ROOT Functor class ;  ; file  exampleFunctor.C;   Tutorial illustrating how creating a TF1 class using functor or class member functions ;  ; file  exampleMultiRoot.C;   Example of using multiroot finder based on GSL algorithm. ;  ; file  exampleTKDE.C;   Example of using the TKDE class (kernel density estimator) ;  ; file  FeldmanCousins.C;   Example macro of using the TFeldmanCousins class in root. ;  ; file  GammaFun.C;   Example showing the usage of the major special math functions (gamma, beta, erf) in ROOT To execute the macro type in: ;  ; file  goftest.C;   GoFTest tutorial macro ;  ; file  hlquantiles.C;  Demo for quantiles (with highlight mode) ;  ; file  kdTreeBinning.C;   kdTreeBinning tutorial: bin the data in cells of equal content using a kd-tree ;  ; file  Legendre.C;   Example of first few Legendre Polynomials ;  ; file  Legendre.py;   Example of first few Legendr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__math.html:805,test,test,805,doc/master/group__tutorial__math.html,https://root.cern,https://root.cern/doc/master/group__tutorial__math.html,1,['test'],['test']
Testability,". ROOT: Net tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Net tutorialsTutorials. ; Examples showing the net classes. . Files; file  authclient.C;  This macro should be run together with authserv.C to test authentication between two remote ROOT sessions. ;  ; file  authserv.C;  This macro should be run together with authclient.C to test authentication between two remote ROOT sessions. ;  ; file  fastMergeServer.C;  This script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block. ;  ; file  hclient.C;  Client program which creates and fills a histogram. ;  ; file  hcons.C;  Histogram consumer script. ;  ; file  hprod.C;  Histogram producer script. ;  ; file  hserv.C;  Server program which waits for two clients to connect. ;  ; file  hserv2.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  parallelMergeServer.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeTest.C;  ; file  pclient.C;  Client program to test parallel sockets. ;  ; file  pserv.C;  Server program to test parallel sockets. ;  ; file  spy.C;  Client program which allows the snooping of objects from a spyserv process. ;  ; file  spyserv.C;  Server program which allows clients, ""spies"", to connect and snoop objects. ;  ; file  TestAuth.C;  Macro test authentication methods stand alone. ;  ; file  testTUDPSocket.C;  As test echo server use udpserver.c in the same directory. ;  ; file  treeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  TUriTest.C;  Rudimentary TUri test macro. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__net.html:255,test,test,255,doc/master/group__tutorial__net.html,https://root.cern,https://root.cern/doc/master/group__tutorial__net.html,2,['test'],['test']
Testability,". ROOT: PROOF. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; PROOF. ; Classes defining the Parallel ROOT Facility, PROOF, a framework for parallel analysis of ROOT TTrees. ; Deprecated:We keep PROOF for those who still need it for legacy use cases. PROOF is not developed anymore and receiving only limited support. ROOT has since a few years moved to RDataFrame and related products as multi-core/multi-processing engines. Modules;  PROOF kernel Libraries;  The PROOF kernel libraries (libProof, libProofPlayer, libProofDraw) contain the classes defining the kernel of the PROOF facility, i.e. ;  ;  PROOF benchmark utilities;  Set of utilities to benchmark a PROOF facility. ;  . Files; file  runProof.C;  Macro to run examples of analysis on PROOF, corresponding to the TSelector implementations found under <ROOTSYS>/tutorials/proof. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__proof.html:661,benchmark,benchmark,661,doc/master/group__proof.html,https://root.cern,https://root.cern/doc/master/group__proof.html,2,['benchmark'],['benchmark']
Testability,". ROOT: Proof tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; Proof tutorialsTutorials. ; These examples aim to illustrate the usage of PROOF. . Modules;  ProcFileElements;  Class to hold information about the processed elements of a file. ;  ;  ProofAux;  Selector used for auxiliary actions in the PROOF tutorials. ;  ;  ProofEvent;  Selector for generic processing with Event. ;  ;  ProofEventProc;  Selector to process trees containing Event structures. ;  ;  ProofFriends;  Selector to process tree friends. ;  ;  ProofNtuple;  Selector to fill a simple ntuple. ;  ;  ProofPythia;  Selector to generate Monte Carlo events with Pythia8. ;  ;  ProofSimple;  Selector to fill a set of histograms. ;  ;  ProofSimpleFile;  Selector to fill a set of histograms and merging via file. ;  ;  ProofStdVec;  Selector for generic processing with stdlib collections. ;  ;  ProofTests;  Auxilliary selector used to test PROOF functionality. ;  . Files; file  EmptyInclude.h;  Empty file to test TProof::Load in runProof.C and StressProof.cxx in conjunction with ProcFileElements and ProofEventProc . ;  ; file  finalizeProof.C;  Macro to finalize queries run with the macro tutorials/runProof . ;  ; file  getProof.C;  Attaches to a PROOF session, possibly at the indicated URL. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__proof.html:969,test,test,969,doc/master/group__tutorial__proof.html,https://root.cern,https://root.cern/doc/master/group__tutorial__proof.html,2,['test'],['test']
Testability,". ROOT: PyROOT Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions |; Variables ; PyROOT Namespace Reference. Classes; class  RegulatorCleanup;  A TObject-derived class to inject the memory regulation logic in the ROOT list of cleanups. More...;  ; class  RPyROOTApplication;  Interactive application for Python. More...;  ; class  TMemoryRegulator;  Manages TObject-derived objects created in a PyROOT application. More...;  . Functions; PyObject * AddCPPInstancePickling (PyObject *self, PyObject *args);  Set reduce attribute for CPPInstance objects. ;  ; PyObject * AddPrettyPrintingPyz (PyObject *self, PyObject *args);  Add pretty printing pythonization. ;  ; PyObject * AddTClassDynamicCastPyz (PyObject *self, PyObject *args);  Add pythonization for TClass::DynamicCast. ;  ; PyObject * AddTObjectEqNePyz (PyObject *self, PyObject *args);  Add pythonization for equality and inequality operators in TObject. ;  ; PyObject * BranchPyz (PyObject *self, PyObject *args);  Add pythonization for TTree::Branch. ;  ; PyObject * ClearProxiedObjects (PyObject *self, PyObject *args);  ; PyObject * CPPInstanceExpand (PyObject *self, PyObject *args);  Deserialize pickled objects. ;  ; PyObject * GetBranchAttr (PyObject *self, PyObject *args);  ; void Init ();  ; PyObject * RegisterConverterAlias (PyObject *, PyObject *args);  ; PyObject * RegisterExecutorAlias (PyObject *, PyObject *args);  . Variables; PyObject * gRootModule = nullptr;  . Function Documentation. ◆ AddCPPInstancePickling(). PyObject * PyROOT::AddCPPInstancePickling ; (; PyObject * ; self, . PyObject * ; args . ). Set reduce attribute for CPPInstance objects. ; Parameters. [in]selfAlways null, since this is a module function. ; [in]argsPointer to a Python tuple object containing the arguments received from Python. The C++ function op_reduce defined above is wrapped in a Python method so that it can be injected in CPPInstance ; Definition at line 123 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespacePyROOT.html:272,log,logic,272,doc/master/namespacePyROOT.html,https://root.cern,https://root.cern/doc/master/namespacePyROOT.html,1,['log'],['logic']
Testability,". ROOT: PyROOT::RegulatorCleanup Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; PyROOT::RegulatorCleanup Class Referencefinal. ; A TObject-derived class to inject the memory regulation logic in the ROOT list of cleanups. ; The purpose of this class is to keep the responsibilities separate between the TMemoryRegulator logic and the rest of ROOT. ; Definition at line 85 of file TMemoryRegulator.h. Public Member Functions; void CallClearProxiedObjects ();  ; TClass * IsA () const;  ; void RecursiveRemove (TObject *object) final;  Recursively remove this object from a list. ;  ; void Streamer (TBuffer &R__b);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classPyROOT_1_1RegulatorCleanup.html:364,log,logic,364,doc/master/classPyROOT_1_1RegulatorCleanup.html,https://root.cern,https://root.cern/doc/master/classPyROOT_1_1RegulatorCleanup.html,2,['log'],['logic']
Testability,". ROOT: ROOT Namespace Reference. ; ROOT  ; . v6-28. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT Namespace ReferenceMath » MathCore | Math » MathMore » Statistical functions. This file contains a specialised ROOT message handler to test for diagnostic in unit tests. ; More... Namespaces; namespace  CocoaTutorials;  ; namespace  Detail;  Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ;  ; namespace  ExecutorUtils;  This namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  FoundationUtils;  ; namespace  Geom;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TestSupport;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. More...;  ; class  ROpaqueTaskArena;  ; class  RRangeCast;  Wraps any collection that can be used in range-based loops and applies static_cast<T> or",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v628/namespaceROOT.html:332,test,test,332,doc/v628/namespaceROOT.html,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html,2,['test'],"['test', 'tests']"
Testability,". ROOT: ROOT Namespace Reference. ; ROOT  ; . v6-30. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT Namespace ReferenceMath » MathCore | Math » MathMore » Statistical functions. This file contains a specialised ROOT message handler to test for diagnostic in unit tests. ; More... Namespaces; namespace  Browsable;  ; namespace  CocoaTutorials;  ; namespace  Detail;  Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ;  ; namespace  Details;  ; namespace  ExecutorUtils;  This namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  FoundationUtils;  ; namespace  Geom;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TestSupport;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; class  RBrowser;  Web-based ROOT files and objects browser. More...;  ; class  RBrowserCatchedWidget;  ; class  RBrowserData;  Way to browse (hopefully) everything in ROOT. More...;  ; class  RBrowserDataCleanup;  ; class  RBrowserEditorWidget;  ; class  RBrowserInfoWidget;  ; class  RBrowserReply;  Reply on browser request. More...;  ; class  RBrowserRequest;  Request send from client to get content of path element. More...;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v630/namespaceROOT.html:332,test,test,332,doc/v630/namespaceROOT.html,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html,2,['test'],"['test', 'tests']"
Testability,". ROOT: ROOT7 Pad related classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; ROOT7 Pad related classesGraphics » ROOT7 Graphics. ; The ROOT7 Pad related classes. . Classes; class  ROOT::Experimental::Detail::RArgsMenuItem;  Menu item which requires extra arguments for invoked class method. More...;  ; class  ROOT::Experimental::RAttrAggregation;  Base class for attributes aggregations like lines or fill attributes. More...;  ; class  ROOT::Experimental::RAttrAxis;  All supported axes attributes for: line, ticks, labels, title, min/max, log, reverse, ... More...;  ; class  ROOT::Experimental::RAttrAxisLabels;  Axis labels drawing attributes. More...;  ; class  ROOT::Experimental::RAttrAxisTicks;  Axis ticks attributes. More...;  ; class  ROOT::Experimental::RAttrAxisTitle;  Axis title and its drawing attributes. More...;  ; class  ROOT::Experimental::RAttrBase;  Base class for all attributes, used with RDrawable. More...;  ; class  ROOT::Experimental::RAttrBorder;  Drawing line attributes for different objects. More...;  ; class  ROOT::Experimental::RAttrFill;  Drawing fill attributes for different objects. More...;  ; class  ROOT::Experimental::RAttrFont;  A font attributes, used together with text attributes. More...;  ; class  ROOT::Experimental::RAttrLine;  Drawing line attributes for different objects. More...;  ; class  ROOT::Experimental::RAttrLineEnding;  Attributes for line ending. More...;  ; class  ROOT::Experimental::RAttrMap;  ; class  ROOT::Experimental::RAttrMargins;  A margins attributes. Only relative and pixel coordinates are allowed. More...;  ; class  ROOT::Experimental::RAttrMarker;  A marker attributes. More...;  ; class  ROOT::Experimental::RAttrText;  A text attributes. More...;  ; class  ROOT::Experimental::RAttrValue< T >;  Template class to access single value from drawable or other attributes. More...;  ; class  ROOT::Experimental::RCanvas;  A window's topmost RPad. More...;  ; class  ROOT::E",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__GpadROOT7.html:591,log,log,591,doc/master/group__GpadROOT7.html,https://root.cern,https://root.cern/doc/master/group__GpadROOT7.html,1,['log'],['log']
Testability,". ROOT: ROOT::Experimental::RLogChannel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RLogChannel Class Reference. ; A log configuration for a channel, e.g. ; ""RHist"". Each ROOT module has its own log, with potentially distinct verbosity. ; Definition at line 101 of file RLogger.hxx. Public Member Functions;  RLogChannel ()=default;  Construct an anonymous channel. ;  ;  RLogChannel (const std::string &name);  Construct a log channel given its name, which is part of the diagnostics. ;  ;  RLogChannel (ELogLevel verbosity);  Construct an anonymous channel with a default verbosity. ;  ; ELogLevel GetEffectiveVerbosity (const RLogManager &mgr) const;  ; const std::string & GetName () const;  ; ELogLevel GetVerbosity () const;  ; ELogLevel SetVerbosity (ELogLevel verbosity);  ;  Public Member Functions inherited from ROOT::Experimental::RLogDiagCount; long long GetNumErrors () const;  Returns the current number of errors. ;  ; long long GetNumFatalErrors () const;  Returns the current number of fatal errors. ;  ; long long GetNumWarnings () const;  Number of fatal errors. ;  ; void Increment (ELogLevel severity);  Increase warning or error count. ;  . Private Attributes; std::string fName;  Name as shown in diagnostics. ;  ; ELogLevel fVerbosity = ELogLevel::kUnset;  Verbosity of this channel. By default, use the global verbosity. ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constru",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html:285,log,log,285,doc/master/classROOT_1_1Experimental_1_1RLogChannel.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html,3,['log'],['log']
Testability,". ROOT: ROOT::Experimental::RLogChannel Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RLogChannel Class Reference. ; A log configuration for a channel, e.g. ; ""RHist"". Each ROOT module has its own log, with potentially distinct verbosity. ; Definition at line 101 of file RLogger.hxx. Public Member Functions;  RLogChannel ()=default;  Construct an anonymous channel. ;  ;  RLogChannel (const std::string &name);  Construct a log channel given its name, which is part of the diagnostics. ;  ;  RLogChannel (ELogLevel verbosity);  Construct an anonymous channel with a default verbosity. ;  ; ELogLevel GetEffectiveVerbosity (const RLogManager &mgr) const;  ; const std::string & GetName () const;  ; ELogLevel GetVerbosity () const;  ; ELogLevel SetVerbosity (ELogLevel verbosity);  ;  Public Member Functions inherited from ROOT::Experimental::RLogDiagCount; long long GetNumErrors () const;  Returns the current number of errors. ;  ; long long GetNumFatalErrors () const;  Returns the current number of fatal errors. ;  ; long long GetNumWarnings () const;  Number of fatal errors. ;  ; void Increment (ELogLevel severity);  Increase warning or error count. ;  . Private Attributes; std::string fName;  Name as shown in diagnostics. ;  ; ELogLevel fVerbosity = ELogLevel::kUnset;  Verbosity of this channel. By default, use the global verbosity. ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Construc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html:284,log,log,284,doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html,3,['log'],['log']
Testability,". ROOT: ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType > Class Template ReferenceMath » MathCore » Fitting and Parameter Estimation » Fit Method Classes. ; template<class DerivFunType, class ModelFunType = ROOT::Math::IParamMultiFunction>; class ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >class evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case ; Definition at line 46 of file PoissonLikelihoodFCN.h. Public Types; typedef BasicFCN< DerivFunType, ModelFunType, BinData > BaseFCN;  ; typedef BaseObjFunction::BaseFunction BaseFunction;  ; typedef ::ROOT::Math::BasicFitMethodFunction< DerivFunType > BaseObjFunction;  ; typedef ::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunction;  ; typedef ModelFunType::BackendType T;  ; typedef BaseObjFunction::Type_t Type_t;  ;  Public Types inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; typedef FunctionType::BaseFunc BaseFunction;  ; enum  Type_t ;  enumeration specifying the possible fit method types More...;  . Public Member Functions;  PoissonLikelihoodFCN (const BinData &data, const IModelFunction &func, int weight=0, bool extended=true, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential);  Constructor from unbin data set and model function (pdf) managed by the users. ;  ;  PoissonLikelihoodFCN (const PoissonLikelihoodFCN &f);  Copy constructor. ;  ;  PoissonLikelihoodFCN (const std::shared_ptr< BinData > &data, const std::shared_ptr< IModelFunction > &func, int weight=0, bool extended=true, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html:648,log,log,648,doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html,1,['log'],['log']
Testability,". ROOT: ROOT::Math Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT::Math Namespace Reference. Namespaces; namespace  Blas;  ; namespace  BrentMethods;  ; namespace  Cephes;  ; namespace  Chebyshev;  template recursive functions for defining evaluation of Chebyshev polynomials T_n(x) and the series S(x) = Sum_i c_i* T_i(x) ;  ; namespace  CholeskyDecompHelpers;  helpers for CholeskyDecomp ;  ; namespace  detail;  ; namespace  GenAlgoOptUtil;  ; namespace  GenVector;  ; namespace  GenVector_detail;  ; namespace  GSLRootHelper;  Helper functions to test convergence of Root-Finding algorithms. ;  ; namespace  GSLSimAn;  ; namespace  gv_detail;  ; namespace  Impl;  ; namespace  IntegMultiDim;  ; namespace  IntegOneDim;  ; namespace  IntegOptionsUtil;  ; namespace  Integration;  ; namespace  IntegrationMultiDim;  ; namespace  IntegrationOneDim;  ; namespace  Internal;  ; namespace  internal;  ; namespace  Interpolation;  ; namespace  MCIntegration;  ; namespace  Minim;  ; namespace  Minim1D;  ; namespace  Roots;  Root-Finding Algorithms. ;  ; namespace  rowOffsetsUtils;  ; namespace  Sampler;  ; namespace  Util;  namespace defining Utility functions needed by mathcore ;  ; namespace  VectorUtil;  Global Helper functions for generic Vector classes. ;  . Classes; class  AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  AddOp;  Addition Operation Class. More...;  ; struct  AddPolicy;  matrix addition policy More...;  ; struct  AddPolicy< T, D1, D2, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  ; struct  Assign;  Structure to assign from an expression based to general matrix to general matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Dummy Structure which flags an error to avoid assignment from expression based o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math.html:689,test,test,689,doc/master/namespaceROOT_1_1Math.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html,1,['test'],['test']
Testability,". ROOT: ROOT::Math Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT::Math Namespace Reference. Namespaces; namespace  Blas;  ; namespace  BrentMethods;  ; namespace  Cephes;  ; namespace  Chebyshev;  template recursive functions for defining evaluation of Chebyshev polynomials T_n(x) and the series S(x) = Sum_i c_i* T_i(x) ;  ; namespace  CholeskyDecompHelpers;  helpers for CholeskyDecomp ;  ; namespace  detail;  ; namespace  GenAlgoOptUtil;  ; namespace  GenVector;  ; namespace  GenVector_detail;  ; namespace  GSLRootHelper;  Helper functions to test convergence of Root-Finding algorithms. ;  ; namespace  GSLSimAn;  ; namespace  gv_detail;  ; namespace  Impl;  ; namespace  IntegMultiDim;  ; namespace  IntegOneDim;  ; namespace  IntegOptionsUtil;  ; namespace  Integration;  ; namespace  IntegrationMultiDim;  ; namespace  IntegrationOneDim;  ; namespace  Internal;  ; namespace  internal;  ; namespace  Interpolation;  ; namespace  MCIntegration;  ; namespace  Minim;  ; namespace  Minim1D;  ; namespace  Roots;  Root-Finding Algorithms. ;  ; namespace  rowOffsetsUtils;  ; namespace  Sampler;  ; namespace  Util;  namespace defining Utility functions needed by mathcore ;  ; namespace  VectorUtil;  Global Helper functions for generic Vector classes. ;  . Classes; class  AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  AddOp;  Addition Operation Class. More...;  ; struct  AddPolicy;  matrix addition policy More...;  ; struct  AddPolicy< T, D1, D2, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  ; struct  Assign;  Structure to assign from an expression based to general matrix to general matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Dummy Structure which flags an error to avoid assignment from expression based on",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1Math.html:688,test,test,688,doc/v632/namespaceROOT_1_1Math.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html,1,['test'],['test']
Testability,". ROOT: ROOT::Math::Delaunay2D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; ROOT::Math::Delaunay2D Class ReferenceMath » MathCore. ; Class to generate a Delaunay triangulation of a 2D set of points. ; Algorithm based on CDT, a C++ library for generating constraint or conforming Delaunay triangulations.; After having found the triangles using the above library, barycentric coordinates are used to test whether a point is inside a triangle (inTriangle test) and for interpolation. All this below is implemented in the DoInterpolateNormalized function.; Given triangle ABC and point P, P can be expressed by; P.x = la * A.x + lb * B.x + lc * C.x P.y = la * A.y + lb * B.y + lc * C.y; with lc = 1 - la - lb; P.x = la * A.x + lb * B.x + (1-la-lb) * C.x P.y = la * A.y + lb * B.y + (1-la-lb) * C.y; Rearranging yields; la * (A.x - C.x) + lb * (B.x - C.x) = P.x - C.x la * (A.y - C.y) + lb * (B.y - C.y) = P.y - C.y; Thus; la = ( (B.y - C.y)*(P.x - C.x) + (C.x - B.x)*(P.y - C.y) ) / ( (B.y - C.y)*(A.x - C.x) + (C.x - B.x)*(A.y - C.y) ) lb = ( (C.y - A.y)*(P.x - C.x) + (A.x - C.x)*(P.y - C.y) ) / ( (B.y - C.y)*(A.x - C.x) + (C.x - B.x)*(A.y - C.y) ) lc = 1 - la - lb; We save the inverse denominator to speedup computation; invDenom = 1 / ( (B.y - C.y)*(A.x - C.x) + (C.x - B.x)*(A.y - C.y) ); P is in triangle (including edges if; 0 <= [la, lb, lc] <= 1; The interpolation of P.z is; P.z = la * A.z + lb * B.z + lc * C.z; To speed up localisation of points (to see to which triangle belong) a grid is laid over the internal coordinate space. A reference to triangle ABC is added to all grid cells that include ABC's bounding box. The size of the grid is defined to be 25x25; Optionally (if the compiler macro HAS_GCAL is defined ) the t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Delaunay2D.html:664,test,test,664,doc/master/classROOT_1_1Math_1_1Delaunay2D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Delaunay2D.html,2,['test'],['test']
Testability,". ROOT: ROOT::Math::GSLRootHelper Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::Math::GSLRootHelper Namespace Reference. Helper functions to test convergence of Root-Finding algorithms. ; More... Functions; int TestDelta (double x1, double x0, double epsAbs, double epsRel);  ; int TestInterval (double xlow, double xup, double epsAbs, double epsRel);  ; int TestResidual (double f, double epsAbs);  . Detailed Description; Helper functions to test convergence of Root-Finding algorithms. ; Used by ROOT::Math::RootFinder class (see there for the doc) ; Function Documentation. ◆ TestDelta(). int ROOT::Math::GSLRootHelper::TestDelta ; (; double ; x1, . double ; x0, . double ; epsAbs, . double ; epsRel . ). Definition at line 47 of file GSLRootHelper.cxx. ◆ TestInterval(). int ROOT::Math::GSLRootHelper::TestInterval ; (; double ; xlow, . double ; xup, . double ; epsAbs, . double ; epsRel . ). Definition at line 42 of file GSLRootHelper.cxx. ◆ TestResidual(). int ROOT::Math::GSLRootHelper::TestResidual ; (; double ; f, . double ; epsAbs . ). Definition at line 52 of file GSLRootHelper.cxx. ROOTMathGSLRootHelper. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1GSLRootHelper.html:215,test,test,215,doc/master/namespaceROOT_1_1Math_1_1GSLRootHelper.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1GSLRootHelper.html,2,['test'],['test']
Testability,". ROOT: ROOT::Math::GoFTest Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GoFTest Class ReferenceMath » MathCore » Goodness of Fit Tests. ; GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. ; The class implements the AndersonDarling and the KolmogorovSmirnov tests; In the case of the 1-sample test the user needs to provide:; input data; theoretical distribution. The distribution can be provided as a function object (functor) or an object implementing the ROOT::Math::IGenFunction interface. One can provide either the PDF (default) of the CDF (cumulative distribution) One can also provide a pre-defined function. In that case one needs to give also the distribution parameters otherwise the default values will be used. The pre-defined distributions are:; kGaussian with default parameter mean=0, sigma=1; kExponential with default parameter rate=1; kLogNormal with default parameter meanlog=0, sigmalog=1. Note that one should not use data computed distribution parameters, otherwise the test will be biased. The 1-sample KS test using data computed quantities is called Lilliefors test (see https://en.wikipedia.org/wiki/Lilliefors_test) . Definition at line 65 of file GoFTest.h. Public Types; enum  EDistribution { ;   kUndefined; , kUserDefined; , kGaussian; , kLogNormal; , ;   kExponential. };  H0 distributions for using only with 1-sample tests. More...;  ; enum  ETestType { kAD; , kAD2s; , kKS; , kKS2s; };  Goodness of Fit test types for using with the class's unary functions as a shorthand for the in-built methods. More...;  ; enum  EUserDistribution { kCDF; , kPDF; };  User input distribution option. More...;  . Public Member Functions;  GoFT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:480,test,tests,480,doc/master/classROOT_1_1Math_1_1GoFTest.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html,3,['test'],"['test', 'tests']"
Testability,". ROOT: ROOT::Math::Impl Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions ; ROOT::Math::Impl Namespace Reference. Classes; class  Plane3D;  Class describing a geometrical plane in 3 dimensions. More...;  ; class  Transform3D;  Basic 3D Transformation class describing a rotation and then a translation The internal data are a 3D rotation data (represented as a 3x3 matrix) and a 3D vector data. More...;  ; class  Translation3D;  Class describing a 3 dimensional translation. More...;  . Functions; template<typename Scalar > ; Scalar Eta_FromRhoZ (Scalar rho, Scalar z);  Calculate eta given rho and zeta. ;  ; template<typename Scalar > ; Scalar Eta_FromTheta (Scalar theta, Scalar r);  Implementation of eta from -log(tan(theta/2)). ;  ; template<class T > ; Transform3D< T > operator* (const AxisAngle &r, const Transform3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const AxisAngle &r, const Translation3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const EulerAngles &r, const Transform3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const EulerAngles &r, const Translation3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const Quaternion &r, const Transform3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const Quaternion &r, const Translation3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const Rotation3D &r, const Transform3D< T > &t);  combine a rotation and a transformation to give a transform3d First the transformation then the rotation ;  ; template<class T > ; Transform3D< T > operator* (const Rotation3D &r, const Translation3D< T > &t);  combine a translation and a rotation to give a transform3d First the translation then the rotation ;  ; template<class T > ; Transform3D< T > operator* (const RotationX &r, const Transform3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const Rotat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Impl.html:791,log,log,791,doc/master/namespaceROOT_1_1Math_1_1Impl.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Impl.html,1,['log'],['log']
Testability,. ROOT: ROOT::Math::Util Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::Math::Util Namespace Reference. namespace defining Utility functions needed by mathcore ; More... Functions; template<class T > ; T EvalLog (T x);  safe evaluation of log(x) with a protections against negative or zero argument to the log smooth linear extrapolation below function values smaller than epsilon (better than a simple cut-off) ;  ; template<class T > ; std::string ToString (const T &val);  Utility function for conversion to strings. ;  . Detailed Description; namespace defining Utility functions needed by mathcore ; Function Documentation. ◆ EvalLog(). template<class T > . T ROOT::Math::Util::EvalLog ; (; T ; x). inline . safe evaluation of log(x) with a protections against negative or zero argument to the log smooth linear extrapolation below function values smaller than epsilon (better than a simple cut-off) ; Definition at line 64 of file Util.h. ◆ ToString(). template<class T > . std::string ROOT::Math::Util::ToString ; (; const T & ; val). Utility function for conversion to strings. ; Definition at line 50 of file Util.h. ROOTMathUtil. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Util.html:312,log,log,312,doc/master/namespaceROOT_1_1Math_1_1Util.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Util.html,4,['log'],['log']
Testability,". ROOT: ROOT::RBrowserInfoWidget Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RBrowserInfoWidget Class Reference. . Definition at line 136 of file RBrowser.cxx. Public Types; enum  { kMaxContentLen = 10000000; };  . Public Member Functions;  RBrowserInfoWidget (const std::string &name);  ; virtual ~RBrowserInfoWidget ()=default;  ; bool DrawElement (std::shared_ptr< Browsable::RElement > &, const std::string &="""") override;  ; std::string GetKind () const override;  ; std::string GetTitle () override;  ; std::string GetUrl () override;  ; void Refresh ();  ; void RefreshFromLogs (const std::string &promt, const std::vector< std::string > &logs);  ; void ResetConn () override;  ; std::string SendWidgetContent () override;  ; void Show (const std::string &) override;  ;  Public Member Functions inherited from ROOT::RBrowserWidget;  RBrowserWidget (const std::string &name);  ; virtual ~RBrowserWidget ()=default;  ; virtual void CheckModified ();  ; RBrowser * GetBrowser () const;  ; const std::string & GetName () const;  ; const Browsable::RElementPath_t & GetPath () const;  ; virtual bool IsValid ();  ; std::string SendWidgetTitle ();  Returns string which can be send to browser client to set/change title of the widget tab. ;  ; virtual void SetActive ();  ; void SetPath (const Browsable::RElementPath_t &path);  . Public Attributes; std::string fContent;  ; bool fFirstSend {false};  ! if editor content was send at least once ;  ; std::string fTitle;  . Inheritance diagram for ROOT::RBrowserInfoWidget:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkMaxContentLen . Definition at line 139 of file RBrowser.cxx. Constructor & Destructor Documentation. ◆ RBrowserInfoWidget(). ROOT::R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RBrowserInfoWidget.html:815,log,logs,815,doc/master/classROOT_1_1RBrowserInfoWidget.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RBrowserInfoWidget.html,1,['log'],['logs']
Testability,". ROOT: ROOT::RBrowserInfoWidget Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RBrowserInfoWidget Class Reference. . Definition at line 136 of file RBrowser.cxx. Public Types; enum  { kMaxContentLen = 10000000; };  . Public Member Functions;  RBrowserInfoWidget (const std::string &name);  ; virtual ~RBrowserInfoWidget ()=default;  ; bool DrawElement (std::shared_ptr< Browsable::RElement > &, const std::string &="""") override;  ; std::string GetKind () const override;  ; std::string GetTitle () override;  ; std::string GetUrl () override;  ; void Refresh ();  ; void RefreshFromLogs (const std::string &promt, const std::vector< std::string > &logs);  ; void ResetConn () override;  ; std::string SendWidgetContent () override;  ; void Show (const std::string &) override;  ;  Public Member Functions inherited from ROOT::RBrowserWidget;  RBrowserWidget (const std::string &name);  ; virtual ~RBrowserWidget ()=default;  ; virtual void CheckModified ();  ; RBrowser * GetBrowser () const;  ; const std::string & GetName () const;  ; const Browsable::RElementPath_t & GetPath () const;  ; std::string SendWidgetTitle ();  Returns string which can be send to browser client to set/change title of the widget tab. ;  ; virtual void SetActive ();  ; void SetPath (const Browsable::RElementPath_t &path);  . Public Attributes; std::string fContent;  ; bool fFirstSend {false};  ! if editor content was send at least once ;  ; std::string fTitle;  . Inheritance diagram for ROOT::RBrowserInfoWidget:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkMaxContentLen . Definition at line 139 of file RBrowser.cxx. Constructor & Destructor Documentation. ◆ RBrowserInfoWidget(). ROOT::RBrowserInfoWidget::RBrowserIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RBrowserInfoWidget.html:814,log,logs,814,doc/v632/classROOT_1_1RBrowserInfoWidget.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserInfoWidget.html,1,['log'],['logs']
Testability,". ROOT: RooConstraintSum Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooConstraintSum Class ReferenceRooFit » RooFit Core. ; Calculates the sum of the -(log) likelihoods of a set of RooAbsPfs that represent constraint functions. ; This class is used to calculate the composite -log(L) of constraints to be added to the regular -log(L) in RooAbsPdf::fitTo() with Constrain(..) arguments. ; Definition at line 27 of file RooConstraintSum.h. Public Member Functions;  RooConstraintSum ();  ;  RooConstraintSum (const char *name, const char *title, const RooArgSet &constraintSet, const RooArgSet &paramSet, bool takeGlobalObservablesFromData=false);  Constructor with set of constraint p.d.f.s. All elements in constraintSet must inherit from RooAbsPdf. ;  ;  RooConstraintSum (const RooConstraintSum &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; void doEval (RooFit::EvalContext &) const override;  Base function for computing multiple values of a RooAbsReal. ;  ; TClass * IsA () const override;  ; const RooArgList & list ();  ; bool setData (RooAbsData &data, bool cloneData=true) override;  Replace the variables in this RooConstraintSum with the global observables in the dataset if they match by name. ;  ; bool setData (RooAbsData const &data, bool cloneData=true);  Replace the variables in this RooConstraintSum with the global observables in the dataset if they match by name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooConstraintSum.html:367,log,log,367,doc/master/classRooConstraintSum.html,https://root.cern,https://root.cern/doc/master/classRooConstraintSum.html,3,['log'],['log']
Testability,". ROOT: RooDLLSignificanceMCSModule Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooDLLSignificanceMCSModule Class ReferenceRooFit » RooFit Core. ; Add-on module to RooMCStudy that calculates the significance of a signal by comparing the likelihood of a fit fit with a given parameter floating with a fit with that given parameter fixed to a nominal value (usually zero). ; The difference in the -log(L) of those two fits can be interpreted as the probability that a statistical background fluctation may result in a signal as large or larger than the signal observed. This interpretation is contingent on underlying normal sampling distributions and a MC study is a good way to test that assumption. ; Definition at line 23 of file RooDLLSignificanceMCSModule.h. Public Member Functions;  RooDLLSignificanceMCSModule (const char *parName, double nullHypoValue=0.0);  Constructor of module with parameter name to be interpreted as nSignal and the value of the null hypothesis for nSignal (usually zero) ;  ;  RooDLLSignificanceMCSModule (const RooDLLSignificanceMCSModule &other);  Copy constructor. ;  ;  RooDLLSignificanceMCSModule (const RooRealVar &param, double nullHypoValue=0.0);  Constructor of module with parameter to be interpreted as nSignal and the value of the null hypothesis for nSignal (usually zero) ;  ;  ~RooDLLSignificanceMCSModule () override;  ; RooDataSet * finalizeRun () override;  Return auxiliary dataset with results of delta(-log(L)) calculations of this module so that it is merged with RooMCStudy::fitParDataSet() by RooMCStudy. ;  ; bool initializeInstance () override;  Initialize module after attachment to RooMCStudy object. ;  ; bool initializeRun (Int_t) override;  Initialize module at beginning of RooCMStudy run. ;  ; TClass * IsA () const override;  ; bool processAfterFit (Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDLLSignificanceMCSModule.html:578,log,log,578,doc/master/classRooDLLSignificanceMCSModule.html,https://root.cern,https://root.cern/doc/master/classRooDLLSignificanceMCSModule.html,2,"['log', 'test']","['log', 'test']"
Testability,". ROOT: RooFit Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions ; RooFit Namespace Reference. The namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or other types of arguments). ; More... Namespaces; namespace  Detail;  ; namespace  Experimental;  ; namespace  JSONIO;  ; namespace  MultiProcess;  ; namespace  TestStatistics;  Namespace for new RooFit test statistic calculation. ;  . Classes; class  EvalBackend;  ; class  EvalContext;  ; class  Evaluator;  Evaluates a RooAbsReal object in other ways than recursive graph traversal. More...;  ; struct  NodeInfo;  A struct used by the Evaluator to store information on the RooAbsArgs in the computation graph. More...;  ; struct  UniqueId;  A UniqueId can be added as a class member to enhance any class with a unique identifier for each instantiated object. More...;  . Typedefs; typedef double(* CFUNCD1D) (double);  ; typedef double(* CFUNCD1I) (Int_t);  ; typedef double(* CFUNCD2DD) (double, double);  ; typedef double(* CFUNCD2DI) (double, Int_t);  ; typedef double(* CFUNCD2ID) (Int_t, double);  ; typedef double(* CFUNCD2II) (Int_t, Int_t);  ; typedef double(* CFUNCD2UD) (UInt_t, double);  ; typedef double(* CFUNCD3DDB) (double, double, bool);  ; typedef double(* CFUNCD3DDD) (double, double, double);  ; typedef double(* CFUNCD3DII) (double, Int_t, Int_t);  ; typedef double(* CFUNCD3UDD) (UInt_t, double, double);  ; typedef double(* CFUNCD3UDU) (UInt_t, double, UInt_t);  ; typedef double(* CFUNCD3UUD) (UInt_t, UInt_t, double);  ; typedef double(* CFUNCD4DDDB) (double, double, double, bool);  ; typedef double(* CFUNCD4DDDD) (double, double, double, double);  ; typedef double(* CFUNCD4DDDI) (double, double, double, Int_t);  ; using ModelConfig = RooStats::ModelConfig;  ; template<typename T > ; using OwningPtr = T *;  An alias for raw pointers for indicating that the retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceRooFit.html:509,test,test,509,doc/master/namespaceRooFit.html,https://root.cern,https://root.cern/doc/master/namespaceRooFit.html,1,['test'],['test']
Testability,". ROOT: RooFit. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules ; RooFit. ; RooFit is a package for building likelihood models and fitting these to data. ; For an introduction check the RooFit Tutorials, user's guides, courses or the RooFit chapter of the Manual.; For developers, there is also the RooFit Developer Documentation, which serves as a reference on how to extend RooFit with custom classes or for contributing to RooFit itself. . Modules;  RooFit Developer Documentation;  How-to guides on how to extend RooFit with custom classes or to work on RooFit itself. ;  ;  RooFit;  RooFit main classes for building likelihood models, mainly PDFs. ;  ;  RooFit Core;  RooFit core classes. These provide the infrastructure for building likelihood models. ;  ;  RooFit Legacy;  Old RooFit classes. ;  ;  RooFit command arguments;  These arguments can be passed to functions of RooFit objects. ;  ;  RooFit More;  RooFit components that are only available if ROOT was built with the mathmore option. ;  ;  RooStats;  RooStats is a toolkit for statistical tests built on top of RooFit. ;  ;  xRooFit;  A high-level API for RooFit. ;  ;  RooFit Pythonizations;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Roofitmain.html:1098,test,tests,1098,doc/master/group__Roofitmain.html,https://root.cern,https://root.cern/doc/master/group__Roofitmain.html,1,['test'],['tests']
Testability,". ROOT: RooFit::MultiProcess::HeatmapAnalyzer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; RooFit::MultiProcess::HeatmapAnalyzer Class Reference. ; Reads and processes logfiles produced by RooFit::MultiProcess::ProcessTimer. ; RooFit::MultiProcess::ProcessTimer records timings of multiple processes simultaneously and allows for these timings to be written out in json format, one for each process. This class, the HeatmapAnalyzer, can read these json files and produce a heatmap from them with partial derivatives on the y-axis, likelihood evaluations on the x-axis, and time expenditures on the z-axis. This class also contains some convenience functions for inspecting these log files.; Note that this class requires the logfiles to contain three specific keys in the json:; master:gradient containing an array of gradient timestamps; *eval_task*<task_number> containing an array of task evaluation timestamps.; *eval_partition* containing an array of partition evaluation timestamps . Definition at line 34 of file HeatmapAnalyzer.h. Public Member Functions;  HeatmapAnalyzer (std::string const &logs_dir);  HeatmapAnalyzer Constructor. ;  ;  ~HeatmapAnalyzer ();  ; std::unique_ptr< TH2I > analyze (int analyzed_gradient);  This method is the main functionality in this class. ;  ; std::vector< std::string > const getMetadata ();  ; std::vector< std::string > const getPartitionNames ();  ; std::vector< std::string > const getTaskNames ();  . Private Attributes; std::vector< std::string > eval_partitions_names_;  ; std::unique_ptr< Detail::HeatmapAnalyzerJsonData > jsonData_;  ; TH2I matrix_;  ; std::vector< std::string > tasks_names_;  . #include <RooFit/MultiProcess/HeatmapAnalyzer.h>; Constructor & Destructor Documentation. ◆ HeatmapAnalyzer(). RooFit::MultiProcess::HeatmapAnalyzer::HeatmapAnalyzer ; (; std::string const & ; logs_dir).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFit_1_1MultiProcess_1_1HeatmapAnalyzer.html:315,log,logfiles,315,doc/master/classRooFit_1_1MultiProcess_1_1HeatmapAnalyzer.html,https://root.cern,https://root.cern/doc/master/classRooFit_1_1MultiProcess_1_1HeatmapAnalyzer.html,3,['log'],"['log', 'logfiles']"
Testability,". ROOT: RooLognormal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooLognormal Class ReferenceRooFit » RooFit. ; RooFit Lognormal PDF. ; The two parameters are:; m0: the median of the distribution; k = exp(sigma): sigma is called the shape parameter in the TMath parameterization. \[; \mathrm{RooLognormal}(x \, | \, m_0, k) = \frac{1}{\sqrt{2\pi \cdot \ln(k) \cdot x}} \cdot \exp\left(; \frac{-\ln^2(\frac{x}{m_0})}{2 \ln^2(k)} \right) \]. The parameterization here is physics driven and differs from the ROOT::Math::lognormal_pdf() in x,m,s,x0 with:; m = log(m0); s = log(k); x0 = 0 . Definition at line 17 of file RooLognormal.h. Public Member Functions;  RooLognormal ();  ;  RooLognormal (const char *name, const char *title, RooAbsReal &_x, RooAbsReal &_m0, RooAbsReal &_k, bool useStandardParametrization=false);  ;  RooLognormal (const RooLognormal &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; std::string buildCallToAnalyticIntegral (int code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; void generateEvent (Int_t code) override;  Interface for generation of an event using the algorithm corresponding to the specified code. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLognormal.html:770,log,log,770,doc/master/classRooLognormal.html,https://root.cern,https://root.cern/doc/master/classRooLognormal.html,2,['log'],['log']
Testability,". ROOT: RooMCStudy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; RooMCStudy Class ReferenceRooFit » RooFit Core. ; Helper class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets. ; These may be generated from either same PDF or from a different PDF with similar parameters.; Given a fit and a generator PDF (they might be identical), RooMCStudy can produce toyMC samples and/or fit these. It accumulates the post-fit parameters of each iteration in a dataset. These can be retrieved using fitParams() or fitParDataSet(). This dataset additionally contains the variables; NLL: The value of the negative log-likelihood for each run.; ngen: The number of events generated for each run. Additional plotting routines simplify the task of plotting the distribution of the minimized likelihood, the fitted parameter values, fitted error and pull distribution.; RooMCStudy provides the option to insert add-in modules that modify the generate-and-fit cycle and allow to perform extra steps in the cycle. Output of these modules can be stored alongside the fit results in the aggregate results dataset. These study modules should derive from the class RooAbsMCStudyModule.; Check the RooFit tutorials; rf801_mcstudy.C; rf802_mcstudy_addons.C; rf803_mcstudy_addons2.C; rf804_mcstudy_constr.C for usage examples. PyROOT; Some member functions of RooMCStudy that take a RooCmdArg as argument also support keyword arguments. So far, this applies to constructor RooMCStudy(), RooMCStudy::plotParamOn, RooMCStudy::plotParam, RooMCStudy::plotNLL, RooMCStudy::plotError and RooMCStudy::plotPull. For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMCStudy.html:932,log,log-likelihood,932,doc/master/classRooMCStudy.html,https://root.cern,https://root.cern/doc/master/classRooMCStudy.html,1,['log'],['log-likelihood']
Testability,". ROOT: RooNDKeysPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooNDKeysPdf Class ReferenceRooFit » RooFit. ; Generic N-dimensional implementation of a kernel estimation p.d.f. ; This p.d.f. models the distribution of an arbitrary input dataset as a superposition of Gaussian kernels, one for each data point, each contributing 1/N to the total integral of the p.d.f. If the 'adaptive mode' is enabled, the width of the Gaussian is adaptively calculated from the local density of events, i.e. narrow for regions with high event density to preserve details and wide for regions with log event density to promote smoothness. The details of the general algorithm are described in the following paper: Cranmer KS, Kernel Estimation in High-Energy Physics. Computer Physics Communications 136:198-207,2001 - e-Print Archive: hep ex/0011057 For multi-dimensional datasets, the kernels are modeled by multidimensional Gaussians. The kernels are constructed such that they reflect the correlation coefficients between the observables in the input dataset. ; Definition at line 44 of file RooNDKeysPdf.h. Classes; struct  BoxInfo;  . Public Types; enum  Mirror { ;   NoMirror; , MirrorLeft; , MirrorRight; , MirrorBoth; , ;   MirrorAsymLeft; , MirrorAsymLeftRight; , MirrorAsymRight; , MirrorLeftAsymRight; , ;   MirrorAsymBoth. };  ;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNDKeysPdf.html:825,log,log,825,doc/master/classRooNDKeysPdf.html,https://root.cern,https://root.cern/doc/master/classRooNDKeysPdf.html,1,['log'],['log']
Testability,". ROOT: RooNonCentralChiSquare Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooNonCentralChiSquare Class ReferenceRooFit » RooFit. ; The PDF of the Non-Central Chi Square distribution for n degrees of freedom. ; It is the asymptotic distribution of the profile likelihood ratio test q_mu when a different mu' is true. It is Wald's generalization of Wilks' Theorem.; See:; Asymptotic formulae for likelihood-based tests of new physics; By Glen Cowan, Kyle Cranmer, Eilam Gross, Ofer Vitells http://arXiv.org/abs/arXiv:1007.1727; Wikipedia; It requires MathMore to evaluate for non-integer degrees of freedom, k.; When the Mathmore library is available we can use the MathMore libraries implemented using GSL. It makes use of the modified Bessel function of the first kind (for k > 2). For k < 2 it uses the hypergeometric function 0F1. When is not available we use explicit summation of normal chi-squared distributions The usage of the sum can be forced by calling SetForceSum(true);; This implementation could be improved. BOOST has a nice implementation:; http://live.boost.org/doc/libs/1_42_0/libs/math/doc/sf_and_dist/html/math_toolkit/dist/dist_ref/dists/nc_chi_squared_dist.html; http://wesnoth.repositoryhosting.com/trac/wesnoth_wesnoth/browser/trunk/include/boost/math/distributions/non_central_chi_squared.hpp?rev=6 ; Definition at line 20 of file RooNonCentralChiSquare.h. Public Member Functions;  RooNonCentralChiSquare ();  ;  RooNonCentralChiSquare (const char *name, const char *title, RooAbsReal &_x, RooAbsReal &_k, RooAbsReal &_lambda);  ;  RooNonCentralChiSquare (const RooNonCentralChiSquare &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advert",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNonCentralChiSquare.html:491,test,test,491,doc/master/classRooNonCentralChiSquare.html,https://root.cern,https://root.cern/doc/master/classRooNonCentralChiSquare.html,2,['test'],"['test', 'tests']"
Testability,". ROOT: RooProfileLL Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooProfileLL Class ReferenceRooFit » RooFit Core. ; Implements the profile likelihood estimator for a given likelihood and set of parameters of interest. ; The value return by RooProfileLL is the input likelihood nll minimized w.r.t all nuisance parameters (which are all parameters except for those listed in the constructor) minus the -log(L) of the best fit. Note that this function is slow to evaluate as a MIGRAD minimization step is executed for each function evaluation ; Definition at line 22 of file RooProfileLL.h. Public Member Functions;  RooProfileLL ();  Default constructor Should only be used by proof. ;  ;  RooProfileLL (const char *name, const char *title, RooAbsReal &nll, const RooArgSet &observables);  Constructor of profile likelihood given input likelihood nll w.r.t the given set of variables. ;  ;  RooProfileLL (const RooProfileLL &other, const char *name=nullptr);  Copy constructor. ;  ; bool alwaysStartFromMin () const;  ; const RooArgSet & bestFitObs () const;  ; const RooArgSet & bestFitParams () const;  ; void clearAbsMin ();  ; TObject * clone (const char *newname) const override;  ; RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest) override;  Optimized implementation of createProfile for profile likelihoods. ;  ; TClass * IsA () const override;  ; RooMinimizer * minimizer ();  ; RooAbsReal & nll ();  ; Int_t numEval () const;  ; bool redirectServersHook (const RooAbsCollection &, bool, bool, bool) override;  Function that is called at the end of redirectServers(). ;  ; void setAlwaysStartFromMin (bool flag);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProfileLL.html:617,log,log,617,doc/master/classRooProfileLL.html,https://root.cern,https://root.cern/doc/master/classRooProfileLL.html,1,['log'],['log']
Testability,". ROOT: RooRealIntegral Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; RooRealIntegral Class ReferenceRooFit » RooFit Core. ; Performs hybrid numerical/analytical integrals of RooAbsReal objects. ; The class performs none of the actual integration, but only manages the logic of what variables can be integrated analytically, accounts for eventual jacobian terms and defines what numerical integrations needs to be done to complement the analytical integral. The actual analytical integrations (if any) are done in the PDF themselves, the numerical integration is performed in the various implementations of the RooAbsIntegrator base class. ; Definition at line 29 of file RooRealIntegral.h. Public Member Functions;  RooRealIntegral ();  ;  RooRealIntegral (const char *name, const char *title, const RooAbsReal &function, const RooArgSet &depList, const RooArgSet *funcNormSet=nullptr, const RooNumIntConfig *config=nullptr, const char *rangeName=nullptr);  Construct integral of 'function' over observables in 'depList' in range 'rangeName' with normalization observables 'funcNormSet' (for p.d.f.s). ;  ;  RooRealIntegral (const RooRealIntegral &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooRealIntegral () override;  ; const RooArgSet & anaIntVars () const;  ; TObject * clone (const char *newname) const override;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const override;  Create an object that represents the integral of the fu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealIntegral.html:559,log,logic,559,doc/master/classRooRealIntegral.html,https://root.cern,https://root.cern/doc/master/classRooRealIntegral.html,1,['log'],['logic']
Testability,". ROOT: RooSpline Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooSpline Class ReferenceRooFit » RooFit. ; A RooFit class for creating spline functions. ; This class provides the functionality to create spline functions in RooFit, , using ROOT TSpline. It supports splines of order 3 or 5. It also support interpolation in the log-space (x or y), for example exp(spline({x0}, {log y0})), useful when you have something (as xsections) that is more similar to exponentials than polynomials.; Usage example: RooRealVar x{""x"", ""x"", 0, 5};; ; std::vector<double> x0{1., 2, 3};; std::vector<double> y0{10., 20, 50};; ; RooSpline spline{""myspline"", ""my spline"", x, x0, y0};; ; auto frame = x.frame();; spline.plotOn(frame);; frame->Draw();; RooAbsReal::plotOnvirtual RooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) constPlot (project) PDF on specified frame.Definition RooAbsReal.cxx:1611; RooPlot::Drawvoid Draw(Option_t *options=nullptr) overrideDraw this plot and all of the elements it contains.Definition RooPlot.cxx:637; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; RooSplineA RooFit class for creating spline functions.Definition RooSpline.h:27; xDouble_t x[n]Definition legend1.C:17. Definition at line 27 of file RooSpline.h. Public Member Functions;  RooSpline ()=default;  ;  RooSpline (const char *name, const char *title, RooAbsReal &x, const TGraph &gr, int order=3, bool logx=false, bool logy=false);  Constructor for creating a spline from a TGraph. ;  ;  RooSpline (const char *name, const char ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSpline.html:538,log,log-space,538,doc/master/classRooSpline.html,https://root.cern,https://root.cern/doc/master/classRooSpline.html,2,['log'],"['log', 'log-space']"
Testability,. ROOT: RooStats Tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; RooStats TutorialsTutorials. ; These tutorials illustrate the main features of RooStats. . Files; file  FourBinInstructional.C;   This example is a generalization of the on/off problem. ;  ; file  FourBinInstructional.py;   This example is a generalization of the on/off problem. ;  ; file  HybridInstructional.C;   Example demonstrating usage of HybridCalcultor ;  ; file  HybridStandardForm.C;   A hypothesis testing example based on number counting with background uncertainty. ;  ; file  IntervalExamples.C;   Example showing confidence intervals with four techniques. ;  ; file  IntervalExamples.py;   Example showing confidence intervals with four techniques. ;  ; file  ModelInspector.C;  RooStats Model Inspector. ;  ; file  MultivariateGaussianTest.C;   Comparison of MCMC and PLC in a multi-variate gaussian problem ;  ; file  MultivariateGaussianTest.py;   Comparison of MCMC and PLC in a multi-variate gaussian problem ;  ; file  OneSidedFrequentistUpperLimitWithBands.C;   OneSidedFrequentistUpperLimitWithBands ;  ; file  rs101_limitexample.C;   Limits: number counting experiment with uncertainty on both the background rate and signal efficiency. ;  ; file  rs101_limitexample.py;   Limits: number counting experiment with uncertainty on both the background rate and signal efficiency. ;  ; file  rs102_hypotestwithshapes.C;   A typical search for a new particle by studying an invariant mass distribution ;  ; file  rs301_splot.C;   SPlot tutorial ;  ; file  rs302_JeffreysPriorDemo.C;   tutorial demonstrating and validates the RooJeffreysPrior class ;  ; file  rs401c_FeldmanCousins.C;   Produces an interval on the mean signal in a number counting experiment with known background using the Feldman-Cousins technique. ;  ; file  rs401c_FeldmanCousins.py;   Produces an interval on the mean signal in a number counting experiment with known background using the Fel,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__roostats.html:528,test,testing,528,doc/master/group__tutorial__roostats.html,https://root.cern,https://root.cern/doc/master/group__tutorial__roostats.html,1,['test'],['testing']
Testability,". ROOT: RooStats::HistFactory::RooBarlowBeestonLL Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooStats::HistFactory::RooBarlowBeestonLL Class ReferenceRooFit » RooStats » HistFactory. ; Class RooBarlowBeestonLL implements the profile likelihood estimator for a given likelihood and set of parameters of interest. ; The value return by RooBarlowBeestonLL is the input likelihood nll minimized w.r.t all nuisance parameters (which are all parameters except for those listed in the constructor) minus the -log(L) of the best fit. Note that this function is slow to evaluate as a MIGRAD minimization step is executed for each function evaluation ; Definition at line 25 of file RooBarlowBeestonLL.h. Classes; class  BarlowCache;  . Public Member Functions;  RooBarlowBeestonLL ();  Default constructor. Should only be used by proof. ;  ;  RooBarlowBeestonLL (const char *name, const char *title, RooAbsReal &nll);  ;  RooBarlowBeestonLL (const RooBarlowBeestonLL &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; bool getParameters (const RooArgSet *depList, RooArgSet &outputSet, bool stripDisconnected=true) const override;  Fills a list with leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; void initializeBarlowCache ();  ; TClass * IsA () const override;  ; RooAbsReal & nll ();  ; void setDataset (RooAbsData *data);  ; void setPdf (RooAbsPdf *pdf);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1RooBarlowBeestonLL.html:728,log,log,728,doc/master/classRooStats_1_1HistFactory_1_1RooBarlowBeestonLL.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1RooBarlowBeestonLL.html,1,['log'],['log']
Testability,". ROOT: RooStats::HypoTestInverterPlot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooStats::HypoTestInverterPlot Class ReferenceRooFit » RooStats. ; Class to plot a HypoTestInverterResult, the output of the HypoTestInverter calculator. ; It can be used to plot the obtained p-values ( CLb, CLs+b or CLs) for each scanned point, as well as the test statistic distributions (when a calculator based on pseudo-experiments is used) for the two hypotheses. ; Definition at line 26 of file HypoTestInverterPlot.h. Public Member Functions;  HypoTestInverterPlot (const char *name, const char *title, HypoTestInverterResult *results);  constructor with name and title from a HypoTestInverterResult class ;  ;  HypoTestInverterPlot (HypoTestInverterResult *results);  constructor ;  ;  ~HypoTestInverterPlot () override;  destructor ;  ; void Draw (Option_t *opt="""") override;  Draw the scan result in the current canvas Possible options: """" (default): draw observed + expected with 1 and 2 sigma bands SAME : draw in the current axis OBS : draw only the observed plot EXP : draw only the expected plot CLB : draw also CLb 2CL : drow both CLs+b and CLs. ;  ; TClass * IsA () const override;  ; TMultiGraph * MakeExpectedPlot (double sig1=1, double sig2=2);  Make the expected plot and the bands nsig1 and nsig2 indicates the n-sigma value for the bands if nsig1 = 0 no band is computed (only expected value) if nsig2 > nsig1 (default is nsig1=1 and nsig2=2) the second band is also done. ;  ; TGraphErrors * MakePlot (Option_t *opt="""");  return a TGraphErrors with the obtained observed p-values resultinf from the scan By default (Option = """") return CLs or CLsb depending if the flag UseCLs is set If Option = ""CLb"" return CLb plot = ""CLs+b"" return CLs+b plot independently of the flag = ""CLs"" return CLs plot independently o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterPlot.html:526,test,test,526,doc/master/classRooStats_1_1HypoTestInverterPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterPlot.html,1,['test'],['test']
Testability,". ROOT: RooStats::HypoTestInverterResult Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; RooStats::HypoTestInverterResult Class ReferenceRooFit » RooStats. ; HypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval. ; Based on the RatioFinder code available in the RooStatsCms package developed by Gregory Schott and Danilo Piparo Ported and adapted to RooStats by Gregory Schott Some contributions to this class have been written by Matthias Wolf (error estimation) ; Definition at line 26 of file HypoTestInverterResult.h. Public Types; enum  InterpolOption_t { kLinear; , kSpline; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  HypoTestInverterResult (const char *name, const RooRealVar &scannedVariable, double cl);  constructor ;  ;  HypoTestInverterResult (const char *name=nullptr);  default constructor ;  ;  HypoTestInverterResult (const HypoTestInverterResult &other, const char *name);  copy constructor ;  ;  ~HypoTestInverterResult () override;  destructor ;  ; bool Add (const HypoTestInverterResult &otherResult);  merge with the content of another",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterResult.html:483,test,test,483,doc/master/classRooStats_1_1HypoTestInverterResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterResult.html,1,['test'],['test']
Testability,". ROOT: RooStats::HypoTestResult Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; RooStats::HypoTestResult Class ReferenceRooFit » RooStats. ; HypoTestResult is a base class for results from hypothesis tests. ; Any tool inheriting from HypoTestCalculator can return a HypoTestResult. As such, it stores a p-value for the null-hypothesis (eg. background-only) and an alternate hypothesis (eg. signal+background). The p-values can also be transformed into confidence levels ( \(CL_{b}\), \(CL_{s+b}\)) in a trivial way. The ratio of the \(CL_{s+b}\) to \(CL_{b}\) is often called \(CL_{s}\), and is considered useful, though it is not a probability. Finally, the p-value of the null can be transformed into a number of equivalent Gaussian sigma using the Significance method.; The p-value of the null for a given test statistic is rigorously defined and this is the starting point for the following conventions. Conventions used in this class; The p-value for the null and alternate are on the same side of the observed value of the test statistic. This is the more standard convention and avoids confusion when doing inverted tests.; For exclusion, we also want the formula \(CL_{s} = CL_{s+b} / CL_{b}\) to hold which therefore defines our conventions for \(CL_{s+b}\) and \(CL_{b}\). \(CL_{s}\) was specifically invented for exclusion and therefore all quantities need be related through the assignments as they are for exclusion: \(CL_{s+b} = p_{s+b}\); \(CL_{b} = p_{b}\). This is derived by considering the scenarios of a powerful and not powerful inverted test, where for the not so powerful test, \(CL_{s}\) must be close to one.; For results of Hypothesis tests, \(CL_{s}\) has no similar direct interpretation as for exclusion and can be larger than one. ; Definition at line 22 of file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html:409,test,tests,409,doc/master/classRooStats_1_1HypoTestResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html,1,['test'],['tests']
Testability,". ROOT: RooStats::LikelihoodInterval Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooStats::LikelihoodInterval Class ReferenceRooFit » RooStats. ; LikelihoodInterval is a concrete implementation of the RooStats::ConfInterval interface. ; It implements a connected N-dimensional intervals based on the contour of a likelihood ratio. The boundary of the interval is equivalent to a MINUIT/MINOS contour about the maximum likelihood estimator; The interval does not need to be an ellipse (eg. it is not the HESSE error matrix). The level used to make the contour is the same as that used in MINOS, eg. it uses Wilks' theorem, which states that under certain regularity conditions the function -2* log (profile likelihood ratio) is asymptotically distributed as a chi^2 with N-dof, where N is the number of parameters of interest.; Note, a boundary on the parameter space (eg. s>= 0) or a degeneracy (eg. mass of signal if Nsig = 0) can lead to violations of the conditions necessary for Wilks' theorem to be true.; Also note, one can use any RooAbsReal as the function that will be used in the contour; however, the level of the contour is based on Wilks' theorem as stated above.; References. F. James., Minuit.Long writeup D506, CERN, 1998. . Definition at line 34 of file LikelihoodInterval.h. Public Member Functions;  LikelihoodInterval (const char *name, RooAbsReal *, const RooArgSet *, RooArgSet *=nullptr);  Alternate constructor taking a pointer to the profile likelihood ratio, parameter of interest and optionally a snapshot of best parameter of interest for interval. ;  ;  LikelihoodInterval (const char *name=nullptr);  default constructor ;  ;  ~LikelihoodInterval () override;  destructor ;  ; bool CheckParameters (const RooArgSet &) const override;  check if parameters are ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1LikelihoodInterval.html:905,log,log,905,doc/master/classRooStats_1_1LikelihoodInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1LikelihoodInterval.html,1,['log'],['log']
Testability,". ROOT: RooStats::SamplingDistribution Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooStats::SamplingDistribution Class ReferenceRooFit » RooStats. ; This class simply holds a sampling distribution of some test statistic. ; The distribution can either be an empirical distribution (eg. the samples themselves) or a weighted set of points (eg. for the FFT method). The class supports merging. ; Definition at line 28 of file SamplingDistribution.h. Public Member Functions;  SamplingDistribution ();  Default constructor for SamplingDistribution. ;  ;  SamplingDistribution (const char *name, const char *title, const char *varName=nullptr);  SamplingDistribution constructor (with name and title) ;  ;  SamplingDistribution (const char *name, const char *title, RooDataSet &dataSet, const char *columnName=nullptr, const char *varName=nullptr);  Creates a SamplingDistribution from a RooDataSet for debugging purposes; e.g. ;  ;  SamplingDistribution (const char *name, const char *title, std::vector< double > &samplingDist, const char *varName=nullptr);  Constructor for SamplingDistribution. ;  ;  SamplingDistribution (const char *name, const char *title, std::vector< double > &samplingDist, std::vector< double > &sampleWeights, const char *varName=nullptr);  SamplingDistribution constructor. ;  ;  ~SamplingDistribution () override;  Destructor of SamplingDistribution. ;  ; void Add (const SamplingDistribution *other);  merge two sampling distributions ;  ; double CDF (double x) const;  calculate CDF as a special case of Integral(...) with lower limit equal to -inf ;  ; const std::vector< double > & GetSampleWeights () const;  Get the sampling weights. ;  ; const std::vector< double > & GetSamplingDistribution () const;  Get test statistics values. ;  ; Int_t GetSize () co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SamplingDistribution.html:418,test,test,418,doc/master/classRooStats_1_1SamplingDistribution.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SamplingDistribution.html,1,['test'],['test']
Testability,". ROOT: RooStats::UpperLimitMCSModule Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooStats::UpperLimitMCSModule Class ReferenceRooFit » RooStats. ; This class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated. ; Definition at line 27 of file UpperLimitMCSModule.h. Public Member Functions;  UpperLimitMCSModule (const RooArgSet *poi, double CL=0.95);  ;  UpperLimitMCSModule (const UpperLimitMCSModule &other);  Copy constructor. ;  ;  ~UpperLimitMCSModule () override;  Destructor. ;  ; RooDataSet * finalizeRun () override;  Return auxiliary dataset with results of delta(-log(L)) calculations of this module so that it is merged with RooMCStudy::fitParDataSet() by RooMCStudy. ;  ; bool initializeInstance () override;  Initialize module after attachment to RooMCStudy object. ;  ; bool initializeRun (Int_t) override;  Initialize module at beginning of RooCMStudy run. ;  ; TClass * IsA () const override;  ; bool processBetweenGenAndFit (Int_t) override;  Method called after generation of toy data sample and resetting of fit parameters to initial values and before actual fit is performed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsMCStudyModule;  RooAbsMCStudyModule (const char *name, const char *title);  Constructor. ;  ;  RooAbsMCStudyModule (const RooAbsMCStudyModule &other);  Copy constructor. ;  ; bool doInitializeInstance (RooMCStudy &);  Initializer method called upon attachment to given RooMCStudy object. ;  ; virtual bool processAfterFit (Int_t);  Method called after fit has been performed. ;  ; virtual bool processBeforeGen (Int_t);  Method called after resetting of generator par",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1UpperLimitMCSModule.html:819,log,log,819,doc/master/classRooStats_1_1UpperLimitMCSModule.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1UpperLimitMCSModule.html,1,['log'],['log']
Testability,. ROOT: SQL tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; SQL tutorialsTutorials. ; Examples showing the SQL classes. . Files; file  sqlcanvas.C;  This is slight modification of ntuple1.C example. ;  ; file  sqlcreatedb.C;  Create a runcatalog table in a MySQL test database. ;  ; file  sqlcreatedb.py;   Create a runcatalog table in a MySQL test database. ;  ; file  sqlfilldb.C;  Fill run catalog with nfiles entries. ;  ; file  sqlfilldb.py;   Fill run catalog with nfiles entries ;  ; file  SQLiteIPLocation.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  SQLitePlatformDistribution.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  SQLiteTimeVersionOfRoot.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  SQLiteVersionsOfRoot.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  sqlselect.C;  Query example to MySQL test database. ;  ; file  sqlselect.py;  Query example to MySQL test database. ;  ; file  sqltables.C;  This is an example illustrating how the TSQLFile class can be used. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__sql.html:315,test,test,315,doc/master/group__tutorial__sql.html,https://root.cern,https://root.cern/doc/master/group__tutorial__sql.html,4,['test'],['test']
Testability,". ROOT: Special functions. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Special functionsMath » MathCore | Math » MathMore. ; Special mathematical functions. ; The naming and numbering of the functions is taken from Matt Austern, (Draft) Technical Report on Standard Library Extensions, N1687=04-0127, September 10, 2004; AuthorCreated by Andras Zsenei on Mon Nov 8 2004 . Special Functions from MathCore; double ROOT::Math::erf (double x);  Error function encountered in integrating the normal distribution. ;  ; double ROOT::Math::erfc (double x);  Complementary error function. ;  ; double ROOT::Math::tgamma (double x);  The gamma function is defined to be the extension of the factorial to real numbers. ;  ; double ROOT::Math::lgamma (double x);  Calculates the logarithm of the gamma function. ;  ; double ROOT::Math::inc_gamma (double a, double x);  Calculates the normalized (regularized) lower incomplete gamma function (lower integral) ;  ; double ROOT::Math::inc_gamma_c (double a, double x);  Calculates the normalized (regularized) upper incomplete gamma function (upper integral) ;  ; double ROOT::Math::beta (double x, double y);  Calculates the beta function. ;  ; double ROOT::Math::inc_beta (double x, double a, double b);  Calculates the normalized (regularized) incomplete beta function. ;  ; double ROOT::Math::sinint (double x);  Calculates the sine integral. ;  ; double ROOT::Math::cosint (double x);  Calculates the real part of the cosine integral Re(Ci). ;  . Special Functions from MathMore; double ROOT::Math::assoc_laguerre (unsigned n, double m, double x);  Computes the generalized Laguerre polynomials for \( n \geq 0, m > -1 \). ;  ; double ROOT::Math::assoc_legendre (unsigned l, unsigned m, double x);  Computes the associated Legendre polynomials. ;  ; double ROOT::Math::comp_ellint_1 (double k);  Calculates the complete elliptic integral of the first kind. ;  ; double ROOT::Math::comp_ellint_2 (double k);  Calculates the c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__SpecFunc.html:804,log,logarithm,804,doc/master/group__SpecFunc.html,https://root.cern,https://root.cern/doc/master/group__SpecFunc.html,1,['log'],['logarithm']
Testability,". ROOT: TApplicationServer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TApplicationServer Class Reference. . Definition at line 34 of file TApplicationServer.h. Public Member Functions;  TApplicationServer (Int_t *argc, char **argv, FILE *flog, const char *logfile);  Main constructor. ;  ; virtual ~TApplicationServer ();  Cleanup. ;  ; Int_t BrowseDirectory (const char *dirname);  Browse directory and send back its content to client. ;  ; Int_t BrowseFile (const char *fname);  Browse root file and send back its content; if fname is null, send the full list of files. ;  ; Int_t BrowseKey (const char *keyname);  Read key object and send it back to client. ;  ; const char * GetHost () const;  ; void GetOptions (Int_t *argc, char **argv) override;  Get and handle command line options. ;  ; Int_t GetPort () const;  ; Int_t GetProtocol () const;  ; TSocket * GetSocket () const;  ; const char * GetUser () const;  ; void HandleSigPipe ();  Called when the client is not alive anymore (i.e. ;  ; void HandleSocketInput ();  Handle input coming from the client or from the master server. ;  ; void HandleUrgentData ();  Handle Out-Of-Band data sent by the master or client. ;  ; void Interrupt ();  ; TClass * IsA () const override;  ; Bool_t IsValid () const;  ; Longptr_t ProcessLine (const char *line, Bool_t=kFALSE, Int_t *err=nullptr) override;  Parse a command line received from the client, making sure that the files needed for the execution, if any, are available. ;  ; Int_t ReceiveFile (const char *file, Bool_t bin, Long64_t size);  Receive a file, either sent by a client or a master server. ;  ; void Reset (const char *dir);  Reset environment to be ready for execution of next command. ;  ; void Run (Boo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationServer.html:534,log,logfile,534,doc/master/classTApplicationServer.html,https://root.cern,https://root.cern/doc/master/classTApplicationServer.html,1,['log'],['logfile']
Testability,". ROOT: TBenchmark Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TBenchmark Class ReferenceCore ROOT classes » Base ROOT classes. ; This class is a ROOT utility to help benchmarking applications. ; Definition at line 29 of file TBenchmark.h. Public Member Functions;  TBenchmark ();  Benchmark default constructor. ;  ; virtual ~TBenchmark ();  Benchmark destructor. ;  ; Int_t GetBench (const char *name) const;  Returns index of Benchmark name. ;  ; Float_t GetCpuTime (const char *name);  Returns Cpu time used by Benchmark name. ;  ; Float_t GetRealTime (const char *name);  Returns Realtime used by Benchmark name. ;  ; TClass * IsA () const override;  ; void Print (Option_t *name="""") const override;  Prints parameters of Benchmark name. ;  ; virtual void Reset ();  Reset all Benchmarks. ;  ; virtual void Show (const char *name);  Stops Benchmark name and Prints results. ;  ; virtual void Start (const char *name);  Starts Benchmark with the specified name. ;  ; virtual void Stop (const char *name);  Terminates Benchmark with specified name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Summary (Float_t &rt, Float_t &cp);  Prints a summary of all benchmarks. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBenchmark.html:381,benchmark,benchmarking,381,doc/master/classTBenchmark.html,https://root.cern,https://root.cern/doc/master/classTBenchmark.html,1,['benchmark'],['benchmarking']
Testability,". ROOT: TBits Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TBits Class ReferenceCore ROOT classes » Containers. ; Container of bits. ; This class provides a simple container of bits. Each bit can be set and tested via the functions SetBitNumber and TestBitNumber.; The default value of all bits is kFALSE. The size of the container is automatically extended when a bit number is either set or tested. To reduce the memory size of the container use the Compact function, this will discard the memory occupied by the upper bits that are 0. ; Definition at line 26 of file TBits.h. Classes; class  TReference;  . Public Member Functions;  TBits (const TBits &);  TBits copy constructor. ;  ;  TBits (UInt_t nbits=8);  TBits constructor. All bits set to 0. ;  ; virtual ~TBits ();  TBits destructor. ;  ; void Clear (Option_t *option="""") override;  Clear the value. ;  ; void Compact ();  Reduce the storage used by the object to a minimun. ;  ; UInt_t CountBits (UInt_t startBit=0) const;  Return number of bits set to 1 starting at bit startBit. ;  ; UInt_t FirstNullBit (UInt_t startBit=0) const;  Return position of first null bit (starting from position 0 and up) ;  ; UInt_t FirstSetBit (UInt_t startBit=0) const;  Return position of first non null bit (starting from position 0 and up) ;  ; void Get (Char_t *array) const;  Copy all the byes. ;  ; void Get (Int_t *array) const;  ; void Get (Long64_t *array) const;  ; void Get (Short_t *array) const;  ; void Get (UChar_t *array) const;  ; void Get (UInt_t *array) const;  ; void Get (ULong64_t *array) const;  ; void Get (UShort_t *array) const;  ; UInt_t GetNbits () const;  ; UInt_t GetNbytes () const;  ; TClass * IsA () const override;  ; UInt_t LastNullBit (UInt_t startBit=999999999) const;  Return position of first",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBits.html:431,test,tested,431,doc/master/classTBits.html,https://root.cern,https://root.cern/doc/master/classTBits.html,2,['test'],['tested']
Testability,". ROOT: TCut Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Friends |; List of all members ; TCut Class ReferenceTree Library. ; A specialized string object used for TTree selections. ; A TCut object has a name and a title. It does not add any data members compared to a TNamed. It only add a set of operators to facilitate logical string concatenation. For example, assume cut1 = ""x<1"" and cut2 = ""y>2""; then cut1 && cut2 will be the string ""(x<1)&&(y>2)""; Operators =, +=, +, *, !, &&, || overloaded.; Examples of use: Root > TCut c1 = ""x<1""; Root > TCut c2 = ""y<0""; Root > TCut c3 = c1&&c2; Root > ntuple.Draw(""x"", c1); Root > ntuple.Draw(""x"", c1||""x>0""); Root > ntuple.Draw(""x"", c1&&c2); Root > ntuple.Draw(""x"", ""(x+y)""*(c1&&c2)); TCutA specialized string object used for TTree selections.Definition TCut.h:25; c1return c1Definition legend1.C:41; c2return c2Definition legend2.C:14; c3return c3Definition legend3.C:15. Definition at line 25 of file TCut.h. Public Member Functions;  TCut ();  Constructor. ;  ;  TCut (const char *name, const char *title);  Constructor. ;  ;  TCut (const char *title);  Constructor. ;  ;  TCut (const TCut &cut);  Copy Constructor. ;  ;  ~TCut () override;  Typical destructor. ;  ; TClass * IsA () const override;  ;  operator const char * () const;  ; bool operator!= (const char *rhs) const;  Comparison. ;  ; bool operator!= (const TCut &rhs) const;  Comparison. ;  ; TCut & operator*= (const char *rhs);  Multiplication. ;  ; TCut & operator*= (const TCut &rhs);  Multiplication. ;  ; TCut & operator+= (const char *rhs);  Addition. ;  ; TCut & operator+= (const TCut &rhs);  Addition. ;  ; TCut & operator= (const char *rhs);  Assignment. ;  ; TCut & operator= (const TCut &rhs);  Assignment. ;  ; bool operator== (const char *rhs) const;  Comparison. ;  ; bool operator== (const TCut &rhs) cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCut.html:487,log,logical,487,doc/master/classTCut.html,https://root.cern,https://root.cern/doc/master/classTCut.html,1,['log'],['logical']
Testability,". ROOT: TDSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TDSet Class ReferencePROOF » PROOF kernel Libraries. ; This class implements a data set to be used for PROOF processing. ; The TDSet defines the class of which objects will be processed, the directory in the file where the objects of that type can be found and the list of files to be processed. The files can be specified as logical file names (LFN's) or as physical file names (PFN's). In case of LFN's the resolution to PFN's will be done according to the currently active GRID interface. Examples: TDSet treeset(""TTree"", ""AOD""); treeset.Add(""lfn:/alien.cern.ch/alice/prod2002/file1""); ... treeset.AddFriend(friendset);; or; TDSet objset(""MyEvent"", ""*"", ""/events""); objset.Add(""root://cms.cern.ch/user/prod2002/hprod_1.root""); ... objset.Add(set2003);; Validity of file names will only be checked at processing time (typically on the PROOF master server), not at creation time. ; Definition at line 153 of file TDSet.h. Public Types; enum  EStatusBits { ;   kWriteV3 = (1ULL << ( 16 )); , kEmpty = (1ULL << ( 17 )); , kValidityChecked = (1ULL << ( 18 )); , kSomeInvalid = (1ULL << ( 19 )); , ;   kMultiDSet = (1ULL << ( 20 )); , kIsLocal = (1ULL << ( 21 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDSet.html:634,log,logical,634,doc/master/classTDSet.html,https://root.cern,https://root.cern/doc/master/classTDSet.html,1,['log'],['logical']
Testability,". ROOT: TExec Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TExec Class ReferenceCore ROOT classes » Base ROOT classes. ; TExec is a utility class that can be used to execute a C++ command when some event happens in a pad. ; The command in turn can invoke a C++ macro to paint graphics objects at positions depending on the histogram or graph contents. Case 1:; The TExec object is in the list of pad primitives (after exec.Draw()). When the pad is drawn, the TExec::Paint function is called. This function will execute the specified command. The following example uses the services of the class Aclock created in $ROOTSYS/test/Aclock.cxx. This examples uses a TTimer to redraw a pad at regular intervals (clock). When the clock is updated, a string with the current date&time is drawn. {; gSystem->Load(""$ROOTSYS/test/Aclock"");; Aclock ck(400);; gPad->SetFillColor(5);; TDatime dt;; TText t(.5,.3,""t"");; t.SetTextAlign(22);; t.SetTextSize(.07);; t.SetTextColor(4);; t.Draw();; TExec ex(""ex"",""dt.Set();t.SetTitle(dt.AsString())"");; ex.Draw();; }; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; gPad#define gPadDefinition TVirtualPad.h:308; TDatimeThis class stores the date and time with a precision of one second in an unsigned 32 bit word (950130...Definition TDatime.h:37; TExecTExec is a utility class that can be used to execute a C++ command when some event happens in a pad.Definition TExec.h:26; TSystem::Loadvirtual int Load(const char *module, const char *entry="""", Bool_t system=kFALSE)Load a shared library.Definition TSystem.cxx:1857; TTextBase class for several text objects.Definition TText.h:22; exDouble_t ex[n]Definition legend1.C:17. Case 2:; The TExec object may be added to the list of functions of a TH1 or TGraph object via hist->GetListOfFunctions()->Add(exec). When the histogram (or graph) is drawn, the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTExec.html:781,test,test,781,doc/master/classTExec.html,https://root.cern,https://root.cern/doc/master/classTExec.html,2,['test'],['test']
Testability,". ROOT: TFFTComplexReal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTComplexReal Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented.; Computes the inverse of the real-to-complex transforms (class TFFTRealComplex) taking complex input (storing the non-redundant half of a logically Hermitian array) to real output (see FFTW manual for more details); How to use it:; Create an instance of TFFTComplexReal - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings; Set the data (via SetPoints(), SetPoint() or SetPointComplex() functions); Run the Transform() function; Get the output (via GetPoints(), GetPoint() or GetPointReal() functions); Repeat steps 3)-5) as needed. For a transform of the same size, but with different flags, rerun the Init() function and continue with steps 3)-5); NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled by the transform size; In Complex to Real transform the input array is destroyed. It cannot then be retrieved when using the Get's methods. . Definition at line 21 of file TFFTComplexReal.h. Public Member Functions;  TFFTComplexReal ();  default ;  ;  TFFTComplexReal (Int_t n, Bool_t inPlace);  For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ;  ;  TFFTComplexReal (Int_t ndim, Int_t *n, Bool_t inPlace);  For ndim-dimensional transforms Second argument contains sizes of the transform in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFFTComplexReal.html:607,log,logically,607,doc/master/classTFFTComplexReal.html,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html,1,['log'],['logically']
Testability,". ROOT: TFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Static Private Member Functions |; Friends |; List of all members ; TFile Class ReferenceInput/Output Library. ; A ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-like logical structure, possibly including subdirectory hierarchies. ; See alsoInput/Output Library . ROOT files layout (or io/doc/TFile folder in your codebase). ROOT file data format specification. A ROOT file is composed of a header, followed by consecutive data records (TKey instances) with a well defined format.; The first data record starts at byte fBEGIN (currently set to kBEGIN). Bytes 1->kBEGIN contain the file description, when fVersion >= 1000000 it is a large file (> 2 GB) and the offsets will be 8 bytes long and fUnits will be set to 8:. Byte Range Record Name Description . 1->4 ""root"" Root file identifier . 5->8 fVersion File format version . 9->12 fBEGIN Pointer to first data record . 13->16 [13->20] fEND Pointer to first free word at the EOF . 17->20 [21->28] fSeekFree Pointer to FREE data record . 21->24 [29->32] fNbytesFree Number of bytes in FREE data record . 25->28 [33->36] nfree Number of free data records . 29->32 [37->40] fNbytesName Number of bytes in TNamed at creation time . 33->33 [41->41] fUnits Number of bytes for file pointers . 34->37 [42->45] fCompress Compression level and algorithm . 38->41 [46->53] fSeekInfo Pointer to TStreamerInfo record . 42->45 [54->57] fNbytesInfo Number of bytes in TStreamerInfo record . 46->63 [58->75] fUUID Universal Unique ID . For the purpose of magic bytes in the context of ROOT files' MIME definition, the following additional requirements are introduced:; The value ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFile.html:553,log,logical,553,doc/master/classTFile.html,https://root.cern,https://root.cern/doc/master/classTFile.html,1,['log'],['logical']
Testability,". ROOT: TFile Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Static Private Member Functions |; Friends |; List of all members ; TFile Class ReferenceInput/Output Library. ; A ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-like logical structure, possibly including subdirectory hierarchies. ; See alsoInput/Output Library . ROOT files layout (or io/doc/TFile folder in your codebase). ROOT file data format specification. A ROOT file is composed of a header, followed by consecutive data records (TKey instances) with a well defined format.; The first data record starts at byte fBEGIN (currently set to kBEGIN). Bytes 1->kBEGIN contain the file description, when fVersion >= 1000000 it is a large file (> 2 GB) and the offsets will be 8 bytes long and fUnits will be set to 8:. Byte Range Record Name Description . 1->4 ""root"" Root file identifier . 5->8 fVersion File format version . 9->12 fBEGIN Pointer to first data record . 13->16 [13->20] fEND Pointer to first free word at the EOF . 17->20 [21->28] fSeekFree Pointer to FREE data record . 21->24 [29->32] fNbytesFree Number of bytes in FREE data record . 25->28 [33->36] nfree Number of free data records . 29->32 [37->40] fNbytesName Number of bytes in TNamed at creation time . 33->33 [41->41] fUnits Number of bytes for file pointers . 34->37 [42->45] fCompress Compression level and algorithm . 38->41 [46->53] fSeekInfo Pointer to TStreamerInfo record . 42->45 [54->57] fNbytesInfo Number of bytes in TStreamerInfo record . 46->63 [58->75] fUUID Universal Unique ID . For the purpose of magic bytes in the context of ROOT files' MIME definition, the following additional requirements are introduced:; The value o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:552,log,logical,552,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,1,['log'],['logical']
Testability,". ROOT: TGGroupFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TGGroupFrame Class ReferenceGUI » Low level GUI widgets. ; A composite frame with a border and a title. ; It is typically used to group a number of logically related widgets visually together. ; Definition at line 522 of file TGFrame.h. Public Types; enum  ETitlePos { kLeft = -1; , kCenter = 0; , kRight = 1; };  ;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGGroupFrame (const TGWindow *p, TGString *title, UInt_t options=kVerticalFrame, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), Pix",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGGroupFrame.html:502,log,logically,502,doc/master/classTGGroupFrame.html,https://root.cern,https://root.cern/doc/master/classTGGroupFrame.html,1,['log'],['logically']
Testability,". ROOT: TGLCamera Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TGLCamera Class ReferenceabstractGraphics » 3D Graphics » OpenGL rendering. ; Abstract base camera class - concrete classes for orthographic and perspective cameras derive from it. ; This class maintains values for the current:; Viewport; Projection, modelview and clip matrices - extracted from GL; The 6 frustum planes; Expanded frustum interest box. It provides methods for various projection, overlap and intersection tests for viewport and world locations, against the true frustum and expanded interest box, and for extracting eye position and direction.; It also defines the pure virtual manipulation interface methods the concrete ortho and perspective classes must implement. ; Definition at line 43 of file TGLCamera.h. Public Types; enum  EFrustumPlane { ;   kNear = 0; , kLeft = 1; , kRight = 2; , kTop = 3; , ;   kBottom = 4; , kFar = 5; , kPlanesPerFrustum = 6. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGLCamera ();  Default base camera constructor. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLCamera.html:824,test,tests,824,doc/master/classTGLCamera.html,https://root.cern,https://root.cern/doc/master/classTGLCamera.html,1,['test'],['tests']
Testability,". ROOT: TGLHistPainter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGLHistPainter Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; The histogram painter class using OpenGL. ; Histograms are, by default, drawn via the THistPainter class. TGLHistPainter allows to paint them using the OpenGL 3D graphics library. The plotting options provided by TGLHistPainter start with GL keyword. General information: plot types and supported options; The following types of plots are provided:; Lego - (TGLLegoPainter); The supported options are:. ""GLLEGO"" : Draw a lego plot.; ""GLLEGO2"" : Bins with color levels.; ""GLLEGO3"" : Cylindrical bars. Lego painter in cartesian supports logarithmic scales for X, Y, Z. In polar only Z axis can be logarithmic, in cylindrical only Y (if you see what it means).; Surfaces (TF2 and TH2 with ""GLSURF"" options) - (TGLSurfacePainter); The supported options are:. ""GLSURF"" : Draw a surface.; ""GLSURF1"" : Surface with color levels; ""GLSURF2"" : The same as ""GLSURF1"" but without polygon outlines.; ""GLSURF3"" : Color level projection on top of plot (works only in cartesian coordinate system).; ""GLSURF4"" : Same as ""GLSURF"" but without polygon outlines. The surface painting in cartesian coordinates supports logarithmic scales along X, Y, Z axis. In polar coordinates only the Z axis can be logarithmic, in cylindrical coordinates only the Y axis.; Additional options to SURF and LEGO - Coordinate systems:; The supported options are:. "" "" : Default, cartesian coordinates system.; ""POL"" : Polar coordinates system.; ""CYL"" : Cylindrical coordinates system.; ""SPH"" : Spherical coordinates system. TH3 as boxes (spheres) - (TGLBoxPainter); The supported options are:. ""GLBOX"" : TH3 as a set of boxes, size of box is proportional to bin content.; ""GLBO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLHistPainter.html:898,log,logarithmic,898,doc/master/classTGLHistPainter.html,https://root.cern,https://root.cern/doc/master/classTGLHistPainter.html,2,['log'],['logarithmic']
Testability,". ROOT: TGLScenePad Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGLScenePad Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; Implements VirtualViewer3D interface and fills the base-class visualization structures from pad contents. ; Definition at line 26 of file TGLScenePad.h. Public Member Functions;  TGLScenePad (TVirtualPad *pad);  cache logicals during scene rebuilds ;  ;  ~TGLScenePad () override;  ; void AddCompositeOp (UInt_t operation) override;  Add composite operation used to combine objects added via AddObject TVirtualViewer3D interface overload - see base/src/TVirtualViewer3D.cxx for description of viewer architecture. ;  ; void AddHistoPhysical (TGLLogicalShape *log, const Float_t *histColor=nullptr);  Scale and rotate a histo object to mimic placement in canvas. ;  ; Int_t AddObject (const TBuffer3D &buffer, Bool_t *addChildren=nullptr) override;  Add an object to the viewer, using internal physical IDs TVirtualViewer3D interface overload - see base/src/TVirtualViewer3D.cxx for description of viewer architecture. ;  ; Int_t AddObject (UInt_t physicalID, const TBuffer3D &buffer, Bool_t *addChildren=nullptr) override;  Add an object to the scene, using an external physical ID TVirtualViewer3D interface overload - see base/src/TVirtualViewer3D.cxx for description of viewer architecture. ;  ; void BeginScene () override;  Start building of the scene. ;  ; Bool_t BuildingScene () const override;  ; Bool_t CanLoopOnPrimitives () const override;  ; void CloseComposite () override;  Close composite container TVirtualViewer3D interface overload - see base/src/TVirtualViewer3D.cxx for description of viewer architecture. ;  ; Int_t DistancetoPrimitive (Int_t, Int_t) override;  Computes distance fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLScenePad.html:615,log,logicals,615,doc/master/classTGLScenePad.html,https://root.cern,https://root.cern/doc/master/classTGLScenePad.html,2,['log'],"['log', 'logicals']"
Testability,". ROOT: TGRadioButton Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TGRadioButton Class ReferenceGUI » Low level GUI widgets. ; Selects different options. ; Like text buttons, they have text or hot string as a label.; Radio buttons are grouped usually in logical sets of two or more buttons to present mutually exclusive choices.; Selecting a radio button will generate the event:; kC_COMMAND, kCM_RADIOBUTTON, button id, user data. If a command string has been specified (via SetCommand()) then this command string will be executed via the interpreter whenever a button is selected. A command string can contain the macros:. $MSG – kC_COMMAND, kCMRADIOBUTTON packed message (use GET_MSG() and GET_SUBMSG() to unpack); $PARM1 – button id; $PARM2 – user data pointer. Before executing these macros are expanded into the respective Long_t's ; Definition at line 321 of file TGButton.h. Public Member Functions;  TGRadioButton (const TGWindow *p, const char *s, const char *cmd, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=0);  Create a radio button widget. ;  ;  TGRadioButton (const TGWindow *p, TGHotString *s, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=0);  Create a radio button widget. ;  ;  TGRadioButton (const TGWindow *p=nullptr, const char *s=nullptr, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=0);  Create a radio button widget. ;  ;  ~TGRadioButton () override;  Delete a radio button. ;  ; TGDimension GetDefaultSize () const override;  default size ;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button event. ;  ; Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGRadioButton.html:526,log,logical,526,doc/master/classTGRadioButton.html,https://root.cern,https://root.cern/doc/master/classTGRadioButton.html,1,['log'],['logical']
Testability,". ROOT: TGeoChecker Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGeoChecker Class ReferenceThe Geometry Package » Geometry painter. ; Geometry checking package. ; TGeoChecker class provides several geometry checking methods. There are two types of tests that can be performed. One is based on random sampling or ray-tracing and provides a visual check on how navigation methods work for a given geometry. The second actually checks the validity of the geometry definition in terms of overlapping/extruding objects. Both types of checks can be done for a given branch (starting with a given volume) as well as for the geometry as a whole.; TGeoChecker::CheckPoint(Double_t x, Double_t y, Double_t z); This method can be called directly from the TGeoManager class and print a report on how a given point is classified by the modeller: which is the full path to the deepest node containing it, and the (under)estimation of the distance to the closest boundary (safety).; TGeoChecker::RandomPoints(Int_t npoints); Can be called from TGeoVolume class. It first draws the volume and its content with the current visualization settings. Then randomly samples points in its bounding box, plotting in the geometry display only the points classified as belonging to visible volumes.; TGeoChecker::RandomRays(Int_t nrays, Double_t startx, starty, startz); Can be called and acts in the same way as the previous, but instead of points, rays having random isotropic directions are generated from the given point. A raytracing algorithm propagates all rays until they exit geometry, plotting all segments crossing visible nodes in the same color as these.; TGeoChecker::Test(Int_t npoints); Implementation of TGeoManager::Test(). Computes the time for the modeller to find out ""Where am I?"" for a given nu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoChecker.html:458,test,tests,458,doc/master/classTGeoChecker.html,https://root.cern,https://root.cern/doc/master/classTGeoChecker.html,1,['test'],['tests']
Testability,". ROOT: TGeoExtension Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; TGeoExtension Class ReferenceabstractThe Geometry Package » Geometry classes. ; ABC for user objects attached to TGeoVolume or TGeoNode. ; Provides interface for getting a reference (grab) and releasing the extension object (release), allowing for derived classes to implement reference counted sharing. The user who should attach extensions to logical volumes or nodes BEFORE applying misalignment information so that these will be available to all copies. ; Definition at line 17 of file TGeoExtension.h. Public Member Functions; virtual TGeoExtension * Grab ()=0;  ; TClass * IsA () const override;  ; virtual void Release () const =0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoExtension.html:601,log,logical,601,doc/master/classTGeoExtension.html,https://root.cern,https://root.cern/doc/master/classTGeoExtension.html,1,['log'],['logical']
Testability,". ROOT: TGeoPolygon Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGeoPolygon Class ReferenceThe Geometry Package » Shapes. ; An arbitrary polygon defined by vertices. ; The vertices have to be defined CLOCKWISE in the XY plane, making either a convex or concave polygon. No test for malformed polygons is performed.; A polygon is a 2D shape defined by vertices in the XY plane. It is used by TGeoXtru class for computing Contains() and Safety(). Only the pointers to the actual lists of XY values are used - these are not owned by the class.; To check if a point in XY plane is contained by a polygon, this is split into an outscribed convex polygon and the remaining polygons of its subtraction from the outscribed one. A point is INSIDE if it is contained by the outscribed polygon but NOT by the remaining ones. Since these can also be arbitrary polygons at their turn, a tree structure is formed:; P = Pconvex - (Pconvex-P) where (-) means 'subtraction'; Pconvex-P = P1 + P2 + ... where (+) means 'union'; Note that P1, P2, ... do not intersect each other and they are defined by subsets of the list of vertices of P. They can be split in the same way as P*; Therefore, if C(P) represents the Boolean : 'does P contains a given point?', then:; C(P) = C(Pconvex) .and. not(C(P1) | C(P2) | ...); For creating a polygon without TGeoXtru class, one has to call the constructor TGeoPolygon(nvert) and then SetXY(Double_t *x, Double_t *y) providing the arrays of X and Y vertex positions (defined clockwise) that have to 'live' longer than the polygon they will describe. This complication is due to efficiency reasons. At the end one has to call the FinishPolygon() method. ; Definition at line 19 of file TGeoPolygon.h. Public Types; enum  { kGeoConvex = (1ULL << ( 9 )); , ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPolygon.html:501,test,test,501,doc/master/classTGeoPolygon.html,https://root.cern,https://root.cern/doc/master/classTGeoPolygon.html,1,['test'],['test']
Testability,". ROOT: TGeoRegion Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGeoRegion Class ReferenceThe Geometry Package » Geometry classes. ; Regions are groups of volumes having a common set of user tracking cuts. ; Class wrapper for regions used by Monte Carlo packages A region is composed by a list of logical volumes and defines a set of cuts. Used mainly to transport region information stored in GDML format to the clients requiring it from the transient geometry. ; Definition at line 36 of file TGeoRegion.h. Public Member Functions;  TGeoRegion ();  ;  TGeoRegion (const char *name, const char *title="""");  ;  TGeoRegion (const TGeoRegion &other);  Region copy constructor. ;  ;  ~TGeoRegion () override;  Region destructor. ;  ; void AddCut (const char *name, Double_t cut);  Add cut to the region. ;  ; void AddCut (const TGeoRegionCut &regioncut);  Add an identical cut to the region. ;  ; bool AddVolume (const char *name);  Add an existing volume to the region. ;  ; void AddVolume (TGeoVolume *vol);  ; TGeoRegionCut * GetCut (int i) const;  ; int GetNcuts () const;  ; int GetNvolumes () const;  ; TGeoVolume * GetVolume (int i) const;  ; TClass * IsA () const override;  ; TGeoRegion & operator= (const TGeoRegion &other);  Assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print region info. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoRegion.html:480,log,logical,480,doc/master/classTGeoRegion.html,https://root.cern,https://root.cern/doc/master/classTGeoRegion.html,1,['log'],['logical']
Testability,". ROOT: TGraphPainter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TGraphPainter Class ReferenceHistogram Library » Painting classes » Histograms and graphs painting classes. ; The graph painter class. ; Implements all graphs' drawing's options. Introduction; Graphs' plotting options; Exclusion graphs; Graphs with error bars; TGraphErrors; TGraphAsymmErrors; TGraphBentErrors; TGraphMultiErrors. TGraphPolar options; Colors automatically picked in palette; Reverse graphs' axis; Graphs in logarithmic scale; Highlight mode for graph. Introduction; Graphs are drawn via the painter TGraphPainter class. This class implements techniques needed to display the various kind of graphs i.e.: TGraph, TGraphErrors, TGraphBentErrors and TGraphAsymmErrors.; To draw a graph graph it's enough to do: graph->Draw(""AL"");; The option AL in the Draw() method means:. The axis should be drawn (option A),; The graph should be drawn as a simple line (option L).; By default a graph is drawn in the current pad in the current coordinate system. To define a suitable coordinate system and draw the axis the option A must be specified. TGraphPainter offers many options to paint the various kind of graphs.; It is separated from the graph classes so that one can have graphs without the graphics overhead, for example in a batch program.; When a displayed graph is modified, there is no need to call Draw() again; the image will be refreshed the next time the pad will be updated. A pad is updated after one of these three actions:. a carriage return on the ROOT command line,; a click inside the pad,; a call to TPad::Update. Graphs' plotting options; Graphs can be drawn with the following options:. Option Description . ""A"" Produce a new plot with Axis around the graph . ""I"" Combine with option 'A' i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPainter.html:705,log,logarithmic,705,doc/master/classTGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html,1,['log'],['logarithmic']
Testability,". ROOT: THtml Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; List of all members ; THtml Class Reference. ; Legacy ROOT documentation system. ; Deprecated:We keep THtml for those who still need it for legacy use cases. ROOT has since several years moved to doxygen as documentation generator. THtml is not developed nor supported anymore; please migrate to doxygen instead.; The THtml class is designed to easily document classes, code, and code related text files (like change logs). It generates HTML pages conforming to the XHTML 1.0 transitional specifications; an example of these pages is ROOT's own reference guide. This page was verified to be valid XHTML 1.0 transitional, which proves that all pages generated by THtml can be valid, as long as the user provided XHTML (documentation, header, etc) is valid. You can check the current THtml by clicking this icon: ; Overview: . Usage . Configuration . Input files . Output directory . Linking other documentation . Recognizing class documentation . Author, copyright, etc. . Header and footer . Links to searches, home page, ViewVC . HTML Charset . Documentation syntax . Class description . Class index . Method documentation . Data member documentation . Documentation directives . BEGIN_HTML END_HTML: include 'raw' HTML . BEGIN_MACRO END_MACRO: include a picture generated by a macro . BEGIN_LATEX END_LATEX: include a latex picture . Product and module index . Auxiliary files: style sheet, JavaScript, help page . Class Charts . Configuration variables . Behind the scenes . I. Usage; These are typical things people do with THtml: ; root[] THtml html; // create a THtml object; root[] html.LoadAllLibs(); // Load all rootmap'ed libraries; root[] html.MakeAll(); // generate documenta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHtml.html:731,log,logs,731,doc/master/classTHtml.html,https://root.cern,https://root.cern/doc/master/classTHtml.html,1,['log'],['logs']
Testability,". ROOT: THtml Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; List of all members ; THtml Class Reference. ; Legacy ROOT documentation system. ; Deprecated:We keep THtml for those who still need it for legacy use cases. ROOT has since several years moved to doxygen as documentation generator. THtml is not developed nor supported anymore; please migrate to doxygen instead.; The THtml class is designed to easily document classes, code, and code related text files (like change logs). It generates HTML pages conforming to the XHTML 1.0 transitional specifications; an example of these pages is ROOT's own reference guide. This page was verified to be valid XHTML 1.0 transitional, which proves that all pages generated by THtml can be valid, as long as the user provided XHTML (documentation, header, etc) is valid. You can check the current THtml by clicking this icon: ; Overview: . Usage . Configuration . Input files . Output directory . Linking other documentation . Recognizing class documentation . Author, copyright, etc. . Header and footer . Links to searches, home page, ViewVC . HTML Charset . Documentation syntax . Class description . Class index . Method documentation . Data member documentation . Documentation directives . BEGIN_HTML END_HTML: include 'raw' HTML . BEGIN_MACRO END_MACRO: include a picture generated by a macro . BEGIN_LATEX END_LATEX: include a latex picture . Product and module index . Auxiliary files: style sheet, JavaScript, help page . Class Charts . Configuration variables . Behind the scenes . I. Usage; These are typical things people do with THtml: ; root[] THtml html; // create a THtml object; root[] html.LoadAllLibs(); // Load all rootmap'ed libraries; root[] html.MakeAll(); // generate documentat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTHtml.html:730,log,logs,730,doc/v632/classTHtml.html,https://root.cern,https://root.cern/doc/v632/classTHtml.html,1,['log'],['logs']
Testability,". ROOT: TImageDump Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TImageDump Class ReferenceGraphics » 2D Graphics » Graphics file output. ; Save canvas as an image (GIF, JPEG, PNG, XPM, TIFF etc.). ; Example: $ root -b; root [0] .x hsimple.C; root [1] c1->Print(""c1.gif"");; b#define b(i)Definition RSha256.hxx:100; c1return c1Definition legend1.C:41; hsimpleDefinition hsimple.py:1; TImageDump can be used in any mode (batch, interactive) as follows TCanvas *c1;; TImageDump *imgdump = new TImageDump(""test.png"");; c1->Paint();; imgdump->Close();; TCanvasThe Canvas class.Definition TCanvas.h:23; TImageDumpSave canvas as an image (GIF, JPEG, PNG, XPM, TIFF etc.).Definition TImageDump.h:22; TImageDump::TImageDumpTImageDump()Default constructor.Definition TImageDump.cxx:53; TImageDump::Closevoid Close(Option_t *opt="""") overrideClose a image file.Definition TImageDump.cxx:106. Definition at line 22 of file TImageDump.h. Public Member Functions;  TImageDump ();  Default constructor. ;  ;  TImageDump (const char *filename, Int_t type=-111);  Initialize batch image interface. ;  ;  ~TImageDump () override;  destructor ;  ; void CellArrayBegin (Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2) override;  cell array begin ;  ; void CellArrayEnd () override;  Cell array end. ;  ; void CellArrayFill (Int_t r, Int_t g, Int_t b) override;  Cell array fill. ;  ; void Close (Option_t *opt="""") override;  Close a image file. ;  ; void DrawBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2) override;  Draw a Box. ;  ; void DrawFrame (Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light) override;  Draw a Frame around a box. ;  ; void DrawPolyMarker (Int_t n, Double_t *x, Double_t *y) override;  draw polymarker",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTImageDump.html:714,test,test,714,doc/master/classTImageDump.html,https://root.cern,https://root.cern/doc/master/classTImageDump.html,1,['test'],['test']
Testability,". ROOT: TMLPAnalyzer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TMLPAnalyzer Class Reference. ; This utility class contains a set of tests useful when developing a neural network. ; It allows you to check for unneeded variables, and to control the network structure. ; Definition at line 25 of file TMLPAnalyzer.h. Public Member Functions;  TMLPAnalyzer (TMultiLayerPerceptron &net);  ;  TMLPAnalyzer (TMultiLayerPerceptron *net);  ;  ~TMLPAnalyzer () override;  Destructor. ;  ; void CheckNetwork ();  Gives some information about the network in the terminal. ;  ; void DrawDInput (Int_t i);  Draws the distribution (on the test sample) of the impact on the network output of a small variation of the ith input. ;  ; void DrawDInputs ();  Draws the distribution (on the test sample) of the impact on the network output of a small variation of each input. ;  ; void DrawNetwork (Int_t neuron, const char *signal, const char *bg);  Draws the distribution of the neural network (using ith neuron). ;  ; TProfile * DrawTruthDeviation (Int_t outnode=0, Option_t *option="""");  Create a profile of the difference of the MLP output minus the true value for a given output node outnode, vs the true value for outnode, for all test data events. ;  ; TProfile * DrawTruthDeviationInOut (Int_t innode, Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value innode, for all test data events. ;  ; THStack * DrawTruthDeviationInsOut (Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value, stacked for all inputs, for all test data events. ;  ; THStack * DrawTruthDeviations (Option_t *option="""");  Create",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMLPAnalyzer.html:346,test,tests,346,doc/master/classTMLPAnalyzer.html,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html,3,['test'],"['test', 'tests']"
Testability,". ROOT: TMVA::CrossEntropy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::CrossEntropy Class ReferenceTMVA. ; Implementation of the CrossEntropy as separation criterion. ; -p log (p) - (1-p)log(1-p); p=purity. Definition at line 43 of file CrossEntropy.h. Public Member Functions;  CrossEntropy ();  ;  CrossEntropy (const CrossEntropy &g);  ; virtual ~CrossEntropy ();  ; virtual Double_t GetSeparationIndex (const Double_t s, const Double_t b);  Cross Entropy defined as: ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::SeparationBase;  SeparationBase ();  Constructor. ;  ;  SeparationBase (const SeparationBase &s);  Copy constructor. ;  ; virtual ~SeparationBase ();  ; const TString & GetName ();  ; virtual Double_t GetSeparationGain (const Double_t nSelS, const Double_t nSelB, const Double_t nTotS, const Double_t nTotB);  Separation Gain: the measure of how the quality of separation of the sample increases by splitting the sample e.g. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::SeparationBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Additional Inherited Members;  Protected Attributes inherited from TMVA::SeparationBase; TString fName;  ; Double_t fPrecisionCut;  . #include <TMVA/CrossEntropy.h>. Inheritance diagram for TMVA::CrossEntropy:. This browser is not able to show SVG: try Firefox, Chrome, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CrossEntropy.html:338,log,log,338,doc/master/classTMVA_1_1CrossEntropy.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CrossEntropy.html,2,['log'],['log']
Testability,". ROOT: TMVA::CrossValidation Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::CrossValidation Class ReferenceTMVA. ; Class to perform cross validation, splitting the dataloader into folds. ; Use html for explicit line breaking; Markdown links? class reference?; ce->BookMethod(dataloader, options);; ce->Evaluate();; Cross-evaluation will generate a new training and a test set dynamically from from K folds. These K folds are generated by splitting the input training set. The input test set is currently ignored.; This means that when you specify your DataSet you should include all events in your training set. One way of doing this would be the following:; dataloader->AddTree( signalTree, ""cls1"" );; dataloader->AddTree( background, ""cls2"" );; dataloader->PrepareTrainingAndTestTree( """", """", ""nTest_cls1=1:nTest_cls2=1"" );. Split Expression; See CVSplit documentation? ; Definition at line 124 of file CrossValidation.h. Public Member Functions;  CrossValidation (TString jobName, TMVA::DataLoader *dataloader, TFile *outputFile, TString options);  ;  CrossValidation (TString jobName, TMVA::DataLoader *dataloader, TString options);  ;  ~CrossValidation ();  ; void Evaluate ();  Does training, test set evaluation and performance evaluation of using cross-evalution. ;  ; Factory & GetFactory ();  ; UInt_t GetNumFolds ();  ; const std::vector< CrossValidationResult > & GetResults () const;  ; TString GetSplitExpr ();  ; void InitOptions ();  ; virtual TClass * IsA () const;  ; void ParseOptions ();  Method to parse the internal option string. ;  ; void SetNumFolds (UInt_t i);  ; void SetSplitExpr (TString splitExpr);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CrossValidation.html:581,test,test,581,doc/master/classTMVA_1_1CrossValidation.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CrossValidation.html,2,['test'],['test']
Testability,". ROOT: TMVA::CvSplit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TMVA::CvSplit Class Referenceabstract. . Definition at line 37 of file CvSplit.h. Public Member Functions;  CvSplit (UInt_t numFolds);  ; virtual ~CvSplit ();  ; UInt_t GetNumFolds ();  ; virtual TClass * IsA () const;  ; virtual void MakeKFoldDataSet (DataSetInfo &dsi)=0;  ; Bool_t NeedsRebuild ();  ; virtual void PrepareFoldDataSet (DataSetInfo &dsi, UInt_t foldNumber, Types::ETreeType tt);  Set training and test set vectors of dataset described by dsi. ;  ; virtual void RecombineKFoldDataSet (DataSetInfo &dsi, Types::ETreeType tt=Types::kTraining);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOption",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CvSplit.html:664,test,test,664,doc/master/classTMVA_1_1CvSplit.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CvSplit.html,1,['test'],['test']
Testability,". ROOT: TMVA::CvSplitKFolds Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::CvSplitKFolds Class Reference. . Definition at line 92 of file CvSplit.h. Public Member Functions;  CvSplitKFolds (UInt_t numFolds, TString splitExpr="""", Bool_t stratified=kTRUE, UInt_t seed=100);  Splits a dataset into k folds, ready for use in cross validation. ;  ;  ~CvSplitKFolds () override;  ; TClass * IsA () const override;  ; void MakeKFoldDataSet (DataSetInfo &dsi) override;  Prepares a DataSet for cross validation. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::CvSplit;  CvSplit (UInt_t numFolds);  ; virtual ~CvSplit ();  ; UInt_t GetNumFolds ();  ; Bool_t NeedsRebuild ();  ; virtual void PrepareFoldDataSet (DataSetInfo &dsi, UInt_t foldNumber, Types::ETreeType tt);  Set training and test set vectors of dataset described by dsi. ;  ; virtual void RecombineKFoldDataSet (DataSetInfo &dsi, Types::ETreeType tt=Types::kTraining);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TStri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CvSplitKFolds.html:1137,test,test,1137,doc/master/classTMVA_1_1CvSplitKFolds.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CvSplitKFolds.html,1,['test'],['test']
Testability,. ROOT: TMVA::DNN::TCudaDeviceReference< AFloat > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TCudaDeviceReference< AFloat > Class Template Reference. ; template<typename AFloat>; class TMVA::DNN::TCudaDeviceReference< AFloat >TCudaDeviceReference. ; Helper class emulating lvalue references for AFloat values that are physically on the device. Allows for example to assign to matrix elements. Note that device access through CudaDeviceReferences enforces synchronization with all streams and thus qualifies as performance killer. Only used for testing. ; Definition at line 58 of file CudaMatrix.h. Public Member Functions;  TCudaDeviceReference (AFloat *devicePointer);  ;  operator AFloat ();  ; void operator+= (AFloat value);  ; void operator-= (AFloat value);  ; void operator= (AFloat value);  ; void operator= (const TCudaDeviceReference &other);  . Private Attributes; AFloat * fDevicePointer;  . #include <TMVA/DNN/Architectures/Cuda/CudaMatrix.h>; Constructor & Destructor Documentation. ◆ TCudaDeviceReference(). template<typename AFloat > . TMVA::DNN::TCudaDeviceReference< AFloat >::TCudaDeviceReference ; (; AFloat * ; devicePointer). Definition at line 209 of file CudaMatrix.h. Member Function Documentation. ◆ operator AFloat(). template<typename AFloat > . TMVA::DNN::TCudaDeviceReference< AFloat >::operator AFloat. Definition at line 217 of file CudaMatrix.h. ◆ operator+=(). template<typename AFloat > . void TMVA::DNN::TCudaDeviceReference< AFloat >::operator+= ; (; AFloat ; value). Definition at line 244 of file CudaMatrix.h. ◆ operator-=(). template<typename AFloat > . void TMVA::DNN::TCudaDeviceReference< AFloat >::operator-= ; (; AFloat ; value). Definition at line 256 of file CudaMatrix.h. ◆ operator=() [1/2]. template<typename AFloat > . void TMVA::DNN::TCudaDeviceReference< AFloat >::operator= ; ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaDeviceReference.html:713,test,testing,713,doc/master/classTMVA_1_1DNN_1_1TCudaDeviceReference.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaDeviceReference.html,1,['test'],['testing']
Testability,". ROOT: TMVA::DNN::TDLGradientDescent< Architecture_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TDLGradientDescent< Architecture_t > Class Template Reference. ; template<typename Architecture_t>; class TMVA::DNN::TDLGradientDescent< Architecture_t >; Definition at line 65 of file DLMinimizers.h. Public Types; using DeepNet_t = TDeepNet< Architecture_t >;  ; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TDLGradientDescent ();  ;  TDLGradientDescent (Scalar_t learningRate, size_t convergenceSteps, size_t testInterval);  ; size_t GetConvergenceCount () const;  Getters. ;  ; size_t GetConvergenceSteps () const;  ; Scalar_t GetTestError () const;  ; size_t GetTestInterval () const;  ; Scalar_t GetTrainingError () const;  ; bool HasConverged ();  Increases the minimization step counter by the test error evaluation period and uses the current internal value of the test error to determine if the minimization has converged. ;  ; bool HasConverged (Scalar_t testError);  Increases the minimization step counter by the test error evaluation period and uses the provided test error value to determine if the minimization has converged. ;  ; void Reset ();  Reset minimizer object to default state. ;  ; void SetBatchSize (Scalar_t rate);  ; void SetConvergenceSteps (size_t steps);  Setters. ;  ; void SetLearningRate (Scalar_t rate);  ; void SetTestInterval (size_t interval);  ; void Step (DeepNet_t &deepNet, std::vector< Matrix_t > &input, const Matrix_t &output, const Matrix_t &weights);  Perform a single optimization step on a given batch. ;  ; void Step (DeepNet_t &master, std::vector< DeepNet_t > &nets, std::vector< TTensorBatch< Architecture_t > > &batches);  Perform multiple optimization steps simultaneous",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html:786,test,testInterval,786,doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,1,['test'],['testInterval']
Testability,". ROOT: TMVA::DNN::TGradientDescent< Architecture_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TGradientDescent< Architecture_t > Class Template Reference. ; template<typename Architecture_t>; class TMVA::DNN::TGradientDescent< Architecture_t >; Definition at line 55 of file Minimizers.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TGradientDescent ();  ;  TGradientDescent (Scalar_t learningRate, size_t convergenceSteps, size_t testInterval);  ; size_t GetConvergenceCount () const;  ; size_t GetConvergenceSteps () const;  ; Scalar_t GetTestError () const;  ; size_t GetTestInterval () const;  ; Scalar_t GetTrainingError () const;  ; bool HasConverged ();  Increases the minimization step counter by the test error evaluation period and uses the current internal value of the test error to determine if the minimization has converged. ;  ; bool HasConverged (Scalar_t testError);  Increases the minimization step counter by the test error evaluation period and uses the provided test error value to determine if the minimization has converged. ;  ; void Reset ();  Reset minimizer object to default state. ;  ; void SetBatchSize (Scalar_t rate);  ; void SetConvergenceSteps (size_t steps);  ; void SetLearningRate (Scalar_t rate);  ; void SetTestInterval (size_t interval);  ; template<typename Net_t > ; void Step (Net_t &master, std::vector< Net_t > &nets, std::vector< TBatch< Architecture_t > > &batches);  Perform multiple optimization steps simultaneously. ;  ; template<typename Net_t > ; void Step (Net_t &net, Matrix_t &input, const Matrix_t &output, const Matrix_t &weights);  Perform a single optimization step on a given batch. ;  ; template<typename Net_t > ; Scalar_t StepLoss (Net_t &net",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html:725,test,testInterval,725,doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,3,['test'],"['test', 'testInterval']"
Testability,". ROOT: TMVA::Factory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::Factory Class ReferenceTMVA. ; This is the main MVA steering class. ; It creates all MVA methods, and guides them through the training, testing and evaluation phases. ; Definition at line 80 of file Factory.h. Public Types; typedef std::vector< IMethod * > MVector;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  Factory (TString theJobName, TFile *theTargetFile, TString theOption="""");  Standard constructor. ;  ;  Factory (TString theJobName, TString theOption="""");  Constructor. ;  ; virtual ~Factory ();  Destructor. ;  ; MethodBase * BookMethod (DataLoader *, TMVA::Types::EMVA, TString, TString, TMVA::Types::EMVA, TString);  ; MethodBase * BookMethod (DataLoader *loader, TString theMethodName, TString methodTitle, TString theOption="""");  Book a classifier or regression method. ;  ; MethodBase * BookMethod (DataLoader *loader, Types::EMVA theMethod, TString methodTitle, TString theOption="""");  Books MVA method. ;  ; void DeleteAllMethods (void);  Delete methods. ;  ; void EvaluateAllMethods (void);  Iterates over all MVAs that have been ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Factory.html:466,test,testing,466,doc/master/classTMVA_1_1Factory.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html,1,['test'],['testing']
Testability,". ROOT: TMVA::IPruneTool Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Attributes |; List of all members ; TMVA::IPruneTool Class ReferenceabstractTMVA. ; IPruneTool - a helper interface class to prune a decision tree. ; Any tool which implements the interface should provide two modes for tree pruning:. automatically find the ""best"" prune strength by minimizing the error rate on a test sample if SetAutomatic() is called, or if automatic = kTRUE argument is set in CalculatePruningInfo() In this case, the PruningInfo object returned contains the error rate of the optimally pruned tree, the optimal prune strength, and the sequence of nodes to prune to obtain the optimal pruned tree from the original DecisionTree; a user-provided pruning strength parameter is used to prune the tree, in which case the returned PruningInfo object has QualityIndex = -1, PruneStrength = user prune strength, and PruneSequence is the list of nodes to prune . Definition at line 70 of file IPruneTool.h. Public Types; typedef std::vector< const Event * > EventSample;  . Public Member Functions;  IPruneTool ();  ; virtual ~IPruneTool ();  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE)=0;  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Protected Attributes; Double_t B;  ; Double_t fPruneStrength;  ! regularization parameter in pruning ;  ; Double_t S;  . #include <TMVA/IPruneTool.h>. Inheritance diagram for TMVA::IPruneTool:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ EventSample. typedef std::vector<const Event*> TMVA::IPruneTool::EventSample. Definition at line 74 of file IPruneTool.h. Constructor & Destructor Doc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1IPruneTool.html:512,test,test,512,doc/master/classTMVA_1_1IPruneTool.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1IPruneTool.html,1,['test'],['test']
Testability,". ROOT: TMVA::MethodBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::MethodBase Class ReferenceabstractTMVA. ; Virtual base Class for all MVA method. ; MethodBase hosts several specific evaluation methods.; The kind of MVA that provides optimal performance in an analysis strongly depends on the particular application. The evaluation factory provides a number of numerical benchmark results to directly assess the performance of the MVA training on the independent test sample. These are:. The signal efficiency at three representative background efficiencies (which is 1 − rejection).; The significance of an MVA estimator, defined by the difference between the MVA mean values for signal and background, divided by the quadratic sum of their root mean squares.; The separation of an MVA x, defined by the integral ; \[; \frac{1}{2} \int \frac{(S(x) - B(x))^2}{(S(x) + B(x))} dx; \]. where \( S(x) \) and \( B(x) \) are the signal and background distributions, respectively. The separation is zero for identical signal and background MVA shapes, and it is one for disjunctive shapes.; The average, \( \int x \mu (S(x)) dx \), of the signal \( \mu_{transform} \). The \( \mu_{transform} \) of an MVA denotes the transformation that yields a uniform background distribution. In this way, the signal distributions \( S(x) \) can be directly compared among the various MVAs. The stronger \( S(x) \) peaks towards one, the better is the discrimination of the MVA. The \( \mu_{transform} \) is documented here.; The MVA standard output also prints the linear correlation coefficients between signal and background, which can be useful to eliminate variables that exhibit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBase.html:709,benchmark,benchmark,709,doc/master/classTMVA_1_1MethodBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,". ROOT: TMVA::MethodBoost Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::MethodBoost Class ReferenceTMVA. ; Class for boosting a TMVA method. ; This class is meant to boost a single classifier. Boosting means training the classifier a few times. Every time the weights of the events are modified according to how well the classifier performed on the test sample. ; Definition at line 58 of file MethodBoost.h. Public Member Functions;  MethodBoost (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  ;  MethodBoost (DataSetInfo &dsi, const TString &theWeightFile);  ; virtual ~MethodBoost (void);  destructor ;  ; Bool_t BookMethod (Types::EMVA theMethod, TString methodTitle, TString theOption);  just registering the string from which the boosted classifier will be created ;  ; void CleanBoostOptions ();  ; const Ranking * CreateRanking ();  ; Int_t GetBoostNum ();  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  return boosted MVA response ;  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t);  Boost can handle classification with 2 classes and regression with one regression-target. ;  ; virtual TClass * IsA () const;  ; void SetBoostedMethodName (TString methodName);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Train (void);  ;  Public Member Functions inherited from TMVA::MethodCompositeBase;  MethodCompositeBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  ;  MethodCompositeBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:604,test,test,604,doc/master/classTMVA_1_1MethodBoost.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html,1,['test'],['test']
Testability,". ROOT: TMVA::MethodTMlpANN Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MethodTMlpANN Class ReferenceTMVA. ; This is the TMVA TMultiLayerPerceptron interface class. ; It provides the training and testing the ROOT internal MLP class in the TMVA framework.; Available learning methods:. Stochastic; Batch; SteepestDescent; RibierePolak; FletcherReeves; BFGS. See the TMultiLayerPerceptron class description for details on this ANN. ; Definition at line 47 of file MethodTMlpANN.h. Public Member Functions;  MethodTMlpANN (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption=""3000:N-1:N-2"");  standard constructor ;  ;  MethodTMlpANN (DataSetInfo &theData, const TString &theWeightFile);  constructor from weight file ;  ; virtual ~MethodTMlpANN (void);  destructor ;  ; void AddWeightsXMLTo (void *parent) const;  write weights to xml file ;  ; const Ranking * CreateRanking ();  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  calculate the value of the neural net for the current event ;  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  TMlpANN can handle classification with 2 classes. ;  ; virtual TClass * IsA () const;  ; void MakeClass (const TString &classFileName=TString("""")) const;  create reader class for classifier -> overwrites base class function create specific class for TMultiLayerPerceptron ;  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; void ReadWeightsFromStream (std::istream &istr);  read weights from stream since the MLP can not read from the stream, we 1st: write the weights to temporary file ;  ; virtual void ReadWeightsFromStream (TFile &);  ; void ReadWeightsFromXML (void *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodTMlpANN.html:442,test,testing,442,doc/master/classTMVA_1_1MethodTMlpANN.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodTMlpANN.html,1,['test'],['testing']
Testability,". ROOT: TMVA::PDEFoamKernelBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TMVA::PDEFoamKernelBase Class ReferenceabstractTMVA. ; This class is the abstract kernel interface for PDEFoam. ; The kernel can be used for manipulating (smearing) the cell values of a PDEFoam, by passing it as an argument to PDEFoam::GetCellValue(...).; Derived classes must implement the Estimate() function to provide a specific kernel behaviour. ; Definition at line 40 of file PDEFoamKernelBase.h. Public Member Functions;  PDEFoamKernelBase ();  message logger ;  ;  PDEFoamKernelBase (const PDEFoamKernelBase &);  Copy constructor. ;  ; virtual ~PDEFoamKernelBase ();  Destructor. ;  ; virtual Float_t Estimate (PDEFoam *, std::vector< Float_t > &, ECellValue)=0;  ; virtual TClass * IsA () const;  ; MsgLogger & Log () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamKernelBase.html:721,log,logger,721,doc/master/classTMVA_1_1PDEFoamKernelBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamKernelBase.html,1,['log'],['logger']
Testability,". ROOT: TMVA::SVKernelMatrix Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::SVKernelMatrix Class ReferenceTMVA. ; Kernel matrix for Support Vector Machine. ; Definition at line 41 of file SVKernelMatrix.h. Public Member Functions;  SVKernelMatrix ();  constructor ;  ;  SVKernelMatrix (std::vector< TMVA::SVEvent * > *, SVKernelFunction *);  constructor ;  ;  ~SVKernelMatrix ();  destructor ;  ; Float_t * GetColumn (UInt_t col);  ; Float_t GetElement (UInt_t i, UInt_t j);  returns an element of the kernel matrix ;  ; Float_t * GetLine (UInt_t);  returns a row of the kernel matrix ;  . Private Member Functions; MsgLogger & Log () const;  . Private Attributes; SVKernelFunction * fKernelFunction;  kernel function ;  ; MsgLogger * fLogger;  ! message logger ;  ; UInt_t fSize;  matrix size ;  ; Float_t ** fSVKernelMatrix;  kernel matrix ;  . #include <TMVA/SVKernelMatrix.h>; Constructor & Destructor Documentation. ◆ SVKernelMatrix() [1/2]. TMVA::SVKernelMatrix::SVKernelMatrix ; (; ). constructor ; Definition at line 53 of file SVKernelMatrix.cxx. ◆ SVKernelMatrix() [2/2]. TMVA::SVKernelMatrix::SVKernelMatrix ; (; std::vector< TMVA::SVEvent * > * ; inputVectors, . SVKernelFunction * ; kernelFunction . ). constructor ; Definition at line 64 of file SVKernelMatrix.cxx. ◆ ~SVKernelMatrix(). TMVA::SVKernelMatrix::~SVKernelMatrix ; (; ). destructor ; Definition at line 87 of file SVKernelMatrix.cxx. Member Function Documentation. ◆ GetColumn(). Float_t * TMVA::SVKernelMatrix::GetColumn ; (; UInt_t ; col). inline . Definition at line 54 of file SVKernelMatrix.h. ◆ GetElement(). Float_t TMVA::SVKernelMatrix::GetElement ; (; UInt_t ; i, . UInt_t ; j . ). returns an element of the kernel matrix ; Definition at line 119 of file SVKernelMatrix.cxx. ◆ GetLine(). Float_t * TMVA::SVKernelMatrix::GetLine ; (; UInt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1SVKernelMatrix.html:934,log,logger,934,doc/master/classTMVA_1_1SVKernelMatrix.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1SVKernelMatrix.html,1,['log'],['logger']
Testability,". ROOT: TMVA::TTrainingSettings Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; TMVA::TTrainingSettings Struct Reference. ; All of the options that can be specified in the training string. ; Definition at line 72 of file MethodDL.h. Public Attributes; size_t batchSize;  ; size_t convergenceSteps;  ; std::vector< Double_t > dropoutProbabilities;  ; Double_t learningRate;  ; size_t maxEpochs;  ; Double_t momentum;  ; bool multithreading;  ; DNN::EOptimizer optimizer;  ; TString optimizerName;  ; std::map< TString, double > optimizerParams;  ; DNN::ERegularization regularization;  ; size_t testInterval;  ; Double_t weightDecay;  . #include <TMVA/MethodDL.h>; Member Data Documentation. ◆ batchSize. size_t TMVA::TTrainingSettings::batchSize. Definition at line 73 of file MethodDL.h. ◆ convergenceSteps. size_t TMVA::TTrainingSettings::convergenceSteps. Definition at line 75 of file MethodDL.h. ◆ dropoutProbabilities. std::vector<Double_t> TMVA::TTrainingSettings::dropoutProbabilities. Definition at line 83 of file MethodDL.h. ◆ learningRate. Double_t TMVA::TTrainingSettings::learningRate. Definition at line 80 of file MethodDL.h. ◆ maxEpochs. size_t TMVA::TTrainingSettings::maxEpochs. Definition at line 76 of file MethodDL.h. ◆ momentum. Double_t TMVA::TTrainingSettings::momentum. Definition at line 81 of file MethodDL.h. ◆ multithreading. bool TMVA::TTrainingSettings::multithreading. Definition at line 85 of file MethodDL.h. ◆ optimizer. DNN::EOptimizer TMVA::TTrainingSettings::optimizer. Definition at line 78 of file MethodDL.h. ◆ optimizerName. TString TMVA::TTrainingSettings::optimizerName. Definition at line 79 of file MethodDL.h. ◆ optimizerParams. std::map<TString,double> TMVA::TTrainingSettings::optimizerParams. Definition at line 84 of file MethodDL.h. ◆ regularization. DNN::ERegularization TMVA::TTrainingSettings::regularization. Definition at line",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTMVA_1_1TTrainingSettings.html:711,test,testInterval,711,doc/master/structTMVA_1_1TTrainingSettings.html,https://root.cern,https://root.cern/doc/master/structTMVA_1_1TTrainingSettings.html,1,['test'],['testInterval']
Testability,". ROOT: TMVA::VarTransformHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::VarTransformHandler Class Reference. . Definition at line 41 of file VarTransformHandler.h. Public Member Functions;  VarTransformHandler (DataLoader *);  constructor ;  ;  ~VarTransformHandler ();  destructor ;  ; MsgLogger & Log () const;  message logger ;  ; TMVA::DataLoader * VarianceThreshold (Double_t threshold);  Computes variance of all the variables and returns a new DataLoader with the selected variables whose variance is above a specific threshold. ;  . Public Attributes; MsgLogger * fLogger;  . Private Member Functions; void CalcNorm ();  Computes maximum, minimum, mean, RMS and variance for all variables and targets. ;  ; void CopyDataLoader (TMVA::DataLoader *des, TMVA::DataLoader *src);  ; void UpdateNorm (Int_t ivar, Double_t x);  Updates maximum and minimum value of a variable or target. ;  . Private Attributes; DataLoader * fDataLoader;  ; DataSetInfo & fDataSetInfo;  ; const std::vector< Event * > & fEvents;  . #include <TMVA/VarTransformHandler.h>; Constructor & Destructor Documentation. ◆ VarTransformHandler(). TMVA::VarTransformHandler::VarTransformHandler ; (; DataLoader * ; dl). constructor ; Definition at line 49 of file VarTransformHandler.cxx. ◆ ~VarTransformHandler(). TMVA::VarTransformHandler::~VarTransformHandler ; (; ). destructor ; Definition at line 61 of file VarTransformHandler.cxx. Member Function Documentation. ◆ CalcNorm(). void TMVA::VarTransformHandler::CalcNorm ; (; ). private . Computes maximum, minimum, mean, RMS and variance for all variables and targets. ; Definition at line 148 of file VarTransformHandler.cxx. ◆ CopyDataLoader(). void TMVA::VarTransformHandler::CopyDataLoader ; (; TMVA::DataLoader * ; des, . TMVA::DataLoader * ; src . ). private ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VarTransformHandler.html:531,log,logger,531,doc/master/classTMVA_1_1VarTransformHandler.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VarTransformHandler.html,1,['log'],['logger']
Testability,". ROOT: TMessageHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMessageHandler Class ReferenceCore ROOT classes » Base ROOT classes. ; Handle messages that might be generated by the system. ; By default a handler only keeps track of the different messages generated for a specific class. By deriving from this class and overriding Notify() one can implement custom message handling. In Notify() one has access to the message id and the object generating the message. One can install more than one message handler per class. A message handler can be removed or again added when needed. All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004 . Definition at line 34 of file TMessageHandler.h. Public Member Functions;  TMessageHandler (const char *cl, Bool_t derived=kTRUE);  Create a new message handler for class named cl and add it to the list of message handlers. ;  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify ()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMessageHandler.html:828,log,logged,828,doc/master/classTMessageHandler.html,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html,4,['log'],['logged']
Testability,". ROOT: TMultiLayerPerceptron Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMultiLayerPerceptron Class Reference. ; This class describes a neural network. ; There are facilities to train the network and use the output.; The input layer is made of inactive neurons (returning the optionally normalized input) and output neurons are linear. The type of hidden neurons is free, the default being sigmoids. (One should still try to pass normalized inputs, e.g. between [0.,1]); The basic input is a TTree and two (training and test) TEventLists. Input and output neurons are assigned a value computed for each event with the same possibilities as for TTree::Draw(). Events may be weighted individually or via TTree::SetWeight(). 6 learning methods are available: kStochastic, kBatch, kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS.; This implementation, written by C. Delaere, is inspired from the mlpfit package from J.Schwindling et al. with some extensions:. the algorithms are globally the same; in TMultilayerPerceptron, there is no limitation on the number of layers/neurons, while MLPFIT was limited to 2 hidden layers; TMultilayerPerceptron allows you to save the network in a root file, and provides more export functionalities; TMultilayerPerceptron gives more flexibility regarding the normalization of inputs/outputs; TMultilayerPerceptron provides, thanks to Andrea Bocci, the possibility to use cross-entropy errors, which allows to train a network for pattern classification based on Bayesian posterior probability. Introduction; Neural Networks are more and more used in various fields for data analysis and classification, both for research and commercial institutions. Some randomly chosen examples are:. imag",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:789,test,test,789,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['test'],['test']
Testability,". ROOT: TPDF Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TPDF Class ReferenceGraphics » 2D Graphics » Graphics file output. ; Interface to PDF. ; Like PostScript, PDF is a vector graphics output format allowing a very high graphics output quality. The functionalities provided by this class are very similar to those provided by TPostScript.; Compare to PostScript output, the PDF files are usually smaller because some parts of them can be compressed.; PDF also allows to define table of contents. This facility can be used in ROOT. The following example shows how to proceed: {; TCanvas* canvas = new TCanvas(""canvas"");; TH1F* histo = new TH1F(""histo"",""test 1"",10,0.,10.);; histo->SetFillColor(2);; histo->Fill(2.);; histo->Draw();; canvas->Print(""plots.pdf("",""Title:One bin filled"");; histo->Fill(4.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Two bins filled"");; histo->Fill(6.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Three bins filled"");; histo->Fill(8.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Four bins filled"");; histo->Fill(8.);; histo->Draw();; canvas->Print(""plots.pdf)"",""Title:The fourth bin content is 2"");; }; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TPad::Printvoid Print(const char *filename="""") const overrideThis method is equivalent to SaveAs(""filename""). See TPad::SaveAs for details.Definition TPad.cxx:4798; Each charac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPDF.html:870,test,test,870,doc/master/classTPDF.html,https://root.cern,https://root.cern/doc/master/classTPDF.html,1,['test'],['test']
Testability,". ROOT: TParallelCoordVar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TParallelCoordVar Class Reference. ; TParallelCoord axes. ; Class containing a variable for the TParallelCoord.; Options can be defined each axis separately using the right mouse click. These options can be applied to every axes using the editor. Axis width: If set to 0, the axis is simply a line. If higher, a color histogram is drawn on the axis.; Axis histogram height: If not 0, a usual bar histogram is drawn on the plot. The order in which the variables are drawn is essential to see the clusters. The axes can be dragged to change their position. A zoom is also available. The logarithm scale is also available by right clicking on the axis. ; Definition at line 24 of file TParallelCoordVar.h. Public Types; enum  EStatusBits { kLogScale = (1ULL << ( 14 )); , kShowBox = (1ULL << ( 15 )); , kShowBarHisto = (1ULL << ( 16 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TParallelCoordVar ();  Default constructor. ;  ;  TParallelCoordVar (Double_t *val, const char *title, Int_t id, TParallelCoord *gram);  Normal constructor. ;  ;  ~TParallelCoordVar () override;  Destructor. ;  ; void AddRange ()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelCoordVar.html:853,log,logarithm,853,doc/master/classTParallelCoordVar.html,https://root.cern,https://root.cern/doc/master/classTParallelCoordVar.html,1,['log'],['logarithm']
Testability,". ROOT: TPie Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TPie Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Draw a Pie Chart,. ; Example:; ; void piechart(); {; Float_t vals[] = {.2,1.1,.6,.9,2.3};; Int_t colors[] = {2,3,4,5,6};; Int_t nvals = sizeof(vals)/sizeof(vals[0]);; ; TCanvas *cpie = new TCanvas(""cpie"",""TPie test"",700,700);; cpie->Divide(2,2);; ; TPie *pie1 = new TPie(""pie1"",; ""Pie with offset and no colors"",nvals,vals);; TPie *pie2 = new TPie(""pie2"",; ""Pie with radial labels"",nvals,vals,colors);; TPie *pie3 = new TPie(""pie3"",; ""Pie with tangential labels"",nvals,vals,colors);; TPie *pie4 = new TPie(""pie4"",; ""Pie with verbose labels"",nvals,vals,colors);; ; cpie->cd(1);; pie1->SetAngularOffset(30.);; pie1->SetEntryRadiusOffset( 4, 0.1);; pie1->SetRadius(.35);; pie1->Draw(""3d"");; ; cpie->cd(2);; pie2->SetEntryRadiusOffset(2,.05);; pie2->SetEntryLineColor(2,2);; pie2->SetEntryLineWidth(2,5);; pie2->SetEntryLineStyle(2,2);; pie2->SetEntryFillStyle(1,3030);; pie2->SetCircle(.5,.45,.3);; pie2->Draw(""rsc"");; ; cpie->cd(3);; pie3->SetY(.32);; pie3->GetSlice(0)->SetValue(.8);; pie3->GetSlice(1)->SetFillStyle(3031);; pie3->SetLabelsOffset(-.1);; pie3->Draw(""3d t nol"");; TLegend *pieleg = pie3->MakeLegend();; pieleg->SetY1(.56); pieleg->SetY2(.86);; ; cpie->cd(4);; pie4->SetRadius(.2);; pie4->SetLabelsOffset(.01);; pie4->SetLabelFormat(""#splitline{%val (%perc)}{%txt}"");; pie4->Draw(""nol <"");; }; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; colorsColor * colorsDefinition X3DBuffer.c:21; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TCanvasThe Canvas class.Definition TCanvas.h:23; TCanvas::cdTVirtualPad * cd(Int_t subpadn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPie.html:564,test,test,564,doc/master/classTPie.html,https://root.cern,https://root.cern/doc/master/classTPie.html,1,['test'],['test']
Testability,". ROOT: TProofBench Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Attributes |; List of all members ; TProofBench Class ReferencePROOF » PROOF benchmark utilities. ; Steering class for PROOF benchmarks. ; Definition at line 37 of file TProofBench.h. Public Member Functions;  TProofBench (const char *url, const char *outfile=""<default>"", const char *proofopt=0);  Constructor: check PROOF and load selectors PAR. ;  ;  ~TProofBench () override;  Destructor. ;  ; void CloseOutFile ();  Close output file. ;  ; Int_t CopyDataSet (const char *dset, const char *dsetdst, const char *destdir);  Copy the files of dataset 'dset' to 'destdir' and create a new dataset named 'dsetdst' decribing them. ;  ; Bool_t GetDebug ();  ; const char * GetOutFileName () const;  ; TClass * IsA () const override;  ; Int_t MakeDataSet (const char *dset=0, Long64_t nevt=-1, const char *fnroot=""event"", Bool_t regenerate=kFALSE);  Create the largest dataset for the run. ;  ; Int_t OpenOutFile (Bool_t wrt=kFALSE, Bool_t verbose=kTRUE);  Set the otuput file Return 0 on success, -1 on error. ;  ; Int_t ReleaseCache (const char *dset);  Release memory cache for dataset 'dset' Return 0 on success, -1 on error. ;  ; Int_t RemoveDataSet (const char *dset);  Physically remove the dataset 'dset', i.e. ;  ; Int_t RunCPU (Long64_t nevents=-1, Int_t start=-1, Int_t stop=-1, Int_t step=-1);  Perform the CPU run Return 0 on success, -1 on error. ;  ; Int_t RunCPUx (Long64_t nevents=-1, Int_t start=-1, Int_t stop=-1);  Perform the CPU run scanning over the number of workers per node Return 0 on success, -1 on error. ;  ; Int_t RunDataSet (const char *dset=""BenchDataSet"", Int_t start=1, Int_t stop=-1, Int_t step=1);  Perform a test using dataset 'dset' Return 0 on success, -1 on erro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofBench.html:379,benchmark,benchmark,379,doc/master/classTProofBench.html,https://root.cern,https://root.cern/doc/master/classTProofBench.html,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,". ROOT: TProofBenchDataSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TProofBenchDataSet Class ReferencePROOF » PROOF benchmark utilities. ; Handle operations on datasets used by ProofBench. ; Definition at line 27 of file TProofBenchDataSet.h. Public Member Functions;  TProofBenchDataSet (TProof *proof=0);  Constructor. ;  ;  ~TProofBenchDataSet () override;  ; Int_t CopyFiles (const char *dset, const char *destdir);  Copy the files of dataset 'dset' to another directory Return 0 on success, -1 on error. ;  ; TClass * IsA () const override;  ; Bool_t IsProof (TProof *p);  ; Int_t ReleaseCache (const char *dset);  Release memory cache for dataset 'dset' Return 0 on success, -1 on error. ;  ; Int_t RemoveFiles (const char *dset);  Physically remove the dataset 'dset', i.e. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofBenchDataSet.html:333,benchmark,benchmark,333,doc/master/classTProofBenchDataSet.html,https://root.cern,https://root.cern/doc/master/classTProofBenchDataSet.html,1,['benchmark'],['benchmark']
Testability,". ROOT: TProofBenchRun Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TProofBenchRun Class ReferenceabstractPROOF » PROOF benchmark utilities. ; Abstract base class for PROOF benchmark runs. ; Definition at line 28 of file TProofBenchRun.h. Public Member Functions;  TProofBenchRun (TProof *proof=0, const char *sel=0);  Constructor: check PROOF and load selectors PAR. ;  ;  ~TProofBenchRun () override;  destructor ;  ; virtual const char * GetParList ();  ; virtual const char * GetSelName ();  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override=0;  This method must be overridden when a class wants to print itself. ;  ; virtual void Run (const char *dset, Int_t start=-1, Int_t stop=-1, Int_t step=-1, Int_t ntries=-1, Int_t debug=-1, Int_t draw=-1)=0;  ; virtual void Run (Long64_t nevents, Int_t start=-1, Int_t stop=-1, Int_t step=-1, Int_t ntries=-1, Int_t debug=-1, Int_t draw=-1)=0;  ; virtual void SetParList (const char *pars);  ; virtual void SetSelName (const char *sel);  ; virtual void SetSelOption (const char *opt);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofBenchRun.html:303,benchmark,benchmark,303,doc/master/classTProofBenchRun.html,https://root.cern,https://root.cern/doc/master/classTProofBenchRun.html,2,['benchmark'],['benchmark']
Testability,". ROOT: TProofBenchRunCPU Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TProofBenchRunCPU Class ReferencePROOF » PROOF benchmark utilities. ; CPU-intensive PROOF benchmark test generates events and fill 1, 2, or 3-D histograms. ; No I/O activity is involved. . Definition at line 41 of file TProofBenchRunCPU.h. Public Member Functions;  TProofBenchRunCPU (TPBHistType *histtype=0, Int_t nhists=16, TDirectory *dirproofbench=0, TProof *proof=0, TProofNodes *nodes=0, Long64_t nevents=1000000, Int_t ntries=2, Int_t start=1, Int_t stop=-1, Int_t step=1, Int_t draw=0, Int_t debug=0);  Default constructor. ;  ;  ~TProofBenchRunCPU () override;  Destructor. ;  ; void DrawPerfPlots ();  Draw Performance plots. ;  ; TCanvas * GetCanvas () const;  ; Int_t GetDebug () const;  ; TDirectory * GetDirProofBench () const;  ; Int_t GetDraw () const;  ; TPBHistType * GetHistType () const;  ; TList * GetListPerfPlots () const;  ; const char * GetName () const override;  Returns name of object. ;  ; TString GetNameStem () const;  Get name for this run. ;  ; Long64_t GetNEvents () const;  ; Int_t GetNHists () const;  ; Int_t GetNTries () const;  ; Int_t GetStart () const;  ; Int_t GetStep () const;  ; Int_t GetStop () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Show settings. ;  ; void Run (const char *, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t) override;  ; void Run (Long64_t nevents, Int_t start, Int_t stop, Int_t step, Int_t ntries, Int_t debug, Int_t draw) override;  Run benchmark Input parameters nevents: Number of events to run per file. ;  ; void SetDebug (Int_t debug);  ; void SetDirProofBench (TDirectory *dir);  ; void SetDraw (Int_t draw);  ; void SetHistType (TPBHistType *histtype);  Set histogra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofBenchRunCPU.html:357,benchmark,benchmark,357,doc/master/classTProofBenchRunCPU.html,https://root.cern,https://root.cern/doc/master/classTProofBenchRunCPU.html,3,"['benchmark', 'test']","['benchmark', 'test']"
Testability,". ROOT: TProofBenchRunDataRead Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TProofBenchRunDataRead Class ReferencePROOF » PROOF benchmark utilities. ; I/O-intensive PROOF benchmark test reads in event files distributed on the cluster. ; Number of events processed per second and size of events processed per second are plotted against number of active workers. Performance rate for unit packets and performance rate for query are plotted. ; Definition at line 44 of file TProofBenchRunDataRead.h. Public Member Functions;  TProofBenchRunDataRead (TProofBenchDataSet *pbds, TPBReadType *readtype=0, TDirectory *dirproofbench=0, TProof *proof=0, TProofNodes *nodes=0, Long64_t nevents=-1, Int_t ntries=2, Int_t start=1, Int_t stop=-1, Int_t step=1, Int_t debug=0);  ;  ~TProofBenchRunDataRead () override;  Destructor. ;  ; void DrawPerfProfiles ();  Get canvas. ;  ; TCanvas * GetCPerfProfiles () const;  ; TFileCollection * GetDataSet (const char *dset, Int_t nact, Bool_t nx);  Get a subsample of dsname suited to run with 'nact' and option 'nx'. ;  ; Int_t GetDebug () const;  ; TDirectory * GetDirProofBench () const;  ; const char * GetName () const override;  Returns name of object. ;  ; TString GetNameStem () const;  Get name for this run. ;  ; Long64_t GetNEvents () const;  ; Int_t GetNTries () const;  ; TPBReadType * GetReadType () const;  ; Int_t GetStart () const;  ; Int_t GetStep () const;  ; Int_t GetStop () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print the content of this object. ;  ; void Run (const char *dset, Int_t start, Int_t stop, Int_t step, Int_t ntries, Int_t debug, Int_t) override;  Run benchmark Input parameters dset: Dataset on which to run start: Start scan with 'start' ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofBenchRunDataRead.html:367,benchmark,benchmark,367,doc/master/classTProofBenchRunDataRead.html,https://root.cern,https://root.cern/doc/master/classTProofBenchRunDataRead.html,3,"['benchmark', 'test']","['benchmark', 'test']"
Testability,". ROOT: TProofCondor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; Friends |; List of all members ; TProofCondor Class Reference. . Definition at line 33 of file TProofCondor.h. Public Member Functions;  TProofCondor (const char *masterurl, const char *conffile=kPROOF_ConfFile, const char *confdir=kPROOF_ConfDir, Int_t loglevel=0, const char *alias=0, TProofMgr *mgr=0);  Start proof using condor. ;  ;  ~TProofCondor () override;  Clean up Condor PROOF environment. ;  ; TClass * IsA () const override;  ; virtual void SetActive ();  ; virtual void SetActive (Bool_t active);  Suspend or resume PROOF via Condor. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TProof;  TProof (const char *masterurl, const char *conffile=kPROOF_ConfFile, const char *confdir=kPROOF_ConfDir, Int_t loglevel=0, const char *alias=0, TProofMgr *mgr=0);  Create a PROOF environment. ;  ;  ~TProof () override;  Clean up PROOF environment. ;  ; Int_t ActivateWorker (const char *ord, Bool_t save=kTRUE);  Make sure that the worker identified by the ordinal number 'ord' is in the active list. ;  ; void AddChain (TChain *chain);  Add chain to data set. ;  ; Int_t AddDynamicPath (const char *libpath, Bool_t onClient=kFALSE, TList *wrks=0, Bool_t doCollect=kTRUE);  Add 'libpath' to the lib path search. ;  ; void AddFeedback (const char *name);  Add object to feedback list. ;  ; Int_t AddIncludePath (const char *incpath, Bool_t onClient=kFALSE, TList *wrks=0, Bool_t doCollect=kTRUE);  Add 'incpath' to the inc path search. ;  ; void AddInput (TObject *obj);  Add objects that might be needed during the processing of the selector (see Process()). ;  ; void AddInputData (TObject *obj, Bool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofCondor.html:509,log,loglevel,509,doc/master/classTProofCondor.html,https://root.cern,https://root.cern/doc/master/classTProofCondor.html,1,['log'],['loglevel']
Testability,". ROOT: TProofLite Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TProofLite Class ReferencePROOF » PROOF kernel Libraries. ; This class starts a PROOF session on the local machine: no daemons, client and master merged, communications via UNIX-like sockets. ; By default the number of workers started is NumberOfCores+1; a different number can be forced on construction. ; Definition at line 40 of file TProofLite.h. Public Member Functions;  TProofLite (const char *masterurl, const char *conffile=kPROOF_ConfFile, const char *confdir=kPROOF_ConfDir, Int_t loglevel=0, const char *alias=0, TProofMgr *mgr=0);  Create a PROOF environment. ;  ;  ~TProofLite () override;  Destructor. ;  ; Bool_t CancelStagingDataSet (const char *dataset) override;  Cancels a dataset staging request. ;  ; void ClearCache (const char *file=0) override;  Remove files from all file caches. ;  ; void ClearDataSetCache (const char *dataset=0) override;  Clear the content of the dataset cache, if any (matching 'dataset', if defined). ;  ; Long64_t DrawSelect (TDSet *dset, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Execute the specified drawing action on a data set (TDSet). ;  ; Bool_t ExistsDataSet (const char *uri) override;  Returns kTRUE if 'dataset' described by 'uri' exists, kFALSE otherwise. ;  ; TFileCollection * GetDataSet (const char *uri, const char *=0) override;  Get a list of TFileInfo objects describing the files of the specified dataset. ;  ; TMap * GetDataSets (const char *uri="""", const char *=0) override;  lists all datasets that match given uri ;  ; TList * GetListOfQueries (Option_t *opt="""") override;  Get the list of queries. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:835,log,loglevel,835,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['log'],['loglevel']
Testability,". ROOT: TProofLog Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TProofLog Class ReferencePROOF » PROOF kernel Libraries. ; Implementation of the PROOF session log handler. ; Definition at line 32 of file TProofLog.h. Public Types; enum  ELogLocationBit { kLogToBox = (1ULL << ( 16 )); };  ; enum  ERetrieveOpt { kLeading = 0x1; , kTrailing = 0x2; , kAll = 0x3; , kGrep = 0x4; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TProofLog (const char *stag, const char *url, TProofMgr *mgr);  Constructor. ;  ;  ~TProofLog () override;  Destructor. ;  ; void Display (const char *ord=""*"", Int_t from=-10, Int_t to=-1);  Display the content associated with worker 'ord' from line 'from' to line 'to' inclusive. ;  ; TList * GetListOfLogs () const;  ; Int_t Grep (const char *txt, Int_t from=0);  Search lines containing 'txt', starting from line 'from'. ;  ; TClass * IsA () const override;  ; Bool_t LogToBox ();  ; void Print (Option_t *opt=0) const override;  Print head info about the content. ;  ; void Prt (const char *what, Bool_t newline=kTRUE);  Special printing procedure. ;  ; Int_t Retrieve (const char *ord=""*"", TProofLog::ERetrieveOpt o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLog.html:394,log,log,394,doc/master/classTProofLog.html,https://root.cern,https://root.cern/doc/master/classTProofLog.html,1,['log'],['log']
Testability,". ROOT: TProofLogElem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TProofLogElem Class Reference. . Definition at line 79 of file TProofLog.h. Public Member Functions;  TProofLogElem (const char *ord, const char *url, TProofLog *logger);  Constructor. ;  ;  ~TProofLogElem () override;  Destructor. ;  ; void Display (Int_t from=0, Int_t to=-1);  Display the current content starting from line 'from' to line 'to' inclusive. ;  ; TMacro * GetMacro () const;  ; const char * GetRole ();  ; Int_t Grep (const char *txt, TString &res, Int_t from=0);  Search lines containing 'txt', starting from line 'from'. ;  ; TClass * IsA () const override;  ; Bool_t IsMaster () const;  ; Bool_t IsSubMaster () const;  ; Bool_t IsWorker () const;  ; void Print (Option_t *opt=0) const override;  Print a line with the relevant info. ;  ; void Prt (const char *what);  Special printing procedure. ;  ; Int_t Retrieve (TProofLog::ERetrieveOpt opt=TProofLog::kTrailing, const char *pattern=0);  Retrieve the content of the associated file. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLogElem.html:439,log,logger,439,doc/master/classTProofLogElem.html,https://root.cern,https://root.cern/doc/master/classTProofLogElem.html,1,['log'],['logger']
Testability,". ROOT: TProofMgrLite Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TProofMgrLite Class ReferencePROOF » PROOF kernel Libraries. ; Basic TProofMgr functionality implementation in the case of Lite session. ; Definition at line 27 of file TProofMgrLite.h. Public Member Functions;  TProofMgrLite (const char *url, Int_t loglevel=-1, const char *alias="""");  Create a PROOF manager for the Lite environment. ;  ;  ~TProofMgrLite () override;  ; TProof * CreateSession (const char *=0, const char *=0, Int_t=-1) override;  Create a new session. ;  ; TProofLog * GetSessionLogs (Int_t ridx=0, const char *stag=0, const char *pattern=""-v | SvcMsg"", Bool_t rescan=kFALSE) override;  Get logs or log tails from last session associated with this manager instance. ;  ; TClass * IsA () const override;  ; TObjString * ReadBuffer (const char *file, const char *pattern) override;  Read lines containing 'pattern' in 'file'. ;  ; TObjString * ReadBuffer (const char *file, Long64_t ofs, Int_t len) override;  Read 'len' bytes from offset 'ofs' of the local file 'fin'. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TProofMgr;  TProofMgr (const char *url, Int_t loglevel=-1, const char *alias="""");  Create a PROOF manager for the standard (old) environment. ;  ;  ~TProofMgr () override;  Destroy a TProofMgr instance. ;  ; virtual TProof * AttachSession (Int_t, Bool_t=kFALSE);  Dummy version provided for completeness. ;  ; virtual TProof * AttachSession (TProofDesc *, Bool_t=kFALSE);  Dummy version provided for completeness. ;  ; void Close ();  ; virtual Int_t Cp (const char *, const char *=0, const char *=0);  ; virtual void DetachSession (Int_t, Option_t *="""");  Detach session with 'id' from its proofserv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofMgrLite.html:476,log,loglevel,476,doc/master/classTProofMgrLite.html,https://root.cern,https://root.cern/doc/master/classTProofMgrLite.html,3,['log'],"['log', 'loglevel', 'logs']"
Testability,". ROOT: TProofNodes Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TProofNodes Class ReferencePROOF » PROOF benchmark utilities. ; PROOF worker node information . Definition at line 28 of file TProofNodes.h. Public Member Functions;  TProofNodes (TProof *proof);  Constructor. ;  ;  ~TProofNodes () override;  Destructor. ;  ; Int_t ActivateWorkers (const char *workers);  Description: Activate the same number of workers on all nodes. ;  ; Int_t ActivateWorkers (Int_t nwrks);  Description: Activate 'nwrks' workers; calls TProof::SetParallel and rebuild the internal lists Input: number of workers Return: 0 is successful, <0 otherwise. ;  ; TMap * GetMapOfActiveNodes () const;  ; TMap * GetMapOfNodes () const;  ; Int_t GetMaxWrksPerNode () const;  ; Int_t GetMinWrksPerNode () const;  ; Int_t GetNActives () const;  ; Int_t GetNCores () const;  ; Int_t GetNNodes () const;  ; Int_t GetNWorkersCluster () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Description: Print node information. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofNodes.html:315,benchmark,benchmark,315,doc/master/classTProofNodes.html,https://root.cern,https://root.cern/doc/master/classTProofNodes.html,1,['benchmark'],['benchmark']
Testability,". ROOT: TProofPerfAnalysis Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TProofPerfAnalysis Class ReferencePROOF » PROOF benchmark utilities. ; Set of tools to analyse the performance tree. ; Definition at line 32 of file TProofPerfAnalysis.h. Classes; class  TFileInfo;  ; class  TPackInfo;  ; class  TWrkEntry;  ; class  TWrkInfo;  ; class  TWrkInfoFile;  . Public Member Functions;  TProofPerfAnalysis (const char *perffile, const char *title="""", const char *treename=""PROOF_PerfStats"");  Constructor: open the file and attach to the tree. ;  ;  TProofPerfAnalysis (TTree *tree, const char *title="""");  Constructor: open the file and attach to the tree. ;  ;  ~TProofPerfAnalysis () override;  Destructor: detach the tree and close the file. ;  ; void EventDist ();  Display event and packet distribution. ;  ; void FileDist (Bool_t writedet=kFALSE);  Analyse the file distribution. ;  ; void FileProcPlot (const char *fn, const char *out=0);  Show event processing or MB processing rate plot vs time. ;  ; void FileRatePlot (const char *fns=0);  Show MB processing rate plot per file vs time. ;  ; void GetAverages (Double_t &evtmax, Double_t &mbmax, Double_t &evt, Double_t &mb) const;  ; Double_t GetEvtRateAvg () const;  ; Double_t GetEvtRateAvgMax () const;  ; Double_t GetMBRateAvg () const;  ; Double_t GetMBRateAvgMax () const;  ; TClass * IsA () const override;  ; Bool_t IsValid () const;  ; void LatencyPlot (const char *wrks=0);  Show event processing or MB processing rate plot vs time Create the histograms. ;  ; void PrintFileInfo (const char *fn, const char *opt=""P"", const char *out=0);  Print information for file 'fn' (path including directory) or server 'fn'. ;  ; void PrintFileInfo (Int_t showlast=10, const char *opt="""", const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPerfAnalysis.html:369,benchmark,benchmark,369,doc/master/classTProofPerfAnalysis.html,https://root.cern,https://root.cern/doc/master/classTProofPerfAnalysis.html,1,['benchmark'],['benchmark']
Testability,". ROOT: TProofProgressLog Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TProofProgressLog Class ReferenceGUI » Session Viewer. ; Dialog used to display Proof session logs from the Proof progress dialog. ; It uses TProofMgr::GetSessionLogs() mechanism internally ; Definition at line 31 of file TProofProgressLog.h. Public Member Functions;  TProofProgressLog (const char *url=nullptr, Int_t sessionidx=0, Int_t w=700, Int_t h=600);  Create a window frame for log messages. ;  ;  TProofProgressLog (TProofProgressDialog *d, Int_t w=700, Int_t h=600);  Create a window frame for log messages. ;  ;  ~TProofProgressLog () override;  Destructor. ;  ; void AddBuffer (const char *buffer);  Add text to the window. ;  ; void BuildLogList (Bool_t create=kFALSE);  Build the list of workers. ;  ; void Clear (Option_t *=nullptr) override;  Clear log window. ;  ; void CloseWindow () override;  Handle close button or when closed via window manager action. ;  ; void DoLog (Bool_t grep=kFALSE);  Display logs. ;  ; TClass * IsA () const override;  ; void LoadBuffer (const char *buffer);  Load a text buffer in the window. ;  ; void LoadFile (const char *file);  Load a file in the window. ;  ; void LogMessage (const char *msg, Bool_t all);  Load/append a log msg in the log frame, if open. ;  ; void NoLineEntry ();  Enable/disable the line number entry. ;  ; void Popup ();  Show log window. ;  ; void Rebuild ();  Rebuild the log info for a new entered session. ;  ; void SaveToFile ();  Save the logs to a file Only the name of the file is taken, no expansion. ;  ; void Select (Int_t id, Bool_t all=kTRUE);  actions of select all/clear all button ;  ; void SetGrepView ();  Sets the view of grep filters according to the value of checkboxes. ;  ; void SetUrl (const char *url);  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofProgressLog.html:391,log,logs,391,doc/master/classTProofProgressLog.html,https://root.cern,https://root.cern/doc/master/classTProofProgressLog.html,3,['log'],"['log', 'logs']"
Testability,". ROOT: TProofProgressMemoryPlot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TProofProgressMemoryPlot Class ReferenceGUI » Session Viewer. ; This class implements a dialog, used to display the memory footprint on the proof workers and master. ; For the workers, memory is plotted as a function of number of events processed. For the master, it is plotted as a function of number of objects merged ; Definition at line 28 of file TProofProgressMemoryPlot.h. Public Member Functions;  TProofProgressMemoryPlot (TProofProgressDialog *d, Int_t w=700, Int_t h=300);  Main constructor. ;  ;  ~TProofProgressMemoryPlot () override;  Destructor. ;  ; void Clear (Option_t *=nullptr) override;  Clear the canvases. ;  ; void DoPlot ();  Draw the plot from the logs. ;  ; void Select (Int_t id);  actions of select all/clear all button ;  ;  Public Member Functions inherited from TGTransientFrame;  TGTransientFrame (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a transient window. ;  ; virtual void CenterOnParent (Bool_t croot=kTRUE, EPlacement pos=kCenter);  Position transient frame centered relative to the parent frame. ;  ; const TGWindow * GetMain () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a transient frame widget as a C++ statement(s) on output stream out. ;  ; void SaveSource (const char *filename=""Rootdlog.C"", Option_t *option="""") override;  Save the GUI transient frame widget in a C++ macro file. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofProgressMemoryPlot.html:931,log,logs,931,doc/master/classTProofProgressMemoryPlot.html,https://root.cern,https://root.cern/doc/master/classTProofProgressMemoryPlot.html,1,['log'],['logs']
Testability,". ROOT: TProofSuperMaster Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TProofSuperMaster Class ReferencePROOF » PROOF kernel Libraries. ; Implementation of TProof controlling PROOF federated clusters. ; Definition at line 33 of file TProofSuperMaster.h. Public Member Functions;  TProofSuperMaster (const char *masterurl, const char *conffile=kPROOF_ConfFile, const char *confdir=kPROOF_ConfDir, Int_t loglevel=0, const char *alias=0, TProofMgr *mgr=0);  Start super master PROOF session. ;  ;  ~TProofSuperMaster () override;  ; TClass * IsA () const override;  ; Long64_t Process (const char *dsname, const char *sel, Option_t *o="""", Long64_t nent=-1, Long64_t fst=0, TObject *enl=0) override;  Process a dataset which is stored on the master with name 'dsetname'. ;  ; Long64_t Process (const char *dsname, TSelector *sel, Option_t *o="""", Long64_t nent=-1, Long64_t fst=0, TObject *enl=0) override;  Process with name of dataset and TSelector object. ;  ; Long64_t Process (const char *sel, Long64_t nent, Option_t *o="""") override;  Generic (non-data based) selector processing: the Process() method of the specified selector (.C) or TSelector object is called 'n' times. ;  ; Long64_t Process (TDSet *set, const char *selector, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Process a data set (TDSet) using the specified selector (.C) file. ;  ; Long64_t Process (TDSet *set, TSelector *selector, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Process a data set (TDSet) using the specified selector object. ;  ; Long64_t Process (TFileCollection *fc, const char *sel, Option_t *o="""", Long64_t nent=-1, Long64_t fst=0) override;  Process a data set (TFileCollection) using the specified selector (.C) file or TSelector object. ;  ; Long",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofSuperMaster.html:602,log,loglevel,602,doc/master/classTProofSuperMaster.html,https://root.cern,https://root.cern/doc/master/classTProofSuperMaster.html,1,['log'],['loglevel']
Testability,". ROOT: TQueryResultManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TQueryResultManager Class ReferencePROOF » PROOF kernel Libraries. ; Class managing the query-result area. ; Definition at line 35 of file TQueryResultManager.h. Public Member Functions;  TQueryResultManager (const char *qdir, const char *stag, const char *sdir, TProofLockPath *lck, FILE *logfile=0);  Constructor. ;  ;  ~TQueryResultManager () override;  Cleanup. ;  ; Int_t ApplyMaxQueries (Int_t mxq);  Scan the queries directory and remove the oldest ones (and relative dirs, if empty) in such a way only 'mxq' queries are kept. ;  ; Int_t CleanupQueriesDir ();  Remove all queries results referring to previous sessions. ;  ; Int_t CleanupSession (const char *sessiontag);  Cleanup query dir qdir. ;  ; Int_t DrawQueries () const;  ; Bool_t FinalizeQuery (TProofQueryResult *pq, TProof *proof, TVirtualProofPlayer *player);  Final steps after Process() to complete the TQueryResult instance. ;  ; Float_t GetCpuTime ();  ; Float_t GetRealTime ();  ; void IncrementDrawQueries ();  ; void IncrementSeqNum ();  ; TClass * IsA () const override;  ; Int_t KeptQueries () const;  ; TProofQueryResult * LocateQuery (TString queryref, Int_t &qry, TString &qdir);  Locate query referenced by queryref. ;  ; Int_t LockSession (const char *sessiontag, TProofLockPath **lck);  Try locking query area of session tagged sessiontag. ;  ; TList * PreviousQueries () const;  ; TList * Queries () const;  ; const char * QueryDir () const;  ; void RemoveQuery (const char *queryref, TList *otherlist=0);  Remove everything about query queryref; if defined 'otherlist' will containe the list of removed pointers (already deleted) ;  ; void RemoveQuery (TQueryResult *qr, Bool_t soft=kFALSE);  Remove everything about query qr. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQueryResultManager.html:572,log,logfile,572,doc/master/classTQueryResultManager.html,https://root.cern,https://root.cern/doc/master/classTQueryResultManager.html,1,['log'],['logfile']
Testability,". ROOT: TRandom3 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TRandom3 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Random number generator class based on M. ; Matsumoto and T. Nishimura, Mersenne Twister: A 623-diminsionally equidistributed uniform pseudorandom number generator ACM Transactions on Modeling and Computer Simulation, Vol. 8, No. 1, January 1998, pp 3–30.; For more information see the Mersenne Twister homepage [http://www.math.keio.ac.jp/~matumoto/emt.html]; Advantage:. large period 2**19937 -1; relatively fast (slightly slower than TRandom2 but much faster than TRandom1). Drawback:; a relative large internal state of 624 integers; generate only 32 random bits; not passing all the random generator tests. It fails some tests in TestU01 (see [http://simul.iro.umontreal.ca/testu01/tu01.html]). An altenativly excellent generator passing all tests of TestU01, having 61 random bits and fast as Mersenne and Twister is MIXMAX (TRandomMixMax). ; Definition at line 27 of file TRandom3.h. Public Member Functions;  TRandom3 (UInt_t seed=4357);  Default constructor If seed is 0, the seed is automatically computed via a TUUID object. ;  ;  ~TRandom3 () override;  Default destructor. ;  ; UInt_t GetSeed () const override;  Return one element of the generator state used to generate the random numbers. ;  ; virtual const UInt_t * GetState () const;  ; TClass * IsA () const override;  ; Double_t Rndm () override;  Machine independent random number generator. ;  ; Double_t Rndm () override;  Machine independent random number generator. ;  ; virtual Double_t Rndm (Int_t);  ; void RndmArray (Int_t n, Double_t *array) override;  Return an array of n random numbers uniformly distributed in ]0,1]. ;  ; void RndmArray (Int_t n, Float_t *array) override;  Return a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRandom3.html:940,test,tests,940,doc/master/classTRandom3.html,https://root.cern,https://root.cern/doc/master/classTRandom3.html,2,['test'],['tests']
Testability,". ROOT: TSQLMonitoringWriter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TSQLMonitoringWriter Class Reference. . Definition at line 30 of file TSQLMonitoring.h. Public Member Functions;  TSQLMonitoringWriter (const char *serv, const char *user, const char *pass, const char *table);  Constructor. ;  ; virtual ~TSQLMonitoringWriter ();  Destructor. ;  ; TClass * IsA () const override;  ; Bool_t SendParameters (TList *values, const char *) override;  Register query log using the information in the list which is in the form TParameter(<par>,<value>) or TNamed(<name>,<string>). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Verbose (Bool_t onoff) override;  ;  Public Member Functions inherited from TVirtualMonitoringWriter;  TVirtualMonitoringWriter ();  ;  TVirtualMonitoringWriter (const char *name, Double_t value);  ; virtual ~TVirtualMonitoringWriter ();  destructor ;  ; TClass * IsA () const override;  ; virtual Bool_t SendFileCloseEvent (TFile *);  ; virtual Bool_t SendFileOpenProgress (TFile *, TList *, const char *, Bool_t=kFALSE);  ; virtual Bool_t SendFileReadProgress (TFile *);  ; virtual Bool_t SendFileWriteProgress (TFile *);  ; virtual Bool_t SendInfoDescription (const char *);  ; virtual Bool_t SendInfoStatus (const char *);  ; virtual Bool_t SendInfoTime ();  ; virtual Bool_t SendInfoUser (const char *=nullptr);  ; virtual Bool_t SendProcessingProgress (Double_t, Double_t, Bool_t=kFALSE);  ; virtual Bool_t SendProcessingStatus (const char *, Bool_t=kFALSE);  ; virtual void SetLogLevel (const char *=""WARNING"");  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLMonitoringWriter.html:677,log,log,677,doc/master/classTSQLMonitoringWriter.html,https://root.cern,https://root.cern/doc/master/classTSQLMonitoringWriter.html,1,['log'],['log']
Testability,". ROOT: TSelEvent Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Attributes |; List of all members ; TSelEvent Class ReferencePROOF » PROOF benchmark utilities. ; Selector for PROOF I/O benchmark test. ; For the I/O benchmark, event files are read in and histograms are filled. For memory clean-up, dedicated files large enough to clean up memory cache on the machine are read in. Or memory clean-up can be accompolished by system call on Linux machine inside SlaveBegin(..) which should be much faster the reading in large files. ; Definition at line 42 of file TSelEvent.h. Public Member Functions;  TSelEvent ();  Constructor. ;  ;  TSelEvent (TTree *);  Constructor. ;  ; virtual ~TSelEvent ();  ; virtual void Begin (TTree *);  The Begin() function is called at the start of the query. ;  ; TCanvas * GetCHist ();  ; Bool_t GetDebug ();  ; TH1F * GetNTracksHist ();  ; virtual TList * GetOutputList () const;  ; TH1F * GetPtHist ();  ; TPBReadType * GetReadType ();  ; virtual void Init (TTree *tree);  ; TClass * IsA () const override;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; virtual Bool_t Process (Long64_t entry);  The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ;  ; virtual void SetInputList (TList *input);  ; virtual void SetObject (TObject *obj);  ; virtual void SetOption (const char *option);  ; virtual void SlaveBegin (TTree *tree);  The SlaveBegin() function is called after the Begin() function. ;  ; virtual void SlaveTerminate ();  The SlaveTerminate() function is called after all entries or objects have been processed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelEvent.html:304,benchmark,benchmark,304,doc/master/classTSelEvent.html,https://root.cern,https://root.cern/doc/master/classTSelEvent.html,4,"['benchmark', 'test']","['benchmark', 'test']"
Testability,". ROOT: TSelEventGen Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; Private Attributes |; List of all members ; TSelEventGen Class ReferencePROOF » PROOF benchmark utilities. ; Selector for event file generation. ; List of files to be generated for each node is provided by client. And list of files generated is sent back. Existing files are reused if not forced to be regenerated. ; Definition at line 33 of file TSelEventGen.h. Public Member Functions;  TSelEventGen ();  pointer to the analyzed TTree or TChain ;  ;  ~TSelEventGen () override;  ; void Begin (TTree *) override;  The Begin() function is called at the start of the query. ;  ; TList * GetOutputList () const override;  ; void Init (TTree *tree) override;  ; TClass * IsA () const override;  ; Bool_t Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; void Print (Option_t *option="""") const override;  This method must be overridden when a class wants to print itself. ;  ; Bool_t Process (Long64_t entry) override;  The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ;  ; void SetInputList (TList *input) override;  ; void SetObject (TObject *obj) override;  ; void SetOption (const char *option) override;  ; void SlaveBegin (TTree *tree) override;  The SlaveBegin() function is called after the Begin() function. ;  ; void SlaveTerminate () override;  The SlaveTerminate() function is called after all entries or objects have been processed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Terminate () override;  The Terminate() function is the last function to be called during a query. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelEventGen.html:340,benchmark,benchmark,340,doc/master/classTSelEventGen.html,https://root.cern,https://root.cern/doc/master/classTSelEventGen.html,1,['benchmark'],['benchmark']
Testability,". ROOT: TSelHandleDataSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TSelHandleDataSet Class ReferencePROOF » PROOF benchmark utilities. ; PROOF selector for file cache release. ; List of files to be cleaned for each node is provided by client. ; Definition at line 30 of file TSelHandleDataSet.h. Public Member Functions;  TSelHandleDataSet ();  ;  ~TSelHandleDataSet () override;  ; void Begin (TTree *) override;  ; TList * GetOutputList () const override;  ; void Init (TTree *) override;  ; TClass * IsA () const override;  ; Bool_t Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; Bool_t Process (Long64_t entry) override;  The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ;  ; void SetInputList (TList *input) override;  ; void SetObject (TObject *obj) override;  ; void SetOption (const char *option) override;  ; void SlaveBegin (TTree *) override;  Init the type from the input parameters. ;  ; void SlaveTerminate () override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Terminate () override;  ; Int_t Version () const override;  ;  Public Member Functions inherited from TSelector;  TSelector ();  Default selector ctor. ;  ;  ~TSelector () override;  Selector destructor. ;  ; virtual void Abort (const char *why, EAbort what=kAbortProcess);  Abort processing. ;  ; virtual EAbort GetAbort () const;  ; virtual Int_t GetEntry (Long64_t, Int_t=0);  ; virtual TList * GetInputList () const;  ; const char * GetOption () const override;  ; virtual Long64_t GetStatus () const;  ; virtual void ImportOutput (TList *output); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelHandleDataSet.html:327,benchmark,benchmark,327,doc/master/classTSelHandleDataSet.html,https://root.cern,https://root.cern/doc/master/classTSelHandleDataSet.html,1,['benchmark'],['benchmark']
Testability,". ROOT: TSelHist Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TSelHist Class ReferencePROOF » PROOF benchmark utilities. ; PROOF selector for CPU-intensive benchmark test. ; Events are generated and 1-D, 2-D, and/or 3-D histograms are filled. ; Definition at line 32 of file TSelHist.h. Public Member Functions;  TSelHist ();  Constructor. ;  ;  ~TSelHist () override;  Destructor. ;  ; void Begin (TTree *tree) override;  The Begin() function is called at the start of the query. ;  ; TList * GetOutputList () const override;  ; TClass * IsA () const override;  ; Bool_t Process (Long64_t entry) override;  The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ;  ; void SetInputList (TList *input) override;  ; void SetObject (TObject *obj) override;  ; void SetOption (const char *option) override;  ; void SlaveBegin (TTree *tree) override;  The SlaveBegin() function is called after the Begin() function. ;  ; void SlaveTerminate () override;  The SlaveTerminate() function is called after all entries or objects have been processed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Terminate () override;  The Terminate() function is the last function to be called during a query. ;  ; Int_t Version () const override;  ;  Public Member Functions inherited from TSelector;  TSelector ();  Default selector ctor. ;  ;  ~TSelector () override;  Selector destructor. ;  ; virtual void Abort (const char *why, EAbort what=kAbortProcess);  Abort processing. ;  ; virtual EAbort GetAbort () const;  ; virtual Int_t GetEntry (Long64_t, Int_t=0);  ; virtual TList * GetInputList () const;  ; const char * GetOption () const override;  ; virtual Long",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelHist.html:280,benchmark,benchmark,280,doc/master/classTSelHist.html,https://root.cern,https://root.cern/doc/master/classTSelHist.html,3,"['benchmark', 'test']","['benchmark', 'test']"
Testability,". ROOT: TSessionFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TSessionFrame Class Reference. . Definition at line 246 of file TSessionViewer.h. Public Member Functions;  TSessionFrame (TGWindow *parent, Int_t w, Int_t h);  Constructor. ;  ;  ~TSessionFrame () override;  Destructor. ;  ; void Build (TSessionViewer *gui);  Build session frame. ;  ; void CheckAutoEnPack (Bool_t checked=kTRUE);  ; Int_t GetLogLevel () const;  ; TGTab * GetTab () const;  ; TClass * IsA () const override;  ; void OnApplyLogLevel ();  Apply selected log level on current session. ;  ; void OnApplyParallel ();  Apply selected number of workers on current Proof session. ;  ; void OnBtnAddClicked ();  Open file dialog and add selected package file to the list. ;  ; void OnBtnDisconnectClicked ();  Disconnect from current Proof session. ;  ; void OnBtnDownClicked ();  Move selected package entry one position down in the list. ;  ; void OnBtnGetQueriesClicked ();  Get list of queries from current Proof server and populate the list tree. ;  ; void OnBtnNewQueryClicked ();  Call ""New Query"" Dialog. ;  ; void OnBtnRemoveClicked ();  Remove selected package from the list. ;  ; void OnBtnRemoveDSet ();  Remove dataset from the list and from the cluster. ;  ; void OnBtnShowLogClicked ();  Show session log. ;  ; void OnBtnUpClicked ();  Move selected package entry one position up in the list. ;  ; void OnBtnUploadDSet ();  Open Upload Dataset dialog. ;  ; void OnBtnVerifyDSet ();  Verify that the files in the selected dataset are present on the cluster. ;  ; void OnClearPackages ();  Clear (disable) all packages in the current session. ;  ; void OnCommandLine ();  Command line handling. ;  ; void OnDisablePackages ();  Disable selected package(s) in the current session. ;  ; void OnEnablePackages ();  Enable selected pac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionFrame.html:718,log,log,718,doc/master/classTSessionFrame.html,https://root.cern,https://root.cern/doc/master/classTSessionFrame.html,1,['log'],['log']
Testability,". ROOT: TSessionViewer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TSessionViewer Class ReferenceGUI » Session Viewer. ; Widget used to manage PROOF or local sessions, PROOF connections, queries construction and results handling. ; Definition at line 515 of file TSessionViewer.h. Public Member Functions;  TSessionViewer (const char *title, Int_t x, Int_t y, UInt_t w, UInt_t h);  Main Session viewer constructor. ;  ;  TSessionViewer (const char *title=""ROOT Session Viewer"", UInt_t w=550, UInt_t h=320);  Main Session viewer constructor. ;  ;  ~TSessionViewer () override;  Destructor. ;  ; virtual void Build ();  Build main session viewer frame and subframes. ;  ; void ChangeRightLogo (const char *name);  Change the right logo (used for animation). ;  ; void CleanupSession ();  Clean-up Proof session. ;  ; void CloseWindow () override;  Close main Session Viewer window. ;  ; void DeleteQuery ();  Delete query from list tree and ask user if they want to delete it also from server. ;  ; void DisableTimer ();  Disable animation timer. ;  ; void EditQuery ();  Edit currently selected query. ;  ; void EnableTimer ();  Enable animation timer. ;  ; TSessionDescription * GetActDesc () const;  ; const TGPicture * GetBasePict () const;  ; TGPopupMenu * GetCascadeMenu () const;  ; TGHProgressBar * GetConnectProg () const;  ; TContextMenu * GetContextMenu () const;  ; TSessionInputFrame * GetInputFrame () const;  ; const TGPicture * GetLocalPict () const;  ; TGPopupMenu * GetOptionsMenu () const;  ; TSessionOutputFrame * GetOutputFrame () const;  ; TGPopupMenu * GetPopupQry () const;  ; TGPopupMenu * GetPopupSrv () const;  ; const TGPicture * GetProofConPict () const;  ; const TGPicture * GetProofDisconPict () const;  ; const TGPicture * GetQueryConPict () const;  ; const TGPicture * GetQueryDisconPict ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionViewer.html:911,log,logo,911,doc/master/classTSessionViewer.html,https://root.cern,https://root.cern/doc/master/classTSessionViewer.html,1,['log'],['logo']
Testability,". ROOT: TVirtualFFT Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Protected Attributes |; List of all members ; TVirtualFFT Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; TVirtualFFT is an interface class for Fast Fourier Transforms. ; The default FFT library is FFTW. To use it, FFTW3 library should already be installed, and ROOT should be have fftw3 module enabled, with the directories of fftw3 include file and library specified (see installation instructions). Function SetDefaultFFT() allows to change the default library. Available transform types:; FFT:; ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT) in one or more dimensions, -1 in the exponent; ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT) in one or more dimensions, +1 in the exponent; ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT) in one or more dimensions,; ""C2R"" - inverse transforms to ""R2C"", taking complex input (storing the non-redundant half of a logically Hermitian array) to real output; ""R2HC"" - a real-input DFT with output in ¡Èhalfcomplex¡É format, i.e. real and imaginary parts for a transform of size n stored as r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; ""HC2R"" - computes the reverse of FFTW_R2HC, above; ""DHT"" - computes a discrete Hartley transform. Sine/cosine transforms:; Different types of transforms are specified by parameter kind of the SineCosine() static function. 4 different kinds of sine and cosine transforms are available. DCT-I (REDFT00 in FFTW3 notation)- kind=0; DCT-II (REDFT01 in FFTW3 notation)- kind=1; DCT-III(REDFT10 in FFTW3 notation)- kind=2; DCT-IV (REDFT11 in FFTW3 notation)- kind=3; DST-I (RODFT00 in FFTW3 notation)- kind=4; DST-II (RODFT01 in FFTW3 notation)- kind=5; DST-III(RODFT10 in FFTW3 notation)- kind=6; DST-IV (RODFT11 in FFTW3 notation)- ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualFFT.html:1152,log,logically,1152,doc/master/classTVirtualFFT.html,https://root.cern,https://root.cern/doc/master/classTVirtualFFT.html,1,['log'],['logically']
Testability,". ROOT: TVirtualViewer3D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TVirtualViewer3D Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; Abstract 3D shapes viewer. ; The concrete implementations are:. TViewerX3D : X3d viewer; TGLViewer : OpenGL viewer. 3D Viewer Infrastructure Overview; The 3D Viewer infrastructure consists of:. TVirtualViewer3D interface: An abstract handle to the viewer, allowing client to test preferences, add objects, control the viewer via scripting (to be added) etc. -TBuffer3D class hierarchy: Used to describe 3D objects (""shapes""); filled /added by negotiation with viewer via TVirtualViewer3D. Together these allow clients to publish objects to any one of the 3D viewers (currently OpenGL/x3d,TPad), free of viewer specific drawing code. They allow our simple x3d viewer, and considerably more sophisticated OpenGL one to both work with both geometry libraries (g3d and geom) efficiently.; Publishing to a viewer consists of the following steps:. Create / obtain viewer handle; Begin scene on viewer; Fill mandatory parts of TBuffer3D describing object; Add to viewer; Fill optional parts of TBuffer3D if requested by viewer, and add again ... repeat 3/4/5 as required; End scene on viewer. Creating / Obtaining Viewer; Create/obtain the viewer handle via local/global pad - the viewer is always bound to a TPad object at present [This may be removed as a restriction in the future] . You should perform the publishing to the viewer described below in the Paint() method of the object you attach to the pad (via Draw()) TVirtualViewer3D * v = gPad->GetViewer3D(""xxxx"");; gPad#define gPadDefinition TVirtualPad.h:308; TVirtualViewer3DAbstract 3D shapes viewer.Definition TVirtualViewer3D.h:34; v@ vDefinition rootcling_impl.cxx:3699; "" xxxx"" is viewer type: OpenGL ""ogl"", X3D ""x3d"" or Pad ""pad"" (d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualViewer3D.html:585,test,test,585,doc/master/classTVirtualViewer3D.html,https://root.cern,https://root.cern/doc/master/classTVirtualViewer3D.html,1,['test'],['test']
Testability,. ROOT: TWebCanvas tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; TWebCanvas tutorialsTutorials. ; Examples showing the special features of web-based canvas. . Files; file  fonts_ttf.cxx;   Usage of TTF fonts in web canvas. ;  ; file  haxis.cxx;   Swap X/Y axes drawing and use to draw TH1 as bar and as markers. ;  ; file  inframe.cxx;   Drawing primitives inside and outside of the frame. ;  ; file  latex_url.cxx;   Use of interactive URL links inside TLatex. ;  ; file  logN.cxx;   Logarithmic scales support in web canvas. ;  ; file  triangle.cxx;  User class with custom JavaScript painter in the web canvas. ;  ; file  twoscales.cxx;   Two fully interactive scales in web canvas. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__webcanv.html:527,log,logN,527,doc/master/group__tutorial__webcanv.html,https://root.cern,https://root.cern/doc/master/group__tutorial__webcanv.html,1,['log'],['logN']
Testability,". ROOT: Tree Library. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files |; Namespaces |; Classes ; Tree Library. ; In order to store columnar datasets, ROOT provides the TTree, TChain, TNtuple and TNtupleD classes. ; The TTree class represents a columnar dataset. Any C++ type can be stored in the columns. The TTree has allowed to store about 1 EB of data coming from the LHC alone: it is demonstrated to scale and it's battle tested. It has been optimized during the years to reduce dataset sizes on disk and to deliver excellent runtime performance. It allows to access only part of the columns of the datasets, too. The TNtuple and TNtupleD classes are specialisations of the TTree class which can only hold single precision and double precision floating-point numbers respectively; The TChain is a collection of TTrees, which can be located also in different files. . Files; file  InternalTreeUtils.hxx;  ; file  RFriendInfo.hxx;  . Namespaces; namespace  ROOT::Internal::TreeUtils;  Namespace hosting functions and classes to retrieve tree information for internal use. ;  . Classes; struct  ROOT::TreeUtils::RFriendInfo;  Information about friend trees of a certain TTree or TChain object. More...;  ; class  TBasket;  Manages buffers for branches of a Tree. More...;  ; class  TBasketSQL;  Implement TBasket for a SQL backend. More...;  ; class  TBranch;  A TTree is a list of TBranches. More...;  ; class  TBranchClones;  A Branch for the case of an array of clone objects. More...;  ; class  TBranchElement;  A Branch for the case of an object. More...;  ; class  TBranchObject;  A Branch for the case of an object. More...;  ; class  TBranchRef;  A branch containing and managing a TRefTable for TRef autoloading. More...;  ; class  TBranchSTL;  A Branch handling STL collection of pointers (vectors, lists, queues, sets and multisets) while storing them in split mode. More...;  ; class  TBufferSQL;  Implement TBuffer for a SQL backend. More...;  ; cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tree.html:465,test,tested,465,doc/master/group__tree.html,https://root.cern,https://root.cern/doc/master/group__tree.html,1,['test'],['tested']
Testability,". ROOT: Tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; Tutorials. ; A collection of C++ macros, Python scripts and notebooks helping to learn ROOT by example. ; You can execute the scripts in $ROOTSYS/tutorials (or sub-directories) by setting your current directory in the script directory or from any user directory with write access.; Several tutorials create new files. If you have write access to the tutorials directory, the new files will be created in the tutorials directory, otherwise they will be created in the user directory.; You can start by executing the standard ROOT demos with a session like:; root > .x demos.C; or; root > .x $ROOTSYS/tutorials/demos.C; You can execute the standard ROOT graphics benchmark with; root > .x benchmarks.C; or; root > .x $ROOTSYS/tutorials/benchmarks.C; The $ROOTSYS/tutorials directory includes several sub-directories: . Modules;  Histograms tutorials;  Examples showing the ""histograms' classes"" usage. ;  ;  Tree tutorials;  Example code which illustrates how to use ROOT trees and ntuples. ;  ;  Dataframe tutorials;  These examples show various features of RDataFrame: ROOT's declarative analysis interface. ;  ;  ROOT 7 tutorials;  Various examples showing the ROOT 7 interface. ;  ;  FOAM tutorials;  Examples showing how to use FOAM. ;  ;  Containers tutorials;  Examples showing the ""containers' classes"" usage. ;  ;  Event display tutorials;  Examples showing the ""Event display classes"" usage. ;  ;  Event display ROOT7 tutorials;  Examples showing the ""Event display classes"" usage with ROOT7. ;  ;  Geometry tutorials;  Various ROOT geometry package examples. ;  ;  Fast Fourier Transforms tutorials;  Example showing the Fast Fourier Transforms interface in ROOT. ;  ;  Fit Tutorials;  These tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code. ;  ;  RooFit Tutorials;  These tutorials illustrate the main feat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Tutorials.html:780,benchmark,benchmark,780,doc/master/group__Tutorials.html,https://root.cern,https://root.cern/doc/master/group__Tutorials.html,3,['benchmark'],"['benchmark', 'benchmarks']"
Testability,". ROOT: VecOps tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; VecOps tutorialsTutorials. ; These examples show the functionalities of the VecOps utilities. ; Please note that you can find the exhaustive documentation here in the reference guide. . Files; file  vo001_AdoptOrOwnMemory.C;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo001_AdoptOrOwnMemory.py;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo002_VectorCalculations.C;   In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars. ;  ; file  vo003_LogicalOperations.C;   In this tutorial we learn how the RVec class can be used to express logical operations. ;  ; file  vo004_SortAndSelect.C;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo004_SortAndSelect.py;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo005_Combinations.C;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo005_Combinations.py;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo006_IndexManipulation.C;   In this tutorial we demonstrate RVec helpers for index manipulation. ;  ; file  vo007_PhysicsHelpers.C;   In this tutorial we demonstrate RVec helpers for physics computations such as angle differences \(\Delta \phi\), the distance in the \(\eta\)- \(\phi\) plane \(\Delta R\) and the invariant mass. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__vecops.html:860,log,logical,860,doc/master/group__tutorial__vecops.html,https://root.cern,https://root.cern/doc/master/group__tutorial__vecops.html,1,['log'],['logical']
Testability,". ROOT: bindings/r/tests/Functor.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Typedefs |; Functions ; Functor.C File Reference. #include <TRInterface.h>; #include <TMath.h>. Include dependency graph for Functor.C:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  MyFunctor;  . Typedefs; typedef Double_t(* Function) (Double_t);  . Functions; void Functor ();  ;  RCPP_MODULE (MyFunctorModule);  . Typedef Documentation. ◆ Function. typedef Double_t(* Function) (Double_t). Definition at line 4 of file Functor.C. Function Documentation. ◆ Functor(). void Functor ; (; ). Definition at line 26 of file Functor.C. ◆ RCPP_MODULE(). RCPP_MODULE ; (; MyFunctorModule ; ). Definition at line 18 of file Functor.C. bindingsrtestsFunctor.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/bindings_2r_2tests_2Functor_8C.html:19,test,tests,19,doc/master/bindings_2r_2tests_2Functor_8C.html,https://root.cern,https://root.cern/doc/master/bindings_2r_2tests_2Functor_8C.html,1,['test'],['tests']
Testability,". ROOT: bindings/r/tests/Object.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions |; Variables ; Object.C File Reference. #include <TRInterface.h>. Include dependency graph for Object.C:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Functions; void Object ();  . Variables; ROOT::R::TRInterface & r = ROOT::R::TRInterface::Instance();  . Function Documentation. ◆ Object(). void Object ; (; ). Definition at line 6 of file Object.C. Variable Documentation. ◆ r. ROOT::R::TRInterface& r = ROOT::R::TRInterface::Instance(). Definition at line 4 of file Object.C. bindingsrtestsObject.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:12 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Object_8C.html:19,test,tests,19,doc/master/Object_8C.html,https://root.cern,https://root.cern/doc/master/Object_8C.html,1,['test'],['tests']
Testability,". ROOT: bindings/r/tests/ROOTR.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOTR.C File Reference. #include <TRInterface.h>. Include dependency graph for ROOTR.C:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Functions; Double_t myFunc (Double_t x);  ; void ROOTR ();  . Function Documentation. ◆ myFunc(). Double_t myFunc ; (; Double_t ; x). Definition at line 4 of file ROOTR.C. ◆ ROOTR(). void ROOTR ; (; ). Definition at line 9 of file ROOTR.C. bindingsrtestsROOTR.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:12 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ROOTR_8C.html:19,test,tests,19,doc/master/ROOTR_8C.html,https://root.cern,https://root.cern/doc/master/ROOTR_8C.html,1,['test'],['tests']
Testability,". ROOT: bindings/r/tests/ROOTR.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOTR.C. Go to the documentation of this file. 1//script to test Modules; 2#include<TRInterface.h>; 3 ; 4Double_t myFunc(Double_t x); 5{; 6 return cos(x);; 7}; 8 ; 9void ROOTR(); 10{; 11 ROOT::R::TRInterface &r=ROOT::R::TRInterface::Instance();; 12 r.SetVerbose(kFALSE);; 13 r.LoadModule(""Gpad"");; 14 r.LoadModule(""Hist"");; 15 r.LoadModule(""Rint"");; 16 ; 17 r<<""x<-seq(0,2*pi,by=.1)"";; 18 r<<""c1<-new(TCanvas,'c1','dlnorm')"";; 19 r<<""u <-new(TGraph,length(x),x,dlnorm(x))"" ;//TGraph(int,double*,double*); 20 r<<""u$Draw()"";; 21 ; 22 r<<""c2<-new(TCanvas,'c2','DiLog from TMath')"";; 23 r<<""o<- new(TF1,'dilog','TMath::DiLog(x)',0,2*pi)"";; 24 r<<""o$Draw()"";; 25// ; 26 r<<""c3<-new(TCanvas,'c3','Custom')"";; 27 r<<""i <- new(TF1,'f2','[0]*myFunc([1]*x)',0,2*pi)""; ; 28 r<<""i$SetRange(0,2*pi)"";; 29 r<<""i$SetParameter(0,4)"";; 30 r<<""i$SetParameter(1,pi/2)"";; 31 r<<""print(i$Eval(0))"";; 32 r<<""print(i$Eval(c(0,pi)))"";; 33 r<<""i$Draw('')"";; 34 ; 35// r<<""gApp<-new(TRint,'ROOTR')"";; 36// r<<""gApp$ProcessLine('cout<<\""Calling cout from TRint\""<<endl;')"";; 37 ; 38}; ROOTRvoid ROOTR()Definition ROOTR.C:9; myFuncDouble_t myFunc(Double_t x)Definition ROOTR.C:4; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Double_tdouble Double_tDefinition RtypesCore.h:59; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TRInterface.h; ROOT::R::TRInterfaceROOT R was implemented using the R Project library and the modules Rcpp and RInsideDefinition TRInterface.h:136; ROOT::R::TRInterface::Instancestatic TRInterface & Instance()static method to get an TRInterface instance referenceDefinition TRInterface.cxx:187; xDouble_t x[n]Definition legend1.C:17. bindingsrtestsROOTR.C. ROOT ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ROOTR_8C_source.html:19,test,tests,19,doc/master/ROOTR_8C_source.html,https://root.cern,https://root.cern/doc/master/ROOTR_8C_source.html,2,['test'],"['test', 'tests']"
Testability,". ROOT: core Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. core Directory Reference. Directory dependency graph for core:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  base;  ;  clingutils;  ;  cont;  ;  dictgen;  ;  foundation;  ;  gui;  ;  imt;  ;  macosx;  ;  meta;  ;  metacling;  ;  multiproc;  ;  rint;  ;  testsupport;  ;  thread;  ;  unix;  ;  winnt;  ;  zip;  . core. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_ed1accc5bc42b26d499c0c84b15b16d5.html:423,test,testsupport,423,doc/master/dir_ed1accc5bc42b26d499c0c84b15b16d5.html,https://root.cern,https://root.cern/doc/master/dir_ed1accc5bc42b26d499c0c84b15b16d5.html,1,['test'],['testsupport']
Testability,". ROOT: core/foundation/inc/ROOT/RLogger.hxx File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Macros |; Enumerations |; Functions ; RLogger.hxx File ReferenceCore ROOT classes » Base ROOT classes | ROOT7 classes. #include <atomic>; #include <list>; #include <memory>; #include <mutex>; #include <sstream>; #include <string>; #include <utility>. Include dependency graph for RLogger.hxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  ROOT::Experimental::Detail::RLogBuilder;  Builds a diagnostic entry, emitted by the static RLogManager upon destruction of this builder, where - by definition - the RLogEntry has been completely built. More...;  ; class  ROOT::Experimental::RLogChannel;  A log configuration for a channel, e.g. More...;  ; class  ROOT::Experimental::RLogDiagCount;  Keep track of emitted errors and warnings. More...;  ; class  ROOT::Experimental::RLogEntry;  A diagnostic that can be emitted by the RLogManager. More...;  ; class  ROOT::Experimental::RLogHandler;  Abstract RLogHandler base class. More...;  ; struct  ROOT::Experimental::RLogLocation;  A diagnostic location, part of an RLogEntry. More...;  ; class  ROOT::Experimental::RLogManager;  A RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the sum of RLogDiagCounts for all channels. More...;  ; class  ROOT::Experimental::RLogScopedDiagCount;  Object to count the number of warnings and errors emitted by a section of code, after construction of this type. More...;  ; class  ROOT::Experimental::RLogScopedVerbosity;  Change the verbosity level (global or specific to the RLogChannel passed to the constructor) for the lifetime of this object. More...;  . Namespaces; namespace  ROOT;  tbb:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RLogger_8hxx.html:976,log,log,976,doc/master/RLogger_8hxx.html,https://root.cern,https://root.cern/doc/master/RLogger_8hxx.html,1,['log'],['log']
Testability,". ROOT: geom/geom/inc/TGeoNode.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TGeoNode.h. Go to the documentation of this file. 1// @(#)root/geom:$Id$; 2// Author: Andrei Gheata 24/10/01; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TGeoNode; 13#define ROOT_TGeoNode; 14 ; 15#include ""TGeoAtt.h""; 16 ; 17#include ""TNamed.h""; 18 ; 19#include ""TGeoVolume.h""; 20 ; 21#include ""TGeoPatternFinder.h""; 22 ; 23// forward declarations; 24class TString;; 25class TGeoVolume;; 26class TGeoShape;; 27class TGeoMedium;; 28class TGeoMatrix;; 29class TGeoHMatrix;; 30class TGeoExtension;; 31 ; 32////////////////////////////////////////////////////////////////////////////; 33// //; 34// TGeoNode - base class for logical nodes. They represent volumes //; 35// positioned inside a mother volume //; 36// //; 37////////////////////////////////////////////////////////////////////////////; 38 ; 39class TGeoNode : public TNamed, public TGeoAtt {; 40protected:; 41 TGeoVolume *fVolume = nullptr; // volume associated with this; 42 TGeoVolume *fMother = nullptr; // mother volume; 43 Int_t fNumber = 0; // copy number; 44 Int_t fNovlp = 0; // number of overlaps; 45 Int_t *fOverlaps = nullptr; //[fNovlp] list of indices for overlapping brothers; 46 TGeoExtension *fUserExtension = nullptr; //! Transient user-defined extension to volumes; 47 TGeoExtension *fFWExtension = nullptr; //! Transient framework-defined extension to volumes; 48 ; 49 void CopyOverlaps(Int_t *ovlp, Int_t novlp);; 50 ; 51private:; 52 TGeoNode(const TGeoNode &) = delete;; 53 TGeoNode &operator=(const TGeoNode &) = delete;; 54 ; 55public:; 56 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoNode_8h_source.html:1100,log,logical,1100,doc/master/TGeoNode_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoNode_8h_source.html,1,['log'],['logical']
Testability,". ROOT: graf3d/eve7/glu/mesh.c File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Macros |; Functions ; mesh.c File Reference. #include ""gluos.h""; #include <stddef.h>; #include <assert.h>; #include ""mesh.h""; #include ""memalloc.h"". Include dependency graph for mesh.c:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Macros; #define FALSE   0;  ; #define TRUE   1;  . Functions; GLUhalfEdge * __gl_meshAddEdgeVertex (GLUhalfEdge *eOrg);  ; void __gl_meshCheckMesh (GLUmesh *mesh);  ; GLUhalfEdge * __gl_meshConnect (GLUhalfEdge *eOrg, GLUhalfEdge *eDst);  ; int __gl_meshDelete (GLUhalfEdge *eDel);  ; void __gl_meshDeleteMesh (GLUmesh *mesh);  ; GLUhalfEdge * __gl_meshMakeEdge (GLUmesh *mesh);  ; GLUmesh * __gl_meshNewMesh (void);  ; int __gl_meshSplice (GLUhalfEdge *eOrg, GLUhalfEdge *eDst);  ; GLUhalfEdge * __gl_meshSplitEdge (GLUhalfEdge *eOrg);  ; GLUmesh * __gl_meshUnion (GLUmesh *mesh1, GLUmesh *mesh2);  ; void __gl_meshZapFace (GLUface *fZap);  ; static GLUface * allocFace ();  ; static GLUvertex * allocVertex ();  ; static void KillEdge (GLUhalfEdge *eDel);  ; static void KillFace (GLUface *fDel, GLUface *newLface);  ; static void KillVertex (GLUvertex *vDel, GLUvertex *newOrg);  ; static GLUhalfEdge * MakeEdge (GLUhalfEdge *eNext);  ; static void MakeFace (GLUface *newFace, GLUhalfEdge *eOrig, GLUface *fNext);  ; static void MakeVertex (GLUvertex *newVertex, GLUhalfEdge *eOrig, GLUvertex *vNext);  ; static void Splice (GLUhalfEdge *a, GLUhalfEdge *b);  . Macro Definition Documentation. ◆ FALSE. #define FALSE   0. Definition at line 45 of file mesh.c. ◆ TRUE. #define TRUE   1. Definition at line 42 of file mesh.c. Function Documentation. ◆ __gl_meshAddEdgeVertex(). GLUhalfEdge * __gl_meshAddEdgeVertex ; (; GLUhalfEdge * ; eOrg). Definition at line 441 of file mesh.c. ◆ __gl_meshCheckMesh(). void __gl_meshCheckMesh ; (; GLUmesh * ; mesh). Definition at line 737 of file mesh.c. ◆ __gl_m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/mesh_8c.html:224,assert,assert,224,doc/master/mesh_8c.html,https://root.cern,https://root.cern/doc/master/mesh_8c.html,1,['assert'],['assert']
Testability,". ROOT: graf3d/eve7/glu/normal.c File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Macros |; Functions ; normal.c File Reference. #include ""gluos.h""; #include ""mesh.h""; #include ""tess.h""; #include ""normal.h""; #include <math.h>; #include <assert.h>. Include dependency graph for normal.c:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Macros; #define ABS(x)   ((x) < 0 ? -(x) : (x));  ; #define Dot(u, v)   (u[0]*v[0] + u[1]*v[1] + u[2]*v[2]);  ; #define FALSE   0;  ; #define S_UNIT_X   1.0;  ; #define S_UNIT_Y   0.0;  ; #define TRUE   1;  . Functions; void __gl_projectPolygon (GLUtesselator *tess);  ; static void CheckOrientation (GLUtesselator *tess);  ; static void ComputeNormal (GLUtesselator *tess, GLdouble norm[3]);  ; static int LongAxis (GLdouble v[3]);  . Macro Definition Documentation. ◆ ABS. #define ABS; (;  ; x);    ((x) < 0 ? -(x) : (x)). Definition at line 65 of file normal.c. ◆ Dot. #define Dot; (;  ; u, .  ; v . );    (u[0]*v[0] + u[1]*v[1] + u[2]*v[2]). Definition at line 49 of file normal.c. ◆ FALSE. #define FALSE   0. Definition at line 46 of file normal.c. ◆ S_UNIT_X. #define S_UNIT_X   1.0. Definition at line 190 of file normal.c. ◆ S_UNIT_Y. #define S_UNIT_Y   0.0. Definition at line 191 of file normal.c. ◆ TRUE. #define TRUE   1. Definition at line 43 of file normal.c. Function Documentation. ◆ __gl_projectPolygon(). void __gl_projectPolygon ; (; GLUtesselator * ; tess). Definition at line 198 of file normal.c. ◆ CheckOrientation(). static void CheckOrientation ; (; GLUtesselator * ; tess). static . Definition at line 141 of file normal.c. ◆ ComputeNormal(). static void ComputeNormal ; (; GLUtesselator * ; tess, . GLdouble ; norm[3] . ). static . Definition at line 76 of file normal.c. ◆ LongAxis(). static int LongAxis ; (; GLdouble ; v[3]). static . Definition at line 67 of file normal.c. graf3deve7glunormal.c. ROOT master - Reference Guide Generated on Tue Nov 5",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/normal_8c.html:285,assert,assert,285,doc/master/normal_8c.html,https://root.cern,https://root.cern/doc/master/normal_8c.html,1,['assert'],['assert']
Testability,". ROOT: io/io/inc/TFile.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Macros ; TFile.h File Reference. #include <atomic>; #include <string>; #include ""Compression.h""; #include ""TDirectoryFile.h""; #include ""TUrl.h""; #include ""ROOT/RConcurrentHashColl.hxx""; #include ""ROOT/TRWSpinLock.hxx""; #include <mutex>. Include dependency graph for TFile.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; struct  TFile::InfoListRet;  Simple struct of the return value of GetStreamerInfoListImpl. More...;  ; class  TFile;  A ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-like logical structure, possibly including subdirectory hierarchies. More...;  ; class  TFileOpenHandle;  Class holding info about the file being opened. More...;  . Macros; #define gFile   (TFile::CurrentFile());  . Macro Definition Documentation. ◆ gFile. #define gFile   (TFile::CurrentFile()). Definition at line 347 of file TFile.h. ioioincTFile.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8h.html:883,log,logical,883,doc/master/TFile_8h.html,https://root.cern,https://root.cern/doc/master/TFile_8h.html,1,['log'],['logical']
Testability,". ROOT: io/io/src/TFile.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TFile.cxx. Go to the documentation of this file. 1// @(#)root/io:$Id: 3a19890259ad6443ee313e090166614971ad4296 $; 2// Author: Rene Brun 28/11/94; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/**; 13\file TFile.cxx; 14\class TFile; 15\ingroup IO; 16\brief A ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-like logical structure, possibly including subdirectory hierarchies.; 17\sa \ref IO; 18\sa \ref rootio (or `io/doc/TFile` folder in your codebase); 19 ; 20<details>; 21<summary>ROOT file data format specification</summary>; 22 ; 23A ROOT file is composed of a header, followed by consecutive data records; 24(`TKey` instances) with a well defined format.; 25 ; 26The first data record starts at byte fBEGIN (currently set to kBEGIN).; 27Bytes 1->kBEGIN contain the file description, when fVersion >= 1000000; 28it is a large file (> 2 GB) and the offsets will be 8 bytes long and; 29fUnits will be set to 8:; 30 ; 31Byte Range | Record Name | Description; 32----------------|-------------|------------; 331->4 | ""root"" | Root file identifier; 345->8 | fVersion | File format version; 359->12 | fBEGIN | Pointer to first data record; 3613->16 [13->20] | fEND | Pointer to first free word at the EOF; 3717->20 [21->28] | fSeekFree | Pointer to FREE data record; 3821->24 [29->32] | fNbytesFree | Number of bytes in FREE data record; 3925->28 [33->36] | nfree | Number of free data records; 4029->32 [37->40] | fNbytesName | Number of bytes in TNamed at creation time; 4133->33 [41->41] | f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:819,log,logical,819,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['log'],['logical']
Testability,". ROOT: math/genvector/inc/Math/GenVector/etaMax.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. etaMax.h. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Authors: W. Brown, M. Fischler, L. Moneta 2005; 3 ; 4 /**********************************************************************; 5 * *; 6 * Copyright (c) 2005 , FNAL MathLib Team *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11 ; 12// Header source file for function etaMax; 13//; 14// Created by: Mark Fischler at Thu Jun 2 2005; 15 ; 16 ; 17#ifndef ROOT_Math_GenVector_etaMax; 18#define ROOT_Math_GenVector_etaMax 1; 19 ; 20 ; 21#include <limits>; 22#include <cmath>; 23 ; 24 ; 25namespace ROOT {; 26 ; 27 namespace Math {; 28 ; 29 /**; 30 The following function could be called to provide the maximum possible; 31 value of pseudorapidity for a non-zero rho. This is log ( max/min ); 32 where max and min are the extrema of positive values for type; 33 long double.; 34 */; 35 inline; 36 long double etaMax_impl() {; 37 using std::log;; 38 return log ( std::numeric_limits<long double>::max()/256.0l ) -; 39 log ( std::numeric_limits<long double>::denorm_min()*256.0l ); 40 + 16.0 * log(2.0);; 41 // Actual usage of etaMax() simply returns the number 22756, which is; 42 // the answer this would supply, rounded to a higher integer.; 43 }; 44 ; 45 /**; 46 Function providing the maximum possible value of pseudorapidity for; 47 a non-zero rho, in the Scalar type with the largest dynamic range.; 48 */; 49 template <class T>; 50 inline; 51 T etaMax() {; 52 return static_cast<T>(22756.0);; 53 }; 54 ; 55 } // namespace Math; 56 ; 57} // namespace ROOT; 58 ; 59 ; 60#endif /* ROOT_Math_GenVector_etaMax */; MathNamespace for new Math classes and functions.; ROOT::Math::etaMax_impllong double etaMax_impl()The following function could be called to provide the maximum possible value of pseudorapidity for a ...Definition etaMa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/etaMax_8h_source.html:943,log,log,943,doc/master/etaMax_8h_source.html,https://root.cern,https://root.cern/doc/master/etaMax_8h_source.html,1,['log'],['log']
Testability,". ROOT: math/mathcore/src/SpecFuncCephes.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. SpecFuncCephes.cxx. Go to the documentation of this file. 1//; 2//; 3// gamma and related functions from Cephes library; 4// see: http://www.netlib.org/cephes; 5//; 6// Copyright 1985, 1987, 2000 by Stephen L. Moshier; 7//; 8//; 9 ; 10#include ""SpecFuncCephes.h""; 11#include ""Math/Math.h""; 12 ; 13 ; 14#include <cmath>; 15 ; 16#include <limits>; 17 ; 18 ; 19 ; 20namespace ROOT {; 21namespace Math {; 22 ; 23namespace Cephes {; 24 ; 25 ; 26static double kBig = 4.503599627370496e15;; 27static double kBiginv = 2.22044604925031308085e-16;; 28 ; 29/* log( sqrt( 2*pi ) ) */; 30static double LS2PI = 0.91893853320467274178;; 31 ; 32 ; 33// incomplete gamma function (complement integral); 34// igamc(a,x) = 1 - igam(a,x); 35//; 36// inf.; 37// -; 38// 1 | | -t a-1; 39// = ----- | e t dt.; 40// - | |; 41// | (a) -; 42// x; 43//; 44//; 45 ; 46// In this implementation both arguments must be positive.; 47// The integral is evaluated by either a power series or; 48// continued fraction expansion, depending on the relative; 49// values of a and x.; 50 ; 51double igamc( double a, double x ); 52{; 53 ; 54 double ans, ax, c, yc, r, t, y, z;; 55 double pk, pkm1, pkm2, qk, qkm1, qkm2;; 56 ; 57 // LM: for negative values returns 0.0; 58 // This is correct if a is a negative integer since Gamma(-n) = +/- inf; 59 if (a <= 0) return 0.0;; 60 ; 61 if (x <= 0) return 1.0;; 62 ; 63 if( (x < 1.0) || (x < a) ); 64 return( 1.0 - igam(a,x) );; 65 ; 66 ax = a * std::log(x) - x - lgam(a);; 67 if( ax < -kMAXLOG ); 68 return( 0.0 );; 69 ; 70 ax = std::exp(ax);; 71 ; 72/* continued fraction */; 73 y = 1.0 - a;; 74 z = x + y + 1.0;; 75 c = 0.0;; 76 pkm2 = 1.0;; 77 qkm2 = x;; 78 pkm1 = x + 1.0;; 79 qkm1 = z * x;; 80 ans = pkm1/qkm1;; 81 ; 82 do; 83 {; 84 c += 1.0;; 85 y += 1.0;; 86 z += 2.0;; 87 yc = y * c;; 88 pk = pkm1 * z - pkm2 * yc;; 89 qk = qkm1 * z - qkm2 * yc;; 9",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/SpecFuncCephes_8cxx_source.html:688,log,log,688,doc/master/SpecFuncCephes_8cxx_source.html,https://root.cern,https://root.cern/doc/master/SpecFuncCephes_8cxx_source.html,1,['log'],['log']
Testability,". ROOT: math/mathcore/src/TRandom3.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TRandom3.cxx. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Author: Peter Malzacher 31/08/99; 3 ; 4/**; 5 ; 6\class TRandom3; 7 ; 8Random number generator class based on; 9 M. Matsumoto and T. Nishimura,; 10 Mersenne Twister: A 623-diminsionally equidistributed; 11 uniform pseudorandom number generator; 12 ACM Transactions on Modeling and Computer Simulation,; 13 Vol. 8, No. 1, January 1998, pp 3--30.; 14 ; 15For more information see the Mersenne Twister homepage; 16 [http://www.math.keio.ac.jp/~matumoto/emt.html]; 17 ; 18Advantage:; 19 ; 20- large period 2**19937 -1; 21- relatively fast (slightly slower than TRandom2 but much faster than TRandom1); 22 ; 23Drawback:; 24- a relative large internal state of 624 integers ; 25- generate only 32 random bits ; 26- not passing all the random generator tests. It fails some tests in TestU01; 27 (see [http://simul.iro.umontreal.ca/testu01/tu01.html]); 28 ; 29An altenativly excellent generator passing all tests of TestU01, having 61 random bits and ; 30fast as Mersenne and Twister is MIXMAX (TRandomMixMax). ; 31 ; 32@ingroup Random; 33 ; 34*/; 35 ; 36//////////////////////////////////////////////////////////////////////; 37// Aug.99 ROOT implementation based on CLHEP by P.Malzacher; 38//; 39// the original code contains the following copyright notice:; 40/* This library is free software; you can redistribute it and/or */; 41/* modify it under the terms of the GNU Library General Public */; 42/* License as published by the Free Software Foundation; either */; 43/* version 2 of the License, or (at your option) any later */; 44/* version. */; 45/* This library is distributed in the hope that it will be useful, */; 46/* but WITHOUT ANY WARRANTY; without even the implied warranty of */; 47/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. */; 48/* See the GNU Library Genera",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRandom3_8cxx_source.html:963,test,tests,963,doc/master/TRandom3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TRandom3_8cxx_source.html,2,['test'],['tests']
Testability,". ROOT: net/http/civetweb/md5.inl Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. md5.inl. Go to the documentation of this file. 1/*; 2 * This an amalgamation of md5.c and md5.h into a single file; 3 * with all static declaration to reduce linker conflicts; 4 * in Civetweb.; 5 *; 6 * The MD5_STATIC declaration was added to facilitate static; 7 * inclusion.; 8 * No Face Press, LLC; 9 */; 10 ; 11/* $Id: md5.h,v 1.4 2002/04/13 19:20:28 lpd Exp $ */; 12/*; 13 Independent implementation of MD5 (RFC 1321).; 14 ; 15 This code implements the MD5 Algorithm defined in RFC 1321, whose; 16 text is available at; 17 http://www.ietf.org/rfc/rfc1321.txt; 18 The code is derived from the text of the RFC, including the test suite; 19 (section A.5) but excluding the rest of Appendix A. It does not include; 20 any code or documentation that is identified in the RFC as being; 21 copyrighted.; 22 ; 23 The original and principal author of md5.h is L. Peter Deutsch; 24 <ghost@aladdin.com>. Other authors are noted in the change history; 25 that follows (in reverse chronological order):; 26 ; 27 2002-04-13 lpd Removed support for non-ANSI compilers; removed; 28 references to Ghostscript; clarified derivation from RFC 1321;; 29 now handles byte order either statically or dynamically.; 30 1999-11-04 lpd Edited comments slightly for automatic TOC extraction.; 31 1999-10-18 lpd Fixed typo in header comment (ansi2knr rather than md5);; 32 added conditionalization for C++ compilation from Martin; 33 Purschke <purschke@bnl.gov>.; 34 1999-05-03 lpd Original version.; 35 */; 36 ; 37#if !defined(md5_INCLUDED); 38#define md5_INCLUDED; 39 ; 40/*; 41 * This package supports both compile-time and run-time determination of CPU; 42 * byte order. If ARCH_IS_BIG_ENDIAN is defined as 0, the code will be; 43 * compiled to run only on little-endian CPUs; if ARCH_IS_BIG_ENDIAN is; 44 * defined as non-zero, the code will be compiled to run only on big-endian; 45 * CPUs; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/md5_8inl_source.html:756,test,test,756,doc/master/md5_8inl_source.html,https://root.cern,https://root.cern/doc/master/md5_8inl_source.html,1,['test'],['test']
Testability,". ROOT: tmva/tmva/inc/TMVA/Factory.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Factory.h. Go to the documentation of this file. 1// @(#)root/tmva $Id$; 2// Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag; 3// Updated by: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer; 4 ; 5/**********************************************************************************; 6 * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; 7 * Package: TMVA *; 8 * Class : Factory *; 9 * *; 10 * *; 11 * Description: *; 12 * This is the main MVA steering class: it creates (books) all MVA methods, *; 13 * and guides them through the training, testing and evaluation phases. *; 14 * *; 15 * Authors (alphabetical): *; 16 * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; 17 * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; 18 * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; 19 * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; 20 * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; 21 * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; 22 * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; 23 * Omar Zapata <Omar.Zapata@cern.ch> - UdeA/ITM Colombia *; 24 * Lorenzo Moneta <Lorenzo.Moneta@cern.ch> - CERN, Switzerland *; 25 * Sergei Gleyzer <Sergei.Gleyzer@cern.ch> - U of Florida & CERN *; 26 * *; 27 * Copyright (c) 2005-2011: *; 28 * CERN, Switzerland *; 29 * U. of Victoria, Canada *; 30 * MPI-K Heidelberg, Germany *; 31 * U. of Bonn, Germany *; 32 * UdeA/ITM, Colombia *; 33 * U. of Florida, USA *; 34 * *; 35 * Redistribution and use in source and binary forms, with or without *; 36 * modification, are permitted according to the terms listed in LICENSE *; 37 * (see tmva/doc/LICENSE) *; 38 **********************************************************************************/; 39 ; 40#ifndef ROOT_T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2inc_2TMVA_2Factory_8h_source.html:757,test,testing,757,doc/master/tmva_2tmva_2inc_2TMVA_2Factory_8h_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2inc_2TMVA_2Factory_8h_source.html,1,['test'],['testing']
Testability,". ROOT: tmva/tmva/inc/TMVA/MsgLogger.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. MsgLogger.h. Go to the documentation of this file. 1// @(#)root/tmva $Id$; 2// Author: Attila Krasznahorkay, Andreas Hoecker, Joerg Stelzer, Eckhard von Toerne; 3 ; 4/**********************************************************************************; 5 * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; 6 * Package: TMVA *; 7 * Class : MsgLogger *; 8 * *; 9 * *; 10 * Description: *; 11 * TMVA output logger class producing nicely formatted log messages *; 12 * *; 13 * Author: *; 14 * Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch> - CERN, Switzerland *; 15 * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; 16 * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; 17 * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; 18 * *; 19 * Copyright (c) 2005-2011: *; 20 * CERN, Switzerland *; 21 * U. of Victoria, Canada *; 22 * MPI-K Heidelberg, Germany *; 23 * U. of Bonn, Germany *; 24 * *; 25 * Redistribution and use in source and binary forms, with or without *; 26 * modification, are permitted according to the terms listed in LICENSE *; 27 * (see tmva/doc/LICENSE) *; 28 **********************************************************************************/; 29 ; 30#ifndef ROOT_TMVA_MsgLogger; 31#define ROOT_TMVA_MsgLogger; 32 ; 33//////////////////////////////////////////////////////////////////////////; 34// //; 35// MsgLogger //; 36// //; 37// ostringstream derivative to redirect and format output //; 38// //; 39//////////////////////////////////////////////////////////////////////////; 40 ; 41// STL include(s):; 42#include <string>; 43#include <sstream>; 44#include <iostream>; 45#include <map>; 46#include <atomic>; 47 ; 48// ROOT include(s); 49#include ""TObject.h""; 50 ; 51#include ""TMVA/Types.h""; 52 ; 53// Local include(s):; 54 ; 55namespace TMVA {; 56 ; 57 class MsgLogger : public std::ostri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MsgLogger_8h_source.html:562,log,logger,562,doc/master/MsgLogger_8h_source.html,https://root.cern,https://root.cern/doc/master/MsgLogger_8h_source.html,2,['log'],"['log', 'logger']"
Testability,". ROOT: tree/tree/src/TTree.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TTree.cxx. Go to the documentation of this file. 1// @(#)root/tree:$Id$; 2// Author: Rene Brun 12/01/96; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11/**; 12 \defgroup tree Tree Library; 13 ; 14 In order to store columnar datasets, ROOT provides the TTree, TChain,; 15 TNtuple and TNtupleD classes.; 16 The TTree class represents a columnar dataset. Any C++ type can be stored in the; 17 columns. The TTree has allowed to store about **1 EB** of data coming from the LHC alone:; 18 it is demonstrated to scale and it's battle tested. It has been optimized during the years; 19 to reduce dataset sizes on disk and to deliver excellent runtime performance.; 20 It allows to access only part of the columns of the datasets, too.; 21 The TNtuple and TNtupleD classes are specialisations of the TTree class which can; 22 only hold single precision and double precision floating-point numbers respectively;; 23 The TChain is a collection of TTrees, which can be located also in different files.; 24 ; 25*/; 26 ; 27/** \class TTree; 28\ingroup tree; 29 ; 30A TTree represents a columnar dataset. Any C++ type can be stored in its columns.; 31 ; 32A TTree, often called in jargon *tree*, consists of a list of independent columns or *branches*,; 33represented by the TBranch class.; 34Behind each branch, buffers are allocated automatically by ROOT.; 35Such buffers are automatically written to disk or kept in memory until the size stored in the; 36attribute fMaxVirtualSize is reached.; 37Variables of one branch are written to the same buffer. A b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:985,test,tested,985,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['test'],['tested']
Testability,". ROOT: tutorials/dataframe/df001_introduction.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df001_introduction.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Basic RDataFrame usage. ; This tutorial illustrates the basic features of the RDataFrame class, a utility which allows to interact with data stored in TTrees following a functional-chain like approach.; ; // ## Preparation; ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *treeName, const char *fileName); {; ROOT::RDataFrame d(10);; d.Define(""b1"", [](ULong64_t entry) -> double { return entry; }, {""rdfentry_""}); .Define(""b2"", [](ULong64_t entry) -> int { return entry * entry; }, {""rdfentry_""}); .Snapshot(treeName, fileName);; }; ; int df001_introduction(); {; ; // We prepare an input tree to run on; auto fileName = ""df001_introduction.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame, a class that; // allows us to interact with the data contained in the tree.; // We select a default column, a *branch* to adopt ROOT jargon, which will; // be looked at if none is specified by the user when dealing with filters; // and actions.; ROOT::RDataFrame d(treeName, fileName, {""b1""});; ; // ## Operations on the dataframe; // We now review some *actions* which can be performed on the data frame.; // Actions can be divided into instant actions (e. g. Foreach()) and lazy; // actions (e. g. Count()), depending on whether they trigger the event; // loop immediately or only when one of the results is accessed for the; // first time. Actions that return ""something"" either return their result; // wrapped in a RResultPtr or in a RDataFrame.; // But first of all, let us define our cut-flow with two lambda; // functions. We can use free functions too.; auto cutb1 = [](double b1) { return b1 < 5.; };; auto cutb1b2 = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df001__introduction_8C.html:500,test,test,500,doc/master/df001__introduction_8C.html,https://root.cern,https://root.cern/doc/master/df001__introduction_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/dataframe/df001_introduction.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df001_introduction.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Basic usage of RDataFrame from python. ; This tutorial illustrates the basic features of the RDataFrame class, a utility which allows to interact with data stored in TTrees following a functional-chain like approach.; ; import ROOT; ; def fill_tree(treeName, fileName):; """"""A simple helper function to fill a test tree: this makes the example stand-alone.""""""; df = ROOT.RDataFrame(10); df.Define(""b1"", ""static_cast<double>(rdfentry_)"")\; .Define(""b2"", ""static_cast<int>(rdfentry_ * rdfentry_)"").Snapshot(treeName, fileName); ; # We prepare an input tree to run on; fileName = ""df001_introduction_py.root""; treeName = ""myTree""; fill_tree(treeName, fileName); ; ; # We read the tree from the file and create a RDataFrame, a class that; # allows us to interact with the data contained in the tree.; d = ROOT.RDataFrame(treeName, fileName); ; # Operations on the dataframe; # We now review some *actions* which can be performed on the data frame.; # Actions can be divided into instant actions (e. g. Foreach()) and lazy; # actions (e. g. Count()), depending on whether they trigger the event ; # loop immediately or only when one of the results is accessed for the ; # first time. Actions that return ""something"" either return their result ; # wrapped in a RResultPtr or in a RDataFrame.; # But first of all, let us we define now our cut-flow with two strings.; # Filters can be expressed as strings. The content must be C++ code. The; # name of the variables must be the name of the branches. The code is; # just-in-time compiled.; cutb1 = 'b1 < 5.'; cutb1b2 = 'b2 % 2 && b1 < 4.'; ; # `Count` action; # The `Count` allows to retrieve the number of the entries that passed the; # filters. Here we show how the automatic selection of the column kicks; #",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df001__introduction_8py.html:560,test,test,560,doc/master/df001__introduction_8py.html,https://root.cern,https://root.cern/doc/master/df001__introduction_8py.html,1,['test'],['test']
Testability,". ROOT: tutorials/dataframe/df002_dataModel.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df002_dataModel.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Show how to work with non-flat data models, e.g. ; vectors of tracks.; This tutorial shows the possibility to use data models which are more complex than flat ntuples with RDataFrame.; ; using FourVector = ROOT::Math::XYZTVector;; using FourVectorVec = std::vector<FourVector>;; using FourVectorRVec = ROOT::VecOps::RVec<FourVector>;; using CylFourVector = ROOT::Math::RhoEtaPhiVector;; ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *filename, const char *treeName); {; const double M = 0.13957; // set pi+ mass; TRandom3 R(1);; ; auto genTracks = [&](){; FourVectorVec tracks;; const auto nPart = R.Poisson(15);; tracks.reserve(nPart);; for (int j = 0; j < nPart; ++j) {; const auto px = R.Gaus(0, 10);; const auto py = R.Gaus(0, 10);; const auto pt = sqrt(px * px + py * py);; const auto eta = R.Uniform(-3, 3);; const auto phi = R.Uniform(0.0, 2 * TMath::Pi());; CylFourVector vcyl(pt, eta, phi);; // set energy; auto E = sqrt(vcyl.R() * vcyl.R() + M * M);; // fill track vector; tracks.emplace_back(vcyl.X(), vcyl.Y(), vcyl.Z(), E);; }; return tracks;; };; ; ROOT::RDataFrame d(64);; d.Define(""tracks"", genTracks).Snapshot<FourVectorVec>(treeName, filename, {""tracks""});; }; ; int df002_dataModel(); {; ; // We prepare an input tree to run on; auto fileName = ""df002_dataModel.root"";; auto treeName = ""myTree"";; fill_tree(fileName, treeName);; ; // We read the tree from the file and create a RDataFrame, a class that; // allows us to interact with the data contained in the tree.; ROOT::RDataFrame d(treeName, fileName, {""tracks""});; ; // ## Operating on branches which are collections of objects; // Here we deal with the simplest of the cuts: we decide to accept the event; // only if the num",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df002__dataModel_8C.html:657,test,test,657,doc/master/df002__dataModel_8C.html,https://root.cern,https://root.cern/doc/master/df002__dataModel_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/dataframe/df002_dataModel.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df002_dataModel.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Show how to work with non-flat data models, e.g. ; vectors of tracks.; This tutorial shows the possibility to use data models which are more complex than flat ntuples with RDataFrame.; ; import ROOT; ; # A simple helper function to fill a test tree: this makes the example stand-alone.; fill_tree_code = '''; using FourVector = ROOT::Math::XYZTVector;; using FourVectorVec = std::vector<FourVector>;; using CylFourVector = ROOT::Math::RhoEtaPhiVector;; ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *filename, const char *treeName); {; const double M = 0.13957; // set pi+ mass; TRandom3 R(1);; ; auto genTracks = [&](){; FourVectorVec tracks;; const auto nPart = R.Poisson(15);; tracks.reserve(nPart);; for (int j = 0; j < nPart; ++j) {; const auto px = R.Gaus(0, 10);; const auto py = R.Gaus(0, 10);; const auto pt = sqrt(px * px + py * py);; const auto eta = R.Uniform(-3, 3);; const auto phi = R.Uniform(0.0, 2 * TMath::Pi());; CylFourVector vcyl(pt, eta, phi);; // set energy; auto E = sqrt(vcyl.R() * vcyl.R() + M * M);; // fill track vector; tracks.emplace_back(vcyl.X(), vcyl.Y(), vcyl.Z(), E);; }; return tracks;; };; ; ROOT::RDataFrame d(64);; d.Define(""tracks"", genTracks).Snapshot<FourVectorVec>(treeName, filename, {""tracks""});; }; '''; ; # We prepare an input tree to run on; fileName = ""df002_dataModel_py.root""; treeName = ""myTree""; ROOT.gInterpreter.Declare(fill_tree_code); ROOT.fill_tree(fileName, treeName); ; # We read the tree from the file and create a RDataFrame, a class that; # allows us to interact with the data contained in the tree.; d = ROOT.RDataFrame(treeName, fileName); ; # Operating on branches which are collections of objects; # Here we deal with",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df002__dataModel_8py.html:484,test,test,484,doc/master/df002__dataModel_8py.html,https://root.cern,https://root.cern/doc/master/df002__dataModel_8py.html,2,['test'],['test']
Testability,". ROOT: tutorials/dataframe/df003_profiles.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df003_profiles.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use TProfiles with RDataFrame. ; This tutorial illustrates how to use TProfiles in combination with the RDataFrame. See the documentation of TProfile and TProfile2D to better understand the analogy of this code with the example one. ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *treeName, const char *fileName); {; ROOT::RDataFrame d(25000);; d.Define(""px"", []() { return gRandom->Gaus(); }); .Define(""py"", []() { return gRandom->Gaus(); }); .Define(""pz"", [](double px, double py) { return sqrt(px * px + py * py); }, {""px"", ""py""}); .Snapshot(treeName, fileName);; }; ; void df003_profiles(); {; // We prepare an input tree to run on; auto fileName = ""df003_profiles.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame.; ROOT::RDataFrame d(treeName, fileName);; ; // Create the profiles; auto hprof1d = d.Profile1D({""hprof1d"", ""Profile of py versus px"", 64, -4, 4}, ""px"", ""py"");; auto hprof2d =; d.Profile2D({""hprof2d"", ""Profile of pz versus px and py"", 40, -4, 4, 40, -4, 4, 0, 20}, ""px"", ""py"", ""pz"");; ; // And Draw; auto c1 = new TCanvas(""c1"", ""Profile histogram example"", 200, 10, 700, 500);; hprof1d->DrawClone();; auto c2 = new TCanvas(""c2"", ""Profile2D histogram example"", 200, 10, 700, 500);; hprof2d->DrawClone(""BOX"");; }; d#define d(i)Definition RSha256.hxx:102; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TCanvasThe Canvas class.Definition TCanvas.h:23; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df003__profiles_8C.html:501,test,test,501,doc/master/df003__profiles_8C.html,https://root.cern,https://root.cern/doc/master/df003__profiles_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/dataframe/df003_profiles.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df003_profiles.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use TProfiles with RDataFrame. ; This tutorial illustrates how to use TProfiles in combination with the RDataFrame. See the documentation of TProfile and TProfile2D to better understand the analogy of this code with the example one.; ; import ROOT; ; # A simple helper function to fill a test tree: this makes the example; # stand-alone.; def fill_tree(treeName, fileName):; d = ROOT.RDataFrame(25000); d.Define(""px"", ""gRandom->Gaus()"")\; .Define(""py"", ""gRandom->Gaus()"")\; .Define(""pz"", ""sqrt(px * px + py * py)"")\; .Snapshot(treeName, fileName); ; # We prepare an input tree to run on; fileName = ""df003_profiles_py.root""; treeName = ""myTree""; fill_tree(treeName, fileName); ; # We read the tree from the file and create a RDataFrame.; d = ROOT.RDataFrame(treeName, fileName); ; # Create the profiles; hprof1d = d.Profile1D((""hprof1d"", ""Profile of pz versus px"", 64, -4, 4), ""px"", ""py""); hprof2d = d.Profile2D((""hprof2d"", ""Profile of pz versus px and py"", 40, -4, 4, 40, -4, 4, 0, 20), ""px"", ""py"", ""pz""); ; # And Draw; c1 = ROOT.TCanvas(""c1"", ""Profile histogram example"", 200, 10, 700, 500); hprof1d.Draw(); c1.SaveAs(""df003_c1.png""); ; c2 = ROOT.TCanvas(""c2"", ""Profile2D histogram example"", 200, 10, 700, 500); hprof2d.Draw(); c2.SaveAs(""df003_c2.png""); ; print(""Saved figures to df003_*.png""); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; . DateFebruary 2017 ; AuthorDanilo Piparo (CERN) ; Definition in file df003_profiles.py. tutorialsdataframedf003_profiles.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df003__profiles_8py.html:531,test,test,531,doc/master/df003__profiles_8py.html,https://root.cern,https://root.cern/doc/master/df003__profiles_8py.html,1,['test'],['test']
Testability,". ROOT: tutorials/dataframe/df004_cutFlowReport.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df004_cutFlowReport.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Display cut/Filter efficiencies with RDataFrame. ; This tutorial shows how to get information about the efficiency of the filters applied; ; using FourVector = ROOT::Math::XYZTVector;; using FourVectors = std::vector<FourVector>;; using CylFourVector = ROOT::Math::RhoEtaPhiVector;; ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *treeName, const char *fileName); {; ROOT::RDataFrame d(50);; int i(0);; d.Define(""b1"", [&i]() { return (double)i; }); .Define(""b2"",; [&i]() {; auto j = i * i;; ++i;; return j;; }); .Snapshot(treeName, fileName);; }; ; void df004_cutFlowReport(); {; ; // We prepare an input tree to run on; auto fileName = ""df004_cutFlowReport.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame; ROOT::RDataFrame d(treeName, fileName, {""b1"", ""b2""});; ; // ## Define cuts and create the report; // Here we define two simple cuts; auto cut1 = [](double b1) { return b1 > 25.; };; auto cut2 = [](int b2) { return 0 == b2 % 2; };; ; // An optional string parameter name can be passed to the Filter method to create a named filter.; // Named filters work as usual, but also keep track of how many entries they accept and reject.; auto filtered1 = d.Filter(cut1, {""b1""}, ""Cut1"");; auto filtered2 = d.Filter(cut2, {""b2""}, ""Cut2"");; ; auto augmented1 = filtered2.Define(""b3"", [](double b1, int b2) { return b1 / b2; });; auto cut3 = [](double x) { return x < .5; };; auto filtered3 = augmented1.Filter(cut3, {""b3""}, ""Cut3"");; ; // Statistics are retrieved through a call to the Report method:; // when Report is called on the main RDataFrame object, it retrieves stats; // for all named filters declared up to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df004__cutFlowReport_8C.html:561,test,test,561,doc/master/df004__cutFlowReport_8C.html,https://root.cern,https://root.cern/doc/master/df004__cutFlowReport_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/dataframe/df005_fillAnyObject.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df005_fillAnyObject.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Using the generic Fill action. ; This tutorial shows how to fill any object the class of which exposes a Fill method.; ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *treeName, const char *fileName); {; ROOT::RDataFrame d(100);; auto i = 0.;; d.Define(""b1"", [&i]() { return i; }); .Define(""b2"",; [&i]() {; float j = i * i;; ++i;; return j;; }); .Snapshot(treeName, fileName);; }; ; int df005_fillAnyObject(); {; ; // We prepare an input tree to run on; auto fileName = ""df005_fillAnyObject.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame.; ROOT::RDataFrame d(treeName, fileName);; ; // ## Filling any object; // We now fill some objects which are instances of classes which expose a; // `Fill` method with some input arguments.; auto th1d = d.Fill<double>(TH1D(""th1d"", ""th1d"", 64, 0, 128), {""b1""});; auto th1i = d.Fill<float>(TH1I(""th1i"", ""th1i"", 64, 0, 128), {""b2""});; auto th2d = d.Fill<double, float>(TH2D(""th2d"", ""th2d"", 64, 0, 128, 64, 0, 1024), {""b1"", ""b2""});; ; auto c1 = new TCanvas();; th1d->DrawClone();; ; auto c2 = new TCanvas();; th1i->DrawClone();; ; auto c3 = new TCanvas();; th2d->DrawClone(""COLZ"");; ; return 0;; }; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1I1-D histogram with an int per channel (see TH1 documentation)Definition TH1.h:540; TH2D2-D histogram with a double per channel (see TH1 documentation)Defi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df005__fillAnyObject_8C.html:397,test,test,397,doc/master/df005__fillAnyObject_8C.html,https://root.cern,https://root.cern/doc/master/df005__fillAnyObject_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/dataframe/df006_ranges.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df006_ranges.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use Range to limit the amount of data processed. ; This tutorial shows how to express the concept of ranges when working with the RDataFrame.; ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *treeName, const char *fileName); {; ROOT::RDataFrame d(100);; int i(0);; d.Define(""b1"", [&i]() { return i; }); .Define(""b2"",; [&i]() {; float j = i * i;; ++i;; return j;; }); .Snapshot(treeName, fileName);; }; ; int df006_ranges(); {; ; // We prepare an input tree to run on; auto fileName = ""df006_ranges.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame.; ROOT::RDataFrame d(treeName, fileName);; ; // ## Usage of ranges; // Now we'll count some entries using ranges; auto c_all = d.Count();; ; // This is how you can express a range of the first 30 entries; auto d_0_30 = d.Range(30);; auto c_0_30 = d_0_30.Count();; ; // This is how you pick all entries from 15 onwards; auto d_15_end = d.Range(15, 0);; auto c_15_end = d_15_end.Count();; ; // We can use a stride too, in this case we pick an event every 3 entries; auto d_15_end_3 = d.Range(15, 0, 3);; auto c_15_end_3 = d_15_end_3.Count();; ; // The Range here acts first on the (whole) RDataFrame graph:; // Not only actions (like Count) but also filters and new columns can be added to it.; auto d_0_50 = d.Range(50);; auto c_0_50_odd_b1 = d_0_50.Filter(""1 == b1 % 2"").Count();; ; // An important thing to notice is that the counts of a filter are relative to the; // number of entries a filter ""sees"". Therefore, if a Range depends on a filter,; // the Range will act on the entries passing the filter only.; auto c_0_3_after_even_b1 = d.Filter(""0 == b1 % 2"").Range(0, 3).Count()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df006__ranges_8C.html:407,test,test,407,doc/master/df006__ranges_8C.html,https://root.cern,https://root.cern/doc/master/df006__ranges_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/dataframe/df007_snapshot.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df007_snapshot.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Write ROOT data with RDataFrame. ; This tutorial shows how to write out datasets in ROOT format using RDataFrame. ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *treeName, const char *fileName); {; ROOT::RDataFrame d(10000);; int i(0);; d.Define(""b1"", [&i]() { return i; }); .Define(""b2"",; [&i]() {; float j = i * i;; ++i;; return j;; }); .Snapshot(treeName, fileName);; }; ; int df007_snapshot(); {; // We prepare an input tree to run on; auto fileName = ""df007_snapshot.root"";; auto outFileName = ""df007_snapshot_output.root"";; auto outFileNameAllColumns = ""df007_snapshot_output_allColumns.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame; ROOT::RDataFrame d(treeName, fileName);; ; // ## Select entries; // We now select some entries in the dataset; auto d_cut = d.Filter(""b1 % 2 == 0"");; // ## Enrich the dataset; // Build some temporary columns: we'll write them out; auto d2 = d_cut.Define(""b1_square"", ""b1 * b1""); .Define(""b2_vector"",; [](float b2) {; std::vector<float> v;; for (int i = 0; i < 3; i++); v.push_back(b2 * i);; return v;; },; {""b2""});; ; // ## Write it to disk in ROOT format; // We now write to disk a new dataset with one of the variables originally; // present in the tree and the new variables.; // The user can explicitly specify the types of the columns as template; // arguments of the Snapshot method, otherwise they will be automatically; // inferred.; d2.Snapshot(treeName, outFileName, {""b1"", ""b1_square"", ""b2_vector""});; ; // Open the new file and list the columns of the tree; TFile f1(outFileName);; auto t = f1.Get<TTree>(treeName);; std::cout << ""These are the columns b1, b1_square an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df007__snapshot_8C.html:382,test,test,382,doc/master/df007__snapshot_8C.html,https://root.cern,https://root.cern/doc/master/df007__snapshot_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/dataframe/df007_snapshot.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df007_snapshot.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Write ROOT data with RDataFrame. ; This tutorial shows how to write out datasets in ROOT format using RDataFrame. ; import ROOT; ; # A simple helper function to fill a test tree: this makes the example stand-alone.; def fill_tree(treeName, fileName):; df = ROOT.RDataFrame(10000); df.Define(""b1"", ""(int) rdfentry_"")\; .Define(""b2"", ""(float) rdfentry_ * rdfentry_"").Snapshot(treeName, fileName); ; # We prepare an input tree to run on; fileName = ""df007_snapshot_py.root""; outFileName = ""df007_snapshot_output_py.root""; outFileNameAllColumns = ""df007_snapshot_output_allColumns_py.root""; treeName = ""myTree""; fill_tree(treeName, fileName); ; # We read the tree from the file and create a RDataFrame; d = ROOT.RDataFrame(treeName, fileName); ; # ## Select entries; # We now select some entries in the dataset; d_cut = d.Filter(""b1 % 2 == 0""); # ## Enrich the dataset; # Build some temporary columns: we'll write them out; ; getVector_code ='''; std::vector<float> getVector (float b2); {; std::vector<float> v;; for (int i = 0; i < 3; i++) v.push_back(b2*i);; return v;; }; '''; ROOT.gInterpreter.Declare(getVector_code); ; d2 = d_cut.Define(""b1_square"", ""b1 * b1"") \; .Define(""b2_vector"", ""getVector( b2 )""); ; # ## Write it to disk in ROOT format; # We now write to disk a new dataset with one of the variables originally; # present in the tree and the new variables.; # The user can explicitly specify the types of the columns as template; # arguments of the Snapshot method, otherwise they will be automatically; # inferred.; d2.Snapshot(treeName, outFileName, \; [""b1"", ""b1_square"", ""b2_vector""]); # Open the new file and list the columns of the tree; f1 = ROOT.TFile(outFileName); t = f1[treeName]; print(""These are the columns b1, b1_square and b2_vecto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df007__snapshot_8py.html:411,test,test,411,doc/master/df007__snapshot_8py.html,https://root.cern,https://root.cern/doc/master/df007__snapshot_8py.html,1,['test'],['test']
Testability,". ROOT: tutorials/dataframe/df028_SQliteIPLocation.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df028_SQliteIPLocation.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Plot the location of ROOT downloads reading a remote sqlite3 file. ; The world map is held by a TH2Poly histogram which, after filling, will show the world wide dispersion of ROOT's users. To histogram filling, is done thanks to a lambda expression having as input parameters the two columns of the database: ""IPLongitude' - for the longitude, and the; ""IPLatitude"" - for the latitude.; The data related to the latitude and the longitude has been provided from the; log files storing the users IP.; This product includes GeoLite2 data created by MaxMind, available from; <a href=""http://www.maxmind.com"">http://www.maxmind.com.; ; void df028_SQliteIPLocation() {; ; auto rdf = ROOT::RDF::FromSqlite(""http://root.cern/files/root_download_stats.sqlite"", ""SELECT * FROM accesslog;"");; ; auto f = TFile::Open(""http://root.cern/files/WM.root"");; auto worldMap = f->Get<TH2Poly>(""WMUSA"");; ; auto fillIPLocation = [&worldMap] ( const std::string &sLongitude, const std::string &sLatitude ) {; if (!( sLongitude == """" ) && !( sLatitude == """" )) {; auto latitude = std::stof(sLatitude);; auto longitude = std::stof(sLongitude);; worldMap->Fill(longitude, latitude);; }; };; ; rdf.Foreach( fillIPLocation, { ""IPLongitude"", ""IPLatitude"" } );; ; auto worldMapCanvas = new TCanvas();; worldMapCanvas->SetLogz();; worldMap->SetTitle(""ROOT Downloads per Location (GitHub excluded);Longitude;Latitude"");; worldMap->DrawClone(""colz"");; }; f#define f(i)Definition RSha256.hxx:104; TCanvasThe Canvas class.Definition TCanvas.h:23; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH2Poly2D Hist",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df028__SQliteIPLocation_8C.html:710,log,log,710,doc/master/df028__SQliteIPLocation_8C.html,https://root.cern,https://root.cern/doc/master/df028__SQliteIPLocation_8C.html,1,['log'],['log']
Testability,". ROOT: tutorials/eve7/eveGeoBrowser.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; eveGeoBrowser.C File Reference. #include <ROOT/REveGeoTopNode.hxx>; #include <ROOT/REveManager.hxx>. Include dependency graph for eveGeoBrowser.C:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Functions; void eveGeoBrowser (bool showDet=true);  ; TGeoNode * getNodeFromPath (TGeoNode *top, std::string path);  ; TGeoNode * rootgeom ();  ; TGeoNode * testCmsGeo ();  . Function Documentation. ◆ eveGeoBrowser(). void eveGeoBrowser ; (; bool ; showDet = true). Definition at line 169 of file eveGeoBrowser.C. ◆ getNodeFromPath(). TGeoNode * getNodeFromPath ; (; TGeoNode * ; top, . std::string ; path . ). Definition at line 9 of file eveGeoBrowser.C. ◆ rootgeom(). TGeoNode * rootgeom ; (; ). Definition at line 47 of file eveGeoBrowser.C. ◆ testCmsGeo(). TGeoNode * testCmsGeo ; (; ). Definition at line 20 of file eveGeoBrowser.C. tutorialseve7eveGeoBrowser.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/eveGeoBrowser_8C.html:538,test,testCmsGeo,538,doc/master/eveGeoBrowser_8C.html,https://root.cern,https://root.cern/doc/master/eveGeoBrowser_8C.html,3,['test'],['testCmsGeo']
Testability,". ROOT: tutorials/eve7/eveGeoBrowser.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. eveGeoBrowser.C. Go to the documentation of this file. 1 ; 2#include <ROOT/REveGeoTopNode.hxx>; 3#include <ROOT/REveManager.hxx>; 4 ; 5 ; 6namespace REX = ROOT::Experimental;; 7 ; 8 ; 9TGeoNode *getNodeFromPath(TGeoNode *top, std::string path); 10{; 11 TGeoNode *node = top;; 12 std::istringstream f(path);; 13 std::string s;; 14 while (getline(f, s, '/')); 15 node = node->GetVolume()->FindNode(s.c_str());; 16 ; 17 return node;; 18}; 19 ; 20TGeoNode* testCmsGeo(); 21{; 22 TFile::SetCacheFileDir(""."");; 23 ; 24 TGeoManager::Import(""https://root.cern/files/cms.root"");; 25 ; 26 gGeoManager->DefaultColors();; 27 gGeoManager->GetVolume(""TRAK"")->InvisibleAll();; 28 gGeoManager->GetVolume(""HVP2"")->SetTransparency(20);; 29 gGeoManager->GetVolume(""HVEQ"")->SetTransparency(20);; 30 gGeoManager->GetVolume(""YE4"")->SetTransparency(10);; 31 gGeoManager->GetVolume(""YE3"")->SetTransparency(20);; 32 gGeoManager->GetVolume(""RB2"")->SetTransparency(99);; 33 gGeoManager->GetVolume(""RB3"")->SetTransparency(99);; 34 gGeoManager->GetVolume(""COCF"")->SetTransparency(99);; 35 gGeoManager->GetVolume(""HEC1"")->SetLineColor(7);; 36 gGeoManager->GetVolume(""EAP1"")->SetLineColor(7);; 37 gGeoManager->GetVolume(""EAP2"")->SetLineColor(7);; 38 gGeoManager->GetVolume(""EAP3"")->SetLineColor(7);; 39 gGeoManager->GetVolume(""EAP4"")->SetLineColor(7);; 40 gGeoManager->GetVolume(""HTC1"")->SetLineColor(2);; 41 ; 42 TGeoNode* top = gGeoManager->GetTopVolume()->FindNode(""CMSE_1"");; 43 TGeoNode* n = getNodeFromPath(top, ""MUON_1"");; 44 return top;; 45}; 46 ; 47TGeoNode* rootgeom(); 48{; 49 TGeoManager *geom = new TGeoManager(""simple1"", ""Simple geometry"");; 50 ; 51 TGeoMaterial *matVacuum = new TGeoMaterial(""Vacuum"", 0,0,0);; 52 TGeoMaterial *matAl = new TGeoMaterial(""Al"", 26.98,13,2.7);; 53// //--- define some media; 54 TGeoMedium *Vacuum = new TGeoMedium(""Vacuum"",1, matVacuum);; 55 TGeoMedium *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/eveGeoBrowser_8C_source.html:586,test,testCmsGeo,586,doc/master/eveGeoBrowser_8C_source.html,https://root.cern,https://root.cern/doc/master/eveGeoBrowser_8C_source.html,1,['test'],['testCmsGeo']
Testability,". ROOT: tutorials/fit/fitcont.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. fitcont.C File ReferenceTutorials » Fit Tutorials. Detailed Description; Example illustrating how to draw the n-sigma contour of a Minuit fit. ; To get the n-sigma contour the ERRDEF parameter in Minuit has to set to n^2. The fcn function has to be set before the routine is called.; WARNING!!! This test works only with TMinuit; The TGraph object is created via the interpreter. The user must cast it to a TGraph*. ; FCN=96.6163 FROM MIGRAD STATUS=CONVERGED 62 CALLS 63 TOTAL; EDM=2.07594e-08 STRATEGY= 1 ERROR MATRIX ACCURATE ; EXT PARAMETER STEP FIRST ; NO. NAME VALUE ERROR SIZE DERIVATIVE ; 1 Constant 1.43454e+02 2.29666e+00 9.00732e-03 -6.49594e-05; 2 Mean 1.60911e-02 1.30402e-02 6.28520e-05 3.57224e-03; 3 Sigma 9.87683e-01 9.45637e-03 1.24479e-05 2.14428e-02; ; #include <TCanvas.h>; #include <TGraph.h>; #include <TH1F.h>; #include <TMinuit.h>; #include <TVirtualFitter.h>; ; void fitcont(); {; //be sure default is Minuit since we will use gMinuit; TVirtualFitter::SetDefaultFitter(""Minuit"");; ; TCanvas *c1 = new TCanvas(""c1"");; TH1F *h = new TH1F(""h"",""My histogram"",100,-3,3);; h->FillRandom(""gaus"",6000);; h->Fit(""gaus"");; c1->Update();; ; TCanvas *c2 = new TCanvas(""c2"",""contours"",10,10,600,800);; c2->Divide(1,2);; c2->cd(1);; /*get first contour for parameter 1 versus parameter 2*/; TGraph *gr12 = (TGraph*)gMinuit->Contour(40,1,2);; gr12->Draw(""alp"");; c2->cd(2);; /*Get contour for parameter 0 versus parameter 2 for ERRDEF=2*/; gMinuit->SetErrorDef(4); //note 4 and not 2!; TGraph *gr2 = (TGraph*)gMinuit->Contour(80,0,2);; gr2->SetFillColor(42);; gr2->Draw(""alf"");; /*Get contour for parameter 0 versus parameter 2 for ERRDEF=1*/; gMinuit->SetErrorDef(1);; TGraph *gr1 = (TGraph*)gMinuit->Contour(80,0,2);; gr1->SetFillColor(38);; gr1->Draw(""lf"");; }; h#define h(i)Definition RSha256.hxx:106; TCanvas.h; TGraph.h; TH1F.h; TMinuit.h; gMinuitR__EXTERN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fitcont_8C.html:429,test,test,429,doc/master/fitcont_8C.html,https://root.cern,https://root.cern/doc/master/fitcont_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/fit/fitpanel_playback.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. fitpanel_playback.C File ReferenceTutorials » Fit Tutorials. Detailed Description; This file will test all the transient frames (aka Dialog windows) displayed in the fitpanel, as the rest of the functionality is tried automatically with the UnitTest.C unit. ; This implies trying the Set Parameters dialog and the Advanced one.; At every operation, a png file will be saved. These files will be later on compared with some references values, to have an estimation of the goodness of the test.; ; #include ""TSystem.h""; #include ""TSystemFile.h""; #include ""TRecorder.h""; #include ""Riostream.h""; ; int file_size(const char *filename); {; FileStat_t fs;; gSystem->GetPathInfo(filename, fs);; return (int)fs.fSize;; }; ; void fitpanel_playback(); {; auto * r = new TRecorder();; r->Replay(""http://root.cern/files/fitpanel_playback.root"");; ; // wait for the recorder to finish the replay; while (r->GetState() == TRecorder::kReplaying) {; gSystem->ProcessEvents();; gSystem->Sleep(1);; }; ; int Step_Err = 100;; int Step1_Ref = 15691;; int Step2_Ref = 15691;; int Step3_Ref = 17632;; int Step4_Ref = 12305;; int Step5_Ref = 11668;; ; int Step1_Size = file_size(""Step1.png"");; int Step2_Size = file_size(""Step2.png"");; int Step3_Size = file_size(""Step3.png"");; int Step4_Size = file_size(""Step4.png"");; int Step5_Size = file_size(""Step5.png"");; ; ; std::cout << ""**********************************************************************"" << std::endl;; std::cout << ""* Report of fitpanel_playback.C *"" << std::endl;; std::cout << ""**********************************************************************"" << std::endl;; ; if (TMath::Abs(Step1_Ref-Step1_Size) <= Step_Err) {; std::cout << ""Step1: ............................................................ OK"" << std::endl;; } else {; std::cout << ""Step1: ........................................................ FAILED"" <<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fitpanel__playback_8C.html:237,test,test,237,doc/master/fitpanel__playback_8C.html,https://root.cern,https://root.cern/doc/master/fitpanel__playback_8C.html,2,['test'],['test']
Testability,". ROOT: tutorials/fit/minuit2FitBench2D.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. minuit2FitBench2D.C File ReferenceTutorials » Fit Tutorials. Detailed Description; Minuit2 fit 2D benchmark. . ; FCN=7196.63 FROM MIGRAD STATUS=CONVERGED 169 CALLS 170 TOTAL; EDM=3.06509e-09 STRATEGY= 1 ERROR MATRIX UNCERTAINTY 2.0 per cent; EXT PARAMETER STEP FIRST ; NO. NAME VALUE ERROR SIZE DERIVATIVE ; 1 p0 5.28670e+01 2.67227e-01 1.71567e-03 1.41590e-04; 2 p1 2.00562e+00 9.99521e-03 -6.72962e-05 -5.71949e-03; 3 p2 -1.02279e+00 1.35440e-02 3.22465e-05 2.77027e-03; 4 p3 2.89928e+00 7.94099e-03 -9.38703e-05 -4.55759e-03; 5 p4 3.86656e+00 1.13330e-02 1.06568e-05 -2.11126e-03; Minuit, npass=0 : RT= 0.143 s, Cpu= 0.140 s; ****************************************; Minimizer is Fumili; Chi2 = 7196.63; NDf = 7366; NCalls = 30; p0 = 52.8672 +/- 0.262932 ; p1 = 2.00562 +/- 0.00992527 ; p2 = -1.02279 +/- 0.0135821 ; p3 = 2.89927 +/- 0.00781808 ; p4 = 3.86655 +/- 0.011235 ; Fumili, npass=0 : RT= 0.084 s, Cpu= 0.090 s; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 7196.63; NDf = 7366; Edm = 4.35806e-08; NCalls = 176; p0 = 52.867 +/- 0.264728 ; p1 = 2.00562 +/- 0.00995152 ; p2 = -1.0228 +/- 0.0137398 ; p3 = 2.89928 +/- 0.00798634 ; p4 = 3.86656 +/- 0.0112306 ; Minuit2, npass=0 : RT= 0.096 s, Cpu= 0.100 s; ****************************************; Minimizer is Minuit2 / Fumili; Chi2 = 7196.63; NDf = 7366; Edm = 2.49758e-07; NCalls = 99; p0 = 52.8669 +/- 0.265504 ; p1 = 2.00562 +/- 0.00992463 ; p2 = -1.0228 +/- 0.0135834 ; p3 = 2.89928 +/- 0.00792724 ; p4 = 3.86656 +/- 0.0113104 ; Fumili2, npass=0 : RT= 0.062 s, Cpu= 0.060 s; ; #include ""TH1.h""; #include ""TF1.h""; #include ""TH2D.h""; #include ""TF2.h""; #include ""TCanvas.h""; #include ""TStopwatch.h""; #include ""TSystem.h""; #include ""TRandom3.h""; #include ""TVirtualFitter.h""; #include ""TPaveLabel.h""; #include ""TStyle.h""; ; ; TF2 *fitFcn;; TH2D *histo;; ; // Quadratic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/minuit2FitBench2D_8C.html:237,benchmark,benchmark,237,doc/master/minuit2FitBench2D_8C.html,https://root.cern,https://root.cern/doc/master/minuit2FitBench2D_8C.html,1,['benchmark'],['benchmark']
Testability,". ROOT: tutorials/geom/gdml/testoptical.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. testoptical.C File ReferenceTutorials » Geometry tutorials. Detailed Description; Tests importing/exporting optical surfaces from GDML. ; Optical surfaces, skin surfaces and border surfaces are imported in object arrays stored by TGeoManager class. Optical surfaces do not store property arrays but point to GDML matrices describing such properties. One can get the data for such property like: TGeoOpticalSurface *surf = geom->GetOpticalSurface(""surf1""); const char *property = surf=>GetPropertyRef(""REFLECTIVITY""); TGeoGDMLMatrix *m = geom->GetGDMLMatrix(property); Skin surfaces and border surfaces can be retrieved from the TGeoManager object by using: TObjArray *skin_array = geom->GetListOfSkinSurfaces(); TObjArra8 *border_array = geom->GetListOfBorderSurfaces(); Alternatively accessors by name can also be used: GetSkinSurface(name)/GetBorderSurface(name); AuthorAndrei Gheata ; Definition in file testoptical.C. tutorialsgeomgdmltestoptical.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/testoptical_8C.html:28,test,testoptical,28,doc/master/testoptical_8C.html,https://root.cern,https://root.cern/doc/master/testoptical_8C.html,3,['test'],['testoptical']
Testability,". ROOT: tutorials/geom/xtruSamples.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. xtruSamples.C File ReferenceTutorials » Geometry tutorials. Detailed Description; Draw a sample of TXTRU shapes some convex, concave (and possibly malformed) ; Change Bool_t's to test alternative specifications. ; void xtruSamples(); {; // One normally specifies the x-y points in counter-clockwise order;; // flip this to TRUE to test that it doesn't matter.; Bool_t makecw = kFALSE;; ; // One normally specifies the z points in increasing z order;; // flip this to TRUE to test that it doesn't matter.; Bool_t reversez = kFALSE;; ; // One shouldn't be creating malformed polygons; // but to test what happens when one does here's a flag.; // The effect will be only apparent in solid rendering mode; Bool_t domalformed = kFALSE;; // domalformed = kTRUE;; ; TCanvas* c1 = new TCanvas(""c1"",""sample TXTRU Shapes"",200,10,640,640);; ; // Create a new geometry; TGeometry* geom = new TGeometry(""sample"",""sample"");; geom->cd();; ; // Define the complexity of the drawing; Int_t zseg = 6; // either 2 or 6; Int_t extravis = 0; // make extra z ""arrow"" visible; ; Float_t unit = 1;; ; // Create a large BRIK to embed things into; Float_t bigdim = 12.5*unit;; TBRIK* world = new TBRIK(""world"",""world"",""void"",bigdim,bigdim,bigdim);; ; // Create the main node, make it invisible; TNode* worldnode = new TNode(""worldnode"",""world node"",world);; worldnode->SetVisibility(0);; worldnode->cd();; ; // Canonical shape ... gets further modified by scale factors; // to create convex (and malformed) versions; Float_t x[] = { -0.50, -1.20, 1.20, 0.50, 0.50, 1.20, -1.20, -0.50 };; Float_t y[] = { -0.75, -2.00, -2.00, -0.75, 0.75, 2.00, 2.00, 0.75 };; Float_t z[] = { -0.50, -1.50, -1.50, 1.50, 1.50, 0.50 };; Float_t s[] = { 0.50, 1.00, 1.50, 1.50, 1.00, 0.50 };; Int_t nxy = sizeof(x)/sizeof(Float_t);; Float_t convexscale[] = { 7.0, -1.0, 1.5 };; ; Int_t icolor[] = { 1, 2, 3, 2, 2, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/xtruSamples_8C.html:313,test,test,313,doc/master/xtruSamples_8C.html,https://root.cern,https://root.cern/doc/master/xtruSamples_8C.html,4,['test'],['test']
Testability,". ROOT: tutorials/gl/glViewerLOD.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. glViewerLOD.C File ReferenceTutorials » OpenGL tutorials. Detailed Description; To set the Level Of Details when rendering geometry shapes. ; ; void glViewerLOD(Int_t reqNodes = 1000, Bool_t randomDist = kTRUE,; Bool_t reqSpheres = kTRUE, Bool_t reqTubes = kTRUE); {; TGeoManager * geom = new TGeoManager(""LODTest"", ""GL viewer LOD test"");; geom->SetNsegments(4); // Doesn't matter keep low; TGeoMaterial *matEmptySpace = new TGeoMaterial(""EmptySpace"", 0, 0, 0);; TGeoMaterial *matSolid = new TGeoMaterial(""Solid"" , .938, 1., 10000.);; ; TGeoMedium *medEmptySpace = new TGeoMedium(""Empty"", 1, matEmptySpace);; TGeoMedium *medSolid = new TGeoMedium(""Solid"", 1, matSolid);; ; Double_t sizeBase = 20.0;; Double_t worldRadius;; if (randomDist) {; worldRadius = pow(reqNodes,.5)*sizeBase;; } else {; worldRadius = pow(reqNodes,.3)*sizeBase;; }; ; TGeoVolume *top = geom->MakeBox; (""WORLD"", medEmptySpace, worldRadius, worldRadius, worldRadius);; geom->SetTopVolume(top);; ; gRandom->SetSeed();; ; // Create random number of unique sphere shapes - up to 25% of; // total placed sphere requested; UInt_t volumeCount = gRandom->Integer(reqNodes/4)+1;; TGeoVolume ** volumes = new TGeoVolume *[volumeCount];; TGeoVolume * volume;; UInt_t i;; Double_t dummy;; ; for (i = 0; i < volumeCount; i++) {; char name[128];; sprintf(name, ""Volume_%d"", i);; ; // Random volume shape; Int_t type = -1;; if (reqSpheres && reqTubes) {; type = gRandom->Integer(2);; if (type == 1); type += gRandom->Integer(3);; }; else if(reqSpheres); type = 0;; else if(reqTubes); type = 1 + gRandom->Integer(3);; ; // Random dimensions; Double_t rMin = gRandom->Rndm() * sizeBase;; Double_t rMax = rMin + gRandom->Rndm() * sizeBase * 2.0;; Double_t dz = pow(gRandom->Rndm(),2.0) * sizeBase * 15.0;; Double_t phi1 = gRandom->Rndm() * 90.0;; Double_t phi2 = phi1 + gRandom->Rndm() * 270.0;; ; // Pick random co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/glViewerLOD_8C.html:463,test,test,463,doc/master/glViewerLOD_8C.html,https://root.cern,https://root.cern/doc/master/glViewerLOD_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/gl/gviz3d.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. gviz3d.C File ReferenceTutorials » OpenGL tutorials. Detailed Description; Simple TStructViewer tutorial. ; ; #include ""TRandom.h""; #include ""TList.h""; #include ""TROOT.h""; #include ""TStructViewer.h""; ; const Int_t ncl =12;; const char *clnames[ncl] = {""TH1F"",""TGraph"",""TGraphErrors"",""TF1"",""TPaveText"",; ""TAxis"",""TF2"",""TH2D"",""TLatex"",""TText"",""TCutG"",""THnSparseF""};; ; // Function creating elements of lists; void MakeCrazy(TList *list, Int_t maxDepth, Int_t maxObjects, Float_t pList); {; Int_t nobj = gRandom->Uniform(0,maxObjects);; for (Int_t i = 0; i < nobj; i++) {; if (maxDepth && gRandom->Rndm() < pList) {; TList *slist = new TList();; slist->SetName(Form(""list_%d_%d"",maxDepth,i));; list->Add(slist);; MakeCrazy(slist,maxDepth-1,maxObjects,pList);; } else {; Int_t icl = (Int_t)gRandom->Uniform(0,ncl);; TNamed *named = (TNamed*)gROOT->ProcessLine(Form(""new %s;"",clnames[icl]));; named->SetName(Form(""%s_%d_%d"",clnames[icl],maxDepth,i));; list->Add(named);; }; }; }; ; // function creating a hierarchy of objects to test the TStructViewer; TList *crazy(Int_t maxDepth=5, Int_t maxObjects=20, Float_t pList=0.2); {; TList *list = new TList();; list->SetName(""SuperList"");; MakeCrazy(list,maxDepth,maxObjects,pList);; gROOT->GetListOfTasks()->Add(list);; return list;; }; ; // function adding colors to viewer; void FillColorsMap(TStructViewer* sv); {; for (int i = 0; i < ncl ; i++); sv->SetColor(clnames[i], (Int_t)gRandom->Integer(8)+2);; }; ; void gviz3d(); {; // Creating a pointer to list; TList* pointer = crazy(2,10);; ; // Creating a viewer; TStructViewer* sv = new TStructViewer(pointer);; ; // adding colors; FillColorsMap(sv);; ; sv->Draw();; }; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; TList.h; TROOT.h; gROOT#define gROOTDefinition TROOT.h:406; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRan",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/gviz3d_8C.html:1151,test,test,1151,doc/master/gviz3d_8C.html,https://root.cern,https://root.cern/doc/master/gviz3d_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/graphics/gaxis2.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. gaxis2.C File ReferenceTutorials » Graphics tutorials. Detailed Description; Example illustrating how to draw TGaxis with labels defined by a function. . ; void gaxis2(){; gStyle->SetOptStat(0);; ; TH2F *h2 = new TH2F(""h"",""Axes"",100,0,10,100,-2,2);; h2->Draw();; ; TF1 *f1 = new TF1(""f1"",""-x"",-10,10);; TGaxis *A1 = new TGaxis(0,2,10,2,""f1"",510,""-"");; A1->SetTitle(""axis with decreasing values"");; A1->Draw();; ; TF1 *f2 = new TF1(""f2"",""exp(x)"",0,2);; TGaxis *A2 = new TGaxis(1,1,9,1,""f2"");; A2->SetTitle(""exponential axis"");; A2->SetLabelSize(0.03);; A2->SetTitleSize(0.03);; A2->SetTitleOffset(1.2);; A2->Draw();; ; TF1 *f3 = new TF1(""f3"",""log10(x)"",1,1000);; TGaxis *A3 = new TGaxis(2,-2,2,0,""f3"",505,""G"");; A3->SetTitle(""logarithmic axis"");; A3->SetLabelSize(0.03);; A3->SetTitleSize(0.03);; A3->SetTitleOffset(1.2);; A3->Draw();; }; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TF11-Dim function classDefinition TF1.h:233; TGaxisThe axis painter class.Definition TGaxis.h:24; TGaxis::SetTitleOffsetvoid SetTitleOffset(Float_t titleoffset=1)Definition TGaxis.h:128; TGaxis::SetTitleSizevoid SetTitleSize(Float_t titlesize)Definition TGaxis.h:129; TGaxis::SetTitlevirtual void SetTitle(const char *title="""")Change the title of the axis.Definition TGaxis.cxx:2942; TGaxis::SetLabelSizevoid SetLabelSize(Float_t labelsize)Definition TGaxis.h:107; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; f1TF1 * f1Definition legend1.C:11; AuthorOlivier Couet ; Definition in file gaxis2.C. tutorialsgraphicsgaxis2.C. ROOT master - ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/gaxis2_8C.html:858,log,logarithmic,858,doc/master/gaxis2_8C.html,https://root.cern,https://root.cern/doc/master/gaxis2_8C.html,1,['log'],['logarithmic']
Testability,". ROOT: tutorials/graphics/latex.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. latex.C File ReferenceTutorials » Graphics tutorials. Detailed Description; This macro draws 5 Latex-style formula in a canvas and prints the canvas as a Postscript file. . ; void latex() {; TCanvas *c1 = new TCanvas(""c1"",""test"",600,700);; // write formulas; TLatex l;; l.SetTextAlign(12);; l.SetTextSize(0.04);; l.DrawLatex(0.1,0.9,""1) C(x) = d #sqrt{#frac{2}{#lambdaD}}\; #int^{x}_{0}cos(#frac{#pi}{2}t^{2})dt"");; l.DrawLatex(0.1,0.7,""2) C(x) = d #sqrt{#frac{2}{#lambdaD}}\; #int^{x}cos(#frac{#pi}{2}t^{2})dt"");; l.DrawLatex(0.1,0.5,""3) R = |A|^{2} = #frac{1}{2}#left(#[]{#frac{1}{2}+\; C(V)}^{2}+#[]{#frac{1}{2}+S(V)}^{2}#right)"");; l.DrawLatex(0.1,0.3,; ""4) F(t) = #sum_{i=-#infty}^{#infty}A(i)cos#[]{#frac{i}{t+i}}"");; l.DrawLatex(0.1,0.1,""5) {}_{3}^{7}Li"");; c1->Print(""latex.ps"");; }; TCanvasThe Canvas class.Definition TCanvas.h:23; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TLine::Printvoid Print(Option_t *option="""") const overrideDump this line with its attributes.Definition TLine.cxx:419; c1return c1Definition legend1.C:41; lTLine lDefinition textangle.C:4; AuthorRene Brun ; Definition in file latex.C. tutorialsgraphicslatex.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/latex_8C.html:355,test,test,355,doc/master/latex_8C.html,https://root.cern,https://root.cern/doc/master/latex_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/graphics/piechart.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. piechart.C File ReferenceTutorials » Graphics tutorials. Detailed Description; Pie chart example. . ; void piechart(); {; Float_t vals[] = {.2,1.1,.6,.9,2.3};; Int_t colors[] = {2,3,4,5,6};; Int_t nvals = sizeof(vals)/sizeof(vals[0]);; ; TCanvas *cpie = new TCanvas(""cpie"",""TPie test"",700,700);; cpie->Divide(2,2);; ; TPie *pie1 = new TPie(""pie1"",; ""Pie with offset and no colors"",nvals,vals);; TPie *pie2 = new TPie(""pie2"",; ""Pie with radial labels"",nvals,vals,colors);; TPie *pie3 = new TPie(""pie3"",; ""Pie with tangential labels"",nvals,vals,colors);; TPie *pie4 = new TPie(""pie4"",; ""Pie with verbose labels"",nvals,vals,colors);; ; cpie->cd(1);; pie1->SetAngularOffset(30.);; pie1->SetEntryRadiusOffset( 4, 0.1);; pie1->SetRadius(.35);; pie1->Draw(""3d"");; ; cpie->cd(2);; pie2->SetEntryRadiusOffset(2,.05);; pie2->SetEntryLineColor(2,2);; pie2->SetEntryLineWidth(2,5);; pie2->SetEntryLineStyle(2,2);; pie2->SetEntryFillStyle(1,3030);; pie2->SetCircle(.5,.45,.3);; pie2->Draw(""rsc"");; ; cpie->cd(3);; pie3->SetY(.32);; pie3->GetSlice(0)->SetValue(.8);; pie3->GetSlice(1)->SetFillStyle(3031);; pie3->SetLabelsOffset(-.1);; pie3->Draw(""3d t nol"");; TLegend *pieleg = pie3->MakeLegend();; pieleg->SetY1(.56); pieleg->SetY2(.86);; ; cpie->cd(4);; pie4->SetRadius(.2);; pie4->SetLabelsOffset(.01);; pie4->SetLabelFormat(""#splitline{%val (%perc)}{%txt}"");; pie4->Draw(""nol <"");; }; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; colorsColor * colorsDefinition X3DBuffer.c:21; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TCanvasThe Canvas class.Definition TCanvas.h:23; TCanvas::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet current canvas & pad.Definition TCanvas.cxx:719; TLegendThis class displays a legend box (TPaveText) containing several legend en",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/piechart_8C.html:414,test,test,414,doc/master/piechart_8C.html,https://root.cern,https://root.cern/doc/master/piechart_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/graphics/polytest1.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. polytest1.C File ReferenceTutorials » Graphics tutorials. Detailed Description; This macro is testing the ""compacting"" algorithm in TPadPainter. ; It reduces the number of polygon's vertices using actual pixel coordinates. It's not really useful, but just to test that the resulting polygon is still reasonable. Initial number of points is 1000000, after ""compression"" it's 523904 (with default canvas size, before you tried to resize it) - so almost half of vertices were removed but you can still see the reasonable shape. If you resize a canvas to a smaller size, the number of vertices after compression can be something like 5000 and even less. It's easy to 'fool' this algorithm though in this particular case (ellipse is a kind of fringe case, you can easily have a sequence of almost unique vertices (at a pixel level).; ; //Includes for ACLiC.; #include <cassert>; #include <vector>; ; #include ""TRandom.h""; #include ""TCanvas.h""; #include ""TError.h""; #include ""Rtypes.h""; #include ""TNamed.h""; #include ""TMath.h""; ; class PolyTest1 : public TNamed, public TAttLine, public TAttFill {; public:; PolyTest1(unsigned nVertices);; ; void Paint(const Option_t *notUsed) override;; void Reset(unsigned nVertices);; ; private:; enum {; kNPointsDefault = 10000//minimal number of points.; };; ; std::vector<Double_t> fXs;; std::vector<Double_t> fYs;; };; ; //_____________________________________________________________; PolyTest1::PolyTest1(unsigned nVertices); : TNamed(""polygon_compression_test1"", ""polygon_compression_test1""); {; Reset(nVertices);; }; ; //_____________________________________________________________; void PolyTest1::Reset(unsigned nVertices); {; //Some canvas must already exist by this point.; assert(gPad != nullptr && ""Reset, gPad is null"");; //We need a gRandom to exist.; assert(gRandom != nullptr && ""Reset, gRandom is null"");; ; if (nV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/polytest1_8C.html:230,test,testing,230,doc/master/polytest1_8C.html,https://root.cern,https://root.cern/doc/master/polytest1_8C.html,2,['test'],"['test', 'testing']"
Testability,". ROOT: tutorials/graphics/polytest2.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. polytest2.C File ReferenceTutorials » Graphics tutorials. Detailed Description; ; This macro is testing the ""compacting"" algorithm in TPadPainter. ; It reduces the number of polygon's vertices using actual pixel coordinates. This macro is testing new ""compacting"" algorithm in TPadPainter (it reduces the number of polygon's vertices using actual pixel coordinates). In principle, this test case is what our histograms (fringe cases) are: ""saw-like"" polygon (bins == teeth).; ; //Includes for ACLiC.; #include <cassert>; #include <vector>; ; #include ""TRandom.h""; #include ""TCanvas.h""; #include ""Rtypes.h""; #include ""TNamed.h""; ; class PolyTest2 : public TNamed, public TAttLine, public TAttFill {; public:; PolyTest2();; ; void Paint(const Option_t *notUsed) override;; ; private:; enum TestSize {; kNSawPoints = 10000; };; ; //Part 1.; std::vector<Double_t> fXs1;; std::vector<Double_t> fYs1;; //Part 2.; ; std::vector<Double_t> fXs2;; std::vector<Double_t> fYs2;; };; ; //_____________________________________________________________; PolyTest2::PolyTest2(); : TNamed(""polygon_compression_test2"", ""polygon_compression_test2""); {; //Polygon 1, n of points is 10003, after 'compression' : 1897; //Polygon 2, n of points is 10003, after 'compression' : 2093; ; //Some canvas must already exist by this point.; assert(gPad != nullptr && ""PolyTest2, gPad is null"");; //We need a gRandom to exist.; assert(gRandom != nullptr && ""PolyTest2, gRandom is null"");; ; Double_t xMin = 0., xMax = 0., yMin = 0., yMax = 0.;; gPad->GetRange(xMin, yMin, xMax, yMax);; assert(xMax - xMin > 0 && yMax - yMin > 0 && ""PolyTest2, invalid canvas' ranges"");; ; ; // .(0/the last)--------.(1); // | /; // | \; // | /; // .(kNSawPoints + 1)--.(kNSawPoints); ; const unsigned nVertices = 3 + kNSawPoints;; ; {; //Polygon 1, ""vertical saw"":; fXs1.resize(nVertices);; fYs1.resize(nVertices);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/polytest2_8C.html:232,test,testing,232,doc/master/polytest2_8C.html,https://root.cern,https://root.cern/doc/master/polytest2_8C.html,3,['test'],"['test', 'testing']"
Testability,". ROOT: tutorials/graphs Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. graphs Directory Reference. Directory dependency graph for graphs:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Files;  annotation3d.C;   This example show how to put some annotation on a 3D plot using 3D polylines. ;  ;  approx.C;   Macro to test interpolation function Approx ;  ;  bent.C;   Bent error bars ;  ;  bent.py;   Bent error bars. ;  ;  exclusiongraph.C;   Draw three graphs with an exclusion zone. ;  ;  exclusiongraph2.C;   Draw several graphs with an exclusion zones. ;  ;  gerrors.C;   Draw a graph with error bars ;  ;  gerrors2.C;   Draw two graphs with error bars ;  ;  gmultierrors.C;   Draw a graph with multiple y errors ;  ;  graph.C;   Draw a simple graph. ;  ;  graph2derrorsfit.C;   Draw and fit a TGraph2DErrors ;  ;  graphApply.C;   A macro to demonstrate the functionality of TGraph::Apply() method. ;  ;  graphpalettecolor.C;   Palette coloring for graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ;  graphpolar.C;   Create and draw a polar graph. ;  ;  graphpolar2.C;   Create and draw a polar graph with PI axis ;  ;  graphpolar3.C;   Create and draw a polar graph with PI axis using a TF1. ;  ;  graphreverse.C;   This example test all the various case of reverse graphs combined with logarithmic scale. ;  ;  graphShade.C;   Show how to shade an area between two graphs ;  ;  graphstruct.C;   Draw a simple graph structure. ;  ;  graphtext.C;   Draw a graph with text attached to each point. ;  ;  gtime.C;   Example of TGraphTime. ;  ;  gtime2.C;   Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program. ;  ;  hlGraph1.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ;  hlGraph2.C;  This tutorial demonstrates ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_21ec31480a793facd4ea3dd8f2d42294.html:411,test,test,411,doc/master/dir_21ec31480a793facd4ea3dd8f2d42294.html,https://root.cern,https://root.cern/doc/master/dir_21ec31480a793facd4ea3dd8f2d42294.html,1,['test'],['test']
Testability,". ROOT: tutorials/graphs/approx.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. approx.C File ReferenceTutorials » Graphs tutorials. Detailed Description; Macro to test interpolation function Approx . ; TCanvas *vC1;; TGraph *grxy, *grin, *grout;; ; void DrawSmooth(Int_t pad, const char *title, const char *xt, const char *yt); {; vC1->cd(pad);; TH1F *vFrame = gPad->DrawFrame(0,0,15,150);; vFrame->SetTitle(title);; vFrame->SetTitleSize(0.2);; vFrame->SetXTitle(xt);; vFrame->SetYTitle(yt);; grxy->SetMarkerColor(kBlue);; grxy->SetMarkerStyle(21);; grxy->SetMarkerSize(0.5);; grxy->Draw(""P"");; grin->SetMarkerColor(kRed);; grin->SetMarkerStyle(5);; grin->SetMarkerSize(0.7);; grin->Draw(""P"");; grout->DrawClone(""LP"");; }; ; void approx(); {; // Test data (square); Int_t n = 11;; Double_t x[] = {1,2,3,4,5,6,6,6,8,9,10};; Double_t y[] = {1,4,9,16,25,25,36,49,64,81,100};; grxy = new TGraph(n,x,y);; ; // X values, for which y values should be interpolated; Int_t nout = 14;; Double_t xout[] =; {1.2,1.7,2.5,3.2,4.4,5.2,5.7,6.5,7.6,8.3,9.7,10.4,11.3,13};; ; // Create Canvas; vC1 = new TCanvas(""vC1"",""square"",200,10,700,700);; vC1->Divide(2,2);; ; // Initialize graph with data; grin = new TGraph(n,x,y);; // Interpolate at equidistant points (use mean for tied x-values); TGraphSmooth *gs = new TGraphSmooth(""normal"");; grout = gs->Approx(grin,""linear"");; DrawSmooth(1,""Approx: ties = mean"",""X-axis"",""Y-axis"");; ; // Re-initialize graph with data; // (since graph points were set to unique vales); grin = new TGraph(n,x,y);; // Interpolate at given points xout; grout = gs->Approx(grin,""linear"", 14, xout, 0, 130);; DrawSmooth(2,""Approx: ties = mean"","""","""");; ; // Print output variables for given values xout; Int_t vNout = grout->GetN();; Double_t vXout, vYout;; for (Int_t k=0;k<vNout;k++) {; grout->GetPoint(k, vXout, vYout);; cout << ""k= "" << k << "" vXout[k]= "" << vXout; << "" vYout[k]= "" << vYout << endl;; }; ; // Re-initialize graph with da",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/approx_8C.html:215,test,test,215,doc/master/approx_8C.html,https://root.cern,https://root.cern/doc/master/approx_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/graphs/graphreverse.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. graphreverse.C File ReferenceTutorials » Graphs tutorials. Detailed Description; This example test all the various case of reverse graphs combined with logarithmic scale. . ; void graphreverse() {; auto c = new TCanvas(""c"",""Reversed graphs"",0,0,900,900);; c->Divide(3,3);; ; // TGraphErrors; auto graphe = new TGraphErrors();; graphe->GetXaxis()->SetNdivisions(514);; graphe->GetYaxis()->SetNdivisions(514);; graphe->SetMarkerStyle(kCircle);; graphe->SetPoint(0,5,5);; graphe->SetPointError(0,1,3);; graphe->SetPoint(1,9,9);; graphe->SetPointError(1,1,3);; ; c->cd(1);; gPad->SetGrid();; graphe->Draw(""a pl "");; ; c->cd(2);; gPad->SetGrid();; graphe->Draw(""a pl rx ry "");; ; c->cd(3);; gPad->SetGrid();; gPad->SetLogx();; gPad->SetLogy();; graphe->GetXaxis()->SetMoreLogLabels();; graphe->GetYaxis()->SetMoreLogLabels();; graphe->Draw(""a pl rx ry"");; ; // TGraphAsymmErrors; auto graphae = new TGraphAsymmErrors();; graphae->GetXaxis()->SetNdivisions(514);; graphae->GetYaxis()->SetNdivisions(514);; graphae->SetMarkerStyle(kCircle);; graphae->SetPoint(0,5,5);; graphae->SetPointError(0,1,3,3,1);; graphae->SetPoint(1,9,9);; graphae->SetPointError(1,1,3,1,3);; ; c->cd(4);; gPad->SetGrid();; graphae->Draw(""a pl "");; ; c->cd(5);; gPad->SetGrid();; graphae->Draw(""a pl rx ry "");; ; c->cd(6);; gPad->SetGrid();; gPad->SetLogx();; gPad->SetLogy();; graphae->GetXaxis()->SetMoreLogLabels();; graphae->GetYaxis()->SetMoreLogLabels();; graphae->Draw(""a pl rx ry"");; ; // TGraphBentErrors; auto graphbe = new TGraphBentErrors();; graphbe->GetXaxis()->SetNdivisions(514);; graphbe->GetYaxis()->SetNdivisions(514);; graphbe->SetMarkerStyle(kCircle);; graphbe->SetPoint(0,5,5);; graphbe->SetPointError(0,1,3,3,1,.5,.2,.5,.2);; graphbe->SetPoint(1,9,9);; graphbe->SetPointError(1,1,3,1,3,-.5,-.2,-.5,-.2);; ; c->cd(7);; gPad->SetGrid();; graphbe->Draw(""a pl "");; ; c->cd(8);;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/graphreverse_8C.html:231,test,test,231,doc/master/graphreverse_8C.html,https://root.cern,https://root.cern/doc/master/graphreverse_8C.html,2,"['log', 'test']","['logarithmic', 'test']"
Testability,". ROOT: tutorials/graphs/labels1.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. labels1.C File ReferenceTutorials » Graphs tutorials. Detailed Description; Setting alphanumeric labels in a 1-d histogram. . ; void labels1(); {; Int_t i;; const Int_t nx = 20;; const char *people[nx] = {""Jean"",""Pierre"",""Marie"",""Odile"",; ""Sebastien"",""Fons"",""Rene"",""Nicolas"",""Xavier"",""Greg"",; ""Bjarne"",""Anton"",""Otto"",""Eddy"",""Peter"",""Pasha"",; ""Philippe"",""Suzanne"",""Jeff"",""Valery""};; TCanvas *c1 = new TCanvas(""c1"",""demo bin labels"",10,10,900,500);; c1->SetGrid();; c1->SetBottomMargin(0.15);; TH1F *h = new TH1F(""h"",""test"",nx,0,nx);; h->SetFillColor(38);; for (i=0;i<5000;i++) h->Fill(gRandom->Gaus(0.5*nx,0.2*nx));; h->SetStats(0);; for (i=1;i<=nx;i++) h->GetXaxis()->SetBinLabel(i,people[i-1]);; h->Draw();; TPaveText *pt = new TPaveText(0.6,0.7,0.98,0.98,""brNDC"");; pt->SetFillColor(18);; pt->SetTextAlign(12);; pt->AddText(""Use the axis Context Menu LabelsOption"");; pt->AddText("" \""a\"" to sort by alphabetic order"");; pt->AddText("" \"">\"" to sort by decreasing values"");; pt->AddText("" \""<\"" to sort by increasing values"");; pt->Draw();; }; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::Drawvoid Draw(Option_t *option="""") overrid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/labels1_8C.html:648,test,test,648,doc/master/labels1_8C.html,https://root.cern,https://root.cern/doc/master/labels1_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/graphs/labels2.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. labels2.C File ReferenceTutorials » Graphs tutorials. Detailed Description; Setting alphanumeric labels. . ; void labels2(); {; Int_t i;; const Int_t nx = 12;; const Int_t ny = 20;; const char *month[nx] = {""January"",""February"",""March"",""April"",; ""May"",""June"",""July"",""August"",""September"",""October"",; ""November"",""December""};; const char *people[ny] = {""Jean"",""Pierre"",""Marie"",""Odile"",; ""Sebastien"",""Fons"",""Rene"",""Nicolas"",""Xavier"",""Greg"",; ""Bjarne"",""Anton"",""Otto"",""Eddy"",""Peter"",""Pasha"",; ""Philippe"",""Suzanne"",""Jeff"",""Valery""};; TCanvas *c1 = new TCanvas(""c1"",""demo bin labels"",; 10,10,800,800);; c1->SetGrid();; c1->SetLeftMargin(0.15);; c1->SetBottomMargin(0.15);; TH2F *h = new TH2F(""h"",""test"",nx,0,nx,ny,0,ny);; for (i=0;i<5000;i++) {; h->Fill(gRandom->Gaus(0.5*nx,0.2*nx),; gRandom->Gaus(0.5*ny,0.2*ny));; }; h->SetStats(0);; for (i=1;i<=nx;i++) h->GetXaxis()->SetBinLabel(i,month[i-1]);; for (i=1;i<=ny;i++) h->GetYaxis()->SetBinLabel(i,people[i-1]);; h->Draw(""text"");; ; TPaveText *pt = new TPaveText(0.6,0.85,0.98,0.98,""brNDC"");; pt->SetFillColor(18);; pt->SetTextAlign(12);; pt->AddText(""Use the axis Context Menu LabelsOption"");; pt->AddText("" \""a\"" to sort by alphabetic order"");; pt->AddText("" \"">\"" to sort by decreasing values"");; pt->AddText("" \""<\"" to sort by increasing values"");; pt->Draw();; }; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TCanvasThe Canvas class.Definition TCanvas.h:23; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TPaveTextA Pave (see TPave) with text, lines or/and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/labels2_8C.html:821,test,test,821,doc/master/labels2_8C.html,https://root.cern,https://root.cern/doc/master/labels2_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/graphs/motorcycle.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. motorcycle.C File ReferenceTutorials » Graphs tutorials. Detailed Description; Macro to test scatterplot smoothers: ksmooth, lowess, supsmu as described in: ; Modern Applied Statistics with S-Plus, 3rd Edition; W.N. Venables and B.D. Ripley; Chapter 9: Smooth Regression, Figure 9.1; Example is a set of data on 133 observations of acceleration against time for a simulated motorcycle accident, taken from Silverman (1985). ; #include ""TString.h""; #include ""TInterpreter.h""; #include <fstream>; #include ""TH1.h""; #include ""TGraphSmooth.h""; #include ""TCanvas.h""; #include ""TSystem.h""; ; ; TCanvas *vC1;; TGraph *grin, *grout;; ; void DrawSmooth(Int_t pad, const char *title, const char *xt, const char *yt); {; vC1->cd(pad);; TH1F *vFrame = gPad->DrawFrame(0,-130,60,70);; vFrame->SetTitle(title);; vFrame->SetTitleSize(0.2);; vFrame->SetXTitle(xt);; vFrame->SetYTitle(yt);; grin->Draw(""P"");; grout->DrawClone(""LPX"");; }; ; void motorcycle(); {; // data taken from R library MASS: mcycle.txt; TString dir = gROOT->GetTutorialDir();; dir.Append(""/graphs/"");; dir.ReplaceAll(""/./"",""/"");; ; // read file and add to fit object; Double_t *x = new Double_t[133];; Double_t *y = new Double_t[133];; Double_t vX, vY;; Int_t vNData = 0;; ifstream vInput;; vInput.open(Form(""%smotorcycle.dat"",dir.Data()));; while (1) {; vInput >> vX >> vY;; if (!vInput.good()) break;; x[vNData] = vX;; y[vNData] = vY;; vNData++;; }//while; vInput.close();; grin = new TGraph(vNData,x,y);; ; // draw graph; vC1 = new TCanvas(""vC1"",""Smooth Regression"",200,10,900,700);; vC1->Divide(2,3);; ; // Kernel Smoother; // create new kernel smoother and smooth data with bandwidth = 2.0; TGraphSmooth *gs = new TGraphSmooth(""normal"");; grout = gs->SmoothKern(grin,""normal"",2.0);; DrawSmooth(1,""Kernel Smoother: bandwidth = 2.0"",""times"",""accel"");; ; // redraw ksmooth with bandwidth = 5.0; grout = gs->Sm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/motorcycle_8C.html:223,test,test,223,doc/master/motorcycle_8C.html,https://root.cern,https://root.cern/doc/master/motorcycle_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/graphs/timeonaxis2.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. timeonaxis2.C File ReferenceTutorials » Graphs tutorials. Detailed Description; Define the time offset as 2003, January 1st. . ; void timeonaxis2() {; auto ct2 = new TCanvas(""ct2"",""ct2"",10,10,700,500);; ; TDatime T0(2003, 1, 1, 0, 0, 0);; int X0 = T0.Convert();; gStyle->SetTimeOffset(X0);; ; // Define the lowest histogram limit as 2002, September 23rd; TDatime T1(2002, 9, 23, 0, 0, 0);; int X1 = T1.Convert()-X0;; ; // Define the highest histogram limit as 2003, March 7th; TDatime T2(2003, 3, 7, 0, 0, 0);; int X2 = T2.Convert(1)-X0;; ; auto h1 = new TH1F(""h1"",""test"",100,X1,X2);; ; TRandom r;; for (Int_t i=0;i<30000;i++) {; Double_t noise = r.Gaus(0.5*(X1+X2),0.1*(X2-X1));; h1->Fill(noise);; }; ; h1->GetXaxis()->SetTimeDisplay(1);; h1->GetXaxis()->SetLabelSize(0.03);; h1->GetXaxis()->SetTimeFormat(""%Y/%m/%d"");; h1->Draw();; }; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TAttAxis::SetLabelSizevirtual void SetLabelSize(Float_t size=0.04)Set size of axis labels.Definition TAttAxis.cxx:203; TAxis::SetTimeDisplayvirtual void SetTimeDisplay(Int_t value)Definition TAxis.h:171; TAxis::SetTimeFormatvirtual void SetTimeFormat(const char *format="""")Change the format used for time plotting.Definition TAxis.cxx:1157; TCanvasThe Canvas class.Definition TCanvas.h:23; TDatimeThis class stores the date and time with a precision of one second in an unsigned 32 bit word (950130...Definition TDatime.h:37; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::GetXaxis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/timeonaxis2_8C.html:702,test,test,702,doc/master/timeonaxis2_8C.html,https://root.cern,https://root.cern/doc/master/timeonaxis2_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/graphs/timeonaxis3.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. timeonaxis3.C File ReferenceTutorials » Graphs tutorials. Detailed Description; This example compares what the system time function gmtime and localtime give with what gives TGaxis. ; It can be used as referenced test to check if TGaxis is working properly. The original code was developed by Philippe Gras (CEA Saclay. IRFU/SEDI). ; #include ""TAxis.h""; #include ""TGaxis.h""; #include ""TCanvas.h""; #include ""TString.h""; #include ""TLine.h""; #include ""TLatex.h""; #include <ctime>; #include <cstdio>; ; TString stime(time_t* t, bool utc = false, bool display_time_zone = true) {; struct tm* tt;; if (utc) tt = gmtime(t);; else tt = localtime(t);; char buf[256];; if (display_time_zone) strftime(buf, sizeof(buf), ""%Y-%m-%d %H:%M:%S %Z"", tt);; else strftime(buf, sizeof(buf), ""%Y-%m-%d %H:%M:%S"", tt);; return TString(buf);; }; ; ; void timeonaxis3() {; double f = 1.8;; ; auto c = new TCanvas;; ; TLatex tex1;; tex1.SetNDC();; tex1.SetTextFont(102);; tex1.SetTextSize(0.055*f);; ; TLatex tex3;; tex3.SetNDC();; tex3.SetTextFont(102);; tex3.SetTextSize(0.07*f);; tex3.SetTextColor(kBlue+2);; ; TLatex tex2;; tex2.SetNDC();; tex2.SetTextFont(102);; tex2.SetTextSize(0.07*f);; tex2.SetTextColor(kOrange+3);; ; time_t offset[] = {0, 0, 1325376000, 1341100800};; time_t t[] = {1331150400, 1336417200, 0, 36000};; ; c->SetTopMargin(0); c->SetBottomMargin(0);; c->SetLeftMargin(0); c->SetRightMargin(0);; c->Divide(2, 4, -1, -1);; TLine l;; l.DrawLine(0.5, 0, 0.5, 1.);; ; for(int i = 0; i < 4; ++i){; for(int gmt = 0; gmt < 2; ++gmt){; const char* opt = (gmt ? ""gmt"" : ""local"");; TVirtualPad* p = c->cd(2*i + gmt + 1);; p->SetTopMargin(0); p->SetBottomMargin(0);; p->SetLeftMargin(0); p->SetRightMargin(0);; p->SetFillStyle(4000);; ; TGaxis* ga = new TGaxis (.4, .25, 5., .25, t[i], t[i] + 1, 1, ""t"");; ga->SetTimeFormat(""TGaxis label: #color[2]{%Y-%m-%d %H:%M:%S}"");; ga->Se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/timeonaxis3_8C.html:349,test,test,349,doc/master/timeonaxis3_8C.html,https://root.cern,https://root.cern/doc/master/timeonaxis3_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/graphs/zdemo.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. zdemo.C File ReferenceTutorials » Graphs tutorials. Detailed Description; This macro is an example of graphs in log scales with annotations. ; The presented results are predictions of invariant cross-section of Direct Photons produced at RHIC energies, based on the universality of scaling function H(z).; These Figures were published in JINR preprint E2-98-64, Dubna, 1998 and submitted to CPC.; Note that the way greek symbols, super/subscripts are obtained illustrate the current limitations of Root in this area. ; #include ""TCanvas.h""; #include ""TPad.h""; #include ""TPaveLabel.h""; #include ""TLatex.h""; #include ""TGraph.h""; #include ""TFrame.h""; ; #ifdef HZ; #undef HZ; #endif; ; const Int_t NMAX = 20;; Int_t NLOOP;; Float_t Z[NMAX], HZ[NMAX], PT[NMAX], INVSIG[NMAX];; ; void hz_calc(Float_t, Float_t, Float_t, Float_t, Float_t, Float_t);; ; //__________________________________________________________________; void zdemo(); {; ; Float_t energ;; Float_t dens;; Float_t tgrad;; Float_t ptmin;; Float_t ptmax;; Float_t delp;; ; // Create a new canvas.; TCanvas *c1 = new TCanvas(""zdemo"",; ""Monte Carlo Study of Z scaling"",10,40,800,600);; c1->Range(0,0,25,18);; c1->SetFillColor(40);; ; TPaveLabel *pl = new TPaveLabel(1,16.3,24,17.5,""Z-scaling of \; Direct Photon Productions in pp Collisions at RHIC Energies"",""br"");; pl->SetFillColor(18);; pl->SetTextFont(32);; pl->SetTextColor(49);; pl->Draw();; ; TLatex t0;; t0.SetTextFont(32);; t0.SetTextColor(1);; t0.SetTextSize(0.03);; t0.SetTextAlign(12);; t0.DrawLatex(3.1,15.5,""M.Tokarev, E.Potrebenikova "");; t0.DrawLatex(14.,15.5,""JINR preprint E2-98-64, Dubna, 1998 "");; ; TPad *pad1 = new TPad(""pad1"",""This is pad1"",0.02,0.02,0.48,0.83,33);; TPad *pad2 = new TPad(""pad2"",""This is pad2"",0.52,0.02,0.98,0.83,33);; ; pad1->Draw();; pad2->Draw();; ; //; // Cross-section of direct photon production in pp collisions; // at",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/zdemo_8C.html:242,log,log,242,doc/master/zdemo_8C.html,https://root.cern,https://root.cern/doc/master/zdemo_8C.html,1,['log'],['log']
Testability,". ROOT: tutorials/hist/cumulative.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. cumulative.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Illustrate use of the TH1::GetCumulative method. . ; #include <cassert>; #include <cmath>; ; #include ""TH1.h""; #include ""TH1D.h""; #include ""TCanvas.h""; #include ""TRandom.h""; ; TCanvas *cumulative(); {; TH1* h = new TH1D(""h"", ""h"", 100, -5., 5.);; gRandom->SetSeed();; h->FillRandom(""gaus"", 1u << 16);; // get the cumulative of h; TH1* hc = h->GetCumulative();; // check that c has the ""right"" contents; Double_t* integral = h->GetIntegral();; for (Int_t i = 1; i <= hc->GetNbinsX(); ++i) {; assert(std::abs(integral[i] * h->GetEntries() - hc->GetBinContent(i)) < 1e-7);; }; // draw histogram together with its cumulative distribution; TCanvas* c = new TCanvas;; c->Divide(1,2);; c->cd(1);; h->Draw();; c->cd(2);; hc->Draw();; c->Update();; ; return c;; }; c#define c(i)Definition RSha256.hxx:101; h#define h(i)Definition RSha256.hxx:106; e#define e(i)Definition RSha256.hxx:103; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; TCanvas.h; TH1D.h; TH1.h; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::GetCumulativeTH1 * GetCumulative(Bool_t forward=kTRUE, const char *suffix=""_cumulative"") constReturn a pointer to a histogram containing the cumulative content.Definition TH1.cxx:2616; TH1::GetNbinsXvirtual Int_t GetNbinsX() constDefinition TH1.h:297; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::GetIntegralvirtual Double_t * GetIntegral()Return a pointer to the array of bins integral.Definition TH1.cxx:2586; TH1::GetBinContent",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/cumulative_8C.html:706,assert,assert,706,doc/master/cumulative_8C.html,https://root.cern,https://root.cern/doc/master/cumulative_8C.html,1,['assert'],['assert']
Testability,". ROOT: tutorials/hist/hlabels1.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hlabels1.C File ReferenceTutorials » Histograms tutorials. Detailed Description; 1-D histograms with alphanumeric labels . ; TCanvas *hlabels1(); {; const Int_t nx = 20;; const char *people[nx] = {""Jean"",""Pierre"",""Marie"",""Odile"",""Sebastien"",; ""Fons"",""Rene"",""Nicolas"",""Xavier"",""Greg"",""Bjarne"",""Anton"",""Otto"",; ""Eddy"",""Peter"",""Pasha"",""Philippe"",""Suzanne"",""Jeff"",""Valery""};; TCanvas *c1 = new TCanvas(""c1"",""demo bin labels"",10,10,900,500);; c1->SetGrid();; c1->SetTopMargin(0.15);; TH1F *h = new TH1F(""h"",""test"",3,0,3);; h->SetStats(0);; h->SetFillColor(38);; h->SetCanExtend(TH1::kAllAxes);; for (Int_t i=0;i<5000;i++) {; Int_t r = gRandom->Rndm()*20;; h->Fill(people[r],1);; }; h->LabelsDeflate();; h->Draw();; TPaveText *pt = new TPaveText(0.7,0.85,0.98,0.98,""brNDC"");; pt->SetFillColor(18);; pt->SetTextAlign(12);; pt->AddText(""Use the axis Context Menu LabelsOption"");; pt->AddText("" \""a\"" to sort by alphabetic order"");; pt->AddText("" \"">\"" to sort by decreasing values"");; pt->AddText("" \""<\"" to sort by increasing values"");; pt->Draw();; return c1;; }; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::kAllAxes@ kAllAxesDefinition TH1.h:76; TPaveTextA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hlabels1_8C.html:634,test,test,634,doc/master/hlabels1_8C.html,https://root.cern,https://root.cern/doc/master/hlabels1_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/hist/hlabels2.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hlabels2.C File ReferenceTutorials » Histograms tutorials. Detailed Description; 2-D histograms with alphanumeric labels. . ; TCanvas *hlabels2(); {; const Int_t nx = 12;; const Int_t ny = 20;; const char *month[nx] = {""January"",""February"",""March"",""April"",""May"",; ""June"",""July"",""August"",""September"",""October"",""November"",; ""December""};; const char *people[ny] = {""Jean"",""Pierre"",""Marie"",""Odile"",""Sebastien"",; ""Fons"",""Rene"",""Nicolas"",""Xavier"",""Greg"",""Bjarne"",""Anton"",; ""Otto"",""Eddy"",""Peter"",""Pasha"",""Philippe"",""Suzanne"",""Jeff"",; ""Valery""};; TCanvas *c1 = new TCanvas(""c1"",""demo bin labels"",10,10,600,600);; c1->SetGrid();; c1->SetLeftMargin(0.15);; c1->SetBottomMargin(0.15);; TH2F *h = new TH2F(""h"",""test"",3,0,3,2,0,2);; h->SetCanExtend(TH1::kAllAxes);; h->SetStats(0);; gRandom->SetSeed();; for (Int_t i=0;i<15000;i++) {; Int_t rx = gRandom->Rndm()*nx;; Int_t ry = gRandom->Rndm()*ny;; h->Fill(people[ry],month[rx],1);; }; h->LabelsDeflate(""X"");; h->LabelsDeflate(""Y"");; h->LabelsOption(""v"");; h->Draw(""text"");; ; TPaveText *pt = new TPaveText(0.6,0.85,0.98,0.98,""brNDC"");; pt->SetFillColor(18);; pt->SetTextAlign(12);; pt->AddText(""Use the axis Context Menu LabelsOption"");; pt->AddText("" \""a\"" to sort by alphabetic order"");; pt->AddText("" \"">\"" to sort by decreasing values"");; pt->AddText("" \""<\"" to sort by increasing values"");; pt->Draw();; return c1;; }; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1::kAllAxes@ kAllAxesDefinition TH1.h:76; TH2F2-D histogram with a float per channel (se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hlabels2_8C.html:830,test,test,830,doc/master/hlabels2_8C.html,https://root.cern,https://root.cern/doc/master/hlabels2_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/hist/hstack.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hstack.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Example of stacked histograms: class THStack. . ; void hstack(); {; auto hs = new THStack(""hs"",""Stacked 1D histograms"");; //create three 1-d histograms; auto h1st = new TH1F(""h1st"",""test hstack"",100,-4,4);; h1st->FillRandom(""gaus"",20000);; h1st->SetFillColor(kRed);; h1st->SetMarkerStyle(21);; h1st->SetMarkerColor(kRed);; hs->Add(h1st);; auto h2st = new TH1F(""h2st"",""test hstack"",100,-4,4);; h2st->FillRandom(""gaus"",15000);; h2st->SetFillColor(kBlue);; h2st->SetMarkerStyle(21);; h2st->SetMarkerColor(kBlue);; hs->Add(h2st);; auto h3st = new TH1F(""h3st"",""test hstack"",100,-4,4);; h3st->FillRandom(""gaus"",10000);; h3st->SetFillColor(kGreen);; h3st->SetMarkerStyle(21);; h3st->SetMarkerColor(kGreen);; hs->Add(h3st);; ; auto cst = new TCanvas(""cst"",""stacked hists"",10,10,700,700);; cst->Divide(2,2);; // in top left pad, draw the stack with defaults; cst->cd(1);; hs->Draw();; // in top right pad, draw the stack in non-stack mode; // and errors option; cst->cd(2);; gPad->SetGrid();; hs->Draw(""nostack,e1p"");; //in bottom left, draw in stack mode with ""lego1"" option; cst->cd(3);; gPad->SetFrameFillColor(17);; gPad->SetTheta(3.77);; gPad->SetPhi(2.9);; hs->Draw(""lego1"");; ; cst->cd(4);; //create two 2-D histograms and draw them in stack mode; gPad->SetFrameFillColor(17);; auto a = new THStack(""a"",""Stacked 2D histograms"");; auto f1 = new TF2(""f1"",; ""xygaus + xygaus(5) + xylandau(10)"",-4,4,-4,4);; Double_t params1[] = {130,-1.4,1.8,1.5,1, 150,2,0.5,-2,0.5,; 3600,-2,0.7,-3,0.3};; f1->SetParameters(params1);; auto h2sta = new TH2F(""h2sta"",""h2sta"",20,-4,4,20,-4,4);; h2sta->SetFillColor(38);; h2sta->FillRandom(""f1"",4000);; auto f2 = new TF2(""f2"",""xygaus + xygaus(5)"",-4,4,-4,4);; Double_t params2[] = {100,-1.4,1.9,1.1,2, 80,2,0.7,-2,0.5};; f2->SetParameters(params2);; auto h2stb = new T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hstack_8C.html:390,test,test,390,doc/master/hstack_8C.html,https://root.cern,https://root.cern/doc/master/hstack_8C.html,3,['test'],['test']
Testability,". ROOT: tutorials/hist/hstack.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hstack.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_hist; 3/// \notebook; 4/// Example of stacked histograms: class THStack.; 5///; 6/// \macro_image; 7/// \macro_code; 8///; 9/// \author Rene Brun; 10 ; 11void hstack(); 12{; 13 auto hs = new THStack(""hs"",""Stacked 1D histograms"");; 14 //create three 1-d histograms; 15 auto h1st = new TH1F(""h1st"",""test hstack"",100,-4,4);; 16 h1st->FillRandom(""gaus"",20000);; 17 h1st->SetFillColor(kRed);; 18 h1st->SetMarkerStyle(21);; 19 h1st->SetMarkerColor(kRed);; 20 hs->Add(h1st);; 21 auto h2st = new TH1F(""h2st"",""test hstack"",100,-4,4);; 22 h2st->FillRandom(""gaus"",15000);; 23 h2st->SetFillColor(kBlue);; 24 h2st->SetMarkerStyle(21);; 25 h2st->SetMarkerColor(kBlue);; 26 hs->Add(h2st);; 27 auto h3st = new TH1F(""h3st"",""test hstack"",100,-4,4);; 28 h3st->FillRandom(""gaus"",10000);; 29 h3st->SetFillColor(kGreen);; 30 h3st->SetMarkerStyle(21);; 31 h3st->SetMarkerColor(kGreen);; 32 hs->Add(h3st);; 33 ; 34 auto cst = new TCanvas(""cst"",""stacked hists"",10,10,700,700);; 35 cst->Divide(2,2);; 36 // in top left pad, draw the stack with defaults; 37 cst->cd(1);; 38 hs->Draw();; 39 // in top right pad, draw the stack in non-stack mode; 40 // and errors option; 41 cst->cd(2);; 42 gPad->SetGrid();; 43 hs->Draw(""nostack,e1p"");; 44 //in bottom left, draw in stack mode with ""lego1"" option; 45 cst->cd(3);; 46 gPad->SetFrameFillColor(17);; 47 gPad->SetTheta(3.77);; 48 gPad->SetPhi(2.9);; 49 hs->Draw(""lego1"");; 50 ; 51 cst->cd(4);; 52 //create two 2-D histograms and draw them in stack mode; 53 gPad->SetFrameFillColor(17);; 54 auto a = new THStack(""a"",""Stacked 2D histograms"");; 55 auto f1 = new TF2(""f1"",; 56 ""xygaus + xygaus(5) + xylandau(10)"",-4,4,-4,4);; 57 Double_t params1[] = {130,-1.4,1.8,1.5,1, 150,2,0.5,-2,0.5,; 58 3600,-2,0.7,-3,0.3};; 59 f1->SetParameters(params1);; 60 auto h2sta = new TH2F(""h2sta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hstack_8C_source.html:506,test,test,506,doc/master/hstack_8C_source.html,https://root.cern,https://root.cern/doc/master/hstack_8C_source.html,3,['test'],['test']
Testability,". ROOT: tutorials/hist/hstackpads.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hstackpads.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Drawing stack histograms on subpads. ; In this example three histograms are displayed on separate pads. If canvas divided in advance - provided subpads will be used by the THStack. ; void hstackpads(); {; auto hs = new THStack(""hs"", ""Stacked 1D histograms"");; ; // Create three 1-d histograms and add them in the stack; auto h1st = new TH1F(""h1st"", ""test hstack 1"", 100, -4, 4);; h1st->FillRandom(""gaus"", 20000);; hs->Add(h1st);; ; auto h2st = new TH1F(""h2st"", ""test hstack 2"", 100, -4, 4);; h2st->FillRandom(""gaus"", 15000);; hs->Add(h2st);; ; auto h3st = new TH1F(""h3st"", ""test hstack 3"", 100, -4, 4);; h3st->FillRandom(""gaus"", 10000);; hs->Add(h3st);; ; auto c1 = new TCanvas(""c1"", ""THStack drawing on pads"", 800, 800);; ; // prepare subpads for drawing of histograms; c1->Divide(1, 3);; ; // draw thstack on canvas with ""pads"" draw option; c1->Add(hs, ""pads"");; }; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; THStackThe Histogram stack class.Definition THStack.h:40; c1return c1Definition legend1.C:41; AuthorSergey Linev ; Definition in file hstackpads.C. tutorialshisthstackpads.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hstackpads_8C.html:566,test,test,566,doc/master/hstackpads_8C.html,https://root.cern,https://root.cern/doc/master/hstackpads_8C.html,3,['test'],['test']
Testability,". ROOT: tutorials/hist/logscales.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. logscales.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Draw parametric functions with log scales. . ; void logscales() {; TCanvas *c1 = new TCanvas(""c1"", ""Various options on LOG scales plots"",0,0,700,900);; c1->SetFillColor(30);; ; TPad *pad1 = new TPad(""pad1"",""pad1"",0.03,0.62,0.50,0.92,32);; TPad *pad2 = new TPad(""pad2"",""pad2"",0.51,0.62,0.98,0.92,33);; TPad *pad3 = new TPad(""pad3"",""pad3"",0.03,0.02,0.97,0.535,38);; pad1->Draw(); pad2->Draw(); pad3->Draw();; ; TPaveLabel *title = new TPaveLabel(0.1,0.94,0.9,0.98, ""Various options on LOG scales plots"");; title->SetFillColor(16);; title->SetTextFont(42);; title->Draw();; ; TPaveText *pave = new TPaveText(0.1,0.55,0.9,0.61);; pave->SetFillColor(42);; pave->SetTextAlign(12);; pave->SetTextFont(42);; pave->AddText(""When more Log labels are requested, the overlapping labels are removed"");; pave->Draw();; ; pad1->cd();; pad1->SetLogy();; pad1->SetGridy();; TF1 *f1 = new TF1(""f1"",""x*sin(x)*exp(-0.1*x)+15"",-10.,10.);; TF1 *f2 = new TF1(""f2"",""(sin(x)+cos(x))**5+15"",-10.,10.);; TF1 *f3 = new TF1(""f3"",""(sin(x)/(x)-x*cos(x))+15"",-10.,10.);; f1->SetLineWidth(1); f1->SetLineColor(2);; f2->SetLineWidth(1); f2->SetLineColor(3);; f3->SetLineWidth(1); f3->SetLineColor(4);; f1->Draw();; f2->Draw(""same"");; f3->Draw(""same"");; f1->GetYaxis()->SetMoreLogLabels();; TPaveText *pave1 = new TPaveText(-6,2,6,6);; pave1->SetFillColor(42);; pave1->SetTextAlign(12);; pave1->SetTextFont(42);; pave1->AddText(""Log scale along Y axis."");; pave1->AddText(""More Log labels requested."");; pave1->Draw();; ; pad2->cd();; double x[10] = { 200, 300, 400, 500, 600, 650, 700, 710, 900,1000 };; double y[10] = { 200, 1000, 900, 400, 500, 250, 800, 150, 201, 220 };; TGraph *g_2 = new TGraph(10,x,y);; g_2->Draw(""AL*"");; g_2->SetMarkerColor(2);; g_2->GetYaxis()->SetMoreLogLabels();; g_2->GetYaxis()->SetNoExponen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/logscales_8C.html:23,log,logscales,23,doc/master/logscales_8C.html,https://root.cern,https://root.cern/doc/master/logscales_8C.html,4,['log'],"['log', 'logscales']"
Testability,". ROOT: tutorials/hist/statsEditing.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. statsEditing.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Edit statistics box. ; This example shows:; how to remove a stat element from the stat box; how to add a new one. ; TCanvas *statsEditing() {; // Create and plot a test histogram with stats; TCanvas *se = new TCanvas;; TH1F *h = new TH1F(""h"",""test"",100,-3,3);; h->FillRandom(""gaus"",3000);; gStyle->SetOptStat();; h->Draw();; se->Update();; ; // Retrieve the stat box; TPaveStats *ps = (TPaveStats*)se->GetPrimitive(""stats"");; ps->SetName(""mystats"");; TList *listOfLines = ps->GetListOfLines();; ; // Remove the RMS line; TText *tconst = ps->GetLineWith(""RMS"");; listOfLines->Remove(tconst);; ; // Add a new line in the stat box.; // Note that ""="" is a control character; TLatex *myt = new TLatex(0,0,""Test = 10"");; myt ->SetTextFont(42);; myt ->SetTextSize(0.04);; myt ->SetTextColor(kRed);; listOfLines->Add(myt);; ; // the following line is needed to avoid that the automatic redrawing of stats; h->SetStats(0);; ; se->Modified();; return se;; }; h#define h(i)Definition RSha256.hxx:106; kRed@ kRedDefinition Rtypes.h:66; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TCanvas::Updatevoid Update() overrideUpdate canvas pad buffers.Definition TCanvas.cxx:2489; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TListA doubly linked list.Definition TList.h:38; TList::Addvoid Add(TObject *obj) overrideD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/statsEditing_8C.html:384,test,test,384,doc/master/statsEditing_8C.html,https://root.cern,https://root.cern/doc/master/statsEditing_8C.html,2,['test'],['test']
Testability,". ROOT: tutorials/hist/testSmooth.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. testSmooth.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Histogram smoothing. . ; int ipad = 1;; TCanvas * c1 = 0;; ; void smooth_hist(const char * fname, double xmin, double xmax, int n1, int n2) {; ; std::cout << ""smoothing a "" << fname << "" histogram"" << std::endl;; ; TH1D * h1 = new TH1D(""h1"",""h1"",100,xmin,xmax);; TH1D * h2 = new TH1D(""h2"",""h2"",100,xmin,xmax);; h1->FillRandom(fname,n1);; ; TH1D * h1_s = new TH1D(*h1);; h1_s->SetName(""h1_s"");; h1_s->Smooth();; ; h2->FillRandom(fname,n2);; ; double p1 = h1->Chi2Test(h2,"""");; double p2 = h1_s->Chi2Test(h2,""UU"");; if (p2 < p1) Error(""testSmooth"",""TH1::Smooth is not working correctly - a worst chi2 is obtained"");; ; std::cout << "" chi2 test non-smoothed histo "" << p1 << std::endl;; std::cout << "" chi2 test smoothed histo "" << p2 << std::endl;; ; double a1 = h1->AndersonDarlingTest(h2);; double a2 = h1_s->AndersonDarlingTest(h2);; ; std::cout << "" AD test non-smoothed histo "" << a1 << std::endl;; std::cout << "" AD test smoothed histo "" << a2 << std::endl;; ; double k1 = h1->KolmogorovTest(h2);; double k2 = h1_s->KolmogorovTest(h2);; ; std::cout << "" KS test non-smoothed histo "" << k1 << std::endl;; std::cout << "" KS test smoothed histo "" << k2 << std::endl;; ; c1->cd(ipad++);; h1->Draw(""E"");; h1_s->SetLineColor(kRed);; h1_s->Draw(""same"");; h2->Scale(double(n1)/n2);; h2->SetLineColor(kGreen);; h2->Draw(""same"");; }; ; void testSmooth(int n1 = 1000, int n2 = 1000000) {; ; TH1::AddDirectory(false);; ; c1 = new TCanvas();; c1->Divide(1,3);; ; ; smooth_hist(""gaus"",-5,5,n1,n2);; smooth_hist(""landau"",-5,15,n1,n2);; smooth_hist(""expo"",-5,0,n1,n2);; ; }; kRed@ kRedDefinition Rtypes.h:66; kGreen@ kGreenDefinition Rtypes.h:66; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; xminfloat xminDefi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/testSmooth_8C.html:23,test,testSmooth,23,doc/master/testSmooth_8C.html,https://root.cern,https://root.cern/doc/master/testSmooth_8C.html,2,['test'],['testSmooth']
Testability,". ROOT: tutorials/hist/thstackpalettecolor.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. thstackpalettecolor.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Palette coloring for histograms' stack is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ; When one of these options is given to THStack::Draw the histograms in the THStack get their color from the current color palette defined by gStyle->SetPalette(...). The color is determined according to the number of histograms.; In this example four histograms are displayed with palette coloring. The color of each histogram is picked inside the palette kOcean. ; void thstackpalettecolor(); {; auto hs = new THStack(""hs"",""Stacked 1D histograms colored using kOcean palette"");; ; gStyle->SetPalette(kOcean);; ; // Create three 1-d histograms and add them in the stack; auto h1st = new TH1F(""h1st"",""test hstack"",100,-4,4);; h1st->FillRandom(""gaus"",20000);; hs->Add(h1st);; ; auto h2st = new TH1F(""h2st"",""test hstack"",100,-4,4);; h2st->FillRandom(""gaus"",15000);; hs->Add(h2st);; ; auto h3st = new TH1F(""h3st"",""test hstack"",100,-4,4);; h3st->FillRandom(""gaus"",10000);; hs->Add(h3st);; ; // draw the stack; hs->Draw(""pfc nostack"");; }; kOcean@ kOceanDefinition TColor.h:119; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; THStackThe Histogram stack class.Definition THStack.h:40; TStyle::SetPalettevoid SetPalette(Int_t ncolors=kBird, Int_t *colors=nullptr, Float_t alpha=1.)See TColor::SetPalette.Definition TStyle.cxx:1888; AuthorOlivier Couet ; Definition in file thstackpalettecolor.C. tutorialshistthstackpalettecolor.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/thstackpalettecolor_8C.html:992,test,test,992,doc/master/thstackpalettecolor_8C.html,https://root.cern,https://root.cern/doc/master/thstackpalettecolor_8C.html,3,['test'],['test']
Testability,". ROOT: tutorials/io Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. io Directory Reference. Directory dependency graph for io:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Files;  copyFiles.C;   Example of script showing how to copy all objects (including directories) from a source file. ;  ;  dirs.C;   This macro illustrates how to create a hierarchy of directories in a Root file. ;  ;  double32.C;   Tutorial illustrating use and precision of the Double32_t data type You should run this tutorial with ACLIC: a dictionary will be automatically created. ;  ;  fildir.C;   This macro displays the ROOT Directory data structure ;  ;  file.C;   This macro displays the physical ROOT file structure ;  ;  float16.C;   Tutorial illustrating use and precision of the Float16_t data type. ;  ;  hadd.C;   Macro to add histogram files This macro is kept for didactical purposes only: use instead the executable $ROOTSYS/bin/hadd ! ;  ;  importCode.C;   Example of script showing how to create a ROOT file with subdirectories. ;  ;  loopdir.C;   Example script to loop over all the objects of a ROOT file directory and print in Postscript all the TH1 derived objects. ;  ;  loopdir11.C;   Example script to loop over all the objects of a ROOT file directory and print in Postscript all the TH1 derived objects. ;  ;  mergeSelective.C;   Merge only part of the content of a set of files. ;  ;  readCode.C;   Example of script showing how to navigate in a ROOT file with sub-directories and read the objects in each sub-directory. ;  ;  testMergeCont.C;   Macro demonstrating the merging of containers. ;  ;  testTMPIFile.C;  This macro shows the usage of TMPIFile to simulate event reconstruction and merging them in parallel. ;  . tutorialsio. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_715fafd9bc85e47ed5557926189f8f1b.html:1626,test,testMergeCont,1626,doc/master/dir_715fafd9bc85e47ed5557926189f8f1b.html,https://root.cern,https://root.cern/doc/master/dir_715fafd9bc85e47ed5557926189f8f1b.html,2,['test'],"['testMergeCont', 'testTMPIFile']"
Testability,". ROOT: tutorials/math/testrandom.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. testrandom.C File ReferenceTutorials » Math tutorials. Detailed Description; Performance test of all the ROOT random generator (TRandom, TRandom1, TRandom2 and TRandom3) Tests the generator TRandom3 against some ref values and creates a timing table against TRandom, TRandom1 and TRandom2. ; E.g. on an an Intel Xeon Quad-core Harpertown (E5410) 2.33 GHz running Linux SLC4 64 bit and compiled with gcc 3.4; Distribution nanoseconds/call; TRandom TRandom1 TRandom2 TRandom3; Rndm.............. 5.000 105.000 7.000 10.000; RndmArray......... 4.000 104.000 6.000 9.000; Gaus.............. 36.000 180.000 40.000 48.000; Rannor............ 118.000 220.000 120.000 124.000; Landau............ 22.000 123.000 26.000 31.000; Exponential....... 93.000 198.000 98.000 104.000; Binomial(5,0.5)... 30.000 548.000 46.000 65.000; Binomial(15,0.5).. 75.000 1615.000 125.000 178.000; Poisson(3)........ 96.000 494.000 109.000 125.000; Poisson(10)....... 138.000 1236.000 165.000 203.000; Poisson(70)....... 818.000 1195.000 835.000 844.000; Poisson(100)...... 837.000 1218.000 849.000 864.000; GausTF1........... 83.000 180.000 87.000 88.000; LandauTF1......... 80.000 180.000 83.000 86.000; GausUNURAN........ 40.000 139.000 41.000 44.000; PoissonUNURAN(10). 85.000 271.000 92.000 102.000; PoissonUNURAN(100) 62.000 256.000 69.000 78.000; TRandom1The Ranlux Random number generator class.Definition TRandom1.h:27; TRandom2Random number generator class based on the maximally quidistributed combined Tausworthe generator by ...Definition TRandom2.h:27; TRandom3Random number generator class based on M.Definition TRandom3.h:27; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; Note that this tutorial can be executed in interpreted or compiled mode; Root > .x testrandom.C; Root > .x testrandom.C++; ; Distribution nanoseconds/call; TRando",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/testrandom_8C.html:23,test,testrandom,23,doc/master/testrandom_8C.html,https://root.cern,https://root.cern/doc/master/testrandom_8C.html,3,['test'],"['test', 'testrandom']"
Testability,". ROOT: tutorials/pyroot/zdemo.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; zdemo.py File ReferenceTutorials » PyRoot tutorials. Detailed Description; This macro is an example of graphs in log scales with annotations. ; The presented results are predictions of invariant cross-section of Direct Photons produced at RHIC energies, based on the universality of scaling function H(z).; These Figures were published in JINR preprint E2-98-64, Dubna, 1998 and submitted to CPC. ; import ROOT; from array import array; ; NMAX = 20; Z = array( 'f', [0.]*NMAX ); HZ = array( 'f', [0.]*NMAX ); PT = array( 'f', [0.]*NMAX ); INVSIG = array( 'f', [0.]*NMAX ); ; NLOOP = 0; saves = {}; ; #_______________________________________________________________________________; def hz_calc( ENERG, DENS, TGRAD, PTMIN, PTMAX, DELP ):; from math import sin, cos, sqrt; global NLOOP; global Z, HZ, PT, INVSIG; ; CSEFT= 1.; GM1 = 0.00001; GM2 = 0.00001; A1 = 1.; A2 = 1.; ALX = 2.; BETA = 1.; KF1 = 8.E-7; KF2 = 5.215; ; MN = 0.9383; DEGRAD=0.01745329; ; # print 'ENR= %f DENS= %f PTMIN= %f PTMAX= %f DELP= %f ' % (ENERG,DENS,PTMIN,PTMAX,DELP); ; DNDETA= DENS; MB1 = MN*A1; MB2 = MN*A2; EB1 = ENERG/2.*A1; EB2 = ENERG/2.*A2; M1 = GM1; M2 = GM2; THET = TGRAD*DEGRAD; NLOOP = int((PTMAX-PTMIN)/DELP); ; for I in range(NLOOP):; PT[I]=PTMIN+I*DELP; PTOT = PT[I]/sin(THET); ; ETOT = sqrt(M1*M1 + PTOT*PTOT); PB1 = sqrt(EB1*EB1 - MB1*MB1); PB2 = sqrt(EB2*EB2 - MB2*MB2); P2P3 = EB2*ETOT+PB2*PTOT*cos(THET); P1P2 = EB2*EB1+PB2*PB1; P1P3 = EB1*ETOT-PB1*PTOT*cos(THET); ; X1 = P2P3/P1P2; X2 = P1P3/P1P2; Y1 = X1+sqrt(X1*X2*(1.-X1)/(1.-X2)); Y2 = X2+sqrt(X1*X2*(1.-X2)/(1.-X1)); ; S = (MB1*MB1)+2.*P1P2+(MB2*MB2); SMIN = 4.*((MB1*MB1)*(X1*X1) +2.*X1*X2*P1P2+(MB2*MB2)*(X2*X2)); SX1 = 4.*( 2*(MB1*MB1)*X1+2*X2*P1P2); SX2 = 4.*( 2*(MB2*MB2)*X2+2*X1*P1P2); SX1X2= 4.*(2*P1P2); DELM = pow((1.-Y1)*(1.-Y2),ALX); ; Z[I] = sqrt(SMIN)/DELM/pow(DNDETA,BETA); ; Y1X1 = 1. +X2*(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/zdemo_8py.html:257,log,log,257,doc/master/zdemo_8py.html,https://root.cern,https://root.cern/doc/master/zdemo_8py.html,1,['log'],['log']
Testability,". ROOT: tutorials/roofit/rf506_msgservice.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf506_msgservice.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Organisation and simultaneous fits: tuning and customizing the RooFit message logging facility ; ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""RooPolynomial.h""; #include ""RooAddPdf.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""RooPlot.h""; #include ""RooMsgService.h""; ; using namespace RooFit;; ; void rf506_msgservice(); {; // C r e a t e p d f; // --------------------; ; // Construct gauss(x,m,s); RooRealVar x(""x"", ""x"", -10, 10);; RooRealVar m(""m"", ""m"", 0, -10, 10);; RooRealVar s(""s"", ""s"", 1, -10, 10);; RooGaussian gauss(""g"", ""g"", x, m, s);; ; // Construct poly(x,p0); RooRealVar p0(""p0"", ""p0"", 0.01, 0., 1.);; RooPolynomial poly(""p"", ""p"", x, p0);; ; // Construct model = f*gauss(x) + (1-f)*poly(x); RooRealVar f(""f"", ""f"", 0.5, 0., 1.);; RooAddPdf model(""model"", ""model"", RooArgSet(gauss, poly), f);; ; std::unique_ptr<RooDataSet> data{model.generate(x, 10)};; ; // P r i n t c o n f i g u r a t i o n o f m e s s a g e s e r v i c e; // ---------------------------------------------------------------------------; ; // Print streams configuration; RooMsgService::instance().Print();; cout << endl;; ; // A d d i n g I n t e g r a t i o n t o p i c t o e x i s t i n g I N F O s t r e a m; // -----------------------------------------------------------------------------------------------; ; // Print streams configuration; RooMsgService::instance().Print();; cout << endl;; ; // Add Integration topic to existing INFO stream; RooMsgService::instance().getStream(1).addTopic(Integration);; ; // Construct integral over gauss to demonstrate new message stream; std::unique_ptr<RooAbsReal> igauss{gauss.createIntegral(x)};; igauss->Print();; ; // Print streams configuration in verbose, which also shows inactive streams",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf506__msgservice_8C.html:304,log,logging,304,doc/master/rf506__msgservice_8C.html,https://root.cern,https://root.cern/doc/master/rf506__msgservice_8C.html,1,['log'],['logging']
Testability,". ROOT: tutorials/roofit/rf506_msgservice.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf506_msgservice.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Organization and simultaneous fits: tuning and customizing the ROOT.RooFit message logging facility ; ; import ROOT; ; # Create pdf; # --------------------; ; # Construct gauss(x,m,s); x = ROOT.RooRealVar(""x"", ""x"", -10, 10); m = ROOT.RooRealVar(""m"", ""m"", 0, -10, 10); s = ROOT.RooRealVar(""s"", ""s"", 1, -10, 10); gauss = ROOT.RooGaussian(""g"", ""g"", x, m, s); ; # Construct poly(x,p0); p0 = ROOT.RooRealVar(""p0"", ""p0"", 0.01, 0.0, 1.0); poly = ROOT.RooPolynomial(""p"", ""p"", x, [p0]); ; # model = f*gauss(x) + (1-f)*poly(x); f = ROOT.RooRealVar(""f"", ""f"", 0.5, 0.0, 1.0); model = ROOT.RooAddPdf(""model"", ""model"", [gauss, poly], [f]); ; data = model.generate({x}, 10); ; # Print configuration of message service; # ------------------------------------------; ; # Print streams configuration; ROOT.RooMsgService.instance().Print(); ; # Adding integration topic to existing INFO stream; # ---------------------------------------------------; ; # Print streams configuration; ROOT.RooMsgService.instance().Print(); ; # Add Integration topic to existing INFO stream; ROOT.RooMsgService.instance().getStream(1).addTopic(ROOT.RooFit.Integration); ; # Construct integral over gauss to demonstrate message stream; igauss = gauss.createIntegral({x}); igauss.Print(); ; # Print streams configuration in verbose, also shows inactive streams; ROOT.RooMsgService.instance().Print(); ; # Remove stream; ROOT.RooMsgService.instance().getStream(1).removeTopic(ROOT.RooFit.Integration); ; # Examples of pdf value tracing; # -----------------------------------------------------------------------; ; # Show DEBUG level message on function tracing, ROOT.RooGaussian only; ROOT.RooMsgService.instance().addStream(ROOT.RooFit.DEBUG, Topic=ROOT.RooFit.Tracing, ClassName=""RooGaussian""); ; # ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf506__msgservice_8py.html:324,log,logging,324,doc/master/rf506__msgservice_8py.html,https://root.cern,https://root.cern/doc/master/rf506__msgservice_8py.html,1,['log'],['logging']
Testability,". ROOT: tutorials/roofit/rf612_recoverFromInvalidParameters.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf612_recoverFromInvalidParameters.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Likelihood and minimization: Recover from regions where the function is not defined. ; We demonstrate improved recovery from disallowed parameters. For this, we use a polynomial PDF of the form ; \[; \mathrm{Pol2} = \mathcal{N} \left( c + a_1 \cdot x + a_2 \cdot x^2 + 0.01 \cdot x^3 \right),; \]. where \( \mathcal{N} \) is a normalisation factor. Unless the parameters are chosen carefully, this function can be negative, and hence, it cannot be used as a PDF. In this case, RooFit passes an error to the minimiser, which might try to recover.; Before ROOT 6.24, RooFit always passed the highest function value that was encountered during the minimisation to the minimiser. If a parameter is far in a disallowed region, the minimiser has to blindly test various values of the parameters. It might find the correct values by chance, but often be unable to recover from bad starting values. Here, we use a model with such bad values.; Starting with ROOT 6.24, the minimiser receives more information. For example, when a PDF is negative, the magnitude of the ""undershoot"" is passed to the minimiser. The minimiser can use this to compute a gradient, which will eventually lead it out of the disallowed region. The steepness of this gradient can be chosen using RooFit::RecoverFromUndefinedRegions(double). A value of zero is equivalent to RooFit before ROOT 6.24. Positive values activate the recovery. Values between 1. and 10. were found to be a good default. If no argument is passed, RooFit uses 10.; ; #include <RooRealVar.h>; #include <RooPolynomial.h>; #include <RooPlot.h>; #include <RooDataSet.h>; #include <RooGlobalFunc.h>; #include <RooFitResult.h>; #include <RooMsgService.h>; ; #include <TCanvas.h>; #include <TLegend.h>; ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8C.html:1013,test,test,1013,doc/master/rf612__recoverFromInvalidParameters_8C.html,https://root.cern,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/roofit/rf616_morphing.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf616_morphing.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Use Morphing in RooFit. ; This tutorial shows how to use template morphing inside RooFit. As input we have several Gaussian distributions. The output is one gaussian, with a specific mean value. Since likelihoods are often used within the framework of morphing, we provide a way to estimate the negative log likelihood (nll).; Based on example of Kyle Cranmer https://gist.github.com/cranmer/b67830e46d53d5f7cf2d. ; #include ""RooRealVar.h""; #include ""RooRealVar.h""; #include ""RooWorkspace.h""; #include ""RooGaussian.h""; #include ""RooUniform.h""; #include ""RooDataSet.h""; #include ""RooPlot.h""; #include ""RooMomentMorphFuncND.h""; #include ""RooAbsPdf.h""; ; using namespace RooFit;; ; // Number of samples to fill the histograms; const int n_samples = 1000;; ; // Kills warning massages; RooMsgService::instance().setGlobalKillBelow(RooFit::WARNING);; ; // Define the morphing routine; RooPlot *perform_morphing(RooWorkspace &ws, RooMomentMorphFuncND::Setting setting, double sigma); {; // Get Variables from the workspace; RooRealVar *x_var = ws.var(""x"");; RooRealVar *mu_var = ws.var(""mu"");; RooAbsPdf *gauss = ws.pdf(""gauss"");; ; // Initialize a plot; RooPlot *frame1 = x_var->frame();; ; // Define binning for morphing; RooMomentMorphFuncND::Grid grid(RooBinning(4, 0.0, 4.0));; ; // Set binning of histograms, has to be customized for optimal results; x_var->setBins(50);; ; std::vector<int> parampoints = {0, 1, 2, 3, 4};; ; for (auto i : parampoints) {; // Define the sampled gaussians; RooRealVar mu_help(Form(""mu%d"", i), Form(""mu%d"", i), i);; // Use * because RooGaussian expects objects no pointers; RooGaussian help(Form(""g%d"", i), Form(""g%d"", i), *x_var, mu_help, sigma);; ws.import(help, Silence(true));; ; // Fill the histograms use a unique pointer to prevent memory lea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf616__morphing_8C.html:526,log,log,526,doc/master/rf616__morphing_8C.html,https://root.cern,https://root.cern/doc/master/rf616__morphing_8C.html,1,['log'],['log']
Testability,". ROOT: tutorials/roofit/rf616_morphing.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf616_morphing.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Use Morphing in RooFit. ; This tutorial shows how to use template morphing inside RooFit. As input we have several Gaussian distributions. The output is one gaussian, with a specific mean value. Since likelihoods are often used within the framework of morphing, we provide a way to estimate the negative log likelihood (nll).; Based on example of Kyle Cranmer https://gist.github.com/cranmer/46fff8d22015e5a26619. ; ; import ROOT; ; # Number of samples to fill the histograms; n_samples = 1000; ; ; # Kills warning messages; ROOT.RooMsgService.instance().setGlobalKillBelow(ROOT.RooFit.WARNING); ; ; # morphing as a baseline; def morphing(setting):; # set up a frame for plotting; frame1 = x_var.frame(); ; # define binning for morphing; bin_mu_x = ROOT.RooBinning(4, 0.0, 4.0); grid = ROOT.RooMomentMorphFuncND.Grid(bin_mu_x); x_var.setBins(50); ; # number of 'sampled' Gaussians, if you change it, adjust the binning properly; for i in range(5):; # Create the sampled Gaussian; workspace.factory(f""Gaussian::g{i}(x, mu{i}[{i}], {sigma})"".format(i=i)); ; # Fill the histograms; hist = workspace[f""g{i}""].generateBinned([x_var], n_samples * 100); # Make sure that every bin is filled and we don't get zero probability; for i_bin in range(hist.numEntries()):; hist.add(hist.get(i_bin), 1.0); ; # Add the pdf to the workspace, the inOrder of 1 is necessary for calculation of the nll; # Adjust it to 0 to see binning; workspace.Import(ROOT.RooHistPdf(f""histpdf{i}"", f""histpdf{i}"", [x_var], hist, intOrder=1)); ; # Add the pdf to the grid and to the plot; grid.addPdf(workspace[f""histpdf{i}""], int(i)); workspace[f""histpdf{i}""].plotOn(frame1); ; # Create the morphing and add it to the workspace; morph_func = ROOT.RooMomentMorphFuncND(""morph_func"", ""morph_func"", [mu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf616__morphing_8py.html:541,log,log,541,doc/master/rf616__morphing_8py.html,https://root.cern,https://root.cern/doc/master/rf616__morphing_8py.html,1,['log'],['log']
Testability,". ROOT: tutorials/tmva/TMVAClassification.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVAClassification.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This macro provides examples for the training and testing of the TMVA classifiers. ; As input data is used a toy-MC sample consisting of four Gaussian-distributed and linearly correlated input variables. The methods to be used can be switched on and off by means of booleans, or via the prompt command, for example: root -l ./TMVAClassification.C\‍(\""Fisher,Likelihood\""\‍); (note that the backslashes are mandatory) If no method given, a default set of classifiers is used. The output file ""TMVAC.root"" can be analysed with the use of dedicated macros (simply say: root -l <macro.C>), which can be conveniently invoked through a GUI that will appear at the end of the run of this macro. Launch the GUI via the command: root -l ./TMVAGui.C; You can also compile and run the example with the following commands make; ./TMVAClassification <Methods>; where: <Methods> = ""method1 method2"" are the TMVA classifier names example: ./TMVAClassification Fisher LikelihoodPCA BDT; If no method given, a default set is of classifiers is used. Project : TMVA - a ROOT-integrated toolkit for multivariate data analysis; Package : TMVA; Root Macro: TMVAClassification. ; ; ==> Start TMVAClassification; --- TMVAClassification : Using input file: ./files/tmva_class_example.root; DataSetInfo : [dataset] : Added class ""Signal""; : Add Tree TreeS of type Signal with 6000 events; DataSetInfo : [dataset] : Added class ""Background""; : Add Tree TreeB of type Background with 6000 events; Factory : Booking method: ␛[1mCuts␛[0m; : ; : Use optimization method: ""Monte Carlo""; : Use efficiency computation method: ""Event Selection""; : Use ""FSmart"" cuts for variable: 'myvar1'; : Use ""FSmart"" cuts for variable: 'myvar2'; : Use ""FSmart"" cuts for variable: 'var3'; : Use ""FSmart"" cuts for variable: ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:276,test,testing,276,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['test'],['testing']
Testability,". ROOT: tutorials/tmva/TMVAClassification.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVAClassification.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_tmva; 3/// \notebook -nodraw; 4/// This macro provides examples for the training and testing of the; 5/// TMVA classifiers.; 6///; 7/// As input data is used a toy-MC sample consisting of four Gaussian-distributed; 8/// and linearly correlated input variables.; 9/// The methods to be used can be switched on and off by means of booleans, or; 10/// via the prompt command, for example:; 11///; 12/// root -l ./TMVAClassification.C\‍(\""Fisher,Likelihood\""\‍); 13///; 14/// (note that the backslashes are mandatory); 15/// If no method given, a default set of classifiers is used.; 16/// The output file ""TMVAC.root"" can be analysed with the use of dedicated; 17/// macros (simply say: root -l <macro.C>), which can be conveniently; 18/// invoked through a GUI that will appear at the end of the run of this macro.; 19/// Launch the GUI via the command:; 20///; 21/// root -l ./TMVAGui.C; 22///; 23/// You can also compile and run the example with the following commands; 24///; 25/// make; 26/// ./TMVAClassification <Methods>; 27///; 28/// where: `<Methods> = ""method1 method2""` are the TMVA classifier names; 29/// example:; 30///; 31/// ./TMVAClassification Fisher LikelihoodPCA BDT; 32///; 33/// If no method given, a default set is of classifiers is used; 34///; 35/// - Project : TMVA - a ROOT-integrated toolkit for multivariate data analysis; 36/// - Package : TMVA; 37/// - Root Macro: TMVAClassification; 38///; 39/// \macro_output; 40/// \macro_code; 41/// \author Andreas Hoecker; 42 ; 43 ; 44#include <cstdlib>; 45#include <iostream>; 46#include <map>; 47#include <string>; 48 ; 49#include ""TChain.h""; 50#include ""TFile.h""; 51#include ""TTree.h""; 52#include ""TString.h""; 53#include ""TObjString.h""; 54#include ""TSystem.h""; 55#include ""TROOT.h""; 56 ; 57#inclu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C_source.html:318,test,testing,318,doc/master/TMVAClassification_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C_source.html,1,['test'],['testing']
Testability,". ROOT: tutorials/tmva/TMVAClassificationCategory.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVAClassificationCategory.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode. . Project : TMVA - a Root-integrated toolkit for multivariate data analysis; Package : TMVA; Root Macro: TMVAClassificationCategory. As input data is used a toy-MC sample consisting of four Gaussian-distributed and linearly correlated input variables with category (eta) dependent properties.; For this example, only Fisher and Likelihood are used. Run via: root -l TMVAClassificationCategory.C; The output file ""TMVACC.root"" can be analysed with the use of dedicated macros (simply say: root -l <macro.C>), which can be conveniently invoked through a GUI that will appear at the end of the run of this macro.; ; ; ==> Start TMVAClassificationCategory; --- TMVAClassificationCategory: Accessing /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/tutorials/tmva/data/toy_sigbkg_categ_offset.root; <HEADER> DataSetInfo : [dataset] : Added class ""Signal""; : Add Tree TreeS of type Signal with 10000 events; <HEADER> DataSetInfo : [dataset] : Added class ""Background""; : Add Tree TreeB of type Background with 10000 events; <HEADER> Factory : Booking method: Fisher; : ; <HEADER> Factory : Booking method: Likelihood; : ; <HEADER> Factory : Booking method: FisherCat; : ; : Adding sub-classifier: Fisher::Category_Fisher_1; <HEADER> DataSetInfo : [Category_Fisher_1_dsi] : Added class ""Signal""; <HEADER> DataSetInfo : [Category_Fisher_1_dsi] : Added class ""Background""; : Adding sub-classifier: Fisher::Category_Fisher_2; <HEADER> DataSetInfo : [Category_Fisher_2_dsi] : Added class ""Signal""; <HEADER> DataSetInfo : [Category_Fisher_2_dsi] : Added class ""Background""; <HEADER> Factory : Booking method: LikelihoodCat; : ; : Adding su",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassificationCategory_8C.html:292,test,testing,292,doc/master/TMVAClassificationCategory_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassificationCategory_8C.html,1,['test'],['testing']
Testability,". ROOT: tutorials/tmva/TMVAMulticlass.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVAMulticlass.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This macro provides a simple example for the training and testing of the TMVA multiclass classification . Project : TMVA - a Root-integrated toolkit for multivariate data analysis; Package : TMVA; Root Macro: TMVAMulticlass. ; ; ==> Start TMVAMulticlass; --- TMVAMulticlass: Using input file: ./files/tmva_multiclass_example.root; DataSetInfo : [dataset] : Added class ""Signal""; : Add Tree TreeS of type Signal with 2000 events; DataSetInfo : [dataset] : Added class ""bg0""; : Add Tree TreeB0 of type bg0 with 2000 events; DataSetInfo : [dataset] : Added class ""bg1""; : Add Tree TreeB1 of type bg1 with 2000 events; DataSetInfo : [dataset] : Added class ""bg2""; : Add Tree TreeB2 of type bg2 with 2000 events; : Dataset[dataset] : Class index : 0 name : Signal; : Dataset[dataset] : Class index : 1 name : bg0; : Dataset[dataset] : Class index : 2 name : bg1; : Dataset[dataset] : Class index : 3 name : bg2; Factory : Booking method: ␛[1mBDTG␛[0m; : ; : the option NegWeightTreatment=InverseBoostNegWeights does not exist for BoostType=Grad; : --> change to new default NegWeightTreatment=Pray; : Rebuilding Dataset dataset; : Building event vectors for type 2 Signal; : Dataset[dataset] : create input formulas for tree TreeS; : Building event vectors for type 2 bg0; : Dataset[dataset] : create input formulas for tree TreeB0; : Building event vectors for type 2 bg1; : Dataset[dataset] : create input formulas for tree TreeB1; : Building event vectors for type 2 bg2; : Dataset[dataset] : create input formulas for tree TreeB2; DataSetFactory : [dataset] : Number of events in input trees; : ; : ; : ; : ; : Number of training and testing events; : ---------------------------------------------------------------------------; : Signal -- training events : 1000; : Signal -- testing",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:276,test,testing,276,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['test'],['testing']
Testability,". ROOT: tutorials/tmva/TMVAMulticlass.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVAMulticlass.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_tmva; 3/// \notebook -nodraw; 4/// This macro provides a simple example for the training and testing of the TMVA; 5/// multiclass classification; 6/// - Project : TMVA - a Root-integrated toolkit for multivariate data analysis; 7/// - Package : TMVA; 8/// - Root Macro: TMVAMulticlass; 9///; 10/// \macro_output; 11/// \macro_code; 12/// \author Andreas Hoecker; 13 ; 14#include <cstdlib>; 15#include <iostream>; 16#include <map>; 17#include <string>; 18 ; 19#include ""TFile.h""; 20#include ""TTree.h""; 21#include ""TString.h""; 22#include ""TSystem.h""; 23#include ""TROOT.h""; 24 ; 25 ; 26#include ""TMVA/Tools.h""; 27#include ""TMVA/Factory.h""; 28#include ""TMVA/DataLoader.h""; 29#include ""TMVA/TMVAMultiClassGui.h""; 30 ; 31 ; 32using namespace TMVA;; 33 ; 34void TMVAMulticlass( TString myMethodList = """" ); 35{; 36 ; 37 // This loads the library; 38 TMVA::Tools::Instance();; 39 ; 40 // to get access to the GUI and all tmva macros; 41 //; 42 // TString tmva_dir(TString(gRootDir) + ""/tmva"");; 43 // if(gSystem->Getenv(""TMVASYS"")); 44 // tmva_dir = TString(gSystem->Getenv(""TMVASYS""));; 45 // gROOT->SetMacroPath(tmva_dir + ""/test/:"" + gROOT->GetMacroPath() );; 46 // gROOT->ProcessLine("".L TMVAMultiClassGui.C"");; 47 ; 48 ; 49 //---------------------------------------------------------------; 50 // Default MVA methods to be trained + tested; 51 std::map<std::string,int> Use;; 52 Use[""MLP""] = 1;; 53 Use[""BDTG""] = 1;; 54#ifdef R__HAS_TMVAGPU; 55 Use[""DL_CPU""] = 1;; 56 Use[""DL_GPU""] = 1;; 57#else; 58 Use[""DL_CPU""] = 1;; 59 Use[""DL_GPU""] = 0;; 60#endif; 61 Use[""FDA_GA""] = 0;; 62 Use[""PDEFoam""] = 1;; 63 ; 64 //---------------------------------------------------------------; 65 ; 66 std::cout << std::endl;; 67 std::cout << ""==> Start TMVAMulticlass"" << std::endl;; 68 ; 69 if (m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C_source.html:318,test,testing,318,doc/master/TMVAMulticlass_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C_source.html,1,['test'],['testing']
Testability,". ROOT: tutorials/tmva/TMVARegression.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVARegression.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This macro provides examples for the training and testing of the TMVA classifiers. ; As input data is used a toy-MC sample consisting of four Gaussian-distributed and linearly correlated input variables.; The methods to be used can be switched on and off by means of booleans, or via the prompt command, for example: root -l TMVARegression.C\‍(\""LD,MLP\""\‍); (note that the backslashes are mandatory) If no method given, a default set is used.; The output file ""TMVAReg.root"" can be analysed with the use of dedicated macros (simply say: root -l <macro.C>), which can be conveniently invoked through a GUI that will appear at the end of the run of this macro.; Project : TMVA - a Root-integrated toolkit for multivariate data analysis; Package : TMVA; Root Macro: TMVARegression. ; ; ==> Start TMVARegression; --- TMVARegression : Using input file: ./files/tmva_reg_example.root; DataSetInfo : [datasetreg] : Added class ""Regression""; : Add Tree TreeR of type Regression with 10000 events; : Dataset[datasetreg] : Class index : 0 name : Regression; Factory : Booking method: ␛[1mPDEFoam␛[0m; : ; : Rebuilding Dataset datasetreg; : Building event vectors for type 2 Regression; : Dataset[datasetreg] : create input formulas for tree TreeR; DataSetFactory : [datasetreg] : Number of events in input trees; : ; : Number of training and testing events; : ---------------------------------------------------------------------------; : Regression -- training events : 1000; : Regression -- testing events : 9000; : Regression -- training and testing events: 10000; : ; DataSetInfo : Correlation matrix (Regression):; : ------------------------; : var1 var2; : var1: +1.000 +0.006; : var2: +0.006 +1.000; : ------------------------; DataSetFactory : [datasetreg] : ; : ; Factory : Booking m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:268,test,testing,268,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['test'],['testing']
Testability,". ROOT: tutorials/tmva/TMVARegression.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVARegression.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_tmva; 3/// \notebook -nodraw; 4/// This macro provides examples for the training and testing of the; 5/// TMVA classifiers.; 6///; 7/// As input data is used a toy-MC sample consisting of four Gaussian-distributed; 8/// and linearly correlated input variables.; 9///; 10/// The methods to be used can be switched on and off by means of booleans, or; 11/// via the prompt command, for example:; 12///; 13/// root -l TMVARegression.C\‍(\""LD,MLP\""\‍); 14///; 15/// (note that the backslashes are mandatory); 16/// If no method given, a default set is used.; 17///; 18/// The output file ""TMVAReg.root"" can be analysed with the use of dedicated; 19/// macros (simply say: root -l <macro.C>), which can be conveniently; 20/// invoked through a GUI that will appear at the end of the run of this macro.; 21/// - Project : TMVA - a Root-integrated toolkit for multivariate data analysis; 22/// - Package : TMVA; 23/// - Root Macro: TMVARegression; 24///; 25/// \macro_output; 26/// \macro_code; 27/// \author Andreas Hoecker; 28 ; 29#include <cstdlib>; 30#include <iostream>; 31#include <map>; 32#include <string>; 33 ; 34#include ""TChain.h""; 35#include ""TFile.h""; 36#include ""TTree.h""; 37#include ""TString.h""; 38#include ""TObjString.h""; 39#include ""TSystem.h""; 40#include ""TROOT.h""; 41 ; 42#include ""TMVA/Tools.h""; 43#include ""TMVA/Factory.h""; 44#include ""TMVA/DataLoader.h""; 45#include ""TMVA/TMVARegGui.h""; 46 ; 47 ; 48using namespace TMVA;; 49 ; 50void TMVARegression( TString myMethodList = """" ); 51{; 52 // The explicit loading of the shared libTMVA is done in TMVAlogon.C, defined in .rootrc; 53 // if you use your private .rootrc, or run from a different directory, please copy the; 54 // corresponding lines from .rootrc; 55 ; 56 // methods to be processed can be given as an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C_source.html:310,test,testing,310,doc/master/TMVARegression_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C_source.html,1,['test'],['testing']
Testability,". ROOT: tutorials/tmva/tmva102_Testing.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; tmva102_Testing.py File ReferenceTutorials » TMVA tutorials. Detailed Description; This tutorial illustrates how you can test a trained BDT model using the fast tree inference engine offered by TMVA and external tools such as scikit-learn. ; ; import ROOT; import pickle; ; from tmva100_DataPreparation import variables; from tmva101_Training import load_data; ; ; # Load data; x, y_true, w = load_data(""test_signal.root"", ""test_background.root""); ; # Load trained model; File = ""tmva101.root""; if (ROOT.gSystem.AccessPathName(File)) :; ROOT.Info(""tmva102_Testing.py"", File+""does not exist""); exit(); ; bdt = ROOT.TMVA.Experimental.RBDT(""myBDT"", File); ; # Make prediction; y_pred = bdt.Compute(x); ; # Compute ROC using sklearn; from sklearn.metrics import roc_curve, auc; false_positive_rate, true_positive_rate, _ = roc_curve(y_true, y_pred, sample_weight=w); score = auc(false_positive_rate, true_positive_rate); ; # Plot ROC; c = ROOT.TCanvas(""roc"", """", 600, 600); g = ROOT.TGraph(len(false_positive_rate), false_positive_rate, true_positive_rate); g.SetTitle(""AUC = {:.2f}"".format(score)); g.SetLineWidth(3); g.SetLineColor(ROOT.kRed); g.Draw(""AC""); g.GetXaxis().SetRangeUser(0, 1); g.GetYaxis().SetRangeUser(0, 1); g.GetXaxis().SetTitle(""False-positive rate""); g.GetYaxis().SetTitle(""True-positive rate""); c.Draw(); lenOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva102__Testing_8py.html:273,test,test,273,doc/master/tmva102__Testing_8py.html,https://root.cern,https://root.cern/doc/master/tmva102__Testing_8py.html,1,['test'],['test']
Testability,". ROOT: tutorials/tree/bill.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. bill.C File ReferenceTutorials » Tree tutorials. Detailed Description; Benchmark comparing row-wise and column-wise storage performance ; The test consists in writing/reading to/from keys or trees To execute the benchmark: root -b -q bill.C or root -b -q bill.C++; b#define b(i)Definition RSha256.hxx:100; qfloat * qDefinition THbookFile.cxx:89; for example for N=10000, the following output is produced on an 2.7 GHz Intel Core i7 (year 2011). The names featuring a ""t"" are relative to trees, the faster, the better. billw0 : RT= 0.803 s, Cpu= 0.800 s, File size= 45608143 bytes, CX= 1; billr0 : RT= 0.388 s, Cpu= 0.390 s; billtw0 : RT= 0.336 s, Cpu= 0.310 s, File size= 45266881 bytes, CX= 1.00034; billtr0 : RT= 0.229 s, Cpu= 0.230 s; billw1 : RT= 1.671 s, Cpu= 1.670 s, File size= 16760526 bytes, CX= 2.72078; billr1 : RT= 0.667 s, Cpu= 0.680 s; billtw1 : RT= 0.775 s, Cpu= 0.770 s, File size= 9540884 bytes, CX= 4.74501; billtr1 : RT= 0.352 s, Cpu= 0.350 s; billtot : RT= 5.384 s, Cpu= 5.290 s; ******************************************************************; * ROOTMARKS =1763.9 * Root6.05/03 20150914/948; ******************************************************************; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; bytesOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/bill_8C.html:269,test,test,269,doc/master/bill_8C.html,https://root.cern,https://root.cern/doc/master/bill_8C.html,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,". ROOT: tutorials/tree/circular.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. circular.C File ReferenceTutorials » Tree tutorials. Detailed Description; Example of a circular Tree ; Circular Trees are interesting in online real time environments to store the results of the last maxEntries events. for more info, see TTree::SetCircular. Circular trees must be memory resident.; ; void circular() {; auto T = new TTree(""T"",""test circular buffers"");; TRandom r;; Float_t px,py,pz;; Double_t randomNum;; UShort_t i;; T->Branch(""px"",&px,""px/F"");; T->Branch(""py"",&py,""px/F"");; T->Branch(""pz"",&pz,""px/F"");; T->Branch(""random"",&randomNum,""random/D"");; T->Branch(""i"",&i,""i/s"");; T->SetCircular(20000); //keep a maximum of 20000 entries in memory; for (i = 0; i < 65000; i++) {; r.Rannor(px,py);; pz = px*px + py*py;; randomNum = r.Rndm();; T->Fill();; }; T->Print();; }; ; UShort_tunsigned short UShort_tDefinition RtypesCore.h:40; Float_tfloat Float_tDefinition RtypesCore.h:57; Double_tdouble Double_tDefinition RtypesCore.h:59; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; AuthorRene Brun ; Definition in file circular.C. tutorialstreecircular.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/circular_8C.html:476,test,test,476,doc/master/circular_8C.html,https://root.cern,https://root.cern/doc/master/circular_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/tree/copytree.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. copytree.C File ReferenceTutorials » Tree tutorials. Detailed Description; Copy a subset of a Tree to a new Tree ; The input file has been generated by the program in $ROOTSYS/test/Event with Event 1000 1 1 1.; ; // Load the library at macro parsing time: we need this to use its content in the code; R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so); ; void copytree(); {; ; TString dir = ""$ROOTSYS/test/Event.root"";; gSystem->ExpandPathName(dir);; const auto filename = gSystem->AccessPathName(dir) ? ""./Event.root"" : ""$ROOTSYS/test/Event.root"";; ; TFile oldfile(filename);; TTree *oldtree;; oldfile.GetObject(""T"", oldtree);; ; // Deactivate all branches; oldtree->SetBranchStatus(""*"", 0);; ; // Activate only four of them; for (auto activeBranchName : {""event"", ""fNtrack"", ""fNseg"", ""fH""}); oldtree->SetBranchStatus(activeBranchName, 1);; ; // Create a new file + a clone of old tree in new file; TFile newfile(""small.root"", ""recreate"");; auto newtree = oldtree->CloneTree();; ; newtree->Print();; newfile.Write();; }; R__LOAD_LIBRARY#define R__LOAD_LIBRARY(LIBRARY)Definition Rtypes.h:496; filenameOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char filenameDefinition TGWin32VirtualXProxy.cxx:232; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TFileA ROOT file is an on-disk file, usually with extension ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/copytree_8C.html:307,test,test,307,doc/master/copytree_8C.html,https://root.cern,https://root.cern/doc/master/copytree_8C.html,4,['test'],['test']
Testability,". ROOT: tutorials/tree/copytree2.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. copytree2.C File ReferenceTutorials » Tree tutorials. Detailed Description; Copy a subset of a Tree to a new Tree, one branch in a separate file. ; One branch of the new Tree is written to a separate file The input file has been generated by the program in $ROOTSYS/test/Event with the command Event 1000 1 1 1; ; // Load the library at macro parsing time: we need this to use its content in the code; R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so); ; void copytree2(); {; ; TString dir = ""$ROOTSYS/test/Event.root"";; gSystem->ExpandPathName(dir);; const auto filename = gSystem->AccessPathName(dir) ? ""./Event.root"" : ""$ROOTSYS/test/Event.root"";; ; TFile oldfile(filename);; TTree *oldtree;; oldfile.GetObject(""T"", oldtree);; ; // Activate only four of them; for (auto activeBranchName : {""event"", ""fNtrack"", ""fNseg"", ""fH""}) {; oldtree->SetBranchStatus(activeBranchName, 1);; }; ; // Create a new file + a clone of old tree header. Do not copy events; TFile newfile(""small.root"", ""recreate"");; auto newtree = oldtree->CloneTree(0);; ; // Divert branch fH to a separate file and copy all events; newtree->GetBranch(""fH"")->SetFile(""small_fH.root"");; newtree->CopyEntries(oldtree);; ; newtree->Print();; newfile.Write();; }; R__LOAD_LIBRARY#define R__LOAD_LIBRARY(LIBRARY)Definition Rtypes.h:496; filenameOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/copytree2_8C.html:398,test,test,398,doc/master/copytree2_8C.html,https://root.cern,https://root.cern/doc/master/copytree2_8C.html,4,['test'],['test']
Testability,". ROOT: tutorials/tree/copytree3.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. copytree3.C File ReferenceTutorials » Tree tutorials. Detailed Description; Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries. ; Only selected entries are copied to the new Tree. The input file has been generated by the program in $ROOTSYS/test/Event with Event 1000 1 99 1; ; R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so); ; void copytree3(); {; // Get old file, old tree and set top branch address; TString dir = ""$ROOTSYS/test/Event.root"";; gSystem->ExpandPathName(dir);; const auto filename = gSystem->AccessPathName(dir) ? ""./Event.root"" : ""$ROOTSYS/test/Event.root"";; ; TFile oldfile(filename);; TTree *oldtree;; oldfile.GetObject(""T"", oldtree);; ; const auto nentries = oldtree->GetEntries();; ; Event *event = nullptr;; oldtree->SetBranchAddress(""event"", &event);; ; // Create a new file + a clone of old tree in new file; TFile newfile(""small.root"", ""recreate"");; auto newtree = oldtree->CloneTree(0);; ; for (auto i : ROOT::TSeqI(nentries)) {; oldtree->GetEntry(i);; if (event->GetNtrack() > 605); newtree->Fill();; event->Clear();; }; ; newtree->Print();; newfile.Write();; }; R__LOAD_LIBRARY#define R__LOAD_LIBRARY(LIBRARY)Definition Rtypes.h:496; filenameOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char filenameDefinition TGWin32VirtualXProxy.cxx:232; nentriesint nent",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/copytree3_8C.html:404,test,test,404,doc/master/copytree3_8C.html,https://root.cern,https://root.cern/doc/master/copytree3_8C.html,4,['test'],['test']
Testability,". ROOT: tutorials/tree/htest.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. htest.C File ReferenceTutorials » Tree tutorials. Detailed Description; Save histograms in Tree branches ; To run this example, do root > .L htest.C; root > htw(); root > htr1(); root > htr2(); root > htr3(). ; void htw() {; // Create a Tree with a few branches of type histogram; // 25000 entries are filled in the Tree; // For each entry, the copy of 3 histograms is written; // The data base will contain 75000 histograms.; gBenchmark->Start(""hsimple"");; TFile f(""ht.root"",""recreate"");; auto T = new TTree(""T"",""test"");; auto hpx = new TH1F(""hpx"",""This is the px distribution"",100,-4,4);; auto hpxpy = new TH2F(""hpxpy"",""py vs px"",40,-4,4,40,-4,4);; auto hprof = new TProfile(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);; T->Branch(""hpx"",""TH1F"",&hpx,32000,0);; T->Branch(""hpxpy"",""TH2F"",&hpxpy,32000,0);; T->Branch(""hprof"",""TProfile"",&hprof,32000,0);; Float_t px, py, pz;; for (Int_t i = 0; i < 25000; i++) {; if (i%1000 == 0) printf(""at entry: %d\n"",i);; gRandom->Rannor(px,py);; pz = px*px + py*py;; hpx->Fill(px);; hpxpy->Fill(px,py);; hprof->Fill(px,pz);; T->Fill();; }; T->Print();; f.Write();; gBenchmark->Show(""hsimple"");; }; ; void htr1() {; // Connect Tree generated by htw and show histograms for entry 12345; auto f = new TFile(""ht.root"");; auto T = (TTree*)f->Get(""T"");; TH1F *hpx = nullptr;; TH2F *hpxpy = nullptr;; TProfile *hprof = nullptr;; T->SetBranchAddress(""hpx"",&hpx);; T->SetBranchAddress(""hpxpy"",&hpxpy);; T->SetBranchAddress(""hprof"",&hprof);; T->GetEntry(12345);; auto c1 = new TCanvas(""c1"",""test"",10,10,600,1000);; c1->Divide(1,3);; c1->cd(1);; hpx->Draw();; c1->cd(2);; hpxpy->Draw();; c1->cd(3);; hprof->Draw();; c1->Print(""htr1.png"");; }; ; void htr2() {; // Connect Tree generated by htw and show histograms for entry 12345; // a variant of htr1; auto f = new TFile(""ht.root"");; auto T = (TTree*)f->Get(""T"");; auto c1 = new TCanvas(""c1"",""t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/htest_8C.html:642,test,test,642,doc/master/htest_8C.html,https://root.cern,https://root.cern/doc/master/htest_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/tree/spider.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. spider.C File ReferenceTutorials » Tree tutorials. Detailed Description; TSpider example. ; ; #include ""TFile.h""; #include ""TCanvas.h""; #include ""TNtuple.h""; #include ""TSpider.h""; ; void spider() {; TCanvas *c1 = new TCanvas(""c1"",""TSpider example"",200,10,700,700);; TFile *f = new TFile(""hsimple.root"");; if (!f || f->IsZombie()) {; printf(""Please run <ROOT location>/tutorials/hsimple.C before."");; return;; }; TNtuple* ntuple = (TNtuple*)f->Get(""ntuple"");; TString varexp = ""px:py:pz:random:sin(px):log(px/py):log(pz)"";; TString selection = ""px>0 && py>0 && pz>0"";; TString options = ""average"";; TSpider *spider = new TSpider(ntuple,varexp.Data(),selection.Data(),options.Data());; spider->Draw();; c1->ToggleEditor();; c1->Selected(c1,spider,1);; }; f#define f(i)Definition RSha256.hxx:104; TCanvas.h; TFile.h; TNtuple.h; TSpider.h; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TSpiderSpider class.Definition TSpider.h:40; TSpider::Drawvoid Draw(Option_t *options="""") overrideDraw the spider.Definition TSpider.cxx:454; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; c1return c1Definition legend1.C:41; AuthorBastien Dallapiazza ; Definition in file spider.C. tutorialstreespider.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/spider_8C.html:630,log,log,630,doc/master/spider_8C.html,https://root.cern,https://root.cern/doc/master/spider_8C.html,2,['log'],['log']
Testability,". ROOT: tutorials/tree/tcl.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tcl.C File ReferenceTutorials » Tree tutorials. Detailed Description; How to write a TClonesArray to a TTree ; The following tests can be run Interactive tests Root > .x tcl.C //no-split interpreted; Root > .x tcl.C(1) //split interpreted; Root > .x tcl.C++ //no-split compiled; Root > .x tcl.C++(1) //split compiled; Batch tests: same as above but with no graphics root -b -q tcl.C; root -b -q tcl.C++; root -b -q ""tcl.C(1)""; root -b -q ""tcl.C++(1)""; ; #include ""TFile.h""; #include ""TClonesArray.h""; #include ""TH2.h""; #include ""TLine.h""; #include ""TTree.h""; #include ""TBenchmark.h""; #include ""TRandom.h""; ; void tclwrite(Int_t split); {; // Generate a Tree with a TClonesArray; // The array can be split or not; TFile f(""tcl.root"",""recreate"");; f.SetCompressionLevel(1); //try level 2 also; TTree T(""T"",""test tcl"");; TClonesArray *arr = new TClonesArray(""TLine"");; TClonesArray &ar = *arr;; T.Branch(""tcl"",&arr,256000,split);; //By default a TClonesArray is created with its BypassStreamer bit set.; //However, because TLine has a custom Streamer, this bit was reset; //by TTree::Branch above. We set again this bit because the current; //version of TLine uses the automatic Streamer.; //BypassingStreamer saves space and time.; arr->BypassStreamer();; for (Int_t ev=0;ev<10000;ev++) {; ar.Clear();; Int_t nlines = Int_t(gRandom->Gaus(50,10));; if(nlines < 0) nlines = 1;; for (Int_t i=0;i<nlines;i++) {; Float_t x1 = gRandom->Rndm();; Float_t y1 = gRandom->Rndm();; Float_t x2 = gRandom->Rndm();; Float_t y2 = gRandom->Rndm();; new(ar[i]) TLine(x1,y1,x2,y2);; }; T.Fill();; }; T.Print();; T.Write();; }; ; void tclread(); {; // read file generated by tclwrite; // loop on all entries.; // histogram center of lines; TFile *f = new TFile(""tcl.root"");; TTree *T = (TTree*)f->Get(""T"");; TH2F *h2 = new TH2F(""h2"",""center of lines"",40,0,1,40,0,1);; ; TClonesArray *arr = new TCl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tcl_8C.html:251,test,tests,251,doc/master/tcl_8C.html,https://root.cern,https://root.cern/doc/master/tcl_8C.html,4,['test'],"['test', 'tests']"
Testability,". ROOT: tutorials/tree/tree4.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tree4.C File ReferenceTutorials » Tree tutorials. Detailed Description; This example writes a tree with objects of the class Event. ; It is a simplified version of $ROOTSYS/test/MainEvent.cxx to write the tree, and $ROOTSYS/test/eventb.C It shows:; how to fill a Tree with an event class containing these data members: char fType[20];; Int_t fNtrack;; Int_t fNseg;; Int_t fNvertex;; UInt_t fFlag;; Float_t fTemperature;; EventHeader fEvtHdr;; TClonesArray *fTracks; //->; TH1F *fH; //->; Int_t fMeasures[10];; Float_t fMatrix[4][4];; Float_t *fClosestDistance; //[fNvertex]; Int_tint Int_tDefinition RtypesCore.h:45; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; Float_tfloat Float_tDefinition RtypesCore.h:57; TClonesArrayAn array of clone (identical) objects.Definition TClonesArray.h:29; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622. the difference in splitting or not splitting a branch; how to read selected branches of the tree, and print the first entry with less than 587 tracks.; how to browse and analyze the Tree via the TBrowser and TTreeViewer. This example can be run in many different ways:; way1 using the Cling interpreter: .x tree4.C. way2 using the Cling interpreter: .L tree4.C; tree4(). way3 using ACLIC: .L ../test/libEvent.so; .x tree4.C++; One can also run the write and read parts in two separate sessions. For example following one of the sessions above, one can start the session: .L tree4.C; tree4r();; ; R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so); ; #include ""TFile.h""; #include ""TTree.h""; #include ""TBrowser.h""; #include ""TH2.h""; #include ""TRandom.h""; #include ""TClassTable.h""; #include ""TSystem.h""; #include ""TROOT.h""; #include ""../test/Event.h""; ; void tree4w(); {; ; //create a Tree file tree4.root; TFile f(""tree4.root"",""RECREATE"");; ; // Create a ROOT Tree; TTree t4(""t4"",""A Tree with Even",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tree4_8C.html:301,test,test,301,doc/master/tree4_8C.html,https://root.cern,https://root.cern/doc/master/tree4_8C.html,2,['test'],['test']
Testability,". ROOT: tutorials/tree/treefriend.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. treefriend.C File ReferenceTutorials » Tree tutorials. Detailed Description; Illustrates how to use Tree friends: . create a simple TTree; Copy a subset of this TTree to a new TTree; Create a Tree Index; Make a friend TTree; compare two TTrees; Draw a variable from the first tree versus a variable in the friend Tree. You can run this tutorial with: root > .x treefriend.C (interpreted via Cling); root > .x treefriend.C+ (executed via ACLIC & the native compiler); or, variants like: root > .L treefriend.C+; root > CreateParentTree();; root > CreateFriendTree();; root > CompareTrees();; root > DrawFriend();; ; ******************************************************************************; *Tree :T : test friend trees *; *Entries : 10000 : Total = 203762 bytes File Size = 94821 *; * : : Tree compression factor = 1.69 *; ******************************************************************************; *Br 0 :Run : Run/I *; *Entries : 10000 : Total Size= 40698 bytes File Size = 265 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 120.75 *; *............................................................................*; *Br 1 :Event : Event/I *; *Entries : 10000 : Total Size= 40712 bytes File Size = 11231 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 2.85 *; *............................................................................*; *Br 2 :x : x/F *; *Entries : 10000 : Total Size= 40684 bytes File Size = 27116 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.18 *; *............................................................................*; *Br 3 :y : y/F *; *Entries : 10000 : Total Size= 40684 bytes File Size = 27035 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.18 *; *............................................................................*; *Br 4 :z : z/F *; *Entries : 10000 : Total Size= 40684 b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/treefriend_8C.html:839,test,test,839,doc/master/treefriend_8C.html,https://root.cern,https://root.cern/doc/master/treefriend_8C.html,1,['test'],['test']
Testability,". ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. class ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>: public ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. class evaluating the log likelihood; for binned Poisson likelihood fits; it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. This class is also known as (typedefs to this class)ROOT::Fit::PoissonLLFunction, ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IMultiGenFunction>. Function Members (Methods); public:. virtual~PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(); virtual ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::BinData&Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; virtual voidGradient(const double* x, double* g) const; virtual const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::IModelFunction&ModelFunction() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::BinData& data, const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::IModelFunction& func); vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:520,log,log,520,root/html528/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html528/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,1,['log'],['log']
Testability,". ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. class ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>: public ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. class evaluating the log likelihood; for binned Poisson likelihood fits; it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. This class is also known as (typedefs to this class)ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IMultiGenFunction>, ROOT::Fit::PoissonLLFunction. Function Members (Methods); public:. virtual~PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(); virtual ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::BinData&Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; virtual voidGradient(const double* x, double* g) const; virtual const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::IModelFunction&ModelFunction() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::BinData& data, const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::IModelFunction& func); vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:520,log,log,520,root/html526/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html526/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,1,['log'],['log']
Testability,". ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. class ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>: public ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>. class evaluating the log likelihood; for binned Poisson likelihood fits; it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. Function Members (Methods); public:. virtual~PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(); ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>(const ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::BinData&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>::Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; shared_ptr<ROOT::Fit::BinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>::DataPtr() const; virtual voidGradi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:526,log,log,526,root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,1,['log'],['log']
Testability,". ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. class ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>: public ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. class evaluating the log likelihood; for binned Poisson likelihood fits; it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. Function Members (Methods); public:. virtual~PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::BinData&Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); boolIsWeighted() const; virtual const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction&ModelFunction() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:522,log,log,522,root/html602/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html602/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,1,['log'],['log']
Testability,". ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. class ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>: public ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. class evaluating the log likelihood; for binned Poisson likelihood fits; it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. This class is also known as (typedefs to this class)ROOT::Fit::PoissonLLFunction, ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IMultiGenFunction>. Function Members (Methods); public:. virtual~PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(); virtual ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::BinData&Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; virtual voidGradient(const double* x, double* g) const; boolIsWeighted() const; virtual const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::IModelFunction&ModelFunction() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::BinData& data, const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:522,log,log,522,root/html530/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html530/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,1,['log'],['log']
Testability,". ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. class ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>: public ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. class evaluating the log likelihood; for binned Poisson likelihood fits; it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. This class is also known as (typedefs to this class)ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IMultiGenFunction>, ROOT::Fit::PoissonLLFunction. Function Members (Methods); public:. virtual~PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(); virtual ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::BinData&Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; virtual voidGradient(const double* x, double* g) const; boolIsWeighted() const; virtual const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::IModelFunction&ModelFunction() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::BinData& data, const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:522,log,log,522,root/html532/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html532/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,2,['log'],['log']
Testability,". ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. class ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>: public ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>. class evaluating the log likelihood; for binned Poisson likelihood fits; it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. This class is also known as (typedefs to this class)ROOT::Fit::PoissonLLGradFunction, ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IMultiGradFunction>. Function Members (Methods); public:. virtual~PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(); virtual ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::BinData&Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidROOT::Math::IGradientFunctionMultiDim::FdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* g) const; virtual const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction&ModelFunction() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Fit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:536,log,log,536,root/html526/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html526/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,1,['log'],['log']
Testability,". ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. class ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>: public ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>. class evaluating the log likelihood; for binned Poisson likelihood fits; it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. This class is also known as (typedefs to this class)ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IMultiGradFunction>, ROOT::Fit::PoissonLLGradFunction. Function Members (Methods); public:. virtual~PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(); virtual ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::BinData&Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidROOT::Math::IGradientFunctionMultiDim::FdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* g) const; virtual const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction&ModelFunction() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Fit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:536,log,log,536,root/html528/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html528/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,1,['log'],['log']
Testability,". ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. class ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>: public ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>. class evaluating the log likelihood; for binned Poisson likelihood fits; it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. Function Members (Methods); public:. virtual~PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(); ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>(const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::BinData&ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>::Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; shared_ptr<ROOT::Fit::BinData>ROOT::Fit::BasicFCN<ROOT::Math::IGrad",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:542,log,log,542,root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,1,['log'],['log']
Testability,". ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. class ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>: public ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>. class evaluating the log likelihood; for binned Poisson likelihood fits; it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. Function Members (Methods); public:. virtual~PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::BinData&Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidROOT::Math::IGradientFunctionMultiDim::FdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:538,log,log,538,root/html602/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html602/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,1,['log'],['log']
Testability,". ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. class ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>: public ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>. class evaluating the log likelihood; for binned Poisson likelihood fits; it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. This class is also known as (typedefs to this class)ROOT::Fit::PoissonLLGradFunction, ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IMultiGradFunction>. Function Members (Methods); public:. virtual~PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(); virtual ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::BinData&Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidROOT::Math::IGradientFunctionMultiDim::FdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* g) const; boolIsWeighted() const; virtual const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction&ModelFunction() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:538,log,log,538,root/html530/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html530/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,3,['log'],['log']
Testability,". ROOT::Math::TDataPointN<double>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPointN<double>. class ROOT::Math::TDataPointN<double>. Function Members (Methods); public:. virtual~TDataPointN<double>(); static UInt_tDimension(); doubleGetCoordinate(unsigned int iAxis) const; doubleGetWeight() const; boolLess(ROOT::Math::TDataPointN<double>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPointN<double>&operator=(const ROOT::Math::TDataPointN<double>&); voidSetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<double>::value_type fValue); static voidSetDimension(UInt_t dim); voidSetWeight(float fWeight); ROOT::Math::TDataPointN<double>TDataPointN<double>(); ROOT::Math::TDataPointN<double>TDataPointN<double>(const ROOT::Math::TDataPointN<double>&). Data Members; private:. static UInt_tkDimension; ROOT::Math::TDataPointN<double>::value_typem_fWeight; ROOT::Math::TDataPointN<double>::value_type*m_vCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. void SetDimension(UInt_t dim); {assert(dim>0);kDimension=dim;}. _val_type GetCoordinate(unsigned int iAxis) const. _val_type GetWeight() const; {return m_fWeight;}. bool Less(ROOT::Math::TDataPointN<double>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<double>::value_type fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__TDataPointN_double_.html:1276,assert,assert,1276,root/html602/ROOT__Math__TDataPointN_double_.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__TDataPointN_double_.html,1,['assert'],['assert']
Testability,". ROOT::Math::TDataPointN<double>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPointN<double>. class ROOT::Math::TDataPointN<double>. Function Members (Methods); public:. virtual~TDataPointN<double>(); static UInt_tDimension(); doubleGetCoordinate(unsigned int iAxis) const; doubleGetWeight() const; boolLess(ROOT::Math::TDataPointN<double>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPointN<double>&operator=(const ROOT::Math::TDataPointN<double>&); voidSetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<double>::value_type fValue); static voidSetDimension(UInt_t dim); voidSetWeight(float fWeight); ROOT::Math::TDataPointN<double>TDataPointN<double>(); ROOT::Math::TDataPointN<double>TDataPointN<double>(const ROOT::Math::TDataPointN<double>&). Data Members; private:. static UInt_tkDimension; ROOT::Math::TDataPointN<double>::value_typem_fWeight; ROOT::Math::TDataPointN<double>::value_type*m_vCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. void SetDimension(UInt_t dim); {assert(dim>0);kDimension=dim;}. _val_type GetCoordinate(unsigned int iAxis) const. _val_type GetWeight() const; {return m_fWeight;}. bool Less(ROOT::Math::TDataPointN<double>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<double>::value_type fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__TDataPointN_double_.html:1276,assert,assert,1276,root/html604/ROOT__Math__TDataPointN_double_.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__TDataPointN_double_.html,1,['assert'],['assert']
Testability,". ROOT::Math::TDataPointN<double>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPointN<double>. class ROOT::Math::TDataPointN<double>. This class is also known as (typedefs to this class)ROOT::Math::TDataPointN, ROOT::Math::TDataPointN<Double_t>. Function Members (Methods); public:. virtual~TDataPointN<double>(); static UInt_tDimension(); doubleGetCoordinate(unsigned int iAxis) const; doubleGetWeight() const; boolLess(ROOT::Math::TDataPointN<double>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPointN<double>&operator=(const ROOT::Math::TDataPointN<double>&); voidSetCoordinate(unsigned int iAxis, double fValue); static voidSetDimension(UInt_t dim); voidSetWeight(float fWeight); ROOT::Math::TDataPointN<double>TDataPointN<double>(); ROOT::Math::TDataPointN<double>TDataPointN<double>(const ROOT::Math::TDataPointN<double>&). Data Members; private:. static UInt_tkDimension; ROOT::Math::TDataPointN<double>::value_typem_fWeight; ROOT::Math::TDataPointN<double>::value_type*m_vCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. void SetDimension(UInt_t dim); {assert(dim>0);kDimension=dim;}. _val_type GetCoordinate(unsigned int iAxis) const. _val_type GetWeight() const; {return m_fWeight;}. bool Less(ROOT::Math::TDataPointN<double>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, double fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__TDataPointN_double_.html:1351,assert,assert,1351,root/html534/ROOT__Math__TDataPointN_double_.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__TDataPointN_double_.html,1,['assert'],['assert']
Testability,". ROOT::Math::TDataPointN<double>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPointN<double>. class ROOT::Math::TDataPointN<double>. This class is also known as (typedefs to this class)ROOT::Math::TDataPointN<Double_t>, ROOT::Math::TDataPointN. Function Members (Methods); public:. virtual~TDataPointN<double>(); static UInt_tDimension(); doubleGetCoordinate(unsigned int iAxis) const; doubleGetWeight() const; boolLess(ROOT::Math::TDataPointN<double>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPointN<double>&operator=(const ROOT::Math::TDataPointN<double>&); voidSetCoordinate(unsigned int iAxis, double fValue); static voidSetDimension(UInt_t dim); voidSetWeight(float fWeight); ROOT::Math::TDataPointN<double>TDataPointN<double>(); ROOT::Math::TDataPointN<double>TDataPointN<double>(const ROOT::Math::TDataPointN<double>&). Data Members; private:. static UInt_tkDimension; ROOT::Math::TDataPointN<double>::value_typem_fWeight; ROOT::Math::TDataPointN<double>::value_type*m_vCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. void SetDimension(UInt_t dim); {assert(dim>0);kDimension=dim;}. _val_type GetCoordinate(unsigned int iAxis) const. _val_type GetWeight() const; {return m_fWeight;}. bool Less(ROOT::Math::TDataPointN<double>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, double fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id: TDataPointN.h 41518 2011-10-20 16:19:03Z moneta $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__TDataPointN_double_.html:1351,assert,assert,1351,root/html532/ROOT__Math__TDataPointN_double_.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__TDataPointN_double_.html,1,['assert'],['assert']
Testability,". ROOT::Math::TDataPointN<float>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPointN<float>. class ROOT::Math::TDataPointN<float>. Function Members (Methods); public:. virtual~TDataPointN<float>(); static UInt_tDimension(); floatGetCoordinate(unsigned int iAxis) const; floatGetWeight() const; boolLess(ROOT::Math::TDataPointN<float>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPointN<float>&operator=(const ROOT::Math::TDataPointN<float>&); voidSetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<float>::value_type fValue); static voidSetDimension(UInt_t dim); voidSetWeight(float fWeight); ROOT::Math::TDataPointN<float>TDataPointN<float>(); ROOT::Math::TDataPointN<float>TDataPointN<float>(const ROOT::Math::TDataPointN<float>&). Data Members; private:. static UInt_tkDimension; ROOT::Math::TDataPointN<float>::value_typem_fWeight; ROOT::Math::TDataPointN<float>::value_type*m_vCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. void SetDimension(UInt_t dim); {assert(dim>0);kDimension=dim;}. _val_type GetCoordinate(unsigned int iAxis) const. _val_type GetWeight() const; {return m_fWeight;}. bool Less(ROOT::Math::TDataPointN<float>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<float>::value_type fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__TDataPointN_float_.html:1259,assert,assert,1259,root/html602/ROOT__Math__TDataPointN_float_.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__TDataPointN_float_.html,1,['assert'],['assert']
Testability,". ROOT::Math::TDataPointN<float>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPointN<float>. class ROOT::Math::TDataPointN<float>. Function Members (Methods); public:. virtual~TDataPointN<float>(); static UInt_tDimension(); floatGetCoordinate(unsigned int iAxis) const; floatGetWeight() const; boolLess(ROOT::Math::TDataPointN<float>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPointN<float>&operator=(const ROOT::Math::TDataPointN<float>&); voidSetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<float>::value_type fValue); static voidSetDimension(UInt_t dim); voidSetWeight(float fWeight); ROOT::Math::TDataPointN<float>TDataPointN<float>(); ROOT::Math::TDataPointN<float>TDataPointN<float>(const ROOT::Math::TDataPointN<float>&). Data Members; private:. static UInt_tkDimension; ROOT::Math::TDataPointN<float>::value_typem_fWeight; ROOT::Math::TDataPointN<float>::value_type*m_vCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. void SetDimension(UInt_t dim); {assert(dim>0);kDimension=dim;}. _val_type GetCoordinate(unsigned int iAxis) const. _val_type GetWeight() const; {return m_fWeight;}. bool Less(ROOT::Math::TDataPointN<float>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<float>::value_type fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__TDataPointN_float_.html:1259,assert,assert,1259,root/html604/ROOT__Math__TDataPointN_float_.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__TDataPointN_float_.html,1,['assert'],['assert']
Testability,". ROOT::Math::TDataPointN<float>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPointN<float>. class ROOT::Math::TDataPointN<float>. This class is also known as (typedefs to this class)ROOT::Math::TDataPointN<Float_t>. Function Members (Methods); public:. virtual~TDataPointN<float>(); static UInt_tDimension(); floatGetCoordinate(unsigned int iAxis) const; floatGetWeight() const; boolLess(ROOT::Math::TDataPointN<float>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPointN<float>&operator=(const ROOT::Math::TDataPointN<float>&); voidSetCoordinate(unsigned int iAxis, float fValue); static voidSetDimension(UInt_t dim); voidSetWeight(float fWeight); ROOT::Math::TDataPointN<float>TDataPointN<float>(); ROOT::Math::TDataPointN<float>TDataPointN<float>(const ROOT::Math::TDataPointN<float>&). Data Members; private:. static UInt_tkDimension; ROOT::Math::TDataPointN<float>::value_typem_fWeight; ROOT::Math::TDataPointN<float>::value_type*m_vCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. void SetDimension(UInt_t dim); {assert(dim>0);kDimension=dim;}. _val_type GetCoordinate(unsigned int iAxis) const. _val_type GetWeight() const; {return m_fWeight;}. bool Less(ROOT::Math::TDataPointN<float>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, float fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__TDataPointN_float_.html:1308,assert,assert,1308,root/html534/ROOT__Math__TDataPointN_float_.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__TDataPointN_float_.html,1,['assert'],['assert']
Testability,". ROOT::Math::TDataPointN<float>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPointN<float>. class ROOT::Math::TDataPointN<float>. This class is also known as (typedefs to this class)ROOT::Math::TDataPointN<Float_t>. Function Members (Methods); public:. virtual~TDataPointN<float>(); static UInt_tDimension(); floatGetCoordinate(unsigned int iAxis) const; floatGetWeight() const; boolLess(ROOT::Math::TDataPointN<float>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPointN<float>&operator=(const ROOT::Math::TDataPointN<float>&); voidSetCoordinate(unsigned int iAxis, float fValue); static voidSetDimension(UInt_t dim); voidSetWeight(float fWeight); ROOT::Math::TDataPointN<float>TDataPointN<float>(); ROOT::Math::TDataPointN<float>TDataPointN<float>(const ROOT::Math::TDataPointN<float>&). Data Members; private:. static UInt_tkDimension; ROOT::Math::TDataPointN<float>::value_typem_fWeight; ROOT::Math::TDataPointN<float>::value_type*m_vCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. void SetDimension(UInt_t dim); {assert(dim>0);kDimension=dim;}. _val_type GetCoordinate(unsigned int iAxis) const. _val_type GetWeight() const; {return m_fWeight;}. bool Less(ROOT::Math::TDataPointN<float>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, float fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id: TDataPointN.h 41518 2011-10-20 16:19:03Z moneta $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__TDataPointN_float_.html:1308,assert,assert,1308,root/html532/ROOT__Math__TDataPointN_float_.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__TDataPointN_float_.html,1,['assert'],['assert']
Testability,". Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TRint Class Reference. . Definition at line 31 of file TRint.h. Public Member Functions;  TRint (const char *appClassName, Int_t *argc, char **argv, void *options=nullptr, Int_t numOptions=0, Bool_t noLogo=kFALSE, Bool_t exitOnUnknownArgs=kFALSE);  Create an application environment. ;  ; virtual ~TRint ();  Destructor. ;  ; TFileHandler * GetInputHandler ();  ; virtual char * GetPrompt ();  Get prompt from interpreter. Either ""root [n]"" or ""end with '}'"". ;  ; void HandleException (Int_t sig) override;  Handle signals (kSigBus, kSigSegmentationViolation, kSigIllegalInstruction and kSigFloatingException) trapped in TSystem. ;  ; Bool_t HandleTermInput () override;  Handle input coming from terminal. ;  ; void Interrupt ();  ; TClass * IsA () const override;  ; virtual void PrintLogo (Bool_t lite=kFALSE);  Print the ROOT logo on standard output. ;  ; void Run (Bool_t retrn=kFALSE) override;  Main application eventloop. ;  ; void SetEchoMode (Bool_t mode) override;  Set console mode: ;  ; virtual const char * SetPrompt (const char *newPrompt);  Set a new default prompt. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t TabCompletionHook (char *buf, int *pLoc, std::ostream &out) override;  Forward tab completion request to our TTabCom::Hook(). ;  ; virtual void Terminate (int status) override;  Terminate the application. ;  ;  Public Member Functions inherited from TApplication;  TApplication (const char *appClassName, Int_t *argc, char **argv, void *options=nullptr, Int_t numOptions=0);  Create an application environment. ;  ; virtual ~TApplication ();  TApplication dtor. ;  ; virtual const char * ApplicationName () const;  ; Int_t Argc () const;  ; cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRint.html:1099,log,logo,1099,doc/master/classTRint.html,https://root.cern,https://root.cern/doc/master/classTRint.html,1,['log'],['logo']
Testability,". Reference Guide | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Reference Guide. The Reference Guide is available for all major ROOT releases, and for the current HEAD of the git master:. HEAD of the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/guides/reference-guide.html:713,test,tests,713,d/guides/reference-guide.html,https://root.cern,https://root.cern/d/guides/reference-guide.html,1,['test'],['tests']
Testability,". Reflex::ClassBuilder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::ClassBuilder. class Reflex::ClassBuilder. Function Members (Methods); public:. virtual~ClassBuilder(); Reflex::ClassBuilder&AddBase(const Reflex::Type& bas, Reflex::OffsetFunction offsFP, unsigned int modifiers = 0); Reflex::ClassBuilder&AddDataMember(const Reflex::Type& typ, const char* nam, size_t offs, unsigned int modifiers = 0); Reflex::ClassBuilder&AddEnum(const char* nam, const char* values, const type_info* ti = 0, unsigned int modifiers = 0); Reflex::ClassBuilder&AddFunctionMember(const Reflex::Type& typ, const char* nam, Reflex::StubFunction stubFP, void* stubCtx = 0, const char* params = 0, unsigned int modifiers = 0); Reflex::ClassBuilder&AddOnDemandDataMemberBuilder(Reflex::OnDemandBuilderForScope* odb); Reflex::ClassBuilder&AddOnDemandFunctionMemberBuilder(Reflex::OnDemandBuilderForScope* odb); Reflex::ClassBuilder&AddTypedef(const Reflex::Type& typ, const char* def); Reflex::ClassBuilder&AddTypedef(const char* typ, const char* def); Reflex::ClassBuilderClassBuilder(Reflex::Class* cl); Reflex::ClassBuilderClassBuilder(const Reflex::ClassBuilder&); Reflex::ClassBuilderClassBuilder(const char* nam, const type_info& ti, size_t size, unsigned int modifiers = 0, Reflex::TYPE typ = CLASS); Reflex::ClassBuilder&operator=(const Reflex::ClassBuilder&); Reflex::ClassBuilder&SetSizeOf(size_t size); Reflex::TypeToType(). protected:. Reflex::ClassBuilder&EnableCallback(bool enable = true). Data Members; private:. Reflex::ClassBuilderImplfClassBuilderImpl. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; AddBase(unsigned int modifiers). AddDataMember(const char* nam, size_t offs, unsigned int modifiers). AddFunctionMember(const char* nam, StubFunction stubFP, void* stubCtx, const char* param",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/Reflex__ClassBuilder.html:797,stub,stubFP,797,root/html526/Reflex__ClassBuilder.html,https://root.cern,https://root.cern/root/html526/Reflex__ClassBuilder.html,4,['stub'],"['stubCtx', 'stubFP']"
Testability,". Reflex::ClassBuilder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::ClassBuilder. class Reflex::ClassBuilder. Function Members (Methods); public:. virtual~ClassBuilder(); Reflex::ClassBuilder&AddBase(const Reflex::Type& bas, Reflex::OffsetFunction offsFP, unsigned int modifiers = 0); Reflex::ClassBuilder&AddDataMember(const Reflex::Type& typ, const char* nam, size_t offs, unsigned int modifiers = 0); Reflex::ClassBuilder&AddEnum(const char* nam, const char* values, const type_info* ti = 0, unsigned int modifiers = 0); Reflex::ClassBuilder&AddFunctionMember(const Reflex::Type& typ, const char* nam, Reflex::StubFunction stubFP, void* stubCtx = 0, const char* params = 0, unsigned int modifiers = 0); Reflex::ClassBuilder&AddOnDemandDataMemberBuilder(Reflex::OnDemandBuilderForScope* odb); Reflex::ClassBuilder&AddOnDemandFunctionMemberBuilder(Reflex::OnDemandBuilderForScope* odb); Reflex::ClassBuilder&AddTypedef(const Reflex::Type& typ, const char* def); Reflex::ClassBuilder&AddTypedef(const char* typ, const char* def); Reflex::ClassBuilderClassBuilder(Reflex::Class* cl); Reflex::ClassBuilderClassBuilder(const Reflex::ClassBuilder&); Reflex::ClassBuilderClassBuilder(const char* nam, const type_info& ti, size_t size, unsigned int modifiers = 0, Reflex::TYPE typ = CLASS); Reflex::ClassBuilder&operator=(const Reflex::ClassBuilder&); Reflex::ClassBuilder&SetSizeOf(size_t size); Reflex::TypeToType(). protected:. Reflex::ClassBuilder&EnableCallback(bool enable = true). Data Members; private:. Reflex::ClassBuilderImplfClassBuilderImpl. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; AddBase(unsigned int modifiers). AddDataMember(const char* nam, size_t offs, unsigned int modifiers). AddFunctionMember(const char* nam, StubFunction stubFP, void* stubCtx, const char* par",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/Reflex__ClassBuilder.html:799,stub,stubFP,799,root/html530/Reflex__ClassBuilder.html,https://root.cern,https://root.cern/root/html530/Reflex__ClassBuilder.html,6,['stub'],"['stubCtx', 'stubFP']"
Testability,". Reflex::ClassBuilderImpl. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::ClassBuilderImpl. class Reflex::ClassBuilderImpl. Register an on demand builder with this class. Function Members (Methods); public:. virtual~ClassBuilderImpl(); voidAddBase(const Reflex::Type& bas, Reflex::OffsetFunction offsFP, unsigned int modifiers = 0); voidAddDataMember(const char* nam, const Reflex::Type& typ, size_t offs, unsigned int modifiers = 0); voidAddEnum(const char* nam, const char* values, const type_info* ti, unsigned int modifiers = 0); voidAddFunctionMember(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx = 0, const char* params = 0, unsigned int modifiers = 0); voidAddOnDemandDataMemberBuilder(Reflex::OnDemandBuilderForScope* odb); voidAddOnDemandFunctionMemberBuilder(Reflex::OnDemandBuilderForScope* odb); voidAddProperty(const char* key, Reflex::Any value); voidAddProperty(const char* key, const char* value); voidAddTypedef(const Reflex::Type& typ, const char* def); Reflex::ClassBuilderImplClassBuilderImpl(Reflex::Class* cl); Reflex::ClassBuilderImplClassBuilderImpl(const Reflex::ClassBuilderImpl&); Reflex::ClassBuilderImplClassBuilderImpl(const char* nam, const type_info& ti, size_t size, unsigned int modifiers = 0, Reflex::TYPE typ = CLASS); Reflex::ClassBuilderImpl&operator=(const Reflex::ClassBuilderImpl&); voidSetSizeOf(size_t size); Reflex::TypeToType(). protected:. voidEnableCallback(bool enable = true). Data Members; private:. boolfCallbackEnabled; Reflex::Class*fClass; Reflex::MemberfLastMember; boolfNewClass. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ClassBuilderImpl(const char* nam, const type_info& ti, size_t size, unsigned int modifiers = 0, Reflex::TYPE typ = CLASS); constructor . ClassBuilderImpl(Class* cl). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/Reflex__ClassBuilderImpl.html:788,stub,stubFP,788,root/html526/Reflex__ClassBuilderImpl.html,https://root.cern,https://root.cern/root/html526/Reflex__ClassBuilderImpl.html,2,['stub'],"['stubCtx', 'stubFP']"
Testability,". Reflex::FunctionBuilder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::FunctionBuilder. class Reflex::FunctionBuilder. Function Members (Methods); public:. virtual~FunctionBuilder(); Reflex::FunctionBuilder&AddProperty(const char* key, Reflex::Any value); Reflex::FunctionBuilder&AddProperty(const char* key, const char* value); Reflex::FunctionBuilderFunctionBuilder(const Reflex::FunctionBuilder&); Reflex::FunctionBuilderFunctionBuilder(const Reflex::Type& typ, const char* nam, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers); Reflex::FunctionBuilder&operator=(const Reflex::FunctionBuilder&); Reflex::MemberToMember(). Data Members; private:. Reflex::MemberfFunction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FunctionBuilder(const Reflex::Type& typ, const char* nam, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers); constructor . FunctionBuilder& AddProperty(const char* key, Any value); destructor ; AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. Member ToMember(). * ToMember will return the member currently being built; * @return member currently being built. void AddProperty(const char* key, Any value); AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. » Last changed: root/reflex:$Id: FunctionBuilder.h 29288 2009-07-01 13:03:35Z axel $ » Last generated: 2009-12-07 13:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/Reflex__FunctionBuilder.html:674,stub,stubFP,674,root/html526/Reflex__FunctionBuilder.html,https://root.cern,https://root.cern/root/html526/Reflex__FunctionBuilder.html,4,['stub'],"['stubCtx', 'stubFP']"
Testability,". Reflex::FunctionBuilder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::FunctionBuilder. class Reflex::FunctionBuilder. Function Members (Methods); public:. virtual~FunctionBuilder(); Reflex::FunctionBuilder&AddProperty(const char* key, Reflex::Any value); Reflex::FunctionBuilder&AddProperty(const char* key, const char* value); Reflex::FunctionBuilderFunctionBuilder(const Reflex::FunctionBuilder&); Reflex::FunctionBuilderFunctionBuilder(const Reflex::Type& typ, const char* nam, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers); Reflex::FunctionBuilder&operator=(const Reflex::FunctionBuilder&); Reflex::MemberToMember(). Data Members; private:. Reflex::MemberfFunction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FunctionBuilder(const Reflex::Type& typ, const char* nam, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers); constructor . FunctionBuilder& AddProperty(const char* key, Any value); destructor ; AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. Member ToMember(). * ToMember will return the member currently being built; * @return member currently being built. void AddProperty(const char* key, Any value); AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. » Last changed: root/reflex:$Id: FunctionBuilder.h 29288 2009-07-01 13:03:35Z axel $ » Last generated: 2010-09-23 19:57; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/Reflex__FunctionBuilder.html:674,stub,stubFP,674,root/html528/Reflex__FunctionBuilder.html,https://root.cern,https://root.cern/root/html528/Reflex__FunctionBuilder.html,4,['stub'],"['stubCtx', 'stubFP']"
Testability,". Reflex::FunctionBuilder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::FunctionBuilder. class Reflex::FunctionBuilder. Function Members (Methods); public:. virtual~FunctionBuilder(); Reflex::FunctionBuilder&AddProperty(const char* key, Reflex::Any value); Reflex::FunctionBuilder&AddProperty(const char* key, const char* value); Reflex::FunctionBuilderFunctionBuilder(const Reflex::FunctionBuilder&); Reflex::FunctionBuilderFunctionBuilder(const Reflex::Type& typ, const char* nam, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers); Reflex::FunctionBuilder&operator=(const Reflex::FunctionBuilder&); Reflex::MemberToMember(). Data Members; private:. Reflex::MemberfFunction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FunctionBuilder(const Reflex::Type& typ, const char* nam, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers); constructor . FunctionBuilder& AddProperty(const char* key, Any value); destructor ; AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. Member ToMember(). * ToMember will return the member currently being built; * @return member currently being built. void AddProperty(const char* key, Any value); AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__FunctionBuilder.html:676,stub,stubFP,676,root/html534/Reflex__FunctionBuilder.html,https://root.cern,https://root.cern/root/html534/Reflex__FunctionBuilder.html,4,['stub'],"['stubCtx', 'stubFP']"
Testability,". Reflex::FunctionBuilder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::FunctionBuilder. class Reflex::FunctionBuilder. Function Members (Methods); public:. virtual~FunctionBuilder(); Reflex::FunctionBuilder&AddProperty(const char* key, Reflex::Any value); Reflex::FunctionBuilder&AddProperty(const char* key, const char* value); Reflex::FunctionBuilderFunctionBuilder(const Reflex::FunctionBuilder&); Reflex::FunctionBuilderFunctionBuilder(const Reflex::Type& typ, const char* nam, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers); Reflex::FunctionBuilder&operator=(const Reflex::FunctionBuilder&); Reflex::MemberToMember(). Data Members; private:. Reflex::MemberfFunction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FunctionBuilder(const Reflex::Type& typ, const char* nam, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers); constructor . FunctionBuilder& AddProperty(const char* key, Any value); destructor ; AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. Member ToMember(). * ToMember will return the member currently being built; * @return member currently being built. void AddProperty(const char* key, Any value); AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. » Last changed: root/reflex:$Id: FunctionBuilder.h 29288 2009-07-01 13:03:35Z axel $ » Last generated: 2011-07-04 15:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/Reflex__FunctionBuilder.html:676,stub,stubFP,676,root/html530/Reflex__FunctionBuilder.html,https://root.cern,https://root.cern/root/html530/Reflex__FunctionBuilder.html,4,['stub'],"['stubCtx', 'stubFP']"
Testability,". Reflex::FunctionBuilder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::FunctionBuilder. class Reflex::FunctionBuilder. Function Members (Methods); public:. virtual~FunctionBuilder(); Reflex::FunctionBuilder&AddProperty(const char* key, Reflex::Any value); Reflex::FunctionBuilder&AddProperty(const char* key, const char* value); Reflex::FunctionBuilderFunctionBuilder(const Reflex::FunctionBuilder&); Reflex::FunctionBuilderFunctionBuilder(const Reflex::Type& typ, const char* nam, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers); Reflex::FunctionBuilder&operator=(const Reflex::FunctionBuilder&); Reflex::MemberToMember(). Data Members; private:. Reflex::MemberfFunction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FunctionBuilder(const Reflex::Type& typ, const char* nam, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers); constructor . FunctionBuilder& AddProperty(const char* key, Any value); destructor ; AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. Member ToMember(). * ToMember will return the member currently being built; * @return member currently being built. void AddProperty(const char* key, Any value); AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. » Last changed: root/reflex:$Id: FunctionBuilder.h 29288 2009-07-01 13:03:35Z axel $ » Last generated: 2011-11-03 20:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/Reflex__FunctionBuilder.html:676,stub,stubFP,676,root/html532/Reflex__FunctionBuilder.html,https://root.cern,https://root.cern/root/html532/Reflex__FunctionBuilder.html,4,['stub'],"['stubCtx', 'stubFP']"
Testability,". Reflex::FunctionBuilderImpl. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::FunctionBuilderImpl. class Reflex::FunctionBuilderImpl. Function Members (Methods); public:. ~FunctionBuilderImpl(); voidAddProperty(const char* key, Reflex::Any value); voidAddProperty(const char* key, const char* value); Reflex::FunctionBuilderImplFunctionBuilderImpl(const Reflex::FunctionBuilderImpl&); Reflex::FunctionBuilderImplFunctionBuilderImpl(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers = 0); Reflex::FunctionBuilderImpl&operator=(const Reflex::FunctionBuilderImpl&); Reflex::MemberToMember(). Data Members; private:. Reflex::MemberfFunction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FunctionBuilder& AddProperty(const char* key, Any value); AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. Member ToMember(). * ToMember will return the member currently being built; * @return member currently being built. FunctionBuilderImpl(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers = 0); constructor . void AddProperty(const char* key, Any value); destructor ; AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. » Last changed: root/reflex:$Id: FunctionBuilder.h 29288 2009-07-01 13:03:35Z axel $ » Last generated: 2009-12-07 13:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/Reflex__FunctionBuilderImpl.html:663,stub,stubFP,663,root/html526/Reflex__FunctionBuilderImpl.html,https://root.cern,https://root.cern/root/html526/Reflex__FunctionBuilderImpl.html,4,['stub'],"['stubCtx', 'stubFP']"
Testability,". Reflex::FunctionBuilderImpl. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::FunctionBuilderImpl. class Reflex::FunctionBuilderImpl. Function Members (Methods); public:. ~FunctionBuilderImpl(); voidAddProperty(const char* key, Reflex::Any value); voidAddProperty(const char* key, const char* value); Reflex::FunctionBuilderImplFunctionBuilderImpl(const Reflex::FunctionBuilderImpl&); Reflex::FunctionBuilderImplFunctionBuilderImpl(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers = 0); Reflex::FunctionBuilderImpl&operator=(const Reflex::FunctionBuilderImpl&); Reflex::MemberToMember(). Data Members; private:. Reflex::MemberfFunction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FunctionBuilder& AddProperty(const char* key, Any value); AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. Member ToMember(). * ToMember will return the member currently being built; * @return member currently being built. FunctionBuilderImpl(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers = 0); constructor . void AddProperty(const char* key, Any value); destructor ; AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. » Last changed: root/reflex:$Id: FunctionBuilder.h 29288 2009-07-01 13:03:35Z axel $ » Last generated: 2010-09-23 19:57; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/Reflex__FunctionBuilderImpl.html:663,stub,stubFP,663,root/html528/Reflex__FunctionBuilderImpl.html,https://root.cern,https://root.cern/root/html528/Reflex__FunctionBuilderImpl.html,4,['stub'],"['stubCtx', 'stubFP']"
Testability,". Reflex::FunctionBuilderImpl. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::FunctionBuilderImpl. class Reflex::FunctionBuilderImpl. Function Members (Methods); public:. ~FunctionBuilderImpl(); voidAddProperty(const char* key, Reflex::Any value); voidAddProperty(const char* key, const char* value); Reflex::FunctionBuilderImplFunctionBuilderImpl(const Reflex::FunctionBuilderImpl&); Reflex::FunctionBuilderImplFunctionBuilderImpl(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers = 0); Reflex::FunctionBuilderImpl&operator=(const Reflex::FunctionBuilderImpl&); Reflex::MemberToMember(). Data Members; private:. Reflex::MemberfFunction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FunctionBuilder& AddProperty(const char* key, Any value); AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. Member ToMember(). * ToMember will return the member currently being built; * @return member currently being built. FunctionBuilderImpl(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers = 0); constructor . void AddProperty(const char* key, Any value); destructor ; AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__FunctionBuilderImpl.html:665,stub,stubFP,665,root/html534/Reflex__FunctionBuilderImpl.html,https://root.cern,https://root.cern/root/html534/Reflex__FunctionBuilderImpl.html,4,['stub'],"['stubCtx', 'stubFP']"
Testability,". Reflex::FunctionBuilderImpl. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::FunctionBuilderImpl. class Reflex::FunctionBuilderImpl. Function Members (Methods); public:. ~FunctionBuilderImpl(); voidAddProperty(const char* key, Reflex::Any value); voidAddProperty(const char* key, const char* value); Reflex::FunctionBuilderImplFunctionBuilderImpl(const Reflex::FunctionBuilderImpl&); Reflex::FunctionBuilderImplFunctionBuilderImpl(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers = 0); Reflex::FunctionBuilderImpl&operator=(const Reflex::FunctionBuilderImpl&); Reflex::MemberToMember(). Data Members; private:. Reflex::MemberfFunction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FunctionBuilder& AddProperty(const char* key, Any value); AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. Member ToMember(). * ToMember will return the member currently being built; * @return member currently being built. FunctionBuilderImpl(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers = 0); constructor . void AddProperty(const char* key, Any value); destructor ; AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. » Last changed: root/reflex:$Id: FunctionBuilder.h 29288 2009-07-01 13:03:35Z axel $ » Last generated: 2011-07-04 15:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/Reflex__FunctionBuilderImpl.html:665,stub,stubFP,665,root/html530/Reflex__FunctionBuilderImpl.html,https://root.cern,https://root.cern/root/html530/Reflex__FunctionBuilderImpl.html,4,['stub'],"['stubCtx', 'stubFP']"
Testability,". Reflex::FunctionBuilderImpl. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::FunctionBuilderImpl. class Reflex::FunctionBuilderImpl. Function Members (Methods); public:. ~FunctionBuilderImpl(); voidAddProperty(const char* key, Reflex::Any value); voidAddProperty(const char* key, const char* value); Reflex::FunctionBuilderImplFunctionBuilderImpl(const Reflex::FunctionBuilderImpl&); Reflex::FunctionBuilderImplFunctionBuilderImpl(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers = 0); Reflex::FunctionBuilderImpl&operator=(const Reflex::FunctionBuilderImpl&); Reflex::MemberToMember(). Data Members; private:. Reflex::MemberfFunction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FunctionBuilder& AddProperty(const char* key, Any value); AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. Member ToMember(). * ToMember will return the member currently being built; * @return member currently being built. FunctionBuilderImpl(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers = 0); constructor . void AddProperty(const char* key, Any value); destructor ; AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. » Last changed: root/reflex:$Id: FunctionBuilder.h 29288 2009-07-01 13:03:35Z axel $ » Last generated: 2011-11-03 20:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/Reflex__FunctionBuilderImpl.html:665,stub,stubFP,665,root/html532/Reflex__FunctionBuilderImpl.html,https://root.cern,https://root.cern/root/html532/Reflex__FunctionBuilderImpl.html,4,['stub'],"['stubCtx', 'stubFP']"
Testability,". Reflex::UnionBuilderImpl. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::UnionBuilderImpl. class Reflex::UnionBuilderImpl. Function Members (Methods); public:. virtual~UnionBuilderImpl(); voidAddDataMember(const char* nam, const Reflex::Type& typ, size_t offs, unsigned int modifiers = 0); voidAddFunctionMember(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx = 0, const char* params = 0, unsigned int modifiers = 0); voidAddItem(const char* nam, const Reflex::Type& typ); voidAddProperty(const char* key, Reflex::Any value); voidAddProperty(const char* key, const char* value); Reflex::UnionBuilderImpl&operator=(const Reflex::UnionBuilderImpl&); voidSetSizeOf(size_t size); Reflex::TypeToType(); Reflex::UnionBuilderImplUnionBuilderImpl(const Reflex::UnionBuilderImpl&); Reflex::UnionBuilderImplUnionBuilderImpl(const char* nam, size_t size, const type_info& ti, unsigned int modifiers = 0, Reflex::TYPE typ = UNION). protected:. voidEnableCallback(const bool enable = true). Data Members; private:. boolfCallbackEnabled; Reflex::MemberfLastMember; Reflex::Union*fUnion. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UnionBuilderImpl(const char* nam, size_t size, const type_info& ti, unsigned int modifiers = 0, Reflex::TYPE typ = UNION); constructor . virtual ~UnionBuilderImpl(); destructor . void AddItem(const char* nam, const Reflex::Type& typ). * AddItem will add one union item; * @param Name the Name of the union item; * @param At the At of the union item. void AddFunctionMember(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx = 0, const char* params = 0, unsigned int modifiers = 0); AddDataMember will add the information about one data; * MemberAt of the union; *; * @param Name of the data Membe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/Reflex__UnionBuilderImpl.html:545,stub,stubFP,545,root/html526/Reflex__UnionBuilderImpl.html,https://root.cern,https://root.cern/root/html526/Reflex__UnionBuilderImpl.html,4,['stub'],"['stubCtx', 'stubFP']"
Testability,". Reflex::UnionBuilderImpl. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::UnionBuilderImpl. class Reflex::UnionBuilderImpl. Function Members (Methods); public:. virtual~UnionBuilderImpl(); voidAddDataMember(const char* nam, const Reflex::Type& typ, size_t offs, unsigned int modifiers = 0); voidAddFunctionMember(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx = 0, const char* params = 0, unsigned int modifiers = 0); voidAddItem(const char* nam, const Reflex::Type& typ); voidAddProperty(const char* key, Reflex::Any value); voidAddProperty(const char* key, const char* value); Reflex::UnionBuilderImpl&operator=(const Reflex::UnionBuilderImpl&); voidSetSizeOf(size_t size); Reflex::TypeToType(); Reflex::UnionBuilderImplUnionBuilderImpl(const Reflex::UnionBuilderImpl&); Reflex::UnionBuilderImplUnionBuilderImpl(const char* nam, size_t size, const type_info& ti, unsigned int modifiers = 0, Reflex::TYPE typ = UNION). protected:. voidEnableCallback(const bool enable = true). Data Members; private:. boolfCallbackEnabled; Reflex::MemberfLastMember; Reflex::Union*fUnion. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UnionBuilderImpl(const char* nam, size_t size, const type_info& ti, unsigned int modifiers = 0, Reflex::TYPE typ = UNION); constructor . virtual ~UnionBuilderImpl(); destructor . void AddItem(const char* nam, const Reflex::Type& typ). * AddItem will add one union item; * @param Name the Name of the union item; * @param At the At of the union item. void AddFunctionMember(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx = 0, const char* params = 0, unsigned int modifiers = 0); AddDataMember will add the information about one data; * MemberAt of the union; *; * @param Name of the data Mem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/Reflex__UnionBuilderImpl.html:547,stub,stubFP,547,root/html530/Reflex__UnionBuilderImpl.html,https://root.cern,https://root.cern/root/html530/Reflex__UnionBuilderImpl.html,6,['stub'],"['stubCtx', 'stubFP']"
Testability,". Release Checklist | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Release Checklist. Steps to be followed to produce a new ROOT release are:; Prerequisites. Get the 'green' light from all main develope",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/release-checklist.html:715,test,tests,715,d/release-checklist.html,https://root.cern,https://root.cern/d/release-checklist.html,1,['test'],['tests']
Testability,". Releases | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Download Releases. ; Pro ; Release 6.20/04 - 2020-04-01 ; . Old ; Release 6.18/04 - 2019-09-11 ; ; ; . Version 6 ; ; Release 6.20/06 - 2020-06-10. Release 6",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/releases.html:706,test,tests,706,d/releases.html,https://root.cern,https://root.cern/d/releases.html,1,['test'],['tests']
Testability,". ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::PDEFoamDecisionTree::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 57 of file PDEFoamDecisionTree.h. ◆ DeclFileName(). static const char * TMVA::PDEFoamDecisionTree::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 57 of file PDEFoamDecisionTree.h. ◆ Explore(). void TMVA::PDEFoamDecisionTree::Explore ; (; PDEFoamCell * ; cell). protectedvirtual . Internal subprogram used by Create. ; It explores newly defined cell with according to the decision tree logic. The separation set via the 'sepType' option in the constructor.; The optimal division point for eventual future cell division is determined/recorded. Note that links to parents and initial volume = 1/2 parent has to be already defined prior to calling this routine.; Note, that according to the decision tree logic, a cell is only split, if the number of (unweighted) events in each daughter cell is greater than fNmin. ; Reimplemented from TMVA::PDEFoam.; Definition at line 125 of file PDEFoamDecisionTree.cxx. ◆ IsA(). virtual TClass * TMVA::PDEFoamDecisionTree::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::PDEFoamDiscriminant.; Definition at line 57 of file PDEFoamDecisionTree.h. ◆ Streamer(). virtual void TMVA::PDEFoamDecisionTree::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::PDEFoamDiscriminant. ◆ StreamerNVirtual(). void TMVA::PDEFoamDecisionTree::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 57 of file PDEFoamDecisionTree.h. Member Data Documentation. ◆ fSepType. SeparationBase* TMVA::PDEFoamDecisionTree::fSepType. private . Definition at line 43 of file PDEFoamDecisionTree.h. Libraries for TMVA::PDEFoamDecisionTree:. [legend]; The documentation for this class",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamDecisionTree.html:22231,log,logic,22231,doc/master/classTMVA_1_1PDEFoamDecisionTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamDecisionTree.html,1,['log'],['logic']
Testability,". RooAbsOptTestStatistic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsOptTestStatistic. class RooAbsOptTestStatistic: public RooAbsTestStatistic. RooAbsOptTestStatistic is the abstract base class for test; statistics objects that evaluate a function or PDF at each point of a given; dataset. This class provides generic optimizations, such as; caching and precalculation of constant terms that can be made for; all such quantities; Implementations should define evaluatePartition(), which calculates the; value of a (sub)range of the dataset and optionally combinedValue(),; which combines the values calculated for each partition. If combinedValue(); is not overloaded, the default implementation will add the partition results; to obtain the combined result; Support for calculation in partitions is needed to allow multi-core; parallelized calculation of test statistics; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsOptTestStatistic(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsOptTestStatistic.html:401,test,test,401,root/html528/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html528/RooAbsOptTestStatistic.html,12,['test'],['test']
Testability,". RooAbsOptTestStatistic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsOptTestStatistic. class RooAbsOptTestStatistic: public RooAbsTestStatistic. RooAbsOptTestStatistic is the abstract base class for test; statistics objects that evaluate a function or PDF at each point of a given; dataset. This class provides generic optimizations, such as; caching and precalculation of constant terms that can be made for; all such quantities; Implementations should define evaluatePartition(), which calculates the; value of a (sub)range of the dataset and optionally combinedValue(),; which combines the values calculated for each partition. If combinedValue(); is not overloaded, the default implementation will add the partition results; to obtain the combined result; Support for calculation in partitions is needed to allow multi-core; parallelized calculation of test statistics; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsOptTestStatistic(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsOptTestStatistic.html:401,test,test,401,root/html526/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html526/RooAbsOptTestStatistic.html,2,['test'],['test']
Testability,". RooAbsTestStatistic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsTestStatistic. class RooAbsTestStatistic: public RooAbsReal. RooAbsTestStatistic is the abstract base class for all test; statistics. Test statistics that evaluate the PDF at each data; point should inherit from the RooAbsOptTestStatistic class which; implements several generic optimizations that can be done for such; quantities.; This test statistic base class organizes calculation of test; statistic values for RooSimultaneous PDF as a combination of test; statistic values for the PDF components of the simultaneous PDF and; organizes multi-processor parallel calculation of test statistic; values. For the latter, the test statistic value is calculated in; partitions in parallel executing processes and a posteriori; combined in the main thread.; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsTestStatistic(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsTestStatistic.html:384,test,test,384,root/html528/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html528/RooAbsTestStatistic.html,36,['test'],['test']
Testability,". RooAbsTestStatistic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsTestStatistic. class RooAbsTestStatistic: public RooAbsReal. RooAbsTestStatistic is the abstract base class for all test; statistics. Test statistics that evaluate the PDF at each data; point should inherit from the RooAbsOptTestStatistic class which; implements several generic optimizations that can be done for such; quantities.; This test statistic base class organizes calculation of test; statistic values for RooSimultaneous PDF as a combination of test; statistic values for the PDF components of the simultaneous PDF and; organizes multi-processor parallel calculation of test statistic; values. For the latter, the test statistic value is calculated in; partitions in parallel executing processes and a posteriori; combined in the main thread.; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsTestStatistic(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& par",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsTestStatistic.html:384,test,test,384,root/html526/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html526/RooAbsTestStatistic.html,6,['test'],['test']
Testability,". RooConstraintSum. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooConstraintSum. class RooConstraintSum: public RooAbsReal. RooConstraintSum calculates the sum of the -(log) likelihoods of; a set of RooAbsPfs that represent constraint functions. This class; is used to calculate the composite -log(L) of constraints to be; added the regular -log(L) in RooAbsPdf::fitTo() with Constrain(..); arguments; . Function Members (Methods); public:. RooConstraintSum(); RooConstraintSum(const RooConstraintSum& other, const char* name = 0); RooConstraintSum(const char* name, const char* title, const RooArgSet& constraintSet, const RooArgSet& paramSet); virtual~RooConstraintSum(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooConstraintSum.html:365,log,log,365,root/html528/RooConstraintSum.html,https://root.cern,https://root.cern/root/html528/RooConstraintSum.html,9,['log'],['log']
Testability,". RooConstraintSum. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooConstraintSum. class RooConstraintSum: public RooAbsReal. RooConstraintSum calculates the sum of the -(log) likelihoods of; a set of RooAbsPfs that represent constraint functions. This class; is used to calculate the composite -log(L) of constraints to be; added the regular -log(L) in RooAbsPdf::fitTo() with Constrain(..); arguments; . Function Members (Methods); public:. RooConstraintSum(); RooConstraintSum(const RooConstraintSum& other, const char* name = 0); RooConstraintSum(const char* name, const char* title, const RooArgSet& constraintSet, const RooArgSet& paramSet); virtual~RooConstraintSum(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooConstraintSum.html:365,log,log,365,root/html534/RooConstraintSum.html,https://root.cern,https://root.cern/root/html534/RooConstraintSum.html,3,['log'],['log']
Testability,". RooConstraintSum. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooConstraintSum. class RooConstraintSum: public RooAbsReal. RooConstraintSum calculates the sum of the -(log) likelihoods of; a set of RooAbsPfs that represent constraint functions. This class; is used to calculate the composite -log(L) of constraints to be; added the regular -log(L) in RooAbsPdf::fitTo() with Constrain(..); arguments; . Function Members (Methods); public:. RooConstraintSum(); RooConstraintSum(const RooConstraintSum& other, const char* name = 0); RooConstraintSum(const char* name, const char* title, const RooArgSet& constraintSet, const RooArgSet& paramSet); virtual~RooConstraintSum(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRoo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooConstraintSum.html:365,log,log,365,root/html526/RooConstraintSum.html,https://root.cern,https://root.cern/root/html526/RooConstraintSum.html,3,['log'],['log']
Testability,". RooConstraintSum. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooConstraintSum. class RooConstraintSum: public RooAbsReal. RooConstraintSum calculates the sum of the -(log) likelihoods of; a set of RooAbsPfs that represent constraint functions. This class; is used to calculate the composite -log(L) of constraints to be; added the regular -log(L) in RooAbsPdf::fitTo() with Constrain(..); arguments; . Function Members (Methods); public:. virtual~RooConstraintSum(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooConstraintSum.html:365,log,log,365,root/html602/RooConstraintSum.html,https://root.cern,https://root.cern/root/html602/RooConstraintSum.html,6,['log'],['log']
Testability,". RooDLLSignificanceMCSModule. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooDLLSignificanceMCSModule. class RooDLLSignificanceMCSModule: public RooAbsMCStudyModule. RooDLLSignificanceMCSModule is an add-on modules to RooMCStudy that; calculates the significance of a signal by comparing the likelihood of; a fit fit with a given parameter floating with a fit with that given; parameter fixed to a nominal value (usually zero). The difference in; the -log(L) of those two fits can be interpreted as the probability; that a statistical background fluctation may result in a signal as large; or larger than the signal observed. This interpretation is contingent; on underlying normal sampling distributions and a MC study is a good way; to test that assumption.; . Function Members (Methods); public:. RooDLLSignificanceMCSModule(const RooDLLSignificanceMCSModule& other); RooDLLSignificanceMCSModule(const RooRealVar& param, Double_t nullHypoValue = 0); RooDLLSignificanceMCSModule(const char* parName, Double_t nullHypoValue = 0); virtual~RooDLLSignificanceMCSModule(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tRooAbsMCStudyModule::doInitializeInstance(RooMCStudy&); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooDLLSignificanceMCSModule.html:648,log,log,648,root/html526/RooDLLSignificanceMCSModule.html,https://root.cern,https://root.cern/root/html526/RooDLLSignificanceMCSModule.html,10,"['log', 'test']","['log', 'test']"
Testability,". RooDLLSignificanceMCSModule. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooDLLSignificanceMCSModule. class RooDLLSignificanceMCSModule: public RooAbsMCStudyModule. RooDLLSignificanceMCSModule is an add-on modules to RooMCStudy that; calculates the significance of a signal by comparing the likelihood of; a fit fit with a given parameter floating with a fit with that given; parameter fixed to a nominal value (usually zero). The difference in; the -log(L) of those two fits can be interpreted as the probability; that a statistical background fluctation may result in a signal as large; or larger than the signal observed. This interpretation is contingent; on underlying normal sampling distributions and a MC study is a good way; to test that assumption.; . Function Members (Methods); public:. virtual~RooDLLSignificanceMCSModule(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tRooAbsMCStudyModule::doInitializeInstance(RooMCStudy&); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* param",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooDLLSignificanceMCSModule.html:648,log,log,648,root/html602/RooDLLSignificanceMCSModule.html,https://root.cern,https://root.cern/root/html602/RooDLLSignificanceMCSModule.html,4,"['log', 'test']","['log', 'test']"
Testability,". RooKeysPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooKeysPdf. class RooKeysPdf: public RooAbsPdf. Class RooKeysPdf implements a one-dimensional kernel estimation p.d.f which model the distribution; of an arbitrary input dataset as a superposition of Gaussian kernels, one for each data point,; each contributing 1/N to the total integral of the p.d.f.; ; If the 'adaptive mode' is enabled, the width of the Gaussian is adaptively calculated from the; local density of events, i.e. narrow for regions with high event density to preserve details and; wide for regions with log event density to promote smoothness. The details of the general algorithm; are described in the following paper: ; ; Cranmer KS, Kernel Estimation in High-Energy Physics. ; Computer Physics Communications 136:198-207,2001 - e-Print Archive: hep ex/0011057; . Function Members (Methods); public:. RooKeysPdf(); RooKeysPdf(const RooKeysPdf& other, const char* name = 0); RooKeysPdf(const char* name, const char* title, RooAbsReal& x, RooDataSet& data, RooKeysPdf::Mirror mirror = NoMirror, Double_t rho = 1); RooKeysPdf(const char* name, const char* title, RooAbsReal& x, RooRealVar& xdata, RooDataSet& data, RooKeysPdf::Mirror mirror = NoMirror, Double_t rho = 1); virtual~RooKeysPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tanalyticalIntegral(Int_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooKeysPdf.html:770,log,log,770,root/html534/RooKeysPdf.html,https://root.cern,https://root.cern/root/html534/RooKeysPdf.html,1,['log'],['log']
Testability,". RooKeysPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooKeysPdf. class RooKeysPdf: public RooAbsPdf. Class RooKeysPdf implements a one-dimensional kernel estimation p.d.f which model the distribution; of an arbitrary input dataset as a superposition of Gaussian kernels, one for each data point,; each contributing 1/N to the total integral of the p.d.f.; ; If the 'adaptive mode' is enabled, the width of the Gaussian is adaptively calculated from the; local density of events, i.e. narrow for regions with high event density to preserve details and; wide for regions with log event density to promote smoothness. The details of the general algorithm; are described in the following paper: ; ; Cranmer KS, Kernel Estimation in High-Energy Physics. ; Computer Physics Communications 136:198-207,2001 - e-Print Archive: hep ex/0011057; . Function Members (Methods); public:. RooKeysPdf(); RooKeysPdf(const RooKeysPdf& other, const char* name = 0); RooKeysPdf(const char* name, const char* title, RooAbsReal& x, RooDataSet& data, RooKeysPdf::Mirror mirror = NoMirror, Double_t rho = 1); virtual~RooKeysPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooKeysPdf.html:770,log,log,770,root/html528/RooKeysPdf.html,https://root.cern,https://root.cern/root/html528/RooKeysPdf.html,3,['log'],['log']
Testability,". RooKeysPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooKeysPdf. class RooKeysPdf: public RooAbsPdf. Class RooKeysPdf implements a one-dimensional kernel estimation p.d.f which model the distribution; of an arbitrary input dataset as a superposition of Gaussian kernels, one for each data point,; each contributing 1/N to the total integral of the p.d.f.; ; If the 'adaptive mode' is enabled, the width of the Gaussian is adaptively calculated from the; local density of events, i.e. narrow for regions with high event density to preserve details and; wide for regions with log event density to promote smoothness. The details of the general algorithm; are described in the following paper: ; ; Cranmer KS, Kernel Estimation in High-Energy Physics. ; Computer Physics Communications 136:198-207,2001 - e-Print Archive: hep ex/0011057; . Function Members (Methods); public:. RooKeysPdf(); RooKeysPdf(const RooKeysPdf& other, const char* name = 0); RooKeysPdf(const char* name, const char* title, RooAbsReal& x, RooDataSet& data, RooKeysPdf::Mirror mirror = NoMirror, Double_t rho = 1); virtual~RooKeysPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooKeysPdf.html:770,log,log,770,root/html526/RooKeysPdf.html,https://root.cern,https://root.cern/root/html526/RooKeysPdf.html,1,['log'],['log']
Testability,". RooKeysPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooKeysPdf. class RooKeysPdf: public RooAbsPdf. Class RooKeysPdf implements a one-dimensional kernel estimation p.d.f which model the distribution; of an arbitrary input dataset as a superposition of Gaussian kernels, one for each data point,; each contributing 1/N to the total integral of the p.d.f.; ; If the 'adaptive mode' is enabled, the width of the Gaussian is adaptively calculated from the; local density of events, i.e. narrow for regions with high event density to preserve details and; wide for regions with log event density to promote smoothness. The details of the general algorithm; are described in the following paper: ; ; Cranmer KS, Kernel Estimation in High-Energy Physics. ; Computer Physics Communications 136:198-207,2001 - e-Print Archive: hep ex/0011057; . Function Members (Methods); public:. virtual~RooKeysPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tanalyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachData",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooKeysPdf.html:770,log,log,770,root/html602/RooKeysPdf.html,https://root.cern,https://root.cern/root/html602/RooKeysPdf.html,2,['log'],['log']
Testability,". RooLognormal. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooLognormal. class RooLognormal: public RooAbsPdf. RooFit Lognormal PDF. The two parameters are:; - m0: the median of the distribution; - k=exp(sigma): sigma is called the shape parameter in the TMath parametrization; Lognormal(x,m0,k) = 1/(sqrt(2*pi)*ln(k)*x)*exp(-ln^2(x/m0)/(2*ln^2(k))); The parametrization here is physics driven and differs from the ROOT::Math::lognormal_pdf(x,m,s,x0) with:; - m = log(m0); - s = log(k); - x0 = 0; . Function Members (Methods); public:. RooLognormal(); RooLognormal(const RooLognormal& other, const char* name = 0); RooLognormal(const char* name, const char* title, RooAbsReal& _x, RooAbsReal& _m0, RooAbsReal& _k); virtual~RooLognormal(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tanalyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooLognormal.html:656,log,log,656,root/html528/RooLognormal.html,https://root.cern,https://root.cern/root/html528/RooLognormal.html,6,['log'],['log']
Testability,". RooLognormal. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooLognormal. class RooLognormal: public RooAbsPdf. RooFit Lognormal PDF. The two parameters are:; - m0: the median of the distribution; - k=exp(sigma): sigma is called the shape parameter in the TMath parametrization; Lognormal(x,m0,k) = 1/(sqrt(2*pi)*ln(k)*x)*exp(-ln^2(x/m0)/(2*ln^2(k))); The parametrization here is physics driven and differs from the ROOT::Math::lognormal_pdf(x,m,s,x0) with:; - m = log(m0); - s = log(k); - x0 = 0; . Function Members (Methods); public:. RooLognormal(); RooLognormal(const RooLognormal& other, const char* name = 0); RooLognormal(const char* name, const char* title, RooAbsReal& _x, RooAbsReal& _m0, RooAbsReal& _k); virtual~RooLognormal(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tanalyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooLognormal.html:656,log,log,656,root/html534/RooLognormal.html,https://root.cern,https://root.cern/root/html534/RooLognormal.html,2,['log'],['log']
Testability,". RooLognormal. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooLognormal. class RooLognormal: public RooAbsPdf. RooFit Lognormal PDF. The two parameters are:; - m0: the median of the distribution; - k=exp(sigma): sigma is called the shape parameter in the TMath parametrization; Lognormal(x,m0,k) = 1/(sqrt(2*pi)*ln(k)*x)*exp(-ln^2(x/m0)/(2*ln^2(k))); The parametrization here is physics driven and differs from the ROOT::Math::lognormal_pdf(x,m,s,x0) with:; - m = log(m0); - s = log(k); - x0 = 0; . Function Members (Methods); public:. virtual~RooLognormal(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tanalyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooLognormal.html:656,log,log,656,root/html602/RooLognormal.html,https://root.cern,https://root.cern/root/html602/RooLognormal.html,4,['log'],['log']
Testability,". RooMappedCategory::Entry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMappedCategory::Entry. class RooMappedCategory::Entry. Function Members (Methods); public:. virtual~Entry(); static TClass*Class(); RooMappedCategory::EntryEntry(); RooMappedCategory::EntryEntry(const RooMappedCategory::Entry& other); RooMappedCategory::EntryEntry(const char* exp, const RooCatType* cat); virtual TClass*IsA() const; Bool_tmatch(const char* testPattern) const; Bool_tok(); RooMappedCategory::Entry&operator=(const RooMappedCategory::Entry& other); const RooCatType&outCat() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. TStringmangle(const char* exp) const. Data Members; protected:. RooCatType_cat; TString_expr; TRegexp*_regexp!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMappedCategory::Entry& operator=(const RooMappedCategory::Entry& other). TString mangle(const char* exp) const; Mangle name : escape regexp character '+'. void Streamer(TBuffer& ). inline Entry(); {}. virtual ~Entry(); { delete _regexp ; }. Entry(const char* exp, const RooCatType* cat); {}. Entry(const RooMappedCategory::Entry& other); {}. Bool_t ok(); { return (_regexp->Status()==TRegexp::kOK) ; }. Bool_t match(const char* testPattern) const; { return (TString(testPattern).Index(*_regexp)>=0) ; }. const RooCatType& outCat() const; { return _cat ; }. » Last changed: Tue Jun 2 15:32:04 2015 » Last generated: 2015-06-02 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooMappedCategory__Entry.html:628,test,testPattern,628,root/html604/RooMappedCategory__Entry.html,https://root.cern,https://root.cern/root/html604/RooMappedCategory__Entry.html,3,['test'],['testPattern']
Testability,". RooMappedCategory::Entry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMappedCategory::Entry. class RooMappedCategory::Entry. Function Members (Methods); public:. virtual~Entry(); static TClass*Class(); RooMappedCategory::EntryEntry(); RooMappedCategory::EntryEntry(const RooMappedCategory::Entry& other); RooMappedCategory::EntryEntry(const char* exp, const RooCatType* cat); virtual TClass*IsA() const; Bool_tmatch(const char* testPattern) const; Bool_tok(); RooMappedCategory::Entry&operator=(const RooMappedCategory::Entry& other); const RooCatType&outCat() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. TStringmangle(const char* exp) const. Data Members; protected:. RooCatType_cat; TString_expr; TRegexp*_regexp!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMappedCategory::Entry& operator=(const RooMappedCategory::Entry& other). TString mangle(const char* exp) const; Mangle name : escape regexp character '+'. void Streamer(TBuffer& ). inline Entry(); {}. virtual ~Entry(); { delete _regexp ; }. Entry(const char* exp, const RooCatType* cat); {}. Entry(const RooMappedCategory::Entry& other); {}. Bool_t ok(); { return (_regexp->Status()==TRegexp::kOK) ; }. Bool_t match(const char* testPattern) const; { return (TString(testPattern).Index(*_regexp)>=0) ; }. const RooCatType& outCat() const; { return _cat ; }. » Last changed: Tue Jun 30 14:33:58 2015 » Last generated: 2015-06-30 14:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMappedCategory__Entry.html:628,test,testPattern,628,root/html602/RooMappedCategory__Entry.html,https://root.cern,https://root.cern/root/html602/RooMappedCategory__Entry.html,3,['test'],['testPattern']
Testability,". RooMappedCategory::Entry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMappedCategory::Entry. class RooMappedCategory::Entry. Function Members (Methods); public:. virtual~Entry(); static TClass*Class(); RooMappedCategory::EntryEntry(); RooMappedCategory::EntryEntry(const RooMappedCategory::Entry& other); RooMappedCategory::EntryEntry(const char* exp, const RooCatType* cat); virtual TClass*IsA() const; Bool_tmatch(const char* testPattern) const; Bool_tok(); RooMappedCategory::Entry&operator=(const RooMappedCategory::Entry& other); const RooCatType&outCat() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TStringmangle(const char* exp) const. Data Members; protected:. RooCatType_cat; TString_expr; TRegexp*_regexp!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMappedCategory::Entry& operator=(const RooMappedCategory::Entry& other). TString mangle(const char* exp) const; Mangle name : escape regexp character '+'. void Streamer(TBuffer& b). inline Entry(); {}. virtual ~Entry(); { delete _regexp ; }. Entry(const char* exp, const RooCatType* cat); {}. Entry(const RooMappedCategory::Entry& other); {}. Bool_t ok(); { return (_regexp->Status()==TRegexp::kOK) ; }. Bool_t match(const char* testPattern) const; { return (TString(testPattern).Index(*_regexp)>=0) ; }. const RooCatType& outCat() const; { return _cat ; }. » Last changed: Mon Jul 4 15:23:19 2011 » Last generated: 2011-07-04 15:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooMappedCategory__Entry.html:628,test,testPattern,628,root/html530/RooMappedCategory__Entry.html,https://root.cern,https://root.cern/root/html530/RooMappedCategory__Entry.html,3,['test'],['testPattern']
Testability,". RooMappedCategory::Entry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMappedCategory::Entry. class RooMappedCategory::Entry. Function Members (Methods); public:. virtual~Entry(); static TClass*Class(); RooMappedCategory::EntryEntry(); RooMappedCategory::EntryEntry(const RooMappedCategory::Entry& other); RooMappedCategory::EntryEntry(const char* exp, const RooCatType* cat); virtual TClass*IsA() const; Bool_tmatch(const char* testPattern) const; Bool_tok(); RooMappedCategory::Entry&operator=(const RooMappedCategory::Entry& other); const RooCatType&outCat() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TStringmangle(const char* exp) const. Data Members; protected:. RooCatType_cat; TString_expr; TRegexp*_regexp!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMappedCategory::Entry& operator=(const RooMappedCategory::Entry& other). TString mangle(const char* exp) const; Mangle name : escape regexp character '+'. void Streamer(TBuffer& b). inline Entry(); {}. virtual ~Entry(); { delete _regexp ; }. Entry(const char* exp, const RooCatType* cat); {}. Entry(const RooMappedCategory::Entry& other); {}. Bool_t ok(); { return (_regexp->Status()==TRegexp::kOK) ; }. Bool_t match(const char* testPattern) const; { return (TString(testPattern).Index(*_regexp)>=0) ; }. const RooCatType& outCat() const; { return _cat ; }. » Last changed: Thu Nov 3 20:08:36 2011 » Last generated: 2011-11-03 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMappedCategory__Entry.html:628,test,testPattern,628,root/html532/RooMappedCategory__Entry.html,https://root.cern,https://root.cern/root/html532/RooMappedCategory__Entry.html,3,['test'],['testPattern']
Testability,". RooMappedCategory::Entry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMappedCategory::Entry. class RooMappedCategory::Entry. Function Members (Methods); public:. virtual~Entry(); static TClass*Class(); RooMappedCategory::EntryEntry(); RooMappedCategory::EntryEntry(const RooMappedCategory::Entry& other); RooMappedCategory::EntryEntry(const char* exp, const RooCatType* cat); virtual TClass*IsA() const; Bool_tmatch(const char* testPattern) const; Bool_tok(); RooMappedCategory::Entry&operator=(const RooMappedCategory::Entry& other); const RooCatType&outCat() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TStringmangle(const char* exp) const. Data Members; protected:. RooCatType_cat; TString_expr; TRegexp*_regexp!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMappedCategory::Entry& operator=(const RooMappedCategory::Entry& other). TString mangle(const char* exp) const; Mangle name : escape regexp character '+'. void Streamer(TBuffer& b). inline Entry(); {}. virtual ~Entry(); { delete _regexp ; }. Entry(const char* exp, const RooCatType* cat); {}. Entry(const RooMappedCategory::Entry& other); {}. Bool_t ok(); { return (_regexp->Status()==TRegexp::kOK) ; }. Bool_t match(const char* testPattern) const; { return (TString(testPattern).Index(*_regexp)>=0) ; }. const RooCatType& outCat() const; { return _cat ; }. » Last changed: Thu Sep 23 20:00:08 2010 » Last generated: 2010-09-23 20:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMappedCategory__Entry.html:628,test,testPattern,628,root/html528/RooMappedCategory__Entry.html,https://root.cern,https://root.cern/root/html528/RooMappedCategory__Entry.html,3,['test'],['testPattern']
Testability,". RooMappedCategory::Entry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMappedCategory::Entry. class RooMappedCategory::Entry. Function Members (Methods); public:. virtual~Entry(); static TClass*Class(); RooMappedCategory::EntryEntry(); RooMappedCategory::EntryEntry(const RooMappedCategory::Entry& other); RooMappedCategory::EntryEntry(const char* exp, const RooCatType* cat); virtual TClass*IsA() const; Bool_tmatch(const char* testPattern) const; Bool_tok(); RooMappedCategory::Entry&operator=(const RooMappedCategory::Entry& other); const RooCatType&outCat() const; virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TStringmangle(const char* exp) const. Data Members; protected:. RooCatType_cat; TString_expr; TRegexp*_regexp!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMappedCategory::Entry& operator=(const RooMappedCategory::Entry& other). TString mangle(const char* exp) const; Mangle name : escape regexp character '+'. void Streamer(TBuffer& b). inline Entry(); {}. virtual ~Entry(); { delete _regexp ; }. Entry(const char* exp, const RooCatType* cat); {}. Entry(const RooMappedCategory::Entry& other); {}. Bool_t ok(); { return (_regexp->Status()==TRegexp::kOK) ; }. Bool_t match(const char* testPattern) const; { return (TString(testPattern).Index(*_regexp)>=0) ; }. const RooCatType& outCat() const; { return _cat ; }. » Last changed: Mon Dec 7 13:48:13 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMappedCategory__Entry.html:628,test,testPattern,628,root/html526/RooMappedCategory__Entry.html,https://root.cern,https://root.cern/root/html526/RooMappedCategory__Entry.html,3,['test'],['testPattern']
Testability,". RooMappedCategory::Entry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMappedCategory::Entry. class RooMappedCategory::Entry. Function Members (Methods); public:. virtual~Entry(); static TClass*Class(); RooMappedCategory::EntryEntry(); RooMappedCategory::EntryEntry(const RooMappedCategory::Entry& other); RooMappedCategory::EntryEntry(const char* exp, const RooCatType* cat); virtual TClass*IsA() const; Bool_tmatch(const char* testPattern) const; Bool_tok(); RooMappedCategory::Entry&operator=(const RooMappedCategory::Entry& other); const RooCatType&outCat() const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. TStringmangle(const char* exp) const. Data Members; protected:. RooCatType_cat; TString_expr; TRegexp*_regexp!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMappedCategory::Entry& operator=(const RooMappedCategory::Entry& other). TString mangle(const char* exp) const; Mangle name : escape regexp character '+'. void Streamer(TBuffer& ). inline Entry(); {}. virtual ~Entry(); { delete _regexp ; }. Entry(const char* exp, const RooCatType* cat); {}. Entry(const RooMappedCategory::Entry& other); {}. Bool_t ok(); { return (_regexp->Status()==TRegexp::kOK) ; }. Bool_t match(const char* testPattern) const; { return (TString(testPattern).Index(*_regexp)>=0) ; }. const RooCatType& outCat() const; { return _cat ; }. » Last changed: Tue Mar 10 17:17:48 2015 » Last generated: 2015-03-10 17:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMappedCategory__Entry.html:628,test,testPattern,628,root/html534/RooMappedCategory__Entry.html,https://root.cern,https://root.cern/root/html534/RooMappedCategory__Entry.html,3,['test'],['testPattern']
Testability,". RooMsgService & RooMsgService::instance ; (; ). static . Return reference to singleton instance. ; Definition at line 345 of file RooMsgService.cxx. ◆ IsA(). TClass * RooMsgService::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 246 of file RooMsgService.h. ◆ isActive(). template<class T > . bool RooMsgService::isActive ; (; T ; self, . RooFit::MsgTopic ; topic, . RooFit::MsgLevel ; level . ). inline . Check if logging is active for given object/topic/RooFit::MsgLevel combination. ; Definition at line 186 of file RooMsgService.h. ◆ log() [1/3]. ostream & RooMsgService::log ; (; const RooAbsArg * ; self, . RooFit::MsgLevel ; level, . RooFit::MsgTopic ; topic, . bool ; skipPrefix = false . ). Log error message associated with RooAbsArg object self at given level and topic. ; If skipPrefix is true the standard RooMsgService prefix is not added. ; Definition at line 419 of file RooMsgService.cxx. ◆ log() [2/3]. ostream & RooMsgService::log ; (; const TObject * ; self, . RooFit::MsgLevel ; level, . RooFit::MsgTopic ; topic, . bool ; skipPrefix = false . ). Log error message associated with TObject object self at given level and topic. ; If skipPrefix is true the standard RooMsgService prefix is not added. ; Definition at line 456 of file RooMsgService.cxx. ◆ log() [3/3]. std::ostream & RooMsgService::log ; (; std::nullptr_t ; , . RooFit::MsgLevel ; level, . RooFit::MsgTopic ; facility, . bool ; forceSkipPrefix = false . ). inline . Definition at line 180 of file RooMsgService.h. ◆ numStreams(). Int_t RooMsgService::numStreams ; (; ); const. inline . Definition at line 163 of file RooMsgService.h. ◆ Print(). void RooMsgService::Print ; (; Option_t * ; options = nullptr); const. overridevirtual . Print configuration of message service. ; If ""v"" option is given also inactive streams are listed ; Reimplemented from TObject.; Definition at line 486 of file RooMsgService.cxx. ◆ reset(). void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMsgService.html:20268,log,log,20268,doc/master/classRooMsgService.html,https://root.cern,https://root.cern/doc/master/classRooMsgService.html,1,['log'],['log']
Testability,". RooNDKeysPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooNDKeysPdf. class RooNDKeysPdf: public RooAbsPdf. Generic N-dimensional implementation of a kernel estimation p.d.f. This p.d.f. models the distribution; of an arbitrary input dataset as a superposition of Gaussian kernels, one for each data point,; each contributing 1/N to the total integral of the p.d.f.; ; If the 'adaptive mode' is enabled, the width of the Gaussian is adaptively calculated from the; local density of events, i.e. narrow for regions with high event density to preserve details and; wide for regions with log event density to promote smoothness. The details of the general algorithm; are described in the following paper: ; ; Cranmer KS, Kernel Estimation in High-Energy Physics. ; Computer Physics Communications 136:198-207,2001 - e-Print Archive: hep ex/0011057; ; For multi-dimensional datasets, the kernels are modeled by multidimensional Gaussians. The kernels are ; constructed such that they reflect the correlation coefficients between the observables; in the input dataset.; . Function Members (Methods); public:. RooNDKeysPdf(const RooNDKeysPdf& other, const char* name = 0); RooNDKeysPdf(const char* name, const char* title, const RooArgList& varList, RooDataSet& data, TString options = ""a"", Double_t rho = 1, Double_t nSigma = 3, Bool_t rotate = kTRUE); RooNDKeysPdf(const char* name, const char* title, RooAbsReal& x, RooDataSet& data, RooNDKeysPdf::Mirror mirror = NoMirror, Double_t rho = 1, Double_t nSigma = 3, Bool_t rotate = kTRUE); RooNDKeysPdf(const char* name, const char* title, RooAbsReal& x, RooAbsReal& y, RooDataSet& data, TString options = ""a"", Double_t rho = 1.0, Double_t nSigma = 3, Bool_t rotate = kTRUE); virtual~RooNDKeysPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNDKeysPdf.html:780,log,log,780,root/html526/RooNDKeysPdf.html,https://root.cern,https://root.cern/root/html526/RooNDKeysPdf.html,4,['log'],['log']
Testability,". RooNDKeysPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooNDKeysPdf. class RooNDKeysPdf: public RooAbsPdf. Generic N-dimensional implementation of a kernel estimation p.d.f. This p.d.f. models the distribution; of an arbitrary input dataset as a superposition of Gaussian kernels, one for each data point,; each contributing 1/N to the total integral of the p.d.f.; ; If the 'adaptive mode' is enabled, the width of the Gaussian is adaptively calculated from the; local density of events, i.e. narrow for regions with high event density to preserve details and; wide for regions with log event density to promote smoothness. The details of the general algorithm; are described in the following paper: ; ; Cranmer KS, Kernel Estimation in High-Energy Physics. ; Computer Physics Communications 136:198-207,2001 - e-Print Archive: hep ex/0011057; ; For multi-dimensional datasets, the kernels are modeled by multidimensional Gaussians. The kernels are ; constructed such that they reflect the correlation coefficients between the observables; in the input dataset.; . Function Members (Methods); public:. RooNDKeysPdf(const RooNDKeysPdf& other, const char* name = 0); RooNDKeysPdf(const char* name, const char* title, const RooArgList& varList, RooDataSet& data, TString options = ""a"", Double_t rho = 1, Double_t nSigma = 3, Bool_t rotate = kTRUE); RooNDKeysPdf(const char* name, const char* title, const RooArgList& varList, RooDataSet& data, const TVectorD& rho, TString options = ""a"", Double_t nSigma = 3, Bool_t rotate = kTRUE); RooNDKeysPdf(const char* name, const char* title, RooAbsReal& x, RooDataSet& data, RooNDKeysPdf::Mirror mirror = NoMirror, Double_t rho = 1, Double_t nSigma = 3, Bool_t rotate = kTRUE); RooNDKeysPdf(const char* name, const char* title, RooAbsReal& x, RooAbsReal& y, RooDataS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNDKeysPdf.html:780,log,log,780,root/html534/RooNDKeysPdf.html,https://root.cern,https://root.cern/root/html534/RooNDKeysPdf.html,1,['log'],['log']
Testability,". RooNDKeysPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooNDKeysPdf. class RooNDKeysPdf: public RooAbsPdf. Generic N-dimensional implementation of a kernel estimation p.d.f. This p.d.f. models the distribution; of an arbitrary input dataset as a superposition of Gaussian kernels, one for each data point,; each contributing 1/N to the total integral of the p.d.f.; ; If the 'adaptive mode' is enabled, the width of the Gaussian is adaptively calculated from the; local density of events, i.e. narrow for regions with high event density to preserve details and; wide for regions with log event density to promote smoothness. The details of the general algorithm; are described in the following paper: ; ; Cranmer KS, Kernel Estimation in High-Energy Physics. ; Computer Physics Communications 136:198-207,2001 - e-Print Archive: hep ex/0011057; ; For multi-dimensional datasets, the kernels are modeled by multidimensional Gaussians. The kernels are ; constructed such that they reflect the correlation coefficients between the observables; in the input dataset.; . Function Members (Methods); public:. virtual~RooNDKeysPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tanalyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNDKeysPdf.html:780,log,log,780,root/html602/RooNDKeysPdf.html,https://root.cern,https://root.cern/root/html602/RooNDKeysPdf.html,2,['log'],['log']
Testability,". RooNLLVar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooNLLVar. class RooNLLVar: public RooAbsOptTestStatistic. Class RooNLLVar implements a a -log(likelihood) calculation from a dataset; and a PDF. The NLL is calculated as ; ; Sum[data] -log( pdf(x_data) ); ; In extended mode, a (Nexpect - Nobserved*log(NExpected) term is added; . Function Members (Methods); public:. RooNLLVar(); RooNLLVar(const RooNLLVar& other, const char* name = 0); RooNLLVar(const char* name, const char* title, RooAbsPdf& pdf, RooAbsData& data, Bool_t extended = kFALSE, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitRange = kFALSE, Bool_t cloneData = kTRUE); RooNLLVar(const char* name, const char* title, RooAbsPdf& pdf, RooAbsData& data, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none(), const RooCmdArg& arg9 = RooCmdArg::none()); RooNLLVar(const char* name, const char* title, RooAbsPdf& pdf, RooAbsData& data, const RooArgSet& projDeps, Bool_t extended = kFALSE, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitRange = kFALSE, Bool_t cloneData = kTRUE); virtual~RooNLLVar(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNLLVar.html:343,log,log,343,root/html526/RooNLLVar.html,https://root.cern,https://root.cern/root/html526/RooNLLVar.html,12,['log'],['log']
Testability,". RooNLLVar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooNLLVar. class RooNLLVar: public RooAbsOptTestStatistic. Class RooNLLVar implements a a -log(likelihood) calculation from a dataset; and a PDF. The NLL is calculated as ; ; Sum[data] -log( pdf(x_data) ); ; In extended mode, a (Nexpect - Nobserved*log(NExpected) term is added; . Function Members (Methods); public:. RooNLLVar(); RooNLLVar(const RooNLLVar& other, const char* name = 0); RooNLLVar(const char* name, const char* title, RooAbsPdf& pdf, RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none(), const RooCmdArg& arg9 = RooCmdArg::none()); RooNLLVar(const char* name, const char* title, RooAbsPdf& pdf, RooAbsData& data, Bool_t extended, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, RooFit::MPSplit interleave = RooFit::BulkPartition, Bool_t verbose = kTRUE, Bool_t splitRange = kFALSE, Bool_t cloneData = kTRUE, Bool_t binnedL = kFALSE); RooNLLVar(const char* name, const char* title, RooAbsPdf& pdf, RooAbsData& data, const RooArgSet& projDeps, Bool_t extended = kFALSE, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, RooFit::MPSplit interleave = RooFit::BulkPartition, Bool_t verbose = kTRUE, Bool_t splitRange = kFALSE, Bool_t cloneData = kTRUE, Bool_t binnedL = kFALSE); virtual~RooNLLVar(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNLLVar.html:343,log,log,343,root/html534/RooNLLVar.html,https://root.cern,https://root.cern/root/html534/RooNLLVar.html,3,['log'],['log']
Testability,". RooNLLVar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooNLLVar. class RooNLLVar: public RooAbsOptTestStatistic. Class RooNLLVar implements a a -log(likelihood) calculation from a dataset; and a PDF. The NLL is calculated as ; ; Sum[data] -log( pdf(x_data) ); ; In extended mode, a (Nexpect - Nobserved*log(NExpected) term is added; . Function Members (Methods); public:. virtual~RooNLLVar(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); voidapplyWeightSquared(Bool_t flag); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNLLVar.html:343,log,log,343,root/html602/RooNLLVar.html,https://root.cern,https://root.cern/root/html602/RooNLLVar.html,6,['log'],['log']
Testability,". RooNonCentralChiSquare. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooNonCentralChiSquare. class RooNonCentralChiSquare: public RooAbsPdf. The PDF of the Non-Central Chi Square distribution for n degrees of freedom. ; It is the asymptotic distribution of the profile likeihood ratio test q_mu ; when a different mu' is true. It is Wald's generalization of Wilks' Theorem.; See:; Asymptotic formulae for likelihood-based tests of new physics; By Glen Cowan, Kyle Cranmer, Eilam Gross, Ofer Vitells; http://arXiv.org/abs/arXiv:1007.1727; Wikipedia:; http://en.wikipedia.org/wiki/Noncentral_chi-square_distribution#Approximation; It requires MathMore to evaluate for non-integer degrees of freedom, k.; When the Mathmore library is available we can use the MathMore libraries impelmented using GSL. ; It makes use of the modified Bessel function of the first kind (for k > 2). For k < 2 it uses ; the hypergeometric function 0F1. ; When is not available we use explicit summation of normal chi-squared distributions; The usage of the sum can be forced by calling SetForceSum(true);; This implementation could be improved. BOOST has a nice implementation:; http://live.boost.org/doc/libs/1_42_0/libs/math/doc/sf_and_dist/html/math_toolkit/dist/dist_ref/dists/nc_chi_squared_dist.html; http://wesnoth.repositoryhosting.com/trac/wesnoth_wesnoth/browser/trunk/include/boost/math/distributions/non_central_chi_squared.hpp?rev=6; . Function Members (Methods); public:. RooNonCentralChiSquare(); RooNonCentralChiSquare(const RooNonCentralChiSquare& other, const char* name = 0); RooNonCentralChiSquare(const char* name, const char* title, RooAbsReal& _x, RooAbsReal& _k, RooAbsReal& _lambda); virtual~RooNonCentralChiSquare(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNonCentralChiSquare.html:477,test,test,477,root/html528/RooNonCentralChiSquare.html,https://root.cern,https://root.cern/root/html528/RooNonCentralChiSquare.html,8,['test'],"['test', 'tests']"
Testability,". RooNonCentralChiSquare. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooNonCentralChiSquare. class RooNonCentralChiSquare: public RooAbsPdf. The PDF of the Non-Central Chi Square distribution for n degrees of freedom. ; It is the asymptotic distribution of the profile likeihood ratio test q_mu ; when a different mu' is true. It is Wald's generalization of Wilks' Theorem.; See:; Asymptotic formulae for likelihood-based tests of new physics; By Glen Cowan, Kyle Cranmer, Eilam Gross, Ofer Vitells; http://arXiv.org/abs/arXiv:1007.1727; Wikipedia:; http://en.wikipedia.org/wiki/Noncentral_chi-square_distribution#Approximation; It requires MathMore to evaluate for non-integer degrees of freedom, k.; When the Mathmore library is available we can use the MathMore libraries impelmented using GSL. ; It makes use of the modified Bessel function of the first kind (for k > 2). For k < 2 it uses ; the hypergeometric function 0F1. ; When is not available we use explicit summation of normal chi-squared distributions; The usage of the sum can be forced by calling SetForceSum(true);; This implementation could be improved. BOOST has a nice implementation:; http://live.boost.org/doc/libs/1_42_0/libs/math/doc/sf_and_dist/html/math_toolkit/dist/dist_ref/dists/nc_chi_squared_dist.html; http://wesnoth.repositoryhosting.com/trac/wesnoth_wesnoth/browser/trunk/include/boost/math/distributions/non_central_chi_squared.hpp?rev=6; . Function Members (Methods); public:. virtual~RooNonCentralChiSquare(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shap",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNonCentralChiSquare.html:477,test,test,477,root/html602/RooNonCentralChiSquare.html,https://root.cern,https://root.cern/root/html602/RooNonCentralChiSquare.html,4,['test'],"['test', 'tests']"
Testability,". RooProfileLL. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooProfileLL. class RooProfileLL: public RooAbsReal. Class RooProfileLL implements the profile likelihood estimator for; a given likelihood and set of parameters of interest. The value return by ; RooProfileLL is the input likelihood nll minimized w.r.t all nuisance parameters; (which are all parameters except for those listed in the constructor) minus; the -log(L) of the best fit. Note that this function is slow to evaluate; as a MIGRAD minimization step is executed for each function evaluation; . Function Members (Methods); public:. RooProfileLL(); RooProfileLL(const RooProfileLL& other, const char* name = 0); RooProfileLL(const char* name, const char* title, RooAbsReal& nll, const RooArgSet& observables); virtual~RooProfileLL(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; Bool_talwaysStartFromMin() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProfileLL.html:616,log,log,616,root/html528/RooProfileLL.html,https://root.cern,https://root.cern/root/html528/RooProfileLL.html,4,['log'],['log']
Testability,". RooProfileLL. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooProfileLL. class RooProfileLL: public RooAbsReal. Class RooProfileLL implements the profile likelihood estimator for; a given likelihood and set of parameters of interest. The value return by ; RooProfileLL is the input likelihood nll minimized w.r.t all nuisance parameters; (which are all parameters except for those listed in the constructor) minus; the -log(L) of the best fit. Note that this function is slow to evaluate; as a MIGRAD minimization step is executed for each function evaluation; . Function Members (Methods); public:. RooProfileLL(const RooProfileLL& other, const char* name = 0); RooProfileLL(const char* name, const char* title, RooAbsReal& nll, const RooArgSet& observables); virtual~RooProfileLL(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); Bool_talwaysStartFromMin() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProfileLL.html:616,log,log,616,root/html526/RooProfileLL.html,https://root.cern,https://root.cern/root/html526/RooProfileLL.html,1,['log'],['log']
Testability,". RooProfileLL. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooProfileLL. class RooProfileLL: public RooAbsReal. Class RooProfileLL implements the profile likelihood estimator for; a given likelihood and set of parameters of interest. The value return by ; RooProfileLL is the input likelihood nll minimized w.r.t all nuisance parameters; (which are all parameters except for those listed in the constructor) minus; the -log(L) of the best fit. Note that this function is slow to evaluate; as a MIGRAD minimization step is executed for each function evaluation; . Function Members (Methods); public:. virtual~RooProfileLL(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; Bool_talwaysStartFromMin() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; const RooArgSet&bestFitObs() const; const RooArgSet&bestFitParams() const; virtual list<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooProfileLL.html:616,log,log,616,root/html602/RooProfileLL.html,https://root.cern,https://root.cern/root/html602/RooProfileLL.html,2,['log'],['log']
Testability,". RooRealIntegral. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealIntegral. class RooRealIntegral: public RooAbsReal. RooRealIntegral performs hybrid numerical/analytical integrals of RooAbsReal objects; The class performs none of the actual integration, but only manages the logic; of what variables can be integrated analytically, accounts for eventual jacobian; terms and defines what numerical integrations needs to be done to complement the; analytical integral.; ; The actual analytical integrations (if any) are done in the PDF themselves, the numerical; integration is performed in the various implemenations of the RooAbsIntegrator base class.; . Function Members (Methods); public:. RooRealIntegral(); RooRealIntegral(const RooRealIntegral& other, const char* name = 0); RooRealIntegral(const char* name, const char* title, const RooAbsReal& function, const RooArgSet& depList, const RooArgSet* funcNormSet = 0, const RooNumIntConfig* config = 0, const char* rangeName = 0); virtual~RooRealIntegral(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const RooArgSet&anaIntVars() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRealIntegral.html:475,log,logic,475,root/html526/RooRealIntegral.html,https://root.cern,https://root.cern/root/html526/RooRealIntegral.html,1,['log'],['logic']
Testability,". RooRealIntegral. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealIntegral. class RooRealIntegral: public RooAbsReal. RooRealIntegral performs hybrid numerical/analytical integrals of RooAbsReal objects; The class performs none of the actual integration, but only manages the logic; of what variables can be integrated analytically, accounts for eventual jacobian; terms and defines what numerical integrations needs to be done to complement the; analytical integral.; ; The actual analytical integrations (if any) are done in the PDF themselves, the numerical; integration is performed in the various implemenations of the RooAbsIntegrator base class.; . Function Members (Methods); public:. RooRealIntegral(); RooRealIntegral(const RooRealIntegral& other, const char* name = 0); RooRealIntegral(const char* name, const char* title, const RooAbsReal& function, const RooArgSet& depList, const RooArgSet* funcNormSet = 0, const RooNumIntConfig* config = 0, const char* rangeName = 0); virtual~RooRealIntegral(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; const RooArgSet&anaIntVars() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooRealIntegral.html:475,log,logic,475,root/html528/RooRealIntegral.html,https://root.cern,https://root.cern/root/html528/RooRealIntegral.html,4,['log'],['logic']
Testability,". RooRealIntegral. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealIntegral. class RooRealIntegral: public RooAbsReal. RooRealIntegral performs hybrid numerical/analytical integrals of RooAbsReal objects; The class performs none of the actual integration, but only manages the logic; of what variables can be integrated analytically, accounts for eventual jacobian; terms and defines what numerical integrations needs to be done to complement the; analytical integral.; ; The actual analytical integrations (if any) are done in the PDF themselves, the numerical; integration is performed in the various implemenations of the RooAbsIntegrator base class.; . Function Members (Methods); public:. virtual~RooRealIntegral(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; const RooArgSet&anaIntVars() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attribu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooRealIntegral.html:475,log,logic,475,root/html602/RooRealIntegral.html,https://root.cern,https://root.cern/root/html602/RooRealIntegral.html,2,['log'],['logic']
Testability,". RooRefArray. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRefArray. class RooRefArray: public TObjArray. RooAbsArg is the common abstract base class for objects that; represent a value (of arbitrary type) and ""shape"" that in general; depends on (is a client of) other RooAbsArg subclasses. The only; state information about a value that is maintained in this base; class consists of named attributes and flags that track when either; the value or the shape of this object changes. The meaning of shape; depends on the client implementation but could be, for example, the; allowed range of a value. The base class is also responsible for; managing client/server links and propagating value/shape changes; through an expression tree. RooAbsArg implements public interfaces; for inspecting client/server relationships and; setting/clearing/testing named attributes.; . Function Members (Methods); public:. virtual~RooRefArray(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObjArray::Add(TObject* obj); virtual voidTObjArray::AddAfter(const TObject* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidTObjArray::AddAt(TObject* obj, Int_t idx); virtual voidTObjArray::AddAtAndExpand(TObject* obj, Int_t idx); virtual Int_tTObjArray::AddAtFree(TObject* obj); virtual voidTObjArray::AddBefore(const TObject* before, TObject* obj); virtual voidTObjArray::AddFirst(TObject* obj); virtual voidTObjArray::AddLast(TObject* obj); voidTCollection::AddVector(TObject* obj1); virtual TObject*TObjArray::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TObjArray::At(Int_t idx) const; virtual TObject*TObjArray::Before(const TObject* obj) const; TIte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooRefArray.html:1036,test,testing,1036,root/html602/RooRefArray.html,https://root.cern,https://root.cern/root/html602/RooRefArray.html,2,['test'],['testing']
Testability,". RooStats::DebuggingSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::DebuggingSampler. class RooStats::DebuggingSampler: public RooStats::TestStatSampler. DebuggingSampler is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingSampler(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Double_tEvaluateTestStatistic(RooAbsData&, RooArgSet&); virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& paramsOfInterest); virtual const RooAbsArg*GetTestStatistic() const; virtual voidInitialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; RooStats::DebuggingSampler&operator=(const RooStats::DebuggingSampler&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetNuisanceParameters(RooArgSet&); virtual voidRooStats::TestStatSampler::SetObservables(RooArgSet&); virtual voidSetParameters(RooArgSet&); virtual voidSetPdf(RooAbsPdf&); virtual voidSetTestSize(Double_t size); virtual voidSetTestStatistic(RooAbsArg&) const; virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. TRandom*fRand; Double_tfSize; RooRealVar*fTestStatistic. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~DebuggingSampler(). SamplingDistribution* GetSamplingDistribution(RooArgSet& paramsOfInterest); Main interface to get a ConfInterva",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__DebuggingSampler.html:573,test,tests,573,root/html526/RooStats__DebuggingSampler.html,https://root.cern,https://root.cern/root/html526/RooStats__DebuggingSampler.html,1,['test'],['tests']
Testability,". RooStats::DebuggingSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::DebuggingSampler. class RooStats::DebuggingSampler: public RooStats::TestStatSampler. DebuggingSampler is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingSampler(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Double_tEvaluateTestStatistic(RooAbsData&, RooArgSet&); virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& paramsOfInterest); virtual RooStats::TestStatistic*GetTestStatistic() const; virtual voidInitialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; RooStats::DebuggingSampler&operator=(const RooStats::DebuggingSampler&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetGlobalObservables(const RooArgSet&); virtual voidSetNuisanceParameters(const RooArgSet&); virtual voidRooStats::TestStatSampler::SetObservables(const RooArgSet&); virtual voidSetParameters(RooArgSet&); virtual voidSetParametersForTestStat(const RooArgSet&); virtual voidSetPdf(RooAbsPdf&); virtual voidRooStats::TestStatSampler::SetPriorNuisance(RooAbsPdf*); virtual voidRooStats::TestStatSampler::SetSamplingDistName(const char* name); virtual voidSetTestSize(Double_t size); virtual voidSetTestStatistic(RooStats::TestStatistic*); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. TRandom*fRand; Double_tfSize;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__DebuggingSampler.html:563,test,tests,563,root/html528/RooStats__DebuggingSampler.html,https://root.cern,https://root.cern/root/html528/RooStats__DebuggingSampler.html,1,['test'],['tests']
Testability,". RooStats::DebuggingSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::DebuggingSampler. class RooStats::DebuggingSampler: public RooStats::TestStatSampler. DebuggingSampler is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingSampler(); static TClass*Class(); virtual Double_tConfidenceLevel() const; RooStats::DebuggingSamplerDebuggingSampler(); RooStats::DebuggingSamplerDebuggingSampler(const RooStats::DebuggingSampler&); virtual Double_tEvaluateTestStatistic(RooAbsData&, RooArgSet&); virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& paramsOfInterest); virtual RooStats::TestStatistic*GetTestStatistic() const; virtual voidInitialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; RooStats::DebuggingSampler&operator=(const RooStats::DebuggingSampler&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetGlobalObservables(const RooArgSet&); virtual voidSetNuisanceParameters(const RooArgSet&); virtual voidRooStats::TestStatSampler::SetObservables(const RooArgSet&); virtual voidSetParameters(RooArgSet&); virtual voidSetParametersForTestStat(const RooArgSet&); virtual voidSetPdf(RooAbsPdf&); virtual voidRooStats::TestStatSampler::SetPriorNuisance(RooAbsPdf*); virtual voidRooStats::TestStatSampler::SetSamplingDistName(const char* name); virtual voidSetTestSize(Double_t size); virtual voidSetTestStatistic(RooStats::TestStatistic*); virtual voidShowMembers(TMemberIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__DebuggingSampler.html:575,test,tests,575,root/html602/RooStats__DebuggingSampler.html,https://root.cern,https://root.cern/root/html602/RooStats__DebuggingSampler.html,2,['test'],['tests']
Testability,". RooStats::DebuggingSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::DebuggingSampler. class RooStats::DebuggingSampler: public RooStats::TestStatSampler. DebuggingSampler is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingSampler(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Double_tEvaluateTestStatistic(RooAbsData&, RooArgSet&); virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& paramsOfInterest); virtual RooStats::TestStatistic*GetTestStatistic() const; virtual voidInitialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; RooStats::DebuggingSampler&operator=(const RooStats::DebuggingSampler&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetGlobalObservables(const RooArgSet&); virtual voidSetNuisanceParameters(const RooArgSet&); virtual voidRooStats::TestStatSampler::SetObservables(const RooArgSet&); virtual voidSetParameters(RooArgSet&); virtual voidSetParametersForTestStat(const RooArgSet&); virtual voidSetPdf(RooAbsPdf&); virtual voidRooStats::TestStatSampler::SetPriorNuisance(RooAbsPdf*); virtual voidRooStats::TestStatSampler::SetSamplingDistName(const char* name); virtual voidSetTestSize(Double_t size); virtual voidSetTestStatistic(RooStats::TestStatistic*); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. TRandom*fRand; Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__DebuggingSampler.html:575,test,tests,575,root/html530/RooStats__DebuggingSampler.html,https://root.cern,https://root.cern/root/html530/RooStats__DebuggingSampler.html,2,['test'],['tests']
Testability,". RooStats::DebuggingSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::DebuggingSampler. class RooStats::DebuggingSampler: public RooStats::TestStatSampler. DebuggingSampler is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingSampler(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Double_tEvaluateTestStatistic(RooAbsData&, RooArgSet&); virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& paramsOfInterest); virtual RooStats::TestStatistic*GetTestStatistic() const; virtual voidInitialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; RooStats::DebuggingSampler&operator=(const RooStats::DebuggingSampler&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetGlobalObservables(const RooArgSet&); virtual voidSetNuisanceParameters(const RooArgSet&); virtual voidRooStats::TestStatSampler::SetObservables(const RooArgSet&); virtual voidSetParameters(RooArgSet&); virtual voidSetParametersForTestStat(const RooArgSet&); virtual voidSetPdf(RooAbsPdf&); virtual voidRooStats::TestStatSampler::SetPriorNuisance(RooAbsPdf*); virtual voidRooStats::TestStatSampler::SetSamplingDistName(const char* name); virtual voidSetTestSize(Double_t size); virtual voidSetTestStatistic(RooStats::TestStatistic*); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__DebuggingSampler.html:575,test,tests,575,root/html534/RooStats__DebuggingSampler.html,https://root.cern,https://root.cern/root/html534/RooStats__DebuggingSampler.html,1,['test'],['tests']
Testability,". RooStats::DebuggingTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::DebuggingTestStat. class RooStats::DebuggingTestStat: public RooStats::TestStatistic. DebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData&, RooArgSet&); virtual const RooAbsArg*GetTestStatistic() const; virtual const TStringRooStats::TestStatistic::GetVarName() const; virtual TClass*IsA() const; RooStats::DebuggingTestStat&operator=(const RooStats::DebuggingTestStat&); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. TRandom*fRand; RooRealVar*fTestStatistic. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~DebuggingTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& , RooArgSet& ); Main interface to evaluate the test statistic on a dataset. const RooAbsArg* GetTestStatistic() const; Get the TestStatistic. {return fTestStatistic;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: DebuggingTestStat.h 31276 2009-11-18 15:06:42Z moneta $ » Last generated: 2009-12-07 13:49; This page has been automatically generated. For comments or suggestions regarding ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__DebuggingTestStat.html:575,test,tests,575,root/html526/RooStats__DebuggingTestStat.html,https://root.cern,https://root.cern/root/html526/RooStats__DebuggingTestStat.html,1,['test'],['tests']
Testability,". RooStats::DebuggingTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::DebuggingTestStat. class RooStats::DebuggingTestStat: public RooStats::TestStatistic. DebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData&, RooArgSet&); virtual const TStringRooStats::TestStatistic::GetVarName() const; virtual TClass*IsA() const; RooStats::DebuggingTestStat&operator=(const RooStats::DebuggingTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. TRandom*fRand; RooRealVar*fTestStatistic. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~DebuggingTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& , RooArgSet& ); Main interface to evaluate the test statistic on a dataset. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: DebuggingTestStat.h 34109 2010-06-24 15:00:16Z moneta $ » Last generated: 2010-11-25 07:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__DebuggingTestStat.html:565,test,tests,565,root/html528/RooStats__DebuggingTestStat.html,https://root.cern,https://root.cern/root/html528/RooStats__DebuggingTestStat.html,2,['test'],"['test', 'tests']"
Testability,". RooStats::DebuggingTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::DebuggingTestStat. class RooStats::DebuggingTestStat: public RooStats::TestStatistic. DebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingTestStat(); static TClass*Class(); RooStats::DebuggingTestStatDebuggingTestStat(); RooStats::DebuggingTestStatDebuggingTestStat(const RooStats::DebuggingTestStat&); virtual Double_tEvaluate(RooAbsData&, RooArgSet&); virtual const RooArgSet*RooStats::TestStatistic::GetDetailedOutput() const; virtual const TStringRooStats::TestStatistic::GetVarName() const; virtual TClass*IsA() const; RooStats::DebuggingTestStat&operator=(const RooStats::DebuggingTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(const RooStats::TestStatistic&). Data Members; private:. TRandom*fRand; RooRealVar*fTestStatistic. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; DebuggingTestStat(). virtual ~DebuggingTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& , RooArgSet& ); Main interface to evaluate the test statistic on a dataset. » Author: Kyle ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__DebuggingTestStat.html:577,test,tests,577,root/html602/RooStats__DebuggingTestStat.html,https://root.cern,https://root.cern/root/html602/RooStats__DebuggingTestStat.html,2,['test'],['tests']
Testability,". RooStats::DebuggingTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::DebuggingTestStat. class RooStats::DebuggingTestStat: public RooStats::TestStatistic. DebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData&, RooArgSet&); virtual const RooArgSet*RooStats::TestStatistic::GetDetailedOutput() const; virtual const TStringRooStats::TestStatistic::GetVarName() const; virtual TClass*IsA() const; RooStats::DebuggingTestStat&operator=(const RooStats::DebuggingTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:. TRandom*fRand; RooRealVar*fTestStatistic. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~DebuggingTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& , RooArgSet& ); Main interface to evaluate the test statistic on a dataset. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__DebuggingTestStat.html:577,test,tests,577,root/html534/RooStats__DebuggingTestStat.html,https://root.cern,https://root.cern/root/html534/RooStats__DebuggingTestStat.html,1,['test'],['tests']
Testability,". RooStats::DebuggingTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::DebuggingTestStat. class RooStats::DebuggingTestStat: public RooStats::TestStatistic. DebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData&, RooArgSet&); virtual const TStringRooStats::TestStatistic::GetVarName() const; virtual TClass*IsA() const; RooStats::DebuggingTestStat&operator=(const RooStats::DebuggingTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. TRandom*fRand; RooRealVar*fTestStatistic. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~DebuggingTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& , RooArgSet& ); Main interface to evaluate the test statistic on a dataset. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: DebuggingTestStat.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__DebuggingTestStat.html:577,test,tests,577,root/html530/RooStats__DebuggingTestStat.html,https://root.cern,https://root.cern/root/html530/RooStats__DebuggingTestStat.html,2,['test'],"['test', 'tests']"
Testability,". RooStats::DebuggingTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::DebuggingTestStat. class RooStats::DebuggingTestStat: public RooStats::TestStatistic. DebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData&, RooArgSet&); virtual const TStringRooStats::TestStatistic::GetVarName() const; virtual TClass*IsA() const; RooStats::DebuggingTestStat&operator=(const RooStats::DebuggingTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. TRandom*fRand; RooRealVar*fTestStatistic. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~DebuggingTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& , RooArgSet& ); Main interface to evaluate the test statistic on a dataset. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: DebuggingTestStat.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-11-03 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__DebuggingTestStat.html:577,test,tests,577,root/html532/RooStats__DebuggingTestStat.html,https://root.cern,https://root.cern/root/html532/RooStats__DebuggingTestStat.html,2,['test'],"['test', 'tests']"
Testability,". RooStats::FeldmanCousins. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::FeldmanCousins. class RooStats::FeldmanCousins: public RooStats::IntervalCalculator, public TNamed. The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a specific configuration; of the more general NeymanConstruction. It is a concrete implementation of the IntervalCalculator interface that, which uses the NeymanConstruction in a particular way. As the name suggests, it returns a ConfidenceInterval. In particular, it produces a RooStats::PointSetInterval, which is a concrete implementation of the ConfInterval interface. . The Neyman Construction is not a uniquely defined statistical technique, it requires that one specify an ordering rule ; or ordering principle, which is usually incoded by choosing a specific test statistic and limits of integration ; (corresponding to upper/lower/central limits). As a result, this class must be configured with the corresponding; information before it can produce an interval. . In the case of the Feldman-Cousins approach, the ordering principle is the likelihood ratio -- motivated; by the Neyman-Pearson lemma. When nuisance parameters are involved, the profile likelihood ratio is the natural generalization. One may either choose to perform the construction over the full space of the nuisance parameters, or restrict the nusiance parameters to their conditional MLE (eg. profiled values). . Function Members (Methods); public:. virtual~FeldmanCousins(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__FeldmanCousins.html:1019,test,test,1019,root/html526/RooStats__FeldmanCousins.html,https://root.cern,https://root.cern/root/html526/RooStats__FeldmanCousins.html,1,['test'],['test']
Testability,". RooStats::FeldmanCousins. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::FeldmanCousins. class RooStats::FeldmanCousins: public RooStats::IntervalCalculator. The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a specific configuration; of the more general NeymanConstruction. It is a concrete implementation of the IntervalCalculator interface that, which uses the NeymanConstruction in a particular way. As the name suggests, it returns a ConfidenceInterval. In particular, it produces a RooStats::PointSetInterval, which is a concrete implementation of the ConfInterval interface. . The Neyman Construction is not a uniquely defined statistical technique, it requires that one specify an ordering rule ; or ordering principle, which is usually incoded by choosing a specific test statistic and limits of integration ; (corresponding to upper/lower/central limits). As a result, this class must be configured with the corresponding; information before it can produce an interval. . In the case of the Feldman-Cousins approach, the ordering principle is the likelihood ratio -- motivated; by the Neyman-Pearson lemma. When nuisance parameters are involved, the profile likelihood ratio is the natural generalization. One may either choose to perform the construction over the full space of the nuisance parameters, or restrict the nusiance parameters to their conditional MLE (eg. profiled values). . Function Members (Methods); public:. virtual~FeldmanCousins(); voidAdditionalNToysFactor(double fact); static TClass*Class(); virtual Double_tConfidenceLevel() const; voidCreateConfBelt(bool flag = true); RooStats::FeldmanCousinsFeldmanCousins(const RooStats::FeldmanCousins&); RooStats::FeldmanCousinsFeldmanCousins(RooAbsData& data, RooStats::ModelConfig& model); voidFlu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__FeldmanCousins.html:1004,test,test,1004,root/html528/RooStats__FeldmanCousins.html,https://root.cern,https://root.cern/root/html528/RooStats__FeldmanCousins.html,6,['test'],['test']
Testability,". RooStats::HistFactory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » ROOFIT; » HISTFACTORY; » RooStats::HistFactory. namespace RooStats::HistFactory. Function Members (Methods); public:. stringchannelNameFromPdf(RooAbsPdf* channelPdf); voidFactorizeHistFactoryPdf(const RooArgSet&, RooAbsPdf&, RooArgList&, RooArgList&); voidFitModel(RooWorkspace*, string data_name = ""obsData""); voidFitModelAndPlot(const string& measurementName, const string& fileNamePrefix, RooWorkspace*, string, string, TFile*, FILE*); voidFormatFrameForLikelihood(RooPlot* frame, string xTitle = std::string(""#sigma / #sigma_{SM}""), string yTitle = std::string(""-log likelihood"")); vector<RooStats::HistFactory::EstimateSummary>GetChannelEstimateSummaries(RooStats::HistFactory::Measurement& measurement, RooStats::HistFactory::Channel& channel); voidgetDataValuesForObservables(map<std::string,std::vector<double> >& ChannelBinDataMap, RooAbsData* data, RooAbsPdf* simPdf); intgetStatUncertaintyConstraintTerm(RooArgList* constraints, RooRealVar* gamma_stat, RooAbsReal*& pois_mean, RooRealVar*& tau); boolgetStatUncertaintyFromChannel(RooAbsPdf* channel, ParamHistFunc*& paramfunc, RooArgList* gammaList); RooAbsPdf*getSumPdfFromChannel(RooAbsPdf* channel); RooWorkspace*MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement& measurement). Data Members. Class Charts; Function documentation. » Author: George Lewis, Kyle Cranmer » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory.html:787,log,log,787,root/html534/RooStats__HistFactory.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory.html,1,['log'],['log']
Testability,". RooStats::HistFactory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; namespace description; function members; data members; class charts. ROOT; » ROOFIT; » HISTFACTORY; » RooStats::HistFactory. namespace RooStats::HistFactory. Function Members (Methods); public:. stringchannelNameFromPdf(RooAbsPdf* channelPdf); voidFactorizeHistFactoryPdf(const RooArgSet&, RooAbsPdf&, RooArgList&, RooArgList&); voidFitModel(RooWorkspace*, string data_name = ""obsData""); voidFitModelAndPlot(const string& measurementName, const string& fileNamePrefix, RooWorkspace*, string, string, TFile*, FILE*); voidFormatFrameForLikelihood(RooPlot* frame, string xTitle = std::string(""#sigma / #sigma_{SM}""), string yTitle = std::string(""-log likelihood"")); vector<RooStats::HistFactory::EstimateSummary>GetChannelEstimateSummaries(RooStats::HistFactory::Measurement& measurement, RooStats::HistFactory::Channel& channel); voidgetDataValuesForObservables(map<string,vector<double> >& ChannelBinDataMap, RooAbsData* data, RooAbsPdf* simPdf); intgetStatUncertaintyConstraintTerm(RooArgList* constraints, RooRealVar* gamma_stat, RooAbsReal*& pois_mean, RooRealVar*& tau); boolgetStatUncertaintyFromChannel(RooAbsPdf* channel, ParamHistFunc*& paramfunc, RooArgList* gammaList); RooAbsPdf*getSumPdfFromChannel(RooAbsPdf* channel); RooWorkspace*MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement& measurement). Data Members. Class Charts; Function documentation. » Author: George Lewis, Kyle Cranmer » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-06-30 14:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HistFactory.html:811,log,log,811,root/html602/RooStats__HistFactory.html,https://root.cern,https://root.cern/root/html602/RooStats__HistFactory.html,1,['log'],['log']
Testability,". RooStats::HistFactory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; namespace description; function members; data members; class charts. ROOT; » ROOFIT; » HISTFACTORY; » RooStats::HistFactory. namespace RooStats::HistFactory. Function Members (Methods); public:. stringchannelNameFromPdf(RooAbsPdf* channelPdf); voidFactorizeHistFactoryPdf(const RooArgSet&, RooAbsPdf&, RooArgList&, RooArgList&); voidFitModel(RooWorkspace*, string data_name = ""obsData""); voidFitModelAndPlot(const string& measurementName, const string& fileNamePrefix, RooWorkspace*, string, string, TFile*, FILE*); voidFormatFrameForLikelihood(RooPlot* frame, string xTitle = std::string(""#sigma / #sigma_{SM}""), string yTitle = std::string(""-log likelihood"")); vector<RooStats::HistFactory::EstimateSummary>GetChannelEstimateSummaries(RooStats::HistFactory::Measurement& measurement, RooStats::HistFactory::Channel& channel); voidgetDataValuesForObservables(map<string,vector<double> >& ChannelBinDataMap, RooAbsData* data, RooAbsPdf* simPdf); intgetStatUncertaintyConstraintTerm(RooArgList* constraints, RooRealVar* gamma_stat, RooAbsReal*& pois_mean, RooRealVar*& tau); boolgetStatUncertaintyFromChannel(RooAbsPdf* channel, ParamHistFunc*& paramfunc, RooArgList* gammaList); RooAbsPdf*getSumPdfFromChannel(RooAbsPdf* channel); RooWorkspace*MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement& measurement). Data Members. Class Charts; Function documentation. » Author: George Lewis, Kyle Cranmer » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-09-08 17:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooStats__HistFactory.html:811,log,log,811,root/html604/RooStats__HistFactory.html,https://root.cern,https://root.cern/root/html604/RooStats__HistFactory.html,1,['log'],['log']
Testability,". RooStats::HistFactory::RooBarlowBeestonLL. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » HISTFACTORY; » RooStats::HistFactory::RooBarlowBeestonLL. class RooStats::HistFactory::RooBarlowBeestonLL: public RooAbsReal. Class RooBarlowBeestonLL implements the profile likelihood estimator for; a given likelihood and set of parameters of interest. The value return by ; RooBarlowBeestonLL is the input likelihood nll minimized w.r.t all nuisance parameters; (which are all parameters except for those listed in the constructor) minus; the -log(L) of the best fit. Note that this function is slow to evaluate; as a MIGRAD minimization step is executed for each function evaluation; . Function Members (Methods); public:. virtual~RooBarlowBeestonLL(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual lis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__RooBarlowBeestonLL.html:716,log,log,716,root/html534/RooStats__HistFactory__RooBarlowBeestonLL.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__RooBarlowBeestonLL.html,1,['log'],['log']
Testability,". RooStats::HistFactory::RooBarlowBeestonLL. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » HISTFACTORY; » RooStats::HistFactory::RooBarlowBeestonLL. class RooStats::HistFactory::RooBarlowBeestonLL: public RooAbsReal. Class RooBarlowBeestonLL implements the profile likelihood estimator for; a given likelihood and set of parameters of interest. The value return by ; RooBarlowBeestonLL is the input likelihood nll minimized w.r.t all nuisance parameters; (which are all parameters except for those listed in the constructor) minus; the -log(L) of the best fit. Note that this function is slow to evaluate; as a MIGRAD minimization step is executed for each function evaluation; . Function Members (Methods); public:. virtual~RooBarlowBeestonLL(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; virtual list<Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HistFactory__RooBarlowBeestonLL.html:716,log,log,716,root/html602/RooStats__HistFactory__RooBarlowBeestonLL.html,https://root.cern,https://root.cern/root/html602/RooStats__HistFactory__RooBarlowBeestonLL.html,2,['log'],['log']
Testability,". RooStats::HypoTestCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestCalculator. class RooStats::HypoTestCalculator. HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. ; The interface currently assumes that any hypothesis test calculator can be configured by specifying:. a model for the null,; a model for the alternate,; a data set, ; a set of parameters of which specify the null (including values and const/non-const status), and ; a set of parameters of which specify the alternate (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface will be extended so that one does not need to use a workspace. After configuring the calculator, one only needs to ask GetHypoTest, which will return a HypoTestResult pointer. The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~HypoTestCalculator(); static TClass*Class(); virtual RooStats::HypoTestResult*GetHypoTest() const; virtual TClass*IsA() const; RooStats::HypoTestCalculator&operator=(const RooStats::HypoTestCalculator&); virtual voidSetAlternateModel(const RooStats::ModelConfig& model); virtual voidSetCommonModel(const RooStats::ModelConfig& model); virtual voidSetData(RooAbsData& data); virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HypoTestCalculator.html:456,test,test,456,root/html526/RooStats__HypoTestCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__HypoTestCalculator.html,2,['test'],['test']
Testability,". RooStats::HypoTestCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestCalculator. class RooStats::HypoTestCalculator. HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. ; The interface currently assumes that any hypothesis test calculator can be configured by specifying:. a model for the null,; a model for the alternate,; a data set, ; a set of parameters of which specify the null (including values and const/non-const status), and ; a set of parameters of which specify the alternate (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface will be extended so that one does not need to use a workspace. After configuring the calculator, one only needs to ask GetHypoTest, which will return a HypoTestResult pointer. The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~HypoTestCalculator(); static TClass*Class(); virtual RooStats::HypoTestResult*GetHypoTest() const; RooStats::HypoTestCalculatorHypoTestCalculator(); RooStats::HypoTestCalculatorHypoTestCalculator(const RooStats::HypoTestCalculator&); virtual TClass*IsA() const; RooStats::HypoTestCalculator&operator=(const RooStats::HypoTestCalculator&); virtual voidSetAlternateModel(const Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HypoTestCalculator.html:458,test,test,458,root/html602/RooStats__HypoTestCalculator.html,https://root.cern,https://root.cern/root/html602/RooStats__HypoTestCalculator.html,2,['test'],['test']
Testability,". RooStats::HypoTestCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestCalculator. class RooStats::HypoTestCalculator. HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. ; The interface currently assumes that any hypothesis test calculator can be configured by specifying:. a model for the null,; a model for the alternate,; a data set, ; a set of parameters of which specify the null (including values and const/non-const status), and ; a set of parameters of which specify the alternate (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface will be extended so that one does not need to use a workspace. After configuring the calculator, one only needs to ask GetHypoTest, which will return a HypoTestResult pointer. The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~HypoTestCalculator(); static TClass*Class(); virtual RooStats::HypoTestResult*GetHypoTest() const; virtual TClass*IsA() const; RooStats::HypoTestCalculator&operator=(const RooStats::HypoTestCalculator&); virtual voidSetAlternateModel(const RooStats::ModelConfig& model); virtual voidSetCommonModel(const RooStats::ModelConfig& model); virtual voidSetData(RooAbsData& data); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HypoTestCalculator.html:458,test,test,458,root/html530/RooStats__HypoTestCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__HypoTestCalculator.html,3,['test'],['test']
Testability,". RooStats::HypoTestInverter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestInverter. class RooStats::HypoTestInverter: public RooStats::IntervalCalculator, public TNamed. HypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of the; HybridCalculator for various values of the parameter of interest. By looking at the confidence level curve of; the result an upper limit, where it intersects the desired confidence level, can be derived.; The class implements the RooStats::IntervalCalculator interface and returns an RooStats::HypoTestInverterResult class.; The result is a SimpleInterval, which via the method UpperLimit returns to the user the upper limit value. The HypoTestInverter implements various option for performing the scan. HypoTestInverter::RunFixedScan will scan using a fixed grid the parameter of interest. HypoTestInverter::RunAutoScan will perform an automatic scan to find optimally the curve and it will stop until the desired precision is obtained.; The confidence level value at a given point can be done via HypoTestInverter::RunOnePoint.; The class can scan the CLs+b values or alternativly CLs (if the method HypoTestInverter::UseCLs has been called). New contributions to this class have been written by Matthias Wolf (advanced AutoRun algorithm). Function Members (Methods); public:. virtual~HypoTestInverter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HypoTestInverter.html:433,test,test,433,root/html526/RooStats__HypoTestInverter.html,https://root.cern,https://root.cern/root/html526/RooStats__HypoTestInverter.html,2,['test'],['test']
Testability,". RooStats::HypoTestInverter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestInverter. class RooStats::HypoTestInverter: public RooStats::IntervalCalculator. HypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of an; HypoTestCalculator for various values of the parameter of interest. By looking at the confidence level curve of; the result an upper limit, where it intersects the desired confidence level, can be derived.; The class implements the RooStats::IntervalCalculator interface and returns an RooStats::HypoTestInverterResult class.; The result is a SimpleInterval, which via the method UpperLimit returns to the user the upper limit value. The HypoTestInverter implements various option for performing the scan. HypoTestInverter::RunFixedScan will scan using a fixed grid the parameter of interest. HypoTestInverter::RunAutoScan will perform an automatic scan to find optimally the curve and it will stop until the desired precision is obtained.; The confidence level value at a given point can be done via HypoTestInverter::RunOnePoint.; The class can scan the CLs+b values or alternativly CLs (if the method HypoTestInverter::UseCLs has been called). Contributions to this class have been written by Giovanni Petrucciani and Annapaola Decosa. Function Members (Methods); public:. virtual~HypoTestInverter(); static TClass*Class(); voidClear(); virtual Double_tConfidenceLevel() const; RooStats::HypoTestCalculatorGeneric*GetHypoTestCalculator() const; virtual RooStats::HypoTestInverterResult*GetInterval() const; RooStats::SamplingDistribution*GetLowerLimitDistribution(bool rebuild = false, int nToys = 100); RooStats::TestStatistic*GetTestStatistic() const; RooStats::SamplingDistribution*GetUpperLimitDistribution(bool re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HypoTestInverter.html:418,test,test,418,root/html530/RooStats__HypoTestInverter.html,https://root.cern,https://root.cern/root/html530/RooStats__HypoTestInverter.html,10,['test'],['test']
Testability,". RooStats::HypoTestInverter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::HypoTestInverter. class RooStats::HypoTestInverter: public RooStats::IntervalCalculator, public TNamed. HypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of the; HybridCalculator for various values of the parameter of interest. By looking at the confidence level curve of; the result an upper limit, where it intersects the desired confidence level, can be derived.; The class implements the RooStats::IntervalCalculator interface and returns an RooStats::HypoTestInverterResult class.; The result is a SimpleInterval, which via the method UpperLimit returns to the user the upper limit value. The HypoTestInverter implements various option for performing the scan. HypoTestInverter::RunFixedScan will scan using a fixed grid the parameter of interest. HypoTestInverter::RunAutoScan will perform an automatic scan to find optimally the curve and it will stop until the desired precision is obtained.; The confidence level value at a given point can be done via HypoTestInverter::RunOnePoint.; The class can scan the CLs+b values or alternativly CLs (if the method HypoTestInverter::UseCLs has been called). New contributions to this class have been written by Matthias Wolf (advanced AutoRun algorithm). Function Members (Methods); public:. virtual~HypoTestInverter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HypoTestInverter.html:423,test,test,423,root/html528/RooStats__HypoTestInverter.html,https://root.cern,https://root.cern/root/html528/RooStats__HypoTestInverter.html,2,['test'],['test']
Testability,". RooStats::HypoTestInverterOriginal. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestInverterOriginal. class RooStats::HypoTestInverterOriginal: public RooStats::IntervalCalculator, public TNamed. HypoTestInverterOriginal class for performing an hypothesis test inversion by scanning the hypothesis test results of the; HybridCalculator for various values of the parameter of interest. By looking at the confidence level curve of; the result an upper limit, where it intersects the desired confidence level, can be derived.; The class implements the RooStats::IntervalCalculator interface and returns an RooStats::HypoTestInverterResult class.; The result is a SimpleInterval, which via the method UpperLimit returns to the user the upper limit value. The HypoTestInverterOriginal implements various option for performing the scan. HypoTestInverterOriginal::RunFixedScan will scan using a fixed grid the parameter of interest. HypoTestInverterOriginal::RunAutoScan will perform an automatic scan to find optimally the curve and it will stop until the desired precision is obtained.; The confidence level value at a given point can be done via HypoTestInverterOriginal::RunOnePoint.; The class can scan the CLs+b values or alternativly CLs (if the method HypoTestInverterOriginal::UseCLs has been called). New contributions to this class have been written by Matthias Wolf (advanced AutoRun algorithm). Function Members (Methods); public:. virtual~HypoTestInverterOriginal(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HypoTestInverterOriginal.html:465,test,test,465,root/html530/RooStats__HypoTestInverterOriginal.html,https://root.cern,https://root.cern/root/html530/RooStats__HypoTestInverterOriginal.html,10,['test'],['test']
Testability,". RooStats::HypoTestResult. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestResult. class RooStats::HypoTestResult: public TNamed. HypoTestResult is a base class for results from hypothesis tests.; Any tool inheriting from HypoTestCalculator can return a HypoTestResult.; As such, it stores a p-value for the null-hypothesis (eg. background-only) ; and an alternate hypothesis (eg. signal+background). ; The p-values can also be transformed into confidence levels (CLb, CLsplusb) in a trivial way.; The ratio of the CLsplusb to CLb is often called CLs, and is considered useful, though it is ; not a probability.; Finally, the p-value of the null can be transformed into a number of equivalent Gaussian sigma using the ; Significance method. Function Members (Methods); public:. virtual~HypoTestResult(); voidTObject::AbstractMethod(const char* method) const; virtual Double_tAlternatePValue() const; virtual voidAppend(const RooStats::HypoTestResult* other); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual Double_tCLb() const; Double_tCLbError() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Double_tCLs() const; Double_tCLsError() const; virtual Double_tCLsplusb() const; Double_tCLsplusbError() const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HypoTestResult.html:397,test,tests,397,root/html528/RooStats__HypoTestResult.html,https://root.cern,https://root.cern/root/html528/RooStats__HypoTestResult.html,6,['test'],['tests']
Testability,". RooStats::HypoTestResult. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestResult. class RooStats::HypoTestResult: public TNamed. HypoTestResult is an base class for a results from hypothesis tests. ; Any tool inheriting from HypoTestCalculator can return a HypoTestResult.; As such, it stores a p-value for the null-hypothesis (eg. background-only) ; and an alternate hypothesis (eg. signal+background). ; The p-values can also be transformed into confidence levels (CLb, CLsplusb) in a trivial way.; The ratio of the CLsplusb to CLb is often called CLs, and is considered useful, though it is ; not a probability.; Finally, the p-value of the null can be transformed into a number of equivalent Gaussian sigma using the ; Significance method. Function Members (Methods); public:. virtual~HypoTestResult(); voidTObject::AbstractMethod(const char* method) const; virtual Double_tAlternatePValue() const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual Double_tCLb() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Double_tCLs() const; virtual Double_tCLsplusb() const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HypoTestResult.html:400,test,tests,400,root/html526/RooStats__HypoTestResult.html,https://root.cern,https://root.cern/root/html526/RooStats__HypoTestResult.html,1,['test'],['tests']
Testability,". RooStats::IntervalCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::IntervalCalculator. class RooStats::IntervalCalculator. IntervalCalculator is an interface class for a tools which produce RooStats ConfIntervals. ; The interface currently assumes that any interval calculator can be configured by specifying:. a model,; a data set, ; a set of parameters of interest,; a set of nuisance parameters (eg. parameters on which the model depends, but are not of interest), and ; a confidence level or size of the test (eg. rate of Type I error). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface will be extended so that one does not need to use a workspace. After configuring the calculator, one only needs to ask GetInterval, which will return a ConfInterval pointer. The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IntervalCalculator(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual RooStats::ConfInterval*GetInterval() const; virtual TClass*IsA() const; RooStats::IntervalCalculator&operator=(const RooStats::IntervalCalculator&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData&); virtual voidSetModel(const RooStats::ModelConfig&); virtual voidSetTestSize(Double_t size); virtual v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__IntervalCalculator.html:694,test,test,694,root/html526/RooStats__IntervalCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__IntervalCalculator.html,2,['test'],['test']
Testability,". RooStats::IntervalCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::IntervalCalculator. class RooStats::IntervalCalculator. IntervalCalculator is an interface class for a tools which produce RooStats ConfIntervals. ; The interface currently assumes that any interval calculator can be configured by specifying:. a model,; a data set, ; a set of parameters of interest,; a set of nuisance parameters (eg. parameters on which the model depends, but are not of interest), and ; a confidence level or size of the test (eg. rate of Type I error). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface will be extended so that one does not need to use a workspace. After configuring the calculator, one only needs to ask GetInterval, which will return a ConfInterval pointer. The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IntervalCalculator(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual RooStats::ConfInterval*GetInterval() const; RooStats::IntervalCalculatorIntervalCalculator(); RooStats::IntervalCalculatorIntervalCalculator(const RooStats::IntervalCalculator&); virtual TClass*IsA() const; RooStats::IntervalCalculator&operator=(const RooStats::IntervalCalculator&); virtual voidSetConfidenceLevel(Double_t cl)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__IntervalCalculator.html:696,test,test,696,root/html602/RooStats__IntervalCalculator.html,https://root.cern,https://root.cern/root/html602/RooStats__IntervalCalculator.html,2,['test'],['test']
Testability,". RooStats::IntervalCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::IntervalCalculator. class RooStats::IntervalCalculator. IntervalCalculator is an interface class for a tools which produce RooStats ConfIntervals. ; The interface currently assumes that any interval calculator can be configured by specifying:. a model,; a data set, ; a set of parameters of interest,; a set of nuisance parameters (eg. parameters on which the model depends, but are not of interest), and ; a confidence level or size of the test (eg. rate of Type I error). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface will be extended so that one does not need to use a workspace. After configuring the calculator, one only needs to ask GetInterval, which will return a ConfInterval pointer. The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IntervalCalculator(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual RooStats::ConfInterval*GetInterval() const; virtual TClass*IsA() const; RooStats::IntervalCalculator&operator=(const RooStats::IntervalCalculator&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData&); virtual voidSetModel(const RooStats::ModelConfig&); virtual voidSetTestSize(Double_t size); virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__IntervalCalculator.html:696,test,test,696,root/html530/RooStats__IntervalCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__IntervalCalculator.html,3,['test'],['test']
Testability,". RooStats::LikelihoodInterval. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::LikelihoodInterval. class RooStats::LikelihoodInterval: public RooStats::ConfInterval. LikelihoodInterval is a concrete implementation of the RooStats::ConfInterval interface. ; It implements a connected N-dimensional intervals based on the contour of a likelihood ratio.; The boundary of the inteval is equivalent to a MINUIT/MINOS contour about the maximum likelihood estimator; [1].; The interval does not need to be an ellipse (eg. it is not the HESSE error matrix).; The level used to make the contour is the same as that used in MINOS, eg. it uses Wilks' theorem, ; which states that under certain regularity conditions the function -2* log (profile likelihood ratio) is asymptotically distributed as a chi^2 with N-dof, where ; N is the number of parameters of interest. . Note, a boundary on the parameter space (eg. s>= 0) or a degeneracy (eg. mass of signal if Nsig = 0) can lead to violations of the conditions necessary for Wilks' theorem to be true. Also note, one can use any RooAbsReal as the function that will be used in the contour; however, the level of the contour; is based on Wilks' theorem as stated above. References; 1; F. James., Minuit.Long writeup D506, CERN, 1998. Function Members (Methods); public:. virtual~LikelihoodInterval(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCheckParameters(const RooArgSet&) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__LikelihoodInterval.html:922,log,log,922,root/html526/RooStats__LikelihoodInterval.html,https://root.cern,https://root.cern/root/html526/RooStats__LikelihoodInterval.html,6,['log'],['log']
Testability,". RooStats::LikelihoodInterval. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::LikelihoodInterval. class RooStats::LikelihoodInterval: public RooStats::ConfInterval. LikelihoodInterval is a concrete implementation of the RooStats::ConfInterval interface. ; It implements a connected N-dimensional intervals based on the contour of a likelihood ratio.; The boundary of the inteval is equivalent to a MINUIT/MINOS contour about the maximum likelihood estimator; [1].; The interval does not need to be an ellipse (eg. it is not the HESSE error matrix).; The level used to make the contour is the same as that used in MINOS, eg. it uses Wilks' theorem, ; which states that under certain regularity conditions the function -2* log (profile likelihood ratio) is asymptotically distributed as a chi^2 with N-dof, where ; N is the number of parameters of interest. . Note, a boundary on the parameter space (eg. s>= 0) or a degeneracy (eg. mass of signal if Nsig = 0) can lead to violations of the conditions necessary for Wilks' theorem to be true. Also note, one can use any RooAbsReal as the function that will be used in the contour; however, the level of the contour; is based on Wilks' theorem as stated above. References; 1; F. James., Minuit.Long writeup D506, CERN, 1998. Function Members (Methods); public:. virtual~LikelihoodInterval(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCheckParameters(const RooArgSet&) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__LikelihoodInterval.html:912,log,log,912,root/html528/RooStats__LikelihoodInterval.html,https://root.cern,https://root.cern/root/html528/RooStats__LikelihoodInterval.html,1,['log'],['log']
Testability,". RooStats::MinNLLTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::MinNLLTestStat. class RooStats::MinNLLTestStat: public RooStats::TestStatistic. MinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood; function and returns it as a test statistic.; Internaly it operates by delegating to a MinNLLTestStat object. Function Members (Methods); public:. virtual~MinNLLTestStat(); static TClass*Class(); virtual voidEnableDetailedOutput(bool e = true); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& paramsOfInterest); virtual const RooArgSet*GetDetailedOutput() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::MinNLLTestStatMinNLLTestStat(); RooStats::MinNLLTestStatMinNLLTestStat(RooAbsPdf& pdf); RooStats::MinNLLTestStatMinNLLTestStat(const RooStats::MinNLLTestStat& rhs); RooStats::MinNLLTestStat&operator=(const RooStats::MinNLLTestStat& rhs); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; voidSetLOffset(Bool_t flag = kTRUE); voidSetMinimizer(const char* minimizer); voidSetOneSided(Bool_t flag = true); voidSetOneSidedDiscovery(Bool_t flag = true); voidSetPrintLevel(Int_t printlevel); voidSetReuseNLL(Bool_t flag); voidSetStrategy(Int_t strategy); voidSetTolerance(double tol); virtual voidSetVarName(const char* name); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(const RooStats::TestStatistic&). Data Members; private:. RooStats::ProfileLikelihoodTestStat*fProflts. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__MinNLLTestStat.html:448,log,log,448,root/html602/RooStats__MinNLLTestStat.html,https://root.cern,https://root.cern/root/html602/RooStats__MinNLLTestStat.html,4,"['log', 'test']","['log', 'test']"
Testability,". RooStats::MinNLLTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::MinNLLTestStat. class RooStats::MinNLLTestStat: public RooStats::TestStatistic. MinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood; function and returns it as a test statistic.; Internaly it operates by delegating to a MinNLLTestStat object. Function Members (Methods); public:. virtual~MinNLLTestStat(); static TClass*Class(); virtual voidEnableDetailedOutput(bool e = true); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& paramsOfInterest); virtual const RooArgSet*GetDetailedOutput() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::MinNLLTestStatMinNLLTestStat(); RooStats::MinNLLTestStatMinNLLTestStat(RooAbsPdf& pdf); RooStats::MinNLLTestStatMinNLLTestStat(const RooStats::MinNLLTestStat& rhs); RooStats::MinNLLTestStat&operator=(const RooStats::MinNLLTestStat& rhs); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; voidSetLOffset(Bool_t flag = kTRUE); voidSetMinimizer(const char* minimizer); voidSetOneSided(Bool_t flag = true); voidSetOneSidedDiscovery(Bool_t flag = true); voidSetPrintLevel(Int_t printlevel); voidSetReuseNLL(Bool_t flag); voidSetStrategy(Int_t strategy); voidSetTolerance(double tol); virtual voidSetVarName(const char* name); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:. RooStats::ProfileLikelihoodTestStat*fProflts. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinNLLTestStat(); Proof constructor. Do not use. MinNLLTestStat(RooAbsPdf& pdf). MinNLLTestStat(const RooStats::MinNLLTestStat& rhs). MinNLLTestStat & operat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__MinNLLTestStat.html:448,log,log,448,root/html534/RooStats__MinNLLTestStat.html,https://root.cern,https://root.cern/root/html534/RooStats__MinNLLTestStat.html,2,"['log', 'test']","['log', 'test']"
Testability,". RooStats::NeymanConstruction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::NeymanConstruction. class RooStats::NeymanConstruction: public RooStats::IntervalCalculator, public TNamed. NeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests,; performs a NeymanConstruction. ; It produces a RooStats::PointSetInterval, which is a concrete implementation of the ConfInterval interface. . The Neyman Construction is not a uniquely defined statistical technique, it requires that one specify an ordering rule ; or ordering principle, which is usually incoded by choosing a specific test statistic and limits of integration ; (corresponding to upper/lower/central limits). As a result, this class must be configured with the corresponding; information before it can produce an interval. Common configurations, such as the Feldman-Cousins approach, can be ; enforced by other light weight classes. The Neyman Construction considers every point in the parameter space independently, no assumptions are ; made that the interval is connected or of a particular shape. As a result, the PointSetInterval class is used to ; represent the result. The user indicate which points in the parameter space to perform the constrution by providing; a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be considered is factorized and so is the ; creation of the sampling distribution of the test statistic (which is done by a concrete class implementing the DistributionCreator interface). As a result, this class basically just drives the construction by:. using a DistributionCreator to create the SamplingDistribution of a user-defined test statistic for each parameter point of inter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__NeymanConstruction.html:835,test,test,835,root/html526/RooStats__NeymanConstruction.html,https://root.cern,https://root.cern/root/html526/RooStats__NeymanConstruction.html,1,['test'],['test']
Testability,". RooStats::NeymanConstruction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::NeymanConstruction. class RooStats::NeymanConstruction: public RooStats::IntervalCalculator. NeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests,; performs a NeymanConstruction. ; It produces a RooStats::PointSetInterval, which is a concrete implementation of the ConfInterval interface. . The Neyman Construction is not a uniquely defined statistical technique, it requires that one specify an ordering rule ; or ordering principle, which is usually incoded by choosing a specific test statistic and limits of integration ; (corresponding to upper/lower/central limits). As a result, this class must be configured with the corresponding; information before it can produce an interval. Common configurations, such as the Feldman-Cousins approach, can be ; enforced by other light weight classes. The Neyman Construction considers every point in the parameter space independently, no assumptions are ; made that the interval is connected or of a particular shape. As a result, the PointSetInterval class is used to ; represent the result. The user indicate which points in the parameter space to perform the constrution by providing; a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be considered is factorized and so is the ; creation of the sampling distribution of the test statistic (which is done by a concrete class implementing the DistributionCreator interface). As a result, this class basically just drives the construction by:. using a DistributionCreator to create the SamplingDistribution of a user-defined test statistic for each parameter point of interest,; defining ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__NeymanConstruction.html:820,test,test,820,root/html528/RooStats__NeymanConstruction.html,https://root.cern,https://root.cern/root/html528/RooStats__NeymanConstruction.html,6,['test'],['test']
Testability,". RooStats::NumberCountingPdfFactory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::NumberCountingPdfFactory. class RooStats::NumberCountingPdfFactory. A factory for building PDFs and data for a number counting combination. ; The factory produces a PDF for N channels with uncorrelated background ; uncertainty. Correlations can be added by extending this PDF with additional terms.; The factory relates the signal in each channel to a master signal strength times the ; expected signal in each channel. Thus, the final test is performed on the master signal strength.; This yields a more powerful test than letting signal in each channel be independent. The problem has been studied in these references:. http://arxiv.org/abs/physics/0511028; http://arxiv.org/abs/physics/0702156; http://cdsweb.cern.ch/record/1099969?ln=en. One can incorporate uncertainty on the expected signal by adding additional terms.; For the future, perhaps this factory should be extended to include the efficiency terms automatically. Function Members (Methods); public:. virtual~NumberCountingPdfFactory(); voidAddData(Double_t* mainMeas, Double_t* bkgMeas, Double_t* db, Int_t nbins, RooWorkspace* ws, const char* dsName = ""NumberCountingData""); voidAddDataWithSideband(Double_t* mainMeas, Double_t* sideband, Double_t* tau, Int_t nbins, RooWorkspace* ws, const char* dsName = ""ExpectedNumberCountingData""); voidAddExpData(Double_t* sigExp, Double_t* bkgExp, Double_t* db, Int_t nbins, RooWorkspace* ws, const char* dsName = ""ExpectedNumberCountingData""); voidAddExpDataWithSideband(Double_t* sigExp, Double_t* bkgExp, Double_t* tau, Int_t nbins, RooWorkspace* ws, const char* dsName = ""NumberCountingData""); voidAddModel(Double_t* sigExp, Int_t nchan, RooWorkspace* ws, const char* pdfName = ""CombinedPdf"", const char* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__NumberCountingPdfFactory.html:721,test,test,721,root/html526/RooStats__NumberCountingPdfFactory.html,https://root.cern,https://root.cern/root/html526/RooStats__NumberCountingPdfFactory.html,12,['test'],['test']
Testability,". RooStats::NumberCountingPdfFactory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::NumberCountingPdfFactory. class RooStats::NumberCountingPdfFactory. A factory for building PDFs and data for a number counting combination. ; The factory produces a PDF for N channels with uncorrelated background ; uncertainty. Correlations can be added by extending this PDF with additional terms.; The factory relates the signal in each channel to a master signal strength times the ; expected signal in each channel. Thus, the final test is performed on the master signal strength.; This yields a more powerful test than letting signal in each channel be independent. The problem has been studied in these references:. http://arxiv.org/abs/physics/0511028; http://arxiv.org/abs/physics/0702156; http://cdsweb.cern.ch/record/1099969?ln=en. One can incorporate uncertainty on the expected signal by adding additional terms.; For the future, perhaps this factory should be extended to include the efficiency terms automatically. Function Members (Methods); public:. virtual~NumberCountingPdfFactory(); voidAddData(Double_t* mainMeas, Double_t* bkgMeas, Double_t* db, Int_t nbins, RooWorkspace* ws, const char* dsName = ""NumberCountingData""); voidAddDataWithSideband(Double_t* mainMeas, Double_t* sideband, Double_t* tau, Int_t nbins, RooWorkspace* ws, const char* dsName = ""ExpectedNumberCountingData""); voidAddExpData(Double_t* sigExp, Double_t* bkgExp, Double_t* db, Int_t nbins, RooWorkspace* ws, const char* dsName = ""ExpectedNumberCountingData""); voidAddExpDataWithSideband(Double_t* sigExp, Double_t* bkgExp, Double_t* tau, Int_t nbins, RooWorkspace* ws, const char* dsName = ""NumberCountingData""); voidAddModel(Double_t* sigExp, Int_t nchan, RooWorkspace* ws, const char* pdfName = ""CombinedPdf"", const char* masterSign",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__NumberCountingPdfFactory.html:711,test,test,711,root/html528/RooStats__NumberCountingPdfFactory.html,https://root.cern,https://root.cern/root/html528/RooStats__NumberCountingPdfFactory.html,2,['test'],['test']
Testability,". RooStats::NumberCountingUtils. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::NumberCountingUtils. namespace RooStats::NumberCountingUtils. NumberCountingUtils. These are RooStats standalone utilities; that calculate the p-value or Z value (eg. significance in; 1-sided Gaussian standard deviations) for a number counting experiment.; This is a hypothesis test between background only and signal-plus-background.; The background estimate has uncertainty derived from an auxiliary or sideband; measurement. This is based on code and comments from Bob Cousins ; and on the following papers:. Evaluation of three methods for calculating statistical significance when incorporating a; systematic uncertainty into a test of the background-only hypothesis for a Poisson process; Authors: Robert D. Cousins, James T. Linnemann, Jordan Tucker; http://arxiv.org/abs/physics/0702156; NIM A 595 (2008) 480--501. Statistical Challenges for Searches for New Physics at the LHC; Authors: Kyle Cranmer; http://arxiv.org/abs/physics/0511028. Measures of Significance in HEP and Astrophysics; Authors: J. T. Linnemann; http://arxiv.org/abs/physics/0312059. The problem is treated in a fully frequentist fashion by ; interpreting the relative background uncertainty as; being due to an auxiliary or sideband observation ; that is also Poisson distributed with only background.; Finally, one considers the test as a ratio of Poisson means; where an interval is well known based on the conditioning on the total; number of events and the binomial distribution. In short, this is an exact frequentist solution to the problem of; a main measurement x distributed as a Poisson around s+b and a sideband or ; auxiliary measurement y distributed as a Poisson around tau*b. Eg. . Naming conventions:; Exp = Expected; Obs = Observed; P = p-value; Z",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__NumberCountingUtils.html:536,test,test,536,root/html526/RooStats__NumberCountingUtils.html,https://root.cern,https://root.cern/root/html526/RooStats__NumberCountingUtils.html,2,['test'],['test']
Testability,". RooStats::NumberCountingUtils. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::NumberCountingUtils. namespace RooStats::NumberCountingUtils. NumberCountingUtils. These are RooStats standalone utilities; that calculate the p-value or Z value (eg. significance in; 1-sided Gaussian standard deviations) for a number counting experiment.; This is a hypothesis test between background only and signal-plus-background.; The background estimate has uncertainty derived from an auxiliary or sideband; measurement. This is based on code and comments from Bob Cousins ; and on the following papers:. Evaluation of three methods for calculating statistical significance when incorporating a; systematic uncertainty into a test of the background-only hypothesis for a Poisson process; Authors: Robert D. Cousins, James T. Linnemann, Jordan Tucker; http://arxiv.org/abs/physics/0702156; NIM A 595 (2008) 480--501. Statistical Challenges for Searches for New Physics at the LHC; Authors: Kyle Cranmer; http://arxiv.org/abs/physics/0511028. Measures of Significance in HEP and Astrophysics; Authors: J. T. Linnemann; http://arxiv.org/abs/physics/0312059. The problem is treated in a fully frequentist fashion by ; interpreting the relative background uncertainty as; being due to an auxiliary or sideband observation ; that is also Poisson distributed with only background.; Finally, one considers the test as a ratio of Poisson means; where an interval is well known based on the conditioning on the total; number of events and the binomial distribution. In short, this is an exact frequentist solution to the problem of; a main measurement x distributed as a Poisson around s+b and a sideband or ; auxiliary measurement y distributed as a Poisson around tau*b. Eg. . Naming conventions:; Exp = Expected; Obs = Observed; P = p-value; Z = Z-value",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__NumberCountingUtils.html:526,test,test,526,root/html528/RooStats__NumberCountingUtils.html,https://root.cern,https://root.cern/root/html528/RooStats__NumberCountingUtils.html,2,['test'],['test']
Testability,". RooStats::NumberCountingUtils. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::NumberCountingUtils. namespace RooStats::NumberCountingUtils. NumberCountingUtils. These are RooStats standalone utilities; that calculate the p-value or Z value (eg. significance in; 1-sided Gaussian standard deviations) for a number counting experiment.; This is a hypothesis test between background only and signal-plus-background.; The background estimate has uncertainty derived from an auxiliary or sideband; measurement. This is based on code and comments from Bob Cousins ; and on the following papers:. Evaluation of three methods for calculating statistical significance when incorporating a; systematic uncertainty into a test of the background-only hypothesis for a Poisson process; Authors: Robert D. Cousins, James T. Linnemann, Jordan Tucker; http://arxiv.org/abs/physics/0702156; NIM A 595 (2008) 480--501. Statistical Challenges for Searches for New Physics at the LHC; Authors: Kyle Cranmer; http://arxiv.org/abs/physics/0511028. Measures of Significance in HEP and Astrophysics; Authors: J. T. Linnemann; http://arxiv.org/abs/physics/0312059. The problem is treated in a fully frequentist fashion by ; interpreting the relative background uncertainty as; being due to an auxiliary or sideband observation ; that is also Poisson distributed with only background.; Finally, one considers the test as a ratio of Poisson means; where an interval is well known based on the conditioning on the total; number of events and the binomial distribution. In short, this is an exact frequentist solution to the problem of; a main measurement x distributed as a Poisson around s+b and a sideband or ; auxiliary measurement y distributed as a Poisson around tau*b. Eg. . Naming conventions:; Exp = Expected; Obs = Observed; P = p-value;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__NumberCountingUtils.html:538,test,test,538,root/html530/RooStats__NumberCountingUtils.html,https://root.cern,https://root.cern/root/html530/RooStats__NumberCountingUtils.html,6,['test'],['test']
Testability,". RooStats::ProfileLikelihoodCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ProfileLikelihoodCalculator. class RooStats::ProfileLikelihoodCalculator: public RooStats::CombinedCalculator, public TNamed. ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator ; (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals). ; The tool uses the profile likelihood ratio as a test statistic, and assumes that Wilks' theorem is valid. ; Wilks' theorem states that -2* log (profile likelihood ratio) is asymptotically distributed as a chi^2 distribution ; with N-dof, where N is the number of degrees of freedom. Thus, p-values can be constructed and the profile likelihood ratio; can be used to construct a LikelihoodInterval.; (In the future, this class could be extended to use toy Monte Carlo to calibrate the distribution of the test statistic). Usage: It uses the interface of the CombinedCalculator, so that it can be configured by specifying:. a model common model (eg. a family of specific models which includes both the null and alternate),; a data set, ; a set of parameters of interest. The nuisance parameters will be all other parameters of the model ; a set of parameters of which specify the null hypothesis (including values and const/non-const status) . The interface allows one to pass the model, data, and parameters either directly or via a ModelConfig class.; The alternate hypothesis leaves the parameter free to take any value other than those specified by the null hypotesis. There is therefore no need to ; specify the alternate parameters. . After configuring the calculator, one only needs to ask GetHypoTest() (which will return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__ProfileLikelihoodCalculator.html:646,test,test,646,root/html526/RooStats__ProfileLikelihoodCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__ProfileLikelihoodCalculator.html,2,"['log', 'test']","['log', 'test']"
Testability,". RooStats::ProfileLikelihoodCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ProfileLikelihoodCalculator. class RooStats::ProfileLikelihoodCalculator: public RooStats::CombinedCalculator. ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator ; (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals). ; The tool uses the profile likelihood ratio as a test statistic, and assumes that Wilks' theorem is valid. ; Wilks' theorem states that -2* log (profile likelihood ratio) is asymptotically distributed as a chi^2 distribution ; with N-dof, where N is the number of degrees of freedom. Thus, p-values can be constructed and the profile likelihood ratio; can be used to construct a LikelihoodInterval.; (In the future, this class could be extended to use toy Monte Carlo to calibrate the distribution of the test statistic). Usage: It uses the interface of the CombinedCalculator, so that it can be configured by specifying:. a model common model (eg. a family of specific models which includes both the null and alternate),; a data set, ; a set of parameters of interest. The nuisance parameters will be all other parameters of the model ; a set of parameters of which specify the null hypothesis (including values and const/non-const status) . The interface allows one to pass the model, data, and parameters either directly or via a ModelConfig class.; The alternate hypothesis leaves the parameter free to take any value other than those specified by the null hypotesis. There is therefore no need to ; specify the alternate parameters. . After configuring the calculator, one only needs to ask GetHypoTest() (which will return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). Th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__ProfileLikelihoodCalculator.html:631,test,test,631,root/html530/RooStats__ProfileLikelihoodCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__ProfileLikelihoodCalculator.html,10,"['log', 'test']","['log', 'test']"
Testability,". RooStats::ProfileLikelihoodCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::ProfileLikelihoodCalculator. class RooStats::ProfileLikelihoodCalculator: public RooStats::CombinedCalculator. ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator ; (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals). ; The tool uses the profile likelihood ratio as a test statistic, and assumes that Wilks' theorem is valid. ; Wilks' theorem states that -2* log (profile likelihood ratio) is asymptotically distributed as a chi^2 distribution ; with N-dof, where N is the number of degrees of freedom. Thus, p-values can be constructed and the profile likelihood ratio; can be used to construct a LikelihoodInterval.; (In the future, this class could be extended to use toy Monte Carlo to calibrate the distribution of the test statistic). Usage: It uses the interface of the CombinedCalculator, so that it can be configured by specifying:. a model common model (eg. a family of specific models which includes both the null and alternate),; a data set, ; a set of parameters of interest. The nuisance parameters will be all other parameters of the model ; a set of parameters of which specify the null hypothesis (including values and const/non-const status) . The interface allows one to pass the model, data, and parameters either directly or via a ModelConfig class.; The alternate hypothesis leaves the parameter free to take any value other than those specified by the null hypotesis. There is therefore no need to ; specify the alternate parameters. . After configuring the calculator, one only needs to ask GetHypoTest() (which will return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__ProfileLikelihoodCalculator.html:621,test,test,621,root/html528/RooStats__ProfileLikelihoodCalculator.html,https://root.cern,https://root.cern/root/html528/RooStats__ProfileLikelihoodCalculator.html,2,"['log', 'test']","['log', 'test']"
Testability,". RooStats::ProfileLikelihoodTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ProfileLikelihoodTestStat. class RooStats::ProfileLikelihoodTestStat: public RooStats::TestStatistic. ProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile; likelihood ratio at a particular parameter point given a dataset. It does not constitute a statistical test, for that one may either use:. the ProfileLikelihoodCalculator that relies on asymptotic properties of the Profile Likelihood Ratio; the Neyman Construction classes with this class as a test statistic; the Hybrid Calculator class with this class as a test statistic. Function Members (Methods); public:. virtual~ProfileLikelihoodTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& paramsOfInterest); virtual const RooAbsArg*GetTestStatistic() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::TestStatistic&RooStats::TestStatistic::operator=(const RooStats::TestStatistic&); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(RooAbsPdf& pdf); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(const RooStats::ProfileLikelihoodTestStat&); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. const RooArgSet*fCachedBestFitParams; RooAbsData*fLastData; RooNLLVar*fNll; RooAbsPdf*fPdf; RooProfileLL*fProfile. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ProfileLikelihoodTestStat(RooAbsPdf& pdf). virtual ~ProfileLikelihoodTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& data, RooArgSet& paramsOfInterest); Main interface to evaluate the test statistic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__ProfileLikelihoodTestStat.html:572,test,test,572,root/html526/RooStats__ProfileLikelihoodTestStat.html,https://root.cern,https://root.cern/root/html526/RooStats__ProfileLikelihoodTestStat.html,3,['test'],['test']
Testability,". RooStats::ProfileLikelihoodTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::ProfileLikelihoodTestStat. class RooStats::ProfileLikelihoodTestStat: public RooStats::TestStatistic. ProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile; likelihood ratio at a particular parameter point given a dataset. It does not constitute a statistical test, for that one may either use:. the ProfileLikelihoodCalculator that relies on asymptotic properties of the Profile Likelihood Ratio; the Neyman Construction classes with this class as a test statistic; the Hybrid Calculator class with this class as a test statistic. Function Members (Methods); public:. virtual~ProfileLikelihoodTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& paramsOfInterest); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::TestStatistic&RooStats::TestStatistic::operator=(const RooStats::TestStatistic&); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(RooAbsPdf& pdf); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(const RooStats::ProfileLikelihoodTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. const RooArgSet*fCachedBestFitParams; RooAbsData*fLastData; RooNLLVar*fNll; RooAbsPdf*fPdf; RooProfileLL*fProfile. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ProfileLikelihoodTestStat(); Proof constructor. Do not use. ProfileLikelihoodTestStat(RooAbsPdf& pdf). virtual ~ProfileLikelihoodTestStat(); delete fRand;; delete fTestStatistic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__ProfileLikelihoodTestStat.html:562,test,test,562,root/html528/RooStats__ProfileLikelihoodTestStat.html,https://root.cern,https://root.cern/root/html528/RooStats__ProfileLikelihoodTestStat.html,3,['test'],['test']
Testability,". RooStats::ProfileLikelihoodTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ProfileLikelihoodTestStat. class RooStats::ProfileLikelihoodTestStat: public RooStats::TestStatistic. ProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile; likelihood ratio at a particular parameter point given a dataset. It does not constitute a statistical test, for that one may either use:. the ProfileLikelihoodCalculator that relies on asymptotic properties of the Profile Likelihood Ratio; the Neyman Construction classes with this class as a test statistic; the Hybrid Calculator class with this class as a test statistic. Function Members (Methods); public:. virtual~ProfileLikelihoodTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& paramsOfInterest); virtual Double_tEvaluateProfileLikelihood(int type, RooAbsData& data, RooArgSet& paramsOfInterest); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::TestStatistic&RooStats::TestStatistic::operator=(const RooStats::TestStatistic&); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(RooAbsPdf& pdf); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(const RooStats::ProfileLikelihoodTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; static voidSetAlwaysReuseNLL(Bool_t flag); voidSetMinimizer(const char* minimizer); voidSetOneSided(Bool_t flag = true); voidSetPrintLevel(Int_t printlevel); voidSetReuseNLL(Bool_t flag); voidSetStrategy(Int_t strategy); voidSetTolerance(double tol); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. doubleGetMinNLL(int& status). Data",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__ProfileLikelihoodTestStat.html:574,test,test,574,root/html532/RooStats__ProfileLikelihoodTestStat.html,https://root.cern,https://root.cern/root/html532/RooStats__ProfileLikelihoodTestStat.html,3,['test'],['test']
Testability,". RooStats::ProfileLikelihoodTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ProfileLikelihoodTestStat. class RooStats::ProfileLikelihoodTestStat: public RooStats::TestStatistic. ProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile; likelihood ratio at a particular parameter point given a dataset. It does not constitute a statistical test, for that one may either use:. the ProfileLikelihoodCalculator that relies on asymptotic properties of the Profile Likelihood Ratio; the Neyman Construction classes with this class as a test statistic; the Hybrid Calculator class with this class as a test statistic. Function Members (Methods); public:. virtual~ProfileLikelihoodTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& paramsOfInterest); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::TestStatistic&RooStats::TestStatistic::operator=(const RooStats::TestStatistic&); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(RooAbsPdf& pdf); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(const RooStats::ProfileLikelihoodTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; static voidSetAlwaysReuseNLL(Bool_t flag); voidSetOneSided(Bool_t flag = true); voidSetReuseNLL(Bool_t flag); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. const RooArgSet*fCachedBestFitParams; RooAbsData*fLastData; RooNLLVar*fNll!; Bool_tfOneSided; RooAbsPdf*fPdf; RooProfileLL*fProfile!; Bool_tfReuseNll; static Bool_tfgAlwaysReuseNll. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function doc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__ProfileLikelihoodTestStat.html:574,test,test,574,root/html530/RooStats__ProfileLikelihoodTestStat.html,https://root.cern,https://root.cern/root/html530/RooStats__ProfileLikelihoodTestStat.html,3,['test'],['test']
Testability,". RooStats::ProfileLikelihoodTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ProfileLikelihoodTestStat. class RooStats::ProfileLikelihoodTestStat: public RooStats::TestStatistic. ProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile; likelihood ratio at a particular parameter point given a dataset. It does not constitute a statistical test, for that one may either use:. the ProfileLikelihoodCalculator that relies on asymptotic properties of the Profile Likelihood Ratio; the Neyman Construction classes with this class as a test statistic; the Hybrid Calculator class with this class as a test statistic. Function Members (Methods); public:. virtual~ProfileLikelihoodTestStat(); static TClass*Class(); virtual voidEnableDetailedOutput(bool e = true, bool withErrorsAndPulls = false); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& paramsOfInterest); virtual Double_tEvaluateProfileLikelihood(int type, RooAbsData& data, RooArgSet& paramsOfInterest); virtual const RooArgSet*GetDetailedOutput() const; virtual RooAbsPdf*GetPdf() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; boolIsOneSidedDiscovery() const; boolIsTwoSided() const; RooStats::TestStatistic&RooStats::TestStatistic::operator=(const RooStats::TestStatistic&); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(RooAbsPdf& pdf); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(const RooStats::ProfileLikelihoodTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; static voidSetAlwaysReuseNLL(Bool_t flag); virtual voidSetConditionalObservables(const RooArgSet& set); voidSetLOffset(Bool_t flag = kTRUE); voidSetMinimizer(const char* minimizer); voidSe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__ProfileLikelihoodTestStat.html:574,test,test,574,root/html534/RooStats__ProfileLikelihoodTestStat.html,https://root.cern,https://root.cern/root/html534/RooStats__ProfileLikelihoodTestStat.html,3,['test'],['test']
Testability,". RooStats::SamplingDistribution. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::SamplingDistribution. class RooStats::SamplingDistribution: public TNamed. SamplingDistribution :. This class simply holds a sampling distribution of some test statistic.; The distribution can either be an emperical distribution (eg. the samples themselves) or; a weighted set of points (eg. for the FFT method).; The class supports merging. Function Members (Methods); public:. virtual~SamplingDistribution(); voidTObject::AbstractMethod(const char* method) const; voidAdd(RooStats::SamplingDistribution* other); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__SamplingDistribution.html:436,test,test,436,root/html526/RooStats__SamplingDistribution.html,https://root.cern,https://root.cern/root/html526/RooStats__SamplingDistribution.html,1,['test'],['test']
Testability,". RooStats::SamplingDistribution. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::SamplingDistribution. class RooStats::SamplingDistribution: public TNamed. SamplingDistribution :. This class simply holds a sampling distribution of some test statistic.; The distribution can either be an empirical distribution (eg. the samples themselves) or; a weighted set of points (eg. for the FFT method).; The class supports merging. Function Members (Methods); public:. virtual~SamplingDistribution(); voidTObject::AbstractMethod(const char* method) const; voidAdd(const RooStats::SamplingDistribution* other); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tCDF(Double_t x) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__SamplingDistribution.html:436,test,test,436,root/html528/RooStats__SamplingDistribution.html,https://root.cern,https://root.cern/root/html528/RooStats__SamplingDistribution.html,6,['test'],['test']
Testability,". RooStats::SimpleLikelihoodRatioTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::SimpleLikelihoodRatioTestStat. class RooStats::SimpleLikelihoodRatioTestStat: public RooStats::TestStatistic. ; SimpleLikelihoodRatioTestStat: TestStatistic that returns -log(L[null] / L[alt]) where; L is the likelihood.; . Function Members (Methods); public:. virtual~SimpleLikelihoodRatioTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::SimpleLikelihoodRatioTestStat&operator=(const RooStats::SimpleLikelihoodRatioTestStat&); boolParamsAreEqual(); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; voidSetAltParameters(const RooArgSet& altParameters); voidSetNullParameters(const RooArgSet& nullParameters); virtual voidShowMembers(TMemberInspector& insp); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(const RooStats::SimpleLikelihoodRatioTestStat&); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. RooArgSet*fAltParameters; RooAbsPdf*fAltPdf; boolfFirstEval; RooArgSet*fNullParameters; RooAbsPdf*fNullPdf; RooWorkspacew. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleLikelihoodRatioTestStat(). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& al",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__SimpleLikelihoodRatioTestStat.html:425,log,log,425,root/html528/RooStats__SimpleLikelihoodRatioTestStat.html,https://root.cern,https://root.cern/root/html528/RooStats__SimpleLikelihoodRatioTestStat.html,1,['log'],['log']
Testability,". RooStats::SimpleLikelihoodRatioTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::SimpleLikelihoodRatioTestStat. class RooStats::SimpleLikelihoodRatioTestStat: public RooStats::TestStatistic. ; SimpleLikelihoodRatioTestStat: TestStatistic that returns -log(L[null] / L[alt]) where; L is the likelihood.; . Function Members (Methods); public:. virtual~SimpleLikelihoodRatioTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::SimpleLikelihoodRatioTestStat&operator=(const RooStats::SimpleLikelihoodRatioTestStat&); boolParamsAreEqual(); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; voidSetAltParameters(const RooArgSet& altParameters); static voidSetAlwaysReuseNLL(Bool_t flag); voidSetNullParameters(const RooArgSet& nullParameters); voidSetReuseNLL(Bool_t flag); virtual voidShowMembers(TMemberInspector& insp); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(const RooStats::SimpleLikelihoodRatioTestStat&); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. RooArgSet*fAltParameters; RooAbsPdf*fAltPdf; static Bool_tfAlwaysReuseNll; boolfFirstEval; RooNLLVar*fNllAlt! transient copy of the alt NLL; RooNLLVar*fNllNull! transient copy of the null NLL; RooArgSet*fNullParameters; RooAbsPdf*fNullPdf; Bool_tfReuseNll. Class Charts. Inheritance; Inherited M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__SimpleLikelihoodRatioTestStat.html:437,log,log,437,root/html532/RooStats__SimpleLikelihoodRatioTestStat.html,https://root.cern,https://root.cern/root/html532/RooStats__SimpleLikelihoodRatioTestStat.html,1,['log'],['log']
Testability,". RooStats::SimpleLikelihoodRatioTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::SimpleLikelihoodRatioTestStat. class RooStats::SimpleLikelihoodRatioTestStat: public RooStats::TestStatistic. ; SimpleLikelihoodRatioTestStat: TestStatistic that returns -log(L[null] / L[alt]) where; L is the likelihood.; . Function Members (Methods); public:. virtual~SimpleLikelihoodRatioTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::SimpleLikelihoodRatioTestStat&operator=(const RooStats::SimpleLikelihoodRatioTestStat&); boolParamsAreEqual(); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; voidSetAltParameters(const RooArgSet& altParameters); static voidsetAlwaysReuseNLL(Bool_t flag); voidSetNullParameters(const RooArgSet& nullParameters); voidsetReuseNLL(Bool_t flag); virtual voidShowMembers(TMemberInspector& insp); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(const RooStats::SimpleLikelihoodRatioTestStat&); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. RooArgSet*fAltParameters; RooAbsPdf*fAltPdf; static Bool_tfAlwaysReuseNll; boolfFirstEval; RooNLLVar*fNllAlt; RooNLLVar*fNllNull; RooArgSet*fNullParameters; RooAbsPdf*fNullPdf; Bool_tfReuseNll; RooWorkspacew. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__SimpleLikelihoodRatioTestStat.html:437,log,log,437,root/html530/RooStats__SimpleLikelihoodRatioTestStat.html,https://root.cern,https://root.cern/root/html530/RooStats__SimpleLikelihoodRatioTestStat.html,1,['log'],['log']
Testability,". RooStats::SimpleLikelihoodRatioTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::SimpleLikelihoodRatioTestStat. class RooStats::SimpleLikelihoodRatioTestStat: public RooStats::TestStatistic. ; SimpleLikelihoodRatioTestStat: TestStatistic that returns -log(L[null] / L[alt]) where; L is the likelihood.; . Function Members (Methods); public:. virtual~SimpleLikelihoodRatioTestStat(); static TClass*Class(); virtual voidEnableDetailedOutput(bool e = true); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const RooArgSet*GetDetailedOutput() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::SimpleLikelihoodRatioTestStat&operator=(const RooStats::SimpleLikelihoodRatioTestStat&); boolParamsAreEqual(); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; voidSetAltParameters(const RooArgSet& altParameters); static voidSetAlwaysReuseNLL(Bool_t flag); virtual voidSetConditionalObservables(const RooArgSet& set); voidSetNullParameters(const RooArgSet& nullParameters); voidSetReuseNLL(Bool_t flag); virtual voidShowMembers(TMemberInspector&); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(const RooStats::SimpleLikelihoodRatioTestStat&); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:. RooArgSet*fAltParameters; RooAbsPdf*fAltPdf; RooArgSetfConditionalObs; RooArgSet*fDetailedOutput!; boolfDetailedOut",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__SimpleLikelihoodRatioTestStat.html:437,log,log,437,root/html534/RooStats__SimpleLikelihoodRatioTestStat.html,https://root.cern,https://root.cern/root/html534/RooStats__SimpleLikelihoodRatioTestStat.html,1,['log'],['log']
Testability,". RooStats::TestStatistic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::TestStatistic. class RooStats::TestStatistic. TestStatistic is an interface class to provide a facility for construction test statistics; distributions to the NeymanConstruction class. All the actual samplers inherit from this class. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TestStatistic(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::TestStatistic&operator=(const RooStats::TestStatistic&); virtual boolPValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TestStatistic(); TestStatistic();. Double_t Evaluate(RooAbsData& data, RooArgSet& nullPOI); Main interface to evaluate the test statistic on a dataset given the; values for the Null Parameters Of Interest. const TString GetVarName() const. bool PValueIsRightTail(void); Defines the sign convention of the test statistic. Overwrite function if necessary. { return true; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: TestStatistic.h 34109 2010-06-24 15:00:16Z moneta $ » Last generated: 2010-09-23 20:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__TestStatistic.html:369,test,test,369,root/html528/RooStats__TestStatistic.html,https://root.cern,https://root.cern/root/html528/RooStats__TestStatistic.html,3,['test'],['test']
Testability,". RooStats::TestStatistic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::TestStatistic. class RooStats::TestStatistic. TestStatistic is an interface class to provide a facility for construction test statistics; distributions to the NeymanConstruction class. All the actual samplers inherit from this class. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TestStatistic(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& paramsOfInterest); virtual const RooAbsArg*GetTestStatistic() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::TestStatistic&operator=(const RooStats::TestStatistic&); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TestStatistic(); TestStatistic();. {}. Double_t Evaluate(RooAbsData& data, RooArgSet& paramsOfInterest); Main interface to evaluate the test statistic on a dataset. const RooAbsArg* GetTestStatistic() const. const TString GetVarName() const. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: TestStatistic.h 31276 2009-11-18 15:06:42Z moneta $ » Last generated: 2009-12-07 13:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__TestStatistic.html:369,test,test,369,root/html526/RooStats__TestStatistic.html,https://root.cern,https://root.cern/root/html526/RooStats__TestStatistic.html,2,['test'],['test']
Testability,". RooStats::TestStatistic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::TestStatistic. class RooStats::TestStatistic. TestStatistic is an interface class to provide a facility for construction test statistics; distributions to the NeymanConstruction class. All the actual samplers inherit from this class. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TestStatistic(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const RooArgSet*GetDetailedOutput() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::TestStatistic&operator=(const RooStats::TestStatistic&); virtual boolPValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); RooStats::TestStatisticTestStatistic(); RooStats::TestStatisticTestStatistic(const RooStats::TestStatistic&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TestStatistic(); TestStatistic();. Double_t Evaluate(RooAbsData& data, RooArgSet& nullPOI); Main interface to evaluate the test statistic on a dataset given the; values for the Null Parameters Of Interest. const TString GetVarName() const. bool PValueIsRightTail(void); Defines the sign convention of the test statistic. Overwrite function if necessary. { return true; }. const RooArgSet* GetDetailedOutput() const; return detailed output: for fits this can be pulls, processing time, ... The returned pointer will not loose validity until another call to Evaluate. { return NULL; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerk",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__TestStatistic.html:371,test,test,371,root/html602/RooStats__TestStatistic.html,https://root.cern,https://root.cern/root/html602/RooStats__TestStatistic.html,2,['test'],['test']
Testability,". RooStats::TestStatistic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::TestStatistic. class RooStats::TestStatistic. TestStatistic is an interface class to provide a facility for construction test statistics; distributions to the NeymanConstruction class. All the actual samplers inherit from this class. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TestStatistic(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const RooArgSet*GetDetailedOutput() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::TestStatistic&operator=(const RooStats::TestStatistic&); virtual boolPValueIsRightTail() const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TestStatistic(); TestStatistic();. Double_t Evaluate(RooAbsData& data, RooArgSet& nullPOI); Main interface to evaluate the test statistic on a dataset given the; values for the Null Parameters Of Interest. const TString GetVarName() const. bool PValueIsRightTail(void); Defines the sign convention of the test statistic. Overwrite function if necessary. { return true; }. const RooArgSet* GetDetailedOutput() const; return detailed output: for fits this can be pulls, processing time, ... The returned pointer will not loose validity until another call to Evaluate. { return NULL; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__TestStatistic.html:371,test,test,371,root/html534/RooStats__TestStatistic.html,https://root.cern,https://root.cern/root/html534/RooStats__TestStatistic.html,1,['test'],['test']
Testability,". RooStats::TestStatistic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::TestStatistic. class RooStats::TestStatistic. TestStatistic is an interface class to provide a facility for construction test statistics; distributions to the NeymanConstruction class. All the actual samplers inherit from this class. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TestStatistic(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::TestStatistic&operator=(const RooStats::TestStatistic&); virtual boolPValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TestStatistic(); TestStatistic();. Double_t Evaluate(RooAbsData& data, RooArgSet& nullPOI); Main interface to evaluate the test statistic on a dataset given the; values for the Null Parameters Of Interest. const TString GetVarName() const. bool PValueIsRightTail(void); Defines the sign convention of the test statistic. Overwrite function if necessary. { return true; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: TestStatistic.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__TestStatistic.html:371,test,test,371,root/html530/RooStats__TestStatistic.html,https://root.cern,https://root.cern/root/html530/RooStats__TestStatistic.html,3,['test'],['test']
Testability,". RooStats::TestStatistic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::TestStatistic. class RooStats::TestStatistic. TestStatistic is an interface class to provide a facility for construction test statistics; distributions to the NeymanConstruction class. All the actual samplers inherit from this class. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TestStatistic(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::TestStatistic&operator=(const RooStats::TestStatistic&); virtual boolPValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TestStatistic(); TestStatistic();. Double_t Evaluate(RooAbsData& data, RooArgSet& nullPOI); Main interface to evaluate the test statistic on a dataset given the; values for the Null Parameters Of Interest. const TString GetVarName() const. bool PValueIsRightTail(void); Defines the sign convention of the test statistic. Overwrite function if necessary. { return true; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: TestStatistic.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-11-03 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__TestStatistic.html:371,test,test,371,root/html532/RooStats__TestStatistic.html,https://root.cern,https://root.cern/root/html532/RooStats__TestStatistic.html,3,['test'],['test']
Testability,". RooStats::ToyMCSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ToyMCSampler. class RooStats::ToyMCSampler: public RooStats::TestStatSampler. ToyMCSampler is a simple implementation of the TestStatSampler interface.; It generates Toy Monte Carlo for a given parameter point, and evaluates a ; test statistic that the user specifies (passed via the RooStats::TestStatistic interface).; Development notes: We need to provide a nice way for the user to:. specify the number of toy experiments (needed to probe a given confidence level); specify if the number of events per toy experiment should be fixed (conditioning) or floating (unconditional); specify if any auxiliary observations should be fixed (conditioning) or floating (unconditional); specify if nuisance paramters should be part of the toy MC: eg: integrated out (Bayesian marginalization). All of these should be made fairly explicit in the interface. Function Members (Methods); public:. virtual~ToyMCSampler(); virtual RooStats::SamplingDistribution*AppendSamplingDistribution(RooArgSet& allParameters, RooStats::SamplingDistribution* last, Int_t additionalMC); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Double_tEvaluateTestStatistic(RooAbsData& data, RooArgSet& allParameters); virtual RooAbsData*GenerateToyData(RooArgSet& allParameters) const; virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& allParameters); virtual const RooAbsArg*GetTestStatistic() const; virtual voidInitialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; stringMakeName(RooArgSet&); RooStats::TestStatSampler&RooStats::TestStatSampler::operator=(const RooStats::TestStatSampler&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData& data); virtual voidSetData(const char* name); vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__ToyMCSampler.html:476,test,test,476,root/html526/RooStats__ToyMCSampler.html,https://root.cern,https://root.cern/root/html526/RooStats__ToyMCSampler.html,1,['test'],['test']
Testability,". RooStats::ToyMCSamplerOld. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ToyMCSamplerOld. class RooStats::ToyMCSamplerOld: public RooStats::TestStatSampler. ToyMCSamplerOld is a simple implementation of the TestStatSampler interface.; It generates Toy Monte Carlo for a given parameter point, and evaluates a ; test statistic that the user specifies (passed via the RooStats::TestStatistic interface).; Development notes: We need to provide a nice way for the user to:. specify the number of toy experiments (needed to probe a given confidence level); specify if the number of events per toy experiment should be fixed (conditioning) or floating (unconditional); specify if any auxiliary observations should be fixed (conditioning) or floating (unconditional); specify if nuisance paramters should be part of the toy MC: eg: integrated out (Bayesian marginalization). All of these should be made fairly explicit in the interface. Function Members (Methods); public:. virtual~ToyMCSamplerOld(); virtual RooStats::SamplingDistribution*AppendSamplingDistribution(RooArgSet& allParameters, RooStats::SamplingDistribution* last, Int_t additionalMC); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Double_tEvaluateTestStatistic(RooAbsData& data, RooArgSet& allParameters); virtual RooAbsData*GenerateToyData(RooArgSet& allParameters) const; virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& allParameters); virtual RooStats::TestStatistic*GetTestStatistic() const; virtual voidInitialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; stringMakeName(RooArgSet&); RooStats::TestStatSampler&RooStats::TestStatSampler::operator=(const RooStats::TestStatSampler&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData& data); virtual voidSetDat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__ToyMCSamplerOld.html:488,test,test,488,root/html528/RooStats__ToyMCSamplerOld.html,https://root.cern,https://root.cern/root/html528/RooStats__ToyMCSamplerOld.html,1,['test'],['test']
Testability,". RooStats::ToyMCSamplerOld. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ToyMCSamplerOld. class RooStats::ToyMCSamplerOld: public RooStats::TestStatSampler. ToyMCSamplerOld is a simple implementation of the TestStatSampler interface.; It generates Toy Monte Carlo for a given parameter point, and evaluates a ; test statistic that the user specifies (passed via the RooStats::TestStatistic interface).; Development notes: We need to provide a nice way for the user to:. specify the number of toy experiments (needed to probe a given confidence level); specify if the number of events per toy experiment should be fixed (conditioning) or floating (unconditional); specify if any auxiliary observations should be fixed (conditioning) or floating (unconditional); specify if nuisance paramters should be part of the toy MC: eg: integrated out (Bayesian marginalization). All of these should be made fairly explicit in the interface. Function Members (Methods); public:. virtual~ToyMCSamplerOld(); virtual RooStats::SamplingDistribution*AppendSamplingDistribution(RooArgSet& allParameters, RooStats::SamplingDistribution* last, Int_t additionalMC); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Double_tEvaluateTestStatistic(RooAbsData& data, RooArgSet& allParameters); virtual RooAbsData*GenerateToyData(RooArgSet& allParameters) const; virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& allParameters); virtual RooStats::TestStatistic*GetTestStatistic() const; virtual voidInitialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; stringMakeName(RooArgSet&); RooStats::TestStatSampler&RooStats::TestStatSampler::operator=(const RooStats::TestStatSampler&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData& data); virtual voidSetD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__ToyMCSamplerOld.html:490,test,test,490,root/html530/RooStats__ToyMCSamplerOld.html,https://root.cern,https://root.cern/root/html530/RooStats__ToyMCSamplerOld.html,2,['test'],['test']
Testability,". RooUnitTest. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooUnitTest. class RooUnitTest: public TNamed. RooUnit test is an abstract base class for unit regression tests for; RooFit and RooStats tests performed in stressRooFit and stressRooStats; Implementations of this class must implement abstract method testCode(); which defines the regression test to be performed. Inside testCode(); the regression test can define objects on which the regression is performed.; These are; RooPlot - regPlot() ;; RooFitResult - regFitResult() ;; Double_t - regValue() ;; RooTable - regTable() ;; TH1/2/3 - regTH ; RooWorkspace - regWS() ;; ; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooUnitTest(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tareTHidentical(TH1* htest, TH1* href); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearSilentMode(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Double_tctol(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooUnitTest.html:309,test,test,309,root/html534/RooUnitTest.html,https://root.cern,https://root.cern/root/html534/RooUnitTest.html,21,['test'],"['test', 'testCode', 'tests']"
Testability,". RootTalk Digest | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Support RootTalk Digest. This mailing list is used to keep you up to date about important ROOT events (new releases, urgent bug fixes, etc.). This li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/roottalk-digest.html:713,test,tests,713,d/roottalk-digest.html,https://root.cern,https://root.cern/d/roottalk-digest.html,1,['test'],['tests']
Testability,". RootTalk: [ROOT] ROOT version 3.00/01 tar files now available. [ROOT] ROOT version 3.00/01 tar files now available. From: Rene Brun (Rene.Brun@cern.ch); Date: Fri Dec 22 2000 - 15:01:04 MET. Next message: Rene Brun: ""Re: [ROOT] Kolmogorow test on weighted histos""; Previous message: Rene Brun: ""[ROOT] Re:"". Messages sorted by:; [ date ]; [ thread ]; [ subject ]; [ author ]. Root version 3.00/01 source and binary tar files are now available.; For more information, see:. http://root.cern.ch/; http://root.cern.ch/root/html/examples/V3.00.txt.html; http://root.cern.ch/root/SchemaEvolution.html. We are expecting to close this version around end of January.; The final version 3.00 will include a full support for STL in the new I/O; scheme and a symmetric behaviour between split and non-split mode for; the Trees. It is our intention to discontinue the support for the old HP-UX CC compiler.; The Makefile will still be provided but not the binary file.; With this version, we have added support for RedHat 7.0 and Solaris 6; with CC5.0. As soon as we have access to a Solaris 8 machine, we will also; support the corresponding binaries. CERN is closing this evening until January 8. We take this opportunity; to wish you and your family a Merry Christmas and a happy new Year 2001. Rene & Fons. Next message: Rene Brun: ""Re: [ROOT] Kolmogorow test on weighted histos""; Previous message: Rene Brun: ""[ROOT] Re:"". Messages sorted by:; [ date ]; [ thread ]; [ subject ]; [ author ]. This archive was generated by hypermail 2b29 ; : Tue Jan 02 2001 - 11:50:40 MET. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/roottalk/roottalk00/3518.html:241,test,test,241,root/roottalk/roottalk00/3518.html,https://root.cern,https://root.cern/root/roottalk/roottalk00/3518.html,2,['test'],['test']
Testability,". Run the tests | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Run the tests. Running the ROOT battery of tests; Running all ROOT tests on at least a platform before sending a PR or before pushing anyth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/run-tests.html:10,test,tests,10,d/run-tests.html,https://root.cern,https://root.cern/d/run-tests.html,2,['test'],['tests']
Testability,". Shifter's Instructions | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Shifter's Instructions. These are the aspects the shifter shall keep under control; The shifter summarises the events of the week ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/shifters-instructions.html:720,test,tests,720,d/shifters-instructions.html,https://root.cern,https://root.cern/d/shifters-instructions.html,1,['test'],['tests']
Testability,". Showing results with ROOT | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » First Steps With ROOT Showing results with ROOT. The ROOT framework consists of many classes, grouped into several categories. Finally, the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/showing-results-root.html:723,test,tests,723,d/showing-results-root.html,https://root.cern,https://root.cern/d/showing-results-root.html,1,['test'],['tests']
Testability,". Simulation in ROOT | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » First Steps With ROOT Simulation in ROOT. The ROOT framework consists of many classes, grouped into several categories. Finally, the latter are gr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/simulation-root.html:716,test,tests,716,d/simulation-root.html,https://root.cern,https://root.cern/d/simulation-root.html,1,['test'],['tests']
Testability,". Support | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome Support. Top level support is what makes ROOT a success. We do our utmost to solve any issues as soon as possible. To make this task as efficient as possible f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/support.html:705,test,tests,705,d/support.html,https://root.cern,https://root.cern/d/support.html,1,['test'],['tests']
Testability,". TAxisEditor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GED; » TAxisEditor. class TAxisEditor: public TGedFrame. TAxisEditor. Implements GUI for axis attributes.; axis color; ticks parameters: length, setting on both axis sides,; logarithmic or linear scale along the selected axis,; primary, secondary and tertiary axis divisions,; setting more logarithmic labels,; optimizing labels' position if available; axis title - a title can be added via the text entry field; and can be set to be centered or rotated via the corresponding; check buttons, the title color, offset, font can be set easily; axis labels - their color, size, offset can be set similarly,; in addition there is a check box for no exponent choice,; and another one for setting the same decimal part for all labels //. /*. */. Function Members (Methods); public:. TAxisEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual~TAxisEditor(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tTGedFrame::AcceptModel(TObject*); virtual voidTGFrame::Activate(Bool_t); virtual voidTGedFrame::ActivateBaseClassEditors(TClass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAxisEditor.html:411,log,logarithmic,411,root/html526/TAxisEditor.html,https://root.cern,https://root.cern/root/html526/TAxisEditor.html,10,['log'],['logarithmic']
Testability,". TAxisEditor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GED; » TAxisEditor. class TAxisEditor: public TGedFrame. TAxisEditor. Implements GUI for axis attributes.; axis color; ticks parameters: length, setting on both axis sides,; logarithmic or linear scale along the selected axis,; primary, secondary and tertiary axis divisions,; setting more logarithmic labels,; optimizing labels' position if available; axis title - a title can be added via the text entry field; and can be set to be centered or rotated via the corresponding; check buttons, the title color, offset, font can be set easily; axis labels - their color, size, offset can be set similarly,; in addition there is a check box for no exponent choice,; and another one for setting the same decimal part for all labels //. /*. */. Function Members (Methods); public:. virtual~TAxisEditor(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tTGedFrame::AcceptModel(TObject*); virtual voidTGFrame::Activate(Bool_t); virtual voidTGedFrame::ActivateBaseClassEditors(TClass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TAxisEditor.html:411,log,logarithmic,411,root/html602/TAxisEditor.html,https://root.cern,https://root.cern/root/html602/TAxisEditor.html,4,['log'],['logarithmic']
Testability,". TBenchmark. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TBenchmark. class TBenchmark: public TNamed. TBenchmark. This class is a ROOT utility to help benchmarking applications. Function Members (Methods); public:. TBenchmark(); virtual~TBenchmark(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetBench(const char* name) const; Float_tGetCpuTime(const char* name); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TBenchmark.html:339,benchmark,benchmarking,339,root/html534/TBenchmark.html,https://root.cern,https://root.cern/root/html534/TBenchmark.html,1,['benchmark'],['benchmarking']
Testability,". TBenchmark. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TBenchmark. class TBenchmark: public TNamed. TBenchmark. This class is a ROOT utility to help benchmarking applications. Function Members (Methods); public:. virtual~TBenchmark(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetBench(const char* name) const; Float_tGetCpuTime(const char* name); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBenchmark.html:339,benchmark,benchmarking,339,root/html602/TBenchmark.html,https://root.cern,https://root.cern/root/html602/TBenchmark.html,2,['benchmark'],['benchmarking']
Testability,". TBenchmark. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TBenchmark. class TBenchmark: public TNamed. This class is a ROOT utility to help benchmarking applications. Examples of use of this class are given in the tutorials macros. Function Members (Methods); public:. TBenchmark(); virtual~TBenchmark(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetBench(const char* name) const; Float_tGetCpuTime(const char* name); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBenchmark.html:327,benchmark,benchmarking,327,root/html526/TBenchmark.html,https://root.cern,https://root.cern/root/html526/TBenchmark.html,4,['benchmark'],['benchmarking']
Testability,". TBits. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TBits. class TBits: public TObject. TBits. Container of bits. This class provides a simple container of bits.; Each bit can be set and tested via the functions SetBitNumber and; TestBitNumber. .; The default value of all bits is kFALSE.; The size of the container is automatically extended when a bit; number is either set or tested. To reduce the memory size of the; container use the Compact function, this will discard the memory; occupied by the upper bits that are 0. Function Members (Methods); public:. TBits(UInt_t nbits = 8); TBits(const TBits&); virtual~TBits(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidCompact(); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; UInt_tCountBits(UInt_t startBit = 0) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBits.html:375,test,tested,375,root/html526/TBits.html,https://root.cern,https://root.cern/root/html526/TBits.html,10,['test'],['tested']
Testability,". TBits. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TBits. class TBits: public TObject. TBits. Container of bits. This class provides a simple container of bits.; Each bit can be set and tested via the functions SetBitNumber and; TestBitNumber. .; The default value of all bits is kFALSE.; The size of the container is automatically extended when a bit; number is either set or tested. To reduce the memory size of the; container use the Compact function, this will discard the memory; occupied by the upper bits that are 0. Function Members (Methods); public:. virtual~TBits(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidCompact(); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; UInt_tCountBits(UInt_t startBit = 0) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::Fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBits.html:375,test,tested,375,root/html602/TBits.html,https://root.cern,https://root.cern/root/html602/TBits.html,4,['test'],['tested']
Testability,". TBits::TReference. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TBits::TReference. class TBits::TReference. TBits. Container of bits. This class provides a simple container of bits.; Each bit can be set and tested via the functions SetBitNumber and; TestBitNumber. .; The default value of all bits is kFALSE.; The size of the container is automatically extended when a bit; number is either set or tested. To reduce the memory size of the; container use the Compact function, this will discard the memory; occupied by the upper bits that are 0. Function Members (Methods); public:. ~TReference(); Bool_toperator bool() const; TBits::TReference&operator=(Bool_t val); TBits::TReference&operator=(const TBits::TReference& rhs); Bool_toperator~() const; TBits::TReferenceTReference(const TBits::TReference&); TBits::TReferenceTReference(TBits& bit, UInt_t pos). private:. TBits::TReferenceTReference(). Data Members; private:. TBits&fBits!; UInt_tfPos!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBits::TReference& operator=(Bool_t val); For b[i] = val. TBits::TReference& operator=(const TBits::TReference& rhs); For b[i] = b[__j]. Bool_t operator~() const; Flips the bit. TReference(). TReference(TBits& bit, UInt_t pos); { }. ~TReference(); { }. » Author: Philippe Canal 05/02/01 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last generated: 2015-06-30 14:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBits__TReference.html:395,test,tested,395,root/html602/TBits__TReference.html,https://root.cern,https://root.cern/root/html602/TBits__TReference.html,2,['test'],['tested']
Testability,". TBits::TReference. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TBits::TReference. class TBits::TReference. TBits. Container of bits. This class provides a simple container of bits.; Each bit can be set and tested via the functions SetBitNumber and; TestBitNumber. .; The default value of all bits is kFALSE.; The size of the container is automatically extended when a bit; number is either set or tested. To reduce the memory size of the; container use the Compact function, this will discard the memory; occupied by the upper bits that are 0. Function Members (Methods); public:. ~TReference(); Bool_toperator bool() const; TBits::TReference&operator=(Bool_t val); TBits::TReference&operator=(const TBits::TReference& rhs); Bool_toperator~() const; TBits::TReferenceTReference(const TBits::TReference&); TBits::TReferenceTReference(TBits& bit, UInt_t pos). private:. TBits::TReferenceTReference(). Data Members; private:. TBits&fBits!; UInt_tfPos!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBits::TReference& operator=(Bool_t val); For b[i] = val. TBits::TReference& operator=(const TBits::TReference& rhs); For b[i] = b[__j]. Bool_t operator~() const; Flips the bit. TReference(). TReference(TBits& bit, UInt_t pos); { }. ~TReference(); { }. » Author: Philippe Canal 05/02/01 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last generated: 2015-09-08 17:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TBits__TReference.html:395,test,tested,395,root/html604/TBits__TReference.html,https://root.cern,https://root.cern/root/html604/TBits__TReference.html,2,['test'],['tested']
Testability,". TClassEdit. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » CORE; » METAUTILS; » TClassEdit. namespace TClassEdit. Function Members (Methods); public:. stringCleanType(const char* typeDesc, int mode = 0, const char** tail = 0); stringGetLong64_Name(const string& original); intGetSplit(const char* type, vector<std::string>& output, int& nestedLoc); stringInsertStd(const char* tname); boolIsDefAlloc(const char* alloc, const char* classname); boolIsDefAlloc(const char* alloc, const char* keyclassname, const char* valueclassname); boolIsDefComp(const char* comp, const char* classname); boolIsStdClass(const char* type); boolIsSTLBitset(const char* type); intIsSTLCont(const char* type, int testAlloc = 0); boolIsVectorBool(const char* name); stringResolveTypedef(const char* tname, bool resolveAll = false); stringShortType(const char* typeDesc, int mode); intSTLArgs(int kind); intSTLKind(const char* type). Data Members. Class Charts; Function documentation; std::string CleanType(const char* typeDesc, int mode = 0, const char** tail = 0). bool IsDefAlloc(const char* alloc, const char* classname). bool IsDefAlloc(const char* alloc, const char* keyclassname, const char* valueclassname). bool IsDefComp(const char* comp, const char* classname). bool IsSTLBitset(const char* type). int IsSTLCont(const char* type, int testAlloc = 0). bool IsStdClass(const char* type). bool IsVectorBool(const char* name). std::string GetLong64_Name(const string& original). int GetSplit(const char* type, vector<std::string>& output, int& nestedLoc). int STLKind(const char* type). int STLArgs(int kind). std::string ResolveTypedef(const char* tname, bool resolveAll = false). std::string ShortType(const char* typeDesc, int mode). std::string InsertStd(const char* tname). » Author: Victor Perev 10/04/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClassEdit.html:840,test,testAlloc,840,root/html526/TClassEdit.html,https://root.cern,https://root.cern/root/html526/TClassEdit.html,1,['test'],['testAlloc']
Testability,". TClassEdit. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » CORE; » METAUTILS; » TClassEdit. namespace TClassEdit. Function Members (Methods); public:. stringCleanType(const char* typeDesc, int mode = 0, const char** tail = 0); stringGetLong64_Name(const string& original); intGetSplit(const char* type, vector<std::string>& output, int& nestedLoc, TClassEdit::EModType mode = TClassEdit::kNone); stringInsertStd(const char* tname); boolIsDefAlloc(const char* alloc, const char* classname); boolIsDefAlloc(const char* alloc, const char* keyclassname, const char* valueclassname); boolIsDefComp(const char* comp, const char* classname); boolIsStdClass(const char* type); boolIsSTLBitset(const char* type); intIsSTLCont(const char* type, int testAlloc = 0); boolIsVectorBool(const char* name); stringResolveTypedef(const char* tname, bool resolveAll = false); stringShortType(const char* typeDesc, int mode); intSTLArgs(int kind); intSTLKind(const char* type). Data Members. Class Charts; Function documentation; int IsSTLCont(int testAlloc=0). void ShortType(const char* typeDesc, int mode). std::string CleanType(const char* typeDesc, int mode = 0, const char** tail = 0). bool IsDefAlloc(const char* alloc, const char* classname). bool IsDefAlloc(const char* alloc, const char* keyclassname, const char* valueclassname). bool IsDefComp(const char* comp, const char* classname). bool IsSTLBitset(const char* type). bool IsStdClass(const char* type). bool IsVectorBool(const char* name). std::string GetLong64_Name(const string& original). int GetSplit(const char* type, vector<std::string>& output, int& nestedLoc, TClassEdit::EModType mode = TClassEdit::kNone). int STLKind(const char* type). int STLArgs(int kind). std::string ResolveTypedef(const char* tname, bool resolveAll = false). std::string InsertStd(const char* tname). » Author: Victor Perev ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TClassEdit.html:887,test,testAlloc,887,root/html528/TClassEdit.html,https://root.cern,https://root.cern/root/html528/TClassEdit.html,1,['test'],['testAlloc']
Testability,". TClassEdit. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » CORE; » METAUTILS; » TClassEdit. namespace TClassEdit. Function Members (Methods); public:. stringCleanType(const char* typeDesc, int mode = 0, const char** tail = 0); stringGetLong64_Name(const char* original); stringGetLong64_Name(const string& original); intGetSplit(const char* type, vector<std::string>& output, int& nestedLoc, TClassEdit::EModType mode = TClassEdit::kNone); stringInsertStd(const char* tname); boolIsDefAlloc(const char* alloc, const char* classname); boolIsDefAlloc(const char* alloc, const char* keyclassname, const char* valueclassname); boolIsDefComp(const char* comp, const char* classname); boolIsStdClass(const char* type); boolIsSTLBitset(const char* type); intIsSTLCont(const char* type, int testAlloc = 0); boolIsVectorBool(const char* name); stringResolveTypedef(const char* tname, bool resolveAll = false); stringShortType(const char* typeDesc, int mode); intSTLArgs(int kind); intSTLKind(const char* type). Data Members. Class Charts; Function documentation; int IsSTLCont(int testAlloc=0). void ShortType(const char* typeDesc, int mode). std::string CleanType(const char* typeDesc, int mode = 0, const char** tail = 0). bool IsDefAlloc(const char* alloc, const char* classname). bool IsDefAlloc(const char* alloc, const char* keyclassname, const char* valueclassname). bool IsDefComp(const char* comp, const char* classname). bool IsSTLBitset(const char* type). bool IsStdClass(const char* type). bool IsVectorBool(const char* name). std::string GetLong64_Name(const char* original). std::string GetLong64_Name(const string& original). int GetSplit(const char* type, vector<std::string>& output, int& nestedLoc, TClassEdit::EModType mode = TClassEdit::kNone). int STLKind(const char* type). int STLArgs(int kind). std::string ResolveTypedef(const char* tn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TClassEdit.html:933,test,testAlloc,933,root/html534/TClassEdit.html,https://root.cern,https://root.cern/root/html534/TClassEdit.html,1,['test'],['testAlloc']
Testability,". TClassEdit. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » CORE; » METAUTILS; » TClassEdit. namespace TClassEdit. Function Members (Methods); public:. stringCleanType(const char* typeDesc, int mode = 0, const char** tail = 0); stringGetLong64_Name(const string& original); intGetSplit(const char* type, vector<std::string>& output, int& nestedLoc, TClassEdit::EModType mode = TClassEdit::kNone); stringInsertStd(const char* tname); boolIsDefAlloc(const char* alloc, const char* classname); boolIsDefAlloc(const char* alloc, const char* keyclassname, const char* valueclassname); boolIsDefComp(const char* comp, const char* classname); boolIsStdClass(const char* type); boolIsSTLBitset(const char* type); intIsSTLCont(const char* type, int testAlloc = 0); boolIsVectorBool(const char* name); stringResolveTypedef(const char* tname, bool resolveAll = false); stringShortType(const char* typeDesc, int mode); intSTLArgs(int kind); intSTLKind(const char* type). Data Members. Class Charts; Function documentation; int IsSTLCont(int testAlloc=0). void ShortType(const char* typeDesc, int mode). std::string CleanType(const char* typeDesc, int mode = 0, const char** tail = 0). bool IsDefAlloc(const char* alloc, const char* classname). bool IsDefAlloc(const char* alloc, const char* keyclassname, const char* valueclassname). bool IsDefComp(const char* comp, const char* classname). bool IsSTLBitset(const char* type). bool IsStdClass(const char* type). bool IsVectorBool(const char* name). std::string GetLong64_Name(const string& original). int GetSplit(const char* type, vector<std::string>& output, int& nestedLoc, TClassEdit::EModType mode = TClassEdit::kNone). int STLKind(const char* type). int STLArgs(int kind). std::string ResolveTypedef(const char* tname, bool resolveAll = false). std::string InsertStd(const char* tname). » Author: Victor Pere",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TClassEdit.html:889,test,testAlloc,889,root/html530/TClassEdit.html,https://root.cern,https://root.cern/root/html530/TClassEdit.html,2,['test'],['testAlloc']
Testability,". TClassEdit. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; namespace description; function members; data members; class charts. ROOT; » CORE; » METAUTILS; » TClassEdit. namespace TClassEdit. Function Members (Methods); public:. stringCleanType(const char* typeDesc, int mode = 0, const char** tail = 0); char*DemangleName(const char* mangled_name, int& errorCode); char*DemangleTypeIdName(const type_info& ti, int& errorCode); TClassEdit::EComplexTypeGetComplexType(const char*); stringGetLong64_Name(const char* original); stringGetLong64_Name(const string& original); voidGetNormalizedName(string& norm_name, const char* name); intGetSplit(const char* type, vector<string>& output, int& nestedLoc, TClassEdit::EModType mode = TClassEdit::kNone); const char*GetUnqualifiedName(const char* name); voidInit(TClassEdit::TInterpreterLookupHelper* helper); stringInsertStd(const char* tname); boolIsDefAlloc(const char* alloc, const char* classname); boolIsDefAlloc(const char* alloc, const char* keyclassname, const char* valueclassname); boolIsDefComp(const char* comp, const char* classname); boolIsInterpreterDetail(const char* type); boolIsStdClass(const char* type); boolIsSTLBitset(const char* type); ROOT::ESTLTypeIsSTLCont(const char* type); intIsSTLCont(const char* type, int testAlloc); boolIsVectorBool(const char* name); stringResolveTypedef(const char* tname, bool resolveAll = false); stringShortType(const char* typeDesc, int mode); intSTLArgs(int kind); ROOT::ESTLTypeSTLKind(const char* type, size_t len = 0). Data Members. Class Charts; Function documentation; void Init(TClassEdit::TInterpreterLookupHelper* helper). ROOT::ESTLType STLKind(const char* type, size_t len = 0); Converts STL container name to number. vector -> 1, etc..; If len is greater than 0, only look at that many characters in the string. int STLArgs(int kind); Return number of arguments for STL container before allo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClassEdit.html:1379,test,testAlloc,1379,root/html602/TClassEdit.html,https://root.cern,https://root.cern/root/html602/TClassEdit.html,1,['test'],['testAlloc']
Testability,". TCut. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TCut. class TCut: public TNamed. TCut. A specialized string object used for TTree selections.; A TCut object has a name and a title. It does not add any data; members compared to a TNamed. It only add a set of operators to; facilitate logical string concatenation. For example, assume; cut1 = ""x<1"" and cut2 = ""y>2""; then; cut1 && cut2 will be the string ""(x<1)&&(y>2)"". Operators =, +=, +, *, !, &&, || overloaded. Examples of use:; Root > TCut c1 = ""x<1""; Root > TCut c2 = ""y<0""; Root > TCut c3 = c1&&c2; Root > ntuple.Draw(""x"", c1); Root > ntuple.Draw(""x"", c1||""x>0""); Root > ntuple.Draw(""x"", c1&&c2); Root > ntuple.Draw(""x"", ""(x+y)""*(c1&&c2)). Function Members (Methods); public:. TCut(); TCut(const char* title); TCut(const TCut& cut); TCut(const char* name, const char* title); virtual~TCut(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCut.html:474,log,logical,474,root/html526/TCut.html,https://root.cern,https://root.cern/root/html526/TCut.html,5,['log'],['logical']
Testability,". TCut. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TCut. class TCut: public TNamed. TCut. A specialized string object used for TTree selections.; A TCut object has a name and a title. It does not add any data; members compared to a TNamed. It only add a set of operators to; facilitate logical string concatenation. For example, assume; cut1 = ""x<1"" and cut2 = ""y>2""; then; cut1 && cut2 will be the string ""(x<1)&&(y>2)"". Operators =, +=, +, *, !, &&, || overloaded. Examples of use:; Root > TCut c1 = ""x<1""; Root > TCut c2 = ""y<0""; Root > TCut c3 = c1&&c2; Root > ntuple.Draw(""x"", c1); Root > ntuple.Draw(""x"", c1||""x>0""); Root > ntuple.Draw(""x"", c1&&c2); Root > ntuple.Draw(""x"", ""(x+y)""*(c1&&c2)). Function Members (Methods); public:. virtual~TCut(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TCut.html:474,log,logical,474,root/html602/TCut.html,https://root.cern,https://root.cern/root/html602/TCut.html,2,['log'],['logical']
Testability,". TDSet. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TDSet. class TDSet: public TNamed. TDSet. This class implements a data set to be used for PROOF processing.; The TDSet defines the class of which objects will be processed,; the directory in the file where the objects of that type can be; found and the list of files to be processed. The files can be; specified as logical file names (LFN's) or as physical file names; (PFN's). In case of LFN's the resolution to PFN's will be done; according to the currently active GRID interface.; Examples:; TDSet treeset(""TTree"", ""AOD"");; treeset.Add(""lfn:/alien.cern.ch/alice/prod2002/file1"");. treeset.AddFriend(friendset);. or. TDSet objset(""MyEvent"", ""*"", ""/events"");; objset.Add(""root://cms.cern.ch/user/prod2002/hprod_1.root"");. objset.Add(set2003);. Validity of file names will only be checked at processing time; (typically on the PROOF master server), not at creation time. Function Members (Methods); public:. TDSet(); TDSet(const TChain& chain, Bool_t withfriends = kTRUE); TDSet(const char* name, const char* objname = ""*"", const char* dir = ""/"", const char* type = 0); virtual~TDSet(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tAdd(TDSet* set); virtual Bool_tAdd(TFileInfo* fileinfo, const char* meta = 0); virtual Bool_tAdd(TCollection* fileinfo, const char* meta = 0, Bool_t availableOnly = kFALSE, TCollection* badlist = 0); virtual Bool_tAdd(const char* file, const char* objname = 0, const char* dir = 0, Long64_t first = 0, Long64_t num = -1, const char* msd = 0); virtual voidAddFriend(TDSet* friendset, const char* alias); voidAddInput(TObject* obj); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDSet.html:557,log,logical,557,root/html528/TDSet.html,https://root.cern,https://root.cern/root/html528/TDSet.html,4,['log'],['logical']
Testability,". TDSet. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TDSet. class TDSet: public TNamed. TDSet. This class implements a data set to be used for PROOF processing.; The TDSet defines the class of which objects will be processed,; the directory in the file where the objects of that type can be; found and the list of files to be processed. The files can be; specified as logical file names (LFN's) or as physical file names; (PFN's). In case of LFN's the resolution to PFN's will be done; according to the currently active GRID interface.; Examples:; TDSet treeset(""TTree"", ""AOD"");; treeset.Add(""lfn:/alien.cern.ch/alice/prod2002/file1"");. treeset.AddFriend(friendset);. or. TDSet objset(""MyEvent"", ""*"", ""/events"");; objset.Add(""root://cms.cern.ch/user/prod2002/hprod_1.root"");. objset.Add(set2003);. Validity of file names will only be checked at processing time; (typically on the PROOF master server), not at creation time. Function Members (Methods); public:. virtual~TDSet(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tAdd(TDSet* set); virtual Bool_tAdd(TFileInfo* fileinfo, const char* meta = 0); virtual Bool_tAdd(TCollection* fileinfo, const char* meta = 0, Bool_t availableOnly = kFALSE, TCollection* badlist = 0); virtual Bool_tAdd(const char* file, const char* objname = 0, const char* dir = 0, Long64_t first = 0, Long64_t num = -1, const char* msd = 0); virtual voidAddFriend(TDSet* friendset, const char* alias); voidAddInput(TObject* obj); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidClearInput(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDSet.html:557,log,logical,557,root/html602/TDSet.html,https://root.cern,https://root.cern/root/html602/TDSet.html,2,['log'],['logical']
Testability,". TDSetElement. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TDSetElement. class TDSetElement: public TNamed. TDSet. This class implements a data set to be used for PROOF processing.; The TDSet defines the class of which objects will be processed,; the directory in the file where the objects of that type can be; found and the list of files to be processed. The files can be; specified as logical file names (LFN's) or as physical file names; (PFN's). In case of LFN's the resolution to PFN's will be done; according to the currently active GRID interface.; Examples:; TDSet treeset(""TTree"", ""AOD"");; treeset.Add(""lfn:/alien.cern.ch/alice/prod2002/file1"");. treeset.AddFriend(friendset);. or. TDSet objset(""MyEvent"", ""*"", ""/events"");; objset.Add(""root://cms.cern.ch/user/prod2002/hprod_1.root"");. objset.Add(set2003);. Validity of file names will only be checked at processing time; (typically on the PROOF master server), not at creation time. Function Members (Methods); public:. TDSetElement(); TDSetElement(const TDSetElement& elem); TDSetElement(const char* file, const char* objname = 0, const char* dir = 0, Long64_t first = 0, Long64_t num = -1, const char* msd = 0, const char* dataset = 0); virtual~TDSetElement(); voidTObject::AbstractMethod(const char* method) const; voidAddAssocObj(TObject* assocobj); virtual voidAddFriend(TDSetElement* friendElement, const char* alias); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """"",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDSetElement.html:578,log,logical,578,root/html528/TDSetElement.html,https://root.cern,https://root.cern/root/html528/TDSetElement.html,4,['log'],['logical']
Testability,". TDSetElement. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TDSetElement. class TDSetElement: public TNamed. TDSet. This class implements a data set to be used for PROOF processing.; The TDSet defines the class of which objects will be processed,; the directory in the file where the objects of that type can be; found and the list of files to be processed. The files can be; specified as logical file names (LFN's) or as physical file names; (PFN's). In case of LFN's the resolution to PFN's will be done; according to the currently active GRID interface.; Examples:; TDSet treeset(""TTree"", ""AOD"");; treeset.Add(""lfn:/alien.cern.ch/alice/prod2002/file1"");. treeset.AddFriend(friendset);. or. TDSet objset(""MyEvent"", ""*"", ""/events"");; objset.Add(""root://cms.cern.ch/user/prod2002/hprod_1.root"");. objset.Add(set2003);. Validity of file names will only be checked at processing time; (typically on the PROOF master server), not at creation time. Function Members (Methods); public:. virtual~TDSetElement(); voidTObject::AbstractMethod(const char* method) const; voidAddAssocObj(TObject* assocobj); virtual voidAddFriend(TDSetElement* friendElement, const char* alias); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDeleteFriends(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDSetElement.html:578,log,logical,578,root/html602/TDSetElement.html,https://root.cern,https://root.cern/root/html602/TDSetElement.html,2,['log'],['logical']
Testability,". TDocParser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » TDocParser. class TDocParser: public TObject. Parse C++ source or header, and extract documentation. Also handles special macros like. Picture; Source. {; TGMainFrame* f = new TGMainFrame(0, 100, 100);; f->SetName(""testMainFrame""); // that's part of the name of the image; TGButton* b = new TGTextButton(f, ""Test Button"");; f->AddFrame(b);; f->MapSubwindows();; f->Resize(f->GetDefaultSize());. f->MapWindow();; return f; // *HIDE*; } ; or multiline Latex aligned at =:. ; even without alignment:; and what about running an external macro?. Picture; Source. TObject* testmacro(); {. TH1* h = new TH1F(""h"", ""h"", 100, 0., 1.);; h->FillRandom(""gaus"",10000);; TCanvas* c=new TCanvas(""c"",""c"");; h->Draw();. return c;; }. and some nested stuff which doesn't work yet: . /* BEGIN_LATEX Wow,^{an}_{image}^{inside}_{a}^{html}_{block}; END_LATEX; */; . Function Members (Methods); public:. virtual~TDocParser(); voidTObject::AbstractMethod(const char* method) const; static voidAnchorFromLine(const TString& line, TString& anchor); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidConvert(ostream& out, istream& in, const char* relpath, Bool_t isCode, Bool_t interpretDirectives); virtual voidTObject::Copy(TObject& object) const; virtual voidDecorateKeywords(TString& text); virtual voidDecorateKeywords(ostream& out, const char* text); voidDecrementMethodCount(const char* name); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDeleteDirectiveOutput() const; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDocParser.html:452,test,testMainFrame,452,root/html602/TDocParser.html,https://root.cern,https://root.cern/root/html602/TDocParser.html,4,['test'],"['testMainFrame', 'testmacro']"
Testability,". TDocParser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » TDocParser. class TDocParser: public TObject. Parse C++ source or header, and extract documentation. Also handles special macros like. Picture; Source. {; TGMainFrame* f = new TGMainFrame(0, 100, 100);; f->SetName(""testMainFrame""n c's part of the name of the image; TGButton* b = new TGTextButton(f, ""Test Button"");; f->AddFrame(b);; f->MapSubwindows();; f->Resize(f->GetDefaultSize());. f->MapWindow();; return f; ; } ; or multiline Latex aligned at =:. ; even without alignment:; and what about running an external macro?. Picture; Source. TObject* testmacro() ; {; ; TH1* h = new TH1F(""h"", ""h"", 100, 0., 1.);; h->FillRandom(""gaus"",10000);; TCanvas* c=new TCanvas(""c"",""c"");; h->Draw();; ; return c;; }. and some nested stuff which doesn't work yet: . /* BEGIN_LATEX Wow,^{an}_{image}^{inside}_{a}^{html}_{block}; END_LATEX; */; . Function Members (Methods); public:. TDocParser(TDocOutput& docOutput); TDocParser(TClassDocOutput& docOutput, TClass* cl); virtual~TDocParser(); voidTObject::AbstractMethod(const char* method) const; static voidAnchorFromLine(const TString& line, TString& anchor); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidConvert(ostream& out, istream& in, const char* relpath, Bool_t isCode, Bool_t interpretDirectives); virtual voidTObject::Copy(TObject& object) const; virtual voidDecorateKeywords(TString& text); virtual voidDecorateKeywords(ostream& out, const char* text); voidDecrementMethodCount(const char* name); virtual voidTObject::Delete(O",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDocParser.html:452,test,testMainFrame,452,root/html528/TDocParser.html,https://root.cern,https://root.cern/root/html528/TDocParser.html,6,['test'],"['testMainFrame', 'testmacro']"
Testability,". TExec. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TExec. class TExec: public TNamed. TExec is a utility class that can be used to execute a CINT command; when some event happens in a pad.; The command in turn can invoke a CINT macro to paint graphics objects; at positions depending on the histogram or graph contents. Case 1:. The TExec object is in the list of pad primitives (after exec.Draw()).; When the pad is drawn, the TExec::Paint function is called. This function; will execute the specified command.; The following example uses the services of the class Aclock created; in $ROOTSYS/test/Aclock.cxx.; This examples uses a TTimer to redraw a pad at regular intervals (clock).; When the clock is updated, a string with the current date&time is drawn.; {; gSystem->Load(""$ROOTSYS/test/Aclock"");; Aclock ck(400);; gPad->SetFillColor(5);; TDatime dt;; TText t(.5,.3,""t"");; t.SetTextAlign(22);; t.SetTextSize(.07);; t.SetTextColor(4);; t.Draw();; TExec ex(""ex"",""dt.Set();t.SetTitle(dt.AsString())"");; ex.Draw();; }. Case 2:. The TExec object may be added to the list of functions of a TH1 or TGraph; object via hist->GetListOfFunctions()->Add(exec).; When the histogram (or graph) is drawn, the TExec will be executed.; If the histogram is made persistent on a file, the TExec object; is also saved with the histogram. When redrawing the histogram in a; new session, the TExec will be executed.; Example:; Assume an histogram TH1F *h already filled.; TExec *ex1 = new TExec(""ex1"",""DoSomething()"");; TExec *ex2 = new TExec(""ex2"","".x macro.C"");; h->GetListOfFunctions()->Add(ex1);; h->GetListOfFunctions()->Add(ex2);; h->Draw();; When the Paint function for the histogram will be called, the ""DoSomething""; function will be called (interpreted or compiled) and also the macro.C. Case 3:. A TExec object is aut",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TExec.html:783,test,test,783,root/html528/TExec.html,https://root.cern,https://root.cern/root/html528/TExec.html,6,['test'],['test']
Testability,". TFFTComplexReal. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » FFTW; » TFFTComplexReal. class TFFTComplexReal: public TVirtualFFT. TFFTComplexReal. One of the interface classes to the FFTW package, can be used directly; or via the TVirtualFFT class. Only the basic interface of FFTW is implemented. Computes the inverse of the real-to-complex transforms (class TFFTRealComplex); taking complex input (storing the non-redundant half of a logically Hermitian array); to real output (see FFTW manual for more details). How to use it:; 1) Create an instance of TFFTComplexReal - this will allocate input and output; arrays (unless an in-place transform is specified); 2) Run the Init() function with the desired flags and settings; 3) Set the data (via SetPoints(), SetPoint() or SetPointComplex() functions); 4) Run the Transform() function; 5) Get the output (via GetPoints(), GetPoint() or GetPointReal() functions); 6) Repeat steps 3)-5) as needed. For a transform of the same size, but with different flags, rerun the Init(); function and continue with steps 3)-5); NOTE: 1) running Init() function will overwrite the input array! Don't set any data; before running the Init() function; 2) FFTW computes unnormalized transform, so doing a transform followed by; its inverse will lead to the original array scaled by the transform size. 3) In Complex to Real transform the input array is destroyed. It cannot then; be retrieved when using the Get's methods. Function Members (Methods); public:. TFFTComplexReal(); TFFTComplexReal(const TFFTComplexReal&); TFFTComplexReal(Int_t n, Bool_t inPlace); TFFTComplexReal(Int_t ndim, Int_t* n, Bool_t inPlace); virtual~TFFTComplexReal(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrow",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFFTComplexReal.html:616,log,logically,616,root/html528/TFFTComplexReal.html,https://root.cern,https://root.cern/root/html528/TFFTComplexReal.html,4,['log'],['logically']
Testability,". TFFTComplexReal. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » FFTW; » TFFTComplexReal. class TFFTComplexReal: public TVirtualFFT. TFFTComplexReal. One of the interface classes to the FFTW package, can be used directly; or via the TVirtualFFT class. Only the basic interface of FFTW is implemented. Computes the inverse of the real-to-complex transforms (class TFFTRealComplex); taking complex input (storing the non-redundant half of a logically Hermitian array); to real output (see FFTW manual for more details). How to use it:; 1) Create an instance of TFFTComplexReal - this will allocate input and output; arrays (unless an in-place transform is specified); 2) Run the Init() function with the desired flags and settings; 3) Set the data (via SetPoints(), SetPoint() or SetPointComplex() functions); 4) Run the Transform() function; 5) Get the output (via GetPoints(), GetPoint() or GetPointReal() functions); 6) Repeat steps 3)-5) as needed. For a transform of the same size, but with different flags, rerun the Init(); function and continue with steps 3)-5); NOTE: 1) running Init() function will overwrite the input array! Don't set any data; before running the Init() function; 2) FFTW computes unnormalized transform, so doing a transform followed by; its inverse will lead to the original array scaled by the transform size. 3) In Complex to Real transform the input array is destroyed. It cannot then; be retrieved when using the Get's methods. Function Members (Methods); public:. virtual~TFFTComplexReal(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFFTComplexReal.html:616,log,logically,616,root/html602/TFFTComplexReal.html,https://root.cern,https://root.cern/root/html602/TFFTComplexReal.html,2,['log'],['logically']
Testability,". TFileIter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MISC; » TABLE; » TFileIter. class TFileIter: public TListIter. Class to iterate (read / write ) the events written to TFile.; The event is supposed to assign an unique ID in form of. TKey <event Id> ::= eventName ""."" run_number ""."" event_number. and stored as the TKey name of the object written. void TesTFileIter(){; // This macros tests the various methods of TFileIter class.; gSystem->Load(""libTable"");. //First create simple ROOT file; TDataSet *ds = new TDataSet(""event"");; TObject *nextObject = 0;; TRandom run;; TRandom event;; {; TFileIter outSet(""test.root"",""RECREATE"");; UInt_t totalEvent = 10;; UInt_t runNumber = 20010301;; Int_t i=0;; Int_t j=0;; for (;j < 10;j++) {; for (i = 1;i<totalEvent;i++) {; outSet.NextEventPut(ds,UInt_t(i),UInt_t(runNumber+j+10*run.Rndm()-5));; }; }; }; printf("" ----------------------> TFile has been created <--------------------\n"");; TFile *f = new TFile(""test.root"");; TFileIter readObj(f);; // the number of the object available directly from ""MyDataSet.root""; Int_t size = readObj.TotalKeys();; printf("" The total number of the objects: %d\n"",size);. //-----------------------------------------------------------------------; // Loop over all objects, read them in to memory one by one. printf("" -- > Loop over all objects, read them in to memory one by one < -- \n"");; for( readObj = 0; int(readObj) < size; ++readObj){; nextObject = *readObj;; printf("" %d bytes of the object \""%s\"" of class \""%s\"" written with TKey \""%s\"" has been read from file\n""; ,readObj.GetObjlen(); ,nextObject->GetName(); ,nextObject->IsA()->GetName(); ,(const char *)readObj; );; delete nextObject;; }; //-----------------------------------------------------------------------; // Now loop over all objects in inverse order; printf("" -- > Now lo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFileIter.html:562,test,tests,562,root/html528/TFileIter.html,https://root.cern,https://root.cern/root/html528/TFileIter.html,12,['test'],"['test', 'tests']"
Testability,". TGLBoundingBox. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLBoundingBox. class TGLBoundingBox. TGLBoundingBox. Concrete class describing an orientated (free) or axis aligned box; of 8 verticies. Supports methods for setting aligned or orientated; boxes, find volume, axes, extents, centers, face planes etc.; Also tests for overlap testing of planes and other bounding boxes,; with fast sphere approximation. Function Members (Methods); public:. TGLBoundingBox(); TGLBoundingBox(const TGLVertex3* vertex); TGLBoundingBox(const Double_t** vertex); TGLBoundingBox(const TGLBoundingBox& other); TGLBoundingBox(const TGLVertex3& lowVertex, const TGLVertex3& highVertex); virtual~TGLBoundingBox(); const TGLVector3&Axis(UInt_t i, Bool_t normalised = kTRUE) const; TGLVertex3Center() const; static TClass*Class(); Double_tDiagonal() const; voidDraw(Bool_t solid = kFALSE) const; voidDump() const; voidExpandAligned(const TGLVertex3& point); TGLVector3Extents() const; const vector<UInt_t>&FaceVertices(TGLBoundingBox::EFace face) const; TGLPlaneGetNearPlane() const; virtual TClass*IsA() const; Bool_tIsEmpty() const; TGLVertex3MaxAAVertex() const; voidMergeAligned(const TGLBoundingBox& other); TGLVertex3MinAAVertex() const; Int_tNumVertices() const; TGLBoundingBox&operator=(const TGLBoundingBox& other); const TGLVertex3&operator[](UInt_t index) const; EOverlapOverlap(const TGLPlane& plane) const; EOverlapOverlap(const TGLBoundingBox& box) const; voidPlaneSet(TGLPlaneSet_t& planeSet) const; voidScale(Double_t factor); voidScale(Double_t xFactor, Double_t yFactor, Double_t zFactor); voidSet(const TGLVertex3* vertex); voidSet(const Double_t** vertex); voidSet(const TGLBoundingBox& other); voidSetAligned(const TGLVertex3& lowVertex, const TGLVertex3& highVertex); voidSetAligned(UInt_t nbPnts, const Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLBoundingBox.html:506,test,tests,506,root/html528/TGLBoundingBox.html,https://root.cern,https://root.cern/root/html528/TGLBoundingBox.html,6,['test'],"['testing', 'tests']"
Testability,". TGLBoundingBox. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLBoundingBox. class TGLBoundingBox. TGLBoundingBox. Concrete class describing an orientated (free) or axis aligned box; of 8 verticies. Supports methods for setting aligned or orientated; boxes, find volume, axes, extents, centers, face planes etc.; Also tests for overlap testing of planes and other bounding boxes,; with fast sphere approximation. Function Members (Methods); public:. TGLBoundingBox(); TGLBoundingBox(const TGLVertex3* vertex); TGLBoundingBox(const Double_t** vertex); TGLBoundingBox(const TGLBoundingBox& other); TGLBoundingBox(const TGLVertex3& lowVertex, const TGLVertex3& highVertex); virtual~TGLBoundingBox(); const TGLVector3&Axis(UInt_t i, Bool_t normalised = kTRUE) const; TGLVertex3Center() const; static TClass*Class(); Double_tDiagonal() const; voidDraw(Bool_t solid = kFALSE) const; voidDump() const; voidExpandAligned(const TGLVertex3& point); TGLVector3Extents() const; const vector<UInt_t>&FaceVertices(TGLBoundingBox::EFace face) const; TGLPlaneGetNearPlane() const; virtual TClass*IsA() const; Bool_tIsEmpty() const; TGLVertex3MaxAAVertex() const; voidMergeAligned(const TGLBoundingBox& other); TGLVertex3MinAAVertex() const; Int_tNumVertices() const; TGLBoundingBox&operator=(const TGLBoundingBox& other); const TGLVertex3&operator[](UInt_t index) const; Rgl::EOverlapOverlap(const TGLPlane& plane) const; Rgl::EOverlapOverlap(const TGLBoundingBox& box) const; voidPlaneSet(TGLPlaneSet_t& planeSet) const; voidScale(Double_t factor); voidScale(Double_t xFactor, Double_t yFactor, Double_t zFactor); voidSet(const TGLVertex3* vertex); voidSet(const Double_t** vertex); voidSet(const TGLBoundingBox& other); voidSetAligned(const TGLVertex3& lowVertex, const TGLVertex3& highVertex); voidSetAligned(UInt_t nbPnts, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLBoundingBox.html:506,test,tests,506,root/html534/TGLBoundingBox.html,https://root.cern,https://root.cern/root/html534/TGLBoundingBox.html,2,['test'],"['testing', 'tests']"
Testability,". TGLBoundingBox. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLBoundingBox. class TGLBoundingBox. TGLBoundingBox. Concrete class describing an orientated (free) or axis aligned box; of 8 verticies. Supports methods for setting aligned or orientated; boxes, find volume, axes, extents, centers, face planes etc.; Also tests for overlap testing of planes and other bounding boxes,; with fast sphere approximation. Function Members (Methods); public:. virtual~TGLBoundingBox(); const TGLVector3&Axis(UInt_t i, Bool_t normalised = kTRUE) const; TGLVertex3Center() const; static TClass*Class(); Double_tDiagonal() const; voidDraw(Bool_t solid = kFALSE) const; voidDump() const; voidExpandAligned(const TGLVertex3& point); TGLVector3Extents() const; const vector<UInt_t>&FaceVertices(TGLBoundingBox::EFace face) const; TGLPlaneGetNearPlane() const; virtual TClass*IsA() const; Bool_tIsEmpty() const; TGLVertex3MaxAAVertex() const; voidMergeAligned(const TGLBoundingBox& other); TGLVertex3MinAAVertex() const; Int_tNumVertices() const; TGLBoundingBox&operator=(const TGLBoundingBox& other); const TGLVertex3&operator[](UInt_t index) const; Rgl::EOverlapOverlap(const TGLPlane& plane) const; Rgl::EOverlapOverlap(const TGLBoundingBox& box) const; voidPlaneSet(TGLPlaneSet_t& planeSet) const; voidScale(Double_t factor); voidScale(Double_t xFactor, Double_t yFactor, Double_t zFactor); voidSet(const TGLVertex3[8] vertex); voidSet(const Double_t[8][3] vertex); voidSet(const TGLBoundingBox& other); voidSetAligned(const TGLVertex3& lowVertex, const TGLVertex3& highVertex); voidSetAligned(UInt_t nbPnts, const Double_t* pnts); voidSetEmpty(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLBoundingBox(); TGLBoundingBo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLBoundingBox.html:506,test,tests,506,root/html602/TGLBoundingBox.html,https://root.cern,https://root.cern/root/html602/TGLBoundingBox.html,4,['test'],"['testing', 'tests']"
Testability,". TGLCamera. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLCamera. class TGLCamera. TGLCamera. Abstract base camera class - concrete classes for orthographic and; persepctive cameras derive from it. This class maintains values for; the current:; i) Viewport; ii) Projection, modelview and clip matricies - extracted from GL; iii) The 6 frustum planes; iv) Expanded frustum interest box. It provides methods for various projection, overlap and intersection; tests for viewport and world locations, against the true frustum and; expanded interest box, and for extracting eye position and direction. It also defines the pure virtual manipulation interface methods the; concrete ortho and prespective classes must implement. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGLCamera(); Bool_tAdjustAndClampVal(Double_t& val, Double_t min, Double_t max, Int_t screenShift, Int_t screenShiftRange, Bool_t mod1, Bool_t mod2) const; Double_tAdjustDelta(Double_t screenShift, Double_t deltaFactor, Bool_t mod1, Bool_t mod2) const; virtual voidApply(const TGLBoundingBox& sceneBox, const TGLRect* pickRect = 0) const; static TClass*Class(); virtual voidConfigure(Double_t zoom, Double_t dolly, Double_t* center, Double_t hRotate, Double_t vRotate); virtual Bool_tDolly(Int_t delta, Bool_t mod1, Bool_t mod2); voidDrawDebugAids() const; TGLVector3EyeDirection() const; TGLVertex3EyePoint() const; TGLVertex3FrustumCenter() const; EOverlapFrustumOverlap(const TGLBoundingBox& box) const; const TGLPlane&FrustumPlane(TGLCamera::EFrustumPlane plane) const; const TGLMatrix&GetCamBase() const; const TGLMatrix&GetCamTrans() const; Double_t*GetCenterVec(); Bool_tGetExternalCenter(); Double_tGetFarCli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLCamera.html:645,test,tests,645,root/html528/TGLCamera.html,https://root.cern,https://root.cern/root/html528/TGLCamera.html,3,['test'],['tests']
Testability,". TGLCamera. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLCamera. class TGLCamera: public TObject. TGLCamera. Abstract base camera class - concrete classes for orthographic and; persepctive cameras derive from it. This class maintains values for; the current:; i) Viewport; ii) Projection, modelview and clip matricies - extracted from GL; iii) The 6 frustum planes; iv) Expanded frustum interest box. It provides methods for various projection, overlap and intersection; tests for viewport and world locations, against the true frustum and; expanded interest box, and for extracting eye position and direction. It also defines the pure virtual manipulation interface methods the; concrete ortho and prespective classes must implement. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGLCamera(); voidTObject::AbstractMethod(const char* method) const; Bool_tAdjustAndClampVal(Double_t& val, Double_t min, Double_t max, Int_t screenShift, Int_t screenShiftRange, Bool_t mod1, Bool_t mod2) const; Double_tAdjustDelta(Double_t screenShift, Double_t deltaFactor, Bool_t mod1, Bool_t mod2) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidApply(const TGLBoundingBox& sceneBox, const TGLRect* pickRect = 0) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidConfigure(Double_t zoom, Double_t dolly, Double_t* center, Double_t hRotate, Double_t vRotate); virtual voidTObject::Copy(TObject& object) const; virtual voidTObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLCamera.html:661,test,tests,661,root/html534/TGLCamera.html,https://root.cern,https://root.cern/root/html534/TGLCamera.html,1,['test'],['tests']
Testability,". TGLCamera. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLCamera. class TGLCamera: public TObject. TGLCamera. Abstract base camera class - concrete classes for orthographic and; persepctive cameras derive from it. This class maintains values for; the current:; i) Viewport; ii) Projection, modelview and clip matricies - extracted from GL; iii) The 6 frustum planes; iv) Expanded frustum interest box. It provides methods for various projection, overlap and intersection; tests for viewport and world locations, against the true frustum and; expanded interest box, and for extracting eye position and direction. It also defines the pure virtual manipulation interface methods the; concrete ortho and prespective classes must implement. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGLCamera(); voidTObject::AbstractMethod(const char* method) const; Bool_tAdjustAndClampVal(Double_t& val, Double_t min, Double_t max, Int_t screenShift, Int_t screenShiftRange, Bool_t mod1, Bool_t mod2) const; Double_tAdjustDelta(Double_t screenShift, Double_t deltaFactor, Bool_t mod1, Bool_t mod2) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidApply(const TGLBoundingBox& sceneBox, const TGLRect* pickRect = 0) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidConfigure(Double_t zoom, Double_t dolly, Double_t[3] center, Double_t hRotate, Double_t vRotate); virtual voidTObject::Copy(TObject& object) const; virtual voidTO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLCamera.html:661,test,tests,661,root/html602/TGLCamera.html,https://root.cern,https://root.cern/root/html602/TGLCamera.html,2,['test'],['tests']
Testability,". TGLHistPainter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLHistPainter. class TGLHistPainter: public TVirtualHistPainter. The histogram painter class using OpenGL; Histograms are, by default, drawn via the THistPainter class.; TGLHistPainter allows to paint them using the OpenGL 3D graphics; library. The plotting options provided by TGLHistPainter start with; GL keyword.; General information: plot types and supported options; The following types of plots are provided:. Lego - (TGLLegoPainter); The supported options are:; ; ""GLLEGO"" : Draw a lego plot.; ""GLLEGO2"" : Bins with color levels.; ""GLLEGO3"" : Cylindrical bars.; ; Lego painter in cartesian supports logarithmic scales for X, Y, Z.; In polar only Z axis can be logarithmic, in cylindrical only Y (if you see; what it means).; Surfaces (TF2 and TH2 with ""GLSURF"" options) - (TGLSurfacePainter); The supported options are:; ; ""GLSURF"" : Draw a surface.; ""GLSURF1"" : Surface with color levels; ""GLSURF2"" : The same as ""GLSURF1"" but without polygon outlines.; ""GLSURF3"" : Color level projection on top of plot (works only in cartesian coordinate system).; ""GLSURF4"" : Same as ""GLSURF"" but without polygon outlines.; ; The surface painting in cartesian coordinates supports logarithmic scales along X, Y, Z axis.; In polar coordinates only the Z axis can be logarithmic, in cylindrical coordinates only the Y axis.; Additional options to SURF and LEGO - Coordinate systems:; The supported options are:; ; "" "" : Default, cartesian coordinates system.; ""POL"" : Polar coordinates system.; ""CYL"" : Cylindrical coordinates system.; ""SPH"" : Spherical coordinates system.; ; TH3 as boxes (spheres) - (TGLBoxPainter); The supported options are:; ; ""GLBOX"" : TH3 as a set of boxes, size of box is proportional to bin content.; ""GLBOX1"": the same as ""glbox"", ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLHistPainter.html:857,log,logarithmic,857,root/html528/TGLHistPainter.html,https://root.cern,https://root.cern/root/html528/TGLHistPainter.html,12,['log'],['logarithmic']
Testability,". TGLLogicalShape. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLLogicalShape. class TGLLogicalShape. Abstract logical shape - a GL 'drawable' - base for all shapes -; faceset sphere etc. Logical shapes are a unique piece of geometry,; described in it's local frame - e.g if we have three spheres in :; Sphere A - Radius r1, center v1; Sphere B - Radius r2, center v2; Sphere C - Radius r1, center v3. Spheres A and C can share a common logical sphere of radius r1 - and; place them with two physicals with translations of v1 & v2. Sphere B; requires a different logical (radius r2), placed with physical with; translation v2. Physical shapes know about and can share logicals. Logicals do not; about (aside from reference counting) physicals or share them. This sharing of logical shapes greatly reduces memory consumption and; scene (re)build times in typical detector geometries which have many; repeated objects placements. TGLLogicalShapes have reference counting, performed by the client; physical shapes which are using it. Display list information is also stored here, possibly per LOD; level. Most classes do not support LOD (only sphere and tube) and; therefore reasonable defaults are encoded in the following virtual; functions:. * ELODAxes SupportedLODAxes() { return kLODAxesNone; }; * Int_t DLCacheSize() { return 1; }; * UInt_t DLOffset(lod); // Transform lod into DL offset.; * Short_t QuantizeShapeLOD(); // Quantize lod. Classes that have per-LOD display-lists than override these functions.; 'UShort_t fDLValid' is used as a bit-field determining validity of; each quantized LOD-level; hopefully one will not have more than 16; LOD levels per class.; See also: TGLPhysicalShape::CalculateShapeLOD() where LOD is calculated. See base/src/TVirtualViewer3D for description of common external 3D; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLLogicalShape.html:299,log,logical,299,root/html532/TGLLogicalShape.html,https://root.cern,https://root.cern/root/html532/TGLLogicalShape.html,16,['log'],"['logical', 'logicals']"
Testability,". TGLLogicalShape. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLLogicalShape. class TGLLogicalShape. Abstract logical shape - a GL 'drawable' - base for all shapes -; faceset sphere etc. Logical shapes are a unique piece of geometry,; described in it's local frame - e.g if we have three spheres in :; Sphere A - Radius r1, center v1; Sphere B - Radius r2, center v2; Sphere C - Radius r1, center v3. Spheres A and C can share a common logical sphere of radius r1 - and; place them with two physicals with translations of v1 & v2. Sphere B; requires a different logical (radius r2), placed with physical with; translation v2. Physical shapes know about and can share logicals. Logicals do not; about (aside from reference counting) physicals or share them. This sharing of logical shapes greatly reduces memory consumption and; scene (re)build times in typical detector geometries which have many; repeated objects placements. TGLLogicalShapes have reference counting, performed by the client; physical shapes which are using it. Display list information is also stored here, possibly per LOD; level. Most classes does not support LOD (only sphere and tube) and; therefore reasonable defaults are encoded in the following virtual; functions:. * ELODAxes SupportedLODAxes() { return kLODAxesNone; }; * Int_t DLCacheSize() { return 1; }; * UInt_t DLOffset(lod); // Transform lod into DL offset.; * Short_t QuantizeShapeLOD(); // Quantize lod. Classes that have per-LOD display-lists than override these functions.; 'UShort_t fDLValid' is used as a bit-field determining validity of; each quantized LOD-level; hopefully one will not have more than 16; LOD levels per class.; See also: TGLPhysicalShape::CalculateShapeLOD() where LOD is calculated. See base/src/TVirtualViewer3D for description of common external 3D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLLogicalShape.html:299,log,logical,299,root/html528/TGLLogicalShape.html,https://root.cern,https://root.cern/root/html528/TGLLogicalShape.html,8,['log'],"['logical', 'logicals']"
Testability,". TGLManip. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLManip. class TGLManip: public TVirtualGLManip. Abstract base class for viewer manipulators, which allow direct in; viewer manipulation of a (TGlPhysicalShape) object - currently; translation, scaling and rotation along/round objects local axes.; See derived classes for these implementations. This class provides binding to the zero or one manipulated physical,; hit testing (selection) for manipulator sub component (widget), and; some common mouse action handling/tracking. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGLManip(); voidAttach(TGLPhysicalShape* shape); static TClass*Class(); virtual voidDraw(const TGLCamera& camera) const; Bool_tGetActive() const; TGLPhysicalShape*GetAttached() const; UInt_tGetSelectedWidget() const; virtual Bool_tHandleButton(const Event_t& event, const TGLCamera& camera); virtual Bool_tHandleMotion(const Event_t& event, const TGLCamera& camera); virtual TClass*IsA() const; virtual Bool_tSelect(const TGLCamera&, const TGLRect&, const TGLBoundingBox&); voidSetActive(Bool_t a); voidSetSelectedWidget(UInt_t s); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLManip(); TGLManip(TGLPhysicalShape* shape). protected:. voidCalcDrawScale(const TGLBoundingBox& box, const TGLCamera& camera, Double_t& base, TGLVector3[3] axis) const; const UChar_t*ColorFor(UInt_t widget) const; TGLManip&operator=(const TGLManip&); TGLManip(const TGLManip&). Data Members; protected:. Bool_tfActive! manipulator is active?; TPointfFirstMouse! first (start) mouse position (in WINDOW coords); TPointfLas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLManip.html:613,test,testing,613,root/html602/TGLManip.html,https://root.cern,https://root.cern/root/html602/TGLManip.html,2,['test'],['testing']
Testability,". TGLManip. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLManip. class TGLManip: public TVirtualGLManip. Abstract base class for viewer manipulators, which allow direct in; viewer manipulation of a (TGlPhysicalShape) object - currently; translation, scaling and rotation along/round objects local axes.; See derived classes for these implementations. This class provides binding to the zero or one manipulated physical,; hit testing (selection) for manipulator sub component (widget), and; some common mouse action handling/tracking. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGLManip(); voidAttach(TGLPhysicalShape* shape); static TClass*Class(); virtual voidDraw(const TGLCamera& camera) const; Bool_tGetActive() const; TGLPhysicalShape*GetAttached() const; UInt_tGetSelectedWidget() const; virtual Bool_tHandleButton(const Event_t& event, const TGLCamera& camera); virtual Bool_tHandleMotion(const Event_t& event, const TGLCamera& camera); virtual TClass*IsA() const; virtual Bool_tSelect(const TGLCamera&, const TGLRect&, const TGLBoundingBox&); voidSetActive(Bool_t a); voidSetSelectedWidget(UInt_t s); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidCalcDrawScale(const TGLBoundingBox& box, const TGLCamera& camera, Double_t& base, TGLVector3* axis) const; const UChar_t*ColorFor(UInt_t widget) const; TGLManip&operator=(const TGLManip&). Data Members; protected:. Bool_tfActive! manipulator is active?; TPointfFirstMouse! first (start) mouse position (in WINDOW coords); TPointfLastMouse! last (latest) mouse position (in WINDOW coords); UInt_tfSelectedWidget! active width (axis) compon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLManip.html:613,test,testing,613,root/html528/TGLManip.html,https://root.cern,https://root.cern/root/html528/TGLManip.html,3,['test'],['testing']
Testability,". TGLManip. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLManip. class TGLManip: public TVirtualGLManip. Abstract base class for viewer manipulators, which allow direct in; viewer manipulation of a (TGlPhysicalShape) object - currently; translation, scaling and rotation along/round objects local axes.; See derived classes for these implementations. This class provides binding to the zero or one manipulated physical,; hit testing (selection) for manipulator sub component (widget), and; some common mouse action handling/tracking. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGLManip(); voidAttach(TGLPhysicalShape* shape); static TClass*Class(); virtual voidDraw(const TGLCamera& camera) const; Bool_tGetActive() const; TGLPhysicalShape*GetAttached() const; UInt_tGetSelectedWidget() const; virtual Bool_tHandleButton(const Event_t& event, const TGLCamera& camera); virtual Bool_tHandleMotion(const Event_t& event, const TGLCamera& camera); virtual TClass*IsA() const; virtual Bool_tSelect(const TGLCamera&, const TGLRect&, const TGLBoundingBox&); voidSetActive(Bool_t a); voidSetSelectedWidget(UInt_t s); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. voidCalcDrawScale(const TGLBoundingBox& box, const TGLCamera& camera, Double_t& base, TGLVector3* axis) const; const UChar_t*ColorFor(UInt_t widget) const; TGLManip&operator=(const TGLManip&). Data Members; protected:. Bool_tfActive! manipulator is active?; TPointfFirstMouse! first (start) mouse position (in WINDOW coords); TPointfLastMouse! last (latest) mouse position (in WINDOW coords); UInt_tfSelectedWidget! active ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLManip.html:613,test,testing,613,root/html534/TGLManip.html,https://root.cern,https://root.cern/root/html534/TGLManip.html,1,['test'],['testing']
Testability,". TGLPhysicalShape. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLPhysicalShape. class TGLPhysicalShape. Concrete physical shape - a GL drawable. Physical shapes are the; objects the user can actually see, select, move in the viewer. It is; a placement of the associated local frame TGLLogicaShape into the; world frame. The draw process is:. Load attributes - material colors etc; Load translation matrix - placement; Load gl name (for selection); Call our associated logical shape Draw() to draw placed shape. The physical shape supports translation, scaling and rotation,; selection, color changes, and permitted modification flags etc.; A physical shape cannot modify or be bound to another (or no); logical shape - hence const & handle. It can perform mutable; reference counting on the logical to enable purging. Physical shape also maintains a list of references to it and; provides notifications of change and destruction.; See class TGLPShapeRef which needs to be sub-classes for real use. See base/src/TVirtualViewer3D for description of common external 3D; viewer architecture and how external viewer clients use it. Function Members (Methods); public:. TGLPhysicalShape(UInt_t ID, const TGLLogicalShape& logicalShape, const TGLMatrix& transform, Bool_t invertedWind, const Float_t* rgba); TGLPhysicalShape(UInt_t ID, const TGLLogicalShape& logicalShape, const double* transform, Bool_t invertedWind, const Float_t* rgba); virtual~TGLPhysicalShape(); voidAddReference(TGLPShapeRef* ref); const TGLBoundingBox&BoundingBox() const; virtual voidCalculateShapeLOD(TGLRnrCtx& rnrCtx, Float_t& pixSize, Short_t& shapeLOD) const; static TClass*Class(); const Float_t*Color() const; virtual voidDraw(TGLRnrCtx& rnrCtx) const; const TGLLogicalShape*GetLogical() const; TGLPhysicalShape::EManipGetManip() const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLPhysicalShape.html:657,log,logical,657,root/html528/TGLPhysicalShape.html,https://root.cern,https://root.cern/root/html528/TGLPhysicalShape.html,12,['log'],['logical']
Testability,". TGLPhysicalShape. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLPhysicalShape. class TGLPhysicalShape. Concrete physical shape - a GL drawable. Physical shapes are the; objects the user can actually see, select, move in the viewer. It is; a placement of the associated local frame TGLLogicaShape into the; world frame. The draw process is:. Load attributes - material colors etc; Load translation matrix - placement; Load gl name (for selection); Call our associated logical shape Draw() to draw placed shape. The physical shape supports translation, scaling and rotation,; selection, color changes, and permitted modification flags etc.; A physical shape cannot modify or be bound to another (or no); logical shape - hence const & handle. It can perform mutable; reference counting on the logical to enable purging. Physical shape also maintains a list of references to it and; provides notifications of change and destruction.; See class TGLPShapeRef which needs to be sub-classes for real use. See base/src/TVirtualViewer3D for description of common external 3D; viewer architecture and how external viewer clients use it. Function Members (Methods); public:. virtual~TGLPhysicalShape(); voidAddReference(TGLPShapeRef* ref); const TGLBoundingBox&BoundingBox() const; virtual voidCalculateShapeLOD(TGLRnrCtx& rnrCtx, Float_t& pixSize, Short_t& shapeLOD) const; static TClass*Class(); const Float_t*Color() const; virtual voidDraw(TGLRnrCtx& rnrCtx) const; const TGLLogicalShape*GetLogical() const; TGLPhysicalShape::EManipGetManip() const; const TGLPhysicalShape*GetNextPhysical() const; TGLVector3GetScale() const; UChar_tGetSelected() const; TGLVertex3GetTranslation() const; UInt_tID() const; voidInvokeContextMenu(TContextMenu& menu, UInt_t x, UInt_t y) const; virtual TClass*IsA() const; Bool_tIsInvisibl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLPhysicalShape.html:657,log,logical,657,root/html602/TGLPhysicalShape.html,https://root.cern,https://root.cern/root/html602/TGLPhysicalShape.html,6,['log'],['logical']
Testability,". TGLPlotCoordinates. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLPlotCoordinates. class TGLPlotCoordinates. Helper class for plot-painters holding information about axis; ranges, numbers of bins and flags if certain axis is logartihmic. Function Members (Methods); public:. TGLPlotCoordinates(); virtual~TGLPlotCoordinates(); static TClass*Class(); EGLCoordTypeGetCoordType() const; Double_tGetFactor() const; Int_tGetFirstXBin() const; Int_tGetFirstYBin() const; Int_tGetFirstZBin() const; Int_tGetLastXBin() const; Int_tGetLastYBin() const; Int_tGetLastZBin() const; Int_tGetNXBins() const; Int_tGetNYBins() const; Int_tGetNZBins() const; const Rgl::BinRange_t&GetXBins() const; Double_tGetXLength() const; Bool_tGetXLog() const; const Rgl::Range_t&GetXRange() const; const Rgl::Range_t&GetXRangeScaled() const; Double_tGetXScale() const; const Rgl::BinRange_t&GetYBins() const; Double_tGetYLength() const; Bool_tGetYLog() const; const Rgl::Range_t&GetYRange() const; const Rgl::Range_t&GetYRangeScaled() const; Double_tGetYScale() const; const Rgl::BinRange_t&GetZBins() const; Double_tGetZLength() const; Bool_tGetZLog() const; const Rgl::Range_t&GetZRange() const; const Rgl::Range_t&GetZRangeScaled() const; Double_tGetZScale() const; virtual TClass*IsA() const; Bool_tModified() const; voidResetModified(); voidSetCoordType(EGLCoordType type); Bool_tSetRanges(TH2Poly* hist); Bool_tSetRanges(const TH1* hist, Bool_t errors = kFALSE, Bool_t zBins = kFALSE); Bool_tSetRanges(const TAxis* xAxis, const TAxis* yAxis, const TAxis* zAxis); voidSetXLog(Bool_t xLog); voidSetYLog(Bool_t yLog); voidSetZLog(Bool_t zLog); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TGLPlotCoordinates(const TGLPlotCoordinates&); TGLPlotCoordinate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLPlotCoordinates.html:415,log,logartihmic,415,root/html528/TGLPlotCoordinates.html,https://root.cern,https://root.cern/root/html528/TGLPlotCoordinates.html,3,['log'],['logartihmic']
Testability,". TGLPlotCoordinates. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLPlotCoordinates. class TGLPlotCoordinates. Helper class for plot-painters holding information about axis; ranges, numbers of bins and flags if certain axis is logartihmic. Function Members (Methods); public:. TGLPlotCoordinates(); virtual~TGLPlotCoordinates(); static TClass*Class(); EGLCoordTypeGetCoordType() const; Double_tGetFactor() const; Int_tGetFirstXBin() const; Int_tGetFirstYBin() const; Int_tGetFirstZBin() const; Int_tGetLastXBin() const; Int_tGetLastYBin() const; Int_tGetLastZBin() const; Int_tGetNXBins() const; Int_tGetNYBins() const; Int_tGetNZBins() const; const Rgl::BinRange_t&GetXBins() const; Double_tGetXLength() const; Bool_tGetXLog() const; const Rgl::Range_t&GetXRange() const; const Rgl::Range_t&GetXRangeScaled() const; Double_tGetXScale() const; const Rgl::BinRange_t&GetYBins() const; Double_tGetYLength() const; Bool_tGetYLog() const; const Rgl::Range_t&GetYRange() const; const Rgl::Range_t&GetYRangeScaled() const; Double_tGetYScale() const; const Rgl::BinRange_t&GetZBins() const; Double_tGetZLength() const; Bool_tGetZLog() const; const Rgl::Range_t&GetZRange() const; const Rgl::Range_t&GetZRangeScaled() const; Double_tGetZScale() const; virtual TClass*IsA() const; Bool_tModified() const; voidResetModified(); voidSetCoordType(EGLCoordType type); Bool_tSetRanges(TH2Poly* hist); Bool_tSetRanges(const TH1* hist, Bool_t errors = kFALSE, Bool_t zBins = kFALSE); Bool_tSetRanges(const TAxis* xAxis, const TAxis* yAxis, const TAxis* zAxis); voidSetXLog(Bool_t xLog); voidSetYLog(Bool_t yLog); voidSetZLog(Bool_t zLog); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. TGLPlotCoordinates(const TGLPlotCoordinates&)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLPlotCoordinates.html:415,log,logartihmic,415,root/html534/TGLPlotCoordinates.html,https://root.cern,https://root.cern/root/html534/TGLPlotCoordinates.html,1,['log'],['logartihmic']
Testability,". TGLPlotCoordinates. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLPlotCoordinates. class TGLPlotCoordinates. Helper class for plot-painters holding information about axis; ranges, numbers of bins and flags if certain axis is logartihmic. Function Members (Methods); public:. virtual~TGLPlotCoordinates(); static TClass*Class(); EGLCoordTypeGetCoordType() const; Double_tGetFactor() const; Int_tGetFirstXBin() const; Int_tGetFirstYBin() const; Int_tGetFirstZBin() const; Int_tGetLastXBin() const; Int_tGetLastYBin() const; Int_tGetLastZBin() const; Int_tGetNXBins() const; Int_tGetNYBins() const; Int_tGetNZBins() const; const Rgl::BinRange_t&GetXBins() const; Double_tGetXLength() const; Bool_tGetXLog() const; const Rgl::Range_t&GetXRange() const; const Rgl::Range_t&GetXRangeScaled() const; Double_tGetXScale() const; const Rgl::BinRange_t&GetYBins() const; Double_tGetYLength() const; Bool_tGetYLog() const; const Rgl::Range_t&GetYRange() const; const Rgl::Range_t&GetYRangeScaled() const; Double_tGetYScale() const; const Rgl::BinRange_t&GetZBins() const; Double_tGetZLength() const; Bool_tGetZLog() const; const Rgl::Range_t&GetZRange() const; const Rgl::Range_t&GetZRangeScaled() const; Double_tGetZScale() const; virtual TClass*IsA() const; Bool_tModified() const; voidResetModified(); voidSetCoordType(EGLCoordType type); Bool_tSetRanges(TH2Poly* hist); Bool_tSetRanges(const TH1* hist, Bool_t errors = kFALSE, Bool_t zBins = kFALSE); Bool_tSetRanges(const TAxis* xAxis, const TAxis* yAxis, const TAxis* zAxis); voidSetXLog(Bool_t xLog); voidSetYLog(Bool_t yLog); voidSetZLog(Bool_t zLog); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLPlotCoordinates(). private:. TGLPlotCoordinates&operator=(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLPlotCoordinates.html:415,log,logartihmic,415,root/html602/TGLPlotCoordinates.html,https://root.cern,https://root.cern/root/html602/TGLPlotCoordinates.html,2,['log'],['logartihmic']
Testability,". TGLRnrCtx. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLRnrCtx. class TGLRnrCtx. The TGLRnrCtx class aggregates data for a given redering context as; needed by various parts of the ROOT's OpenGL infractructure. It; serves as a connecting point between the steering part of the; infrastructure (viewer, scene) and concrete rendering classes; (logical, physical shape). It is just a data-holder, there is no; functionality in it. Development notes:. One RnrCtx is created by each viewer and it is just an extension of; the viewer context that changes along the render; descend. Separating this also has some abstract benefit of hiding; viewer implementation from those that do not need to know it. Current scene / scene-info part is always initialized by viewer,; scenes can assume they're ok. Function Members (Methods); public:. TGLRnrCtx(TGLViewerBase* viewer); virtual~TGLRnrCtx(); voidBeginSelection(Int_t x, Int_t y, Int_t r = 3); TGLColorSet*ChangeBaseColorSet(TGLColorSet* set); static TClass*Class(); TGLClip*Clip() const; voidCloseDLCapture(); voidColorOrForeground(Color_t col); TGLColorSet&ColorSet(); Short_tCombiLOD() const; Short_tDrawPass() const; voidEndSelection(Int_t glResult); TGLColorSet*GetBaseColorSet(); TGLCamera*GetCamera(); const TGLCamera*GetCamera() const; UInt_tGetEventKeySym() const; TGLContextIdentity*GetGLCtxIdentity() const; GLUquadric*GetGluQuadric(); Bool_tGetGrabImage() const; Int_tGetPickRadius(); TGLRect*GetPickRectangle(); Float_tGetRenderScale() const; TGLSceneBase*GetScene(); TGLSceneInfo*GetSceneInfo(); TGLSelectBuffer*GetSelectBuffer() const; TGLViewerBase*GetViewer(); Bool_tHasClip() const; Bool_tHasStopwatchTimedOut(); Bool_tHighlight() const; Bool_tHighlightOutline() const; virtual TClass*IsA() const; Bool_tIsDLCaptureOpen() const; Bool_tIsDrawPassFilled",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLRnrCtx.html:533,log,logical,533,root/html530/TGLRnrCtx.html,https://root.cern,https://root.cern/root/html530/TGLRnrCtx.html,3,['log'],['logical']
Testability,". TGLRnrCtx. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLRnrCtx. class TGLRnrCtx. The TGLRnrCtx class aggregates data for a given redering context as; needed by various parts of the ROOT's OpenGL infractructure. It; serves as a connecting point between the steering part of the; infrastructure (viewer, scene) and concrete rendering classes; (logical, physical shape). It is just a data-holder, there is no; functionality in it. Development notes:. One RnrCtx is created by each viewer and it is just an extension of; the viewer context that changes along the render; descend. Separating this also has some abstract benefit of hiding; viewer implementation from those that do not need to know it. Current scene / scene-info part is always initialized by viewer,; scenes can assume they're ok. Function Members (Methods); public:. TGLRnrCtx(TGLViewerBase* viewer); virtual~TGLRnrCtx(); voidBeginSelection(Int_t x, Int_t y, Int_t r = 3); TGLColorSet*ChangeBaseColorSet(TGLColorSet* set); static TClass*Class(); TGLClip*Clip() const; voidCloseDLCapture(); voidColorOrForeground(Color_t col); TGLColorSet&ColorSet(); Short_tCombiLOD() const; Short_tDrawPass() const; voidEndSelection(Int_t glResult); TGLColorSet*GetBaseColorSet(); TGLCamera*GetCamera(); const TGLCamera*GetCamera() const; UInt_tGetEventKeySym() const; TGLContextIdentity*GetGLCtxIdentity() const; GLUquadric*GetGluQuadric(); UChar_t*GetGrabbedImage() const; Int_tGetGrabBuffer() const; Bool_tGetGrabImage() const; Int_tGetPickRadius(); TGLRect*GetPickRectangle(); Float_tGetRenderScale() const; TGLSceneBase*GetScene(); TGLSceneInfo*GetSceneInfo(); TGLSelectBuffer*GetSelectBuffer() const; TGLViewerBase*GetViewer(); Bool_tHasClip() const; Bool_tHasStopwatchTimedOut(); Bool_tHighlight() const; Bool_tHighlightOutline() const; virtual TClass*IsA()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLRnrCtx.html:533,log,logical,533,root/html528/TGLRnrCtx.html,https://root.cern,https://root.cern/root/html528/TGLRnrCtx.html,1,['log'],['logical']
Testability,". TGLRnrCtx. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLRnrCtx. class TGLRnrCtx. The TGLRnrCtx class aggregates data for a given redering context as; needed by various parts of the ROOT's OpenGL infractructure. It; serves as a connecting point between the steering part of the; infrastructure (viewer, scene) and concrete rendering classes; (logical, physical shape). It is just a data-holder, there is no; functionality in it. Development notes:. One RnrCtx is created by each viewer and it is just an extension of; the viewer context that changes along the render; descend. Separating this also has some abstract benefit of hiding; viewer implementation from those that do not need to know it. Current scene / scene-info part is always initialized by viewer,; scenes can assume they're ok. Function Members (Methods); public:. virtual~TGLRnrCtx(); voidBeginSelection(Int_t x, Int_t y, Int_t r = 3); TGLColorSet*ChangeBaseColorSet(TGLColorSet* set); static TClass*Class(); TGLClip*Clip() const; voidCloseDLCapture(); voidColorOrForeground(Color_t col); TGLColorSet&ColorSet(); Short_tCombiLOD() const; Short_tDrawPass() const; voidEndSelection(Int_t glResult); TGLColorSet*GetBaseColorSet(); TGLCamera*GetCamera(); const TGLCamera*GetCamera() const; UInt_tGetEventKeySym() const; TGLContextIdentity*GetGLCtxIdentity() const; GLUquadric*GetGluQuadric(); Bool_tGetGrabImage() const; Int_tGetPickRadius(); TGLRect*GetPickRectangle(); Float_tGetRenderScale() const; TGLSceneBase*GetScene(); TGLSceneInfo*GetSceneInfo(); TGLSelectBuffer*GetSelectBuffer() const; TGLViewerBase*GetViewer(); Bool_tHasClip() const; Bool_tHasStopwatchTimedOut(); Bool_tHighlight() const; Bool_tHighlightOutline() const; virtual TClass*IsA() const; Bool_tIsDLCaptureOpen() const; Bool_tIsDrawPassFilled() const; Bool_tIsDrawPassOutlineL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLRnrCtx.html:533,log,logical,533,root/html602/TGLRnrCtx.html,https://root.cern,https://root.cern/root/html602/TGLRnrCtx.html,2,['log'],['logical']
Testability,". TGLScene. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLScene. class TGLScene: public TGLSceneBase. TGLScene provides managememnt and rendering of ROOT's default 3D; object representation as logical and physical shapes. A GL scene is the container for all the viewable objects (shapes); loaded into the viewer. It consists of two main stl::maps containing; the TGLLogicalShape and TGLPhysicalShape collections, and interface; functions enabling viewers to manage objects in these. The physical; shapes defined the placement of copies of the logical shapes - see; TGLLogicalShape/TGLPhysicalShape for more information on relationship. The scene can be drawn by owning viewer, passing camera, draw style; & quality (LOD), clipping etc - see Draw(). The scene can also be; drawn for selection in similar fashion - see Select(). The scene; keeps track of a single selected physical - which can be modified by; viewers. The scene maintains a lazy calculated bounding box for the total; scene extents, axis aligned round TGLPhysicalShape shapes. Currently a scene is owned exclusively by one viewer - however it is; intended that it could easily be shared by multiple viewers - for; efficiency and syncronisation reasons. Hence viewer variant objects; camera, clips etc being owned by viewer and passed at draw/select. Function Members (Methods); public:. TGLScene(); virtual~TGLScene(); voidTGLSceneBase::AddViewer(TGLViewerBase* viewer); virtual voidAdoptLogical(TGLLogicalShape& shape); virtual voidAdoptPhysical(TGLPhysicalShape& shape); UInt_tBeginSmartRefresh(); virtual Bool_tBeginUpdate(); const TGLBoundingBox&TGLSceneBase::BoundingBox() const; virtual voidCalcBoundingBox() const; static TClass*Class(); TGLClip*TGLSceneBase::Clip() const; virtual TGLScene::TSceneInfo*CreateSceneInfo(TGLViewerBase* view); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLScene.html:381,log,logical,381,root/html528/TGLScene.html,https://root.cern,https://root.cern/root/html528/TGLScene.html,8,['log'],['logical']
Testability,". TGLScene. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLScene. class TGLScene: public TGLSceneBase. TGLScene provides managememnt and rendering of ROOT's default 3D; object representation as logical and physical shapes. A GL scene is the container for all the viewable objects (shapes); loaded into the viewer. It consists of two main stl::maps containing; the TGLLogicalShape and TGLPhysicalShape collections, and interface; functions enabling viewers to manage objects in these. The physical; shapes defined the placement of copies of the logical shapes - see; TGLLogicalShape/TGLPhysicalShape for more information on relationship. The scene can be drawn by owning viewer, passing camera, draw style; & quality (LOD), clipping etc - see Draw(). The scene can also be; drawn for selection in similar fashion - see Select(). The scene; keeps track of a single selected physical - which can be modified by; viewers. The scene maintains a lazy calculated bounding box for the total; scene extents, axis aligned round TGLPhysicalShape shapes. Currently a scene is owned exclusively by one viewer - however it is; intended that it could easily be shared by multiple viewers - for; efficiency and syncronisation reasons. Hence viewer variant objects; camera, clips etc being owned by viewer and passed at draw/select. Function Members (Methods); public:. virtual~TGLScene(); voidTGLSceneBase::AddViewer(TGLViewerBase* viewer); virtual voidAdoptLogical(TGLLogicalShape& shape); virtual voidAdoptPhysical(TGLPhysicalShape& shape); UInt_tBeginSmartRefresh(); virtual Bool_tBeginUpdate(); const TGLBoundingBox&TGLSceneBase::BoundingBox() const; virtual voidCalcBoundingBox() const; static TClass*Class(); TGLClip*TGLSceneBase::Clip() const; virtual TGLScene::TSceneInfo*CreateSceneInfo(TGLViewerBase* view); TGLLockable:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLScene.html:381,log,logical,381,root/html602/TGLScene.html,https://root.cern,https://root.cern/root/html602/TGLScene.html,4,['log'],['logical']
Testability,". TGeoChecker. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GEOM; » GEOMPAINTER; » TGeoChecker. class TGeoChecker: public TObject. TGeoChecker - Geometry checking package. TGeoChecker class provides several geometry checking methods. There are two; types of tests that can be performed. One is based on random sampling or; ray-tracing and provides a visual check on how navigation methods work for; a given geometry. The second actually checks the validity of the geometry; definition in terms of overlapping/extruding objects. Both types of checks; can be done for a given branch (starting with a given volume) as well as for; the geometry as a whole. 1. TGeoChecker::CheckPoint(Double_t x, Double_t y, Double_t z). This method can be called direcly from the TGeoManager class and print a; report on how a given point is classified by the modeller: which is the; full path to the deepest node containing it, and the (under)estimation; of the distance to the closest boundary (safety). 2. TGeoChecker::RandomPoints(Int_t npoints). Can be called from TGeoVolume class. It first draws the volume and its; content with the current visualization settings. Then randomly samples points; in its bounding box, plotting in the geometry display only the points; classified as belonging to visible volumes. 3. TGeoChecker::RandomRays(Int_t nrays, Double_t startx, starty, startz). Can be called and acts in the same way as the previous, but instead of points,; rays having random isotropic directions are generated from the given point.; A raytracing algorithm propagates all rays untill they exit geometry, plotting; all segments crossing visible nodes in the same color as these. 4. TGeoChecker::Test(Int_t npoints). Implementation of TGeoManager::Test(). Computes the time for the modeller; to find out ""Where am I?"" for a given number of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoChecker.html:428,test,tests,428,root/html528/TGeoChecker.html,https://root.cern,https://root.cern/root/html528/TGeoChecker.html,6,['test'],['tests']
Testability,". TGeoExtension. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GEOM; » GEOM; » TGeoExtension. class TGeoExtension: public TObject. TGeoExtension - ABC for user objects attached to TGeoVolume or TGeoNode.; Provides interface for getting a reference (grab) and; releasing the extension object (release), allowing for; derived classes to implement reference counted sharing.; The user who should attach extensions to logical volumes; or nodes BEFORE applying misalignment information so that; these will be available to all copies. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoExtension.html:583,log,logical,583,root/html534/TGeoExtension.html,https://root.cern,https://root.cern/root/html534/TGeoExtension.html,3,['log'],['logical']
Testability,". TGeoRCExtension. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GEOM; » GEOM; » TGeoRCExtension. class TGeoRCExtension: public TGeoExtension. TGeoExtension - ABC for user objects attached to TGeoVolume or TGeoNode.; Provides interface for getting a reference (grab) and; releasing the extension object (release), allowing for; derived classes to implement reference counted sharing.; The user who should attach extensions to logical volumes; or nodes BEFORE applying misalignment information so that; these will be available to all copies. Function Members (Methods); public:. TGeoRCExtension(); TGeoRCExtension(TObject* obj); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoRCExtension.html:595,log,logical,595,root/html534/TGeoRCExtension.html,https://root.cern,https://root.cern/root/html534/TGeoRCExtension.html,1,['log'],['logical']
Testability,". TGeoRCExtension. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GEOM; » GEOM; » TGeoRCExtension. class TGeoRCExtension: public TGeoExtension. TGeoExtension - ABC for user objects attached to TGeoVolume or TGeoNode.; Provides interface for getting a reference (grab) and; releasing the extension object (release), allowing for; derived classes to implement reference counted sharing.; The user who should attach extensions to logical volumes; or nodes BEFORE applying misalignment information so that; these will be available to all copies. Function Members (Methods); public:. voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoRCExtension.html:595,log,logical,595,root/html602/TGeoRCExtension.html,https://root.cern,https://root.cern/root/html602/TGeoRCExtension.html,2,['log'],['logical']
Testability,". THStack. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THStack. class THStack: public TNamed. A THStack is a collection of TH1 (or derived) objects; Use THStack::Add to add a new histogram to the list.; The THStack does not own the objects in the list.; By default (if option ""nostack"" is not specified), histograms will be paint; stacked on top of each other.; Example;; THStack hs(""hs"",""test stacked histograms"");; TH1F *h1 = new TH1F(""h1"",""test hstack"",100,-4,4);; h1->FillRandom(""gaus"",20000);; h1->SetFillColor(kRed);; hs.Add(h1);; TH1F *h2 = new TH1F(""h2"",""test hstack"",100,-4,4);; h2->FillRandom(""gaus"",15000);; h2->SetFillColor(kBlue);; hs.Add(h2);; TH1F *h3 = new TH1F(""h3"",""test hstack"",100,-4,4);; h3->FillRandom(""gaus"",10000);; h3->SetFillColor(kGreen);; hs.Add(h3);; TCanvas c1(""c1"",""stacked hists"",10,10,700,900);; c1.Divide(1,2);; c1.cd(1);; hs.Draw();; c1.cd(2);; hs->Draw(""nostack"");. See a more complex example in $ROOTSYS/tutorials/hist/hstack.C. Note that picking is supported for all drawing modes. Function Members (Methods); public:. THStack(); THStack(const THStack& hstack); THStack(const char* name, const char* title); THStack(const TH1* hist, Option_t* axis = ""x"", const char* name = 0, const char* title = 0, Int_t firstbin = 1, Int_t lastbin = -1, Int_t firstbin2 = 1, Int_t lastbin2 = -1, Option_t* proj_option = """", Option_t* draw_option = """"); virtual~THStack(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TH1* h, Option_t* option = """"); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THStack.html:576,test,test,576,root/html528/THStack.html,https://root.cern,https://root.cern/root/html528/THStack.html,12,['test'],['test']
Testability,". THStack. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THStack. class THStack: public TNamed. A THStack is a collection of TH1 (or derived) objects; Use THStack::Add to add a new histogram to the list.; The THStack does not own the objects in the list.; By default (if option ""nostack"" is not specified), histograms will be paint; stacked on top of each other.; Example;; THStack hs(""hs"",""test stacked histograms"");; TH1F *h1 = new TH1F(""h1"",""test hstack"",100,-4,4);; h1->FillRandom(""gaus"",20000);; h1->SetFillColor(kRed);; hs.Add(h1);; TH1F *h2 = new TH1F(""h2"",""test hstack"",100,-4,4);; h2->FillRandom(""gaus"",15000);; h2->SetFillColor(kBlue);; hs.Add(h2);; TH1F *h3 = new TH1F(""h3"",""test hstack"",100,-4,4);; h3->FillRandom(""gaus"",10000);; h3->SetFillColor(kGreen);; hs.Add(h3);; TCanvas c1(""c1"",""stacked hists"",10,10,700,900);; c1.Divide(1,2);; c1.cd(1);; hs.Draw();; c1.cd(2);; hs.Draw(""nostack"");. See a more complex example in $ROOTSYS/tutorials/hist/hstack.C. Note that picking is supported for all drawing modes. Function Members (Methods); public:. THStack(); THStack(const THStack& hstack); THStack(const char* name, const char* title); THStack(const TH1* hist, Option_t* axis = ""x"", const char* name = 0, const char* title = 0, Int_t firstbin = 1, Int_t lastbin = -1, Int_t firstbin2 = 1, Int_t lastbin2 = -1, Option_t* proj_option = """", Option_t* draw_option = """"); virtual~THStack(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TH1* h, Option_t* option = """"); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THStack.html:576,test,test,576,root/html534/THStack.html,https://root.cern,https://root.cern/root/html534/THStack.html,4,['test'],['test']
Testability,". THStack. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THStack. class THStack: public TNamed. A THStack is a collection of TH1 (or derived) objects; Use THStack::Add to add a new histogram to the list.; The THStack does not own the objects in the list.; By default (if option ""nostack"" is not specified), histograms will be paint; stacked on top of each other.; Example;; THStack hs(""hs"",""test stacked histograms"");; TH1F *h1 = new TH1F(""h1"",""test hstack"",100,-4,4);; h1->FillRandom(""gaus"",20000);; h1->SetFillColor(kRed);; hs.Add(h1);; TH1F *h2 = new TH1F(""h2"",""test hstack"",100,-4,4);; h2->FillRandom(""gaus"",15000);; h2->SetFillColor(kBlue);; hs.Add(h2);; TH1F *h3 = new TH1F(""h3"",""test hstack"",100,-4,4);; h3->FillRandom(""gaus"",10000);; h3->SetFillColor(kGreen);; hs.Add(h3);; TCanvas c1(""c1"",""stacked hists"",10,10,700,900);; c1.Divide(1,2);; c1.cd(1);; hs.Draw();; c1.cd(2);; hs.Draw(""nostack"");. See a more complex example in $ROOTSYS/tutorials/hist/hstack.C. Note that picking is supported for all drawing modes. Function Members (Methods); public:. virtual~THStack(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TH1* h, Option_t* option = """"); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* chopt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constME",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THStack.html:576,test,test,576,root/html602/THStack.html,https://root.cern,https://root.cern/root/html602/THStack.html,4,['test'],['test']
Testability,". THtml. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » THtml. class THtml: public TObject. The THtml class is designed to easily document; classes, code, and code related text files (like change logs). It generates HTML; pages conforming to the XHTML 1.0 transitional specifications; an example of; these pages is ROOT's own ; reference guide. This page was verified to be valid XHTML 1.0 transitional,; which proves that all pages generated by THtml can be valid, as long as the user; provided XHTML (documentation, header, etc) is valid. You can check the current; THtml by clicking this icon:. Overview:. Usage; Configuration; Input files; Output directory; Linking other documentation; Recognizing class documentation; Author, copyright, etc.; Header and footer; Links to searches, home page, ViewVC; HTML Charset. Documentation syntax; Class description; Class index; Method documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.LoadAllLibs(); // Load all rootmap'ed libraries; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names etc) some text; file or macro, use:. root[] ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THtml.html:372,log,logs,372,root/html602/THtml.html,https://root.cern,https://root.cern/root/html602/THtml.html,2,['log'],['logs']
Testability,". THtml. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » THtml. class THtml: public TObject. The THtml class is designed to easily document; classes, code, and code related text files (like change logs). It generates HTML; pages conforming to the XHTML 1.0 transitional specifications; an example of; these pages is ROOT's own ; reference guide. This page was verified to be valid XHTML 1.0 transitional,; which proves that all pages generated by THtml can be valid, as long as the user; provided XHTML (documentation, header, etc) is valid. You can check the current; THtml by clicking this icon:. Overview:. Usage; Configuration; Input files; Output directory; Linking other documentation; Recognizing class documentation; Author, copyright, etc.; Header and footer; Links to searches, home page, ViewVC; HTML Charset. Documentation syntax; Class description; Class index; Method documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names etc) some text; file or macro, use:. root[] html.Convert( ""hsimple.C"", ""Histogram example"" ). II. Configu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THtml.html:372,log,logs,372,root/html534/THtml.html,https://root.cern,https://root.cern/root/html534/THtml.html,1,['log'],['logs']
Testability,". THtml. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » THtml. class THtml: public TObject. The THtml class is designed to easily document; classes, code, and code related text files (like change logs). It generates HTML; pages conforming to the XHTML 1.0 transitional specifications; an example of; these pages is ROOT's own ; reference guide. This page was verified to be valid XHTML 1.0 transitional,; which proves that all pages generated by THtml can be valid, as long as the user; provided XHTML (documentation, header, etc) is valid. You can check the current; THtml by clicking this icon:. Overview:. Usage; Configuration; Input files; Output directory; Linking other documentation; Recognizing class documentation; Author, copyright, etc.; Header and footer; Links to searches, home page, ViewVC; HTML Charset. Documentation syntax; Class description; Class index; Method documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxilliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names etc) some text; file or macro, use:. root[] html.Convert( ""hsimple.C"", ""Histogram example"" ). II. Config",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THtml.html:372,log,logs,372,root/html528/THtml.html,https://root.cern,https://root.cern/root/html528/THtml.html,3,['log'],['logs']
Testability,". THtml::TFileSysEntry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » THtml::TFileSysEntry. class THtml::TFileSysEntry: public TObject. The THtml class is designed to easily document; classes, code, and code related text files (like change logs). It generates HTML; pages conforming to the XHTML 1.0 transitional specifications; an example of; these pages is ROOT's own ; reference guide. This page was verified to be valid XHTML 1.0 transitional,; which proves that all pages generated by THtml can be valid, as long as the user; provided XHTML (documentation, header, etc) is valid. You can check the current; THtml by clicking this icon:. Overview:. Usage; Configuration; Input files; Output directory; Linking other documentation; Recognizing class documentation; Author, copyright, etc.; Header and footer; Links to searches, home page, ViewVC; HTML Charset. Documentation syntax; Class description; Class index; Method documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.LoadAllLibs(); // Load all rootmap'ed libraries; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THtml__TFileSysEntry.html:417,log,logs,417,root/html602/THtml__TFileSysEntry.html,https://root.cern,https://root.cern/root/html602/THtml__TFileSysEntry.html,2,['log'],['logs']
Testability,". THtml::TFileSysRoot. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » THtml::TFileSysRoot. class THtml::TFileSysRoot: public THtml::TFileSysDir. The THtml class is designed to easily document; classes, code, and code related text files (like change logs). It generates HTML; pages conforming to the XHTML 1.0 transitional specifications; an example of; these pages is ROOT's own ; reference guide. This page was verified to be valid XHTML 1.0 transitional,; which proves that all pages generated by THtml can be valid, as long as the user; provided XHTML (documentation, header, etc) is valid. You can check the current; THtml by clicking this icon:. Overview:. Usage; Configuration; Input files; Output directory; Linking other documentation; Recognizing class documentation; Author, copyright, etc.; Header and footer; Links to searches, home page, ViewVC; HTML Charset. Documentation syntax; Class description; Class index; Method documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.LoadAllLibs(); // Load all rootmap'ed libraries; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THtml__TFileSysRoot.html:425,log,logs,425,root/html602/THtml__TFileSysRoot.html,https://root.cern,https://root.cern/root/html602/THtml__TFileSysRoot.html,2,['log'],['logs']
Testability,". TImageDump. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » POSTSCRIPT; » TImageDump. class TImageDump: public TVirtualPS. TImageDump. save canvas as an image (GIF, JPEG, PNG, XPM, TIFF etc.); in batch mode. Example:. $ root -b; root [0] .x hsimple.C; root [1] c1->Print(""c1.gif"");. TImageDump can be used in any mode (batch, interactive) as follows. TCanvas *c1;; TImageDump *imgdump = new TImageDump(""test.png"");; c1->Paint();; imgdump->Close();. Function Members (Methods); public:. TImageDump(); TImageDump(const char* filename, Int_t type = -111); virtual~TImageDump(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidCellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); virtual voidCellArrayEnd(); virtual voidCellArrayFill(Int_t r, Int_t g, Int_t b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidDrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawFrame(Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TImageDump.html:582,test,test,582,root/html528/TImageDump.html,https://root.cern,https://root.cern/root/html528/TImageDump.html,4,['test'],['test']
Testability,". TImageDump. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » POSTSCRIPT; » TImageDump. class TImageDump: public TVirtualPS. TImageDump. save canvas as an image (GIF, JPEG, PNG, XPM, TIFF etc.); in batch mode. Example:. $ root -b; root [0] .x hsimple.C; root [1] c1->Print(""c1.gif"");. TImageDump can be used in any mode (batch, interactive) as follows. TCanvas *c1;; TImageDump *imgdump = new TImageDump(""test.png"");; c1->Paint();; imgdump->Close();. Function Members (Methods); public:. virtual~TImageDump(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidCellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); virtual voidCellArrayEnd(); virtual voidCellArrayFill(Int_t r, Int_t g, Int_t b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidDrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawFrame(Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light); virtual voidDrawPolyMarker(Int_t n, Float_t* x, Float_t* y); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TImageDump.html:582,test,test,582,root/html602/TImageDump.html,https://root.cern,https://root.cern/root/html602/TImageDump.html,2,['test'],['test']
Testability,". TMD5. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TMD5. class TMD5. TMD5. This code implements the MD5 message-digest algorithm.; The algorithm is due to Ron Rivest. This code was; written by Colin Plumb in 1993, no copyright is claimed.; This code is in the public domain; do with it what you wish. Equivalent code is available from RSA Data Security, Inc.; This code has been tested against that, and is equivalent,; except that you don't need to include two pages of legalese; with every copy. To compute the message digest of a chunk of bytes, create an; TMD5 object, call Update() as needed on buffers full of bytes, and; then call Final(), which will, optionally, fill a supplied 16-byte; array with the digest. Function Members (Methods); public:. TMD5(); TMD5(const UChar_t* digest); TMD5(const TMD5& md5); virtual~TMD5(); const char*AsString() const; static TClass*Class(); static TMD5*FileChecksum(const char* file); static Int_tFileChecksum(const char* file, UChar_t* digest); voidFinal(); voidFinal(UChar_t* digest); virtual TClass*IsA() const; TMD5&operator=(const TMD5& rhs); voidPrint() const; static TMD5*ReadChecksum(const char* file); Int_tSetDigest(const char* md5ascii); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); voidUpdate(const UChar_t* buf, UInt_t len); static Int_tWriteChecksum(const char* file, const TMD5* md5). private:. voidDecode(UInt_t* out, const UChar_t* in, UInt_t len); voidEncode(UChar_t* out, const UInt_t* in, UInt_t len); voidTransform(UInt_t* buf, const UChar_t* in). Data Members; private:. UInt_tfBits[2]!temp buffer; UInt_tfBuf[4]!temp buffer; UChar_tfDigest[16]message digest; Bool_tfFinalizedtrue if message digest has been finalized; UChar_tfIn[64]!temp buffer. Class Charts. Inheritance; In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMD5.html:567,test,tested,567,root/html528/TMD5.html,https://root.cern,https://root.cern/root/html528/TMD5.html,3,['test'],['tested']
Testability,". TMD5. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TMD5. class TMD5. TMD5. This code implements the MD5 message-digest algorithm.; The algorithm is due to Ron Rivest. This code was; written by Colin Plumb in 1993, no copyright is claimed.; This code is in the public domain; do with it what you wish. Equivalent code is available from RSA Data Security, Inc.; This code has been tested against that, and is equivalent,; except that you don't need to include two pages of legalese; with every copy. To compute the message digest of a chunk of bytes, create an; TMD5 object, call Update() as needed on buffers full of bytes, and; then call Final(), which will, optionally, fill a supplied 16-byte; array with the digest. Function Members (Methods); public:. TMD5(); TMD5(const UChar_t* digest); TMD5(const TMD5& md5); virtual~TMD5(); const char*AsString() const; static TClass*Class(); static TMD5*FileChecksum(const char* file); static Int_tFileChecksum(const char* file, UChar_t* digest); voidFinal(); voidFinal(UChar_t* digest); virtual TClass*IsA() const; TMD5&operator=(const TMD5& rhs); voidPrint() const; static TMD5*ReadChecksum(const char* file); Int_tSetDigest(const char* md5ascii); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidUpdate(const UChar_t* buf, UInt_t len); static Int_tWriteChecksum(const char* file, const TMD5* md5). private:. voidDecode(UInt_t* out, const UChar_t* in, UInt_t len); voidEncode(UChar_t* out, const UInt_t* in, UInt_t len); voidTransform(UInt_t* buf, const UChar_t* in). Data Members; private:. UInt_tfBits[2]!temp buffer; UInt_tfBuf[4]!temp buffer; UChar_tfDigest[16]message digest; Bool_tfFinalizedtrue if message digest has been finalized; UChar_tfIn[64]!temp buffer; Char_tfStr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMD5.html:567,test,tested,567,root/html534/TMD5.html,https://root.cern,https://root.cern/root/html534/TMD5.html,1,['test'],['tested']
Testability,". TMD5. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TMD5. class TMD5. TMD5. This code implements the MD5 message-digest algorithm.; The algorithm is due to Ron Rivest. This code was; written by Colin Plumb in 1993, no copyright is claimed.; This code is in the public domain; do with it what you wish. Equivalent code is available from RSA Data Security, Inc.; This code has been tested against that, and is equivalent,; except that you don't need to include two pages of legalese; with every copy. To compute the message digest of a chunk of bytes, create an; TMD5 object, call Update() as needed on buffers full of bytes, and; then call Final(), which will, optionally, fill a supplied 16-byte; array with the digest. Function Members (Methods); public:. virtual~TMD5(); const char*AsString() const; static TClass*Class(); static TMD5*FileChecksum(const char* file); static Int_tFileChecksum(const char* file, UChar_t[16] digest); voidFinal(); voidFinal(UChar_t[16] digest); virtual TClass*IsA() const; TMD5&operator=(const TMD5& rhs); voidPrint() const; static TMD5*ReadChecksum(const char* file); Int_tSetDigest(const char* md5ascii); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TMD5(); TMD5(const UChar_t* digest); TMD5(const TMD5& md5); voidUpdate(const UChar_t* buf, UInt_t len); static Int_tWriteChecksum(const char* file, const TMD5* md5). private:. voidDecode(UInt_t* out, const UChar_t* in, UInt_t len); voidEncode(UChar_t* out, const UInt_t* in, UInt_t len); voidTransform(UInt_t[4] buf, const UChar_t[64] in). Data Members; private:. UInt_tfBits[2]!temp buffer; UInt_tfBuf[4]!temp buffer; UChar_tfDigest[16]message digest; Bool_tfFinalizedtrue if message digest has been finalized; UChar_tfIn[64]!t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMD5.html:567,test,tested,567,root/html602/TMD5.html,https://root.cern,https://root.cern/root/html602/TMD5.html,2,['test'],['tested']
Testability,". TMLPAnalyzer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MLP; » TMLPAnalyzer. class TMLPAnalyzer: public TObject. TMLPAnalyzer. This utility class contains a set of tests usefull when developing; a neural network.; It allows you to check for unneeded variables, and to control; the network structure. Function Members (Methods); public:. TMLPAnalyzer(TMultiLayerPerceptron& net); TMLPAnalyzer(TMultiLayerPerceptron* net); TMLPAnalyzer(const TMLPAnalyzer&); virtual~TMLPAnalyzer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCheckNetwork(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidDrawDInput(Int_t i); voidDrawDInputs(); voidDrawNetwork(Int_t neuron, const char* signal, const char* bg); TProfile*DrawTruthDeviation(Int_t outnode = 0, Option_t* option = """"); TProfile*DrawTruthDeviationInOut(Int_t innode, Int_t outnode = 0, Option_t* option = """"); THStack*DrawTruthDeviationInsOut(Int_t outnode = 0, Option_t* option = """"); THStack*DrawTruthDeviations(Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMLPAnalyzer.html:347,test,tests,347,root/html528/TMLPAnalyzer.html,https://root.cern,https://root.cern/root/html528/TMLPAnalyzer.html,4,['test'],['tests']
Testability,". TMLPAnalyzer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MLP; » TMLPAnalyzer. class TMLPAnalyzer: public TObject. TMLPAnalyzer. This utility class contains a set of tests usefull when developing; a neural network.; It allows you to check for unneeded variables, and to control; the network structure. Function Members (Methods); public:. virtual~TMLPAnalyzer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCheckNetwork(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidDrawDInput(Int_t i); voidDrawDInputs(); voidDrawNetwork(Int_t neuron, const char* signal, const char* bg); TProfile*DrawTruthDeviation(Int_t outnode = 0, Option_t* option = """"); TProfile*DrawTruthDeviationInOut(Int_t innode, Int_t outnode = 0, Option_t* option = """"); THStack*DrawTruthDeviationInsOut(Int_t outnode = 0, Option_t* option = """"); THStack*DrawTruthDeviations(Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMLPAnalyzer.html:347,test,tests,347,root/html602/TMLPAnalyzer.html,https://root.cern,https://root.cern/root/html602/TMLPAnalyzer.html,2,['test'],['tests']
Testability,". TMVA::CostComplexityPruneTool. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::CostComplexityPruneTool. class TMVA::CostComplexityPruneTool: public TMVA::IPruneTool. Function Members (Methods); public:. virtual~CostComplexityPruneTool(); virtual TMVA::PruningInfo*CalculatePruningInfo(TMVA::DecisionTree* dt, const TMVA::IPruneTool::EventSample* testEvents = __null, Bool_t isAutomatic = kFALSE); TMVA::CostComplexityPruneToolCostComplexityPruneTool(TMVA::SeparationBase* qualityIndex = __null); TMVA::CostComplexityPruneToolCostComplexityPruneTool(const TMVA::CostComplexityPruneTool&); Double_tTMVA::IPruneTool::GetPruneStrength() const; TMVA::IPruneToolTMVA::IPruneTool::IPruneTool(); TMVA::IPruneToolTMVA::IPruneTool::IPruneTool(const TMVA::IPruneTool&); Bool_tTMVA::IPruneTool::IsAutomatic() const; TMVA::CostComplexityPruneTool&operator=(const TMVA::CostComplexityPruneTool&); voidTMVA::IPruneTool::SetAutomatic(); voidTMVA::IPruneTool::SetPruneStrength(Double_t alpha). private:. voidInitTreePruningMetaData(TMVA::DecisionTreeNode* n); TMVA::MsgLogger&Log() const; voidOptimize(TMVA::DecisionTree* dt, Double_t weights). Data Members; protected:. Double_tTMVA::IPruneTool::B; Double_tTMVA::IPruneTool::S; Double_tTMVA::IPruneTool::fPruneStrength. private:. TMVA::MsgLogger*fLogger! output stream to save logging information; Int_tfOptimalK! the optimal index of the prune sequence; vector<TMVA::DecisionTreeNode*>fPruneSequence! map of weakest links (i.e., branches to prune) -> pruning index; vector<Double_t>fPruneStrengthList! map of alpha -> pruning index; vector<Double_t>fQualityIndexList! map of R(T) -> pruning index; TMVA::SeparationBase*fQualityIndexTool! the quality index used to calculate R(t), R(T) = sum[t in ~T]{ R(t) }. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Functio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__CostComplexityPruneTool.html:529,test,testEvents,529,root/html602/TMVA__CostComplexityPruneTool.html,https://root.cern,https://root.cern/root/html602/TMVA__CostComplexityPruneTool.html,1,['test'],['testEvents']
Testability,". TMVA::CostComplexityPruneTool. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::CostComplexityPruneTool. class TMVA::CostComplexityPruneTool: public TMVA::IPruneTool. Function Members (Methods); public:. virtual~CostComplexityPruneTool(); virtual TMVA::PruningInfo*CalculatePruningInfo(TMVA::DecisionTree* dt, const vector<TMVA::Event*,allocator<TMVA::Event*> >* testEvents = NULL, Bool_t isAutomatic = kFALSE); TMVA::CostComplexityPruneToolCostComplexityPruneTool(TMVA::SeparationBase* qualityIndex = NULL); TMVA::CostComplexityPruneToolCostComplexityPruneTool(const TMVA::CostComplexityPruneTool&); TMVA::CostComplexityPruneTool&operator=(const TMVA::CostComplexityPruneTool&). private:. voidInitTreePruningMetaData(TMVA::DecisionTreeNode* n); TMVA::MsgLogger&Log() const; voidOptimize(TMVA::DecisionTree* dt, Double_t weights). Data Members; private:. TMVA::MsgLogger*fLogger! output stream to save logging information; Int_tfOptimalK! the optimal index of the prune sequence; vector<TMVA::DecisionTreeNode*,allocator<TMVA::DecisionTreeNode*> >fPruneSequence! map of weakest links (i.e., branches to prune) -> pruning index; vector<Double_t>fPruneStrengthList! map of alpha -> pruning index; vector<Double_t>fQualityIndexList! map of R(T) -> pruning index; TMVA::SeparationBase*fQualityIndexTool! the quality index used to calculate R(t), R(T) = sum[t in ~T]{ R(t) }. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CostComplexityPruneTool( SeparationBase* qualityIndex ); the constructor for the cost complexity prunig. ~CostComplexityPruneTool(); the destructor for the cost complexity prunig. CalculatePruningInfo(TMVA::DecisionTree* dt, const vector<TMVA::Event*,allocator<TMVA::Event*> >* testEvents = NULL, Bool_t isAutomatic = kFALSE). void InitTreePruningMetaData(T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__CostComplexityPruneTool.html:545,test,testEvents,545,root/html528/TMVA__CostComplexityPruneTool.html,https://root.cern,https://root.cern/root/html528/TMVA__CostComplexityPruneTool.html,3,['test'],['testEvents']
Testability,". TMVA::CostComplexityPruneTool. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::CostComplexityPruneTool. class TMVA::CostComplexityPruneTool: public TMVA::IPruneTool. Function Members (Methods); public:. virtual~CostComplexityPruneTool(); virtual TMVA::PruningInfo*CalculatePruningInfo(TMVA::DecisionTree* dt, const vector<const TMVA::Event*,allocator<const TMVA::Event*> >* testEvents = NULL, Bool_t isAutomatic = kFALSE); TMVA::CostComplexityPruneToolCostComplexityPruneTool(TMVA::SeparationBase* qualityIndex = NULL); TMVA::CostComplexityPruneToolCostComplexityPruneTool(const TMVA::CostComplexityPruneTool&); TMVA::CostComplexityPruneTool&operator=(const TMVA::CostComplexityPruneTool&). private:. voidInitTreePruningMetaData(TMVA::DecisionTreeNode* n); TMVA::MsgLogger&Log() const; voidOptimize(TMVA::DecisionTree* dt, Double_t weights). Data Members; private:. TMVA::MsgLogger*fLogger! output stream to save logging information; Int_tfOptimalK! the optimal index of the prune sequence; vector<TMVA::DecisionTreeNode*,allocator<TMVA::DecisionTreeNode*> >fPruneSequence! map of weakest links (i.e., branches to prune) -> pruning index; vector<Double_t>fPruneStrengthList! map of alpha -> pruning index; vector<Double_t>fQualityIndexList! map of R(T) -> pruning index; TMVA::SeparationBase*fQualityIndexTool! the quality index used to calculate R(t), R(T) = sum[t in ~T]{ R(t) }. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CostComplexityPruneTool( SeparationBase* qualityIndex ); the constructor for the cost complexity prunig. ~CostComplexityPruneTool(); the destructor for the cost complexity prunig. CalculatePruningInfo(TMVA::DecisionTree* dt, const vector<const TMVA::Event*,allocator<const TMVA::Event*> >* testEvents = NULL, Bool_t isAutomatic = kFALSE). void I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__CostComplexityPruneTool.html:557,test,testEvents,557,root/html534/TMVA__CostComplexityPruneTool.html,https://root.cern,https://root.cern/root/html534/TMVA__CostComplexityPruneTool.html,1,['test'],['testEvents']
Testability,". TMVA::CostComplexityPruneTool. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::CostComplexityPruneTool. class TMVA::CostComplexityPruneTool: public TMVA::IPruneTool. Function Members (Methods); public:. virtual~CostComplexityPruneTool(); virtual TMVA::PruningInfo*CalculatePruningInfo(TMVA::DecisionTree* dt, const TMVA::IPruneTool::EventSample* testEvents = __null, Bool_t isAutomatic = kFALSE); TMVA::CostComplexityPruneToolCostComplexityPruneTool(TMVA::SeparationBase* qualityIndex = __null); TMVA::CostComplexityPruneToolCostComplexityPruneTool(const TMVA::CostComplexityPruneTool&); Double_tTMVA::IPruneTool::GetPruneStrength() const; TMVA::IPruneToolTMVA::IPruneTool::IPruneTool(); TMVA::IPruneToolTMVA::IPruneTool::IPruneTool(const TMVA::IPruneTool&); Bool_tTMVA::IPruneTool::IsAutomatic() const; TMVA::CostComplexityPruneTool&operator=(const TMVA::CostComplexityPruneTool&); voidTMVA::IPruneTool::SetAutomatic(); voidTMVA::IPruneTool::SetPruneStrength(Double_t alpha). private:. voidInitTreePruningMetaData(TMVA::DecisionTreeNode* n); TMVA::MsgLogger&Log() const; voidOptimize(TMVA::DecisionTree* dt, Double_t weights). Data Members; protected:. Double_tTMVA::IPruneTool::B; Double_tTMVA::IPruneTool::S; Double_tTMVA::IPruneTool::fPruneStrength. private:. TMVA::MsgLogger*fLogger! output stream to save logging information; Int_tfOptimalK! the optimal index of the prune sequence; vector<TMVA::DecisionTreeNode*>fPruneSequence! map of weakest links (i.e., branches to prune) -> pruning index; vector<Double_t>fPruneStrengthList! map of alpha -> pruning index; vector<Double_t>fQualityIndexList! map of R(T) -> pruning index; TMVA::SeparationBase*fQualityIndexTool! the quality index used to calculate R(t), R(T) = sum[t in ~T]{ R(t) }. Class Charts. Inheritance; Inherited Members; Includes; Libraries.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__CostComplexityPruneTool.html:537,test,testEvents,537,root/html604/TMVA__CostComplexityPruneTool.html,https://root.cern,https://root.cern/root/html604/TMVA__CostComplexityPruneTool.html,1,['test'],['testEvents']
Testability,". TMVA::CrossEntropy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::CrossEntropy. class TMVA::CrossEntropy: public TMVA::SeparationBase. Implementation of the CrossEntropy as separation criterion; -p log (p) - (1-p)log(1-p); p=purity. Function Members (Methods); public:. virtual~CrossEntropy(); static TClass*Class(); TMVA::CrossEntropyCrossEntropy(); TMVA::CrossEntropyCrossEntropy(const TMVA::CrossEntropy& g); const TString&TMVA::SeparationBase::GetName(); Double_tTMVA::SeparationBase::GetSeparationGain(const Double_t& nSelS, const Double_t& nSelB, const Double_t& nTotS, const Double_t& nTotB); virtual Double_tGetSeparationIndex(const Double_t& s, const Double_t& b); virtual TClass*IsA() const; TMVA::CrossEntropy&operator=(const TMVA::CrossEntropy&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. TStringTMVA::SeparationBase::fNamename of the concrete Separation Index impementation; Double_tTMVA::SeparationBase::fPrecisionCut. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t GetSeparationIndex(const Double_t& s, const Double_t& b); Cross Entropy defined as; -p log (p) - (1-p)log(1-p); p=purity = s/(s+b). CrossEntropy(); default constructor. { fName = ""CE""; }. CrossEntropy(const TMVA::CrossEntropy& g); copy constructor. {}. virtual ~CrossEntropy(); destructor. {}. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: CrossEntropy.h 29122 2009-06-22 06:51:30Z brun $ » Last generated: 2010-09-23 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__CrossEntropy.html:383,log,log,383,root/html528/TMVA__CrossEntropy.html,https://root.cern,https://root.cern/root/html528/TMVA__CrossEntropy.html,4,['log'],['log']
Testability,". TMVA::CrossEntropy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::CrossEntropy. class TMVA::CrossEntropy: public TMVA::SeparationBase. Implementation of the CrossEntropy as separation criterion; -p log (p) - (1-p)log(1-p); p=purity. Function Members (Methods); public:. virtual~CrossEntropy(); static TClass*Class(); TMVA::CrossEntropyCrossEntropy(); TMVA::CrossEntropyCrossEntropy(const TMVA::CrossEntropy& g); const TString&TMVA::SeparationBase::GetName(); Double_tTMVA::SeparationBase::GetSeparationGain(const Double_t& nSelS, const Double_t& nSelB, const Double_t& nTotS, const Double_t& nTotB); virtual Double_tGetSeparationIndex(const Double_t& s, const Double_t& b); virtual TClass*IsA() const; TMVA::CrossEntropy&operator=(const TMVA::CrossEntropy&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. TStringTMVA::SeparationBase::fNamename of the concrete Separation Index impementation; Double_tTMVA::SeparationBase::fPrecisionCut. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t GetSeparationIndex(const Double_t& s, const Double_t& b); Cross Entropy defined as; -p log (p) - (1-p)log(1-p); p=purity = s/(s+b). CrossEntropy(); default constructor. { fName = ""CE""; }. CrossEntropy(const TMVA::CrossEntropy& g); copy constructor. {}. virtual ~CrossEntropy(); destructor. {}. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: CrossEntropy.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__CrossEntropy.html:383,log,log,383,root/html532/TMVA__CrossEntropy.html,https://root.cern,https://root.cern/root/html532/TMVA__CrossEntropy.html,4,['log'],['log']
Testability,". TMVA::CrossEntropy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::CrossEntropy. class TMVA::CrossEntropy: public TMVA::SeparationBase. Implementation of the CrossEntropy as separation criterion; -p log (p) - (1-p)log(1-p); p=purity. Function Members (Methods); public:. virtual~CrossEntropy(); static TClass*Class(); TMVA::CrossEntropyCrossEntropy(); TMVA::CrossEntropyCrossEntropy(const TMVA::CrossEntropy& g); const TString&TMVA::SeparationBase::GetName(); Double_tTMVA::SeparationBase::GetSeparationGain(const Double_t& nSelS, const Double_t& nSelB, const Double_t& nTotS, const Double_t& nTotB); virtual Double_tGetSeparationIndex(const Double_t& s, const Double_t& b); virtual TClass*IsA() const; TMVA::CrossEntropy&operator=(const TMVA::CrossEntropy&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. TStringTMVA::SeparationBase::fNamename of the concrete Separation Index impementation; Double_tTMVA::SeparationBase::fPrecisionCut. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t GetSeparationIndex(const Double_t& s, const Double_t& b); Cross Entropy defined as; -p log (p) - (1-p)log(1-p); p=purity = s/(s+b). CrossEntropy(); default constructor. { fName = ""CE""; }. CrossEntropy(const TMVA::CrossEntropy& g); copy constructor. {}. virtual ~CrossEntropy(); destructor. {}. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: CrossEntropy.h 40012 2011-06-27 16:03:11Z stelzer $ » Last generated: 2011-07-04 15:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__CrossEntropy.html:383,log,log,383,root/html530/TMVA__CrossEntropy.html,https://root.cern,https://root.cern/root/html530/TMVA__CrossEntropy.html,4,['log'],['log']
Testability,". TMVA::CrossEntropy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::CrossEntropy. class TMVA::CrossEntropy: public TMVA::SeparationBase. Implementation of the CrossEntropy as separation criterion; -p log (p) - (1-p)log(1-p); p=purity. Function Members (Methods); public:. virtual~CrossEntropy(); static TClass*Class(); TMVA::CrossEntropyCrossEntropy(); TMVA::CrossEntropyCrossEntropy(const TMVA::CrossEntropy& g); const TString&TMVA::SeparationBase::GetName(); virtual Double_tTMVA::SeparationBase::GetSeparationGain(const Double_t& nSelS, const Double_t& nSelB, const Double_t& nTotS, const Double_t& nTotB); virtual Double_tGetSeparationIndex(const Double_t& s, const Double_t& b); virtual TClass*IsA() const; TMVA::CrossEntropy&operator=(const TMVA::CrossEntropy&); TMVA::SeparationBaseTMVA::SeparationBase::SeparationBase(); TMVA::SeparationBaseTMVA::SeparationBase::SeparationBase(const TMVA::SeparationBase& s); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. TStringTMVA::SeparationBase::fNamename of the concrete Separation Index impementation; Double_tTMVA::SeparationBase::fPrecisionCut. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t GetSeparationIndex(const Double_t& s, const Double_t& b); Cross Entropy defined as; -p log (p) - (1-p)log(1-p); p=purity = s/(s+b). CrossEntropy(); default constructor. { fName = ""CE""; }. CrossEntropy(const TMVA::CrossEntropy& g); copy constructor. {}. virtual ~CrossEntropy(); destructor. {}. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-30 15:15; This page has been automatically generated. Fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__CrossEntropy.html:383,log,log,383,root/html602/TMVA__CrossEntropy.html,https://root.cern,https://root.cern/root/html602/TMVA__CrossEntropy.html,2,['log'],['log']
Testability,". TMVA::CrossEntropy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::CrossEntropy. class TMVA::CrossEntropy: public TMVA::SeparationBase. Implementation of the CrossEntropy as separation criterion; -p log (p) - (1-p)log(1-p); p=purity. Function Members (Methods); public:. virtual~CrossEntropy(); static TClass*Class(); TMVA::CrossEntropyCrossEntropy(); TMVA::CrossEntropyCrossEntropy(const TMVA::CrossEntropy& g); const TString&TMVA::SeparationBase::GetName(); virtual Double_tTMVA::SeparationBase::GetSeparationGain(const Double_t& nSelS, const Double_t& nSelB, const Double_t& nTotS, const Double_t& nTotB); virtual Double_tGetSeparationIndex(const Double_t& s, const Double_t& b); virtual TClass*IsA() const; TMVA::CrossEntropy&operator=(const TMVA::CrossEntropy&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. TStringTMVA::SeparationBase::fNamename of the concrete Separation Index impementation; Double_tTMVA::SeparationBase::fPrecisionCut. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t GetSeparationIndex(const Double_t& s, const Double_t& b); Cross Entropy defined as; -p log (p) - (1-p)log(1-p); p=purity = s/(s+b). CrossEntropy(); default constructor. { fName = ""CE""; }. CrossEntropy(const TMVA::CrossEntropy& g); copy constructor. {}. virtual ~CrossEntropy(); destructor. {}. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-03-14 16:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__CrossEntropy.html:383,log,log,383,root/html534/TMVA__CrossEntropy.html,https://root.cern,https://root.cern/root/html534/TMVA__CrossEntropy.html,4,['log'],['log']
Testability,". TMVA::CrossEntropy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::CrossEntropy. class TMVA::CrossEntropy: public TMVA::SeparationBase. Implementation of the CrossEntropy as separation criterion; -p log (p) - (1-p)log(1-p); p=purity. Function Members (Methods); public:. virtual~CrossEntropy(); static TClass*Class(); TMVA::CrossEntropyCrossEntropy(); TMVA::CrossEntropyCrossEntropy(const TMVA::CrossEntropy& g); const TString&TMVA::SeparationBase::GetName(); virtual Double_tTMVA::SeparationBase::GetSeparationGain(const Double_t& nSelS, const Double_t& nSelB, const Double_t& nTotS, const Double_t& nTotB); virtual Double_tGetSeparationIndex(const Double_t& s, const Double_t& b); virtual TClass*IsA() const; TMVA::CrossEntropy&operator=(const TMVA::CrossEntropy&); TMVA::SeparationBaseTMVA::SeparationBase::SeparationBase(); TMVA::SeparationBaseTMVA::SeparationBase::SeparationBase(const TMVA::SeparationBase& s); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. TStringTMVA::SeparationBase::fNamename of the concrete Separation Index impementation; Double_tTMVA::SeparationBase::fPrecisionCut. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t GetSeparationIndex(const Double_t& s, const Double_t& b); Cross Entropy defined as; -p log (p) - (1-p)log(1-p); p=purity = s/(s+b). CrossEntropy(); default constructor. { fName = ""CE""; }. CrossEntropy(const TMVA::CrossEntropy& g); copy constructor. {}. virtual ~CrossEntropy(); destructor. {}. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:15; This page has been automatically gener",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__CrossEntropy.html:391,log,log,391,root/html604/TMVA__CrossEntropy.html,https://root.cern,https://root.cern/root/html604/TMVA__CrossEntropy.html,2,['log'],['log']
Testability,". TMVA::Factory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Factory. class TMVA::Factory: public TMVA::Configurable. This is the main MVA steering class: it creates all MVA methods,; and guides them through the training, testing and evaluation; phases. Function Members (Methods); public:. virtual~Factory(); voidTObject::AbstractMethod(const char* method) const; voidAddBackgroundTestEvent(const vector<Double_t>& event, Double_t weight = 1.0); voidAddBackgroundTrainingEvent(const vector<Double_t>& event, Double_t weight = 1.0); voidAddBackgroundTree(TTree* background, Double_t weight = 1.0, TMVA::Types::ETreeType treetype = Types::kMaxTreeType); voidAddBackgroundTree(TString datFileB, Double_t weight = 1.0, TMVA::Types::ETreeType treetype = Types::kMaxTreeType); voidAddBackgroundTree(TTree* background, Double_t weight, const TString& treetype); voidAddCut(const TString& cut, const TString& className = """"); voidAddCut(const TCut& cut, const TString& className = """"); TMVA::DataSetInfo&AddDataSet(TMVA::DataSetInfo&); TMVA::DataSetInfo&AddDataSet(const TString&); voidAddEvent(const TString& className, TMVA::Types::ETreeType tt, const vector<Double_t>& event, Double_t weight); voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidAddRegressionTarget(const TString& expression, const TString& title = """", const TString& unit = """", Double_t min = 0, Double_t max = 0); voidAddRegressionTree(TTree* tree, Double_t weight = 1.0, TMVA::Types::ETreeType treetype = Types::kMaxTreeType); voidAddSignalTestEvent(const vector<Double_t>& event, Double_t weight = 1.0); voidAddSignalTrainingEvent(const vector<Double_t>& event, Double_t weight = 1.0); voidAddSignalTree(TTree* signal, Double_t weight = 1.0, TMVA::Types::ETreeType treetype = Types::kMaxTreeType); voidAddSignalTree(TString datFileS, Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Factory.html:407,test,testing,407,root/html528/TMVA__Factory.html,https://root.cern,https://root.cern/root/html528/TMVA__Factory.html,4,['test'],['testing']
Testability,". TMVA::MethodBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodBase. class TMVA::MethodBase: public TMVA::IMethod, public TMVA::Configurable. Virtual base Class for all MVA method; MethodBase hosts several specific evaluation methods.; The kind of MVA that provides optimal performance in an analysis strongly; depends on the particular application. The evaluation factory provides a; number of numerical benchmark results to directly assess the performance; of the MVA training on the independent test sample. These are:; ; The signal efficiency at three representative background efficiencies; (which is 1 − rejection).; The significance of an MVA estimator, defined by the difference; between the MVA mean values for signal and background, divided by the; quadratic sum of their root mean squares.; The separation of an MVA x, defined by the integral; ½∫(S(x) − B(x))2/(S(x) + B(x))dx, where; S(x) and B(x) are the signal and background distributions, respectively.; The separation is zero for identical signal and background MVA shapes,; and it is one for disjunctive shapes.; ; The average, ∫x μ(S(x))dx, of the signal μ-transform.; The μ-transform of an MVA denotes the transformation that yields; a uniform background distribution. In this way, the signal distributions; S(x) can be directly compared among the various MVAs. The stronger S(x); peaks towards one, the better is the discrimination of the MVA. The; μ-transform is; documented here.; ; The MVA standard output also prints the linear correlation coefficients between; signal and background, which can be useful to eliminate variables that exhibit too; strong correlations.; ; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; pub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodBase.html:597,benchmark,benchmark,597,root/html528/TMVA__MethodBase.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodBase.html,10,"['benchmark', 'test']","['benchmark', 'test']"
Testability,". TMVA::MethodBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodBase. class TMVA::MethodBase: public TMVA::IMethod, public TMVA::Configurable. Virtual base Class for all MVA method; MethodBase hosts several specific evaluation methods.; The kind of MVA that provides optimal performance in an analysis strongly; depends on the particular application. The evaluation factory provides a; number of numerical benchmark results to directly assess the performance; of the MVA training on the independent test sample. These are:; ; The signal efficiency at three representative background efficiencies; (which is 1 − rejection).; The significance of an MVA estimator, defined by the difference; between the MVA mean values for signal and background, divided by the; quadratic sum of their root mean squares.; The separation of an MVA x, defined by the integral; ½∫(S(x) − B(x))2/(S(x) + B(x))dx, where; S(x) and B(x) are the signal and background distributions, respectively.; The separation is zero for identical signal and background MVA shapes,; and it is one for disjunctive shapes.; ; The average, ∫x μ(S(x))dx, of the signal μ-transform.; The μ-transform of an MVA denotes the transformation that yields; a uniform background distribution. In this way, the signal distributions; S(x) can be directly compared among the various MVAs. The stronger S(x); peaks towards one, the better is the discrimination of the MVA. The; μ-transform is; documented here.; ; The MVA standard output also prints the linear correlation coefficients between; signal and background, which can be useful to eliminate variables that exhibit too; strong correlations.; ; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__MethodBase.html:605,benchmark,benchmark,605,root/html604/TMVA__MethodBase.html,https://root.cern,https://root.cern/root/html604/TMVA__MethodBase.html,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,". TMVA::MethodBoost. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodBoost. class TMVA::MethodBoost: public TMVA::MethodCompositeBase. This class is meant to boost a single classifier. Boosting means; training the classifier a few times. Everytime the wieghts of the; events are modified according to how well the classifier performed; on the test sample. Function Members (Methods); public:. virtual~MethodBoost(); voidTObject::AbstractMethod(const char* method) const; voidAddMonitoringHist(TH1* hist); voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidTMVA::MethodCompositeBase::AddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; Bool_tBookMethod(TMVA::Types::EMVA theMethod, TString methodTitle, TString theOption); virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; voidCleanBoostOptions(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodBoost.html:530,test,test,530,root/html528/TMVA__MethodBoost.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodBoost.html,3,['test'],['test']
Testability,". TMVA::MethodBoost. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodBoost. class TMVA::MethodBoost: public TMVA::MethodCompositeBase. This class is meant to boost a single classifier. Boosting means; training the classifier a few times. Everytime the wieghts of the; events are modified according to how well the classifier performed; on the test sample. Function Members (Methods); public:. virtual~MethodBoost(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidTMVA::MethodCompositeBase::AddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; Bool_tBookMethod(TMVA::Types::EMVA theMethod, TString methodTitle, TString theOption); virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; voidCleanBoostOptions(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodBoost.html:530,test,test,530,root/html602/TMVA__MethodBoost.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodBoost.html,1,['test'],['test']
Testability,". TMVA::MethodBoost. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodBoost. class TMVA::MethodBoost: public TMVA::MethodCompositeBase. This class is meant to boost a single classifier. Boosting means; training the classifier a few times. Everytime the wieghts of the; events are modified according to how well the classifier performed; on the test sample. Function Members (Methods); public:. virtual~MethodBoost(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidTMVA::MethodCompositeBase::AddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; Bool_tBookMethod(TMVA::Types::EMVA theMethod, TString methodTitle, TString theOption); virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; voidCleanBoostOptions(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodBoost.html:530,test,test,530,root/html534/TMVA__MethodBoost.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodBoost.html,1,['test'],['test']
Testability,". TMVA::MethodBoost. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodBoost. class TMVA::MethodBoost: public TMVA::MethodCompositeBase. This class is meant to boost a single classifier. Boosting means; training the classifier a few times. Everytime the wieghts of the; events are modified according to how well the classifier performed; on the test sample. Function Members (Methods); public:. virtual~MethodBoost(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidTMVA::MethodCompositeBase::AddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; Bool_tBookMethod(TMVA::Types::EMVA theMethod, TString methodTitle, TString theOption); virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; voidCleanBoostOptions(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__MethodBoost.html:538,test,test,538,root/html604/TMVA__MethodBoost.html,https://root.cern,https://root.cern/root/html604/TMVA__MethodBoost.html,1,['test'],['test']
Testability,". TMVA::MethodPDERS. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodPDERS. class TMVA::MethodPDERS: public TMVA::MethodBase. /*; This is a generalization of the above Likelihood methods to Nvar; dimensions, where Nvar is the number of input variables; used in the MVA. If the multi-dimensional probability density functions; (PDFs) for signal and background were known, this method contains the entire; physical information, and is therefore optimal. Usually, kernel estimation; methods are used to approximate the PDFs using the events from the; training sample. ; A very simple probability density estimator (PDE) has been suggested; in hep-ex/0211019. The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of the test event. The volume that describes ""vicinity"" is; user-defined. A search; method based on binary-trees is used to effectively reduce the; selection time for the range search. Three different volume definitions; are optional: . MinMax:; the volume is defined in each dimension with respect; to the full variable range found in the training sample. ; RMS:; the volume is defined in each dimensions with respect; to the RMS estimated from the training sample. ; Adaptive:; a volume element is defined in each dimensions with; respect to the RMS estimated from the training sample. The overall; scale of the volume element is then determined for each event so; that the total number of events confined in the volume be within; a user-defined range. The adaptive range search is used by default.; . Function Members (Methods); public:. virtual~MethodPDERS(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodPDERS.html:864,test,test,864,root/html528/TMVA__MethodPDERS.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodPDERS.html,10,['test'],['test']
Testability,". TMVA::MethodPDERS. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodPDERS. class TMVA::MethodPDERS: public TMVA::MethodBase. /*; This is a generalization of the above Likelihood methods to Nvar; dimensions, where Nvar is the number of input variables; used in the MVA. If the multi-dimensional probability density functions; (PDFs) for signal and background were known, this method contains the entire; physical information, and is therefore optimal. Usually, kernel estimation; methods are used to approximate the PDFs using the events from the; training sample. ; A very simple probability density estimator (PDE) has been suggested; in hep-ex/0211019. The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of the test event. The volume that describes ""vicinity"" is; user-defined. A search; method based on binary-trees is used to effectively reduce the; selection time for the range search. Three different volume definitions; are optional: . MinMax:; the volume is defined in each dimension with respect; to the full variable range found in the training sample. ; RMS:; the volume is defined in each dimensions with respect; to the RMS estimated from the training sample. ; Adaptive:; a volume element is defined in each dimensions with; respect to the RMS estimated from the training sample. The overall; scale of the volume element is then determined for each event so; that the total number of events confined in the volume be within; a user-defined range. The adaptive range search is used by default.; . Function Members (Methods); public:. virtual~MethodPDERS(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::Meth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__MethodPDERS.html:872,test,test,872,root/html604/TMVA__MethodPDERS.html,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html,2,['test'],['test']
Testability,". TMVA::MethodTMlpANN. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodTMlpANN. class TMVA::MethodTMlpANN: public TMVA::MethodBase. This is the TMVA TMultiLayerPerceptron interface class. It provides the; training and testing the ROOT internal MLP class in the TMVA framework.; Available learning methods:. Stochastic ; Batch ; SteepestDescent ; RibierePolak ; FletcherReeves ; BFGS . . See the TMultiLayerPerceptron class description; for details on this ANN. Function Members (Methods); public:. virtual~MethodTMlpANN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodTMlpANN.html:405,test,testing,405,root/html602/TMVA__MethodTMlpANN.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodTMlpANN.html,1,['test'],['testing']
Testability,". TMVA::MethodTMlpANN. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodTMlpANN. class TMVA::MethodTMlpANN: public TMVA::MethodBase. This is the TMVA TMultiLayerPerceptron interface class. It provides the; training and testing the ROOT internal MLP class in the TMVA framework.; Available learning methods:. Stochastic ; Batch ; SteepestDescent ; RibierePolak ; FletcherReeves ; BFGS . . See the TMultiLayerPerceptron class description; for details on this ANN. Function Members (Methods); public:. virtual~MethodTMlpANN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodTMlpANN.html:405,test,testing,405,root/html528/TMVA__MethodTMlpANN.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodTMlpANN.html,4,['test'],['testing']
Testability,". TMVA::MethodTMlpANN. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodTMlpANN. class TMVA::MethodTMlpANN: public TMVA::MethodBase. This is the TMVA TMultiLayerPerceptron interface class. It provides the; training and testing the ROOT internal MLP class in the TMVA framework.; Available learning methods:. Stochastic ; Batch ; SteepestDescent ; RibierePolak ; FletcherReeves ; BFGS . . See the TMultiLayerPerceptron class description; for details on this ANN. Function Members (Methods); public:. virtual~MethodTMlpANN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__MethodTMlpANN.html:413,test,testing,413,root/html604/TMVA__MethodTMlpANN.html,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html,1,['test'],['testing']
Testability,". TMVA::Ranking. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Ranking. class TMVA::Ranking. Ranking for variables in method (implementation). Function Members (Methods); public:. virtual~Ranking(); virtual voidAddRank(const TMVA::Rank& rank); static TClass*Class(); virtual TClass*IsA() const; TMVA::Ranking&operator=(const TMVA::Ranking&); virtual voidPrint() const; TMVA::RankingRanking(); TMVA::RankingRanking(const TMVA::Ranking&); TMVA::RankingRanking(const TString& context, const TString& rankingDiscriminatorName); voidSetContext(const TString& context); voidSetDiscrName(const TString& discrName); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. TMVA::MsgLogger&Log() const. Data Members; private:. TStringfContextthe ranking context; TMVA::MsgLogger*fLogger! message logger; vector<TMVA::Rank>fRankingvector of ranks; TStringfRankingDiscriminatorNamethe name of the ranking discriminator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Ranking(); default constructor. Ranking(const TString& context, const TString& rankingDiscriminatorName); constructor. ~Ranking(); destructor. void SetContext(const TString& context). void AddRank(const TMVA::Rank& rank); Add a new rank; take ownership of it. void Print() const; get maximum length of variable names. Ranking(). void SetDiscrName(const TString& discrName); { fRankingDiscriminatorName = discrName; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-03-14 16:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__Ranking.html:1059,log,logger,1059,root/html534/TMVA__Ranking.html,https://root.cern,https://root.cern/root/html534/TMVA__Ranking.html,1,['log'],['logger']
Testability,". TMVA::Tools. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Tools. class TMVA::Tools. Function Members (Methods); public:. ~Tools(); voidAddAttr(void* node, const char* attrname, const char* value); void*AddChild(void* parent, const char* childname, const char* content = 0, bool isRootNode = false); Bool_tAddComment(void* node, const char* comment); Bool_tAddRawLine(void* node, const char* raw); vector<TMatrixDSym*>*CalcCovarianceMatrices(const vector<TMVA::Event*,allocator<TMVA::Event*> >& events, Int_t maxCls); Bool_tCheckForSilentOption(const TString&) const; Bool_tCheckForVerboseOption(const TString&) const; Bool_tCheckSplines(const TH1*, const TSpline*); const TString&Color(const TString&); voidComputeStat(const vector<TMVA::Event*>&, vector<Float_t>*, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Int_t signalClass, Bool_t norm = kFALSE); Double_tComputeVariance(Double_t sumx2, Double_t sumx, Int_t nx); Bool_tContainsRegularExpression(const TString& s); static voidDestroyInstance(); voidFormattedOutput(const TMatrixD&, const vector<TString>&, TMVA::MsgLogger& logger); voidFormattedOutput(const TMatrixD&, const vector<TString>& vert, const vector<TString>& horiz, TMVA::MsgLogger& logger); voidFormattedOutput(const vector<Double_t>&, const vector<TString>&, const TString titleVars, const TString titleValues, TMVA::MsgLogger& logger, TString format = ""%+1.3f""); void*GetChild(void* parent, const char* childname = 0); const char*GetContent(void* node); const TMatrixD*GetCorrelationMatrix(const TMatrixD* covMat); Double_tGetCorrelationRatio(const TH2F&); Int_tGetIndexMaxElement(vector<Double_t>&); Int_tGetIndexMinElement(vector<Double_t>&); Double_tGetMutualInformation(const TH2F&); const char*GetName(void* node); void*GetNextChild(void* prevchild, const char* childna",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Tools.html:1285,log,logger,1285,root/html528/TMVA__Tools.html,https://root.cern,https://root.cern/root/html528/TMVA__Tools.html,3,['log'],['logger']
Testability,". TMVA::Tools. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Tools. class TMVA::Tools. Function Members (Methods); public:. ~Tools(); voidAddAttr(void* node, const char* attrname, const char* value); void*AddChild(void* parent, const char* childname, const char* content = 0, bool isRootNode = false); Bool_tAddComment(void* node, const char* comment); Bool_tAddRawLine(void* node, const char* raw); vector<TMatrixDSym*>*CalcCovarianceMatrices(const vector<TMVA::Event*,allocator<TMVA::Event*> >& events, Int_t maxCls, TMVA::VariableTransformBase* transformBase = 0); Bool_tCheckForSilentOption(const TString&) const; Bool_tCheckForVerboseOption(const TString&) const; Bool_tCheckSplines(const TH1*, const TSpline*); const TString&Color(const TString&); voidComputeStat(const vector<TMVA::Event*>&, vector<Float_t>*, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Int_t signalClass, Bool_t norm = kFALSE); Double_tComputeVariance(Double_t sumx2, Double_t sumx, Int_t nx); Bool_tContainsRegularExpression(const TString& s); static voidDestroyInstance(); voidFormattedOutput(const TMatrixD&, const vector<TString>&, TMVA::MsgLogger& logger); voidFormattedOutput(const TMatrixD&, const vector<TString>& vert, const vector<TString>& horiz, TMVA::MsgLogger& logger); voidFormattedOutput(const vector<Double_t>&, const vector<TString>&, const TString titleVars, const TString titleValues, TMVA::MsgLogger& logger, TString format = ""%+1.3f""); void*GetChild(void* parent, const char* childname = 0); const char*GetContent(void* node); const TMatrixD*GetCorrelationMatrix(const TMatrixD* covMat); Double_tGetCorrelationRatio(const TH2F&); Int_tGetIndexMaxElement(vector<Double_t>&); Int_tGetIndexMinElement(vector<Double_t>&); Double_tGetMutualInformation(const TH2F&); const char*GetName(void* node); void*G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__Tools.html:1333,log,logger,1333,root/html530/TMVA__Tools.html,https://root.cern,https://root.cern/root/html530/TMVA__Tools.html,6,['log'],['logger']
Testability,". TMessageHandler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TMessageHandler. class TMessageHandler: public TNamed, public TQObject. TMessageHandler. Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed.; All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004. Function Members (Methods); public:. TMessageHandler(const TClass* cl, Bool_t derived = kTRUE); TMessageHandler(const char* cl, Bool_t derived = kTRUE); virtual~TMessageHandler(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(); virtual voidAdded()SIGNAL ; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMessageHandler.html:819,log,logged,819,root/html528/TMessageHandler.html,https://root.cern,https://root.cern/root/html528/TMessageHandler.html,16,['log'],['logged']
Testability,". TMessageHandler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TMessageHandler. class TMessageHandler: public TNamed, public TQObject. TMessageHandler. Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed.; All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004. Function Members (Methods); public:. virtual~TMessageHandler(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(); virtual voidAdded()SIGNAL ; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMessageHandler.html:819,log,logged,819,root/html602/TMessageHandler.html,https://root.cern,https://root.cern/root/html602/TMessageHandler.html,8,['log'],['logged']
Testability,". TMultiLayerPerceptron. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MLP; » TMultiLayerPerceptron. class TMultiLayerPerceptron: public TObject. TMultiLayerPerceptron. This class describes a neural network.; There are facilities to train the network and use the output. The input layer is made of inactive neurons (returning the; optionaly normalized input) and output neurons are linear.; The type of hidden neurons is free, the default being sigmoids.; (One should still try to pass normalized inputs, e.g. between [0.,1]). The basic input is a TTree and two (training and test) TEventLists.; Input and output neurons are assigned a value computed for each event; with the same possibilities as for TTree::Draw().; Events may be weighted individualy or via TTree::SetWeight().; 6 learning methods are available: kStochastic, kBatch,; kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS. This implementation, written by C. Delaere, is *inspired* from; the mlpfit package from J.Schwindling et al. with some extensions:; * the algorithms are globally the same; * in TMultilayerPerceptron, there is no limitation on the number of; layers/neurons, while MLPFIT was limited to 2 hidden layers; * TMultilayerPerceptron allows you to save the network in a root file, and; provides more export functionalities; * TMultilayerPerceptron gives more flexibility regarding the normalization of; inputs/outputs; * TMultilayerPerceptron provides, thanks to Andrea Bocci, the possibility to; use cross-entropy errors, which allows to train a network for pattern; classification based on Bayesian posterior probability. . Introduction. Neural Networks are more and more used in various fields for data; analysis and classification, both for research and commercial; institutions. Some randomly choosen examples are:. image analysis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:753,test,test,753,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,3,['test'],['test']
Testability,". TMultiLayerPerceptron. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MLP; » TMultiLayerPerceptron. class TMultiLayerPerceptron: public TObject. TMultiLayerPerceptron. This class describes a neural network.; There are facilities to train the network and use the output. The input layer is made of inactive neurons (returning the; optionaly normalized input) and output neurons are linear.; The type of hidden neurons is free, the default being sigmoids.; (One should still try to pass normalized inputs, e.g. between [0.,1]). The basic input is a TTree and two (training and test) TEventLists.; Input and output neurons are assigned a value computed for each event; with the same possibilities as for TTree::Draw().; Events may be weighted individualy or via TTree::SetWeight().; 6 learning methods are available: kStochastic, kBatch,; kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS. This implementation, written by C. Delaere, is *inspired* from; the mlpfit package from J.Schwindling et al. with some extensions:; * the algorithms are globally the same; * in TMultilayerPerceptron, there is no limitation on the number of; layers/neurons, while MLPFIT was limited to 2 hidden layers; * TMultilayerPerceptron allows you to save the network in a root file, and; provides more export functionalities; * TMultilayerPerceptron gives more flexibility regarding the normalization of; inputs/outputs; * TMultilayerPerceptron provides, thanks to Andrea Bocci, the possibility to; use cross-entropy errors, which allows to train a network for pattern; classification based on Bayesian posterior probability. . Introduction. Neural Networks are more and more used in various fields for data; analysis and classification, both for research and commercial; institutions. Some randomly chosen examples are:. image analysis;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiLayerPerceptron.html:753,test,test,753,root/html534/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html534/TMultiLayerPerceptron.html,3,['test'],['test']
Testability,". TMySQLServer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » SQL; » MYSQL; » TMySQLServer. class TMySQLServer: public TSQLServer. TMySQLServer. MySQL server plugin implementing the TSQLServer interface. To open a connection to a server use the static method Connect().; The db argument of Connect() is of the form:; mysql://<host>[:<port>][/<database>], e.g.; mysql://pcroot.cern.ch:3456/test. As an example of connecting to mysql we assume that the server is; running on the local host and that you have access to a database; named ""test"" by connecting using an account that has a username and; password of ""tuser"" and ""tpass"". You can set up this account; by using the ""mysql"" program to connect to the server as the MySQL; root user and issuing the following statement:. mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';. If the test database does not exist, create it with this statement:. mysql> CREATE DATABASE test;. If you want to use a different server host, username, password,; or database name, just substitute the appropriate values.; To connect do:. TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");. Function Members (Methods); public:. TMySQLServer(const TMySQLServer&); TMySQLServer(const char* db, const char* uid, const char* pw); virtual~TMySQLServer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Bool_tCommit(); virtual Int_tTObject::Compare(const TObject* obj) const; static TSQLServer*TSQLServer::Connect(const char* db",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMySQLServer.html:558,test,test,558,root/html528/TMySQLServer.html,https://root.cern,https://root.cern/root/html528/TMySQLServer.html,12,['test'],['test']
Testability,". TMySQLServer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » SQL; » MYSQL; » TMySQLServer. class TMySQLServer: public TSQLServer. TMySQLServer. MySQL server plugin implementing the TSQLServer interface. To open a connection to a server use the static method Connect().; The db argument of Connect() is of the form:; mysql://<host>[:<port>][/<database>], e.g.; mysql://pcroot.cern.ch:3456/test. As an example of connecting to mysql we assume that the server is; running on the local host and that you have access to a database; named ""test"" by connecting using an account that has a username and; password of ""tuser"" and ""tpass"". You can set up this account; by using the ""mysql"" program to connect to the server as the MySQL; root user and issuing the following statement:. mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';. If the test database does not exist, create it with this statement:. mysql> CREATE DATABASE test;. If you want to use a different server host, username, password,; or database name, just substitute the appropriate values.; To connect do:. TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");. Function Members (Methods); public:. virtual~TMySQLServer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Bool_tCommit(); virtual Int_tTObject::Compare(const TObject* obj) const; static TSQLServer*TSQLServer::Connect(const char* db, const char* uid, const char* pw); virtual voidTObject::Copy(TObject& object) const; virtual Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMySQLServer.html:558,test,test,558,root/html602/TMySQLServer.html,https://root.cern,https://root.cern/root/html602/TMySQLServer.html,6,['test'],['test']
Testability,". TPDF. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » POSTSCRIPT; » TPDF. class TPDF: public TVirtualPS. TPDF: Graphics interface to PDF; Like PostScript, PDF is a vector graphics output format allowing a very high; graphics output quality. The functionalities provided by this class are very; similar to those provided by TPostScript. Compare to PostScript output, the PDF files are usually smaller because some; parts of them can be compressed. PDF also allows to define table of contents. This facility can be used in ROOT.; The following example shows how to proceed:. {; TCanvas* canvas = new TCanvas(""canvas"");; TH1F* histo = new TH1F(""histo"",""test 1"",10,0.,10.);; histo->SetFillColor(2);; histo->Fill(2.);; histo->Draw();; canvas->Print(""plots.pdf("",""Title:One bin filled"");; histo->Fill(4.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Two bins filled"");; histo->Fill(6.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Three bins filled"");; histo->Fill(8.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Four bins filled"");; histo->Fill(8.);; histo->Draw();; canvas->Print(""plots.pdf)"",""Title:The fourth bin content is 2"");; }. Each character string following the keyword ""Title:"" makes a new entry in; the table of contents.; . Function Members (Methods); public:. virtual~TPDF(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidCellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); virtual voidCellArrayEnd(); virtual voidCellArrayFill(Int_t r, Int_t g, Int_t b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TPDF.html:829,test,test,829,root/html604/TPDF.html,https://root.cern,https://root.cern/root/html604/TPDF.html,1,['test'],['test']
Testability,". TPDF. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » POSTSCRIPT; » TPDF. class TPDF: public TVirtualPS. TPDF: Graphics interface to PDF; Like PostScript, PDF is a vector graphics output format allowing a very high; graphics output quality. The functionnalities provided by this class are very; similar to those provided by TPostScript. Compare to PostScript output, the PDF files are usually smaller because some; parts of them can be compressed. PDF also allows to define table of contents. This facility can be used in ROOT.; The following example shows how to proceed:. {; TCanvas* canvas = new TCanvas(""canvas"");; TH1F* histo = new TH1F(""histo"",""test 1"",10,0.,10.);; histo->SetFillColor(2);; histo->Fill(2.);; histo->Draw();; canvas->Print(""plots.pdf("",""Title:One bin filled"");; histo->Fill(4.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Two bins filled"");; histo->Fill(6.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Three bins filled"");; histo->Fill(8.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Four bins filled"");; histo->Fill(8.);; histo->Draw();; canvas->Print(""plots.pdf)"",""Title:The fourth bin content is 2"");; }. Each character string following the keyword ""Title:"" makes a new entry in; the table of contents.; . Function Members (Methods); public:. TPDF(); TPDF(const char* filename, Int_t type = -111); virtual~TPDF(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidCellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); virtual voidCellArrayEnd(); virtual voidCellArrayFill(Int_t r, Int_t g, Int_t b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPDF.html:830,test,test,830,root/html528/TPDF.html,https://root.cern,https://root.cern/root/html528/TPDF.html,4,['test'],['test']
Testability,". TPDF. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » POSTSCRIPT; » TPDF. class TPDF: public TVirtualPS. TPDF: Graphics interface to PDF; Like PostScript, PDF is a vector graphics output format allowing a very high; graphics output quality. The functionnalities provided by this class are very; similar to those provided by TPostScript. Compare to PostScript output, the PDF files are usually smaller because some; parts of them can be compressed. PDF also allows to define table of contents. This facility can be used in ROOT.; The following example shows how to proceed:. {; TCanvas* canvas = new TCanvas(""canvas"");; TH1F* histo = new TH1F(""histo"",""test 1"",10,0.,10.);; histo->SetFillColor(2);; histo->Fill(2.);; histo->Draw();; canvas->Print(""plots.pdf("",""Title:One bin filled"");; histo->Fill(4.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Two bins filled"");; histo->Fill(6.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Three bins filled"");; histo->Fill(8.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Four bins filled"");; histo->Fill(8.);; histo->Draw();; canvas->Print(""plots.pdf)"",""Title:The fourth bin content is 2"");; }. Each character string following the keyword ""Title:"" makes a new entry in; the table of contents.; . Function Members (Methods); public:. virtual~TPDF(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidCellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); virtual voidCellArrayEnd(); virtual voidCellArrayFill(Int_t r, Int_t g, Int_t b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPDF.html:830,test,test,830,root/html602/TPDF.html,https://root.cern,https://root.cern/root/html602/TPDF.html,1,['test'],['test']
Testability,". TParallelCoordVar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREEVIEWER; » TParallelCoordVar. class TParallelCoordVar: public TNamed, public TAttLine, public TAttFill. Axes:. Class containing a variable for the TParallelCoord. Options can be defined each axis separatly using the right mouse click. These options can be applied to every axes using the editor. Axis width: If set to 0, the axis is simply a line. If higher, a color histogram is drawn on the axis.; Axis histogram height: If not 0, a usual bar histogram is drawn on the plot. The order in which the variables are drawn is essential to see the clusters. The axes can be dragged to change their position. A zoom is also available. The logarithm scale is also available by right clicking on the axis. Function Members (Methods); public:. TParallelCoordVar(); TParallelCoordVar(const TParallelCoordVar&); TParallelCoordVar(Double_t* val, const char* title, Int_t id, TParallelCoord* gram); virtual~TParallelCoordVar(); voidTObject::AbstractMethod(const char* method) const; voidAddRange()MENU ; voidAddRange(TParallelCoordRange* range); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDeleteVariable()MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TParallelCoordVar.html:881,log,logarithm,881,root/html530/TParallelCoordVar.html,https://root.cern,https://root.cern/root/html530/TParallelCoordVar.html,3,['log'],['logarithm']
Testability,". TParallelCoordVar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREEVIEWER; » TParallelCoordVar. class TParallelCoordVar: public TNamed, public TAttLine, public TAttFill. Axes:. Class containing a variable for the TParallelCoord. Options can be defined each axis separatly using the right mouse click. These options can be applied to every axes using the editor. Axis width: If set to 0, the axis is simply a line. If higher, a color histogram is drawn on the axis.; Axis histogram height: If not 0, a usual bar histogram is drawn on the plot. The order in which the variables are drawn is essential to see the clusters. The axes can be dragged to change their position. A zoom is also available. The logarithm scale is also available by right clicking on the axis. Function Members (Methods); public:. virtual~TParallelCoordVar(); voidTObject::AbstractMethod(const char* method) const; voidAddRange()MENU ; voidAddRange(TParallelCoordRange* range); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDeleteVariable()MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TParallelCoordVar.html:881,log,logarithm,881,root/html602/TParallelCoordVar.html,https://root.cern,https://root.cern/root/html602/TParallelCoordVar.html,2,['log'],['logarithm']
Testability,". TProofBench. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOFBENCH; » TProofBench. class TProofBench: public TObject. TProofBench. Steering class for PROOF benchmarks. Function Members (Methods); public:. TProofBench(const TProofBench&); TProofBench(const char* url, const char* outfile = ""<default>"", const char* proofopt = 0); virtual~TProofBench(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidCloseOutFile(); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; Int_tCopyDataSet(const char* dset, const char* dsetdst, const char* destdir); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; static voidDrawCPU(const char* outfile, const char* opt = ""std:""); static voidDrawDataSet(const char* outfile, const char* opt = ""std:"", const char* type = ""mbs""); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofBench.html:339,benchmark,benchmarks,339,root/html530/TProofBench.html,https://root.cern,https://root.cern/root/html530/TProofBench.html,2,['benchmark'],['benchmarks']
Testability,". TProofBench. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOFBENCH; » TProofBench. class TProofBench: public TObject. TProofBench. Steering class for PROOF benchmarks. Function Members (Methods); public:. TProofBench(const TProofBench&); TProofBench(const char* url, const char* outfile = ""<default>"", const char* proofopt = 0); virtual~TProofBench(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidCloseOutFile(); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; Int_tCopyDataSet(const char* dset, const char* dsetdst, const char* destdir); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; static voidDrawCPU(const char* outfile, const char* opt = ""std:"", Bool_t verbose = kFALSE, Int_t dofit = 0, Int_t n0 = -1, Int_t n1 = -1); static voidDrawDataSet(const char* outfile, const char* opt = ""std:"", const char* type = ""mbs"", Bool_t verbose = kFALSE, Int_t dofit = 0, Int_t n0 = -1, Int_t n1 = -1); static voidDrawEfficiency(const char* outfile, const char* opt = """", Bool_t verbose = kFALSE); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* met",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofBench.html:339,benchmark,benchmarks,339,root/html534/TProofBench.html,https://root.cern,https://root.cern/root/html534/TProofBench.html,1,['benchmark'],['benchmarks']
Testability,". TProofBench. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOFBENCH; » TProofBench. class TProofBench: public TObject. TProofBench. Steering class for PROOF benchmarks. Function Members (Methods); public:. virtual~TProofBench(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidCloseOutFile(); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; Int_tCopyDataSet(const char* dset, const char* dsetdst, const char* destdir); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; static voidDrawCPU(const char* outfile, const char* opt = ""std:"", Bool_t verbose = kFALSE, Int_t dofit = 0, Int_t n0 = -1, Int_t n1 = -1); static voidDrawDataSet(const char* outfile, const char* opt = ""std:"", const char* type = ""mbs"", Bool_t verbose = kFALSE, Int_t dofit = 0, Int_t n0 = -1, Int_t n1 = -1); static voidDrawEfficiency(const char* outfile, const char* opt = """", Bool_t verbose = kFALSE); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofBench.html:339,benchmark,benchmarks,339,root/html602/TProofBench.html,https://root.cern,https://root.cern/root/html602/TProofBench.html,2,['benchmark'],['benchmarks']
Testability,". TProofBenchRun. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOFBENCH; » TProofBenchRun. class TProofBenchRun: public TObject. TProofBenchRun. Abstract base class for PROOF benchmark run. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TProofBenchRun(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofBenchRun.html:356,benchmark,benchmark,356,root/html530/TProofBenchRun.html,https://root.cern,https://root.cern/root/html530/TProofBenchRun.html,5,['benchmark'],['benchmark']
Testability,". TProofBenchRunCPU. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOFBENCH; » TProofBenchRunCPU. class TProofBenchRunCPU: public TProofBenchRun. TProofBenchRunCPU. CPU-intensive PROOF benchmark test generates events and fill 1, 2,; or 3-D histograms. No I/O activity is involved. Function Members (Methods); public:. TProofBenchRunCPU(const TProofBenchRunCPU&); TProofBenchRunCPU(TPBHistType* histtype = 0, Int_t nhists = 16, TDirectory* dirproofbench = 0, TProof* proof = 0, TProofNodes* nodes = 0, Long64_t nevents = 1000000, Int_t ntries = 2, Int_t start = 1, Int_t stop = -1, Int_t step = 1, Int_t draw = 0, Int_t debug = 0); virtual~TProofBenchRunCPU(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidDrawPerfPlots(); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofBenchRunCPU.html:365,benchmark,benchmark,365,root/html530/TProofBenchRunCPU.html,https://root.cern,https://root.cern/root/html530/TProofBenchRunCPU.html,6,"['benchmark', 'test']","['benchmark', 'test']"
Testability,". TProofBenchRunCPU. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOFBENCH; » TProofBenchRunCPU. class TProofBenchRunCPU: public TProofBenchRun. TProofBenchRunCPU. CPU-intensive PROOF benchmark test generates events and fill 1, 2,; or 3-D histograms. No I/O activity is involved. Function Members (Methods); public:. virtual~TProofBenchRunCPU(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidDrawPerfPlots(); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TCanvas*GetCanvas() const; Int_tGetDebug() const; TDirectory*GetDirProofBench() const; Int_tGetDraw() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofBenchRunCPU.html:365,benchmark,benchmark,365,root/html602/TProofBenchRunCPU.html,https://root.cern,https://root.cern/root/html602/TProofBenchRunCPU.html,4,"['benchmark', 'test']","['benchmark', 'test']"
Testability,". TProofBenchRunDataRead. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOFBENCH; » TProofBenchRunDataRead. class TProofBenchRunDataRead: public TProofBenchRun. TProofBenchRunDataRead. I/O-intensive PROOF benchmark test reads in event files distributed; on the cluster. Number of events processed per second and size of; events processed per second are plotted against number of active; workers. Performance rate for unit packets and performance rate; for query are plotted. Function Members (Methods); public:. TProofBenchRunDataRead(const TProofBenchRunDataRead&); TProofBenchRunDataRead(TProofBenchDataSet* pbds, TPBReadType* readtype = 0, TDirectory* dirproofbench = 0, TProof* proof = 0, TProofNodes* nodes = 0, Long64_t nevents = -1, Int_t ntries = 2, Int_t start = 1, Int_t stop = -1, Int_t step = 1, Int_t debug = 0); virtual~TProofBenchRunDataRead(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidDrawPerfProfiles(); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofBenchRunDataRead.html:385,benchmark,benchmark,385,root/html530/TProofBenchRunDataRead.html,https://root.cern,https://root.cern/root/html530/TProofBenchRunDataRead.html,6,"['benchmark', 'test']","['benchmark', 'test']"
Testability,". TProofBenchRunDataRead. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOFBENCH; » TProofBenchRunDataRead. class TProofBenchRunDataRead: public TProofBenchRun. TProofBenchRunDataRead. I/O-intensive PROOF benchmark test reads in event files distributed; on the cluster. Number of events processed per second and size of; events processed per second are plotted against number of active; workers. Performance rate for unit packets and performance rate; for query are plotted. Function Members (Methods); public:. virtual~TProofBenchRunDataRead(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidDrawPerfProfiles(); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofBenchRunDataRead.html:385,benchmark,benchmark,385,root/html602/TProofBenchRunDataRead.html,https://root.cern,https://root.cern/root/html602/TProofBenchRunDataRead.html,4,"['benchmark', 'test']","['benchmark', 'test']"
Testability,". TProofDebug. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofDebug. class TProofDebug. TProofDebug. Detailed logging / debug scheme. Function Members (Methods); public:. TProofDebug(); TProofDebug(const TProofDebug&); ~TProofDebug(); TProofDebug&operator=(const TProofDebug&). Data Members; public:. enum EProofDebugMask { kNone; kPacketizer; kLoop; kSelector; kOutput; kInput; kGlobal; kPackage; kFeedback; kCondor; kDraw; kAsyn; kCache; kCollect; kDataset; kSubmerger; kAll; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: Maarten Ballintijn 19/6/2002 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TProofDebug.h 31505 2009-12-02 13:20:06Z brun $ » Last generated: 2010-09-23 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofDebug.html:276,log,logging,276,root/html528/TProofDebug.html,https://root.cern,https://root.cern/root/html528/TProofDebug.html,1,['log'],['logging']
Testability,". TProofDebug. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofDebug. class TProofDebug. TProofDebug. Detailed logging / debug scheme. Function Members (Methods); public:. TProofDebug(); TProofDebug(const TProofDebug&); ~TProofDebug(); TProofDebug&operator=(const TProofDebug&). Data Members; public:. enum EProofDebugMask { kNone; kPacketizer; kLoop; kSelector; kOutput; kInput; kGlobal; kPackage; kFeedback; kCondor; kDraw; kAsyn; kCache; kCollect; kDataset; kSubmerger; kAll; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: Maarten Ballintijn 19/6/2002 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TProofDebug.h 31505 2009-12-02 13:20:06Z brun $ » Last generated: 2011-07-04 15:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofDebug.html:278,log,logging,278,root/html530/TProofDebug.html,https://root.cern,https://root.cern/root/html530/TProofDebug.html,1,['log'],['logging']
Testability,". TProofDebug. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofDebug. class TProofDebug. TProofDebug. Detailed logging / debug scheme. Function Members (Methods); public:. TProofDebug(); TProofDebug(const TProofDebug&); ~TProofDebug(); TProofDebug&operator=(const TProofDebug&). Data Members; public:. enum EProofDebugMask { kNone; kPacketizer; kLoop; kSelector; kOutput; kInput; kGlobal; kPackage; kFeedback; kCondor; kDraw; kAsyn; kCache; kCollect; kDataset; kSubmerger; kMonitoring; kAll; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: Maarten Ballintijn 19/6/2002 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-09-08 17:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofDebug.html:278,log,logging,278,root/html534/TProofDebug.html,https://root.cern,https://root.cern/root/html534/TProofDebug.html,1,['log'],['logging']
Testability,". TProofDebug. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofDebug. class TProofDebug. TProofDebug. Detailed logging / debug scheme. Function Members (Methods); public:. TProofDebug(); TProofDebug(const TProofDebug&); ~TProofDebug(); TProofDebug&operator=(const TProofDebug&). Data Members; public:. enum EProofDebugMask { kNone; kPacketizer; kLoop; kSelector; kOutput; kInput; kGlobal; kPackage; kFeedback; kCondor; kDraw; kAsyn; kCache; kCollect; kDataset; kSubmerger; kMonitoring; kAll; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: Maarten Ballintijn 19/6/2002 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TProofDebug.h 40699 2011-08-25 10:36:29Z rdm $ » Last generated: 2011-11-03 20:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofDebug.html:278,log,logging,278,root/html532/TProofDebug.html,https://root.cern,https://root.cern/root/html532/TProofDebug.html,1,['log'],['logging']
Testability,". TProofDebug. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofDebug. class TProofDebug. TProofDebug. Detailed logging / debug scheme. Function Members (Methods); public:. ~TProofDebug(); TProofDebug&operator=(const TProofDebug&); TProofDebug&operator=(TProofDebug&&); TProofDebug(); TProofDebug(const TProofDebug&); TProofDebug(TProofDebug&&). Data Members; public:. static TProofDebug::EProofDebugMaskkAll; static TProofDebug::EProofDebugMaskkAsyn; static TProofDebug::EProofDebugMaskkCache; static TProofDebug::EProofDebugMaskkCollect; static TProofDebug::EProofDebugMaskkCondor; static TProofDebug::EProofDebugMaskkDataset; static TProofDebug::EProofDebugMaskkDraw; static TProofDebug::EProofDebugMaskkFeedback; static TProofDebug::EProofDebugMaskkGlobal; static TProofDebug::EProofDebugMaskkInput; static TProofDebug::EProofDebugMaskkLoop; static TProofDebug::EProofDebugMaskkMonitoring; static TProofDebug::EProofDebugMaskkNone; static TProofDebug::EProofDebugMaskkOutput; static TProofDebug::EProofDebugMaskkPackage; static TProofDebug::EProofDebugMaskkPacketizer; static TProofDebug::EProofDebugMaskkSelector; static TProofDebug::EProofDebugMaskkSubmerger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: Maarten Ballintijn 19/6/2002 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-06-30 15:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofDebug.html:302,log,logging,302,root/html602/TProofDebug.html,https://root.cern,https://root.cern/root/html602/TProofDebug.html,1,['log'],['logging']
Testability,". TProofDebug. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofDebug. class TProofDebug. TProofDebug. Detailed logging / debug scheme. Function Members (Methods); public:. ~TProofDebug(); TProofDebug&operator=(const TProofDebug&); TProofDebug&operator=(TProofDebug&&); TProofDebug(); TProofDebug(const TProofDebug&); TProofDebug(TProofDebug&&). Data Members; public:. static TProofDebug::EProofDebugMaskkAll; static TProofDebug::EProofDebugMaskkAsyn; static TProofDebug::EProofDebugMaskkCache; static TProofDebug::EProofDebugMaskkCollect; static TProofDebug::EProofDebugMaskkCondor; static TProofDebug::EProofDebugMaskkDataset; static TProofDebug::EProofDebugMaskkDraw; static TProofDebug::EProofDebugMaskkFeedback; static TProofDebug::EProofDebugMaskkGlobal; static TProofDebug::EProofDebugMaskkInput; static TProofDebug::EProofDebugMaskkLoop; static TProofDebug::EProofDebugMaskkMonitoring; static TProofDebug::EProofDebugMaskkNone; static TProofDebug::EProofDebugMaskkOutput; static TProofDebug::EProofDebugMaskkPackage; static TProofDebug::EProofDebugMaskkPacketizer; static TProofDebug::EProofDebugMaskkSelector; static TProofDebug::EProofDebugMaskkSubmerger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: Maarten Ballintijn 19/6/2002 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-09-08 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofDebug.html:302,log,logging,302,root/html604/TProofDebug.html,https://root.cern,https://root.cern/root/html604/TProofDebug.html,1,['log'],['logging']
Testability,". TProofLog. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofLog. class TProofLog: public TNamed, public TQObject. TProofLog. Implementation of the PROOF session log handler. Function Members (Methods); public:. TProofLog(const char* stag, const char* url, TProofMgr* mgr); virtual~TProofLog(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTQObject::Destroyed()SIGNAL ; Bool_tTQObject::Disconnect(const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(TQObject* sender, const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofLog.html:353,log,log,353,root/html528/TProofLog.html,https://root.cern,https://root.cern/root/html528/TProofLog.html,4,['log'],['log']
Testability,". TProofLog. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofLog. class TProofLog: public TNamed, public TQObject. TProofLog. Implementation of the PROOF session log handler. Function Members (Methods); public:. virtual~TProofLog(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTQObject::Destroyed()SIGNAL ; Bool_tTQObject::Disconnect(const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(TQObject* sender, const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(const char* class_name, const char* signal, void* receiver = 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofLog.html:353,log,log,353,root/html602/TProofLog.html,https://root.cern,https://root.cern/root/html602/TProofLog.html,2,['log'],['log']
Testability,". TProofLogElem. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofLogElem. class TProofLogElem: public TNamed. TProofLog. Implementation of the PROOF session log handler. Function Members (Methods); public:. TProofLogElem(const TProofLogElem&); TProofLogElem(const char* ord, const char* url, TProofLog* logger); virtual~TProofLogElem(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDisplay(Int_t from = 0, Int_t to = -1); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofLogElem.html:322,log,log,322,root/html528/TProofLogElem.html,https://root.cern,https://root.cern/root/html528/TProofLogElem.html,1,['log'],['log']
Testability,". TProofLogElem. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofLogElem. class TProofLogElem: public TNamed. TProofLog. Implementation of the PROOF session log handler. Function Members (Methods); public:. TProofLogElem(const TProofLogElem&); TProofLogElem(const char* ord, const char* url, TProofLog* logger); virtual~TProofLogElem(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDisplay(Int_t from = 0, Int_t to = -1); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofLogElem.html:324,log,log,324,root/html530/TProofLogElem.html,https://root.cern,https://root.cern/root/html530/TProofLogElem.html,3,['log'],['log']
Testability,". TProofLogElem. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofLogElem. class TProofLogElem: public TNamed. TProofLog. Implementation of the PROOF session log handler. Function Members (Methods); public:. virtual~TProofLogElem(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDisplay(Int_t from = 0, Int_t to = -1); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TMacro*GetMacro() const; static Long64_tGetMaxTransferSize(); virtual const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofLogElem.html:348,log,log,348,root/html602/TProofLogElem.html,https://root.cern,https://root.cern/root/html602/TProofLogElem.html,2,['log'],['log']
Testability,". TProofProgressLog. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TProofProgressLog. class TProofProgressLog: public TGTransientFrame. TProofProgressLog. Dialog used to display Proof session logs from the Proof progress; dialog.; It uses TProofMgr::GetSessionLogs() mechanism internally. Function Members (Methods); public:. TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); virtual~TProofProgressLog(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidAddBuffer(const char* buffer); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuildLogList(Bool_t create = kFALSE); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidClear(Option_t* = 0); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofProgressLog.html:385,log,logs,385,root/html528/TProofProgressLog.html,https://root.cern,https://root.cern/root/html528/TProofProgressLog.html,4,['log'],['logs']
Testability,". TProofProgressLog. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TProofProgressLog. class TProofProgressLog: public TGTransientFrame. TProofProgressLog. Dialog used to display Proof session logs from the Proof progress; dialog.; It uses TProofMgr::GetSessionLogs() mechanism internally. Function Members (Methods); public:. virtual~TProofProgressLog(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidAddBuffer(const char* buffer); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuildLogList(Bool_t create = kFALSE); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidClear(Option_t* = 0); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofProgressLog.html:385,log,logs,385,root/html602/TProofProgressLog.html,https://root.cern,https://root.cern/root/html602/TProofProgressLog.html,2,['log'],['logs']
Testability,". TRFIOFile. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » RFIO; » TRFIOFile. class TRFIOFile: public TFile. TRFIOFile. A TRFIOFile is like a normal TFile except that it reads and writes; its data via a rfiod server (for more on the rfiod daemon see; http://wwwinfo.cern.ch/pdp/serv/shift.html). TRFIOFile file names; are in standard URL format with protocol ""rfio"". The following are; valid TRFIOFile URL's:. rfio:/afs/cern.ch/user/r/rdm/galice.root; where galice.root is a symlink of the type /shift/.../...; rfio:na49db1:/data1/raw.root; rfio:/castor/cern.ch/user/r/rdm/test.root. If Castor 2.1 is used the file names can be given also in the; following ways:. rfio://host:port/?path=FILEPATH; rfio://host/?path=FILEPATH; rfio:///castor?path=FILEPATH; rfio://stager_host:stager_port/?path=/castor/cern.ch/user/r/; rdm/bla.root&svcClass=MYSVCLASS&castorVersion=MYCASTORVERSION; rfio://stager_host/?path=/castor/cern.ch/user/r/; rdm/bla.root&svcClass=MYSVCLASS&castorVersion=MYCASTORVERSION; rfio:///castor?path=/castor/cern.ch/user/r/; rdm/bla.root&svcClass=MYSVCLASS&castorVersion=MYCASTORVERSION. path is mandatory as parameter but all the other ones are optional. For the ultimate description of supported urls see:; https://twiki.cern.ch/twiki/bin/view/FIOgroup/RfioRootTurl. Function Members (Methods); public:. TRFIOFile(const char* url, Option_t* option = """", const char* ftitle = """", Int_t compress = 1); virtual~TRFIOFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Op",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TRFIOFile.html:748,test,test,748,root/html530/TRFIOFile.html,https://root.cern,https://root.cern/root/html530/TRFIOFile.html,2,['test'],['test']
Testability,". TRFIOSystem. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » RFIO; » TRFIOSystem. class TRFIOSystem: public TSystem. TRFIOFile. A TRFIOFile is like a normal TFile except that it reads and writes; its data via a rfiod server (for more on the rfiod daemon see; http://wwwinfo.cern.ch/pdp/serv/shift.html). TRFIOFile file names; are in standard URL format with protocol ""rfio"". The following are; valid TRFIOFile URL's:. rfio:/afs/cern.ch/user/r/rdm/galice.root; where galice.root is a symlink of the type /shift/.../...; rfio:na49db1:/data1/raw.root; rfio:/castor/cern.ch/user/r/rdm/test.root. If Castor 2.1 is used the file names can be given also in the; following ways:. rfio://host:port/?path=FILEPATH; rfio://host/?path=FILEPATH; rfio:///castor?path=FILEPATH; rfio://stager_host:stager_port/?path=/castor/cern.ch/user/r/; rdm/bla.root&svcClass=MYSVCLASS&castorVersion=MYCASTORVERSION; rfio://stager_host/?path=/castor/cern.ch/user/r/; rdm/bla.root&svcClass=MYSVCLASS&castorVersion=MYCASTORVERSION; rfio:///castor?path=/castor/cern.ch/user/r/; rdm/bla.root&svcClass=MYSVCLASS&castorVersion=MYCASTORVERSION. path is mandatory as parameter but all the other ones are optional. For the ultimate description of supported urls see:; https://twiki.cern.ch/twiki/bin/view/FIOgroup/RfioRootTurl. Function Members (Methods); public:. TRFIOSystem(); virtual~TRFIOSystem(); virtual voidTSystem::Abort(int code = 0); voidTObject::AbstractMethod(const char* method) const; virtual intTSystem::AcceptConnection(int sock); virtual Bool_tAccessPathName(const char* path, EAccessMode mode); virtual voidTSystem::AddDynamicPath(const char* pathname); virtual voidTSystem::AddFileHandler(TFileHandler* fh); virtual voidTSystem::AddIncludePath(const char* includePath); virtual voidTSystem::AddLinkedLibs(const char* linkedLib); virtual voidTSy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TRFIOSystem.html:756,test,test,756,root/html530/TRFIOSystem.html,https://root.cern,https://root.cern/root/html530/TRFIOSystem.html,2,['test'],['test']
Testability,". TSQLServer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TSQLServer. class TSQLServer: public TObject. TSQLServer. Abstract base class defining interface to a SQL server. To open a connection to a server use the static method Connect().; The db argument of Connect() is of the form:; <dbms>://<host>[:<port>][/<database>], e.g.; mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main, ...; Depending on the <dbms> specified an appropriate plugin library; will be loaded which will provide the real interface.; For SQLite, the syntax is slightly different:; sqlite://<database>; The string 'database' is directly passed to sqlite3_open(_v2),; so e.g. a filename or "":memory:"" are possible values.; For SQLite versions >= 3.7.7, SQLITE_OPEN_URI is activated to also; allow URI-parameters if needed. Related classes are TSQLResult and TSQLRow. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TSQLServer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Bool_tCommit(); virtual Int_tTObject::Compare(const TObject* obj) const; static TSQLServer*Connect(const char* db, const char* uid, const char* pw); virtual voidTObject::Copy(TObject& object) const; virtual Int_tCreateDataBase(const char* dbname); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSQLServer.html:567,test,test,567,root/html602/TSQLServer.html,https://root.cern,https://root.cern/root/html602/TSQLServer.html,2,['test'],['test']
Testability,". TSQLServer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TSQLServer. class TSQLServer: public TObject. TSQLServer. Abstract base class defining interface to a SQL server. To open a connection to a server use the static method Connect().; The db argument of Connect() is of the form:; <dbms>://<host>[:<port>][/<database>], e.g.; mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main, ...; Depending on the <dbms> specified an appropriate plugin library; will be loaded which will provide the real interface. Related classes are TSQLResult and TSQLRow. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TSQLServer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Bool_tCommit(); virtual Int_tTObject::Compare(const TObject* obj) const; static TSQLServer*Connect(const char* db, const char* uid, const char* pw); virtual voidTObject::Copy(TObject& object) const; virtual Int_tCreateDataBase(const char* dbname); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Int_tDropDataBase(const char* dbname); virtual voidTObject::Dump() constMENU ; virtual voidEnableErrorOutput(Bool_t on = kTRUE); virtual voidTObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSQLServer.html:543,test,test,543,root/html528/TSQLServer.html,https://root.cern,https://root.cern/root/html528/TSQLServer.html,3,['test'],['test']
Testability,". TSQLServer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TSQLServer. class TSQLServer: public TObject. TSQLServer. Abstract base class defining interface to a SQL server. To open a connection to a server use the static method Connect().; The db argument of Connect() is of the form:; <dbms>://<host>[:<port>][/<database>], e.g.; mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main, ...; Depending on the <dbms> specified an appropriate plugin library; will be loaded which will provide the real interface.; For SQLite, the syntax is slightly different:; sqlite://<database>; The string 'database' is directly passed to sqlite3_open(_v2),; so e.g. a filename or "":memory:"" are possible values.; For SQLite versions >= 3.7.7, SQLITE_OPEN_URI is activated to also; allow URI-parameters if needed. Related classes are TSQLResult and TSQLRow. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TSQLServer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Bool_tCommit(); virtual Int_tTObject::Compare(const TObject* obj) const; static TSQLServer*Connect(const char* db, const char* uid, const char* pw); virtual voidTObject::Copy(TObject& object) const; virtual Int_tCreateDataBase(const char* dbname); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSQLServer.html:543,test,test,543,root/html534/TSQLServer.html,https://root.cern,https://root.cern/root/html534/TSQLServer.html,1,['test'],['test']
Testability,". TSessionLogView. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TSessionLogView. class TSessionLogView: public TGTransientFrame. TSessionLogView. Dialog used to display session logs from the session viewer. Function Members (Methods); public:. virtual~TSessionLogView(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidAddBuffer(const char* buffer); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); voidClearLogView(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSessionLogView.html:395,log,logs,395,root/html602/TSessionLogView.html,https://root.cern,https://root.cern/root/html602/TSessionLogView.html,2,['log'],['logs']
Testability,". TSessionLogView. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TSessionLogView. class TSessionLogView: public TGTransientFrame. TSessionLogView. Dialog used to display session logs from the session viewer. Function Members (Methods); public:. TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h); virtual~TSessionLogView(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidAddBuffer(const char* buffer); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); voidClearLogView(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSessionLogView.html:371,log,logs,371,root/html528/TSessionLogView.html,https://root.cern,https://root.cern/root/html528/TSessionLogView.html,4,['log'],['logs']
Testability,". TTree and Its Data | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials TTree and Its Data. TTree; A TTree is a large, structured chunk of data on disk. The trick is tha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/ttree-and-its-data.html:716,test,tests,716,d/ttree-and-its-data.html,https://root.cern,https://root.cern/d/ttree-and-its-data.html,1,['test'],['tests']
Testability,". TUnuran. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » UNURAN; » TUnuran. class TUnuran. Function Members (Methods); public:. ~TUnuran(); TRandom*GetRandom(); boolInit(const string& distr, const string& method); boolInit(const TUnuranContDist& distr, const string& method = ""auto""); boolInit(const TUnuranMultiContDist& distr, const string& method = ""hitro""); boolInit(const TUnuranDiscrDist& distr, const string& method = ""auto""); boolInit(const TUnuranEmpDist& distr, const string& method = ""empk""); boolInitBinomial(unsigned int ntot, double prob, const string& method = ""dstd""); boolInitPoisson(double mu, const string& method = ""dstd""); const string&MethodName() const; boolReInitDiscrDist(unsigned int npar, double* params); doubleSample(); intSampleDiscr(); boolSampleMulti(double* x); boolSetLogLevel(unsigned int iflag = 1); boolSetLogStream(); voidSetRandom(TRandom* r); voidSetSeed(unsigned int seed); TUnuran(TRandom* r = 0, unsigned int log = 0). protected:. boolSetContDistribution(const TUnuranContDist& dist); boolSetDiscreteDistribution(const TUnuranDiscrDist& dist); boolSetEmpiricalDistribution(const TUnuranEmpDist& dist); boolSetMethodAndInit(); boolSetMultiDistribution(const TUnuranMultiContDist& dist); boolSetRandomGenerator(). private:. TUnuran&operator=(const TUnuran& rhs); TUnuran(const TUnuran&). Data Members; protected:. auto_ptr<TUnuranBaseDist>fDistpointer for distribution wrapper; UNUR_GEN*fGenpointer to the UnuRan C generator struct; stringfMethodstring representing the method; TRandom*fRngpointer to ROOT random number generator; UNUR_DISTR*fUdistrpointer to the UnuRan C distribution struct; UNUR_URNG*fUrngpointer to Unuran C random generator struct. Class Charts. Inheritance Chart:. TUnuran. Function documentation; TUnuran(TRandom* r = 0, unsigned int l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnuran.html:1153,log,log,1153,root/html602/TUnuran.html,https://root.cern,https://root.cern/root/html602/TUnuran.html,1,['log'],['log']
Testability,". TUnuran. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » UNURAN; » TUnuran. class TUnuran. Function Members (Methods); public:. ~TUnuran(); TRandom*GetRandom(); boolInit(const string& distr, const string& method); boolInit(const TUnuranContDist& distr, const string& method = ""auto""); boolInit(const TUnuranMultiContDist& distr, const string& method = ""hitro""); boolInit(const TUnuranDiscrDist& distr, const string& method = ""auto""); boolInit(const TUnuranEmpDist& distr, const string& method = ""empk""); boolInitBinomial(unsigned int ntot, double prob, const string& method = ""dstd""); boolInitPoisson(double mu, const string& method = ""dstd""); const string&MethodName() const; boolReInitDiscrDist(unsigned int npar, double* params); doubleSample(); intSampleDiscr(); boolSampleMulti(double* x); boolSetLogLevel(unsigned int iflag = 1); boolSetLogStream(); voidSetRandom(TRandom* r); voidSetSeed(unsigned int seed); TUnuran(TRandom* r = 0, unsigned int log = 0). protected:. boolSetContDistribution(const TUnuranContDist& dist); boolSetDiscreteDistribution(const TUnuranDiscrDist& dist); boolSetEmpiricalDistribution(const TUnuranEmpDist& dist); boolSetMethodAndInit(); boolSetMultiDistribution(const TUnuranMultiContDist& dist); boolSetRandomGenerator(). private:. TUnuran&operator=(const TUnuran& rhs); TUnuran(const TUnuran&). Data Members; protected:. auto_ptr<TUnuranBaseDist>fDistpointer for distribution wrapper; UNUR_GEN*fGenpointer to the UnuRan C generator struct; stringfMethodstring representing the method; TRandom*fRngpointer to ROOT random number generator; UNUR_DISTR*fUdistrpointer to the UnuRan C distribution struct; UNUR_URNG*fUrngpointer to Unuran C random generator struct. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TUnuran(TRandom* r = 0, unsigned int l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TUnuran.html:1129,log,log,1129,root/html604/TUnuran.html,https://root.cern,https://root.cern/root/html604/TUnuran.html,1,['log'],['log']
Testability,". TVectorT<double>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATRIX; » TVectorT<double>. class TVectorT<double>: public TObject. TVectorT. Template class of Vectors in the linear algebra package. Unless otherwise specified, vector indices always start with 0,; spanning up to the specified limit-1. For (n) vectors where n <= kSizeMax (5 currently) storage space is; available on the stack, thus avoiding expensive allocation/; deallocation of heap space . However, this introduces of course; kSizeMax overhead for each vector object . If this is an issue; recompile with a new appropriate value (>=0) for kSizeMax. Another way to assign and store vector data is through Use; see for instance stressLinear.cxx file . Note that Constructors/assignments exists for all different matrix; views. For usage examples see $ROOTSYS/test/stressLinear.cxx. This class is also known as (typedefs to this class)TVectorD, TVectorT<Double_t>. Function Members (Methods); public:. TVectorT<double>(); TVectorT<double>(Int_t n); TVectorT<double>(const TVectorT<double>& another); TVectorT<double>(const TMatrixTRow_const<double>& mr); TVectorT<double>(const TMatrixTColumn_const<double>& mc); TVectorT<double>(const TMatrixTDiag_const<double>& md); TVectorT<double>(const TVectorT<float>& another); TVectorT<double>(Int_t lwb, Int_t upb); TVectorT<double>(Int_t n, const double* elements); TVectorT<double>(Int_t lwb, Int_t upb, const double* elements); virtual~TVectorT<double>(); TVectorT<double>&Abs(); voidTObject::AbstractMethod(const char* method) const; voidAdd(const TVectorT<double>& v); voidAdd(const TVectorT<double>& v1, const TVectorT<double>& v2); voidAddSomeConstant(double val, const TVectorT<double>& select); virtual voidTObject::AppendPad(Option_t* option = """"); TVectorT<double>&Apply(const TElementActionT<double>&",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TVectorT_double_.html:1006,test,test,1006,root/html530/TVectorT_double_.html,https://root.cern,https://root.cern/root/html530/TVectorT_double_.html,2,['test'],['test']
Testability,". TVectorT<double>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATRIX; » TVectorT<double>. class TVectorT<double>: public TObject. TVectorT. Template class of Vectors in the linear algebra package. Unless otherwise specified, vector indices always start with 0,; spanning up to the specified limit-1. For (n) vectors where n <= kSizeMax (5 currently) storage space is; available on the stack, thus avoiding expensive allocation/; deallocation of heap space . However, this introduces of course; kSizeMax overhead for each vector object . If this is an issue; recompile with a new appropriate value (>=0) for kSizeMax. Another way to assign and store vector data is through Use; see for instance stressLinear.cxx file . Note that Constructors/assignments exists for all different matrix; views. For usage examples see $ROOTSYS/test/stressLinear.cxx. This class is also known as (typedefs to this class)TVectorT<Double_t>, TVectorD. Function Members (Methods); public:. TVectorT<double>(); TVectorT<double>(Int_t n); TVectorT<double>(const TVectorT<double>& another); TVectorT<double>(const TMatrixTRow_const<double>& mr); TVectorT<double>(const TMatrixTColumn_const<double>& mc); TVectorT<double>(const TMatrixTDiag_const<double>& md); TVectorT<double>(const TVectorT<float>& another); TVectorT<double>(Int_t lwb, Int_t upb); TVectorT<double>(Int_t n, const double* elements); TVectorT<double>(Int_t lwb, Int_t upb, const double* elements); virtual~TVectorT<double>(); TVectorT<double>&Abs(); voidTObject::AbstractMethod(const char* method) const; voidAdd(const TVectorT<double>& v); voidAdd(const TVectorT<double>& v1, const TVectorT<double>& v2); voidAddSomeConstant(double val, const TVectorT<double>& select); virtual voidTObject::AppendPad(Option_t* option = """"); TVectorT<double>&Apply(const TElementActionT<double>&",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVectorT_double_.html:1006,test,test,1006,root/html528/TVectorT_double_.html,https://root.cern,https://root.cern/root/html528/TVectorT_double_.html,2,['test'],['test']
Testability,". TVectorT<float>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATRIX; » TVectorT<float>. class TVectorT<float>: public TObject. TVectorT. Template class of Vectors in the linear algebra package. Unless otherwise specified, vector indices always start with 0,; spanning up to the specified limit-1. For (n) vectors where n <= kSizeMax (5 currently) storage space is; available on the stack, thus avoiding expensive allocation/; deallocation of heap space . However, this introduces of course; kSizeMax overhead for each vector object . If this is an issue; recompile with a new appropriate value (>=0) for kSizeMax. Another way to assign and store vector data is through Use; see for instance stressLinear.cxx file . Note that Constructors/assignments exists for all different matrix; views. For usage examples see $ROOTSYS/test/stressLinear.cxx. This class is also known as (typedefs to this class)TVectorT<Float_t>, TVector, TVectorF. Function Members (Methods); public:. TVectorT<float>(); TVectorT<float>(Int_t n); TVectorT<float>(const TVectorT<float>& another); TVectorT<float>(const TMatrixTRow_const<float>& mr); TVectorT<float>(const TMatrixTColumn_const<float>& mc); TVectorT<float>(const TMatrixTDiag_const<float>& md); TVectorT<float>(const TVectorT<double>& another); TVectorT<float>(Int_t lwb, Int_t upb); TVectorT<float>(Int_t n, const float* elements); TVectorT<float>(Int_t lwb, Int_t upb, const float* elements); virtual~TVectorT<float>(); TVectorT<float>&Abs(); voidTObject::AbstractMethod(const char* method) const; voidAdd(const TVectorT<float>& v); voidAdd(const TVectorT<float>& v1, const TVectorT<float>& v2); voidAddSomeConstant(float val, const TVectorT<float>& select); virtual voidTObject::AppendPad(Option_t* option = """"); TVectorT<float>&Apply(const TElementActionT<float>& action); TVectorT<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVectorT_float_.html:1003,test,test,1003,root/html534/TVectorT_float_.html,https://root.cern,https://root.cern/root/html534/TVectorT_float_.html,1,['test'],['test']
Testability,". TVectorT<float>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATRIX; » TVectorT<float>. class TVectorT<float>: public TObject. TVectorT. Template class of Vectors in the linear algebra package. Unless otherwise specified, vector indices always start with 0,; spanning up to the specified limit-1. For (n) vectors where n <= kSizeMax (5 currently) storage space is; available on the stack, thus avoiding expensive allocation/; deallocation of heap space . However, this introduces of course; kSizeMax overhead for each vector object . If this is an issue; recompile with a new appropriate value (>=0) for kSizeMax. Another way to assign and store vector data is through Use; see for instance stressLinear.cxx file . Note that Constructors/assignments exists for all different matrix; views. For usage examples see $ROOTSYS/test/stressLinear.cxx. This class is also known as (typedefs to this class)TVectorT<Float_t>, TVectorF, TVector. Function Members (Methods); public:. TVectorT<float>(); TVectorT<float>(Int_t n); TVectorT<float>(const TVectorT<float>& another); TVectorT<float>(const TMatrixTRow_const<float>& mr); TVectorT<float>(const TMatrixTColumn_const<float>& mc); TVectorT<float>(const TMatrixTDiag_const<float>& md); TVectorT<float>(const TVectorT<double>& another); TVectorT<float>(Int_t lwb, Int_t upb); TVectorT<float>(Int_t n, const float* elements); TVectorT<float>(Int_t lwb, Int_t upb, const float* elements); virtual~TVectorT<float>(); TVectorT<float>&Abs(); voidTObject::AbstractMethod(const char* method) const; voidAdd(const TVectorT<float>& v); voidAdd(const TVectorT<float>& v1, const TVectorT<float>& v2); voidAddSomeConstant(float val, const TVectorT<float>& select); virtual voidTObject::AppendPad(Option_t* option = """"); TVectorT<float>&Apply(const TElementActionT<float>& action); TVectorT<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVectorT_float_.html:1003,test,test,1003,root/html528/TVectorT_float_.html,https://root.cern,https://root.cern/root/html528/TVectorT_float_.html,3,['test'],['test']
Testability,". TVirtualFFT. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TVirtualFFT. class TVirtualFFT: public TObject. TVirtualFFT. TVirtualFFT is an interface class for Fast Fourier Transforms. The default FFT library is FFTW. To use it, FFTW3 library should already; be installed, and ROOT should be have fftw3 module enabled, with the directories; of fftw3 include file and library specified (see installation instructions).; Function SetDefaultFFT() allows to change the default library. Available transform types:; FFT:; - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); in one or more dimensions, -1 in the exponent; - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); in one or more dimensions, +1 in the exponent; - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); in one or more dimensions,; - ""C2R"" - inverse transforms to ""R2C"", taking complex input; (storing the non-redundant half of a logically Hermitian array); to real output; - ""R2HC"" - a real-input DFT with output in ¡Èhalfcomplex¡É format,; i.e. real and imaginary parts for a transform of size n stored as; r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; - ""HC2R"" - computes the reverse of FFTW_R2HC, above; - ""DHT"" - computes a discrete Hartley transform. Sine/cosine transforms:; Different types of transforms are specified by parameter kind of the SineCosine() static; function. 4 different kinds of sine and cosine transforms are available; DCT-I (REDFT00 in FFTW3 notation)- kind=0; DCT-II (REDFT01 in FFTW3 notation)- kind=1; DCT-III(REDFT10 in FFTW3 notation)- kind=2; DCT-IV (REDFT11 in FFTW3 notation)- kind=3; DST-I (RODFT00 in FFTW3 notation)- kind=4; DST-II (RODFT01 in FFTW3 notation)- kind=5; DST-III(RODFT10 in FFTW3 notation)- kind=6; DST-IV (RODFT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVirtualFFT.html:1165,log,logically,1165,root/html602/TVirtualFFT.html,https://root.cern,https://root.cern/root/html602/TVirtualFFT.html,2,['log'],['logically']
Testability,". TVirtualFFT. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TVirtualFFT. class TVirtualFFT: public TObject. TVirtualFFT. TVirtualFFT is an interface class for Fast Fourier Transforms. The default FFT library is FFTW. To use it, FFTW3 library should already; be installed, and ROOT should be have fftw3 module enabled, with the directories; of fftw3 include file and library specified (see installation instructions).; Function SetDefaultFFT() allows to change the default library. Available transform types:; FFT:; - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); in one or more dimensions, -1 in the exponent; - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); in one or more dimensions, +1 in the exponent; - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); in one or more dimensions,; - ""C2R"" - inverse transforms to ""R2C"", taking complex input; (storing the non-redundant half of a logically Hermitian array); to real output; - ""R2HC"" - a real-input DFT with output in ¡Èhalfcomplex¡É format,; i.e. real and imaginary parts for a transform of size n stored as; r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; - ""HC2R"" - computes the reverse of FFTW_R2HC, above; - ""DHT"" - computes a discrete Hartley transform. Sine/cosine transforms:; Different types of transforms are specified by parameter kind of the SineCosine() static; function. 4 different kinds of sine and cosine transforms are available; DCT-I (REDFT00 in FFTW3 notation)- kind=0; DCT-II (REDFT01 in FFTW3 notation)- kind=1; DCT-III(REDFT10 in FFTW3 notation)- kind=2; DCT-IV (REDFT11 in FFTW3 notation)- kind=3; DST-I (RODFT00 in FFTW3 notation)- kind=4; DST-II (RODFT01 in FFTW3 notation)- kind=5; DST-III(RODFT10 in FFTW3 notation)- kind=6; DST-IV (RODFT11 in FFTW3 notation)- k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TVirtualFFT.html:1141,log,logically,1141,root/html530/TVirtualFFT.html,https://root.cern,https://root.cern/root/html530/TVirtualFFT.html,3,['log'],['logically']
Testability,". TVirtualFFT. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TVirtualFFT. class TVirtualFFT: public TObject. TVirtualFFT. TVirtualFFT is an interface class for Fast Fourier Transforms. The default FFT library is FFTW. To use it, FFTW3 library should already; be installed, and ROOT should be have fftw3 module enabled, with the directories; of fftw3 include file and library specified (see installation instructions).; Function SetDefaultFFT() allows to change the default library. Available transform types:; FFT:; - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); in one or more dimensions, -1 in the exponent; - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); in one or more dimensions, +1 in the exponent; - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); in one or more dimensions,; - ""C2R"" - inverse transforms to ""R2C"", taking complex input; (storing the non-redundant half of a logically Hermitian array); to real output; - ""R2HC"" - a real-input DFT with output in ¡Èhalfcomplex¡É format,; i.e. real and imaginary parts for a transform of size n stored as; r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; - ""HC2R"" - computes the reverse of FFTW_R2HC, above; - ""DHT"" - computes a discrete Hartley transform. Sine/cosine transforms:; Different types of transforms are specified by parameter kind of the SineCosine() static; function. 4 different kinds of sine and cosine transforms are available; DCT-I (REDFT00 in FFTW3 notation)- kind=0; DCT-II (REDFT10 in FFTW3 notation)- kind=1; DCT-III(REDFT01 in FFTW3 notation)- kind=2; DCT-IV (REDFT11 in FFTW3 notation)- kind=3; DST-I (RODFT00 in FFTW3 notation)- kind=4; DST-II (RODFT10 in FFTW3 notation)- kind=5; DST-III(RODFT01 in FFTW3 notation)- kind=6; DST-IV (RODFT11 in FFTW3 notation)- k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualFFT.html:1141,log,logically,1141,root/html528/TVirtualFFT.html,https://root.cern,https://root.cern/root/html528/TVirtualFFT.html,1,['log'],['logically']
Testability,". TVirtualViewer3D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TVirtualViewer3D. class TVirtualViewer3D: public TObject. TVirtualViewer3D. Abstract 3D shapes viewer. The concrete implementations are:. TViewerX3D : X3d viewer; TGLViewer : OpenGL viewer. ; 3D Viewer Infrastructure Overview; The 3D Viewer infrastructure consists of:. TVirtualViewer3D interface: An abstract handle to the viewer, allowing; client to test preferences, add objects, control the viewer via scripting; (to be added) etc.; TBuffer3D class hierarchy: Used to describe 3D objects; (""shapes""); - filled /added by negotiation with viewer via TVirtualViewer3D. Together these allow clients to publish objects to any one of the 3D viewers; (currently OpenGL/x3d,TPad), free of viewer specific drawing code. They allow; our simple x3d viewer, and considerably more sophisticated OpenGL one to both; work with both geometry libraries (g3d and geom) efficiently.; Publishing to a viewer consists of the following steps:. Create / obtain viewer handle; Begin scene on viewer; Fill mandatory parts of TBuffer3D describing object; Add to viewer; Fill optional parts of TBuffer3D if requested by viewer, and add again; ... repeat 3/4/5; as required; End scene on viewer. Creating / Obtaining Viewer; Create/obtain the viewer handle via local/global pad - the viewer is always; bound to a TPad object at present [This may be removed as a restriction in; the future] . You should perform the publishing to the viewer described below; in the Paint() method of the object you attach to the pad (via Draw()); TVirtualViewer3D * v = gPad->GetViewer3D(""xxxx"");; "" xxxx"" is viewer type: OpenGL ""ogl"", X3D ""x3d"" or; Pad ""pad"" (default). The viewer is created via the plugin manager,; attached to pad, and the interface returned.; Begi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVirtualViewer3D.html:627,test,test,627,root/html602/TVirtualViewer3D.html,https://root.cern,https://root.cern/root/html602/TVirtualViewer3D.html,2,['test'],['test']
Testability,". TVirtualViewer3D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TVirtualViewer3D. class TVirtualViewer3D: public TObject. TVirtualViewer3D. Abstract 3D shapes viewer. The concrete implementations are:. TViewerX3D : X3d viewer; TGLViewer : OpenGL viewer. ; 3D Viewer Infrastructure Overview; The 3D Viewer infrastructure consists of:. TVirtualViewer3D interface: An abstract handle to the viewer, allowing; client to test preferences, add objects, control the viewer via scripting; (to be added) etc.; TBuffer3D class hierarchy: Used to describe 3D objects; (""shapes""); - filled /added by negotiation with viewer via TVirtualViewer3D. Together these allow clients to publish objects to any one of the 3D viewers; (currently OpenGL/x3d,TPad), free of viewer specific drawing code. They allow; our simple x3d viewer, and considerably more sophisticated OpenGL one to both; work with both geometry libraries (g3d and geom) efficiently.; Publishing to a viewer consists of the following steps:. Create / obtain viewer handle; Begin scene on viewer; Fill mandatory parts of TBuffer3D describing object; Add to viewer; Fill optional parts of TBuffer3D if requested by viewer, and add again; ... repeat 3/4/5; as required; End scene on viewer. Creating / Obtaining Viewer; Create/obtain the viewer handle via local/global pad - the viewer is always; bound to a TPad object at present [This may be removed as a restriction in; the future] . You should perform the publishing to the viewer described below; in the Paint() method of the object you attach to the pad (via Draw()); TVirtualViewer3D * v = gPad->GetViewer3D(""xxxx"");; "" xxxx"" is viewer type: OpenGL ""ogl"", X3D ""x3d"" or; Pad ""pad"" (default). The viewer is created via the plugin manager,; attached to pad, and the interface returned.; Begin / End Scene; Objects m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualViewer3D.html:603,test,test,603,root/html528/TVirtualViewer3D.html,https://root.cern,https://root.cern/root/html528/TVirtualViewer3D.html,4,['test'],['test']
Testability,". Team | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » About Team. . Axel Naumann ; ; Starting off as a physicist, Axel studied physics and math in Muenster, Germany. In 2000, he got a Ph.D. position for high energy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/team.html:702,test,tests,702,d/team.html,https://root.cern,https://root.cern/d/team.html,1,['test'],['tests']
Testability,". That quantity is recognized as; one of the measures to determine key quantities in the network. What is done is to vary one input around its nominal value and to see; how the NN changes. This is done for each entry in the sample and produces; a distribution. What you can learn from that is:; - is variable a really useful, or is my network insensitive to it ?; - is there any risk of big systematic ? Is the network extremely sensitive; to small variations of any of my inputs ?. As you might understand, this is to be considered with care and can serve; as input for an ""educated guess"" when optimizing the network. void DrawNetwork(Int_t neuron, const char* signal, const char* bg); Draws the distribution of the neural network (using ith neuron).; Two distributions are drawn, for events passing respectively the ""signal""; and ""background"" cuts. Only the test sample is used. TProfile* DrawTruthDeviation(Int_t outnode = 0, Option_t* option = """"); Create a profile of the difference of the MLP output minus the; true value for a given output node outnode, vs the true value for; outnode, for all test data events. This method is mainly useful; when doing regression analysis with the MLP (i.e. not classification,; but continuous truth values).; The resulting TProfile histogram is returned.; It is not drawn if option ""goff"" is specified.; Options are passed to TProfile::Draw. THStack* DrawTruthDeviations(Option_t* option = """"); Creates TProfiles of the difference of the MLP output minus the; true value vs the true value, one for each output, filled with the; test data events. This method is mainly useful when doing regression; analysis with the MLP (i.e. not classification, but continuous truth; values).; The returned THStack contains all the TProfiles. It is drawn unless; the option ""goff"" is specified.; Options are passed to TProfile::Draw. TProfile* DrawTruthDeviationInOut(Int_t innode, Int_t outnode = 0, Option_t* option = """"); Creates a profile of the difference of the MLP o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMLPAnalyzer.html:8282,test,test,8282,root/html528/TMLPAnalyzer.html,https://root.cern,https://root.cern/root/html528/TMLPAnalyzer.html,6,['test'],['test']
Testability,". The End | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials The End. You are done - that was the introductory tutorial!. Image by Tangopaso; If you want to go on, have ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/end.html:705,test,tests,705,d/end.html,https://root.cern,https://root.cern/d/end.html,1,['test'],['tests']
Testability,". The first argument only disables or enables gradient parallelization, this is on by default. The second argument determines the internal partial derivative calculation ordering strategy. The third argument determines the number of partial derivatives that are executed per task package on each worker. . ParallelDescentOptions(bool enable=false, int splitStrategy=0, int numSplits=4) Experimental - Control settings related to the parallelization of likelihoods outside of the gradient calculation but in the minimization, most prominently in the linesearch step. The first argument this disables or enables likelihood parallelization. The second argument determines whether to split the task batches per event or per likelihood component. And the third argument how many events or respectively components to include in each batch. . TimingAnalysis(bool flag) Experimental - Log timings. This feature logs timings with NewStyle likelihoods on multiple processes simultaneously and outputs the timings at the end of a run to json log files, which can be analyzed with the RooFit::MultiProcess::HeatmapAnalyzer. Only works with simultaneous likelihoods. . PyROOT; The RooAbsPdf::fitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 157 of file RooAbsPdf.h. ◆ fitToImpl(). std::unique_ptr< RooFitResult > RooAbsPdf::fitToImpl ; (; RooAbsData & ; data, . const RooLinkedList & ; cmdList . ). protectedvirtual . Protected implementation of the likelihood fitting routine. ; This virtual function can be overridden in case you want to change the likelihood fitting logic for custom PDFs.; NoteNever call this function directly. Instead, call RooAbsPdf::fitTo(). ; Definition at line 1072 of file RooAbsPdf.cxx. ◆ genContext(). RooAbsGenContext * RooAbsPdf::genContext ; (; const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; verbose =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:111468,log,logs,111468,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,2,['log'],"['log', 'logs']"
Testability,". Therefore, we had to set in the example above of the (10x10) Hilbert, which is near singular, the tolerance on 10e-12 . (The fact that we have to set the tolerance < sqrt(epsilon) is a clear indication that we are losing precision .); If the matrix is flagged as being singular, operations with the decomposition will fail and will return matrices/vectors that are invalid .; The observant reader will notice that by scaling the complete matrix by some small number the decomposition will detect a singular matrix . In this case the user will have to reduce the tolerance number by this factor . (For CPU time saving we decided not to make this an automatic procedure) .; Code for this could look as follows: const Double_t max_abs = Abs(a).Max();; const Double_t scale = TMath::Min(max_abs,1.);; a.SetTol(a.GetTol()*scale);; a#define a(i)Definition RSha256.hxx:99; double; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; For usage examples see $ROOTSYS/test/stressLinear.cxx ; Definition at line 33 of file TDecompBase.h. Public Member Functions;  TDecompBase ();  Default constructor. ;  ;  TDecompBase (const TDecompBase &another);  Copy constructor. ;  ;  ~TDecompBase () override;  ; virtual Double_t Condition ();  Matrix condition number. ;  ; virtual Bool_t Decompose ()=0;  ; virtual void Det (Double_t &d1, Double_t &d2);  Matrix determinant det = d1*TMath::Power(2.,d2) ;  ; Int_t GetColLwb () const;  ; Double_t GetCondition () const;  ; Double_t GetDet1 () const;  ; Double_t GetDet2 () const;  ; virtual Int_t GetNcols () const =0;  ; virtual Int_t GetNrows () const =0;  ; Int_t GetRowLwb () const;  ; Double_t GetTol () const;  ; TClass * IsA () const override;  ; virtual Bool_t MultiSolve (TMatrixD &B);  Solve set of equations with RHS in columns of B. ;  ; TDecompBase & operator= (const TDecompBase &source);  Assignment operator. ;  ; void Print (Option_t *opt="""") const override;  Print class members. ;  ; Double_t SetTo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompBase.html:4403,test,test,4403,doc/master/classTDecompBase.html,https://root.cern,https://root.cern/doc/master/classTDecompBase.html,1,['test'],['test']
Testability,". This function sets the following fitting parameters of peaks:; -sigmaX - initial value of sigma x parameter; -fixSigmaX - logical value of sigma x parameter, which allows to fix the parameter (not to fit); -sigmaY - initial value of sigma y parameter; -fixSigmaY - logical value of sigma y parameter, which allows to fix the parameter (not to fit); -ro - initial value of ro parameter (correlation coefficient); -fixRo - logical value of ro parameter, which allows to fix the parameter (not to fit); -positionInitX - aray of initial values of peaks x positions; -fixPositionX - array of logical values which allow to fix appropriate x positions (not fit). However they are present in the estimated functional.; -positionInitY - aray of initial values of peaks y positions; -fixPositionY - array of logical values which allow to fix appropriate y positions (not fit). However they are present in the estimated functional.; -ampInit - aray of initial values of 2D peaks amplitudes; -fixAmp - aray of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; -ampInitX1 - aray of initial values of amplitudes of 1D ridges in x direction; -fixAmpX1 - aray of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional; -ampInitY1 - aray of initial values of amplitudes of 1D ridges in y direction; -fixAmpY1 - aray of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional. void SetBackgroundParameters(Double_t a0Init, Bool_t fixA0, Double_t axInit, Bool_t fixAx, Double_t ayInit, Bool_t fixAy). SETTER FUNCTION. This function sets the following fitting parameters of background:; -a0Init - initial value of a0 parameter (backgroud is estimated as a0+ax*x+ay*y); -fixA0 - logical value of a0 parameter, which allows to fix the parameter (not ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Fit.html:65477,log,logical,65477,root/html528/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Fit.html,6,['log'],['logical']
Testability,". TutorialSelector.C | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop TutorialSelector.C. // This class is derived from the ROOT class TSelector to demonstrate; // the use of PROOF with the R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/tutorialselectorc.html:716,test,tests,716,d/tutorialselectorc.html,https://root.cern,https://root.cern/d/tutorialselectorc.html,1,['test'],['tests']
Testability,". Tutorials | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Tutorials. ROOT offers a rich set of code examples that allow you to see ROOT's building blocks ""in action"", as part of more complex programs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/tutorials.html:707,test,tests,707,d/tutorials.html,https://root.cern,https://root.cern/d/tutorials.html,1,['test'],['tests']
Testability,". Using TTree::Draw() to access a TTree | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Using TTree::Draw() to access a TTree. Now close the browser, quit and restart",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/using-ttreedraw-access-ttree.html:735,test,tests,735,d/using-ttreedraw-access-ttree.html,https://root.cern,https://root.cern/d/using-ttreedraw-access-ttree.html,1,['test'],['tests']
Testability,". Using a Macro to Read a TTree | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Using a Macro to Read a TTree. Why using a macro?; As real analyses don't fit into sim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/using-macro-read-ttree.html:727,test,tests,727,d/using-macro-read-ttree.html,https://root.cern,https://root.cern/d/using-macro-read-ttree.html,1,['test'],['tests']
Testability,". Using a TSelector with PROOF | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Using a TSelector with PROOF. For people having a multi (e.g. dual) core computer, it i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/using-tselector-proof.html:726,test,tests,726,d/using-tselector-proof.html,https://root.cern,https://root.cern/d/using-tselector-proof.html,1,['test'],['tests']
Testability,". We now take as a new model ; . We thus want to; minimize; . (7). where ; is a vector of the; dependent quantity in the sample. Differentiation with respect to; gives, using (6),; . (8). or; . (9). Let be the sum of squares of residuals when taking functions; into account. Then; . (10). Using (9), we see that; .  ;  .  ;  . (11). So for each new function included in the model, we get a; reduction of the sum of squares of residuals of ; ,; where ; is given by (4) and by; (9). Thus, using the Gram-Schmidt orthogonalisation, we; can decide if we want to include this function in the final model,; before the matrix inversion.; . Function Selection Based on Residual; . Supposing that steps of the procedure have been performed, the; problem now is to consider the ; function.; ; The sum of squares of residuals can be written as; . (12). where the relation (9) have been taken into account. The; contribution of the ; function to the reduction of S, is; given by; . (13). Two test are now applied to decide whether this . function is to be included in the final expression, or not.; . Test 1; . Denoting by the subspace spanned by; ; the function ; is; by construction (see (4)) the projection of the function; onto the direction perpendicular to . Now, if the; length of ; (given by ; ); is very small compared to the length of ; this new; function can not contribute much to the reduction of the sum of; squares of residuals. The test consists then in calculating the angle; between the two vectors ; and . (see also figure 1) and requiring that it's; greater then a threshold value which the user must set; (TMultiDimFit::SetMinAngle).; . Figure 1:; (a) Angle between ; and; ; , (b) angle between ; and; . ; Test 2; . Let ; be the data vector to be fitted. As illustrated in; figure 1, the ; function . will contribute significantly to the reduction of , if the angle; ; between ; and ; is smaller than; an upper limit , defined by the user; (TMultiDimFit::SetMaxAngle); ; However, the method ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiDimFit.html:6915,test,test,6915,root/html534/TMultiDimFit.html,https://root.cern,https://root.cern/root/html534/TMultiDimFit.html,3,['test'],['test']
Testability,". Workshops | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » News Workshops. Here the list with ROOT workshops:. ROOT 2018 ; ROOT 2015 ; ROOT 2013 (slides); ROOT 2007 (slides); ROOT 2005 (slides); ROOT 2007; ROOT 200",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/workshops.html:707,test,tests,707,d/workshops.html,https://root.cern,https://root.cern/d/workshops.html,1,['test'],['tests']
Testability,". XMLNodePointer_t TGDMLWrite::StartAssemblyN ; (; const char * ; name). private . Creates ""assembly"" node for GDML. ; Definition at line 2098 of file TGDMLWrite.cxx. ◆ StartGDMLWriting(). static void TGDMLWrite::StartGDMLWriting ; (; TGeoManager * ; geomanager, . const char * ; filename, . TString ; option . ). inlinestatic . Definition at line 61 of file TGDMLWrite.h. ◆ StartVolumeN(). XMLNodePointer_t TGDMLWrite::StartVolumeN ; (; const char * ; name, . const char * ; solid, . const char * ; material . ). private . Creates ""volume"" node for GDML. ; Definition at line 2078 of file TGDMLWrite.cxx. ◆ UnsetTemporaryBits(). void TGDMLWrite::UnsetTemporaryBits ; (; TGeoManager * ; geoMng). private . Unsetting bits that were changed in gGeoManager during export so that export can be run more times with the same instance of gGeoManager. ; Definition at line 2498 of file TGDMLWrite.cxx. ◆ WriteGDMLfile() [1/5]. void TGDMLWrite::WriteGDMLfile ; (; TGeoManager * ; geomanager, . const char * ; filename = ""test.gdml"", . TString ; option = """" . ). Definition at line 264 of file TGDMLWrite.cxx. ◆ WriteGDMLfile() [2/5]. void TGDMLWrite::WriteGDMLfile ; (; TGeoManager * ; geomanager, . TGeoNode * ; top_node, . const char * ; filename = ""test.gdml"", . TString ; option = """" . ). Definition at line 279 of file TGDMLWrite.cxx. ◆ WriteGDMLfile() [3/5]. void TGDMLWrite::WriteGDMLfile ; (; TGeoManager * ; geomanager, . TGeoNode * ; top_node, . TList * ; materialsLst, . const char * ; filename, . TString ; option . ). private . Wrapper of all exporting methods Creates blank GDML file and fills it with gGeoManager structure converted to GDML structure of xml nodes. ; Definition at line 307 of file TGDMLWrite.cxx. ◆ WriteGDMLfile() [4/5]. void TGDMLWrite::WriteGDMLfile ; (; TGeoManager * ; geomanager, . TGeoVolume * ; top_vol, . const char * ; filename = ""test.gdml"", . TString ; option = """" . ). Definition at line 2516 of file TGDMLWrite.cxx. ◆ WriteGDMLfile() [5/5]. void TGDMLWrite::WriteG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDMLWrite.html:43587,test,test,43587,doc/master/classTGDMLWrite.html,https://root.cern,https://root.cern/doc/master/classTGDMLWrite.html,1,['test'],['test']
Testability,". __device__ AFloat TMVA::DNN::Cuda::AtomicAdd ; (; AFloat * ; address, . AFloat ; val . ). ◆ AtomicAdd() [2/3]. template<> . __device__ double TMVA::DNN::Cuda::AtomicAdd ; (; double * ; address, . double ; val . ). Definition at line 34 of file Kernels.cuh. ◆ AtomicAdd() [3/3]. template<> . __device__ float TMVA::DNN::Cuda::AtomicAdd ; (; float * ; address, . float ; val . ). Definition at line 48 of file Kernels.cuh. ◆ calculateDimension(). __device__ int TMVA::DNN::Cuda::calculateDimension ; (; int ; imgDim, . int ; fltDim, . int ; padding, . int ; stride . ). Calculate the dimension of an output volume, given the sliding parameters and the input shape. ; Parameters. [in]imgDimThe size of the input tensor in a spatial dimension. ; [in]fltDimThe size of the sliding filter in the same dimension. ; [in]paddingNumber of zeroes to pad the input with. ; [in]strideNumber of pixels the kernel is sliding in each iteration. . ReturnsThe output dimension.; Note that no checks are performed to assert validity of the input parameters. We are allowed to assume them valid because those checks have already been performed prior to the invocation of the kernel. ; Definition at line 226 of file Kernels.cuh. ◆ ConstAdd(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::ConstAdd ; (; AFloat * ; A, . AFloat ; beta, . int ; m, . int ; n . ). Definition at line 335 of file Kernels.cuh. ◆ ConstMult(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::ConstMult ; (; AFloat * ; A, . AFloat ; beta, . int ; m, . int ; n . ). Definition at line 349 of file Kernels.cuh. ◆ CrossEntropy(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::CrossEntropy ; (; AFloat * ; result, . const AFloat * ; Y, . const AFloat * ; output, . const AFloat * ; weights, . int ; m, . int ; n . ). Definition at line 800 of file Kernels.cuh. ◆ CrossEntropyGradients(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::CrossEntropyGradients ; (; AFloat * ; dY, . const AFl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html:10692,assert,assert,10692,doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html,1,['assert'],['assert']
Testability,". double ; alpha, . double ; theta, . double ; x0 = 0 . ). inline . Probability density function of the gamma distribution. . \[ p(x) = {1 \over \Gamma(\alpha) \theta^{\alpha}} x^{\alpha-1} e^{-x/\theta} \]. for x>0. For detailed description see Mathworld. ; Definition at line 363 of file PdfFuncMathCore.h. ◆ gaussian_pdf(). double ROOT::Math::gaussian_pdf ; (; double ; x, . double ; sigma = 1, . double ; x0 = 0 . ). inline . Probability density function of the normal (Gaussian) distribution. . \[ p(x) = {1 \over \sqrt{2 \pi \sigma^2}} e^{-x^2 / 2\sigma^2} \]. For detailed description see Mathworld. It can also be evaluated using normal_pdf which will call the same implementation. ; Definition at line 402 of file PdfFuncMathCore.h. ◆ landau_pdf(). double ROOT::Math::landau_pdf ; (; double ; x, . double ; xi = 1, . double ; x0 = 0 . ). Probability density function of the Landau distribution: . \[ p(x) = \frac{1}{\xi} \phi (\lambda) \]. with ; \[ \phi(\lambda) = \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} e^{\lambda s + s \log{s}} ds\]. where \(\lambda = (x-x_0)/\xi\). For a detailed description see K.S. Kölbig and B. Schorr, A program package for the Landau distribution, Computer Phys. Comm. 31 (1984) 97-111 [Erratum-ibid. 178 (2008) 972]. The same algorithms as in CERNLIB (DENLAN) is used; Parameters. xThe argument \(x\) ; xiThe width parameter \(\xi\) ; x0The location parameter \(x_0\) . Definition at line 21 of file PdfFuncMathCore.cxx. ◆ lognormal_pdf(). double ROOT::Math::lognormal_pdf ; (; double ; x, . double ; m, . double ; s, . double ; x0 = 0 . ). inline . Probability density function of the lognormal distribution. . \[ p(x) = {1 \over x \sqrt{2 \pi s^2} } e^{-(\ln{x} - m)^2/2 s^2} \]. for x>0. For detailed description see Mathworld. Parameters. xx variable ; mM = 0 for lognormal ; sscale parameter (not the sigma of the distribution which is not even defined) ; x0location parameter, corresponds approximately to the most probable value. For x0 = 0, sigma =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__PdfFunc.html:9333,log,log,9333,doc/master/group__PdfFunc.html,https://root.cern,https://root.cern/doc/master/group__PdfFunc.html,1,['log'],['log']
Testability,". get the mode (vector of coordinate positions of the maxima of the distribution) If a mode has not defined return a NULL pointer ; Definition at line 136 of file TUnuranMultiContDist.h. ◆ GetUpperDomain(). const double * TUnuranMultiContDist::GetUpperDomain ; (; ); const. inline . get the distribution upper domain values. ; Return a null pointer if domain is not defined ; Definition at line 126 of file TUnuranMultiContDist.h. ◆ Gradient(). void TUnuranMultiContDist::Gradient ; (; const double * ; x, . double * ; grad . ); const. evaluate the gradient vector of the Pdf. ; Used by UnuRan ; Definition at line 82 of file TUnuranMultiContDist.cxx. ◆ IsA(). TClass * TUnuranMultiContDist::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TUnuranBaseDist.; Definition at line 176 of file TUnuranMultiContDist.h. ◆ IsLogPdf(). bool TUnuranMultiContDist::IsLogPdf ; (; ); const. inline . flag to control if given function represent the log of a pdf ; Definition at line 145 of file TUnuranMultiContDist.h. ◆ NDim(). unsigned int TUnuranMultiContDist::NDim ; (; ); const. inline . get number of dimension of the distribution ; Definition at line 92 of file TUnuranMultiContDist.h. ◆ operator=(). TUnuranMultiContDist & TUnuranMultiContDist::operator= ; (; const TUnuranMultiContDist & ; rhs). Assignment operator. ; Definition at line 51 of file TUnuranMultiContDist.cxx. ◆ Pdf(). double TUnuranMultiContDist::Pdf ; (; const double * ; x); const. evaluate the probability density function, used by UnuRan ; Definition at line 75 of file TUnuranMultiContDist.cxx. ◆ SetDomain(). void TUnuranMultiContDist::SetDomain ; (; const double * ; xmin, . const double * ; xmax . ). inline . set the domain of the distribution giving an array of minimum and maximum values By default otherwise the domain is undefined, i.e. ; is [-inf,+inf] To remove the domain do a SetDomain(0,0). There is no possibility to have a domain defined in only one coordinate. U",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnuranMultiContDist.html:8212,log,log,8212,doc/master/classTUnuranMultiContDist.html,https://root.cern,https://root.cern/doc/master/classTUnuranMultiContDist.html,1,['log'],['log']
Testability,". h->SetStats(0). and activate it again with:. h->SetStats(1). Fit Statistics; The type of information about fit parameters printed in the histogram statistics; box can be selected via the parameter mode. The parameter mode can be; = pcev (default = 0111). p = 1; print Probability; c = 1; print Chisquare/Number of degrees of freedom; e = 1; print errors (if e=1, v must be 1); v = 1; print name/values of parameters. Example:. gStyle->SetOptFit(1011);. print fit probability, parameter names/values and errors. When ""v"" = 1 is specified, only the non-fixed parameters are; shown.; When ""v"" = 2 all parameters are shown. Note: gStyle->SetOptFit(1) means ""default value"", so it is equivalent; to gStyle->SetOptFit(111); Statistics box editing; The following example show how to remove and add a line in a statistics box. Picture; Source. TCanvas *statsEditing() {; // This example shows:; // - how to remove a stat element from the stat box; // - how to add a new one; //n cte and plot a test histogram with stats; TCanvas *se = new TCanvas;; TH1F *h = new TH1F(""h"",""test"",100,-3,3);; h->FillRandom(""gaus"",3000);; gStyle->SetOptStat();; h->Draw();; se->Update();. TPaveStats *ps = (TPaveStats*)se->GetPrimitive(""stats"");; ps->SetName(""mystats"");; TList *list = ps->GetListOfLines();. ; TText *tconst = ps->GetLineWith(""RMS"");; list->Remove(tconst);. ; ""="" is a control character; TLatex *myt = new TLatex(0,0,""Test = 10"");; myt ->SetTextFont(42);; myt ->SetTextSize(0.04);; myt ->SetTextColor(kRed);; list->Add(myt);. ; h->SetStats(0);. se->Modified();; return se;; } . Function Members (Methods); public:. TPaveStats(); TPaveStats(const TPaveStats&); TPaveStats(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Option_t* option = ""br""); virtual~TPaveStats(); voidTObject::AbstractMethod(const char* method) const; virtual TBox*AddBox(Double_t, Double_t, Double_t, Double_t); virtual TLine*AddLine(Double_t, Double_t, Double_t, Double_t); virtual TText*TPaveText::AddText(const char* label); virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPaveStats.html:5183,test,test,5183,root/html534/TPaveStats.html,https://root.cern,https://root.cern/root/html534/TPaveStats.html,2,['test'],['test']
Testability,". illegal for a TH2 ; Reimplemented from TH1.; Reimplemented in TH2Poly.; Definition at line 1440 of file TH2.cxx. ◆ IsA(). TClass * TH2::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TH1.; Reimplemented in TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH2Poly, TProfile2D, and TProfile2Poly.; Definition at line 133 of file TH2.h. ◆ KolmogorovTest(). Double_t TH2::KolmogorovTest ; (; const TH1 * ; h2, . Option_t * ; option = """" . ); const. overridevirtual . Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ; Default: Ignore under- and overflow bins in comparison; option is a character string to specify options; ""U"" include Underflows in test; ""O"" include Overflows; ""N"" include comparison of normalizations; ""D"" Put out a line of ""Debug"" printout; ""M"" Return the Maximum Kolmogorov distance instead of prob. The returned function value is the probability of test (much less than one means NOT compatible); The KS test uses the distance between the pseudo-CDF's obtained from the histogram. Since in 2D the order for generating the pseudo-CDF is arbitrary, two pairs of pseudo-CDF are used, one starting from the x axis the other from the y axis and the maximum distance is the average of the two maximum distances obtained.; Code adapted by Rene Brun from original HBOOK routine HDIFF ; Reimplemented from TH1.; Definition at line 1470 of file TH2.cxx. ◆ operator=(). TH2 & TH2::operator= ; (; const TH2 & ; ). privatedelete . ◆ ProfileX(). TProfile * TH2::ProfileX ; (; const char * ; name = ""_pfx"", . Int_t ; firstybin = 1, . Int_t ; lastybin = -1, . Option_t * ; option = """" . ); const. Project a 2-D histogram into a profile histogram along X. ; The projection is made from the channels along the Y axis ranging from firstybin to lastybin included. By default, bins 1 to ny are included When all bins are included, the number of entries in the projection is set to the number of entries of the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2.html:91970,test,test,91970,doc/master/classTH2.html,https://root.cern,https://root.cern/doc/master/classTH2.html,2,['test'],['test']
Testability,". master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; GCValues_t Struct Reference. ; Graphics context structure. ; Definition at line 224 of file GuiTypes.h. Public Member Functions;  GCValues_t ();  . Public Attributes; Int_t fArcMode;  kArcChord, kArcPieSlice ;  ; ULong_t fBackground;  background pixel ;  ; Int_t fCapStyle;  kCapNotLast, kCapButt, kCapRound, kCapProjecting ;  ; Pixmap_t fClipMask;  bitmap clipping; other calls for rects ;  ; Int_t fClipXOrigin;  origin for clipping ;  ; Int_t fClipYOrigin;  ; Char_t fDashes [8];  dash pattern list (dash length per byte) ;  ; Int_t fDashLen;  number of dashes in fDashes ;  ; Int_t fDashOffset;  patterned/dashed line information ;  ; Int_t fFillRule;  kEvenOddRule, kWindingRule ;  ; Int_t fFillStyle;  kFillSolid, kFillTiled, kFillStippled, kFillOpaeueStippled ;  ; FontH_t fFont;  default text font for text operations ;  ; ULong_t fForeground;  foreground pixel ;  ; EGraphicsFunction fFunction;  logical operation ;  ; Bool_t fGraphicsExposures;  boolean, should exposures be generated ;  ; Int_t fJoinStyle;  kJoinMiter, kJoinRound, kJoinBevel ;  ; Int_t fLineStyle;  kLineSolid, kLineOnOffDash, kLineDoubleDash ;  ; Int_t fLineWidth;  line width ;  ; Mask_t fMask;  bit mask specifying which fields are valid ;  ; ULong_t fPlaneMask;  plane mask ;  ; Pixmap_t fStipple;  stipple 1 plane pixmap for stippling ;  ; Int_t fSubwindowMode;  kClipByChildren, kIncludeInferiors ;  ; Pixmap_t fTile;  tile pixmap for tiling operations ;  ; Int_t fTsXOrigin;  offset for tile or stipple operations ;  ; Int_t fTsYOrigin;  . #include <GuiTypes.h>; Constructor & Destructor Documentation. ◆ GCValues_t(). GCValues_t::GCValues_t ; (; ). inline . Definition at line 253 of file GuiTypes.h. Member Data Documentation. ◆ fArcMode. Int_t GCValues_t::fArcMode. kArcChord, kArcPieSlice ; Definition at line 237 of file GuiTypes.h. ◆ fBackgroun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structGCValues__t.html:1116,log,logical,1116,doc/master/structGCValues__t.html,https://root.cern,https://root.cern/doc/master/structGCValues__t.html,1,['log'],['logical']
Testability,". overridevirtual . Geometry checking method (see: TGeoManager::CheckGeometry()) ; Implements TVirtualGeoPainter.; Definition at line 218 of file TGeoPainter.cxx. ◆ CheckOverlaps(). void TGeoPainter::CheckOverlaps ; (; const TGeoVolume * ; vol, . Double_t ; ovlp = 0.1, . Option_t * ; option = """" . ); const. overridevirtual . Check overlaps for the top volume of the geometry, within a limit OVLP. ; Implements TVirtualGeoPainter.; Definition at line 234 of file TGeoPainter.cxx. ◆ CheckPoint(). void TGeoPainter::CheckPoint ; (; Double_t ; x = 0, . Double_t ; y = 0, . Double_t ; z = 0, . Option_t * ; option = """", . Double_t ; safety = 0. . ). overridevirtual . Check current point in the geometry. ; Implements TVirtualGeoPainter.; Definition at line 242 of file TGeoPainter.cxx. ◆ CheckShape(). void TGeoPainter::CheckShape ; (; TGeoShape * ; shape, . Int_t ; testNo, . Int_t ; nsamples, . Option_t * ; option . ). overridevirtual . Test for shape navigation methods. ; Summary for test numbers:; 1: DistFromInside/Outside. Sample points inside the shape. Generate directions randomly in cos(theta). Compute DistFromInside and move the point with bigger distance. Compute DistFromOutside back from new point. Plot d-(d1+d2) . Implements TVirtualGeoPainter.; Definition at line 254 of file TGeoPainter.cxx. ◆ ClearVisibleVolumes(). void TGeoPainter::ClearVisibleVolumes ; (; ). protected . Clear the list of visible volumes reset the kVisOnScreen bit for volumes previously in the list. ; Definition at line 263 of file TGeoPainter.cxx. ◆ CountNodes(). Int_t TGeoPainter::CountNodes ; (; TGeoVolume * ; vol, . Int_t ; level . ); const. Count number of visible nodes down to a given level. ; Definition at line 582 of file TGeoPainter.cxx. ◆ CountVisibleNodes(). Int_t TGeoPainter::CountVisibleNodes ; (; ). overridevirtual . Count total number of visible nodes. ; Implements TVirtualGeoPainter.; Definition at line 636 of file TGeoPainter.cxx. ◆ DefaultAngles(). void TGeoPainter::DefaultAngles ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPainter.html:25202,test,test,25202,doc/master/classTGeoPainter.html,https://root.cern,https://root.cern/doc/master/classTGeoPainter.html,1,['test'],['test']
Testability,. p-value for the alternate hypothesis (small number means disfavoured) ; Definition at line 129 of file HypoTestResult.h. ◆ fAlternatePValueError. double RooStats::HypoTestResult::fAlternatePValueError. mutableprotected . error of p-value for the alternate hypothesis (small number means disfavoured) ; Definition at line 131 of file HypoTestResult.h. ◆ fBackgroundIsAlt. bool RooStats::HypoTestResult::fBackgroundIsAlt. protected . Definition at line 140 of file HypoTestResult.h. ◆ fFitInfo. std::unique_ptr<RooDataSet> RooStats::HypoTestResult::fFitInfo. protected . Definition at line 138 of file HypoTestResult.h. ◆ fNullDetailedOutput. std::unique_ptr<RooDataSet> RooStats::HypoTestResult::fNullDetailedOutput. protected . Definition at line 136 of file HypoTestResult.h. ◆ fNullDistr. std::unique_ptr<SamplingDistribution> RooStats::HypoTestResult::fNullDistr. protected . Definition at line 134 of file HypoTestResult.h. ◆ fNullPValue. double RooStats::HypoTestResult::fNullPValue. mutableprotected . p-value for the null hypothesis (small number means disfavoured) ; Definition at line 128 of file HypoTestResult.h. ◆ fNullPValueError. double RooStats::HypoTestResult::fNullPValueError. mutableprotected . error of p-value for the null hypothesis (small number means disfavoured) ; Definition at line 130 of file HypoTestResult.h. ◆ fPValueIsRightTail. bool RooStats::HypoTestResult::fPValueIsRightTail. protected . Definition at line 139 of file HypoTestResult.h. ◆ fTestStatisticData. double RooStats::HypoTestResult::fTestStatisticData. protected . result of the test statistic evaluated on data ; Definition at line 132 of file HypoTestResult.h. Libraries for RooStats::HypoTestResult:. [legend]; The documentation for this class was generated from the following files:; roofit/roostats/inc/RooStats/HypoTestResult.h; roofit/roostats/src/HypoTestResult.cxx. RooStatsHypoTestResult. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:54 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html:28760,test,test,28760,doc/master/classRooStats_1_1HypoTestResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html,1,['test'],['test']
Testability,". private . Definition at line 299 of file GoFTest.cxx. ◆ GaussianCDF(). Double_t ROOT::Math::GoFTest::GaussianCDF ; (; Double_t ; x); const. private . Definition at line 295 of file GoFTest.cxx. ◆ GetSigmaN(). Double_t ROOT::Math::GoFTest::GetSigmaN ; (; const std::vector< size_t > & ; ns, . size_t ; N . ). staticprivate . Computation of sigma_N as described in (1) ; Definition at line 311 of file GoFTest.cxx. ◆ Instantiate(). void ROOT::Math::GoFTest::Instantiate ; (; const Double_t * ; sample, . size_t ; sampleSize . ). private . Definition at line 279 of file GoFTest.cxx. ◆ InterpolatePValues(). static Double_t ROOT::Math::GoFTest::InterpolatePValues ; (; int ; nsamples, . Double_t ; A2 . ). staticprivate . Linear interpolation used in GoFTest::PValueAD2Samples. . ◆ KolmogorovSmirnov2SamplesTest() [1/2]. Double_t ROOT::Math::GoFTest::KolmogorovSmirnov2SamplesTest ; (; const Char_t * ; option = ""p""); const. Kolmogorov-Smirnov 2-Samples Test. ; Returns by default the p-value; option ""t"" returns the test statistic value ""Dn"". ; Definition at line 913 of file GoFTest.cxx. ◆ KolmogorovSmirnov2SamplesTest() [2/2]. void ROOT::Math::GoFTest::KolmogorovSmirnov2SamplesTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Kolmogorov-Smirnov 2-Samples Test. ; The Kolmogorov-Smirnov 2-Samples Test algorithm is described at http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/ks2samp.htm and described and taken from https://root.cern/doc/master/namespaceTMath.html ; Definition at line 896 of file GoFTest.cxx. ◆ KolmogorovSmirnovTest() [1/2]. Double_t ROOT::Math::GoFTest::KolmogorovSmirnovTest ; (; const Char_t * ; option = ""p""); const. Kolmogorov-Smirnov 1-Sample Test. ; Returns default p-value; option ""t"" returns the test statistic value ""Dn"". ; Definition at line 945 of file GoFTest.cxx. ◆ KolmogorovSmirnovTest() [2/2]. void ROOT::Math::GoFTest::KolmogorovSmirnovTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Kolmogorov-Smirnov 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:14472,test,test,14472,doc/master/classROOT_1_1Math_1_1GoFTest.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html,1,['test'],['test']
Testability,". private:. voidInitTreePruningMetaData(TMVA::DecisionTreeNode* n); TMVA::MsgLogger&Log() const; voidOptimize(TMVA::DecisionTree* dt, Double_t weights). Data Members; private:. TMVA::MsgLogger*fLogger! output stream to save logging information; Int_tfOptimalK! the optimal index of the prune sequence; vector<TMVA::DecisionTreeNode*,allocator<TMVA::DecisionTreeNode*> >fPruneSequence! map of weakest links (i.e., branches to prune) -> pruning index; vector<Double_t>fPruneStrengthList! map of alpha -> pruning index; vector<Double_t>fQualityIndexList! map of R(T) -> pruning index; TMVA::SeparationBase*fQualityIndexTool! the quality index used to calculate R(t), R(T) = sum[t in ~T]{ R(t) }. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CostComplexityPruneTool( SeparationBase* qualityIndex ); the constructor for the cost complexity prunig. ~CostComplexityPruneTool(); the destructor for the cost complexity prunig. CalculatePruningInfo(TMVA::DecisionTree* dt, const vector<TMVA::Event*,allocator<TMVA::Event*> >* testEvents = NULL, Bool_t isAutomatic = kFALSE). void InitTreePruningMetaData(TMVA::DecisionTreeNode* n); initialise ""meta data"" for the pruning, like the ""costcomplexity"", the; critical alpha, the minimal alpha down the tree, etc... for each node!!. void Optimize(TMVA::DecisionTree* dt, Double_t weights); after the critical alpha values (at which the corresponding nodes would; be pruned away) had been established in the ""InitMetaData"" we need now:; automatic pruning:; find the value of ""alpha"" for which the test sample gives minimal error,; on the tree with all nodes pruned that have alpha_critital < alpha,; fixed parameter pruning. CostComplexityPruneTool( SeparationBase* qualityIndex = NULL ). » Last changed: Fri Nov 26 14:26:56 2010 » Last generated: 2010-11-26 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__CostComplexityPruneTool.html:1922,test,testEvents,1922,root/html528/TMVA__CostComplexityPruneTool.html,https://root.cern,https://root.cern/root/html528/TMVA__CostComplexityPruneTool.html,2,['test'],"['test', 'testEvents']"
Testability,". protected . regularize the distribution fof the given node ; Parameters. [in]binningcurrent node ; [in]regmoderegularisation mode ; [in]densityModetype of regularisation scaling ; [in]axisSteeringdetailed steering for the axes of the distribution . Definition at line 424 of file TUnfoldDensity.cxx. ◆ ScanTau(). Int_t TUnfoldDensity::ScanTau ; (; Int_t ; nPoint, . Double_t ; tauMin, . Double_t ; tauMax, . TSpline ** ; scanResult, . Int_t ; mode = kEScanTauRhoAvg, . const char * ; distribution = nullptr, . const char * ; axisSteering = nullptr, . TGraph ** ; lCurvePlot = nullptr, . TSpline ** ; logTauXPlot = nullptr, . TSpline ** ; logTauYPlot = nullptr . ). virtual . scan a function wrt tau and determine the minimum ; Parameters. [in]nPointnumber of points to be scanned ; [in]tauMinsmallest tau value to study ; [in]tauMaxlargest tau value to study ; [out]scanResultthe scanned function wrt log(tau) ; [in]mode1st parameter for the scan function ; [in]distribution2nd parameter for the scan function ; [in]projectionMode3rd parameter for the scan function ; [out]lCurvePlotfor monitoring, shows the L-curve ; [out]logTauXPlotfor monitoring, L-curve(X) as a function of log(tau) ; [out]logTauYPlotfor monitoring, L-curve(Y) as a function of log(tau). Return value: the coordinate number on the curve scanResult which corresponds to the minimum ; The function is scanned by repeating the following steps nPoint times . Choose a value of tau . Perform the unfolding for this choice of tau, DoUnfold(tau) . Determinethe scan variable GetScanVariable() . The method GetScanVariable() defines scans of correlation coefficients, where mode is chosen from the enum EScanTauMode. In addition one may set distribution and/or projectionMode to refine the calculation of correlations (e.g. restrict the calcuation to the signal distribution and/or exclude underflow and overflow bins). See the documentation of GetScanVariable() for details. Alternative scan variables may be defined by overriding the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldDensity.html:68981,log,log,68981,doc/master/classTUnfoldDensity.html,https://root.cern,https://root.cern/doc/master/classTUnfoldDensity.html,5,['log'],"['log', 'logTauXPlotfor', 'logTauYPlotfor']"
Testability,". protected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications; static Long64_tTProofServ::fgLastEntryLast entry before exception; static TStringTProofServ::fgLastMsgMessage about status before exception. private:. TProofServLiteInterruptHandler*fInterruptHandler; TStringfSockPathunix socket path; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofServLite(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TProofServLite(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. void Terminate(Int_t status); Terminate the proof server. void HandleFork(TMessage* mess); Cloning itself via fork. Int_t SetupOnFork(const char* ord); Finalize the server setup afetr forking.; Return 0 on success, -1 on error. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-14 16:47; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofServLite.html:18169,log,logo,18169,root/html534/TProofServLite.html,https://root.cern,https://root.cern/root/html534/TProofServLite.html,1,['log'],['logo']
Testability,". static . [static utility function]///////////////////////////// ; calling ""NoMsg( errorLevel )"", sets ""gErrorIgnoreLevel"" to ""errorLevel+1"" so that all errors with ""level < errorLevel"" will be ignored.; calling the function with a negative argument (e.g., ""NoMsg( -1 )"") resets gErrorIgnoreLevel to its previous value. ; Definition at line 1108 of file TTabCom.cxx. ◆ operator=(). TTabCom & TTabCom::operator= ; (; const TTabCom & ; ). privatedelete . ◆ ParseReverse(). int TTabCom::ParseReverse ; (; const char * ; var_str, . int ; start . ). private . Returns the place in the string where to put the \0, starting the search from ""start"". ; Definition at line 2565 of file TTabCom.cxx. ◆ PathIsSpecifiedInFileName(). Bool_t TTabCom::PathIsSpecifiedInFileName ; (; const TString & ; fileName). static . [static utility function]///////////////////////////// ; true if ""fileName""; is an absolute path (""/tmp/a""); is a relative path (""../whatever"", ""./test""); starts with user name (""~/mail""); starts with an environment variable (""$ROOTSYS/bin"") . Definition at line 1088 of file TTabCom.cxx. ◆ RehashAll(). void TTabCom::RehashAll ; (; ). clears and then rebuilds all lists except for user names and system include files. ; Definition at line 415 of file TTabCom.cxx. ◆ RehashClasses(). void TTabCom::RehashClasses ; (; ). Do the class rehash. ; Definition at line 335 of file TTabCom.cxx. ◆ RehashCppDirectives(). void TTabCom::RehashCppDirectives ; (; ). Cpp rehashing. ; Definition at line 344 of file TTabCom.cxx. ◆ RehashEnvVars(). void TTabCom::RehashEnvVars ; (; ). Environemnt variables rehashing. ; Definition at line 353 of file TTabCom.cxx. ◆ RehashFiles(). void TTabCom::RehashFiles ; (; ). Close files. ; Definition at line 362 of file TTabCom.cxx. ◆ RehashGlobalFunctions(). void TTabCom::RehashGlobalFunctions ; (; ). Reload global functions. ; Definition at line 370 of file TTabCom.cxx. ◆ RehashGlobals(). void TTabCom::RehashGlobals ; (; ). Reload globals. ; Definition at line 37",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:17474,test,test,17474,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['test'],['test']
Testability,". template<typename Architecture_t > . using TMVA::DNN::TDLGradientDescent< Architecture_t >::DeepNet_t = TDeepNet<Architecture_t>. Definition at line 67 of file DLMinimizers.h. ◆ Matrix_t. template<typename Architecture_t > . using TMVA::DNN::TDLGradientDescent< Architecture_t >::Matrix_t = typename Architecture_t::Matrix_t. Definition at line 69 of file DLMinimizers.h. ◆ Scalar_t. template<typename Architecture_t > . using TMVA::DNN::TDLGradientDescent< Architecture_t >::Scalar_t = typename Architecture_t::Scalar_t. Definition at line 68 of file DLMinimizers.h. Constructor & Destructor Documentation. ◆ TDLGradientDescent() [1/2]. template<typename Architecture_t > . TMVA::DNN::TDLGradientDescent< Architecture_t >::TDLGradientDescent. Definition at line 163 of file DLMinimizers.h. ◆ TDLGradientDescent() [2/2]. template<typename Architecture_t > . TMVA::DNN::TDLGradientDescent< Architecture_t >::TDLGradientDescent ; (; Scalar_t ; learningRate, . size_t ; convergenceSteps, . size_t ; testInterval . ). Definition at line 172 of file DLMinimizers.h. Member Function Documentation. ◆ GetConvergenceCount(). template<typename Architecture_t > . size_t TMVA::DNN::TDLGradientDescent< Architecture_t >::GetConvergenceCount ; (; ); const. inline . Getters. ; Definition at line 146 of file DLMinimizers.h. ◆ GetConvergenceSteps(). template<typename Architecture_t > . size_t TMVA::DNN::TDLGradientDescent< Architecture_t >::GetConvergenceSteps ; (; ); const. inline . Definition at line 147 of file DLMinimizers.h. ◆ GetTestError(). template<typename Architecture_t > . Scalar_t TMVA::DNN::TDLGradientDescent< Architecture_t >::GetTestError ; (; ); const. inline . Definition at line 149 of file DLMinimizers.h. ◆ GetTestInterval(). template<typename Architecture_t > . size_t TMVA::DNN::TDLGradientDescent< Architecture_t >::GetTestInterval ; (; ); const. inline . Definition at line 150 of file DLMinimizers.h. ◆ GetTrainingError(). template<typename Architecture_t > . Scalar_t TMVA::DNN::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html:4886,test,testInterval,4886,doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,1,['test'],['testInterval']
Testability,". virtual void TMVA::DataSet::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMVA::DataSet::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 175 of file DataSet.h. ◆ TreeIndex(). UInt_t TMVA::DataSet::TreeIndex ; (; Types::ETreeType ; type); const. inline . Definition at line 181 of file DataSet.h. Member Data Documentation. ◆ fBlockBelongToTraining. std::vector<Char_t> TMVA::DataSet::fBlockBelongToTraining. private . when dividing the dataset to blocks, sets whether the certain block is in the Training set or else in the validation set boolean are stored, taken std::vector<Char_t> for performance reasons (instead of std::vector<Bool_t>) ; Definition at line 165 of file DataSet.h. ◆ fClassEvents. std::vector< std::vector<Long64_t> > TMVA::DataSet::fClassEvents. private . number of events of class 0,1,2,... in training[0] and testing[1] (+validation, trainingoriginal) ; Definition at line 158 of file DataSet.h. ◆ fCurrentEventIdx. Long64_t TMVA::DataSet::fCurrentEventIdx. mutableprivate . Definition at line 146 of file DataSet.h. ◆ fCurrentTreeIdx. UInt_t TMVA::DataSet::fCurrentTreeIdx. mutableprivate . Definition at line 145 of file DataSet.h. ◆ fdsi. const DataSetInfo* TMVA::DataSet::fdsi. private . -> datasetinfo that created this dataset ; Definition at line 139 of file DataSet.h. ◆ fEventCollection. std::vector< std::vector<Event*> > TMVA::DataSet::fEventCollection. private . list of events for training/testing/... ; Definition at line 141 of file DataSet.h. ◆ fHasNegativeEventWeights. Bool_t TMVA::DataSet::fHasNegativeEventWeights. private . true if at least one signal or bkg event has negative weight ; Definition at line 161 of file DataSet.h. ◆ fLogger. MsgLogger* TMVA::DataSet::fLogger. mutableprivate . ! message logger ; Definition at line 163 of file DataSet.h. ◆ fResults. std::vector< std::map< TString, Results* > > TMVA::Data",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataSet.html:25524,test,testing,25524,doc/master/classTMVA_1_1DataSet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSet.html,1,['test'],['testing']
Testability,". void TProof::NotifyLogMsg ; (; const char * ; msg, . const char * ; sfx = ""\n"" . ). private . Notify locally 'msg' to the appropriate units (file, stdout, window) If defined, 'sfx' is added after 'msg' (typically a line-feed);. ; Definition at line 6358 of file TProof.cxx. ◆ Open(). TProof * TProof::Open ; (; const char * ; cluster = 0, . const char * ; conffile = 0, . const char * ; confdir = 0, . Int_t ; loglevel = 0 . ). static . Start a PROOF session on a specific cluster. ; If cluster is 0 (the default) then the PROOF Session Viewer GUI pops up and 0 is returned. If cluster is ""lite://"" we start a PROOF-lite session. If cluster is """" (empty string) then we connect to the cluster specified by 'Proof.LocalDefault', defaulting to ""lite://"". If cluster is ""pod://"" (case insensitive), then we connect to a PROOF cluster managed by PROOF on Demand (PoD, http://pod.gsi.de ). Via conffile a specific PROOF config file in the confir directory can be specified. Use loglevel to set the default loging level for debugging. The appropriate instance of TProofMgr is created, if not yet existing. The instantiated TProof object is returned. Use TProof::cd() to switch between PROOF sessions. For more info on PROOF see the TProof ctor. ; Definition at line 11583 of file TProof.cxx. ◆ operator=(). void TProof::operator= ; (; const TProof & ; ). private . ◆ ParseConfigField(). void TProof::ParseConfigField ; (; const char * ; config). private . The config file field may contain special instructions which need to be parsed at the beginning, e.g. ; for debug runs with valgrind. Several options can be given separated by a ',' ; Definition at line 1043 of file TProof.cxx. ◆ Ping() [1/2]. Int_t TProof::Ping ; (; ). Ping PROOF. Returns 1 if master server responded. ; Definition at line 4744 of file TProof.cxx. ◆ Ping() [2/2]. Int_t TProof::Ping ; (; ESlaves ; list). private . Ping PROOF slaves. Returns the number of slaves that responded. ; Definition at line 4752 of file TProof.cxx. ◆ Po",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:119116,log,loglevel,119116,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,2,['log'],"['loging', 'loglevel']"
Testability,".  ; Function:; Int_t TSpectrum3::SearchHighRes; (const float; ***fSource,float; ***fDest, int; fSizex, int; fSizey, int; fSizez, float; fSigma, double; fThreshold, bool; fBackgroundRemove,int; fDeconIterations, bool; fMarkov, int; fAverWindow) ��;  ; This function searches for peaks; in source spectrum. It is based on deconvolution method. First the background; is removed (if desired), then Markov smoothed spectrum is calculated (if; desired), then the response function is generated according to given sigma and; deconvolution is carried out. On success it returns number of found peaks.;  ; Parameters:; ������� fSource-pointer to; the matrix of source spectrum����������������� ; ������� fDest-resulting; spectrum after deconvolution; � ������fSizex, fSizey, fSizez; -lengths of the source and destination spectra��������������� ; ������� fSigma-sigma of; searched peaks; fThreshold-; threshold value in % for selected peaks, peaks with amplitude less than; threshold*highest_peak/100 are ignored; fBackgroundRemove-; background_remove-logical variable, true if the removal of background before; deconvolution is desired� ; fDeconIterations-number; of iterations in deconvolution operation; fMarkov-logical; variable, if it is true, first the source spectrum is replaced by new spectrum; calculated using Markov chains method ; fAverWindow-width of averaging smoothing window ;  ; References:; [1] M.A. Mariscotti: A method for; identification of peaks in the presence of background and its application to; spectrum analysis. NIM 50 (1967), 309-320.; [2] �M.; Morh�č, J. Kliman, V. Matou�ek, M. Veselsk�, I. Turzo.:Identification; of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (2000); 108-125.; [3] Z.K. Silagadze, A new; algorithm for automatic photopeak searches. NIM A 376 (1996), 451.;  ; Example of peak searching method;  ; SearchHighRes function provides users with the possibility; to vary the input parameters and with the access to the output deconvolved data",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum3.html:33100,log,logical,33100,root/html528/TSpectrum3.html,https://root.cern,https://root.cern/root/html528/TSpectrum3.html,8,['log'],['logical']
Testability,. ◆ GetTestInterval(). template<typename Architecture_t > . size_t TMVA::DNN::TDLGradientDescent< Architecture_t >::GetTestInterval ; (; ); const. inline . Definition at line 150 of file DLMinimizers.h. ◆ GetTrainingError(). template<typename Architecture_t > . Scalar_t TMVA::DNN::TDLGradientDescent< Architecture_t >::GetTrainingError ; (; ); const. inline . Definition at line 148 of file DLMinimizers.h. ◆ HasConverged() [1/2]. template<typename Architecture_t > . bool TMVA::DNN::TDLGradientDescent< Architecture_t >::HasConverged. Increases the minimization step counter by the test error evaluation period and uses the current internal value of the test error to determine if the minimization has converged. ; Definition at line 276 of file DLMinimizers.h. ◆ HasConverged() [2/2]. template<typename Architecture_t > . bool TMVA::DNN::TDLGradientDescent< Architecture_t >::HasConverged ; (; Scalar_t ; testError). Increases the minimization step counter by the test error evaluation period and uses the provided test error value to determine if the minimization has converged. ; Definition at line 290 of file DLMinimizers.h. ◆ Reset(). template<typename Architecture_t > . void TMVA::DNN::TDLGradientDescent< Architecture_t >::Reset ; (; ). inline . Reset minimizer object to default state. ; Definition at line 89 of file DLMinimizers.h. ◆ SetBatchSize(). template<typename Architecture_t > . void TMVA::DNN::TDLGradientDescent< Architecture_t >::SetBatchSize ; (; Scalar_t ; rate). inline . Definition at line 156 of file DLMinimizers.h. ◆ SetConvergenceSteps(). template<typename Architecture_t > . void TMVA::DNN::TDLGradientDescent< Architecture_t >::SetConvergenceSteps ; (; size_t ; steps). inline . Setters. ; Definition at line 153 of file DLMinimizers.h. ◆ SetLearningRate(). template<typename Architecture_t > . void TMVA::DNN::TDLGradientDescent< Architecture_t >::SetLearningRate ; (; Scalar_t ; rate). inline . Definition at line 155 of file DLMinimizers.h. ◆ SetTestInterval(). t,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html:6573,test,test,6573,doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,2,['test'],['test']
Testability,". ◆ SecToText(). TString TMVA::Timer::SecToText ; (; Double_t ; seconds, . Bool_t ; Scientific . ); const. private . pretty string output ; Definition at line 262 of file Timer.cxx. ◆ Streamer(). virtual void TMVA::Timer::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMVA::Timer::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 99 of file Timer.h. Member Data Documentation. ◆ fColourfulOutput. Bool_t TMVA::Timer::fColourfulOutput. private . flag for use of colors ; Definition at line 84 of file Timer.h. ◆ fgClassName. const TString TMVA::Timer::fgClassName = ""Timer"". staticprivate . used for output ; Definition at line 93 of file Timer.h. ◆ fgNbins. const Int_t TMVA::Timer::fgNbins = 16. staticprivate . number of bins in progress bar ; Definition at line 94 of file Timer.h. ◆ fLogger. MsgLogger* TMVA::Timer::fLogger. mutableprivate . ! the output logger ; Definition at line 96 of file Timer.h. ◆ fNcounts. Int_t TMVA::Timer::fNcounts. private . reference number of ""counts"" ; Definition at line 82 of file Timer.h. ◆ fOutputToFile. Bool_t TMVA::Timer::fOutputToFile. private . Definition at line 89 of file Timer.h. ◆ fPrefix. TString TMVA::Timer::fPrefix. private . prefix for outputs ; Definition at line 83 of file Timer.h. ◆ fPreviousProgress. Int_t TMVA::Timer::fPreviousProgress. private . Definition at line 87 of file Timer.h. ◆ fPreviousTimeEstimate. TString TMVA::Timer::fPreviousTimeEstimate. private . Definition at line 88 of file Timer.h. ◆ fProgressBarStringLength. Int_t TMVA::Timer::fProgressBarStringLength. private . Definition at line 91 of file Timer.h. Libraries for TMVA::Timer:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/Timer.h; tmva/tmva/src/Timer.cxx. TMVATimer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:43 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Timer.html:17483,log,logger,17483,doc/master/classTMVA_1_1Timer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Timer.html,1,['log'],['logger']
Testability,. ◆ Transform(). const TMVA::Event * TMVA::TransformationHandler::Transform ; (; const Event * ; ev); const. the transformation ; Definition at line 152 of file TransformationHandler.cxx. ◆ Variable(). const TMVA::VariableInfo & TMVA::TransformationHandler::Variable ; (; UInt_t ; ivar); const. inlineprivate . Definition at line 122 of file TransformationHandler.h. ◆ WriteToStream(). void TMVA::TransformationHandler::WriteToStream ; (; std::ostream & ; o); const. write transformation to stream ; Definition at line 839 of file TransformationHandler.cxx. Member Data Documentation. ◆ fCallerName. TString TMVA::TransformationHandler::fCallerName. private . ! name of the caller for output ; Definition at line 136 of file TransformationHandler.h. ◆ fDataSetInfo. DataSetInfo& TMVA::TransformationHandler::fDataSetInfo. private . Definition at line 127 of file TransformationHandler.h. ◆ fLogger. MsgLogger* TMVA::TransformationHandler::fLogger. mutableprivate . ! message logger ; Definition at line 137 of file TransformationHandler.h. ◆ fNumC. Int_t TMVA::TransformationHandler::fNumC. private . number of categories (#classes +1) ; Definition at line 132 of file TransformationHandler.h. ◆ fRanking. std::vector<Ranking*> TMVA::TransformationHandler::fRanking. private . ! ranking object ; Definition at line 134 of file TransformationHandler.h. ◆ fRootBaseDir. TDirectory* TMVA::TransformationHandler::fRootBaseDir. private . ! if set put input var hists ; Definition at line 135 of file TransformationHandler.h. ◆ fTransformations. TList TMVA::TransformationHandler::fTransformations. private . Definition at line 128 of file TransformationHandler.h. ◆ fTransformationsReferenceClasses. std::vector< Int_t > TMVA::TransformationHandler::fTransformationsReferenceClasses. private . list of transformations ; Definition at line 129 of file TransformationHandler.h. ◆ fVariableStats. std::vector<std::vector<TMVA::TransformationHandler::VariableStat> > TMVA::TransformationHandler::fVariableStats,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TransformationHandler.html:11212,log,logger,11212,doc/master/classTMVA_1_1TransformationHandler.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TransformationHandler.html,1,['log'],['logger']
Testability,. ◆ fHeadPic. const TGPicture* TGScrollBar::fHeadPic. protected . picture in head (up or left arrow) ; Definition at line 81 of file TGScrollBar.h. ◆ fHighColor. Pixel_t TGScrollBar::fHighColor. protected . highlight color ; Definition at line 87 of file TGScrollBar.h. ◆ fPos. Int_t TGScrollBar::fPos. protected . logical current position ; Definition at line 74 of file TGScrollBar.h. ◆ fPsize. Int_t TGScrollBar::fPsize. protected . logical page size of scrollbar ; Definition at line 73 of file TGScrollBar.h. ◆ fRange. Int_t TGScrollBar::fRange. protected . logical upper range of scrollbar ; Definition at line 72 of file TGScrollBar.h. ◆ fRepeat. TTimer* TGScrollBar::fRepeat. protected . repeat rate timer (when mouse stays pressed) ; Definition at line 83 of file TGScrollBar.h. ◆ fSlider. TGScrollBarElement* TGScrollBar::fSlider. protected . slider ; Definition at line 80 of file TGScrollBar.h. ◆ fSliderRange. Int_t TGScrollBar::fSliderRange. protected . logical slider range ; Definition at line 76 of file TGScrollBar.h. ◆ fSliderSize. Int_t TGScrollBar::fSliderSize. protected . logical slider size ; Definition at line 75 of file TGScrollBar.h. ◆ fSmallInc. Int_t TGScrollBar::fSmallInc. protected . Small Increment in the sliding algorithm. ; Definition at line 77 of file TGScrollBar.h. ◆ fSubw. Window_t TGScrollBar::fSubw. protected . sub window in which mouse is pressed ; Definition at line 84 of file TGScrollBar.h. ◆ fTail. TGScrollBarElement* TGScrollBar::fTail. protected . tail button of scrollbar ; Definition at line 79 of file TGScrollBar.h. ◆ fTailPic. const TGPicture* TGScrollBar::fTailPic. protected . picture in tail (down or right arrow) ; Definition at line 82 of file TGScrollBar.h. ◆ fX0. Int_t TGScrollBar::fX0. protected . Definition at line 68 of file TGScrollBar.h. ◆ fXp. Int_t TGScrollBar::fXp. protected . Definition at line 69 of file TGScrollBar.h. ◆ fY0. Int_t TGScrollBar::fY0. protected . current slider position in pixels ; Definition at line 68 o,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGScrollBar.html:39541,log,logical,39541,doc/master/classTGScrollBar.html,https://root.cern,https://root.cern/doc/master/classTGScrollBar.html,1,['log'],['logical']
Testability,". ◆ operator-() [4/6]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator- ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). operation this = source1-source2 ; Definition at line 2376 of file TMatrixT.cxx. ◆ operator-() [5/6]. template<class Element > . TVectorT< Element > TMatrixTAutoloadOps::operator- ; (; const TVectorT< Element > & ; source1, . const TVectorT< Element > & ; source2 . ). Return source1-source2. ; Definition at line 1423 of file TVectorT.cxx. ◆ operator-() [6/6]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator- ; (; Element ; val, . const TMatrixT< Element > & ; source . ). operation this = val-source ; Definition at line 2396 of file TMatrixT.cxx. ◆ operator<() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator< ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 < source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator< ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). logical operation source1 < source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator< ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 < source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<=() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator<= ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 <= source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<=() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator<= ; (; const TMatrixT< Element ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:34157,log,logical,34157,doc/master/namespaceTMatrixTAutoloadOps.html,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html,1,['log'],['logical']
Testability,". ◆ setDropOut(). template<typename Iterator > . void TMVA::DNN::Settings::setDropOut ; (; Iterator ; begin, . Iterator ; end, . size_t ; _dropRepetitions . ). inline . set the drop-out configuration (layer-wise) ; Parameters. beginbegin of an array or vector denoting the drop-out probabilities for each layer ; endend of an array or vector denoting the drop-out probabilities for each layer ; _dropRepetitionsdenotes after how many repetitions the drop-out setting (which nodes are dropped out exactly) is changed . Definition at line 759 of file NeuralNet.h. ◆ setMonitoring(). void TMVA::DNN::Settings::setMonitoring ; (; std::shared_ptr< Monitoring > ; ptrMonitoring). inline . prepared for monitoring ; Definition at line 764 of file NeuralNet.h. ◆ setProgressLimits(). virtual void TMVA::DNN::Settings::setProgressLimits ; (; double ; minProgress = 0, . double ; maxProgress = 100 . ). inlinevirtual . Parameters. maxProgressfor monitoring and logging (set the current ""progress"" limits for the display of the progress); minProgressminimum value; maxProgressmaximum value . Definition at line 790 of file NeuralNet.h. ◆ startTestCycle(). virtual void TMVA::DNN::Settings::startTestCycle ; (; ). inlinevirtual . callback for monitoring and loggging ; Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 804 of file NeuralNet.h. ◆ startTrainCycle(). virtual void TMVA::DNN::Settings::startTrainCycle ; (; ). inlinevirtual . Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 782 of file NeuralNet.h. ◆ startTraining(). virtual void TMVA::DNN::Settings::startTraining ; (; ). inlinevirtual . Definition at line 795 of file NeuralNet.h. ◆ testIteration(). virtual void TMVA::DNN::Settings::testIteration ; (; ). inlinevirtual . callback for monitoring and loggging ; Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 806 of file NeuralNet.h. ◆ testRepetitions(). size_t TMVA::DNN::Settings::testRepetitions ; (; ); const. inline . how",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html:11486,log,logging,11486,doc/master/classTMVA_1_1DNN_1_1Settings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html,1,['log'],['logging']
Testability,". ◆ startTestCycle(). virtual void TMVA::DNN::Settings::startTestCycle ; (; ). inlinevirtual . callback for monitoring and loggging ; Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 804 of file NeuralNet.h. ◆ startTrainCycle(). virtual void TMVA::DNN::Settings::startTrainCycle ; (; ). inlinevirtual . Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 782 of file NeuralNet.h. ◆ startTraining(). virtual void TMVA::DNN::Settings::startTraining ; (; ). inlinevirtual . Definition at line 795 of file NeuralNet.h. ◆ testIteration(). virtual void TMVA::DNN::Settings::testIteration ; (; ). inlinevirtual . callback for monitoring and loggging ; Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 806 of file NeuralNet.h. ◆ testRepetitions(). size_t TMVA::DNN::Settings::testRepetitions ; (; ); const. inline . how often is the test data tested ; Definition at line 768 of file NeuralNet.h. ◆ testSample(). virtual void TMVA::DNN::Settings::testSample ; (; double ; , . double ; , . double ; , . double ;  . ). inlinevirtual . virtual function to be used for monitoring (callback) ; Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 781 of file NeuralNet.h. ◆ useMultithreading(). bool TMVA::DNN::Settings::useMultithreading ; (; ); const. inline . is multithreading turned on? ; Definition at line 815 of file NeuralNet.h. Member Data Documentation. ◆ count_dE. size_t TMVA::DNN::Settings::count_dE. Definition at line 843 of file NeuralNet.h. ◆ count_E. size_t TMVA::DNN::Settings::count_E. Definition at line 842 of file NeuralNet.h. ◆ count_mb_dE. size_t TMVA::DNN::Settings::count_mb_dE. Definition at line 845 of file NeuralNet.h. ◆ count_mb_E. size_t TMVA::DNN::Settings::count_mb_E. Definition at line 844 of file NeuralNet.h. ◆ fLearningRate. double TMVA::DNN::Settings::fLearningRate. Definition at line 852 of file NeuralNet.h. ◆ fMinimizerType. MinimizerType TMVA::DNN::Settings::fMinimizerType. Definiti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html:12662,test,testSample,12662,doc/master/classTMVA_1_1DNN_1_1Settings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html,1,['test'],['testSample']
Testability,"."" << Endl;; 1579 Log() << kDEBUG //<< Form(""Dataset[%s] : "",dsi.GetName()); 1580 << "" ..... Testing events are not renormalised nor included in the renormalisation factor! )""<< Endl;; 1581 ; 1582 for( UInt_t cls = 0, clsEnd = dsi.GetNClasses(); cls < clsEnd; ++cls ){; 1583 // renormFactor.at(cls) = ( (trainingSizePerClass.at(cls) + testingSizePerClass.at(cls))/; 1584 // (trainingSumWeightsPerClass.at(cls) + testingSumWeightsPerClass.at(cls)) );; 1585 //changed by Helge 27.5.2013; 1586 renormFactor.at(cls) = ((Float_t)trainingSizePerClass.at(cls) )/; 1587 (trainingSumWeightsPerClass.at(cls)) ;; 1588 }; 1589 }; 1590 else if (normMode == ""EQUALNUMEVENTS"") {; 1591 //changed by Helge 27.5.2013 What on earth was done here before? I still remember the idea behind this which apparently was; 1592 //NOT understood by the 'programmer' :) .. the idea was to have SAME amount of effective TRAINING data for signal and background.; 1593 //done here was something like having each data source normalized to its number of entries and this even for training+testing together.; 1594 // what should this have been good for ???; 1595 ; 1596 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Weight renormalisation mode: \""EqualNumEvents\"": renormalises all event classes ..."" << Endl;; 1597 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" such that the effective (weighted) number of events in each class is the same "" << Endl;; 1598 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" (and equals the number of events (entries) given for class=0 )"" << Endl;; 1599 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""... i.e. such that Sum[i=1..N_j]{w_i} = N_classA, j=classA, classB, ..."" << Endl;; 1600 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""... (note that N_j is the sum of TRAINING events"" << Endl;; 1601 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" ..... Testing events are not renormalised nor included in the renormalisation fact",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:73581,test,testing,73581,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['test'],['testing']
Testability,".(3.0 MB/s); 4.02 s.(4.8 MB/s); 0.90 s.(21.3 MB/s); 0.90 s.(21.3 MB/s). Comp = 2; Split = 1; 13.78 MB; 11.34s.(1.7 MB/s); 9.51 s.(2.0 MB/s); 2.17 s.(8.8 MB/s); 2.17 s.(8.8 MB/s). The Total Time is the real time in seconds to run the program. Effective time is the real time minus the time spent in non I/O operations (essentially the random number generator). The program Event generates in average 600 tracks per event. Each track has 17 data members. The read benchmark runs in the interactive version of ROOT. The ‘Total Time to Read All’ is the real time reported by the execution of the script &ROOTSYS/test/eventa.; We did not correct this time for the overhead coming from the interpreter itself. The Total time to read sample is the execution time of the script $ROOTSYS/test/eventb. This script loops on all events. For each event, the branch containing the number of tracks is read. In case the number of tracks is less than 585, the full event is read in memory. This test is obviously not possible in non-split mode. In non-split mode, the full event must be read in memory. The times reported in the table correspond to complete I/O operations necessary to deal with machine independent binary files. On Linux, this also includes byte-swapping operations. The ROOT file allows for direct access to any event in the file and direct access to any part of an event when split=1.; Note also that the uncompressed file generated with split=0 is 48.7 Mbytes and only 47.17 Mbytes for the option split=1. The difference in size is due to the object identification mechanism overhead when the event is written to a single buffer. This overhead does not exist in split mode because the branch buffers are optimized for homogeneous data types. You can run the test programs on your architecture. The program Event will report the write performance. You can measure the read performance by executing the scripts eventa and eventb. The performance depends not only of the processor type, but also of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:650200,test,test,650200,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['test']
Testability,"...................................................*; *Br 3 :y : y/F *; *Entries : 8460 : Total Size= 34451 bytes File Size = 28757 *; *Baskets : 2 : Basket Size= 32000 bytes Compression= 1.18 *; *............................................................................*; *Br 4 :z : z/F *; *Entries : 8460 : Total Size= 34451 bytes File Size = 30674 *; *Baskets : 2 : Basket Size= 32000 bytes Compression= 1.11 *; *............................................................................*; nok = 8460, fentries=8460; . ; ; #include ""TTree.h""; #include ""TFile.h""; #include ""TRandom.h""; #include ""TTree.h""; #include ""TTree.h""; ; Int_t Run, Event;; Float_t x,y,z;; ; void CreateParentTree() {; // create a simple TTree with 5 branches; // Two branches (""Run"" and ""Event"") will be used to index the Tree; TFile *f = new TFile(""treeparent.root"",""recreate"");; TTree *T = new TTree(""T"",""test friend trees"");; T->Branch(""Run"",&Run,""Run/I"");; T->Branch(""Event"",&Event,""Event/I"");; T->Branch(""x"",&x,""x/F"");; T->Branch(""y"",&y,""y/F"");; T->Branch(""z"",&z,""z/F"");; TRandom r;; for (Int_t i=0;i<10000;i++) {; if (i < 5000) Run = 1;; else Run = 2;; Event = i;; x = r.Gaus(10,1);; y = r.Gaus(20,2);; z = r.Landau(2,1);; T->Fill();; }; T->Print();; T->Write();; delete f;; }; void CreateFriendTree() {; // Open the file created by CreateParentTree; // Copy a subset of the TTree into a new TTree; // (see also tutorials copytree.C, copytree2.C and copytree3.C); // Create an index on the new TTree (""Run"",""Event""); // Write the new TTree (including its index); ; TFile *f = new TFile(""treeparent.root"");; TTree *T = (TTree*)f->Get(""T"");; TFile *ff = new TFile(""treefriend.root"",""recreate"");; TTree *TF = T->CopyTree(""z<10"");; TF->SetName(""TF"");; TF->BuildIndex(""Run"",""Event"");; TF->Write();; TF->Print();; delete ff;; }; ; void CompareTrees() {; // The two TTrees created above are compared.; // The subset of entries in the small TTree must be identical; // to the entries in the original TTree.; ; TFile *f = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/treefriend_8C.html:3973,test,test,3973,doc/master/treefriend_8C.html,https://root.cern,https://root.cern/doc/master/treefriend_8C.html,1,['test'],['test']
Testability,".0/eval : 0.0;; 287 }; 288 ; 289 if ( fErrorType == kAsymError ); 290 { // return 1/2(el + eh); 291 assert( !fDataErrorPtr && fDataErrorHighPtr && fDataErrorLowPtr );; 292 assert( fDataError.empty() );; 293 assert( fDataErrorHigh.empty() || &fDataErrorHigh.front() == fDataErrorHighPtr );; 294 assert( fDataErrorLow.empty() || &fDataErrorLow.front() == fDataErrorLowPtr );; 295 assert( fDataErrorLow.empty() == fDataErrorHigh.empty() );; 296 ; 297 double eh = fDataErrorHighPtr[ ipoint ];; 298 double el = fDataErrorLowPtr[ ipoint ];; 299 ; 300 return (el+eh) / 2.0;; 301 }; 302 ; 303 assert( fErrorType == kCoordError );; 304 return fDataErrorPtr[ ipoint ];; 305 }; 306 ; 307 void GetAsymError( unsigned int ipoint, double& lowError, double& highError ) const; 308 {; 309 assert( fErrorType == kAsymError );; 310 assert( !fDataErrorPtr && fDataErrorHighPtr && fDataErrorLowPtr );; 311 assert( fDataError.empty() );; 312 assert( fDataErrorHigh.empty() || &fDataErrorHigh.front() == fDataErrorHighPtr );; 313 assert( fDataErrorLow.empty() || &fDataErrorLow.front() == fDataErrorLowPtr );; 314 assert( fDataErrorLow.empty() == fDataErrorHigh.empty() );; 315 ; 316 lowError = fDataErrorLowPtr[ ipoint ];; 317 highError = fDataErrorHighPtr[ ipoint ];; 318 }; 319 ; 320 /**; 321 Return the inverse of error on the value for the given fit point; 322 useful when error in the coordinates are not stored and then this is used directly this as the weight in; 323 the least square function; 324 */; 325 double InvError( unsigned int ipoint ) const; 326 {; 327 assert( ipoint < fMaxPoints );; 328 assert( kValueError == fErrorType || kCoordError == fErrorType ||; 329 kAsymError == fErrorType || kNoError == fErrorType );; 330 ; 331 if ( fErrorType == kNoError ); 332 {; 333 assert( !fDataErrorPtr && !fDataErrorHighPtr && !fDataErrorLowPtr );; 334 assert( fDataError.empty() && fDataErrorHigh.empty() && fDataErrorLow.empty() );; 335 return 1.0;; 336 }; 337 ; 338 if ( fErrorType == kValueError ) // need to inv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8h_source.html:10843,assert,assert,10843,doc/master/BinData_8h_source.html,https://root.cern,https://root.cern/doc/master/BinData_8h_source.html,1,['assert'],['assert']
Testability,".0050000000000000001, Option_t* axis = ""X""); voidSetLabelSize(Float_t size = 0.040000000000000001, Option_t* axis = ""X""); voidSetLegendBorderSize(Width_t size = 4); voidSetLegendFillColor(Color_t color = 0); voidSetLegendFont(Style_t font = 62); voidSetLegendTextSize(Double_t size = 0.); voidSetLegoInnerR(Float_t rad = 0.5); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); voidSetLineScalePS(Float_t scale = 3); virtual voidTAttLine::SetLineStyle(Style_t lstyle); voidSetLineStyleString(Int_t i, const char* text); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t mcolor = 1); virtual voidTAttMarker::SetMarkerColorAlpha(Color_t mcolor, Float_t malpha); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidSetNdivisions(Int_t n = 510, Option_t* axis = ""X""); voidSetNumberContours(Int_t number = 20); static voidTObject::SetObjectStat(Bool_t stat); voidSetOptDate(Int_t datefl = 1); voidSetOptFile(Int_t file = 1); voidSetOptFit(Int_t fit = 1); voidSetOptLogx(Int_t logx = 1); voidSetOptLogy(Int_t logy = 1); voidSetOptLogz(Int_t logz = 1); voidSetOptStat(Int_t stat = 1); voidSetOptStat(Option_t* stat); voidSetOptTitle(Int_t tit = 1); voidSetPadBorderMode(Int_t mode = 1); voidSetPadBorderSize(Width_t size = 1); voidSetPadBottomMargin(Float_t margin = 0.10000000000000001); voidSetPadColor(Color_t color = 19); voidSetPadGridX(Bool_t gridx); voidSetPadGridY(Bool_t gridy); voidSetPadLeftMargin(Float_t margin = 0.10000000000000001); voidSetPadRightMargin(Float_t margin = 0.10000000000000001); voidSetPadTickX(Int_t tickx); voidSetPadTickY(Int_t ticky); voidSetPadTopMargin(Flo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TStyle.html:13294,log,logx,13294,root/html604/TStyle.html,https://root.cern,https://root.cern/root/html604/TStyle.html,3,['log'],"['logx', 'logy', 'logz']"
Testability,".070; --- Created root file: ""TMVApp.root"" containing the MVA output histograms; ==> TMVAClassificationApplication is done!; ; ; ; #include <cstdlib>; #include <vector>; #include <iostream>; #include <map>; #include <string>; ; #include ""TFile.h""; #include ""TTree.h""; #include ""TString.h""; #include ""TSystem.h""; #include ""TROOT.h""; #include ""TH1F.h""; #include ""TStopwatch.h""; ; #include ""TMVA/Tools.h""; #include ""TMVA/Reader.h""; #include ""TMVA/MethodCuts.h""; ; // two types of category methods are implemented; Bool_t UseOffsetMethod = kTRUE;; ; void TMVAClassificationCategoryApplication(); {; // ---------------------------------------------------------------; // default MVA methods to be trained + tested; std::map<std::string,int> Use;; //; Use[""LikelihoodCat""] = 1;; Use[""FisherCat""] = 1;; // ---------------------------------------------------------------; ; std::cout << std::endl; << ""==> Start TMVAClassificationCategoryApplication"" << std::endl;; ; // Create the Reader object; ; TMVA::Reader *reader = new TMVA::Reader( ""!Color:!Silent"" );; ; // Create a set of variables and spectators and declare them to the reader; // - the variable names MUST corresponds in name and type to those given in the weight file(s) used; Float_t var1, var2, var3, var4, eta;; reader->AddVariable( ""var1"", &var1 );; reader->AddVariable( ""var2"", &var2 );; reader->AddVariable( ""var3"", &var3 );; reader->AddVariable( ""var4"", &var4 );; ; reader->AddSpectator( ""eta"", &eta );; ; // Book the MVA methods; ; for (std::map<std::string,int>::iterator it = Use.begin(); it != Use.end(); it++) {; if (it->second) {; TString methodName = it->first + "" method"";; TString weightfile = ""dataset/weights/TMVAClassificationCategory_"" + TString(it->first) + "".weights.xml"";; reader->BookMVA( methodName, weightfile );; }; }; ; // Book output histograms; UInt_t nbin = 100;; std::map<std::string,TH1*> hist;; hist[""LikelihoodCat""] = new TH1F( ""MVA_LikelihoodCat"", ""MVA_LikelihoodCat"", nbin, -1, 0.9999 );; hist[""FisherCat""] =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassificationCategoryApplication_8C.html:2913,test,tested,2913,doc/master/TMVAClassificationCategoryApplication_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassificationCategoryApplication_8C.html,1,['test'],['tested']
Testability,.28945 p_ph_sig2_gamma_bin_9=1; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (10415.9) to force MIGRAD to back out of this region. Error log follows.; Parameter values: Abkg=1 Asig=1 p_ph_sig2_gamma_bin_0=1 p_ph_sig2_gamma_bin_1=1 p_ph_sig2_gamma_bin_10=1 p_ph_sig2_gamma_bin_11=1 p_ph_sig2_gamma_bin_12=1 p_ph_sig2_gamma_bin_13=1 p_ph_sig2_gamma_bin_14=1 p_ph_sig2_gamma_bin_15=1 p_ph_sig2_gamma_bin_16=1 p_ph_sig2_gamma_bin_17=1 p_ph_sig2_gamma_bin_18=1 p_ph_sig2_gamma_bin_19=1 p_ph_sig2_gamma_bin_2=1 p_ph_sig2_gamma_bin_20=1 p_ph_sig2_gamma_bin_21=1 p_ph_sig2_gamma_bin_22=1 p_ph_sig2_gamma_bin_23=1 p_ph_sig2_gamma_bin_24=1 p_ph_sig2_gamma_bin_3=1 p_ph_sig2_gamma_bin_4=1 p_ph_sig2_gamma_bin_5=1 p_ph_sig2_gamma_bin_6=1 p_ph_sig2_gamma_bin_7=1 p_ph_sig2_gamma_bin_8=1 p_ph_sig2_gamma_bin_9=7.28945; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (10415.9) to force MIGRAD to back out of this region. Error log follows.; Parameter values: Abkg=0.024352 Asig=0.0100451 p_ph_sig2_gamma_bin_0=0.351536 p_ph_sig2_gamma_bin_1=0.352649 p_ph_sig2_gamma_bin_10=0.342736 p_ph_sig2_gamma_bin_11=0.36962 p_ph_sig2_gamma_bin_12=0.383863 p_ph_sig2_gamma_bin_13=0.366897 p_ph_sig2_gamma_bin_14=0.358549 p_ph_sig2_gamma_bin_15=0.358659 p_ph_sig2_gamma_bin_16=0.3674 p_ph_sig2_gamma_bin_17=0.356318 p_ph_sig2_gamma_bin_18=0.362267 p_ph_sig2_gamma_bin_19=0.340116 p_ph_sig2_gamma_bin_2=0.350595 p_ph_sig2_gamma_bin_20=0.352431 p_ph_sig2_gamma_bin_21=0.351643 p_ph_sig2_gamma_bin_22=0.35167 p_ph_sig2_gamma_bin_23=0.344542 p_ph_sig2_gamma_bin_24=0.365744 p_ph_sig2_gamma_bin_3=0.355252 p_ph_sig2_gamma_bin_4=0.34783 p_ph_sig2_gamma_bin_5=0.348683 p_ph_sig2_gamma_bin_6=0.357671 p_ph_sig2_gamma_bin_7=0.351115 p_ph_sig2_gamma_bin_8=0.342731 p_ph_sig2_gamma_bin_9=0.357348; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (10415.9) to force MIGRAD to back out of this region. Error log fol,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html:36514,log,log,36514,doc/master/rf709__BarlowBeeston_8C.html,https://root.cern,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html,2,['log'],['log']
Testability,.319e-02; : --------------------------; <HEADER> Factory : Train method: BDT for Classification; : ; <HEADER> BDT : #events: (reweighted) sig: 500 bkg: 500; : #events: (unweighted) sig: 500 bkg: 500; : Training 800 Decision Trees ... patience please; : Elapsed time for training with 1000 events: 0.386 sec ; <HEADER> BDT : [dataset] : Evaluation of BDT on training sample (1000 events); : Elapsed time for evaluation of 1000 events: 0.0729 sec ; : Creating xml weight file: dataset/weights/_BDT.weights.xml; : Creating standalone class: dataset/weights/_BDT.class.C; : out.root:/dataset/Method_BDT/BDT; <HEADER> Factory : Training finished; : ; : Ranking input variables (method specific)...; <HEADER> BDT : Ranking result (top variable is best ranked); : -----------------------------------; : Rank : Variable : Variable Importance; : -----------------------------------; : 1 : y : 5.011e-01; : 2 : x : 4.989e-01; : -----------------------------------; <HEADER> Factory : === Destroy and recreate all methods via weight files for testing ===; : ; : Reading weight file: dataset/weights/_BDT.weights.xml; <HEADER> Factory : Test all methods; <HEADER> Factory : Test method: BDT for Classification performance; : ; <HEADER> BDT : [dataset] : Evaluation of BDT on testing sample (1000 events); : Elapsed time for evaluation of 1000 events: 0.0581 sec ; <HEADER> Factory : Evaluate all methods; <HEADER> Factory : Evaluate classifier: BDT; : ; <HEADER> BDT : [dataset] : Loop over test events and fill histograms with classifier response...; : ; <HEADER> TFHandler_BDT : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : x: 1.0136 0.57754 [ 0.0011208 1.9999 ]; : y: 1.4938 0.75135 [ 0.0054384 2.9981 ]; : -----------------------------------------------------------; : ; : Evaluation results ranked by best signal efficiency and purity (area); : ---------------------------------------------------------------------------------------------------------------,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMinimalClassification_8C.html:4677,test,testing,4677,doc/master/TMVAMinimalClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMinimalClassification_8C.html,1,['test'],['testing']
Testability,".42237; var3 = -1.39543; var4 = -2.02943; created tree: TreeB0; ... event: 0 (200); ======> EVENT:0; var1 = -1.54361; var2 = -0.822373; var3 = -0.395426; var4 = -2.02943; created tree: TreeB1; ======> EVENT:0; var1 = 0.463304; var2 = 1.37192; var3 = -1.16769; var4 = -1.77551; created tree: TreeB2; created data file: tmva_example_multiple_background.root; ; ========================; --- Training; <HEADER> DataSetInfo : [datasetBkg0] : Added class ""Signal""; : Add Tree TreeS of type Signal with 200 events; <HEADER> DataSetInfo : [datasetBkg0] : Added class ""Background""; : Add Tree TreeB0 of type Background with 200 events; <HEADER> Factory : Booking method: BDTG; : ; : the option NegWeightTreatment=InverseBoostNegWeights does not exist for BoostType=Grad; : --> change to new default NegWeightTreatment=Pray; : Rebuilding Dataset datasetBkg0; : Building event vectors for type 2 Signal; : Dataset[datasetBkg0] : create input formulas for tree TreeS; : Building event vectors for type 2 Background; : Dataset[datasetBkg0] : create input formulas for tree TreeB0; <HEADER> DataSetFactory : [datasetBkg0] : Number of events in input trees; : ; : ; : Number of training and testing events; : ---------------------------------------------------------------------------; : Signal -- training events : 100; : Signal -- testing events : 100; : Signal -- training and testing events: 200; : Background -- training events : 100; : Background -- testing events : 100; : Background -- training and testing events: 200; : ; <HEADER> DataSetInfo : Correlation matrix (Signal):; : ----------------------------------------; : var1 var2 var3 var4; : var1: +1.000 +0.427 +0.620 +0.834; : var2: +0.427 +1.000 +0.756 +0.779; : var3: +0.620 +0.756 +1.000 +0.854; : var4: +0.834 +0.779 +0.854 +1.000; : ----------------------------------------; <HEADER> DataSetInfo : Correlation matrix (Background):; : ----------------------------------------; : var1 var2 var3 var4; : var1: +1.000 +0.390 +0.543 +0.801; : var2: +",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html:2125,test,testing,2125,doc/master/TMVAMultipleBackgroundExample_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html,5,['test'],['testing']
Testability,.506) - ; : ; : (Signal Efficiency for Background Efficiency 0.10%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.665 (0.640) 0.854 (0.822) 0.807 (0.790) ; : bg0 0.538 (0.520) - 0.415 (0.374) 0.843 (0.833) ; : bg1 0.885 (0.886) 0.542 (0.491) - 0.728 (0.646) ; : bg2 0.928 (0.890) 0.956 (0.959) 0.847 (0.895) - ; : ; : (Signal Efficiency for Background Efficiency 0.30%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.898 (0.878) 0.971 (0.950) 0.982 (0.975) ; : bg0 0.828 (0.810) - 0.696 (0.676) 0.954 (0.951) ; : bg1 0.951 (0.966) 0.803 (0.745) - 0.958 (0.966) ; : bg2 0.998 (0.991) 0.998 (0.996) 0.998 (0.993) - ; : ; : === Showing confusion matrix for method : DL_CPU ; : (Signal Efficiency for Background Efficiency 0.01%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.398 (0.501) 0.933 (0.951) 0.351 (0.195) ; : bg0 0.339 (0.316) - 0.222 (0.213) 0.419 (0.371) ; : bg1 0.927 (0.909) 0.213 (0.130) - 0.290 (0.332) ; : bg2 0.549 (0.529) 0.546 (0.564) 0.488 (0.509) - ; : ; : (Signal Efficiency for Background Efficiency 0.10%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.884 (0.909) 0.988 (0.991) 0.784 (0.767) ; : bg0 0.766 (0.764) - 0.705 (0.733) 0.768 (0.764) ; : bg1 0.999 (0.998) 0.752 (0.746) - 0.776 (0.809) ; : bg2 0.789 (0.786) 0.773 (0.794) 0.730 (0.736) - ; : ; : (Signal Efficiency for Background Efficiency 0.30%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.979 (0.985) 1.000 (0.996) 0.986 (0.986) ; : bg0 0.943 (0.940) - 0.899 (0.901) 0.956 (0.947) ; : bg1 1.000 (0.999) 0.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:29876,test,test,29876,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,4,['test'],['test']
Testability,.66216 [ 0.14661 10.222 ]; : m_jjj: 1.0275 0.37015 [ 0.34201 5.6016 ]; : m_lv: 1.0500 0.15582 [ 0.29757 2.8989 ]; : m_jlv: 1.0053 0.39478 [ 0.41660 5.8799 ]; : m_bb: 0.97464 0.52138 [ 0.10941 5.5163 ]; : m_wbb: 1.0296 0.35719 [ 0.38878 3.9747 ]; : m_wwbb: 0.95617 0.30368 [ 0.44118 4.0728 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: BDT; : ; BDT : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_BDT : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : m_jj: 1.0447 0.66216 [ 0.14661 10.222 ]; : m_jjj: 1.0275 0.37015 [ 0.34201 5.6016 ]; : m_lv: 1.0500 0.15582 [ 0.29757 2.8989 ]; : m_jlv: 1.0053 0.39478 [ 0.41660 5.8799 ]; : m_bb: 0.97464 0.52138 [ 0.10941 5.5163 ]; : m_wbb: 1.0296 0.35719 [ 0.38878 3.9747 ]; : m_wwbb: 0.95617 0.30368 [ 0.44118 4.0728 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: DNN_CPU; : ; DNN_CPU : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; TFHandler_DNN_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : m_jj: 0.0043655 0.99836 [ -3.2801 5.7307 ]; : m_jjj: 0.0044371 0.99827 [ -3.2805 5.7307 ]; : m_lv: 0.0054053 1.0003 [ -3.2810 5.7307 ]; : m_jlv: 0.0044637 0.99837 [ -3.2803 5.7307 ]; : m_bb: 0.0043676 0.99847 [ -3.2797 5.7307 ]; : m_wbb: 0.0042343 0.99744 [ -3.2803 5.7307 ]; : m_wwbb: 0.0046014 0.99948 [ -3.2802 5.7307 ]; : -----------------------------------------------------------; TFHandler_DNN_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : m_jj: 0.017919 1.0069 [ -3.3498 3.4247 ]; : m_jjj: 0.020352 1.0044 [ -3.2831 3.3699 ]; : m_lv: 0.016356 0.99266 [ -3.2339 3.3958 ]; : m_jlv: -0.018431 0.98242 [ -3.0632 5.7307 ]; : m_bb: 0.0069564 ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:53659,test,test,53659,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,2,['test'],['test']
Testability,".708; [5, 4] train loss: 0.642; [5, 8] train loss: 0.635; [5, 12] train loss: 0.633; [5] val loss: 0.707; [6, 4] train loss: 0.607; [6, 8] train loss: 0.588; [6, 12] train loss: 0.585; [6] val loss: 0.700; [7, 4] train loss: 0.553; [7, 8] train loss: 0.564; [7, 12] train loss: 0.542; [7] val loss: 0.637; [8, 4] train loss: 0.474; [8, 8] train loss: 0.446; [8, 12] train loss: 0.436; [8] val loss: 0.758; [9, 4] train loss: 0.381; [9, 8] train loss: 0.435; [9, 12] train loss: 0.456; [9] val loss: 1.218; [10, 4] train loss: 0.438; [10, 8] train loss: 0.436; [10, 12] train loss: 0.444; [10] val loss: 0.632; Finished Training on 10 Epochs!; running Torch code defining the model....; The PyTorch CNN model is created and saved as PyTorchModelCNN.pt; : Loaded pytorch train function: ; : Loaded pytorch optimizer: ; : Loaded pytorch loss function: ; : Loaded pytorch predict function: ; : Loaded model from file: PyTorchTrainedModelCNN.pt; PyTorch : [dataset] : Evaluation of PyTorch on testing sample (400 events); : Elapsed time for evaluation of 400 events: 0.12 sec ; Factory : ␛[1mEvaluate all methods␛[0m; Factory : Evaluate classifier: BDT; : ; BDT : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 256 , it is larger than 200; Factory : Evaluate classifier: TMVA_DNN_CPU; : ; TMVA_DNN_CPU : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 256 , it is larger than 200; Factory : Evaluate classifier: TMVA_CNN_CPU; : ; TMVA_CNN_CPU : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:41396,test,testing,41396,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['test'],['testing']
Testability,".895) - ; : ; : (Signal Efficiency for Background Efficiency 0.30%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.898 (0.878) 0.971 (0.950) 0.982 (0.975) ; : bg0 0.828 (0.810) - 0.696 (0.676) 0.954 (0.951) ; : bg1 0.951 (0.966) 0.803 (0.745) - 0.958 (0.966) ; : bg2 0.998 (0.991) 0.998 (0.996) 0.998 (0.993) - ; : ; : === Showing confusion matrix for method : DL_CPU ; : (Signal Efficiency for Background Efficiency 0.01%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.398 (0.501) 0.933 (0.951) 0.351 (0.195) ; : bg0 0.339 (0.316) - 0.222 (0.213) 0.419 (0.371) ; : bg1 0.927 (0.909) 0.213 (0.130) - 0.290 (0.332) ; : bg2 0.549 (0.529) 0.546 (0.564) 0.488 (0.509) - ; : ; : (Signal Efficiency for Background Efficiency 0.10%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.884 (0.909) 0.988 (0.991) 0.784 (0.767) ; : bg0 0.766 (0.764) - 0.705 (0.733) 0.768 (0.764) ; : bg1 0.999 (0.998) 0.752 (0.746) - 0.776 (0.809) ; : bg2 0.789 (0.786) 0.773 (0.794) 0.730 (0.736) - ; : ; : (Signal Efficiency for Background Efficiency 0.30%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.979 (0.985) 1.000 (0.996) 0.986 (0.986) ; : bg0 0.943 (0.940) - 0.899 (0.901) 0.956 (0.947) ; : bg1 1.000 (0.999) 0.955 (0.957) - 0.953 (0.959) ; : bg2 0.946 (0.924) 0.942 (0.933) 0.866 (0.887) - ; : ; : -------------------------------------------------------------------------------------------------------; : ; Dataset:dataset : Created tree 'TestTree' with 4000 events; : ; Dataset:dataset : Created tree 'TrainTree' with 4000 events; : ; Factory : ␛[1mThank you for using TMVA!␛[0m; : ␛[1mFor citation information, p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:30280,test,test,30280,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,4,['test'],['test']
Testability,".9, 1.0 . Example: Interval(.5,1.,6) ; [ min max ] ; ------------------------------------------------------------; | | | | | |; .5 .6 .7 .8 .9 1.0 ; ; bin 0 1 2 3 4 5 . . Function Members (Methods); public:. virtual~Interval(); static TClass*Class(); Double_tGetElement(Int_t position) const; Double_tGetMax() const; Double_tGetMean() const; Double_tGetMin() const; Int_tGetNbins() const; Double_tGetRndm(TRandom3&) const; Double_tGetStepSize() const; Double_tGetWidth() const; TMVA::IntervalInterval(const TMVA::Interval& other); TMVA::IntervalInterval(Double_t min, Double_t max, Int_t nbins = 0); virtual TClass*IsA() const; TMVA::Interval&operator=(const TMVA::Interval&); voidSetMax(Double_t m); voidSetMin(Double_t m); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TMVA::MsgLogger&Log() const. Data Members; private:. Double_tfMaxthe constraints of the Interval; Double_tfMin; Int_tfNbinswhen >0 : number of bins (discrete interval); when =0 continuous interval; static TMVA::MsgLogger*fgLoggermessage logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Interval(Double_t min, Double_t max, Int_t nbins = 0). Interval(const TMVA::Interval& other). ~Interval(); destructor. Double_t GetElement(Int_t position) const; calculates the value of the ""number"" bin in a discrete interval.; Parameters:; Double_t position. Double_t GetStepSize() const; retuns the step size between the numbers of a ""discrete Interval"". Double_t GetRndm(TRandom3& ) const; get uniformely distributed number within interval. Double_t GetMin() const; accessors. { return fMin; }. Double_t GetMax() const; { return fMax; }. Double_t GetWidth() const; { return fMax - fMin; }. Int_t GetNbins() const; { return fNbins; }. Double_t GetMean() const; { return (fMax + fMin)/2; }. void SetMax(Double_t m); { fMax = m; }. void SetMin(Double_t m); { fMin = m; }. » Author: Peter Speckmayer » Copyright (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Interval.html:2082,log,logger,2082,root/html528/TMVA__Interval.html,https://root.cern,https://root.cern/root/html528/TMVA__Interval.html,1,['log'],['logger']
Testability,".9, 1.0 . Example: Interval(.5,1.,6) ; [ min max ] ; ------------------------------------------------------------; | | | | | |; .5 .6 .7 .8 .9 1.0 ; ; bin 0 1 2 3 4 5 . . Function Members (Methods); public:. virtual~Interval(); static TClass*Class(); Double_tGetElement(Int_t position) const; Double_tGetMax() const; Double_tGetMean() const; Double_tGetMin() const; Int_tGetNbins() const; Double_tGetRndm(TRandom3&) const; Double_tGetStepSize() const; Double_tGetWidth() const; TMVA::IntervalInterval(const TMVA::Interval& other); TMVA::IntervalInterval(Double_t min, Double_t max, Int_t nbins = 0); virtual TClass*IsA() const; TMVA::Interval&operator=(const TMVA::Interval&); voidSetMax(Double_t m); voidSetMin(Double_t m); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TMVA::MsgLogger&Log() const. Data Members; private:. Double_tfMaxthe constraints of the Interval; Double_tfMin; Int_tfNbinswhen >0 : number of bins (discrete interval); when ==0 continuous interval; static TMVA::MsgLogger*fgLoggermessage logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Interval(Double_t min, Double_t max, Int_t nbins = 0). Interval(const TMVA::Interval& other). ~Interval(); destructor. Double_t GetElement(Int_t position) const; calculates the value of the ""number"" bin in a discrete interval.; Parameters:; Double_t position. Double_t GetStepSize() const; retuns the step size between the numbers of a ""discrete Interval"". Double_t GetRndm(TRandom3& ) const; get uniformely distributed number within interval. Double_t GetMin() const; accessors. { return fMin; }. Double_t GetMax() const; { return fMax; }. Double_t GetWidth() const; { return fMax - fMin; }. Int_t GetNbins() const; { return fNbins; }. Double_t GetMean() const; { return (fMax + fMin)/2; }. void SetMax(Double_t m); { fMax = m; }. void SetMin(Double_t m); { fMin = m; }. » Author: Peter Speckmayer » Copyright (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__Interval.html:2083,log,logger,2083,root/html530/TMVA__Interval.html,https://root.cern,https://root.cern/root/html530/TMVA__Interval.html,2,['log'],['logger']
Testability,".924) 0.942 (0.933) 0.866 (0.887) - ; : ; : -------------------------------------------------------------------------------------------------------; : ; Dataset:dataset : Created tree 'TestTree' with 4000 events; : ; Dataset:dataset : Created tree 'TrainTree' with 4000 events; : ; Factory : ␛[1mThank you for using TMVA!␛[0m; : ␛[1mFor citation information, please visit: http://tmva.sf.net/citeTMVA.html␛[0m; ==> Wrote root file: TMVAMulticlass.root; ==> TMVAMulticlass is done!; ; #include <cstdlib>; #include <iostream>; #include <map>; #include <string>; ; #include ""TFile.h""; #include ""TTree.h""; #include ""TString.h""; #include ""TSystem.h""; #include ""TROOT.h""; ; ; #include ""TMVA/Tools.h""; #include ""TMVA/Factory.h""; #include ""TMVA/DataLoader.h""; #include ""TMVA/TMVAMultiClassGui.h""; ; ; using namespace TMVA;; ; void TMVAMulticlass( TString myMethodList = """" ); {; ; // This loads the library; TMVA::Tools::Instance();; ; // to get access to the GUI and all tmva macros; //; // TString tmva_dir(TString(gRootDir) + ""/tmva"");; // if(gSystem->Getenv(""TMVASYS"")); // tmva_dir = TString(gSystem->Getenv(""TMVASYS""));; // gROOT->SetMacroPath(tmva_dir + ""/test/:"" + gROOT->GetMacroPath() );; // gROOT->ProcessLine("".L TMVAMultiClassGui.C"");; ; ; //---------------------------------------------------------------; // Default MVA methods to be trained + tested; std::map<std::string,int> Use;; Use[""MLP""] = 1;; Use[""BDTG""] = 1;; #ifdef R__HAS_TMVAGPU; Use[""DL_CPU""] = 1;; Use[""DL_GPU""] = 1;; #else; Use[""DL_CPU""] = 1;; Use[""DL_GPU""] = 0;; #endif; Use[""FDA_GA""] = 0;; Use[""PDEFoam""] = 1;; ; //---------------------------------------------------------------; ; std::cout << std::endl;; std::cout << ""==> Start TMVAMulticlass"" << std::endl;; ; if (myMethodList != """") {; for (std::map<std::string,int>::iterator it = Use.begin(); it != Use.end(); it++) it->second = 0;; ; std::vector<TString> mlist = TMVA::gTools().SplitString( myMethodList, ',' );; for (UInt_t i=0; i<mlist.size(); i++) {; std::string re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:32066,test,test,32066,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['test'],['test']
Testability,".993) - ; : ; : === Showing confusion matrix for method : DL_CPU ; : (Signal Efficiency for Background Efficiency 0.01%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.398 (0.501) 0.933 (0.951) 0.351 (0.195) ; : bg0 0.339 (0.316) - 0.222 (0.213) 0.419 (0.371) ; : bg1 0.927 (0.909) 0.213 (0.130) - 0.290 (0.332) ; : bg2 0.549 (0.529) 0.546 (0.564) 0.488 (0.509) - ; : ; : (Signal Efficiency for Background Efficiency 0.10%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.884 (0.909) 0.988 (0.991) 0.784 (0.767) ; : bg0 0.766 (0.764) - 0.705 (0.733) 0.768 (0.764) ; : bg1 0.999 (0.998) 0.752 (0.746) - 0.776 (0.809) ; : bg2 0.789 (0.786) 0.773 (0.794) 0.730 (0.736) - ; : ; : (Signal Efficiency for Background Efficiency 0.30%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.979 (0.985) 1.000 (0.996) 0.986 (0.986) ; : bg0 0.943 (0.940) - 0.899 (0.901) 0.956 (0.947) ; : bg1 1.000 (0.999) 0.955 (0.957) - 0.953 (0.959) ; : bg2 0.946 (0.924) 0.942 (0.933) 0.866 (0.887) - ; : ; : -------------------------------------------------------------------------------------------------------; : ; Dataset:dataset : Created tree 'TestTree' with 4000 events; : ; Dataset:dataset : Created tree 'TrainTree' with 4000 events; : ; Factory : ␛[1mThank you for using TMVA!␛[0m; : ␛[1mFor citation information, please visit: http://tmva.sf.net/citeTMVA.html␛[0m; ==> Wrote root file: TMVAMulticlass.root; ==> TMVAMulticlass is done!; ; #include <cstdlib>; #include <iostream>; #include <map>; #include <string>; ; #include ""TFile.h""; #include ""TTree.h""; #include ""TString.h""; #include ""TSystem.h""; #include ""TROOT.h""; ; ; #include ""TMVA/Tools.h""; #include ""TMVA/Factory.h""; #include ""TMVA/DataLoader.h""; #include ""TM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:30684,test,test,30684,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,4,['test'],['test']
Testability,".; 1637 ; 1638UserGroup_t *TSystem::GetGroupInfo(const char * /*group*/); 1639{; 1640 AbstractMethod(""GetGroupInfo"");; 1641 return nullptr;; 1642}; 1643 ; 1644//---- environment manipulation ------------------------------------------------; 1645 ; 1646////////////////////////////////////////////////////////////////////////////////; 1647/// Set environment variable.; 1648 ; 1649void TSystem::Setenv(const char *, const char *); 1650{; 1651 AbstractMethod(""Setenv"");; 1652}; 1653 ; 1654////////////////////////////////////////////////////////////////////////////////; 1655/// Unset environment variable.; 1656 ; 1657void TSystem::Unsetenv(const char *name); 1658{; 1659 Setenv(name, """");; 1660}; 1661 ; 1662////////////////////////////////////////////////////////////////////////////////; 1663/// Get environment variable.; 1664 ; 1665const char *TSystem::Getenv(const char *); 1666{; 1667 AbstractMethod(""Getenv"");; 1668 return nullptr;; 1669}; 1670 ; 1671//---- System Logging ----------------------------------------------------------; 1672 ; 1673////////////////////////////////////////////////////////////////////////////////; 1674/// Open connection to system log daemon. For the use of the options and; 1675/// facility see the Unix openlog man page.; 1676 ; 1677void TSystem::Openlog(const char *, Int_t, ELogFacility); 1678{; 1679 AbstractMethod(""Openlog"");; 1680}; 1681 ; 1682////////////////////////////////////////////////////////////////////////////////; 1683/// Send mess to syslog daemon. Level is the logging level and mess the; 1684/// message that will be written on the log.; 1685 ; 1686void TSystem::Syslog(ELogLevel, const char *); 1687{; 1688 AbstractMethod(""Syslog"");; 1689}; 1690 ; 1691////////////////////////////////////////////////////////////////////////////////; 1692/// Close connection to system log daemon.; 1693 ; 1694void TSystem::Closelog(); 1695{; 1696 AbstractMethod(""Closelog"");; 1697}; 1698 ; 1699//---- Standard output redirection -----------------------------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:53470,log,log,53470,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['log'],['log']
Testability,".; 3. The effect of binning (if any) is always to make the value of PROB; slightly too big. That is, setting an acceptance criterion of (PROB>0.05; will assure that at most 5% of truly compatible histograms are rejected,; and usually somewhat less."". Note also that for GoF test of unbinned data ROOT provides also the class; ROOT::Math::GoFTest. The class has also method for doing one sample tests; (i.e. comparing the data with a given distribution). void SetContent(const Double_t* content); Replace bin contents by the contents of array content. Int_t GetContour(Double_t* levels = 0); Return contour values into array levels if pointer levels is non zero. The function returns the number of contour levels.; see GetContourLevel to return one contour only. Double_t GetContourLevel(Int_t level) const; Return value of contour number level; use GetContour to return the array of all contour levels. Double_t GetContourLevelPad(Int_t level) const; Return the value of contour number ""level"" in Pad coordinates ie: if the Pad; is in log scale along Z it returns le log of the contour level value.; see GetContour to return the array of all contour levels. void SetBuffer(Int_t buffersize, Option_t* option = """"); set the maximum number of entries to be kept in the buffer. void SetContour(Int_t nlevels, const Double_t* levels = 0); Set the number and values of contour levels. By default the number of contour levels is set to 20. The contours values; in the array ""levels"" should be specified in increasing order. if argument levels = 0 or missing, equidistant contours are computed. void SetContourLevel(Int_t level, Double_t value); Set value for one contour level. Double_t GetMaximum(Double_t maxval = 3.40282347E+38F) const; Return maximum value smaller than maxval of bins in the range,; unless the value has been overridden by TH1::SetMaximum,; in which case it returns that value. (This happens, for example,; when the histogram is drawn and the y or z axis limits are changed. To get the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1.html:122040,log,log,122040,root/html602/TH1.html,https://root.cern,https://root.cern/root/html602/TH1.html,4,['log'],['log']
Testability,".; 464 * Relative error; 465 * arithmetic domain # trials peak rms; 466 * IEEE 0,5 10000 6.9e-15 4.5e-16; 467 * IEEE 0,85 250000 2.2e-13 1.7e-14; 468 * IEEE 0,1000 30000 5.3e-12 6.3e-13; 469 * IEEE 0,10000 250000 9.3e-11 7.1e-12; 470 * IEEE 0,100000 10000 8.7e-10 4.8e-11; 471 * Outputs smaller than the IEEE gradual underflow threshold; 472 * were excluded from these statistics.; 473 *; 474 * ERROR MESSAGES:; 475 * message condition value returned; 476 * incbet domain x<0, x>1 0.0; 477 * incbet underflow 0.0; 478 *; 479 * Cephes Math Library, Release 2.8: June, 2000; 480 * Copyright 1984, 1995, 2000 by Stephen L. Moshier; 481 */; 482 ; 483 ; 484double incbet( double aa, double bb, double xx ); 485{; 486 double a, b, t, x, xc, w, y;; 487 int flag;; 488 ; 489 if( aa <= 0.0 || bb <= 0.0 ); 490 return( 0.0 );; 491 ; 492 // LM: changed: for X > 1 return 1.; 493 if (xx <= 0.0) return( 0.0 );; 494 if ( xx >= 1.0) return( 1.0 );; 495 ; 496 flag = 0;; 497 ; 498/* - to test if that way is better for large b/ (comment out from Cephes version); 499 if( (bb * xx) <= 1.0 && xx <= 0.95); 500 {; 501 t = pseries(aa, bb, xx);; 502 goto done;; 503 }; 504 ; 505**/; 506 w = 1.0 - xx;; 507 ; 508/* Reverse a and b if x is greater than the mean. */; 509/* aa,bb > 1 -> sharp rise at x=aa/(aa+bb) */; 510 if( xx > (aa/(aa+bb)) ); 511 {; 512 flag = 1;; 513 a = bb;; 514 b = aa;; 515 xc = xx;; 516 x = w;; 517 }; 518 else; 519 {; 520 a = aa;; 521 b = bb;; 522 xc = w;; 523 x = xx;; 524 }; 525 ; 526 if( flag == 1 && (b * x) <= 1.0 && x <= 0.95); 527 {; 528 t = pseries(a, b, x);; 529 goto done;; 530 }; 531 ; 532/* Choose expansion for better convergence. */; 533 y = x * (a+b-2.0) - (a-1.0);; 534 if( y < 0.0 ); 535 w = incbcf( a, b, x );; 536 else; 537 w = incbd( a, b, x ) / xc;; 538 ; 539/* Multiply w by the factor; 540 a b _ _ _; 541 x (1-x) | (a+b) / ( a | (a) | (b) ) . */; 542 ; 543 y = a * std::log(x);; 544 t = b * std::log(xc);; 545 if( (a+b) < kMAXSTIR && std::abs(y) < kMAXLOG && std::abs(t) < ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/SpecFuncCephes_8cxx_source.html:11338,test,test,11338,doc/master/SpecFuncCephes_8cxx_source.html,https://root.cern,https://root.cern/doc/master/SpecFuncCephes_8cxx_source.html,1,['test'],['test']
Testability,".; 5 : Landscape mode with a large margin at the bottom of the page.; The large margin is useful for some PostScript printers (very often; for the colour printers) as they need more space to grip the paper; for mechanical reasons. Note that some PostScript colour printers; can also use the so called special A4 format permitting the full; usage of the A4 area; in this case larger margins are not necessary; and Type=1 or 2 can be used.; 3 : Encapsulated PostScript. This Type permits the generation of files; which can be included in other documents, for example in LaTeX; files.; . Making several pictures in the same Postscript file: case 1; The following macro is an example illustrating how to open a Postscript; file and draw several pictures. The generation of a new Postscript page; is automatic when TCanvas::Clear is called by; object->Draw().; ; {; TFile f(""hsimple.root"");; TCanvas c1(""c1"",""canvas"",800,600);; // select postscript output type; // type = 111 portrait ps; // type = 112 landscape ps; // type = 113 eps; Int_t type = 111;; // create a postscript file and set the paper size; TPostScript ps(""test.ps"",type);; ps.Range(16,24); //set x,y of printed page; // draw 3 histograms from file hsimple.root on separate pages; hpx->Draw();; c1.Update(); //force drawing in a macro; hprof->Draw();; c1.Update();; hpx->Draw(""lego1"");; c1.Update();; ps.Close();; }; ; Making several pictures in the same Postscript file: case 2; This example shows 2 pages. The canvas is divided.; TPostScript::NewPage must be called before starting a new; picture.object->Draw does not clear the canvas in this case; because we clear only the pads and not the main canvas.; Note that c1->Update must be called at the end of the first; picture.; ; {; TFile *f1 = new TFile(""hsimple.root"");; TCanvas *c1 = new TCanvas(""c1"");; TPostScript *ps = new TPostScript(""file.ps"",112);; c1->Divide(2,1);; // picture 1; ps->NewPage();; c1->cd(1);; hpx->Draw();; c1->cd(2);; hprof->Draw();; c1->Update();; // picture 2;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPostScript.html:4053,test,test,4053,root/html534/TPostScript.html,https://root.cern,https://root.cern/root/html534/TPostScript.html,3,['test'],['test']
Testability,".; Definition at line 531 of file MethodPyRandomForest.cxx. ◆ DeclareOptions(). void MethodPyRandomForest::DeclareOptions ; (; ). virtual . Implements TMVA::PyMethodBase.; Definition at line 120 of file MethodPyRandomForest.cxx. ◆ GetHelpMessage(). void MethodPyRandomForest::GetHelpMessage ; (; ); const. protectedvirtual . Implements TMVA::IMethod.; Definition at line 551 of file MethodPyRandomForest.cxx. ◆ GetMulticlassValues(). std::vector< Float_t > & MethodPyRandomForest::GetMulticlassValues ; (; ). virtual . Reimplemented from TMVA::MethodBase.; Definition at line 475 of file MethodPyRandomForest.cxx. ◆ GetMvaValue(). Double_t MethodPyRandomForest::GetMvaValue ; (; Double_t * ; errLower = nullptr, . Double_t * ; errUpper = nullptr . ). virtual . Implements TMVA::PyMethodBase.; Definition at line 443 of file MethodPyRandomForest.cxx. ◆ GetMvaValues(). std::vector< Double_t > MethodPyRandomForest::GetMvaValues ; (; Long64_t ; firstEvt = 0, . Long64_t ; lastEvt = -1, . Bool_t ; logProgress = false . ). virtual . get all the MVA values for the events of the current Data type ; Implements TMVA::PyMethodBase.; Definition at line 385 of file MethodPyRandomForest.cxx. ◆ HasAnalysisType(). Bool_t MethodPyRandomForest::HasAnalysisType ; (; Types::EAnalysisType ; type, . UInt_t ; numberClasses, . UInt_t ; numberTargets . ). virtual . Implements TMVA::PyMethodBase.; Definition at line 112 of file MethodPyRandomForest.cxx. ◆ Init(). void MethodPyRandomForest::Init ; (; void ; ). virtual . Implements TMVA::PyMethodBase.; Definition at line 304 of file MethodPyRandomForest.cxx. ◆ ProcessOptions(). void MethodPyRandomForest::ProcessOptions ; (; ). virtual . Implements TMVA::PyMethodBase.; Definition at line 197 of file MethodPyRandomForest.cxx. ◆ ReadModelFromFile(). void MethodPyRandomForest::ReadModelFromFile ; (; ). virtual . Implements TMVA::PyMethodBase.; Definition at line 504 of file MethodPyRandomForest.cxx. ◆ ReadWeightsFromStream() [1/3]. virtual void TMVA::MethodPyRa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPyRandomForest.html:32539,log,logProgress,32539,doc/master/classTMVA_1_1MethodPyRandomForest.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPyRandomForest.html,1,['log'],['logProgress']
Testability,".; Reimplemented in TGDoubleVSlider, TGTripleVSlider, and TGTripleHSlider. ◆ StreamerNVirtual(). void TGDoubleSlider::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 166 of file TGDoubleSlider.h. Member Data Documentation. ◆ fMarkEnds. Bool_t TGDoubleSlider::fMarkEnds. protected . lines marking where stretch zones begin ; Definition at line 59 of file TGDoubleSlider.h. ◆ fMove. Int_t TGDoubleSlider::fMove. protected . 1: move min value 2: move max value 3: move min and max value 0: don't move any value ; Definition at line 54 of file TGDoubleSlider.h. ◆ fPos. Double_t TGDoubleSlider::fPos. protected . logical position between fVmin and fVmax ; Definition at line 43 of file TGDoubleSlider.h. ◆ fPressPoint. Int_t TGDoubleSlider::fPressPoint. protected . mouse position at button press event ; Definition at line 51 of file TGDoubleSlider.h. ◆ fPressSmax. Double_t TGDoubleSlider::fPressSmax. protected . logical max position at button press event ; Definition at line 53 of file TGDoubleSlider.h. ◆ fPressSmin. Double_t TGDoubleSlider::fPressSmin. protected . logical min position at button press event ; Definition at line 52 of file TGDoubleSlider.h. ◆ fRelPos. Int_t TGDoubleSlider::fRelPos. protected . slider position in pixel coordinates ; Definition at line 46 of file TGDoubleSlider.h. ◆ fReversedScale. Bool_t TGDoubleSlider::fReversedScale. protected . reverse which end is min and max ; Definition at line 58 of file TGDoubleSlider.h. ◆ fScale. Int_t TGDoubleSlider::fScale. protected . tick mark scale ; Definition at line 49 of file TGDoubleSlider.h. ◆ fScaleType. Int_t TGDoubleSlider::fScaleType. protected . tick mark scale type (no, downright, both) ; Definition at line 50 of file TGDoubleSlider.h. ◆ fSliderPic. const TGPicture* TGDoubleSlider::fSliderPic. protected . picture to draw slider ends ; Definition at line 60 of file TGDoubleSlider.h. ◆ fSmax. Double_t TGDoubleSlider::fSmax. protected . logical position of max value ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDoubleSlider.html:39617,log,logical,39617,doc/master/classTGDoubleSlider.html,https://root.cern,https://root.cern/doc/master/classTGDoubleSlider.html,1,['log'],['logical']
Testability,".; fails for pointers to functions. Bool_t ExcludedByFignore(TString s); [static utility function]. returns true iff ""s"" ends with one of; the strings listed in the ""TabCom.FileIgnore"" resource. TString GetSysIncludePath(); [static utility function]. returns a colon-separated string of directories; that CINT will search when you call #include<...>. returns empty string on failure. Bool_t IsDirectory(const char* fileName); [static utility function]. calls TSystem::GetPathInfo() to see if ""fileName""; is a system directory. TSeqCollection * NewListOfFilesInPath(const char* path); [static utility function]. creates a list containing the full path name for each file; in the (colon separated) string ""path1"". memory is allocated with ""new"", so; whoever calls this function takes responsibility for deleting it. Bool_t PathIsSpecifiedInFileName(const TString& fileName); [static utility function]. true if ""fileName""; 1. is an absolute path (""/tmp/a""); 2. is a relative path (""../whatever"", ""./test""); 3. starts with user name (""~/mail""); 4. starts with an environment variable (""$ROOTSYS/bin""). void NoMsg(Int_t errorLevel); [static utility function]. calling ""NoMsg( errorLevel )"",; sets ""gErrorIgnoreLevel"" to ""errorLevel+1"" so that; all errors with ""level < errorLevel"" will be ignored. calling the function with a negative argument; (e.g., ""NoMsg( -1 )""); resets gErrorIgnoreLevel to its previous value. Int_t Complete(const TRegexp& re, const TSeqCollection* pListOfCandidates, const char* appendage, TString::ECaseCompare cmp = TString::kExact); [private]. void CopyMatch(char* dest, const char* localName, const char* appendage = 0, const char* fullName = 0) const; [private]. TString DeterminePath(const TString& fileName, const char* defaultPath) const; [private]. TString ExtendPath(const char* originalPath, TString newBase) const; [private]. Int_t Hook(char* buf, int* pLoc); [private]. void InitPatterns(); [private]. TClass * MakeClassFromClassName(const char* className) const; [priv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTabCom.html:10722,test,test,10722,root/html528/TTabCom.html,https://root.cern,https://root.cern/root/html528/TTabCom.html,1,['test'],['test']
Testability,".; fails for pointers to functions. Bool_t ExcludedByFignore(TString s); [static utility function]. returns true iff ""s"" ends with one of; the strings listed in the ""TabCom.FileIgnore"" resource. TString GetSysIncludePath(); [static utility function]. returns a colon-separated string of directories; that CINT will search when you call #include<...>. returns empty string on failure. Bool_t IsDirectory(const char* fileName); [static utility function]. calls TSystem::GetPathInfo() to see if ""fileName""; is a system directory. TSeqCollection * NewListOfFilesInPath(const char* path); [static utility function]. creates a list containing the full path name for each file; in the (colon separated) string ""path1"". memory is allocated with ""new"", so; whoever calls this function takes responsibility for deleting it. Bool_t PathIsSpecifiedInFileName(const TString& fileName); [static utility function]. true if ""fileName""; 1. is an absolute path (""/tmp/a""); 2. is a relative path (""../whatever"", ""./test""); 3. starts with user name (""~/mail""); 4. starts with an environment variable (""$ROOTSYS/bin""). void NoMsg(Int_t errorLevel); [static utility function]. calling ""NoMsg( errorLevel )"",; sets ""gErrorIgnoreLevel"" to ""errorLevel+1"" so that; all errors with ""level < errorLevel"" will be ignored. calling the function with a negative argument; (e.g., ""NoMsg( -1 )""); resets gErrorIgnoreLevel to its previous value. Int_t Complete(const TRegexp& re, const TSeqCollection* pListOfCandidates, const char* appendage, ostream& out, TString::ECaseCompare cmp = TString::kExact); [private]. void CopyMatch(char* dest, const char* localName, const char* appendage = 0, const char* fullName = 0) const; [private]. TString DeterminePath(const TString& fileName, const char* defaultPath) const; [private]. TString ExtendPath(const char* originalPath, TString newBase) const; [private]. Int_t Hook(char* buf, int* pLoc, ostream& out); [private]. void InitPatterns(); [private]. TClass * MakeClassFromClassName(const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTabCom.html:10750,test,test,10750,root/html530/TTabCom.html,https://root.cern,https://root.cern/root/html530/TTabCom.html,3,['test'],['test']
Testability,".;  ; class  TApplication;  This class creates the ROOT Application Environment that interfaces to the windowing system eventloop and eventhandlers. More...;  ; class  TApplicationImp;  ABC describing GUI independent application implementation protocol. More...;  ; class  TAtt3D;  Use this attribute class when an object should have 3D capabilities. More...;  ; class  TAttAxis;  Manages histogram axis attributes. More...;  ; class  TAttBBox;  Helper for management of bounding-box information. More...;  ; class  TAttBBox2D;  Abstract base class for elements drawn in the editor. More...;  ; class  TAttFill;  Fill Area Attributes class. More...;  ; class  TAttLine;  Line Attributes class. More...;  ; class  TAttMarker;  Marker Attributes class. More...;  ; class  TAttPad;  Manages default Pad attributes. More...;  ; class  TAttText;  Text Attributes class. More...;  ; class  TBase64;  This code implements the Base64 encoding and decoding. More...;  ; class  TBenchmark;  This class is a ROOT utility to help benchmarking applications. More...;  ; class  TBrowser;  Using a TBrowser one can browse all ROOT objects. More...;  ; class  TBrowserImp;  ABC describing GUI independent browser implementation protocol. More...;  ; class  TBuffer;  Buffer base class used for serializing objects. More...;  ; class  TBuffer3D;  Generic 3D primitive description class. More...;  ; class  TCanvasImp;  ABC describing GUI independent main window (with menubar, scrollbars and a drawing area). More...;  ; class  TColor;  The color creation and management class. More...;  ; class  TColorGradient;  TColorGradient extends basic TColor. More...;  ; class  TVirtualPad::TContext;  small helper class to store/restore gPad context in TPad methods More...;  ; class  TDirectory::TContext;  TDirectory::TContext keeps track and restore the current directory. More...;  ; class  TContextMenu;  This class provides an interface to context sensitive popup menus. More...;  ; class  TContextMenuImp;  This class",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Base.html:2514,benchmark,benchmarking,2514,doc/master/group__Base.html,https://root.cern,https://root.cern/doc/master/group__Base.html,1,['benchmark'],['benchmarking']
Testability,".;  ; class  TGLOvlSelectRecord;  Selection record for overlay objects. More...;  ; class  TGLPadPainter;  ""Delegating"" part of TGLPadPainter. More...;  ; class  TGLParametricEquation;  A parametric surface is a surface defined by a parametric equation, involving two parameters (u, v): More...;  ; class  TGLParametricEquationGL;  GL-renderer wrapper for TGLParametricEquation. More...;  ; class  TGLParametricPlot;  ; class  TGLPerspectiveCamera;  Perspective projection camera - with characteristic foreshortening. More...;  ; class  TGLPhysicalShape;  Concrete physical shape - a GL drawable. More...;  ; class  TGLPlane;  3D plane class - of format Ax + By + Cz + D = 0 More...;  ; class  TGLPlot3D;  Description of TGLPlot3D. More...;  ; class  TGLPlotBox;  Implementation of a box around a histogram/function for plot-painters. More...;  ; class  TGLPlotCamera;  Camera for TGLPlotPainter and sub-classes. More...;  ; class  TGLPlotCoordinates;  Helper class for plot-painters holding information about axis ranges, numbers of bins and flags if certain axis is logarithmic. More...;  ; class  TGLPlotPainter;  Base class for plot-painters that provide GL rendering of various 2D and 3D histograms, functions and parametric surfaces. More...;  ; class  TGLPolyLine;  To draw a 3D polyline in a GL window. More...;  ; class  TGLPolyMarker;  To draw a 3D polymarker in a GL window. More...;  ; class  TGLPShapeObj;  Wrap TGLPysicalShape into TObject so that it can be edited using GED. More...;  ; class  TGLPShapeObjEditor;  GUI editor for TGLPShapeObj. More...;  ; class  TGLPShapeRef;  Base class for references to TGLPysicalShape that need to be notified when the shape is destroyed. More...;  ; class  TGLQuadric;  Wrapper class for GLU quadric shape drawing object. More...;  ; class  TGLRect;  Viewport (pixel base) 2D rectangle class. More...;  ; class  TGLRnrCtx;  The TGLRnrCtx class aggregates data for a given redering context as needed by various parts of the ROOT's OpenGL infrastru",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__opengl.html:6693,log,logarithmic,6693,doc/master/group__opengl.html,https://root.cern,https://root.cern/doc/master/group__opengl.html,1,['log'],['logarithmic']
Testability,".AddButton(""hsum"", "".x hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""h1draw"", "".x h1draw.C"",; ""Drawing Options for 1D Histograms"");; bar.AddButton(""graph"", "".x graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""atlasna49"", "".x atlasna49.C"",; ""Creating and Viewing Geometries"");; bar.AddButton(""file_layout"", "".x file.C"",; ""The ROOT file format"");; bar.AddButton(""tree_layout"", "".x tree.C"",; ""The Tree Data Structure"");; bar.AddButton(""ntuple1"", "".x ntuple1.C"",; ""Ntuples and Selections"");; bar.AddButton(""run benchmarks"", "".x benchmarks.C"",; ""Runs all the ROOT benchmarks"");; bar.AddButton(""rootmarks"", "".x rootmarks.C"",; ""Prints an estimated ROOTMARKS for your machine"");; bar.AddButton(""edit_hsimple"", "".!ved hsimple.C &"",; ""Invokes the text editor on file hsimple.C"");; bar.AddButton(""Close Bar"", ""gROOT.Reset(\""a\"")"",; ""Close ControlBar"");; bar.Show();; gROOT.SaveContext();; }. /*. */. Function Members (Methods); public:. TControlBar(); TControlBar(const TControlBar&); TControlBar(const char* orientation, const char* title = """"); TControlBar(const char* orientation, const char* title, Int_t x, Int_t y); virtual~TControlBar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTControlBarButton::Action(); voidAddButton(TControlBarButton* button); voidAddButton(TControlBarButton& button); voidAddButton(const char* label, const char* action, const char* hint = """", const char* type = ""button""); voidAddControlBar(TControlBar* controlBar); voidAddControlBar(TControlBar& controlBar);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TControlBar.html:2211,benchmark,benchmarks,2211,root/html526/TControlBar.html,https://root.cern,https://root.cern/root/html526/TControlBar.html,5,['benchmark'],['benchmarks']
Testability,".AddButton(""hsum"", "".x hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""h1draw"", "".x h1draw.C"",; ""Drawing Options for 1D Histograms"");; bar.AddButton(""graph"", "".x graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""atlasna49"", "".x atlasna49.C"",; ""Creating and Viewing Geometries"");; bar.AddButton(""file_layout"", "".x file.C"",; ""The ROOT file format"");; bar.AddButton(""tree_layout"", "".x tree.C"",; ""The Tree Data Structure"");; bar.AddButton(""ntuple1"", "".x ntuple1.C"",; ""Ntuples and Selections"");; bar.AddButton(""run benchmarks"", "".x benchmarks.C"",; ""Runs all the ROOT benchmarks"");; bar.AddButton(""rootmarks"", "".x rootmarks.C"",; ""Prints an estimated ROOTMARKS for your machine"");; bar.AddButton(""edit_hsimple"", "".!ved hsimple.C &"",; ""Invokes the text editor on file hsimple.C"");; bar.AddButton(""Close Bar"", ""gROOT.Reset(\""a\"")"",; ""Close ControlBar"");; bar.Show();; gROOT.SaveContext();; }. /*. */. Function Members (Methods); public:. virtual~TControlBar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTControlBarButton::Action(); voidAddButton(TControlBarButton* button); voidAddButton(TControlBarButton& button); voidAddButton(const char* label, const char* action, const char* hint = """", const char* type = ""button""); voidAddControlBar(TControlBar* controlBar); voidAddControlBar(TControlBar& controlBar); voidAddSeparator(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TControlBar.html:2219,benchmark,benchmarks,2219,root/html602/TControlBar.html,https://root.cern,https://root.cern/root/html602/TControlBar.html,2,['benchmark'],['benchmarks']
Testability,.C 'High Level Factory Example' RooStats tutorial macro #602 ;  rs701_BayesianCalculator.C 'Bayesian Calculator' RooStats tutorial macro #701 ;  rs801_HypoTestInverterOriginal.C 'Hypothesis Test Inversion' RooStats tutorial macro #801 ;  rs_bernsteinCorrection.C 'Bernstein Correction' RooStats tutorial macro ;  rs_numberCountingCombination.C 'Number Counting Example' RooStats tutorial macro #100 ;  rs_numbercountingutils.C 'Number Counting Utils' RooStats tutorial ;  StandardBayesianMCMCDemo.C Standard demo of the Bayesian MCMC calculator ;  StandardBayesianNumericalDemo.C Standard demo of the numerical Bayesian calculator ;  StandardFeldmanCousinsDemo.C Standard demo of the Feldman-Cousins calculator StandardFeldmanCousinsDemo ;  StandardFrequentistDiscovery.C StandardFrequentistDiscovery ;  StandardHistFactoryPlotsWithCategories.C StandardHistFactoryPlotsWithCategories ;  StandardHypoTestDemo.C Standard tutorial macro for hypothesis test (for computing the discovery significance) using all RooStats hypotheiss tests calculators and test statistics ;  StandardHypoTestInvDemo.C Standard tutorial macro for performing an inverted hypothesis test for computing an interval ;  StandardProfileInspectorDemo.C Standard demo of the ProfileInspector class StandardProfileInspectorDemo ;  StandardProfileLikelihoodDemo.C Standard demo of the Profile Likelihood calculator StandardProfileLikelihoodDemo ;  StandardTestStatDistributionDemo.C StandardTestStatDistributionDemo.C ;  TestNonCentral.C ;  TwoSidedFrequentistUpperLimitWithBands.C TwoSidedFrequentistUpperLimitWithBands ;  Zbi_Zgamma.C Demonstrate Z_Bi = Z_Gamma ;  ► spectrum;  Background_compton.C Example to illustrate the background estimator (class TSpectrum) including Compton edges ;  Background_decr.C Example to illustrate the background estimator (class TSpectrum) ;  Background_incr.C Example to illustrate the background estimator (class TSpectrum) ;  Background_order.C Example to illustrate the influence of the clipping,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:149846,test,test,149846,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,15,['test'],"['test', 'tests']"
Testability,.C ;  peaks.C Illustrates how to find peaks in histograms ;  peaks2.C Example to illustrate the 2-d peak finder (class TSpectrum2) ;  SearchHR1.C Example to illustrate high resolution peak searching function (class TSpectrum) ;  SearchHR3.C Example to illustrate the influence of number of iterations in deconvolution in high resolution peak searching function (class TSpectrum) ;  Smoothing.C Example to illustrate smoothing using Markov algorithm (class TSpectrum) ;  spectrumpainter.C Examples showing how to use TSpectrum2Painter (the SPEC option) ;  ► splot;  TestSPlot.CThis tutorial illustrates the use of class TSPlot and of the sPlots method ;  ► sql;  sqlcanvas.CThis is slight modification of ntuple1.C example ;  sqlcreatedb.CCreate a runcatalog table in a MySQL test database ;  sqlcreatedb.py Create a runcatalog table in a MySQL test database ;  sqlfilldb.CFill run catalog with nfiles entries ;  sqlfilldb.py Fill run catalog with nfiles entries ;  sqlselect.CQuery example to MySQL test database ;  sqlselect.py Query example to MySQL test database ;  sqltables.CThis is an example illustrating how the TSQLFile class can be used ;  ► thread;  stressThreadPool.CUsage: ;  threadPool.CUsage: ;  threads.CExample of a simple script creating 3 threads ;  threadsh1.CExample of a simple script creating 3 threads ;  threadsh2.CExample of a simple script creating 2 threads each with one canvas ;  ► tmva;  ► envelope;  classification.C;  ► keras;  ApplicationClassificationKeras.py;  ApplicationRegressionKeras.py;  ClassificationKeras.py;  GenerateModel.py;  MulticlassKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:157706,test,test,157706,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,1,['test'],['test']
Testability,".C Example of script showing how to create a ROOT file with subdirectories ;  loopdir.C Example of script to loop on all the objects of a ROOT file directory and print on Postscript all TH1 derived objects ;  loopdir11.C Example of script to loop on all the objects of a ROOT file directory and print on Postscript all TH1 derived objects ;  mergeSelective.C Merge only part of the content of a set of files ;  readCode.C Example of script showing how to navigate in a ROOT file with sub-directories and read the objects in each sub-directory ;  testMergeCont.C Macro demonstrating the merging of containers ;  ► math;  Bessel.C Show the different kinds of Bessel functions available in ROOT To execute the macro type in: ;  binomial.C tutorial illustrating the use of TMath::Binomial can be run with: ;  ChebyshevPol.C Example of Chebyshev polynomials using new TFormula pre-defined definitions of chebyshev polynomials ;  chi2test.C Example to use chi2 test for comparing two histograms One unweighted histogram is compared with a weighted histogram ;  CrystalBall.C Example of CrystalBall Function and its distribution (pdf and cdf) ;  exampleFunctor.C Tutorial illustrating how creating a TF1 class using functor or class member functions ;  exampleMultiRoot.C Example of using multiroot finder based on GSL algorithm ;  exampleTKDE.C Example of using the TKDE class (kernel density estimator) ;  FeldmanCousins.C Example macro of using the TFeldmanCousins class in root ;  GammaFun.C Example showing the usage of the major special math functions (gamma, beta, erf) in ROOT To execute the macro type in: ;  goftest.C GoFTest tutorial macro ;  kdTreeBinning.C kdTreeBinning tutorial: bin the data in cells of equal content using a kd-tree ;  Legendre.C Example of first few Legendre Polynomials ;  Legendre.py Example of first few Legendre Polynomials ;  LegendreAssoc.C Example describing the usage of different kinds of Associate Legendre Polynomials To execute the macro type in: ;  limit.C Thi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:129261,test,test,129261,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,1,['test'],['test']
Testability,".C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  histops.cxx;  histspeedtest.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  benchmarks.CThis macro run several tests and produces an benchmark report ;  demos.CThis macro shows a control bar to run some of the ROOT tutorials ;  demoshelp.CThis macro shows help on running the Demos ;  geant3tasks.CThis script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects ;  hsimple.C This program creates : ;  htmlex.CThis file demonstrates how THtml can document sources ;  MyTasks.cxxA set of classes deriving from TTask ;  regexp.CA regular expression, often called a pattern, is an expression that describes a set of strings ;  regexp_pme.CClass TPMERegexp - API similar to PME - PCRE Made Easy Tries to be as close as possible to PERL syntax and functionality ;  rootalias.CDefines aliases: ;  rootenv.CProduce a picture of the ROOT environment ;  rootlogoff.CExample of rootlogoff.C ;  rootlogon.CExample of rootlogon.C ;  rootmarks.CPrints a summary of all ROOT benchmarks (must be run before) ;  tasks.CExample of TTasks . ROOT 6.10/09 - Reference Guide Generated on Thu May 31 2018 12:15:45 using Doxygen 1.8.13. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:162242,benchmark,benchmarks,162242,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['benchmark'],['benchmarks']
Testability,.C;  TMVAClassification_Likelihood.class.C;  TMVAClassification_LikelihoodPCA.class.C;  TMVAClassification_MLPBNN.class.C;  TMVAClassification_PDEFoam.class.C;  TMVAClassification_PDERS.class.C;  TMVAClassification_RuleFit.class.C;  TMVAClassification_SVM.class.C;  TMVAClassificationCategory_Fisher.class.C;  TMVAClassificationCategory_Likelihood.class.C;  TMVACrossValidation_BDTG.class.C;  TMVACrossValidation_BDTG_fold1.class.C;  TMVACrossValidation_BDTG_fold2.class.C;  TMVACrossValidation_Fisher.class.C;  TMVACrossValidation_Fisher_fold1.class.C;  TMVACrossValidation_Fisher_fold2.class.C;  TMVAMulticlass_BDTG.class.C;  TMVAMulticlass_MLP.class.C;  ► datasetBkg0;  ► weights;  TMVAMultiBkg0_BDTG.class.C;  ► datasetBkg1;  ► weights;  TMVAMultiBkg1_BDTG.class.C;  ► datasetBkg2;  ► weights;  TMVAMultiBkg2_BDTG.class.C;  MDF.C;  MyPdfV1.cxx;  MyPdfV1.h;  MyPdfV2.cxx;  MyPdfV2.h;  MyPdfV3.cxx;  MyPdfV3.h;  pca.C;  RooCFAuto000Pdf.cxx;  RooCFAuto000Pdf.h;  RooGenPdfPdf.cxx;  RooGenPdfPdf.h;  test.py;  ► geom;  ► gdml;  doc;  ► inc;  TGDMLParse.h;  TGDMLWrite.h;  ► src;  TGDMLParse.cxx;  TGDMLWrite.cxx;  ROOTwriter.py;  writer.py;  ► geocad;  doc;  ► inc;  TGeoToStep.h;  ► src;  TGeoToOCC.cxx;  TGeoToOCC.h;  TGeoToStep.cxx;  TOCCToStep.cxx;  TOCCToStep.h;  ► geom;  doc;  ► inc;  LinkDef1.h;  LinkDef2.h;  TGeoArb8.h;  TGeoAtt.h;  TGeoBBox.h;  TGeoBoolNode.h;  TGeoBranchArray.h;  TGeoBuilder.h;  TGeoCache.h;  TGeoCompositeShape.h;  TGeoCone.h;  TGeoElement.h;  TGeoEltu.h;  TGeoExtension.h;  TGeoGlobalMagField.h;  TGeoHalfSpace.h;  TGeoHelix.h;  TGeoHype.h;  TGeoManager.h;  TGeoMaterial.h;  TGeoMatrix.h;  TGeoMedium.h;  TGeoNavigator.h;  TGeoNode.h;  TGeoPara.h;  TGeoParaboloid.h;  TGeoParallelWorld.h;  TGeoPatternFinder.h;  TGeoPcon.h;  TGeoPgon.h;  TGeoPhysicalConstants.h;  TGeoPhysicalNode.h;  TGeoPolygon.h;  TGeoRCPtr.h;  TGeoRegion.h;  TGeoScaledShape.h;  TGeoShape.h;  TGeoShapeAssembly.h;  TGeoSphere.h;  TGeoStateInfo.h;  TGeoSystemOfUnits.h;  TGeoTorus.h;  TGeoTrd1.h;  T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:11683,test,test,11683,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['test'],['test']
Testability,".ReplaceAll(""$SharedLib"",""\""$SharedLib\"""");; 3702 cmd.ReplaceAll(""$SharedLib"",library);; 3703 if (linkDepLibraries) {; 3704 if (produceRootmap) {; 3705 cmd.ReplaceAll(""$DepLibs"",depLibraries);; 3706 } else {; 3707 cmd.ReplaceAll(""$DepLibs"",linkLibraries);; 3708 }; 3709 }; 3710 cmd.ReplaceAll(""$LinkedLibs"",linkLibraries);; 3711 cmd.ReplaceAll(""$LibName"",libname);; 3712 cmd.ReplaceAll(""\""$BuildDir"",""$BuildDir"");; 3713 cmd.ReplaceAll(""$BuildDir"",""\""$BuildDir\"""");; 3714 cmd.ReplaceAll(""$BuildDir"",build_loc);; 3715 TString optdebFlags;; 3716 if (mode & kDebug); 3717 optdebFlags = fFlagsDebug + "" "";; 3718 if (mode & kOpt); 3719 optdebFlags += fFlagsOpt;; 3720 cmd.ReplaceAll(""$Opt"", optdebFlags);; 3721#ifdef WIN32; 3722 R__FixLink(cmd);; 3723 cmd.ReplaceAll(""-std="", ""-std:"");; 3724#endif; 3725 ; 3726 TString testcmd = fMakeExe;; 3727 TString fakeMain;; 3728 AssignAndDelete( fakeMain, ConcatFileName( build_loc, libname ) );; 3729 fakeMain += ""_ACLiC_main"";; 3730 fakeMain += extension;; 3731 std::ofstream fakeMainFile( fakeMain, std::ios::out );; 3732 fakeMainFile << ""// File Automatically generated by the ROOT Script Compiler ""; 3733 << std::endl;; 3734 fakeMainFile << ""int main(char*argc,char**argvv) {};"" << std::endl;; 3735 fakeMainFile.close();; 3736 // We could append this fake main routine to the compilation line.; 3737 // But in this case compiler may output the name of the dictionary file; 3738 // and of the fakeMain file while it compiles it. (this would be useless; 3739 // confusing output).; 3740 // We could also the fake main routine to the end of the dictionary file; 3741 // however compilation would fail if a main is already there; 3742 // (like stress.cxx); 3743 // dict.Append("" "").Append(fakeMain);; 3744 TString exec;; 3745 AssignAndDelete( exec, ConcatFileName( build_loc, libname ) );; 3746 exec += ""_ACLiC_exec"";; 3747 testcmd.ReplaceAll(""$SourceFiles"",""-D__ACLIC__ \""$SourceFiles\"""");; 3748 testcmd.ReplaceAll(""$SourceFiles"",dict);; 3749 testcmd.ReplaceAll(""$O",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:126140,test,testcmd,126140,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['test'],['testcmd']
Testability,".cxx. ◆ SearchHighRes(). Int_t TSpectrum3::SearchHighRes ; (; const Double_t *** ; source, . Double_t *** ; dest, . Int_t ; ssizex, . Int_t ; ssizey, . Int_t ; ssizez, . Double_t ; sigma, . Double_t ; threshold, . Bool_t ; backgroundRemove, . Int_t ; deconIterations, . Bool_t ; markov, . Int_t ; averWindow . ). This function searches for peaks in source spectrum It is based on deconvolution method. ; First the background is removed (if desired), then Markov spectrum is calculated (if desired), then the response function is generated according to given sigma and deconvolution is carried out. It returns number of found peaks.; Function parameters:; source-pointer to the matrix of source spectrum; dest-pointer to the matrix of resulting deconvolved spectrum; ssizex-x length of source spectrum; ssizey-y length of source spectrum; ssizez-z length of source spectrum; sigma-sigma of searched peaks, for details we refer to manual; threshold-threshold value in % for selected peaks, peaks with amplitude less than threshold*highest_peak/100 are ignored, see manual; backgroundRemove-logical variable, set if the removal of background before deconvolution is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum is replaced by new spectrum calculated using Markov chains method.; averWindow-averaging window of searched peaks, for details we refer to manual (applies only for Markov method). Peaks searching; Goal: to identify automatically the peaks in spectrum with the presence of the continuous background, one- and two-fold coincidences (ridges) and statistical fluctuations - noise.; The common problems connected with correct peak identification in three-dimensional coincidence spectra are. non-sensitivity to noise, i.e., only statistically relevant peaks should be identified; non-sensitivity of the algorithm to continuous background; non-sensitivity to one-fold coincidences (coincidences peak - p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum3.html:35617,log,logical,35617,doc/master/classTSpectrum3.html,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html,2,['log'],['logical']
Testability,".cxx:2281; TF1::Browsevoid Browse(TBrowser *b) overrideBrowse.Definition TF1.cxx:993; TF1::GetParNamevirtual const char * GetParName(Int_t ipar) constDefinition TF1.h:557; TF1::~TF1~TF1() overrideTF1 default destructor.Definition TF1.cxx:953; TF1::fgCurrentstatic TF1 * fgCurrentDefinition TF1.h:327; TF1::EvalParvirtual Double_t EvalPar(const Double_t *x, const Double_t *params=nullptr)Evaluate function with given coordinates and parameters.Definition TF1.cxx:1468; TF1::fNpxInt_t fNpxNumber of points used for the graphical representation.Definition TF1.h:267; TF1::SetParLimitsvirtual void SetParLimits(Int_t ipar, Double_t parmin, Double_t parmax)Set lower and upper limits for parameter ipar.Definition TF1.cxx:3507; TF1::DoInitializevoid DoInitialize(EAddToList addToGlobList)Common initialization of the TF1.Definition TF1.cxx:802; TF1::GetXvirtual Double_t GetX(Double_t y, Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constReturns the X value corresponding to the function value fy for (xmin<x<xmax).Definition TF1.cxx:1863; TF1::GetCurrentstatic TF1 * GetCurrent()Static function returning the current function being processed.Definition TF1.cxx:1569; TF1::SetParNamevirtual void SetParName(Int_t ipar, const char *name)Set name of parameter number ipar.Definition TF1.cxx:3450; TF1::GetObjectInfochar * GetObjectInfo(Int_t px, Int_t py) const overrideRedefines TObject::GetObjectInfo.Definition TF1.cxx:1918; TF1::ExecuteEventvoid ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideExecute action corresponding to one event.Definition TF1.cxx:1536; TF1::GetSavevirtual Double_t GetSave(const Double_t *x)Get value corresponding to X in array of fSave values.Definition TF1.cxx:2344; TF1::fgAbsValuestatic std::atomic< Bool_t > fgAbsValueDefinition TF1.h:324; TF1::TF1TF1()TF1 default constructor.Definition TF1.cxx:489; TF1::DrawCopyvirtual TF1 * DrawCopy(Option_t *option="""") constDraw a copy of this function with its current attr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:185913,log,logx,185913,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['log'],['logx']
Testability,".cxx:242; TFumili::fGrDouble_t * fGr[fMaxParam] Gradients of objective functionDefinition TFumili.h:38; TFumili::fGTDouble_t fGTExpected function change in next iteration.Definition TFumili.h:61; TFumili::SetParameterInt_t SetParameter(Int_t ipar, const char *parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh) overrideSets for parameter number ipar initial parameter value, name parname, initial error verr and limits v...Definition TFumili.cxx:1641; TFumili::fCwordTString fCwordCommand string.Definition TFumili.h:63; TFumili::FitLikelihoodIvirtual void FitLikelihoodI(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag)Minimization function for H1s using a Likelihood method.Definition TFumili.cxx:1972; TFumili::fRPDouble_t fRPPrecision of fit ( machine zero on CDC 6000) quite old yeh?Definition TFumili.h:59; TFumili::fCmParDouble_t * fCmPar[fMaxParam] parameters of commandsDefinition TFumili.h:55; TFumili::fDFDouble_t * fDF[fMaxParam] First derivatives of theoretical functionDefinition TFumili.h:54; TFumili::GetSumLogDouble_t GetSumLog(Int_t) overrideReturn Sum(log(i) i=0,n used by log-likelihood fits.Definition TFumili.cxx:921; TFumili::fSumLogDouble_t * fSumLog[fNlog]Definition TFumili.h:40; TFumili::fAMXDouble_t * fAMX[fMaxParam] Maximum param valueDefinition TFumili.h:50; TFumili::fDEBUGBool_t fDEBUGdebug infoDefinition TFumili.h:30; TFumili::fNlimMulInt_t fNlimMulfNlimMul - after fNlimMul successful iterations permits four-fold increasing of fPLDefinition TFumili.h:21; TFumili::fGRADBool_t fGRADuser calculated gradientsDefinition TFumili.h:28; TFumili::InvertZvoid InvertZ(Int_t)Inverts packed diagonal matrix Z by square-root method.Definition TFumili.cxx:945; TStringBasic string class.Definition TString.h:139; TVirtualFitterAbstract Base Class for Fitting.Definition TVirtualFitter.h:29; bool; double; int. mathfumiliincTFumili.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8h_source.html:14732,log,log,14732,doc/master/TFumili_8h_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8h_source.html,2,['log'],"['log', 'log-likelihood']"
Testability,".cxx:284; TSystem::LoadAllLibrariesvirtual UInt_t LoadAllLibraries()Load all libraries known to ROOT via the rootmap system.Definition TSystem.cxx:1970; TSystem::GetDirPtrvirtual void * GetDirPtr() constDefinition TSystem.h:416; TSystem::SetObjExtvirtual void SetObjExt(const char *objExt)Set object files extension, should be either .o, .obj, etc.Definition TSystem.cxx:4244; TSystem::SetLinkdefSuffixvirtual void SetLinkdefSuffix(const char *suffix)The 'suffix' will be appended to the name of a script loaded by ACLiC and used to locate any eventual...Definition TSystem.cxx:4227; TSystem::fHelpersTSeqCollection * fHelpersDefinition TSystem.h:321; TSystem::ExpandPathNamevirtual Bool_t ExpandPathName(TString &path)Expand a pathname getting rid of special shell characters like ~.Definition TSystem.cxx:1274; TSystem::GetBuildDirvirtual const char * GetBuildDir() constReturn the path of the build directory.Definition TSystem.cxx:3915; TSystem::Openlogvirtual void Openlog(const char *name, Int_t options, ELogFacility facility)Open connection to system log daemon.Definition TSystem.cxx:1677; TSystem::GetErrnostatic Int_t GetErrno()Static function returning system error number.Definition TSystem.cxx:276; TSystem::AddIncludePathvirtual void AddIncludePath(const char *includePath)Add a directory to the already set include path.Definition TSystem.cxx:4159; TSystem::Chmodvirtual int Chmod(const char *file, UInt_t mode)Set the file permission bits. Returns -1 in case or error, 0 otherwise.Definition TSystem.cxx:1508; TSystem::GetEffectiveGidvirtual Int_t GetEffectiveGid()Returns the effective group id.Definition TSystem.cxx:1591; TSystem::EAclicModeEAclicModeDefinition TSystem.h:269; TSystem::kDefault@ kDefaultDefinition TSystem.h:269; TSystem::kDebug@ kDebugDefinition TSystem.h:269; TSystem::kOpt@ kOptDefinition TSystem.h:269; TSystem::~TSystemvirtual ~TSystem()Delete the OS interface.Definition TSystem.cxx:139; TSystem::SetDisplayvirtual void SetDisplay()Set DISPLAY environment va",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:173548,log,log,173548,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['log'],['log']
Testability,".cxx:3542; TPad::PixeltoXYvirtual void PixeltoXY(Int_t xpixel, Int_t ypixel, Double_t &x, Double_t &y)Convert pixel to X/Y coordinates.Definition TPad.cxx:7406; TPad::DrawCrosshairvirtual void DrawCrosshair()Function called to draw a crosshair in the canvas.Definition TPad.cxx:1605; TPad::YtoPadDouble_t YtoPad(Double_t y) const overrideConvert y from Y to pad.Definition TPad.cxx:3572; TPad::RangeChangedvirtual void RangeChanged()Definition TPad.h:316; TPad::fUyminDouble_t fUyminMinimum value on the Y axis.Definition TPad.h:75; TPad::SetPadvoid SetPad(const char *name, const char *title, Double_t xlow, Double_t ylow, Double_t xup, Double_t yup, Color_t color=35, Short_t bordersize=5, Short_t bordermode=-1) overrideSet all pad parameters.Definition TPad.cxx:6171; TPad::SetCursorvoid SetCursor(ECursor cursor) overrideSet cursor type.Definition TPad.cxx:2911; TPad::GetCanvasIDInt_t GetCanvasID() const overrideGet canvas identifier.Definition TPad.cxx:2738; TPad::fLogzInt_t fLogz(=0 if Z linear scale, =1 if log scale)Definition TPad.h:93; TPad::fYtoPixelkDouble_t fYtoPixelkConversion coefficient for Y World to pixel.Definition TPad.h:45; TPad::UpdateAsyncvoid UpdateAsync() overrideAsynchronous pad update.Definition TPad.cxx:2947; TPad::TPadTPad()Pad default constructor.Definition TPad.cxx:132; TPad::AbsPixeltoXDouble_t AbsPixeltoX(Int_t px) overrideDefinition TPad.h:168; TPad::UseCurrentStylevoid UseCurrentStyle() overrideForce a copy of current style for all objects in pad.Definition TPad.cxx:6927; TPad::GetMaxPickDistancestatic Int_t GetMaxPickDistance()Static function (see also TPad::SetMaxPickDistance)Definition TPad.cxx:2794; TPad::VtoAbsPixelInt_t VtoAbsPixel(Double_t v) const overrideConvert Y NDC to absolute pixel.Definition TPad.cxx:7467; TPad::Rangevoid Range(Double_t x1, Double_t y1, Double_t x2, Double_t y2) overrideSet world coordinate system for the pad.Definition TPad.cxx:5331; TPad::fUtoPixelkDouble_t fUtoPixelkConversion coefficient for U NDC to pixel.Def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:298964,log,log,298964,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['log'],['log']
Testability,.cxx;  MersenneTwisterEngine.cxx;  MinimizerOptions.cxx;  MinimizerVariableTransformation.cxx;  MinimTransformFunction.cxx;  mixmax.h;  mixmax.icc;  mixmax_skip_N17.icc;  mixmax_skip_N240.icc;  mixmax_skip_N256.icc;  mixmax_skip_N256.oldS.icc;  MixMaxEngineImpl.h;  MixMaxEngineImpl17.cxx;  MixMaxEngineImpl240.cxx;  MixMaxEngineImpl256.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testKahan.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:44872,test,testRooFit,44872,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['testRooFit']
Testability,.cxx;  MersenneTwisterEngine.cxx;  MinimizerOptions.cxx;  MinimizerVariableTransformation.cxx;  MinimTransformFunction.cxx;  mixmax.h;  mixmax.icc;  mixmax_skip_N17.icc;  mixmax_skip_N240.icc;  mixmax_skip_N256.icc;  mixmax_skip_N256.oldS.icc;  MixMaxEngineImpl.h;  MixMaxEngineImpl17.cxx;  MixMaxEngineImpl240.cxx;  MixMaxEngineImpl256.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationT,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:46298,test,testRooFit,46298,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['test'],['testRooFit']
Testability,.cxx;  MixMaxEngineImpl256.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testKahan.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h;  Polynomial.h;  QuantFuncMathMore.h;  QuasiRandom.h;  RootFin,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:45178,test,testkdTreeBinning,45178,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['testkdTreeBinning']
Testability,.cxx;  MnUserTransformation.cxx;  mnvert.cxx;  mnxerbla.cxx;  ModularFunctionMinimizer.cxx;  MPIProcess.cxx;  NegativeG2LineSearch.cxx;  Numerical2PGradientCalculator.cxx;  ParametricFunction.cxx;  ScanBuilder.cxx;  SimplexBuilder.cxx;  SimplexParameters.cxx;  SimplexSeedGenerator.cxx;  SinParameterTransformation.cxx;  SqrtLowParameterTransformation.cxx;  SqrtUpParameterTransformation.cxx;  TMinuit2TraceObject.cxx;  VariableMetricBuilder.cxx;  VariableMetricEDMEstimator.cxx;  ► test;  ► MnSim;  DemoFumili.cxx;  DemoGaussSim.cxx;  demoMinimizer.cxx;  FlatRandomGen.h;  GaussDataGen.cxx;  GaussDataGen.h;  GaussFcn.cxx;  GaussFcn.h;  GaussFcn2.cxx;  GaussFcn2.h;  GaussFunction.h;  GaussianModelFunction.h;  GaussRandomGen.h;  ParallelTest.cxx;  PaulTest.cxx;  PaulTest2.cxx;  PaulTest3.cxx;  PaulTest4.cxx;  ReneTest.cxx;  ► MnTutorial;  Quad12F.h;  Quad12FMain.cxx;  Quad1F.h;  Quad1FMain.cxx;  Quad4F.h;  Quad4FMain.cxx;  Quad8F.h;  Quad8FMain.cxx;  testMinimizer.cxx;  testNdimFit.cxx;  testUnbinGausFit.cxx;  testUserFunc.cxx;  ► mlp;  ► inc;  LinkDef.h;  TMLPAnalyzer.h;  TMultiLayerPerceptron.h;  TNeuron.h;  TSynapse.h;  ► src;  TMLPAnalyzer.cxx;  TMultiLayerPerceptron.cxx;  TNeuron.cxx;  TSynapse.cxx;  ► physics;  ► inc;  LinkDef.h;  TFeldmanCousins.h;  TGenPhaseSpace.h;  TLorentzRotation.h;  TLorentzVector.h;  TQuaternion.h;  TRobustEstimator.h;  TRolke.h;  TRotation.h;  TVector2.h;  TVector3.h;  ► src;  TFeldmanCousins.cxx;  TGenPhaseSpace.cxx;  TLorentzRotation.cxx;  TLorentzVector.cxx;  TQuaternion.cxx;  TRobustEstimator.cxx;  TRolke.cxx;  TRotation.cxx;  TVector2.cxx;  TVector3.cxx;  ► quadp;  ► inc;  LinkDef.h;  TGondzioSolver.h;  TMehrotraSolver.h;  TQpDataBase.h;  TQpDataDens.h;  TQpDataSparse.h;  TQpLinSolverBase.h;  TQpLinSolverDens.h;  TQpLinSolverSparse.h;  TQpProbBase.h;  TQpProbDens.h;  TQpProbSparse.h;  TQpResidual.h;  TQpSolverBase.h;  TQpVar.h;  ► src;  TGondzioSolver.cxx;  TMehrotraSolver.cxx;  TQpDataBase.cxx;  TQpDataDens.cxx;  TQpDataSparse.cxx;  TQpL,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:55354,test,testUnbinGausFit,55354,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,2,['test'],['testUnbinGausFit']
Testability,.cxx;  MnUserTransformation.cxx;  mnvert.cxx;  mnxerbla.cxx;  ModularFunctionMinimizer.cxx;  MPIProcess.cxx;  NegativeG2LineSearch.cxx;  Numerical2PGradientCalculator.cxx;  ParametricFunction.cxx;  ScanBuilder.cxx;  SimplexBuilder.cxx;  SimplexParameters.cxx;  SimplexSeedGenerator.cxx;  SinParameterTransformation.cxx;  SqrtLowParameterTransformation.cxx;  SqrtUpParameterTransformation.cxx;  TMinuit2TraceObject.cxx;  VariableMetricBuilder.cxx;  VariableMetricEDMEstimator.cxx;  ► test;  ► MnSim;  DemoFumili.cxx;  DemoGaussSim.cxx;  demoMinimizer.cxx;  FlatRandomGen.h;  GaussDataGen.cxx;  GaussDataGen.h;  GaussFcn.cxx;  GaussFcn.h;  GaussFcn2.cxx;  GaussFcn2.h;  GaussFunction.h;  GaussianModelFunction.h;  GaussRandomGen.h;  ParallelTest.cxx;  PaulTest.cxx;  PaulTest2.cxx;  PaulTest3.cxx;  PaulTest4.cxx;  ReneTest.cxx;  ► MnTutorial;  Quad12F.h;  Quad12FMain.cxx;  Quad1F.h;  Quad1FMain.cxx;  Quad4F.h;  Quad4FMain.cxx;  Quad8F.h;  Quad8FMain.cxx;  testMinimizer.cxx;  testNdimFit.cxx;  testUnbinGausFit.cxx;  testUserFunc.cxx;  ► mlp;  ► inc;  TMLPAnalyzer.h;  TMultiLayerPerceptron.h;  TNeuron.h;  TSynapse.h;  ► src;  TMLPAnalyzer.cxx;  TMultiLayerPerceptron.cxx;  TNeuron.cxx;  TSynapse.cxx;  ► physics;  ► inc;  TFeldmanCousins.h;  TGenPhaseSpace.h;  TLorentzRotation.h;  TLorentzVector.h;  TQuaternion.h;  TRobustEstimator.h;  TRolke.h;  TRotation.h;  TVector2.h;  TVector3.h;  ► src;  TFeldmanCousins.cxx;  TGenPhaseSpace.cxx;  TLorentzRotation.cxx;  TLorentzVector.cxx;  TQuaternion.cxx;  TRobustEstimator.cxx;  TRolke.cxx;  TRotation.cxx;  TVector2.cxx;  TVector3.cxx;  ► quadp;  ► inc;  TGondzioSolver.h;  TMehrotraSolver.h;  TQpDataBase.h;  TQpDataDens.h;  TQpDataSparse.h;  TQpLinSolverBase.h;  TQpLinSolverDens.h;  TQpLinSolverSparse.h;  TQpProbBase.h;  TQpProbDens.h;  TQpProbSparse.h;  TQpResidual.h;  TQpSolverBase.h;  TQpVar.h;  ► src;  TGondzioSolver.cxx;  TMehrotraSolver.cxx;  TQpDataBase.cxx;  TQpDataDens.cxx;  TQpDataSparse.cxx;  TQpLinSolverBase.cxx;  TQpLinSolverDens.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:53896,test,testUnbinGausFit,53896,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['testUnbinGausFit']
Testability,.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h;  Polynomial.h;  QuantFuncMathMore.h;  QuasiRandom.h;  RootFinderAlgorithms.h;  SpecFuncMathMore.h;  Vavilov.h;  VavilovAccurate.h;  VavilovAccurateCdf.h;  Vavilo,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:46700,test,testSpecFuncBeta,46700,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['test'],['testSpecFuncBeta']
Testability,.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h;  Polynomial.h;  QuantFuncMathMore.h;  QuasiRandom.h;  RootFinderAlgorithms.h;  SpecFuncMathMore.h;  Vavilov.h;  VavilovAccurate.h;  VavilovAccurateCdf.h;  VavilovAccuratePdf.h;  Vavilo,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:46723,test,testSpecFuncBetaI,46723,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['test'],['testSpecFuncBetaI']
Testability,.cxx;  RuleCut.cxx;  RuleEnsemble.cxx;  RuleFit.cxx;  RuleFitAPI.cxx;  RuleFitParams.cxx;  SdivSqrtSplusB.cxx;  SeparationBase.cxx;  SimulatedAnnealing.cxx;  SimulatedAnnealingFitter.cxx;  SVEvent.cxx;  SVKernelFunction.cxx;  SVKernelMatrix.cxx;  SVWorkingSet.cxx;  TActivation.cxx;  TActivationChooser.cxx;  TActivationIdentity.cxx;  TActivationRadial.cxx;  TActivationReLU.cxx;  TActivationSigmoid.cxx;  TActivationTanh.cxx;  Timer.cxx;  TNeuron.cxx;  TNeuronInput.cxx;  TNeuronInputAbs.cxx;  TNeuronInputChooser.cxx;  TNeuronInputSqSum.cxx;  TNeuronInputSum.cxx;  Tools.cxx;  TransformationHandler.cxx;  TSpline1.cxx;  TSpline2.cxx;  TSynapse.cxx;  Types.cxx;  VariableDecorrTransform.cxx;  VariableGaussTransform.cxx;  VariableIdentityTransform.cxx;  VariableImportance.cxx;  VariableInfo.cxx;  VariableNormalizeTransform.cxx;  VariablePCATransform.cxx;  VariableRearrangeTransform.cxx;  VariableTransform.cxx;  VariableTransformBase.cxx;  VarTransformHandler.cxx;  Volume.cxx;  ► test;  ► DNN;  TestActivationFunctions.cxx;  TestActivationFunctions.h;  TestActivationFunctionsCpu.cxx;  TestActivationFunctionsCuda.cxx;  TestBackpropagation.cxx;  TestBackpropagation.h;  TestBackpropagationCpu.cxx;  TestBackpropagationCuda.cxx;  TestCuda.cxx;  TestDataLoader.cxx;  TestDataLoader.h;  TestDataLoaderCpu.cxx;  TestDataLoaderCuda.cxx;  TestDerivatives.cxx;  TestDerivatives.h;  TestDerivativesCpu.cxx;  TestDerivativesCuda.cxx;  TestLossFunctions.cxx;  TestLossFunctions.h;  TestLossFunctionsCpu.cxx;  TestLossFunctionsCuda.cxx;  TestMatrixArithmetic.h;  TestMatrixArithmeticCpu.cxx;  TestMatrixArithmeticCuda.cxx;  TestMinimization.cxx;  TestMinimization.h;  TestMinimizationCpu.cxx;  TestMinimizationCuda.cxx;  Utility.h;  ► tmvagui;  ► inc;  ► TMVA;  annconvergencetest.h;  BDT.h;  BDT_Reg.h;  BDTControlPlots.h;  BoostControlPlots.h;  compareanapp.h;  correlations.h;  correlationscatters.h;  correlationscattersMultiClass.h;  correlationsMultiClass.h;  CorrGui.h;  CorrGuiMultiClass.h;  deviati,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:94214,test,test,94214,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,2,['test'],['test']
Testability,.cxx;  TQpProbSparse.cxx;  TQpResidual.cxx;  TQpSolverBase.cxx;  TQpVar.cxx;  ► rtools;  ► inc;  ► Math;  RMinimizer.h;  LinkDef.h;  ► src;  RMinimizer.cxx;  ► smatrix;  ► inc;  ► Math;  BinaryOperators.h;  BinaryOpPolicy.h;  CholeskyDecomp.hHeader file containing the templated implementation of matrix inversion routines for use with ROOT's SMatrix classes (symmetric positive definite case) ;  CramerInversion.icc;  CramerInversionSym.icc;  Dfact.h;  Dfactir.h;  Dfinv.h;  Dinv.h;  Dsfact.h;  Dsinv.h;  Expression.h;  Functions.h;  HelperOps.h;  MatrixFunctions.h;  MatrixInversion.icc;  MatrixRepresentationsStatic.h;  MConfig.h;  SMatrix.h;  SMatrix.icc;  SMatrixDfwd.h;  SMatrixFfwd.h;  StaticCheck.h;  SVector.h;  SVector.icc;  UnaryOperators.h;  LinkDef.h;  LinkDefAll.h;  LinkDefD32.h;  ► src;  Dict.h;  ► test;  kalman.C;  matrix_op.h;  matrix_util.h;  matrixOperations.C;  stressKalman.cxx;  stressOperations.cxx;  testInversion.cxx;  testIO.cxx;  testKalman.cxx;  testOperations.cxx;  testSMatrix.cxx;  TestTimer.h;  Track.h;  TrackLinkDef.h;  ► splot;  ► inc;  LinkDef.h;  TSPlot.h;  ► src;  TSPlot.cxx;  ► unuran;  ► inc;  LinkDef.h;  TUnuran.h;  TUnuranBaseDist.h;  TUnuranContDist.h;  TUnuranDiscrDist.h;  TUnuranEmpDist.h;  TUnuranMultiContDist.h;  TUnuranSampler.h;  ► src;  TUnuran.cxx;  TUnuranContDist.cxx;  TUnuranDiscrDist.cxx;  TUnuranEmpDist.cxx;  TUnuranMultiContDist.cxx;  TUnuranSampler.cxx;  UnuranDistr.h;  UnuranDistrAdapter.h;  UnuranRng.h;  ► test;  unuranDiscrete.cxx;  unuranDistr.cxx;  unuranHist.cxx;  unuranMulti2D.cxx;  unuranMultiDim.cxx;  unuranSimple.cxx;  ► vc;  ► examples;  ► buddhabrot;  main.cpp;  main.h;  ► finitediff;  main.cpp;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  testFitPerf.cxx;  ► genvector;  vectorOperation.cxx;  ► mandelbrot;  main.cpp;  main.h;  mandel.cpp;  mandel.h;  ► matrix;  main.cpp;  ► polarcoord;  main.cpp;  ► smatrix;  matrix_op_vec.h;  matrix_util.h;  testKalman.cxx;  testOperations.cxx;  TestTimer.h;  tsc.h;  ► includ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:57085,test,testSMatrix,57085,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,1,['test'],['testSMatrix']
Testability,.cxx;  TQpProbSparse.cxx;  TQpResidual.cxx;  TQpSolverBase.cxx;  TQpVar.cxx;  ► rtools;  ► inc;  ► Math;  RMinimizer.h;  LinkDef.h;  ► src;  RMinimizer.cxx;  ► smatrix;  ► inc;  ► Math;  BinaryOperators.h;  BinaryOpPolicy.h;  CholeskyDecomp.hHeader file containing the templated implementation of matrix inversion routines for use with ROOT's SMatrix classes (symmetric positive definite case) ;  CramerInversion.icc;  CramerInversionSym.icc;  Dfact.h;  Dfactir.h;  Dfinv.h;  Dinv.h;  Dsfact.h;  Dsinv.h;  Expression.h;  Functions.h;  HelperOps.h;  MatrixFunctions.h;  MatrixInversion.icc;  MatrixRepresentationsStatic.h;  MConfig.h;  SMatrix.h;  SMatrix.icc;  SMatrixDfwd.h;  SMatrixFfwd.h;  StaticCheck.h;  SVector.h;  SVector.icc;  UnaryOperators.h;  LinkDef.h;  LinkDefAll.h;  LinkDefD32.h;  ► src;  Dict.h;  ► test;  kalman.C;  matrix_op.h;  matrix_util.h;  matrixOperations.C;  stressKalman.cxx;  stressOperations.cxx;  testInversion.cxx;  testIO.cxx;  testKalman.cxx;  testOperations.cxx;  testSMatrix.cxx;  TestTimer.h;  Track.h;  TrackLinkDef.h;  ► splot;  ► inc;  LinkDef.h;  TSPlot.h;  ► src;  TSPlot.cxx;  ► unuran;  ► inc;  LinkDef.h;  TUnuran.h;  TUnuranBaseDist.h;  TUnuranContDist.h;  TUnuranDiscrDist.h;  TUnuranEmpDist.h;  TUnuranMultiContDist.h;  TUnuranSampler.h;  ► src;  TUnuran.cxx;  TUnuranContDist.cxx;  TUnuranDiscrDist.cxx;  TUnuranEmpDist.cxx;  TUnuranMultiContDist.cxx;  TUnuranSampler.cxx;  UnuranDistr.h;  UnuranDistrAdapter.h;  UnuranRng.h;  ► test;  unuranDiscrete.cxx;  unuranDistr.cxx;  unuranHist.cxx;  unuranMulti2D.cxx;  unuranMultiDim.cxx;  unuranSimple.cxx;  ► vdt;  ► include;  ► vdt;  asin.h;  atan.h;  atan2.h;  cos.h;  exp.h;  inv.h;  log.h;  sin.h;  sincos.h;  sqrt.h;  tan.h;  vdtcore_common.h;  vdtMath.h;  ► tests;  stressVdt.cxx;  ► misc;  ► memstat;  ► inc;  LinkDef.h;  TMemStat.h;  TMemStatBacktrace.h;  TMemStatDef.h;  TMemStatHelpers.h;  TMemStatHook.h;  TMemStatMng.h;  ► src;  TMemStat.cxx;  TMemStatBacktrace.cxx;  TMemStatHelpers.cxx;  TMemSt,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:57453,test,testSMatrix,57453,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['test'],['testSMatrix']
Testability,".d.f.s. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integration defined by given code. RooPlot* plotOn(RooPlot* frame, RooLinkedList& cmdList) const; Back-end for plotOn() implementation on RooSimultaneous which; needs special handling because a RooSimultaneous PDF cannot; project out its index category via integration, plotOn() will; abort if this is requested without providing a projection dataset. RooPlot* plotOn(RooPlot* frame, Option_t* drawOptions, Double_t scaleFactor = 1., RooAbsReal::ScaleType stype = Relative, const RooAbsData* projData = 0, const RooArgSet* projSet = 0, Double_t precision = 0.001, Bool_t shiftToZero = kFALSE, const RooArgSet* projDataSet = 0, Double_t rangeLo = 0, Double_t rangeHi = 0, RooCurve::WingMode wmode = RooCurve::Extended) const; OBSOLETE -- Retained for backward compatibility. void selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of observables; for interpretation of fraction coefficients. Needed here because a RooSimultaneous; works like a RooAddPdf when plotted. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of range; for interpretation of fraction coefficients. Needed here because a RooSimultaneous; works like a RooAddPdf when plotted. RooAbsGenContext* autoGenContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE, Bool_t autoBinned = kTRUE, const char* binnedTag = """") const. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return specialized generator contenxt for simultaneous p.d.f.s. RooDataHist* fillDataHist(RooDataHist* hist, const RooArgSet* nset, Double_t scaleFactor, Bool_t correctForBinVolume = kFALSE, Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooSimultaneous.html:49792,test,test,49792,root/html602/RooSimultaneous.html,https://root.cern,https://root.cern/root/html602/RooSimultaneous.html,2,['test'],['test']
Testability,".d.f.s. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integration defined by given code. RooPlot* plotOn(RooPlot* frame, RooLinkedList& cmdList) const; Back-end for plotOn() implementation on RooSimultaneous which; needs special handling because a RooSimultaneous PDF cannot; project out its index category via integration, plotOn() will; abort if this is requested without providing a projection dataset. RooPlot* plotOn(RooPlot* frame, Option_t* drawOptions, Double_t scaleFactor = 1.0, RooAbsReal::ScaleType stype = Relative, const RooAbsData* projData = 0, const RooArgSet* projSet = 0, Double_t precision = 1e-3, Bool_t shiftToZero = kFALSE, const RooArgSet* projDataSet = 0, Double_t rangeLo = 0, Double_t rangeHi = 0, RooCurve::WingMode wmode = RooCurve::Extended) const; OBSOLETE -- Retained for backward compatibility. void selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of observables; for interpretation of fraction coefficients. Needed here because a RooSimultaneous; works like a RooAddPdf when plotted. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of range; for interpretation of fraction coefficients. Needed here because a RooSimultaneous; works like a RooAddPdf when plotted. RooAbsGenContext* autoGenContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE, Bool_t autoBinned = kTRUE, const char* binnedTag = """") const. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return specialized generator contenxt for simultaneous p.d.f.s. RooDataHist* fillDataHist(RooDataHist* hist, const RooArgSet* nset, Double_t scaleFactor, Bool_t correctForBinVolume = kFALSE, Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooSimultaneous.html:46643,test,test,46643,root/html532/RooSimultaneous.html,https://root.cern,https://root.cern/root/html532/RooSimultaneous.html,2,['test'],['test']
Testability,".d.f.s. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integration defined by given code. RooPlot* plotOn(RooPlot* frame, RooLinkedList& cmdList) const; Back-end for plotOn() implementation on RooSimultaneous which; needs special handling because a RooSimultaneous PDF cannot; project out its index category via integration, plotOn() will; abort if this is requested without providing a projection dataset. RooPlot* plotOn(RooPlot* frame, Option_t* drawOptions, Double_t scaleFactor = 1.0, RooAbsReal::ScaleType stype = Relative, const RooAbsData* projData = 0, const RooArgSet* projSet = 0, Double_t precision = 1e-3, Bool_t shiftToZero = kFALSE, const RooArgSet* projDataSet = 0, Double_t rangeLo = 0, Double_t rangeHi = 0, RooCurve::WingMode wmode = RooCurve::Extended) const; OBSOLETE -- Retained for backward compatibility. void selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of observables; for interpretation of fraction coefficients. Needed here because a RooSimultaneous; works like a RooAddPdf when plotted. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of range; for interpretation of fraction coefficients. Needed here because a RooSimultaneous; works like a RooAddPdf when plotted. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return specialized generator contenxt for simultaneous p.d.f.s. RooDataSet* generateSimGlobal(const RooArgSet& whatVars, Int_t nEvents); Special generator interface for generation of 'global observables' -- for RooStats tools. inline RooSimultaneous(); Constructors, assignment etc. { }. TObject* clone(const char* newname) const; { return new RooSimultaneous(*this,newname) ; }. Bool_t selfNormalized() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooSimultaneous.html:45403,test,test,45403,root/html530/RooSimultaneous.html,https://root.cern,https://root.cern/root/html530/RooSimultaneous.html,1,['test'],['test']
Testability,".d.f.s. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integration defined by given code. RooPlot* plotOn(RooPlot* frame, RooLinkedList& cmdList) const; Back-end for plotOn() implementation on RooSimultaneous which; needs special handling because a RooSimultaneous PDF cannot; project out its index category via integration, plotOn() will; abort if this is requested without providing a projection dataset. RooPlot* plotOn(RooPlot* frame, Option_t* drawOptions, Double_t scaleFactor = 1.0, RooAbsReal::ScaleType stype = Relative, const RooAbsData* projData = 0, const RooArgSet* projSet = 0, Double_t precision = 1e-3, Bool_t shiftToZero = kFALSE, const RooArgSet* projDataSet = 0, Double_t rangeLo = 0, Double_t rangeHi = 0, RooCurve::WingMode wmode = RooCurve::Extended) const; OBSOLETE -- Retained for backward compatibility. void selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of observables; for interpretation of fraction coefficients. Needed here because a RooSimultaneous; works like a RooAddPdf when plotted. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of range; for interpretation of fraction coefficients. Needed here because a RooSimultaneous; works like a RooAddPdf when plotted. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return specialized generator contenxt for simultaneous p.d.f.s. inline RooSimultaneous(); Constructors, assignment etc. { }. TObject* clone(const char* newname) const; { return new RooSimultaneous(*this,newname) ; }. Bool_t selfNormalized() const; { return kTRUE ; }. Double_t expectedEvents(const RooArgSet* nset) const. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; { return kTRUE ; }. RooPlot* p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooSimultaneous.html:45046,test,test,45046,root/html528/RooSimultaneous.html,https://root.cern,https://root.cern/root/html528/RooSimultaneous.html,1,['test'],['test']
Testability,".d.f.s. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integration defined by given code. RooPlot* plotOn(RooPlot* frame, RooLinkedList& cmdList) const; Back-end for plotOn() implementation on RooSimultaneous which; needs special handling because a RooSimultaneous PDF cannot; project out its index category via integration, plotOn() will; abort if this is requested without providing a projection dataset. RooPlot* plotOn(RooPlot* frame, Option_t* drawOptions, Double_t scaleFactor = 1.0, RooAbsReal::ScaleType stype = Relative, const RooAbsData* projData = 0, const RooArgSet* projSet = 0, Double_t precision = 1e-3, Bool_t shiftToZero = kFALSE, const RooArgSet* projDataSet = 0, Double_t rangeLo = 0, Double_t rangeHi = 0, RooCurve::WingMode wmode = RooCurve::Extended) const; OBSOLETE -- Retained for backward compatibility. void selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of observables; for interpretation of fraction coefficients. Needed here because a RooSimultaneous; works like a RooAddPdf when plotted. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of range; for interpretation of fraction coefficients. Needed here because a RooSimultaneous; works like a RooAddPdf when plotted. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return specialized generator contenxt for simultaneous p.d.f.s. inline RooSimultaneous(); Constructors, assignment etc. { }. TObject* clone(const char* newname) const; { return new RooSimultaneous(*this,newname) ; }. Bool_t selfNormalized() const; { return kTRUE ; }. Double_t expectedEvents(const RooArgSet* nset). Bool_t forceAnalyticalInt(const RooAbsArg& ) const; { return kTRUE ; }. RooPlot* plotOn(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSimultaneous.html:44386,test,test,44386,root/html526/RooSimultaneous.html,https://root.cern,https://root.cern/root/html526/RooSimultaneous.html,1,['test'],['test']
Testability,".def""; 4447 ROOT::TMetaUtils::Info(nullptr, ""==== END interpreter configuration ====\n\n"");; 4448 }; 4449 ; 4450 interp.getOptions().ErrorOut = true;; 4451 interp.enableRawInput(true);; 4452 ; 4453 if (gOptCxxModule) {; 4454 for (llvm::StringRef DepMod : gOptModuleDependencies) {; 4455 if (DepMod.endswith(""_rdict.pcm"")) {; 4456 ROOT::TMetaUtils::Warning(nullptr, ""'%s' value is deprecated. Please use [<fullpath>]%s.pcm\n"",; 4457 DepMod.data(),; 4458 GetModuleNameFromRdictName(DepMod).str().data());; 4459 }; 4460 DepMod = GetModuleNameFromRdictName(DepMod);; 4461 // We might deserialize.; 4462 cling::Interpreter::PushTransactionRAII RAII(&interp);; 4463 if (!interp.loadModule(DepMod.str(), /*complain*/false)) {; 4464 ROOT::TMetaUtils::Error(nullptr, ""Module '%s' failed to load.\n"",; 4465 DepMod.data());; 4466 }; 4467 }; 4468 }; 4469 ; 4470 if (!isGenreflex) { // rootcling; 4471 // ROOTCINT uses to define a few header implicitly, we need to do it explicitly.; 4472 if (interp.declare(""#include <assert.h>\n""; 4473 ""#include \""Rtypes.h\""\n""; 4474 ""#include \""TObject.h\"""") != cling::Interpreter::kSuccess; 4475 ) {; 4476 // There was an error.; 4477 ROOT::TMetaUtils::Error(nullptr, ""Error loading the default rootcling header files.\n"");; 4478 return 1;; 4479 }; 4480 }; 4481 ; 4482 if (interp.declare(""#include <string>\n"" // For the list of 'opaque' typedef to also include string.; 4483 ""#include <RtypesCore.h>\n"" // For initializing TNormalizedCtxt.; 4484 ""namespace std {} using namespace std;"") != cling::Interpreter::kSuccess) {; 4485 ROOT::TMetaUtils::Error(nullptr, ""Error loading the default header files.\n"");; 4486 return 1;; 4487 }; 4488 ; 4489 // We are now ready (enough is loaded) to init the list of opaque typedefs.; 4490 ROOT::TMetaUtils::TNormalizedCtxt normCtxt(interp.getLookupHelper());; 4491 ROOT::TMetaUtils::TClingLookupHelper helper(interp, normCtxt, nullptr, nullptr, nullptr);; 4492 TClassEdit::Init(&helper);; 4493 ; 4494 // flags used only for the pragma pa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:183560,assert,assert,183560,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['assert'],['assert']
Testability,".empty() && fDataErrorLowPtr );; 485 assert( fDataError.empty() && !fDataErrorPtr );; 486 assert( !fCoordErrors.empty() && fCoordErrors.size() == 1 );; 487 assert( !fCoordErrorsPtr.empty() && fCoordErrorsPtr.size() == 1 && fCoordErrorsPtr[0] );; 488 assert( &fCoordErrors[0].front() == fCoordErrorsPtr[0] );; 489 ; 490 fData[ fNPoints ] = y;; 491 fCoordErrors[0][ fNPoints ] = ex;; 492 fDataErrorHigh[ fNPoints ] = eyh;; 493 fDataErrorLow[ fNPoints ] = eyl;; 494 ; 495 FitData::Add( x );; 496 fSumContent += y;; 497 if (y != 0 || eyl != 1.0 || eyh != 1.0) fSumError2 += (eyl+eyh)*(eyl+eyh)/4;; 498 ; 499 }; 500 ; 501 /**; 502 add multi-dim coordinate data with only value; 503 */; 504 void BinData::Add( const double* x, double val ); 505 {; 506 assert( kNoError == fErrorType );; 507 ; 508 assert( !fData.empty() && fDataPtr );; 509 assert( fDataErrorHigh.empty() && !fDataErrorHighPtr );; 510 assert( fDataErrorLow.empty() && !fDataErrorLowPtr );; 511 assert( fDataError.empty() && !fDataErrorPtr );; 512 assert( fCoordErrors.empty() && fCoordErrorsPtr.empty() );; 513 ; 514 fData[ fNPoints ] = val;; 515 ; 516 FitData::Add( x );; 517 fSumContent += val;; 518 }; 519 ; 520 /**; 521 add multi-dim coordinate data with only error in value; 522 The class stores internally the inverse of the error in this case; 523 */; 524 void BinData::Add( const double* x, double val, double eval ); 525 {; 526 assert( kValueError == fErrorType );; 527 assert( !fData.empty() && fDataPtr );; 528 assert( fDataErrorHigh.empty() && !fDataErrorHighPtr );; 529 assert( fDataErrorLow.empty() && !fDataErrorLowPtr );; 530 assert( !fDataError.empty() && fDataErrorPtr );; 531 assert( fCoordErrors.empty() && fCoordErrorsPtr.empty() );; 532 ; 533 fData[ fNPoints ] = val;; 534 fDataError[ fNPoints ] = (eval != 0.0) ? 1.0/eval : 0.0;; 535 ; 536 FitData::Add( x );; 537 fSumContent += val;; 538 if (val != 0 || eval != 1.0) fSumError2 += eval*eval;; 539 if (!fIsWeighted); 540 if (val != 0 && std::abs( eval*eval/val - 1.0) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:15615,assert,assert,15615,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['assert'],['assert']
Testability,".end() );; 1437 testingEventVector->insert ( testingEventVector->end(), tmpEventVector[Types::kTesting].at(cls).begin(), tmpEventVector[Types::kTesting].at(cls).end() );; 1438 }; 1439 }; 1440 // delete the tmpEventVector (but not the events therein); 1441 tmpEventVector[Types::kTraining].clear();; 1442 tmpEventVector[Types::kTesting].clear();; 1443 ; 1444 tmpEventVector[Types::kMaxTreeType].clear();; 1445 ; 1446 if (mixMode == ""RANDOM"") {; 1447 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""shuffling events""<<Endl;; 1448 ; 1449 std::shuffle(trainingEventVector->begin(), trainingEventVector->end(), rndm);; 1450 std::shuffle(testingEventVector->begin(), testingEventVector->end(), rndm);; 1451 }; 1452 ; 1453 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""trainingEventVector "" << trainingEventVector->size() << Endl;; 1454 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""testingEventVector "" << testingEventVector->size() << Endl;; 1455 ; 1456 // create dataset; 1457 DataSet* ds = new DataSet(dsi);; 1458 ; 1459 // Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Create internal training tree"" << Endl;; 1460 ds->SetEventCollection(trainingEventVector, Types::kTraining );; 1461 // Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Create internal testing tree"" << Endl;; 1462 ds->SetEventCollection(testingEventVector, Types::kTesting );; 1463 ; 1464 ; 1465 if (ds->GetNTrainingEvents() < 1){; 1466 Log() << kFATAL << ""Dataset "" << std::string(dsi.GetName()) << "" does not have any training events, I better stop here and let you fix that one first "" << Endl;; 1467 }; 1468 ; 1469 if (ds->GetNTestEvents() < 1) {; 1470 Log() << kERROR << ""Dataset "" << std::string(dsi.GetName()) << "" does not have any testing events, guess that will cause problems later..but for now, I continue "" << Endl;; 1471 }; 1472 ; 1473 delete trainingEventVector;; 1474 delete testingEventVector;; 1475 return ds;; 1476 ; 1477}; 1478 ; 1479/////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:66195,test,testingEventVector,66195,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,2,['test'],['testingEventVector']
Testability,".fDataErrorLow;; 294 // both error low and high should be empty or not; 295 assert( fDataErrorLow.empty() == fDataErrorHigh.empty()) ;; 296 if (!fDataErrorHigh.empty() && !fDataErrorLow.empty()) {; 297 assert(kAsymError == fErrorType);; 298 fDataErrorHighPtr = &fDataErrorHigh.front();; 299 fDataErrorLowPtr = &fDataErrorLow.front();; 300 }; 301 }; 302 ; 303 fpTmpCoordErrorVector= new double[ fDim ];; 304 ; 305 if ( HasBinEdges() ); 306 fpTmpBinEdgeVector = new double[ fDim ];; 307 ; 308 return *this;; 309 }; 310 ; 311 ; 312 /**; 313 preallocate a data set with given size , dimension and error type (to get the full point size); 314 If the data set already exists and it is having the compatible point size space for the new points; 315 is created in the data sets, while if not compatible the old data are erased and new space of; 316 new size is allocated.; 317 (i.e if exists initialize is equivalent to a resize( NPoints() + maxpoints); 318 */; 319 ; 320 void BinData::Append( unsigned int newPoints, unsigned int dim , ErrorType err ); 321 {; 322 assert( !fWrapped );; 323 assert( fMaxPoints == 0 || fWrapped == fData.empty() );; 324 ; 325 assert( kValueError == fErrorType || kCoordError == fErrorType ||; 326 kAsymError == fErrorType || kNoError == fErrorType );; 327 assert( fMaxPoints == 0 || fDataError.empty() || &fDataError.front() == fDataErrorPtr );; 328 assert( fMaxPoints == 0 || fDataErrorHigh.empty() || &fDataErrorHigh.front() == fDataErrorHighPtr );; 329 assert( fMaxPoints == 0 || fDataErrorLow.empty() || &fDataErrorLow.front() == fDataErrorLowPtr );; 330 assert( fMaxPoints == 0 || fDataErrorLow.empty() == fDataErrorHigh.empty() );; 331 assert( fMaxPoints == 0 || fData.empty() || &fData.front() == fDataPtr );; 332 ; 333 FitData::Append( newPoints, dim );; 334 ; 335 fErrorType = err;; 336 ; 337 InitDataVector( );; 338 InitializeErrors( );; 339 }; 340 ; 341 ; 342 /**; 343 apply a Log transformation of the data values; 344 can be used for example when fitting an expon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:9349,assert,assert,9349,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,2,['assert'],['assert']
Testability,".h. ◆ Fit() [3/5]. bool ROOT::Fit::Fitter::Fit ; (; const std::shared_ptr< BinData > & ; data, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit a binned data set using a least square fit. ; Pass the input data using a shared_ptr for NOT copying the input data. ; Definition at line 165 of file Fitter.h. ◆ Fit() [4/5]. bool ROOT::Fit::Fitter::Fit ; (; const std::shared_ptr< UnBinData > & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit an un-binned data set using the negative log-likelihood method. ; This function uses a shared_ptr to avoid copying the input data. ; Definition at line 195 of file Fitter.h. ◆ Fit() [5/5]. bool ROOT::Fit::Fitter::Fit ; (; const UnBinData & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit an un-binned data set using the negative log-likelihood method. ; This function copies the input data. ; Definition at line 188 of file Fitter.h. ◆ FitFCN() [1/6]. bool ROOT::Fit::Fitter::FitFCN ; (; ). Perform a fit with the previously set FCN function. ; Require SetFCN before ; Definition at line 269 of file Fitter.cxx. ◆ FitFCN() [2/6]. bool ROOT::Fit::Fitter::FitFCN ; (; const ROOT::Math::FitMethodFunction & ; fcn, . const double * ; params = nullptr . ). Fit using a FitMethodFunction interface. ; Same as method above, but now extra information can be taken from the function class ; Definition at line 226 of file Fitter.cxx. ◆ FitFCN() [3/6]. bool ROOT::Fit::Fitter::FitFCN ; (; const ROOT::Math::FitMethodGradFunction & ; fcn, . const double * ; params = nullptr . ). Fit using a FitMethodGradFunction interface. ; Same as method above, but now extra information can be taken from the function class . ◆ FitFCN() [4/6]. bool ROOT::Fit::Fitter::FitFCN ; (; const ROOT::Math::IMultiGenFunction & ; fcn, . const double ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:23654,log,log-likelihood,23654,doc/master/classROOT_1_1Fit_1_1Fitter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html,1,['log'],['log-likelihood']
Testability,.h. ◆ GetEntries(). UInt_t TMVA::TreeInfo::GetEntries ; (; ); const. inline . Definition at line 63 of file DataInputHandler.h. ◆ GetTree(). TTree * TMVA::TreeInfo::GetTree ; (; ); const. inline . Definition at line 61 of file DataInputHandler.h. ◆ GetTreeType(). Types::ETreeType TMVA::TreeInfo::GetTreeType ; (; ); const. inline . Definition at line 64 of file DataInputHandler.h. ◆ GetWeight(). Double_t TMVA::TreeInfo::GetWeight ; (; ); const. inline . Definition at line 62 of file DataInputHandler.h. ◆ IsA(). virtual TClass * TMVA::TreeInfo::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 75 of file DataInputHandler.h. ◆ Streamer(). virtual void TMVA::TreeInfo::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMVA::TreeInfo::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 75 of file DataInputHandler.h. Member Data Documentation. ◆ fClassName. TString TMVA::TreeInfo::fClassName. private . name of the class the tree belongs to ; Definition at line 70 of file DataInputHandler.h. ◆ fOwner. Bool_t TMVA::TreeInfo::fOwner. private . true if created from file ; Definition at line 73 of file DataInputHandler.h. ◆ fTree. TTree* TMVA::TreeInfo::fTree. private . pointer to the tree ; Definition at line 69 of file DataInputHandler.h. ◆ fTreeType. Types::ETreeType TMVA::TreeInfo::fTreeType. private . tree is for training/testing/both ; Definition at line 72 of file DataInputHandler.h. ◆ fWeight. Double_t TMVA::TreeInfo::fWeight. private . weight for the tree ; Definition at line 71 of file DataInputHandler.h. Libraries for TMVA::TreeInfo:. [legend]; The documentation for this class was generated from the following file:; tmva/tmva/inc/TMVA/DataInputHandler.h. TMVATreeInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:44 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TreeInfo.html:13376,test,testing,13376,doc/master/classTMVA_1_1TreeInfo.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TreeInfo.html,1,['test'],['testing']
Testability,".h. ◆ NodeList. typedef std::set<const TGeoNode *> TGDMLWrite::NodeList. private . Definition at line 95 of file TGDMLWrite.h. ◆ SurfaceList. typedef std::set<const TGeoOpticalSurface *> TGDMLWrite::SurfaceList. private . Definition at line 93 of file TGDMLWrite.h. ◆ VolList. typedef std::set<const TGeoVolume *> TGDMLWrite::VolList. private . Definition at line 94 of file TGDMLWrite.h. Member Enumeration Documentation. ◆ ENamingType. enum TGDMLWrite::ENamingType. EnumeratorkelegantButSlow ; kwithoutSufixNotUniq ; kfastButUglySufix . Definition at line 80 of file TGDMLWrite.h. Constructor & Destructor Documentation. ◆ TGDMLWrite(). TGDMLWrite::TGDMLWrite ; (; ). Default constructor. ; Definition at line 205 of file TGDMLWrite.cxx. ◆ ~TGDMLWrite(). TGDMLWrite::~TGDMLWrite ; (; ). override . Destructor. ; Definition at line 235 of file TGDMLWrite.cxx. Member Function Documentation. ◆ CanProcess(). Bool_t TGDMLWrite::CanProcess ; (; TObject * ; pointer). private . Method which tests whether solids can be processed. ; Definition at line 2440 of file TGDMLWrite.cxx. ◆ ChooseObject(). XMLNodePointer_t TGDMLWrite::ChooseObject ; (; TGeoShape * ; geoShape). private . Chooses the object and method that should be used for processing object. ; Definition at line 2177 of file TGDMLWrite.cxx. ◆ CreateArb8N(). XMLNodePointer_t TGDMLWrite::CreateArb8N ; (; TGeoArb8 * ; geoShape). private . Creates ""arb8"" node for GDML. ; Definition at line 1088 of file TGDMLWrite.cxx. ◆ CreateAtomN(). XMLNodePointer_t TGDMLWrite::CreateAtomN ; (; Double_t ; atom, . const char * ; unit = ""g/mole"" . ). private . Creates ""atom"" node for GDML. ; Definition at line 771 of file TGDMLWrite.cxx. ◆ CreateBorderSurfaceN(). XMLNodePointer_t TGDMLWrite::CreateBorderSurfaceN ; (; TGeoBorderSurface * ; geoSurf). private . Creates ""bordersurface"" node for GDML. ; Definition at line 1973 of file TGDMLWrite.cxx. ◆ CreateBoxN(). XMLNodePointer_t TGDMLWrite::CreateBoxN ; (; TGeoBBox * ; geoShape). private . Creates """,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDMLWrite.html:28472,test,tests,28472,doc/master/classTGDMLWrite.html,https://root.cern,https://root.cern/doc/master/classTGDMLWrite.html,1,['test'],['tests']
Testability,".h. ◆ fEvPerBin. Int_t TMVA::PDEFoam::fEvPerBin. protected . Maximum number of effective (wt=1) events per bin. ; Definition at line 89 of file PDEFoam.h. ◆ fFillFoamWithOrigWeights. Bool_t TMVA::PDEFoam::fFillFoamWithOrigWeights. protected . BACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights. ; Definition at line 112 of file PDEFoam.h. ◆ fFoamType. EFoamType TMVA::PDEFoam::fFoamType. protected . BACKWARDS COMPATIBILITY: type of foam. ; Definition at line 105 of file PDEFoam.h. ◆ fHistEdg. TObjArray* TMVA::PDEFoam::fHistEdg. protected . Histograms of wt, one for each cell edge. ; Definition at line 98 of file PDEFoam.h. ◆ fInhiDiv. Int_t* TMVA::PDEFoam::fInhiDiv. protected . ! [fDim] Flags for inhibiting cell division ; Definition at line 92 of file PDEFoam.h. ◆ fLastCe. Int_t TMVA::PDEFoam::fLastCe. protected . Index of the last cell. ; Definition at line 95 of file PDEFoam.h. ◆ fLogger. MsgLogger* TMVA::PDEFoam::fLogger. mutableprotected . ! message logger ; Definition at line 118 of file PDEFoam.h. ◆ fMaskDiv. Int_t* TMVA::PDEFoam::fMaskDiv. protected . ! [fDim] Dynamic Mask for cell division ; Definition at line 91 of file PDEFoam.h. ◆ fMaxDepth. UInt_t TMVA::PDEFoam::fMaxDepth. protected . maximum depth of cell tree ; Definition at line 110 of file PDEFoam.h. ◆ fName. TString TMVA::PDEFoam::fName. protected . Name of a given instance of the FOAM class. ; Definition at line 83 of file PDEFoam.h. ◆ fNBin. Int_t TMVA::PDEFoam::fNBin. protected . No. of bins in the edge histogram for cell MC exploration. ; Definition at line 87 of file PDEFoam.h. ◆ fNCells. Int_t TMVA::PDEFoam::fNCells. protected . Maximum number of cells. ; Definition at line 85 of file PDEFoam.h. ◆ fNElements. UInt_t TMVA::PDEFoam::fNElements. protected . BACKWARDS COMPATIBILITY: number of variables in every cell. ; Definition at line 108 of file PDEFoam.h. ◆ fNmin. UInt_t TMVA::PDEFoam::fNmin. protected . minimal number of events in cell to split cell ; Definition at line 109 of f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoam.html:42133,log,logger,42133,doc/master/classTMVA_1_1PDEFoam.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoam.html,1,['log'],['logger']
Testability,".h:293; ROOT::Fit::FitData::NDimunsigned int NDim() constreturn coordinate data dimensionDefinition FitData.h:301; ROOT::Math::GoFTest::GetSigmaNstatic Double_t GetSigmaN(const std::vector< size_t > &ns, size_t N)Computation of sigma_N as described in (1)Definition GoFTest.cxx:311; ROOT::Math::GoFTest::SetCDFvoid SetCDF()Definition GoFTest.cxx:244; ROOT::Math::GoFTest::operator()void operator()(ETestType test, Double_t &pvalue, Double_t &testStat) constThe class's unary functions performing the gif test according to the ETestType provided.Definition GoFTest.cxx:208; ROOT::Math::GoFTest::SetDistributionFunctionvoid SetDistributionFunction(const IGenFunction &cdf, Bool_t isPDF, Double_t xmin, Double_t xmax)Definition GoFTest.cxx:267; ROOT::Math::GoFTest::fCDFstd::unique_ptr< IGenFunction > fCDFPointer to CDF used in 1-sample test.Definition GoFTest.h:235; ROOT::Math::GoFTest::fTestSampleFromH0Bool_t fTestSampleFromH0Definition GoFTest.h:245; ROOT::Math::GoFTest::EDistributionEDistributionH0 distributions for using only with 1-sample tests.Definition GoFTest.h:70; ROOT::Math::GoFTest::kLogNormal@ kLogNormalGaussian distribution with default mean=0, sigma=1.Definition GoFTest.h:74; ROOT::Math::GoFTest::kExponential@ kExponentialLognormal distribution with default meanlog=0, sigmalog=1.Definition GoFTest.h:75; ROOT::Math::GoFTest::kGaussian@ kGaussianFor internal use only within the class's template constructor.Definition GoFTest.h:73; ROOT::Math::GoFTest::kUserDefined@ kUserDefinedDefault value for non templated 1-sample test. Set with SetDistribution.Definition GoFTest.h:72; ROOT::Math::GoFTest::kUndefined@ kUndefinedDefinition GoFTest.h:71; ROOT::Math::GoFTest::fDistEDistribution fDistType of distribution.Definition GoFTest.h:238; ROOT::Math::GoFTest::Instantiatevoid Instantiate(const Double_t *sample, size_t sampleSize)Definition GoFTest.cxx:279; ROOT::Math::GoFTest::fCombinedSamplesstd::vector< Double_t > fCombinedSamplesThe combined data.Definition GoFTest.h:241; R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:39121,test,tests,39121,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,1,['test'],['tests']
Testability,.h;  GSLMultiRootFinder.cxx;  GSLMultiRootFunctionAdapter.h;  GSLMultiRootFunctionWrapper.h;  GSLMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  LinkDef.h;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;  TMatrixTCramerInv.h;  TMatrixTLazy.h;  TMatrixTSparse.h;  TMatrixTSym.h;  TMatrixTSymCramerInv.h;  TMatrixTUtils.h;  TVector.h;  TVectorD.h;  TVectorDfwd.h;  TVectorF.h;  TVectorFfwd.h;  TVectorfwd.h;  TVectorT.h;  ► src;  T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:49005,test,testQuasiRandom,49005,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,1,['test'],['testQuasiRandom']
