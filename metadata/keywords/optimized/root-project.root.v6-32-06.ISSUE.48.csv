quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Safety,"If you try fitting the obtained slice (slice 21), you will see that in both Minuit and Minuit2 the fit did not work. ; Just run this simple code: ; ```; auto f = TFile::Open(""histo.root"", ""READ"");; auto hist = f->Get<TH2>(""dxyres_vs_eta"");. auto h20 = hist->ProjectionY(""h20"",20,20);; auto h21 = hist->ProjectionY(""h21"",21,21);; auto c1 = new TCanvas();; c1->Divide(1,2);; c1->cd(1);; h20->Fit(""gaus"");; c1->cd(2);; // second fit fails ; h21->Fit(""gaus"");; ```. If you run only the second fit, it works because some default steps sizes are used at the beginning. ; You will get better slice fits if using option `L` when fitting the slices:; ```; hist->FitSlicesY(nullptr, 10, 21, 0, ""LR"");; ```; and defining a restricted range for the fitted functions to avoid fitting the outlier events. Close the issue since it is not a bug.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13852#issuecomment-1777016344:757,avoid,avoid,757,https://root.cern,https://github.com/root-project/root/issues/13852#issuecomment-1777016344,1,['avoid'],['avoid']
Safety,"Implement and use a thread-safe container for caching strings that are created and used in the computation graph. Notably, these include the strings representing column names generated by `Define`. This fixes the recent failures seen on MacOS in the `dataframe-vary` unittest. Since that underlines a thread-safety issue in the overall initialisation phase of MT RDF runs, it should be backported to 6.32",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15652:27,safe,safe,27,https://root.cern,https://github.com/root-project/root/pull/15652,2,['safe'],"['safe', 'safety']"
Safety,"Implement parallel page compression using `RPageSinkBuf`. When it's time to commit the cluster, the buffered pages are passed to the task scheduler to be compressed. Each page is given a `RNTupleCompressor` which both handles the compression and serves as the compression scratch buffer. `RNTupleCompressor` was adjusted to take a user-provided size to avoid wasting memory for small pages (16MB was the fixed size).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8077:353,avoid,avoid,353,https://root.cern,https://github.com/root-project/root/pull/8077,1,['avoid'],['avoid']
Safety,Improve startup by 15% (avoid redundant work).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10354:24,avoid,avoid,24,https://root.cern,https://github.com/root-project/root/pull/10354,2,"['avoid', 'redund']","['avoid', 'redundant']"
Safety,Improve the calculation for the binary cross entropy loss when the inputs are very large (and also very large negative). Use correct log approximation to avoid loss of precisions and returning infinity values. Fix both the CPU and GPU calculations. This has been initiated by this post https://root-forum.cern.ch/t/when-tmva-comput-loss-some-eopchs-loss-is-inf/57018/ where `inf` loss values were obtained during training,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14092:154,avoid,avoid,154,https://root.cern,https://github.com/root-project/root/pull/14092,1,['avoid'],['avoid']
Safety,Improve thread-safety in tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14472:15,safe,safety,15,https://root.cern,https://github.com/root-project/root/pull/14472,1,['safe'],['safety']
Safety,"Improved variant of PR #578 . Idea to create separate actions list, which will be used only for text-based streaming.; Most actions functions can be reused from normal I/O,; only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. creating separate list fWriteText, now used only with JSON; provide new method TStreamerInfo::AddWriteTextAction() to fill actions list; actions build from the full list of class members (avoid compressed members); provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop; make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. TNamed and TObject as direct data members; correct store of kSTLp members with arrays; kStreamLoop member with fCounter==0; kStreamLoop member with fCounter==1; rudimentary support for TRef; store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/580:592,avoid,avoid,592,https://root.cern,https://github.com/root-project/root/pull/580,1,['avoid'],['avoid']
Safety,In MakeProject avoid dereferencing deleted object.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4285:15,avoid,avoid,15,https://root.cern,https://github.com/root-project/root/pull/4285,1,['avoid'],['avoid']
Safety,"In Python 3, you can't do this because `None` is special:; ```Python; DataError=ROOT.RooAbsArg.None # syntax error!; ```. The tutorials used some workarounds that were either obfuscating `None`; by using the enum value directly, or used the more verbose `getattr`; approach:; ```Python; DataError=ROOT.RooAbsData.ErrorType(2); DataError=getattr(ROOT.RooAbsData, ""None""); ```. This commit pythonizes DataError with the usual string-to-enum; pythonization pattern already used for `LineColor` or `LineStyle` to; avoid this uglieness. One can do now:; ```Python; DataError=""None""; DataError=None; ```. This PR also generalized the string-to-enum pythonization for strings (see the first commit).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9721:510,avoid,avoid,510,https://root.cern,https://github.com/root-project/root/pull/9721,1,['avoid'],['avoid']
Safety,"In RooAbsPdf, the following check is done to check if the normalization; set has changed:; ```C++; RooFit::getUniqueId(nset) != RooFit::getUniqueId(_normSet); ```. This works, but like the previous pointer comparison it still gives; false results if the `_normSet` was replaced buy another RooArgSet at; the same memory location. The problem can be reproduced with this code:. ```C++; using namespace RooFit;. // Create observables; RooRealVar x(""x"", ""x"", -5, 5);; RooRealVar y(""y"", ""y"", -5, 5);. // Create signal pdf gauss(x)*gauss(y); RooGaussian gx(""gx"", ""gx"", x, RooConst(0), RooConst(1));; RooGaussian gy(""gy"", ""gy"", y, RooConst(0), RooConst(1));; RooProdPdf sig(""sig"", ""sig"", {gx, gy});. // Create composite pdf; RooAddPdf model(""model"", ""model"", RooArgList(sig), RooConst(100.));. // The results of the last two lines depend on the order of execution; // which should not be the case!; std::cout << model.getVal(x) << std::endl;; std::cout << model.getVal({x, y}) << std::endl;; ```. The solution would be to replace the `_normSet` member directly with; its unique ID value, but then it could not be used anymore. Hence we; need both. This commit also adds a new private `RooAbsPdf` member functions to set; the `_normSet` together with the new `_normSetId` member, and one; protected `isActiveNormSet(RooArgSet const*)` function. The latter; function is comparing the input to the current `_normSet`, but shortcuts; to `false` is the ID does not match with the last `_normSet` ID. Like; this, we avoid dereferencing invalid `_normSet` pointers. This change is mainly done to fix several of the ASAN build failures in; RooFit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11176:1504,avoid,avoid,1504,https://root.cern,https://github.com/root-project/root/pull/11176,1,['avoid'],['avoid']
Safety,"In RooDataSet, there are constructors to create a dataset as a subset of; another RooDataSet or a TTree, passing either a cut string or a; RooFormulaVar as the cut variable. There were two implementations for the cut string and the RooFormulaVar; case, but it's better to implement one in terms of the other to avoid; code duplication and divergence. The RooFormulaVar version has to be implemented in terms of the cut; string version, because the cut string version is more general: it can; also take an empty string, signifying no cut. Removing functions from the public interface of the data store classes is; okay, because as implementation details of the RooFit dataset classes; they are not supposed to be public anyway.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10506:311,avoid,avoid,311,https://root.cern,https://github.com/root-project/root/pull/10506,1,['avoid'],['avoid']
Safety,"In RooFit, there are many functions that return pointers that are owned; by the caller. We can't change this interface anymore, but we can wrap; the return values transparently in a raw pointer wrapper that is called; a `RooFit::Owner`. On the C++ side, this helps to analyze your code and detect potential; memory leaks. On the Python side, we can tell cppyy to take ownership; of the object if the pointer is wrapped in a owning pointer such as the; `RooFit::Owner`. This is more flexible and convenient than the existing; cppyy way of flagging the CPPOverloads on the Python side with the; `__creates__ = True` attribute for at least two reasons:. 1. This flag can't be applied at the granularity of indivirual C++; overloads; 2. It's only on the Python side, so if you want to flag these functions; in C++ as well as in Python you have to do some bookkeeping. A unit test was implemented to check that the `RooFit::Owner` behaves in; Python as expected, and that there is no memory leaking when using; functions that return them. As a first example, the `RooFit::Owner` is used in the highly used; function `RooAbsPdf::generate`, so we also get quite some test coverage; from the tutorials. In the future after this initial effort, the remaining RooFit functions; should be migrated to fix many memory leaks in PyROOT user code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9392:290,detect,detect,290,https://root.cern,https://github.com/root-project/root/pull/9392,1,['detect'],['detect']
Safety,In TBranchElement init offset avoid stripping part of the name.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7119:30,avoid,avoid,30,https://root.cern,https://github.com/root-project/root/pull/7119,1,['avoid'],['avoid']
Safety,"In `RooAbsReal::getPropagatedError`, the whole computation graph is; cloned with `RooAbsArg::cloneTree` just to evaluate the variations. The; original parameter values are reset after the variations, so it is safe; to use the original graph instead of a clone. The motivation for this change was that when the uncertainties of a; RooRealIntegral are evaluated with `RooAbsReal::getPropagatedError`, a; custom observable range is not effective anymore after cloning the; integral with `cloneTree`. Besides from the integral problem, it's probably good to avoid the clone; because there might be other issues related to the cloning that have not; been discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7477:209,safe,safe,209,https://root.cern,https://github.com/root-project/root/pull/7477,2,"['avoid', 'safe']","['avoid', 'safe']"
Safety,"In a basic [toy experiment example from CMS](https://cms-analysis.github.io/HiggsAnalysis-CombinedLimit/part5/longexercise/#advanced-section-b-computing-limits-with-toys) one can see that [RooProdPdf::factorizeProduct](https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/combine_example_2_old/59) function takes a significant fraction of the runtime, most of which is spent in `RooArgSet::~RooArgSet()`. In this PR, the factorizeProduct method is rewritten with `std::vector`s that are kept alive during the whole loop over pdfs such that memory allocation is avoided in this performance-critical code. A more sustainable solution would be to reuse the model for every toy such that `factorizeProduct` is only called once, but since a lot of RooFit-based code probably doesn't do this I think it's worth speeding up this function. Igprof reports for the CMS combine toy experiment example:; * [without this PR](https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/combine_example_2_old); * [with this PR](https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/combine_example_2_new)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7907:571,avoid,avoided,571,https://root.cern,https://github.com/root-project/root/pull/7907,1,['avoid'],['avoided']
Safety,"In a similar issue: https://github.com/root-project/root/issues/14199, the problem was avoided by reducing the number of (indirect) calls to `findScope` (with the side-effect of reducing overall work needed).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16121#issuecomment-2252880495:87,avoid,avoided,87,https://root.cern,https://github.com/root-project/root/issues/16121#issuecomment-2252880495,1,['avoid'],['avoided']
Safety,"In all actual ABIs, pointers to non-member function are simply addresses, a raw pointer. The return type doesn't matter for the storage. For type-safety, correcting the function's return type to be `void* &` would be indeed an improvement. The cost and complexity of going through lambdas seems fairly high to me. Let's see what @pcanal thinks about this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3208#issuecomment-449357187:146,safe,safety,146,https://root.cern,https://github.com/root-project/root/pull/3208#issuecomment-449357187,1,['safe'],['safety']
Safety,"In all sub-classes same part to store histogram, list of functions and basic attributes was duplicated. Now all this ; functionality collected in protected `TGraph::SaveHistogramAndFunctions` method. . Also provide `TGraph::SaveArray` method to optimize storage of TGraph arrays in macro - there are quite of them in `TGraphBentErrors` class. Use more compact form for arrays - 16 values in the line. Made `THStack::SavePrimitve()` re-entrant. Histograms names were changed when stored - now names set back. Check for `gPad` in several interactive methods like `TGraph::InsertPoint()` to avoid crash when called from macro. Exclude unnecessary casting to `TObjOptLink` - base `TObjLink` has all required virtual methods already.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11884:588,avoid,avoid,588,https://root.cern,https://github.com/root-project/root/pull/11884,1,['avoid'],['avoid']
Safety,"In case of named arguments, the RooFormula will replace the argument; names with `x[0]` to `x[n]`. There are two things that can go wrong if; RooFormula is not implemented right. First, if there is a variable named; ""x"" it should only be substituted if the matching substring is not; followed by ""["", to not replace existing x[i]. Second, variables with; integer names like ""0"" should only be substituted if the match is not; followed by a ""]"", again to avoid replacing x[i]. This test checks that; these cases are handled correctly. The second case was so far not dealt with correctly, but with this; commit it is. A corresponding unit test was also implemented. The preprocessor commands in `RooFormula` were also reorganized; slightly, such that one can test the `TPRegexp` backend simply by; commenting out the `define ROOFORMULA_HAVE_STD_REGEX`. This pull request fixes an issue reported in the forum:; https://root-forum.cern.ch/t/a-strange-bug-in-rf708-bphysics-c/49152/2",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10105:454,avoid,avoid,454,https://root.cern,https://github.com/root-project/root/pull/10105,1,['avoid'],['avoid']
Safety,In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. Occasionally when loading a shared object the dynamic linker will tell us if something is missing (via dlerror) but only on the intialization path. This patch fixes ROOT-10637.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5235:110,detect,detect,110,https://root.cern,https://github.com/root-project/root/pull/5235,1,['detect'],['detect']
Safety,"In clang a transient file is a header file which is stored in the pch/pcm file. If this file does not exist, clang creates a virtual file of the unzipped stored file. However, if the file exists it compares the size of the file on disk and the size of the transent file. If the two sizes are different it does not complain (as validation is off) but it triggers an assert in when constructing and outdated clang::InputFile. The implementation disallows a overridden or transient file to be out of date. This patch extends the DisableValidation abilities to span not only for timestamps but we avoid checking the file sizes if the file is on the disk. And, instead we just create a virtual file of the file that we already have. This patch should fix a relocation issue for cmssw and some of the reported LCG issues. cc: @oshadura, @davidlange6, @smuzaffar, @emanca, @zygoloid",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4480:593,avoid,avoid,593,https://root.cern,https://github.com/root-project/root/pull/4480,1,['avoid'],['avoid']
Safety,"In either the original test (via `TClingClassInfo`) or the latest example `TClass::GetClass(""B<NS::A<int>>"")`, the code triggers attempts to instantiate a template which fails (due to the type being only forward declared). The later error messages (after the full declaration is loaded) indicates that some of the traits template instance are NOT being re-instantiated based using the complete information (and instead the one based on the incomplete information are used). Technically, we don't know yet whether it is a problem with the transaction unloader or the the transaction decl capture (or possibly even on the failure detection). What we do know is that the desired behavior [in last example](https://github.com/root-project/root/issues/13815#issuecomment-1759250811) is that after the execution of `TClass::GetClass(""B<NS::A<int>>"")` (i.e at the end of line 2), `Cling` should NOT be holding an instantiation of the trait (not sure which)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13815#issuecomment-1766925765:628,detect,detection,628,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1766925765,1,['detect'],['detection']
Safety,"In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,; and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not; take a `bool optConst` argument anymore. Ths is because the value of; the argument that was passed by the RooMinimizer instance was always a; member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because; `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration; such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11695:57,redund,redundancies,57,https://root.cern,https://github.com/root-project/root/pull/11695,2,"['avoid', 'redund']","['avoid', 'redundancies']"
Safety,"In line with what it's done for jitted filters, now the jitting; of custom columns creates the RCustomColumn and assigns it as the; fConcreteCustomColumn of the corresponding RJittedCustomColumn that; was previously booked.; This avoids having the situation in which a certain custom column; has been ""booked"" but is not yet present in the map of custom columns. It will also help with the ""local custom columns"" that are coming; with ROOT-9465.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2239:230,avoid,avoids,230,https://root.cern,https://github.com/root-project/root/pull/2239,1,['avoid'],['avoids']
Safety,In methods like `FindBranch` or `GetBranch` nullptr as argument causing failure. Avoid casting to `(char *)`. Use `nullptr`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10882:81,Avoid,Avoid,81,https://root.cern,https://github.com/root-project/root/pull/10882,1,['Avoid'],['Avoid']
Safety,"In my analysis program I faced a memory leak which was caused by `TH3::DoProject2D` according to `valgrind --leak-check=full` and independently by simple git dissection. Valgrind report:; ```; ==24570== 114,000 (5,160 direct, 108,840 indirect) bytes in 5 blocks are definitely lost in loss record 16,382 of 16,451; ==24570== at 0x483FF3F: operator new(unsigned long) (vg_replace_malloc.c:422); ==24570== by 0x4D9CEF9: TStorage::ObjectAlloc(unsigned long) (in /opt/ROOT-6.24.06/lib/libCore.so.6.24.06); ==24570== by 0x577B7DF: TH3::DoProject2D(char const*, char const*, TAxis const*, TAxis const*, bool, bool, bool, bool) const (in /opt/ROOT-6.24.06/lib/libHist.so.6.24.06); ==24570== by 0x5776AA7: TH3::Project3D(char const*) const (in /opt/ROOT-6.24.06/lib/libHist.so.6.24.06); ```. So I quickly looked at the source code and found TH2D objects are created with the new operator but newer deleted.; https://github.com/root-project/root/blob/1f9dc812978722660f4a5f8310e0ca5fdf442ebe/hist/hist/src/TH3.cxx#L2114. Usually this if-branch in this function is avoided because TH2 is already created (if I understand the code above correctly), but I unfortunately chose the same name for all of my TH3 hists. [Here](https://github.com/root-project/root/files/8488019/report.txt) is my code which causes the memory leak.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10400:1055,avoid,avoided,1055,https://root.cern,https://github.com/root-project/root/issues/10400,1,['avoid'],['avoided']
Safety,"In old versions of RooFormula, one could mutate the internal formula; object from the outside. This was unsafe. Therefore, the visibility of; formula() was reduced.; It can, however, be beneficial to have at least read access. Therefore,; a const overload of the function was provided to give users access.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6250:104,unsafe,unsafe,104,https://root.cern,https://github.com/root-project/root/pull/6250,1,['unsafe'],['unsafe']
Safety,In order to avoid packaging errors from rpmlint:; root.x86_64: E: incorrect-fsf-address /usr/share/emacs/site-lisp/root/root-help.el,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/270:12,avoid,avoid,12,https://root.cern,https://github.com/root-project/root/pull/270,1,['avoid'],['avoid']
Safety,"In order to avoid thread-safety issues, the static class member; TClass::fgCallingNew is no longer a class member and is instead; a file scoped static declared thread_local. It was necessary to; not have it is a class member since CINT could not parse the new; thread_local keyword.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11:12,avoid,avoid,12,https://root.cern,https://github.com/root-project/root/pull/11,2,"['avoid', 'safe']","['avoid', 'safety']"
Safety,"In order to avoid {namespace std} interfering with following include files,; when generating a dictionary file add the {using namespace std;} only after; GenerateNecessaryIncludes method is called. Since many legacy root header files do require this global {using namespace std;}; to complete the tests, old behaviour is kept by default and the global; {using namespace std} can be avoided by adding -noGlobalUsingStd to rootcling invocation. Allow passing ACLiC RootCling flags via .rootrc (Vassil). This is a special patch tailored for v6-20-02",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5510:12,avoid,avoid,12,https://root.cern,https://github.com/root-project/root/pull/5510,2,['avoid'],"['avoid', 'avoided']"
Safety,"In order to avoid {namespace std} interfering with following include files,; when generating a dictionary file declare the {namespace std} only after; GenerateNecessaryIncludes method is called",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5296:12,avoid,avoid,12,https://root.cern,https://github.com/root-project/root/pull/5296,1,['avoid'],['avoid']
Safety,"In order to mark the file as zombie when this happens, I had to change a `goto zombie` into calls to a dedicated helper lambda (done in a separate commit). Otherwise I would have had to move around a few lines just so that the compiler would let me jump from the sanity check to the zombie label (compilers don't allow jumps across variable initializations). This fixes https://github.com/root-project/root/issues/10039.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11719:263,sanity check,sanity check,263,https://root.cern,https://github.com/root-project/root/pull/11719,1,['sanity check'],['sanity check']
Safety,"In other PR @amadio made comment:. > We do want to use the source directory includes when possible. But there is problem with several generated headers like `RConfigure.h` - is it the only one?; Only because of it we have to add `$ROOTSYS/include` in ROOT build paths.; Ending in situation, that every header available twice - via source dir and via '$ROOTSYS/include` dir. This should be avoided in any case. I propose a solution - generate RConfigure.h in special directory like `${CMAKE_BINARY_DIR}/generated_includes` and copy it into `${CMAKE_BINARY_DIR}/includes`. And in the list of include paths for ROOT libraries only source dirs and `${CMAKE_BINARY_DIR}/generated_includes` should be used.; Do we agree on this? . @amadio @vgvassilev @Axel-Naumann @oshadura",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5170#issuecomment-600617968:389,avoid,avoided,389,https://root.cern,https://github.com/root-project/root/pull/5170#issuecomment-600617968,1,['avoid'],['avoided']
Safety,"In particular, `RJitted{Action,Filter,Define}::Run` and similar functions; can be performance hotspots. Avoid the nullptr check there. Many thanks to Josh Bendavid for reporting the problem.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9258:104,Avoid,Avoid,104,https://root.cern,https://github.com/root-project/root/pull/9258,1,['Avoid'],['Avoid']
Safety,"In preparation of moving TError to foundation, this PR removes the direct use of gEnv and gSystem from TError. The functionality is implemented by helper functions instead, which are registered and de-registered upon creation and destruction gEnv and gSystem. The three tasks implemented by helpers are. - Read the ROOT environment in order to get the value of `Root.ErrorIgnoreLevel`; - Get the last system error message; - Abort the process",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5855:425,Abort,Abort,425,https://root.cern,https://github.com/root-project/root/pull/5855,1,['Abort'],['Abort']
Safety,"In rare cases, when processing a TChain and producing a Snapshot,; no entry in the first input TTree passes all Filters, so we never; have the chance to create the branches of the output TTree.; As a consequence, when switching from the first file to the next,; TTree::CopyAddresses fails to find the corresponding branches in; the output tree (which was added as its clone via TTree::AddClone),; and prints a warning (that can be safely ignored). We now instead add the output tree of a Snapshot as a clone of the; input tree more lazily, only when we first process an entry (if ever).; This removes the aforementioned warning, reported at #6848.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7121:431,safe,safely,431,https://root.cern,https://github.com/root-project/root/pull/7121,1,['safe'],['safely']
Safety,"In reply to: https://github.com/root-project/root/pull/8703#issuecomment-920044106. > You mean keeping the average of the last $x$ MB written per column? . Not quite, I meant simply an overall average, i.e. simply keeping `total_number_of_bytes` and `total_number_of_compressed_bytes` for each column and then average compression ration is a simple division. But ... actually ... closer to the original proposal is simply the ""total_number_of_bytes_in_all_flushed_clusters"" and ""corresponding_compressed_size"" (i.e. a per RNtuple running total). However this makes me thing of another (potential more noticeable) instability. If there is 2 columns; column A with an constant/average compression ration of 100 and column B with a constant/average compression ration of 1 (or 1.1 :) ) but both columns are collections. If for most of the entries (for more proposal) or only the last cluster (for the PR's proposal), column A has a lot of data and column B has very little data, then the compression ration use for prediction will be 100 (ish). If suddenly the cardinality flip/flop and column A has very little data but column B has a lot of data, then the compression ration of that cluster will be 1 but it would still contains `100 * target_cluster_size_in_compressed_bytes`, namely in this case 100 times larger (on disk) than any other cluster. Obviously this is an extreme example but it points to the benefit of using `per column` compression ratio rather than overall compression ratio (whether it is whole-ntuple or last (few) clusters). The cost for implementation seems to be that after each `Fill`, each column would have to increment a (global-per-RNtuple) counter with `data_written / estimated_compression_ratio` which:; * for collection column should be a small over-head; * for single value column should be a large over-head. however conversely, an accurate estimate is ""only important"" for collection column, so maybe an hybrid solution is a workable compromise?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8703#issuecomment-920229853:1012,predict,prediction,1012,https://root.cern,https://github.com/root-project/root/pull/8703#issuecomment-920229853,1,['predict'],['prediction']
Safety,"In the RooBatchCompute CPU library, all scalar inputs have to be copied; n times into a buffer that is as long as the SIMD registers, to allow; for vectorization in all cases. To avoid frequent memory allocations, this buffer was made a `static`; variable in the original implementation of the batchcompute library,; which of course made it non-threadsafe. This is now hitting us, because RooFit needs to be able to do multiple; fits concurrently. This is a requirement for CMSSW, and a blocker for; ROOT master adoption in CMSSW since the new CPU backend is the default:; https://github.com/cms-sw/cmsdist/pull/9034. This commit fixes the concurrency problem by doing the buffering in the; DataMaps that are used in the `RooFit::Evaluator`. Like this, multiple; computation graphs can be concurrently evaluated. It was tested with the ATLAS benchmarks in `rootbench` that the fitting; performance remains the same. This PR also makes some code style and memory management improvements documented in the commit messages. It also updates the documentation to make clear the new CPU backend is now the default, which was not done in this PR:; https://github.com/root-project/root/pull/14742",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14877:179,avoid,avoid,179,https://root.cern,https://github.com/root-project/root/pull/14877,1,['avoid'],['avoid']
Safety,"In the RooChi2Var and the related `createChi2` functions in RooAbsReal; and RooAbsPdf, the `DataError` was not explained precisely enough. This commit changes the documentation of the RooChi2Var constructor to; exactly explain what is going on, and the the documentation of the; `createChi2` is updated to link to the RooChi2Var documentation to avoid; code duplication. This commit also replaces some LaTeX formulae from titiles in the; documentation because they are not rendered there. Closes #8615.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10914:346,avoid,avoid,346,https://root.cern,https://github.com/root-project/root/pull/10914,1,['avoid'],['avoid']
Safety,"In the `RooRealIntegral` constructor, there was a `O(N^2)` operation on; the computation graph, checking the dependency of the top-level function; on each other node. This is very expensive in the numer of RooAbsArgs N; is large. Instead of calling `dependsOnValue` for each leaf node, which is; very expensive because it's a recursive function, the value server; leaves are all put in a RooArgSet before the leaf iteration to check; quickly if a leaf is also a value server. This change speeds up the `createNLL` step of large models like the; ATLAS Higgs combination by at least a factor of two or three. In the same PR, I also bring a little other commit, where the ownership of the `cloneSet` in `cloneTree` is released before removing the top node element, in order to avoid ownership ambiguities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10959:774,avoid,avoid,774,https://root.cern,https://github.com/root-project/root/pull/10959,1,['avoid'],['avoid']
Safety,"In the `master` nightlies on Ubuntu 22.04, we see some warnings caused by civentweb:; https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2204,SPEC=soversion,V=master/lastBuild/parsed_console/. ```; warning: ‘SHA1_Init’ is deprecated: Since OpenSSL 3.0 [-Wdeprecated-declarations]; 12345 | SHA1_Init(&sha_ctx);; warning: ‘SHA1_Update’ is deprecated: Since OpenSSL 3.0 [-Wdeprecated-declarations]; warning: ‘SHA1_Final’ is deprecated: Since OpenSSL 3.0 [-Wdeprecated-declarations]; ```. Usage of these deprecated functions has been removed in the civetweb master branch:; https://github.com/civetweb/civetweb/pull/1072. Hence, once civetweb 1.16 is out, the code should by synchronized again with the ROOT repository to avoid these warnings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10403:773,avoid,avoid,773,https://root.cern,https://github.com/root-project/root/issues/10403,1,['avoid'],['avoid']
Safety,"In the current implementation of `RooDataSet::reduceEng`, the dataset; itself was queried to get the weight variable used in the reduced; dataset. This didn't work with the `RooCompositeDataStore`, because a; dataset with this data store doesn't have a weight variable, as these; are encapsulated in the components of the composite store. Hence,; reducing a weighted dataset with a RooCompositeDataStore yields an; unweighted dataset, which is a bug. To fix this problem, this commit implements a separate reduction logic; for the RooCompositeDataStore: the components are now reduced; individually, instead of naively creating a RooCompositeDataStore from a; RooVectorDataStore/RooTreeDataStore. To avoid further code branches in; RooDataSet, a new virtual function `RooAbsDataStore::reduce` is; introduced. The first two commits update the data reduction implementation details such the bugfix is easier to implement (see commit messages for more details). This closes https://github.com/root-project/root/issues/6951.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10397:700,avoid,avoid,700,https://root.cern,https://github.com/root-project/root/pull/10397,1,['avoid'],['avoid']
Safety,"In the implementation of `RooAbsArg::recursiveRedirectServers` a static variable was used to check for cyclic recursion. This is not thread safe an should be avoided. The problem is solved by creating a new `recursiveRedirectServersImpl` function that takes the `callStack` variable also as an argument, and this variable is instantiated separately in each `recursiveRedirectServers` call. Since the code was touched and moved anyway, the implementation of `recursiveRedirectServers` was formatted with clang-format.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11970:140,safe,safe,140,https://root.cern,https://github.com/root-project/root/pull/11970,2,"['avoid', 'safe']","['avoided', 'safe']"
Safety,"In the implementation of `RooHistPdf::plotSamplingHint`, some of the; returned values can be outside the variable definition range. This might; lead to invalid evaluations when the sampling hints are also used to; evaluate other PDF components of a composite PDF, as reported in https://github.com/root-project/root/issues/11482. This commit suggests an improved algorithm for the sampling hint:; consider only bin boundaries that are strictly between the plot limits; within some epsilon, and for the limits just sample two additional; points left and light that are some epsilon aways from the plot limits. The `stressRooFit_ref.root` reference file needs to be updated with this; change, because the sampling changes the RooPlots that are used as; reference objects. The final commit in this PR avoids code redundancy by calling the implementation of `RooHistPdf::plotSamplingHint` also in the `RooHistFunc`. Closes https://github.com/root-project/root/issues/11482.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11701:798,avoid,avoids,798,https://root.cern,https://github.com/root-project/root/pull/11701,2,"['avoid', 'redund']","['avoids', 'redundancy']"
Safety,"In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:; ```; Direct leak of 16 byte(s) in 1 object(s) allocated from:; #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599); #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370; #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108; ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15477:300,detect,detected,300,https://root.cern,https://github.com/root-project/root/pull/15477,1,['detect'],['detected']
Safety,"In the last screen shot, the ""no lock held"" in the write is suspicious. It is suppose to have take the write lock in `AddLast` line 158. For the lock to be missed, it would need to have been executed before the thread-safety was enable or before the list was made thread-safe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8365#issuecomment-875959511:218,safe,safety,218,https://root.cern,https://github.com/root-project/root/issues/8365#issuecomment-875959511,2,['safe'],"['safe', 'safety']"
Safety,"In the previous PR https://github.com/root-project/root/pull/7344, the biggest challenge has been to make `RooAbsOptTestStatistic` aware if batch mode is enabled to skip the cache optimization. The cleanest way of disabling the cache optimization is to do so directly in the `RooAbsOptTestStatistic` constructor so it is skipped. Unfortunately, the constructor of `RooAbsOptTestStatistic` and its base class `RooAbsTestStatistic` has already a very long signature, and it is already challenging to correctly align all parameters correctly with the position they should have. That's why I propose in this PR to use a struct to group all `RooAbsTestStatistic` parameters. This has several advantages:; * the struct can be initialized with tagged initialization, so alignment errors can be easily avoided; * if a new parameter is added (such as the `batchMode` flag in this PR), only the configuration struct declaration struct needs to be changed; * the default values are defined in a central place and not redundantly in all the relevant constructor declarations/`RooAbsTestStatistic::create` overrides. To make the review easier, this PR only includes the configuration refactor and disabling the cache optimization is batch mode is used. The `RunContextTracker`-related commits would follow in a separate PR, but I already tested that everything together does work and the unit test I created for the `RunContextTracker` succeeds. Two open questions are still:; * the `RooNLLVar::_batchEvaluations` flag is now redundant, but I still kept it to not have to change class versions too often. Is this acceptable?; * the new `RooAbsTestStatistic::_batchMode` takes part in the IO, entailing an increment of the class version. I that acceptable? The advantage here is that if one reads back a serialized RooFit workspace, it can remember if batch mode is used",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7616:794,avoid,avoided,794,https://root.cern,https://github.com/root-project/root/pull/7616,3,"['avoid', 'redund']","['avoided', 'redundant', 'redundantly']"
Safety,"In the v6.26 development cycle cycle, some RooFit helper header files; whose names don't start with the `Roo` prefix sneaked into the; RooFitCore library. These headers have the overly generic names; `Floats.h` and `UniqueId.h`, which calls for trouble in environments; where the ROOT headers are directly installed in the main system include; path (most Linux distributions). To prevent any possible issues, this commit proposes and follows new; conventions for RooFit headers:. * Installed RooFit headers must start with `Roo*` or must be located; in a subdirectory starting with `Roo*` (e.g. RooFit or RooStats).; * Similarly, if the class name doesn't start with Roo, it has to go in; a `Roo*` namespace (usually `RooFit`); * Free functions always need to go in this namespace; * For implmentation details that we can't avoid installing, we can use; a `Roo*::Detail` namespace like we have with `ROOT::Detail` (same; with `Experimental`). We should also keep in mind what we established in PR #9078:. * `inc/` is for installed headers; * `res/` is for headers that are only used at compile time of other; ROOT components; * Headers only used within a library go to `src/`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9394:824,avoid,avoid,824,https://root.cern,https://github.com/root-project/root/pull/9394,1,['avoid'],['avoid']
Safety,"In today's team meeting we discussed this PR and reached the following conclusion:; * This PR is too big and the many changes will hinder backporting.; * To avoid the many formatting changes, I shall apply this clang-tidy fix and leave the `virtual` keyword, so the function names do not move.; * No clang-format.; * For this and future automatic refactorings, we will focus on the newer parts of ROOT, which are in .hxx files and source files starting with 'R' (with some exceptions).; * We will try these refactorings on parts of ROOT first, like the Tree library.; * I will close this PR and open a new one with a new changeset.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6007#issuecomment-671415694:157,avoid,avoid,157,https://root.cern,https://github.com/root-project/root/pull/6007#issuecomment-671415694,1,['avoid'],['avoid']
Safety,"In what situation is `R__HAS_STD_SPAN` not sufficient? If `ROOT` has been configured to build in C++20 mode and properly installed, it must be set in `RConfigure.h`. If it is not set, this means that the `ROOT` code will use an alternative to `std::span` (because at configure and build time, it detected it was not available).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11311#issuecomment-1252699407:296,detect,detected,296,https://root.cern,https://github.com/root-project/root/pull/11311#issuecomment-1252699407,1,['detect'],['detected']
Safety,"Incidentally, couldnt one avoid that loop over the bits at that bit of the code by just doing `count += nbits[fAllBits[startByte]>>ibit]` ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7988#issuecomment-825756214:26,avoid,avoid,26,https://root.cern,https://github.com/root-project/root/pull/7988#issuecomment-825756214,1,['avoid'],['avoid']
Safety,Increase test timeout,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10886:14,timeout,timeout,14,https://root.cern,https://github.com/root-project/root/pull/10886,1,['timeout'],['timeout']
Safety,Increase thread safety to fix RBatchGenerator tutorials segfaults,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13302:16,safe,safety,16,https://root.cern,https://github.com/root-project/root/pull/13302,1,['safe'],['safety']
Safety,Increase timeout for PPC64,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6246:9,timeout,timeout,9,https://root.cern,https://github.com/root-project/root/pull/6246,1,['timeout'],['timeout']
Safety,"Indeed there is a complex logic doing exactly the opposite of what is requested in this issue. **On purpose** the error bars are drawn from the limit of the empty markers to avoid seeing them inside the marker. In the example given here, it is marker 4 which behaves differently from the others and might be fixed. But 24 is an empty circle too and produces the right drawing. I propose to close this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14549#issuecomment-1940926553:174,avoid,avoid,174,https://root.cern,https://github.com/root-project/root/issues/14549#issuecomment-1940926553,1,['avoid'],['avoid']
Safety,"Indeed, @pcanal invested a lot of time to avoid these cases but we still have to allocate some memory on making lookups.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13130#issuecomment-1619504965:42,avoid,avoid,42,https://root.cern,https://github.com/root-project/root/issues/13130#issuecomment-1619504965,1,['avoid'],['avoid']
Safety,"Indeed, this shows no ZeroMQ symbols in `libRooFitZMQ.so` or `libRooFitMultiProcess.so`, nor in the new `libRooFitCore.so` of #9349, so it seems we are safe. @guitargeek Indeed, in #9349, `roofit_multiprocess` will be switched off. In the coming release, people can start trying it out and it could be defaulted ON later on, when the ZeroMQ release with `zmq_ppoll` has also happened.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9078#issuecomment-985532273:152,safe,safe,152,https://root.cern,https://github.com/root-project/root/pull/9078#issuecomment-985532273,1,['safe'],['safe']
Safety,"Initial problem - static array `gLbc`, filled every time file dialog created new with entries with `StrDup`.; Was fixed with first commit. Then replace `char *` by `std::string` and avoid `StrDup`. And finally replace static array by `std::vector` - cleanup automatically when file dialog closed",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7337:182,avoid,avoid,182,https://root.cern,https://github.com/root-project/root/pull/7337,1,['avoid'],['avoid']
Safety,"Initialization of a function static variable is guaranteed to be; done in a thread safe manner by the C++11 standard. Previously, the; static was initialized to 0 and then reset which lead to a data race.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/48:83,safe,safe,83,https://root.cern,https://github.com/root-project/root/pull/48,1,['safe'],['safe']
Safety,"Initializing RooBatchCompute takes over a second when CUDA is also; available on the system. It is unreasonable to do this everytime the; RooFit library is loaded. For example, the time of small unit tests was; completely dominated by the RooBatchCompute initialization time before; this commit. This change entailed another change in `Buffers.cxx` to avoid static; initialization problems. If possible, I'll still try to backport this to the release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9915:352,avoid,avoid,352,https://root.cern,https://github.com/root-project/root/pull/9915,1,['avoid'],['avoid']
Safety,"Inject the ""_tls_array"" constant (0x2C) symbol to avoid unresolved symbol er…",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1804:50,avoid,avoid,50,https://root.cern,https://github.com/root-project/root/pull/1804,1,['avoid'],['avoid']
Safety,Inspired by this forum post:; https://root-forum.cern.ch/t/install-root-in-my-directory-in-a-share-server/60150/2. We can simply require the needed components to avoid manual checking and emitting `FATAL_ERROR`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16008:162,avoid,avoid,162,https://root.cern,https://github.com/root-project/root/pull/16008,1,['avoid'],['avoid']
Safety,"Instead of aborting after `R__ASSERT` fails, a proper exception is now thrown when the `RNTupleInspector` detects inconsistent compression across columns or clusters. Additionally, this PR improves the documentation related to this. N.B. Because at this point there is no way to have different compression across columns or clusters, no tests for checking this assumption have been added yet. When at one point this becomes possible, this should obviously be added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13401:11,abort,aborting,11,https://root.cern,https://github.com/root-project/root/pull/13401,2,"['abort', 'detect']","['aborting', 'detects']"
Safety,"Instead of aborting on an `R__ASSERT`, with this patch RNTuple throws a meaningful exception when trying to open a file that was generated in an incompatible, future format. Fixes lazy loading of the model in `RNTupleReader::LoadEntry()` along the way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7739:11,abort,aborting,11,https://root.cern,https://github.com/root-project/root/pull/7739,1,['abort'],['aborting']
Safety,Instead of exposing `TF1FunctorPointer` and `TMethodCall` you can also outline all constructors and the destructor of `TF1`. Given that construction and destructions isn't a hot call that would be my preferred solution - especially as it also avoids having to expose `TF1FunctorPointer` to the dictionary. Did / can you try that?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7035#issuecomment-762122876:243,avoid,avoids,243,https://root.cern,https://github.com/root-project/root/pull/7035#issuecomment-762122876,1,['avoid'],['avoids']
Safety,"Instead, split the code RDataFrame jits every 1k newlines and jit; in chunks. This avoids an explosion in the time required by; optimizer passes, which seem to not deal well with very large; function bodies. See https://github.com/root-project/root/issues/9312 and; https://github.com/root-project/root/issues/7604 for more discussion. @hahnjo can you confirm this helps? It brings jitting times down to reasonable (<1m times) for the cases I tested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9328:83,avoid,avoids,83,https://root.cern,https://github.com/root-project/root/pull/9328,1,['avoid'],['avoids']
Safety,"Intentional. An `std::string` has a single-char array representation underlying it, which is a Python `bytes` object, not a `str`, which is unicode. The point of `repr()` is to be able to provide a `str` object from which the original object can be reconstructed. That, therefore, has to be a `bytes` representation. The point of `str()` is to provide something that looks pretty and informational, which in practice is more likely to be a decoded `str`, hence that choice. Specifically, b/c unicode isn't properly implemented in any C++ standard string class, it's common practice to place an encoded unicode string into `std::string`. Regardless, even if it contains unencoded ASCII, whenever a C++ `std::string` is represented as a Python `str`, it needs decoding. However, no information is available on the encoding scheme. It's typically safe to assume an UTF-8 encoding b/c ASCII is a subset, but there's no guarantee. Hence the current implementation tries to avoid decoding as much as possible and only does so when absolutely necessary (e.g. when doing string comparisons or, as in this example, when calling `str()`). The implementation of `std::string` has been Pythonized so that it can be used as a drop-in replacement wherever a `str` object is expected, with the exception of when you do anything type specific, such as `repr()`, `type()`, and `isinstance()`, where it will represent as an `std::string`, which it is. For CERN, none of this is likely to matter as all European languages are encodable UTF-8 AFAIK. The most common language, in my experience, where this assumption fails is Chinese. (Edit: I read up on it and turns out that *all* languages are encodable in UTF-8, it's just that that encoding is designed to be space-efficient for Latin languages, but is rather inefficient for Asian languages, hence the common choice of different encodings there.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15153#issuecomment-2040504962:844,safe,safe,844,https://root.cern,https://github.com/root-project/root/issues/15153#issuecomment-2040504962,2,"['avoid', 'safe']","['avoid', 'safe']"
Safety,Interpreter::TCling::AutoParse>: Starting autoparse for HepMC::Flow. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC::Flow; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC::Flow. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC::Flow; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC::Flow. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC::Flow; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC::Flow. Info in <TInterpreter::TCling::AutoLoad>: Explicitly disabled (the class name is HepMC::Flow); TClass::GetClass: Header Parsing - The representation of HepMC::Flow was not found in the type system. A lookup in the interpreter is about to be tried: this can cause parsing. This can be avoided selecting HepMC::Flow in the linkdef/selection file.; Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC::GenEvent; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC::GenEvent. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC::GenEvent; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC::GenEvent. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC::GenEvent; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC::GenEvent. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC::GenEvent; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC::GenEvent. ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10910#issuecomment-1268084280:8083,avoid,avoided,8083,https://root.cern,https://github.com/root-project/root/pull/10910#issuecomment-1268084280,1,['avoid'],['avoided']
Safety,"Introduce a new connectivity check macro to only check for internet connection if needed. If the connection check fails, it means that the feature requiring the; internet connection has to be disabled. This is not allowed when; `fail-on-missing=ON`. Therefore, we can raise the fatal error already in; the connectivity check macro, to avoid some code repetition. The connectivity check macro takes parameter to propagate a hint; to the user on what option to set if he wants to avoid the configuration; code branch that requires the connection check. Also, move all connection check related things in; `SearchInstalledSoftware` to keep things simpler. This PR implements something suggested by @pcanal in this comment: https://github.com/root-project/root/pull/15467#discussion_r1596973607. Closes #11603.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16594:335,avoid,avoid,335,https://root.cern,https://github.com/root-project/root/pull/16594,2,['avoid'],['avoid']
Safety,"Introduce a new method to get a label for the data source that the current RDataFrame is processing. There are three major types:; * The dataframe will process a TTree dataset; * The dataframe will process an empty dataset; * The dataframe will process data from an RDataSource. The function returns a label with the suffix ""DS"" also for the first two cases, to be aligned as much as possible with the RDataSource infrastructure. Make use of this function in distributed RDataFrame to create the headnode of the Python computation graph. This also avoids extra parsing in the factory function which includes opening the first input file once more to distinguish between TTree or RNTuple input (in case the first input argument is a string).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15554:548,avoid,avoids,548,https://root.cern,https://github.com/root-project/root/pull/15554,1,['avoid'],['avoids']
Safety,"Introduce an internal elper class to build a map object that only uses `std::vector`, which can be implicitly converted to `std::map` in C++. This avoids using `std::map` in pythonizations, which can cause assertion failures in Windows debug builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16156:147,avoid,avoids,147,https://root.cern,https://github.com/root-project/root/pull/16156,1,['avoid'],['avoids']
Safety,"Introduce special handler for connecting and disconnecting events; Avoid usage of predefined ""CONN_READY"" and ""CONN_CLOSED"" arguments; Adjust existing widgets and tutorials; These changes in callbacks **brakes backward compatibility** - in my mind, it was necessary. Hide RWebWindowsManager for ordinary users - provide convenience `RWebWindow::Create()` and `RWebWindow::TerinateROOT()` methods. Now one can include just `ROOT/RWebWindow.hxx` to get all necessary functionality. Provide tutorial with simple openui5 panel - of course, using new methods",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4035:67,Avoid,Avoid,67,https://root.cern,https://github.com/root-project/root/pull/4035,1,['Avoid'],['Avoid']
Safety,Introduced by https://github.com/root-project/root/commit/617f5fb4fab9b92b2a95e506b4801364473672bc. The change to a variable length size was not properly propagated to the rest of the `TBranch::Init` function. Fixes the recent ubuntu24 failures of the type; ```; 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec; -- TEST COMMAND -- ; cd /github/home/ROOT-CI/roottest/root/tree/branches; /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest; -- BEGIN TEST OUTPUT --; /usr/bin/gmake -f Makefile test; gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'; ; Processing runnoname.C...; Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'.; *** buffer overflow detected ***: terminated; Aborted (core dumped); gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'; ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15620:487,timeout,timeout,487,https://root.cern,https://github.com/root-project/root/pull/15620,3,"['Abort', 'detect', 'timeout']","['Aborted', 'detected', 'timeout']"
Safety,Is that possible to use the precompilled version of root either on Linux or Mac to avoid installation issues?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6344#issuecomment-693443249:83,avoid,avoid,83,https://root.cern,https://github.com/root-project/root/issues/6344#issuecomment-693443249,1,['avoid'],['avoid']
Safety,Is this still needed? Can we safely merge?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1162#issuecomment-346836497:29,safe,safely,29,https://root.cern,https://github.com/root-project/root/pull/1162#issuecomment-346836497,1,['safe'],['safely']
Safety,Isn't this only handling one single case (in a non-thread-safe way) out of many MT failure modes in this function? What it the `link` got deleted? What if the `obj` currently gets deleted?. I.e. I'm not sure this is sufficient. I remember that Philippe and Chris Jones have tried several times to make `RecursiveRemove()` more cooperative and failed. I would prefer to have his opinion on this before this gets merged.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/719#issuecomment-312184613:58,safe,safe,58,https://root.cern,https://github.com/root-project/root/pull/719#issuecomment-312184613,1,['safe'],['safe']
Safety,It fully duplicates TPave::fName member and not required here; Detected in JSON code for TPaletteAxis class,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7490:63,Detect,Detected,63,https://root.cern,https://github.com/root-project/root/pull/7490,1,['Detect'],['Detected']
Safety,It is a minor fix but I though it would be nice to have the complete list since; I always forget the style names for polymarkers and use this documentation as; a reference. May also save someone else's time by avoiding a lookup in the; header file.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/98:210,avoid,avoiding,210,https://root.cern,https://github.com/root-project/root/pull/98,1,['avoid'],['avoiding']
Safety,"It is broken by design, there is no way that this interface can; be used in a safe way. Just get rid of it.# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12166:78,safe,safe,78,https://root.cern,https://github.com/root-project/root/pull/12166,1,['safe'],['safe']
Safety,"It is now base class for `RLegend`, `RPaveText`, `RHistStatsBox`.; Main functionality - consistent positioning relative to the `RFrame`. ; But also drawing without frame is possible - in that case just default frame position will be used.; Plus interactive moving of `RPave` around. Improve `RLegend` class. Now it correctly drawn and can be interactively moved.; Also one can configure custom attributes disregard of other drawables.; Also special I/O mechanism is used to avoid large data transfer of RLegend::REntry - ; referenced drawable ""masked out"" before streaming. Introduce `RPaveText` class. Update JSROOT code correspondingly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5897:474,avoid,avoid,474,https://root.cern,https://github.com/root-project/root/pull/5897,1,['avoid'],['avoid']
Safety,"It is now possible to create independent TMVA::Readers and use; them simultaneously on different threads.; Training of MVAs is still only safe single-threaded. In addition,; it is not safe to use multiple instances of MethodCFMlpANN either; single or multi-threaded because of a global 'this' pointer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/25:138,safe,safe,138,https://root.cern,https://github.com/root-project/root/pull/25,2,['safe'],['safe']
Safety,"It is true that in the past versions TEfficiency was added automatically to gDIrectory. ; Although I am not keen on this, I think it would be better to maintain the past behavior.; The commit causing this was https://github.com/root-project/root/commit/ab9b80a651d458f5cf64d8d9aa5708495c00da4e; which was done to fix some thread issue and to avoid using the global `TH1::AddDirectoryStatus`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9189#issuecomment-964342093:342,avoid,avoid,342,https://root.cern,https://github.com/root-project/root/issues/9189#issuecomment-964342093,1,['avoid'],['avoid']
Safety,"It looks like the ""easy"" solution to add these 2 lines in the end of `Finalize` *work*. Cannot tell if it can go unsafe:; ```cpp; for (auto it = ++fGraphs.begin(); it != fGraphs.end(); ++it); delete *it;; ```; (and `fGraphAsymmErrors` for the other class accordingly)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10484#issuecomment-1112308278:113,unsafe,unsafe,113,https://root.cern,https://github.com/root-project/root/issues/10484#issuecomment-1112308278,1,['unsafe'],['unsafe']
Safety,"It makes recovery of column values slightly faster, which is visible in rootbench.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6325:9,recover,recovery,9,https://root.cern,https://github.com/root-project/root/pull/6325,1,['recover'],['recovery']
Safety,"It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas; on the client side, but does not wait that real update is completed.; Avoids blocking of caller thread.; Have to be used if called from other web-based widget to avoid logical; dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13552:169,Avoid,Avoids,169,https://root.cern,https://github.com/root-project/root/pull/13552,2,"['Avoid', 'avoid']","['Avoids', 'avoid']"
Safety,"It seems that there are two ways to use it within cmake: http://stackoverflow.com/questions/30951492/how-to-use-the-tool-include-what-you-use-together-with-cmake-to-detect-unused-he. Vassil; Msg sent from my phone. Please excuse my brevity. > On Mar 10, 2017, at 17:21, pseyfert <notifications@github.com> wrote:; > ; > need to check. i didn't get iwyu running with cmake and haven't used ./configure since quite a while.; > i had tried it back then for roofit and realised it caused problems in my own ""third party"" code if a class A has a method to return a pointer to an instance of class B, but A.h doesn't include B.h.; > ; > —; > You are receiving this because you were assigned.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/123#issuecomment-285738117:165,detect,detect-unused-he,165,https://root.cern,https://github.com/root-project/root/pull/123#issuecomment-285738117,1,['detect'],['detect-unused-he']
Safety,It was deprecated (by comment) and emptied in year 2000. This patch removes all uses of it and 'registers' it to the modulemap to avoid our duplication algorithms do not find it as a duplicate.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2500:130,avoid,avoid,130,https://root.cern,https://github.com/root-project/root/pull/2500,1,['avoid'],['avoid']
Safety,"It will be central method to paint any primitive on specified pad. To support all kinds of old implementations in TObject class Paint() method will be implemented as:; ```; void TObject::Paint(Option_t *opt); {; if (gPad) ; PaintOn(gPad);; }; ```. Main trick will be painting of pad primitives. There one can use semi-standard method to detect ; if custom `Paint()` method implemented for the object. If yes - such old `Paint()` will be invoked.; ```; if ((void *) (obj->*(&TObject::Paint)) != (void *) (&TObject::Paint)); obj->Paint(lnk->GetOption());; else; obj->PaintOn(this, lnk->GetOption());; ```. If class converted into new scheme - `Paint()` method **MUST** be re removed and replaced by new `PaintOn()`. This is very important to support sub-classes of classes like `TLine` or `TBox`. `TLine::PaintOn()` implemented from very beginning, but `SubClass::Paint()` will exists. Calling scheme will be: `SubClass::Paint()` -> `TObject::Paint()` -> `TLine::PaintOn()`. Step-by-step in all ROOT classes one will implement `PaintOn()` methods - without breaking any existing code.; PR shows example with several ""simple"" classes how it can be done. . During ROOT code modifications graphics continues to work as before. ; But contentiously usage of `gPad` will be reduced.; Main goal - `gPad` should not be touched when painting ROOT classes. ; Only to support arbitrary user classes one will keep `TObject::PaintOn()` as shown. After code conversion is completed, one can declare ; special methods which are using `gPad` (like `TLine::PaintLineNDC()`) deprecated and ; advertise use of new methods (like `TLine::PaintLineNDCOn()`). Ultimate goal - painting of main ROOT classes do not touch `gPad` and thus will be really thread-safe. Interactive methods (like moving stats box around) will still rely on `gPad`, ; but this pointer will not be touched during any re-painting and will remain consistent.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15937:337,detect,detect,337,https://root.cern,https://github.com/root-project/root/pull/15937,2,"['detect', 'safe']","['detect', 'safe']"
Safety,"It would be better, if you rename TClientInfo -> TMPIClientInfo to avoid confusion",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4375#issuecomment-530319854:67,avoid,avoid,67,https://root.cern,https://github.com/root-project/root/pull/4375#issuecomment-530319854,1,['avoid'],['avoid']
Safety,"It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```; genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed.; --; /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12138:901,Abort,Aborted,901,https://root.cern,https://github.com/root-project/root/issues/12138,1,['Abort'],['Aborted']
Safety,"It would greatly help memory safety if ROOT could use more smart pointers in its interfaces. However, the automatic downcasting of returned values is only working for raw pointers. It should work for smart pointers as well. For example, right now this doesn't work:; ```Python; class ClassA {; public:. ClassDef(ClassA, 0);; };. class ClassB : public ClassA {; public:; void helloB() {}. ClassDef(ClassB, 0);; };. ClassA *fooRawPtr() { return new ClassB{}; }. std::unique_ptr<ClassA> fooUniquePtr() { return std::make_unique<ClassB>(); }; ```; Output:; ```txt; <class cppyy.gbl.ClassB at 0x5e1ddf85ed20>; Traceback (most recent call last):; File ""/home/rembserj/repro.py"", line 30, in <module>; out_2.helloB(); ^^^^^^^^^^^^; AttributeError: 'ClassA' object has no attribute 'helloB'; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16210:29,safe,safety,29,https://root.cern,https://github.com/root-project/root/issues/16210,1,['safe'],['safety']
Safety,"It's also version-checked for precisely those older PyPy interpreters that require the compatibility layer:. ```; version = sys.pypy_version_info; if version[0] == 5:; if 6 < version[1] <= 8:; pypy58_57_compat(); elif version[1] == 9:; py59_compat(); ```. so even if/when PyPy supports 3.12, it's still a non-issue. At some point, this code may be safely removed, especially as I've had zero time to work on the PyPy end of things, but as-is, it's harmless.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14824#issuecomment-1964569486:348,safe,safely,348,https://root.cern,https://github.com/root-project/root/issues/14824#issuecomment-1964569486,1,['safe'],['safely']
Safety,"It's fair to say that in my example the missing explicit destructor is the issue. So yes, in this particular case, since `ROOT::Internal::TaskArenaWrapper` doesn't have a public constructor, I guess just having a custom implementation for the constructor and destructor is fine. In the end my point still stands. If you need to anyway put a custom implementation of all constructors/destructor into your source file, you might as well avoid using a smart pointer. As I still maintain that smart pointers in such cases are just not a good fit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7062#issuecomment-762864629:435,avoid,avoid,435,https://root.cern,https://github.com/root-project/root/pull/7062#issuecomment-762864629,1,['avoid'],['avoid']
Safety,"It's not great that we have to consider all these redundant overloads. I would suggest getting rid of them first, to keep the interface clean and consistent:; * https://github.com/root-project/root/pull/16443; ; What do you think, @lmoneta?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16437#issuecomment-2353578161:50,redund,redundant,50,https://root.cern,https://github.com/root-project/root/pull/16437#issuecomment-2353578161,1,['redund'],['redundant']
Safety,"It's not necessary because the data token is not set for `RooRealVar`s to begin with:; https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooFit/Evaluator.cxx#L185. And by not doing this unnecessary resetting, we avoid potential crashes in case the `RooRealVar`s live not as long as the evaluator.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15844:233,avoid,avoid,233,https://root.cern,https://github.com/root-project/root/pull/15844,1,['avoid'],['avoid']
Safety,"I’ve recently updated my ROOT version to v6.20.06 and my once working code snippet to plot several pdf components on the same canvas broke. No matter if I select the pdf components by object reference or by name, i.e. by:. ```; modelTot.plotOn(frame, RooFit::Components(“ modelBkgTotTrig*”),; FillColor(93), LineColor(93), DrawOption(“F”));; ```. or by:. ```; modelTot.plotOn(frame, RooFit::Components(RooArgSet(expo)),; FillColor(93), LineColor(93), DrawOption(“F”));; ```. I get:. ```; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelTot0) directly selected PDF components: (modelBkgTotTrig0); [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelTot0) indirectly selected PDF components: (); terminate called after throwing an instance of 'std::regex_error'; what(): Unexpected character in brace expression.; Aborted (core dumped); ```. It looks like they are found but then the regex_error appears.; Is this a known issure or shall I do something different to select the pdfs to plot?. Thanks,; Davide",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7115:802,Abort,Aborted,802,https://root.cern,https://github.com/root-project/root/issues/7115,1,['Abort'],['Aborted']
Safety,"JBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=NTi7%2BFO82QY6dKBp1en9fAODpFl%2FzZ0cHCZ3DsJzOIM%3D&reserved=0>; >>> ; >>> curl performs SSL certificate verification by default, using a ""bundle""; >>> of Certificate Authority (CA) public keys (CA certs). If the default; >>> bundle file isn't adequate, you can specify an alternate file; >>> using the --cacert option.; >>> If this HTTPS server uses a certificate signed by a CA represented in; >>> the bundle, the certificate verification probably failed due to a; >>> problem with the certificate (it might be expired, or the name might; >>> not match the domain name in the URL).; >>> If you'd like to turn off curl's verification of the certificate, use; >>> the -k (or --insecure) option.; >>> ***@***.*** t5]$ ; >> ; >> ; >> I am unfamiliar with how to use curl with X509 and everything I tried so far has not worked. eg; >> curl -v https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Cdqing%40triumf.ca%7C96f8066e53054f808afe08d9156b7b02%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564373643157499%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=56%2Fzdx8AYUMDio2HJ6lKgj%2BEhDVoS5nYEh69aXHYZS8%3D&reserved=0> --key ~/.globus/userkey.pem --cert ~/.globus/usercert.pem; >> or; >> curl -v https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Cdqing%40triumf.ca%7C96f8066e53054f808afe08d9156b7b02%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564373643157499%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiL",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-839972447:5433,safe,safelinks,5433,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-839972447,1,['safe'],['safelinks']
Safety,Jenkins failed because I aborted it. The changes are only comments.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6836#issuecomment-729646855:25,abort,aborted,25,https://root.cern,https://github.com/root-project/root/pull/6836#issuecomment-729646855,1,['abort'],['aborted']
Safety,"Jenkins is green, the failures on the new CI seem unrelated (Windows has `Failed to open the S3 connection: You must provide an auth secret.`, Fedora is a timeout in a distrdf test). Given that this PR fixes a recurring failure in nightlies/PR builds, I will go ahead and merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14800#issuecomment-1962144958:155,timeout,timeout,155,https://root.cern,https://github.com/root-project/root/pull/14800#issuecomment-1962144958,1,['timeout'],['timeout']
Safety,"Just a reminder that when writing (new) function that break const-ness, one need to consider the consequence on thread-safety (i.e. in first approximation the user might expect that if they do only const calls to an another it is safe to make them from multiple threads). .. humm actually this is odder ... the return type of genData is a const pointer. Do we know even know why?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1721#issuecomment-371797064:119,safe,safety,119,https://root.cern,https://github.com/root-project/root/pull/1721#issuecomment-371797064,2,['safe'],"['safe', 'safety']"
Safety,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops; - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers; - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts; - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`; The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7709#issuecomment-910143432:682,timeout,timeouts,682,https://root.cern,https://github.com/root-project/root/issues/7709#issuecomment-910143432,2,"['avoid', 'timeout']","['avoid', 'timeouts']"
Safety,"Just for the records, working with a software that uses ROOT as a library and switching on the address sanitiser in our unit tests, we get the following report with all `6.28.XX` versions:; ```; ==15==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 8792 byte(s) in 75 object(s) allocated from:; #0 0x7ff05e914887 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:145; #1 0x7ff04609ad21 in clang::Parser::AnnotateTemplateIdToken(clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::CXXScopeSpec&, clang::SourceLocation, clang::UnqualifiedId&, bool, bool) (/SMASH/root_install/lib/libCling.so+0x15b5d21). SUMMARY: AddressSanitizer: 8792 byte(s) leaked in 75 allocation(s).; ```; **Using ROOT `6.26.10` does not display the problem.**. I am not sure this is exactly the same problem of this issue, but I did not want to open a new issue at first as in the description `clang::Parser::AnnotateTemplateIdToken` is part of the Valgrind output. If you need more information from my side, feel free to ask.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13130#issuecomment-1798152115:223,detect,detected,223,https://root.cern,https://github.com/root-project/root/issues/13130#issuecomment-1798152115,1,['detect'],['detected']
Safety,"Just to be on the safe side I will not merge this PR until I have time to check with the people who saw the building errors before, probably next week (if not possible, after CSC)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2723#issuecomment-426270761:18,safe,safe,18,https://root.cern,https://github.com/root-project/root/pull/2723#issuecomment-426270761,1,['safe'],['safe']
Safety,Kindly run the ROOT CI TEST action in order to avoid conflicts.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13394#issuecomment-1664399238:47,avoid,avoid,47,https://root.cern,https://github.com/root-project/root/pull/13394#issuecomment-1664399238,1,['avoid'],['avoid']
Safety,"LGTM if the bots are green. I'd expect, in long term, to avoid calling the entire routine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/912#issuecomment-326300629:57,avoid,avoid,57,https://root.cern,https://github.com/root-project/root/pull/912#issuecomment-326300629,1,['avoid'],['avoid']
Safety,"LGTM, basically we need to carry around the pointers to the leaves we have already visited, and discard any new leaf that has the same pointer. The overall logic stays the same with this extra check to avoid the leaf duplicates.; I shared some more ROOT files with @imaxoi to test his code with other trees.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2443#issuecomment-411053878:202,avoid,avoid,202,https://root.cern,https://github.com/root-project/root/pull/2443#issuecomment-411053878,1,['avoid'],['avoid']
Safety,"LLVM had a bug where constructors with the same priority would not be stably sorted. This has been fixed upstream by https://github.com/llvm/llvm-project/pull/95532, but to avoid relying on a backport this commit works around the issue: The idea is that we lower the default priority of concerned constructors to make them sort correctly. ---. As discussed, this provides a bit of magic :magic_wand: to work around the bug if we don't have the backport, for example in the Conda releases. I propose we still leave the backport in our copy of LLVM though.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16420:173,avoid,avoid,173,https://root.cern,https://github.com/root-project/root/pull/16420,1,['avoid'],['avoid']
Safety,"LLVM had a bug where constructors with the same priority would not be stably sorted. This has been fixed upstream by; https://github.com/llvm/llvm-project/pull/95532, but to avoid relying on a backport this commit works around the issue: The idea is that we lower the default priority of concerned constructors to make them sort correctly. (cherry picked from commit https://github.com/root-project/root/commit/7db43f776d191807c1e4893312fabce7c60160bd, backport of https://github.com/root-project/root/pull/16420)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16462:174,avoid,avoid,174,https://root.cern,https://github.com/root-project/root/pull/16462,1,['avoid'],['avoid']
Safety,"LRngWrapper` pointer and thus invokes its dtor as well. However, `~GSLRngWrapper()` frees the allocated memory only if `fOwn` pointer is set to true, which is only set so in the assignment operator, but not in the `Allocate()` member function. Therefore, the `GSLMCIntegrator` class is leaking memory. This poses a problem, when doing a large number of integrations inside a for loop. The leak was discovered by running valgrind and inspecting the code. Minimal example:; ```cpp; #include <Math/GSLMCIntegrator.h> // ROOT::Math::GSLMCIntegrator. /* built with:. g++ -ggdb3 -Og `root-config --cflags` mcintegrator.cpp -o mcintegrator \; `root-config --libs` -lMathMore. */. int; main(); {; for(unsigned i = 0; i < 20000; ++i); {; ROOT::Math::GSLMCIntegrator vegas(""vegas"", 0., 1.e-1, 10);; }; return 0;; }; ```. Before fix:; ```; valgrind --tool=memcheck --leak-check=full --show-leak-kinds=definite \; --undef-value-errors=no ./mcintegrator. ==12320== Memcheck, a memory error detector; ==12320== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==12320== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info; ==12320== Command: ./mcintegrator; ==12320==; ==12320==; ==12320== HEAP SUMMARY:; ==12320== in use at exit: 100,655,858 bytes in 44,260 blocks; ==12320== total heap usage: 67,782 allocs, 23,522 frees, 101,539,078 bytes allocated; ==12320==; ==12320== 99,089,984 (319,984 direct, 98,770,000 indirect) bytes in 19,999 blocks are definitely lost in loss record 3,515 of 3,515; ==12320== at 0x4C2BE7F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so); ==12320== by 0xAD090F2: gsl_rng_alloc (in /usr/lib/libgsl.so.23.0.0); ==12320== by 0x8223765: Allocate (GSLRngWrapper.h:99); ==12320== by 0x8223765: ROOT::Math::GSLMCIntegrator::GSLMCIntegrator(char const*, double, double, unsigned int) (GSLMCIntegrator.cxx:117); ==12320== by 0x108BF5: main (mcintegrator.cpp:8); ==12320==; ==12320== LEAK SUMMARY:; ==12320== definitely lost: 319,984 bytes in 19,9",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/928:1281,detect,detector,1281,https://root.cern,https://github.com/root-project/root/pull/928,1,['detect'],['detector']
Safety,"Last point - when I generate signature ClassName(*((__void__*)nullptr)), I get warning from cling:; ```; binding dereferenced null pointer to reference has undefined behavior [-Wnull-dereference]; ```; How one can avoid it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5133#issuecomment-598202387:214,avoid,avoid,214,https://root.cern,https://github.com/root-project/root/pull/5133#issuecomment-598202387,1,['avoid'],['avoid']
Safety,"Latest commit includes small modification suggested by Enrico, also including a more homogeneous approach wrt sanity checks across the three functions, i.e. anytime `TChain::GetListOfFiles` is called, the check `if (!chainFiles || chainFiles->GetEntries() == 0)` is present and throws an error if true, according to what was previously done in function `GetTreeFullPaths` only",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7785#issuecomment-814890257:110,sanity check,sanity checks,110,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-814890257,1,['sanity check'],['sanity checks']
Safety,"Latest commit switches to transient atomics while the parallel flush is ongoing; after completion, the values in the atomics are added back into the main non-thread-safe counter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/277#issuecomment-252147697:165,safe,safe,165,https://root.cern,https://github.com/root-project/root/pull/277#issuecomment-252147697,1,['safe'],['safe']
Safety,Let avoid compiler warnings if sub-project compiled with `-Wsuggest-override` . Only some classes are adjusted,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10444:4,avoid,avoid,4,https://root.cern,https://github.com/root-project/root/pull/10444,1,['avoid'],['avoid']
Safety,"Let's see how this goes now that we are back on the old externals... I would prefer avoiding the smart pointers with ROOT 6 interfaces, because I'm sure there are corner cases where it will lead to problems, and I pointed out some of it in previous comments. Other than that, I once this PR is ready for merge, the typos, etc, should be amended into the right commits.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1073#issuecomment-333487667:84,avoid,avoiding,84,https://root.cern,https://github.com/root-project/root/pull/1073#issuecomment-333487667,1,['avoid'],['avoiding']
Safety,"Like the tests added in https://github.com/root-project/root/pull/15499/commits/e00aded416c4d8b0c364035353dfb529602fd0e1, these are also sanity checks meant in part as code-as-documentation for users to see how things work. It turns out in this case that GCC on the one hand and Clang and MSVC on the other hand have two different solutions for binary arithmetic operations on two NaNs. In both cases, one of the two NaNs is returned, but in one case it's the first, in the other is it's the second. The tests added in this commit will hopefully warn RooNaNPacker users of this behavior.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15908:137,sanity check,sanity checks,137,https://root.cern,https://github.com/root-project/root/pull/15908,1,['sanity check'],['sanity checks']
Safety,"Link to compilation error:; https://epsft-jenkins.cern.ch/view/ROOT%20Nightly/job/root-nightly-master/1977/LABEL=mac1012,SPEC=noimt/parsed_console/. The error is due to a bug in clang3.5, reproducible in isolation:; https://godbolt.org/z/jtYXv6. The workaround is to avoid specifying the template parameters of a; template base class -- the full type is injected in the derived class; anyway (thanks Axel!).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3098:267,avoid,avoid,267,https://root.cern,https://github.com/root-project/root/pull/3098,1,['avoid'],['avoid']
Safety,"Linux and macOS passed in the new CI, and Windows passed on Jenkins (plus some Linux and macOS builds), so I'm going to merge this slightly early to avoid the annoying warning.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13073#issuecomment-1602756936:149,avoid,avoid,149,https://root.cern,https://github.com/root-project/root/pull/13073#issuecomment-1602756936,1,['avoid'],['avoid']
Safety,List of changes in JSROOT. 1. Fix - abort tree draw operation faster. 1. Fix - catch exception when parsing TF1 formula; 2. Fix - properly check THStack histograms axes when doing sum; 3. Fix - correctly handle negative offset on time axis; 4. Fix - do not use `inset` because of old Chrome browsers; 5. Fix - properly provide object hints. 1. Fix - draw histograms with negative bins #276; 2. Fix - correctly read TLeaf with fixed-size array; 3. Fix - bug in options handling in startGUI; 4. Fix - greyscale support in TLegend drawing; 5. Fix - correctly use text font for TGaxis title; 6. Fix - preserve auto colors in THStack #277; 7. Fix - correctly set pave name #278,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14804:36,abort,abort,36,https://root.cern,https://github.com/root-project/root/pull/14804,1,['abort'],['abort']
Safety,Long time ago this protection was introduced to avoid parsing of complex SQL includes.; With a cling this protection no longer work properly.; Remove it completely,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5255:48,avoid,avoid,48,https://root.cern,https://github.com/root-project/root/pull/5255,1,['avoid'],['avoid']
Safety,"Looking at the code again, I believe the following should be more obvious and easier to understand in the future:; ```c++; std::string canonicalLoadedLib;; if (resolved) {; canonicalLoadedLib = libStem.str();; } else {; canonicalLoadedLib = lookupLibrary(libStem);; if (canonicalLoadedLib.empty()); return kLoadLibNotFound;; }; ```; That should also avoid copying the string twice.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10593#issuecomment-1129730852:350,avoid,avoid,350,https://root.cern,https://github.com/root-project/root/pull/10593#issuecomment-1129730852,1,['avoid'],['avoid']
Safety,"Looking at the code, it was probably the idea at some point in the `RooAbsData` design that the ownership of the variables in the dataset can be shared, i.e. that the outside world can ""claim"" and ""release"" the variables in a RooAbsData. If anything else is still claiming the variables, they will not be deleted by the RooAbsData destructor. That's quite messy. For example, if the RooAbsData is destructed before the external ""claimers"" releases the variables, the claimers suddenly has the responsability to delete the variables themselves. And who of them should do it then? The ownership model is completely unclear. This and other reasons explain probably why the; `RooAbsData::claimVars()` and `RooAbsData::releaseVars()` are not used at all outside the RooAbsData, and this commit suggests to remove these memory-unsafe functions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13179:821,unsafe,unsafe,821,https://root.cern,https://github.com/root-project/root/pull/13179,1,['unsafe'],['unsafe']
Safety,"Looking for LZMA; -- Looking for X11; -- Could NOT find GIF (missing: GIF_LIBRARY GIF_INCLUDE_DIR); -- Could NOT find TIFF (missing: TIFF_LIBRARY TIFF_INCLUDE_DIR); -- Could NOT find PNG (missing: PNG_LIBRARY PNG_PNG_INCLUDE_DIR); -- Could NOT find JPEG (missing: JPEG_LIBRARY JPEG_INCLUDE_DIR); -- Building AfterImage library included in ROOT itself; -- Looking for LibXml2; -- Downloading and building XROOTD version; -- Cannot select cudnn without selecting cuda or tmva-gpu. Option is ignored; -- Building LLVM in 'Release' mode.; -- Could NOT find Z3: Found unsuitable version ""0.0.0"", but required is at least ""4.7.1"" (found Z3_LIBRARIES-NOTFOUND); -- Native target architecture is X86; -- Threads disabled.; -- Doxygen disabled.; -- Go bindings disabled.; -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH); -- OCaml bindings disabled.; -- LLVM host triple: x86_64-unknown-linux-gnu; -- LLVM default target triple: x86_64-unknown-linux-gnu; -- Building with -fPIC; -- Constructing LLVMBuild project information; -- Linker detection: GNU ld; -- Targeting X86; -- Targeting NVPTX; -- Clang version: 9.0.1; -- Cling version (from VERSION file): ROOT_0.9; -- Cling will look for C++ headers in '/usr/bin/../lib64/gcc/x86_64-suse-linux/10/../../../../include/c++/10:/usr/bin/../lib64/gcc/x86_64-suse-linux/10/../../../../include/c++/10/x86_64-suse-linux:/usr/bin/../lib64/gcc/x86_64-suse-linux/10/../../../../include/c++/10/backward' at runtime.; -- And then fallback to: 'clang-12.0.0'; -- Performing Test found_stdstringview; -- Performing Test found_stdstringview - Failed; -- Performing Test found_stdexpstringview; -- Performing Test found_stdexpstringview - Success; -- Performing Test found_stod_stringview; -- Performing Test found_stod_stringview - Failed; -- Performing Test found_stdapply; -- Performing Test found_stdapply - Failed; -- Performing Test found_stdinvoke; -- Performing Test found_stdinvoke - Failed; -- Performing Test found_stdindexsequence; -- ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8097:3288,detect,detection,3288,https://root.cern,https://github.com/root-project/root/issues/8097,1,['detect'],['detection']
Safety,"Looking into that. This kind of overlap where all the vertices of one shape are outside (or worse on the surface) of the other can be missed, because TGeo does not generate points on the surface of the solids (as the Geant4 checker). Some overlaps like this can be detected if increasing the number of points generated on the segments connecting adjacent vertices, using:; `gGeoManager->SetNmeshPoints(N); // where the default is 1000, so N has to be larger`; This does not help in this particular case. Note that this is not a bug, but a known limitation of the algorithm used in ROOT, having a strategy to allow some false negatives to gain checking speed. I'll see if something can be done w/o producing false positives.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6556#issuecomment-704316189:265,detect,detected,265,https://root.cern,https://github.com/root-project/root/issues/6556#issuecomment-704316189,1,['detect'],['detected']
Safety,Looks like `TThread` is not able to correctly detect python thread id?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15498#issuecomment-2149507064:46,detect,detect,46,https://root.cern,https://github.com/root-project/root/issues/15498#issuecomment-2149507064,1,['detect'],['detect']
Safety,Looks like all these tests are failed because of timeout?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7932#issuecomment-823968745:49,timeout,timeout,49,https://root.cern,https://github.com/root-project/root/pull/7932#issuecomment-823968745,1,['timeout'],['timeout']
Safety,Looks like the jenkins build is having problems with the checkout ? Its failing with. ```; ERROR: Timeout after 10 minutes; ERROR: Error fetching remote repo 'origin'; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/453#issuecomment-288187928:98,Timeout,Timeout,98,https://root.cern,https://github.com/root-project/root/pull/453#issuecomment-288187928,1,['Timeout'],['Timeout']
Safety,"Looks like the mac build just got aborted. I will remove the LLVM change, since it's in a separate PR and re-run Jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4342#issuecomment-528731373:34,abort,aborted,34,https://root.cern,https://github.com/root-project/root/pull/4342#issuecomment-528731373,1,['abort'],['aborted']
Safety,"MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include -compilerI/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -compilerI/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.0.0/include -compilerI/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include -compilerI/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -I/Users/suter_a/Applications/root/root_exec/include -I/opt/local/include -I/Users/suter_a/Applications/musrfit/src/include -I/Users/suter_a/Applications/musrfit/src/classes PUserFcnBase.h /Users/suter_a/Applications/musrfit/src/include/PUserFcnBaseLinkDef.h; dyld[7935]: Library not loaded: @rpath/libRIO.so; Referenced from: /Users/suter_a/Applications/root/root_exec/bin/rootcling; Reason: tried: '/usr/local/lib/libRIO.so' (no such file), '/usr/lib/libRIO.so' (no such file); Subprocess aborted; make[2]: *** [src/classes/PUserFcnBaseDict.cxx] Error 1; make[1]: *** [src/classes/CMakeFiles/PUserFcnBase.dir/all] Error 2; make: *** [all] Error 2. root v6-26 with patch; ---------------------; cd /Users/suter_a/Applications/musrfit/build/src/classes && /opt/local/bin/cmake -E env DYLD_LIBRARY_PATH=/Users/suter_a/Applications/root/root_exec/lib: /Users/suter_a/Applications/root/root_exec/bin/rootcling -v2 -f PUserFcnBaseDict.cxx -s /Users/suter_a/Applications/musrfit/build/src/classes/libPUserFcnBase.dylib -rml libPUserFcnBase.dylib -rmf /Users/suter_a/Applications/musrfit/build/src/classes/libPUserFcnBase.rootmap -inlineInputHeader -I/opt/local/include -I/Users/suter_a/Applications/musrfit/src/include -DPNEXUS_ENABLED -compilerI/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1 -compilerI/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.0.0/include -compilerI/Applications/X",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10062#issuecomment-1061481610:2080,abort,aborted,2080,https://root.cern,https://github.com/root-project/root/issues/10062#issuecomment-1061481610,1,['abort'],['aborted']
Safety,Made TIsAProxy thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/49:22,safe,safe,22,https://root.cern,https://github.com/root-project/root/pull/49,1,['safe'],['safe']
Safety,Made calling TGenCollectionStreamer::Generate thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/57:53,safe,safe,53,https://root.cern,https://github.com/root-project/root/pull/57,2,['safe'],['safe']
Safety,"Made obtaining the list of enums from a TClass thread safe. As part of that, made all the statics used as return values by TCling to be thread_local.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/55:54,safe,safe,54,https://root.cern,https://github.com/root-project/root/pull/55,1,['safe'],['safe']
Safety,Made reading/writing ROOT files thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12:39,safe,safe,39,https://root.cern,https://github.com/root-project/root/pull/12,1,['safe'],['safe']
Safety,Made smatrix code thread safe by removing statics,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/20:25,safe,safe,25,https://root.cern,https://github.com/root-project/root/pull/20,1,['safe'],['safe']
Safety,Main GUI-related classes should be collected in `core/gui` folder.; Avoid situation like TToggle class situated in `core/meta` subfolder,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4543:68,Avoid,Avoid,68,https://root.cern,https://github.com/root-project/root/pull/4543,1,['Avoid'],['Avoid']
Safety,"Make ConditionalObservables accept RooRealVars directly by perfect forwarding all arguments to the RooArgSet constructor. Using ConditionalObservables command argument failed with some Python 3; versions due to ownership problems with the RooArgSet. This commit suggests to always make a copy of (or move) the passed RooArgSet,; and at the same time to change the function signature such that; it can also accept an arbitrary number of observables directly via; variadic templates. This change is to fix the RooFit python tutorial failures in the current nightlies. Note, @Harshalzzzzzzz, that you can reuse this pattern also for the other RooGlobalFuncs, as it also makes calling them more pythonic. For example, with ConditionalObservables, you can now use a tuple (or list) of arguments:; ```Python; effPdf.fitTo(data, ConditionalObservables=(x, y)); ```; instead of:; ```Python; effPdf.fitTo(data, ConditionalObservables=ROOT.RooArgSet(x, y)); ```; although the latter syntax still works because it will use the RooArgSet copy constructor (or move constructor if it's a temporary and detected as such in Python). So we don't break any existing code. This example is from the [rf702_efficiencyfit_2D.py](https://github.com/root-project/root/blob/master/tutorials/roofit/rf702_efficiencyfit_2D.py) tutorial.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8416:1088,detect,detected,1088,https://root.cern,https://github.com/root-project/root/pull/8416,1,['detect'],['detected']
Safety,Make G__FastAllocString cache thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/34:37,safe,safe,37,https://root.cern,https://github.com/root-project/root/pull/34,1,['safe'],['safe']
Safety,Make TCheckHashRecurveRemoveConsistency thread-safe for RecursiveRemo…,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1339:47,safe,safe,47,https://root.cern,https://github.com/root-project/root/pull/1339,2,['safe'],['safe']
Safety,Make TClass::fIsAMethod setting thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/28:39,safe,safe,39,https://root.cern,https://github.com/root-project/root/pull/28,1,['safe'],['safe']
Safety,Make TClass::fStreamerImpl thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/51:34,safe,safe,34,https://root.cern,https://github.com/root-project/root/pull/51,1,['safe'],['safe']
Safety,Make TListOfFunctions::Get thread-safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/118:34,safe,safe,34,https://root.cern,https://github.com/root-project/root/pull/118,1,['safe'],['safe']
Safety,Make TMVA thread-safe with respect to use of Reader,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/25:17,safe,safe,17,https://root.cern,https://github.com/root-project/root/pull/25,1,['safe'],['safe']
Safety,Make TSystem::CompileMacro thread-safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13655:34,safe,safe,34,https://root.cern,https://github.com/root-project/root/pull/13655,1,['safe'],['safe']
Safety,Make string caching in RLoopManager thread-safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15652:43,safe,safe,43,https://root.cern,https://github.com/root-project/root/pull/15652,1,['safe'],['safe']
Safety,Make sure we're using the macOS-native framework version in the OpenGL case. See:; * https://cmake.org/cmake/help/latest/module/FindOpenGL.html#macos-specific; * https://github.com/root-project/root/blob/master/cmake/modules/SearchInstalledSoftware.cmake#L22. This avoids indirectly picking up a X11 dependency by using some other OpenGL installed on the system.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15435:265,avoid,avoids,265,https://root.cern,https://github.com/root-project/root/pull/15435,1,['avoid'],['avoids']
Safety,Make tutorial filenames unique to avoid overwrites,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3029:34,avoid,avoid,34,https://root.cern,https://github.com/root-project/root/pull/3029,1,['avoid'],['avoid']
Safety,"Manually aborted ""ROOT-debian10-i386/cxx14"" due to huge backlog.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5444#issuecomment-618626306:9,abort,aborted,9,https://root.cern,https://github.com/root-project/root/pull/5444#issuecomment-618626306,1,['abort'],['aborted']
Safety,"Many improvements in CEF:; - support POST requests, let transfer arbitrary data from client to server; - replace text-based cefQuery messaging by longpoll, required for binary transfer; - assign X11 error handler to avoid application abort in case of minor X11 warnings; - use single-process mode in batch to reduce number of running processes. Provide special handling of batch mode for Chrome and Firefox:; - both support `--headless` mode completely without X ; - very simple workaround to stop browser after 30 s with `timeout 30 chromium ...` command; - let configure custom shell commands via `.rootrc` parameters. Changes in http and webgui libraries:; - ""hide"" TCivetweb, TFastCgi, THttpWSEngine classes from end-user (@Axel-Naumann); - remove some comments from civetweb.c (@amadio); - use std::copy() instead of memcpy() for std::string (@Axel-Naumann); - introduce simple key identification of clients, let recognize which client starts by TWebWindow::Show(); - simplify cmake files, separate v7 code in FitPanel",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1886:216,avoid,avoid,216,https://root.cern,https://github.com/root-project/root/pull/1886,3,"['abort', 'avoid', 'timeout']","['abort', 'avoid', 'timeout']"
Safety,Many thanks Simon. That worked. . Axel:. ***@***.*** ~]$ curl -v --show-error --cacert /tmp/x509up_u`id -u` --connect-timeout 300 --max-time 3600 --capath /etc/grid-security/certificates --cert /tmp/x509up_u`id -u` --key /tmp/x509up_u`id -u` -L https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root -o /dev/null; % Total % Received % Xferd Average Speed Time Time Time Current; Dload Upload Total Spent Left Speed; 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0* About to connect() to webdav.lcg.triumf.ca port 2880 (#0); * Trying 2607:f8f0:660:3::40...; * Connected to webdav.lcg.triumf.ca (2607:f8f0:660:3::40) port 2880 (#0); * Initializing NSS with certpath: sql:/etc/pki/nssdb; * failed to load '/etc/grid-security/certificates/7022e3c4.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/69105f4f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CERN-Root-2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/69105f4f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridRootCA-Root.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertAssuredIDRootCA-Root.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/edca0fc0.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertAssuredIDRootCA-Root.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-Root.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CNRS2-Projets.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertAssuredIDRootCA-Root.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-Root.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertAssuredIDRootCA-Root.signi,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:118,timeout,timeout,118,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['timeout'],['timeout']
Safety,"Many thanks. Jiang Yi ***@***.***> 于 2023年6月5日周一 05:15写道：. > @jalopezg-git <https://github.com/jalopezg-git> Sorry for the late reply.; > I am still trying to fix some corner cases while avoiding too intrusive; > changes. I will update the pull request soon.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/pull/11265#issuecomment-1576431258>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ACN3SSVEF3GLBPRSV2CHAELXJWPUNANCNFSM573UE76Q>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11265#issuecomment-1577084075:187,avoid,avoiding,187,https://root.cern,https://github.com/root-project/root/pull/11265#issuecomment-1577084075,1,['avoid'],['avoiding']
Safety,"May be the following `sed` line in `listlibs.sh`. ```; grep ""Collaboration diagram for"" /Users/couet/rootdoc/html/classTWriteEnvParser.html | sed -e ""s/:<\/div>.*$//"" | sed -e ""s/^.*Collaboration diagram for /\.\/makelibs.sh /""; ```; might be safer to get the class name ?; I am not sure how it translates in the new scheme though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9966#issuecomment-1080770169:243,safe,safer,243,https://root.cern,https://github.com/root-project/root/pull/9966#issuecomment-1080770169,1,['safe'],['safer']
Safety,May be we wait Monday to merge ? always a bit risky to merge just before the week end .....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4151#issuecomment-524287543:46,risk,risky,46,https://root.cern,https://github.com/root-project/root/pull/4151#issuecomment-524287543,1,['risk'],['risky']
Safety,"Maybe it is better to have a unique method to scale and translate, i.e. passing to coefficient c1 and c2 and do c1*y+c2, and by default c2=0. This would avoid adding more functions to all the TGRaph objects.; On the other hand it is easy to operate to the TGraph content, since the underlined vectors are exposed and the user can easily modify them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8143#issuecomment-946816815:153,avoid,avoid,153,https://root.cern,https://github.com/root-project/root/pull/8143#issuecomment-946816815,1,['avoid'],['avoid']
Safety,Maybe related with thread safety? Can you run it with helgrind? Or do you get the same error with ROOT::EnableThreadSafety() activated?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8767#issuecomment-888648258:26,safe,safety,26,https://root.cern,https://github.com/root-project/root/issues/8767#issuecomment-888648258,1,['safe'],['safety']
Safety,Maybe related: https://discuss.dizzycoding.com/passing-command-line-arguments-to-argv-in-jupyter-ipython-notebook/. A quick fix might be to detect if these scripts are run within a notebook and skip the argparse part?. Taken from: https://gist.github.com/gbishop/acf40b86a9bca2d571fa; ```; # try to detect that I'm in a notebook; try:; __IPYTHON__; except NameError:; inIPython = False; else:; inIPython = True; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10430#issuecomment-1105774034:140,detect,detect,140,https://root.cern,https://github.com/root-project/root/issues/10430#issuecomment-1105774034,2,['detect'],['detect']
Safety,Maybe this can help with timeouts such as https://github.com/root-project/root/actions/runs/8645662018/job/23703294577?pr=15200,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15209:25,timeout,timeouts,25,https://root.cern,https://github.com/root-project/root/pull/15209,1,['timeout'],['timeouts']
Safety,Mention that it is thread-safe and can be called after some data has already been written. Explain that the model is cloned internally and therefore recommend `RNTupleModel::CreateBare`. FYI @makortel @Dr15Jones,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15235:26,safe,safe,26,https://root.cern,https://github.com/root-project/root/pull/15235,1,['safe'],['safe']
Safety,"Minor optimization found by looking at profiles a while ago... `GetSpecialProtocols()` takes the global lock, so it's best to avoid calling it too much.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4357:126,avoid,avoid,126,https://root.cern,https://github.com/root-project/root/pull/4357,1,['avoid'],['avoid']
Safety,"Minuit2 uses the Pimpl idiom with a shared_ptr to avoid frequent copies, but the implementation is not good. The full interface of each class is duplicated, which is not necessary and makes the code confusing and difficult to change. This patch simplifies the implementation but keeps the semantics the same. This patch is a precursor of some improvements that I have prepared.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7882:50,avoid,avoid,50,https://root.cern,https://github.com/root-project/root/pull/7882,1,['avoid'],['avoid']
Safety,Missing Lock Error Detection for TCollection,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/647:19,Detect,Detection,19,https://root.cern,https://github.com/root-project/root/pull/647,1,['Detect'],['Detection']
Safety,Modified signal handler to avoid async-unsafe functions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/96:27,avoid,avoid,27,https://root.cern,https://github.com/root-project/root/pull/96,2,"['avoid', 'unsafe']","['avoid', 'unsafe']"
Safety,"More info to add:. On godbolt, clang 16.0.0 (unfortunately no 16.0.6 available) aborts with SIGSEGV, but clang 18.1.0 is fine. https://godbolt.org/z/dKfsfh44j. Also just for reference, the number of times `var0` is summed is 4096.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15818#issuecomment-2162404947:80,abort,aborts,80,https://root.cern,https://github.com/root-project/root/issues/15818#issuecomment-2162404947,1,['abort'],['aborts']
Safety,Most leaks are due to wrong management of allocated `char*` buffers via StrDup - thats how I detect them. Better to be applied after #4874,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4887:93,detect,detect,93,https://root.cern,https://github.com/root-project/root/pull/4887,1,['detect'],['detect']
Safety,"Moves from fixed page sizes on write to adaptive page sizes, following the original idea of @hahnjo . The new mechanism is explained in the tuning.md document in the PR. The PR also bumps the target compressed cluster size to 150MB. We may want to reduce that still. Evaluation of the new method is currently ongoing and the PR description will be amended with the results. EDIT: [Comparison](https://docs.google.com/spreadsheets/d/1maJhgvgVU8RkX7QXd7B3QiTBfKuYbTbvgkoHzBUOurY/edit?usp=sharing) of current write performance vs adaptive page sizes with 50MB, 100MB, 150MB target cluster size. To me it seems that there is not a good argument to go to 150 MB clusters. There may be an argument for 100 MB clusters. For the moment, I'll remove the commit that changes the default settings from the PR. An additional flavor, `adaptive / exp`, is included in the table to test the effect of flushing _foreign columns_. In the experimental mode, columns only flush themselves, which simplifies the `RWritePageMemoryManager` and avoids the upcall from the sink to the column. There is a small positive effect of foreign flushes on the file size in the nanoAOD sample. The effect is more visible for the number of pages. The memory consumption is slightly smaller without foreign column flushes. I'll see if I can construct an example that shows better the advantage of foreign column flushes (or not). As expected, the memory savings become visible for large EDMs (e.g., nanoAOD in this set of samples).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16311:1022,avoid,avoids,1022,https://root.cern,https://github.com/root-project/root/pull/16311,1,['avoid'],['avoids']
Safety,"Moving `RooMath` to RooBatchCompute caused linker errors for users that; we want to avoid: RooBatchCompute is a RooFit implementation detail and; we don't want poeple to link against it. For this reason, RooMath is moved back into RooFitCore, and the; Faddeeva implementation that is also used in RooBatchCompute is split; off into a new file `faddeeva_impl.h` that is not part of the public; interface.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10359:84,avoid,avoid,84,https://root.cern,https://github.com/root-project/root/pull/10359,1,['avoid'],['avoid']
Safety,"Much of the functionality of RooAddition and RooAddPdf is implemented in exactly the; same way as in RooRealSumPdf. Hence, to avoid code duplication, we can; reuse the static functions in RooRealSumPdf that provide this; implementation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10851:126,avoid,avoid,126,https://root.cern,https://github.com/root-project/root/pull/10851,1,['avoid'],['avoid']
Safety,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`.; 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change; 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? ; 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13134#issuecomment-1637626198:364,avoid,avoid,364,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1637626198,1,['avoid'],['avoid']
Safety,"My general comment is that I would try to avoid doing a plain copy of code that is somewhere else. I checked `rootx/src/rootx.cxx` and it not only parses `--notebook`, but also several other options such as `-b`, `-l`, etc. This makes me wonder: is `rootx/src/rootx.cxx` the right place to parse options or it's not?. Also, is there a place where options are parsed no matter the platform? If yes, we should put there the code for `--notebook`, shouldn't we?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9142#issuecomment-946770752:42,avoid,avoid,42,https://root.cern,https://github.com/root-project/root/pull/9142#issuecomment-946770752,1,['avoid'],['avoid']
Safety,"My guess is that because a binning is not specified RDF is storing `std::vector<double>`s with all entries of all columns and that's just too much. I don't think anyone ever tried to fill so many histograms with so many entries each (no filters) without specifying a binning. We could do something like `TTree::Draw` does and estimate the binning from the first N entries, but we always avoided it because it requires locking during a multi-thread event loop. Let's see what massif says first though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6676#issuecomment-712821523:387,avoid,avoided,387,https://root.cern,https://github.com/root-project/root/issues/6676#issuecomment-712821523,1,['avoid'],['avoided']
Safety,"My reasoning for removing usage of `std::string_view` is that using `const std::string&` avoids copying memory and only requires C++11, while `std::string_view` requires C++17 or a backport. Moreover, along with the extra requirements of `std::string_view`, when it is passed by value it uses a pointer + length, which means possibly twice the size of just a reference. If we are not using the editing potential of `std::string_view`, or even worse, are just using it to actually make a copy of the data inside, then I see no real advantage in using it relative to just using a reference to `std::string` in the interface that basically does the same job better without adding the extra requirements of a higher C++ standard and/or a backport.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/804#issuecomment-318633601:89,avoid,avoids,89,https://root.cern,https://github.com/root-project/root/pull/804#issuecomment-318633601,1,['avoid'],['avoids']
Safety,"My two cents: I guess the question is whether there are other developers than Max that assume `R__ASSERT` also gets compiled in release builds, and I guess the safe option is to assume there are. Personally I would be ok with a `R__DEBUG_ASSERT` (+ an audit of `R__ASSERT` usages in RDF & co., + a big banner in R__ASSERT's docs). Note that there are other places like `math` where usages of `R__ASSERT` might warrant an audit, they might happen in hot code paths:. ```; roofit/roofitmore/src/RooNonCentralChiSquare.cxx:1; roofit/roofitcore/src/RooHistFunc.cxx:1; roofit/roofitmore/src/RooLegendre.cxx:3; roofit/roofit/src/RooCrystalBall.cxx:2; roofit/roofit/src/RooArgusBG.cxx:1; roofit/roofit/src/RooParamHistFunc.cxx:1; roofit/roofit/src/RooKeysPdf.cxx:2; roofit/roofit/src/RooCBShape.cxx:2; roofit/roofit/src/RooGaussModel.cxx:6; roofit/roofit/src/RooParametricStepFunction.cxx:2; roofit/roofit/src/RooDecay.cxx:1; roofit/roofit/src/RooLognormal.cxx:2; roofit/roofit/src/RooBernstein.cxx:2; roofit/roofit/src/RooBDecay.cxx:1; roofit/roofit/src/RooPolynomial.cxx:2; roofit/roofit/src/RooGamma.cxx:2; roofit/roofit/src/RooNDKeysPdf.cxx:6; roofit/roofit/src/RooPoisson.cxx:2; roofit/roofit/src/RooGExpModel.cxx:4; roofit/roofitcore/src/RooHistPdf.cxx:1; roofit/roofitcore/src/RooRealSumPdf.cxx:2; roofit/roofitcore/src/RooTruthModel.cxx:5; roofit/roofitcore/src/RooEfficiency.cxx:1; roofit/roofitcore/src/RooPolyVar.cxx:2; roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx:2; roofit/histfactory/src/FlexibleInterpVar.cxx:11; gui/fitpanel/src/TFitEditor.cxx:1; hist/hist/test/test_THBinIterator.cxx:1; hist/hist/src/THistRange.cxx:1; hist/hist/src/TH1Merger.cxx:5; hist/hist/inc/THistRange.h:4; hist/hist/src/TF1.cxx:2; hist/hist/src/TProfile2D.cxx:4; hist/hist/src/TFormula_v5.cxx:1; hist/hist/src/TH3.cxx:5; hist/hist/inc/TNDArray.h:3; hist/hist/src/TH1.cxx:5; hist/hist/src/TProfileHelper.h:2; hist/hist/src/HFitImpl.cxx:5; hist/hist/src/TPrincipal.cxx:1; hist/hist/src/TProfile3D.cxx:4; hist/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8587#issuecomment-872791223:160,safe,safe,160,https://root.cern,https://github.com/root-project/root/pull/8587#issuecomment-872791223,1,['safe'],['safe']
Safety,"My use case is to `#include <...>` some standard headers I often use. e.g. filesystem and thread.; I will also put `namespace fs = std::filesystem;` in my startup file.; cling already implicitly includes some standard headers so I think letting users to customize it makes sense. About ""execute random code"", is there risk if the executed code/script is in user's home directory or `XDG_CONFIG_HOME` ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11262#issuecomment-1253392731:318,risk,risk,318,https://root.cern,https://github.com/root-project/root/pull/11262#issuecomment-1253392731,1,['risk'],['risk']
Safety,"Native JSON does not support them, but at least use `null` to avoid problem with standard parsers.; Also null value can be distinguished from 0 in JavaScript.; When reading back with TBufferJSON, any null will be converted into NaN",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1927:62,avoid,avoid,62,https://root.cern,https://github.com/root-project/root/pull/1927,1,['avoid'],['avoid']
Safety,No need to have two separate places where the list of supported operations in distributed mode is declared. This PR also avoids that the operations are redeclared everytime in the `_classify_operation` method (now removed).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9867:121,avoid,avoids,121,https://root.cern,https://github.com/root-project/root/pull/9867,1,['avoid'],['avoids']
Safety,"No, there is exactly one remaining usage of the global lock which still needs to be addressed. This happens when the TFile object is added or removed from the global list of UUIDs. It can be bypassed by e.g. the following patch; https://github.com/bendavid/root/commit/7262eb3babbb660c497fb879e4cdd32b99927c26. But this isn't safe in general as we previously discussed, since it could break the (maybe esoteric) case where a TRef points to a TFile object. One way out could be to add another static switch to TFile (a la ```TFIle::SetReadStreamerInfo(false)``) to disable this. Unfortunate that this can't be the default given that it's probably only a small number of workflows that rely on this behaviour, but I don't have any better ideas for the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7710#issuecomment-1070971919:326,safe,safe,326,https://root.cern,https://github.com/root-project/root/issues/7710#issuecomment-1070971919,1,['safe'],['safe']
Safety,"Not sure we want to provide possibility replace basic fonts in ROOT.; There are many other misc files like icons, images, macros which are distributed together with ROOT and cannot be avoided. I just merge PR which shows usage of custom fonts with `TWebCanvas`. Any kind of TTF font can be used there. https://github.com/root-project/root/blob/master/tutorials/webcanv/fonts_ttf.cxx",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16229#issuecomment-2388594326:184,avoid,avoided,184,https://root.cern,https://github.com/root-project/root/issues/16229#issuecomment-2388594326,1,['avoid'],['avoided']
Safety,"Note that https://github.com/root-project/root/pull/8093 is to be merged first, which should avoid the above test failures.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8094#issuecomment-832165555:93,avoid,avoid,93,https://root.cern,https://github.com/root-project/root/pull/8094#issuecomment-832165555,1,['avoid'],['avoid']
Safety,Note that you don't need to use the `ROOFIT_BUILDS_ITSELF` macro here. This is only to avoid dprecation warnings when RooFit builds itself in case one deprecated function calls another deprecated function.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16334#issuecomment-2319138735:87,avoid,avoid,87,https://root.cern,https://github.com/root-project/root/pull/16334#issuecomment-2319138735,1,['avoid'],['avoid']
Safety,"Note this still doesn't work after yesterdays cppyy upgrade:; ```txt; C:\root-dev\build\x64\debug>python; Python 3.11.4 (tags/v3.11.4:d2340ef, Jun 7 2023, 05:45:37) [MSC v.1934 64 bit (AMD64)] on win32; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import ROOT; >>> s = ROOT.std.set['int'](); Assertion failed: Loc.isValid() && ""point of instantiation must be valid!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/AST/DeclTemplate.h, line 2010; *** Break *** abort; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14710#issuecomment-2009411986:517,abort,abort,517,https://root.cern,https://github.com/root-project/root/issues/14710#issuecomment-2009411986,1,['abort'],['abort']
Safety,"Note: We are intentionally building `LLVM` and `Clang` as static library to avoid conflict with other uses of the `LLVM` and `Clang` libraries (i.e. by keeping the usage as internal as possible). Using shared library will require all other usage of those libraries within a process to be using our version of `LLVM` and `Clang`, this has shown to be an impossible requirement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15563#issuecomment-2120770289:76,avoid,avoid,76,https://root.cern,https://github.com/root-project/root/pull/15563#issuecomment-2120770289,1,['avoid'],['avoid']
Safety,"Note: at least on Intel architectures, a single 64bit pointer cannot be split into more than one cache line due to alignment of 8 bytes (i.e. it's thread-safe to read it). Therefore, any thread will either see `fBase == nullptr` and acquire a lock to create the list of bases, or it will find the value already computed and return it immediately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/957#issuecomment-327749242:154,safe,safe,154,https://root.cern,https://github.com/root-project/root/pull/957#issuecomment-327749242,1,['safe'],['safe']
Safety,"Note: this was intentionally not rebased on master for now, I will rebase before merging (incrementals currently show a test failure I want to avoid).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1058#issuecomment-332520777:143,avoid,avoid,143,https://root.cern,https://github.com/root-project/root/pull/1058#issuecomment-332520777,1,['avoid'],['avoid']
Safety,"Note:. When histograms are added to the directory, there will still be a slow down. This is because for histogram we can not assume that they are not shared. There is 2 patterns that can be used to speed up the file closing *if and only if* the histograms are not shared between the `TFile` and other containers/code (or if the double delete is avoided through other means):. (a) Detach the `TFile` from the `ROOT` list of files, which (indirectly) tells the clean up system that it does not need to inform the directories of that file of any deletion.; ```; std::unique_ptr<TFile> out(TFile::Open(""example.root"", ""RECREATE""));; gROOT->GetListOfFiles()->Remove(out.get());; ```. (b) Tell the histogram that they will not be shared and that they don't need to inform any entities that they are being deleted.; ```; auto h = new TH1F(histo_name, histo_title, 100, 0, 100);; h->ResetBit(kMustCleanup); // This is necessary to avoid scanning all the directories when deleting this histogram; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13449#issuecomment-1872379242:345,avoid,avoided,345,https://root.cern,https://github.com/root-project/root/issues/13449#issuecomment-1872379242,2,['avoid'],"['avoid', 'avoided']"
Safety,"Now I'm doing another thing, and return again to this issue. I want to make a 3-dimensional fit, but some pdfs depend only on z, so I multiply them by uniform pdfs on x and y. I mean RooUniform for the whole domain of a variable, not what I proposed in https://github.com/root-project/root/issues/7880. So I create a uniform distribution like that. RooUniform u_nt_x(""u_nt_x"", ""u_nt_x"", x);; RooUniform u_nt_y(""u_nt_y"", ""u_nt_y"", y);; RooProdPdf uxy_nt(""uxy_nt"", ""uxy_nt"", RooArgList(u_nt_x, u_nt_y));. So I have 5 pdfs for which I need to create a separate uniform distribution on (x, y), which in turn requires creation of new pdfs on x (and on y), which are all uniform and absolutely the same. This leads to 15 new lines of code, which is not that much, but seems redundant (as names and titles of the uniform distribution on all x) and even more error-prone (because of very similar code). Maybe there must be a way to explicitly allow same pdfs, if you know that they are really identical ones with same parameters? Say a new class, RooRefPdf, RooCopyPdf, ... .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8000#issuecomment-830081883:768,redund,redundant,768,https://root.cern,https://github.com/root-project/root/issues/8000#issuecomment-830081883,1,['redund'],['redundant']
Safety,"Now TMVA does not have anymore dependency on Cuda at the header file.; In principle one could have MethodDL depending on Cuda tensor, but this is not needed if single event evaluation is not done on GPU.; With this PR now the Cuda headers are included from TMVA source files . This PR should avoid the problem of ROOT-10980 and #6999 should not be anymore needed",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7017:292,avoid,avoid,292,https://root.cern,https://github.com/root-project/root/pull/7017,1,['avoid'],['avoid']
Safety,"Now several parameters can be configured via rootrc file:. ```; WebEve.JsRootRender: 1 # use JSROOT Geometry Painter for GL drawings, default off; WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called; WebEve.HTimeout: 200 # timeout in ms for elements highlight; WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset; WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact; ```. Provide context menu, which activate browser at specified element; Improve/repair functionality with JSROOT GeoPainter. ; Provide single-click mouse handler, used for tracks/jets selection; Improve highlight handling in plain three.js mode; Make possibility to specify table row width via rootrc",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4966:257,timeout,timeout,257,https://root.cern,https://github.com/root-project/root/pull/4966,1,['timeout'],['timeout']
Safety,"Now that `builtin_afterimage` is deprecated and always `ON`, it has to build on all platforms. Update `config.guess` to the latest upstream version to auto-detect `riscv64-unknown-linux-gnu` and fix the build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16260:156,detect,detect,156,https://root.cern,https://github.com/root-project/root/pull/16260,1,['detect'],['detect']
Safety,"Now, the verbose reponse of the tests looks like this:. ```; test 73; Start 73: PyMVA-Keras-Classification. 73: Test command: /usr/bin/cmake ""-DCMD=/usr/users/wunsch/root/build/tmva/pymva/test/testPyKerasClassification"" ""-DSYS=/usr/users/wunsch/root/build"" ""-P"" ""/usr/users/wunsch/root/cmake/modules/RootTestDriver.cmake""; 73: Test timeout computed to be: 1500; 73: Get test data...; 73: Generate keras model...; 73: Using Theano backend.; 73: Setup TMVA...; 73: Using Theano backend.; 73: Train model...; 73: Run reader and classify 100 events...; 73: Mean MVA response on signal: 0.747554; 73: Mean MVA response on background: 0.290326; 1/2 Test #73: PyMVA-Keras-Classification ....... Passed 14.31 sec; test 74; Start 74: PyMVA-Keras-Regression. 74: Test command: /usr/bin/cmake ""-DCMD=/usr/users/wunsch/root/build/tmva/pymva/test/testPyKerasRegression"" ""-DSYS=/usr/users/wunsch/root/build"" ""-P"" ""/usr/users/wunsch/root/cmake/modules/RootTestDriver.cmake""; 74: Test timeout computed to be: 1500; 74: Get test data...; 74: Generate keras model...; 74: Using Theano backend.; 74: Setup TMVA...; 74: Using Theano backend.; 74: Train model...; 74: Run reader and estimate target of 100 events...; 74: Mean squared error: 1.28006; 2/2 Test #74: PyMVA-Keras-Regression ........... Passed 14.53 sec. The following tests passed:; PyMVA-Keras-Classification; PyMVA-Keras-Regression. 100% tests passed, 0 tests failed out of 2; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/280#issuecomment-253739525:332,timeout,timeout,332,https://root.cern,https://github.com/root-project/root/pull/280#issuecomment-253739525,2,['timeout'],['timeout']
Safety,"OK thanks. I believe that ""there is no other way to get reliable results"" is a bit of an exaggeration - many numerical libraries and programs do not turn fp exceptions on. IEEE 754 allows them to survive just fine the cases you are hunting down, because (as you certainly know) IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. As a matter of fact, I believe you have just proven to yourself that ""there is no other way to get reliable results"" is also incorrect, as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions, just like it did for instance for clang, the Intel compiler, and - if I remember correctly - MSVC. Our approach is not to rely on fp exceptions but on coverage in regression tests. That has limited reach (as would fp exceptions) but it allows us to detect when results change in a visible, ""unreliable"" way. Shall we close this then or is there something left to be clarified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6677#issuecomment-713528820:575,safe,safe,575,https://root.cern,https://github.com/root-project/root/issues/6677#issuecomment-713528820,2,"['detect', 'safe']","['detect', 'safe']"
Safety,"OK, I un-commented the safety check, I don't remember the reason why I disabled it in the first place. Please open a separate issue if needed with a macro to test for the random sequence. In principle, `gRandom->Rndm()` is used for sampling, which should produce the same sequence if not seeded elsewhere.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14675#issuecomment-1966773753:23,safe,safety,23,https://root.cern,https://github.com/root-project/root/issues/14675#issuecomment-1966773753,1,['safe'],['safety']
Safety,"OK, well, it doesn't work for me:; ```; [bellenot@bbcc7x64 gui]$ root -l games.C; root [0]; Processing games.C...; input_line_14:1:10: fatal error: 'Hello.h' file not found; #include ""Hello.h""; ^~~~~~~~~; input_line_15:1:10: fatal error: 'Aclock.h' file not found; #include ""Aclock.h""; ^~~~~~~~~~; input_line_16:1:10: fatal error: 'Tetris.h' file not found; #include ""Tetris.h""; ^~~~~~~~~~; In file included from input_line_17:1:; ./games.C:72:23: error: allocation of incomplete type 'Hello'; Hello *hello = new Hello();; ^~~~~; ./games.C:65:7: note: forward declaration of 'Hello'; class Hello;; ^; input_line_19:2:3: error: use of undeclared identifier 'rungames'; (rungames()); ^; Error in <HandleInterpreterException>: Error evaluating expression (rungames()).; Execution of your code was aborted.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7184#issuecomment-778226348:794,abort,aborted,794,https://root.cern,https://github.com/root-project/root/pull/7184#issuecomment-778226348,1,['abort'],['aborted']
Safety,"OMICS_WITHOUT_LIB - Success; -- Building LLVM in 'Release' mode.; -- The ASM compiler identification is GNU; -- Found assembler: /usr/bin/cc; -- Could NOT find Z3: Found unsuitable version ""0.0.0"", but required is at least ""4.7.1"" (found Z3_LIBRARIES-NOTFOUND); -- Looking for backtrace; -- Looking for backtrace - found; -- backtrace facility detected in default set of libraries; -- Found Backtrace: /usr/include; -- Native target architecture is X86; -- Threads disabled.; -- Doxygen disabled.; -- Go bindings disabled.; -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH); -- OCaml bindings disabled.; -- Found Python module pygments; -- Found Python module pygments.lexers.c_cpp; -- Found Python module yaml; -- LLVM host triple: x86_64-unknown-linux-gnu; -- LLVM default target triple: x86_64-unknown-linux-gnu; -- Building with -fPIC; -- Found PythonInterp: /usr/bin/python3.10 (found version ""3.10.4""); -- Constructing LLVMBuild project information; -- Linker detection: GNU ld; -- Targeting X86; -- Targeting NVPTX; -- Clang version: 9.0.1; -- Cling version (from VERSION file): ROOT_1.0~dev; -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-pc-linux-gnu/11.2.0/../../../../include/c++/11.2.0:/usr/lib/gcc/x86_64-pc-linux-gnu/11.2.0/../../../../include/c++/11.2.0/x86_64-pc-linux-gnu:/usr/lib/gcc/x86_64-pc-linux-gnu/11.2.0/../../../../include/c++/11.2.0/backward' at runtime.; -- And then fallback to: 'c++'; -- Performing Test CXX_HAS_fno_rtti; -- Performing Test CXX_HAS_fno_rtti - Success; -- Performing Test C_HAS_Wno_strict_overflow; -- Performing Test C_HAS_Wno_strict_overflow - Success; -- Performing Test C_HAS_Wno_maybe_uninitialized; -- Performing Test C_HAS_Wno_maybe_uninitialized - Success; -- Performing Test C_HAS_Wno_parentheses_equality; -- Performing Test C_HAS_Wno_parentheses_equality - Success; -- Looking for m; -- Looking for m - not found; -- Use SSL API VERSION 1.1 for civetweb; -- Performing Test GCC_HAS_BIDI_CHARS_FLAG; -- Per",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10528:9198,detect,detection,9198,https://root.cern,https://github.com/root-project/root/issues/10528,1,['detect'],['detection']
Safety,"OOT::RDataFrame rdf(100);. // Define a new column `x` that contains random numbers and create a histogram; ROOT::RDF::RResultPtr<TH1D> h = rdf.Define(""x"", [](){ return gRandom->Rndm(); }).Histo1D(""x"");. // Add the histogram to a vector; vector<ROOT::RDF::RResultPtr<TH1D>> histograms;; histograms.push_back(h);. // Attempt to throw an error; throw std::runtime_error(""intended error throw for debugging"");. return histograms;; }; ```. ### Additional context; For additional context see https://root-forum.cern.ch/t/pointer-not-allocated-when-adding-rresultptr-to-vector/51831/2. Interesting part of the gdb backtrace follows (thanks @eguiraud!):; ```; >>> bt; #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at pthread_kill.c:44; #1 0x00007ffff72a1503 in __pthread_kill_internal (signo=6, threadid=<optimized out>) at pthread_kill.c:78; #2 0x00007ffff7251958 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26; #3 0x00007ffff723b53d in __GI_abort () at abort.c:79; #4 0x00007ffff729563e in __libc_message (action=action@entry=do_abort, fmt=fmt@entry=0x7ffff73b4432 ""%s\n"") at ../sysdeps/posix/libc_fatal.c:155; #5 0x00007ffff72ab22c in malloc_printerr (str=str@entry=0x7ffff73b6ff8 ""free(): double free detected in tcache 2"") at malloc.c:5660; #6 0x00007ffff72ad587 in _int_free (av=0x7ffff73f1ba0 <main_arena>, p=0x55555e7134c0, have_lock=have_lock@entry=0) at malloc.c:4469; #7 0x00007ffff72af9f3 in __GI___libc_free (mem=<optimized out>) at malloc.c:3385; #8 0x00007ffff18d07b4 in std::_Vector_base<ROOT::RDF::RResultPtr<TH1D>, std::allocator<ROOT::RDF::RResultPtr<TH1D> > >::~_Vector_base (this=0x55555881f750) at /usr/lib/gcc/x86_64-pc-linux-gnu/12.2.0/../../../../include/c++/12.2.0/bits/stl_vector.h:366; #9 0x00007ffff23aa435 in cling::Value::~Value() () from /home/blue/ROOT/master/cmake-build-foo/lib/libCling.so; #10 0x00007ffff21a1869 in TCling::ProcessLine (this=0x5555555ee950, line=0x5555563e9c60 "".X /tmp/./pointer_n",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11494:1913,abort,abort,1913,https://root.cern,https://github.com/root-project/root/issues/11494,1,['abort'],['abort']
Safety,"OOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 888: Environment variables:; 888: ROOT_HIST=0; 888: Test timeout computed to be: 1500; 888: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 888: error code: -529697949; 888:; 888:; 11/16 Test #888: tutorial-dataframe-df016_vecOps-py .......................***Failed 4.51 sec; test 889; Start 889: tutorial-dataframe-df017_vecOpsHEP-py. 889: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df017_vecOpsHEP.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 889: Environment variables:; 889: ROOT_HIST=0; 889: Test timeout computed to be: 1500; 889: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 889: error code: -529697949; 889:; 889:; 12/16 Test #889: tutorial-dataframe-df017_vecOpsHEP-py ....................***Failed 5.05 sec; test 890; Start 890: tutorial-dataframe-df019_Cache-py. 890: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df019_Cache.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 890: Environment variables:; 890: ROOT_HIST=0; 890: Test timeout computed to be: 1500; 890: Error in <TChain::LoadTree>: Cannot find tree with name ÉB D═ in file C:\Users\sftnight\build\release\tutorials\hsimple.root; 890: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (messa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6083#issuecomment-665456331:12172,timeout,timeout,12172,https://root.cern,https://github.com/root-project/root/pull/6083#issuecomment-665456331,1,['timeout'],['timeout']
Safety,"OT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes?. This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance?. The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jup",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6421:3460,predict,predicted,3460,https://root.cern,https://github.com/root-project/root/issues/6421,1,['predict'],['predicted']
Safety,"Oh I was too fast: So the `BranchTypes` part of the template was simply not used? In case I undestand this correctly, is it possible to detect something like this at compile time?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5208#issuecomment-603090920:136,detect,detect,136,https://root.cern,https://github.com/root-project/root/pull/5208#issuecomment-603090920,1,['detect'],['detect']
Safety,"Ok so there are few different issues here. Leaving aside the question of why the template error isn't detected, the reason why it's not even printed to the console is because the problematic instantiation occurs via the LookupHelper which calls ```setSuppressAllDiagnostics``` by default. The stack trace leading up to the instantiation looks as below*. So as a workaround at least the user can call from python ```ROOT.gDebug = 6``` to get the full output from clang. Maybe the defaults need to be reconsidered here. The optimal solution here for pyroot/cppyy in general is maybe a bit involved. What is probably desired is; 1) Don't print the clang output, but store any errors or warnings during template instantiation attempts e.g. using ```cling::utils::DiagnosticsStore```; 2) If no template is successfully instantiated then print the stored warnings and errors for each case; 3) If a template is successfully instantiated, but had warnings, at least print those for the successful case. I have some idea what's going wrong with the error detection as well, more news on that soon. \*; ```gdb; Thread 1 ""python"" hit Breakpoint 1, 0x00007ffff2df28e0 in clang::Sema::InstantiateFunctionDefinition(clang::SourceLocation, clang::FunctionDecl*, bool, bool, bool) () from /home/b/bendavid/rootdev28/install/lib/libCling.so; (gdb) bt; #0 0x00007ffff2df28e0 in clang::Sema::InstantiateFunctionDefinition(clang::SourceLocation, clang::FunctionDecl*, bool, bool, bool) (); from /home/b/bendavid/rootdev28/install/lib/libCling.so; #1 0x00007ffff1a30ff7 in cling::overloadFunctionSelector(clang::DeclContext*, bool, llvm::SmallVectorImpl<clang::Expr*> const&, clang::LookupResult&, clang::DeclarationNameInfo&, clang::TemplateArgumentListInfo const*, clang::ASTContext&, clang::Parser&, clang::Sema&, cling::LookupHelper::DiagSetting) () from /home/b/bendavid/rootdev28/install/lib/libCling.so; #2 0x00007ffff1a387f7 in clang::FunctionDecl const* cling::findFunction<clang::FunctionDecl const*>(clang::Decl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11854#issuecomment-1455272493:102,detect,detected,102,https://root.cern,https://github.com/root-project/root/issues/11854#issuecomment-1455272493,1,['detect'],['detected']
Safety,"Ok the idea works, I will open a different PR with an implementation that uses CRTP to avoid repeating the body of `RAction` three times (thanks @Axel-Naumann for the suggestion).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2595#issuecomment-425416733:87,avoid,avoid,87,https://root.cern,https://github.com/root-project/root/pull/2595#issuecomment-425416733,1,['avoid'],['avoid']
Safety,"Ok what about this: we throw away the changes currently proposed in this PR, and instead we go here:. https://github.com/root-project/root/blob/master/core/base/src/TApplication.cxx#L1347. and before calling `gSystem->Abort()`, we call `gSystem->IgnoreSignal(kSigAbort)`, so that `TXXSystem::DispatchSignals` is not even invoked when the user types `.qqqqqq` from the ROOT prompt. This fixes the case of not printing an unexpected abort signal.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5034#issuecomment-587554017:218,Abort,Abort,218,https://root.cern,https://github.com/root-project/root/pull/5034#issuecomment-587554017,2,"['Abort', 'abort']","['Abort', 'abort']"
Safety,"Ok, I think we can avoid it by inlining one or two more functions",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15491#issuecomment-2108071040:19,avoid,avoid,19,https://root.cern,https://github.com/root-project/root/pull/15491#issuecomment-2108071040,1,['avoid'],['avoid']
Safety,"Ok, I'll leave this to @dpiparo then. I think the changes are simple enough and can be safely merged, though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1046#issuecomment-331808979:87,safe,safely,87,https://root.cern,https://github.com/root-project/root/pull/1046#issuecomment-331808979,1,['safe'],['safely']
Safety,"Ok, I've had a first quick look. This is rather a feature than a bug. During alignment, some bounding boxes and voxels need to be recomputed (see the logic in [TGeoPhysicalNode::Align](https://github.com/root-project/root/blob/7c81a10d9fa965b25f35b0ec709d6095a209ac16/geom/geom/src/TGeoPhysicalNode.cxx#L293#L306)). Since a given volume may be changed by many physical node alignments, their bounding boxes and voxels are only marked to be recomputed, otherwise the operation takes too long for complex cases. This lazy recomputation occurs only when any navigation function is called for the given volume, but not when calling just the getter of the box dimensions. So the behavior runtime should be OK, even if you see that some bounding boxes appear to be zero just after alignment. The recomputation of boxes/voxels can be however triggered manually using the following code:; ```; TIter nextv(gGeoManager->GetListOfVolumes());; TGeoVolume *vol;; while ((vol = (TGeoVolume*)nextv())) {; if (vol->IsAssembly()) vol->GetShape()->ComputeBBox();; auto finder = vol->GetVoxels();; if (finder && finder->NeedRebuild()) {; finder->Voxelize();; vol->FindOverlaps();; }; }; ```; I guess this code could be automatically called inside TGeoManager::RefreshPhysicalNodes() which needs to be called anyway by the user to recover pointer consistency after all alignments are applied. Let me know if this code does the job for you and I'll put it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12242#issuecomment-1431352951:1312,recover,recover,1312,https://root.cern,https://github.com/root-project/root/issues/12242#issuecomment-1431352951,1,['recover'],['recover']
Safety,"Ok, after a bit more investigation into the generated `build.ninja`, scratch the above comment. It seems inter-target dependencies also cover the source files. That is, if target `foo` is a dependency of `bar`, then `foo` must be complete before the first source file of `bar` is compiled. I thus pushed a commit that finishes the cleanup:; * All dependencies are correct. When a library file is listed as a dependency of something, the project which generates this file has it correctly listed in `BUILD_BYPRODUCTS`.; * Built-in dependencies of an executable or library can be listed in the respective ROOT macro. Putting it in a macro allows us to skip the redundant `if(builtin_foo)` code blocks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/323#issuecomment-273022008:659,redund,redundant,659,https://root.cern,https://github.com/root-project/root/pull/323#issuecomment-273022008,1,['redund'],['redundant']
Safety,"Ok, after discussing this with @cburgard and others, we think we came up with a solution that leaves the ROOT side untouched for now, but deprecates the functionality that uses `get_wgt` on the RooFitExtensions side when using RooFitExtensions together with ROOT versions later than 6.18.x. This may break RooFitExtensions users' workflows (we unfortunately don't know who still uses the affected functionality), in which case we will have to revisit the suggestions made in this PR. But in any case this solution avoids the unacceptable situation of leaving things as they are which has silently failed for some years now. Hopefully, nobody misses the functionality in RooFitExtensions, so we can let this rest permanently :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11736#issuecomment-1330910904:514,avoid,avoids,514,https://root.cern,https://github.com/root-project/root/pull/11736#issuecomment-1330910904,1,['avoid'],['avoids']
Safety,"Ok, but level has to be an `Int_t`, as that's the type `TFile` accepts. *Edit:* The reasoning is that I want to avoid warnings about truncation when the enum and char are mixed to create the parameter that is passed to TFile. Also 300 is a perfect value for algorithm when creating the `Int_t` that TFile takes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/965#issuecomment-328833706:112,avoid,avoid,112,https://root.cern,https://github.com/root-project/root/pull/965#issuecomment-328833706,1,['avoid'],['avoid']
Safety,"Ok, looking in more detail, I THINK that the original deadlock issue with UniqueLockRecurseCount can actually be avoided by declaring the LocalCounts as a thread_local data member of UniqueLockRecurseCount rather than a local variable inside of GetLocal() so this might be an even better solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-800561784:113,avoid,avoided,113,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-800561784,1,['avoid'],['avoided']
Safety,"Ok, thanks for checking @linev! In that case, I'll remove the commit with the `Qt` detection from this PR. It was not so important for me anyway, the main motivation for this PR was that ROOT doesn't silently disable CUDA. Are you okay with how the PR is now, @linev?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14834#issuecomment-1980803700:83,detect,detection,83,https://root.cern,https://github.com/root-project/root/pull/14834#issuecomment-1980803700,1,['detect'],['detection']
Safety,"Ok, thanks for investigating. I think it's safe to treat it as a `TTree::Draw` bug unless @pcanal figures out otherwise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6671#issuecomment-712756397:43,safe,safe,43,https://root.cern,https://github.com/root-project/root/issues/6671#issuecomment-712756397,1,['safe'],['safe']
Safety,"Ok, then the current tip of the 6-32-XX branch does not compile with `-Droot7=OFF`. I will change that in our builds, keep that however in mind when you do the tag to avoid extra macOS related noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16449#issuecomment-2355996406:167,avoid,avoid,167,https://root.cern,https://github.com/root-project/root/issues/16449#issuecomment-2355996406,1,['avoid'],['avoid']
Safety,"Okay, the updates to CallFunc would be too controversial. See also: https://github.com/root-project/root/pull/14426. Also, I don't like it that the `unique_ptr` overload is wrongly chosen, even if it doesn't harm in you example. I suggest to disable the implicit promotion to smart pointers now:; https://github.com/root-project/root/pull/15125. Then the behavior of PyROOT is the same as in ROOT 6.30 for your reproducer, which I think is safest. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15117#issuecomment-2035838121:440,safe,safest,440,https://root.cern,https://github.com/root-project/root/issues/15117#issuecomment-2035838121,1,['safe'],['safest']
Safety,"Okay, this is mostly a configuration problem from my side: I didn't install the `libssl-dev` package, so ROOT's configuration defaulted to `builtin_openssl` because `ssl` is `ON` but it couldn't find the OpenSSL headers. On Debian Unstable and Testing, this is a serious problem because it means we effectively end up with OpenSSL 1.1.1g (from the builtin, linked statically) *and* OpenSSL 3.0.8 (from the system, linked as a shared library) in *one process*. We are rather lucky that it doesn't blow up harder... @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12231#issuecomment-1435932572:562,detect,detect,562,https://root.cern,https://github.com/root-project/root/issues/12231#issuecomment-1435932572,1,['detect'],['detect']
Safety,"Olivier, can one just automatically switch to col option when doing batch output with `gVirtualPS`? ; Just to avoid confusion in the future?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6822#issuecomment-728774569:110,avoid,avoid,110,https://root.cern,https://github.com/root-project/root/issues/6822#issuecomment-728774569,1,['avoid'],['avoid']
Safety,"On 02/10/17 11:43, Guilherme Amadio wrote:; >; > Let's see how this goes now that we are back on the old externals...; >; > I would prefer avoiding the smart pointers with ROOT 6 interfaces, ; > because I'm sure there are corner cases where it will lead to ; > problems, and I pointed out some of it in previous comments.; >; > Other than that, I once this PR is ready for merge, the typos, etc, ; > should be amended into the right commits.; >; I am not sure I understand in which commit the typo fix will go.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub ; > <https://github.com/root-project/root/pull/1073#issuecomment-333487667>, ; > or mute the thread ; > <https://github.com/notifications/unsubscribe-auth/AGNuUxFmbbOXWlPg2lV0qNy3rDTPoYFmks5soLArgaJpZM4Pn4OQ>.; >",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1073#issuecomment-333489320:139,avoid,avoiding,139,https://root.cern,https://github.com/root-project/root/pull/1073#issuecomment-333489320,1,['avoid'],['avoiding']
Safety,"On 30/06/17 11:37, Philippe Canal wrote:; >; > maybe we could convert the nice little example you pasted above; > into a gtest.; >; > Too soon. As mentioned by Axel, this is 'just' one of the symptom of ; > the unthread-safe modification of the list.; >; Aren't test cases testing for symptoms? How this failing example doesn't ; increase the coverage in that area?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/719#issuecomment-312223743:220,safe,safe,220,https://root.cern,https://github.com/root-project/root/pull/719#issuecomment-312223743,1,['safe'],['safe']
Safety,"On MacOS this simple code using std::sort of RooAbsArg crashed because std::sort MacOS implementation goes to element outside of the collection. ; This simple code reproduced the problem by crashing on MacOS. ```; std::vector<RooAbsArg*> v;; int n = 38;. for (int i = 0; i < n; ++i) {; TString name = TString::Format(""a_%d"",i);; v.push_back( new RooRealVar (name, name, 10,0,20) );; }. std::sort(v.begin(), v.end(), [](RooAbsArg*a, RooAbsArg*b) { return a->dependsOn(*b); } );; ```; ; The PR with the simple check avoid a crash observed running the example in ; https://root-forum.cern.ch/t/upper-limit-for-signal-strength-on-off-problem-multiple-independent-runs/44657",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8111:514,avoid,avoid,514,https://root.cern,https://github.com/root-project/root/pull/8111,1,['avoid'],['avoid']
Safety,"On linux vector with custom allocator do indeed have a different layout that vector with the default allocator, The reason is that std::vector is that case ""starts' with an embedded instance of the allocator ... I am guessing that on MacOS the allocator is at the end instead .... I corrected the behavior of TStreamerInfo to not use the 'vector-shortcut' in the case of vector with custom allocator. This makes is go somewhat slower but at least works correctly. Since all vectors with the same custom allocator have the same layout, we could recover the performance by embedded support for VecOps::TAdoptAllocator directly in TStreamerInfo's actions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1707#issuecomment-371299491:544,recover,recover,544,https://root.cern,https://github.com/root-project/root/pull/1707#issuecomment-371299491,1,['recover'],['recover']
Safety,"On my machine the build with `runtime_cxxmodule` one failed with:; ```; Assertion failed: (idx < size()), function operator[], file SmallVector.h, line 304.; Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):; 0 rootcling_stage1 0x000000010d8f248c llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 88; 1 rootcling_stage1 0x000000010d8f29d0 PrintStackTraceSignalHandler(void*) + 28; 2 rootcling_stage1 0x000000010d8f0908 llvm::sys::RunSignalHandlers() + 152; 3 rootcling_stage1 0x000000010d8f3744 SignalHandler(int) + 276; 4 libsystem_platform.dylib 0x000000018f51a584 _sigtramp + 56; 5 libsystem_pthread.dylib 0x000000018f4e9c20 pthread_kill + 288; 6 libsystem_c.dylib 0x000000018f3f6a30 abort + 180; 7 libsystem_c.dylib 0x000000018f3f5d20 err + 0; 8 rootcling_stage1 0x00000001059936b8 llvm::SmallVectorTemplateCommon<unsigned long long, void>::operator[](unsigned long) + 92; ....; 1.	/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/stdint.h:18:2: current parser token 'include'; Subprocess aborted; ninja: build stopped: subcommand failed.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16494#issuecomment-2377165354:786,abort,abort,786,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2377165354,2,['abort'],"['abort', 'aborted']"
Safety,"On my platform I see following crash; ```; rootcling_stage1: /home/linev/git/root6/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::EnumDecl; From = clang::NamedDecl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1[0x2d1cbdf]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1[0x2d1a73e]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1[0x2d1a9ba]; /lib64/libpthread.so.0(+0x142d0)[0x7efbff6982d0]; /lib64/libc.so.6(gsignal+0x141)[0x7efbff15ffb1]; /lib64/libc.so.6(abort+0x127)[0x7efbff14955d]; /lib64/libc.so.6(+0x25431)[0x7efbff149431]; /lib64/libc.so.6(+0x34592)[0x7efbff158592]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1[0xf7eba3]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1[0xfaf9f5]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1[0xcb65b4]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1[0xcb9d94]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1[0xd41d76]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1[0xd42411]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1[0xd48ea2]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1[0xcd06fa]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1[0xcd1133]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1[0xcc42d1]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1[0xd488e8]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1[0xd492f9]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1(_ZN5cling17IncrementalParser13ParseInternalEN4llvm9StringRefE+0x6b6)[0x747596]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1(_ZN5cling17IncrementalParser7CompileEN4llvm9StringRefERKNS_18",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5004#issuecomment-586356179:672,abort,abort,672,https://root.cern,https://github.com/root-project/root/pull/5004#issuecomment-586356179,1,['abort'],['abort']
Safety,"On some platform operator delete taints the memory, so even right after the deletion the information stored by ~TObject is already erased. On those platform we no longer rely on the kNotDelete bit hack and rely on the system (which has tainted the memory assumingly for a reason) to detect the use-after-delete problems. Introduce 2 new functions. TObject::IsDestructed (used by TClonesArray) that detects that the destructor has been run and is active in all configuration. This should be used if the code knows that the memory has not been freed/deleted. ROOT::Detail::HasBeenDeleted(TObject*) with returns true if the platform does not taint the memory and if the kNotDeleted is not set (in all other case, it returns false). This fixes #11330",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11334:283,detect,detect,283,https://root.cern,https://github.com/root-project/root/pull/11334,2,['detect'],"['detect', 'detects']"
Safety,"On some platform operator delete taints the memory, so even right after the deletion the information stored by ~TObject is already erased. On those platform we no longer rely on the kNotDelete bit hack and rely on the system (which has tainted the memory assumingly for a reason) to detect the use-after-delete problems. Introduce 2 new functions. TObject::IsDestructed (used by TClonesArray) that detects that the destructor has been run and is active in all configuration. This should be used if the code knows that the memory has not been freed/deleted. ROOT::Detail::HasBeenDeleted(TObject*) with returns true if the platform does not taint the memory and if the kNotDeleted is not set (in all other case, it returns false). This fixes #11330. Backport of https://github.com/root-project/root/pull/11334",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11405:283,detect,detect,283,https://root.cern,https://github.com/root-project/root/pull/11405,2,['detect'],"['detect', 'detects']"
Safety,"On some systems (CentOS 8) latest chrome not allows to run HTML files,; which are situated in /tmp directory. Only if such situation detected,; try to place HTML files into home directory and run headless chrome from such file. Fixes problem like this:; https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=ROOT-ubuntu2004,SPEC=cxx17,V=master/2435/testReport/projectroot/runtutorials/tutorial_v7_line_cxx/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5403:133,detect,detected,133,https://root.cern,https://github.com/root-project/root/pull/5403,1,['detect'],['detected']
Safety,"On the other hand, I have prepared a rehauled-version that is thread-safe so that doxygen can run in parallel: https://github.com/root-project/root/pull/9966#issuecomment-1055977012. (Here I did check that things were faster.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10195#issuecomment-1075135595:69,safe,safe,69,https://root.cern,https://github.com/root-project/root/pull/10195#issuecomment-1075135595,1,['safe'],['safe']
Safety,"On weak GPUs, tests might take very long when they all run in parallel.; This can be avoided with a resource lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16803:85,avoid,avoided,85,https://root.cern,https://github.com/root-project/root/pull/16803,1,['avoid'],['avoided']
Safety,"On windows, there are instances when the rdict file is still in use when we try to remove it. This happens due to some problem with file handling in LLVM5 which got resolved in D63453(https://reviews.llvm.org/D63453). But it was difficult to backport. With this commit, we switch to the standard C++ library functions for generating rdict files and avoid using this particular API of LLVM. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6184:349,avoid,avoid,349,https://root.cern,https://github.com/root-project/root/pull/6184,1,['avoid'],['avoid']
Safety,"Once merged, this should give us fresh states for the incremental builds in pull requests for the platforms that are currently failing; massively speeding them up and also avoiding; ```; Warning in cling::IncrementalParser::CheckABICompatibility():; Possible C++ standard library mismatch, compiled with __GLIBCXX__ '20230426'; Extraction of runtime standard library version was: '20230511'; ```; on Fedora 38, which recently had a compiler upgrade.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12830#issuecomment-1550932442:172,avoid,avoiding,172,https://root.cern,https://github.com/root-project/root/pull/12830#issuecomment-1550932442,1,['avoid'],['avoiding']
Safety,One 'meta question'. How much of this 'duplicates' the functionality of TTree::ReadFile? [Just trying to avoid maintaining two .csv parser if we can avoid it ...],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1160#issuecomment-335487239:105,avoid,avoid,105,https://root.cern,https://github.com/root-project/root/pull/1160#issuecomment-335487239,2,['avoid'],['avoid']
Safety,"One also can configure websocket timeout when creating THttpServer. Required for TWebCanvas prototype,; but also can be used in other applications",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/503:33,timeout,timeout,33,https://root.cern,https://github.com/root-project/root/pull/503,1,['timeout'],['timeout']
Safety,"One can add ; ```; #if !defined(_MSC_VER); #define _MSC_VER 0; #endif; ```; but in the current version there is no undefined behavior, so it is safe.; I would even blame the compiller/preprocessor as the offending code ; ```; defined(_MSVC_LANG) && _MSVC_LANG >= 201703L; ``` ; is very standard. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8267#issuecomment-851398062:144,safe,safe,144,https://root.cern,https://github.com/root-project/root/issues/8267#issuecomment-851398062,1,['safe'],['safe']
Safety,"One challenge (see the related unfinished PR: https://github.com/root-project/root/pull/1053) is that it is always ""risky"" to make memory allocation (or any other 'can fail' operation) within a signal handling routine. I would strongly recommend that the capture the stack-trace be attempted in a separate PR. (And it would be even better if #1053 was first completed).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10366#issuecomment-1122806975:116,risk,risky,116,https://root.cern,https://github.com/root-project/root/pull/10366#issuecomment-1122806975,1,['risk'],['risky']
Safety,"One have to provide connection id when accepting file dialog request from client.; This allows to use file dialogs for window with multiple connections at the same time. In eve7 use `RWebWindow` methods to avoid direct dependency from `RBrowser`. `RFileDialog` also used in `RBrowser`, `RCanvas`, `TWebCanvas`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13154:206,avoid,avoid,206,https://root.cern,https://github.com/root-project/root/pull/13154,1,['avoid'],['avoid']
Safety,One meta point. I am not sure whether a global setting (as opposed to a per tree) setting is the right interface. (As is the setting is inherently non-thread safe and another thread could switch during the creation of a TTree) ....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1003#issuecomment-329969189:158,safe,safe,158,https://root.cern,https://github.com/root-project/root/pull/1003#issuecomment-329969189,1,['safe'],['safe']
Safety,Only a clone timeout.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1984#issuecomment-407999130:13,timeout,timeout,13,https://root.cern,https://github.com/root-project/root/pull/1984#issuecomment-407999130,1,['timeout'],['timeout']
Safety,"Only register actual observables as value servers in the `RooEvaluatorWrapper` this avoids that spurious variables appear in user code, which were only meant to be used internally by the new CPU evaluation backend. To make the management of the parameter easier, impose the new reasonable constraint that when resetting the data via `setData()`, the new dataset needs to have the same structure as the old one. It was confirmed with an ATLAS model provided by Will that this commit is fixing the problem of spurious variables. A unit test is also implemented. FYI @will-cern",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15061:84,avoid,avoids,84,https://root.cern,https://github.com/root-project/root/pull/15061,1,['avoid'],['avoids']
Safety,Original commit message:. The Sema::LookupConstructor is not iteration safe. When looking up a ctor the modules infrasturcture deserializes more ctor; candidates in the body of the function causing the internal vector implementation; to rellocate and invalidate the pointers. This workaround should address the failures reported by LCG. The real fix is being processed here https://reviews.llvm.org/D91524 and we; after being merged we should be able to backport it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7350:71,safe,safe,71,https://root.cern,https://github.com/root-project/root/pull/7350,1,['safe'],['safe']
Safety,"Originally, the changes in this branch avoided the unload/load cycle for the `.x` command, if the timestamp of a file has not changed. Due to potential problems with static variable initialization, this behavior is not finally part of this PR. Other than that, this branch includes several improvements:; - General `MetaSema.cpp` code cleanup.; - `.x` now has a list of (fallback) function names that we will try to call, in order. This makes it possible to add alternate entry points for a macro that are independent from the filename, and therefore immune to file renaming.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4465:39,avoid,avoided,39,https://root.cern,https://github.com/root-project/root/pull/4465,1,['avoid'],['avoided']
Safety,"Other problem with Cling and tree in memory:; Fedora, root master version; ```; $ root scan.C; root [0]; Processing scan.C...; root [1] t->Draw(""a[0]""); Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1; root [2] scan(); root [3] t->Draw(""a[0]""). *** Break *** segmentation violation; ```; ```; $ root; root [0] .L scan.C++; Info in <TUnixSystem::ACLiC>: creating shared library /home/musinsky/./scan_C.so; root [1] scan(); root [2] t->Draw(""a[0]""); Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1; root [3] scan(); root [4] t->Draw(""a[0]""); root [5] scan(); root [6] t->Draw(""a[0]""); root [7] scan(); root [8] t->Draw(""a[0]""). *** Break *** segmentation violation; ```; lxplus.cern.ch (RHEL 9.4), root v6.32.06; ```; $ root; root [0] .L scan.C++; Info in <TUnixSystem::ACLiC>: creating shared library /afs/cern.ch/user/m/musinsky/./scan_C.so; root [1] scan(); root [2] t->Draw(""a[0]""); Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1; *** stack smashing detected ***: terminated; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16730#issuecomment-2432414023:1022,detect,detected,1022,https://root.cern,https://github.com/root-project/root/issues/16730#issuecomment-2432414023,1,['detect'],['detected']
Safety,Our CMake code for making path to headers relative is broken; for the v7 headers (as they don't have the 'CURRENT_SOURCE/inc'; prefix we check for). This caused that we have absolute paths for; those headers in the modulemap we ship with ROOT. This patch just hacks in the additional check for v7 headers; and a sanity check that should prevent this error in the future.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2003:312,sanity check,sanity check,312,https://root.cern,https://github.com/root-project/root/pull/2003,1,['sanity check'],['sanity check']
Safety,"Our CMake code modifies `find_package` to ignore any ROOT builtins, such that the builtin LLVM doesn't find and use system versions of the builtin dependencies. This is a bit hacky, but fortunately this needs to be done only when builtins are used. Therefore, this commit suggests to only do this redefinition of `find_package` if any builtins are used. This closes #8633, where it was requested to avoid this hack for the sake of being compatible with the `vcpkg` package manager. Although the hack is not completely removed, it is removed for the case where not builtins are used, which is probably what is done when using a C++ package manager to manage dependencies.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16274:399,avoid,avoid,399,https://root.cern,https://github.com/root-project/root/pull/16274,1,['avoid'],['avoid']
Safety,"Output of `valgrind` with the original report of just `#include <LoKi/ParticleCuts.h>`, replacing `1519` in the paths with `1529`:; ```; $ VALGRIND_LIB=/cvmfs/lhcb.cern.ch/lib/lcg/releases/valgrind/3.22.0-113bc/x86_64-el9-gcc13-dbg/libexec/valgrind/ valgrind --leak-check=full --suppressions=/cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/etc/valgrind-root.supp root.exe -q -e ""#include <LoKi/ParticleCuts.h>""; ==652727== Memcheck, a memory error detector; ==652727== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.; ==652727== Using Valgrind-3.22.0 and LibVEX; rerun with -h for copyright info; ==652727== Command: root.exe -q -e #include\ \<LoKi/ParticleCuts.h\>; ==652727== ; ------------------------------------------------------------------; | Welcome to ROOT 6.30/04 https://root.cern |; | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Feb 03 2024, 17:20:15 |; | From heads/master@tags/v6-30-04 |; | With g++ (GCC) 13.1.0 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. ==652727== Conditional jump or move depends on uninitialised value(s); ==652727== at 0xB2BAFE3: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so); ==652727== by 0xA9E4679: llvm::Evaluator::EvaluateBlock(llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Instruction, false, false, void>, false, false>, llvm::BasicBlock*&, bool&) (in /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so); ==652727== by 0xA9E5D5C: llvm::Evaluator::EvaluateFunction(llvm::Function*, llvm::Constant*&, llvm::SmallVectorImpl<llvm::Constant*> const&) (in /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15511#issuecomment-2166043260:477,detect,detector,477,https://root.cern,https://github.com/root-project/root/issues/15511#issuecomment-2166043260,1,['detect'],['detector']
Safety,"Over the years we have a pathological issue with cling when it calls directly; compiler API. Most of the API assume they are called from code residing in a; text file. This code has valid source locations which can be used for; comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling; should have an interface which gives a pseudo-valid, commonly-rooted unique; source location. We are bitten by this fact when preloading modules as if we have diagnostics; they cannot be ordered due to the fact that the compared decls from two; different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have; this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4339:691,avoid,avoids,691,https://root.cern,https://github.com/root-project/root/pull/4339,1,['avoid'],['avoids']
Safety,"P.S. @olifre Note that there are still some potential issues without my changes:; ```; root [1] TBrowser b; (TBrowser &) Name: Browser Title: ROOT Object Browser; root [2] Error in <TTreeFormula::DefinedVariable>: operator is not a datamember of ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >; Error in <TTreeFormula::Compile>: Bad numerical expression : ""tracks.operator""; Info in <TSelectorDraw::AbortProcess>: Variable compilation failed: {tracks.operator-().operator+().Py(),}; Error in <TTreeFormula::DefinedVariable>: operator is not a datamember of ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >; Error in <TTreeFormula::Compile>: Bad numerical expression : ""tracks.operator""; Info in <TSelectorDraw::AbortProcess>: Variable compilation failed: {tracks.operator-().Vect().unit().unit().Rho(),}; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13284#issuecomment-1642707327:413,Abort,AbortProcess,413,https://root.cern,https://github.com/root-project/root/pull/13284#issuecomment-1642707327,2,['Abort'],['AbortProcess']
Safety,PR updated to also address. 	346 - gtest-tree-tree-test-testBulkApiMultiple (Timeout),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10886#issuecomment-1318278945:77,Timeout,Timeout,77,https://root.cern,https://github.com/root-project/root/pull/10886#issuecomment-1318278945,1,['Timeout'],['Timeout']
Safety,"PS by having a closer look at the `TFileMerger` class I think we should have here ; https://github.com/root-project/root/blob/d286987139f8ba0833ab438c4523e388156deeb1/io/io/src/TFileMerger.cxx?plain=1#L893; the following lines ; ```C++; // save modifications to the target directory.; if (!(type&kIncremental)) {; // In case of incremental build, we will call Write on the top directory/file, so we do not need; // to call SaveSelf explicilty.; target->SaveSelf(kTRUE);; if (target != fOutputFile){; // Delete target directory after writting it ; // and avoid deleting output file if target is the output file ; delete target;; }; }; ```; which is the equivalent lines that I have put in my `fasterCustomHadd` script",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13531#issuecomment-1691863973:554,avoid,avoid,554,https://root.cern,https://github.com/root-project/root/issues/13531#issuecomment-1691863973,1,['avoid'],['avoid']
Safety,"Part of the RooFit code modernization, avoiding the use of unnecessary; wrapper classes and using a simple templated struct instead. The change in this PR is thoroughly tested by `stressRooFit`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10115:39,avoid,avoiding,39,https://root.cern,https://github.com/root-project/root/pull/10115,1,['avoid'],['avoiding']
Safety,"Partial fix of #8708.; In a setup where ROOT was installed in a system directory, ROOT was picking up headers from that directory instead of its own. . ## How to reproduce:; 1. `echo '#error This is the wrong header' > /my/include/directory/RooSpan.h` (or a few other headers).; 2. Install some builtins into that directory, e.g. VDT; 3. `cmake -DCMAKE_PREFIX_PATH=/my/include/directory/ <root>` to create a dependency to that include directory.; 4. Build. The problem only becomes visible when `A` depends on `B and C`, and `B` depends on something in `/system/include/`, and `C` is installed in those system includes as well. This generates a compile command such as:; ```; -I.../core/x -I.../core/y -I.../core/... -I.../A/include -I.../B/include -I/system/include/ -I.../C/include ...; ```. ## In this PR:; - Includes for VDT and XROOTD are fixed by making them `IMPORTED` targets, so their includes have lowest precedence.; - Some cheating where include directories are copied around between targets is removed. CMake should handle this.; - Some dependency and target management is simplified (or rather modernised with target-based cmake); - A broken dependency in RooFit is fixed, which was previously hidden by the cheating with include directories. ## What remains to be done:; It is likely that more builtins (or rather `FindXXX` have to be converted to `IMPORTED` targets, so they don't provoke this error again. A broken configuration can be detected by; 1. Having CMake pick up a dependency in some common directory; 2. Either; - Placing a lot of `#error`-ROOT headers in there or; - Searching `compile_commands.json` for `-I/my/include/directory/`; 3. Fixing the `FindXXX` for this dependency.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8709:1453,detect,detected,1453,https://root.cern,https://github.com/root-project/root/pull/8709,1,['detect'],['detected']
Safety,Patch Vc to avoid warnings about macro redefinitions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5168:12,avoid,avoid,12,https://root.cern,https://github.com/root-project/root/pull/5168,3,['avoid'],['avoid']
Safety,"Patch to handle template instantiation error recovery:; The current class SavePendingInstantiationsRAII ([L8109 -L8125](https://github.com/root-project/root/blob/a402af862ace9573193500bcccaa8b4d56cc6632/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h#L8109)) in clang/Sema.h which is called from cling/InterpreterParser.cpp [L920](https://github.com/root-project/root/blob/a402af862ace9573193500bcccaa8b4d56cc6632/interpreter/cling/lib/Interpreter/IncrementalParser.cpp#L920) can be replaced with the following patch in Sema.h; ```class PerformPendingInstantiationsRAII {; Sema &S;; public:; PerformPendingInstantiationsRAII(Sema &S): S(S) {} ;. ~PerformPendingInstantiationsRAII() {; S.PerformPendingInstantiations();; assert(S.PendingInstantiations.empty() &&; ""there shouldn't be any pending instantiations"");; }; };; ```; ; Change in InterpreterParser.cpp L902:; ```Sema::PerformPendingInstantiationsRAII PerformPendingInstantiations(S);```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1145689988:45,recover,recovery,45,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1145689988,1,['recover'],['recovery']
Safety,"People use RooFormula a lot via RooGenericPdf and RooFormulaVar!; Performance matters here. This commit avoids non-static `std::regex` in; `RooFormula::processFormula`, because constructing these on the fly can; become a bottleneck. This is a non-intrusive performance optimization that reduces the time spent for CMS workflows like the HZZ global fit by up to 5 %. Example profiles:; * HZZ multi-dim fit before this PR: https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/hzz_1/74; * HZZ multi-dim fit after this PR: https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/hzz_3/1815. `RooFormula::processFormula` is now more than ten times faster.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10205:104,avoid,avoids,104,https://root.cern,https://github.com/root-project/root/pull/10205,1,['avoid'],['avoids']
Safety,"Personally I avoid merging parameters, the GNU/getopts standards might allow it, but I personally think it's a source of confusion for new users. Regardless I'll do it, but @lmoneta has mentioned on the forums that he might be making a seperate PR swapping the protocol from HTTP to HTTPS, since this actually seems to be what the redirect is doing to begin with. Incidentally every instance of curl in this PR does seem to be using http. Alternative he proposed `data = TFile.Open('http://root.cern.ch/files/tmva_class_example.root')`. Personally I think the best approach would be to use both, since it ensures the security guarantees of HTTPS whilst also proactively fixing any potential redirects in the future just on the off chance. Would you like me to handle HTTPS in this PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7725#issuecomment-809361845:13,avoid,avoid,13,https://root.cern,https://github.com/root-project/root/pull/7725#issuecomment-809361845,1,['avoid'],['avoid']
Safety,Please recover `SrvAuthenticate` from libSrvAuth library,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13387:7,recover,recover,7,https://root.cern,https://github.com/root-project/root/issues/13387,1,['recover'],['recover']
Safety,"Please use the overload of `RooAbsData::createHistogram` with the RooFit command arguments, which doesn't showcase this confusing behavior. To avoid confusion in the future, the overload that you used with the int parameters is deprecated now, which should solve the issue. Let me know if that's fine for you!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10401#issuecomment-1103180614:143,avoid,avoid,143,https://root.cern,https://github.com/root-project/root/issues/10401#issuecomment-1103180614,1,['avoid'],['avoid']
Safety,"Please, if you can, do the PR. I actually don't understand where it should go, `v6-28-00-patches` branch of ROOT?. I have one more observation. When I don't modify the cmake, then as expected I get during configuration message; ```; Not able to recognize SSL version 3.1.0, disable SSL; ```; and `civetweb` is built with `-DNO_SSL` but `libssl.so.3` still gets linked. As I understand, this is because the `libRHTTP.so` is linked to `libNet.so` which links `libssl.so.3`. This is quite misleading as looking at `ldd libRHTTP.so` one can come to conclusion that it has been built with support of openssl even though this is not the case. I understand that this can't be avoided, it is just an observation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12766#issuecomment-1542123980:669,avoid,avoided,669,https://root.cern,https://github.com/root-project/root/issues/12766#issuecomment-1542123980,1,['avoid'],['avoided']
Safety,"Ported from Cppyy patch by @wlav :`; https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. Adds an iterator for using declarations to `TClingMethodInfo`. it should make redundant the pythonisations that add the method overloads from a base class to the derived class that uses them:; https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/PyROOT/src/PyzPythonHelpers.cxx#L113. Instead of relying on pythonisations for specific classes, this PR adds the necessary logic to have this functionality solved in a generic way in the bindings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3640:199,redund,redundant,199,https://root.cern,https://github.com/root-project/root/pull/3640,1,['redund'],['redundant']
Safety,Possibly scary timeout in `projectroot.roottest.root.hist.misc.roottest_root_hist_misc_runownership` on 32bits (@Axel-Naumann ) but unrelated to this PR. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7384#issuecomment-801278572:15,timeout,timeout,15,https://root.cern,https://github.com/root-project/root/pull/7384#issuecomment-801278572,1,['timeout'],['timeout']
Safety,Prefer string_view in function signatures.; Avoid instantiating strings whenever possible.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/937:44,Avoid,Avoid,44,https://root.cern,https://github.com/root-project/root/pull/937,1,['Avoid'],['Avoid']
Safety,"Prevent a TTree from calling its won RecursiveRemove. Call RecursiveRemove early in the TTree destructor (rather than last thing), to remove the tree; from any list (like another TTree's list of clones) to avoid that the destructor's deletion of; item (eg. the list of friends), provoke a call to this same TTree's RecursiveRemove which; will try to call the RecursiveRemove on the item being deleted. An alternative would be; to replace the pattern. `delete fFriends; fFriends = nullptr;`; with `auto tmp = fFriends; fFriends = nullptr; delete tmp;`. This fixes issue #9017 where we had a tear down crash because:. ~TTree call delete fFriends which call RecursiveRemove which reach another TTree's list of clone; where its find the (original) TTree and call its RecursiveRemove which tries (and fail) to call; RecursiveRemove on fFriends",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9021:206,avoid,avoid,206,https://root.cern,https://github.com/root-project/root/pull/9021,3,['avoid'],['avoid']
Safety,"Prevent unsafe shift that can cause FPE. Tag @couet . Note: no bad behavior of this code was observed, so this is ""an improvement"" rather than ""bug fix"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6561:8,unsafe,unsafe,8,https://root.cern,https://github.com/root-project/root/pull/6561,1,['unsafe'],['unsafe']
Safety,"Previously it detected the change of entry by comparing the 'current' instance to the last 'instance'; recorded. If all instance are used, this worked perfectly. If the instance are used sparsely (eg. with; selection in TTree::Draw) then from entry to the other, the 'first' instance used in an entry might be later/higher; than the last 'instance' used in the previous entry. This corrects the behavior introduced in 064e0a7d49b08e03667f9312421b6fb5b8d82285. This fixes ROOT-10170",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3946:14,detect,detected,14,https://root.cern,https://github.com/root-project/root/pull/3946,1,['detect'],['detected']
Safety,"Previously, the Canvas `Close` signal which triggers a call to the local function `close` which; was unconditionally call `Kill` on its associated thread would call it on an already deleted; object if the `TThread` was deleted before the `TCanvas`. This fix #10015 (detected by using ASAN).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10068:266,detect,detected,266,https://root.cern,https://github.com/root-project/root/pull/10068,1,['detect'],['detected']
Safety,"Primary changes proposed; - avoiding char to TString to char conversions; - avoid redundant call to xmlEngine().hasattr(node,att) checking instead for null ptr from getattr.; - Add specialization of void TMVA::Tools::ReadAttr( void* node, const char* attrname, T& value ) for float,int, short. [which seem to be the ones we use aside from bool, which now is the biggest contributor to ReadAttr* timing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/584:28,avoid,avoiding,28,https://root.cern,https://github.com/root-project/root/pull/584,3,"['avoid', 'redund']","['avoid', 'avoiding', 'redundant']"
Safety,Problem is not only eve7 - where derived classes used in examples. nlohmann/json used in TBufferJSON and planned for usage with TJSONFile.; There much more operations used with it. Idea to wait for llvm13 where one fully can avoid forward declarations and use directly `nlohmann::json`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11196#issuecomment-1216792717:225,avoid,avoid,225,https://root.cern,https://github.com/root-project/root/pull/11196#issuecomment-1216792717,1,['avoid'],['avoid']
Safety,"Problem with files globing - it takes alll files. ; But depending on compiled ROOT components, some pythonization files should be excluded.; It is already happens with `dataframe` component here.; Some time ago we redo all c++ cmake files to avoid files globing - I guess here we also should avoid it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8509#issuecomment-866732469:242,avoid,avoid,242,https://root.cern,https://github.com/root-project/root/pull/8509#issuecomment-866732469,2,['avoid'],['avoid']
Safety,Put float and int first as they might be more common column types. Also move call to TClass::GetClass last as it takes a lock and it's better to avoid it when possible. Following suggestion from https://github.com/root-project/root/pull/16528#issuecomment-2375899434,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16529:145,avoid,avoid,145,https://root.cern,https://github.com/root-project/root/pull/16529,1,['avoid'],['avoid']
Safety,Qualify calls to llvm::format that have ::std:: types as parameters to avoid ambiguity in overload resolution when ADL finds `std::format`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12730:71,avoid,avoid,71,https://root.cern,https://github.com/root-project/root/pull/12730,1,['avoid'],['avoid']
Safety,Quote variable to avoid CMake syntax warning,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1304:18,avoid,avoid,18,https://root.cern,https://github.com/root-project/root/pull/1304,1,['avoid'],['avoid']
Safety,"Quoting @pcanal:. > I am a bit lost ... Do we understand the reason for the thread unsafety? What data is there a race condition on? [Note for example that gPad is thread-local and in-itself not a cause for problem (unless several threads have their gPad pointing to the same pad). > One thing that would be helpful to understand the scope is the 2 stack traces of the 2 threads accessing the same pointer. Since you @andriish also found a workaround for your problem, it would be better to only change the code in ROOT once we understand exactly what the problem on the ROOT side is and how it is solved by this change (or another change). Therefore I'll close this PR here, but please feel free to engage with us again either here on GitHub or on the ROOT forum if you have practical problems again! Thanks",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6511#issuecomment-1808094349:83,unsafe,unsafety,83,https://root.cern,https://github.com/root-project/root/pull/6511#issuecomment-1808094349,1,['unsafe'],['unsafety']
Safety,"RARY GIF_INCLUDE_DIR); -- Could NOT find TIFF (missing: TIFF_LIBRARY TIFF_INCLUDE_DIR); -- Could NOT find PNG (missing: PNG_LIBRARY PNG_PNG_INCLUDE_DIR); -- Could NOT find JPEG (missing: JPEG_LIBRARY JPEG_INCLUDE_DIR); -- Building AfterImage library included in ROOT itself; -- Looking for LibXml2; -- Downloading and building XROOTD version; -- Cannot select cudnn without selecting cuda or tmva-gpu. Option is ignored; -- Building LLVM in 'Release' mode.; -- Could NOT find Z3: Found unsuitable version ""0.0.0"", but required is at least ""4.7.1"" (found Z3_LIBRARIES-NOTFOUND); -- Native target architecture is X86; -- Threads disabled.; -- Doxygen disabled.; -- Go bindings enabled.; -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH); -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH); -- OCaml bindings disabled.; -- LLVM host triple: x86_64-unknown-linux-gnu; -- LLVM default target triple: x86_64-unknown-linux-gnu; -- Building with -fPIC; -- Constructing LLVMBuild project information; -- Linker detection: GNU ld; -- Targeting X86; -- Targeting NVPTX; -- Clang version: 9.0.1; -- Cling version (from VERSION file): ROOT_0.9~dev; -- Cling will look for C++ headers in '/usr/bin/../lib64/gcc/x86_64-suse-linux/10/../../../../include/c++/10:/usr/bin/../lib64/gcc/x86_64-suse-linux/10/../../../../include/c++/10/x86_64-suse-linux:/usr/bin/../lib64/gcc/x86_64-suse-linux/10/../../../../include/c++/10/backward' at runtime.; -- And then fallback to: 'clang-12.0.0'; -- Performing Test found_stdstringview; -- Performing Test found_stdstringview - Failed; -- Performing Test found_stdexpstringview; -- Performing Test found_stdexpstringview - Success; -- Performing Test found_stod_stringview; -- Performing Test found_stod_stringview - Failed; -- Performing Test found_stdapply; -- Performing Test found_stdapply - Failed; -- Performing Test found_stdinvoke; -- Performing Test found_stdinvoke - Failed; -- Performing Test found_stdindexsequence;",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8097#issuecomment-832676622:2327,detect,detection,2327,https://root.cern,https://github.com/root-project/root/issues/8097#issuecomment-832676622,1,['detect'],['detection']
Safety,"RBrowser: fix layout, avoid use of private data members",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4628:22,avoid,avoid,22,https://root.cern,https://github.com/root-project/root/pull/4628,1,['avoid'],['avoid']
Safety,"REFIX} -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++ -DCMAKE_INSTALL_LIBDIR=${CONDA_PREFIX}/lib -DCMAKE_LINKER=/usr/bin/gold -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=""-I/home/sehrig/workspace/cling9demo/install/include/cling/"" -DCMAKE_PREFIX_PATH=/home/sehrig/workspace/cling9demo/install/lib/cmake/cling/; -- The C compiler identification is Clang 11.0.0; -- The CXX compiler identification is Clang 11.0.0; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /opt/spack-modules/linux-ubuntu20.04-skylake_avx512/gcc-10.2.0/llvm-11.0.0-ubn363okfkmwy6dpoozlbgidl4bks3wd/bin/clang - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /opt/spack-modules/linux-ubuntu20.04-skylake_avx512/gcc-10.2.0/llvm-11.0.0-ubn363okfkmwy6dpoozlbgidl4bks3wd/bin/clang++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Building xeus-cling v0.12.0; -- Found LLVM_CONFIG as /opt/spack-modules/linux-ubuntu20.04-skylake_avx512/gcc-10.2.0/llvm-11.0.0-ubn363okfkmwy6dpoozlbgidl4bks3wd/bin/llvm-config; -- Found nlohmann_json: /home/sehrig/application/miniconda3/envs/cling9demo/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.9.1"", minimum required is ""3.2.0"") ; -- Found LibUUID: /opt/spack-modules/linux-ubuntu20.04-skylake_avx512/gcc-10.2.0/libuuid-1.0.3-lxispdpiiahk26ye53cg5qn7bk24tywj/lib/libuuid.so ; -- Found OpenSSL: /opt/spack-modules/linux-ubuntu20.04-skylake_avx512/gcc-10.2.0/openssl-1.1.1g-doxvrf6l7lm7c55agwefmfbxe4kwwwbi/lib/libcrypto.so (found version ""1.1.1g"") ; CMake Error at CMakeLists.txt:114 (find_package):; Found package configuration file:. /home/sehrig/workspace/cling9demo/install/lib/cmake/cling/ClingConfig.cmake. but it set Cling_FOUND to FALSE so package ""Cling"" is considered to be NOT; FOUND. Reason give",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-784497193:1390,Detect,Detecting,1390,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-784497193,2,['Detect'],['Detecting']
Safety,"RNTupleWriter::CommitCluster (this=0xd7486120, commitClusterGroup=true) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTuple.cxx:370; #12 0xf7e2c674 in ROOT::Experimental::RNTupleWriter::~RNTupleWriter (this=0xd7486120, __in_chrg=<optimized out>) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTuple.cxx:327; #13 0x56560f58 in std::default_delete<ROOT::Experimental::RNTupleWriter>::operator() (__ptr=0xd7486120, this=<optimized out>) at /usr/include/c++/13/bits/unique_ptr.h:100; #14 0x565606cf in std::default_delete<ROOT::Experimental::RNTupleWriter>::operator() (__ptr=<optimized out>, this=<optimized out>) at /usr/include/c++/13/bits/unique_ptr.h:94; #15 std::unique_ptr<ROOT::Experimental::RNTupleWriter, std::default_delete<ROOT::Experimental::RNTupleWriter> >::~unique_ptr (this=0xffde8b50, __in_chrg=<optimized out>) at /usr/include/c++/13/bits/unique_ptr.h:405; #16 RNTuple_LargeFile2_Test::TestBody (this=0x57246b80) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_extended.cxx:260; #17 0xf7d7159c in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) [clone .constprop.0] () from /lib/libgtest.so.1.13.0; #18 0xf7d5cf46 in testing::Test::Run() () from /lib/libgtest.so.1.13.0; #19 0xf7d5d17a in testing::TestInfo::Run() () from /lib/libgtest.so.1.13.0; #20 0xf7d5d327 in testing::TestSuite::Run() () from /lib/libgtest.so.1.13.0; #21 0xf7d6a95b in testing::internal::UnitTestImpl::RunAllTests() () from /lib/libgtest.so.1.13.0; #22 0xf7d695cb in testing::UnitTest::Run() () from /lib/libgtest.so.1.13.0; #23 0xf7d1e137 in main () from /lib/libgtest_main.so.1.13.0; #24 0xf6837969 in __libc_start_call_main () from /lib/libc.so.6; #25 0xf6837a2c in __libc_start_main_impl () from /lib/libc.so.6; #26 0x56560e0b in _start (); CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ~~~",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12427:12422,abort,aborted,12422,https://root.cern,https://github.com/root-project/root/issues/12427,1,['abort'],['aborted']
Safety,"ROOT ""swallows"" `std::`, and we need to figure out how to handle the namespaces; `std::foo` vs `::foo`. Until we do that, avoid the issue by renaming the only; known ""clash"", using `std::__ROOT` as in several other backport cases. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9093:122,avoid,avoid,122,https://root.cern,https://github.com/root-project/root/pull/9093,1,['avoid'],['avoid']
Safety,"ROOT has several features which interact with libraries and require implicit header inclusion. This can be triggered by reading or writing data on disk, or user actions at the prompt. Often, the headers are immutable and reparsing is redundant. C++ Modules are designed to minimize the reparsing of the same header content by providing an efficient on-disk representation of C++ Code. More information about the C++ modules technology can be found at README/README.CXXMODULES.md. This undertaking was successful due to the efforts of many people. Especially, Raphael Isemann (@Teemperor), Oksana Shadura(@oshadura) and Yuka Takahashi (@yamaguchi1024). We are grateful to Liz Sexton-Kennedy, Peter Elmer (@pelmer), Brian Bockelman(@bbockelm) and Ken Bloom for putting (wo)manpower into the project and supporting it. This work has been supported by an Intel Parallel Computing Center grant, by U.S.National Science Foundation grants PHY-1450377, ACI-1450323 and PHY-1624356, and by the U.S. Department of Energy, Office of Science. Special thanks to Axel Naumann (@Axel-Naumann) and Philippe Canal (@pcanal) for helping and supporting the technical efforts over the years. We are thankful to Shahzad Malik Muzaffar (@smuzaffar), David Lange (@davidlange6) and Mircho Rodozov (@mrodozov) from the CMSSW development team, CERN/EP-SFT and the ROOT team.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4395:234,redund,redundant,234,https://root.cern,https://github.com/root-project/root/pull/4395,1,['redund'],['redundant']
Safety,"ROOT introduced a build flag in 6.26.00 that allowed you to build it using the `ryml` library instead of nlohmann-json as the backend for the JSON IO. But that was not particularly great. The `ryml` backend code is at risk of rotting, because to try and test it one needs a special ROOT build. It would be much better to just build both backends if `ryml` is installed on the system, and have a mechanism for developers to try this other backend. This is implemented in this commit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12221:218,risk,risk,218,https://root.cern,https://github.com/root-project/root/pull/12221,1,['risk'],['risk']
Safety,"ROOT's current copy of `FindTBB.cmake` cannot detect versions of newer TBBs without the header `tbb/tbb_stddef.h`. As a result, `TBB_VERSION` is unset and cannot be used for further checks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8260:46,detect,detect,46,https://root.cern,https://github.com/root-project/root/issues/8260,1,['detect'],['detect']
Safety,ROOT-8872 Optimize TTree::Fill() to avoid expensive modulo operations,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1058:36,avoid,avoid,36,https://root.cern,https://github.com/root-project/root/pull/1058,1,['avoid'],['avoid']
Safety,ROOT-9435 [TMVA] -- Avoid unsafe reinterpret_cast,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2254:20,Avoid,Avoid,20,https://root.cern,https://github.com/root-project/root/pull/2254,2,"['Avoid', 'unsafe']","['Avoid', 'unsafe']"
Safety,"ROOT/REntry.hxx>; #include <ROOT/RNTuple.hxx>; #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;; using ROOT::Experimental::RNTupleModel;; using ROOT::Experimental::RNTupleReader;; using ROOT::Experimental::RNTupleWriter;. static void write() {; auto particleModel = RNTupleModel::Create();; auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::CreateBare();; auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");; auto entry = writer->CreateEntry();. *energy = 1.0;; particles->Fill();; writer->Fill(*entry);; }. void collection_entry() {; write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");; reader->Show(0);; }. int main() {; collection_entry();; return 0;; }; ```. </details>. This doesn't work right now, even for a single entry as in the code example above; when opening the ntuple, the code crashes:; ```; terminate called after throwing an instance of 'std::bad_alloc'; what(): std::bad_alloc; Aborted (core dumped); ```. This is because `RNTupleModel::CreateEntry()` calls; https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RNTupleModel.cxx#L363-L365; for all top-level field. Conceptually it's possible to fix by applying the same logic as `RNTupleModel::MakeCollection`, something like; ```diff; diff --git a/tree/ntuple/v7/src/RNTupleModel.cxx b/tree/ntuple/v7/src/RNTupleModel.cxx; index c652608bf1..ed02338e2b 100644; --- a/tree/ntuple/v7/src/RNTupleModel.cxx; +++ b/tree/ntuple/v7/src/RNTupleModel.cxx; @@ -347,7 +347,11 @@ std::unique_ptr<ROOT::Experimental::REntry> ROOT::Experimental::RNTupleModel::Cr; ; auto entry = std::unique_ptr<REntry>(new REntry(fModelId));; for (const auto &f : fFieldZero->GetSubFields()) {; - entry->AddValue(f->CreateValue());; + if (auto *collectionField = dynamic_cast<RCollectionField *>(f)) {; + entry->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14642:2334,Abort,Aborted,2334,https://root.cern,https://github.com/root-project/root/issues/14642,1,['Abort'],['Aborted']
Safety,"ROOT/RVec.hxx(2062,16):. warning C4805: '==': unsafe mix of type 'const T' and type 'bool'; in operation [C:\Soft\root_64\math\vecops\test\vecops_rvec.vcxproj]; with; [; T=int; ]",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9812:46,unsafe,unsafe,46,https://root.cern,https://github.com/root-project/root/pull/9812,1,['unsafe'],['unsafe']
Safety,"ROOT::R::Label is a synonym of Rcpp::_. We should just bind to it, instead of; introducing a new variable causing redundant deserialization from the C++ module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4409:114,redund,redundant,114,https://root.cern,https://github.com/root-project/root/pull/4409,1,['redund'],['redundant']
Safety,ROOT_HEAD failed with error message: Fail to detect cryptographic random generator,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14958:45,detect,detect,45,https://root.cern,https://github.com/root-project/root/issues/14958,1,['detect'],['detect']
Safety,"RWebWindow uses credit-based data transport. ; Default number of credits was always 10 and can be too small.; Now this default value can be changed via ""WebGui.ConnCredits"" variable. In WebEve checks amount of available credits to suppress highlight operations - main source of small packets send to server.; Let avoid situation when such small packets over-flood communication channel. Latest JSROOT code with better organization how TCanvas and TFrame painters provided when required.; Previous implementation was not adequate, while cannot take into account that object may be drawn on TCanvas or on RCanvas. Now it clearly stated in the code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6920:313,avoid,avoid,313,https://root.cern,https://github.com/root-project/root/pull/6920,1,['avoid'],['avoid']
Safety,"Rather than non-const reference. This has two advantages:; - passing fundamental types by value is slightly more efficient; - passing by const value helps avoiding typos such as `if (x = 0)`. This fixes ROOT-11009. Reviewers, what do you think? Can this break any currently valid code?. - [x] add test",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6526:155,avoid,avoiding,155,https://root.cern,https://github.com/root-project/root/pull/6526,1,['avoid'],['avoiding']
Safety,"Re-implement `MakeNumpyDataFrame` with no interpreter calls, and avoid a; explicit lifetime management of Python objects in the RDNumpyDS helper. Like this, the former `RNumpyDS.hxx` helper could be moved to; `tree/dataframe`, as it doesn't import `Python.h` anymore. The `RNumpyDS` also got renamed to `RVecDS`, because it takes RVecs and; not NumPy arrays directly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15031:65,avoid,avoid,65,https://root.cern,https://github.com/root-project/root/pull/15031,1,['avoid'],['avoid']
Safety,Re-running mac1015/cxx17 makes it work. i.e the failure ; ```; 11:06:30 [ 71%] Building CXX object io/io/CMakeFiles/RIO.dir/v7/src/RFile.cxx.o; 14:48:26 Cancelling nested steps due to timeout; 14:48:26 Could not connect to macphsft20 to send interrupt signal to process; ```; was transient.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3760#issuecomment-630506499:184,timeout,timeout,184,https://root.cern,https://github.com/root-project/root/pull/3760#issuecomment-630506499,1,['timeout'],['timeout']
Safety,"Reading with TTree works. This affects RDataFrame critically. To reproduce at the prompt:. ```; /tmp source /home/blue/ROOT/v6.24/_build/bin/thisroot.fish; /tmp root -l # with v6.24; root [0] ROOT::RDataFrame(10).Define(""x"", ""ROOT::RVec<int>{1,2,3}"").Snapshot(""t"", ""f.root"");; root [1] .q; /tmp source /home/blue/ROOT/master/_build/bin/thisroot.fish; /tmp root -l # now with master; root [0] ROOT::RDataFrame(""t"", ""f.root"").Display(""x"")->Print(); Fatal: 0 violated at line 1509 of `../io/io/src/TGenCollectionProxy.cxx'; aborting; #0 0x00007f4f9c4a99ea in wait4 () from /usr/lib/libc.so.6; #1 0x00007f4f9c427a2b in do_system () from /usr/lib/libc.so.6; #2 0x00007f4f9cdcc21c in TUnixSystem::Exec (this=0x55b0a9ebf800, shellcmd=0x55b0ae8f76d0 ""/home/blue/ROOT/master/_build/etc/gdb-backtrace.sh 143932 1>&2"") at ../core/unix/src/TUnixSystem.cxx:2120; #3 0x00007f4f9cdccb0e in TUnixSystem::StackTrace (this=0x55b0a9ebf800) at ../core/unix/src/TUnixSystem.cxx:2411; #4 0x00007f4f9cc5e089 in DefaultErrorHandler (level=6000, abort_bool=true, location=0x7f4f9c10b012 """", msg=0x55b0af523450 ""0 violated at line 1509 of `../io/io/src/TGenCollectionProxy.cxx'"") at ../core/base/src/TErrorDefaultHandler.cxx:174; #5 0x00007f4f9cd3a560 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7f4f9c10b012 """", fmt=0x7f4f9ce795d8 ""%s violated at line %d of `%s'"", ap=0x7ffe675d1310) at ../core/foundation/src/TError.cxx:152; #6 0x00007f4f9cd3ab94 in Fatal (location=0x7f4f9c10b012 """", fmt=0x7f4f9ce795d8 ""%s violated at line %d of `%s'"") at ../core/foundation/src/TError.cxx:249; #7 0x00007f4f9bf0a0fa in TGenCollectionProxy__VectorNext () at ../io/io/src/TGenCollectionProxy.cxx:1509; #8 0x00007f4f9c009167 in TStreamerInfoActions::GenericLooper::Numeric<int, int>::ConvertAction (items=0x55b0af2ac580, start=0x55b0af0e38d0, end=0x55b0af0e38dc, loopconf=0x7ffe675d1550) at ../io/io/src/TStreamerInfoActions.cxx:2447; #9 0x00007f4f9bff45fd in TStreamerInf",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9136:521,abort,aborting,521,https://root.cern,https://github.com/root-project/root/issues/9136,1,['abort'],['aborting']
Safety,Rebased and addressed review comments. The registration and cleanup of the UUID is kept for now because it cannot be safely removed in all cases. To be addressed in a future PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9486#issuecomment-1011299257:117,safe,safely,117,https://root.cern,https://github.com/root-project/root/pull/9486#issuecomment-1011299257,1,['safe'],['safely']
Safety,Rebased and addressed the remaining comments. The redundant size variables have also been removed from TNDArray and TNDArrayT.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7499#issuecomment-994498821:50,redund,redundant,50,https://root.cern,https://github.com/root-project/root/pull/7499#issuecomment-994498821,1,['redund'],['redundant']
Safety,Rebased on master to fix conflicts.; I will definitely add more multi-thread tests but I think this can be safely merged if jenkins returns green.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1037#issuecomment-333239205:107,safe,safely,107,https://root.cern,https://github.com/root-project/root/pull/1037#issuecomment-333239205,1,['safe'],['safely']
Safety,Rebased to hopefully avoid the previously remaining test failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11631#issuecomment-1480146242:21,avoid,avoid,21,https://root.cern,https://github.com/root-project/root/pull/11631#issuecomment-1480146242,1,['avoid'],['avoid']
Safety,"Rebased/improved version of #4966. Several parameters can be configured via rootrc file:; ```; WebEve.GLViewer: Three #kind of GLViewer, either Three, JSRoot or RCore; WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called; WebEve.HTimeout: 200 # timeout in ms for elements highlight; WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset; WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact; ```; Implement Browse functionality - shows selected item in SummaryView. In `JSRoot` viewer: ; * Provide single-click mouse handler, used for tracks/jets selection; In `Three` viewer: ; * Improve highlight handling in plain three.js mode; * provide position-dependent context menu; In `RCore` viewer:; * load required script during `init` call. Support more dashed styles for lines. By default, double-click ignored in GL view, can be configured",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4972:278,timeout,timeout,278,https://root.cern,https://github.com/root-project/root/pull/4972,1,['timeout'],['timeout']
Safety,"Recent llvm versions use llvm::Error as a facility for error handling. It includes an ErrorInfoBase class which has virtual methods (with a pinned vtable in the object file). This makes it harder to include headers that use transitively include llvm/Support/Error.h crossing rtti/no-rtti worlds (that is llvm is compiled with -fno-rtti and TCling and friends with -frtti). Newer llvm versions have a lot of usage of llvm::Error in its header files and it is practically impossible to solve this problem by avoiding the headers that use ErrorInfoBase. There are two other alternatives. First we can outline the functions in Error.h which use ErrorInfoBase but then we will hit other things like RTTIRoot which also needs special treatment. Secondly, we can enable llvm's RTTI builds for ROOT and this is what this patch does.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10289:506,avoid,avoiding,506,https://root.cern,https://github.com/root-project/root/pull/10289,1,['avoid'],['avoiding']
Safety,"Reduce amount of code, special treatments and the need for casting in RooFit by providing a type-safe proxy template that acts a bit like smart pointers. **For reviewers**:; The central part of this PR is the file `RooProxy.h`. Many other changes are just a fallout from unifying all proxy classes in this one. A `RooProxy<T>` is like a smart pointer to `T`, but it does additional important stuff in the base class.; Previously, RooFit proxies were storing only base class pointers forcing users of these proxies to cast whenever they wanted to do something. The weak point of the new thing is backward compatibility. Legacy root files and legacy RooFit classes act like a `RooProxy<RooAbsArg>`, a pointer to a very basic class. If the template argument was chosen properly, one wouldn't need any special functions because one can just use the newly provided `proxy->` to type-safely dereference the proxy, but that only works for new code. To support old code (e.g. outside of RooFit), there's four overloads of the function `lvptr`, which is supposed to cast the pointer to the payload into a type deriving from one of the ""LValue"" classes `RooAbsRealLValue` or `RooAbsCategoryLValue`. That's safe if the template argument derives from those, but it's unsafe for all other (=legacy) proxies. I tagged the unsafe conversion functions with `R__SUGGEST_ALTERNATIVE` to give users a way to move away from unsafe casts, but I'm unsure if one should just `static_cast` as RooFit was doing in the past (= no change of runtime behaviour) or `dynamic_cast` for better type safety. Opinions?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4969:97,safe,safe,97,https://root.cern,https://github.com/root-project/root/pull/4969,7,"['safe', 'unsafe']","['safe', 'safely', 'safety', 'unsafe']"
Safety,"Reduce usage of unsafe `Form()` function, especially in Thread.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11744:16,unsafe,unsafe,16,https://root.cern,https://github.com/root-project/root/pull/11744,1,['unsafe'],['unsafe']
Safety,Refactor signal handling and replace signal handlers with thread-safe functions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/133:65,safe,safe,65,https://root.cern,https://github.com/root-project/root/pull/133,3,['safe'],['safe']
Safety,"Regarding `roottest-python-pickle-read`:. ```; Start 1437: roottest-python-pickle-read; 14/20 Test #1437: roottest-python-pickle-read ........................***Failed 1.36 sec; -- TEST COMMAND -- ; cd /srv/root/build/roottest/python/pickle; /usr/bin/timeout -s USR2 270s /usr/bin/python /srv/root/src/roottest/python/pickle/PyROOT_readtests.py --fixcling; -- BEGIN TEST OUTPUT --; Test reference counting of pickled object ... ok; Test that a TBufferFile can be pickled ... ok; Test serialization of the ROOT Python module. ... ERROR; Test reading of a histogram from a pickle file ... ok; Test reading of an std::vector<double> from a pickle file ... ok; Test reading of a user-defined object from a pickle file ... ok; Test reading of a ROOT object in a namespace from a pickle file ... ok; Test reading PyROOT custom types ... ok; [ROOT-10810] Test reading a RooDataSet with weights ... ok. ======================================================================; ERROR: Test serialization of the ROOT Python module.; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/srv/root/src/roottest/python/pickle/PyROOT_readtests.py"", line 177, in test3PickleFacadeCheck; facade = pickle.loads(pickle.dumps(get_root_facade())); TypeError: cannot pickle 'ROOTFacade' object; ```. This piece of the pickle test was added by @vepadulano yesterday, it must have failed because your ROOT installation was not updated with the corresponding fix in PyROOT (also merged by @vepadulano yesterday).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936#issuecomment-823938499:251,timeout,timeout,251,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-823938499,1,['timeout'],['timeout']
Safety,"Regarding the clang-tidy fail: https://travis-ci.org/github/root-project/root/jobs/767085481#L4062. This is unrelated to this patch. I plan to replace the StackAllocator in a follow-up patch, because it does not work with multi-threading. There is a better/safer way of achieving this. Regarding the clang-format fail: https://travis-ci.org/github/root-project/root/jobs/767085483#L254. This is the issue we had before, the CI bot uses an order version of clang-format which produces this weird formatting based on the same style file. I locally use version 9.0 of clang-format and the formatting actually looks more reasonable. Perhaps it would be better to update the clang-format version that the CI bot uses?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7882#issuecomment-820287700:257,safe,safer,257,https://root.cern,https://github.com/root-project/root/pull/7882#issuecomment-820287700,1,['safe'],['safer']
Safety,"RegisterClasses"" ||; ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/jhahnfel/ROOT/llvm13/src/core/base/inc/TNamed.h:26,; from /home/jhahnfel/ROOT/llvm13/src/core/meta/inc/TDictionary.h:44,; from /home/jhahnfel/ROOT/llvm13/src/core/meta/inc/TDataType.h:25,; from /home/jhahnfel/ROOT/llvm13/src/core/meta/inc/TInterpreter.h:25,; from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.h:27,; from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.cxx:20:; /home/jhahnfel/ROOT/llvm13/src/core/base/inc/TString.h:844:15: note: candidate: ‘Bool_t operator==(const string_view&, const char*)’; inline Bool_t operator==(const std::string_view &s1, const char *s2); ^~~~~~~~; In file included from /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/tools/clang/include/clang/Basic/DiagnosticIDs.h:19,; from /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/tools/clang/include/clang/Basic/Diagnostic.h:17,; from /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/tools/clang/include/clang/AST/NestedNameSpecifier.h:18,; from /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/tools/clang/include/clang/AST/Type.h:21,; from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TClingDeclInfo.h:20,; from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TClingClassInfo.h:28,; from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TClingBaseClassInfo.h:29,; from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.cxx:24:; /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/include/llvm/ADT/StringRef.h:919:15: note: candidate: ‘bool llvm::operator==(llvm::StringRef, llvm::StringRef)’; inline bool operator==(StringRef LHS, StringRef RHS) {; ^~~~~~~~; ```; This happens with a C++17 build in general, C++14 is fine. On the performance side, the current state seems to veery slow: `ctest -j12 -R dataframe .` used to take in the order of 2m30s, now I aborted it after 13 minutes. A lot of time seems to be spent in `sys`, are you aware of changes that could explain this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1088491041:2351,abort,aborted,2351,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1088491041,1,['abort'],['aborted']
Safety,Reimplement signal handler to avoid async-unsafe functions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/97:30,avoid,avoid,30,https://root.cern,https://github.com/root-project/root/pull/97,2,"['avoid', 'unsafe']","['avoid', 'unsafe']"
Safety,"Related to this problems, there was also a question on the forum:; * https://root-forum.cern.ch/t/roofit-numcpu-in-pyroot/57424. Then, there is also the possibility to build ROOT with the `std::unique_ptr` interfaces already:; * https://root.cern/doc/master/release-notes.html#compile-your-code-with-memory-safe-interfaces",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11397#issuecomment-1848591204:307,safe,safe-interfaces,307,https://root.cern,https://github.com/root-project/root/issues/11397#issuecomment-1848591204,1,['safe'],['safe-interfaces']
Safety,"Relevant note after discussion on Mattermost / ROOT IO meeting -. 1. This avoids construction of the IMTHelper object on the stack when IMT is disabled at compile time. @amadio plans to do another follow-up to try and avoid the object when IMT is enabled at compile time but disabled at runtime.; 2. ~1.3s of savings is distributed over 100M `TTree::Fill` calls, which amounts to something like 13ns of savings per call. Still worth doing, the absolute order-magnitude wasn't easily apparent to me the first time I read through the ticket. Thanks Guilherme!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/741#issuecomment-313731027:74,avoid,avoids,74,https://root.cern,https://github.com/root-project/root/pull/741#issuecomment-313731027,2,['avoid'],"['avoid', 'avoids']"
Safety,"Remotely related to this PR, could remove the redundant `#include ""RooCintUtils.h""`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1714#issuecomment-371549314:46,redund,redundant,46,https://root.cern,https://github.com/root-project/root/pull/1714#issuecomment-371549314,1,['redund'],['redundant']
Safety,Remove all redundant header guards around #include directives,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/341:11,redund,redundant,11,https://root.cern,https://github.com/root-project/root/pull/341,1,['redund'],['redundant']
Safety,"Remove class hierarchy in RFieldValue. The templated, type-safe; inherited classes made the design vulnerable to slicing, because the; RField interface uses the base class. Instead, we use now templated; constructors and templated member functions in RFieldValue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3829:59,safe,safe,59,https://root.cern,https://github.com/root-project/root/pull/3829,1,['safe'],['safe']
Safety,Remove dangerous thread-unsafe accessors of RHistConcurrentFiller,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4708:24,unsafe,unsafe,24,https://root.cern,https://github.com/root-project/root/pull/4708,1,['unsafe'],['unsafe']
Safety,Remove extra redundant tensorboard Option,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5936:13,redund,redundant,13,https://root.cern,https://github.com/root-project/root/pull/5936,1,['redund'],['redundant']
Safety,Remove extra single quote in error message to avoid confusion what the actual class name is.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10099:46,avoid,avoid,46,https://root.cern,https://github.com/root-project/root/pull/10099,1,['avoid'],['avoid']
Safety,"Remove one layer of indirection by merging MakeColumnReadersHelper; and MakeColumnReader. Less code, we avoid some repeated checks,; and MakeColumnReader is not a bit simpler to call directly, which; we will need to implement RVariedColumnReaders for systematic variations. CC: @bendavid -- I think you are touching this code too, sorry! :sweat_smile:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9275:104,avoid,avoid,104,https://root.cern,https://github.com/root-project/root/pull/9275,1,['avoid'],['avoid']
Safety,Remove redundant RooCintUtils.h,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1720:7,redund,redundant,7,https://root.cern,https://github.com/root-project/root/pull/1720,1,['redund'],['redundant']
Safety,Remove redundant checks in TThreadExecutor,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/361:7,redund,redundant,7,https://root.cern,https://github.com/root-project/root/pull/361,1,['redund'],['redundant']
Safety,Remove redundant includes from http/webgui,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5045:7,redund,redundant,7,https://root.cern,https://github.com/root-project/root/pull/5045,1,['redund'],['redundant']
Safety,Remove redundant null pointer check,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/249:7,redund,redundant,7,https://root.cern,https://github.com/root-project/root/pull/249,1,['redund'],['redundant']
Safety,Remove redundant null pointer checks,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/260:7,redund,redundant,7,https://root.cern,https://github.com/root-project/root/pull/260,1,['redund'],['redundant']
Safety,Remove splash screen to avoid `root.exe` dependence on x11 or cocoa,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15056:24,avoid,avoid,24,https://root.cern,https://github.com/root-project/root/pull/15056,1,['avoid'],['avoid']
Safety,Remove the redundant dependencies from the target. This fixes a cxxmodules; nightly builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1741:11,redund,redundant,11,https://root.cern,https://github.com/root-project/root/pull/1741,1,['redund'],['redundant']
Safety,"Remove trailing whitespaces to avoid warnings like these:; ```; /home/rembserj/code/root/tree/treeplayer/src/TTreeFormula.cxx:3760:97: warning: backslash and newline separated by space; 3760 | ""Could not init branch associated to this leaf (%s)."", leaf->GetName()); \; |; /home/rembserj/code/root/tree/treeplayer/src/TTreeFormula.cxx:3829:97: warning: backslash and newline separated by space; 3829 | } \; |; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15465:31,avoid,avoid,31,https://root.cern,https://github.com/root-project/root/pull/15465,1,['avoid'],['avoid']
Safety,Remove wrong and redundant null pointer check,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/248:17,redund,redundant,17,https://root.cern,https://github.com/root-project/root/pull/248,1,['redund'],['redundant']
Safety,Removed milestone - timeout.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12846#issuecomment-1754805137:20,timeout,timeout,20,https://root.cern,https://github.com/root-project/root/pull/12846#issuecomment-1754805137,1,['timeout'],['timeout']
Safety,Removed redundant -fmodule-map-file= compilation flag.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/551:8,redund,redundant,8,https://root.cern,https://github.com/root-project/root/pull/551,1,['redund'],['redundant']
Safety,"Removed the false comment and moved the `unique_ptr` declaration above `TextInputHolder`, in case `TextInputHolder::~TextInputHolder()` still access it (in the future). However, I am thinking about enhancing CLI completion support of cling. Such as tab completion. Currently cling only prints completion suggestion but does not complete the input buffer for the user when only single unambiguous completion exists. Also the completion does not recognize meta command like `.x`, `.L` so it does not try to complete its arguments (paths). And the path does not expand `~` to home dir.; @Axel-Naumann , do you think it is a good idea for cling to adopt `llvm::LineEditor` ? (https://llvm.org/doxygen/classllvm_1_1LineEditor.html) ; Or building cling's own readline/libedit wrapper? ; `core/textinput/src/textinput/doc/textinput.txt` states that `textinput` is created to avoid depending on readline/libedit in year 2011.; Is it still true today 2022? cling highly depends on llvm now so it should be fine to adopt `llvm::LineEditor` (created in 2013. `textinput` predates it).; I have a prototype cling with the above enhanced completion support based on libedit but I will only create PR if cling (and all root components currently using `textinput` ) are open to such changes and dependency. I can refactor to use `llvm::LineEditor` instead. It is not too hard since the latter is also a libedit wrapper.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11274#issuecomment-1232115062:868,avoid,avoid,868,https://root.cern,https://github.com/root-project/root/pull/11274#issuecomment-1232115062,1,['avoid'],['avoid']
Safety,Removing usage of enum is easy in favor of using builtin strings to distinguish operation type in distributed RDataFrame. This also avoids an extra dependency for Python2,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7772:132,avoid,avoids,132,https://root.cern,https://github.com/root-project/root/pull/7772,1,['avoid'],['avoids']
Safety,Rename RooHistFunc::getObservables to not hide; RooAbsArg::getObservables. This is done to avoid breaking user code in the upcoming release (doesn't affect ROOT 6.24).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7911:91,avoid,avoid,91,https://root.cern,https://github.com/root-project/root/pull/7911,1,['avoid'],['avoid']
Safety,Replace gSystem->Which() with gSystem->FindFile() calls; Idea to avoid methods which returns `char *` value which should be deleted.; While there is already alternative - use it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4889:65,avoid,avoid,65,https://root.cern,https://github.com/root-project/root/pull/4889,1,['avoid'],['avoid']
Safety,"Reproducer:. ```; root [0] auto x = std::make_pair(42, 84);; root [1] auto *xp = &x;; root [2] TTree t(""t"", ""t""); (TTree &) Name: t Title: t; root [3] t.Branch(""x"", &xp); Error in <HandleInterpreterException>: Trying to dereference null pointer or trying to call routine taking non-null arguments; Execution of your code was aborted.; In module 'Core':; /home/blue/ROOT/dev/cmake-build-foo/include/TClass.h:635:38: warning: null passed to a callee that requires a non-null argument [-Wnonnull]; size_t hint_offset = ((char*)&(p->second)) - (char*)p;; ^; root [4] t.Branch(""x"", &x); Error in <HandleInterpreterException>: Trying to dereference null pointer or trying to call routine taking non-null arguments; Execution of your code was aborted.; /home/blue/ROOT/dev/cmake-build-foo/include/TClass.h:635:38: warning: null passed to a callee that requires a non-null argument [-Wnonnull]; size_t hint_offset = ((char*)&(p->second)) - (char*)p;; ^; ```. Note the ""Execution of your code was aborted"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11215:325,abort,aborted,325,https://root.cern,https://github.com/root-project/root/issues/11215,3,['abort'],['aborted']
Safety,"Respawn genvector tests because they accidentally dropped out from the building and testing process during the migration to CMake.; Minimal changes to the code were applied to let them run, respecting the original coding style. # This Pull request:. ## Changes or fixes:; It does not fix an existing issue, but rather it increases the test coverage recovering some tests. ## Checklist:. - [v] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13633:349,recover,recovering,349,https://root.cern,https://github.com/root-project/root/pull/13633,1,['recover'],['recovering']
Safety,Reuse component from `RBrowser`. Provide plugin to load file dialog on demand.; Avoids hard dependency from RBrowser libs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13118:80,Avoid,Avoids,80,https://root.cern,https://github.com/root-project/root/pull/13118,1,['Avoid'],['Avoids']
Safety,"Revert ""Avoid dupe ""llvm.ident"" operands.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10964:8,Avoid,Avoid,8,https://root.cern,https://github.com/root-project/root/pull/10964,1,['Avoid'],['Avoid']
Safety,"Revert ""Fix detection of Python3 on Windows""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5503:12,detect,detection,12,https://root.cern,https://github.com/root-project/root/pull/5503,1,['detect'],['detection']
Safety,"Revert ""Move inline method to implementation file to avoid inline",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/722:53,avoid,avoid,53,https://root.cern,https://github.com/root-project/root/pull/722,1,['avoid'],['avoid']
Safety,"Reverts root-project/root#9251 due to failures in LCG. In 1c38aa0 we made it possible to use installed json versions which do not have `json_fwd.h` to forward declare the json classes. However in this case, that brings the entire json package in the dictionaries. In turn, then we will need to build Json.pcm to avoid content duplication. This in turn requires LCG to provide ROOT_INCLUDE_PATH=/path/to/json at runtime. Is this all worth it?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9267:312,avoid,avoid,312,https://root.cern,https://github.com/root-project/root/pull/9267,1,['avoid'],['avoid']
Safety,Rewrite the RDataFrame JIT logic to avoid controlled leaks,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15520:36,avoid,avoid,36,https://root.cern,https://github.com/root-project/root/issues/15520,1,['avoid'],['avoid']
Safety,"Right, thanks for the explanation. I see now there is a comment about this @ https://root.cern.ch/doc/master/classTColor.html ... I'll tell my users to avoid thinking that kWhite fillcolor is a white fill color. It would be nice if there was a predefined actually-white fill color, but for now I'll try to work around this ""feature"" with the users. Thanks",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14605#issuecomment-1933719744:152,avoid,avoid,152,https://root.cern,https://github.com/root-project/root/issues/14605#issuecomment-1933719744,1,['avoid'],['avoid']
Safety,RooAddPdf: Avoid UB in checkObservables [v6.20],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9571:11,Avoid,Avoid,11,https://root.cern,https://github.com/root-project/root/pull/9571,1,['Avoid'],['Avoid']
Safety,RooAddPdf: Avoid UB in checkObservables [v6.22],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9570:11,Avoid,Avoid,11,https://root.cern,https://github.com/root-project/root/pull/9570,1,['Avoid'],['Avoid']
Safety,RooAddPdf: Avoid UB in checkObservables [v6.24],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9569:11,Avoid,Avoid,11,https://root.cern,https://github.com/root-project/root/pull/9569,1,['Avoid'],['Avoid']
Safety,RooAddPdf: Avoid UB in checkObservables [v6.26],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9568:11,Avoid,Avoid,11,https://root.cern,https://github.com/root-project/root/pull/9568,1,['Avoid'],['Avoid']
Safety,"RooFit currently includes the `RooCBShape` and `RooDSCBShape` to; represent the family of crystal ball distributions. The `RooCBShape`; only has a left tail, and `RooDSCBShape` has two independently; parametrized tails. Some users also want a crystal ball where the width of the Gaussian; core is different on the left and the right side (see e.g. Jira ticket; [ROOT-10388](https://sft.its.cern.ch/jira/browse/ROOT-10388)). To make the RooFit code more maintainable and also cover the use case; of an asymmetric Gaussian core, this commit implements a new; `RooCrystalBall` class that should cover all classes of crystal ball; shapes, such that `RooCBShape` and `RooDSCBShape` are in principle not; necessary anymore. The new features of the `RooCrystalBall` class that make it different; from `RooDSCBShape` are:. - possibility to set sigma of left side and right side of Gaussian; core separately. - code modernization and using `std::` math functions. - three constructors: fully parametrized, symmetric Gaussian core; (to replace `RooDSCBShape`), only left tail (to replace; `RooCBShape`). - useage of inlined helper functions to avoid code duplication. It is also carefully tested in `testRooCrystalBal`:. - test the fully parameterized case. - test the constructor for left-tail only case and compare values; with `RooCBShape`. - test the constructor with symmetric Gaussian core and compare; values with `RooDSCBShape`. - test the constructor for right-tail only and symmetric tails. - test integration with many possible combinations integration; ranges to cover all branches of integration code",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7257:1134,avoid,avoid,1134,https://root.cern,https://github.com/root-project/root/pull/7257,1,['avoid'],['avoid']
Safety,"RooFit is never used without optimization flags, and I want to avoid calling `new` and `delete` explicitly in RooFit to minimize the risk of unintended memory leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10263#issuecomment-1081687103:63,avoid,avoid,63,https://root.cern,https://github.com/root-project/root/pull/10263#issuecomment-1081687103,2,"['avoid', 'risk']","['avoid', 'risk']"
Safety,"RooMomentMorphND was initialising fractions to zero. That will lead to; an all-zero PDF, which triggers evaluation errors. Setting all fractions; to 1 avoids those warnings, and the correct values will be calculated; during the first fit step.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6110:151,avoid,avoids,151,https://root.cern,https://github.com/root-project/root/pull/6110,1,['avoid'],['avoids']
Safety,RooThresholdCategory cannot be successfully streamed because not all members are initialized safely in the default constructor. This PR fixes that.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4007:93,safe,safely,93,https://root.cern,https://github.com/root-project/root/pull/4007,1,['safe'],['safely']
Safety,"Root has two different ways to configure the build - the traditional configure script and cmake. The builds generated by the two systems are similar, but far from equivalent. Historically the configure script has been more feature complete and some things that the configure script is able to do are either missing or broken in the cmake build. However, new features are often only added to the cmake build. This has resulted in that today neither of the two is able to build root with a complete set of features. The cmake build is more standard and behaves in a more predictive way, e.g. it understands CFLAGS, LDFLAGS and friends which the configure script never did. It also integrates the test suite in the build and allows for running ""make test"", a feature that the configure script is missing. So the cmake build is in many ways better, if it wasn't for those missing and broken things mentioned earlier. This pull request is an attempt to address those missing and broken issues (though it fixes a few things for the configure script as well). Also contains a fix for ROOT-7326.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/153:569,predict,predictive,569,https://root.cern,https://github.com/root-project/root/pull/153,1,['predict'],['predictive']
Safety,"RptjBM1fTLrmOZgEI%3D&reserved=0> --key ~/.globus/userkey.pem --cert ~/.globus/usercert.pem --capath /etc/grid-security/certificates; >>>>>> ; >>>>>> ; >>>>>> regards,; >>>>>> Asoka; >>>>>> ; >>>>>>> On May 12, 2021, at 10:18 AM, Axel Naumann ***@***.*** ***@***.***>> wrote:; >>>>>>> ; >>>>>>> ; >>>>>>> Right - without authentication I cannot see what's happening. If this is due to a redirect it would be a dupe of #8155 <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8155&data=04%7C01%7Csimonliu%40triumf.ca%7C2bf615c9bb89486eaecd08d91571b94b%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564400461016279%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=Sfm43%2BJmWVsFVHOn7Tob%2BXe4STr003%2FgQQiBpBRgur0%3D&reserved=0> - if not then it's different :-) But I don't know how to tell whether it's a redirect. Do you?; >>>>>>> ; >>>>>>> If not let's get #8155 <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8155&data=04%7C01%7Csimonliu%40triumf.ca%7C2bf615c9bb89486eaecd08d91571b94b%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564400461016279%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=Sfm43%2BJmWVsFVHOn7Tob%2BXe4STr003%2FgQQiBpBRgur0%3D&reserved=0> fixed and then we re-visit this one: either it's fixed, too, or we need to call in help from the Davix (?) folks.; >>>>>>> ; >>>>>>> —; >>>>>>> You are receiving this because you authored the thread.; >>>>>>> Reply to this email directly, view it on GitHub <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8092%23issuecomment-839953723&data=04%7C01%7Csimonliu%40triumf.ca%7C2bf615c9bb89486eaecd08d91571b94b%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564400461026272%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840018942:9424,safe,safelinks,9424,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840018942,1,['safe'],['safelinks']
Safety,Run `stressGraphics` in web mode when chrome/firefox detected,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16610:53,detect,detected,53,https://root.cern,https://github.com/root-project/root/pull/16610,1,['detect'],['detected']
Safety,Run stressGraphics in web mode when chrome/firefox detected,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16635:51,detect,detected,51,https://root.cern,https://github.com/root-project/root/pull/16635,1,['detect'],['detected']
Safety,Run tutorials with a maximum of 4 threads to avoid MT problems on some machines. Disable also OpenMP when running in MT in ROOT. Reduce also by a factor of 5 the number of input events,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12310:45,avoid,avoid,45,https://root.cern,https://github.com/root-project/root/pull/12310,1,['avoid'],['avoid']
Safety,"RunGraphs makes a summary log entry for the jitting time of all computation graphs that are being run concurrently. Generally this is ok, but in the case users specifically requested a log level of kDebug+10 or higher this would accidentally silence the logging of what code is being jitted.; With this patch, if log level is kDebug+10 or higher, RunGraphs avoids silencing inner logs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11832:357,avoid,avoids,357,https://root.cern,https://github.com/root-project/root/pull/11832,1,['avoid'],['avoids']
Safety,"Running `roottest-python-basic-datatype` under `gdb`:; ```; #0 0x00007ffff63ee52f in raise () from /lib64/libc.so.6; #1 0x00007ffff63c1e65 in abort () from /lib64/libc.so.6; #2 0x00007ffff63c1d39 in __assert_fail_base.cold.0 () from /lib64/libc.so.6; #3 0x00007ffff63e6e86 in __assert_fail () from /lib64/libc.so.6; #4 0x00007fffeab9b265 in cling::Transaction::addNestedTransaction (this=<optimized out>, nested=<optimized out>) at /home/jhahnfel/ROOT/src/interpreter/cling/lib/Interpreter/Transaction.cpp:98; #5 0x00007fffeaad2f23 in cling::IncrementalParser::beginTransaction (this=0x555555c3bee0, Opts=...) at /home/jhahnfel/ROOT/src/interpreter/cling/lib/Interpreter/IncrementalParser.cpp:496; #6 0x00007fffeaac4776 in cling::Interpreter::PushTransactionRAII::PushTransactionRAII (this=0x7fffffff7338, i=<optimized out>); at /home/jhahnfel/ROOT/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:105; #7 0x00007fffeaa5b252 in ClingMemberIterInternal::DCIter::DCIter (this=0x7fffffff73d0, DC=0x555557208818, interp=0x0) at /home/jhahnfel/ROOT/src/core/metacling/src/TClingMemberIter.cxx:21; #8 0x00007fffeaa57951 in TClingMemberIter::TClingMemberIter (this=0x7fffffff73b8, interp=0x555555803e60, DC=0x7fffffff6ff0) at /home/jhahnfel/ROOT/src/core/metacling/src/TClingMemberIter.h:145; #9 TClingDataMemberIter::TClingDataMemberIter (this=0x7fffffff73b8, interp=0x555555803e60, DC=0x7fffffff6ff0, selection=TDictionary::EMemberSelection::kNoUsingDecls); at /home/jhahnfel/ROOT/src/core/metacling/src/TClingDataMemberInfo.h:66; #10 TClingDataMemberInfo::TClingDataMemberInfo (this=0x55555b2f2b30, interp=0x555555803e60, ci=<optimized out>, selection=TDictionary::EMemberSelection::kNoUsingDecls); at /home/jhahnfel/ROOT/src/core/metacling/src/TClingDataMemberInfo.cxx:115; #11 0x00007fffea9c66da in TCling::DataMemberInfo_Factory (this=0x555555b29730, clinfo=0x55555a9b6510, selection=TDictionary::EMemberSelection::kNoUsingDecls); at /home/jhahnfel/ROOT/src/core/metacling/src/TCling.cxx:8599; #12",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16338#issuecomment-2370776890:142,abort,abort,142,https://root.cern,https://github.com/root-project/root/pull/16338#issuecomment-2370776890,1,['abort'],['abort']
Safety,"S/ROOT/v6-24-02/v6-24-02/tree/tree/src/TBranch.cxx:854; #11 0x00007ff4494ae36b in TBranchElement::FillImpl (this=0x7ff42547e5f0, imtHelper=0x0) at /home/aliperf/aliperf_workspace/sw/SOURCES/ROOT/v6-24-02/v6-24-02/tree/tree/src/TBranchElement.cxx:1265; #12 0x00007ff4494ae069 in TBranchElement::FillImpl (this=0x7ff425170850, imtHelper=0x0) at /home/aliperf/aliperf_workspace/sw/SOURCES/ROOT/v6-24-02/v6-24-02/tree/tree/src/TBranchElement.cxx:1290; #13 0x00007ff44f4faf89 in TBranch::Fill (this=0x7ff425170850) at /home/aliperf/aliperf_workspace/sw/slc7_x86-64/ROOT/v6-24-02-local5/include/TBranch.h:201; #14 o2::base::DetImpl<o2::trd::Detector>::mergeAndAdjustHits<std::vector<o2::trd::Hit, std::allocator<o2::trd::Hit> > > (this=this; entry=0x3e69680, brname=..., origin=..., target=..., trackoffsets=..., nprimaries=..., subevtsOrdered=...) at /home/aliperf/aliperf_workspace/sw/SOURCES/O2/dev/0/Detectors/Base/include/DetectorsBase/Detector.h:403; #15 0x00007ff44f4fb507 in o2::base::DetImpl<o2::trd::Detector>::mergeHitEntries (this=0x3e69680, origin=..., target=..., trackoffsets=..., nprimaries=..., subevtsOrdered=...) at /home/aliperf/aliperf_workspace/sw/SOURCES/O2/dev/0/Detectors/Base/include/DetectorsBase/Detector.h:422; #16 0x00000000004456e1 in o2::devices::O2HitMerger::mergeAndFlushData (this=0x162d640, eventID=<optimized out>) at /home/aliperf/aliperf_workspace/sw/SOURCES/O2/dev/0/run/O2HitMerger.h:745; #17 0x00007ff446ec9f10 in std::execute_native_thread_routine (__p=0x7ad9e10) at ../../../../../gcc/libstdc++-v3/src/c++11/thread.cc:80; #18 0x00007ff44e186ea5 in start_thread () from /lib64/libpthread.so.0; #19 0x00007ff44680796d in clone () from /lib64/libc.so.6. Thread 5 (Thread 0x7ff42a18e700 (LWP 25519) ""o2-sim-hit-merg""):; #0 0x00007ff44e18ade2 in pthread_cond_timedwait. GLIBC_2.3.2 () from /lib64/libpthread.so.0; #1 0x00007ff44aca29d3 in __gthread_cond_timedwait (__abs_timeout=0x7ff42a187a30, __mutex=<optimized out>, __cond=<optimized out>) at /home/aliperf/aliper",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8931:4160,Detect,Detector,4160,https://root.cern,https://github.com/root-project/root/issues/8931,1,['Detect'],['Detector']
Safety,"SPlot; Failed to load module Hbook; Failed to load module RooFit; Failed to load module RCsg; Failed to load module RooStats; Failed to load module RooFitRDataFrameHelpers; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module ROOTTMVASofie; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module MathMore; Failed to load module RooFitHS3; Failed to load module Foam; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; RunTest: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Lex/Lexer.cpp:3940: bool clang::Lexer::LexTokenInternal(clang::Token&, bool): Assertion `Result.is(tok::eof) && ""Preprocessor did not set tok:eof""' failed.; Aborted (core dumped); ```; Even though Vc.pcm is sitting right next to MathCore.pcm; export ROOT_INCLUDE_PATH does solve this problem (see the other tests in the repeater), but at least to me this behaviour or at least the error message seems questionable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9594#issuecomment-1029801305:4182,Abort,Aborted,4182,https://root.cern,https://github.com/root-project/root/issues/9594#issuecomment-1029801305,1,['Abort'],['Aborted']
Safety,Same issue on Ubuntu 22.04. Happens in `core/newdelete/src/NewDelete.cxx:207`. Maybe related: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989/21,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14767#issuecomment-1953734723:123,abort,aborting-with-std-align-val-t-is-not-implemented-yet-rhel-,123,https://root.cern,https://github.com/root-project/root/issues/14767#issuecomment-1953734723,1,['abort'],['aborting-with-std-align-val-t-is-not-implemented-yet-rhel-']
Safety,"Second round of testing with `./tree/dataframe/test/dataframe_cache --gtest_filter=Cache.Ambiguity`, the result with `git-bisect` is:; ```; 99701af2bae25872aa0795fa08c6337232ff2f3c is the first bad commit; commit 99701af2bae25872aa0795fa08c6337232ff2f3c; Author: Enrico Guiraud <enrico.guiraud@cern.ch>; Date: Tue Oct 26 10:28:14 2021 +0200. [DF] Avoid calling InitSlot/FinaliseSlot multiple times on RDefines. Before this commit, each action and filter was calling InitSlot on all; the defines it knew about. As a consequence, RDefine had to keep track; of whether InitSlot was already called on it for a given task and a; given slot. We can avoid the multiple InitSlot calls on the same objects and the; book-keeping of whether the call already happened or not by having; RLoopManager call InitSlot on every defined column once per task and per; slot. To this end, we need to register RDefine objects with the; RLoopManager when they are created and deregister them when they are; destroyed. tree/dataframe/inc/ROOT/RDF/RAction.hxx | 14 +++++++-------; tree/dataframe/inc/ROOT/RDF/RBookedDefines.hxx | 5 +++++; tree/dataframe/inc/ROOT/RDF/RDefine.hxx | 20 ++++++--------------; tree/dataframe/inc/ROOT/RDF/RDefineBase.hxx | 1 -; tree/dataframe/inc/ROOT/RDF/RFilter.hxx | 14 ++++++--------; tree/dataframe/inc/ROOT/RDF/RInterface.hxx | 8 +++++---; tree/dataframe/inc/ROOT/RDF/RJittedDefine.hxx | 1 +; tree/dataframe/inc/ROOT/RDF/RLoopManager.hxx | 4 ++++; tree/dataframe/src/RDFBookedDefines.cxx | 5 +++++; tree/dataframe/src/RDefineBase.cxx | 10 ++++------; tree/dataframe/src/RJittedDefine.cxx | 6 ++++++; tree/dataframe/src/RLoopManager.cxx | 15 +++++++++++++++; 12 files changed, 64 insertions(+), 39 deletions(-); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10007#issuecomment-1057004565:347,Avoid,Avoid,347,https://root.cern,https://github.com/root-project/root/issues/10007#issuecomment-1057004565,2,"['Avoid', 'avoid']","['Avoid', 'avoid']"
Safety,"See [SafeDelete definition](https://github.com/root-mirror/root/blob/edfa4cc5d8c02c626dbc3f0e9283f8fd9b28698b/core/base/inc/RConfig.h#L465). It seems that new static analyzer exhumes lots of ancient legacy. Do I (we) need to give attention to such cases?. And it seems that there is no ""Issues"" tab in this repository. I have got some suspicious places and I'm not sure how to fix them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/249:5,Safe,SafeDelete,5,https://root.cern,https://github.com/root-project/root/pull/249,1,['Safe'],['SafeDelete']
Safety,"See discussion at https://github.com/root-project/root/pull/7286. This set of improvements to TBufferMerger (and more) was inspired by the terrible performance of the parallel merging (and fast merging in general) in the case where the TTree has a very large number of branches (1000+). Where in the original version a TBufferMerger with a file with 1000+ branches and only 50s and ran with any number of threads would take more than 3m (did not wait until the end) the new version takes 11s with 1 thread, 8s with 6 threads and 22s with 6 thread when increased to 500 events. (using the CMS file ../data//250202_181_RECO.root). This PR includes:. * Skipping the boxing/compressing/uncompressing/unboxing cycle if the TBufferMerger is available (not already merging) when the thread is writing its TMemFile. * Skipping SetBranchAddress and SetMakeClass in when doing fast cloning (where that information is not used anyway). * Replacing calling to the slow TObjArray::GetEntries (which counts the slot used) by calling GetEntriesFast. * Speeding up the GetMother implementation (caching parent's address sooner when reading, use that information in GetMother). * In fast cloning, delay writing the output until the last input is processed (instead of writing the output after each input),. * Optimization of fast cloning handing of empty write basket. It also contains a couple of bug fixes (RNtuple merging forgetting to merge the result of the objects in the file, iofeatures incorrectly cloned). Also made TBufferMerger::GetQueueSize actually thread safe (it is necessary to use it to stop the producer from adding more data if the queue is too full). Also improved TClass::GetBaseClassOffset parallelism (benefit parallel boxing/unboxing) and reduced/removed contention see in the mechanism use to determine the actual object type at run-time (TIsAProxy).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7339:1553,safe,safe,1553,https://root.cern,https://github.com/root-project/root/pull/7339,1,['safe'],['safe']
Safety,See the bug report at Microsoft: [Problem with how the compiler generates covariant virtual functions](https://developercommunity.visualstudio.com/t/Problem-with-how-the-compiler-generates/1441440); And the proposed workaround:; >It turns out to be a problem with how the compiler generates the covariant virtual function `Clone` in `FunctorGradHandler`. To address the issue just use the original return type of the virtual base:; >```; >template; >class FunctorGradHandler : public ParentFunctor::Impl {; >...; > typename ParentFunctor::ImplBase* Clone() const { return Copy(); }; >...; >};; >```; > This should avoid the need for the compiler to generate the problematic covariant function.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8335:614,avoid,avoid,614,https://root.cern,https://github.com/root-project/root/pull/8335,1,['avoid'],['avoid']
Safety,"See the related failures created on the CI: https://github.com/root-project/root/pull/16664/checks?check_run_id=31435842971 where we run just the TMVA test to increase the chance of collisions .... and indeed the `tutorial-tmva-TMVA_SOFIE_GNN_Application` fails on most platforms with:; ```; /github/home/ROOT-CI/src/tutorials/tmva/TMVA_SOFIE_GNN_Application.C:10:10: fatal error: 'encoder.hxx' file not found; #include ""encoder.hxx""; ^~~~~~~~~~~~~; ```; and `tutorial-tmva-TMVA_RNN_Classification-py` fails (on just alma9-clang) due to timeout. -------. This specific issue is resolved by https://github.com/root-project/root/pull/16711",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16553#issuecomment-2408535597:537,timeout,timeout,537,https://root.cern,https://github.com/root-project/root/issues/16553#issuecomment-2408535597,1,['timeout'],['timeout']
Safety,"Seems like ignore-non-existent-contents is quite new,; so we just remove it for now to avoid crashing on; parsing this file with the old clang version inside; ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/536:87,avoid,avoid,87,https://root.cern,https://github.com/root-project/root/pull/536,1,['avoid'],['avoid']
Safety,"Seems no :-(. I downloaded https://github.com/bellenot/root/tree/check-internet-connection but I didn't expect that:. it hangs after git; ~/sw/root-bld-test$ cmake -DCMAKE_INSALL_PREFIX=../root-inst-test ../root-check-internet-connection; -- The C compiler identification is GNU 8.3.1; -- The CXX compiler identification is GNU 8.3.1; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Git: /usr/bin/git (found version ""2.27.0""); ^C. I retired the same command on the (6.24.00) here it workes. I'm sorry, there is still something wrong in the build system. Georg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292#issuecomment-867613908:439,Detect,Detecting,439,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-867613908,8,['Detect'],['Detecting']
Safety,"Server certificate:; >>> * 	subject: CN=dpool46.lcg.triumf.ca <http://dpool46.lcg.triumf.ca/>,OU=triumf.ca <https://can01.safelinks.protection.outlook.com/?url=http%3A%2F%2Ftriumf.ca%2F&data=04%7C01%7Cdqing%40triumf.ca%7C96f8066e53054f808afe08d9156b7b02%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564373643147501%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=0DVPYYS02Z%2FWDinl5epoHThDnGOb4UCelc0w7lDZwVc%3D&reserved=0>,O=Grid,C=CA; >>> * 	start date: Apr 08 16:29:03 2021 GMT; >>> * 	expire date: May 08 16:29:03 2022 GMT; >>> * 	common name: dpool46.lcg.triumf.ca <http://dpool46.lcg.triumf.ca/>; >>> * 	issuer: CN=Grid Canada Certificate Authority,O=Grid,C=CA; >>> * NSS error -8179 (SEC_ERROR_UNKNOWN_ISSUER); >>> * Peer's Certificate issuer is not recognized.; >>> * Closing connection 0; >>> curl: (60) Peer's Certificate issuer is not recognized.; >>> More details here: http://curl.haxx.se/docs/sslcerts.html <https://can01.safelinks.protection.outlook.com/?url=http%3A%2F%2Fcurl.haxx.se%2Fdocs%2Fsslcerts.html&data=04%7C01%7Cdqing%40triumf.ca%7C96f8066e53054f808afe08d9156b7b02%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564373643147501%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=NTi7%2BFO82QY6dKBp1en9fAODpFl%2FzZ0cHCZ3DsJzOIM%3D&reserved=0>; >>> ; >>> curl performs SSL certificate verification by default, using a ""bundle""; >>> of Certificate Authority (CA) public keys (CA certs). If the default; >>> bundle file isn't adequate, you can specify an alternate file; >>> using the --cacert option.; >>> If this HTTPS server uses a certificate signed by a CA represented in; >>> the bundle, the certificate verification probably failed due to a; >>> problem with the certificate (it might be expired, or the name might; >>> not match the domain name in the URL).; >>> If you'd like to turn off curl's verification of the certificate, use; >>> the -k (or --insecu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-839972447:4157,safe,safelinks,4157,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-839972447,1,['safe'],['safelinks']
Safety,Set the CMake policy `CMP0091 (MSVC runtime library flags are selected by an abstraction)` to `OLD` to keep the old way of selecting the runtime library with the `-MD`/`-MDd` compiler flag. This fixes several compilation errors like:; ```; RStl.obj : error LNK2038: mismatch detected for '_ITERATOR_DEBUG_LEVEL': value '0' doesn't match value '2' in rootcling_stage1.obj; RStl.obj : error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MD_DynamicRelease' doesn't match value 'MDd_DynamicDebug' in rootcling_stage1.obj; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8810:275,detect,detected,275,https://root.cern,https://github.com/root-project/root/pull/8810,2,['detect'],['detected']
Safety,"Set the environment for the tutorials, which is the eventual ROOT_environ plus some environment variables related to limiting the number of threads used by NumPy.; See: https://stackoverflow.com/questions/30791550/limit-number-of-threads-in-numpy. Possibly related to #16552, but the main motivation is to avoid an excessive number of threads when running the RooFit tutorials for simulation based inference. So far, the environment was set inside these tutorials, but this is distracting to users who look at these tutorials. Also, make sure that the same environment is used for all tutorials that are wrapped in `ROOT_ADD_TEST`. Furthermore, remove unused helper function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16717:306,avoid,avoid,306,https://root.cern,https://github.com/root-project/root/pull/16717,1,['avoid'],['avoid']
Safety,"Setting the flag must be protected by a lock. This is a recently-introduced test, and I think this bug caused the test to hang indefinitely in rare cases as in here (note the timeout): http://cdash.cern.ch/testDetails.php?test=85891275&build=874661. The stacktrace of the threads when the test was hanging was the following:. ```; Thread 2 (Thread 0xa2784b40 (LWP 4590)):; #0 0xb7fa1d61 in __kernel_vsyscall (); #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88; #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502; #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655; #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6; #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99; #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674); at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167; #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (; __f=...) at /usr/include/c++/8/bits/invoke.h:60; #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...); at /usr/include/c++/8/bits/invoke.h:95; #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674); at /usr/include/c++/8/thread:244; #10 0x004809",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5596:175,timeout,timeout,175,https://root.cern,https://github.com/root-project/root/pull/5596,1,['timeout'],['timeout']
Safety,"Setting the move constructor and move assignment operator to = default; causes linker errors because the copy assignment operator is not; implemented in the TIterator base class. Having the RooLinkedListIter move constructor and assignment operators; work is important to keep user code compatibility. This is done to avoid breaking user code in the upcoming release (doesn't affect ROOT 6.24 because problem exists only since https://github.com/root-project/root/pull/7641). With the current master, the linker error can be reproduces like this;; ```C++; void iterator_test() {. RooArgSet argSet1;; RooArgSet argSet2;. RooLinkedListIter iter{argSet1.iterator()};. iter = argSet2.iterator();; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7910:318,avoid,avoid,318,https://root.cern,https://github.com/root-project/root/pull/7910,1,['avoid'],['avoid']
Safety,"Setting the size of the transient buffer only in the constructor was a mistake, because it's never called when the RooBernstein is read back from a file. To be safe, the buffer size should be checked everytime that it's used. Closes #15690.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15695:160,safe,safe,160,https://root.cern,https://github.com/root-project/root/pull/15695,1,['safe'],['safe']
Safety,"Several small issues came up in the forum, and this is a collection of documentation updates, a few safety checks added to roofit and more understandable warning/error messages. Further, the class RooRealProxy (kind of a pointer with extra functionality) has been replaced by a templated class, as it always requires casting when the pointed-to object is used. Since it is internal to RooFit, this should not affect users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4739:100,safe,safety,100,https://root.cern,https://github.com/root-project/root/pull/4739,1,['safe'],['safety']
Safety,Should avoid problems on 32bit debian,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8574:7,avoid,avoid,7,https://root.cern,https://github.com/root-project/root/pull/8574,1,['avoid'],['avoid']
Safety,"Should be fixed now. The problem was that I did not update the logic of 2D and 3D histograms at all, and the tests actually detected that. I probably did not rebase before testing on my machines or something of the sort. As far as I can tell both test and tutorials run fine (on linux), but let's see what the bot says :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/366#issuecomment-282574311:124,detect,detected,124,https://root.cern,https://github.com/root-project/root/pull/366#issuecomment-282574311,1,['detect'],['detected']
Safety,Should one actually have a look at all the casts between double/float and int? Maybe even use some kind of safe cast function?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6499#issuecomment-700850085:107,safe,safe,107,https://root.cern,https://github.com/root-project/root/pull/6499#issuecomment-700850085,1,['safe'],['safe']
Safety,"Should solve ROOT-10583; When pgon used in CSG transformation, it is important to have shape without inner surface.; Also avoid use of implicit Bool_t -> Int_t conversion, it is not guaranteed that kTRUE value always 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5050:122,avoid,avoid,122,https://root.cern,https://github.com/root-project/root/pull/5050,1,['avoid'],['avoid']
Safety,"Should the limit be lowered to `EnableExplicitMT()` (i.e. when called with the default argument)? If 32bit and > 8 cores, cap it at 8 threads? Else we run the risk of exhausting the address space again soon enough with some other test, or on some user's analysis... What do you think? Or is this the user's responsibility?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6842#issuecomment-729921680:159,risk,risk,159,https://root.cern,https://github.com/root-project/root/pull/6842#issuecomment-729921680,1,['risk'],['risk']
Safety,"Should we get this into master before the v6-16-patches branch, or is there a risk of havoc and it should only end up after the branch / only in master? (I am convinced we should merge it now, but this is your call.). Btw, you can just add ""ready to merge"" tag to signal this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2945#issuecomment-437296352:78,risk,risk,78,https://root.cern,https://github.com/root-project/root/pull/2945#issuecomment-437296352,1,['risk'],['risk']
Safety,Shouldn't we put some conditions in order to avoid the libmvec bug?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2072#issuecomment-391376012:45,avoid,avoid,45,https://root.cern,https://github.com/root-project/root/pull/2072#issuecomment-391376012,1,['avoid'],['avoid']
Safety,"Significant revamp of FillBuffer. The new scheme insures a much more stable and efficient behavior in case of low; memory given by the user compared to the size of the buffer or 'odd' basket; layout. The basket collection is now done in 4 phases:. 1. One basket per branch, basket must contains the request entry and is not yet loaded or used,; 2. Even out by adding baskets so that all branches reach the same entry (or close); 3. Add the remaining branches from the current cluster.; 4. Add the basket from the begining of the clsuter to the current entry (if any). then repeat the 4 steps for the next cluster. The iteration is stopped as soon as the cache is 'full' as defined by these; rules:. - During step 1 of the first cluster, continue up to 4 times the user requested; cache size; - During steps 2 to 4 of the first cluster, continue up to 2 times the user; requested cache sizep; - During steps 2 to 4, the 'first' basket of a branch is accepted up to 4 times; the user requested cache size (i.e as if it had been selected during the 1st; step); - During the other clusters, continue up to the user requested cache size. A basket if rejected/skipped if its individual size is larger than the user; requested cache size. In addition, upon seeing a cache miss, FillBuffer now detects if all the basket; in the cache have already been used (read from the cache) in which case we can\; discard them and load the next set of baskets. As a side effect, we now keep a record of which baskets are in the cache and; which of those baskets have been used. The TTreePerfStats now keep a complete; log of all the basket that are:; - loaded in the main cache (and how many times); - loaded in the 'misss' cache (and how many times); - used; - read directly (complete cache miss); This will be helpful in understanding situation of over-read or slow operations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1960:1286,detect,detects,1286,https://root.cern,https://github.com/root-project/root/pull/1960,1,['detect'],['detects']
Safety,"Silence a zillion of compilation warnings like:; ```; warning C4267: 'initializing': conversion from 'size_t' to 'UInt_t', possible loss of data; ```; From Microsoft:; Compiler Warning (level 3) C4267; 'var' : conversion from 'size_t' to 'type', possible loss of data; The compiler detected a conversion from size_t to a smaller type.; To fix this warning, use size_t instead of type. Alternatively, use an integral type that is at least as large as size_t.; (size_t is unsigned __int64 or unsigned integer, depending on the target platform)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9197:282,detect,detected,282,https://root.cern,https://github.com/root-project/root/pull/9197,1,['detect'],['detected']
Safety,Simplify the deregistration procedure to `RLoopManager` and avoid relying on the order during member destruction of `RColumnRegister`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10072:60,avoid,avoid,60,https://root.cern,https://github.com/root-project/root/pull/10072,1,['avoid'],['avoid']
Safety,Since JSROOT v7 one should use modules or bundle provided as `build/jsroot.js`.; This bundle can be loaded with `require.js` (as in jupyter notebooks) or just as regular script (as in jupyter lab). Usage of `JSRootCore.js` is obsolete and should be avoided. Use JSROOT version 7.2.1 as fallback if local version is not available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11767:249,avoid,avoided,249,https://root.cern,https://github.com/root-project/root/pull/11767,1,['avoid'],['avoided']
Safety,"Since ROOT 6.26, the HistFactory models include the RooBinWidthFunction; to multiply the yields in the RooHistFuncs with the inverse bin widths,; in order to get the correct probability density. That's great and fixes HistFactory for non-uniform binnings, but it is; not optimal for the `BinnedLikelihood` code path. Here, the bin widths; need to multiplied back again to get the event yields in each bin. This commit suggests to improve the situation for the new BatchMode by; propagating the information that we are building a binned likelihood; down to the RooBinWidthFunctions, such that they can remove themselves. Then, if such RooBinWidthFunctions were encountered and disabled, the NLL; knows that it can skip the multiplication with the bin widths. What is proposed here looks like a small performance optimization only,; but actually the main motivation is not performance but RooFit AD; support. By removing the RooBinWidthFunctions from the computation graphs; of HistFactory likelihoods, we don't need to implement code generation; support for this class, which would be not trivial in the general; n-dimensional case. With the suggestion in this PR, all that work is; avoided.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13024:1182,avoid,avoided,1182,https://root.cern,https://github.com/root-project/root/pull/13024,1,['avoid'],['avoided']
Safety,"Since TFormula accepts seriously broken formulae, ""x+t"" is, for example,; interpreted as a four-dimensional formula that can be evaluated; using Eval(x=2), using undefined values for {y,z,t}, RooFit needs to do; some safety checks. This formula would otherwise be valid in RooFit:; RooFormula form(""form"", ""x<y"", x);. That's an aftermath to #5360, where Enrico correctly raised that point that only writing a warning in the documentation will not help most users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5413:217,safe,safety,217,https://root.cern,https://github.com/root-project/root/pull/5413,1,['safe'],['safety']
Safety,"Since all df10* tutorials use IMT(hardware concurrency), it's; inefficient to run them in parallel. This regularly brings us into; timeouts in the nightlies.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6274:131,timeout,timeouts,131,https://root.cern,https://github.com/root-project/root/pull/6274,1,['timeout'],['timeouts']
Safety,"Since all df10* tutorials use IMT(hardware concurrency), it's; inefficient to run them in parallel. This regularly brings us into; timeouts in the nightlies.; To avoid this, those tutorials are now locking the resource; ""multithreaded"", which means that they don't run in parallel. Other; tests that don't have this resource lock still run, though. To reduce; congestion, the RDF tutorials now claim that they use 4 CPUs. That's in; general not true, on an e.g. 8-core machine, CMake will run an IMT=8; with 4 single-threaded ctest, leading to an oversubscription of 1.5; instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6280:131,timeout,timeouts,131,https://root.cern,https://github.com/root-project/root/pull/6280,2,"['avoid', 'timeout']","['avoid', 'timeouts']"
Safety,"Since output trees are recreated for each task, and each task only; processes one tree cluster (and never crosses file boundaries), we; don't need to add the output trees as clones of the input tress; unless the input trees have friends (which might cross file boundaries); even if the main tree does not. Usage of AddClone here is undesirable in the general case because; it generates many (safe) warnings printed at screen during the event; loop, see ROOT-9487.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2234:392,safe,safe,392,https://root.cern,https://github.com/root-project/root/pull/2234,2,['safe'],['safe']
Safety,"Since the derived class did not have data member, what was the 'problem' with slicing (or did mean a form of type erasure)? As is the new code is 'type-unsafe' as there is no way for the user to even record the type in the RFieldValue ... or am I missing something?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3829#issuecomment-493466255:152,unsafe,unsafe,152,https://root.cern,https://github.com/root-project/root/pull/3829#issuecomment-493466255,1,['unsafe'],['unsafe']
Safety,"Since the upgrade to LLVM 13, the Cling test `CodeUnloading/RereadFile.C` fails with; ```; cling: /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/DeclCXX.cpp:1499: clang::NamedDecl *getLambdaCallOperatorHelper(const clang::CXXRecordDecl &): Assertion `!Calls.empty() && ""Missing lambda call operator!""' failed.; #0 0x00000000023cb663 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /home/jhahnfel/ROOT/src/interpreter/llvm/src/lib/Support/Unix/Signals.inc:565:13; #1 0x00000000023c9822 llvm::sys::RunSignalHandlers() /home/jhahnfel/ROOT/src/interpreter/llvm/src/lib/Support/Signals.cpp:98:18; #2 0x00000000023cbc6f SignalHandler(int) /home/jhahnfel/ROOT/src/interpreter/llvm/src/lib/Support/Unix/Signals.inc:407:1; #3 0x00007fdc3a8d4b50 __restore_rt (/lib64/libc.so.6+0x4eb50); #4 0x00007fdc3a8d4acf raise (/lib64/libc.so.6+0x4eacf); #5 0x00007fdc3a8a7ea5 abort (/lib64/libc.so.6+0x21ea5); #6 0x00007fdc3a8a7d79 _nl_load_domain.cold.0 (/lib64/libc.so.6+0x21d79); #7 0x00007fdc3a8cd426 (/lib64/libc.so.6+0x47426); #8 0x00000000037504a4 (/home/jhahnfel/ROOT/build-cling-clang/interpreter/llvm/src/bin/cling+0x37504a4); #9 0x00000000037504b6 clang::CXXRecordDecl::getLambdaCallOperator() const /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/DeclCXX.cpp:1513:14; #10 0x0000000003750559 clang::ValueDecl::getType() const /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/include/clang/AST/Decl.h:687:37; #11 0x0000000003750559 clang::CXXRecordDecl::getLambdaStaticInvoker() const /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/DeclCXX.cpp:1524:28; #12 0x00000000038a67b7 (anonymous namespace)::CXXNameMangler::mangleLambdaSig(clang::CXXRecordDecl const*) /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/ItaniumMangle.cpp:1977:3; #13 0x00000000038a59be (anonymous namespace)::CXXNameMangler::mangleLambda(clang::CXXRecordDecl const*) /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/ItaniumMangle.cpp:1948:3; #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12457:877,abort,abort,877,https://root.cern,https://github.com/root-project/root/issues/12457,1,['abort'],['abort']
Safety,"Since there are no tests, it's quite risky ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3869#issuecomment-496547077:37,risk,risky,37,https://root.cern,https://github.com/root-project/root/pull/3869#issuecomment-496547077,1,['risk'],['risky']
Safety,"Skip registration of TFile UUIDs in the global list when using the """"""READ_WITHOUT_GLOBALREGISTRATION"""""" option with TFile (used by default in TTreeProcessorMT). This avoids the final use of the global write lock during typical RDataFrame event loops, significantly improving multi-threaded performance for cases with many files and many threads. This follows up on https://github.com/root-project/root/pull/9486 and mostly finishes addressing https://github.com/root-project/root/issues/7710. Skipping the UUID registration breaks the particular case where a TRef points to the TFile object, but as per the discussion in this PR, this use case has thread-safety problems for TFile objects being managed by TTreeProcessorMT anyways. A test case is below. Produce the test dataset:. ```cpp; #include ""TFile.h""; #include ""TTree.h""; #include ""TString.h""; #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;; const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {; TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");; TTree *tree = new TTree(""tree"", """");; tree->Branch(""outval"", &outval);; for (unsigned int ientry = 0; ientry < nentries; ++ientry) {; tree->Fill();; }; tree->Write();; fout->Close();; }. }; ```. Test event loop:. ```python; import ROOT; ROOT.gInterpreter.ProcessLine("".O3""); ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""); chain.Add(""test_*.root""). d = ROOT.ROOT.RDataFrame(chain); res = d.Sum(""outval""). resval = res.GetValue(); print(resval); ```. With 256 threads (on partly loaded machine, but still representative):. Baseline:; Percent of CPU this job got: 1557%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:49.89. +this PR; Percent of CPU this job got: 14271%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.11",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10318:167,avoid,avoids,167,https://root.cern,https://github.com/root-project/root/pull/10318,2,"['avoid', 'safe']","['avoids', 'safety']"
Safety,Small Minuit2 Improvements: Avoid a duplicate state in FunctionMinimum,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7109:28,Avoid,Avoid,28,https://root.cern,https://github.com/root-project/root/pull/7109,1,['Avoid'],['Avoid']
Safety,Small change to TTree::OptimizeBaskets to avoid disc reads,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/369:42,avoid,avoid,42,https://root.cern,https://github.com/root-project/root/pull/369,1,['avoid'],['avoid']
Safety,Small fix for geometry state recovery in VMC,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3882:29,recover,recovery,29,https://root.cern,https://github.com/root-project/root/pull/3882,1,['recover'],['recovery']
Safety,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome.; - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test.; - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc.; - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1715921216:1092,avoid,avoid,1092,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1715921216,1,['avoid'],['avoid']
Safety,"So also in the standard RDF workflows we have lots of ReadLock() still present, but managed to avoid the thread scaling problems by eliminating all of the WriteLock() occurrences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7710#issuecomment-1623846875:95,avoid,avoid,95,https://root.cern,https://github.com/root-project/root/issues/7710#issuecomment-1623846875,1,['avoid'],['avoid']
Safety,"So far, we have been unable to come up with a reliable way to detect runtime_cxxmodules. The problem is that one can detect easily if ROOT was built with -Druntime_cxxmodules=On, however, the system can have a module which cannot load successfully (due to for example missing requirements). In that case, the implementation will switch back to non-modules. Short answer, yes we can provide such API, however, that would not be 100% reliable. A reliable API should work on per-library basis. It should check if we are in running in runtime_cxxmodules mode, if there is a prebuilt pcm file for this library and if it has fulfilled requirements. In essence that'd be loading of the module in dry-run mode.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2854#issuecomment-434252716:62,detect,detect,62,https://root.cern,https://github.com/root-project/root/pull/2854#issuecomment-434252716,2,['detect'],['detect']
Safety,"So out of 1012 such `pragma link`, there 199 classes I could not (i.e. I did not build the plugin).; 590 classes had a class version of 0 (so it is fine); 150 classes had no ClassDef (so it is fine); 12 were reported as having no Steamer function but inherited from `TObject` (and upon inspection seemed to have a ClassDef), so it looks a bug in the detection in rootcling for some case of class template instance. That left 61 potential issue (list below) and from that list only `TTime` seemed to be both intended for I/O and might be put in a `TTree`:. ```; Potential issue: TAttImage; Potential issue: TImage; Potential issue: TImagePalette; Potential issue: TPyReturn; Potential issue: TPyArg; Potential issue: TPyReturn; Potential issue: TPyArg; Potential issue: TRecEvent; Potential issue: TRecCmdEvent; Potential issue: TRecExtraEvent; Potential issue: TRecGuiEvent; Potential issue: TRecWinPair; Potential issue: TRecorder; Potential issue: TXMLPlayer; Potential issue: TXMLEngine; Potential issue: TXMLSetup; Potential issue: TXMLFile; Potential issue: TKeyXML; Potential issue: TKeySQL; Potential issue: TSQLClassInfo; Potential issue: TSQLClassColumnInfo; Potential issue: TSQLObjectInfo; Potential issue: TSQLObjectData; Potential issue: TSQLObjectDataPool; Potential issue: TSQLStructure; Potential issue: TSQLColumnData; Potential issue: TSQLTableData; Potential issue: TFree; Potential issue: TFumiliMinimizer; Potential issue: TStructNodeProperty; Potential issue: TGLVertex3; Potential issue: TGLVector3; Potential issue: TGLMatrix; Potential issue: TGLCamera; Potential issue: TGLOrthoCamera; Potential issue: TGLPerspectiveCamera; Potential issue: TGLCameraOverlay; Potential issue: TVirtualMonitoringReader; Potential issue: TUri; Potential issue: TUrl; Potential issue: SysInfo_t; Potential issue: CpuInfo_t; Potential issue: MemInfo_t; Potential issue: ProcInfo_t; Potential issue: TTime; Potential issue: TPluginHandler; Potential issue: TPluginManager; Potential issue: TArray",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12499#issuecomment-1474373359:350,detect,detection,350,https://root.cern,https://github.com/root-project/root/pull/12499#issuecomment-1474373359,1,['detect'],['detection']
Safety,"So this problem has been known for 5 years :( https://github.com/root-project/root/pull/4320 but we manage to indeed lose track of it. That PR used the following more concise pattern:; ```; TView() {} // NOLINT: not allowed to use = default because of TObject::kIsOnHeap detection, see ROOT-10300; ```; where both the `NOLINT` is indeed useful to avoid spurious tool recommendation and the wording was clear but should probably be updated (`ROOT-10300` is a ticket number in the JIRA instance which is now read-only). It would be good to add some wording in the `TObject` documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15469#issuecomment-2150303383:271,detect,detection,271,https://root.cern,https://github.com/root-project/root/pull/15469#issuecomment-2150303383,2,"['avoid', 'detect']","['avoid', 'detection']"
Safety,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake; cmake_minimum_required(VERSION 3.10); project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED); ```. succeeds. ```; [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/; -- The CXX compiler identification is GNU 11.3.1; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/c++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") ; -- Configuring done; -- Generating done; -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest; [bash][pcadp04]:buildtest >; ```. Wile previously it failed. ```; [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/; -- The CXX compiler identification is GNU 11.3.1; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/c++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):; Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables.; Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy; command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable.; Call Stack (most recent call first):; /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency); CMakeLists.txt:5 (find_package); This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cm",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14178#issuecomment-1840829056:444,Detect,Detecting,444,https://root.cern,https://github.com/root-project/root/pull/14178#issuecomment-1840829056,4,['Detect'],['Detecting']
Safety,"So, there were some developments: it seems that trying to catch an exception lead to no proper return for GetEntry.; Removing the try/except i have now a proper `-1` result on GetEntry and i do have this:; ```; ALIBUILD##[Monday 25.10.21 19:18] adrian@hal : ~/work/jalien-cache-manager (master) $; ./tfile_check.py parse broken_AO2D.root step 100000; Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596; Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608; Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0; DF_2913970966704988325/O2track::Entry(0) -> result: -1; ALIBUILD##[Monday 25.10.21 19:18] adrian@hal : ~/work/jalien-cache-manager (master) $; echo $?; 5; ```; The file unfortunately is quite big: https://cernbox.cern.ch/index.php/s/YM3ONVhEVa72KNX; and for reference the code that i use for testing is: https://github.com/adriansev/AO2Dproto/blob/0eff5a37fd0622767ee01b2b3da84b29e996a1ef/tfile_check.py",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9154#issuecomment-951092615:395,detect,detected,395,https://root.cern,https://github.com/root-project/root/issues/9154#issuecomment-951092615,1,['detect'],['detected']
Safety,"Solves problem with `rootbrowse` utility. In PyROOT there are different ways how event loop is running.; Finally there is special thread where gSystem->ProcessEvents() regularly called. In such special case webgui should be informed that ProcessEvents called from special thread - ; via `gEnv->SetValue(""WebGui.ExternalProcessEvents"", ""yes"")`.; In such case RWebWindowManager tries to detect thread id and really use ProcessEvents context to process WebGui functionality. In such configuration extra http thread not required and will be disabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7948:385,detect,detect,385,https://root.cern,https://github.com/root-project/root/pull/7948,1,['detect'],['detect']
Safety,Solves problem with gcc10 warnings. Temporary skip CI to avoid load on Jenkins nodes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5840:57,avoid,avoid,57,https://root.cern,https://github.com/root-project/root/pull/5840,1,['avoid'],['avoid']
Safety,"Some food for thought for your questions:; - instead of a global, we could use a function-local static; the function returns a ref. That way, initialization is guaranteed to be thread-safe, and we don't run the risk of entering the initialization order hell.; - Now that the name `gErrorMutex` is unused, we could *keep* it, as a pointer to a fwd declared class `TVirtualMutex`, initialized to `nullptr`, and mark it as `R__DEPRECATED(6.24,...)`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5762#issuecomment-637578021:184,safe,safe,184,https://root.cern,https://github.com/root-project/root/pull/5762#issuecomment-637578021,2,"['risk', 'safe']","['risk', 'safe']"
Safety,"Some headers contain redundant header guards around #include directives like this:. #ifndef ROOT_TTree; #include ""TTree.h""; #endif. This patch removes the #ifndef's around these includes as they don't serve any practical purpose and are no longer part of the current ROOT coding convention. This patch also fixes the 153 typos that are contained in the symbols of the #ifndef directives.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/341:21,redund,redundant,21,https://root.cern,https://github.com/root-project/root/pull/341,1,['redund'],['redundant']
Safety,"Some improvements in the RooFit build configuration to avoid that information that is only necessary for RooFit at build time is leaking into the public user interface. In particular, it is not necessary to define these `R__HAS_<*>` flags in the public ROOT config only to use them in the private `.cxx` sources. This should be avoided and instead be done with defines in the build configuration. * Move stressRooFit and stressRooStats to `roofit` directory; * Remove `R__HAS_ROOFIT_MULTIPROCESS` from ROOT configuration; * No need to check `R__HAS_MATHMORE` in roofitmore sources; * Avoid need for `R__HAS_CUDA`. More detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13915:55,avoid,avoid,55,https://root.cern,https://github.com/root-project/root/pull/13915,3,"['Avoid', 'avoid']","['Avoid', 'avoid', 'avoided']"
Safety,"Sometimes the `getxattr` call returns a valid string, but the string is incomplete. Namely, part of the full URL to the file on EOS is missing (usually the filename itself). Workaround by checking for the presence of the filename in the xurl string and in case it is not present, avoid calling TFile::Open.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16173:280,avoid,avoid,280,https://root.cern,https://github.com/root-project/root/pull/16173,1,['avoid'],['avoid']
Safety,"Sone changes are made to both the Python and C++ version of the; `rf212_plottingInRanges_blinding` tutorial:. * move around the `-----` that denote section headers to fix the; notebook formatting; * rename `exp` to `expo` to avoid an ambiguity error because of; `std::expr` in C++ tutorial notebook; * use `std::unique_ptr` to avoid leaking of datasets. In particular, the call to `fitTo` includes now the; `Range(""left,right"")` command argument. Otherthise, the fit would also; try to make the model adapt to the empty bins in the blinded region,; giving a wrong fit result (it can be easily seen that the fit was wrong; before by increasing the number of events in the toy dataset to 100k). To avoid that the plotting takes the (now correct) fit range as; `NormRange()` and we can't show what happens if the normalization range; is not set, the `fitrange` string attribute is reset after fitting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10955:225,avoid,avoid,225,https://root.cern,https://github.com/root-project/root/pull/10955,3,['avoid'],['avoid']
Safety,"Sorry too much info, too little bandwidth :sweat_smile: If I understand correctly:. - the `is_equal` redefinition is a real issue but unrelated to RVec 2.0 (thanks @wlav for pointing that out) and now tracked by #7678 ; - you have a patch that works around the cppyy bug with `operator[]`; - iteration is broken because `RVec::begin` returns a raw pointer. In principle `begin` can absolutely return a raw pointer (I _think_ LLVM's SmallVector was designed like that for simplicity, to avoid having to define a custom iterator type). But raw pointers make for fine iterators :smile: Seems like a bug in PyROOT?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-806477941:486,avoid,avoid,486,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-806477941,1,['avoid'],['avoid']
Safety,"Sorta. If (and it look like it here) it succeeded in writing it, it did not in a likely platform dependent manners (i.e. recording the complete set of implementation dependent class hierarchy in the currently used std library). We had a similar problem for `std::unique_ptr` which we solved by the I/O ""ignoring"", per se, the implementation and treating it memory content almost the same as a raw pointer. We could to do something similar for std::atomic but that would circumvent the thread-safety parts; so the real solution needs more thoughts :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9371#issuecomment-985367859:492,safe,safety,492,https://root.cern,https://github.com/root-project/root/issues/9371#issuecomment-985367859,1,['safe'],['safety']
Safety,Specifically this fixes the one described at:; https://sft.its.cern.ch/jira/browse/ROOT-9773?focusedCommentId=87824&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-87824; where the issue was that adding a single branch did not close the learning and 'worth' provoke a learning; prefill. We solved this by distinguishing at the interface level adding branch manual and adding branch as; part of the learning. We can now avoid the LearningPrefill during manual adds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3007:449,avoid,avoid,449,https://root.cern,https://github.com/root-project/root/pull/3007,3,['avoid'],['avoid']
Safety,Speed-up CNN and RNN tutorials in TMVA (use less epochs) and add some fixes for IMT and to not use root-config in the python versions. ; Add also a dependency in the Python tutorials on the C++ to avoid conflicts with the same file name. Remove not needed veto for the no-imt case for the TMVA_CNN_Classification.C tutorial introduced in #13712,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13818:197,avoid,avoid,197,https://root.cern,https://github.com/root-project/root/pull/13818,1,['avoid'],['avoid']
Safety,"Spun off from [discussion](https://github.com/root-project/root/pull/5934/commits/6f3ec9372b011536fc314eef0835508a07d2513b#r448782416) on #5934, this PR lets us wrap move-only types in `RResult`. We add a new method `Unwrap()` to obtain the inner type by value. The caller takes ownership of the inner type, and for move-only types the `RResult` is left in an unspecified state. I decided against adding safeguards against double-moves for now because it would result in false-positive messages for types without move specializations (e.g. `return std::move(42)`). Instead, we should make clear through documentation and examples that `Unwrap()` consumes the `RResult`. . The existing const-ref access method `Get()` has been renamed `Inspect()` following Mozilla's `RResult`-like type [here](https://searchfox.org/mozilla-central/source/mfbt/Result.h#90-91). `Get()` has caused some confusion in code review and we've been looking for alternative names. . Example: ; ```cpp; auto TestMoveOnly = []() -> RResult<std::unique_ptr<int>> {; return std::make_unique<int>(1);; };; auto res = TestMoveOnly();. // Using Inspect to make a copy won't compile; // auto copy_inner = res.Inspect();. // This will compile, but we only have read-only access; const auto& copy_inner = res.Inspect();; EXPECT_EQ(1, *copy_inner);. // Instead, Unwrap is required to get ownership of the move-only type; auto move_inner = res.Unwrap();; EXPECT_EQ(1, *move_inner);; move_inner.reset();; move_inner = std::make_unique<int>(2);; EXPECT_EQ(2, *move_inner);; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5985:404,safe,safeguards,404,https://root.cern,https://github.com/root-project/root/pull/5985,1,['safe'],['safeguards']
Safety,"Stack trace when I have these changes in:; ```; [ 67%] Generating G__MathCore.cxx, ../../lib/libMathCore_rdict.pcm, ../../lib/libMathCore.rootmap; ROOT::AddClass("""") : N4ROOT6Detail10TTypedIterI10TBaseClassEE; ROOT::AddClass("""") : N4ROOT8Internal34TCheckHashRecurveRemoveConsistencyE; ROOT::AddClass("""") : N4ROOT6Detail10TTypedIterI13TEnumConstantEE; ROOT::AddClass("""") : 19TViewPubDataMembers; ROOT::AddClass("""") : 17TViewPubFunctions; ROOT::AddClass("""") : N4ROOT11TRWMutexImpI6TMutexNS_8Internal13RecurseCountsEEE; ROOT::AddClass("""") : N4ROOT11TRWMutexImpINS_10TSpinMutexENS_8Internal13RecurseCountsEEE; ROOT::AddClass("""") : N4ROOT11TRWMutexImpI6TMutexNS_8Internal22UniqueLockRecurseCountEEE; ROOT::AddClass("""") : N4ROOT11TRWMutexImpINS_10TSpinMutexENS_8Internal22UniqueLockRecurseCountEEE; ROOT::AddClass("""") : N4ROOT6Detail10TTypedIterI10TBaseClassEE; ROOT::AddClass("""") : N4ROOT8Internal34TCheckHashRecurveRemoveConsistencyE; Fatal in <TClassTable::Add>: Trying to add class with empty name to TClassTable; aborting; #0 0x00007fa7e57aacbe in __GI___waitpid (pid=32048, stat_loc=stat_loc; entry=0x7fffab271828, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29; #1 0x00007fa7e572138f in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007fa7e67b9c4f in TUnixSystem::StackTrace (this=0x7d30) at /home/amadio/src/root/core/unix/src/TUnixSystem.cxx:2412; #3 0x00007fa7e66900e8 in DefaultErrorHandler (level=32048, abort_bool=40, location=0x0, msg=0x7fa7e57aacbe <__GI___waitpid+46> ""H="") at /home/amadio/src/root/core/base/src/TError.cxx:192; #4 0x00007fa7e668ff16 in ErrorHandler (level=32048, location=0x7fffab271828 """", fmt=0x0, ap=0x7fa7e57aacbe <__GI___waitpid+46>) at /home/amadio/src/root/core/base/src/TError.cxx:251; #5 0x00007fa7e668fb04 in Fatal (location=0x7d30 <error: Cannot access memory at address 0x7d30>, fmt=0x7fffab271828 """") at /home/amadio/src/root/core/base/src/TError.cxx:350; #6 0x00007fa7e67058b2 in TClassTable::Add (cname=0x7d3",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1389#issuecomment-347619862:1012,abort,aborting,1012,https://root.cern,https://github.com/root-project/root/pull/1389#issuecomment-347619862,1,['abort'],['aborting']
Safety,"Stacktrace printed by ROOT:. ```; ===========================================================; #10 0x00007f7b4b7a234c in __pthread_kill_implementation () from /usr/lib/libc.so.6; #11 0x00007f7b4b7554b8 in raise () from /usr/lib/libc.so.6; #12 0x00007f7b4b73f534 in abort () from /usr/lib/libc.so.6; #13 0x00007f7b4b796397 in __libc_message () from /usr/lib/libc.so.6; #14 0x00007f7b4b7ac33c in malloc_printerr () from /usr/lib/libc.so.6; #15 0x00007f7b4b7ae65c in _int_free () from /usr/lib/libc.so.6; #16 0x00007f7b4b7b0be3 in free () from /usr/lib/libc.so.6; #17 0x00007f7b4a62d5ca in operator delete (ptr=<optimized out>) at /usr/src/debug/gcc/libstdc++-v3/libsupc++/del_op.cc:49; #18 0x00007f7b4a6d0402 in __gnu_cxx::new_allocator<char>::deallocate (__t=<optimized out>, __p=<optimized out>, this=0x556146114390) at /usr/src/debug/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ext/new_allocator.h:132; #19 std::allocator_traits<std::allocator<char> >::deallocate (__n=<optimized out>, __p=<optimized out>, __a=...) at /usr/src/debug/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/alloc_traits.h:492; #20 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy (__size=<optimized out>, this=0x556146114390) at /usr/src/debug/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_string.h:245; #21 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose (this=0x556146114390) at /usr/src/debug/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_string.h:240; #22 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate (this=this; entry=0x556146114390, __pos=0, __len1=__len1; entry=93876280332080, __s=__s; entry=0x7f7b4b2e4420 ""x"", __len2=1) at /usr/src/debug/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_string.tcc:317; #23 0x00007f7b4a6d14bf in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace (",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10092#issuecomment-1063993297:265,abort,abort,265,https://root.cern,https://github.com/root-project/root/issues/10092#issuecomment-1063993297,1,['abort'],['abort']
Safety,"Starting from current master, we generate JSON for different v7 tutorials and embed them into HTML pages to; provide interactive images like:. https://root.cern/doc/master/draw__rh1__twoaxes_8cxx.html. For these images we are using https://root.cern/js/dev/ version, which constantly changes.; To be on the safe side, we should preserve JSROOT version with generated reference guide.; Most easy way - just copy JSROOT from ROOT sources into directory with doxygen HTML files ; and use that version of JSROOT in reference guide.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8599:307,safe,safe,307,https://root.cern,https://github.com/root-project/root/issues/8599,1,['safe'],['safe']
Safety,"Summary:; * This appears because stripping `std::` allows 2 entities to have the same normalized name; ~~* This can also appears in case of inline namespace (but does not seem to cause the same problem)~~; * In ~~both~~ the `std` scenario we ends up a (delayed diagnosed :( ) ambiguous symbol.; * The UpdateClassInfo machinery ~~somehow~~ only fails in the std case.; * The error handling could be improved by tweaking in `TCling::RefreshClassInfo(TClass *cl, const clang::NamedDecl *def, bool alias)`:; ```; if (!oldDef || (def && def != oldDef)) {; cl->ResetCaches();; TClass::RemoveClassDeclId(cci->GetDeclId());; if (def) {; // It's a tag decl, not a namespace decl.; cci->Init(*cci->GetType());; ```; to detect that even though old and new (`def` and `oldDef`) decl are different they are still a namespace and issue an error rather than calling `cci->Init` which (even if we passed the right type) would still semantically do the 'wrong' thing (technically updating the `TClass` for the first namespace to now look at the second namespace). For completeness, result with a 3 week old commit 58a96e2a8e (a priori the only relevant change since is LLVM 18 which should not affect the result since the above code is 'wrong').; ```; root [0] gInterpreter->Declare(""inline namespace __inlinens__ { namespace Detail {} } ""); (bool) true; root [1] auto c = TClass::GetClass(""Detail""); (TClass *) 0x14e1048d0; root [2] namespace Detail {}; ```; but ; ```; root [0] namespace std { namespace Detail {} }; root [1] auto c = TClass::GetClass(""Detail""); (TClass *) 0x1497316a0; root [2] namespace Detail {}; Assertion failed: (detail::isPresent(Val) && ""dyn_cast on a non-existent value""), function dyn_cast, file Casting.h, line 663.; Abort trap: 6; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8828#issuecomment-2372467341:709,detect,detect,709,https://root.cern,https://github.com/root-project/root/issues/8828#issuecomment-2372467341,2,"['Abort', 'detect']","['Abort', 'detect']"
Safety,"Support for user defined sensitive detectors; new TVirtualMC::NIELEdep(); clean-up:; Details:; o TVirtualMCSensitiveDetector: the interface class for a user sensitive detector; o New functions in TVirtualMC:; void SetSensitiveDetector(const TString &volName, TVirtualMCSensitiveDetector *sd);; TVirtualMCSensitiveDetector *GetSensitiveDetector(const TString &volName) const;; void SetExclusiveSDScoring(Bool_t exclusiveSDScoring);; o New function in TVirtualMCApplication:; void ConstructSensitiveDetectors();; - Added new TVirtualMC::NIELEdep() function; - Removed default implementation for TVirtualMC::TrackPosition/Momentum with Float_t arguments",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1892:35,detect,detectors,35,https://root.cern,https://github.com/root-project/root/pull/1892,2,['detect'],"['detector', 'detectors']"
Safety,Synchronizes with this upstream commit and directly makes use of the new; API to avoid a patch:; https://github.com/wlav/CPyCppyy/commit/993b17bce2f43516a85931b40035ac7252e2ab7e,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15788:81,avoid,avoid,81,https://root.cern,https://github.com/root-project/root/pull/15788,1,['avoid'],['avoid']
Safety,"Synopsis of the original error report:. Description. I had thought that our `art v3_09_01` based art passed all of our validation tests but I missed a single histogram that failed. I discovered it yesterday. I traced it back to the following. We have a file. `/pnfs/mu2e/scratch/users/brownd/workflow/default/outstage/44170899/00/00000/dig.brownd.CeEndpointMix.MDC2020b.001201_00000000.art`. It was written by `art v3_06_03`. One of the data products is of type `std::vector<StepPointMC>`, where `StepPointMC` is a class in our code base. The class contains 4 data members of type `CLHEP::Hep3Vector`:. https://github.com/Mu2e/Offline/blob/da4772bcb99f7b42bd401c3b15d56a211124553a/MCDataProducts/inc/StepPointMC.hh#L209. The `art::InputTag` is `""compressDigiMCs:virtualdetector""` . When I write a small job using `art v3_09_01` to read this data product and print out it's data members, all 4 of the `Hep3Vector` are `(0,0,0)`. When I run the same job using `art v3_06_03` all of the printout is correct. Remember that between `art v3_06_03` and `art v3_09_01` there was a schema change in `CLHEP::Hep3Vector`. You already fixed one bug related to that. I will prepare a stripped down example and add it to this issue. To reproduce. Unwind the following tar file on a machine that sees `/pnfs/mu2e and /cvmfs/mu2e.opensciencegrid.org`; ```; tar xzf /mu2e/app/users/kutschke/Bugs/Hep3Vector/artv3_09.tar.gz ; cd artv3_09; source /cvmfs/mu2e.opensciencegrid.org/setupmu2e-art.sh; source setup.sh; scons -j 8; mu2e -c bug.fcl; ```; This prints most of the content of the the `StepPointMCs`. The bug is that the 4 `Hep3Vectors` are **all zero**. It's OK that the non-ionizing and visual energy depositions are zero; this data product captures steps in a virtual detector embedded inside a volume with a vacuum of `10^{-4} torr`. This uses the deprecated Mu2e ""Satellite release"" system to build on top of the Offline tag v10_00_00 on /cvmfs/mu2e.opensciencegrid.org/Offline/v10_00_00/SLF7/prof/Offline .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8428#issuecomment-875583779:1758,detect,detector,1758,https://root.cern,https://github.com/root-project/root/issues/8428#issuecomment-875583779,1,['detect'],['detector']
Safety,"T'` it will fail. That's what I mean when I say that by relying on `PYTHONPATH` only one version will work. > we need to continue to support using multiple ROOT versions with python, also outside conda. That is always possible, but it requires setup scripts. I'm usually talking here about the situation in which you do `yum install root`, and it should work out of the box, without any extra setup. Same for other distributions. This is already the case in Fedora, but they have to go through hoops to make it work, like using alternatives for `libPyROOT.so` in `/etc/alternatives`. That's what I'd like to address. > we must not run setup.py as part of a ROOT installation. This makes it much harder to do the right thing during installation in order for things to work properly. PyROOT is a python package afterall, so what's the problem in using Python's native methods of installation as part of `make install`?. > It would be great if import ROOT can auto-detect which libPython (python2 or python3) to load; that would take care of the multi-python case after source thisroot.sh. At the moment, `libPyROOT.so` can only work with either Python 2.x or 3.x, not both. We need to change compile-time checks into runtime checks to make the same library work with both Python 2.x and 3.x (there are many `#ifdef`s on the Python version, for example). Finally, `thisroot.sh` is totally evil and should be deprecated. It messes up the environment when sourcing it, by potentially removing things from the path that should not be removed. It also assumes things about how ROOT was installed, so if ROOT's libraries are not in `$ROOTSYS/lib` (e.g., if they are in `$ROOTSYS/lib64`, or `$ROOTSYS/root/lib` with `gnuinstall=ON`) the script won't work. It also uses a colon for separator in `CMAKE_PREFIX_PATH`, which is separated by semicolons, among other problems. My advice to people is to just stop using the script. Anyway, this is all a digression from this PR. Please merge it so I can close [ROOT-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3843#issuecomment-495154092:1113,detect,detect,1113,https://root.cern,https://github.com/root-project/root/pull/3843#issuecomment-495154092,1,['detect'],['detect']
Safety,"T; -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""); -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH; -- Switching ON 'builtin_vdt' option; -- Looking for BLAS for optional parts of TMVA; -- Looking for sgemm_; -- Looking for sgemm_ - not found; -- Looking for sgemm_; -- Looking for sgemm_ - found; -- Found BLAS: /usr/lib64/libopenblas.so; -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB; -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success; -- Building LLVM in 'Release' mode.; -- The ASM compiler identification is GNU; -- Found assembler: /usr/bin/cc; -- clang project is enabled; -- clang-tools-extra project is disabled; -- compiler-rt project is disabled; -- cross-project-tests project is disabled; -- libc project is disabled; -- libclc project is disabled; -- libcxx project is disabled; -- libcxxabi project is disabled; -- libunwind project is disabled; -- lld project is disabled; -- lldb project is disabled; -- mlir project is disabled; -- openmp project is disabled; -- parallel-libs project is disabled; -- polly project is disabled; -- pstl project is disabled; -- flang project is disabled; -- Looking for backtrace; -- Looking for backtrace - found; -- backtrace facility detected in default set of libraries; -- Found Backtrace: /usr/include; -- Native target architecture is X86; -- Threads disabled.; -- Doxygen disabled.; -- Go bindings disabled.; -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH); -- OCaml bindings disabled.; -- Could NOT find Python module pygments; -- Could NOT find Python module pygments.lexers.c_cpp; -- Could NOT find Python module yaml; -- LLVM host triple: x86_64-unknown-linux-gnu; -- LLVM default target triple: x86_64-unknown-linux-gnu; -- Building with -fPIC; -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter; -- Linker detection: GNU ld; ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14159#issuecomment-1838972446:8805,detect,detected,8805,https://root.cern,https://github.com/root-project/root/issues/14159#issuecomment-1838972446,1,['detect'],['detected']
Safety,"TAGE 1: Overlap checking by sampling within 10 microns; ====================================================================; Info in <TGeoNodeMatrix::CheckOverlaps>: Checking overlaps for worldVOL and daughters within 0.001; Info in <TGeoNodeMatrix::CheckOverlaps>: Checking overlaps by sampling <s> for worldVOL and daughters; Info in <TGeoNodeMatrix::CheckOverlaps>: === NOTE: Extrusions NOT checked with sampling option ! ===; Info in <TGeoChecker::CheckOverlapsBySampling>: #Found 1 overlaps adding-up to 443214 +/- 52974.2 [cm3] for daughters of worldVOL; Check overlaps: [==========] 3 [100.00 %]; Info in <TGeoNodeMatrix::CheckOverlaps>: Number of illegal overlaps/extrusions : 1. ====================================================================; STAGE 2: Global overlap/extrusion checking within 10 microns; ====================================================================; Info in <TGeoNodeMatrix::CheckOverlaps>: Checking overlaps for worldVOL and daughters within 0.001; Check overlaps: [==========] 3 [100.00 %] 00:00; Info in <TGeoNodeMatrix::CheckOverlaps>: Number of illegal overlaps/extrusions : 1. ====================================================================; STAGE 3: Propagating 1000000 tracks starting from vertex; and counting number of boundary crossings...; ====================================================================; Transporting tracks [==========] 1000000 [100.00 %] 00:01; Time for crossing 10673 boundaries: 990000 [ms]; Time per track for full geometry traversal: 0.99 [ms], per crossing: 92.7574 [ms]; ====================================================================; STAGE 4: How much navigation time per volume per next+safety call; ====================================================================; Time for volume worldVOL (assemb=0): 0.72 [ms] ndaughters=2 ncross=4956; Time for volume LV_HCAL_Chimney_Sector_Half_Plate__Meshed_0 (shape=Mesh2Tess): 0.34 [ms] ndaughters=0 ncross=5717; STAGE 4 completed [======| ] 2 [ 66.67 %]; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11781#issuecomment-1328096049:1988,safe,safety,1988,https://root.cern,https://github.com/root-project/root/issues/11781#issuecomment-1328096049,1,['safe'],['safety']
Safety,TBuffer* classes should abort in case the 1GB limit is being hit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14770:24,abort,abort,24,https://root.cern,https://github.com/root-project/root/issues/14770,1,['abort'],['abort']
Safety,"TCP_NODELAY, (char*)val, &optlen) == -1) {; | ^~~~~~~; | |; | int*; In file included from /builddir/root-6.24.06/core/unix/src/TUnixSystem.cxx:101:; /usr/include/sys/socket.h:348:50: note: initializing argument 5 of 'int getsockopt(int, int, int, void*, socklen_t*)'; 348 | int getsockopt (int, int, int, void *__restrict, socklen_t *__restrict);; | ^~~~~~~~~~~~~~~~~~~~~; ```; is the next error. The problem stems from the fact, that the condition for using `socklen_t` is (among others) glibc:; ```c; #if (defined(R__AIX) && !defined(_AIX43)) || \; (defined(R__SUNGCC3) && !defined(__arch64__)); # define USE_SIZE_T; #elif defined(R__GLIBC) || defined(R__FBSD) || \; (defined(R__SUNGCC3) && defined(__arch64__)) || \; defined(R__OBSD) || defined(MAC_OS_X_VERSION_10_4) || \; (defined(R__AIX) && defined(_AIX43)) || \; (defined(R__SOLARIS) && defined(_SOCKLEN_T)); # define USE_SOCKLEN_T; #endif; ```; [Here](https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xsh_chap02.html#tag_22_02_10_06) is some context:; > All socklen_t types were originally (in BSD UNIX) of type int. During the development of POSIX.1-2017, it was decided to change all buffer lengths to size_t, which appears at face value to make sense. When dual mode 32/64-bit systems came along, this choice unnecessarily complicated system interfaces because size_t (with long) was a different size under ILP32 and LP64 models. Reverting to int would have happened except that some implementations had already shipped 64-bit-only interfaces. The compromise was a type which could be defined to be any size by the implementation: socklen_t. I am not sure how to approach this, because the standardization of `socklen_t` seems fairly recent, but in the long run, avoiding this whole types dance altogether and simply using explicit `socklen_t` seems to make most sense and will make for a simpler code. I will appreciate any comments, especially regarding any compatibility issues this might cause - else I will add this to the PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9253#issuecomment-963600314:7286,avoid,avoiding,7286,https://root.cern,https://github.com/root-project/root/issues/9253#issuecomment-963600314,1,['avoid'],['avoiding']
Safety,TClass::GetClassInfo() is not thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15090:37,safe,safe,37,https://root.cern,https://github.com/root-project/root/issues/15090,1,['safe'],['safe']
Safety,TClassEdit: make usage of static cache container thread safe.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10369:56,safe,safe,56,https://root.cern,https://github.com/root-project/root/pull/10369,1,['safe'],['safe']
Safety,TCling::UpdateListOfLoadedSharedLibraries() Linux thread safety,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6797:57,safe,safety,57,https://root.cern,https://github.com/root-project/root/issues/6797,1,['safe'],['safety']
Safety,TClingUtils: Avoid growing paths in GetFileName,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10387:13,Avoid,Avoid,13,https://root.cern,https://github.com/root-project/root/pull/10387,1,['Avoid'],['Avoid']
Safety,"TColor::GetColor(r,g,b) uses 5bit threshold by; default to create new colors. This differs; from normal X11 with 8bit colors. As a result,; images produced in batch and in interactive; session may differ - see greyscale.C macro. Make default 8bit resolution for colors, and; reduce it only if detecting such display.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14063:293,detect,detecting,293,https://root.cern,https://github.com/root-project/root/pull/14063,1,['detect'],['detecting']
Safety,TDatabasePDG::GetParticle(...) not being thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11580:48,safe,safe,48,https://root.cern,https://github.com/root-project/root/issues/11580,1,['safe'],['safe']
Safety,TF2 (with same name) construction can not be made thread safe without taking a lock,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11460:57,safe,safe,57,https://root.cern,https://github.com/root-project/root/issues/11460,1,['safe'],['safe']
Safety,"TFormula indirectly accesses gROOT->fGlobalFunctions. Therefore to safely call different TFormula on different threads, access to the global function list must be serialized.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/31:67,safe,safely,67,https://root.cern,https://github.com/root-project/root/pull/31,1,['safe'],['safely']
Safety,TH1::Fill Avoid redundancy,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5010:10,Avoid,Avoid,10,https://root.cern,https://github.com/root-project/root/pull/5010,2,"['Avoid', 'redund']","['Avoid', 'redundancy']"
Safety,TMVA GPU features are enabled only when both the cuda and tmva-gpu flags are enabled. These flags are not used anywhere else. It looks like the cuda flag is redundant in this case. . Related forum post - https://root-forum.cern.ch/t/feature-request-enable-cuda-if-detected/32764,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3438:157,redund,redundant,157,https://root.cern,https://github.com/root-project/root/pull/3438,2,"['detect', 'redund']","['detected', 'redundant']"
Safety,TMVA RReader not multithread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16600:29,safe,safe,29,https://root.cern,https://github.com/root-project/root/issues/16600,1,['safe'],['safe']
Safety,"TMVA headers must be included before TODBCServer.h to avoid compile error in TVirtualTreePlayer.h(45,75): error C2589: '(': illegal token on right side of '::'",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16638:54,avoid,avoid,54,https://root.cern,https://github.com/root-project/root/issues/16638,1,['avoid'],['avoid']
Safety,TODO: find a way to avoid repeating `RAction`'s code three times without losing performance,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2595:20,avoid,avoid,20,https://root.cern,https://github.com/root-project/root/pull/2595,1,['avoid'],['avoid']
Safety,TSignalHandler is the name of original implementation in ROOT. TSigHandling is the new implementation which supports thread-safe functions. Zhe,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/134#issuecomment-289905312:124,safe,safe,124,https://root.cern,https://github.com/root-project/root/pull/134#issuecomment-289905312,1,['safe'],['safe']
Safety,TString sanity check nchar not larger than capacity,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11444:8,sanity check,sanity check,8,https://root.cern,https://github.com/root-project/root/pull/11444,1,['sanity check'],['sanity check']
Safety,"TTask exposes fTasks through (non-const) GetListOfTasks, so the invariant ""fTasks only contains pointers to TTask"" can not be enforced. ; This makes ; ``` while((task=(TTask*)next())) {```; an unsafe type cast. dynamic_cast should be used instead to avoid undefined behavior. . Generally, any C-style casts (or static_casts) should be avoided unless there is encapsulation to enforce an adequate invariant. ; C++ is a strongly typed language where type errors have to be caught at compile time because they will not lead to graceful failure at runtime.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11663:193,unsafe,unsafe,193,https://root.cern,https://github.com/root-project/root/issues/11663,3,"['avoid', 'unsafe']","['avoid', 'avoided', 'unsafe']"
Safety,TTask: unsafe cast in ExecuteTasks,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11663:7,unsafe,unsafe,7,https://root.cern,https://github.com/root-project/root/issues/11663,1,['unsafe'],['unsafe']
Safety,"TThreadedObject currently has a fixed amount of available slots,; the number of which can be set at construction time. This makes; it impossible to use TThreadedObject inside TBB tasks safely, because; TBB can potentially swap out worker threads for different threads at; runtime, resulting in TThreadedObject counting more thread ID's than; slots, and therefore in out-of-bound accesses to its contents. With this patch, TThreadedObject just appends a new slot when needed,; so it nevers runs out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5464:185,safe,safely,185,https://root.cern,https://github.com/root-project/root/pull/5464,1,['safe'],['safely']
Safety,"TTree::CopyAddresses has the built-in pre-condition that the input and; output branches are of the same kind. Clones might be added, however,; for which the pre-condition is violated. This is currently the case,; for example, with certain usages of RDataFrame::Snapshot, which might; create an output branch that is a simple TBranch while the input branch; is e.g. a TBranchElement. This results in wrong data being written out. With this patch we detect this case and complain.; A proper fix will be proposed soon. The issue is tracked as #8295.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8314:448,detect,detect,448,https://root.cern,https://github.com/root-project/root/pull/8314,2,['detect'],['detect']
Safety,TTreeCacheUnzip thread safety with prefetching enabled,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10095:23,safe,safety,23,https://root.cern,https://github.com/root-project/root/issues/10095,1,['safe'],['safety']
Safety,"TTreeProcessorMT now spawns tasks that process clusters from tasks that process files:; this should decrease the amount of file switches that each thread-local; TChain performs during an event loop, as each thread will tend to; process clusters that belong to the same file. In addition, when no friends and no TEntryList are present, we can avoid the preliminary full sweep of; input files, since we we can use local rather than global entry numbers.; In this case TTreeProcessorMT spawns one task per input file which first retrieves cluster boundaries; for that file and then spawns one sub-task per cluster. I also added myself to the list of authors. @etejedor there are a couple of things I am not super happy with in this implementation:; - each thread-local `TTreeView` duplicates all info about the dataset (file names, friend names, friend file names...); - `TTreeProcessorMT` has to query all of this information from `TTreeView`; - ~~the per-file task should only call `Internal::MakeClusters` once (just noticed, that's an easy refactoring)~~ fixed and squashed. Moving the dataset info from `TTreeView` to `TTreeProcessorMT`, on the other hand, would mean adding even more parameters to `TTreeView::GetTreeReader`. What do you think?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2143:342,avoid,avoid,342,https://root.cern,https://github.com/root-project/root/pull/2143,1,['avoid'],['avoid']
Safety,"TVirtualX.h contains not correct definition ""class GLUtesselator"", which is conflicts with real ""struct GLUtesselator"". ; For now just avoid use of both includes in one place.; In principle, one should remove GLUtesselator for TVirtualX at all",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2905:135,avoid,avoid,135,https://root.cern,https://github.com/root-project/root/pull/2905,1,['avoid'],['avoid']
Safety,Taking note of all the things will try to modify them as suggested and look again in all files and will surely avoid casting when it can be avoided . Will PR this above files and new files after that :). Thank you for your time and suggestions.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10022#issuecomment-1058179166:111,avoid,avoid,111,https://root.cern,https://github.com/root-project/root/pull/10022#issuecomment-1058179166,2,['avoid'],"['avoid', 'avoided']"
Safety,"Test directories should be added using ROOT_ADD_TEST_SUBDIRECTORY. If add_subdirectory is used the test binaries get installed during ""make install"". if(testing) is redundant - it is already part of the ROOT_ADD_TEST_SUBDIRECTORY macro.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2247:165,redund,redundant,165,https://root.cern,https://github.com/root-project/root/pull/2247,1,['redund'],['redundant']
Safety,Test failures are all timeouts in jupyter notebooks. I don't think that is related...?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4974#issuecomment-586911454:22,timeout,timeouts,22,https://root.cern,https://github.com/root-project/root/pull/4974#issuecomment-586911454,1,['timeout'],['timeouts']
Safety,"Test failures are unrelated, we can safely merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5307#issuecomment-610209307:36,safe,safely,36,https://root.cern,https://github.com/root-project/root/pull/5307#issuecomment-610209307,1,['safe'],['safely']
Safety,Testing failure are because of networks timeout.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15931#issuecomment-2191492754:40,timeout,timeout,40,https://root.cern,https://github.com/root-project/root/pull/15931#issuecomment-2191492754,1,['timeout'],['timeout']
Safety,"Tests has been augmented and refactored to avoid code duplication. There's one issue that I'm not sure how to solve: random access iterators are required to support the forms `it + n` as well as `n + it` (where `n` in our case is of type `std::ptrdiff_t`. The second form requires the definition of a free-standing `operator+`, which I implemented this way:. ```c++; template <typename T>; auto operator+(std::ptrdiff_t n, const typename TTreeReaderArray<T>::iterator &it); -> decltype(it + n); {; return it + n;; }; ```. Problem: in the definition above `T` cannot be deduced from the dependent type `iterator`, so this overload is never considered. Any idea how to work around this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1259#issuecomment-343112197:43,avoid,avoid,43,https://root.cern,https://github.com/root-project/root/pull/1259#issuecomment-343112197,1,['avoid'],['avoid']
Safety,Thank you !. The problem seems coming from using Vc as type instead of float or double with std::sqrt instead of sqrt. Vc probably re-implement the sqrt() function but not in namespace std. Maybe we should not apply this to avoid breaking support for Vc.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7909#issuecomment-822556035:224,avoid,avoid,224,https://root.cern,https://github.com/root-project/root/pull/7909#issuecomment-822556035,1,['avoid'],['avoid']
Safety,"Thank you for the suggestion, @Dr15Jones . I think that works nicely. I like that we can now exchange the mechanics of the token without changing the interface. We'll use the model ID as a safety check. This PR now include a patch to the RNTupleModel id management.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14531#issuecomment-1933863300:189,safe,safety,189,https://root.cern,https://github.com/root-project/root/pull/14531#issuecomment-1933863300,1,['safe'],['safety']
Safety,"Thank you very much Bertrand for the explanation. I tried with this one-liner in my code, and now it works perfectly:. `Gl_histinit(gEnv->GetValue(""Rint.History"", gSystem->HomeDirectory()));`. The problem I see if it is not introduced in the plugin is that the SetHistAdd() function has no effect. To avoid confusion, I would suggest to add the following in the documentation:. ```; // The function SetHistAdd() is needed for a standalone TApplication to log the TGCommandPlugin commands into a ROOT history file.; // However, this function has no effect if the user does not explictly set on his standalone application the name of the ROOT history file.; // To log into the default ROOT history file, call this on the user-side of the code:; // Gl_histinit(gEnv->GetValue(""Rint.History"", gSystem->HomeDirectory()));; // Otherwise, replace the argument of Gl_histinit with a text file name you want to use for application-specific logging.; ```. After that addition, it looks great and ready to merge in my opinion :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7180#issuecomment-780881584:301,avoid,avoid,301,https://root.cern,https://github.com/root-project/root/issues/7180#issuecomment-780881584,1,['avoid'],['avoid']
Safety,"Thank you! That's great you also addressed the comment with the redundant verbosity flag. Let's test this once with multiprocess off, and then afterwards once with multiprocess on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11577#issuecomment-1282338633:64,redund,redundant,64,https://root.cern,https://github.com/root-project/root/pull/11577#issuecomment-1282338633,1,['redund'],['redundant']
Safety,"Thank you. So if I understand correctly : ; for n_s times RooHistPdf, it behaves as for the case RooHistPdf for the method : getVal() ; -> OK : it gives a result ""normalized to 1"". But if we decide *not to normalize* the RooDataHist used to create the RooHistPdf,; the RooHistPdf -> getVal() will return a value normalized to the number of events of the RooDataHist : so in this case it gives a *non-normalized result*. This is strange since it is stated : ""The histogram distribution is explicitly normalized by RooHistPdf and can have an arbitrary number of real or discrete dimensions. "". Indeed, with my minimum example where you may put the option option_normalize_hist=0 (with the fix that you kindly found of <=55 bins); we get :; value_pdf total=39.9713; which represents : pdf->getVal()*bin_width. so in this case, we don't need to multiply by the number of events to obtain a prediction !!; The value of the pdf is not inside [0, 1]. So, depending whether the RooDataHist that was used in order to construct the RooHistPdf, was normalized or not normalized, the RooHistPdf->getVal() returns a normalized or a not normalised result,; in contradiction with the sentence that roofit is expected to do it : the sentence : ""The histogram distribution is explicitly normalized by RooHistPdf and can have an arbitrary number of real or discrete dimensions. "" of https://root.cern.ch/doc/master/classRooHistPdf.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7991#issuecomment-826921480:886,predict,prediction,886,https://root.cern,https://github.com/root-project/root/issues/7991#issuecomment-826921480,1,['predict'],['prediction']
Safety,"Thanks @Ask149 for your contribution, that's a good change! Out of curiosity, how did you detect this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4275#issuecomment-529365130:90,detect,detect,90,https://root.cern,https://github.com/root-project/root/pull/4275#issuecomment-529365130,1,['detect'],['detect']
Safety,"Thanks @Axel-Naumann. I'm afraid I still see the issue even if I ask for an existing type, e.g. `std::vector<int>::value_type`. I just tested the following snippet:. ```; import ROOT. while True:; ROOT.TClass.GetClass(""std::vector<int>::value_type""); ```. on:. ```; $ root --version; ROOT Version: 6.24/06; Built for linuxx8664gcc on Sep 02 2021, 14:20:23; From tags/v6-24-06@v6-24-06; ```. Admittedly, we were also making some non-optimal calls to `TClass::GetClass()` and the most reliable way to avoid the issue is to avoid these calls altogether. However, finding the offending calls is a bit of a challenge at the moment. Is there a more targeted way to warn about auto-parsing apart from setting `ROOTDEBUG=1`, which of course prints a lot more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9029#issuecomment-1110614505:499,avoid,avoid,499,https://root.cern,https://github.com/root-project/root/issues/9029#issuecomment-1110614505,2,['avoid'],['avoid']
Safety,"Thanks @ellert, this helped a lot to get me started into the right direction!. As far as I can tell, the problem is slightly different from https://bugzilla.redhat.com/show_bug.cgi?id=1830472; that one failed during the build of ROOT while we now have a problem during JIT compilation, after ROOT has already been built successfully. But we are very likely on the right track here with `-moutline-atomics` because Clang now defaults to enabling that if it detects a `libgcc` newer than 9.3.1 - this explains why it still works with GCC 8. Before the upgrade to LLVM 13, it was working fine everywhere because LLVM 9 didn't know about the `__aarch64_ldadd*` functions, I believe it used a different lowering strategy for atomics...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12294#issuecomment-1436502493:456,detect,detects,456,https://root.cern,https://github.com/root-project/root/issues/12294#issuecomment-1436502493,1,['detect'],['detects']
Safety,Thanks @oshadura! I will merge once Jenkins is done to avoid having this marked red.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1063#issuecomment-332524577:55,avoid,avoid,55,https://root.cern,https://github.com/root-project/root/pull/1063#issuecomment-332524577,1,['avoid'],['avoid']
Safety,"Thanks @wlav, @guitargeek. We have a piece of code, [PyROOTInspector](https://gitlab.cern.ch/atlas/athena/-/blob/main/Control/RootUtils/src/pyroot/PyROOTInspector.cxx), that we use to pythonize our data to do some generic operations, such as file comparisons etc. That relies on the Python/C API, hence the issue. Actually, I recently put in a patch that seems to do the trick, at least from a practical point of view:. https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. With this we can recover the same functionality as in the previous `cppyy` versions but I'm in general open to suggestions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15161#issuecomment-2057704255:503,recover,recover,503,https://root.cern,https://github.com/root-project/root/issues/15161#issuecomment-2057704255,1,['recover'],['recover']
Safety,"Thanks a lot for the review and the questions!. > * Are we sure it's not possible to avoid the extra call to the interpreter? That is not done in the current status (there is the `eval` but I don't think it calls directly into cling every time). That's true, but probably `eval` is even worse. It's the `gInterpreter` of Python, which is ""many orders of magnitude slower for smaller expressions/objects than plain ol’ Python"": https://pandas.pydata.org/pandas-docs/version/0.20/enhancingperf.html#expression-evaluation-via-eval-experimental. Also, it's more flexible. Since in Python, you have to do `ROOT.kRed`, while gInterpreter can just take `kRed`, there was this hack of adding ""ROOT."" to the string passed to eval, which reduced flexibility and would result in unexpected errors for example when the user does `""1+kRed""` instead of `""kRed+1""`. > * What happens after this change to keyword arguments? Is this tested somewhere? For instance, can I call the same Python function with a random order of the keyword arguments even after these changes?. It is tested in all RooFit tutorials that do plots, and it works just fine. And yes, the keyword argument pythonization still works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16707#issuecomment-2443867878:85,avoid,avoid,85,https://root.cern,https://github.com/root-project/root/pull/16707#issuecomment-2443867878,1,['avoid'],['avoid']
Safety,Thanks a lot! Can you still take a look at the logging please? I made a suggestion on how to avoid adding the inheritance from TObject: https://github.com/root-project/root/pull/9482#pullrequestreview-858288936,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9482#issuecomment-1017621798:93,avoid,avoid,93,https://root.cern,https://github.com/root-project/root/pull/9482#issuecomment-1017621798,1,['avoid'],['avoid']
Safety,"Thanks a lot, @andriish !. > so the people who will use that event display will avoid building ROOT and related issues. One last question (likely!) to understand the context: do you run the GUI with fp exceptions on in production, or is this for testing / development only?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6677#issuecomment-713661081:80,avoid,avoid,80,https://root.cern,https://github.com/root-project/root/issues/6677#issuecomment-713661081,1,['avoid'],['avoid']
Safety,"Thanks again Stephan for your explanations! I will close this PR for the time being since I have no time to work on time safety at the moment, but I hope I'll have time to come back to this and reopen the PR in the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7325#issuecomment-808570430:121,safe,safety,121,https://root.cern,https://github.com/root-project/root/pull/7325#issuecomment-808570430,1,['safe'],['safety']
Safety,"Thanks for adding this first commit where you mode the header files from `res` to `src`!. Since the PR touched many files only because of that commit, we risk getting into conflicts again just because of this change. Can you please open a separate PR just with the first commit? Then I can merge it ASAP, and this PR will only contain the remaining commits after the first.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11773#issuecomment-1343448442:154,risk,risk,154,https://root.cern,https://github.com/root-project/root/pull/11773#issuecomment-1343448442,1,['risk'],['risk']
Safety,Thanks for all the feedback. A more comprehensive solution to avoid spurious lookups triggered by TClass::GetClass will be proposed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13341#issuecomment-1862225290:62,avoid,avoid,62,https://root.cern,https://github.com/root-project/root/pull/13341#issuecomment-1862225290,1,['avoid'],['avoid']
Safety,Thanks for having a look! I'll merge the PR first thing tomorrow not to risk to affect the nightlies.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13633#issuecomment-1714461480:72,risk,risk,72,https://root.cern,https://github.com/root-project/root/pull/13633#issuecomment-1714461480,1,['risk'],['risk']
Safety,Thanks for integrating the comments. Perhaps the merge commit can be avoided?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2756#issuecomment-428693967:69,avoid,avoided,69,https://root.cern,https://github.com/root-project/root/pull/2756#issuecomment-428693967,1,['avoid'],['avoided']
Safety,"Thanks for the catch!. Maybe, as a reminder, we could add a comment on Bswapcpy.h, before the functions, saying that these functions are not safe to call with n==0.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15780#issuecomment-2154237134:141,safe,safe,141,https://root.cern,https://github.com/root-project/root/pull/15780#issuecomment-2154237134,1,['safe'],['safe']
Safety,"Thanks for the comment! I agree that it's not clear how meaningful `weightError` is for RooDataSet, but still the only two classes that derive from RooAbsData are RooDataHist and RooDataSet. Both of them reimplement `weightError` in a non-trivial way. Or are you thinking about some user classes that might inherit from `RooAbsData`? In that case they would not compile because not all purely virtual functions are implemented. But I'd argue that this a good thing, because then the user is made aware that `weightError` should be implemented with a dummy value. Actually, it can even be dangerous that we choose this dummy value ourselves (why zero and not `nan` for example?). I think purely virtual functions are safer than ""dummy functions"", and they are also more self-documenting because we know that every inheriting class will be overloading this function.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8137#issuecomment-838795380:716,safe,safer,716,https://root.cern,https://github.com/root-project/root/pull/8137#issuecomment-838795380,1,['safe'],['safer']
Safety,"Thanks for the comments! I will change things a little bit to address these concerns. What made me weary now is that the compiler doesn't suggest any `override` keywords for the RDF-related member functions in the RooAbsDataHelper. So what I think is that it's probably not even necessary to inherit from `RActionImpl`! Maybe that was just done by the original author for convenience. I think this dependency can actually be avoided without changing and RDF code. ...or maybe not, but I'll check",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16606#issuecomment-2394997637:425,avoid,avoided,425,https://root.cern,https://github.com/root-project/root/pull/16606#issuecomment-2394997637,1,['avoid'],['avoided']
Safety,"Thanks for the quick action on this one. Actually looking into #14425, I think this might be considered a duplicate of that. Sorry, I didn't see that before I opened this one. Regarding the proposed changes in #15125, I am OK with that obviously, since it doesn't require work on our end ;) I am not sure how cppyy handles the lifetimes of objects that are referred to via a regular pointer, but an implicit conversion to a smart pointer seems like a good source of all kinds of issues there. So also from that point of view, I think it is safe to not have that conversion. I will report the overload resolution issue upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15117#issuecomment-2036308518:540,safe,safe,540,https://root.cern,https://github.com/root-project/root/issues/15117#issuecomment-2036308518,1,['safe'],['safe']
Safety,"Thanks for the reply. Yes, it is still an issue because the problem is in TList itself not being (completely) thread-safe even if UseRWLock is called. In particular, there is a suspicious `std::make_shared< link >` that might be giving problems when 'sharing it'. Find attached the complete log.; [helgrindlog.txt](https://github.com/root-project/root/files/6773132/helgrindlog.txt). The issue is that when a timer is added, it calls FindObject:; https://github.com/root-project/root/blob/master/core/cont/src/TList.cxx#L617. but at the same time, a new object might have been added in the meanwhile by the other thread:; https://github.com/root-project/root/blob/master/core/cont/src/TList.cxx#L738. Maybe a mutex should be added inside the TList class to handle this?. Here the XML version (lower part of it):; ![image](https://user-images.githubusercontent.com/10653970/124675469-04769e80-debd-11eb-95d0-595f613c4689.png)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8365#issuecomment-875132812:117,safe,safe,117,https://root.cern,https://github.com/root-project/root/issues/8365#issuecomment-875132812,1,['safe'],['safe']
Safety,"Thanks for the response. The reason I've noticed this PR is because in my instance it appears that it aborted CMake due lack of Java in the build environment. I don't believe the `fail-on-missing` option is turned on (although my CMake knowledge isn't excellent, so perhaps I'm being naive here), so at least in the current HEAD it appears to me to be a mandatory component. If you'd like, you can take a look at the build log here, ; https://github.com/MrCarroll/root-snap/runs/2059798478?check_suite_focus=true#step:3:3399. I've no technical reason against including Java in the snap to enable this functionality, but I don't believe it's functionality the users of the snap would likely expect it to have, it's primarily targetted to users who aren't likely to have access to a cluster to use. You can treat the snap as effectively being an instance of Ubuntu 20.04; if you'd like I can try see if I have the same problem in the normal Ubuntu environment to see if it reproduces there. Otherwise I'll likely pass the explicit flag to turn this off in my instance if it does appear to be a problem specific to the snap build. Thanks again!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7406#issuecomment-793527779:102,abort,aborted,102,https://root.cern,https://github.com/root-project/root/pull/7406#issuecomment-793527779,1,['abort'],['aborted']
Safety,"Thanks for the review!. > Let's also make the `RNTupleModelChangeset` a sub class of `RNTupleModel`. This was actually intentional, as the class is forward-declared in `RPageStorage.hxx`. C++ does not allow forward-declaring a nested class.; Thus, in order to avoid `#include`ing `RNTupleModel.hxx`, I left `RNTupleModelChangeset` in the `ROOT::Experimental::Detail` namespace instead. That was my preference, although we can take the other way, i.e. nest the class and `#include` the header; should we?. The rest of the comments, I'll address this week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12376#issuecomment-1476305514:260,avoid,avoid,260,https://root.cern,https://github.com/root-project/root/pull/12376#issuecomment-1476305514,1,['avoid'],['avoid']
Safety,"Thanks for the reviews, @hageboeck and @lmoneta!. I'll merge it after https://github.com/root-project/root/pull/8167 so I can use the improved RooArgSet constructor from iterators that Stephan introduced in that PR. I also will update the changes to the RooFit collection classes in this PR to avoid using the `std::span` ROOT backport in the interface, as advised by @hageboeck (see https://github.com/root-project/root/pull/8167#discussion_r646480340).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7907#issuecomment-856230037:294,avoid,avoid,294,https://root.cern,https://github.com/root-project/root/pull/7907#issuecomment-856230037,1,['avoid'],['avoid']
Safety,"Thanks for this attempt. There are a few issues remaining and those of course will have to be understood. On top of those, I would like to ask, if possible, to check that there is no lookup triggered by the new name discovering routine: we want to avoid slowdowns+memory allocations due to unwanted accesses to the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14676#issuecomment-1943375264:248,avoid,avoid,248,https://root.cern,https://github.com/root-project/root/pull/14676#issuecomment-1943375264,1,['avoid'],['avoid']
Safety,Thanks for this nice PR! We try to avoid merge commits: could you please remove it? After that we can start the tests.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15811#issuecomment-2158975448:35,avoid,avoid,35,https://root.cern,https://github.com/root-project/root/pull/15811#issuecomment-2158975448,1,['avoid'],['avoid']
Safety,"Thanks for your input. In principle, the TPaleetteAxis is never stored alone. Always with a histogram. That's why I implemented this way as there was no real risk. But you are right I will check more closely.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11503#issuecomment-1270212138:158,risk,risk,158,https://root.cern,https://github.com/root-project/root/pull/11503#issuecomment-1270212138,1,['risk'],['risk']
Safety,"Thanks for your proposal! We won't need `std::shared_ptr<std::vector<Double_t>>` as datatype; `std::vector<Double_t>` would be enough as this allows cheap move operations. Then again, so does `Double_t *`. Did you consider simply implementing a move operator for `TGraph`?. We must avoid all backward incompatible interface changes. I didn't look in detail but the amount of code changes here suggests that this isn't the case for this draft?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9610#issuecomment-1056797487:282,avoid,avoid,282,https://root.cern,https://github.com/root-project/root/pull/9610#issuecomment-1056797487,1,['avoid'],['avoid']
Safety,"Thanks to Axel digging into clang's code generation, we understood that what clang doesn't deal with very well is a large amount of variable instantiations of types with non-trivial destructors in the same function body. In this scenario the list of exception-handling ""landing pads"" grows to sizes that make compilation times blow up when generating code that deals with calling the destructors of these variables in case an exception is thrown in the function body. Presumably gcc suffers from a similar issue. * on our side, a workaround seems possible: we can avoid allocating many temporary `std::string`s and `std::vector<std::string>`s by generating code of the form `Jit{Filter,Define}Helper(..., const char*[]{""col1"", ""col2""}, ...)` rather than `Jit{Filter,Define}Helper(..., std::vector<std::string>{""col1"", ""col2""}, ...)`. I'm working on a patch so Stefan can try this out on the original usecase.; * now that the mechanism behind the long compile times is understood, Axel will work on a standalone reproducer to try to push for a fix in upstream clang (and possibly gcc if we see the patch reduces gcc compile times too)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7604#issuecomment-804843292:564,avoid,avoid,564,https://root.cern,https://github.com/root-project/root/issues/7604#issuecomment-804843292,1,['avoid'],['avoid']
Safety,Thanks to Tomas Dado for noticing that this was broken. We should ensure that ROOT always builds with this flag. See also:; * https://root.cern/doc/v632/release-notes.html#compile-your-code-with-memory-safe-interfaces; * https://github.com/root-project/root/blob/master/roofit/roofitcore/inc/RooFit/Config.h#L16,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15946:202,safe,safe-interfaces,202,https://root.cern,https://github.com/root-project/root/pull/15946,1,['safe'],['safe-interfaces']
Safety,"Thanks! I'll take care of backporting this, since it should be fixed for the release. Then packagers don't have to do hacks to avoid the flood of warnings.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15527#issuecomment-2115367330:127,avoid,avoid,127,https://root.cern,https://github.com/root-project/root/pull/15527#issuecomment-2115367330,1,['avoid'],['avoid']
Safety,"Thanks! I'm not calling `cycle` in the constructor, I'm explicitly initializing it. This should not be necessary because I already do it in the declaration:; https://github.com/root-project/root/blob/79a033698cfada8dda1254224f4f251afa2d5c3b/roofit/roofitcore/src/MemPoolForRooSets.h#L173. But some compilers we use in the CI don't seem to like it and gave this warning, which I avoid by calling the constructor of the `cycle` array in the Arena constructor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7995#issuecomment-829283395:378,avoid,avoid,378,https://root.cern,https://github.com/root-project/root/pull/7995#issuecomment-829283395,1,['avoid'],['avoid']
Safety,"Thanks! You're right, it's not that necessary, but having this interface more general would have avoided the question on the forum to begin with. And I think every change that would have prevented a question is a good change, to avoid more duplicate questions in the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13266#issuecomment-1659938360:97,avoid,avoided,97,https://root.cern,https://github.com/root-project/root/pull/13266#issuecomment-1659938360,2,['avoid'],"['avoid', 'avoided']"
Safety,"Thanks, @vgvassilev. > it is not exception safe. Instead of re-implementing a vector with small buffer optimization (along the lines you describe) we believe that adjusting this adapted small vector is a more viable / cheap solution. We also don't expect the lack of exception safety to be a major concern given the use cases of `RVec`. And if I am proven wrong and it becomes a concern then we're in a position to address that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-821054757:43,safe,safe,43,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-821054757,2,['safe'],"['safe', 'safety']"
Safety,"Thanks, I propose to add the relevant information to the release notes in a separate PR (mainly to avoid an otherwise unnecessary rebase before merging)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7260#issuecomment-805879567:99,avoid,avoid,99,https://root.cern,https://github.com/root-project/root/pull/7260#issuecomment-805879567,1,['avoid'],['avoid']
Safety,"Thanks, I see it now.; @bellenot any idea where this error might be coming from in Windows?. `[2022-10-18T15:48:41.690Z] hudson.AbortException: script returned exit code -1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11588#issuecomment-1305694455:128,Abort,AbortException,128,https://root.cern,https://github.com/root-project/root/pull/11588#issuecomment-1305694455,1,['Abort'],['AbortException']
Safety,"That about this PR? . It is necessary to correctly detect situation when `json_fwd.hpp` is really required.; Main problem if system-wide installation of newer 3.11.x version of `nlohmann/json.hpp` does not includes `json_fwd.hpp`.; That's why this PR. Older (lower than 3.9 are) rare now, but can work without problems - if provides `json_fwd.hpp`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11268#issuecomment-1245001783:51,detect,detect,51,https://root.cern,https://github.com/root-project/root/pull/11268#issuecomment-1245001783,1,['detect'],['detect']
Safety,"That callstack would not show the Finalize call anyway, as `abort` is called from `VariationsFor`. The event loop has not even started there. So the question remains: is `Finalize` called if an exception is thrown during the event loop? I will have to check.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10484#issuecomment-1460383833:60,abort,abort,60,https://root.cern,https://github.com/root-project/root/issues/10484#issuecomment-1460383833,1,['abort'],['abort']
Safety,"That is safe: the TChain is declared at global scope, so it will be destroyed only at program exit. Declaring it as a Python global variable (i.e. at module scope) should have the same effect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10965#issuecomment-1427915793:8,safe,safe,8,https://root.cern,https://github.com/root-project/root/issues/10965#issuecomment-1427915793,1,['safe'],['safe']
Safety,That was already discussed many time in the past. The problem is that doing that de pdf and ps files generated will be super huge and people will not realize it if they are running in batch. Some people had disk saturated. Col2 was explicitly created for that. So if we do what we suggest we do exactly what we wanted to avoid. All that is explained in de reference guide,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6822#issuecomment-728877631:321,avoid,avoid,321,https://root.cern,https://github.com/root-project/root/issues/6822#issuecomment-728877631,1,['avoid'],['avoid']
Safety,"That was foreseen for the next release, but to avoid further confusion we will create it now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8188#issuecomment-843812408:47,avoid,avoid,47,https://root.cern,https://github.com/root-project/root/issues/8188#issuecomment-843812408,1,['avoid'],['avoid']
Safety,"That would be a good interface. There would always be a practical limit on the number of items that one could view, but suppose we just don't want to specify it (and risk running out of memory in extreme cases). Can `nItems = -1` or `nItems < 0` mean ""send me everything""? The function would still change `nItems` in place to tell the caller how many items are actually in the `const T*` that it returns. Also, who owns the `const T*` memory? Would deleting the `RNTupleView` free that `const T*`?. Might the `const T*` a concatenation of multiple pages, or is this still granular at the page level? If it can be a concatenation of multiple pages, then it would be a different buffer from the one the `RNTupleView` manages internally. If it could be _either a view or a copy_, then the `RNTupleView` must own it because this object would have the most information to keep track of whether its internal buffer-freeing frees the `const T*`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7112#issuecomment-825682200:166,risk,risk,166,https://root.cern,https://github.com/root-project/root/pull/7112#issuecomment-825682200,1,['risk'],['risk']
Safety,"The ""Math/Error.h"" header is not shipped with standalone Minuit2. It is not a perfect solution to just ship it with Minuit2, because the Error.h header behaves differently depending on the `MATHCORE_STANDALONE` macro being defined or not. The code would only work correctly if the user defines the `MATHCORE_STANDALONE` herself in the user code that uses standalone Minuit2, which would be annoying. Instead, this commit proposes another solution to the problem: for all headers also used in Minuit2 standalone, MathCore; moves the definitions of all functions that use `Math/Error.h` out of the header files in the cxx files. Like this, the `Math/Error.h` is only a build dependency of standalone Minuit2, and the user doesn't need to define the `MATHCORE_STANDALONE` macro for it to work. Including the ""Math/Util.h"" header needs to be avoided for similar reasons (it's about another preprocessor macro related to `veccore`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13646:838,avoid,avoided,838,https://root.cern,https://github.com/root-project/root/pull/13646,1,['avoid'],['avoided']
Safety,The 5 second timeout was not enough when trying to build ROOT in docker.; Possibly the issue was due to lag on the server as well. Patch by Alexander Penev (@alexander-penev).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9405:13,timeout,timeout,13,https://root.cern,https://github.com/root-project/root/pull/9405,1,['timeout'],['timeout']
Safety,"The CI build error detection logic is not very clever.; I quoted the error the PR is fixing in the git commit message.; The CI build puts the commit message from the PR in the CI build log.; Then scans the log for errors and tags the quoted error in the commit message as a failure...; The log actually says: 100% tests passed, 0 tests failed out of 1120",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8366#issuecomment-856589322:19,detect,detection,19,https://root.cern,https://github.com/root-project/root/pull/8366#issuecomment-856589322,1,['detect'],['detection']
Safety,"The CMake build is now much more heavily integrated with the folder structure. This has the positive side that less copying is going on, and the downside that it has to fill in the source directory with the items it needs from ROOT (they are ignored and easy to clean with `make purge`, though). Like before, you can build in place or make a redistributable source package. Only added one `.gitignore`. Haven't really touched the ROOT Minuit2 build system, though some fixes would be good there too, but that's a later PR. (Instructions have not been updated to new version yet, and not as well tested yet). I can revert to the old system if that's better. The original reason for using CMake to do the copy also was because that avoided having to write a `.sh` file, and was more portable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1680#issuecomment-369603935:730,avoid,avoided,730,https://root.cern,https://github.com/root-project/root/pull/1680#issuecomment-369603935,1,['avoid'],['avoided']
Safety,The EnableAutoLoading interface needs to know about the internal TCling implementation to safely enable the autoloading facility in ROOT. Calling this interface cannot be user responsibility as he/she should not know the initialization details of TCling. Make this interface a nop and add a deprecation warning. This should resolve ROOT-10514 and ROOT-10528.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4868:90,safe,safely,90,https://root.cern,https://github.com/root-project/root/pull/4868,1,['safe'],['safely']
Safety,"The Failure is visible on the GCC 12 / Fedora 36 build: https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/3285/LABEL=ROOT-fedora36,SPEC=default,V=master/testReport/junit/projectroot.roottest.root.tree/branches/roottest_root_tree_branches_make/; for example:; ```; +Error in <TTree::Branch>: The class requested (vector<int>) for the branch ""vec"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (vector<int>) to avoid to write corrupted data.; ```; This indicates that the generation of the dictionary for `std::vector<int>` failed even-though it is explicitly requested as part of the G__Core.cxx dictionary. . And indeed when inspecting the build log we see for `G__Core.cxx`:; ```; Warning: Unused class rule: vector<Int_t> ; ```. I narrowed down the problem to the presence of:; ```; -cxxmodule -s /home/sftnight/build/manual/build/lib/libCore.so -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes ; ```; on the command line. And it can easily be reproduce with the files:; ```; // a.h; #include <vector>; ```; and; ```; // aLinkDef.h ; #pragma link C++ class vector<Int_t>+;; ```; and with; ```; /home/sftnight/build/manual/build/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx a.h aLinkDef.h; ```; we get a proper dictionary for the vector. While with; ```; /home/sftnight/build/manual/build/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/sftnight/build/manual/build/lib/libCore.so -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes a.h aLinkDef.h ; ```; we get an empty dictionary and the warning:. ```; Warning: Unused class rule: vector<Int_t> ; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11329:515,avoid,avoid,515,https://root.cern,https://github.com/root-project/root/issues/11329,1,['avoid'],['avoid']
Safety,"The IO of RooFit proxies can be quite fragile sometimes, and it can happen when reading a RooProduct that the `_proxyList` is not synced with the proxy members. In dbc96810, I decided to throw an exception is this case, but I realized this was too strong: too many old workspace are affected. In all cases that I know of, one can simply recover by correctly resetting the `_proxyList`. This is now what is done, and only a warning is printed. The warning includes information on all the proxies, so the user can figure out themselves if what RooFit is doing here is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12046:337,recover,recover,337,https://root.cern,https://github.com/root-project/root/pull/12046,1,['recover'],['recover']
Safety,"The PR looks good to me. ; I think is good to avoid including RooMath in headers of RooFitCore. Now RooMath is included in the BatchComputeLibrary that is not build as a standard ROOT Module, therefore RooMath definitions will not be in any module.; A long term solution would be eventually to include RooMath functions in the math/mathcore library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9214#issuecomment-958837648:46,avoid,avoid,46,https://root.cern,https://github.com/root-project/root/pull/9214#issuecomment-958837648,1,['avoid'],['avoid']
Safety,"The PR speeds up by factors (5x-7x) the simple reproducer of the issue we now have thanks to @sawenzel : ; ```.cpp; // Inspired by Alice production code, extracted from the surrounding context; #include ""TF1.h"". void Foo(int N) {; double am = 90;; double awidth = 1;; for (int i = 0; i < N; ++i) {; static TF1 rbw(""rbw"", ""pow([1],2)*pow([0],2)/(pow(x*x-[0]*[0],2)+pow(x*x*[1]/[0],2))"", -10, 10);; rbw.SetRange(am - 5 * awidth, am + 5 * awidth);; rbw.SetParameter(0, am);; rbw.SetParameter(1, awidth);; am = rbw.GetRandom();; if (am <-100000000) std::cout << am << std::endl; // to avoid compiler optimisations; }; }. int main(); {; Foo(1000);; return 0;; }; ```; The code is faster because the fast code path is taken in the PluginHandler because the right type is used in the GSLIntegratorPlugin (unsigned long, via the size_t typedef), and not just a compatible one (unsigned int).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15579#issuecomment-2161409421:581,avoid,avoid,581,https://root.cern,https://github.com/root-project/root/issues/15579#issuecomment-2161409421,2,['avoid'],['avoid']
Safety,"The RAII object in RDaos.cxx was constructed statically, which causes a DAOS-enabled RNTuple build to call `daos_init()` (or `daos_fini()` at exit) even if the only the file backend was used by user code. This commit turns the RAII object into a static variable in `RDaosPool::RDaosPool()` which is initialized during the first call to the; constructor. Note that static variable initialization is guaranteed to be thread-safe by ISO C++.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8093:422,safe,safe,422,https://root.cern,https://github.com/root-project/root/pull/8093,1,['safe'],['safe']
Safety,"The RNTuple binary format v1 states that feature flags bitmap is encoded as a sequence of 64-bit integers in which the MSb indicates that another 64-bit block follows. If more than one 64-bit integer is serialized, the MSb of all but the last integer should be `1` and the rest of the bits should preserve their original meaning.; Therefore, this PR avoids the use of two's complement in this case in favour of manually setting the MSb. According to my interpretation of the [RNTuple binary format v1](https://github.com/root-project/root/blob/master/tree/ntuple/v7/doc/specifications.md) specification, this is the only case in which this happens. All the other uses of two's complement are correct, e.g. in frames or locators we specify that negative sizes have a different/specific meaning. ## Changes or fixes:; - Fix feature flags bitmap serialization. ## Checklist:; - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9418:350,avoid,avoids,350,https://root.cern,https://github.com/root-project/root/pull/9418,1,['avoid'],['avoids']
Safety,The RNTuple datasource currently does not look at cluster boundaries when splitting the dataset into entry ranges that are fed to TBB tasks via RDF. A more sensible task splitting would avoid redundant decompression work.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10871:186,avoid,avoid,186,https://root.cern,https://github.com/root-project/root/issues/10871,2,"['avoid', 'redund']","['avoid', 'redundant']"
Safety,"The RResult class overwrites the `new` operator to prevent (make it harder for) heap creation of RResult objects. This does not work with PyROOT. E.g., PyROOT can't call `RFieldBase::Create()`. This patch removes the new operator overwrites. This should be a small safety compromise for PyROOT usability. Also: fixes namespace layering and moves RResultBase out of the Internal namespace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14463:265,safe,safety,265,https://root.cern,https://github.com/root-project/root/pull/14463,1,['safe'],['safety']
Safety,"The RooAbsPdf version number is incremented, going with the removal of; some unused data members:. * `_rawValue`; * `_traceCount`; * `_negCount`. Furthermore, the `_errorCount` member is now made transient, because it; is only related to logging, counting the logged errors to avoid printing; errors them repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11093:277,avoid,avoid,277,https://root.cern,https://github.com/root-project/root/pull/11093,1,['avoid'],['avoid']
Safety,"The RooFit test statistic classes give wrong results if they are; constructed from multiple comma-separated ranges. This can cause errors,; such as the one reported in Jira issue [ROOT-10038](https://sft.its.cern.ch/jira/browse/ROOT-10038). This commit suggests to throw an exception if multiple comma-separated; ranges are detected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7827:324,detect,detected,324,https://root.cern,https://github.com/root-project/root/pull/7827,1,['detect'],['detected']
Safety,"The RooPoisson is implemented with TMath::Poisson, which is normalized; if x covers the full definition range of the Poisson distribution, which; is zero to infinity. By correctly reporting this self-normalization in; that case, the creation of a dummy integral object that returns one is; avoided. The reduced overhead results in a significant speedup of; HistFactory fits with gamma constraints between 10 and 15 % in the hf001; tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:; ```; ----------------------------------------------------------------------------------------------; Benchmark Time CPU Iterations; ----------------------------------------------------------------------------------------------; hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391; hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762; hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156; hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423; ```. and after this PR:; ```; ----------------------------------------------------------------------------------------------; Benchmark Time CPU Iterations; ----------------------------------------------------------------------------------------------; hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744; hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786; hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835; hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10836:290,avoid,avoided,290,https://root.cern,https://github.com/root-project/root/pull/10836,1,['avoid'],['avoided']
Safety,The Sema::LookupConstructor is not iteration safe.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7298:45,safe,safe,45,https://root.cern,https://github.com/root-project/root/pull/7298,1,['safe'],['safe']
Safety,"The TIsAProxy does late initialization and caching, both of which; need to be done in a thread-safe manner.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/49:95,safe,safe,95,https://root.cern,https://github.com/root-project/root/pull/49,1,['safe'],['safe']
Safety,"The TPython library has one big caveat: it requires linking against `libpython`, which is not allowed in some context like the Python package manager. To avoid this problem that is blocking `pip install root`, this commit suggests to make TPython optional at build time. This makes also sense considering how TPython and PyROOT are used: if you intend to use ROOT via PyROOT from pip install ROOT, you probably won't need the functionality to run Python code from C++ that TPython provides. Possibly supersedes #15891, @vepadulano.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16337:154,avoid,avoid,154,https://root.cern,https://github.com/root-project/root/pull/16337,1,['avoid'],['avoid']
Safety,"The TTree::kEntriesReshuffled bit signals that a TTree is the output; of the processing of another TTree, and its entries are reshuffled; w.r.t. to the original TTree. As a safety measure, a TTree with this; bit set cannot add friends nor can be added as a friend. MT Snapshot, in RDataFrame, sets kEntriesReshuffled for the output tree to true. This fixes ROOT-9556.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5182:173,safe,safety,173,https://root.cern,https://github.com/root-project/root/pull/5182,1,['safe'],['safety']
Safety,"The Windows ""failure"" seems spurious:; ```; 18:21:16 Build failed because:; [Pipeline] echo; 18:21:16 hudson.AbortException: script returned exit code -1; ```; even though all tests have passed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12045#issuecomment-1396537983:109,Abort,AbortException,109,https://root.cern,https://github.com/root-project/root/pull/12045#issuecomment-1396537983,1,['Abort'],['AbortException']
Safety,"The [mac13 llvm assert](https://github.com/root-project/root/actions/runs/4628401453/jobs/8187431201?pr=12629#step:3:8563) (module source Loc overflow?) is a real issue that we probably need to address before merging. ```; Assertion failed: ((Val & ~(~0U >> (32-NumBits))) == 0 && ""High bits set!""), function Emit, file BitstreamWriter.h, line 205.; Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):; 0 rootcling_stage1 0x00000001052ba9c4 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 56; 1 rootcling_stage1 0x00000001052b96f0 llvm::sys::RunSignalHandlers() + 64; 2 rootcling_stage1 0x00000001052bb094 SignalHandler(int) + 344; 3 libsystem_platform.dylib 0x000000018a46ea84 _sigtramp + 56; 4 libsystem_pthread.dylib 0x000000018a43fc28 pthread_kill + 288; 5 libsystem_c.dylib 0x000000018a34dae8 abort + 180; 6 libsystem_c.dylib 0x000000018a34ce44 err + 0; 7 rootcling_stage1 0x00000001054ee31c clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, clang::Module*) (.cold.1) + 0; 8 rootcling_stage1 0x0000000102bdbcd4 llvm::BitstreamWriter::Emit(unsigned int, unsigned int) + 228; 9 rootcling_stage1 0x0000000102bf3ee4 void llvm::BitstreamWriter::EmitRecordWithAbbrevImpl<unsigned long long>(unsigned int, llvm::ArrayRef<unsigned long long>, llvm::StringRef, llvm::Optional<unsigned int>) + 676; 10 rootcling_stage1 0x0000000102bd0fb4 clang::ASTRecordWriter::Emit(unsigned int, unsigned int) + 228; 11 rootcling_stage1 0x0000000102c1be0c clang::ASTWriter::WriteDecl(clang::ASTContext&, clang::Decl*) + 416; 12 rootcling_stage1 0x0000000102bdeb38 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, clang::Module*) + 11872; 13 rootcling_stage1 0x0000000102bdbb3c clang::ASTWriter::WriteAST(clang",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12629#issuecomment-1499102403:897,abort,abort,897,https://root.cern,https://github.com/root-project/root/pull/12629#issuecomment-1499102403,1,['abort'],['abort']
Safety,"The `IOTests` test has run on my machine for 10000 times without crashing, so this may be safe to remove now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1426:90,safe,safe,90,https://root.cern,https://github.com/root-project/root/pull/1426,1,['safe'],['safe']
Safety,"The `Py_GetProgramName` function in the Python C API was deprecated in Python 3.13 and will be removed in Python 3.15. However, it seems behavior is unchanged by just passing an empty string instead. This avoids a warning when building CPyCppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16785:205,avoid,avoids,205,https://root.cern,https://github.com/root-project/root/pull/16785,1,['avoid'],['avoids']
Safety,"The `RooAbsData::createHistogram` has two overloads, one taking RooFit; command arguments and one taking integers for bin numbers (the version; with command arguments is much more common in RooFit code). They behave inconsistently when using default parameters, e.g. these two; calls result in different binnings:; ```C++; // 1. overload with int bin numbers:; data->createHistogram(obs->GetName());. // 2. overload with command arguments:; data->createHistogram(data->GetName(), dataObs);; ```. The function with integer bin numbers defaults to computing a binning; automatically from the distribution in the dataset. The function with; command arguments defaults to the binning stored in the variable, which; is much more suitable for RooFit. To avoid confusion in the future, this commit marks the overload with; the `int` parameters as deprecated so it is removed in ROOT 6.30. Closes https://github.com/root-project/root/issues/10401.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10411:748,avoid,avoid,748,https://root.cern,https://github.com/root-project/root/pull/10411,1,['avoid'],['avoid']
Safety,"The `RooAbsMinimizerFcn` and `RooMinimizerFcn` classes are; implementation details of the `RooMinimizer`. In one of the recent RooFit meetings, it was decided together with users; that this should be no problem, and doing so will greatly increase the; developers flexibility in updating the RooMinimizer implementation. This removal is mentioned in the v628 release notes. Furthermore, this PR suggests to make `RooMinimizer::applyCovarianceMatrix` a public function, and extends `RooAbsMinimizerFcn` by a `fit` function to avoid downcasting in the RooMinimizer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9874:524,avoid,avoid,524,https://root.cern,https://github.com/root-project/root/pull/9874,1,['avoid'],['avoid']
Safety,"The `RooAbsPdf::_normSet` member should be not used, because it can; happen in many situations that the RooArgSet it points to gets out of; scope and then you get a crash. There were several cases reported on the; forum where this happened with a RooAddPdf recently, becaues with ROOT; 6.26 some logic of the RooAddPdf got changed to better deal with empty; normalization sets. This commit avoids using `_normSet` by overriding `getValV` in RooAddPdf; directly, instead of `evaluate()`. This way, it has access to the actual; normalization set that is passed to the call to `getVal()`. For the batch mode, we now pass `nullptr` to; `RooAddPdf::getNormAndCache()` instead of `_normSet`. In this case it; falls back to using `_copyOfLastNormSet`, which is guaranteed to still; be valid because it's a unique_ptr owned by the RooAddPdf itself. Needs to be backported to ROOT 6.26.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10550:390,avoid,avoids,390,https://root.cern,https://github.com/root-project/root/pull/10550,1,['avoid'],['avoids']
Safety,"The `RooAbsReal::getValues` has already been established as the entry; point for evaluating RooFit objects with the batch mode and it should; not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar; mode all the time, because the `evaluateSpan` funtions it used got; replaced by `computeBatch`. In this commit, the desired behavior of; using the BatchMode is restored by using the RooFitDriver. To that end, a; new constructor has been added to the RooFitDriver that takes a; `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because; it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9986:859,avoid,avoid,859,https://root.cern,https://github.com/root-project/root/pull/9986,1,['avoid'],['avoid']
Safety,The `RooCFunction*Binding` classes and the associated `RooFit::bindFunction()` and `RooFit::bindPdf()` functions are deprecated and will be removed in ROOT 6.32. Their functionality is redundant with the `RooFormulaVar` and `RooGenericPdf` that should be used instead. This is another deprecation done in the spirit of avoiding duplicate interfaces and user confusion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11983:185,redund,redundant,185,https://root.cern,https://github.com/root-project/root/pull/11983,2,"['avoid', 'redund']","['avoiding', 'redundant']"
Safety,"The `RooFitResult::isIdentical` method so far only compared parameter; values and covariance matrix values. Even though comparing the final; parameter errors would be redundant with the covariance matrix checks,; it's still important to check parameter errors for two reasons:. 1. Initial parameter errors need to be compared, because the the; initial error determins the initial step size which influences the; minimization path. If initial errors are different, the final; parameter values are almost never identical. Catching differences in initial parameter errors informs the user; that differences in fit result are because of the starting; conditions. 2. In the case of `RooFitResult::isIdenticalNoCov`, we need to check; the error of final parameters because there is no comparison of; covariance matrix values. The signature of the public function `isIdenticalNoCov` is extended by a; tolerance parameter for the error comparison. This is expected to not; break user code, because the function was only introduced in 6.26 and is; so far only used in a single unit test (`testSumW2Error`). The `testRooAbsPdf` unit test didn't reset the initial parameter errors; correctly, which is now fixed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10465:167,redund,redundant,167,https://root.cern,https://github.com/root-project/root/pull/10465,1,['redund'],['redundant']
Safety,"The `RooMomentMorphND` and `RooMomentMorphFuncND` classes duplicated some copy-pasted code from stackoverflow. This is not factored out into a new private header file to avoid code duplication. Also, a semicolon is added after `TRACE_CREATE` and `TRACE_DESTROY` in order to not confuse clang-format.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11962:170,avoid,avoid,170,https://root.cern,https://github.com/root-project/root/pull/11962,1,['avoid'],['avoid']
Safety,"The `RooVectorDataStore` had two different buffers to store the row data in: the so-called ""attached buffers"" and the ""native buffers"". The problem is that when external buffers are attached, the call to `RooVectorDataStore::get()` is not loading the native buffers anymore, which is breaking some code that assumes this, like `RooVectorDataStore::loadValues`, which is used in `RooDataSet::reduce`. This breaks the reduction of datasets with externally attached buffers, which breaks the copy constructor of the `RooNLLVar`. This commit suggests to always load both the native and attached buffers if `RooVectorDataStore::get()` is called. This has almost no performance overhead and is much safeter. Since this change fixes the copy constructor of the `RooNLLVar`, which is used when plotting the NLL, this commit fixes this JIRA ticket: https://sft.its.cern.ch/jira/browse/ROOT-9752. A unit test that covers the problem reported in the JIRA ticket is also added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11477:693,safe,safeter,693,https://root.cern,https://github.com/root-project/root/pull/11477,1,['safe'],['safeter']
Safety,"The `bool` columns in RDF are special, because the Take action returns a `std::vector<bool>`, which has an implementation-depended memory layout for space optimization. Therefore, I suggest supporting taking `bool` columns as `unsigned char` with `Take()`, such that in `RDataFrameAsNumpy` the values can be directly taken as bytes. This avoids superfluous copying in the code, and keeps the special logic in the pythonization side minimal. Closes #8639.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15180:338,avoid,avoids,338,https://root.cern,https://github.com/root-project/root/pull/15180,1,['avoid'],['avoids']
Safety,"The `gMainDict` should be borrowed, i.e. we are not calling Py_INCREF(gMainDict). Like this, we avoid unexpectedly affecting how long `__main__` is kept alive. The `gMainDict` is only used in `Exec()`, `ExecScript()`, and `Eval()`, which should not be called after `__main__` is garbage collected anyway. Closes #16402. Needs to be backported to 6.32. Equivalent CPyCppyy PR:; https://github.com/wlav/CPyCppyy/pull/37",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16403:96,avoid,avoid,96,https://root.cern,https://github.com/root-project/root/pull/16403,1,['avoid'],['avoid']
Safety,"The `if (_normSet)` did not behave as intended, because the `RooAbsPdf::_normSet` member is a TString, and not a `char*`. And TStrings always convert to `true` booleans, even if they are empty. This commit fixes the empty normalization range check by using `TString::IsNull()` instead. This fix helps to benchmark RooAddPdfs with the new `codegen` backend, because it avoids the creation of unnecessary normalization integrals that codegen can't handle. This is a follow-up to 74e3099.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13518:368,avoid,avoids,368,https://root.cern,https://github.com/root-project/root/pull/13518,1,['avoid'],['avoids']
Safety,"The `if(roofit_multiprocess AND NOT minuit2)` check should be done after `ROOT_APPLY_OPTIONS()`, because otherwise the variables will not be defined as the defaults if the user didn't define them explicitly. This avoids warnings when not defining the `minuit2` option when setting `roofit_multiprocess=ON`. Follows up directly on 3acc0e601bd. To be backported to the 6.30 branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13879:213,avoid,avoids,213,https://root.cern,https://github.com/root-project/root/pull/13879,1,['avoid'],['avoids']
Safety,"The `max template recursion depth reached` error is due to the; implementation of std::tuple's move constructor in some STL; implementations (notably, gcc). The logic has been modified to avoid copying large tuples:; - the number of slots is now fixed for each node at construction time; - all the logic that was implemented by the `CreateSlot` methods has; been moved to the corresponding nodes' constructors.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/740:188,avoid,avoid,188,https://root.cern,https://github.com/root-project/root/pull/740,1,['avoid'],['avoid']
Safety,"The `max template recursion depth reached` error is due to the; implementation of std::tuple's move constructor in some STL; implementations (notably, gcc). The logic has been modified to avoid copying large tuples:; - the number of slots is now fixed for each node at construction time; - all the logic that was implemented by the `CreateSlot` methods has; been moved to the corresponding nodes' constructors. Cherry-pick conflicts:; 	tree/treeplayer/inc/ROOT/TDFNodes.hxx; 	tree/treeplayer/src/TDFNodes.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/743:188,avoid,avoid,188,https://root.cern,https://github.com/root-project/root/pull/743,1,['avoid'],['avoid']
Safety,"The `n_in_range` reference value in the unit test; `roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range` apparently doesn't get computed right on some 32 platforms. I can't reproduce the problem, but I'm sure it will be fixed by avoiding the use of the operators `&` and `|` with numpy arrays. Just doing a manual loop in Python should be more platform independent. Closes #12162.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13612:241,avoid,avoiding,241,https://root.cern,https://github.com/root-project/root/pull/13612,1,['avoid'],['avoiding']
Safety,"The `target` attribute in a rule specification is mandatory, but the list can be empty, in which case `TSchemaRule::GetTarget()` returns `nullptr`. In particular, @Nowakus reported the following error for read rules associated with class `ElementLinkBase`, which happens to have an empty `target` list; ```; Fatal: rule->GetTarget() != nullptr violated at line 1006 of; `/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/tree/ntuple/v7/src/RField.cxx'; aborting; ```; Therefore, in principle we should also allow these rules for now. ## Checklist:; - [X] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12049:488,abort,aborting,488,https://root.cern,https://github.com/root-project/root/pull/12049,1,['abort'],['aborting']
Safety,"The analytical integral code of the `RooTruthModel` was making the wrong assumption that if one uses the single-sided bases, the minimum x value is always at zero (or the maximum value at zero, for the case of the flipped bases). This resulted in wrong integral values when integrating over a subrange, as reported here on the forum:. https://root-forum.cern.ch/t/possible-bug-in-integration-of-roobdecay-and-rooabsanaconvpdf/56968. This commit rewrites the RooTruthModel analytical integral code to also consider these cases. To avoid that with the additional code branches the code becomes too verbose, the code was refactored to use a helper function for evaluating indefinite integrals of symmetric or asymmetric basis functions. The refactored code is tested by the integration tests in `stressRooFit`, and the problem that was reported on the forum is covered by a new unit test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14021:530,avoid,avoid,530,https://root.cern,https://github.com/root-project/root/pull/14021,1,['avoid'],['avoid']
Safety,"The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework.; Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:; ```; OVERVIEW: rootcling; USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>; ; OPTIONS:; ; Generic Options:; ; -help - Display available options (-help-hidden for more); -help-list - Display list of available options (-help-list-hidden for more); -version - Display the version of this program; ; rootcling common options:; ; -D=<string> - Specify defined macros.; -I=<string> - Specify an include path.; -W=<string> - Specify compiler diagnostics options.; -c - Deprecated, legacy flag which is ignored.; -cxxmodule - Generate a C++ module.; -excludePath=<string> - Do not store the <path> in the dictionary.; -f - Overwrite <file>s.; -failOnWarnings - Fail if there are warnings.; -inlineInputHeader - Does not generate #include <header> but expands the header content.; -interpreteronly - Generate minimal dictionary for interactivity (without IO information).; -m=<string> - The list of dependent modules of the dictionary.; -multiDict - If this library has multiple separate LinkDef files.; -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH.; -p - Deprecated, legacy flag which is ignored.; -rmf=<string> - Generate a rootmap file with the specified name.; -rml=<string> - Generate rootmap file.; -s=<string> - The path to the library of the built dictionary.; -selSyntaxOnly - Check the selection syntax only.; -split - Sp",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4171:408,safe,safety,408,https://root.cern,https://github.com/root-project/root/pull/4171,1,['safe'],['safety']
Safety,"The automatic conversion of ordinary obejcts to smart pointers is disabled for PyROOT because it can cause trouble with overload resolution. If a function has overloads for both ordinary objects and smart pointers, then the implicit conversion to smart pointers can result in the smart pointer overload being hit, even though there would be an overload for the regular object. Since PyROOT didn't have this feature before 6.32 anyway, disabling it was the safest option. Closes #15117. A regression test with the reproducer from the GitHub issue was added to roottest:; https://github.com/root-project/roottest/pull/1102",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15125:456,safe,safest,456,https://root.cern,https://github.com/root-project/root/pull/15125,1,['safe'],['safest']
Safety,"The automatic conversion of ordinary obejcts to smart pointers is disabled for PyROOT because it can cause trouble with overload resolution. If a function has overloads for both ordinary objects and smart pointers, then the implicit conversion to smart pointers can result in the smart pointer overload being hit, even though there would be an overload for the regular object. Since PyROOT didn't have this feature before 6.32 anyway, disabling it was the safest option. Closes #15117. Backport of https://github.com/root-project/root/pull/15125.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15311:456,safe,safest,456,https://root.cern,https://github.com/root-project/root/pull/15311,1,['safe'],['safest']
Safety,"The bt from gdb when loading this dictionary in other application (ThePEG); ```; (gdb) bt; #0 __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:49; #1 0x00007ffff73588a4 in __GI_abort () at abort.c:79; #2 0x00007ffff73b2177 in __libc_message (action=action@entry=do_abort, fmt=fmt@entry=0x7ffff74c43a7 ""%s\n"") at ../sysdeps/posix/libc_fatal.c:155; #3 0x00007ffff73b9e6c in malloc_printerr (str=str@entry=0x7ffff74c2654 ""malloc(): corrupted top size"") at malloc.c:5389; #4 0x00007ffff73bd884 in _int_malloc (av=av@entry=0x7ffff74f6a00 <main_arena>, bytes=bytes@entry=48) at malloc.c:4135; #5 0x00007ffff73be8f4 in __GI___libc_malloc (bytes=48) at malloc.c:3078; #6 0x00007ffff7708959 in operator new (sz=sz@entry=48) at ../../../../libstdc++-v3/libsupc++/new_op.cc:50; #7 0x00007ffff368ded2 in TClassTable::FindElementImpl (cname=cname@entry=0x7ffff3e851be ""HepMC3::GenParticleData"", insert=insert@entry=true) at /usr/src/debug/root-6.22.08-1.fc33.x86_64/core/cont/src/TClassTable.cxx:525; #8 0x00007ffff368e591 in TClassTable::Add (cname=0x7ffff3e851be ""HepMC3::GenParticleData"", id=<optimized out>, info=..., dict=0x7ffff3e81a40 <ROOT::HepMC3cLcLGenParticleData_Dictionary()>, pragmabits=4); at /usr/src/debug/root-6.22.08-1.fc33.x86_64/core/cont/src/TClassTable.cxx:352; #9 0x00007ffff36fd338 in ROOT::TGenericClassInfo::TGenericClassInfo (this=this@entry=0x7ffff3e8c340 <ROOT::GenerateInitInstanceLocal(HepMC3::GenParticleData const*)::instance>, fullClassname=fullClassname@entry=0x7ffff3e851be ""HepMC3::GenParticleData"", ; declFileName=declFileName@entry=0x7ffff3e851a0 ""HepMC3/Data/GenParticleData.h"", declFileLine=declFileLine@entry=24, info=..., action=<optimized out>, dictionary=0x7ffff3e81a40 <ROOT::HepMC3cLcLGenParticleData_Dictionary()>, isa=0xe09a50, pragmabits=4, ; sizof=56) at /usr/src/debug/root-6.22.08-1.fc33.x86_64/core/meta/src/TGenericClassInfo.cxx:102; #10 0x00007ffff3e819a9 in ROOT::GenerateInitInstanceLocal () at /usr/src/debug/HepMC3-3.2.3-1.fc33.x86_64/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7781#issuecomment-812846680:207,abort,abort,207,https://root.cern,https://github.com/root-project/root/issues/7781#issuecomment-812846680,1,['abort'],['abort']
Safety,"The change is not a debug printout, it inserts a new line in the SVG file before the `<\text>` tag. This avoids the syntax error the user sees when inserting a very long text.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14590#issuecomment-1928978464:105,avoid,avoids,105,https://root.cern,https://github.com/root-project/root/pull/14590#issuecomment-1928978464,1,['avoid'],['avoids']
Safety,The change is on the cmake hotspot used by virtually everybody. The risk to make an error here is high due to the complexity of the routine. Taking such risk weeks before the release should be very well weighted with the actual gain. It seems to me that the gain is not big enough to justify taking this direction for the release branch.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4763#issuecomment-574165892:68,risk,risk,68,https://root.cern,https://github.com/root-project/root/pull/4763#issuecomment-574165892,2,['risk'],['risk']
Safety,"The changes in this PR address this forum post...; https://root-forum.cern.ch/t/chi2fito-with-yvar-does-not-support-range-option/56369; ...and follows up on the discussion here:; https://github.com/root-project/root/pull/13638. Short summaries of the commits, more detail in the commit descriptions:; 1. Following up on #1455, the multi-range chi2 creation logic is removed from `createChi2()`, because for a few months already this can be dealt with in the test statistics base classes; 2. Avoid separate RooXYChi2Var constructors for pdfs and functions: instead of having separate constructors for RooAbsPdf and RooAbsReal, it's better and less code duplication to have one RooAbsReal constructor and dynamically check if it got a RooAbsPdf; 3. Support `NumCPU()` and `Range()` in createChi2() for RooDataSets; 4. Bugfix in `RooDataSet::reduce()` by also copying the stored errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13651:491,Avoid,Avoid,491,https://root.cern,https://github.com/root-project/root/pull/13651,1,['Avoid'],['Avoid']
Safety,"The code in TTree is known to not be ""exception safe"" (it was written before exceptions were usable in practice), so it should never throw any exception . But also it should not interfere and should not change the return value of GetEntry. If I understood correctly and just catching the exception is changing the return value, could you confirm that it does so ""also"" in C++?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9154#issuecomment-951163261:48,safe,safe,48,https://root.cern,https://github.com/root-project/root/issues/9154#issuecomment-951163261,1,['safe'],['safe']
Safety,"The command executed by root is:; ```; gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf; ```; I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```; root [5] c1->Print(""Test.pdf"",""EmbedFonts"");; Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created; GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected!; Since the release of version 9.11 of Ghostscript we recommend you do not set; -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'.; Treating this as a missing 'endobj', output may be incorrect.; **** Error: Encountered 'obj' while expecting 'endobj'.; Treating this as a missing 'endobj', output may be incorrect.; GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected!; Since the release of version 9.11 of Ghostscript we recommend you do not set; -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13560#issuecomment-1697296935:577,detect,detected,577,https://root.cern,https://github.com/root-project/root/issues/13560#issuecomment-1697296935,2,['detect'],['detected']
Safety,"The commit 4c9c5d6b49 fixed the memory leaking of the `RooMomentMorph(Func)ND::Grid2::_grid` member by deleting it in the constructor, but it didn't consider that the copy constructor didn't make a clone of the `_grid`, ending up with double ownership. Now, the copy constructor is also cloning the binnings, just like the regular constructor, and the double ownership is avoided. Closes #12155.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12160:372,avoid,avoided,372,https://root.cern,https://github.com/root-project/root/pull/12160,1,['avoid'],['avoided']
Safety,The commit implements a few new unit tests and also fixes one bug related to the normalization of a RooAddPdf when the custom normalization set of its components is reset. There is also some code improvement by removing a redundant data member of the `RooAddPdf` and `RooAddModel` classes. More details in the commit descriptions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11485:222,redund,redundant,222,https://root.cern,https://github.com/root-project/root/pull/11485,1,['redund'],['redundant']
Safety,"The current API forces the user to copy the entire fColumnRanges map and do a map lookup if they want to iterate the column ranges. With this change, one can simply access the underlying map directly, avoiding extra work in most cases. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16022:201,avoid,avoiding,201,https://root.cern,https://github.com/root-project/root/pull/16022,1,['avoid'],['avoiding']
Safety,"The current code goes through different codepaths depending on the platform. One of the codepaths relies on a non-standard extension (variable-length arrays) and the other manually allocates and frees a char array.; Using a std::string, while losing a bit of performance on Linux/Mac, simplifies and unifies the codepaths and avoids using non-standard C++ (which in turns enable building with -Werror).; The perf hit is most likely negligible, especially given the use of dynamic_cast in the same block.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16476:326,avoid,avoids,326,https://root.cern,https://github.com/root-project/root/pull/16476,1,['avoid'],['avoids']
Safety,"The current valgrind report hints at the jit relocation:; ```; bash-4.2$ ROOT_INCLUDE_PATH=/scratch/cmsbuild/vvasilev/rootobj/include/ valgrind root.exe -l -b -q tutorials/hsimple.C ; ==92602== Memcheck, a memory error detector; ==92602== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==92602== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info; ==92602== Command: root.exe -l -b -q tutorials/hsimple.C; ==92602== ; Disabling gnu++: clang has no __float128 support on this target!; ==92602== Source and destination overlap in memcpy(0x1fff0021f8, 0x1fff0021f8, 12); ==92602== at 0x408BCF4: memcpy (in /cvmfs/cms.cern.ch/slc7_ppc64le_gcc820/external/valgrind/3.15.0/lib/valgrind/vgpreload_memcheck-ppc64le-linux.so); ==92602== by 0x1129C867: void llvm::SmallVectorTemplateBase<char, true>::uninitialized_copy<char const, char>(char const*, char const*, char*, std::enable_if<std::is_same<std::remove_const<char const>::type, char>::value, void>::type*) (SmallVector.h:294); ==92602== by 0x1128FF7B: void llvm::SmallVectorImpl<char>::append<char const*, void>(char const*, char const*) (SmallVector.h:392); ==92602== by 0x115F49F3: void llvm::SmallString<256u>::append<char const*>(char const*, char const*) (SmallString.h:75); ==92602== by 0x115F21BB: llvm::SmallString<256u>::operator+=(llvm::StringRef) (SmallString.h:285); ==92602== by 0x1168DAFF: llvm::SmallString<256u>::operator=(llvm::StringRef) (SmallString.h:281); ==92602== by 0x1773BE63: llvm::vfs::RedirectingFileSystemParser::parseEntry(llvm::yaml::Node*, llvm::vfs::RedirectingFileSystem*, bool) (VirtualFileSystem.cpp:1311); ==92602== by 0x1773D81B: llvm::vfs::RedirectingFileSystemParser::parse(llvm::yaml::Node*, llvm::vfs::RedirectingFileSystem*) (VirtualFileSystem.cpp:1501); ==92602== by 0x1772AF77: llvm::vfs::RedirectingFileSystem::create(std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer> >, void (*)(llvm::SMDiagnostic const&, void*), llvm::StringRef, void*, llvm::In",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9297#issuecomment-979895686:219,detect,detector,219,https://root.cern,https://github.com/root-project/root/issues/9297#issuecomment-979895686,1,['detect'],['detector']
Safety,"The custom memory manager is only needed to avoid freeing the memory segments; the default `InProcessMemoryManager` (which is mostly copied) already does slab allocation to keep all segments together which is; needed for exception handling support. A limitation of this rudimentary support is that `CLING_DEBUG` and `CLING_PROFILE` do not work, they need to be registered as plugins.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11997:44,avoid,avoid,44,https://root.cern,https://github.com/root-project/root/pull/11997,1,['avoid'],['avoid']
Safety,The difference is only that the return type is casted to the actual; `RooArgSet` type. We avoid a few static casts all over the place like; this. A second commit in this PR applies some general improvements in memory management.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16100:90,avoid,avoid,90,https://root.cern,https://github.com/root-project/root/pull/16100,1,['avoid'],['avoid']
Safety,"The different overloads of `RooAbsRealLValue::inRange()` implemented; different tolerances when checking if a value `x` falls inside a; specific range. Some overloads checked if the interval; `[x - 1e-6, x + 1e6]` is overlapping with the range, an other overload; checked if the interval `[x - 1e-8*x, x + 1e8*x]` is overlapping. It's better is this is done consistently and predictably so this commit; suggests to leave out these epsilon margins that were never documented.; For backwards compatibility, one can set a custom relative or absolute; epsilon via the `RooNumber` interface. Also, the checks if the range limits are `RooNumber::isInfinite()` were; removed. They were mathematically redundant, since in RooFit, +/-; infinity is simply defined as +/-1e30. This PR fixes some corner cases in which you get paradox results from rage checks, like in this example:; ```C++; RooRealVar x{""x"", ""x"", 1e-6, 2e-6};; RooRealVar y{""y"", ""y"", 1e30, 1e30};. std::cout << x.inRange(0.0, nullptr) << std::endl;; std::cout << y.inRange(0.0, nullptr) << std::endl;; // both checks will return true without this PR!; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11999:375,predict,predictably,375,https://root.cern,https://github.com/root-project/root/pull/11999,2,"['predict', 'redund']","['predictably', 'redundant']"
Safety,The errors are unrelated.; ROOT-fedora31/noimt: ` error: failed to write new configuration file /build/workspace/root-pullrequests-build/root/.git/config.lock`. ROOT-performance-centos8-multicore/default:; df105_WBosonAnalysis_py: timeout; roottest_root_multicore_tExecutor: odd crash. ROOT-ubuntu16/nortcxxmod: IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7018#issuecomment-759120884:231,timeout,timeout,231,https://root.cern,https://github.com/root-project/root/pull/7018#issuecomment-759120884,1,['timeout'],['timeout']
Safety,"The example for range-based iteration in `TList.cxx` uses a pattern that; can yield compiler warnings for some GCC versions:. ```; warning: loop variable 'obj' is always a copy because the range of type 'TList' does not return a reference [-Wrange-loop-analysis]; ```. To avoid spreading this pattern, this commit suggests to change the; example to explicitly use the `TObject *` type, which also makes the; example clearer. One of the occurrences of this pattern in RooFit is also changed to `TObject *` to avoid a warning in the Ubuntu 18 nightlies:; https://lcgapp-services.cern.ch/root-jenkins/job/root-incremental-master/LABEL=ROOT-ubuntu1804-clangHEAD,SPEC=noimt/11389/parsed_console/log_content.html#WARNING1. A memory leak in the `HeatmapAnalyzer.cxx` is also fixed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12442:272,avoid,avoid,272,https://root.cern,https://github.com/root-project/root/pull/12442,2,['avoid'],['avoid']
Safety,The external llvm should be built exactly in the same way as internal llvm to avoid troubles and waste time of the experts who do not really care. I'd prefer to conservatively require it and relax the requirement when there is a valid use case for having ROOT working with llvm with exported symbols... This diagnostic is a practical request by 2 expert users of external_llvm (which probably makes it around 99% of the users of that feature) :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4736#issuecomment-572065154:78,avoid,avoid,78,https://root.cern,https://github.com/root-project/root/pull/4736#issuecomment-572065154,1,['avoid'],['avoid']
Safety,"The failing test seems to trigger some llvm bug:; ```; valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C; ==22765== Memcheck, a memory error detector; ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info; ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C; ==22765== . Processing assertSparseSelection.C...; ==22765== Conditional jump or move depends on unin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11252#issuecomment-1250106081:954,detect,detector,954,https://root.cern,https://github.com/root-project/root/pull/11252#issuecomment-1250106081,1,['detect'],['detector']
Safety,"The failure is some timeout issue, unrelated to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7628#issuecomment-804055888:20,timeout,timeout,20,https://root.cern,https://github.com/root-project/root/pull/7628#issuecomment-804055888,1,['timeout'],['timeout']
Safety,The failures on Ubuntu 24 are very similar to those that led to https://github.com/root-project/root/pull/15415 . My first instinct is that the new global `gConvFactories` is not thread-safe and we are hitting this problem in distrdf as usual,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15788#issuecomment-2158533120:186,safe,safe,186,https://root.cern,https://github.com/root-project/root/pull/15788#issuecomment-2158533120,1,['safe'],['safe']
Safety,The fit tutorials errors is; ```; Processing /build/jenkins/workspace/root-pullrequests-build/root/tutorials/fitsio/FITS_tutorial8.C...; Warning in <TFITSHDU::LoadHDU>: error opening FITS file. Details: could not open the named file; libc++abi.dylib: terminating with uncaught exception of type int; CMake Error at /build/jenkins/workspace/root-pullrequests-build/build/RootTestDriver.cmake:238 (message):; error code: Child aborted; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5099#issuecomment-597148699:425,abort,aborted,425,https://root.cern,https://github.com/root-project/root/pull/5099#issuecomment-597148699,1,['abort'],['aborted']
Safety,"The fix works in my standalone ROOT test. To test the integration with DD4hep and the LHCb detector, the simplest is to add it to the SFT nightlies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11272#issuecomment-1232170822:91,detect,detector,91,https://root.cern,https://github.com/root-project/root/issues/11272#issuecomment-1232170822,1,['detect'],['detector']
Safety,"The function `RooAbsPdf::expectedEvents(const RooArgSet &)` doesn't have; to be reimplemented in the RooAbsPdf child classes, because it should; always redirect to `RooAbsPdf::expectedEvents(const RooArgSet *)`. In this way, we are also avoiding a virtual function call. The second PR is this commit does some modernization of `RooAddPdf::expectedEvents`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8151:237,avoid,avoiding,237,https://root.cern,https://github.com/root-project/root/pull/8151,1,['avoid'],['avoiding']
Safety,"The git log might be a little confusing (why fix a rule that is unused anyway?) -- Maybe you meant ""Fix class name spelling in class rule [that was detected by a message indicating that the misspelt version was unused]""?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5871#issuecomment-644148818:148,detect,detected,148,https://root.cern,https://github.com/root-project/root/pull/5871#issuecomment-644148818,1,['detect'],['detected']
Safety,The gtest can safely go on in case this test case fails.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2230:14,safe,safely,14,https://root.cern,https://github.com/root-project/root/pull/2230,1,['safe'],['safely']
Safety,"The idea is to catch branch names, which will lead to problems when using the tree with `Draw` or `MakeClass`.; This can either be the member variables (branch names and `b_`branch names) which have to keep the generated code compilable (and ensure it does what it is expected to do). And the variable names should not lead to confusion with formula evaluation in Draw (e.g. branch names which are pure numbers). The tests suggested here are:; - test if branch name is a valid c++ variable name (w/o testing keywords).; - test if branch name begins with ""b_"" (potential problem with MakeClass). on top of that, I also have a [black list](https://github.com/pseyfert/tmva-branch-adder/blob/master/src/blacklist.cpp) of unfortunate branch names: methods of TTrees, which would clash in MakeClass, c++ keywords, variable types, and things TTree::Draw can parse (though I don't see how `TTree::Draw(""cos(x)"")` would clash with `TTree::Draw(""cos"")` if there is a variable named `cos`. Because the function `cos` wouldn't work without argument, and the variable `cos` wouldn't work with argument). I only warn here and don't abort the branch initialisation, not to break third party code (variables with `.` are probably common [e.g. dynamically generated from float](http://lhcb-release-area.web.cern.ch/LHCb-release-area/DOC/davinci/latest_doxygen/d9/d80/_tuple_tool_cone_isolation_8cpp_source.html#l00204) ). Feedback request:; I'm unsure if putting the blacklist into TBranch.cxx is really the best solution to apply here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/185:1119,abort,abort,1119,https://root.cern,https://github.com/root-project/root/pull/185,1,['abort'],['abort']
Safety,"The idea of the RooGenProdProj is that we divide two integral objects; each created with this makeIntgral() function to get the normalized; integral of a product. Therefore, we don't need to normalize the; numerater and denominator integrals themselves. Doing the normalization; would be expensive and it would cancel out anyway. However, if we don't; specify an explicit normalization integral in createIntegral(), the; last-used normalization set might be used to normalize the pdf,; resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed; to an empty set in this case. Note that in RooFit, a nullptr; normalization set and an empty normalization set is not equivalent. The; former implies taking the last-used normalization set, and the latter; means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit; test is implemented to make sure no new numeric integrals pop up in the; reproducer code to that issue. Unfortunately, this change means that there will be again warnings about; missing `RooAddPdf` normalization sets, but this is not a regression; because these warnings only got fixed in the 6.28 development cycle in; https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12010:499,redund,redundant,499,https://root.cern,https://github.com/root-project/root/pull/12010,1,['redund'],['redundant']
Safety,"The implementation of `TPython::Eval()` is fragile, and the funcitonality it provides is redundant. One can always communicate between Python and C++ using variables known to the ROOT interpreter. To make the output-variable-pattern easy to use in `TPython::Exec()`, a new output parameter of type `std::any` is introduced. Closes #12182.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16175:89,redund,redundant,89,https://root.cern,https://github.com/root-project/root/pull/16175,1,['redund'],['redundant']
Safety,The intent of this code seemed to be avoiding a CINT issue. Now cling can handle such constructs. This fixes an issue with runtime_cxxmodules on OSX sdk where even when NDEBUG is defined the assert still checks the identifier.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5336:37,avoid,avoiding,37,https://root.cern,https://github.com/root-project/root/pull/5336,1,['avoid'],['avoiding']
Safety,"The intent was to prevent the creation of sub branch with 2 consecutives dots; and to avoid a dot between the branch name of the collection and the underscore; for name of the index leaf. The major problem of the first try is that the name of the top level branch; was changed from ""t."" to ""t"" making existing code search for the branch by; fullname failing. Fix #7281. This effectively ammends/corrects d225f942b59b5b022cf635a16e90f84cad59819d. Before v6.23; ```; ******************************************************************************; *Tree :tree : treelibrated tree *; *Entries : 10000 : Total = 485042 bytes File Size = 177202 *; * : : Tree compression factor = 2.74 *; ******************************************************************************; *Br 0 :t. : Int_t t._ *; *Entries : 10000 : Total Size= 83464 bytes File Size = 12844 *; *Baskets : 4 : Basket Size= 32000 bytes Compression= 6.25 *; *............................................................................*; *Br 1 :t..fUniqueID : UInt_t fUniqueID[t._] *; *Entries : 10000 : Total Size= 80935 bytes File Size = 12857 *; *Baskets : 4 : Basket Size= 32000 bytes Compression= 6.25 *; *............................................................................*; *Br 2 :t..fBits : UInt_t fBits[t._] *; *Entries : 10000 : Total Size= 80903 bytes File Size = 12879 *; *Baskets : 4 : Basket Size= 32000 bytes Compression= 6.24 *; *............................................................................*; *Br 3 :t..e : Double_t e[t._] *; *Entries : 10000 : Total Size= 121029 bytes File Size = 65937 *; *Baskets : 6 : Basket Size= 32000 bytes Compression= 1.83 *; *............................................................................*; *Br 4 :t..t : Double_t t[t._] *; *Entries : 10000 : Total Size= 121029 bytes File Size = 71633 *; *Baskets : 6 : Basket Size= 32000 bytes Compression= 1.68 *; *............................................................................*; ```; After the first try:; ```; ***",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7843:86,avoid,avoid,86,https://root.cern,https://github.com/root-project/root/pull/7843,1,['avoid'],['avoid']
Safety,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:; 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible; 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" .; Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide ; a. The slot and the entry if needed; b. The steps needed for the implementation are already well understood; c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used; d. Would seamlessly work in PyROOT",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1133#issuecomment-334451301:502,detect,detect,502,https://root.cern,https://github.com/root-project/root/pull/1133#issuecomment-334451301,1,['detect'],['detect']
Safety,"The last commit that touched `roofit/histfactory/test/CMakeLists.txt` was accidentally removing the dependency on RooFitCommon, which needs to be there to avoid linker errors on Windows. Fixes these Windows build errors in the nightlies:; https://lcgapp-services.cern.ch/root-jenkins/job/root-incremental-master/LABEL=windows10,SPEC=default/10959/parsed_console/log_content.html#ERROR1",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11394:155,avoid,avoid,155,https://root.cern,https://github.com/root-project/root/pull/11394,1,['avoid'],['avoid']
Safety,The last two items on my to-do list have been addressed. Branch has been rebased on master to avoid failing on newly added tests.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/636#issuecomment-309491951:94,avoid,avoid,94,https://root.cern,https://github.com/root-project/root/pull/636#issuecomment-309491951,1,['avoid'],['avoid']
Safety,"The latest commit reintroduces the `Option_t*` parameter in `TChain::SetEntryList` and adds another possible value for it `""sync""`. With this new option, we can support the usecase described in this PR while still relying on the preexisting default behaviour. The option assumes that there is a 1:1 mapping between the trees in the chain and the sub lists in the entry list. This assumption is verified in two ways:; 1. The number of sub lists is equal to the number of trees in the chain. If not, the following error is thrown; ```; terminate called after throwing an instance of 'std::runtime_error'; what(): In 'TChain::SetEntryList': the number of sub entry lists in the input TEntryList (1) is not equal to the number of files in the chain (2); Aborted (core dumped); ```; 2. That each sub list corresponds to the correct treename, filename at the same index in the chain. If not, the following error is thrown:; ```; terminate called after throwing an instance of 'std::runtime_error'; what(): In 'TChain::SetEntryList': the sub entry list at index 1 doesn't correspond to treename 'entries' and filename 'file_20entries_1.root': it has treename 'entries' and filename 'file_20entries_2.root'; Aborted (core dumped); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8660#issuecomment-879923488:750,Abort,Aborted,750,https://root.cern,https://github.com/root-project/root/pull/8660#issuecomment-879923488,2,['Abort'],['Aborted']
Safety,The latest version of Apache Arrow requires C++17. This commit fixes the detection of Arrow and disable the arrow option if `CMAKE_CXX_STANDARD` is less than 17,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11681:73,detect,detection,73,https://root.cern,https://github.com/root-project/root/pull/11681,2,['detect'],['detection']
Safety,"The line. https://root.cern.ch/root/html606/TH1_8cxx_source.html#l00728. is thread ""safe"" because the container used is itself looking the access see:. https://github.com/root-project/root/blob/e0e721efc69b9b106a7b251caa94555ad195d945/core/base/src/TDirectory.cxx#L241. and because gDirectory is thread local. Of course, since TH1::AddDirectoryStatus() is global state, by definition the behavior can be affected by other threads. Humm actually, there *is* a problem. In order that code to really be thread safe `TH1::fgAddDirectory` needs to be an `std::atomic`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6493#issuecomment-700736790:84,safe,safe,84,https://root.cern,https://github.com/root-project/root/pull/6493#issuecomment-700736790,2,['safe'],['safe']
Safety,The link has the solution/work around doing:; ```; CTest starts the test processes via timeout -sSIGSEGV 55s {TEST_COMMAND}); ```; which may also actually work.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15144#issuecomment-2040360135:87,timeout,timeout,87,https://root.cern,https://github.com/root-project/root/issues/15144#issuecomment-2040360135,1,['timeout'],['timeout']
Safety,"The list of cleanups should be thread-safe now (and if it's not, we want to know!). I executed the test and the tutorial in a loop for a while (on a machine with 8 logical cores) and could not see any crash.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6885:38,safe,safe,38,https://root.cern,https://github.com/root-project/root/pull/6885,1,['safe'],['safe']
Safety,"The logic from RooAbsArg is copied into RooAbsData. This allows to use the hash-map functionality of RooLinkedList; for RooAbsData objects, as the namePtr mechanism allows to track; renaming and therefore avoids false negatives that result in; linear scans of the collection. In turn, this improves significantly the run-time of large workspace; imports (x2 to x4), which were dominated by embeddedData() calls.; This patch is based on the JSON tool use-case, but presumably will; significantly also improve other heavy uses of workspace import, such; as Higgs combination workspaces manipulation workflows. The cost of one additional pointer per RooAbsData object seems a low; price to pay.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9684:205,avoid,avoids,205,https://root.cern,https://github.com/root-project/root/pull/9684,1,['avoid'],['avoids']
Safety,"The longtime-deprecated `RooStats::HistFactory::EstimateSummary` class; is removed, including the functions that use it. The information that it; was meant to store is managed by the; `RooStats::HistFactory::Measurement` object since many years. As printed out by the HistFactory in a warning message for a long time; already, setting the `Const` attribute to the `<NormFactor>` tag is; deprecated and it will be ignored. Instead, add; `<ParamSetting Const=""True""> myparam </ParamSetting>`; to your top-level XML's `<Measurement>` entry.; ; This deprecation implied that the constant parameter flag in the; `RooStats:HistFactory::NormFactor` class had no effect as well. To avoid; ambiguity in the future, the possibility to set and retrieve this flag with; `NormFactor::SetConst()` and `NormFactor::GetConst()` was removed, and the; aforementioned deprecated warning is not printed anymore. Closes #8059. FYI @gartrog and @cburgard, if as ATLAS Higgs factory power users you have; something against this change please let me know!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10766:674,avoid,avoid,674,https://root.cern,https://github.com/root-project/root/pull/10766,1,['avoid'],['avoid']
Safety,"The macro should be already set via `${VecCore_DEFINITIONS}`, so setting it unconditionally is redundant and leads to many warnings. However, the build system is not quite ready for setting this only via; `${VecCore_DEFINITIONS}`, so we need to conditionally set it if dependencies are satisfied and it is not set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/677:95,redund,redundant,95,https://root.cern,https://github.com/root-project/root/pull/677,1,['redund'],['redundant']
Safety,"The model keeps track of field names to avoid creating the same top-level field multiple times. Fix this mechanism under exceptions, so that the used field name is not registered as taken.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14911:40,avoid,avoid,40,https://root.cern,https://github.com/root-project/root/pull/14911,1,['avoid'],['avoid']
Safety,"The new BatchMode was so far very hacky in the way it dealt with constraint terms, there were two places where it tried to consider them but they both failed in different scenarios:. * hack in `RooProdPdf::computeBatch()`, where PDFs with a span of size one in the datamap were ignored (failed if there was only one bin in the dataset because all PDFs were ignored then); * hack in `NormalizationHelpers`, where constrained RooProdPdfs were assumed to have only one factor that is a constraint. This was only the case in HistFactory and failed in other cases, like in `stressRooStats` and the `ATALS` Higgs combination fit. The new implementation in this PR follows a safer approach: when the constraints are obtained from the RooProdPdf via `getConstraints`, a new option is added to remove the obtained constraints from the RooProdPdf. This way, no other code is required downstream to deal with constraints. This means, to avoid mutating the computation graph, the constraint sum also needs to be extracted **after** the PDF is cloned. All changes in this PR follow from that line of thought and are explained more in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11606:668,safe,safer,668,https://root.cern,https://github.com/root-project/root/pull/11606,2,"['avoid', 'safe']","['avoid', 'safer']"
Safety,"The old PyROOT (pre 2019) had a slightly different `atexit` handler than the new one. The hard shutdown mode is different: `ClearProxiedObjects()` is called before the final `gROOT->EndOfProcessCleanups()`. I had the impresstion that this is redundant, and indeed the old PyROOT didn't do it. This commit suggests to only call `ClearProxiedObjects()` in soft shutdown mode, in an attempt to avoid the frequent crashes seen at the end of PyROOT tutorials, especially on Ubuntu 24.10. See also the original PRs where this functionality was introduced:. * https://github.com/root-project/root/pull/4687; * https://github.com/root-project/root/pull/4753",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16671:242,redund,redundant,242,https://root.cern,https://github.com/root-project/root/pull/16671,2,"['avoid', 'redund']","['avoid', 'redundant']"
Safety,"The old test statistic classes also supported enabling the offset; feature after their construction via the `RooAbsReal::enableOffsetting`; hook. This function is now also correctly overloaded in the; `RooNLLVarNew` for the BatchMode. Furthermore, the implementation of `RooAddition::enableOffsetting` is; now moved to the base class `RooAbsReal`. This implementation was only; recursively calling `enableOffsetting` for the servers, which did the; job for the old test statistics, which were only combined with; `RooAdditions`. The new BatchMode also adds the NLLs with RooAdditions,; but on top of them sits another wrapper class, the; `RooFitDriverWrapper`. It should also forward the `enableOffsetting`; calls correctly. The most general solution to this problem is probably; to forward the `enableOffsetting` call for all `RooAbsReal`-derived; classed, up to the point where the recursion ends either at an old or a; new test statistic object. This PR also includes two minor commits. One for avoiding some warnings in tests, and another one that cleans unused includes of `RooNLLVar.h`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11668:998,avoid,avoiding,998,https://root.cern,https://github.com/root-project/root/pull/11668,1,['avoid'],['avoiding']
Safety,The only failure is infrastructure related (github timeout). Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2281#issuecomment-402768878:51,timeout,timeout,51,https://root.cern,https://github.com/root-project/root/pull/2281#issuecomment-402768878,1,['timeout'],['timeout']
Safety,"The options `minuit2_omp` and `minuit2_mpi` are dangerous because it means you can only minimize thread-safe functions with Minuit2. If you want Minuit2 with OpenMP or MPI support, it is better to build Minuit2 standalone. Related to #12940.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12970:104,safe,safe,104,https://root.cern,https://github.com/root-project/root/pull/12970,1,['safe'],['safe']
Safety,"The original `HistoToWorkspaceFactory` produced models that consisted of; a Poisson term for each bin. In this ""number counting form"" the; dataset has one row and the collumns corresponded to the number of; events for each bin. This led to severe performance problems in; statistical tools that generated pseudo-experiments and evaluated; likelihood ratio test statistics. Nowadays, everyone uses the faster `HistoToWorkspaceFactoryFast`; implementation that produces a model in the ""standard form"" where the; dataset has one row for each event, and the column corresponds to the; value of the observable in the histogram. Therefore, the original `HistoToWorkspaceFactory` is now removed to; avoid confusion and maintainance burden.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10220:692,avoid,avoid,692,https://root.cern,https://github.com/root-project/root/pull/10220,1,['avoid'],['avoid']
Safety,"The patch which I suggested on https://sft.its.cern.ch/jira/browse/ROOT-8056.; If the user uses GREP_OPTIONS which add characters to the output of grep (colors, but also filenames or line numbers), root cannot be started anymore. Ideally users would prefer an alias for `grep` over `GREP_OPTIONS` but the crash can also be avoided on the root side.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/144:323,avoid,avoided,323,https://root.cern,https://github.com/root-project/root/pull/144,1,['avoid'],['avoided']
Safety,"The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation; detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to; wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also; changed such that it takes ownership of the integrator, avoiding the; need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13350:634,avoid,avoiding,634,https://root.cern,https://github.com/root-project/root/pull/13350,1,['avoid'],['avoiding']
Safety,"The preprocessor defines enabled by the `march=native` flag are made part of the string of options to be hashed to create the artifact tarball names, therewith avoiding incompatible binaries. Moreover, the special builds preserve their overrides also for nightly builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15839:160,avoid,avoiding,160,https://root.cern,https://github.com/root-project/root/pull/15839,1,['avoid'],['avoiding']
Safety,The problem is actually due to an instability of the detection of the `kIsOnHeap` bit where sometimes the stack has the bit pattern that is used to detect that the memory was allocated by `TObject::operator new`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12438#issuecomment-1457083430:53,detect,detection,53,https://root.cern,https://github.com/root-project/root/issues/12438#issuecomment-1457083430,2,['detect'],"['detect', 'detection']"
Safety,"The problem is that RDF tries to open the file to check that it's valid. The logic for the file opening is at https://github.com/root-project/root/blob/962009b8c2057199c2229c3ef9938ac4d315d10a/tree/dataframe/src/RLoopManager.cxx#L1133 . In particular, because of the presence of the `?` token, the string is parsed as a glob. Now in many cases that would be harmless albeit a tiny overhead (it would just return the same file name to open), but in this particular case it triggers a faulty behaviour. The glob parsing attempts at traversing the remote xrootd directory (see [here](https://github.com/root-project/root/blob/962009b8c2057199c2229c3ef9938ac4d315d10a/tree/tree/src/InternalTreeUtils.cxx#L471)), but since the permission is just for the single file with the token and not for the entire directory, it leads to the `user access restricted` error you post above. Now, I believe the most sane course of action would be to refine the logic that checks whether the input file name is a glob. I could simply add a check for the `xrd.wantprot` token, but probably we want to have a more authoritative list of all the tokens that should make the file name not be parsed as a glob. This probably includes not only xrootd tokens but also anything https-related. Or we could adopt a different strategy for glob detection altogether. Thoughts @dpiparo @pcanal ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16475#issuecomment-2365248206:1312,detect,detection,1312,https://root.cern,https://github.com/root-project/root/issues/16475#issuecomment-2365248206,1,['detect'],['detection']
Safety,"The problem is that both shapes are composite, and TGeoCompositeShape does not currently support generating mesh points on segments. If you were to replace the pvPipeBottom with a simple tube the overlap would probably be detected, but of course you cannot do that. So you are hitting the boolean-boolean combination which is worst supported unfortunately by the geometry checker and can miss overlaps.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6556#issuecomment-705445777:222,detect,detected,222,https://root.cern,https://github.com/root-project/root/issues/6556#issuecomment-705445777,1,['detect'],['detected']
Safety,"The pythonizations suggested in this issue have been implemented, so it can be closed. For any further specific RooFit pythonization ideas, please open a new issue or a PR directly. The Pythonization of RooArgLists that I suggested before is not so useful after all, because now that RooArgLists can be replaced by Python lists to begin with it would be redundant to reimplement the list behavior.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7217#issuecomment-1155603383:354,redund,redundant,354,https://root.cern,https://github.com/root-project/root/issues/7217#issuecomment-1155603383,1,['redund'],['redundant']
Safety,The question I have is whether the detection of the case where we need to use the fallback solution can be improve (comparing to std::cin address might not be sufficient (and might sometimes but a false positive).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/84#issuecomment-138597847:35,detect,detection,35,https://root.cern,https://github.com/root-project/root/pull/84#issuecomment-138597847,1,['detect'],['detection']
Safety,"The real case is a bit more convoluted than the example so, if this is a temporary workaround, we'd prefer to wait a little bit more to avoid heavily refactoring the code. ; Unless this is a ""won't fix"" :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7470#issuecomment-849410125:136,avoid,avoid,136,https://root.cern,https://github.com/root-project/root/issues/7470#issuecomment-849410125,1,['avoid'],['avoid']
Safety,"The reason for this split is that Development is not required, hence we; can't rely on it being found to set variables which are usually set even; if only Interpreter (and NOT Development) is found. The if(PythonX_Development_FOUND) condition is kept for what concern the; variables set and used only for the secondary Python version used to; biuld PyROOT, since Development is required for PyROOT. In the info messages related to PyROOT, the condition to be printed now; requires both PythonX_Interpreter_FOUND and PythonX_Development_FOUND,; in order to avoid them to be printed in case Development is found but not Interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5600:556,avoid,avoid,556,https://root.cern,https://github.com/root-project/root/pull/5600,1,['avoid'],['avoid']
Safety,"The remaining problem is that one has to link with `-lgcc` for gcc < 7 or 8. Is this ok, or should the cpu flag detection go into its own microlibrary?. ### Edit:; Looks like a toolchain bug for gcc 5. Easy workaround is to add `-lgcc_s -lgcc` to the link instructions, because the gcc folks didn't get the dependencies right. (It's automatically linking against those, anyway, but the `-lgcc` has to come last.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6321#issuecomment-688884250:112,detect,detection,112,https://root.cern,https://github.com/root-project/root/pull/6321#issuecomment-688884250,1,['detect'],['detection']
Safety,"The rf503_wspaceread tutorial mus be run after the rf502_wspacewrite; tutorial in the unit tests. This dependency was already defined for the; C++ tutorial tests. The lines added to `tutorials/CMakeLists.txt` in; this commit make the same definitions for the Python tutorials, and also; indicate that the Python tests rf502 and rf503 should be run after the; C++ tests to avoid a race condition on the output file. Failures caused by the dependencies not handled correctly were observed in the ROOT nightlies, and this commit should avoid them in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8491:372,avoid,avoid,372,https://root.cern,https://github.com/root-project/root/pull/8491,2,['avoid'],['avoid']
Safety,"The roottest-python-cmdLineUtils test sometimes fails with error along the line of:; ```; 16/22 Test #1217: roottest-python-cmdLineUtils-SimpleRootrm1CheckOutput .......***Failed 0.86 sec; -- TEST COMMAND --; cd /home/pcanal/root_working/build/master-debug/roottest/python/cmdLineUtils; /usr/bin/timeout -s USR2 270s /home/pcanal/root_working/build/master-debug/bin/rootls -1 victim1.root; -- BEGIN TEST OUTPUT --; dir; hprof; hprof; hpxpy; hpxpy; tof. -- END TEST OUTPUT --; -- BEGIN OUTDIFF OUTPUT --; --- /home/pcanal/root_working/code/root/roottest/python/cmdLineUtils/SimpleRootrm.ref Thu Dec 3 17:25:54 2020; +++ /home/pcanal/root_working/build/master-debug/roottest/python/cmdLineUtils/SimpleRootrm1CheckOutput.log Fri Jan 15 15:57:03 2021; @@ -1,4 +1,6 @@; dir; hprof; +hprof; +hpxpy; hpxpy; tof. -- END OUTDIFF OUTPUT --. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7054:296,timeout,timeout,296,https://root.cern,https://github.com/root-project/root/issues/7054,1,['timeout'],['timeout']
Safety,"The same is done already in `stressRooStats`. Instead of manually propagating the BatchMode flag to all calls of `createNLL()` and `fitTo()`, it is easier and safer to just override the default, because then it can't be forgotten to add it in one of the calls. In particular, this is done now because it will make it much easier the extend the possible `stressRooFit` options to also use the codegen plus AD backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12719:159,safe,safer,159,https://root.cern,https://github.com/root-project/root/pull/12719,1,['safe'],['safer']
Safety,The static vectors look like a thread safety issue in our tests.; std::array avoid memory allocation on every execution in the same way; the static vector does. NB: `#include <array>` is already present in the codegen from `MethodBase.cxx`. WIP: local building and testing,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3254:38,safe,safety,38,https://root.cern,https://github.com/root-project/root/pull/3254,2,"['avoid', 'safe']","['avoid', 'safety']"
Safety,"The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source; or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as; dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that; the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4355:635,avoid,avoid,635,https://root.cern,https://github.com/root-project/root/pull/4355,1,['avoid'],['avoid']
Safety,"The test failure is resolved by avoiding the `oss.str()` check https://github.com/root-project/root/pull/7879#discussion_r653468750, we will apply the same changes here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7749#issuecomment-866125500:32,avoid,avoiding,32,https://root.cern,https://github.com/root-project/root/pull/7749#issuecomment-866125500,1,['avoid'],['avoiding']
Safety,The test hit a timeout (***Timeout 3600.04 sec)... I hope it's not related to this patch.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1352#issuecomment-346394726:15,timeout,timeout,15,https://root.cern,https://github.com/root-project/root/pull/1352#issuecomment-346394726,2,"['Timeout', 'timeout']","['Timeout', 'timeout']"
Safety,"The test should be just removed since the initial reason for having that test is now void. The reason was to have *some way* to check that the packages we thought we had on our CI machines were actually there, since the Jenkins node didn't have any environment management. Now with the github actions CI our environment is more properly managed, at least for Linux. MacOS should get the same treatment at some point, but we can now more safely say ""we know which packages are installed on the CI"" than before.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15286:437,safe,safely,437,https://root.cern,https://github.com/root-project/root/pull/15286,1,['safe'],['safely']
Safety,"The tests that are added in this PR work with Cl, but there are still failures because of this:; * https://github.com/vgvassilev/clad/issues/890. It seems the numeric-diff fallback mode doesn't get that much test coverage in Clad, because many of the issues I opened there are related to it. Is it still supported? Should I try to absolutely avoid num diff fallback in the models?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15491#issuecomment-2107150086:342,avoid,avoid,342,https://root.cern,https://github.com/root-project/root/pull/15491#issuecomment-2107150086,1,['avoid'],['avoid']
Safety,"The tests that failed are all timed out as far as I can tell.; I think it's safe to merge (and if worse comes to worst, it's trivial to revert).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1654#issuecomment-367116753:76,safe,safe,76,https://root.cern,https://github.com/root-project/root/pull/1654#issuecomment-367116753,1,['safe'],['safe']
Safety,"The title mentions Spark, but I think it's more likely that the issue is independent of the backend, right? Can you point me to the code reponsible for detecting friendships and re-creating them in the workers? Maybe I can help",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7584#issuecomment-801976611:152,detect,detecting,152,https://root.cern,https://github.com/root-project/root/issues/7584#issuecomment-801976611,1,['detect'],['detecting']
Safety,"The tutorial is actually using the SPlots class wrong. It is calculating; sWeights for the isolation based on the invariant mass and the isolation; itself. That’s wrong. For sPlots, the control variable should not be in; the set of discriminating variables for the likelihood fit! See; https://arxiv.org/pdf/physics/0402083.pdf. That means when using the SPlot class, you should exclude the isolation; variable from the dataset that you pass. Big thanks to Dongliang for reporting this on the ROOT Forum!. https://root-forum.cern.ch/t/strange-results-in-rs301-splot-c. A second commit applies some other improvements to the tutorial:. * Code modernization. * Don't define number of events in toy data redundantly. * Add also plots of isolation models",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11475:701,redund,redundantly,701,https://root.cern,https://github.com/root-project/root/pull/11475,1,['redund'],['redundantly']
Safety,"The two classes inheriting from RooAbsCollection, namely RooArgList and; RooArgSet are by default non-owning collections. This means they should; not be initialized with temporary objects, otherwise they contain; invalid pointers right after construction. To avoid that this can ever happen, the universal reference mechanism is; used to statically check for temporaries, such that your code doesn't; even compile if you try to construct a RooArgList or RooArgSet from; temporaries. This fixes https://github.com/root-project/root/issues/8052. Some C++ code to validate that the `static_assert` works:; ```C++; #include ""RooRealVar.h""; #include ""RooArgList.h""; #include ""RooArgSet.h""; #include ""RooUniform.h"". void test() {. RooRealVar x(""x"", ""x"", 0, 0, 10);; RooRealVar y(""y"", ""y"", 0, 0, 10);. RooUniform u1(""u1"", ""u1"", x);; RooUniform u2(""u2"", ""u2"", y);. // this should work; RooArgSet (u1, u2);; RooArgList(u1, u2);. // all of these combinations should cause compiler errors; ///RooArgSet (RooUniform(""u1"", ""u1"", x), u2 );; //RooArgSet (u1, RooUniform(""u2"", ""u2"", y));; //RooArgSet (RooUniform(""u1"", ""u1"", x), RooUniform(""u2"", ""u2"", y));; //RooArgList(RooUniform(""u1"", ""u1"", x), u2 );; //RooArgList(u1, RooUniform(""u2"", ""u2"", y));; //RooArgList(RooUniform(""u1"", ""u1"", x), RooUniform(""u2"", ""u2"", y));. }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8065:259,avoid,avoid,259,https://root.cern,https://github.com/root-project/root/pull/8065,1,['avoid'],['avoid']
Safety,"The unused parameter warnings would be fixed with this PR: https://github.com/zeromq/libzmq/pull/4211. The dtor-name warnings are fixed in a later ZeroMQ version. I first want to include the RooFitZMQ and MultiProcess things before I start changing the ZeroMQ version, to avoid introducing potential errors already (didn't try it yet). If a newer version doesn't work, I will suppress the warnings for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8385#issuecomment-858556647:272,avoid,avoid,272,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-858556647,1,['avoid'],['avoid']
Safety,"The use case is that in ATLAS experiment we use JSROOT for display of detector monitoring plots, which include things like efficiency plots that exist as TProfile or TProfile2D. It would be nice to have a way in JSROOT to view the denominator distribution for such a plot, which is obtained from the ProjectionX or ProjectionXY method with the ""B"" option. . I think this is about visualization in JSROOT. If we had a C++ or python prompt we know what we need to do to view the projection. I just want to have a way to do that just with a JSROOT draw option",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15851#issuecomment-2173165268:70,detect,detector,70,https://root.cern,https://github.com/root-project/root/issues/15851#issuecomment-2173165268,1,['detect'],['detector']
Safety,"The user could modify the content of the original TFile, which holds a portion of the data in the TTree, i.e. https://gist.github.com/vepadulano/ed0644351771d97ff2624f0ddf015b83. I get the output; ```; Fill: Switching to new file: tree_setmaxsize_seq_1.root; Fill: Switching to new file: tree_setmaxsize_seq_2.root; Entries in tree: Error in <TFile::ReadBuffer>: error reading all requested bytes from file tree_setmaxsize_seq_2.root, got 270 of 300; Error in <TFile::Init>: tree_setmaxsize_seq_2.root failed to read the file type data.; 15966; ```. Maybe it's just something that we leave to the thoughtful user to avoid?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6528#issuecomment-702258885:616,avoid,avoid,616,https://root.cern,https://github.com/root-project/root/pull/6528#issuecomment-702258885,1,['avoid'],['avoid']
Safety,"The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:; ```; $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'; $: grep openat log.txt | wc -l; $: 16279; ```. After:; ```; $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'; $: grep openat log.txt | wc -l; $: 417 ; ```. FYI @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14276:576,avoid,avoided,576,https://root.cern,https://github.com/root-project/root/pull/14276,1,['avoid'],['avoided']
Safety,"The version if the tree is saved to a file works as expected.; ```C++; #include ""TTree.h""; #include ""TRandom.h"". TFile *f = nullptr;; TTree *t = nullptr;. void tree(const char *fname = ""file.root""); {; const Int_t kMax = 10;; Int_t n;; Float_t a[kMax];. SafeDelete(t); SafeDelete(f);; if (fname) f = new TFile(fname, ""recreate"");; // else in memory; t = new TTree(""t"", ""tree"");; t->Branch(""n"", &n, ""n/I"");; t->Branch(""a"", a, ""a[n]/F"");. for (Int_t i = 0; i < 5; i++) {; n = gRandom->Rndm()*(kMax-1);; for (Int_t j = 0; j < n; j++); a[j] = gRandom->Gaus(0, 1);; t->Fill();; }; if (f) {; t->Write();; SafeDelete(t); SafeDelete(f);; f = new TFile(fname);; t = (TTree*)f->Get(""t"");; }; // t->Draw(""a[0]"");; }; ```; ```; $ root; root [0] .L tree.C; root [1] tree(); t->Draw(""a[0]"");; Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1; root [2] tree(); t->Draw(""a[0]"");; root [3] tree(); t->Draw(""a[0]"");; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16730#issuecomment-2432808458:254,Safe,SafeDelete,254,https://root.cern,https://github.com/root-project/root/issues/16730#issuecomment-2432808458,4,['Safe'],['SafeDelete']
Safety,"The warnings were raised by TThreadExecutor trying to be smart when chunking, overriding user specified number of chunks to avoid accessing uninitialized positions of the results vector. This is annoying f.e. when Fitting, with several calls to Map() with the same ""conflictive when chunking"" data.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1028:124,avoid,avoid,124,https://root.cern,https://github.com/root-project/root/pull/1028,1,['avoid'],['avoid']
Safety,Then the executable does not work:; ```; % outputs/bin/zevis.exe ; dyld: Library not loaded: @rpath/libZevLib.dylib; Referenced from: /Users/couet/git/zevis-build/outputs/bin/zevis.exe; Reason: image not found; zsh: abort outputs/bin/zevis.exe; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6344#issuecomment-693379514:216,abort,abort,216,https://root.cern,https://github.com/root-project/root/issues/6344#issuecomment-693379514,1,['abort'],['abort']
Safety,"Theoretically, cppyy could detect if one of those macros is defined and complain it should be included first. This would be a better way we can ensure consistency. Sorry I came up with this on a second iteration...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5037#issuecomment-588347924:27,detect,detect,27,https://root.cern,https://github.com/root-project/root/pull/5037#issuecomment-588347924,1,['detect'],['detect']
Safety,"There are circular dependencies, which are detected on some build platforms",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3470:43,detect,detected,43,https://root.cern,https://github.com/root-project/root/pull/3470,1,['detect'],['detected']
Safety,"There are several methods in TSystem, which returns `char *` as return value, which has to be deleted. These are:; * `ExapndPathName()`; * `DirName()` (Windows only, actually a bug); * `Which()`; * `ConcatFileName()`. There are many places in ROOT which does not do it correctly, making memory leaks.; I tried to fixed all these bugs - still open PRs are #4853, #4854, #4861, #4862, #4863 . Idea to modernize TSystem interface, providing thread-safe alternatives to all mentioned methods.; Means return TString instead of `char *` or `const char *`.; Keep old methods for a while, but replace in ROOT code to new one.; Later old methods should be declared as deprecated. This PR introduces `TString TSystem::GetDirName(const char *)` as replacement of `const char * TSystem::DirName(const char *)`. Solving Windows issue, which has memory leak. Replaces all places where DirName used by GetDirName - in most cases TString used anyway as storage for return value. . Also using more C++11 in declaration of TSystem classes. If we agreed on this approach, next methods can be refactored in same way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4874:445,safe,safe,445,https://root.cern,https://github.com/root-project/root/pull/4874,1,['safe'],['safe']
Safety,There is 3 tasks still needed to complete this work:. * Migrate flushing from TObject::Write to *::Merger; * Investigate cost of false sharing of atomic in TIsAProxy.; * Resolve thread-unsafe updating of fMother (pre-existing).; * Document or change the atomic vs lock of TBufferMerge::GetBuffered. They will be address in subsequent PRs.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7286#issuecomment-789324747:185,unsafe,unsafe,185,https://root.cern,https://github.com/root-project/root/pull/7286#issuecomment-789324747,1,['unsafe'],['unsafe']
Safety,"There is a dependency problem between the RooFit packages that will; start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,; RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from; the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3; needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular; dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from; RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on; RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because; people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for; statisitcal procedures. Specifying model details in the; configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig; and the Asimov dataset generation. By moving the ModelConfig to; RooFit, we are also half way done avoiding the dependency of; HistFactory on RooStats. * The only thing that people use from RooStats is often only the; ModelConfig anyway, because it lets them specify analysis details in; the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12578:487,avoid,avoided,487,https://root.cern,https://github.com/root-project/root/pull/12578,3,['avoid'],"['avoided', 'avoiding']"
Safety,"There is an infinite loop in; `PyROOT::TMemoryRegulator::ClearProxiedObjects()`:. ```C++; while (!fObjectMap.empty()) {; auto elem = fObjectMap.begin();; auto cppobj = elem->first;; auto klassid = elem->second;; auto pyclass = CreateScopeProxy(klassid);; auto pyobj = (CPPInstance *)MemoryRegulator::RetrievePyObject(cppobj, pyclass);. if (pyobj && (pyobj->fFlags & CPPInstance::kIsOwner)) {; ...; } else {; // Non-owning proxy, just unregister to clean tables.; // The proxy deletion by Python will have no effect on C++, so all good; MemoryRegulator::UnregisterPyObject(pyobj, pyclass);; }; }; ```. In the second code branch, the object is not removed from the `fObjMap`,; if `UnregisterPyObject` doesn't call the unregister hook because it; quits early. This can happen if there is not C++ object corresponding to; the regulated python object, causing an infinite loop because; `fObjectMap` never gets empty. Although this seems like an obvious logic error, this was only noticed; after the cppyy upgrade. Probably the code path was not hit before. Addresses; https://github.com/root-project/root/issues/15085#issuecomment-2031363812. This PR also includes a second refactoring commit to reduce the amount of C++ code in PyROOT. **This could maybe also fix the problem with the distributed RDataFrame test timeouts!**",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15106:1309,timeout,timeouts,1309,https://root.cern,https://github.com/root-project/root/pull/15106,1,['timeout'],['timeouts']
Safety,There is code to explicitly detect and remove the allocator. Most likely `TClassEdit::IsDefAlloc` needs to be updated to take into account that the word `class` might be prefixed. Albeit it is odd/unexpected that Clang would put the class keyword there (it is supposed be configured not to).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6607#issuecomment-1155497705:28,detect,detect,28,https://root.cern,https://github.com/root-project/root/issues/6607#issuecomment-1155497705,1,['detect'],['detect']
Safety,"There is no issue of exception safety here, it's only a `new` that can work or not. > And move assignment and move construction of unique pointers should be equally cheap, right?. With compiler optimizations yes, but why create unnecessary work?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10263#issuecomment-1081665773:31,safe,safety,31,https://root.cern,https://github.com/root-project/root/pull/10263#issuecomment-1081665773,1,['safe'],['safety']
Safety,"There seems to be one option to avoid the double completion: One could remove the empty brackets for functions without arguments. That would mean that one always has to type the '()' to call a function, which also seems to be the behaviour of Jupyter for Python. Currently for ROOT notebooks the brackets would be added for functions without arguments, but are in any case already omitted for functions requiring arguments.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/559#issuecomment-303135855:32,avoid,avoid,32,https://root.cern,https://github.com/root-project/root/pull/559#issuecomment-303135855,1,['avoid'],['avoid']
Safety,"There used to be just one way of resolving an unknown name (eg. MyClass) -- by using the TCling::AutoLoad interface. However, there are two ingredients to resolve a name -- make the name known to the cling and make its library known to the JIT. Historically, these were one function. Later, we implemented performance optimization on top which divides the two steps in order to avoid excessive library loading. Now we have an auto parse step which is designed to avoid the heavy TCling::Autoload. The particular callback calls tryAutoParseInternal which is controlled by fIsAutoParsingSuspended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5756:378,avoid,avoid,378,https://root.cern,https://github.com/root-project/root/pull/5756,2,['avoid'],['avoid']
Safety,"There was a problem in the `IntegralEvaluator` class in the FitUtils.h; in case veccore and vc is used. To evaluate the integral, some input; doubles `x` need to be transferred each of them into a different; `ROOT::Double_v` to call the underlying function. However, the `ROOT::Double_v` can't load just a single double. Calling; the `Load()` function should be done with a pointer to a `double *`; arrary that is large enough to hold as many doubles as the; `ROOT::Double_v` for SIMD instructions. If you use pointers to single doubles anyway, then you get rightly and; out-of-bounds warning. This commits suggests to get gid of this problem by first transferring; the doubles to the beginning of temporary buffers of the right size, and; then passing these buffers to `vecCore::Load()`. Furthermore, I suggest to merge the two code paths of 1D and ND; functions into one. The difference was that the ND path allocated the; `Double_v`s on the heap in a STD vector, and the 1D path used just an; single `Double_v` on the stack, probably for performance reasons. This commit suggests to use the stack also for the ND code path using; stack arrays, so the 1D path would not be a special case anymore. Also, the `<Math/Util.h>` header can not be compiled with CUDA if `vc` is enabled, so there is a second commit in this PR to avoid that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13772:1324,avoid,avoid,1324,https://root.cern,https://github.com/root-project/root/pull/13772,1,['avoid'],['avoid']
Safety,"There was a segmentation fault in the RooFit batch mode with; multithreading that happened when there were too many threads for the; number of events to be calculated. This caused a `std::size_t` underflow in this line:; ```C++; // roofit/batchcompute/src/RooBatchCompute.cxx; batches.setNEvents(nEvents - idx * batches.getNEvents());; ```; And then the computation tried to access entries that were out of; bounds. This commit adds one more line to reset the number of threads to how; many are needed. Like this we avoid the underflow and also spawing; unnecessary threads. This PR also changes which stressRooFit tests are declared as longtest,; such that the BatchMode tests are also run in the CI and we can avoid; problems like this in the future. Before, the interpreted tests were not declared as longtests, and the; compiled versions were not. This is now flipped, such that the compiled; BatchMode CPU and CUDA tests are also run without `longtest`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10754:516,avoid,avoid,516,https://root.cern,https://github.com/root-project/root/pull/10754,2,['avoid'],['avoid']
Safety,"There was an evil hack in `RooAbsOptTestStatistic`:. ```c++; _dataClone->cacheArgs(this,_cachedNodes,_normSet,!_funcClone->getAttribute(""BinnedLikelihood"")) ;; ```. The final parameter determins if zero weights should be skipped when recalculating the caches. Indeed, for the NLL case, this corresponds to the BinnedLikelihood attrribute being present or not, but it broke the other test statistics for which zero weights should not be skipped at all. This commit suggests a safer way to manage this with a new `RooAbOptTestStatistic::_skipZeroWeights` flag. In particular, this change fixed a bug that got uncovered during a forum discussion:. https://root-forum.cern.ch/t/failing-chi2-fit/56309/3",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13639:475,safe,safer,475,https://root.cern,https://github.com/root-project/root/pull/13639,1,['safe'],['safer']
Safety,These PR fixes several issues in pymva: . - the scikit-learn methods require some update for new version of scikit-learn; - the disabling of eager execution for model prediction causes an issue on MacOS with the multi-processing. The tests are automatically restarted by the multi-processing. This is now avoided by not disabling eager-execution on MacOS platform. ; - Using .keras file is problematic for MacOS arm. (load_models does not work). Go back using .h5 files,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13634:167,predict,prediction,167,https://root.cern,https://github.com/root-project/root/pull/13634,2,"['avoid', 'predict']","['avoided', 'prediction']"
Safety,"These changes achieve two things:. 1. Performance improvement of CUDA backend by factor two by better organizing the copies from host to device; 2. Avoid the hardcoded maximum number of input variables for the compute function, which was a problem for RooAddPdfs with many components. More detail in the commit descriptions. Here are the reproduced CHEP 2023 plots with this PR:. ![benchRooFitBackends](https://github.com/root-project/root/assets/6578603/785828ac-5265-449a-833f-ff9ea018c649). ![benchRooFitUnbinned](https://github.com/root-project/root/assets/6578603/f79a8cc5-bb12-4efb-9917-790a06fe2f63). The older benchmark results can be found in this CHEP presentation:; https://indico.jlab.org/event/459/contributions/11570/attachments/9440/13688/roofit_heterogeneous_chep_2023_with_transitions.pdf",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13556:148,Avoid,Avoid,148,https://root.cern,https://github.com/root-project/root/pull/13556,1,['Avoid'],['Avoid']
Safety,These tutorials don't need to create an output root file of the traiining. This avoids potential problem of running the tutorials in parallel and writing on the same file,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14125:80,avoid,avoids,80,https://root.cern,https://github.com/root-project/root/pull/14125,1,['avoid'],['avoids']
Safety,"These two libraries do not need to be linked, they can be loaded at runtime when necessary. `ROOTVecOps` in particular forces `libPyROOT.so` to link against Vdt when that is enabled, which we would like to avoid. *Note:* `RVec` pythonization has been recently made lazy in 3017be2d80c160d8726c887fad2ede81c295c27a.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3225:206,avoid,avoid,206,https://root.cern,https://github.com/root-project/root/pull/3225,1,['avoid'],['avoid']
Safety,"These useful tests are relatively short (runtime 28 seconds in total) and test lower-level RooFit functionality. Moving them from roottest to roofit has the following benefits:. * Faster RooFit development experience: it's not necessary anymore to also add and compile all of `roottest`, if you want to make sure locally that the vectorized pdf tests always compile and pass. * The vectorized pdf tests will be able to consider the RooFit-internal preprocessor macros at build time, like `ROOFIT_CUDA` and `ROOFIT_LEGACY_EVAL_BACKEND`. Like this we can ensure that the tests will pass no matter how RooFit was configured at compile time. This is for me personally the strongest reason and was the motivator for this commit. * Avoid code repetition in `root` and `roottest`, because now the vectorized PDF tests will be able to re-use private code from RooFit. * If you want to build standalone RooFit with all tests, you won't have to stitch together the two repositories. Sister PR: https://github.com/root-project/roottest/pull/1199",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16661:726,Avoid,Avoid,726,https://root.cern,https://github.com/root-project/root/pull/16661,1,['Avoid'],['Avoid']
Safety,"They currently trigger segfaults in TClass*/cling of the like:. ```; RAssertion failed: ((*I)->isCompleted() && ""Nested transaction not completed!?""), function endTransaction, file IncrementalParser.cpp, line 511.; *** Break *** abort; Error in <TClingCallFunc::make_dtor_wrapper>: Failed to compile; ==== SOURCE BEGIN ====; __attribute__((used)) extern ""C"" void __dtor_32(void* obj, unsigned long nary, int withFree); {; if (withFree) {; if (!nary) {; delete (TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &>*) obj;; }; else {; delete[] (TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &>*) obj;; }; }; else {; typedef TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &> Nm;; if (!nary) {; ((Nm*)obj)->~Nm();; }; else {; do {; (((Nm*)obj)+(--nary))->~Nm();; } while (nary);; }; }; ```. ```; [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3926; [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] RecurseKeepNParams(clang::TemplateArgu",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13290:229,abort,abort,229,https://root.cern,https://github.com/root-project/root/pull/13290,1,['abort'],['abort']
Safety,"They do, but they are not at odd. libImt is presently the tool used via TROOT to get the status of the activation of ImplicitMT. That requires the load of libImt and the invocation of a function. This PR made of 1 commit simplifies the mechanism, avoiding to load libImt (and initialise the entire TROOT) in case only the activation status of ImplicitMT is required.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1127#issuecomment-334141079:247,avoid,avoiding,247,https://root.cern,https://github.com/root-project/root/pull/1127#issuecomment-334141079,1,['avoid'],['avoiding']
Safety,"This PR adds a dependency of the Keras tutorial on the PyTorch ones, to avoid a conflict in the same used input file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12367:72,avoid,avoid,72,https://root.cern,https://github.com/root-project/root/pull/12367,1,['avoid'],['avoid']
Safety,"This PR adds a new data source for `RDataFrame` that is able to provide data from SQlite `SELECT` queries. It will be useful for cvmfs, where we have file catalogs and monitoring information in sqlite files. For instance, one can do. auto rdf = ROOT::RDF::MakeSqliteDataFrame(""catalog.sqlite"", ""select * from catalog"");; auto h = rdf.Define(""lname"", ""name.length()"").Histo1D(""lname"");. to show the distribution of file name sizes. There are probably more use cases, for instance sqlite export of conditions data. This is work in progress, I'm posting it for early comments and feedback. My open points are. - Unit and integration tests are yet to be done; - The data source work single-threaded only at the moment. I initially thought it might be enough to return only a single row in `GetEntryRanges()` to make it thread-safe but that's apparently not enough. So I'm now thinking to wrap `SetEntry()` and `GetEntryRanges()` in a mutex.; - The code is not reusing `TSQLiteServer`. It felt like it requires stretching the `TSQLServer` interface in perhaps unwanted ways, for saving only a handful of direct sqlite API calls. On the other hand, with (probably quite a bit) more work it might be possible to have a more general data source that works on any SQL result set.; - Determining column types in SQlite is tricky as it is dynamically typed and in principle each row can have different column types. If a table column is queried as is, I can use the default/declared column type. For expressions, I'll use the type of the first row of the result set. Still it can result in a column to be of type `NULL` where subsequent rows actually have meaningful values. My guess is that the current heuristic is practical enough, and of course the user can formulate the `SELECT` query to avoid ambiguity.; - It would not be impossible to add support for remote reading of sqlite files. To do so, one can add a custom implementation of an sqlite virtual file system to have data pouring in directly from HTT",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2322:822,safe,safe,822,https://root.cern,https://github.com/root-project/root/pull/2322,1,['safe'],['safe']
Safety,"This PR adds vectorized implementations of several functions in TMath. It is a work in progress, just to receive early feedback. Currently, the following functions are vectorized and tested:. - TMath::Min; - TMath::Gaus; - TMath::BreitWigner; - TMath::CauchyDist; - TMath::LaplaceDist; - TMath::LaplaceDistI. TODO:; - [ ] Refactor the tests to avoid repeated code.; - [ ] Implement remaining functions.; - [ ] Discuss what to do with functions that, i.e., receive an Int_t and return a Double_t. When vectorizing this kind of patterns, one problem arises: the length of integers and double vectors cannot be assumed to be the same. Any comment is more than welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/655:344,avoid,avoid,344,https://root.cern,https://github.com/root-project/root/pull/655,1,['avoid'],['avoid']
Safety,"This PR applies several improvements to the RooAddPdf class:. 1. Avoid code duplication of `updateCoefficients()` with RooAddModel; 2. Reduce footprint of cache object by using `std::vector` and avoid creating dummy RooRealVars; 3. Avoid redundant computation of raw coefficient values in BatchMode, which fixes performance problems in important fits like the ATLAS Higgs combination. More details can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11161:65,Avoid,Avoid,65,https://root.cern,https://github.com/root-project/root/pull/11161,4,"['Avoid', 'avoid', 'redund']","['Avoid', 'avoid', 'redundant']"
Safety,This PR avoids all calls to `delete` in HistFactory.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11345:8,avoid,avoids,8,https://root.cern,https://github.com/root-project/root/pull/11345,1,['avoid'],['avoids']
Safety,This PR contains some follow-up changes to https://github.com/root-project/root/pull/8700 and https://github.com/root-project/root/pull/9078:. * avoid using `std::shared_ptr` for return values; * change copyright of roofitcore/TestStatistics to `(c) CERN` (requested by @Axel-Naumann in https://github.com/root-project/root/pull/8700#discussion_r738407080); * I used now the same copyright headers from https://github.com/root-project/root/pull/9078 also for the TestStatistics; * fix a build warning in non-debug mode; * don't install zmq.hpp header from builtins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9345:145,avoid,avoid,145,https://root.cern,https://github.com/root-project/root/pull/9345,1,['avoid'],['avoid']
Safety,"This PR extends the type templation that was already present in some classes in the GenVector library to improve support for using vectorised (Vc) types. Specifically it :-. 1. Extends the templation to the Plane3D, Transformation3D and Translation3D types.; 2. Where necessary provides specialised methods for the vector types, when the original code was not generic enough to work in both scalar and vector scenarios. Typically this happens in the case of conditionals, where the differences required (booleans versus masks) are difficult to avoid. This PR is not complete, in that there are still some classes in GenVector that still do not support Vc types, as they are still not templated, such as the Rotation like transformations. It would be nice to add this at some point, but the code associated to these is more extensive (3DConversions.cxx for instance) and that will require some work. My changes pass the built in ROOT tests. In addition I have prepared a simple test case for the Vc types (attached) that I have used to check the scalar and vector types give equivalent results. Tested on OS X with the compilation command. clang++ -O3 -mavx2 -mfma `root-config --cflags` -I/Users/chris/Projects/Vc/install/include main.cpp `root-config --libs` -lGenVector /Users/chris/Projects/Vc/install/lib/libVc.a. [main-cpp.txt](https://github.com/root-project/root/files/820450/main-cpp.txt)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/394:544,avoid,avoid,544,https://root.cern,https://github.com/root-project/root/pull/394,1,['avoid'],['avoid']
Safety,This PR fixes a problem found when building and using the R bindings on MacOS. - First we make sure that ROOT is not using the old RConfig.h but ROOT/RConfig.hxx; This avoids a conflict with the R file Rconfig.h; The first commit remove the usage of the old Rconfig.h when generating the dictionary for libCore . - The second commit fixes a conflicting definition of a macro between system macOS and R headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9836:168,avoid,avoids,168,https://root.cern,https://github.com/root-project/root/pull/9836,1,['avoid'],['avoids']
Safety,This PR fixes backports the fix to keep eager execution on macOS to avoid multi-processing issue that gives timeout of tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13807:68,avoid,avoid,68,https://root.cern,https://github.com/root-project/root/pull/13807,2,"['avoid', 'timeout']","['avoid', 'timeout']"
Safety,This PR fixes compiling the code for parsing Keras model when the C-API of Python 2 is used. In this case some functions are not available in Python.h. Those functions are used to parse the convolutional layers from Keras. ; This PR excludes the parsing of this layer and avoid calling those functions available only in Python3. ; Also the tests using the cone layer parsing are disabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11950:272,avoid,avoid,272,https://root.cern,https://github.com/root-project/root/pull/11950,1,['avoid'],['avoid']
Safety,"This PR fixes tons of memory leaks in RooFitHS3 by never using manual memory allocation in RooFitHS3. To facilitate this, an overload of `RooAbsArg::addOwnedComponents` was added that takes transfers the ownership via smart pointers (otherwise one would have to use raw owning pointers or `std::unique_ptr<T>::release()` which I want to avoid). If the CI passes, I'll squash the second and third commit and add commit messages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9690:337,avoid,avoid,337,https://root.cern,https://github.com/root-project/root/pull/9690,1,['avoid'],['avoid']
Safety,This PR fixes: ; - stressHistoFit - so not use colour (even black) to keep a nice output log; - TMVA Keras tutorial: use different output file to avoid sporadic failures; - mathmore (GSL) : add a check for correct GSL version (2.3) introducing the new function `gsl_linalg_cholesky_decomp1`. Use the older `gsl_linalg_cholesky_decomp` for the old versions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13047:146,avoid,avoid,146,https://root.cern,https://github.com/root-project/root/pull/13047,1,['avoid'],['avoid']
Safety,"This PR includes the commits of; * PR #833 ; * a fix (dependent on #833) for task-unsafety in TDataFrame's TColumnValue; * PR #828 ; * a patch for task-unsafety in TDataFrame's thread-slot distribution by @dpiparo (commit 2787af2). If we want to push these commits little by little, PR #833 and PR #828 should be merged first, then I can open a third PR with the second (and fourth?) fix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/835:82,unsafe,unsafety,82,https://root.cern,https://github.com/root-project/root/pull/835,2,['unsafe'],['unsafety']
Safety,"This PR introduces a great behaviour. We need to think about our tutorials and examples now, e.g. whether somewhere we assumed that by default no MT was enabled :); One big consequence is that users are forced to a paradigm shift: code written for example in Defines/Filters of RDF should be thread safe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2703#issuecomment-425070925:299,safe,safe,299,https://root.cern,https://github.com/root-project/root/pull/2703#issuecomment-425070925,1,['safe'],['safe']
Safety,"This PR introduces the logic necessary in TTreeReader to detect when an entry being read is ""incomplete"" for the following situations:; * When switching to a new tree in the chain, if a branch that was expected to be found is not available; * When doing event matching with TTreeIndex, in case one or more of the friend trees did not match the index value for the current entry. It also introduces new functionality in RDataFrame to allow users to act upon the situations described above:; * `DefaultValueFor(colname, defaultval)`: lets the user provide one default value for the current entry of the input column, in case the value is missing.; * `FilterAvailable(colname)`: works in the same way as the traditional `Filter` operation, where the ""expression"" is ""is the value available?"". If so, the entry is kept, if not, it is discarded.; * `FilterMissing(colname)`: works in the same way as the traditional `Filter` operation, where the ""expression"" is ""is the value missing?"". If so, the entry is kept, if not, it is discarded. The tutorials `df036_missingBranches` and `df037_TTreeEventMatching` show example usage of the new functionalities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15641:57,detect,detect,57,https://root.cern,https://github.com/root-project/root/pull/15641,1,['detect'],['detect']
Safety,"This PR is a backport of #9965 (see #9954) for 6.26. Optional, but it would be nice to avoid patching conda-forge root https://github.com/conda-forge/root-feedstock/issues/160.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9999:87,avoid,avoid,87,https://root.cern,https://github.com/root-project/root/pull/9999,1,['avoid'],['avoid']
Safety,"This PR is the second part of a split and clean-up of #8294, as suggested by @guitargeek. In this PR, we introduce ~three~ two packages: ~RooFit::MultiProcess,~ RooFitZMQ and a ZeroMQ builtin to ease dependency management. ~RooFit::MultiProcess is a task-based parallelization framework.~. ~It uses forked processes for parallelization, as opposed to threads. We chose this approach because A) the existing RooRealMPFE parallelization framework already made use of forks as well, so we had something to build on and B) it was at the time deemed infeasible to check the entire RooFit code for thread-safety. Moreover, we use MultiProcess to parallelize gradients -- i.e. the tasks to be executed in parallel are _partial derivatives_ -- and these are sufficiently large tasks that communication in between tasks is not a big concern in the big fits that we aimed to parallelize.~. Edit: We decided to keep this PR for ZeroMQ only, MultiProcess will come in a next PR. The communication between processes is done using ZeroMQ. The ZeroMQ dependency is wrapped in convenience classes contributed by @roelaaij which here are packaged as RooFitZMQ. ~Note: still working on ""cherry picking"" all changes and organizing them into functionally sensible commits. Will un-draft the PR once this is done.~ Ready for review.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8385:599,safe,safety,599,https://root.cern,https://github.com/root-project/root/pull/8385,1,['safe'],['safety']
Safety,"This PR is the third part of a split and clean-up of #8294, as suggested by @guitargeek. In this PR, we introduce the RooFit::MultiProcess package. RooFit::MultiProcess is a task-based parallelization framework that will be used to parallelize gradients in RooFit/Minuit2 fits. It uses forked processes for parallelization, as opposed to threads. We chose this approach because A) the existing RooRealMPFE parallelization framework already made use of forks as well, so we had something to build on and B) it was at the time deemed infeasible to check the entire RooFit code for thread-safety. Moreover, we use MultiProcess to parallelize gradients -- i.e. the tasks to be executed in parallel are partial derivatives -- and these are sufficiently large tasks that communication in between tasks is not a big concern in the big fits that we aimed to parallelize. The communication between processes is done using ZeroMQ, accessed through convenience functions in RooFitZMQ introduced in #8385. Notes:; - This PR branch is forked off of the branch in #8385, so until that is merged first, I may do some rebasing in this branch, so please be aware of that if you want to check this branch out locally.; - test_Job still fails, it has to be updated to the latest communication framework. With that in mind, this PR is ready for review.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8412:586,safe,safety,586,https://root.cern,https://github.com/root-project/root/pull/8412,1,['safe'],['safety']
Safety,"This PR moves the dictionaries for STL containers required for testing to a separate LinkDef. The rationale behind this is that these dictionaries are not directly related to the `CustomStruct` and once #13904 and #14069 are merged even more (unrelated) dictionary entries would be added, so it would be good to avoid clutter and separate these.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14072:312,avoid,avoid,312,https://root.cern,https://github.com/root-project/root/pull/14072,1,['avoid'],['avoid']
Safety,This PR provides some optimisation for Cuda. In particular: . - optimise update weights/gradient of SGD and ADAM/ ; - We avoid now creating temporary matrices in SGD ; - For ADAM it is more efficient defining three new updates functions which will blenched on the GPU. This also avoid creating temporaries . These changes speed-up by almost a factor of 2 the code in GPU for dense layer when using ADAM and restore the previous performances for SGD. - optimise also computation of convolutional weight gradients. ; In this case we can just simply use the ScaleAdd function. A speed up of ~ 20% is obtained . This PR also adds a commit that remove the computation of correlation matrix in case of large number of variables,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2502:121,avoid,avoid,121,https://root.cern,https://github.com/root-project/root/pull/2502,2,['avoid'],['avoid']
Safety,"This PR provides the support to add input features as vector data (arrays). This is useful in case of image data (.e.g for Convolutional networks). ; The PR avoid then the creation of input TTreeFormula objects for each single array element which can be very time consume in case of large input data (e,g, > 1000). ; A new function DataLoader::AddVariableArrays has been added to provide the input array name that corresponds to the TTree branch name. Note that TMVA was providing and it continues to provide support for input array data but assuming that each single array element is a different TMVA event. The array is split and for each TTree entry, n (the size of the array) events are created in TMVA. In this particular case one needs to provides all inputs (input features, labels and weights) as array of the same size. This PR mantains this use case, but adds now the possibility to represent the array elements as different columns in the event vector.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4407:157,avoid,avoid,157,https://root.cern,https://github.com/root-project/root/pull/4407,1,['avoid'],['avoid']
Safety,"This PR refactors (or rather, rewrites) `hadd`'s argument parsing code to achieve the following improvements:; - code is simpler to follow, more consistent among different flags and extracted from main; - adding new flags is easier; - allows the familiar syntax of `-j2` in addition to `-j 2`. As a bonus, and for consistency with `-cachesize=`, all flags can now also be passed as `-j=2` (except for `-f` which has a special logic).; - allows passing flags after the positional arguments; - hadd will abort when encountering invalid flag arguments, instead of just printing a message. In the name of code simplification, this PR doesn't attempt to replicate the same exact error-reporting behavior string-by-string as the current version, but the results should ideally be the same. I ran the roottest suite and all tests pass but we might want to add more tests to be sure. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16090:502,abort,abort,502,https://root.cern,https://github.com/root-project/root/pull/16090,1,['abort'],['abort']
Safety,"This PR shows the ingredients needed to provide a fix (or more like a workaround) to https://github.com/root-project/root/issues/8505. * A new function `TEntryList::AddSubList` which purpose is specifically of adding a sub list to the main TEntryList. With this we can avoid the logic of `TEntryList::Add` that merges multiple TEntryList referring to the same tree into a global list.; * A slight modification in `TChain::SetEntryList` to grab the sub-TEntryList with the same index as the current sub-tree in the chain. Currently, this is done instead with `GetEntryList(treename, filename, opt)` that will always report the same sub-TEntryList referring to the ""first"" file (because all files of the sublists of the global TEntryList have the same name). The changes are not definitive at all. I wanted to ask your opinion if it's a valid way forward. If so, I will polish the code and prepare it for a real PR. With this commit, the following snippet; ```cpp; int main(){; auto start_1{0};; auto start_2{0};; auto end_1{20};; auto end_2{10};. TEntryList elists;; TEntryList elist1{""e"",""e"",""entries"",""file_20entries_1.root""};; TEntryList elist2{""e"",""e"",""entries"",""file_20entries_1.root""};. for(auto entry = start_1; entry < end_1; entry++){; elist1.Enter(entry);; }. for(auto entry = start_2; entry < end_2; entry++){; elist2.Enter(entry);; }. elists.AddSubList(&elist1);; elists.AddSubList(&elist2);. TChain chain{""entries""};; chain.Add(""file_20entries_1.root"");; chain.Add(""file_20entries_1.root"");. chain.SetEntryList(&elists, ""sync"");. ROOT::RDataFrame df{chain};. std::cout << df.Count().GetValue() << ""\n"";; }; ```; Outputs the correct result:; ```; $: ./tentrylist_emptysource_addsublist ; 30; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8660:269,avoid,avoid,269,https://root.cern,https://github.com/root-project/root/pull/8660,1,['avoid'],['avoid']
Safety,"This PR solves ROOT-8873 ""Reinforce the mechanism to detect non existing branches"". All transformations and actions now throw an exception right when called if at least one of the columns they will work on is not present in the data nor is a custom column (created via `Define`). `test_missingBranches` is expected to start failing -- a PR in roottest will update the reference file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/775:53,detect,detect,53,https://root.cern,https://github.com/root-project/root/pull/775,1,['detect'],['detect']
Safety,This PR uses clad to calculate the AD-based derivatives for the C/C++ functions wrapped by the RooFuncWrapper class and introduces the 'getGradient' interface to get these derivatives from the generated gradient function. It also replaces a `std::span` templated type with `std::size` to avoid conflicts with system headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12219:288,avoid,avoid,288,https://root.cern,https://github.com/root-project/root/pull/12219,1,['avoid'],['avoid']
Safety,This Pull request fixes a memory leak reported in https://root-forum.cern.ch/t/gslmultifit-memory-leak-with-root-fitter/49566 when using GSLMultiFit. . In addition for fixing for the leak the handling of the internal transformation function is improved and an extra un-needed clone of the objective function in the Fitter class is avoided.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10439:331,avoid,avoided,331,https://root.cern,https://github.com/root-project/root/pull/10439,1,['avoid'],['avoided']
Safety,This Pull request fixes the correct dependency of some TMVA tutorial and PyMVA tests to avoid that the input data files are written at the same time. The PR contains also a fix for th TMVA_SOFIE_RSofieReader tutorial to handle correctly the model output vector,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12211:88,avoid,avoid,88,https://root.cern,https://github.com/root-project/root/pull/12211,1,['avoid'],['avoid']
Safety,"This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. ; Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. ; The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:; - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling.; - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called.; - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking.; - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10795:852,avoid,avoiding,852,https://root.cern,https://github.com/root-project/root/pull/10795,1,['avoid'],['avoiding']
Safety,This Pull request should fix the tutorial timeout observed in CI,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12038:42,timeout,timeout,42,https://root.cern,https://github.com/root-project/root/pull/12038,1,['timeout'],['timeout']
Safety,"This adds gdb pretty printers for a few objects such as TString and TNamed, as well; as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`; is set to ROOT's lib directory.; The printers should only be installed during debug builds. A couple of things are still unclear:; - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make.; - Is it correct to use `install(FILES ...)` to install?; - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail; o With old gdbs; o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3633:166,safe,safe-path,166,https://root.cern,https://github.com/root-project/root/pull/3633,1,['safe'],['safe-path']
Safety,This allows to avoid awkward errors due to the absence of moves.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2490:15,avoid,avoid,15,https://root.cern,https://github.com/root-project/root/pull/2490,1,['avoid'],['avoid']
Safety,"This almost broke me... I've been trying to find for days why ROOT would not build correctly in one particular (fairly complicated) setup for me. I just couldn't figure out why I wouldn't get the files meant for the `etc/` directory in my installation. Turns out that it was because in this weird setup I put the ROOT source code into a directory inside of another CMake project, into a directory that had `/CMakeFiles/` as part of its path. And would you know, macOS still comes with a case insensitive file system, so this exclusion rule was triggering for the full contents of the `etc/` directory in this setup. After realising this, I modified my project's setup to put the ROOT source code into a safer location. But this update should still help people avoid a similar situation later on... P.S. I checked in a simple standalone example that this formalism should do the right thing. (Took me some tries to find ""just the right"" incantation.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1625:703,safe,safer,703,https://root.cern,https://github.com/root-project/root/pull/1625,2,"['avoid', 'safe']","['avoid', 'safer']"
Safety,This avoid compiler warnings with GCC version 12 and later. See also the reasoning in upstream commit: https://github.com/nigels-com/glew/commit/37e614480216ff1485366d97794cd1354ac07337,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15528:5,avoid,avoid,5,https://root.cern,https://github.com/root-project/root/pull/15528,1,['avoid'],['avoid']
Safety,"This avoid loading the library containing the dictionary and avoids leaving the TClass::GetClass(""HepMC::GenVertex"") meta information in an odd state. This should bring the v6.18 behavior unintentionally broken in the refactoring commit c8cce31. This should fix ROOT-10514 completely.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4837:5,avoid,avoid,5,https://root.cern,https://github.com/root-project/root/pull/4837,2,['avoid'],"['avoid', 'avoids']"
Safety,"This avoids an error in the nightlies:; https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-debian10-i386,SPEC=default,V=master/lastBuild/testReport/projectroot/runtutorials/tutorial_v7_ntuple_ntpl008_import/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13447:5,avoid,avoids,5,https://root.cern,https://github.com/root-project/root/pull/13447,1,['avoid'],['avoids']
Safety,This avoids bloating the history with blank space commits.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3790:5,avoid,avoids,5,https://root.cern,https://github.com/root-project/root/pull/3790,1,['avoid'],['avoids']
Safety,"This avoids compiler warnings on 32bit platforms such as. ```; warning: format ‘%lu’ expects argument of type ‘long unsigned int’, but; argument 2 has type ‘std::vector<std::tuple<int, double, double> >::size_type’; {aka ‘unsigned int’} [-Wformat=]; ```. As seen in PR https://github.com/root-project/root/pull/13243",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13259:5,avoid,avoids,5,https://root.cern,https://github.com/root-project/root/pull/13259,1,['avoid'],['avoids']
Safety,This avoids problems during ctest like:; ```; 512/838 Test #516: tutorial-multicore-mp001_fillHistos .................................***Failed Error regular expression found in output. Regex=[Error in <] 2.61 sec; Processing /builddir/build/BUILD/root-6.14.06/tutorials/multicore/mp001_fillHistos.C...; SysError in <TFile::TFile>: could not delete myFile_3.root (errno: 2) (No such file or directory); Error in <TROOT::WriteTObject>: The current directory (Rint) is not associated with a file. The object (myHisto_3) has not been written.; (int) 0; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3029:5,avoid,avoids,5,https://root.cern,https://github.com/root-project/root/pull/3029,1,['avoid'],['avoids']
Safety,"This avoids that the first time the NLL is computed, a real calculation is performed and not a cached value is used. The cached value could be computed without subtracting the offset and this could be problematic in case the fcn is offsetting. This fixes #7659. Note that the real changes are only at around line 200, the rest are only extra whitespaces removed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7671:5,avoid,avoids,5,https://root.cern,https://github.com/root-project/root/pull/7671,1,['avoid'],['avoids']
Safety,"This avoids the following type of warning (obtained when compiling ROOT with -fsanitize=thread). ```; inlined from ‘virtual std::vector<ROOT::Experimental::RNTupleLocator> ROOT::Experimental::Internal::RPageSinkDaos::CommitSealedPageVImpl(std::__ROOT::span<ROOT::Experimental::Internal::RPageStorage::RSealedPageGroup>)’ at /rootproject/rootsrc/tree/ntuple/v7/src/RPageStorageDaos.cxx:417:28:; /usr/include/c++/13/bits/basic_string.h:1079:16: warning: ‘*(const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)((char*)&locator + offsetof(ROOT::Experimental::RNTupleLocator, ROOT::Experimental::RNTupleLocator::fPosition.std::variant<long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Variant_base<long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Move_assign_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Copy_assign_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Move_ctor_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Copy_ctor_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Variant_storage<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experiment",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15526:5,avoid,avoids,5,https://root.cern,https://github.com/root-project/root/pull/15526,1,['avoid'],['avoids']
Safety,"This avoids the following warning when building `rootbench` (gcc 13.2.1):. ```txt; In file included from /home/rembserj/spaces/master/root/src/build/include/ROOT/RDF/RInterface.hxx:15,; from /home/rembserj/spaces/master/root/src/build/include/ROOT/RDataFrame.hxx:21,; from /home/rembserj/spaces/master/root/src/root/rootbench/root/tree/dataframe/RDataFrameBenchmarks.cxx:1:; /home/rembserj/spaces/master/root/src/build/include/ROOT/RDF/ActionHelpers.hxx: In instantiation of ‘void ROOT::Internal::RDF::SnapshotHelperMT<ColTypes>::UpdateCArraysPtrs(unsigned int, ColTypes& ..., std::index_sequence<S ...>) [with long unsigned int ...S = {}; ColTypes = {}; std::index_sequence<S ...> = std::integer_sequence<long unsigned int>]’:; /home/rembserj/spaces/master/root/src/build/include/ROOT/RDF/ActionHelpers.hxx:1747:27: required from ‘void ROOT::Internal::RDF::SnapshotHelperMT<ColTypes>::Exec(unsigned int, ColTypes& ...) [with ColTypes = {}]’; /home/rembserj/spaces/master/root/src/build/include/ROOT/RDF/RAction.hxx:104:19: required from ‘void ROOT::Internal::RDF::RAction<Helper, PrevNode, ColumnTypes_t>::CallExec(unsigned int, Long64_t, ROOT::TypeTraits::TypeList<ColTypes ...>, std::index_sequence<_Ind ...>) [with ColTypes = {}; long unsigned int ...S = {}; Helper = ROOT::Internal::RDF::SnapshotHelperMT<>; PrevNode = ROOT::Detail::RDF::RLoopManager; ColumnTypes_t = ROOT::TypeTraits::TypeList<>; Long64_t = long long int; std::index_sequence<_Ind ...> = std::integer_sequence<long unsigned int>]’; /home/rembserj/spaces/master/root/src/build/include/ROOT/RDF/RAction.hxx:112:18: required from ‘void ROOT::Internal::RDF::RAction<Helper, PrevNode, ColumnTypes_t>::Run(unsigned int, Long64_t) [with Helper = ROOT::Internal::RDF::SnapshotHelperMT<>; PrevNode = ROOT::Detail::RDF::RLoopManager; ColumnTypes_t = ROOT::TypeTraits::TypeList<>; Long64_t = long long int]’; /home/rembserj/spaces/master/root/src/build/include/ROOT/RDF/RAction.hxx:108:9: required from here; /home/rembserj/spaces/master/r",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14044:5,avoid,avoids,5,https://root.cern,https://github.com/root-project/root/pull/14044,1,['avoid'],['avoids']
Safety,"This avoids the indirect dependence of ROOT on CURL, because the CURL dependence of CFITSIO is optional since version 3.49: https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/docs/changes.txt#L199. Note: I tested the `builtin_cfitsio` locally on Linux, and for macOS and Linux the CI will cover it because these platforms configure with `builtin_cfitsio=ON`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15508:5,avoid,avoids,5,https://root.cern,https://github.com/root-project/root/pull/15508,1,['avoid'],['avoids']
Safety,"This avoids the remaining uses of the global write lock in typical RDataFrame event loops. There are two parts to this. 1) A bug fix in the hashing of streamer info when opening files. (The hash was including the TKey timestamp and therefore ended up being unique even for files with identical streamer info). 2) Since TTreeProcessorMT can carefully manage its TChains and corresponding TFile and TTree objects, global lists/cleanup and thread safety features can be bypassed or disabled. Together these changes are enough to almost completely eliminate the use of the global write lock in typical event loops. The only remaining using is the calls from ```TFile``` to ```TProcessUUID::AddUUID``` and ```TProcessUUID::RemoveUUID``` There are still several remaining places where the global read lock is taken, and these still have some cost in light of the remaining global write lock usage. These changes have the biggest impact when analyzing a large number of files. A test case is below. Produce the test dataset:; ```cpp; #include ""TFile.h""; #include ""TTree.h""; #include ""TString.h""; #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;; const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {; TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");; TTree *tree = new TTree(""tree"", """");; tree->Branch(""outval"", &outval);; for (unsigned int ientry = 0; ientry < nentries; ++ientry) {; tree->Fill();; }; tree->Write();; fout->Close();. // make sure that each key has a distinct timestamp to maximally; // provoke different hashes for streamer info in each file; std::this_thread::sleep_for(1100ms);; }. }; ```. Test event loop:; ```python; import ROOT; ROOT.gInterpreter.ProcessLine("".O3""); ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""); chain.Add(""test_*.root""). d = ROOT.ROOT.RDataFrame(chain); res = d.Sum(""outval""). resval = res.GetValue(); print(resval); ```. With 256 threa",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9486:5,avoid,avoids,5,https://root.cern,https://github.com/root-project/root/pull/9486,2,"['avoid', 'safe']","['avoids', 'safety']"
Safety,"This behavior is intentional and documented at https://root.cern.ch/doc/master/classTEfficiency.html, see example 1 and 2 for example:; > As the histograms already exist, the new TEfficiency is by default not attached to the current directory to avoid duplication of data.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9189#issuecomment-963387203:246,avoid,avoid,246,https://root.cern,https://github.com/root-project/root/issues/9189#issuecomment-963387203,1,['avoid'],['avoid']
Safety,This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:; * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily; * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available; * Reduce scope of interpreter locks in several places where the lock is taken before necessary; * Add locks where unprotected use of `gInterpreter` is made; * Improve code clarity and performance of `TTree::Fill()`; * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/709:223,avoid,avoid,223,https://root.cern,https://github.com/root-project/root/pull/709,2,"['Avoid', 'avoid']","['Avoid', 'avoid']"
Safety,"This captures a wider set of use cases than `TTreeCache`, but doesn't perform as well as `TTreeCache` for the cases TTC is designed for.; - TTC works best when most of the IO is walking sequentially through the tree, reading from non-local storage, with approximately the same branches read for each event. `TFileCacheRead` will handle this case OK - but not as well as TTC.; - `TFileCacheRead` will perform better when the event access is non-sequential, when branch access patterns are not predictable, or when non-TTree data is used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/146#issuecomment-328637604:492,predict,predictable,492,https://root.cern,https://github.com/root-project/root/pull/146#issuecomment-328637604,1,['predict'],['predictable']
Safety,This change could be quite interesting; a proper solution that avoids the link everywhere could be quite powerful if combined with runtime checks. The biggest issue is probably that ROOT will need to load (and potentially pick?) a pythonlib before loading PyROOT and PyMVA.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3396#issuecomment-462739690:63,avoid,avoids,63,https://root.cern,https://github.com/root-project/root/pull/3396#issuecomment-462739690,1,['avoid'],['avoids']
Safety,"This change is done in order to avoid that the pythonizations modules; depend on methods defined in TPython. This commit can be descarded when we will update to CPyCppyy-1.9.7,; since TPython::CPPInstance_FromVoidPtr will become; CPyCppyy::CPPInstance_FromVoidPtr.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4643:32,avoid,avoid,32,https://root.cern,https://github.com/root-project/root/pull/4643,1,['avoid'],['avoid']
Safety,This change is done to avoid using the memory pool for `RooArgSets` in; toy dataset generation workflows.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9257:23,avoid,avoid,23,https://root.cern,https://github.com/root-project/root/pull/9257,1,['avoid'],['avoid']
Safety,This change is to avoid warnings from CMake 3.9.3 and newer on macOS.; See `cmake --help-policy CMP0068` for more information. Fixes [ROOT-9031](https://sft.its.cern.ch/jira/browse/ROOT-9031).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1285:18,avoid,avoid,18,https://root.cern,https://github.com/root-project/root/pull/1285,1,['avoid'],['avoid']
Safety,"This clearly signals ownership transfer and avoids circumventing smart pointer semantics. For more details on passing the vector by value, see also commit c7dac7370d.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16779:44,avoid,avoids,44,https://root.cern,https://github.com/root-project/root/pull/16779,1,['avoid'],['avoids']
Safety,This code now has run more than 6000 times for me without failure. I believe it is safe to merge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/521#issuecomment-296577987:83,safe,safe,83,https://root.cern,https://github.com/root-project/root/pull/521#issuecomment-296577987,1,['safe'],['safe']
Safety,"This commit enables serialization of the Python proxy defined within cppyy to the C++ std::runtime_error class. By doing so, we avoid errors that happen in certain configurations of Dask tasks where a std::runtime_error may be thrown within the event loop itself. Recent CI failures report the following:. ```; RDataFrame::Run: event loop was interrupted; Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor; 	which can be called without argument, objects of this class; 	can not be read with the current library. You will need to; 	add a default constructor before attempting to read it.; Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved; Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved; Error in <TClass::New>: cannot create object of class runtime_error; Error in <TBufferFile::ReadObject>: could not create object of class runtime_error; *** Break *** segmentation violation; ```. This is due to the fact that for some reason the std::runtime_error object is serialized at the end of the function scope within the Dask task. It is important to note that this has only appeared very recently (after October 20th 2023), somehow concurrently on multiple platforms/configurations:. * Alma9 (GCC 11, C++17, Python 3.9, Dask 2023.10) - also tested with Dask 2022.8.1 - 2023.9.3; * Ubuntu22 (GCC11, C++17, Python 3.10, Dask 2023.10); * Ubuntu23.10 (GCC13, C++20, Python 3.11, Dask 2023.10). ~~The reason why have appeared on these platforms and not on others (notably they do not appear in any Jenkins CI run) is unclear.~~Found culprit, see comment below",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13926:128,avoid,avoid,128,https://root.cern,https://github.com/root-project/root/pull/13926,1,['avoid'],['avoid']
Safety,"This commit provides a rewrite of key functions of TGeoParallelWorld, achieving: . (a) faster initialization; (b) faster execution of the Safety function (from ~O(N) to ~O(1)) ; (c) faster or equal execution of FindNode/FindBoundary functions (~log(N)) ; (d) less memory consumption (better memory scalability). The development for this commit was motivated from a use case in ALICE, in which the parallel world ""scene"" can be very large (~100K volumes). In this case, TGeoVoxelFinder takes very long; to construct and consumes a very large amount of memory (GBs). In addition, the evaluation of the Safety function dominates the Geant simulation time. The improvements in this commit are mainly achieved through:. * The use of a boundary volume hierarchy (BVH) as the base acceleration entity, replacing TGeoVoxelFinder.; BVH are the standard in industry/computer-graphics, for what concerns ray-object intersection tasks. The BVH is constructed from axis-aligned bounding boxes and employed in the FindBoundary/FindNode implementations. * The use of a 3D voxel grid (TGeoVoxelGrid) structure, able to store properties ""local"" or in the vicinity of a cartesian coordinate P. This structure allows to reduce the (typical) algorithmic complexity for ""Safety"" queries to ~O(1) (with a constant factor determined by the voxel size). Filling of the 3D voxel grid cache for Safety is done on-the-fly (using the BVH once). * (Optional) Additional caching of ""last-call"" safety values for really quick return when the value is still valid at the next call. Ideas for these improvements come from prior work in related libraries such as VecGeom. -----. Implementation details:. * The implementation is, for now (until fully tested), provided in a backward compatible manner:. - By default, nothing changes; - Users have to activate the BVH mode by setting an environment variable TGEO_PW_USEBVH; - Users may hence compare the 2 modes. * Functions for Safety, FindNode, FindBoundary dispatch to some internal i",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16442:138,Safe,Safety,138,https://root.cern,https://github.com/root-project/root/pull/16442,2,['Safe'],['Safety']
Safety,"This commit provides an (optional) optimization to reduce the cost of safety evaluations associated with TGeoParallelWorld. The approach consists in the introduction of additional cache-state in TGeoNavigator. This state remembers the last location for which TGeoParallelWorld::Safety was evaluated, together with the corresponding value returned. Since TGeoNavigator follows the evolution of tracks step-by-step, we have some sort of history-locality. This means that the cache-state has a high-probability of being relevant for multiple track locations in a row. The optimization proposed here is orthogonal to other improvements. It adds on top of algorithmic improvements within TGeoParallelWorld (bounding volume hierarchies, see separate PR), gaining a few extra percent in speed. By default, the new feature is not enabled by default for backward compatibility. Once fully verified, we can make it the default mode. That said, in ALICE simulations, the caching did not modify stepping behaviour and yielded identical results compared to not doing the caching. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16470:70,safe,safety,70,https://root.cern,https://github.com/root-project/root/pull/16470,2,"['Safe', 'safe']","['Safety', 'safety']"
Safety,"This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in; RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in; `RooAbsOptTestStatistic` to mask histogram entries out of the variable; range in case of a subrange fit. The reasons why `cacheValidEntries` and; the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is; creating a clone of the dataset with the subrange only using; `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For; the RooDataHist, `valid()` tells you ""if bin `i` is considered; valid within the current range definitions of all observables""; (according to the documentation). For the RooDataSet, it always; returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the; `mutable` state of the RooDataHist, which can cause trouble if one; updates the observable range but then forgets to call; `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`; was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep; it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful; way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9168:546,redund,redundant,546,https://root.cern,https://github.com/root-project/root/pull/9168,1,['redund'],['redundant']
Safety,This does smell like a feature backport (something we generally avoid) - but I understand it's needed to unblock another PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10123#issuecomment-1068039432:64,avoid,avoid,64,https://root.cern,https://github.com/root-project/root/pull/10123#issuecomment-1068039432,1,['avoid'],['avoid']
Safety,This extends the previous work on enum thread-safety to encompass; all the ways the enums can be scoped.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/56:46,safe,safety,46,https://root.cern,https://github.com/root-project/root/pull/56,1,['safe'],['safety']
Safety,This fix avoids a crash when an invalid formula expression is given as input.; This ties ROOT-9990,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3472:9,avoid,avoids,9,https://root.cern,https://github.com/root-project/root/pull/3472,1,['avoid'],['avoids']
Safety,"This fixes #11747. As seen in https://github.com/cms-sw/cmssw/issues/40091 the code in `TPad::Close`:; ```; if (fPrimitives); fPrimitives->Clear();; if (fView) {; if (!ROOT::Detail::HasBeenDeleted(fView)) delete fView;; fView = nullptr;; }; if (fFrame) {; if (!ROOT::Detail::HasBeenDeleted(fFrame)) delete fFrame;; fFrame = nullptr;; }; ```; is failing in the case of reading a pad from a file in at least some circumstances. `TPad::Streamer` explicit set the bit `kCanDelete` on all objects in the list of primitives, thus including the view and the frame which have their `kCanDelete` bit explicitly reset elsewhere (in the code run during the initial creation of the frame and view). This means that avoiding the a double deletion (the first is now during the `fPrimitives->Clear()`) relies on the heuristic of `HasBeenDeleted` to work properly, at least in the case seen in cmssw above) it does not and lead to crash.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11763:703,avoid,avoiding,703,https://root.cern,https://github.com/root-project/root/pull/11763,1,['avoid'],['avoiding']
Safety,"This fixes #11747. As seen in https://github.com/cms-sw/cmssw/issues/40091 the code in `TPad::Close`:; ```; if (fPrimitives); fPrimitives->Clear();; if (fView) {; if (!ROOT::Detail::HasBeenDeleted(fView)) delete fView;; fView = nullptr;; }; if (fFrame) {; if (!ROOT::Detail::HasBeenDeleted(fFrame)) delete fFrame;; fFrame = nullptr;; }; ```; is failing in the case of reading a pad from a file in at least some circumstances. `TPad::Streamer` explicit set the bit `kCanDelete` on all objects in the list of primitives, thus including the view and the frame which have their `kCanDelete` bit explicitly reset elsewhere (in the code run during the initial creation of the frame and view). This means that avoiding the a double deletion (the first is now during the `fPrimitives->Clear()`) relies on the heuristic of `HasBeenDeleted` to work properly, at least in the case seen in cmssw above) it does not and lead to crash. Backport of https://github.com/root-project/root/pull/11763",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11849:703,avoid,avoiding,703,https://root.cern,https://github.com/root-project/root/pull/11849,1,['avoid'],['avoiding']
Safety,This fixes ROOT-9147. Also avoid future cases of nullptr dereference,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1572:27,avoid,avoid,27,https://root.cern,https://github.com/root-project/root/pull/1572,1,['avoid'],['avoid']
Safety,"This fixes [ROOT-9322](https://sft.its.cern.ch/jira/browse/ROOT-9322). If a `TTreeReaderValue` is used to read fixed or variable size array, TTreeReader now complains and does not finish construction successfully (rather than successfully construct and read only the first element of the array). When such a (wrongly constructed) `TTreeReaderValue `is used, the following error messages are printed on screen:. ```; Error in <TTreeReaderValueBase::GetBranchDataType()>: Must use TTreeReaderArray to read branch arr: it contains an array or a collection.; Error in <TTreeReaderValueBase::CreateProxy()>: The branch arr contains data of type {UNDETERMINED TYPE}, which does not have a dictionary.; Error in <TTreeReaderValue::Get()>: Value reader not properly initialized, did you remember to call TTreeReader.Set(Next)Entry()?; ```. I could not find a way to avoid the last two `Error`s and still have `TTreeReaderValue::IsValid` return `false`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1842:858,avoid,avoid,858,https://root.cern,https://github.com/root-project/root/pull/1842,1,['avoid'],['avoid']
Safety,"This fixes a thread safety issue in the matrix package [ROOT-9547], but also implements consistently operators +, +=, ==. = for matrix classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2364:20,safe,safety,20,https://root.cern,https://github.com/root-project/root/pull/2364,1,['safe'],['safety']
Safety,"This fixes and cleans up the Travis runner; most notably, things like modern CMake and clang 5.0 now come by default (since last December). In theory, this should build much faster since several minutes per job was being spent waiting for apt-get to work. This moves the scripts in `.travis` to `.ci/*`. * CMake 3.9 is now installed by default on Travis: https://docs.travis-ci.com/user/build-environment-updates/2017-12-12/; * Clang 5.0 (and clang-format, clang-tidy) are now installed on Travis; * Move extensive setup to .ci/*; * Fix usage of yaml keys; * Avoid if statements by using build matrix entries; * Note clearly that one block of code will not run; * Remove comments about interleaved macOS",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1775:559,Avoid,Avoid,559,https://root.cern,https://github.com/root-project/root/pull/1775,1,['Avoid'],['Avoid']
Safety,"This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date.; the file 'C:/Users/sftnight/git/master/CMakeLists.txt'; is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'; result='-1'; -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299.; -- Looking for python; -- Preferring Python version 3; -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development; CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args); cmake/modules/SearchRootCoreDeps.cmake:72 (find_package); CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred!; See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"".; See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"".; CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:; find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows.; Apparently the keyword REQUIRED is not enough to avoid stopping the; compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5002:1374,avoid,avoid,1374,https://root.cern,https://github.com/root-project/root/pull/5002,1,['avoid'],['avoid']
Safety,This fixes the problem described in http://root-forum.cern.ch/t/ttreecache-fillbuffer-error-with-root-6-14-04/30914/1 (And avoid the same error message in another circumstance).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2786:123,avoid,avoid,123,https://root.cern,https://github.com/root-project/root/pull/2786,2,['avoid'],['avoid']
Safety,"This fixes the warning messages observed in RootBench when evaluating a not normalised RooAddPdf; where fixCoefNormalizationSet has been called. This PR should be back ported to 6.24. Now `RooAddPdf::getValV` does not print anymore the warning but avoids that `RooAbsPdf::getValV` set the stored `_normSet` to a null pointer when the passed `nset` is a null pointer. In this case `RooAddPdf` uses the default normalization set for defining the coefficients and evaluating when a normalization set is not passed explicitly , i.e. when calling `RooAddPdf::getVal(nulptr)`. ; This might have the side effect to not use the reference normalization that could have been defined previously using `fixCoefNormalization`. It is not clear if this is a wanted feature, since I don't see cases where one would need to evaluate an unnormalized `RooAddPdf`. Eventually another PR could remove `RooAddPdf::getValV`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8030:248,avoid,avoids,248,https://root.cern,https://github.com/root-project/root/pull/8030,1,['avoid'],['avoids']
Safety,This function is needed for newly introduced sensitive detectors framework; to provide a hook for a central call to fill ROOT trees before resetting data; in sensitive detector's end of event.; It would be nice if it could be still included in 6.18,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3954:55,detect,detectors,55,https://root.cern,https://github.com/root-project/root/pull/3954,2,['detect'],"['detector', 'detectors']"
Safety,"This improves thread safety in RooFit, as inspired by a recent forum; post where someone wanted to do multiple fits in parallel. It was checked that this has no visible impact on performance. Also, a small bugfix and general code improvements in separate commits.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16385:21,safe,safety,21,https://root.cern,https://github.com/root-project/root/pull/16385,1,['safe'],['safety']
Safety,"This initialization should be unnecessary, but avoids a warning on some compiler platforms about potentially uninitialized use of the variable. Most other compiler platforms should optimize away the assignment. Fixes an issue reported by @pcanal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1202:47,avoid,avoids,47,https://root.cern,https://github.com/root-project/root/pull/1202,1,['avoid'],['avoids']
Safety,"This introduces a `SetAutoSave()` function to `TBufferMerger` that lets users choose how often data is merged into the output file. This avoid excessive writing of TTree headers, which are compressed and causes the output thread to do too much work if merges happen at every buffer read from the queue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1052:137,avoid,avoid,137,https://root.cern,https://github.com/root-project/root/pull/1052,1,['avoid'],['avoid']
Safety,"This is a again the same problem which appeared before, see https://github.com/root-project/root/pull/14716; The conflict between std::regexp and pytorch jit. ; Either we can avoid using in pytorch or we somehow try to live with this issue hoping at some point it will be fixed in pytorch.; We don't see in the new CI because pytorch is not installed in the ubuntu nodes. I will add it before retiring the old CI",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15211#issuecomment-2051252566:175,avoid,avoid,175,https://root.cern,https://github.com/root-project/root/issues/15211#issuecomment-2051252566,1,['avoid'],['avoid']
Safety,"This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:; https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt; 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`; 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore; cf653869f7 [RF] Don't bar xroofit behind `root7` anymore; e5a67bc647 [RF] More type safety and better memory management with CUDA interface; bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute; 529ba82432 [RF] RAII management of CUDA events and streams; cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays; 77299a2c34 [RF] Reduce public headers of `roobatchcompute`; 8b0a768f0c [RF] Refactor CUDA code in RooFit; 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra; a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors; e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude; 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction; 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`; bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`; 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`; 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`; e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx; 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr; 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions; 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf; 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface; e11a5e4d8c [RF] Improve `RooNumInt",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13295:623,safe,safety,623,https://root.cern,https://github.com/root-project/root/pull/13295,2,"['redund', 'safe']","['redundant-string-cstr', 'safety']"
Safety,"This is a backward incompatible change that [breaks DD4Hep](http://cdash.cern.ch/upload/2c049c68eb2e49d8ad4eeda23b283bae0d5ffd75/DD4hep-01-10-build.log). Please revert or provide a fix. Relevant part of the log is pasted below:; ```; [ 40%] Building CXX object DDCore/CMakeFiles/DDCorePlugins.dir/src/plugins/DetectorHelperTest.cpp.o; /mnt/build/jenkins/workspace/build/projects/DD4hep-01-10/src/DD4hep/01-10/DDCore/src/gdml/GdmlPlugins.cpp: In function ‘long int gdml_extract(dd4hep::Detector&, int, char**)’:; /mnt/build/jenkins/workspace/build/projects/DD4hep-01-10/src/DD4hep/01-10/DDCore/src/gdml/GdmlPlugins.cpp:178:87: error: no matching function for call to ‘TGDMLWrite::WriteGDMLfile(TGeoManager*, TGeoVolume*, const TString)’; extract.WriteGDMLfile(&description.manager(), vol.ptr(), uri.GetRelativePart()); ^; In file included from /mnt/build/jenkins/workspace/build/projects/DD4hep-01-10/src/DD4hep/01-10/DDCore/src/gdml/GdmlPlugins.cpp:27:; /build/jenkins/workspace/install/ROOT/HEAD/x86_64-slc6-gcc8-dbg/include/TGDMLWrite.h:75:9: note: candidate: ‘void TGDMLWrite::WriteGDMLfile(TGeoManager*, const char*, TString)’; void WriteGDMLfile(TGeoManager * geomanager, const char* filename = ""test.gdml"", TString option = """"); ^~~~~~~~~~~~~; /build/jenkins/workspace/install/ROOT/HEAD/x86_64-slc6-gcc8-dbg/include/TGDMLWrite.h:75:9: note: no known conversion for argument 2 from ‘TGeoVolume*’ to ‘const char*’; /build/jenkins/workspace/install/ROOT/HEAD/x86_64-slc6-gcc8-dbg/include/TGDMLWrite.h:77:9: note: candidate: ‘void TGDMLWrite::WriteGDMLfile(TGeoManager*, TGeoNode*, const char*, TString)’; void WriteGDMLfile(TGeoManager * geomanager, TGeoNode* top_node, const char* filename = ""test.gdml"", TString option = """"); ^~~~~~~~~~~~~; /build/jenkins/workspace/install/ROOT/HEAD/x86_64-slc6-gcc8-dbg/include/TGDMLWrite.h:77:9: note: no known conversion for argument 2 from ‘TGeoVolume*’ to ‘TGeoNode*’; /build/jenkins/workspace/install/ROOT/HEAD/x86_64-slc6-gcc8-dbg/include/TGDMLWrite.h:156",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4160#issuecomment-519477877:309,Detect,DetectorHelperTest,309,https://root.cern,https://github.com/root-project/root/pull/4160#issuecomment-519477877,2,['Detect'],"['Detector', 'DetectorHelperTest']"
Safety,"This is a follow up of what was investigated for https://github.com/root-project/root/issues/11581. In that ticket, it was detected that for certain types, for example `const char*`, the attribute `value_type` was not set for std::vector classes. This PR aligns with upstream cppyy in terms of setting the `value_type` and `value_size` attributes of a std::vector class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11623:123,detect,detected,123,https://root.cern,https://github.com/root-project/root/pull/11623,1,['detect'],['detected']
Safety,"This is a follow-up on c97ec173ee589ab2. In particular, this will avoid a flood of warnings on Jenkins, i.e. for roottest, where proof is still enabled, like here:; https://github.com/root-project/roottest/pull/1125. To be backported to 6.32, where this `TList` constructor is already deprecated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15489:66,avoid,avoid,66,https://root.cern,https://github.com/root-project/root/pull/15489,1,['avoid'],['avoid']
Safety,"This is a follow-up to https://github.com/root-project/root/pull/12040. The `RooAbsArg::redirectServer()` method is dangerous and should not be used directly. It was for example used wrongly in HistFactory. In the RooAbsAnaConvPdf is was actually used correctly, but it's still better to use `redirectServers()` consistently, which avoids the new warnings you get when using `redirectServer()`. More detail in the commit description. Also includes a commit that irons over RooFit with `clang-tidy`, adding some missing overrides.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12129:332,avoid,avoids,332,https://root.cern,https://github.com/root-project/root/pull/12129,1,['avoid'],['avoids']
Safety,"This is a followup to 5e424e4, where the Python finding was moved into `SearchInstalledSoftware.cmake`. However, what I missed is that there was a check in `RootBuildOptions` that disabled PyROOT by default if Python is not found, which is now not the case at that point! Therefore, ROOT builds won't have PyROOT by default anymore, which is a bad mistake. Fortunately, the check is entirely redundant and this commit suggests to remove it. There is already a check in `SearchInstalledSoftware` where PyROOT (and `tmva-pymva`) are disabled when the Python development headers where not found. Also, this kind of logic to conditionally change the defaults it bad because it doesn't go well with the ""fail on missing"" paradigm (if `fail-on-missing` is enabled).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15471:392,redund,redundant,392,https://root.cern,https://github.com/root-project/root/pull/15471,1,['redund'],['redundant']
Safety,"This is a followup to commit 8679898a. In that commit, the RooPlot was changed to not create an internal clone of the plot variables anymore. However, in rare cases like for the RooUnitTest, it is necessary that the RooPlot owns the plot plot variables to avoid dangling pointers when the RooPlot lives longer than the original plot variables. To support these cases, a new member function; `RooPlot::createInternalPlotVarClone()` is introduced. It can be used to convert the RooPlot to a plot that owns a clone of the plot variable at any point in time of the RooPlot lifetime.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11841:256,avoid,avoid,256,https://root.cern,https://github.com/root-project/root/pull/11841,1,['avoid'],['avoid']
Safety,"This is a nice way to avoid having the concept of ""current pad"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15822#issuecomment-2162846266:22,avoid,avoid,22,https://root.cern,https://github.com/root-project/root/pull/15822#issuecomment-2162846266,1,['avoid'],['avoid']
Safety,"This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header; - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch; - [x] Implement the basic outline of the MethodPyTorch Class.; - [x] Implement the DeclareOptions methods.; - [x] Implement ProcessOptions methods.; - [x] Implement SetupTorchModel method.; - [x] Implement train methods. (Done); - [x] Implement simple basic structure for training; - [x] Add ability to load code from users; - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders; - [x] Use default (optional optimizer SGD); - [x] Add savebest model; - [x] Add scheduler; - [x] Implement Validation; - [x] Add model prediction function loading ability; - [x] Implement user code ability; - [x] Implement helper function. ## Tests; - [x] Add testPyTorchClassification.C; - [x] Add generatePyTorchModelClassification.py; - [x] Load, Train model and test all the parameter arguments; - [x] Verify response after model prediction function is added.; - [x] Add testPyTorchMulticlass.C; - [x] Add generatePyTorchModelMulticlass.py; - [x] Load, Train model and test all the parameter arguments; - [x] Verify response after model prediction function is added.; - [x] Add testPyTorchRegression.C; - [x] Add generatePyTorchModelRegression.py; - [x] Load, Train model and test all the parameter arguments; - [x] Verify response after model prediction function is added. ## GPU; - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials; These are implemented in #6273. ## Documentation; - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5757:915,predict,prediction,915,https://root.cern,https://github.com/root-project/root/pull/5757,4,['predict'],['prediction']
Safety,"This is a reproducer (segfaults frequently but not always):. ```cpp; #include <ROOT/TTreeProcessorMT.hxx>; #include <TROOT.h>; #include <TTreeReader.h>; #include <TTreeReaderArray.h>. void workload(TTreeReader &r) {; TTreeReaderArray<double> ra(r, ""truthCaloPt"");; while (r.Next()); ra.GetSize();; }. int main() {; ROOT::EnableImplicitMT(2);; ROOT::TTreeProcessorMT mt({""f1.root"", ""f2.root"", ""f3.root"", ""f4.root"", ""f5.root""}, ""t"");; mt.Process(workload);; }; ```. With these files: [files.zip](https://github.com/root-project/root/files/8451196/files.zip). The problem seems to be at the level of TGenCollectionProxy: multiple threads end up sharing the same TGenCollectionProxy objects, which is not thread safe (e.g. because of https://github.com/root-project/root/blob/bce5777b8f479212babb7a8af5485d9a6bbd251e/io/io/src/TEmulatedCollectionProxy.cxx#L84-L85). In principle, however, as we use different TChains/TTreeReaders in each thread, they should also access different TGenCollectionProxy instances. Example backtraces at the point of crash (this is one of several failure modes, but it's the one where the problem is clear -- both threads, at frame 0, are accessing the same TGenCollectionProxy instance):. ```; >>> thread apply all bt 10. Thread 2 (Thread 0x7fffdc0e2640 (LWP 312745) ""repro_ttreeproc""):; #0 0x00007ffff767d973 in TGenCollectionProxy::PopProxy (this=0x7fffd4016090) at ../io/io/src/TGenCollectionProxy.cxx:1333; #1 0x00007ffff7d57a15 in TVirtualCollectionProxy::TPushPop::~TPushPop (this=0x7fffdc0dad20, __in_chrg=<optimized out>) at ../core/cont/inc/TVirtualCollectionProxy.h:65; #2 0x00007ffff76274b1 in TEmulatedCollectionProxy::Destructor (this=0x7fffd4016090, p=0x7fffd40156e0, dtorOnly=false) at ../io/io/src/TEmulatedCollectionProxy.cxx:87; #3 0x00007ffff7d4f8c2 in TClass::Destructor (this=0x7fffd40152c0, obj=0x7fffd40156e0, dtorOnly=false) at ../core/meta/src/TClass.cxx:5417; #4 0x00007ffff676afdb in TBranchElement::ReleaseObject (this=0x7fffd4017590) at ../tree/t",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10357:708,safe,safe,708,https://root.cern,https://github.com/root-project/root/issues/10357,1,['safe'],['safe']
Safety,"This is a specialization of iterator::next for vector<bool> that always returns a nullptr and should never be used.; IIUC, this code only exists to avoid compilation errors when compiling I/O code for `vector<bool>`. With this patch we error out rather than silently returning a nullptr.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6891:148,avoid,avoid,148,https://root.cern,https://github.com/root-project/root/pull/6891,1,['avoid'],['avoid']
Safety,"This is actually still buggy and we now have a use case where not having it brings down the storage of some site, due to the excessive number of IOPS per server (50 IOPS, 720 concurrent accesses to 3 storage servers for a total of 0.2PB of data being read). Enabling this would allow us to reduce the IOPS by a factor ~5. The actual error that we get by enabling it is:. ```; [1923904:internal-dpl-aod-reader]: Fatal: fExtraBasket == nullptr && ""fExtraBasket should have been set to nullptr by GetFreshBasket"" violated at line 1679 of `/local/workspace/DailyBuilds/DailyO2Physics-slc9/daily-tags.nRQdop69vk/SOURCES/ROOT/v6-32-06-alice1/v6-32-06-alice1/tree/tree/src/TBranch.cxx'; [1923904:internal-dpl-aod-reader]: aborting; ```. I can provide some file which has the issue, if needed. This becomes rather urgent for us now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8962#issuecomment-2393067291:715,abort,aborting,715,https://root.cern,https://github.com/root-project/root/issues/8962#issuecomment-2393067291,1,['abort'],['aborting']
Safety,"This is already done the same way for many other external projects, like; Clad, etc. Closes https://github.com/root-project/root/issues/8815. Also, refactor some CMake code to avoid code duplication.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16275:176,avoid,avoid,176,https://root.cern,https://github.com/root-project/root/pull/16275,1,['avoid'],['avoid']
Safety,"This is an alternative fix vs. #3360 mentioned on Mattermost; this renames `root/ROOT/RConfig.h` to `root/ROOT/RConfig.hxx` so that on case insensitive filesystems `root/RConfig.h` doesn't end up including itself if a user has the base directory ROOT is installed in before the `root` include in the include path. A file `root/ROOT/RConfig.h` is provided that also points at `root/ROOT/RConfig.hxx` for backward compatibility, and it prints a removal message. Since including `ROOT/RConfig.h` is probably quite rare, this could be dropped. Or it could avoid printing a message because it does no harm. (Even `RConfig.h` probably tends to be included mostly by ROOT). If most/all other includes are `.h`, this might be better for consistency.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3361:552,avoid,avoid,552,https://root.cern,https://github.com/root-project/root/pull/3361,1,['avoid'],['avoid']
Safety,"This is an old branch I had from when I was working on ROOT, but at the time I could not merge it because it required at least CMake 3.12 to work, and we were still requiring only 3.9 at the time. I took the time to rework the commits against the current master yesterday and today, as rebasing was too hard. The original pull request that contained these changes was https://github.com/root-project/root/pull/4299, but the refactoring of core/ was removed. I hope now this would be ok to merge to simplify a bit how libCore is built and avoid having to add include directories by hand to targets that link against libCore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10690:538,avoid,avoid,538,https://root.cern,https://github.com/root-project/root/pull/10690,1,['avoid'],['avoid']
Safety,"This is done make the life of the developer easier when passing `nullptr` to the RooFit message logger. After all, just `nullptr` is much less verbose than the modern C++ code that had to be used so far (`static_cast<TObject*>(nullptr)`). It also often confused new contributors why `nullptr` could not be passed directly. All existing code was updated to not do the explicit casting to `TObject*` anymore. With this, we also avoid a lot of C-style casts in RooFit code. More info in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10546:426,avoid,avoid,426,https://root.cern,https://github.com/root-project/root/pull/10546,1,['avoid'],['avoid']
Safety,"This is done to avoid a compiler warning (or an error for me, as I treated compiler warnings as errors).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8159:16,avoid,avoid,16,https://root.cern,https://github.com/root-project/root/pull/8159,1,['avoid'],['avoid']
Safety,"This is done to avoid this compiler warning that I get when compiling; ROOT with gcc:. ```; core/base/inc/TStorage.h:131:37: warning: declaration of ‘static void TStorage::UpdateIsOnHeap(const volatile UInt_t&, volatile UInt_t&)’ with attribute ‘noinline’ follows inline declaration [-Wattributes]; 131 | R__NEVER_INLINE void TStorage::UpdateIsOnHeap(volatile const UInt_t &uniqueID, volatile UInt_t &bits) {; | ^~~~~~~~; core/base/inc/TStorage.h:91:20: note: previous declaration of ‘static void TStorage::UpdateIsOnHeap(const volatile UInt_t&, volatile UInt_t&)’ here; 91 | static void UpdateIsOnHeap(volatile const UInt_t &uniqueID, volatile UInt_t &bits);; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10500:16,avoid,avoid,16,https://root.cern,https://github.com/root-project/root/pull/10500,1,['avoid'],['avoid']
Safety,"This is done to better separate CUDA-specific code from the generic code; in RooBatchCompute. Two problems are addressed in this commit:. 1. The RooBatchCompute library had too many CUDA specific functions. The virtual RooBatchCompute interface should be backend agnostic, but; it had CUDA specific functions like `cudaMalloc()` and `cudaFree()`,; which where only implemented in the CUDA case. So an abstraction; didn't make much sense there. It's better to move the CUDA specifics; to a new `roofitcuda` library. Then, the functions from this library; are used in `batchcompute` and `roofitcore` behind preprocessor; macros when using CUDA. 2. Passing around `cudaStream_t` and `cudaEvent_t`. These types are only; available to `nvcc`, and in case gcc is used, these were forward; declared as stucts. This is a hack that should be avoided. In; particular, it can cause linker errors because the types are not the; same in the CUDA and C++ translation units. The proposed solution is to wrap the `cudaStream_t` and `cudaEvent_t`; pointers into C++ structs that are in the new CUDA support library,; and only when using `nvcc` it is allowed to unwrap these types. 3. Too specific signature of `RooAbsReal::computeBatch()`. This function; should not be too backend specific, but it took the `cudaStream_t`; directly. This parameter is removed. Now, the CUDA stream is stored; in a `RooBatchCompute::Config` struct that is passed around in the; `DataMap`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13409:833,avoid,avoided,833,https://root.cern,https://github.com/root-project/root/pull/13409,1,['avoid'],['avoided']
Safety,"This is great! The detection of names of used branches with regexps has always been a dark corner of RDF. Some time ago @axelnaumann suggested to use cling directly for this purpose, hook into the jitting of the expression itself and react upon ""undeclared variable"" errors, but this seems cleaner. @pcanal TString::Tokenize does not understand c++, here we need to get tokens in the programming language parser sense of the term. I.o.w. the regexp that one would need to pass to Tokenize to properly separate c++ token is way too complex, if it even exists",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3324#issuecomment-457922148:19,detect,detection,19,https://root.cern,https://github.com/root-project/root/pull/3324#issuecomment-457922148,1,['detect'],['detection']
Safety,This is just a quickfix PR to add the header to the library generation (before it worked due to transitive inclusion in `RInterface.hxx`). In a followup PR I will propose a way to automatise this and avoid further cases,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13781:200,avoid,avoid,200,https://root.cern,https://github.com/root-project/root/pull/13781,1,['avoid'],['avoid']
Safety,"This is my first foray into this project, but there are a few instances of commenting out the includes instead of fully removing them. If they can in fact be safely removed regardless of the target platform, then the lines should be removed to avoid cluttering up the code base.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/123#issuecomment-218946820:158,safe,safely,158,https://root.cern,https://github.com/root-project/root/pull/123#issuecomment-218946820,2,"['avoid', 'safe']","['avoid', 'safely']"
Safety,"This is necessary to avoid ROOT's installed cmake modules to point to the build directory when using builtin GSL, since `$GSL_LIBRARIES` is the full path to `<BINARY_DIR>/lib/libgsl.so` when using builtin GSL.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4050:21,avoid,avoid,21,https://root.cern,https://github.com/root-project/root/pull/4050,1,['avoid'],['avoid']
Safety,"This is needed to fix MacPorts, https://trac.macports.org/ticket/57007, HomeBrew https://github.com/Homebrew/homebrew-core/pull/36585, and any similar system with case insensitivity. `RConfig.h` includes itself instead of `ROOT/RConfig.h`. This prioritizes relative imports for RConfig on most compilers. *Any similar changes should use double-quote imports too* to avoid this ambiguity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3360:366,avoid,avoid,366,https://root.cern,https://github.com/root-project/root/pull/3360,1,['avoid'],['avoid']
Safety,This is needed to fix the distrdf timeouts in our CI also for 6.26 . See the sibling roottest PR,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10251:34,timeout,timeouts,34,https://root.cern,https://github.com/root-project/root/pull/10251,1,['timeout'],['timeouts']
Safety,"This is not much better than using the internals via including private headers, which already got avoided in a previous PR. More detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14498:98,avoid,avoided,98,https://root.cern,https://github.com/root-project/root/pull/14498,1,['avoid'],['avoided']
Safety,"This is now fixed in ROOT master. Thanks a lot!. ```; ==100870== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==100870== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info; ==100870== Command: root.exe -n -l -b -q; ==100870== Parent PID: 25804; ==100870== ; ==100870== ; ==100870== HEAP SUMMARY:; ==100870== in use at exit: 49,467,260 bytes in 12,108 blocks; ==100870== total heap usage: 106,943 allocs, 94,835 frees, 148,855,407 bytes allocated; ==100870== ; ==100870== LEAK SUMMARY:; ==100870== definitely lost: 0 bytes in 0 blocks; ==100870== indirectly lost: 0 bytes in 0 blocks; ==100870== possibly lost: 0 bytes in 0 blocks; ==100870== still reachable: 49,437,618 bytes in 11,658 blocks; ==100870== of which reachable via heuristic:; ==100870== multipleinheritance: 3,552 bytes in 6 blocks; ==100870== suppressed: 29,642 bytes in 450 blocks; ==100870== Reachable blocks (those to which a pointer was found) are not shown.; ==100870== To see them, rerun with: --leak-check=full --show-leak-kinds=all; ==100870== ; ==100870== For lists of detected and suppressed errors, rerun with: -s; ==100870== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 143 from 72); ```. Should we add a test in roottest for it now that it's clean?. Such as:; https://honeytreelabs.com/posts/memory-checking-unit-tests/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7207#issuecomment-1827477107:1079,detect,detected,1079,https://root.cern,https://github.com/root-project/root/issues/7207#issuecomment-1827477107,1,['detect'],['detected']
Safety,"This is obviously not expected:; 1. If it is incompatible, it should detect this when CMake runs; 2. If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options; > builtin_cling | Build bundled copy of Cling. Only build with an external cling if you know what you are doing: associating ROOT commits with cling commits is tricky. > builtin_clang | Build bundled copy of Clang",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11146#issuecomment-1208043364:69,detect,detect,69,https://root.cern,https://github.com/root-project/root/issues/11146#issuecomment-1208043364,1,['detect'],['detect']
Safety,This is part of the effort of making memory management in RooFit more; automatic and safer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11114:85,safe,safer,85,https://root.cern,https://github.com/root-project/root/pull/11114,1,['safe'],['safer']
Safety,"This is presumbaly a bit controversial. safeDeleteList remove elements in order in a RooAbsCollection,; starting with the ones that only have clients and no servers. This is a slow process, and takes 25% of CPU time on large workspace; manipulation workflows, as it takes place at each workspace::import; call. It can also lead to slow ~RooWorkspace. The point is, I don't think this logic is needed at all.; ~RooAbsArg takes care of properly breaking all the client-server links,; both uplinks and downlinks, for every object. I couldn't find a logical; case where a crash would occur if the safeDeleteList logic were to be; removed. All RooFit tests pass after this patch. No problem for my heavy; workspace manipulation worflows either.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9685:40,safe,safeDeleteList,40,https://root.cern,https://github.com/root-project/root/pull/9685,2,['safe'],['safeDeleteList']
Safety,"This is quite a common C++ idiom, and IMO this warning is too aggressive. However, I fixed the code in [5168f56](https://github.com/artem-ogre/CDT/commit/5168f567422461b39f6ed6a8ba53c17b3c6f3627). Also FYI you might consider using something like `isystem` flag to avoid fighting with warnings in third-party libraries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14036#issuecomment-1808268923:264,avoid,avoid,264,https://root.cern,https://github.com/root-project/root/pull/14036#issuecomment-1808268923,1,['avoid'],['avoid']
Safety,This is related-to/necessary-for https://github.com/root-project/root/issues/13511 and https://github.com/root-project/root/issues/11353 . See also https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989/1; and https://github.com/root-project/root/issues/14767. See also https://its.cern.ch/jira/browse/ROOT-9448,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14792:177,abort,aborting-with-std-align-val-t-is-not-implemented-yet-rhel-,177,https://root.cern,https://github.com/root-project/root/pull/14792,1,['abort'],['aborting-with-std-align-val-t-is-not-implemented-yet-rhel-']
Safety,This is superseed by adding a thread-safe mode to some ROOT collection and updating the global lock to have a Read-Write behavior (and update RecursiveRemove and friends accordingly).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/67#issuecomment-357087517:37,safe,safe,37,https://root.cern,https://github.com/root-project/root/pull/67#issuecomment-357087517,1,['safe'],['safe']
Safety,"This is to avoid any num-diff fallback in RooFit, which results in annoying warnings for the user. A new function `ROOT::Math::digamma` is added to the public interface, which wraps `gsl_sf_psi`. The digamma function is the derivative of `lgamma`, so it is used in `CladDerivator.h` to define the derivatives of `TMath::LnGamma` and the related gamma functions that are used to define Poisson cdfs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16747:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/16747,1,['avoid'],['avoid']
Safety,"This is to avoid compilier warnings, as usual. Commit will also be ported to `wlav/CPyCppyy`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16780:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/16780,1,['avoid'],['avoid']
Safety,"This is to avoid crashes on 32-bit platforms. It's not necessary to use; 64-bit integers anyway, because the return types of the caching codes; were `Int_t` anyway (now just int). And since caches are never part of; IO anyway, it's not important to be platform independent. For the UniqueId, using `unsigned long` is fine too, because the unique; ID is transient and therefore doesn't need to be platform independent.; Any fixed-size choice here caused either problems on either 32- or; 64-bit platforms. This fixes crashes in the nightly builds on Debian 10 32-bit, which was verified on the Debian 10 build node.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10349:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/10349,1,['avoid'],['avoid']
Safety,"This is to avoid having to call `new` and `delete` in the context of; caching in RooFit, as it has lead to memory leaks in the past.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7643:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/7643,1,['avoid'],['avoid']
Safety,This is to avoid having to do hacks with the `RooStringVar`. Closes #9845.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11899:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/11899,1,['avoid'],['avoid']
Safety,"This is to avoid output that doesn't indicate any problem and only makes; the test output harder to interpret. That's how the output of test 27 was before this commit:; ```; [#1] INFO:NumericIntegration -- RooRealIntegral::init(pxyz_Int[z|R]_Norm[x,y,z]_Int[y|R]) using numeric integrator RooIntegrator1D to calculate Int(y); Test 27 : Integration over non-rectangular regions...............OK; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8611:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/8611,1,['avoid'],['avoid']
Safety,"This is to avoid the following warning at configuration time when building ROOT with `cuda` enabled:. ```; CMake Warning (dev) at cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package):; Policy CMP0146 is not set: The FindCUDA module is removed. Run ""cmake; --help-policy CMP0146"" for policy details. Use the cmake_policy command to; set the policy and suppress this warning. Call Stack (most recent call first):; cmake/modules/SearchInstalledSoftware.cmake:1705 (find_package); CMakeLists.txt:347 (include); This warning is for project developers. Use -Wno-dev to suppress it.; ```. Indeed, FindCUDA is deprecated since CMake 3.10:; https://cmake.org/cmake/help/latest/module/FindCUDA.html. The minimum required CMake version by ROOT is 3.16, so it should be no problem to use the suggested new alternative: call the enable_language() command with CUDA. Similar to `enable_language(Fortran)`, this is now done in `CheckCompiler.cmake`. Also, some logic of managing the configuration flags was moved from `SearchInstalledSoftware.cmake` to `RootBuildOptions.cmake` where it belongs. What remains in `SearchInstalledSoftware.cmake` is only the code to find the CuDNN library. Also, since CUDA is now registered as a language in CMake, we can use the official `CMAKE_CUDA_COMPILER` variable in `RootConfiguration.cmake` when invoking nvcc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13437:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/13437,1,['avoid'],['avoid']
Safety,"This is tricky to do because isotopes cannot be added to normal elements (see: TGeoElement::AddIsotope) because one may want to use both standard elements and elements having isotopes in the same geometry. Since the reusing mechanism relies on the element name, the easiest is to rename the elements having isotopes to something non-standard (e.g. HydrogenNat). ; Of course, the definition of such elements as having isotopes can be detected in the parser, forcing the creation of a new element, but then using this element by name would not work (being identical to the standard one). I'm open to suggestions...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9421#issuecomment-1006518038:433,detect,detected,433,https://root.cern,https://github.com/root-project/root/issues/9421#issuecomment-1006518038,1,['detect'],['detected']
Safety,This is workaround to avoid circular dependency between v7primitives; and v7gpad. Detected by cmake on some platforms,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3468:22,avoid,avoid,22,https://root.cern,https://github.com/root-project/root/pull/3468,2,"['Detect', 'avoid']","['Detected', 'avoid']"
Safety,"This last failure is related to Bulk I/O, not my changes:; ```; -- TEST COMMAND -- ; cd /build/jenkins/workspace/root-pullrequests-build/roottest/scripts; /usr/bin/make utils; -- BEGIN TEST OUTPUT --. -- END TEST OUTPUT --; -- BEGIN TEST ERROR --; --- Using ROOT from /build/jenkins/workspace/root-pullrequests-build/build; make: *** No rule to make target `/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/TBulkBranchRead.hxx', needed by `/build/jenkins/workspace/root-pullrequests-build/roottest/scripts/recordtiming_cc.so'. Stop. -- END TEST ERROR --; CMake Error at /build/jenkins/workspace/root-pullrequests-build/root/cmake/modules/RootTestDriver.cmake:186 (message):; got exit code 2 but expected 0; ```; I think we can safely merge this now. I guess bulk I/O is not there for 6.16. The PR build probably used the master of roottest from my fork, which is outdated, or something similar to that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3763#issuecomment-489659558:746,safe,safely,746,https://root.cern,https://github.com/root-project/root/pull/3763#issuecomment-489659558,1,['safe'],['safely']
Safety,This makes the code much simpler and avoids using virtual implemetation classes with dubious inheritance chains.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12355:37,avoid,avoids,37,https://root.cern,https://github.com/root-project/root/pull/12355,1,['avoid'],['avoids']
Safety,"This method called from `CPyCppyy::CPPMethod` destructor, but also from assign operator.; Means it is strongly advisable to clear pointers to avoid potential use of destroyed objects.; Also `fConverters` must be cleaned. Indirectly discovered via DeepCode analyzers:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7692:142,avoid,avoid,142,https://root.cern,https://github.com/root-project/root/issues/7692,1,['avoid'],['avoid']
Safety,This mitigates ROOT-10269 by avoiding nested task execution due; to a parallel Snapshot.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4220:29,avoid,avoiding,29,https://root.cern,https://github.com/root-project/root/pull/4220,2,['avoid'],['avoiding']
Safety,This optimizes the ROOT startup for C++ Modules by avoiding deserialization of redundant declarations.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2998:51,avoid,avoiding,51,https://root.cern,https://github.com/root-project/root/pull/2998,2,"['avoid', 'redund']","['avoiding', 'redundant']"
Safety,This patch actually loads the modulemap as previously it wrongly detected; it was already loaded.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3695:65,detect,detected,65,https://root.cern,https://github.com/root-project/root/pull/3695,1,['detect'],['detected']
Safety,This patch affords trimming of redundant Jupyter notebook information contained within TCanvas .JSON objects. Specifically this includes the removing the list of TColors which reduces the size of a benchmark notebook (a compiled test notebook of Root Primer graphics) by up to 80% upon preliminary tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/760:31,redund,redundant,31,https://root.cern,https://github.com/root-project/root/pull/760,1,['redund'],['redundant']
Safety,This patch allows TFileMerger to work with externally created TFile-s. Being; able to control the creation of the TFile objects give us a chance to use; in-memory files. This is very helpful in benchmarking when we want to simulate; fast disks or we just want to avoid disk wearout.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1073:263,avoid,avoid,263,https://root.cern,https://github.com/root-project/root/pull/1073,1,['avoid'],['avoid']
Safety,"This patch installs python modules to python site-dir standard location (see some doc here:https://docs.python.org/2/library/site.html), see https://sft.its.cern.ch/jira/browse/ROOT-3316. It avoids to have to set PYTHONPATH when installing to a system folder /usr or /usr/local, and even the user site-dir ~/.local. Packaging may have to be reworked though (https://www.debian.org/doc/packaging-manuals/python-policy/ch-python.html#s-paths)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/73:191,avoid,avoids,191,https://root.cern,https://github.com/root-project/root/pull/73,1,['avoid'],['avoids']
Safety,"This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml; input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden; ^; rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and; on the distribution machine. We should probably rely on an environment variable; to turn off this diagnostic selectively and more the reponsibility if something goes; wrong to the distribution team. They should have better knowledge what is safe to; be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4495:1199,safe,safe,1199,https://root.cern,https://github.com/root-project/root/pull/4495,1,['safe'],['safe']
Safety,"This patch is a tentative fix to JIRA bug [ROOT-9907](https://sft.its.cern.ch/jira/browse/ROOT-9907) (TGeoNavigator::FindNextBoundaryAndStep yields nonsensical answers with overlapping volumes). The bug seems to be due to the fact that `/CUVE_1/FAIS_1/PLAQUE_2` fails the `Contains()` check on line 1416, despite the fact that (or because?) the point is exactly on the volume boundary. Therefore, `PLAQUE_2` is not considered **at all** for limiting the current step length, which is unsound. By suppressing the `Contains()` check, we allow `snext` to be set to 0.0, which is a sensible response in this situation. I am not sure whether suppressing this check is entirely reasonable. I perused the source code for a few `TGeoShape`s and I have the impression that `DistFromOutside()` returne `TGeoShape::Big()` if the point happens to be inside the shape, but I could not find any documentation where this post-condition is clearly spelt out. If this is true for any shape, then I would argue that it is safe to omit the `Contains()` check (at worst we will end up with `snext=TGeoShape::Big()`, which is exactly what we had with the check anyway). @agheata, I hope you can take a look at this patch. Perhaps you are also aware of other places in `TGeoNavigator` where it may be wise to apply a similar correction...? Thanks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3291:1004,safe,safe,1004,https://root.cern,https://github.com/root-project/root/pull/3291,1,['safe'],['safe']
Safety,This patch makes it more difficult for people to avoid the 'automatic' memory; ownership done by TMemFile. It forces people to explicitly construct the; data structure describing memory blob and makes it easier to grep for.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3977:49,avoid,avoid,49,https://root.cern,https://github.com/root-project/root/pull/3977,1,['avoid'],['avoid']
Safety,This patch makes the implementation reusable and ready to configure it such; that we can remove the redundant information for modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3687:100,redund,redundant,100,https://root.cern,https://github.com/root-project/root/pull/3687,1,['redund'],['redundant']
Safety,"This patch provides the method TGDMLWrite::WriteGDMLfile allowing to write the gdml corresponding to a volume hierarchy (like a detector). A geometry can be therefore exported in pieces, and the gdml parser was modified to avoid duplication of materials and other components upon reading.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1445:128,detect,detector,128,https://root.cern,https://github.com/root-project/root/pull/1445,2,"['avoid', 'detect']","['avoid', 'detector']"
Safety,"This patch reimplemented signal handling in CMSSW. It avoids async-unsafe functions in signal handler. For reference, see the link https://github.com/bbockelm/cmssw/blob/stacktrace_handler_revisit/FWCore/Services/src/InitRootHandlers.cc. I tried this patch with some simple multi-thread test cases and it worked fine. Is there any complicated test cases I can run? I think this patch is not very ready to merge, but it achieved basic functions. Any criticisms are welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/96:54,avoid,avoids,54,https://root.cern,https://github.com/root-project/root/pull/96,2,"['avoid', 'unsafe']","['avoids', 'unsafe']"
Safety,"This patch removes an unnecessary assert, which is probably a left-over from early debugging. Asserts are a way to document certain runtime assumptions that the code makes. They should be only used if the code cannot run correctly if the condition is not fulfilled. This assert here does not serve that purpose. Starting the minimization iteration with an invalid initial state is fine as far as the algorithm is concerned, because it does not make use of that property. Edit: This is not a cosmetic change, because this assert triggers an abort in one of the iminuit tests if the code is compiled in debug mode, while the test runs fine in release mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6762:540,abort,abort,540,https://root.cern,https://github.com/root-project/root/pull/6762,1,['abort'],['abort']
Safety,"This patch set enabled C++17 (C++1z) support in ROOT. This will require at least GCC 7.1.0 (soon to be released, probably in a month). GCC 7 fully implements C++17 language features. CMSSW builds using GCC 6.2.0, GCC 6.3.0 and GCC 7.0.1 are all compiled with C++17. Note that biggest issues came from `TString` and `std::string` interaction due to `std::string_view` conversion operator in `TString`. This makes mixing `TString` and `std::string` painful. Thus to avoid ambiguity errors `std::string_view` operator is now marked as explicit. Otherwise in a lot of places I had to use `static_cast<>` to pick one of conversion operators (which makes the patch bigger).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/522:464,avoid,avoid,464,https://root.cern,https://github.com/root-project/root/pull/522,1,['avoid'],['avoid']
Safety,This patch teaches cling to detect if the essential libraries have modulemaps and if necessary it adds an overlay around libc and std. This tightens the implementation and makes cling standalone easier to run in -fmodules mode.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4563:28,detect,detect,28,https://root.cern,https://github.com/root-project/root/pull/4563,1,['detect'],['detect']
Safety,"This pattern was/is intentional (see text from ab4359707d324a19a21a1fea7e59a8e07eaf9673).; The idea is to avoid **all** user to pay the price of the lock taking when only the IMT/TTree code is supposed to leverage it. For all other use cases, we support 'only' the case one thread per TFile. To properly support (in a fair way to those not using it) the general case, we would actually need to be much more generic (i.e. a TLockedFile or a switch/parameter to TFile ... in this later view, switching the global test for a more local one may be helpful).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5288#issuecomment-608542244:106,avoid,avoid,106,https://root.cern,https://github.com/root-project/root/pull/5288#issuecomment-608542244,1,['avoid'],['avoid']
Safety,"This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in; addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same; STL collection (this is supported) and we have the following sequence of operation:. 1. load library A; 2. load library B (dictionary registration is ignored as intended); 3. request TClass for STL collection.; 4. unload (dclose) library B; 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL; collection to be marked as ""unloaded"" even though it library (A); was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed; from memory on first use and thus if the library was closed and re-opened/loaded; we no longer had the information needed to restore the TClass object corresponding; to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12863:805,avoid,avoid,805,https://root.cern,https://github.com/root-project/root/pull/12863,1,['avoid'],['avoid']
Safety,"This problem was solved by putting the Debian 10 machine to a colder place. The timeouts where caused by CPU throttling because the machine ran to hot. While investigating this issue, I figured out that we could also speed the tests up by using the `-O3` optimization flag (as in `Release` mode). The `RelWithDebInfo` build type that is used in the nightlies implies `-O2`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14306#issuecomment-1886686200:80,timeout,timeouts,80,https://root.cern,https://github.com/root-project/root/issues/14306#issuecomment-1886686200,1,['timeout'],['timeouts']
Safety,"This pull request adds [VecCore](https://gitlab.cern.ch/VecGeom/VecCore) external project and build options to ROOT. Some comments:. Vc is used by VecCore, and since it is not relocatable, it must be built by the VecCore build system in order to avoid the situation in which VecCore finds a broken temporary installed version of Vc in ROOT's `${CMAKE_BINARY_DIR}`. It is perfectly fine to use a builtin VecCore with an externally installed Vc, however. Ideally, though, both should be externally installed. When both are enabled as builtins, they will get installed at the end along with ROOT into the final prefix, with correct configurations. I can not test the build on ARM, please let me know if Jenkins shows any failures. @xvallspl Since you have been using VecCore within ROOT, could you please try this branch out? I did not find any code currently in ROOT that uses VecCore. I've marked this as work in progress to be able to make sure everything is ok prior to merging.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/393:246,avoid,avoid,246,https://root.cern,https://github.com/root-project/root/pull/393,1,['avoid'],['avoid']
Safety,"This pull request adds support for the concatenation of RNTuple pages into 'cages' that are then written to, and read from, DAOS containers as a single value of the key-value object store under the same attribute key, thus the smallest addressable unit. Pages from the same page-group are concatenated in the order they are handled on the DAOS side through vector I/O from the sealed pages' buffers. The name 'cage' is a portmanteau of ""concatenated pages"" and suggests the fact that pages caged together must be read together in DAOS. This change emancipates the DAOS backend from the original, on-disk ntuple page size. The option to concatenate sealed and buffered pages avoids unnecessary throughput constraints caused by the original page size (e.g., the on-disk default, 64KiB, generally leads to lower performance than pages an order of magnitude larger, e.g. 1MiB), particularly if the pattern of data analysis is based on reading back entire page-group ranges at once. On the other hand, this change ties the reader to the new, concatenated sizes; in DAOS key-value stores, it is impossible to read only a part of the value. It is important that the cage size limit be set adequately for the use-case during writing to DAOS. ## Changes or fixes:. - `RNTupleWriteOptions` provides a way to `SetMaxCageSize()` (default: caging enabled with 1 MiB cages), the maximum size a concatenation of pages from the same page-group can achieve.; - `RPageSinkDaos::CommitSealedPageVImpl()` maps pages from the same page-group to the same attribute key, thus concatenating them on the DAOS-side (i.e. relies on scatter-gathered I/O) until the cage limit is reached. The cage sizes can vary due to page compression and the length of page-groups, thus it is calculated and stored to be referenced when reading back.; - `RWOperation` is generalized to allow many IOVs associated with one attribute key in a request, enabling the non-contiguous buffers of sealed pages to be aggregated into a cage under the sam",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11466:674,avoid,avoids,674,https://root.cern,https://github.com/root-project/root/pull/11466,1,['avoid'],['avoids']
Safety,"This pull request improves the support for storage of collections that use `TVirtualCollectionProxy`, which was initially landed in #11525. However, `TVirtualCollectionProxy` allows for traversing a collection using iterators, which should be faster than using `TVirtualCollectionProxy::At()`. Also, this interface avoids (where possible) an additional copy during element insertion. ## Changes or fixes:; - Switches from using `TVirtualCollectionProxy::{Size,At}()` to the use of iterators. After merging this PR, an implementation for the following functions is required instead: `TVirtualCollectionProxy::GetFunctionCreateIterators()`, `GetFunctionNext()`, and `GetFunctionDeleteTwoIterators`. ## Checklist:; - [X] tested changes locally; - [X] updated the docs (if necessary). This PR fixes #11671.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12380:315,avoid,avoids,315,https://root.cern,https://github.com/root-project/root/pull/12380,1,['avoid'],['avoids']
Safety,"This pull request is a follow-up of #13197, improving the implementation of the internal class `RCollectionClassField::RCollectionIterableOnce`. ## Changes or fixes:; - Allow for faster iteration of elements in a collection whose elements are guaranteed to be contiguous in memory (e.g. a vector), i.e. the address of each element is known given the base pointer. For such cases, a non-zero value for the `stride` argument can be provided, thus avoiding an indirect call on each `operator++` call.; - Fix and clarify the use of read/write iterators on a proxied collection. The meaning of the `read` argument in many; TVirtualCollectionProxy functions is ""read from disk"", i.e. write in memory. This should improve the situation for the PR introducing support for `std::set<T>` fields (#12948). ## Checklist:; - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13235:445,avoid,avoiding,445,https://root.cern,https://github.com/root-project/root/pull/13235,1,['avoid'],['avoiding']
Safety,This pull request provides a bug fix:. - fixing wrong safety in TGeoParallelWorld due to double application of coordinate transformation) ; - fix a crash in VoxelFinder when we have only 1 primitive. as well as some optimizations for TGeoPallelWorld usage:. - call TGeoParallelWorld::Safety with existing limit from normal safety to speedup search; - make TGeoPhysicalNode::IsMatchingState faster,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16425:54,safe,safety,54,https://root.cern,https://github.com/root-project/root/pull/16425,3,"['Safe', 'safe']","['Safety', 'safety']"
Safety,"This pull request provides a page allocator that caches previous allocations up to a certain limit. The cache is thread-local and defaults to 16 pages per thread (~1MiB per thread for default-sized pages). This PR is largely based on the concepts in #8634. Reuse of memory allocations in `RPageAllocatorCache` not only reduces calls to the global allocator but also heap fragmentation. The global allocator is thread-safe albeit locked; thus, to also reduce contention, the cache in `RPageAllocatorCache` is thread-local.; Given the small size of the (per-thread) cache, the internal structure is a simple `std::deque`. Anything more complex is not justified at the moment of this writing. . **NOTE:** Performance evaluation (specially for the multi-threaded case) should be inserted here tomorrow. ## Changes or fixes:; - Add `RPageAllocatorCache`: this templated allocator returns pages that have at least the required capacity. `DeletePage()` does not immediately deallocate memory; instead, pages are returned to a thread-local cache, dropping the smallest allocated buffer if the cache is full. If a previous page cannot be recycled, the underlying allocator `AllocT` (`RPageAllocatorHeap` by default) is used to allocate memory.; - Change the signature of `RPageSource::UnsealPage()`: `SealPage()`, the counterpart of `UnsealPage()` takes an RPage and returns an RSealedPage. Make the interface of `UnsealPage()` symmetric and return an RPage.; - Make `UnsealPage()` use `RPageAllocatorCache` by default.; - Remove stray `RPageAllocator{File,Daos}` classes. ## Checklist:; - [X] tested changes locally; - [X] updated the docs (if necessary). This PR supersedes #8634.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12279:417,safe,safe,417,https://root.cern,https://github.com/root-project/root/pull/12279,1,['safe'],['safe']
Safety,This pull request replaces a variable's type from `size_t` to `uint64_t` to avoid warnings on 32-bit platforms. The variable is the output of a hashing function and undergoes shifting by 32 bits as the seeding step of a hash combination between the two-halves of a 64-bit value. The change has no functional impact. It prevents the following compilation warning in 32-bit systems:. ```; In file included from /path/to/src/RPageStorageDaos.cxx:29:; /path/to/src/tree/ntuple/v7/inc/ROOT/RPageStorageDaos.hxx: In static member function ‘static ROOT::Experimental::Detail::ntuple_index_t ROOT::Experimental::Detail::RDaosContainerNTupleLocator::Hash(const string&)’:; /path/to/src/tree/ntuple/v7/inc/ROOT/RPageStorageDaos.hxx:120:43: warning: right shift count >= width of type [-Wshift-count-overflow]; 120 | auto seed = static_cast<uint32_t>(h >> 32);; ```. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12473:76,avoid,avoid,76,https://root.cern,https://github.com/root-project/root/pull/12473,1,['avoid'],['avoid']
Safety,"This pull request:. 1. Closes #12453, where is was reported that weight errors are lost when splitting weighted datasets.; 2. Avoids the associated errors printed when doing the JSON IO of combined RooDataSets (run the unit test `gtest-roofit-hs3-test-testHS3SimultaneousFit` with ROOT master to see them); 3. Avoids the creation of dummy weight variables when constructing RooDataSets in all of RooFit. More detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12459:126,Avoid,Avoids,126,https://root.cern,https://github.com/root-project/root/pull/12459,2,['Avoid'],['Avoids']
Safety,This pull-request changes RField's `GetNormalizedType()` in order to discard cv-qualifiers. ## Changes or fixes:; - RField does not care about cv-qualifiers. Use `TClassEdit::CleanType()` to discard them in `GetNormalizedType()`. Removed the now redundant `Trim()` function.; - Improve `ntuple_types` test to cover the case described in issue #9140. ## Checklist:; - [X] tested changes locally. This PR fixes #9140.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9158:246,redund,redundant,246,https://root.cern,https://github.com/root-project/root/pull/9158,1,['redund'],['redundant']
Safety,"This pull-request disables the warning `redundant parentheses surrounding declarator [-Wredundant-parens]` for everything except input parsed via `Interpreter::process()` (e.g., for prompt input). ## Changes or fixes:; - `CompilationOptions::IgnorePromptDiags` extended to >1 bit and renamed to `CompilationOptions::IgnoreDiagsMask`. Several values from the `IgnoreDiags` enumeration can be bitwise-OR'd together. The original purpose of `IgnorePromptDiags` now corresponds to the `IgnoreDiags::kPromptBasic` flag.; - `FilteringDiagConsumer` has been extended to handle groups of diagnostics that can be masked via `CompilationOptions::IgnoreDiagsMask`.; - Default ignore diagnostics mask can be (optionally) specified as an argument to `Interpreter::makeDefaultCompilationOpts()`. All interface functions use `IgnoreDiags::kPromptExtended` except `Interpreter::process()`. ## Checklist:; - [X] tested changes locally. This PR fixes [SPI-2064](https://sft.its.cern.ch/jira/browse/SPI-2064).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9695:40,redund,redundant,40,https://root.cern,https://github.com/root-project/root/pull/9695,1,['redund'],['redundant']
Safety,"This requires some changes to the read path of `RColumn`, first to deduplicate the code and then avoid recursive `RColumn::ReadV` which makes the difference on my system between being able to limit test a single `std::vector` element of size 200k.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14390:97,avoid,avoid,97,https://root.cern,https://github.com/root-project/root/pull/14390,1,['avoid'],['avoid']
Safety,"This results in more modular code that is also safer: the `ROOT::Fit::Fitter` has no access to the RooAbsMinimizerFcn anymore, only to the member that is a lightweight adapter. This means the `RooAbsMinimizerFcn` also doesn't get cloned unexpectedly, so we don't need extra checks in the RooMinimizer to account for that!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12348:47,safe,safer,47,https://root.cern,https://github.com/root-project/root/pull/12348,1,['safe'],['safer']
Safety,"This set of improvements to TBufferMerger (and more) was inspired by the terrible performance of the parallel merging (and fast merging in general) in the case where the TTree has a very large number of branches (1000+). Where in the original version a TBufferMerger with a file with 1000+ branches and only 50s and ran with any number of threads would take more than 3m (did not wait until the end) the new version takes 11s with 1 thread, 8s with 6 threads and 22s with 6 thread when increased to 500 events. (using the CMS file ../data//250202_181_RECO.root). This PR includes:. * skipping the boxing/compressing/uncompressing/unboxing cycle if the TBufferMerger is available (not already merging) when the thread is writing its TMemFile. * skipping SetBranchAddress and SetMakeClass in when doing fast cloning (where that information is not used anyway). * Replacing calling to the slow TObjArray::GetEntries (which *counts* the slot used) by calling GetEntriesFast. * Speeding up the GetMother implementation (caching parent's address sooner when reading, use that information in GetMother). * In fast cloning, delay writing the output until the last input is processed (instead of writing the output after each input),. * Optimization of fast cloning handing of empty write basket. It also contains a couple of bug fixes (RNtuple merging forgetting to merge the result of the objects in the file, iofeatures incorrectly cloned). Also made TBufferMerger::GetQueueSize actually thread safe (it is necessary to use it to stop the producer from adding more data if the queue is too full). Also improved TClass::GetBaseClassOffset parallelism (benefit parallel boxing/unboxing) and reduced/removed contention see in the mechanism use to determine the actual object type at run-time (TIsAProxy).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7286:1489,safe,safe,1489,https://root.cern,https://github.com/root-project/root/pull/7286,1,['safe'],['safe']
Safety,"This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested; initialization of TClasses (leading to the outer nested initialization; to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```; namespace User {; class TrackerVtxBase; class BeamFlux : public User::TrackerVtxBase; class NTrackerVtx : public User::BeamFlux; }; ```. We had a crash during BuildOld for User::BeamFlux. ```; User::TBaseObject triggers replacement routines.; reaches NTrackerVtx; calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux; in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass); calls Init on the TStreamerElement base; this triggers the creation of the TClass for User::TrackerVtxBase; but BuildOld kept a stale pointer to the old TClass (was baseclass variable).; ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(; Usually it is just a waste of time.; In this case, one such type is User::TContext::Time (an enum) use as part; of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,; another class requested the update of the emulated StreamerInfo for the (still); emulated User::TContext, this in turn provoked the (unnecessary) call to; TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of; the TClass for User::TContext … one of the steps is to absorb the existing; StreamerInfo (including the one being updated) and clear them (i.e. delete; the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr); is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```; User::TDatum is loaded; provokes update of a StreamerInfo with a TTrueParticle; *spurrious* InitStreaming provoke need for TTrueParticle TClass; start consuming the TTr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4389:125,avoid,avoid,125,https://root.cern,https://github.com/root-project/root/pull/4389,2,['avoid'],['avoid']
Safety,"This should fix issue #10353. Use a spin lock to protect gInlined. Also, use in-place lamba calls instead of checking at each call if the static was initialized.; In addition to the (slight) performance gain, this make those intialization thread safe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10369:246,safe,safe,246,https://root.cern,https://github.com/root-project/root/pull/10369,1,['safe'],['safe']
Safety,This should reduce the amount of modules we load for namespace lookups at the cost of being more fragile. Improves the memory of hsimple.c from 145864 to 118696 and skips loading of 15 redundant modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6190:185,redund,redundant,185,https://root.cern,https://github.com/root-project/root/pull/6190,1,['redund'],['redundant']
Safety,"This snippet:; ; ```; #include ""TFile.h""; #include ""TTree.h"". void nested(); {; auto f = new TFile(""nestedclones.root"");; TTree* TopTree = (TTree*)f->Get(""TopTree"");; TopTree->Draw(""Objects.SecondaryVertexArray.TrackIndices.index"");; }; ```. fails with. ```; Warning in <TTreeFormula::DefinedVariable>: TClonesArray object was not retrievable for Objects.SecondaryVertexArray.TrackIndices.index!; Error in <TTreeFormula::Compile>: Bad numerical expression : ""Objects.SecondaryVertexArray.TrackIndices.index""; Info in <TSelectorDraw::AbortProcess>: Variable compilation failed: {Objects.SecondaryVertexArray.TrackIndices.index,}; ```. If I open a TBrowser and then double click on the relevant leaf, it draws ""Empty"" and says:; `Warning in <TSelectorDraw::ProcessFillObject>: Not implemented for TClonesArray`. Funnily, if I then call again from the prompt:; `TopTree->Draw(""Objects.SecondaryVertexArray.TrackIndices.index"");`. then it is drawn correctly and no warning is raised. ![image](https://github.com/root-project/root/assets/10653970/fbfe2dda-8e5f-42eb-94ca-8a51d9ce1de6). So I guess that Axel was suggesting that, once this bug is fixed, this snippet should go back into roottest to prevent future regressions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8744#issuecomment-2068055777:533,Abort,AbortProcess,533,https://root.cern,https://github.com/root-project/root/issues/8744#issuecomment-2068055777,1,['Abort'],['AbortProcess']
Safety,"This tell you how you can select an ID which is inside a fragment, as it is not as doing something is the main page; But this does not help you to duplicate ID, or select sub element in a fragment; This also tell you that you can use prefix for fragment, but it is not recommended to uses that; And almost everything in the post is depreciated; it is also saied : ; - Avoid concatenating ID parts or relying on the syntax of the global ID, as mentioned in the comment as well as in the documentation . . Which is in favor of my solution, not relying on UI5 gobalID but on custom generated ones that will never change in any update",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4613#issuecomment-549335808:368,Avoid,Avoid,368,https://root.cern,https://github.com/root-project/root/pull/4613#issuecomment-549335808,1,['Avoid'],['Avoid']
Safety,"This tutorial crashed with the following stacktrace when run; interactively. Avoiding to register a canvas with the same name; multiple times fixes the crash:. ```; #8 0x00007f5b7876967d in TCanvas::Resize(char const*) (this=0x55e768e126c0) at ../graf2d/gpad/src/TCanvas.cxx:1740; #9 0x00007f5b3e90d668 in TRootCanvas::HandleContainerConfigure(Event_t*) (this=0x55e76852b460) at ../gui/gui/src/TRootCanvas.cxx:1789; #10 0x00007f5b3e8464fd in TGFrame::HandleEvent(Event_t*) (this=0x55e767938e70, event=0x7f5b79adff40) at ../gui/gui/src/TGFrame.cxx:476; #11 0x00007f5b3e7f4c9a in TGClient::HandleEvent(Event_t*) (this=0x55e768de2290, event=0x7f5b79adff40) at ../gui/gui/src/TGClient.cxx:846; #12 0x00007f5b3e7f531d in TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:656; #13 TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:648; #14 0x00007f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703; #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067; #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424; #17 0x00007f5b8130600d in (); #18 0x00007f5b79ae0450 in (); #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778; #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816; #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/cl",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9139:77,Avoid,Avoiding,77,https://root.cern,https://github.com/root-project/root/pull/9139,1,['Avoid'],['Avoiding']
Safety,"This version of the PR is the result of some thinking and two test implementations, one with locks and one relying on TThreadedObject. Both solutions seem heavy and have impacts on runtime. The proposed changes, on the other hand, preserve the existing behaviour and allow thread safe access to the db, documenting well the properties of the TDatabasePDG component.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13541#issuecomment-1698804361:280,safe,safe,280,https://root.cern,https://github.com/root-project/root/pull/13541#issuecomment-1698804361,1,['safe'],['safe']
Safety,This was detected by redundant loading on libRooStats when we are trying; to resolve _ZN5TTreeC1Ev. libRooStats contains it as an unresolved symbol; but the wrong flag checks did not filter it out. This patch should fix a few subtle test failures which fluctuate depending; on the linker optimizations.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2764:9,detect,detected,9,https://root.cern,https://github.com/root-project/root/pull/2764,2,"['detect', 'redund']","['detected', 'redundant']"
Safety,"This was discussed again in the [PPP](https://indico.cern.ch/event/1213092/).; It's important that misaligned friends can be detected. As a minimum, I would propose:; - Raise an error if the main tree/chain arrives at a certain index number, but the friend collection is smaller.; - If the main tree/chain is at the end, but the friend still has values, emit an informative warning. Ping @pcanal @eguiraud",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9137#issuecomment-1285630136:125,detect,detected,125,https://root.cern,https://github.com/root-project/root/issues/9137#issuecomment-1285630136,1,['detect'],['detected']
Safety,This will allow us to uniformly load all modules tagged as `[system]`. This way we avoid explicitly mentioning the module names (helpful for OSX).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1344:83,avoid,avoid,83,https://root.cern,https://github.com/root-project/root/pull/1344,1,['avoid'],['avoid']
Safety,This will avoid compiler warnings when compiling with option -Wsign-compare,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1883:10,avoid,avoid,10,https://root.cern,https://github.com/root-project/root/pull/1883,1,['avoid'],['avoid']
Safety,"This will avoid the crashing due to an uninitialized pool, but might cause problems as we are not enabling thread safety (as we shouldn't inside TTreeProcessorMT). In any case, maybe we should add an explanation comment? A big warning about thread safety?. On the other hand, I don't know if that's what we want until we decide to make TTreeProcessorMT open for explicit multithreading. Another way to avoid the crashing on the test would be to enable implicit MT before running it, as it is done in the other tests. This would follow the current way of working with TTProcessorMT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4953#issuecomment-583375645:10,avoid,avoid,10,https://root.cern,https://github.com/root-project/root/pull/4953#issuecomment-583375645,4,"['avoid', 'safe']","['avoid', 'safety']"
Safety,"This works now fine on 6.28/04, it no longer crashes. ```; root -l; root [0] int x; (int) 0; root [1] .undo; root [2] x; (int) 0; root [3] .undo; root [4] .undo; root [5] x; input_line_12:2:3: error: use of undeclared identifier 'x'; (x); ^; Error in <HandleInterpreterException>: Error evaluating expression (x); Execution of your code was aborted.; root [6] x; input_line_14:2:3: error: use of undeclared identifier 'x'; (x); ^; Error in <HandleInterpreterException>: Error evaluating expression (x); Execution of your code was aborted.; root [7] int x; (int) 0; root [8] int x; (int) 0; root [9] x; (int) 0; root [10] x; (int) 0; root [11] x; (int) 0; root [12] x; (int) 0; root [13] .undo; root [14] x; (int) 0; root [15] .undo 5; root [16] x; input_line_23:2:3: error: use of undeclared identifier 'x'; (x); ^; Error in <HandleInterpreterException>: Error evaluating expression (x); Execution of your code was aborted.; root [17] .q; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10178#issuecomment-1812233608:341,abort,aborted,341,https://root.cern,https://github.com/root-project/root/issues/10178#issuecomment-1812233608,3,['abort'],['aborted']
Safety,Those `VecCore not found` bugs should be fixed by clearing the build directory. They are related to my own changes to avoid copying headers to the build directory.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/855#issuecomment-321843681:118,avoid,avoid,118,https://root.cern,https://github.com/root-project/root/pull/855#issuecomment-321843681,1,['avoid'],['avoid']
Safety,"Thre is a timeout of `tutorial-rcanvas-df104-py` on mac14, let's rerun the CI and make sure it's not related to this PR; https://github.com/root-project/root/actions/runs/10145425561/job/28051063889?pr=16133",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16133#issuecomment-2257728926:10,timeout,timeout,10,https://root.cern,https://github.com/root-project/root/pull/16133#issuecomment-2257728926,1,['timeout'],['timeout']
Safety,Thread safe TListOfFunctions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/46:7,safe,safe,7,https://root.cern,https://github.com/root-project/root/pull/46,1,['safe'],['safe']
Safety,Thread safety in TPad,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6510:7,safe,safety,7,https://root.cern,https://github.com/root-project/root/issues/6510,1,['safe'],['safety']
Safety,Thread safety issues with TListOfFunctions was found using the CMS threaded framework. These changes were done in consultation with Philippe Canal.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/46:7,safe,safety,7,https://root.cern,https://github.com/root-project/root/pull/46,1,['safe'],['safety']
Safety,Thread-safe TClass enums and TCling return values,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/55:7,safe,safe,7,https://root.cern,https://github.com/root-project/root/pull/55,1,['safe'],['safe']
Safety,Thread-safe changes specifically affecting reading/writing different ROOT files from different threads. These changes require the use of C++11.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12:7,safe,safe,7,https://root.cern,https://github.com/root-project/root/pull/12,1,['safe'],['safe']
Safety,Thread-safe determination of TObject::IsOnHeap,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8:7,safe,safe,7,https://root.cern,https://github.com/root-project/root/pull/8,1,['safe'],['safe']
Safety,Thread-safe interaction with all enum lists,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/56:7,safe,safe,7,https://root.cern,https://github.com/root-project/root/pull/56,1,['safe'],['safe']
Safety,Thread-safety issue in TClassEdit (StdLen)? [6.24.06],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10353:7,safe,safety,7,https://root.cern,https://github.com/root-project/root/issues/10353,1,['safe'],['safety']
Safety,"Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):; 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup.; 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no?; 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12201#issuecomment-1413319178:674,safe,safer,674,https://root.cern,https://github.com/root-project/root/pull/12201#issuecomment-1413319178,1,['safe'],['safer']
Safety,Timeout - too late for 6.30.00,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8709#issuecomment-1761508240:0,Timeout,Timeout,0,https://root.cern,https://github.com/root-project/root/pull/8709#issuecomment-1761508240,1,['Timeout'],['Timeout']
Safety,Timeout of 600s added to ExternalProjects,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7136:0,Timeout,Timeout,0,https://root.cern,https://github.com/root-project/root/pull/7136,1,['Timeout'],['Timeout']
Safety,Timeout parameter added to ExternalProject,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7141:0,Timeout,Timeout,0,https://root.cern,https://github.com/root-project/root/pull/7141,1,['Timeout'],['Timeout']
Safety,Timeout. @lmoneta please move the implementation as you see fit.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2065#issuecomment-398737720:0,Timeout,Timeout,0,https://root.cern,https://github.com/root-project/root/pull/2065#issuecomment-398737720,1,['Timeout'],['Timeout']
Safety,To avoid compiler warning,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15325:3,avoid,avoid,3,https://root.cern,https://github.com/root-project/root/pull/15325,1,['avoid'],['avoid']
Safety,"To avoid fallback to numeric differentiation because the function is not; inlined. The pullbacks were automatically generated with Clad master, and then; manually simplified. It was carefully checked that the updated unit; tests cover all code branches of the pullback.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15501:3,avoid,avoid,3,https://root.cern,https://github.com/root-project/root/pull/15501,1,['avoid'],['avoid']
Safety,"To avoid having to use regex to parse trailing curly brackets with/without trailing whitespaces, the code command string is cleaned with the following strategy:; - Trim whitespaces at the borders; - Get the inner command (i.e. the part between quotes); - Trim whitespaces again; - Stitch back together. This should fix the unforeseen PyTorch failures brought by PyTorch's snafu (as described and https://github.com/pytorch/pytorch/issues/49460#issuecomment-911365091) and triggered by the use of std::regex introduced in https://github.com/root-project/root/pull/14716 . This replaces https://github.com/root-project/root/pull/14716 to fix https://github.com/root-project/root/issues/14462",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14773:3,avoid,avoid,3,https://root.cern,https://github.com/root-project/root/pull/14773,1,['avoid'],['avoid']
Safety,To avoid the largest merge conflicts this PR also backports some refactoring of RFriendInfo and TTreeProcessorMT. Fixes #12260 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12342:3,avoid,avoid,3,https://root.cern,https://github.com/root-project/root/pull/12342,1,['avoid'],['avoid']
Safety,"To avoid this error, change the type of the variable passed to SetBranchAddress from `signed char` to `char`. If that is not possible, cast the parameter to `void*` : `SetBranchAddress( ..... , (void*)&mysignedchar);`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7565#issuecomment-825086836:3,avoid,avoid,3,https://root.cern,https://github.com/root-project/root/issues/7565#issuecomment-825086836,1,['avoid'],['avoid']
Safety,To avoid warnings such as `_rvec.py:95: SyntaxWarning: invalid escape sequence '\p'`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15137:3,avoid,avoid,3,https://root.cern,https://github.com/root-project/root/pull/15137,1,['avoid'],['avoid']
Safety,"To be able compile with `-Dcxxmodules=ON`, one has to avoid `${CMAKE_BINARY_DIR}/include` in all include paths. Otherwise compiler can find same include (like `TString.h`) in ROOT source directories and in `${CMAKE_BINARY_DIR}/include`. But many builtins using `${CMAKE_BINARY_DIR}/include` to install their headers and therefore library appends that path to public include paths. . This PR tries to copy `VDT` and `TBB` includes into `ginclude` directory and use this directory for the compilation. . Solves compilation problem on Linux platform with `cxxmodules` enabled. Probably same adjustment could be done for other builtins",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5445:54,avoid,avoid,54,https://root.cern,https://github.com/root-project/root/pull/5445,1,['avoid'],['avoid']
Safety,To be merged after #2313 to avoid conflicts for @imaxoi,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2392:28,avoid,avoid,28,https://root.cern,https://github.com/root-project/root/pull/2392,1,['avoid'],['avoid']
Safety,"To fix the timeouts seen in our CI runs of the distributed RDataFrame with Dask suite. In particular, the Dask version used was 2021.10.0. Version 2021.11.2 fixes a couple of deadlock bugs which were most probably responsible for the timeouts (see https://distributed.dask.org/en/stable/changelog.html#v2021-11-2). We bump the minimum Dask version to 2022.02.0 (; https://distributed.dask.org/en/stable/changelog.html#v2022-02-0) because it is the last version with support for Python 3.7 (the current minimum Python version for distributed RDataFrame). The test suite was run with Dask 2021.10.0 on both Ubuntu and Fedora, showing the timeout. Version 2021.11.2 doesn't timeout.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11371:11,timeout,timeouts,11,https://root.cern,https://github.com/root-project/root/pull/11371,4,['timeout'],"['timeout', 'timeouts']"
Safety,"To give some context, why I am touching these classes. An iminuit user noticed that Migrad does not stop when the call limit is reached in certain corner cases. While tracing that issue, I found the core issue in MnHesse, which does not report back if the call limit is reached while it runs. The fit is correctly aborted then, but the fit state is not ""call limit reached"", instead the minimum is reported as valid. So while this only happens in certain corner cases, it is nevertheless a bad bug, since Migrad says the minimum is fine although that is not the case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7882#issuecomment-830202601:314,abort,aborted,314,https://root.cern,https://github.com/root-project/root/pull/7882#issuecomment-830202601,1,['abort'],['aborted']
Safety,To help debug the timeouts seen on MacOS.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6264:18,timeout,timeouts,18,https://root.cern,https://github.com/root-project/root/pull/6264,2,['timeout'],['timeouts']
Safety,To make the RReader usable in multi-thread we ned to move the loch to all the COmpute funcitions in order to protect the setting of the input variables. This fixes #16600 as suggested in https://root-forum.cern.ch/t/tmva-rreader-not-multithread-safe/59662,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16616:245,safe,safe,245,https://root.cern,https://github.com/root-project/root/pull/16616,1,['safe'],['safe']
Safety,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4553#issuecomment-543193289:1164,detect,detect,1164,https://root.cern,https://github.com/root-project/root/pull/4553#issuecomment-543193289,1,['detect'],['detect']
Safety,"To summarize what was decided today in the ROOT team meeting: it is very unfortunate that this bug was discovered a week after branching, please avoid this in the future. Nevertheless, since this is fixing a feature that we advertise and the feature is very specific, this should be merged and backported to 6.32 if the CI can be made green (even disabling the failing test would be acceptable, since n - 1 tested platforms are better than zero).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15173#issuecomment-2057399920:145,avoid,avoid,145,https://root.cern,https://github.com/root-project/root/pull/15173#issuecomment-2057399920,1,['avoid'],['avoid']
Safety,"Today I read User's Guide and spotted many mistakes I noticed when reading it for the first time 15 years ago. I thought that now is the time for me to act and to finally fix them.; I'm not a native speaker, so I don't insist on all of them (I still doubt the usage of articles when I write this small report). If it's really easier for you, the next time I can try to make a push release with the corrections. The good thing that I noted is that there are some fixes in the recent html pages compared to the pdf User's Guide of 2018, so I refer to this page when I cite the mistakes:; https://root.cern/root/htmldoc/guides/users-guide/Trees.html. 14.3; is the use the TTree::Show method; \- to use; 14.4; the branches and the leaves, is TTree::Print.; \- no need for a comma; 14.6; boxes"".; \- no need for the quote.; witch is marked; \- which is marked; exposed expression; \- I think that would sound better as ""set expression"" or another adjective.; Below them there are two text widgets; \- possible, but I think 'there' is redundant here.; for specifying; \- to specify; \-\- I think this text should be checked by a native speaker for articles and other issues.; When the “Rec” box is checked, the Draw and Scan commands; \- no need for quotes around Rec (or add them around Draw and Scan); 14.7; This picture shows the TTree class:; \- should be rewritten with a reference to the picture. On the pdf manual the picture is on a separate page, away from this line!; 14.7.3; save all branch buffers every n byte.; \- bytes.; 14.7.4; When a TTree is memory resident, you set it up so that it retains retain only the last few entries.; \- retains; For example, this can be very useful for monitoring purpose.; \- just for monitoring, remove 'purpose'. Maybe rewrite this phrase.; 14.7.6; The function TTree::GetUserInfo() allows adding any object defined by a user to the tree that is not depending on the entry number.; \- allows to add to the tree any user\-defined object that doesn't depend on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7284:1029,redund,redundant,1029,https://root.cern,https://github.com/root-project/root/issues/7284,1,['redund'],['redundant']
Safety,Too late (aka too risky) at this point for v6.28/00.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11442#issuecomment-1400680843:18,risk,risky,18,https://root.cern,https://github.com/root-project/root/issues/11442#issuecomment-1400680843,1,['risk'],['risky']
Safety,Torus.cxx:576; /opt/root_src/geom/geom/src/TGeoTorus.cxx:577:21: warning: Value stored to 'nbPnts' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'nbPnts' is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:577; /opt/root_src/geom/geom/src/TGeoTorus.cxx:646:10: warning: Value stored to 'indx' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'indx' is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:646; /opt/root_src/geom/geom/src/TGeoTorus.cxx:661:10: warning: Value stored to 'indx' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'indx' is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:661; /opt/root_src/geom/geom/src/TGeoTorus.cxx:697:7: warning: Value stored to 'i' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'i' is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:697; /opt/root_src/geom/geom/src/TGeoTorus.cxx:741:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:741; /opt/root_src/geom/geom/src/TGeoTorus.cxx:1065:13: warning: Value stored to 's' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 's' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:1065; /opt/root_src/geom/geom/src/TGeoTrd1.cxx:199:13: warning: Value stored to 'snxt' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'snxt' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTrd1.cxx:199; /opt/root_src/geom/geom/src/TGeoTrd1.cxx:317:13: warning: Value stored to 'snxt' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'snxt' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTrd1.cxx:31,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:66209,safe,safe,66209,https://root.cern,https://github.com/root-project/root/issues/7428,1,['safe'],['safe']
Safety,Tree:Fix ROOT-10829. Avoid using deleted object.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5924:21,Avoid,Avoid,21,https://root.cern,https://github.com/root-project/root/pull/5924,1,['Avoid'],['Avoid']
Safety,TreePlayer-test: avoid use after delete of TEntryList by TTree,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10031:17,avoid,avoid,17,https://root.cern,https://github.com/root-project/root/pull/10031,1,['avoid'],['avoid']
Safety,Try `git clang-format master` on your branch. That should only change what you already modified. The reason clang-format is not run in all the code at once is to avoid having lots of whitespace changes that will make backporting fixes more painful later.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6007#issuecomment-655989367:162,avoid,avoid,162,https://root.cern,https://github.com/root-project/root/pull/6007#issuecomment-655989367,1,['avoid'],['avoid']
Safety,Try to debug Windows Debug failures / timeouts (?),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16089:38,timeout,timeouts,38,https://root.cern,https://github.com/root-project/root/pull/16089,1,['timeout'],['timeouts']
Safety,"Type-erased reading should work via the default entry (or new entries) of the reader's generated model. Like this. ```cpp; auto r = RNTupleReader::Open(""r"", fileGuard.GetPath());; auto v = r->GetModel()->Get<ROOT::RVec<int>>(""v"");; r->LoadEntry(0);; // v now points to an RVec with the data of field v in event 0; ```. Edit: I guess I see the issue, you'd like to avoid `Get<ROOT::RVec<int>>` but instead pass the type name somewhere as a string. Let me think about that for a moment. Can you send me the complete snippet how you read the data before the API change in RNTuple?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10408#issuecomment-1117135780:364,avoid,avoid,364,https://root.cern,https://github.com/root-project/root/issues/10408#issuecomment-1117135780,1,['avoid'],['avoid']
Safety,"UNIX terminals, e.g. vt100, send escape sequences for many special key combinations. Entering the history search mode assigned a specific meaning to the `ESC` character and disabled the processing of escape sequences, thus accidentally printing some characters that are part of a CSI. As a workaround, avoid changing the meaning of `ESC`; users can still use the well-known `ESC ESC` sequence (or any other editor command, e.g. move left/right) to exit the history search mode. This change only affects UNIX terminals. Closes issue #10209. ## Checklist:; - [X] tested changes locally. This PR fixes #10209.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10281:302,avoid,avoid,302,https://root.cern,https://github.com/root-project/root/pull/10281,1,['avoid'],['avoid']
Safety,"Uhm but it looks like it failed to fetch after my latest force-push? So I'm not 100% sure what it's building. EDIT: ah no, the rebase errors come from a `git rebase --abort` that ""correctly fails"", as there is no failed rebase operation to abort.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-879713420:167,abort,abort,167,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-879713420,2,['abort'],['abort']
Safety,Undefine HZ macro to avoid name clash with variable name,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/309:21,avoid,avoid,21,https://root.cern,https://github.com/root-project/root/pull/309,1,['avoid'],['avoid']
Safety,Unfortunately I can't install Win64 version of Root 6.26 becasue of virus detection. See error during unzip and Btdefender report. ![error1](https://user-images.githubusercontent.com/75624059/193414303-f5b7d9c8-4837-431d-b7e2-e7f04c94e34b.JPG); ![error2](https://user-images.githubusercontent.com/75624059/193414309-ece88fe7-b75c-47ce-ac39-620b567ba7b3.JPG),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11473:74,detect,detection,74,https://root.cern,https://github.com/root-project/root/issues/11473,1,['detect'],['detection']
Safety,"Unfortunately, when trying to create a TCanvas, a break occurs every time. Both master and 6-28-00-patches have this problem. @Axel-Naumann . root.exe(5184,0x1effe9b40) malloc: Heap corruption detected, free list is damaged at 0x600001c18da0; *** Incorrect guard value: 0; root.exe(5184,0x1effe9b40) malloc: *** set a breakpoint in malloc_error_break to debug",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12648#issuecomment-1527005980:193,detect,detected,193,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1527005980,1,['detect'],['detected']
Safety,"Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code using a templated class. The functionality is completely unchanged, this is only to avoid code repetition.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12735:140,avoid,avoid,140,https://root.cern,https://github.com/root-project/root/pull/12735,1,['avoid'],['avoid']
Safety,Unset GLEW_FOUND in case of Mac OS X builds with CMake 3.17 (to avoid…,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5357:64,avoid,avoid,64,https://root.cern,https://github.com/root-project/root/pull/5357,1,['avoid'],['avoid']
Safety,"Updates on the failing tests:; * Centos8/multicore: Failure because the same wrong mechanism of changing files happens in `FinalizeSlot` instead of `Finalize` in `SnapshotHelperMT`. Weirdly this didn't happen on my machine with 8 threads but it does on this node with 16 threads, still not sure what's the real difference there.; * MacOS: Both failures happen in the dataframe test, but in the **single threaded** Snapshot, that is in the `Finalize` method of the `SnapshotHelper` class. At first this PR wasn't even considering the single threaded case, that's also why `SnapshotHelper` wasn't modified. So there was this difference between the single threaded Snapshot that still used the weird ChangeFile behaviour (although it shouldn't have triggered a segfault anyway since it's using a plain TFile), and the multithreaded Snapshot that got its behaviour changed to avoid the issue. Considering both types of failures, and the fact that a coherent behaviour across the two Snapshot modes is desirable, I would refactor the usage of `TTree::SetMaxTreeSize` inside of RDF Snapshot in a single common point that both single-thread and multi-thread operations have to go through, if that exists. Or in alternative, the workaround should be done at construction time of both helpers and then removed at destruction time (or in `Initialize` and `Finalize` methods).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6570#issuecomment-720955137:872,avoid,avoid,872,https://root.cern,https://github.com/root-project/root/pull/6570#issuecomment-720955137,1,['avoid'],['avoid']
Safety,"Updates:; * Changed the logic of the `GetMergeableValue` method of the action helpers: now all the information needed to create the `RMergeableValue` should be created inside the function itself, e.g. the `std::function` that merges to values of the same type held by the helper; * Added the logic for merging results of `Histo1D` action. ; * Define `GetMergeableValue` in the `FillHelper` action helper; * Define `RMergeableHisto1D` subclass of `RMergeableValue` to avoid a copy operation; * Add a test for merging two 1D histograms. TODO:; - [x] The test for histograms only works when calling the `Histo1D` action without a `TH1DModel`. In that case `ROOT::Detail::RDF::GetMergeableValue()` returns a `nullptr`. It may be that it's not using the correct helper.; - [x] Add other mergeable values.; - [x] Add docs.; - [x] Apply coding conventions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5552#issuecomment-625840667:467,avoid,avoid,467,https://root.cern,https://github.com/root-project/root/pull/5552#issuecomment-625840667,1,['avoid'],['avoid']
Safety,Updating comment about bug in ccache 3.1.x used together with clang (https://bugzilla.samba.org/show_bug.cgi?id=8118).; In commit was added the detection of version of ccache and extra check to apply flag -Qunused-argument for ccache version less then 3.2.0.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2643:144,detect,detection,144,https://root.cern,https://github.com/root-project/root/pull/2643,1,['detect'],['detection']
Safety,Use Cling Interpreter to get at run time Python executable and avoid a compilation error when running the tutorial,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10253:63,avoid,avoid,63,https://root.cern,https://github.com/root-project/root/pull/10253,1,['avoid'],['avoid']
Safety,Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the ; model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5.; .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13533:54,avoid,avoids,54,https://root.cern,https://github.com/root-project/root/pull/13533,3,['avoid'],"['avoid', 'avoids']"
Safety,Use SafeDelete in several gui classes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7696:4,Safe,SafeDelete,4,https://root.cern,https://github.com/root-project/root/pull/7696,1,['Safe'],['SafeDelete']
Safety,"Use `std::span` instead of `std::vector const&` for function parameters in Minuit2. The motivation is that `std::span` is more general. If the function takes a `std::vector const&`, the inputs are forced to be allocated on the heap. So if one wants to call functions with constant size or even scalar input, that would cause a large overhead. This overhead can be avoided when generalizing with `std::span`. The standalone Minuit2 build files were also changed to consider the; `std::span` backport to C++17 that is already in ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15037:364,avoid,avoided,364,https://root.cern,https://github.com/root-project/root/pull/15037,1,['avoid'],['avoided']
Safety,"Use a single executable to parse all ONNX input files and generate the appropriate headers. This speed up the parsing especially in the case of using ROOT files, since we avoid the initialization/loading of libraries for every file. The CMakeFile is modified to generate automatically the C++ code to parse all input files",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12070:171,avoid,avoid,171,https://root.cern,https://github.com/root-project/root/pull/12070,1,['avoid'],['avoid']
Safety,Use consistent wording of the comments in the different TMVA classification tests to avoid confusion,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12375:85,avoid,avoid,85,https://root.cern,https://github.com/root-project/root/pull/12375,1,['avoid'],['avoid']
Safety,Use different filename in loopdir.C and loopdir11.C to avoid race condition,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11725:55,avoid,avoid,55,https://root.cern,https://github.com/root-project/root/pull/11725,1,['avoid'],['avoid']
Safety,Use direct cast to double to avoid warnings in StringConv.hxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4321:29,avoid,avoid,29,https://root.cern,https://github.com/root-project/root/pull/4321,1,['avoid'],['avoid']
Safety,Used in Qt5WebEngine chrome does not support `await import` statement; in main module body. But this is the only way for now to work with; node.js. To avoid problems just exclude peace of code marked; correspondently. Just a workaround. Backport of #10196,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10197:151,avoid,avoid,151,https://root.cern,https://github.com/root-project/root/pull/10197,1,['avoid'],['avoid']
Safety,Used in Qt5WebEngine chrome does not support `await import` statement; in main module body. But this is the only way for now to work with; node.js. To avoid problems just exclude peace of code marked; correspondingly. Just a workaround. Enables usage of future JSROOT fully based on es6 modules,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10196:151,avoid,avoid,151,https://root.cern,https://github.com/root-project/root/pull/10196,1,['avoid'],['avoid']
Safety,Used in `RCanvas::SaveAs()` method to avoid failure message when image production in ; tutorials macros is not possible. Should fix newly introduced errors in Jenkins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13115:38,avoid,avoid,38,https://root.cern,https://github.com/root-project/root/pull/13115,1,['avoid'],['avoid']
Safety,"Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14266:126,avoid,avoid,126,https://root.cern,https://github.com/root-project/root/pull/14266,2,['avoid'],['avoid']
Safety,"Using template functions in the generated code can cause linker errors, which is avoided with this suggested commit. Backport of https://github.com/root-project/root/pull/15502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15587:81,avoid,avoided,81,https://root.cern,https://github.com/root-project/root/pull/15587,1,['avoid'],['avoided']
Safety,"Using template functions in the generated code can cause linker errors,; which is avoided with this suggested commit. To be backported to the 6.32 branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15502:82,avoid,avoided,82,https://root.cern,https://github.com/root-project/root/pull/15502,1,['avoid'],['avoided']
Safety,"Using the `minuit2_omp` option restricts you to minimizing thread-safe functions, and RooFit models are not thread safe. Also the regular ROOT fitter interface is not thread-safe either, so this option basically breaks your build. It is intended for MInuit2 standalone builds for the specific case where you have an expensive thread-safe function where you want to parallelize the gradient calculation. Adding a warning in the configuration step with CMake hopefully keeps people and package maintainers from using it in the future:; https://github.com/root-project/root/pull/12970",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12940#issuecomment-1581533040:66,safe,safe,66,https://root.cern,https://github.com/root-project/root/issues/12940#issuecomment-1581533040,4,['safe'],['safe']
Safety,"Using valgrind:; ```; cd /builddir/build/BUILD/root-6.24.00/ppc64le-redhat-linux-gnu/tutorials && LD_LIBRARY_PATH=/builddir/build/BUILD/root-6.24.00/ppc64le-redhat-linux-gnu/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 valgrind --suppressions=/builddir/build/BUILD/root-6.24.00/etc/valgrind-root.supp --track-origins=yes /builddir/build/BUILD/root-6.24.00/ppc64le-redhat-linux-gnu/bin/root.exe -l -q -b -n -x hsimple.C -e return; ==3856979== Memcheck, a memory error detector; ==3856979== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==3856979== Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info; ==3856979== Command: /builddir/build/BUILD/root-6.24.00/ppc64le-redhat-linux-gnu/bin/root.exe -l -q -b -n -x hsimple.C -e return; ```; [ skipping some lines that seem irrelevant... ]; ```; ==3856979== Conditional jump or move depends on uninitialised value(s); ==3856979== at 0x4AD8468: TROOT::FindObject(char const*) const (TROOT.cxx:1267); ==3856979== by 0x186D05AF: ???; ==3856979== by 0x186D004F: ???; ==3856979== by 0x6A5C80F: cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (IncrementalExecutor.cpp:376); ==3856979== by 0x6995A4F: cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (Interpreter.cpp:1141); ==3856979== by 0x699F2B3: cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (Interpreter.cpp:1391); ==3856979== by 0x699FD73: cling::Interpreter::echo(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*) (Interpreter.cpp:1043); ==3856979== by 0x6AF224B: cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (MetaSema.cpp:145); ==3856979== by 0x6B02C0F: cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (MetaParser.cpp:319); ==3856979== by 0x6B050AF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8072#issuecomment-845027817:458,detect,detector,458,https://root.cern,https://github.com/root-project/root/issues/8072#issuecomment-845027817,1,['detect'],['detector']
Safety,"V=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 882: Environment variables:; 882: ROOT_HIST=0; 882: Test timeout computed to be: 1500; 882: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 882: error code: -529697949; 882:; 882:; 5/16 Test #882: tutorial-dataframe-df006_ranges-py .......................***Failed 4.42 sec; test 883; Start 883: tutorial-dataframe-df007_snapshot-py. 883: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df007_snapshot.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 883: Environment variables:; 883: ROOT_HIST=0; 883: Test timeout computed to be: 1500; 883: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 883: error code: -529697949; 883:; 883:; 6/16 Test #883: tutorial-dataframe-df007_snapshot-py .....................***Failed 4.47 sec; test 884; Start 884: tutorial-dataframe-df008_createDataSetFromScratch-py. 884: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df008_createDataSetFromScratch.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 884: Environment variables:; 884: ROOT_HIST=0; 884: Test timeout computed to be: 1500; 884: input_line_40:2:211: warning: missing terminating '""' character [-Winvalid-pp-token]; 884: *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::R",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6083#issuecomment-665456331:4669,timeout,timeout,4669,https://root.cern,https://github.com/root-project/root/pull/6083#issuecomment-665456331,1,['timeout'],['timeout']
Safety,VMC update: Added support for user defined sensitive detectors; plus few more features,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1892:53,detect,detectors,53,https://root.cern,https://github.com/root-project/root/pull/1892,1,['detect'],['detectors']
Safety,Variables are detected as used initialized if initialization is done via; a call to the interpreter.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3722:14,detect,detected,14,https://root.cern,https://github.com/root-project/root/pull/3722,1,['detect'],['detected']
Safety,"Very interesting. Only one test failing, which is; ```; 2511/2561 Test #2554: roottest-root-treeformula-retobj-make .............................................................***Failed 22.15 sec; -- TEST COMMAND -- ; cd roottest/root/treeformula/retobj; /usr/bin/timeout -s USR2 270s /usr/bin/gmake cleantest; -- BEGIN TEST OUTPUT --; /usr/bin/gmake -f Makefile test; gmake[1]: Entering directory 'roottest/root/treeformula/retobj'; --- root/treeformula/retobj/retobjTest.ref	2024-06-24 18:56:47.431632484 +0000; +++ root/treeformula/retobj/retobjTest.log	2024-06-24 19:56:39.498105605 +0000; @@ -28,12 +28,10 @@; Warning in <TClass::Init>: no dictionary for class edm::HepMCProduct is available; Warning in <TClass::Init>: no dictionary for class edm::EventProvenance is available; Warning in <TClass::Init>: no dictionary for class edm::BranchEntryDescription is available; -Warning in <TClass::TClass>: no dictionary for class HepMC::GenEvent is available; -Warning in <TClass::TClass>: no dictionary for class HepMC::GenVertex is available; Warning in <TClass::Init>: no dictionary for class HepMC::WeightContainer is available; Warning in <TClass::Init>: no dictionary for class CLHEP::HepLorentzVector is available; Warning in <TClass::Init>: no dictionary for class CLHEP::Hep3Vector is available; -Warning in <TClass::TClass>: no dictionary for class HepMC::GenParticle is available; -Warning in <TClass::TClass>: no dictionary for class HepMC::Flow is available; Warning in <TClass::Init>: no dictionary for class HepMC::Polarization is available; -Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1; +Error in <TTreeFormula::DefinedVariable>: m_signal_process_vertex is not a datamember of HepMC::GenEvent; +Error in <TTreeFormula::Compile>: Bad numerical expression : ""HepMCProduct_PythiaInput__HepMC.obj.evt_.m_signal_process_vertex.@m_particles_out.size()""; +Info in <TSelectorDraw::AbortProcess>: Variable compilation failed: {HepMCProduct_PythiaInput__HepMC.obj.ev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14930#issuecomment-2289396844:265,timeout,timeout,265,https://root.cern,https://github.com/root-project/root/pull/14930#issuecomment-2289396844,1,['timeout'],['timeout']
Safety,"Via special command from client move object in list of primitives to the; end. Reflect changes which are done with ""Bring to front"" menu command; on client side. Supported for objects like `TLine`, `TBox`, `TMarker`, `TPave` and few; others. It is more safer version of `TObject::Pop()` method - do not relies on `gPad`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13089:253,safe,safer,253,https://root.cern,https://github.com/root-project/root/pull/13089,1,['safe'],['safer']
Safety,Viewer3D.h TVirtualX.h ROOT/RDirectoryEntry.hxx ROOT/RIndexIter.hxx strlcpy.h snprintf.h strtok.h root_std_complex.h ROOT/TSeq.hxx TArrayC.h TArrayD.h TArrayF.h TArray.h TArrayI.h TArrayL64.h TArrayL.h TArrayS.h TBits.h TBtree.h TClassTable.h TClonesArray.h TCollection.h TCollectionProxyInfo.h TExMap.h THashList.h THashTable.h TIterator.h TList.h TMap.h TObjArray.h TObjectTable.h TOrdCollection.h TRefArray.h TRefTable.h TSeqCollection.h TSortedList.h TVirtualCollectionProxy.h ESTLType.h RStringView.h TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TMacOSXSystem.h TUnixSystem.h /tmp/workspace/src/core/base/inc/LinkDef.h; 1.	<eof> parser at end of file; 2.	/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__algorithm/ranges_unique_copy.h:51:25: serializing 'std::ranges::__unique_copy::__fn::__get_algo_tag'; Subprocess aborted; make[2]: *** [core/G__Core.cxx] Error 1; make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2; ```; @vgvassilev FYI,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12629#issuecomment-1499102403:11338,abort,aborted,11338,https://root.cern,https://github.com/root-project/root/pull/12629#issuecomment-1499102403,1,['abort'],['aborted']
Safety,WIP: Avoid link on Python on macOS clang,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3396:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/3396,1,['Avoid'],['Avoid']
Safety,"Wait, cpp reference says this about `vector<bool>`. > Does not guarantee that different elements in the same container can be modified concurrently by different threads. Is `vector<bool>` not thread safe?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3135#issuecomment-446356834:199,safe,safe,199,https://root.cern,https://github.com/root-project/root/pull/3135#issuecomment-446356834,1,['safe'],['safe']
Safety,"Warning appears when building on Windows:. ```; Diagnostics.cpp; C:\git\root\interpreter\cling\lib\Utils\Diagnostics.cpp(37,27): warning; C4805: '|': unsafe mix of type 'bool' and type; 'int' in operation; [C:\Soft\root_64\interpreter\cling\lib\Utils\obj.clingUtils.vcxproj]; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13444:150,unsafe,unsafe,150,https://root.cern,https://github.com/root-project/root/pull/13444,1,['unsafe'],['unsafe']
Safety,"Warning like:; ```; geom/geom/src/TGeoManager.cxx:521:4: warning: this ‘if’ clause does not guard... [-Wmisleading-indentation]; 521 | if (fHashVolumes) fHashVolumes->Clear(""nodelete""); SafeDelete(fHashVolumes);; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8316:186,Safe,SafeDelete,186,https://root.cern,https://github.com/root-project/root/pull/8316,1,['Safe'],['SafeDelete']
Safety,"Warnings appear due to PEP 590 adding the tp_vectorcall field to some; structs which remain uninitialized in CPyCppyy. Following the conventions upstream, because the standard ensures a; zero-initialization, it's safe the leave them uninitialized such as also; done in the Python codebase itself. See discussion here:; https://bitbucket.org/wlav/cppyy/issues/186/warnings-with-python-38-due-to-vectorcall",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4737:213,safe,safe,213,https://root.cern,https://github.com/root-project/root/pull/4737,1,['safe'],['safe']
Safety,"We are currently discussing what the next ROOT release version number will be, and if we want to remove the deprecated methods now. To avoid the annoying warnings, change the check to 6.33.02; *if* we release a development release later this year, it would likely be called 6.33.01 or 6.33.02. Afterwards master would be bumped to 6.33.03 and we would again be reminded to remove the methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15148:135,avoid,avoid,135,https://root.cern,https://github.com/root-project/root/pull/15148,1,['avoid'],['avoid']
Safety,"We are working on LCFIPlus, a flavor tagging software used for linear collider (ILC/CLIC) studies.; We use multi-class BDT with output of b-tag, c-tag, and uds-tag (3 outputs).; We also separate events into four categories according to number of reconstructed vertices; (0-vtx, 1-vtx, 1-vtx+1-partial-vtx, and 2-vtx) which are trained and evaluated independently.; In the previous release with TMVA 4.1.0 we can use the output of BDTs as variables common to ; all categories, because the average value of eg. b-tag output from each BDT; over full training samples reflects the fraction of b events in the training samples.; (eg. if we have 80% of b and 20% of c + uds, we have the avarage value of .8 for b-tag output.); We found this feature is not preserved in the latest releases (after TMVA 4.1.2); due to the normalization procedure introduced in that version.; In result this causes significant degradation of our flavor tagging performance,; which was reported from a user using latest ROOT/TMVA.; We also found that just switching off the normalization procedure in the ROOT 6.06/TMVA 4.2.1; gives very similar performance to the ROOT 5.28/TMVA 4.1.0.; Therefore, we need to switch off the normalization to keep the performance,; which is realized in an option implemented in this pull request.; We hope this will be accepted, to avoid us from patching this to every release of ROOT; we use for studies using LCFIPlus flavor tagging feature.; We set this option to non-default, so current users should not be affected by this change.; ![btag-100k-root-6 06 02-skipnorm](https://cloud.githubusercontent.com/assets/7939934/18453216/0f501eb0-78f3-11e6-892c-912f9b68553d.png); B-tag performance with the SkipNormalization option; ![btag-100k-root-6 06 02-noskipnorm](https://cloud.githubusercontent.com/assets/7939934/18453215/0f4e6b60-78f3-11e6-94bd-b4be9631937d.png); B-tag performance without the SkipNormalization option",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/244:1338,avoid,avoid,1338,https://root.cern,https://github.com/root-project/root/pull/244,1,['avoid'],['avoid']
Safety,We can avoid quite some code repetition by employing a single `using` statement to ensure that the base class methods are not hidden.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11915:7,avoid,avoid,7,https://root.cern,https://github.com/root-project/root/pull/11915,1,['avoid'],['avoid']
Safety,We can change the code in the ROOT facade such that `gROOT` is always; retrieved via cppyy. This was done for `gInterpreter` and `gSystem`; already anyway. This is part of the general campaign of avoiding pythonization code in C++.; The experience of the last weeks has clearly shown that this is less robust than having the code on the Python side (see for example the discussion in #15788).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15833:196,avoid,avoiding,196,https://root.cern,https://github.com/root-project/root/pull/15833,1,['avoid'],['avoiding']
Safety,"We can not access the original ticket. What is the actual hardware that was being accessed? What is mounted as a local -appearing file system or was it being accessed via a remote protocols (i.e the file name were prefixed with root://...). In first approximation, I don't how we could detect your use case? If you were able to set `ulimit` locally to whatever limit fit your need, hadd would automatically adjust.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11276#issuecomment-1239603727:286,detect,detect,286,https://root.cern,https://github.com/root-project/root/issues/11276#issuecomment-1239603727,1,['detect'],['detect']
Safety,"We can't use the interpreter when generating a PCM as this would; generate AST nodes which then would end up in the module, which; is causing a long chain of modules (such as redefinitons as we; suddenly have the same cling warpper function multiple times). In this code path we seem to always have a number that we want; to convert to a string. So let's just use atol instead here if; the argument is just a number, which should avoid the issue with; the generated code. As we also now check if the input is a number, I added an assert; that verifies we only call atol when the string is actually a; number.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/807:430,avoid,avoid,430,https://root.cern,https://github.com/root-project/root/pull/807,1,['avoid'],['avoid']
Safety,"We didn't want to go for `StreamedField` because it may sound to close to streaming in the sense of XRootD streaming. I think once we are deep in the serialization context, ""streamed"" has not that ambiguity anymore. If we want to avoid ""streamed"", we have to go for a longer name, e.g. `rntplStreamerMode(true)` as a dictionary option.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16776#issuecomment-2443887708:230,avoid,avoid,230,https://root.cern,https://github.com/root-project/root/pull/16776#issuecomment-2443887708,1,['avoid'],['avoid']
Safety,We disabled that test in https://github.com/root-project/root/pull/14281. Relevant test failure output:; ```; ROOT::TestSupport::ForbidDiagnostics::handler(): Diagnostic in 'TUnixSystem::ACLiC':; creating shared library /github/home/ROOT-CI/build/core/metacling/test/concurrent_load_unload_one_lib_per_thread_4_cpp.so; terminate called after throwing an instance of 'std::bad_alloc'; what(): std::bad_alloc; CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14121:522,abort,aborted,522,https://root.cern,https://github.com/root-project/root/issues/14121,1,['abort'],['aborted']
Safety,"We get these symbols even for a simple hello world message. While it is not clear if we can skip all weak undefined symbols, we can certainly skip those which get resolved to libgcj.so and libitm.so. Oddly enough gcc emits a weak undefined symbol to _Jv_RegisterClasses (resolved in libgcj.so) which is some gcc/java library. _ITM_deregisterTMCloneTable and _ITM_registerTMCloneTable are emitted because (resolved in libitm.so) of pointer arithmetics for transactional memory support. The current understanding is that we can safely omit these when harvesting library dependencies. This should fix the rootbench builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4254:526,safe,safely,526,https://root.cern,https://github.com/root-project/root/pull/4254,1,['safe'],['safely']
Safety,"We have to avoid using the CPyCppyy internals in the ROOT pythonization; libray. Otherwise, the ROOT pythonizations will break when updating to the; new CPyCppyy, where the internals have changed a lot. This commit makes sure the internals are not used where it can easily; avoided by using the public CPyCppyy API, or using the C Python API; directly instead of some private compatibility macros defined in; CPyCppyy (that were necessary in the past to support both Python 2 and; 3). Furthermore, the private sources of `CPyCppyy` are now not publically; exposed anymore at the CMake level. This means that we are now forced to; include them via relative paths in the ROOT repository. This makes is; much easier to spot remaining usage of the internal headers (it is quite; hard to tell otherwise that `Utility.h` is a private header from; CPyCppyy). Better exposing this should help in the discussion about how; the get rid of the remaining usage of private headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14414:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/14414,2,['avoid'],"['avoid', 'avoided']"
Safety,We implement a workaround for ctest. ROOT_ADD_TEST cmake macro adds a test executable by invoking CMAKE_COMMAND -DCMD=... This breaks our FindLibraryName function which depends on dladdr and the cmake executable confuses it. This branch is not taken outside of ctest where the code just works. This was broken before but worked because we scanned all possible dynamic paths for rdict files which is redundant.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3747:399,redund,redundant,399,https://root.cern,https://github.com/root-project/root/pull/3747,1,['redund'],['redundant']
Safety,"We might be in a situation where we linked the library into an executable and; our trigger function is inside it. There is no point in trying to load rdict; and pcm files as it will fail. In that case we exit early avoiding the; invalid state pointed by an assert. This patch is another try to fix the assert in the incrementals. @Axel-Naumann, I have tested and this patch fixes the assert. However it does not fix the test failure. I checked with a local alternative patch which did not have the early exit but just avoided the LoadPCM section and the test fails in the same way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3896:215,avoid,avoiding,215,https://root.cern,https://github.com/root-project/root/pull/3896,2,['avoid'],"['avoided', 'avoiding']"
Safety,"We need a type that means ""this is a c-style-array stored in a TTree branch"", because that case is special: we need to use `TTreeReaderArray` for reading and we need to take special care to specify the branch title correctly when writing. `std::vector` is a no go because it is a type of its own that is perfectly good to read and write.; Template functions like `func` cannot be passed to `Filter` or `Define` because the nodes would not be able to detect the type of the inputs and outputs from the function signature. It would be nice to be able to write; ```; tdf.Define(""front"", [](int arr[]) { return arr[0]; }, {""arr""});; ```; but that's not valid syntax. I think it's reasonable to have a specific type that has the meaning specified above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1173#issuecomment-336085160:450,detect,detect,450,https://root.cern,https://github.com/root-project/root/pull/1173#issuecomment-336085160,1,['detect'],['detect']
Safety,We need this to avoid build errors in `yoda` and test root master in CMSSW CXXModules integration builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4467#issuecomment-538276379:16,avoid,avoid,16,https://root.cern,https://github.com/root-project/root/pull/4467#issuecomment-538276379,1,['avoid'],['avoid']
Safety,"We need to enable the read/write lock as soon as possible. I also think that instead of only using it in TROOT, we should TList thread-safe as well. We could use [RCU](https://lwn.net/Articles/262464) instead of locks, although the differences are minimal.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/719#issuecomment-312226076:135,safe,safe,135,https://root.cern,https://github.com/root-project/root/pull/719#issuecomment-312226076,1,['safe'],['safe']
Safety,We need to have class.rules during configuration time to avoid silent error during generation of dictionary: Error in <TClass::ReadRules()>: Cannot find rules,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4876:57,avoid,avoid,57,https://root.cern,https://github.com/root-project/root/pull/4876,1,['avoid'],['avoid']
Safety,We needed to this change for avoiding infinite loop when building with cling modules,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2685:29,avoid,avoiding,29,https://root.cern,https://github.com/root-project/root/pull/2685,2,['avoid'],['avoiding']
Safety,We really need these symbols to be hidden. Solves; https://github.com/root-project/root/issues/12170. ```; Unable to find target for this triple (no targets are registered) *** Break *** abort; ```; where the llvm of PyTorch ends up using the RegisterTarget function of the llvm of cling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12179:187,abort,abort,187,https://root.cern,https://github.com/root-project/root/pull/12179,1,['abort'],['abort']
Safety,We see several timeouts when running in coverage mode; this might help. We also really do not care about coverage of interpreter/: there are dedicated test suites that are not run as part of testing ROOT. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13490:15,timeout,timeouts,15,https://root.cern,https://github.com/root-project/root/pull/13490,1,['timeout'],['timeouts']
Safety,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff; diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py; index cf0d095e7a..765aea1c56 100644; --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py; +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py; @@ -17,7 +17,7 @@ import types; ; import concurrent.futures; ; -from typing import TYPE_CHECKING; +from typing import Iterable, TYPE_CHECKING; ; from DistRDF.Backends import build_backends_submodules; ; @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):; return logger; ; ; -def RunGraphs(proxies):; +def RunGraphs(proxies: Iterable) -> int:; """"""; Trigger the execution of multiple RDataFrame computation graphs on a certain; distributed backend. If the backend doesn't support multiple job; @@ -83,6 +83,9 @@ def RunGraphs(proxies):; actions belonging to different RDataFrame graphs will be; triggered to avoid useless calls.; ; + Return:; + (int): The number of unique computation graphs executed by this call.; +; Example:; ; @code{.py}; @@ -99,7 +102,7 @@ def RunGraphs(proxies):; ]; ; # Execute the 3 computation graphs; - RunGraphs(histoproxies); + n_graphs_run = RunGraphs(histoproxies); # Retrieve all the histograms in one go; histos = [histoproxy.GetValue() for histoproxy in histoproxies]; @endcode; @@ -121,6 +124,8 @@ def RunGraphs(proxies):; futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]; concurrent.futures.wait(futures); ; + return len(uniqueproxies); +; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13167#issuecomment-1619699859:1070,avoid,avoid,1070,https://root.cern,https://github.com/root-project/root/pull/13167#issuecomment-1619699859,1,['avoid'],['avoid']
Safety,"We should not print a warning in this case, but it can safely be ignored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6848#issuecomment-731195832:55,safe,safely,55,https://root.cern,https://github.com/root-project/root/issues/6848#issuecomment-731195832,1,['safe'],['safely']
Safety,"We should put the Python version check at the right place. Right now, the configuration logs tell you that ROOT requires Python; 3.0, because there is no minimum version yet, which can be misleading. Also, remove some redundant comments about the minimum C++ standard for `root7` and `webgui`. This PR should maybe be backported in one of the bulk backports, so the divergence between 6.32 and `master` doesn't increase too much.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15168:218,redund,redundant,218,https://root.cern,https://github.com/root-project/root/pull/15168,1,['redund'],['redundant']
Safety,"We still have to avoid extra iteration happening:; ```; [/Volumes/HD2/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so] clang::ASTReader::PassInterestingDeclsToConsumer() (no debug info); [/Volumes/HD2/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so] clang::ASTReader::FinishedDeserializing() (no debug info); [/Volumes/HD2/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so] clang::MultiplexExternalSemaSource::FinishedDeserializing() (no debug info); [/Volumes/HD2/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so] clang::DeclContext::LoadLexicalDeclsFromExternalStorage() const (no debug info); [/Volumes/HD2/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so] clang::DeclContext::decls_begin() const (no debug info); [/Volumes/HD2/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so] TClingClassInfo::TClingClassInfo(cling::Interpreter*, bool) (no debug info); [/Volumes/HD2/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so] TClingDataMemberInfo::TClingDataMemberInfo(cling::Interpreter*, clang::ValueDecl const*, TClingClassInfo*) (no debug info); [/Volumes/HD2/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so] TCling::DataMemberInfo_Factory(void const*, ClassInfo_t*) const (no debug info); [/Volumes/HD2/build/jenkins/workspace/root-pullrequests-build/build/lib/libCore.so] TListOfDataMembers::Get(void const*) (no debug info); [/Volumes/HD2/build/jenkins/workspace/root-pullrequests-build/build/lib/libCore.so] TListOfDataMembers::FindObject(char const*) const (no debug info); [/Volumes/HD2/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so] TCling::HandleNewDecl(void const*, bool, std::__1::set<TClass*, std::__1::less<TClass*>, std::__1::allocator<TClass*> >&) (no debug info); [/Volumes/HD2/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so] TCling::UpdateListsOnCommitted(cling::Trans",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1547#issuecomment-366080627:17,avoid,avoid,17,https://root.cern,https://github.com/root-project/root/pull/1547#issuecomment-366080627,1,['avoid'],['avoid']
Safety,We thought that when you wrote `Those were not intended to be stored in the pcm at all. Duplication is avoid because to define them we parse which obviously does not work with pcm merging.` to Oksana it meant that you thought TEmulatedTuple is not needed to pcm?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2615#issuecomment-420974896:103,avoid,avoid,103,https://root.cern,https://github.com/root-project/root/pull/2615#issuecomment-420974896,1,['avoid'],['avoid']
Safety,"We try to avoid merge commits inside PRs, please use rebase instead. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2117#issuecomment-399421600:10,avoid,avoid,10,https://root.cern,https://github.com/root-project/root/pull/2117#issuecomment-399421600,1,['avoid'],['avoid']
Safety,"We want to avoid rebasing branches from forks altogether, and just use patches only. So once my PR to CPyCppyy is merged, these lines can be removed from the sync script. It's my fault that it didn't get merged yet. I still have to implement a unit test :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15151#issuecomment-2278395982:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/15151#issuecomment-2278395982,1,['avoid'],['avoid']
Safety,"We will probably see an increasing amount of these failures with; C++ modules as we now deserialize all declarations instead of just; the PCH ones. To safe us a lot of debugging time on where to push; the needed transaction, let's directly print the stack trace here; in the rare case that we crash here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/921:151,safe,safe,151,https://root.cern,https://github.com/root-project/root/pull/921,1,['safe'],['safe']
Safety,"WebGui6 canvas: avoid TVirtualX, mark web canvas as batch",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2805:16,avoid,avoid,16,https://root.cern,https://github.com/root-project/root/pull/2805,1,['avoid'],['avoid']
Safety,"Weird timeout in `dataframe_snapshot`, but unrelated. Merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10001#issuecomment-1059089575:6,timeout,timeout,6,https://root.cern,https://github.com/root-project/root/pull/10001#issuecomment-1059089575,1,['timeout'],['timeout']
Safety,"Well I did with 'rebase -i', I hope this solve the merge removing, it look like it did. Juanfe. 2017-11-27 10:09 GMT-05:00 Danilo Piparo <notifications@github.com>:. > Hi @juanfe <https://github.com/juanfe> , thanks for addressing the; > comments. Would you remove the merge commits from the PR? We try to avoid; > those in our code base.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/pull/1364#issuecomment-347210847>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AA_xwE2Lf0pcds4dFX5GUu5bfrJo1NTbks5s6tC3gaJpZM4QqKGu>; > .; >",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1364#issuecomment-347267424:306,avoid,avoid,306,https://root.cern,https://github.com/root-project/root/pull/1364#issuecomment-347267424,1,['avoid'],['avoid']
Safety,Well also depending on what the user code is going to DO with the TFile object there can be other thread safety issues. (ie multiple threads might end up with pointers to the same TFile object which was being managed by TTreeProcessorMT from a different thread),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10318#issuecomment-1091419639:105,safe,safety,105,https://root.cern,https://github.com/root-project/root/pull/10318#issuecomment-1091419639,1,['safe'],['safety']
Safety,"Well it passes a few headers by default (the one needed for compilation the dictionary code infrastructure .. which include <vector>). > leads to an infinite loop. Interestingly, it is not GenerateDictionary that is going into an infinite loop but rootcling that is failing on processing the 'incomplete' header. i.e. ```gInterpreter->GenerateDictionary(""std::vector<std::array<int, 5>>"", ""TNamed.h"")``` avoid the proposed test **and still** get rootcling into a infinite loop. You see this yourself, suspending the root.exe process and attaching (or re-running) the rootcling process running the time. (The linkdef parser seems to have problem with the 'unknown' type vector<array....>). Cheers,; Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1724#issuecomment-371922098:404,avoid,avoid,404,https://root.cern,https://github.com/root-project/root/pull/1724#issuecomment-371922098,1,['avoid'],['avoid']
Safety,"Well that's a whole different project I guess :sweat_smile: the point of this PR is showcasing generality of reading data in TDF -- parallelism and (runtime) type safety included. > How did you prevent something 'similar' with the new parser?. TDataSource allows parallel reading by design. It provides to TDF a cursor per processing slot, and each processing slot updates the entry that the cursor points to independently.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1160#issuecomment-335499653:163,safe,safety,163,https://root.cern,https://github.com/root-project/root/pull/1160#issuecomment-335499653,1,['safe'],['safety']
Safety,"Well the other question is whether we could make this behaviour the default for TTreeProcessorMT or at least for RDataFrame. Depending on the use case, I'm not sure things will work correctly anyways when using a TRef pointing to a TFile which is being read by TTreeProcessorMT. In particular because different clusters from a single file may be processed simultaneously by different threads, it won't be deterministic which particular TFile object is registered in the global TProcessUUID for a given UUID, and any attempt to make use of this is not likely to be thread safe...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10318#issuecomment-1088455084:571,safe,safe,571,https://root.cern,https://github.com/root-project/root/pull/10318#issuecomment-1088455084,1,['safe'],['safe']
Safety,"Well, I doubt there are some out-of-band data being sent/received. @rodwalker, @rdschaffer would it be possible to reproduce the problem with xrootd client logs switched on (`XRD_LOGLEVEL=Dump`)?. Regarding ABI compatibility, we ensure ABI forward compatibility, meaning that it is safe to link an application built with an older version of xrootd, with a newer version of the library (e.g. one can build his application with say `4.11.0` and then link with `4.12.0`). The opposite is not possible. Of course this applies to all releases from `4.x.x` series, the ABI has been broken when we moved to XRootD5.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-745569137:282,safe,safe,282,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-745569137,1,['safe'],['safe']
Safety,"Well, it was never needed as such ... it was just to make includes simpler and avoid ifdefs in every TGL file :) I'm just saying you had to change every file that used it and this is really not necessary.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4095#issuecomment-535595924:79,avoid,avoid,79,https://root.cern,https://github.com/root-project/root/pull/4095#issuecomment-535595924,1,['avoid'],['avoid']
Safety,"What I can try is to remove ; ```; #ifdef WIN32; #include ""Windows4Root.h""; #endif; ```; Maybe this code is redundant?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4095#issuecomment-585678811:108,redund,redundant,108,https://root.cern,https://github.com/root-project/root/pull/4095#issuecomment-585678811,1,['redund'],['redundant']
Safety,"What is fixed now? @Josiah1 's homebrew build issue? That's what this ticket is about - the GUI part is unrelated, please don't mix topics to avoid confusion.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12648#issuecomment-1528815163:142,avoid,avoid,142,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1528815163,1,['avoid'],['avoid']
Safety,"When CUDA is installed on macOS, `clang -v` prints also the version of CUDA that is found, which breaks version detection. As a workaround, `clang --version` prints the same information, but without printing the CUDA version. Fixes: [ROOT-9678](https://sft.its.cern.ch/jira/browse/ROOT-9678).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3926:112,detect,detection,112,https://root.cern,https://github.com/root-project/root/pull/3926,1,['detect'],['detection']
Safety,"When PR #4279 was initially sent on Aug 25th, the search for Python was; moved to RootBuildMacros in order to avoid a build failure due ot the; search for another package and the declaration of one of the new CMake; variables.; This seem not to be a problem anymore (something changed in the; meantime?), so the search for Python can be put back to the original; place.; This could also fix the tests failing with cxx17 due to a mismatch; between Python executable and libraries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4686:110,avoid,avoid,110,https://root.cern,https://github.com/root-project/root/pull/4686,1,['avoid'],['avoid']
Safety,"When RooFit's proxies were made more type safe, a typedef was introduced; to make the most type-general proxy equivalent to RooFit's previous; ""RooRealProxy"". This ensures backward compatibility.; However, the typedef and not the actual template instantiation has to be; mentioned in LinkDef.h. Otherwise, users will get a warning when reading; files. This fixes the warning that e.g. appears in #5530.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5536:42,safe,safe,42,https://root.cern,https://github.com/root-project/root/pull/5536,1,['safe'],['safe']
Safety,"When a continuous PDF is fit to binned data, bins need to be sampled more fine grained to avoid biases. This fixes; ROOT-3874; ROOT-3635. Note that the first commits before `AddRooBinSamplingPdf` are in #6693, so no need to review those.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6694:90,avoid,avoid,90,https://root.cern,https://github.com/root-project/root/pull/6694,1,['avoid'],['avoid']
Safety,"When building ROOT on slc6, it will detect and use xz (version 4.999.9) provided by OS, which is reported to have compatibility issues (`R__unzipLZMA: error 8 in lzma_code`). The proposed change fixes that by using CMake's own module (present since CMake 3.0.2) for detecting xz *and* checking it's version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3838:36,detect,detect,36,https://root.cern,https://github.com/root-project/root/pull/3838,2,['detect'],"['detect', 'detecting']"
Safety,"When calling `TObject::kOverwrite`, the data itself is not actually replaced--the metadata is changed to avoid multiple cycles, but the data persists invisibly. Similar for `Purge`. This documents that behavior.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5097:105,avoid,avoid,105,https://root.cern,https://github.com/root-project/root/pull/5097,1,['avoid'],['avoid']
Safety,"When cling is compiled standalone against an external instance of LLVM and clang, cling cannot be reliably used. This is because ```createCI()``` throws an error about a non-existing clang resource directory inside the cling directories and a crash occurs shortly afterwards, when a code to be interpreted is entered. The reason of the above seems to be the inability of cling and its build system to flag properly that there is no built-in LLVM/clang and therefore cling should use the external one instead. This PR fixes it by introducing the ```LLVM_PATH``` pre-processor definition which is populated automatically by CMake with the detected LLVM directory as soon as both ```builtin_llvm``` and ```builtin_clang``` are off. If I should have done this in a different way, there are pieces of code where ```LLVM_PATH``` should be also used but it isn't (or vice versa), or you have any other comments, I'm happy to hear your suggestions :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13175:637,detect,detected,637,https://root.cern,https://github.com/root-project/root/pull/13175,1,['detect'],['detected']
Safety,"When cmake runs, detect and write chrome version into the rootrc file. When headless browser is required - switch `--headless=new` only for detected new version of chrome",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14800:17,detect,detect,17,https://root.cern,https://github.com/root-project/root/pull/14800,2,['detect'],"['detect', 'detected']"
Safety,"When composing the expressions to jit autoparsing is redundant as we; know what and when to synthesize. This patch has two effects, first it limits the recursive behavior of; autoparse and autoload (useful for modules); and secondly avoids deep call; chains of virtual function calls. EDIT: Rationale -- I was working on a new, cxxmodules-based implementation of TCling::GetClassSharedLibs which does not rely on rootmap files. I had to debug a few failures in RDF and I noticed the recursive calls to autoparse and autoload always without success. I thought it might be a simplification (and performance optimization) if we disabled that part.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3765:53,redund,redundant,53,https://root.cern,https://github.com/root-project/root/pull/3765,2,"['avoid', 'redund']","['avoids', 'redundant']"
Safety,"When creating histograms without adding them to gDirectory, do not use; global TH1::fgDirectoryStatus flag, since it is not thread safe and use instead,; as suggested by Philippe, TDirectory::TContext.; By creating a TDirectory::TContext witha null directory, gDirectory is set in the current context to; a nullptr and the corresponding histograms will not be added to gDirectory. Fix this for TGraph, TGraph2D and TEfficiency. This should finally fix ROOT-8095",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6514:131,safe,safe,131,https://root.cern,https://github.com/root-project/root/pull/6514,1,['safe'],['safe']
Safety,"When creating the test data sets for the CNN and RNN tutorials, it is better to create the TTree attached to the output file so we can avoid a potential issue when deleting the file and the TTree's",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14368:135,avoid,avoid,135,https://root.cern,https://github.com/root-project/root/pull/14368,1,['avoid'],['avoid']
Safety,"When deleting a TTree, we delete the list of friends and aliases. Their deletion is broadcasted; through RecursiveRemove which eventually reached back to the original TTree.; And if TTree::RecursiveRemove then tries to call RecursiveRemove on those deleted list ... then; disaster follows ... in the form of:. ```; pure virtual method called; terminate called without an active exception; Aborted (core dumped); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5924:389,Abort,Aborted,389,https://root.cern,https://github.com/root-project/root/pull/5924,1,['Abort'],['Aborted']
Safety,When getting the HIstogram associated to a TGraph avoid to add it by default first in gDirectory by using TH1::AddDirectory(false).; This fixes ROOT-8095. This is already the case in TGraph2D::GetHistogram,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6493:50,avoid,avoid,50,https://root.cern,https://github.com/root-project/root/pull/6493,1,['avoid'],['avoid']
Safety,"When importing data from a TTree in a RooDataSet, if some of the branches are not existing in the Tree ; do not import any data and make an empty dataset. ; This avoid importing the variables using the current values, which will be identical for every event.; This fixes ROOT-5112. After https://github.com/root-project/root/commit/b5c2fb7909fbd1e483a3e17b21d24093409d67c1 an error message was printed, but this can pass easly unnoticed. . If one needs to add ad-hoc some column to the dataset, it is also very easy to add branches to a TTree, using RDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7347:162,avoid,avoid,162,https://root.cern,https://github.com/root-project/root/pull/7347,1,['avoid'],['avoid']
Safety,"When performing multi-thread reads of ROOT files, we need to pick the number; of TBB tasks among which we will divide the dataset. Our heuristic is ""try to produce around `T = N/ntrees` tasks per tree per; worker thread"": we don't know the number of clusters in each tree before; we open the files, so we don't know the total number of clusters upfront.; Instead we set a ""desired value"" of T tasks per tree and per thread, and; then when each thread opens a file it tries to make T tasks out of it (if; the file turns out to be too small, it might end up producing _less_ tasks than; desired. If we are processing `M > N` small files, we might end up producing; _more_ tasks per worker than N). N is a free parameter, and it represents the desired total number of; tasks per worker. If N is too low, parallelism will be too coarse-grained; and we might get imbalance/tails with bad parallelization.; The higher N is, the more CPU time we spend in task setup/teardown. Empirically, I believe we have set N too high (before this patch we set; it to 24). We often see runtime improvements in benchmarks by setting it; to a lower value, e.g. 10.; Again from experience, N == 10 should be a high-enough value to avoid; load imbalance between threads while it significantly reduces the amount; of tasks spawned (and the overhead that comes with it).; Therefore this patch sets N to 10. More discussion:; - https://mattermost.web.cern.ch/root/pl/8ay6my4pwbru7kzqs97f8xcdre; - https://docs.oneapi.com/versions/latest/onetbb/tbb_userguide/Task-Based_Programming.html",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8565:1208,avoid,avoid,1208,https://root.cern,https://github.com/root-project/root/pull/8565,1,['avoid'],['avoid']
Safety,When run C++17 kernel in Jupyter notebook cause some errors; due to currently clang-5.0 in https://root.cern.ch/download/cling/ is not; support c++17.; So add support to C++1z for Jupyter kernel and we can try some new; features in Jupyter notebook. for avoiding following error:. [I 05:46:38.253 NotebookApp] Kernel restarted:; d3413fa0-7046-4b63-912b-a286610eacc1; error: invalid value 'c++17' in '-std=c++17'; note: use 'c++98' or 'c++03' for 'ISO C++ 1998 with amendments' standard; note: use 'gnu++98' or 'gnu++03' for 'ISO C++ 1998 with amendments and; GNU extensions' standard; note: use 'c++11' for 'ISO C++ 2011 with amendments' standard; note: use 'gnu++11' for 'ISO C++ 2011 with amendments and GNU; extensions' standard; note: use 'c++14' for 'ISO C++ 2014 with amendments' standard; note: use 'gnu++14' for 'ISO C++ 2014 with amendments and GNU; extensions' standard; note: use 'c++1z' for 'Working draft for ISO C++ 2017' standard; note: use 'gnu++1z' for 'Working draft for ISO C++ 2017 with GNU; extensions' standard,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/952:254,avoid,avoiding,254,https://root.cern,https://github.com/root-project/root/pull/952,1,['avoid'],['avoiding']
Safety,"When the EDM value in Migrad is NaN, it nevertheless reports convergence, because failure to converge is detected with the condition (edm > edmval) which fails (wrongly) if edm is NaN. The added code aborts the minimization at the earliest point if edm is NaN.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6415:105,detect,detected,105,https://root.cern,https://github.com/root-project/root/pull/6415,2,"['abort', 'detect']","['aborts', 'detected']"
Safety,"When the Min or Max actions are jitted, their result type is always; double, independently of the column type. If the column type happens; to be of a different type, std::min won't compile because template; parameter type deduction is ambiguous.; We now always explicitly cast the arguments of std::min to the desired; result type to avoid the ambiguity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6436:334,avoid,avoid,334,https://root.cern,https://github.com/root-project/root/pull/6436,1,['avoid'],['avoid']
Safety,"When the Min or Max actions are jitted, their result type is always; double, independently of the column type. If the column type happens; to be of a different type, std::min won't compile because template; parameter type deduction is ambiguous.; We now always explicitly cast the arguments of std::min to the desired; result type to avoid the ambiguity. This fixes #6435.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6437:334,avoid,avoid,334,https://root.cern,https://github.com/root-project/root/pull/6437,1,['avoid'],['avoid']
Safety,"When the column name contains a dot, we replace it with an underscore; and use the modified name as corresponding variable name for jitted; Defines/Filters.; To avoid potential name clashes with pre-existing columns, the; modified name is now prefixed with ""__tdf_arg_"", as it was already; the case before the latest refactoring of jitting. I'd like to introduce a test for this case, but I can't because of a different issue:; given a branch defined as `t.Branch(""v"", &v, ""a/I:b/I"")`, `Define(""a"", ""v.a"")` does not work: `""v""` comes before than `""v.a""` in the list of branches that we create, so it matches first, and later TDF complains that `""v""` is not a branch. @etejedor this is in the new `GetBranchNames`, do you think it might be an easy fix?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1857:161,avoid,avoid,161,https://root.cern,https://github.com/root-project/root/pull/1857,1,['avoid'],['avoid']
Safety,"When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:; ```; : Preparing the Decorrelation transformation...; : Preparing the Gaussian transformation...; TFHandler_PyTorch : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]; : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]; : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]; : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]; : -----------------------------------------------------------; TFHandler_PyTorch : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]; : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]; : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]; : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]; : -----------------------------------------------------------; : Split TMVA training data in 6400 training events and 1600 validation events; : Print Training Model Architecture; : Option SaveBestOnly: Only model weights with smallest validation loss will be stored; Program aborted due to an unhandled Error:; Unable to find target for this triple (no targets are registered) *** Break *** abort; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12170:1123,abort,aborted,1123,https://root.cern,https://github.com/root-project/root/issues/12170,2,['abort'],"['abort', 'aborted']"
Safety,"When using C++11, the cache used by G__FastAllocString utilizes; a non-locking thread safe circular buffer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/34:86,safe,safe,86,https://root.cern,https://github.com/root-project/root/pull/34,1,['safe'],['safe']
Safety,"When using `TLegend::AddEntry()`, it is not necessary to get a pointer to the plotted object via `RooPlot::findObject()`. One can just use the `AddEntry` overload that takes the name as a string, and then looks up the object in the plot itself. This should be updated to avoid that users copy-paste overly verbose code from the tutorials. I noticed this when copy pasting code myself for a RooFit tutorial. Also fixes a typo in `rf711_lagrangianmorph.py`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11555:271,avoid,avoid,271,https://root.cern,https://github.com/root-project/root/pull/11555,1,['avoid'],['avoid']
Safety,"When using `builtin_openssl=ON`, CMake erroneously exports the builtin static libraries in `ROOTConfig-targets.cmake`, which causes problems with dependent projects. In order to avoid this, we need `Net` and `RHTTP` to use SSL as a private dependency. Since CMake requires `target_link_libraries()`; to either be all-plain (as before) or all-keyword (required to allow `PRIVATE` linking), we need to move the build system to use all-keyword linking only. Fixes: [ROOT-9532](https://sft.its.cern.ch/jira/browse/ROOT-9532).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2323:178,avoid,avoid,178,https://root.cern,https://github.com/root-project/root/pull/2323,1,['avoid'],['avoid']
Safety,"When using option ""x"" for TPrincipal::MakeHistograms(), the histogram is made with the number of bins as calculated by:; `Int_t xbins = fNumberOfDataPoints/100;`; If the number of data points is less than 100, this will try to make a histogram with 0 bins. The code still functions, as TH1 itself compensates by setting the number of bins to 1, and issuing a warning. But clearly TPrincipal could be smarter to avoid the unnecessary / unhelpful warning. The same happens for the calculation of `dbins` with the ""d"" option. Sidenote: this was a non-urgent issue I raised 7 years ago, but if no one else has been complaining, it's clearly a low priority ;-). https://sft.its.cern.ch/jira/browse/ROOT-8238. -Gene",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12926:411,avoid,avoid,411,https://root.cern,https://github.com/root-project/root/pull/12926,1,['avoid'],['avoid']
Safety,"When we run into an unkown identifier that is a namespace, we don't; really need to load its corresponding modules. Instead, we create a new; module that forward declared all namespaces and always load it first. By; doing so, we can avoid loading a lot of unnecessary modules. Signed-off-by: Jun Zhang <jun@junz.org>",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10910:233,avoid,avoid,233,https://root.cern,https://github.com/root-project/root/pull/10910,1,['avoid'],['avoid']
Safety,"When wrong-formatted TMessage is received, length of buffer may be 0.; As result, buffer may not be allocated at all.; One should avoid that in such case memory is accessed",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4551:130,avoid,avoid,130,https://root.cern,https://github.com/root-project/root/pull/4551,1,['avoid'],['avoid']
Safety,"When you are using large precision number, you blow up output XML files.; One can use compression method from TBufferText.; I use it to control size of output JSON/XML files and avoids output like `17.000000000000000`. Instead `17` will be produced. I can provide code for that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1901#issuecomment-383592870:178,avoid,avoids,178,https://root.cern,https://github.com/root-project/root/pull/1901#issuecomment-383592870,1,['avoid'],['avoids']
Safety,"While TCanvas, shown in web-browser, marked as batch canvas, all customs object painting performed via gVirtualPS classes. Therefore one need to catch all these calls and record for SVG creation in the client. TWebPadPainter is remained as fall-back solution if some objects painter does not follow strictly the ROOT painting logic. ; Highly optimize data which are transferred to clients - avoid large TObject overhead for simple fill/line/marker attributes. ; Try to merge painting if there are too many objects on the TCanvas - like in tutorials/graphics/greyscale.C macro. In such case simple SVG fails - one should try to combine primitives drawn with same attributes",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2862:391,avoid,avoid,391,https://root.cern,https://github.com/root-project/root/pull/2862,1,['avoid'],['avoid']
Safety,"While debugging the failure triggered by a recent PR updating the behavior of `gDirectory`: https://github.com/root-project/root/pull/11908#issuecomment-1361086304 (The reported error is that a name/symbol that should have been detected and loaded by Cling was not found ... the direct cause was that `gDirectory` was unexpectedly `nullptr`), I discovered that notebooks (or a least the way they are run in the test `JupyROOT-ROOT_kernel_notebook`), runs several threads to actually execute the cells. It is also clear from my investigation that it does not enable thread safety. Whether we need to change depends on whether `Jupyter` (or the way it is use here) guaranteed that only one of the thread would ever be run concurrently (if not then we must enable thread safety). However, one more thing to consider is that when thread safety is enabled, each thread get its own thread local gDirectory pointers. If each cell is run in a separate thread, then change to `gDirectory` in one cell will not be reflected in the next cell. (this would be true also for any user level thread local variable).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11955:228,detect,detected,228,https://root.cern,https://github.com/root-project/root/issues/11955,4,"['detect', 'safe']","['detected', 'safety']"
Safety,"While virtual `Copy(TObject &obj)` method is used in copy constructors, wrong cast may happen.; Simplest reproducer:; ```; TProfile p;; TH1D h(p);; ```; Causes fatal crash:; ```; Fatal in <TProfile::Copy>: Cannot copy a TProfile in a TH1D; aborting; #0 0x00007f2293b0a83a in wait4 () from /lib64/libc.so.6; #1 0x00007f2293a7403b in do_system () from /lib64/libc.so.6; #2 0x00007f22942c5a3d in TUnixSystem::StackTrace() () from /home/linev/build/webgui/lib/libCore.so; #3 0x00007f229418294c in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/linev/build/webgui/lib/libCore.so; #4 0x00007f22942497bd in ErrorHandler () from /home/linev/build/webgui/lib/libCore.so; #5 0x00007f22941988f4 in TObject::Fatal(char const*, char const*, ...) const () from /home/linev/build/webgui/lib/libCore.so; #6 0x00007f227d6fbde8 in TProfile::Copy(TObject&) const [clone .cold] () from /home/linev/build/webgui/lib/libHist.so; #7 0x00007f227d80aba7 in TH1D::TH1D(TH1D const&) () from /home/linev/build/webgui/lib/libHist.so; #8 0x00007f228c9dc028 in ?? (); #9 0x00007f2293f83460 in ?? (); #10 0x00007f228f062cfe in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /home/linev/build/webgui/lib/libCling.so; #11 0x00007f228efd6ea4 in cling::Interpreter::executeTransaction(cling::Transaction&) () from /home/linev/build/webgui/lib/libCling.so; #12 0x00007f228f07511c in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) () from /home/linev/build/webgui/lib/libCling.so; #13 0x00007f228f076c68 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/linev/build/webgui/lib/libCling.so; #14 0x00007f228efd4bb8 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<cha",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10919:240,abort,aborting,240,https://root.cern,https://github.com/root-project/root/issues/10919,1,['abort'],['aborting']
Safety,"While we are at it, should we call it `ROOT::RDF::Experimental::FromRNTuple` to avoid confusion with `TNtuple`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11125#issuecomment-1214934442:80,avoid,avoid,80,https://root.cern,https://github.com/root-project/root/pull/11125#issuecomment-1214934442,1,['avoid'],['avoid']
Safety,"Whoops, sorry about that! Went too quick. The other fix is nicer and avoids the short-lived allocation altogether.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7447#issuecomment-795801639:69,avoid,avoids,69,https://root.cern,https://github.com/root-project/root/pull/7447#issuecomment-795801639,1,['avoid'],['avoids']
Safety,Why did the hash of the file in lcgpackage change even-though the xrootd version did not change? (i.e. Didn't we migrate away from downloading from github to avoid exactly this kind of problem?),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11106#issuecomment-1204549271:158,avoid,avoid,158,https://root.cern,https://github.com/root-project/root/pull/11106#issuecomment-1204549271,1,['avoid'],['avoid']
Safety,Willing to take that risk. Things should be less broken than before anyway.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6056#issuecomment-661736178:21,risk,risk,21,https://root.cern,https://github.com/root-project/root/pull/6056#issuecomment-661736178,1,['risk'],['risk']
Safety,"Wim says: adding 'shell=True' makes the command run on; /bin/sh and allows you to use shell features (such as expansion and; replacement of variables). But nothing in the command seems to need that; feature, and anyway it's a risky thing to rely on, or what am I missing?. Spawning an intermediate shell makes a mess of the environment when running; under conda on Mac in the non-build environment. Running the normal way as; per the patched line above, and all seems good.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4406:226,risk,risky,226,https://root.cern,https://github.com/root-project/root/pull/4406,1,['risk'],['risky']
Safety,"Windows failure was a git fetching error, not related to my changes:; ```; 13:51:59 > git config remote.origin.url http://root.cern/git/root.git # timeout=10; 13:52:30 Cleaning workspace; 13:52:30 > git rev-parse --verify HEAD # timeout=10; 13:53:05 Resetting working tree; 13:53:05 > git reset --hard # timeout=10; 14:03:09 ERROR: Timeout after 10 minutes; 14:03:22 ERROR: Error fetching remote repo 'origin'; 14:03:22 hudson.plugins.git.GitException: Failed to fetch from http://root.cern/git/root.git; 14:03:22 	at hudson.plugins.git.GitSCM.fetchFrom(GitSCM.java:1000); 14:03:22 	at hudson.plugins.git.GitSCM.retrieveChanges(GitSCM.java:1241); 14:03:22 	at hudson.plugins.git.GitSCM.checkout(GitSCM.java:1301); 14:03:22 	at org.jenkinsci.plugins.workflow.steps.scm.SCMStep.checkout(SCMStep.java:125); 14:03:22 	at org.jenkinsci.plugins.workflow.steps.scm.SCMStep$StepExecutionImpl.run(SCMStep.java:93); 14:03:22 	at org.jenkinsci.plugins.workflow.steps.scm.SCMStep$StepExecutionImpl.run(SCMStep.java:80); 14:03:22 	at org.jenkinsci.plugins.workflow.steps.SynchronousNonBlockingStepExecution.lambda$start$0(SynchronousNonBlockingStepExecution.java:47); 14:03:22 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); 14:03:22 	at java.util.concurrent.FutureTask.run(FutureTask.java:266); 14:03:22 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149); 14:03:22 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624); 14:03:22 	at java.lang.Thread.run(Thread.java:748); 14:03:22 Caused by: hudson.plugins.git.GitException: Command ""git reset --hard"" returned status code -1:; ```; Why is Jenkins trying to fetch from http://root.cern/git/root.git rather than from GitHub?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8197#issuecomment-843116543:147,timeout,timeout,147,https://root.cern,https://github.com/root-project/root/pull/8197#issuecomment-843116543,4,"['Timeout', 'timeout']","['Timeout', 'timeout']"
Safety,"With @etejedor 's help we could reduce the problem that causes the test failures to:. ```cpp; #include ""TClassRef.h"". int main() {; TClassRef cr(""ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>"");; cr->GetListOfMethods(true);; return 0;; }; ```. which breaks with the following stacktrace:. ```; #0 0x00007ffff53f9ef5 in raise () from /usr/lib/libc.so.6; #1 0x00007ffff53e3862 in abort () from /usr/lib/libc.so.6; #2 0x00007ffff53e3747 in __assert_fail_base.cold () from /usr/lib/libc.so.6; #3 0x00007ffff53f2646 in __assert_fail () from /usr/lib/libc.so.6; #4 0x00007fffec0bcec0 in TClingCXXRecMethIter::InstantiateTemplateWithDefaults (this=0x555556ead490, TD=0x555556be3a30) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:182; #5 0x00007fffec0ba7d8 in TClingMemberIter::Advance (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.cxx:140; #6 0x00007fffec0b8b0f in TClingMemberIter::Next (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.h:159; #7 0x00007fffec0be2cd in TClingMethodInfo::Next (this=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:438; #8 0x00007fffebf51dba in TCling::MethodInfo_Next (this=0x5555556433a0, minfo=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TCling.cxx:9017; #9 0x00007ffff7d8192f in TListOfFunctions::Load (this=0x555556dbb2b0) at ../../../bendavidbook/core/meta/src/TListOfFunctions.cxx:391; #10 0x00007ffff7d51b82 in TClass::GetListOfMethods (this=0x5555561abdb0, load=true) at ../../../bendavidbook/core/meta/src/TClass.cxx:3803; #11 0x00005555555551dd in main () at repro.cpp:5; ```. Work in progress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7630#issuecomment-819501708:392,abort,abort,392,https://root.cern,https://github.com/root-project/root/pull/7630#issuecomment-819501708,1,['abort'],['abort']
Safety,"With Davix not present on the machine, the tutorials tutorials/v7/ntuple/ntpl004_dimuon.C is ran and fails:; ```; ""tutorial-v7-ntuple-ntpl004_dimuon"" start time: Dec 04 11:53 CST; Output:; ----------------------------------------------------------. Processing /home/pcanal/root_working/code/root/tutorials/v7/ntuple/ntpl004_dimuon.C...; terminate called after throwing an instance of 'std::runtime_error'; what(): Cannot find plugin handler for RRawFileDavix; CMake Error at /home/pcanal/root_working/build/master-opt/RootTestDriver.cmake:237 (message):; error code: Child aborted. <end of output>; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6916:573,abort,aborted,573,https://root.cern,https://github.com/root-project/root/issues/6916,1,['abort'],['aborted']
Safety,"With `RNTupleWriter::Append` / `RNTupleParallelWriter::Append`, the application must organize synchronization to the underlying `TFile`. To avoid locking for every `Fill`, https://github.com/root-project/root/pull/15239 introduced `FillNoCommit` and gives some guarantees so that locking is only necessary when calling `CommitCluster`. However that's still not ideal because `CommitCluster` will first call `CommitCluster` on every field, which will flush the column write buffers and trigger compression. This can be substantial for many fields or very large page sizes (compared to the cluster size). Ideally a `RNTupleFillContext` had a method to perform this work outside of the critical section, like `PrepareCommitCluster` or `FlushPageBuffers`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16241:140,avoid,avoid,140,https://root.cern,https://github.com/root-project/root/issues/16241,1,['avoid'],['avoid']
Safety,"With `builtin_llvm=ON`, all of our build system magic in `interpreter/CMakeLists.txt` applies, in particular; https://github.com/root-project/root/blob/779ecb965abcb0658fc7a3524e2d1448a2504bff/interpreter/CMakeLists.txt#L134-L148; We do this because ROOT requires an exact version of LLVM and we want to avoid at all costs that its symbols interfere with another LLVM library that lives in the same process, with potentially a different version...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14778#issuecomment-1956064734:304,avoid,avoid,304,https://root.cern,https://github.com/root-project/root/issues/14778#issuecomment-1956064734,1,['avoid'],['avoid']
Safety,"With a task scheduler, `RPageSinkBuf::CommitPage` copies the uncompressed page; https://github.com/root-project/root/blob/226e4c00e5dc4b7aaf881bad810a0c78c8a14185/tree/ntuple/v7/src/RPageSinkBuf.cxx#L167-L170; for asynchronous compression. However, the uncompressed page is only released in `FlushClusterImpl` which leads to significant memory overhead for high compression factors (such as CMS miniAOD). In principle, the uncompressed buffer can be released directly after compression, which is only a bit tricky because it requires the allocator to be thread-safe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16753:561,safe,safe,561,https://root.cern,https://github.com/root-project/root/issues/16753,1,['safe'],['safe']
Safety,"With current master, I did:; ```cpp; #include <ROOT/RDataFrame.hxx>; #include <ROOT/RVec.hxx>; #include <ROOT/RDFHelpers.hxx>. int main() {; auto h = ROOT::RDataFrame(10); .Define(""x"", [](ULong64_t e) { return int(e); }, {""rdfentry_""}); .Vary(; ""x"",; [](int x) {; return ROOT::RVecI{x - 1, x + 1};; },; {""x""}, 2); .GraphAsymmErrors<int, int, int, int, int, int>(""x"", ""x"", ""x"", ""x"", ""x"", ""x"");; auto hs = ROOT::RDF::Experimental::VariationsFor(h);; }; ```. From gdb, right after `auto hs = ...`, the stack trace is:; ```; [0] from 0x00007ffff52e454c in __pthread_kill_implementation; [1] from 0x00007ffff5297cf6 in raise; [2] from 0x00007ffff526a813 in abort; [3] from 0x00007ffff55e0a06 in __gnu_cxx::__verbose_terminate_handler() [clone .cold]; [4] from 0x00007ffff55ec0bc in __cxxabiv1::__terminate(void (*)()); [5] from 0x00007ffff55ec127 in std::terminate(); [6] from 0x00007ffff55ec3c9 in __cxa_throw; [7] from 0x000000000048a042 in ROOT::Detail::RDF::RActionImpl<ROOT::Internal::RDF::FillTGraphAsymmErrorsHelper>::CallMakeNew<>(void*)+180 at [...]/rb/include/ROOT/RDF/RActionImpl.hxx:61; [8] from 0x0000000000488d23 in ROOT::Internal::RDF::RAction<ROOT::Internal::RDF::FillTGraphAsymmErrorsHelper, ROOT::Detail::RDF::RLoopManager, ROOT::TypeTraits::TypeList<int, int, int, int, int, int> >::MakeVariedAction(std::vector<void*, std::allocator<void*> >&&)+293 at [...]/rb/include/ROOT/RDF/RAction.hxx:164; [9] from 0x00000000004775f3 in ROOT::RDF::Experimental::VariationsFor<TGraphAsymmErrors>(ROOT::RDF::RResultPtr<TGraphAsymmErrors>)+744 at [...]/rb/include/ROOT/RDFHelpers.hxx:249; ```; No deallocation :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10484#issuecomment-1113328430:652,abort,abort,652,https://root.cern,https://github.com/root-project/root/issues/10484#issuecomment-1113328430,1,['abort'],['abort']
Safety,With the latest version of the `centos` C++ compiler a new warning appeared in 20 years old code.; The way to fix/deactivate it is to compile the files producing this warning with the option `-Wbidirectional=none` (found by @couet) . @bellenot found the way to set this option in the `CMakeLists.txt` files for the compilers having this option.; Fix warning:; ```; warning: unpaired UTF-8 bidirectional character detected [-Wbidirectional=]; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9348:413,detect,detected,413,https://root.cern,https://github.com/root-project/root/pull/9348,1,['detect'],['detected']
Safety,"With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):; ```; Error in <readfile>: For entries 0 we have result=19200; ```; This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:; ```; if (!foundRelatedSplit) {; continue;; }; ```; which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```; diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx; index 58b50a93..e0aef7e1 100644; --- a/root/io/issue-9899/read_cmssw_class_v3.cxx; +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx; @@ -129,10 +129,8 @@ struct PersHighData {; }; int check(int slide = 1) {; int res = 0;; -#ifdef FIXED_ISSUE_99xx; for(auto &d : fPersLowData); res += d.check(slide, 0);; -#endif; for(auto &d : fLowData); res += d.check(slide * BIT(6), 10);; return res;; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9924:554,avoid,avoid,554,https://root.cern,https://github.com/root-project/root/issues/9924,1,['avoid'],['avoid']
Safety,"With this PR, a proper exception is thrown when a user tries to load an out-of-bounds RNTuple entry (instead of aborting due to a failed assert statement).; To prevent the `RColumn` destructor from attempting to again clean up the page for the entry that was (potentially) loaded prior to attempting to read the out-bounds entry, `fReadPage` in `RColumn` is reset to a null page before attempting to populate it. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14129:112,abort,aborting,112,https://root.cern,https://github.com/root-project/root/pull/14129,1,['abort'],['aborting']
Safety,"With very few entries passing a given RDataFrame cutflow, it can happen; that a TBB task ends up processing zero ""good"" entries.; In that scenario, it could happen that the first TTree header flushed to; the output file from a Snapshot action was for a tree with no entries and; no branches. This effectively set the number of branches to; zero for all the content written to file, even if following buffers; contained well-formed TTrees. With this commit, if the output tree contains zero entries, we avoid; flushing it to file. And since the next task will remove this TTree from; the output directory, we can be sure that the buffer with the malformed; TTree will never be written out. This fixes ROOT-9471. <hr>. The fix requires that output trees are deregistered from output directories at the end of a task, so that the output directory does not ever try to flush them. This is done by giving `SnapshotHelperMT` ownership of its output trees (see explanation in the relevant commit message).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2197:502,avoid,avoid,502,https://root.cern,https://github.com/root-project/root/pull/2197,1,['avoid'],['avoid']
Safety,"Without a task scheduler, seal in `CommitPage`. This avoids a page allocation and, in most cases, a copy of the uncompressed buffer (unless the element type is mappable and compression is disabled, in which case the sealed page would otherwise alias the page buffer). It also ensures that `CommitCluster` can vector-commit all sealed pages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14193:53,avoid,avoids,53,https://root.cern,https://github.com/root-project/root/pull/14193,1,['avoid'],['avoids']
Safety,"Writer::EmitStmt(unsigned int, unsigned int) (F:\gitP\root-project\root\build_x86_asan2\bin\libCling.dll+0x1121b5a6); #24 0x68c8b594 in clang::ASTStmtWriter::Emit(void) (F:\gitP\root-project\root\build_x86_asan2\bin\libCling.dll+0x1121b594); #25 0x68ca4c29 in clang::ASTWriter::WriteSubStmt(class clang::Stmt *) (F:\gitP\root-project\root\build_x86_asan2\bin\libCling.dll+0x11234c29); #26 0x68c8b96c in clang::ASTRecordWriter::FlushStmts(void) (F:\gitP\root-project\root\build_x86_asan2\bin\libCling.dll+0x1121b96c); #27 0x68b342ca in clang::ASTRecordWriter::Emit(unsigned int, unsigned int) (F:\gitP\root-project\root\build_x86_asan2\bin\libCling.dll+0x110c42ca); ; ==6948==HINT: if you don't care about these errors you may set allocator_may_return_null=1; SUMMARY: AddressSanitizer: out-of-memory (C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\bin\HostX64\x86\clang_rt.asan_dynamic-i386.dll+0x1003e141) ; ==6948==ABORTING; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(241,5): error MSB8066: Custom build for 'F:\gitP\root-project\root\build_x86_asan2\CMakeFiles\1b80de060c1a00976f83382f69cf2b7f\allDict.cxx.pch.rule;F:\gitP\root-project\root\build_x86_asan2\CMakeFiles\ecd3d997f4f89e0243288555110c5833\onepcm.rule;F:\gitP\root-project\root\CMakeLists.txt' exited with code 1. ; ```; ### To Reproduce; 1. Open a x86 Native Tools Command Prompt for VS 2019; 2. `git clone https://github.com/root-project/root.git root_src`; 3. `mkdir root_build && cd root_build`; 4. `cmake -G""Visual Studio 16 2019"" -A Win32 -Dtesting=ON -Droottest=ON ../root_src`; 5. `set _CL_= /fsanitize=address /GS- /wd5072 & set _LINK_= /InferASanLibs /incremental:no /debug` (please make sure use _ _ to inclose CL and LINK, since _ _ will style text Italic here ); 6. `set ASAN_OPTIONS=detect_odr_violation=0`; 7. `cmake --build . --config Release` . ### Setup; <!--; 1. Operating system: Windows 10; 2. How yo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9445:6097,ABORT,ABORTING,6097,https://root.cern,https://github.com/root-project/root/issues/9445,1,['ABORT'],['ABORTING']
Safety,Wrong delete operator was used (it is @a5db401 commit); To avoid any confusion in the future - just use TString instead,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4881:59,avoid,avoid,59,https://root.cern,https://github.com/root-project/root/pull/4881,1,['avoid'],['avoid']
Safety,"YMBOLIZER_PATH` to point to it):; 0 lli 0x000000010104824c llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 56; 1 lli 0x00000001010471b4 llvm::sys::RunSignalHandlers() + 128; 2 lli 0x00000001010488c4 SignalHandler(int) + 304; 3 libsystem_platform.dylib 0x00000001826b1c44 _sigtramp + 56; 4 libsystem_pthread.dylib 0x0000000182669c24 pthread_kill + 292; 5 libsystem_c.dylib 0x00000001825b1864 abort + 104; 6 libc++abi.dylib 0x0000000182629cf8 __cxxabiv1::__aligned_malloc_with_fallback(unsigned long) + 0; 7 libc++abi.dylib 0x000000018261ae4c demangling_unexpected_handler() + 0; 8 libobjc.A.dylib 0x00000001825136d8 _objc_terminate() + 160; 9 libc++abi.dylib 0x00000001826290e0 std::__terminate(void (*)()) + 20; 10 libc++abi.dylib 0x000000018262beb0 __cxa_get_exception_ptr + 0; 11 libc++abi.dylib 0x000000018262be5c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 0; 12 libc++abi.dylib 0x000000010224003c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 18446744071557956064; 13 lli 0x0000000100c8f680 llvm::MCJIT::runFunction(llvm::Function*, llvm::ArrayRef<llvm::GenericValue>) + 768; 14 lli 0x0000000100bd574c llvm::ExecutionEngine::runFunctionAsMain(llvm::Function*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, char const* const*) + 1464; 15 lli 0x000000010070e4d8 main + 8576; 16 libdyld.dylib 0x0000000182685f34 start + 4; zsh: abort ./bin/lli throw.ll; ```. It could be that Apple changed *something* about their exception handling ABI for `arm64` because it's not even possible to build my own `libunwind` to debug the unwinding as I did for ROOT-10703 - it complains about invalid entries. However `clang++` emits the right object files, at least when compiling to an executable directly. So maybe it's at runtime? I'll need to think about this...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7541#issuecomment-801803930:2202,abort,abort,2202,https://root.cern,https://github.com/root-project/root/issues/7541#issuecomment-801803930,1,['abort'],['abort']
Safety,"Yeah, sorry, I overlooked at the timeout parameter (100 seconds instead of 100 milliseconds). I'll commit the necessary changes (5 seconds) in a few minutes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292#issuecomment-867621725:33,timeout,timeout,33,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-867621725,1,['timeout'],['timeout']
Safety,"Yes I would like some feedback on the use of std::vector so I can take care of that appropriately together with rebasing. If this strategy is agreed I can also clean up a bit more to avoid the redundant size counters, etc.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7499#issuecomment-828637952:183,avoid,avoid,183,https://root.cern,https://github.com/root-project/root/pull/7499#issuecomment-828637952,2,"['avoid', 'redund']","['avoid', 'redundant']"
Safety,"Yes `docbuild` was empty and I removed `docoutput`. I just redid it. I get the same. Elsewhere:; ```; Generating docs for compound TestTH3DRange...; Generating docs for compound TExceptionHandler...; doxygen(79550,0x70000e706000) malloc: *** error for object 0x7f822b76c000: pointer being freed was not allocated; doxygen(79550,0x70000e706000) malloc: *** set a breakpoint in malloc_error_break to debug; /bin/sh: line 1: 79550 Abort trap: 6 /Users/couet/bin/doxygen /tmp/docbuild/Doxyfile.dox; make[2]: *** [CMakeFiles/dox] Error 134; make[1]: *** [CMakeFiles/dox.dir/all] Error 2; make: *** [all] Error 2; couet@Oliviers-MBP docbuild % . ```; I typed ; ```; make -j8; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9966#issuecomment-1077428404:428,Abort,Abort,428,https://root.cern,https://github.com/root-project/root/pull/9966#issuecomment-1077428404,1,['Abort'],['Abort']
Safety,Yes because `CMakeLists.txt` will appear as modified instead of `makeinput.sh`. Anyway there is some clean up to be done in order to avoid the sources polluting. I am looking at it..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8950#issuecomment-934507336:133,avoid,avoid,133,https://root.cern,https://github.com/root-project/root/issues/8950#issuecomment-934507336,1,['avoid'],['avoid']
Safety,"Yes but TTreeProcessorMT is implemented in terms of TThreadExecutor for everything related to tasks. If that ever changes, and a call to EnableThreadSafety is not otherwise added, several TTreeProcessorMT tests will crash. Do you want the (redundant) EnableThreadSafety call in TTreeProcessorMT's ctor as well?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5304#issuecomment-609784958:240,redund,redundant,240,https://root.cern,https://github.com/root-project/root/pull/5304#issuecomment-609784958,1,['redund'],['redundant']
Safety,"Yes, I was aware of this redundancy, but I would prefer it because:; - It makes it symmetric with `TThreadExecutor`.; - The fact of TTreeProcessorMT::Process being implemented in terms of `TThreadExecutor` could change (as it has changed in the past, at the beginning we just did plain TBB there).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5304#issuecomment-609790225:25,redund,redundancy,25,https://root.cern,https://github.com/root-project/root/pull/5304#issuecomment-609790225,1,['redund'],['redundancy']
Safety,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it!. Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:; ```; That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context.; ```. does not call out; - that it's during dictionary generation; - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12276#issuecomment-1429251757:368,avoid,avoiding,368,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1429251757,1,['avoid'],['avoiding']
Safety,"Yes, it might work as long that we guarantee that the `thread local static fCounts` is not used during the loading of libThread itself (If this happens we are no guarantee of order of initialization and thus it might not be intialized when used). I think it is safe to rely on this since its usage (somewhat) require TThread::Init to be called first.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-800625628:261,safe,safe,261,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-800625628,1,['safe'],['safe']
Safety,"Yes, it's weird indeed. Well, I call ROOT::EnableThreadSafety before any thread starts, so that should be fine. the list is immediately made thread-safe in the function TSystem::Init,; ```; fTimers = new TList;; fTimers->UseRWLock();; ```. I can try to rewrite it using an intermediary variable to lock it before assigning it to fTimers, to see if it changes something.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8365#issuecomment-875963104:148,safe,safe,148,https://root.cern,https://github.com/root-project/root/issues/8365#issuecomment-875963104,1,['safe'],['safe']
Safety,"Yes, of course. There is code to explicitly detect and remove the allocator. Most likely `TClassEdit::IsDefAlloc` needs to be updated to take into account that the word `class` might be prefixed. Albeit it is odd/unexpected that Clang would put the class keyword there (it is supposed be configured not to).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10749#issuecomment-1155497614:44,detect,detect,44,https://root.cern,https://github.com/root-project/root/issues/10749#issuecomment-1155497614,1,['detect'],['detect']
Safety,"Yes, perhaps having something in Jira for this is useful. I didn't find anything on a quick search. I know that the opinions on the topic diverge, so indeed it's best to discuss this in the appropriate channels. That said, can we merge this? It passed the checks, and is safe to merge for the release.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3843#issuecomment-495188282:271,safe,safe,271,https://root.cern,https://github.com/root-project/root/pull/3843#issuecomment-495188282,1,['safe'],['safe']
Safety,"Yes, that's true. I hope we can avoid the problem with @phsft-bot build with flags -Dvc=ON -Dveccore=ON ; The problem appears only for `veccore=ON` + `vc=OFF`, which was missed before since we always enabled them together.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/799#issuecomment-319100796:32,avoid,avoid,32,https://root.cern,https://github.com/root-project/root/pull/799#issuecomment-319100796,1,['avoid'],['avoid']
Safety,"Yes. The ""Serialized"" part in the function name indicates that the return buffer is ""only"" decompressed but is other-wise ""as-on-file"". The idea is that doing the swapping at the usage site will avoid one scan through the buffer and ""may"" results in better performance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9331#issuecomment-977999652:195,avoid,avoid,195,https://root.cern,https://github.com/root-project/root/issues/9331#issuecomment-977999652,1,['avoid'],['avoid']
Safety,"You are adding it to the target, the dependency is explicit in the fact that you need to have a target to pass as argument. You don't need to add the include that the dictionary needs to the executable, you could just add it to the directory includes, but adding to the target is better as it avoids leaking it to subdirectories. You only have to do it before because of Axel's changes that force a manual header search for the dictionary header, so the search paths need to be ready for you to actually find it. In earlier versions of ROOT, not finding this header would not cause a failure, but may have picked up the wrong header and injected a bunch of absolute paths to the dictionary which in turn would end up breaking things. For example, if you know the dictionary header will always just be in the current source directory, you could just set `CMAKE_INCLUDE_CURRENT_DIR` to `True` instead, and not add the current directory to the target includes.; ```; $ cmake --help-variable CMAKE_INCLUDE_CURRENT_DIR; CMAKE_INCLUDE_CURRENT_DIR; -------------------------. Automatically add the current source and build directories to the include path. If this variable is enabled, CMake automatically adds; ``CMAKE_CURRENT_SOURCE_DIR`` and ``CMAKE_CURRENT_BINARY_DIR``; to the include path for each directory. These additional include; directories do not propagate down to subdirectories. This is useful; mainly for out-of-source builds, where files generated into the build; tree are included by files located in the source tree. By default ``CMAKE_INCLUDE_CURRENT_DIR`` is ``OFF``.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8308#issuecomment-856752467:293,avoid,avoids,293,https://root.cern,https://github.com/root-project/root/issues/8308#issuecomment-856752467,1,['avoid'],['avoids']
Safety,"You say the abort signal is triggered again after printing the stack trace, could you point to the code that triggers the signal again? At least in Linux I cannot reproduce this infinite recursion :disappointed:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5034#issuecomment-588168289:12,abort,abort,12,https://root.cern,https://github.com/root-project/root/pull/5034#issuecomment-588168289,1,['abort'],['abort']
Safety,"Zsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=zggbyYqBAFAg%2FMlgDfFg3zamaawZqBMBbmbK7glOxj4%3D&reserved=0> ; >>>>>>>> - if not then it's different :-) But I don't know how to tell ; >>>>>>>> whether it's a redirect. Do you?; >>>>>>>>; >>>>>>>> If not let's get #8155 ; >>>>>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8155&data=04%7C01%7Csimonliu%40triumf.ca%7Ca59fceaddf634d196e5608d91576f34a%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564422909277340%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=zggbyYqBAFAg%2FMlgDfFg3zamaawZqBMBbmbK7glOxj4%3D&reserved=0> ; >>>>>>>> fixed and then we re-visit this one: either it's fixed, too, or ; >>>>>>>> we need to call in help from the Davix (?) folks.; >>>>>>>>; >>>>>>>> —; >>>>>>>> You are receiving this because you authored the thread.; >>>>>>>> Reply to this email directly, view it on GitHub ; >>>>>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8092%23issuecomment-839953723&data=04%7C01%7Csimonliu%40triumf.ca%7Ca59fceaddf634d196e5608d91576f34a%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564422909287326%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=sEld0g53uPzkJwe1XZXsOX%2FpGWgGWZhXZxGcLLk7oio%3D&reserved=0>, ; >>>>>>>> or unsubscribe ; >>>>>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAK3WHVSCH3RYO2YJNPNMVNTTNKZ6VANCNFSM44DEPE6Q&data=04%7C01%7Csimonliu%40triumf.ca%7Ca59fceaddf634d196e5608d91576f34a%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564422909287326%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=r%2BRr4gXGLu2JHjuN2nOE1hL1JFlJl6f2rkD1HCtY1TA%3D&reserved=0>.; >>>>>>>>; >>>>>>>; >>>>>; >>>; >",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840043080:11682,safe,safelinks,11682,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840043080,2,['safe'],['safelinks']
Safety,[6.28] Avoid deprecated numpy.object,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12198:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/12198,1,['Avoid'],['Avoid']
Safety,[CI] Disable `tmva-cpu` on `alma9` to avoid openblas clashes with NumPy,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15302:38,avoid,avoid,38,https://root.cern,https://github.com/root-project/root/pull/15302,1,['avoid'],['avoid']
Safety,[CI] Update runner labels to avoid running on GPUs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16581:29,avoid,avoid,29,https://root.cern,https://github.com/root-project/root/pull/16581,1,['avoid'],['avoid']
Safety,[CMake] Add quotes to avoid failure on Windows node (?),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5271:22,avoid,avoid,22,https://root.cern,https://github.com/root-project/root/pull/5271,1,['avoid'],['avoid']
Safety,[CMake] Avoid duplicate linking against gtest,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16255:8,Avoid,Avoid,8,https://root.cern,https://github.com/root-project/root/pull/16255,1,['Avoid'],['Avoid']
Safety,[CMake] Avoid using deprecated `FindCUDA`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13437:8,Avoid,Avoid,8,https://root.cern,https://github.com/root-project/root/pull/13437,1,['Avoid'],['Avoid']
Safety,[CMake] Correctly return real (safe) install paths at runtime,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5084:31,safe,safe,31,https://root.cern,https://github.com/root-project/root/pull/5084,1,['safe'],['safe']
Safety,[CMake] Detect version of oneTBB,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14670:8,Detect,Detect,8,https://root.cern,https://github.com/root-project/root/pull/14670,1,['Detect'],['Detect']
Safety,[CMake] Fix version detection in `FindCUDNN.cmake`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15602:20,detect,detection,20,https://root.cern,https://github.com/root-project/root/pull/15602,1,['detect'],['detection']
Safety,[CPyCppyy] Avoid holding reference to `__main__` in the CPyCppyy API,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16403:11,Avoid,Avoid,11,https://root.cern,https://github.com/root-project/root/pull/16403,1,['Avoid'],['Avoid']
Safety,[DF] Add a sanity check to GetMergeableValue,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8978:11,sanity check,sanity check,11,https://root.cern,https://github.com/root-project/root/pull/8978,1,['sanity check'],['sanity check']
Safety,[DF] Avoid ROOT attribute lookup at module level,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10069:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10069,1,['Avoid'],['Avoid']
Safety,[DF] Avoid RVec construction+swap when possible,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11232:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/11232,1,['Avoid'],['Avoid']
Safety,[DF] Avoid TChain::AddClone in Snapshot when unnecessary,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2234:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/2234,2,['Avoid'],['Avoid']
Safety,[DF] Avoid calling InitSlot/FinaliseSlot multiple times on RDefines,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9199:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/9199,1,['Avoid'],['Avoid']
Safety,[DF] Avoid crash in tutorial due to reused canvas name,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9139:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/9139,1,['Avoid'],['Avoid']
Safety,[DF] Avoid duplicates in list of columns returned by GetColumnNames,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9699:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/9699,1,['Avoid'],['Avoid']
Safety,[DF] Avoid duplicates in list of columns returned by GetColumnNames (v6.26 backport),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9762:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/9762,1,['Avoid'],['Avoid']
Safety,[DF] Avoid exact comparisons on floating points,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11513:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/11513,1,['Avoid'],['Avoid']
Safety,[DF] Avoid expensive stringstream construction in RCsvDS,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10458:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10458,1,['Avoid'],['Avoid']
Safety,[DF] Avoid forward declarations of Define'd types,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3539:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/3539,3,['Avoid'],['Avoid']
Safety,[DF] Avoid heap allocation for column names,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9329:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/9329,1,['Avoid'],['Avoid']
Safety,"[DF] Avoid jitting a very large function body, which is slow",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9328:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/9328,1,['Avoid'],['Avoid']
Safety,[DF] Avoid memory-heavy histogram entry buffering in single-thread,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11552:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/11552,1,['Avoid'],['Avoid']
Safety,[DF] Avoid potential nullptr dereference,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8286:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/8286,1,['Avoid'],['Avoid']
Safety,[DF] Avoid public dependency of RDataFrame on `nlohmann::json`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14043:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/14043,1,['Avoid'],['Avoid']
Safety,[DF] Avoid registration of inner TChain with global lists,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11322:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/11322,1,['Avoid'],['Avoid']
Safety,[DF] Avoid relying on RVec class layout in Snapshot,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2757:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/2757,1,['Avoid'],['Avoid']
Safety,[DF] Avoid unused parameter warning in RDF ActionHelpers,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14044:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/14044,1,['Avoid'],['Avoid']
Safety,[DF] Avoid usage of Mathmore/gsl in df106 tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13989:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/13989,1,['Avoid'],['Avoid']
Safety,[DF] Avoid useless calls to TTree::GetBranch,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11538:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/11538,1,['Avoid'],['Avoid']
Safety,[DF] Avoid useless computation when we don't need its result.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9274:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/9274,1,['Avoid'],['Avoid']
Safety,[DF] Avoid using deprecated `std::iterator` in `TTreeReaderFast`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10491:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10491,1,['Avoid'],['Avoid']
Safety,[DF] Avoid using the same variable for 2 branches in in-memory tree,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11522:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/11522,1,['Avoid'],['Avoid']
Safety,[DF] Change test to avoid double free on Fedora39,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14803:20,avoid,avoid,20,https://root.cern,https://github.com/root-project/root/pull/14803,1,['avoid'],['avoid']
Safety,[DF] Move type-safety checks out of column readers,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11307:15,safe,safety,15,https://root.cern,https://github.com/root-project/root/pull/11307,1,['safe'],['safety']
Safety,[DF] Remove redundant call to TTreeReaderArray::GetSize,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8592:12,redund,redundant,12,https://root.cern,https://github.com/root-project/root/pull/8592,1,['redund'],['redundant']
Safety,[DF] Remove redundant calls to RDefine::InitSlot,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10812:12,redund,redundant,12,https://root.cern,https://github.com/root-project/root/pull/10812,1,['redund'],['redundant']
Safety,"[DF] Remove useless data member from RFilter, avoid (rare) reallocations",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9170:46,avoid,avoid,46,https://root.cern,https://github.com/root-project/root/pull/9170,1,['avoid'],['avoid']
Safety,[DF] Store RJittedAction on the heap to avoid use after delete,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2450:40,avoid,avoid,40,https://root.cern,https://github.com/root-project/root/pull/2450,1,['avoid'],['avoid']
Safety,[DF] Support rdfslot_ and rdfentry_ as well as avoid duplication of routines to check implicit columns,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2658:47,avoid,avoid,47,https://root.cern,https://github.com/root-project/root/pull/2658,1,['avoid'],['avoid']
Safety,[DF][PyROOT] Avoid deprecated numpy.object,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12159:13,Avoid,Avoid,13,https://root.cern,https://github.com/root-project/root/pull/12159,1,['Avoid'],['Avoid']
Safety,[DF][ROOT-9463] Avoid redundant results in GetColumnNames,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2443:16,Avoid,Avoid,16,https://root.cern,https://github.com/root-project/root/pull/2443,2,"['Avoid', 'redund']","['Avoid', 'redundant']"
Safety,[DOC][NFC] Mention that EnableThreadSafety does not make graphics thread-safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3412:73,safe,safe,73,https://root.cern,https://github.com/root-project/root/pull/3412,1,['safe'],['safe']
Safety,[Exp PyROOT] Pythonisations to avoid double delete of drawables,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3787:31,avoid,avoid,31,https://root.cern,https://github.com/root-project/root/pull/3787,1,['avoid'],['avoid']
Safety,[GeoCad] Reformat function to avoid misleading indentation warning,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3049:30,avoid,avoid,30,https://root.cern,https://github.com/root-project/root/pull/3049,1,['avoid'],['avoid']
Safety,[Geo][ROOT-9837] Avoid name clashes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3057:17,Avoid,Avoid,17,https://root.cern,https://github.com/root-project/root/pull/3057,1,['Avoid'],['Avoid']
Safety,[Graphics] avoid double delete in TRatioPlot dtor,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5312:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/5312,1,['avoid'],['avoid']
Safety,[IMT] Remove redundant call to EnableImplicitMT,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5305:13,redund,redundant,13,https://root.cern,https://github.com/root-project/root/pull/5305,1,['redund'],['redundant']
Safety,[IMT] Test thread safety of task arena and TThreadExecutor.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6189:18,safe,safety,18,https://root.cern,https://github.com/root-project/root/pull/6189,1,['safe'],['safety']
Safety,[IO] Avoid nullptr dereference in I/O of std::pair,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11227:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/11227,1,['Avoid'],['Avoid']
Safety,[Math] Avoid cloning before fitting the user provided FCN,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10650:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/10650,1,['Avoid'],['Avoid']
Safety,[Math] Avoid redefinition of `VECCORE_ENABLE_VC` macro,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/677:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/677,1,['Avoid'],['Avoid']
Safety,[Math] Avoid std::string in signature of template class method,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1936:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/1936,1,['Avoid'],['Avoid']
Safety,[Minuit2] Reduce boilerplate code by removing redundant overloads,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16443:46,redund,redundant,46,https://root.cern,https://github.com/root-project/root/pull/16443,1,['redund'],['redundant']
Safety,[Montecarlo][11580] Make TDatabasePDG::GetParticle methods thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13541:66,safe,safe,66,https://root.cern,https://github.com/root-project/root/pull/13541,1,['safe'],['safe']
Safety,[NFC] Try to prevent anti-virus false positive detection on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7005:47,detect,detection,47,https://root.cern,https://github.com/root-project/root/pull/7005,1,['detect'],['detection']
Safety,[NFC] v6-20: Try to prevent anti-virus false positive detection on Wi…,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7007:54,detect,detection,54,https://root.cern,https://github.com/root-project/root/pull/7007,1,['detect'],['detection']
Safety,[NFC] v6-22: Try to prevent anti-virus false positive detection on Wi…,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7006:54,detect,detection,54,https://root.cern,https://github.com/root-project/root/pull/7006,1,['detect'],['detection']
Safety,[PyROOT] Avoid SyntaxWarning about invalid escape sequence,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13905:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/13905,1,['Avoid'],['Avoid']
Safety,[PyROOT] Avoid bare except,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13026:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/13026,1,['Avoid'],['Avoid']
Safety,[PyROOT] Avoid linking TPython against libPython,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15891:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/15891,1,['Avoid'],['Avoid']
Safety,[PyROOT] Avoid need for exporting ROOT objects directly in PyROOTWrapper,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15833:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/15833,1,['Avoid'],['Avoid']
Safety,[PyROOT] Avoid using CPyCppyy internals in TPython via forward declarations,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14498:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/14498,1,['Avoid'],['Avoid']
Safety,[PyROOT] Avoid using deprecated `numpy._float`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16200:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/16200,1,['Avoid'],['Avoid']
Safety,[PyROOT] avoid using wildcard import in pyroot tutorial,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7668:9,avoid,avoid,9,https://root.cern,https://github.com/root-project/root/pull/7668,1,['avoid'],['avoid']
Safety,[RDF] Avoid unused variable warning,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4075:6,Avoid,Avoid,6,https://root.cern,https://github.com/root-project/root/pull/4075,1,['Avoid'],['Avoid']
Safety,[RDF] Enable thread safety,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6266:20,safe,safety,20,https://root.cern,https://github.com/root-project/root/pull/6266,1,['safe'],['safety']
Safety,[RF] Add overloads for memory-safe `RooAbsCollection::addOwned` and `RooAbsArg::addOwnedComponents`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9720:30,safe,safe,30,https://root.cern,https://github.com/root-project/root/pull/9720,1,['safe'],['safe']
Safety,[RF] Add recovery from invalid parameters for BatchMode,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7266:9,recover,recovery,9,https://root.cern,https://github.com/root-project/root/pull/7266,1,['recover'],['recovery']
Safety,[RF] Avoid RooBinWidthFunction in final likelihood computation graphs,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13024:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/13024,1,['Avoid'],['Avoid']
Safety,[RF] Avoid RooFit depenency in some RooFitCore unit tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8792:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/8792,1,['Avoid'],['Avoid']
Safety,[RF] Avoid `nlohmann_json` as a public dependency of RooFit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14266:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/14266,1,['Avoid'],['Avoid']
Safety,[RF] Avoid any dependencies of RooFitHS3 for dictionary generation and update HistFactory::JSONTool interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10082:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10082,1,['Avoid'],['Avoid']
Safety,[RF] Avoid clearing full RunContext after each NLL evaluation,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7344:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/7344,1,['Avoid'],['Avoid']
Safety,[RF] Avoid code duplication and move the evaluate function in a common place,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14440:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/14440,1,['Avoid'],['Avoid']
Safety,[RF] Avoid code duplication in RooAddModel cache generation,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11139:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/11139,1,['Avoid'],['Avoid']
Safety,[RF] Avoid code duplication in RooFit addition classes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10851:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10851,1,['Avoid'],['Avoid']
Safety,[RF] Avoid code duplication in RooRealSumFunc/RooRealSumPdf,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10825:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10825,1,['Avoid'],['Avoid']
Safety,[RF] Avoid code duplication with new private `Algorithms.h` file,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11962:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/11962,1,['Avoid'],['Avoid']
Safety,[RF] Avoid compile time dependency of RooFit on RDataFrame,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16606:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/16606,1,['Avoid'],['Avoid']
Safety,[RF] Avoid deprecated `createIterator()` function in RooStats tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15024:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/15024,1,['Avoid'],['Avoid']
Safety,[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13538:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/13538,1,['Avoid'],['Avoid']
Safety,[RF] Avoid dummy integral object for already self-normalized RooPoisson,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10836:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10836,1,['Avoid'],['Avoid']
Safety,[RF] Avoid duplicating minimizer steering code in `RooAbsPdf::fitTo()` and `RooAbsReal::chi2FitTo()`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13662:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/13662,1,['Avoid'],['Avoid']
Safety,[RF] Avoid heap allocation of `RooArgSet` in `Roo(Abs)GenContext`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9257:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/9257,1,['Avoid'],['Avoid']
Safety,[RF] Avoid including `RooMath.h` in RooFit headers and stress tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9214:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/9214,1,['Avoid'],['Avoid']
Safety,[RF] Avoid instantiating RooNLLVar directly in testRooAbsL.cxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16468:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/16468,1,['Avoid'],['Avoid']
Safety,[RF] Avoid manual memory allocation in RooConvGenContext,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10950:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10950,1,['Avoid'],['Avoid']
Safety,[RF] Avoid manual memory management in the rs101 tutorial,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11834:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/11834,1,['Avoid'],['Avoid']
Safety,[RF] Avoid overhead of tracking evaluation error messages when not needed,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12328:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/12328,1,['Avoid'],['Avoid']
Safety,[RF] Avoid printing false warning when passing both `FillColor/FillStyle` and `VisualizeError` to RooAbsReal::plotOn(),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9859:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/issues/9859,1,['Avoid'],['Avoid']
Safety,[RF] Avoid redundant copying of model in RooAbsL constructor,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12880:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/12880,2,"['Avoid', 'redund']","['Avoid', 'redundant']"
Safety,[RF] Avoid too verbose printout when doing unbinned toy studies,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14309:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/14309,1,['Avoid'],['Avoid']
Safety,[RF] Avoid uninitialized RooListProxies in RooLagrangianMorphFunc,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9840:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/9840,1,['Avoid'],['Avoid']
Safety,[RF] Avoid using HistFactory class in RooFitCore tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16596:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/16596,1,['Avoid'],['Avoid']
Safety,[RF] Avoid using RooCmdArg::_nextSharedData directly in header file,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8437:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/8437,1,['Avoid'],['Avoid']
Safety,[RF] Avoid using RooStringVar in RooCmdConfig,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10106:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10106,1,['Avoid'],['Avoid']
Safety,"[RF] Avoid using RooTObjWrap, RooDouble, and RooInt in RooCmdConfig",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10115:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10115,1,['Avoid'],['Avoid']
Safety,[RF] Avoid using `RooAbsArg::redirectServer()` in RooFit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12129:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/12129,1,['Avoid'],['Avoid']
Safety,[RF] Avoid using `_normSet` member in RooAddPdf,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10550:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10550,1,['Avoid'],['Avoid']
Safety,[RF] Avoid using `std::map` in RooFit pythonizations,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16156:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/16156,1,['Avoid'],['Avoid']
Safety,[RF] Avoid using forward-declared class as default template arguments,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8997:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/8997,1,['Avoid'],['Avoid']
Safety,[RF] Avoid using test statistics constructors directly in user code,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10610:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10610,1,['Avoid'],['Avoid']
Safety,[RF] Avoid using transient `std::unique_ptr`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15733:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/15733,1,['Avoid'],['Avoid']
Safety,[RF] Avoid using variable-length arrays in RooFit multiprocessing tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16777:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/16777,1,['Avoid'],['Avoid']
Safety,[RF] Do not stream RooAbsArg eocache to avoid memory leak when reading back workspaces,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12024:40,avoid,avoid,40,https://root.cern,https://github.com/root-project/root/pull/12024,1,['avoid'],['avoid']
Safety,[RF] Don't use redundant `RooPlot::findObject()` in RooFit tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11555:15,redund,redundant,15,https://root.cern,https://github.com/root-project/root/pull/11555,1,['redund'],['redundant']
Safety,[RF] Fix memory leaks in RooFitHS3 by completely avoiding manual memory management,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9690:49,avoid,avoiding,49,https://root.cern,https://github.com/root-project/root/pull/9690,1,['avoid'],['avoiding']
Safety,[RF] Fix splitting of RooDataSets with weight errors and avoid creating dummy weight variables,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12459:57,avoid,avoid,57,https://root.cern,https://github.com/root-project/root/pull/12459,1,['avoid'],['avoid']
Safety,[RF] Guard debugging code to avoid warning,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9981:29,avoid,avoid,29,https://root.cern,https://github.com/root-project/root/pull/9981,1,['avoid'],['avoid']
Safety,[RF] Improve recovery from invalid function values,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6401:13,recover,recovery,13,https://root.cern,https://github.com/root-project/root/pull/6401,1,['recover'],['recovery']
Safety,[RF] Improve recovery from invalid function values in RooFit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6383:13,recover,recovery,13,https://root.cern,https://github.com/root-project/root/pull/6383,1,['recover'],['recovery']
Safety,[RF] Make RooBatchCompute thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14877:33,safe,safe,33,https://root.cern,https://github.com/root-project/root/pull/14877,1,['safe'],['safe']
Safety,[RF] Make `RooAbsArg::recursiveRedirectServers` thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11970:55,safe,safe,55,https://root.cern,https://github.com/root-project/root/pull/11970,1,['safe'],['safe']
Safety,[RF] Make `roobatchcompute` header files safer,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9446:41,safe,safer,41,https://root.cern,https://github.com/root-project/root/pull/9446,1,['safe'],['safer']
Safety,[RF] New mechanism to detect if `_normSet` in RooAbsPdf is invalid,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11176:22,detect,detect,22,https://root.cern,https://github.com/root-project/root/pull/11176,1,['detect'],['detect']
Safety,[RF] Remove deprecated RooList and avoid remaining usage of it in RooFit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9851:35,avoid,avoid,35,https://root.cern,https://github.com/root-project/root/pull/9851,1,['avoid'],['avoid']
Safety,[RF] Remove redundant configuration members of `RooAbsMinimizerFcn`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11695:12,redund,redundant,12,https://root.cern,https://github.com/root-project/root/pull/11695,1,['redund'],['redundant']
Safety,[RF] Remove redundant sanity check,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8432:12,redund,redundant,12,https://root.cern,https://github.com/root-project/root/pull/8432,2,"['redund', 'sanity check']","['redundant', 'sanity check']"
Safety,[RF] Remove safeDeleteList functionality of RooAbsCollection,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9685:12,safe,safeDeleteList,12,https://root.cern,https://github.com/root-project/root/pull/9685,1,['safe'],['safeDeleteList']
Safety,[RF] Rename RooPower and RooExpPoly to avoid clash with classes fom CMS,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15558:39,avoid,avoid,39,https://root.cern,https://github.com/root-project/root/pull/15558,1,['avoid'],['avoid']
Safety,[RF] RooAddPdf: Avoid UB in checkObservables,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9557:16,Avoid,Avoid,16,https://root.cern,https://github.com/root-project/root/pull/9557,1,['Avoid'],['Avoid']
Safety,[RF] RooBarlowBeestonLL: Avoid removing elements of RooArgSet while looping over them,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10921:25,Avoid,Avoid,25,https://root.cern,https://github.com/root-project/root/pull/10921,1,['Avoid'],['Avoid']
Safety,[RF] Speed up RooFit BatchMode by avoiding to set oper mode to `Auto` in RooAbsReal::computeBatch,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10612:34,avoid,avoiding,34,https://root.cern,https://github.com/root-project/root/pull/10612,1,['avoid'],['avoiding']
Safety,[RF] Speed up RooProdPdf::factorizeProduct by avoiding manual memory allocation,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7907:46,avoid,avoiding,46,https://root.cern,https://github.com/root-project/root/pull/7907,1,['avoid'],['avoiding']
Safety,"[RF] `plotSamplingHint` can cause evaluation outside the ""safe"" range of an observable",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11482:58,safe,safe,58,https://root.cern,https://github.com/root-project/root/issues/11482,1,['safe'],['safe']
Safety,[RF] investigate and fix MultiProcess::Queue test timeout,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15494:50,timeout,timeout,50,https://root.cern,https://github.com/root-project/root/issues/15494,1,['timeout'],['timeout']
Safety,[RF] xRooFit: avoid having headers depending on preprocessor defines and other fixups,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11932:14,avoid,avoid,14,https://root.cern,https://github.com/root-project/root/pull/11932,1,['avoid'],['avoid']
Safety,[RF][ Remove unsafe casts in RooResolutionModel,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4975:13,unsafe,unsafe,13,https://root.cern,https://github.com/root-project/root/pull/4975,1,['unsafe'],['unsafe']
Safety,[RF][PyROOT] Avoid boolean operators on numpy arrays in unit test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13612:13,Avoid,Avoid,13,https://root.cern,https://github.com/root-project/root/pull/13612,1,['Avoid'],['Avoid']
Safety,[RF][PyROOT] Pythonize RooFit::DataError to avoid Python 3 syntax errors,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9721:44,avoid,avoid,44,https://root.cern,https://github.com/root-project/root/pull/9721,1,['avoid'],['avoid']
Safety,[RF][PyROOT] Use raw strings for docstrings in RooFit pythonization mirror classes and avoid mutating the docstring of an instancemethod in Python 2,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8926:87,avoid,avoid,87,https://root.cern,https://github.com/root-project/root/pull/8926,1,['avoid'],['avoid']
Safety,[RF][Tutorials] Avoid race condition in RooFit python tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8491:16,Avoid,Avoid,16,https://root.cern,https://github.com/root-project/root/pull/8491,1,['Avoid'],['Avoid']
Safety,"[ROOT-10713][ROOT-7986] Several objects were leaking when being read from a file. This is because ownership was unclear, and because reading apparently wasn't tested.; Here; - Four leaks are fixed; - A reading test is added (which is reading the object that revealed all the leaks. This tests both for leaks in address sanitizer builds, but also ensures that the updated streamers still work.); - A container overflow detected by address sanitizer is fixed.; - And the includes of RooRealVar are stripped down significantly. This is nice for RooFit, since almost everything includes RooRealVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5466:418,detect,detected,418,https://root.cern,https://github.com/root-project/root/pull/5466,1,['detect'],['detected']
Safety,"[SaveGraph](https://root.cern/doc/master/namespaceROOT_1_1RDF.html#ac06a36e745255fb8744b1e0a563074c9) would benefit from the following improvements:. - [x] usage of static variables should be removed, in order to make `SaveGraph` safe to be called concurrently from multiple threads; - [x] a tutorial should be added, and an example usage should be included in the docs in the reference guide. ### Additional context; <!--; Add any other context about the problem here.; -->. Related old jira tickets:; - https://sft.its.cern.ch/jira/browse/ROOT-11023 (this is the original issue regarding the usage of statics in the implementation of SaveGraph); - https://sft.its.cern.ch/jira/browse/ROOT-9721 (this contains a draft tutorial and an old SaveGraph bug report)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9145:230,safe,safe,230,https://root.cern,https://github.com/root-project/root/issues/9145,1,['safe'],['safe']
Safety,[TDF+CLING] Avoid instrumenting jitted code when possible,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/985:12,Avoid,Avoid,12,https://root.cern,https://github.com/root-project/root/pull/985,1,['Avoid'],['Avoid']
Safety,[TDF] Avoid accessing zero-length TTreeReaderArray,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1938:6,Avoid,Avoid,6,https://root.cern,https://github.com/root-project/root/pull/1938,1,['Avoid'],['Avoid']
Safety,[TDF] Avoid virtual calls in non-jitted transformations,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/869:6,Avoid,Avoid,6,https://root.cern,https://github.com/root-project/root/pull/869,1,['Avoid'],['Avoid']
Safety,[TMVA] Avoid torch-cppyy symbol clashing problem in tmva tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15290:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/15290,1,['Avoid'],['Avoid']
Safety,[TMVA] DNN - Tune minimization test to avoid false positives,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1958:39,avoid,avoid,39,https://root.cern,https://github.com/root-project/root/pull/1958,1,['avoid'],['avoid']
Safety,[TMVA] Make GetObjectSafe type-safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9783:31,safe,safe,31,https://root.cern,https://github.com/root-project/root/pull/9783,1,['safe'],['safe']
Safety,[TMVA] ROOT-9194 -- Sporadic timeouts for TMVARegression,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1973:29,timeout,timeouts,29,https://root.cern,https://github.com/root-project/root/pull/1973,1,['timeout'],['timeouts']
Safety,[TPython] Make TPython thread-safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16427:30,safe,safe,30,https://root.cern,https://github.com/root-project/root/pull/16427,1,['safe'],['safe']
Safety,[TREEPROCMT] Avoid useless construction of thread-local chains,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2169:13,Avoid,Avoid,13,https://root.cern,https://github.com/root-project/root/pull/2169,1,['Avoid'],['Avoid']
Safety,[TSpectrum] avoid recurrent questions on forum concerning legacy,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11315:12,avoid,avoid,12,https://root.cern,https://github.com/root-project/root/pull/11315,1,['avoid'],['avoid']
Safety,[TTree] Avoid deletion of TFile on the stack,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6528:8,Avoid,Avoid,8,https://root.cern,https://github.com/root-project/root/pull/6528,1,['Avoid'],['Avoid']
Safety,[TTree] Avoid getting the number of branches twice,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3601:8,Avoid,Avoid,8,https://root.cern,https://github.com/root-project/root/pull/3601,1,['Avoid'],['Avoid']
Safety,[TTree] Avoid time-consuming part of FindLeaf if leaf name has no '.',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2437:8,Avoid,Avoid,8,https://root.cern,https://github.com/root-project/root/pull/2437,1,['Avoid'],['Avoid']
Safety,[TWebFile] avoid if/else statement with same result ROOT-10373,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4574:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/4574,1,['avoid'],['avoid']
Safety,[VecOps] Avoid -ffast-math,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12214:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/12214,1,['Avoid'],['Avoid']
Safety,[VecOps] Avoid allocating temporaries on heap in InvariantMass[es],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4153:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/4153,1,['Avoid'],['Avoid']
Safety,[WIP] Load libCling with RTLD_DEEPBIND to avoid collissions of LLVM symbols,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4668:42,avoid,avoid,42,https://root.cern,https://github.com/root-project/root/pull/4668,1,['avoid'],['avoid']
Safety,[backport-v626] Avoid using deprecated std::iterator in several classes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11270:16,Avoid,Avoid,16,https://root.cern,https://github.com/root-project/root/pull/11270,1,['Avoid'],['Avoid']
Safety,[cling] Avoid assert firing on ODRHash collisions:,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9248:8,Avoid,Avoid,8,https://root.cern,https://github.com/root-project/root/pull/9248,1,['Avoid'],['Avoid']
Safety,[cling] DynamicLookup: avoid printing internal expression representation for non-debug builds,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6938:23,avoid,avoid,23,https://root.cern,https://github.com/root-project/root/pull/6938,1,['avoid'],['avoid']
Safety,[cling] Try to avoid crashes in llvm::identify_magic,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11174:15,avoid,avoid,15,https://root.cern,https://github.com/root-project/root/pull/11174,1,['avoid'],['avoid']
Safety,[cling] Try to avoid crashes in llvm::identify_magic [v6.26],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11187:15,avoid,avoid,15,https://root.cern,https://github.com/root-project/root/pull/11187,1,['avoid'],['avoid']
Safety,[cling] Warn on redundant parentheses in declarators whose parsing might not match the user intent,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8555:16,redund,redundant,16,https://root.cern,https://github.com/root-project/root/pull/8555,1,['redund'],['redundant']
Safety,[cling] fix unsafe mix of type warning in Diagnostic.cpp,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13444:12,unsafe,unsafe,12,https://root.cern,https://github.com/root-project/root/pull/13444,1,['unsafe'],['unsafe']
Safety,[clingutils] Modernize C++ casting in generated dictionaries to avoid potential warnings in derived applications,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9761:64,avoid,avoid,64,https://root.cern,https://github.com/root-project/root/pull/9761,1,['avoid'],['avoid']
Safety,"[cmake] Avoid ""warning: redirecting to https://""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1963:8,Avoid,Avoid,8,https://root.cern,https://github.com/root-project/root/pull/1963,1,['Avoid'],['Avoid']
Safety,[cmake] Avoid warning when building from tar file,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16226:8,Avoid,Avoid,8,https://root.cern,https://github.com/root-project/root/pull/16226,1,['Avoid'],['Avoid']
Safety,"[cmake] Fix Davix uuid detection, gfal defaults to off",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13059:23,detect,detection,23,https://root.cern,https://github.com/root-project/root/pull/13059,1,['detect'],['detection']
Safety,[cmake] Fix version detection for old TBB,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14942:20,detect,detection,20,https://root.cern,https://github.com/root-project/root/pull/14942,1,['detect'],['detection']
Safety,[cmake] Increase the internet connection test timeout.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9405:46,timeout,timeout,46,https://root.cern,https://github.com/root-project/root/pull/9405,1,['timeout'],['timeout']
Safety,[cmake] Reduce the redundant dependencies to onepcm.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1188:19,redund,redundant,19,https://root.cern,https://github.com/root-project/root/pull/1188,1,['redund'],['redundant']
Safety,[cmake] Some improvements related to feature detection,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14834:45,detect,detection,45,https://root.cern,https://github.com/root-project/root/pull/14834,1,['detect'],['detection']
Safety,[cmake][webgui] Decrease webgui-ping timeout,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16710:37,timeout,timeout,37,https://root.cern,https://github.com/root-project/root/pull/16710,1,['timeout'],['timeout']
Safety,"[core,v6-26] TViewPubDataMembersIter: avoid using deprecated `std::iterator`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10468:38,avoid,avoid,38,https://root.cern,https://github.com/root-project/root/pull/10468,1,['avoid'],['avoid']
Safety,[core/base] Null ptr access safety,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11443:28,safe,safety,28,https://root.cern,https://github.com/root-project/root/pull/11443,1,['safe'],['safety']
Safety,[core] Avoid deprecated `std::iterator`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10571:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/10571,1,['Avoid'],['Avoid']
Safety,[core] Remove redundant forward decl of std.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5300:14,redund,redundant,14,https://root.cern,https://github.com/root-project/root/pull/5300,1,['redund'],['redundant']
Safety,[core] Rework the field lookups in base classes to avoid iteration.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10245:51,avoid,avoid,51,https://root.cern,https://github.com/root-project/root/pull/10245,1,['avoid'],['avoid']
Safety,[core] TViewPubDataMembersIter: avoid using deprecated `std::iterator`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10457:32,avoid,avoid,32,https://root.cern,https://github.com/root-project/root/pull/10457,1,['avoid'],['avoid']
Safety,[core] avoid using VLA in TListOfTypes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16476:7,avoid,avoid,7,https://root.cern,https://github.com/root-project/root/pull/16476,1,['avoid'],['avoid']
Safety,[cxxmodules] Add pthread_setname_np forward decl to avoid warning in,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2629:52,avoid,avoid,52,https://root.cern,https://github.com/root-project/root/pull/2629,1,['avoid'],['avoid']
Safety,[cxxmodules] Avoid loading more modules while instantiating templates,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13046:13,Avoid,Avoid,13,https://root.cern,https://github.com/root-project/root/pull/13046,1,['Avoid'],['Avoid']
Safety,[cxxmodules] Avoid loading more modules while instantiating templates [v6.28],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13050:13,Avoid,Avoid,13,https://root.cern,https://github.com/root-project/root/pull/13050,1,['Avoid'],['Avoid']
Safety,[cxxmodules] Avoid lookup from system headers,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11514:13,Avoid,Avoid,13,https://root.cern,https://github.com/root-project/root/pull/11514,1,['Avoid'],['Avoid']
Safety,"[cxxmodules] Do not push a transaction per LoadModule. Prior to this patch, we push/pop transaction for each LoadModule call. This is reasonable if we assume modules are perfectly layered. That is, no eager module deserialization require definitions from another module. This is hard to achieve for dependent on ROOT codebases during their incremental migration process.; ; The current patch push/pops once per loading of all modules. This should perform slightly better and allow entangled modules to still load. This patch should address the CMSSW Modules IB:; Assertion `OldBuilder->DeferredDeclsToEmit.empty() && ""Should have emitted all decls deferred to emit.""' failed.; ```; 0 0x00007ffff6f113d7 in raise () from /lib64/libc.so.6; 1 0x00007ffff6f12ac8 in abort () from /lib64/libc.so.6; 2 0x00007ffff6f0a1a6 in __assert_fail_base () from /lib64/libc.so.6; 3 0x00007ffff6f0a252 in __assert_fail () from /lib64/libc.so.6; 4 0x00007fffed24ed82 in clang::CodeGeneratorImpl::StartModule; 5 0x00007fffed24d33e in clang::CodeGenerator::StartModule; 6 0x00007fffed0664f1 in cling::IncrementalParser::StartModule; 7 0x00007fffed066f84 in cling::IncrementalParser::codeGenTransaction; 8 0x00007fffed066aec in cling::IncrementalParser::commitTransaction; 9 0x00007fffecf1af2c in cling::Interpreter::PushTransactionRAII::pop; 10 0x00007fffecf1ae72 in cling::Interpreter::PushTransactionRAII::~PushTransactionRAII; 11 0x00007fffece78534 in ClingMemberIterInternal::DCIter::DCIter; 12 0x00007fffece7712c in TClingMemberIter::TClingMemberIter; 13 0x00007fffece7724c in TClingDataMemberIter::TClingDataMemberIter; 14 0x00007fffece750b6 in TClingDataMemberInfo::TClingDataMemberInfo; 15 0x00007fffecd25918 in TCling::DataMemberInfo_Factory; 16 0x00007ffff6b0e33e in TListOfDataMembers::Load; 17 0x00007ffff6ae539d in TClass::CreateListOfDataMembers; 18 0x00007ffff6ae54d4 in TClass::GetListOfDataMembers; 19 0x00007ffff6ae3dd1 in TClass::GetDataMember; 20 0x00007ffff6b259a0 in ROOT::Detail::TSchemaRuleSet::Add",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7398:762,abort,abort,762,https://root.cern,https://github.com/root-project/root/pull/7398,1,['abort'],['abort']
Safety,[cxxmodules] Do not trigger redundant deserializations.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4409:28,redund,redundant,28,https://root.cern,https://github.com/root-project/root/pull/4409,1,['redund'],['redundant']
Safety,[cxxmodules] Mark string_view as textual to avoid bugs in clang-5.0,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4451:44,avoid,avoid,44,https://root.cern,https://github.com/root-project/root/pull/4451,1,['avoid'],['avoid']
Safety,[cxxmodules] Order includes avoiding infinite loop in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4129:28,avoid,avoiding,28,https://root.cern,https://github.com/root-project/root/pull/4129,1,['avoid'],['avoiding']
Safety,[cxxmodules] Print stacktrace before aborting on a missing exception.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/921:37,abort,aborting,37,https://root.cern,https://github.com/root-project/root/pull/921,1,['abort'],['aborting']
Safety,[cxxmodules][cling] Avoid loading some unnecessary modules,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10910:20,Avoid,Avoid,20,https://root.cern,https://github.com/root-project/root/pull/10910,1,['Avoid'],['Avoid']
Safety,[davix] avoid using VLA,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16519:8,avoid,avoid,8,https://root.cern,https://github.com/root-project/root/pull/16519,1,['avoid'],['avoid']
Safety,[df] Avoid lock to check simple typeids,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16528:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/16528,1,['Avoid'],['Avoid']
Safety,[df] Avoid memory leak in JIT when the execution is not triggered,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15400:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/15400,1,['Avoid'],['Avoid']
Safety,"[dictgen] On macOS, use argv[0] to detect genreflex:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9501:35,detect,detect,35,https://root.cern,https://github.com/root-project/root/pull/9501,1,['detect'],['detect']
Safety,[geom] Add cache layer for TGeoParallelWorld safeties in TGeoNavigator,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16470:45,safe,safeties,45,https://root.cern,https://github.com/root-project/root/pull/16470,1,['safe'],['safeties']
Safety,"[gui] fix leak in TGFSComboBox, avoid usage of static variable",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7337:32,avoid,avoid,32,https://root.cern,https://github.com/root-project/root/pull/7337,1,['avoid'],['avoid']
Safety,[hadd] avoid large RAM usage in hadd with multiple subdirs,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15059:7,avoid,avoid,7,https://root.cern,https://github.com/root-project/root/pull/15059,1,['avoid'],['avoid']
Safety,[hist] Avoid `try-catch` in TH1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13748:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/13748,1,['Avoid'],['Avoid']
Safety,"[http] Improve syntax, avoid interpreter calls",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15019:23,avoid,avoid,23,https://root.cern,https://github.com/root-project/root/pull/15019,1,['avoid'],['avoid']
Safety,[inc] avoid doxygen warnings,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9943:6,avoid,avoid,6,https://root.cern,https://github.com/root-project/root/pull/9943,1,['avoid'],['avoid']
Safety,[io] Avoid nullptr deref when printing warning in TStreamerInfo,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8351:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/8351,1,['Avoid'],['Avoid']
Safety,[math] Avoid out-of-bounds array access with `vc` in FitUtil.h,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13772:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/13772,1,['Avoid'],['Avoid']
Safety,[math] Avoid warnings about deleting unallocated objects in `TDecompLU`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10582:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/10582,1,['Avoid'],['Avoid']
Safety,[math] Avoid warnings from Vc.h from deprecated enum comparisons,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13360:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/13360,1,['Avoid'],['Avoid']
Safety,[math] Avoid warnings from Vc.h in Fedora nightlies and add some missing `override`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12987:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/12987,1,['Avoid'],['Avoid']
Safety,[math][minuit2] Avoid hiding member functions with `using`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11915:16,Avoid,Avoid,16,https://root.cern,https://github.com/root-project/root/pull/11915,1,['Avoid'],['Avoid']
Safety,"[net/monalisa/src/TMonaLisaWriter.cxx:956] -> [net/monalisa/src/TMonaLisaWriter.cxx:957]: (error) Iterator 'iter' used after element has been erased.; [proof/proofd/src/XrdProofdProofServMgr.cxx:4648] -> [proof/proofd/src/XrdProofdProofServMgr.cxx:4646]: (error) Iterator 'iter' used after element has been erased. [math/minuit2/src/Minuit2Minimizer.cxx:669] -> [math/minuit2/src/Minuit2Minimizer.cxx:669]: (style) Same expression on both sides of '||'.; [math/minuit2/src/Minuit2Minimizer.cxx:736] -> [math/minuit2/src/Minuit2Minimizer.cxx:736]: (style) Same expression on both sides of '||'.; [math/minuit2/src/Minuit2Minimizer.cxx:753] -> [math/minuit2/src/Minuit2Minimizer.cxx:753]: (style) Same expression on both sides of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true.; [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check.; [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check.; [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check.; [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed.; [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd; [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s; [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname; [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname; [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1343:775,Redund,Redundant,775,https://root.cern,https://github.com/root-project/root/pull/1343,1,['Redund'],['Redundant']
Safety,[netxng] Avoid XRootD warnings in generated source,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9582:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/9582,1,['Avoid'],['Avoid']
Safety,[netxng] Avoid XRootD warnings in generated source [v6.26],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9701:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/9701,1,['Avoid'],['Avoid']
Safety,[ntuple] Avoid double delete in RField<RVec<T>>::DestroyValue,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9097:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/9097,1,['Avoid'],['Avoid']
Safety,[ntuple] Avoid gtest warnings about deprecated `TYPED_TEST_CASE`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12489:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/12489,1,['Avoid'],['Avoid']
Safety,[ntuple] Avoid lambda capture of structured binding,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12009:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/12009,1,['Avoid'],['Avoid']
Safety,[ntuple] Avoid the use of `TClassEdit::ResolveTypedef()` in the creation of class members' fields,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13255:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/13255,1,['Avoid'],['Avoid']
Safety,[ntuple] Avoid unnecessary meta-data memory copies,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4347:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/4347,1,['Avoid'],['Avoid']
Safety,[ntuple] Avoid warning about possibly uninitialized variable,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12440:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/12440,2,['Avoid'],['Avoid']
Safety,[ntuple] Fix ASAN detected buffer overflow,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10071:18,detect,detected,18,https://root.cern,https://github.com/root-project/root/pull/10071,1,['detect'],['detected']
Safety,[ntuple] Minor safety improvements to the RField API,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13507:15,safe,safety,15,https://root.cern,https://github.com/root-project/root/pull/13507,1,['safe'],['safety']
Safety,[ntuple] avoid inheriting from std::iterator for all homebrew iterators (NFC),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5890:9,avoid,avoid,9,https://root.cern,https://github.com/root-project/root/pull/5890,1,['avoid'],['avoid']
Safety,[ntuple] avoid page source/sink in public reader/writer interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14521:9,avoid,avoid,9,https://root.cern,https://github.com/root-project/root/pull/14521,1,['avoid'],['avoid']
Safety,[ntuple] avoid some memory allocations in RPageStorageFile,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15879:9,avoid,avoid,9,https://root.cern,https://github.com/root-project/root/pull/15879,1,['avoid'],['avoid']
Safety,[ntuple] fix cycle detection for collection proxy classes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14907:19,detect,detection,19,https://root.cern,https://github.com/root-project/root/pull/14907,1,['detect'],['detection']
Safety,[ntuple] rearrange code to avoid a compiler warning,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16709:27,avoid,avoid,27,https://root.cern,https://github.com/root-project/root/pull/16709,1,['avoid'],['avoid']
Safety,[qt5web] Avoid clang warnings,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13379:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/13379,1,['Avoid'],['Avoid']
Safety,[rawfile] clarify thread safetiness in class comment (NFC),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6474:25,safe,safetiness,25,https://root.cern,https://github.com/root-project/root/pull/6474,1,['safe'],['safetiness']
Safety,[reve] rename some members to avoid duplication,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8195:30,avoid,avoid,30,https://root.cern,https://github.com/root-project/root/pull/8195,1,['avoid'],['avoid']
Safety,[rootcling] Drop redundant function parameter.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4545:17,redund,redundant,17,https://root.cern,https://github.com/root-project/root/pull/4545,1,['redund'],['redundant']
Safety,[rootcling] Remove redundant flag,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4270:19,redund,redundant,19,https://root.cern,https://github.com/root-project/root/pull/4270,1,['redund'],['redundant']
Safety,[rpdutils] Avoid linux macro redefinition warning.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3874:11,Avoid,Avoid,11,https://root.cern,https://github.com/root-project/root/pull/3874,1,['Avoid'],['Avoid']
Safety,"[skip-ci]. # This Pull request:. Makes the CI load OpenStack object-store credentials from files on runners instead of using GitHub secrets. When `pull_request` is a workflow trigger, the job can't access secrets, which means that the S3 secret token is unavailable. Adding S3 credentials to the runners themselves solves this issue. The OpenStack credentials are defined [here](https://gitlab.cern.ch/ai/it-puppet-hostgroup-lcgapp/-/blob/rootci_test/code/manifests/build/root.pp#L43) (using [teigi](https://configdocs.web.cern.ch/secrets/adding.html)). If a malicious actor makes a PR with a job to print the credentials, or to upload a malicious artifact, it would still have to be approved by a maintainer. A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12201:712,safe,safer,712,https://root.cern,https://github.com/root-project/root/pull/12201,1,['safe'],['safer']
Safety,[skip-ci][v628][tutorials] Fix `tensorflow` and `pytorch` detection in TMVA tutorial,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15296:58,detect,detection,58,https://root.cern,https://github.com/root-project/root/pull/15296,1,['detect'],['detection']
Safety,[skip-ci][v630][tutorials] Fix `tensorflow` and `pytorch` detection in TMVA tutorial,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15297:58,detect,detection,58,https://root.cern,https://github.com/root-project/root/pull/15297,1,['detect'],['detection']
Safety,[tmva] Avoid calling TMVA::Python_Executable() when Pymva is not available,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10253:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/10253,1,['Avoid'],['Avoid']
Safety,"[tmva] Impose correct test dependencies, avoid multiple invocations of Declare, avoid races when writing model files",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16711:41,avoid,avoid,41,https://root.cern,https://github.com/root-project/root/pull/16711,2,['avoid'],['avoid']
Safety,[tmva] More fixes to avoid timeout in TMVA tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12041:21,avoid,avoid,21,https://root.cern,https://github.com/root-project/root/pull/12041,2,"['avoid', 'timeout']","['avoid', 'timeout']"
Safety,[tmva][pymva] Avoid creating the output file tmva.root,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14125:14,Avoid,Avoid,14,https://root.cern,https://github.com/root-project/root/pull/14125,1,['Avoid'],['Avoid']
Safety,[tmva][pymva] Backport in 6.28 the fix to avoid creating output file tmva.root,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14996:42,avoid,avoid,42,https://root.cern,https://github.com/root-project/root/pull/14996,1,['avoid'],['avoid']
Safety,[tree] Avoid buffer overflow in TBranch,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15620:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/15620,1,['Avoid'],['Avoid']
Safety,[tree] Avoid odr-using TTree::kMaxEntries,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12352:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/12352,1,['Avoid'],['Avoid']
Safety,[tree] Avoid odr-using TTree::kMaxEntries (v6.28),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12369:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/12369,1,['Avoid'],['Avoid']
Safety,[tree] avoid dependency from TreePlayer,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5246:7,avoid,avoid,7,https://root.cern,https://github.com/root-project/root/pull/5246,2,['avoid'],['avoid']
Safety,[tree] public method should be safe against fImpl = null,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15324:31,safe,safe,31,https://root.cern,https://github.com/root-project/root/pull/15324,1,['safe'],['safe']
Safety,"[tutorial,pythia8] Try to work around timeout on Fed28.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2359:38,timeout,timeout,38,https://root.cern,https://github.com/root-project/root/pull/2359,1,['timeout'],['timeout']
Safety,[tutorials] Fix `tensorflow` and `pytorch` detection in TMVA tutorial,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15295:43,detect,detection,43,https://root.cern,https://github.com/root-project/root/pull/15295,1,['detect'],['detection']
Safety,[tutorials] safer version of CPUMeter.C,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14379:12,safe,safer,12,https://root.cern,https://github.com/root-project/root/pull/14379,1,['safe'],['safer']
Safety,[v6-28] Add a safety check on `std::multimap::empty()`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14240:14,safe,safety,14,https://root.cern,https://github.com/root-project/root/pull/14240,1,['safe'],['safety']
Safety,[v6-28] Qualify calls to llvm::format that have ::std:: types as parameters to avoid ambiguity in overload resolution when ADL finds `std::format`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12732:79,avoid,avoid,79,https://root.cern,https://github.com/root-project/root/pull/12732,1,['avoid'],['avoid']
Safety,[v6-30] Add a safety check on `std::multimap::empty()`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14239:14,safe,safety,14,https://root.cern,https://github.com/root-project/root/pull/14239,1,['safe'],['safety']
Safety,[v6-32][cmake] Avoid warning when building from tar file,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16231:15,Avoid,Avoid,15,https://root.cern,https://github.com/root-project/root/pull/16231,1,['Avoid'],['Avoid']
Safety,[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13500:73,safe,safe,73,https://root.cern,https://github.com/root-project/root/pull/13500,1,['safe'],['safe']
Safety,[v628] io: Avoid infinite recursion in TFile::Open,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15625:11,Avoid,Avoid,11,https://root.cern,https://github.com/root-project/root/pull/15625,1,['Avoid'],['Avoid']
Safety,[v628][CI] Disable `tmva-cpu` on `alma9` to avoid openblas clashes with NumPy,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15305:44,avoid,avoid,44,https://root.cern,https://github.com/root-project/root/pull/15305,1,['avoid'],['avoid']
Safety,[v630][CI] Disable `tmva-cpu` on `alma9` to avoid openblas clashes with NumPy,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15303:44,avoid,avoid,44,https://root.cern,https://github.com/root-project/root/pull/15303,1,['avoid'],['avoid']
Safety,[v630][DF][backport] Avoid usage of Mathmore/gsl in df106 tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13994:21,Avoid,Avoid,21,https://root.cern,https://github.com/root-project/root/pull/13994,1,['Avoid'],['Avoid']
Safety,[v632][CI] Disable `tmva-cpu` on `alma9` to avoid openblas clashes with NumPy,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15304:44,avoid,avoid,44,https://root.cern,https://github.com/root-project/root/pull/15304,1,['avoid'],['avoid']
Safety,[v632][tutorials] Fix `tensorflow` and `pytorch` detection in TMVA tutorial,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15298:49,detect,detection,49,https://root.cern,https://github.com/root-project/root/pull/15298,1,['detect'],['detection']
Safety,"[web geom] avoid binary data transfer, use JSON_base64",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4146:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/4146,1,['avoid'],['avoid']
Safety,[webgui] detect available browser when producing image,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13097:9,detect,detect,9,https://root.cern,https://github.com/root-project/root/pull/13097,1,['detect'],['detect']
Safety,[windows] Make `OpenDirectory` and `GetDirEntry` thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13472:56,safe,safe,56,https://root.cern,https://github.com/root-project/root/pull/13472,1,['safe'],['safe']
Safety,"\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl:288; #30 0x7ffe2028257c (C:\Windows\System32\KERNEL32.DLL+0x18001257c); #31 0x7ffe20a4af27 (C:\Windows\SYSTEM32\ntdll.dll+0x18005af27). SUMMARY: AddressSanitizer: heap-use-after-free C:\root-dev\git\master\core\base\src\TObject.cxx:120 in ROOT::Internal::DeleteChangesMemoryImpl(void); Shadow bytes around the buggy address:; 0x1262507beb00: fa fa fd fd fa fa fd fd fa fa fd fd fa fa fd fd; 0x1262507beb80: fa fa fd fd fa fa fd fd fa fa fd fd fa fa fd fd; 0x1262507bec00: fa fa fd fd fa fa fd fd fa fa fd fd fa fa fd fd; 0x1262507bec80: fa fa fd fd fa fa fd fd fa fa fd fd fa fa 00 00; 0x1262507bed00: fa fa fd fd fa fa 00 00 fa fa 00 00 fa fa 00 fa; =>0x1262507bed80: fa fa 00 fa fa fa 00 fa fa fa fd[fd]fa fa fa fa; 0x1262507bee00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x1262507bee80: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x1262507bef00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x1262507bef80: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x1262507bf000: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==13496==ABORTING; C:\Program Files\Microsoft Visual Studio\2022\Preview\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(254,5): error MSB8066: Custom build for 'C:\root-dev\build\x64\relwithdebinfo\CMakeFiles\6d5; 58ca9313984d42dbbac9eac898107\G__ROOTVecOps.cxx.rule' exited with code 1. [C:\root-dev\build\x64\relwithdebinfo\math\vecops\G__ROOTVecOps.vcxproj]; ```; Now I don't know how ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9445#issuecomment-2370893163:13462,ABORT,ABORTING,13462,https://root.cern,https://github.com/root-project/root/issues/9445#issuecomment-2370893163,1,['ABORT'],['ABORTING']
Safety,"\n"";. // The model can now be applied in different scenarios:; // 1) Event-by-event inference; // 2) Batch inference on data of multiple events; // 3) Model inference as part of an RDataFrame graph. // 1) Event-by-event inference; // The event-by-event inference takes the values of the variables as a std::vector<float>.; // Note that the return value is as well a std::vector<float> since the reader; // is also capable to process models with multiple outputs.; auto prediction = model.Predict({0.5, 1.0, -0.2, 1.5});; std::cout << ""Single-event inference: "" << prediction << ""\n\n"";. // 2) Batch inference on data of multiple events; // For batch inference, the data needs to be structured as a matrix. For this; // purpose, TMVA makes use of the RTensor class. For convenience, we use RDataFrame; // and the AsTensor utility to make the read-out from the ROOT file.; ROOT::RDataFrame df(""TreeS"", filename);; auto df2 = df.Range(3); // Read only 10 events; auto x = AsTensor<float>(df2, variables);; std::cout << ""RTensor input for inference on data of multiple events:\n"" << x << ""\n\n"";. auto y = model.Predict(x);; std::cout << ""Prediction performed on multiple events: "" << y << ""\n\n"";. // 3) Perform inference as part of an RDataFrame graph; // We write a small lambda function that performs for us the inference on; // a dataframe to omit code duplication.; auto make_histo = [&](const std::string &treename) {; ROOT::RDataFrame df(treename, filename);; auto df2 = df.Define(""y"", Predict<4, float>(model), variables);; return df2.Histo1D({"""", """", 30, -1, 1}, ""y"");; };. auto sig = make_histo(""TreeS"");; auto bkg = make_histo(""TreeB"");. gStyle->SetOptStat(0);; auto c = new TCanvas("""", """", 800, 800);; sig->SetLineColor(kRed);; bkg->SetLineColor(kBlue);; bkg->GetXaxis()->SetTitle(""Model response"");; bkg->Draw(""HIST"");; sig->Draw(""HIST SAME"");; c->SaveAs(""bdt_response.pdf"");; }; ```. ![x](https://user-images.githubusercontent.com/6951222/51740397-2f295f80-2094-11e9-8c29-b40bc618a4bc.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3321:1956,Predict,Predict,1956,https://root.cern,https://github.com/root-project/root/pull/3321,3,['Predict'],"['Predict', 'Prediction']"
Safety,"_local i8** @__cudaRegisterFatBinary(i8*); > ; > define dso_local void @__cuda_module_ctor_cling_module_6(i8*) {; > %2 = call i8** @__cudaRegisterFatBinary(i8* bitcast ({ i32, i32, i8*, i8* }* @__cuda_fatbin_wrapper to i8*)); > store i8** %2, i8*** @__cuda_gpubin_handle, align 8; > call void @__cuda_register_globals(i8** %2); > call void @__cudaRegisterFatBinaryEnd(i8** %2); > %3 = call i32 @atexit(void (i8*)* @__cuda_module_dtor_cling_module_6); > ret void; > }; > ; > declare dso_local void @__cudaRegisterFatBinaryEnd(i8**); > ; > declare dso_local void @__cudaUnregisterFatBinary(i8**); > ; > define dso_local void @__cuda_module_dtor_cling_module_6(i8*) {; > %2 = load i8**, i8*** @__cuda_gpubin_handle, align 8; > call void @__cudaUnregisterFatBinary(i8** %2); > ret void; > }; > ; > declare dso_local i32 @atexit(void (i8*)*); > ; > ; Function Attrs: nounwind; > declare void @llvm.stackprotector(i8*, i8**) #2; > ; > attributes #0 = { noinline uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-frame-pointer-elim""=""false"" ""no-frame-pointer-elim-non-leaf"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }; > attributes #1 = { argmemonly nounwind }; > attributes #2 = { nounwind }; > ; > !llvm.module.flags = !{!0, !1}; > !llvm.ident = !{!2}; > ; > !0 = !{i32 2, !""SDK Version"", [2 x i32] [i32 10, i32 1]}; > !1 = !{i32 1, !""wchar_size"", i32 4}; > !2 = !{!""clang version 9.0.1 (http://root.cern.ch/git/clang.git 535acc218f73a05f5602c950898dafda8a45feb7) (http://root.cern.ch/git/llvm.git c41338c59334340ee4d85a7c9bbdf49a4f59f76b)""}; > ```. @hahnjo, I had the impression you fixed a similar issue in llvm mainline? Could you help with this here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1164697687:23993,unsafe,unsafe-fp-math,23993,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1164697687,1,['unsafe'],['unsafe-fp-math']
Safety,"_renderer, ; GLX_MESA_swap_control, GLX_OML_swap_method, GLX_OML_sync_control, ; GLX_SGIS_multisample, GLX_SGIX_fbconfig, GLX_SGIX_pbuffer, ; GLX_SGIX_visual_select_group, GLX_SGI_make_current_read, ; GLX_SGI_swap_control, GLX_SGI_video_sync; GLX version: 1.2; GLX extensions:; GLX_ARB_get_proc_address, GLX_ARB_multisample, GLX_EXT_import_context, ; GLX_EXT_visual_info, GLX_EXT_visual_rating, GLX_MESA_query_renderer, ; GLX_OML_swap_method, GLX_SGIS_multisample, GLX_SGIX_fbconfig, ; GLX_SGI_make_current_read; Extended renderer info (GLX_MESA_query_renderer):; Vendor: VMware, Inc. (0xffffffff); Device: llvmpipe (LLVM 10.0.0, 256 bits) (0xffffffff); Version: 20.0.8; Accelerated: no; Video memory: 7279MB; Unified memory: no; Preferred profile: core (0x1); Max core profile version: 3.3; Max compat profile version: 3.1; Max GLES1 profile version: 1.1; Max GLES[23] profile version: 3.1; ... Full error:; Error in <TEveViewer::SpawnGLViewer>: Insufficient support from the graphics hardware. Aborting.; *** Break *** segmentation violation; Generating stack trace...; 0x00007fd360487563 in TEveViewer::SpawnGLViewer(TGedEditor*, bool, bool) at /media/disk1/SHiPBuild/sw/SOURCES/ROOT/5479ddb618_FAIRSHIP/0/graf3d/eve/src/TEveViewer.cxx:182 from /media/disk1/SHiPBuild/sw/ubuntu2004_x86-64/ROOT/5479ddb618_FAIRSHIP-1/lib/libEve.so.6.22; 0x00007fd360430693 in TEveManager::SpawnNewViewer(char const*, char const*, bool) at /media/disk1/SHiPBuild/sw/SOURCES/ROOT/5479ddb618_FAIRSHIP/0/graf3d/eve/src/TEveManager.cxx:327 (discriminator 4) from /media/disk1/SHiPBuild/sw/ubuntu2004_x86-64/ROOT/5479ddb618_FAIRSHIP-1/lib/libEve.so.6.22; 0x00007fd360433458 in TEveManager::TEveManager(unsigned int, unsigned int, bool, char const*) at /media/disk1/SHiPBuild/sw/SOURCES/ROOT/5479ddb618_FAIRSHIP/0/graf3d/eve/src/TEveManager.cxx:175 (discriminator 1) from /media/disk1/SHiPBuild/sw/ubuntu2004_x86-64/ROOT/5479ddb618_FAIRSHIP-1/lib/libEve.so.6.22; 0x00007fd360433885 in TEveManager::Create(bool, char const*",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6774:2298,Abort,Aborting,2298,https://root.cern,https://github.com/root-project/root/issues/6774,1,['Abort'],['Aborting']
Safety,_stressHistFactory](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30062/testReport/projectroot/test/test_stressHistFactory/); - [projectroot.roottest.root.tree.cache.roottest_root_tree_cache_autocache](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30062/testReport/projectroot.roottest.root.tree/cache/roottest_root_tree_cache_autocache/); - [projectroot.io.io.test.gtest_io_io_test_test_io](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30062/testReport/projectroot.io.io/test/gtest_io_io_test_test_io/); - [projectroot.test.test_stressHistFactory_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30062/testReport/projectroot/test/test_stressHistFactory_interpreted/); - [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_snapshot](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30062/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_dataframe_snapshot/); - [projectroot.roottest.root.io.recover.roottest_root_io_recover_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30062/testReport/projectroot.roottest.root.io/recover/roottest_root_io_recover_make/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_mixedBase_merge1](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30062/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_mixedBase_merge1/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_mixedBase_merge2](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30062/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_mixedBase_merge2/); - [projectroot.roottest.root.tree.chain.roottest_root_tree_chain_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30062/testReport/projectroot.roottest.root.tree/chain/roottest_root_tree_chain_make/); - [projectroot.roottest.root.tree.cloning.roottest_root_tree_cloning_assertBranchCount](http,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2188#issuecomment-396924388:3658,recover,recover,3658,https://root.cern,https://github.com/root-project/root/pull/2188#issuecomment-396924388,1,['recover'],['recover']
Safety,_stressHistFactory](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30063/testReport/projectroot/test/test_stressHistFactory/); - [projectroot.roottest.root.tree.cache.roottest_root_tree_cache_autocache](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30063/testReport/projectroot.roottest.root.tree/cache/roottest_root_tree_cache_autocache/); - [projectroot.io.io.test.gtest_io_io_test_test_io](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30063/testReport/projectroot.io.io/test/gtest_io_io_test_test_io/); - [projectroot.test.test_stressHistFactory_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30063/testReport/projectroot/test/test_stressHistFactory_interpreted/); - [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_snapshot](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30063/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_dataframe_snapshot/); - [projectroot.roottest.root.io.recover.roottest_root_io_recover_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30063/testReport/projectroot.roottest.root.io/recover/roottest_root_io_recover_make/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_mixedBase_merge1](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30063/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_mixedBase_merge1/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_mixedBase_merge2](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30063/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_mixedBase_merge2/); - [projectroot.roottest.root.tree.cloning.roottest_root_tree_cloning_assertBranchCount](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30063/testReport/projectroot.roottest.root.tree/cloning/roottest_root_tree_cloning_assertBranchCount/); - [projectroot.roottest.root.tree.chain.roottest_root_tree,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2188#issuecomment-396933089:1170,recover,recover,1170,https://root.cern,https://github.com/root-project/root/pull/2188#issuecomment-396933089,1,['recover'],['recover']
Safety,"` is still empty. So the `diagrams.size() > 0` check will never be true and the if-block can be removed, no?; - [x] The [`_nonInterferig`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/inc/RooLagrangianMorphFunc.h#L266) data member is used in a few member functions, but it is never filled so always an empty vector. How meaningful is that? Can `_nonInterfering` be removed? ; - [x] It's annoying to have all these explicit usage of `this`, just to access a class member that is already marked as a class member with the underscore prefix convention. Please replace all occurences of `this->_` in the source file with just `_`.; - [x] [`makeCrosssectionContainer()`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2128) returns a `TPair*` that is owned by the caller. Please return `std::unique_ptr<TPair>` is this case, or even better return a `std::pair` instead (avoid using old ROOT container classes that were written before the standard library was introduced).; - [x] Similarly, [`createTH1`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2621) returns an owning raw pointer too, while it should return a `std::unique_ptr<TH1>` in this case. Can this interface still be changed without disrupting users too much? **No, this can break usercode, so this suggestion was not implemented!**. All these flaws above have been addressed by @rahulgrit in #9912. Some more flaws were fixed in #11023. - [x] The `getCache` function takes a unused argument. It is a private function, so to signature can simply be changed and the argument removed; - [x] The unused `_ownsParameters` member should be removed. However, that's not all! There are more issues with this class that have to be resolved in a followup PR:. - [x] Various memory leaks (search for `new ` in the file and you will fi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9845:1800,avoid,avoid,1800,https://root.cern,https://github.com/root-project/root/issues/9845,1,['avoid'],['avoid']
Safety,` section in JSON to store variable ranges; Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252); [RF] Clearly mark `RooFit::CloneData()` as deprecated; [RF] Again code-format RooMinimizer; [RF] Avoid overhead of tracking evaluation error msgs when not needed; [RF] Implement safe way to set eval error logging in RooMinimizer; [RF] Use proper infinity checks in RooFit HS3; [RF] Avoid `sin` or `cos` of infinity in RooTruthModel integral code; [RF] RooTruthModel: local `xmin` and `xmax` to make code more readable; [RF] Define infinity as `std::numeric_limits<double>::infinity()`; [RF] Inline infinity constant and checks in `RooNumber`; [RF] Code-format RooNumber.h and RooNumber.cxx; [RF] Fill weight errors when importing RooDataHists to RooDataSet; [RF] Make it possible to directly import RooDataHist to RooDataSet; [RF] Reduce code duplication in RooDataSet constructor; [RF] Always create weight var in RooDataSet when importing weighted data; [RF] Implicitly create `WeightVar` for RooDataSet if it doesn't exist; [RF] Support also importing `RooDataHists` into RooDataSets; [RF] Avoid some code duplication in `RooDataSet` with importing slices; [RF] Split RooFuncWrapper into '.h' and '.cxx'.; [RF] Add observables as another parameter in RooFuncWrapper.; [RF] Test rough prototype of code generation in `testRooFuncWrapper`; Add AD based derivatives for RooFuncWrapper.; [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C.; [RF] Make it possible to switch to `ryml` backend after building ROOT; [RF] Add a C/C++ function wrapper class in roofit.; [RF] Fix implementation error from typo in `RooGenProdProj`; [RF] New mechanism to implicitly convert numbers to RooRealVar&; [RF] Remove RooFormula code for gcc <= 4.8; [RF] Remove `RooGenFunction` and `RooMultiGenFunction`; [RF] More use of `snapshot()` overload with output parameter; [RF] Bring back `RooStats::FeldmanCousins::SetData()`; [RF] Remove d,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12590#issuecomment-1491813664:9200,Avoid,Avoid,9200,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664,1,['Avoid'],['Avoid']
Safety,"`DistancetoPrimitive` is the base method to be overridden by visual primitives attached to the pad. In `geom` we attach several different objects. Among these, shapes implement this function directly, while for volumes there is some traversal logic in the geometry painter, dispatching eventually to the shapes methods. Composite Boolean shapes are special and need an extra internal specialized dispatching for union, intersection, and subtraction. The intention was to do this dispatching by avoiding the TObject interface (Boolean nodes are never added directly to the pad), and this is why the upper case `T`. However, due to the complexity, these functions are not implemented, so now they are not even connected to `TGeoCompositeShape::DistancetoPrimitive`. . Sorry for this long explanation, this is only to say there is nothing to worry about, the functions are placeholders to remember that this functionality could be added at some point. I would close this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16087#issuecomment-2255333723:494,avoid,avoiding,494,https://root.cern,https://github.com/root-project/root/issues/16087#issuecomment-2255333723,1,['avoid'],['avoiding']
Safety,`EnableThreadSafety()` is called in `_batchgenerator.py` making another call for it redundant and `class RBatchGenerator` depends to Internal namespace,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14860:84,redund,redundant,84,https://root.cern,https://github.com/root-project/root/pull/14860,1,['redund'],['redundant']
Safety,"`Error` doesn't abort, it just prints an error message. Please communicate the error through a return value, e.g. by returning `nan`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2723#issuecomment-504644265:16,abort,abort,16,https://root.cern,https://github.com/root-project/root/pull/2723#issuecomment-504644265,1,['abort'],['abort']
Safety,`Error` is a bit of a middle ground. It indicates it is bad but recoverable and more important offer the framework that have their own error handler to mark those (and only those) as fatal if they want.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13057#issuecomment-1601284481:64,recover,recoverable,64,https://root.cern,https://github.com/root-project/root/pull/13057#issuecomment-1601284481,1,['recover'],['recoverable']
Safety,"`FunctionScopesStart` and `InventedParameterInfosStart` were introduced by upstream commit https://github.com/llvm/llvm-project/commit/5c845c1c50ac89a6f12557d1571678f3d1432478 and are handled in `ContextRAII`, but not our `ContextAndScopeRAII`. The second commit reuses `ContextRAII` and should avoid this kind of problem in the future. Could fix https://github.com/root-project/root/issues/14230, to be confirmed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15004:295,avoid,avoid,295,https://root.cern,https://github.com/root-project/root/pull/15004,1,['avoid'],['avoid']
Safety,"`GetEntriesFast` is not as fast as it could be: it constructs and; destructs a `TReadLockGuard`, and might need to modify `TObjArray::fLast`.; This PR introduced `GetEntriesUnsafe`, a thread-unsafe version of `GetEntriesFast`; that side-steps these operations when possible. Measurements for the benchmarks in the `philippe` branch of the [df_bench](https://gitlab.com/bluehood/df_bench) repository:. With `GetEntriesFast`:; ```; -----------------------------------------------------------------------------------; Benchmark Time CPU Iterations; -----------------------------------------------------------------------------------; TreeGetEntryOneBranch 192943 ns 192939 ns 3664; TreeGetEntryTwoBranchesAndAllStatusFalse 110524 ns 110521 ns 6433; TreeGetEntryTwoBranches 195864 ns 195859 ns 3430; TreeGetEntryTwoBranchesWithoutSetStatus 317772 ns 317761 ns 2095; BranchGetEntryOneBranch 103652 ns 103650 ns 6730; BranchGetEntryTwoBranches 104072 ns 104070 ns 6707; ```. With `GetEntriesUnsafe`:; ```; -----------------------------------------------------------------------------------; Benchmark Time CPU Iterations; -----------------------------------------------------------------------------------; TreeGetEntryOneBranch 152708 ns 152690 ns 4579; TreeGetEntryTwoBranchesAndAllStatusFalse 91277 ns 91274 ns 7731; TreeGetEntryTwoBranches 173940 ns 173922 ns 4024; TreeGetEntryTwoBranchesWithoutSetStatus 279271 ns 279261 ns 2514; BranchGetEntryOneBranch 104515 ns 104503 ns 6721; BranchGetEntryTwoBranches 104180 ns 104177 ns 6652; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3603:191,unsafe,unsafe,191,https://root.cern,https://github.com/root-project/root/pull/3603,1,['unsafe'],['unsafe']
Safety,"`RColumnRegister` has a copy-on-write policy, introduced by https://github.com/root-project/root/pull/10899 and further explained at https://github.com/root-project/root/pull/11297 . For very large computation graphs (e.g. O(10K) `Define` calls) this means that we are allocating/deallocating `std::shared_ptr<std::unordered_map<std::string, std::shared_ptr<RDefinesWithReaders>>>` of thousands of nodes, with an increasing size at each Define call. While keeping the map with *all* the defined columns is necessary in order to avoid losing information about the computation graph itself, I wonder if we can move away from the copy-on-write policy without too many problems, given the situation presented by the large computation graphs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14490:528,avoid,avoid,528,https://root.cern,https://github.com/root-project/root/pull/14490,1,['avoid'],['avoid']
Safety,`TDirectory::RegisterGDirectory` is MT unsafe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8931:39,unsafe,unsafe,39,https://root.cern,https://github.com/root-project/root/issues/8931,1,['unsafe'],['unsafe']
Safety,"```; /Users/couet/git/zevis/ZevLib/src/ZCanvas.cxx:361:17: error: member access into incomplete type 'TCanvasImp'; fCanvasImp->GetWindowGeometry(fWindowTopX, fWindowTopY,. ```; I am on MacOS. `cmake` gives me:; ```; % cmake ../zevis; -- The CXX compiler identification is AppleClang 11.0.3.11030032; -- The C compiler identification is AppleClang 11.0.3.11030032; -- The Fortran compiler identification is GNU 8.2.0; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Checking whether Fortran compiler has -isysroot; -- Checking whether Fortran compiler has -isysroot - yes; -- Checking whether Fortran compiler supports OSX deployment target flag; -- Checking whether Fortran compiler supports OSX deployment target flag - yes; -- Check for working Fortran compiler: /usr/local/bin/gfortran; -- Check for working Fortran compiler: /usr/local/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /usr/local/bin/gfortran supports Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Performing Test COMPILER_SUPPORTS_-O1; -- Performing Test COMPILER_SUPPORTS_-O1 - Success; -- Performing Test COMPILER_SUPPORTS_-pip",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6344#issuecomment-692657827:683,Detect,Detecting,683,https://root.cern,https://github.com/root-project/root/issues/6344#issuecomment-692657827,4,['Detect'],['Detecting']
Safety,"```; 6 0x00007fc41ee3de62 in Fatima::ReadSensitive(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSFatima.so; #7 0x00007fc42d774f3d in DetectorConstruction::ReadAllSensitive(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so; #8 0x00007fc42d756444 in EventAction::EndOfEventAction(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so; #9 0x00007fc42b8aaf23 in G4EventManager::DoProcessing(G4Event*) () at /home/apal/G4/geant4-install/lib/libG4event.so; #10 0x00007fc42d2240f7 in G4RunManager::DoEventLoop(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so; #11 0x00007fc42d221d22 in G4RunManager::BeamOn(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so; #12 0x00007fc42d23fb27 in G4RunMessenger::SetNewValue(G4UIcommand*, G4String) () at /home/apal/G4/geant4-install/lib/libG4run.so; #13 0x00007fc42d14f35f in G4UIcommand::DoIt(G4String) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so; #14 0x00007fc42d16cc9a in G4UImanager::ApplyCommand(char const*) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so; #15 0x00007fc42d2e28bf in G4VBasicShell::ExecuteCommand(G4String const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so; #16 0x00007fc42d2e7afe in G4VBasicShell::ApplyShellCommand(G4String const&, bool&, bool&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so; #17 0x00007fc42d2daac4 in G4UIQt::ButtonCallback(QString const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so; #18 0x00007fc4283cf328 in QMetaObject::activate(QObject*, int, int, void**) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5; #19 0x00007fc428f0e3e6 in QAction::triggered(bool) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5; #20 0x00007fc428f10aa2 in QAction::activate(QAction::ActionEvent) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5; #21 0x00007fc42900ae10 in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5; #22 0x00007fc42900b035 in QAbstractButton::mouseRele",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11071:150,Detect,DetectorConstruction,150,https://root.cern,https://github.com/root-project/root/issues/11071,1,['Detect'],['DetectorConstruction']
Safety,"```; The following tests FAILED:; 1312 - roottest-python-basic-basic (Failed); 1313 - roottest-python-basic-datatype (Failed); 1315 - roottest-python-basic-overload (Failed); 1409 - roottest-python-pythonizations-pythonizations (Failed); 1410 - roottest-python-pythonizations-smartptr (Failed); 1413 - roottest-python-stl-stl (Failed); 2106 - roottest-root-tree-fastcloning-runabstract-copy (Failed); ```. All tests have the following issue:. ```; Start 1312: roottest-python-basic-basic. 1312: Test command: /usr/bin/cmake ""-DCMD=/usr/bin/timeout^-s^USR2^270s^/home/sftnight/swunsch/python/bin/python3^/home/sftnight/swunsch/root/roottest/python/basic/PyROOT_basictests.py^--fixcling"" ""-DPRE=/home/sftnight/swunsch/build/bin/root.exe^-b^-q^-l^-e^.L ArgumentPassingCompiled.C+"" ""-DOUT=/home/sftnight/swunsch/build/roottest/python/basic/basic.log"" ""-DCWD=/home/sftnight/swunsch/build/roottest/python/basic"" ""-DDIFFCMD=/home/sftnight/swunsch/python/bin/python3^/home/sftnight/swunsch/root/roottest/scripts/custom_diff.py"" ""-DCHECKOUT=true"" ""-DCHECKERR=true"" ""-DSYS=/home/sftnight/swunsch/build"" ""-DENV=LEGACY_PYROOT=False#ROOTSYS=/home/sftnight/swunsch/build#PATH=/home/sftnight/swunsch/build/bin:/home/sftnight/swunsch/python/bin:/home/sftnight/.local/bin:/home/sftnight/bin:/usr/lib64/ccache:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin#PYTHONPATH=/home/sftnight/swunsch/build/lib:#LD_LIBRARY_PATH=/home/sftnight/swunsch/build/lib:/home/sftnight/swunsch/python/lib:"" ""-DCOPY=/home/sftnight/swunsch/root/roottest/python/basic/ArgumentPassingCompiled.C^/home/sftnight/swunsch/root/roottest/python/basic/ReturnValues.C^/home/sftnight/swunsch/root/roottest/python/basic/SimpleClass.C^/home/sftnight/swunsch/root/roottest/python/basic/ArgumentPassingInterpreted.C"" ""-P"" ""/home/sftnight/swunsch/build/RootTestDriver.cmake""; 1312: Environment variables: ; 1312: ROOT_HIST=0; 1312: Test timeout computed to be: 300; 1312: Info in <TUnixSystem::ACLiC>: creating shared library /home/sftnight/swunsch/build",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6597:540,timeout,timeout,540,https://root.cern,https://github.com/root-project/root/issues/6597,1,['timeout'],['timeout']
Safety,"```; root -l 'openTree.C(0)' -b -q; Processing openTree.C(0)...; 7.31217e-322ºC. root -l 'openTree.C(1)' -b -q; Processing openTree.C(1)...; 20.2826ºC; ```. This is the expected result. `TBranch::SetAddress` is a lower level interface and has less ability to check for incorrect setup. Without `SetMakeClass`, if the branch is within an object (i.e. the case here), the input of `SetAddress` is expected to be the start of the object (and thus the offset of the data member is added to the provided address). The explicit purpose of `SetMakeClass` is to disable this addition of the offset. . Note that `TTree::SetBranchAddress` will detect this case and automatically call `SetMakeClass` for the branch:; ```; t4->SetBranchAddress(""fTemperature"", &temp);; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14583#issuecomment-2048287133:634,detect,detect,634,https://root.cern,https://github.com/root-project/root/issues/14583#issuecomment-2048287133,1,['detect'],['detect']
Safety,"```valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C; ==22765== Memcheck, a memory error detector; ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info; ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C; ==22765== . Processing assertSparseSelection.C...; ==22765== Conditional jump or move depends on uninitialised value(s); ==22765== at 0x9D9A01A: llvm::Co",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11385:902,detect,detector,902,https://root.cern,https://github.com/root-project/root/issues/11385,1,['detect'],['detector']
Safety,"`double par[] = {1};` does instead of `double par[0] = {1};` does not avoid the warning, because the compiler can still figure out the size of the array. In the case of multiple parameters, one can use a `std::vector`, in which case the compiler doesn't know the size at all.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12763#issuecomment-1536069548:70,avoid,avoid,70,https://root.cern,https://github.com/root-project/root/pull/12763#issuecomment-1536069548,1,['avoid'],['avoid']
Safety,"`fork()`-ing a multi-thread program typically ends up badly. In ROOT, TBB spawns threads when RTaskArena is constructed, and Cocoa spawns threads, on Mac, when graphics are activated. We would like to employ a similar mechanism to what is used to loop over threads to print their stacktraces on a crash in order to detect whether `TTreeProcessorMP::Process` is called from a multi-thread program, and warn users if so.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7167:315,detect,detect,315,https://root.cern,https://github.com/root-project/root/issues/7167,1,['detect'],['detect']
Safety,"`gPluginManagerMutex` is protecting (mainly but not only) the (shared) container `fHandlers`. As used, it is recursive because we can not tell what we be the side effects of `SetupCallEnv` (if I remember correctly, it calls `TClass::GetClass` which might load a shared library which might run arbitrary code including something using the `PluginManager`. > A shared lock could solve this. . I am not sure what you mean (i.e a straight replacement would not have 'large' performance improvement). One of the thing that we might be able to do is to set the `fHandlers's TList` to be thread safe (by calling `UseRWLock` on it). If we do so, the locking will be move from global to down to the internal operation of the `TList`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11631#issuecomment-1293675942:588,safe,safe,588,https://root.cern,https://github.com/root-project/root/pull/11631#issuecomment-1293675942,1,['safe'],['safe']
Safety,`rootcling` does not properly detect the class doc when using a `ClassDefOverride`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9900:30,detect,detect,30,https://root.cern,https://github.com/root-project/root/issues/9900,1,['detect'],['detect']
Safety,"`roottest-python-JupyROOT-tpython_notebook` fails with `nbconvert-7.14`:; ```diff; --- tpython.ipynb; +++ tpython_out.ipynb; @@ -16,7 +16,14 @@; ""name"": ""stdout"",; ""output_type"": ""stream"",; ""text"": [; - ""1\n""; + ""1""; + ]; + },; + {; + ""name"": ""stdout"",; + ""output_type"": ""stream"",; + ""text"": [; + ""\n""; ]; }; ],; ```. For now, we avoid that version since https://github.com/root-project/roottest/pull/1041 / commit https://github.com/root-project/roottest/commit/a68af407d9577a055f44c58e42c42b1244b484cc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14303:330,avoid,avoid,330,https://root.cern,https://github.com/root-project/root/issues/14303,1,['avoid'],['avoid']
Safety,"`std::vector<T,Allocator>::operator[]` with unsafe assignment break pretty printer",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9166:44,unsafe,unsafe,44,https://root.cern,https://github.com/root-project/root/issues/9166,1,['unsafe'],['unsafe']
Safety,"`vector<char>` is a more common choice as a byte buffer than `unique_ptr<char[]>`, so if it's possible to use it it's still memory-safe and it does not require `make_unique<char[]>`. as per the backport...it's a different jira ticket, but it's broken, so i think it's desirable to have a working version",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2420#issuecomment-409949555:131,safe,safe,131,https://root.cern,https://github.com/root-project/root/pull/2420#issuecomment-409949555,1,['safe'],['safe']
Safety,"a namespace:; ```py; import ROOT. ROOT.gInterpreter.Declare(; """"""; namespace ROOT{; namespace Detail{; struct MyStruct{};; void dostuff(){}; int myint;; }}; """"""; ); ```; Then try to access them in a Python session; ```py; $ python -i namespace_function.py; >>> ROOT.Detail.MyStruct; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; AttributeError: <namespace cppyy.gbl.Detail at 0x55e51fdc7f50> has no attribute 'MyStruct'. Full details:; type object 'Detail' has no attribute 'MyStruct'; 'Detail::MyStruct' is not a known C++ class; 'MyStruct' is not a known C++ template; 'MyStruct' is not a known C++ enum; >>> ROOT.ROOT.Detail.MyStruct; <class cppyy.gbl.ROOT.Detail.MyStruct at 0x55e51fe1dd60>; >>> ROOT.Detail.dostuff; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; AttributeError: <namespace cppyy.gbl.Detail at 0x55e51fdc7f50> has no attribute 'dostuff'. Full details:; type object 'Detail' has no attribute 'dostuff'; 'Detail::dostuff' is not a known C++ class; 'dostuff' is not a known C++ template; 'dostuff' is not a known C++ enum; >>> ROOT.ROOT.Detail.dostuff; <cppyy.CPPOverload object at 0x7f522b684eb0>; >>> ROOT.Detail.myint; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; AttributeError: <namespace cppyy.gbl.Detail at 0x55e51fdc7f50> has no attribute 'myint'. Full details:; type object 'Detail' has no attribute 'myint'; 'Detail::myint' is not a known C++ class; 'myint' is not a known C++ template; 'myint' is not a known C++ enum; >>> ROOT.ROOT.Detail.myint; 0; ```. It's unclear how to avoid the double `ROOT.ROOT` in general. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. Be able to avoid typing the name twice, at least for classes/functions defined in ROOT source code. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->. ROOT master on Fedora32",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8745:1880,avoid,avoid,1880,https://root.cern,https://github.com/root-project/root/issues/8745,2,['avoid'],['avoid']
Safety,"a-prefix`. You can use `set substitute-path` in `gdb` to map the paths to local copy of the sources. ```bash; $ EXTRA_CLING_ARGS='-O1' gdb --args root.exe -l -b -q -x test.cpp++; GNU gdb (GDB) 11.1; Copyright (C) 2021 Free Software Foundation, Inc.; License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>; This is free software: you are free to change and redistribute it.; There is NO WARRANTY, to the extent permitted by law.; Type ""show copying"" and ""show warranty"" for details.; This GDB was configured as ""x86_64-conda-linux-gnu"".; Type ""show configuration"" for configuration details.; For bug reporting instructions, please see:; <https://www.gnu.org/software/gdb/bugs/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>. For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from root.exe...; (gdb) set auto-load safe-path /; (gdb) break CXXABICtxSwapper::SwapCtx; Function ""CXXABICtxSwapper::SwapCtx"" not defined.; Make breakpoint pending on future shared library load? (y or [n]) y; Breakpoint 1 (CXXABICtxSwapper::SwapCtx) pending.; (gdb) run; Starting program: /home/cburr/mambaforge/envs/root-debug/bin/root.exe -l -b -q -x test.cpp++; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib64/libthread_db.so.1"".; [Detaching after fork from child process 151706]; [Detaching after fork from child process 151708]; [Detaching after fork from child process 151713]; [Detaching after fork from child process 151715]; [Detaching after fork from child process 151803]; [Detaching after fork from child process 151807]. Breakpoint 1, (anonymous namespace)::CXXABICtxSwapper::SwapCtx (other=..., this=0x55555600d260) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/ModuleBuilder.cpp:35; 35	/usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/ModuleBuilder.cpp: No such file or directory.; (gdb) set substitute-path",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9595#issuecomment-1021571360:1145,safe,safe-path,1145,https://root.cern,https://github.com/root-project/root/issues/9595#issuecomment-1021571360,1,['safe'],['safe-path']
Safety,"able to provide data from SQlite `SELECT` queries. It will be useful for cvmfs, where we have file catalogs and monitoring information in sqlite files. For instance, one can do. auto rdf = ROOT::RDF::MakeSqliteDataFrame(""catalog.sqlite"", ""select * from catalog"");; auto h = rdf.Define(""lname"", ""name.length()"").Histo1D(""lname"");. to show the distribution of file name sizes. There are probably more use cases, for instance sqlite export of conditions data. This is work in progress, I'm posting it for early comments and feedback. My open points are. - Unit and integration tests are yet to be done; - The data source work single-threaded only at the moment. I initially thought it might be enough to return only a single row in `GetEntryRanges()` to make it thread-safe but that's apparently not enough. So I'm now thinking to wrap `SetEntry()` and `GetEntryRanges()` in a mutex.; - The code is not reusing `TSQLiteServer`. It felt like it requires stretching the `TSQLServer` interface in perhaps unwanted ways, for saving only a handful of direct sqlite API calls. On the other hand, with (probably quite a bit) more work it might be possible to have a more general data source that works on any SQL result set.; - Determining column types in SQlite is tricky as it is dynamically typed and in principle each row can have different column types. If a table column is queried as is, I can use the default/declared column type. For expressions, I'll use the type of the first row of the result set. Still it can result in a column to be of type `NULL` where subsequent rows actually have meaningful values. My guess is that the current heuristic is practical enough, and of course the user can formulate the `SELECT` query to avoid ambiguity.; - It would not be impossible to add support for remote reading of sqlite files. To do so, one can add a custom implementation of an sqlite virtual file system to have data pouring in directly from HTTP or XRootD. This is perhaps something to keep in mind.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2322:1783,avoid,avoid,1783,https://root.cern,https://github.com/root-project/root/pull/2322,1,['avoid'],['avoid']
Safety,"ace/sw/SOURCES/ROOT/v6-24-02/v6-24-02/tree/tree/src/TBranchElement.cxx:1265; #12 0x00007ff4494ae069 in TBranchElement::FillImpl (this=0x7ff425170850, imtHelper=0x0) at /home/aliperf/aliperf_workspace/sw/SOURCES/ROOT/v6-24-02/v6-24-02/tree/tree/src/TBranchElement.cxx:1290; #13 0x00007ff44f4faf89 in TBranch::Fill (this=0x7ff425170850) at /home/aliperf/aliperf_workspace/sw/slc7_x86-64/ROOT/v6-24-02-local5/include/TBranch.h:201; #14 o2::base::DetImpl<o2::trd::Detector>::mergeAndAdjustHits<std::vector<o2::trd::Hit, std::allocator<o2::trd::Hit> > > (this=this; entry=0x3e69680, brname=..., origin=..., target=..., trackoffsets=..., nprimaries=..., subevtsOrdered=...) at /home/aliperf/aliperf_workspace/sw/SOURCES/O2/dev/0/Detectors/Base/include/DetectorsBase/Detector.h:403; #15 0x00007ff44f4fb507 in o2::base::DetImpl<o2::trd::Detector>::mergeHitEntries (this=0x3e69680, origin=..., target=..., trackoffsets=..., nprimaries=..., subevtsOrdered=...) at /home/aliperf/aliperf_workspace/sw/SOURCES/O2/dev/0/Detectors/Base/include/DetectorsBase/Detector.h:422; #16 0x00000000004456e1 in o2::devices::O2HitMerger::mergeAndFlushData (this=0x162d640, eventID=<optimized out>) at /home/aliperf/aliperf_workspace/sw/SOURCES/O2/dev/0/run/O2HitMerger.h:745; #17 0x00007ff446ec9f10 in std::execute_native_thread_routine (__p=0x7ad9e10) at ../../../../../gcc/libstdc++-v3/src/c++11/thread.cc:80; #18 0x00007ff44e186ea5 in start_thread () from /lib64/libpthread.so.0; #19 0x00007ff44680796d in clone () from /lib64/libc.so.6. Thread 5 (Thread 0x7ff42a18e700 (LWP 25519) ""o2-sim-hit-merg""):; #0 0x00007ff44e18ade2 in pthread_cond_timedwait. GLIBC_2.3.2 () from /lib64/libpthread.so.0; #1 0x00007ff44aca29d3 in __gthread_cond_timedwait (__abs_timeout=0x7ff42a187a30, __mutex=<optimized out>, __cond=<optimized out>) at /home/aliperf/aliperf_workspace/sw/slc7_x86-64/GCC-Toolchain/v10.2.0-alice2-local3/include/c++/10.2.0/x86_64-unknown-linux-gnu/bits/gthr-default.h:872; #2 std::condition_variable::__wait_until_imp",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8931:4337,Detect,Detectors,4337,https://root.cern,https://github.com/root-project/root/issues/8931,3,['Detect'],"['Detector', 'Detectors', 'DetectorsBase']"
Safety,"acters (`[` and `]`, in this case), and these characters end up in variable names in the .C macro. I have included a reproducer below (`test_plot_macros.cpp`) which produces three .C macros, two of which are broken as described above.; For instance, in `plot1.C` (one of the produced macros), one can find invalid code such as ; ```cpp; Double_t pdf_Norm[x]_fx1[114] = {; -10.2002,; -10.2,; ...; ```. Would it be possible to filter these special characters when producing the macros?. ### Reproducer. Create a file `test_plot_macros.cpp` containing the script below and run `root test_plot_macros.cpp`. ```cpp; #include ""TCanvas.h"". #include ""RooArgSet.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""RooPlot.h""; #include ""RooRealVar.h"". using namespace RooFit;. void test_plot_macros() {; // Create a PDF; RooRealVar x(""x"", ""x"", -10, 10);; RooRealVar mean(""mean"", ""mean"", 0, -10, 10);; RooRealVar width(""width"", ""width"", 2, 0, 5);; RooGaussian gaus(""pdf"", ""pdf"", x, mean, width);. // Generate some data; RooDataSet* data = gaus.generate(RooArgSet(x), Name(""data""), NumEvents(2000));. // Plots; TCanvas* c = new TCanvas(""c"");. // Plot 1; // Broken .C macro because of default pdf ""Name()""; RooPlot* frame1 = x.frame();; data->plotOn(frame1);; gaus.plotOn(frame1);; frame1->Draw();; c->SaveAs(""./plot1.png"");; c->SaveAs(""./plot1.C"");. // Plot 2; // Not broken .C macro because of explicit (and safe) ""Name()"" configuration; RooPlot* frame2 = x.frame();; data->plotOn(frame2);; gaus.plotOn(frame2, Name(""gaus""));; frame2->Draw();; c->SaveAs(""./plot2.png"");; c->SaveAs(""./plot2.C"");. // Plot 3; // Broken .C macro again because special charecters are not filtered from ""Name""; RooPlot* frame3 = x.frame();; data->plotOn(frame3);; gaus.plotOn(frame3, Name(""a+b""));; frame3->Draw();; c->SaveAs(""./plot3.png"");; c->SaveAs(""./plot3.C"");; }; ```. ### ROOT version. 6.24.06. ### Installation method. Built from source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15887:1811,safe,safe,1811,https://root.cern,https://github.com/root-project/root/issues/15887,1,['safe'],['safe']
Safety,"age(ROOT 6.30 CONFIG REQUIRED); ```. succeeds. ```; [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/; -- The CXX compiler identification is GNU 11.3.1; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/c++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") ; -- Configuring done; -- Generating done; -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest; [bash][pcadp04]:buildtest >; ```. Wile previously it failed. ```; [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/; -- The CXX compiler identification is GNU 11.3.1; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/c++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):; Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables.; Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy; command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable.; Call Stack (most recent call first):; /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency); CMakeLists.txt:5 (find_package); This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):; Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY); Call Stack (most recent call first):; /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPH",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14178#issuecomment-1840829056:1092,Detect,Detecting,1092,https://root.cern,https://github.com/root-project/root/pull/14178#issuecomment-1840829056,4,['Detect'],['Detecting']
Safety,"ake` file is not copied to the installation folder. When I manually copy the `ClingTargets.cmake` to the installation folder and run the `CMakeLists.txt` from xeus-cling, I get the following error:. ```; cmake ../xeus-cling/ -D CMAKE_INSTALL_PREFIX=${CONDA_PREFIX} -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++ -DCMAKE_INSTALL_LIBDIR=${CONDA_PREFIX}/lib -DCMAKE_LINKER=/usr/bin/gold -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=""-I/home/sehrig/workspace/cling9demo/install/include/cling/"" -DCMAKE_PREFIX_PATH=/home/sehrig/workspace/cling9demo/install/lib/cmake/cling/; -- The C compiler identification is Clang 11.0.0; -- The CXX compiler identification is Clang 11.0.0; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /opt/spack-modules/linux-ubuntu20.04-skylake_avx512/gcc-10.2.0/llvm-11.0.0-ubn363okfkmwy6dpoozlbgidl4bks3wd/bin/clang - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /opt/spack-modules/linux-ubuntu20.04-skylake_avx512/gcc-10.2.0/llvm-11.0.0-ubn363okfkmwy6dpoozlbgidl4bks3wd/bin/clang++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Building xeus-cling v0.12.0; -- Found LLVM_CONFIG as /opt/spack-modules/linux-ubuntu20.04-skylake_avx512/gcc-10.2.0/llvm-11.0.0-ubn363okfkmwy6dpoozlbgidl4bks3wd/bin/llvm-config; -- Found nlohmann_json: /home/sehrig/application/miniconda3/envs/cling9demo/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.9.1"", minimum required is ""3.2.0"") ; -- Found LibUUID: /opt/spack-modules/linux-ubuntu20.04-skylake_avx512/gcc-10.2.0/libuuid-1.0.3-lxispdpiiahk26ye53cg5qn7bk24tywj/lib/libuuid.so ; -- Found OpenSSL: /opt/spack-modules/linux-ubuntu20.04-skylake_avx512/gcc-10.2.0/openssl-1.1.1g-doxvrf6l7lm7c55agwefmfbxe4kwwwbi/lib/libcrypto.so (found version ""1.1.1g"") ;",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-784497193:1072,Detect,Detecting,1072,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-784497193,4,['Detect'],['Detecting']
Safety,all edges; e4555770c7 [tmva][sofie-gnn] Add support for LayerNormalization and registering additional functions; b6ac312508 [tmva][sofie-gnn] Test LHCb toy model with SOFIE-GNN; 5455f90c3a [tmva][sofie-gnn] Python in-memory parse function and tests; d925d6a805 [tmva][sofie-gnn] Introducing RModel_GraphIndependent; 2df806aa32 [tmva][sofie-gnn] Introducing RFunctions for SOFIE-GNN; 1ca9b4c240 [tmva][sofie-gnn] Introducing SOFIE-GNN; 6cb0d0a957 [TMVA] Don't use the same file name (`TMVA.root`) everywhere (#13576); 4fe2f6ef61 [pymva] Refactor TestRModelParserPyTorch to use RSofieReader; e53fcb7b6a [tmva][sofie] Fix formattting in RModel; f93775a9dc [tmva][sofie] Add options to append generated C++ code and weights; 4f0450b46e [tmva] fix bug in reshape operator when it is used as the first operator of the model; 8fa423de1a [TMVA/SOFIE] Save weights in ROOT binary files (#13423); 91d7dc9cee [tmva] use SetDirectory(nullptr); 34c4a497c5 [tmva] reduce usage of `Form` method; df8ab656e3 [tmvagui] avoid usage of Form function; 5bf591928a [tmva] avoid Form usage in tests; a18373ec99 [tmva] fix wrong Form usage in remaining classes; c251183d62 [tmva] reduce usage of Form; a50b03c9b7 [tmva] fix multiple places where Form is wrongly used twice is same call; 20fa3a3b4d [tmva] fix wrong Form usage is several next classes; 9eba38ba7a [tmva] fix wrong usage of Form in several classes; 9b3e9dc4e0 [tmva] replace Form by TString::Format in several classes; a6c9608215 [tmva] avoid Form usage in Classification.cxx; 50bd755c37 [tmva] fix Form usage in MethodTMlpANN; befd36fdb1 Fix yet another assertion failure on Windows; fb94e0b032 [tmva] Fix RTensor::ExpandDims(); 99378cfba9 Fix Lenght typos (#13281); 8786fa4392 Added cpp files for RBatchGenerator; 3f55b20888 feat: added tutorial links; c432106115 feat: include link for sofie onnx parser; cf5449bd63 fix: email id for communication; 4f8a5972df docs: Update SOFIE documentation; cdb4a81f87 Error function implemented successfully with the corr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13783:2297,avoid,avoid,2297,https://root.cern,https://github.com/root-project/root/pull/13783,3,['avoid'],['avoid']
Safety,"all tests ran, it was probably a glitch (2 failures were timeouts)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16543#issuecomment-2380720821:57,timeout,timeouts,57,https://root.cern,https://github.com/root-project/root/pull/16543#issuecomment-2380720821,1,['timeout'],['timeouts']
Safety,"ally overrides the dynamic linker behavior yet one more time. I am not sure how this would translate to Windows for example.; > ; > I agree, me neither. If we can find a better and cleaner way, I am absolutely in favor of that.; > ; > > IIUC, `RTLD_DEEPBIND` alters the search order of the dynamic linker and using -fPIC intends to deduplicate. That seems as bad as preloading a set of llvm dependent libraries, IMO. Do we need `libgandiva.so` to be compiled with -fPIC or just the executables which 'use' ROOT?; > ; > All shared libraries must be compiled with -fPIC by definition, so libgandiva is already compiler with -fPIC. The change would only be for exectuables, which usually do not have -fPIC by default. But then actually other libraries have similar requirements, e.g. Qt5 (with -reduce-relocation flag, which is the default) requires all executables to link against Qt to be compiled with -fPIC. But again, if there is a better way, I am also in favor of avoiding -fPIC-; > ; > > This check is to protect the subsequent `dlsyms` in TCling to resolve symbols from the wrong place. We can fix the check and play with the JIT resolution logic by playing with the search order here:; > > https://github.com/root-project/root/blob/39630b7530771be3e4643048361886dcfb057f07/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp#L299-L302; > > ; > > The challenge is to come up with a consistent symbol resolution :); > > Just as a comment, two other possibilities would be to:; > ; > * put the llvm / clang which are embedded in ROOT into a namespace, so the symbols do not collide with system LLVM symbols. This likely would not fix the global statics. > ; > * If the clang changes are upstreamed eventually, this shouldn't be necessary anymore, since cling could use system LLVM / Clang. We are in the versioning hell, as the version of the system LLVM might differ from the ones the `libgandiva` ships with. There we are facing a similar issue -- to make sure the JIT does not pick the wrong ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4668#issuecomment-564024419:2088,avoid,avoiding,2088,https://root.cern,https://github.com/root-project/root/pull/4668#issuecomment-564024419,1,['avoid'],['avoiding']
Safety,"am Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Users/bellenot/build/x64/release/bin/root.exe^-l^-b^-q^--ptrcheck^-e^int*p=nullptr^-e^*p"" ""-DOUT=C:/Users/bellenot/build/x64/release/roottest/cling/exception/nullderef-e.log"" ""-DCWD=C:/Users/bellenot/build/x64/release/roottest/cling/exception"" ""-DRC=1"" ""-DDIFFCMD=C:/Python39-32/python.exe^C:/Users/bellenot/git/roottest/scripts/custom_diff.py"" ""-DSYS=C:/Users/bellenot/build/x64/release"" ""-DENV=ROOTSYS=C:/Users/bellenot/build/x64/release#PYTHONPATH=C:/Users/bellenot/build/x64/release/bin"" ""-P"" ""C:/Users/bellenot/build/x64/release/RootTestDriver.cmake""; 972: Environment variables:; 972: ROOT_HIST=0; 972: Test timeout computed to be: 300; 972: -- TEST COMMAND --; 972: cd C:/Users/bellenot/build/x64/release/roottest/cling/exception; 972: C:/Users/bellenot/build/x64/release/bin/root.exe -l -b -q --ptrcheck -e 'int*p=nullptr' -e '*p'; 972: -- BEGIN TEST OUTPUT --; 972:; 972: (int *) nullptr; 972:; 972: -- END TEST OUTPUT --; 972: -- BEGIN TEST ERROR --; 972: Error in <HandleInterpreterException>: Trying to dereference null pointer or trying to call routine taking non-null arguments; 972: Execution of your code was aborted.; 972: ROOT_cli_1:1:2: warning: null passed to a callee that requires a non-null argument [-Wnonnull]; 972: *p; 972: ^; 972:; 972: -- END TEST ERROR --; 1/1 Test #972: roottest-cling-exception-nullderef-e ... Passed 0.44 sec. The following tests passed:; roottest-cling-exception-nullderef-e. 100% tests passed, 0 tests failed out of 1. Label Time Summary:; cling = 0.44 sec*proc (1 test); regression = 0.44 sec*proc (1 test); roottest = 0.44 sec*proc (1 test). Total Test time (real) = 2.93 sec; ```; And BTW, no need to report the test failures, we are aware of some tests filing with some versions of Visual Studio and architecture (e.g. with VS 2022 x64). And since we run al the tests in our CI, we see immediately if something fails. Note that we are aware of some failing tests, some due to incompatibilities between VS a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9742#issuecomment-1025965371:2224,abort,aborted,2224,https://root.cern,https://github.com/root-project/root/issues/9742#issuecomment-1025965371,1,['abort'],['aborted']
Safety,"an01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Csimonliu%40triumf.ca%7C2bf615c9bb89486eaecd08d91571b94b%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564400460986294%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=5bPVTg%2FPGN9TjNPlZWD4xVs43NW32MwdifaSj7PR%2FEc%3D&reserved=0>; >>>>>>> * About to connect() to webdav.lcg.triumf.ca <http://webdav.lcg.triumf.ca/> port 2880 (#0); >>>>>>> * Trying 2607:f8f0:660:3::36...; >>>>>>> * Connected to webdav.lcg.triumf.ca <http://webdav.lcg.triumf.ca/> (2607:f8f0:660:3::36) port 2880 (#0); >>>>>>> * Initializing NSS with certpath: sql:/etc/pki/nssdb; >>>>>>> * CAfile: /etc/pki/tls/certs/ca-bundle.crt; >>>>>>> CApath: none; >>>>>>> * Server certificate:; >>>>>>> * 	subject: CN=dpool46.lcg.triumf.ca <http://dpool46.lcg.triumf.ca/>,OU=triumf.ca <https://can01.safelinks.protection.outlook.com/?url=http%3A%2F%2Ftriumf.ca%2F&data=04%7C01%7Csimonliu%40triumf.ca%7C2bf615c9bb89486eaecd08d91571b94b%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564400460986294%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=h9OXPXSoNf6rog1YhZy1Iuiji7Tq8asNeePutHMw2rs%3D&reserved=0>,O=Grid,C=CA; >>>>>>> * 	start date: Apr 08 16:29:03 2021 GMT; >>>>>>> * 	expire date: May 08 16:29:03 2022 GMT; >>>>>>> * 	common name: dpool46.lcg.triumf.ca <http://dpool46.lcg.triumf.ca/>; >>>>>>> * 	issuer: CN=Grid Canada Certificate Authority,O=Grid,C=CA; >>>>>>> * NSS error -8179 (SEC_ERROR_UNKNOWN_ISSUER); >>>>>>> * Peer's Certificate issuer is not recognized.; >>>>>>> * Closing connection 0; >>>>>>> curl: (60) Peer's Certificate issuer is not recognized.; >>>>>>> More details here: http://curl.haxx.se/docs/sslcerts.html <https://can01.safelinks.protection.outlook.com/?url=http%3A%2F%2Fcurl.haxx.se%2Fdocs%2Fsslcerts.html&data=04%",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840018942:5088,safe,safelinks,5088,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840018942,1,['safe'],['safelinks']
Safety,and a test.; This PR includes also #3363 just to avoid conflicts,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3364:49,avoid,avoid,49,https://root.cern,https://github.com/root-project/root/pull/3364,1,['avoid'],['avoid']
Safety,"and fitTo() to ModelConfig; cf98956266 [RF] Add exceptions to setter methods for non-existing objects; 1cc5ec46c8 [RF] Forbid resetting RooFormula; b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test; 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes; 3dcea7036a [RF] Support simultaneous fits in NLL code generation; a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface; 3d01cd2e8f [RF] Remove deprecated RooAbsString; 059af6d55a [RF] Remove RooAbsRootFinder; bdc19e090e [RF] Get rid of RooScaledFunc; 88dbb6ad17 [RF] Make RooGenProdProj private; 94ee158ddc [RF] Remove deprecated RooCatType; d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h; f78558eb0a [RF] Mark template specialization as inline; ca29ccf161 [RF] Some cleanup of public `roofitcore` classes; 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code; 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads; 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`; 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum].; 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar; 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma; f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`; b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation; 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf.; 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files.; 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial.; e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions; 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code; 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing; 7a12837f66 [RF] Split up CodeSquashContext in `.h",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12905:3635,Avoid,Avoid,3635,https://root.cern,https://github.com/root-project/root/pull/12905,1,['Avoid'],['Avoid']
Safety,and templates in the context of private methods to avoid doc squeezed to the right.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2744:51,avoid,avoid,51,https://root.cern,https://github.com/root-project/root/pull/2744,1,['avoid'],['avoid']
Safety,"and therewith notebooks.; This was necessary to work around fakemodule, which has been removed; from ipython a long time ago.; The invocation to TPython triggers the loading of the TPyClassGenerator; TClassGenerator. Such generator acquires the GIL from within C++ code; unavoidably leading to deadlocks if ROOT thread safety is enabled. As a side effect, importing Python from within notebooks and ipython significantly speeds up.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3262:319,safe,safety,319,https://root.cern,https://github.com/root-project/root/pull/3262,1,['safe'],['safety']
Safety,"andleContainerMotion(Event_t*) (this=0x3565110, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TRootEmbeddedCanvas.cxx:387; #8 0x00007fc5a14a19f1 in TGFrame::HandleEvent(Event_t*) (this=0x35665d0, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGFrame.cxx:531; #9 0x00007fc5a1458a48 in TGClient::HandleEvent(Event_t*) (this=0x2e17e80, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGClient.cxx:843; #10 0x00007fc5a1458f85 in TGClient::ProcessOneEvent() (this=this; ```. I was able to trace the problem to the math operations performed in the TPad.cxx and TPavelabel.cxx and it looks in many cases there are simply divisions by zero. e.g. in TPaveLabel.cxx instead of . ```; Double_t wh = (Double_t)gPad->XtoPixel(gPad->GetX2());; Double_t hh = (Double_t)gPad->YtoPixel(gPad->GetY1());; Double_t labelsize, textsize = GetTextSize();; Int_t automat = 0;; if (GetTextFont()%10 > 2) { // fixed size font specified in pixels; labelsize = GetTextSize();; } else {; if (TMath::Abs(textsize -0.99) < 0.001) automat = 1;; if (textsize == 0) { textsize = 0.99; automat = 1;}; Int_t ypixel = TMath::Abs(gPad->YtoPixel(y1) - gPad->YtoPixel(y2));; labelsize = textsize*ypixel/hh;; if (wh < hh) labelsize *= hh/wh;; }; ```; One can have; ```; Double_t wh = gPad->XtoPixel(gPad->GetX2())==0?1.0:(Double_t)gPad->XtoPixel(gPad->GetX2());; Double_t hh = gPad->YtoPixel(gPad->GetY1())==0?1.0:(Double_t)gPad->YtoPixel(gPad->GetY1());; ....; ```. In the TPad.cxx there are many unsafe operations in the TPad::ExecuteEvent and TPad::Resize, e.g. ```; // Compute new pad positions in the NDC space of parent; fXlowNDC = Double_t(apx1 - parentpx1)/Double_t(parentpx2 - parentpx1);; fYlowNDC = Double_t(apy1 - parentpy1)/Double_t(parentpy2 - parentpy1);; fWNDC = Double_t(apx2 - apx1)/Double_t(parentpx2 - parentpx1);; fHNDC = Double_t(apy2 - apy1)/Double_t(parentpy2 - parentpy1);; ```. Would someone from developers be interested to look there ?. Best regards,. Andrii",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6344:2189,unsafe,unsafe,2189,https://root.cern,https://github.com/root-project/root/issues/6344,1,['unsafe'],['unsafe']
Safety,"angSerialization.a interpreter/llvm-project/llvm/lib/libclangSema.a interpreter/llvm-project/llvm/lib/libclangAnalysis.a interpreter/llvm-project/llvm/lib/libclangASTMatchers.a interpreter/llvm-project/llvm/lib/libclangEdit.a interpreter/llvm-project/llvm/lib/libclangSupport.a interpreter/llvm-project/llvm/lib/libclangAST.a interpreter/llvm-project/llvm/lib/libclangLex.a interpreter/llvm-project/llvm/lib/libclangBasic.a /usr/lib/llvm-16/lib/libLLVM-16.so.1 && :; ```. However, calling rootcling fails with `Option 'W' registered more than once!`:; ```; Reading symbols from core/rootcling_stage1/src/rootcling_stage1...; (gdb) run; Starting program: /home/stephan/Projects/ROOT/builddir/core/rootcling_stage1/src/rootcling_stage1 ; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; : CommandLine Error: Option 'W' registered more than once!; LLVM ERROR: inconsistency in registered CommandLine options. Program received signal SIGABRT, Aborted.; __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44; 44	./nptl/pthread_kill.c: No such file or directory.; (gdb) where; #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at ./nptl/pthread_kill.c:44; #1 0x00007ffff049b15f in __pthread_kill_internal (signo=6, threadid=<optimized out>) at ./nptl/pthread_kill.c:78; #2 0x00007ffff044d472 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26; #3 0x00007ffff04374b2 in __GI_abort () at ./stdlib/abort.c:79; #4 0x00007ffff18856e5 in llvm::report_fatal_error(llvm::Twine const&, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1; #5 0x00007ffff1885526 in llvm::report_fatal_error(char const*, bool) () from /usr/lib/llvm-16/lib/libLLVM-16.so.1; #6 0x00007ffff1871251 in ?? () from /usr/lib/llvm-16/lib/libLLVM-16.so.1; #7 0x00007ffff18626cb in llvm::cl::Option::addArgument() () from /usr/lib",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12156#issuecomment-1658967214:5867,Abort,Aborted,5867,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1658967214,1,['Abort'],['Aborted']
Safety,"anks in advance for fixing that issue, ; Romain. ### Reproducer. ```C++; #include ""TFileMerger.h""; #include ""TSystem.h""; #include ""TUUID.h""; #include ""TFile.h""; #include ""TH1F.h"". #include <iostream>; #include <string> . // Function defined after the main function ; void createFileWithHists(const std::string &fileName);. int main(){. // Choose the number of the test; // 0 or 1 ; int numTest = 0;. createFileWithHists(""myFileWithHists.root"");. TFileMerger fileMerger(false);; fileMerger.SetMsgPrefix(""selectiveHadd"");; fileMerger.SetPrintLevel(1);. // Set a selective list of objects to hadd ; // The rest of objects will not be considered in the input files ; fileMerger.AddObjectNames(""hist1"");; fileMerger.AddObjectNames(""hist2"");. // Set output file ; fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) ; fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){; ; // In that case add a dummy file i.e. empty file ; // In order to avoid the bug in in the TFileMerger class ; // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();; // create a unique empty file ; std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;; // Just create dummy file ; TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");; delete file;; fileMerger.AddFile(dummyFileName.c_str());; }; ; // Will only merge in the output files ; // the list of objects specified ; Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::kOnlyListed);; ; fileMerger.PartialMerge(mode);; ; return 0;; }. void createFileWithHists(const std::string &fileName){; TFile *file = TFile::Open(fileName.c_str(), ""recreate""); . TH1F *hist1 = new TH1F(""hist1"", ""hist1"", 1 , 0 , 2);; TH1F *hist2 = new TH1F(""hist2"", ""hist2"", 1 , 0 , 2);; TH1F *hist3 = new TH1F(""hist3"", ""hist3"", 1 , 0 , 2);; TH1F *h",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13359:3178,avoid,avoid,3178,https://root.cern,https://github.com/root-project/root/issues/13359,1,['avoid'],['avoid']
Safety,"aps_samp_thr.patch; [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch; ```diff; diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx; index fc93cc8b82..0e77517729 100644; --- a/geom/geompainter/src/TGeoChecker.cxx; +++ b/geom/geompainter/src/TGeoChecker.cxx; @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T; /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints; /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */, Int_t npoints) const; +void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t ovlp, Int_t npoints) const; {; Int_t nd = vol->GetNdaughters();; if (nd < 2); @@ -1268,7 +1268,7 @@ void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */,; }; // The point is inside 2 or more daughters, check safety; safe = shape->Safety(local, kTRUE);; - // if (safe < ovlp) continue;; + if (safe < ovlp) continue;; // We really have found an overlap -> store the point in a container; iovlp++;; if (!novlps) {; ```. 3. Recompile/Reinstall and Re-run: big overlaps unchanged as expected, known overlaps of size ~0.4 still there with low threshold but masked with sufficient threshold, overlap of size ~10^-8 cut in all cases as expected. ### ROOT version. Original observation with `v6.22` to `v6.26`; Cross-check with current master, given source commit probably present from `v5-19-04` until current master. ### Installation method. Built from source within Fairsoft, built from source standalone. ### Operating system. Ubuntu 20.04, Debian 10 and 11. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14675:4473,safe,safety,4473,https://root.cern,https://github.com/root-project/root/issues/14675,5,"['Safe', 'safe']","['Safety', 'safe', 'safety']"
Safety,"ar intermediate results into loops in generated code; 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing; 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file; 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector; 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`; d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers; cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`; 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers; f4fc140268 [RF] Remove RooMomentMorphND; 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf; d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10; 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper.; 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument; 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext; ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(); c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew.; 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation; c51376731b [RF][NFC] Fix typo.; 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off.; 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit.; 98d004c200 [RF] Fix visibility of the res/ directories.; e97347056c [RF] Make RooBatchCompute dependency public.; 4483b01b7f [RF] Add initial interface and implementation for code-squashing.; f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer; 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; fce73f0565 [R",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12681:1870,Avoid,Avoid,1870,https://root.cern,https://github.com/root-project/root/pull/12681,4,['Avoid'],['Avoid']
Safety,"arch order to search for first the one; > that are not marked RTLD_GLOBAL.; >; > So any other client that wants to open thing's with RTLD_LOCAL will ; > then expose what they thought were private symbols to the JIT as a whole?; >; > One of the issues is that it is not clear to me is what exactly is; > your use case and this is why there are misunderstandings.; >; > I also don't understand why there are mis-understandings, but have ; > explained the use case a few times now and *3* will explicitly break ; > that as well as provide bizarre default behavior:; >; > libc++.so, libA.so; > libA.so defines an overload for global operator new/delete; >; > |DynamicLibrary::getPermanentLibrary(NULL) // Other code; > DynamicLibrary::getPermanentLibrary(""libA.so"") |; >; > In your scheme the JIT can pull operator new/delete from libA.so,; > and worse is that whether it pulls operator new/delete from; > libA.so is dependent on whether operator new/delete has been; > resolved in *// Other code* before libA.so has been loaded.; >; > The example can be expanded to RTTI information, exceptions, and a ; > host of other problems.; >; No, this would not break the case you mentioned. The case that will ; have a special behavior is if you called ; `DynamicLibrary::addPermanentLibrary(handle)`. So you should be safe there.; >; > And even worse than that is that in your scheme there is no way of ; > hiding symbols from the global scope, in fact it promotes everything ; > that the user reasonably expected to be private (via RTLD_LOCAL) to ; > take dominance over anything else.; >; I understand that and I am totally fine for fixing this the right way ; after the llvm release.; >; > —; > You are receiving this because you were assigned.; > Reply to this email directly, view it on GitHub ; > <https://github.com/root-project/root/pull/744#issuecomment-313799028>, ; > or mute the thread ; > <https://github.com/notifications/unsubscribe-auth/AGNuU_J817GPmYooZ_jUyw85N6Y9ayBUks5sLqTrgaJpZM4OO5d2>.; >",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/744#issuecomment-313802370:3335,safe,safe,3335,https://root.cern,https://github.com/root-project/root/pull/744#issuecomment-313802370,1,['safe'],['safe']
Safety,"ard for unknown arguments. ; * `TRint` crashes when instantiated with `*argc = nullptr` and / or `argv = nullptr` which are the default values for `TApplication` and hence may be used by existing users of the `TRint` constructor. . ### Affected use cases; Applications may do something like:; ```cpp; TRint *app = new TRint(""app"", 0, NULL);; ...; app->Run(kTRUE);; ```; Applications may also use `TRint` during operation. One existing model some applications I use are employing is:; * Create a `TRint` shortly after startup, passing in `argc` and `argv`. ; * Allow the user to drop to a ROOT interpreter prompt. This is then done by calling `app->Run(kTRUE);`. A user can use the interpreter to inspect state of the analysis software, and exit it again to let the software continue. . The latter approach is extremely useful for example to shell out after analysis software startup, or inside an event, such that the user can interactively analyze objects right from a ROOT interpreter shell. . ### Questions; * Is the use case ""use TRint as class to drop into the interpreter"" supported? ; The changelog of 6.26.00 reads like `TRint` is meant for internal use by `root.exe` only, but there seems to be no easy alternative. ; Depending on the reply, this could be a separate bug report, or a ""wontfix"". ; * If the use case is / should be supported, It would be useful to be able to allow unsupported arguments to pass through, for use in applications which are not `root.exe`. ; * For improved backwards compatibility and safety, not crashing when being passed `*argc = nullptr` and / or `argv = nullptr` would be nice. . In case somebody else is hit by this, I am right now using this hack as workaround:; ```cpp; int dargc = 1;; char** dargv = &argv[0];; myApp = new TRint(""myApp"", &dargc, dargv, nullptr, 0, kTRUE);; myApp->GetOptions(&argc, (argv));; gSystem->SetProgname(argv[0]);; ```; This allows to re-use the `TApplication` functionality as before, without triggering one of the two issues.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10090:1775,safe,safety,1775,https://root.cern,https://github.com/root-project/root/issues/10090,1,['safe'],['safety']
Safety,"are probably missing the definition of class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > __cdecl cling::printValue(unsigned __int64 const *); 892: Maybe you need to load the corresponding shared library?; 892: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 892: error code: -529697949; 892:; 892:; 15/16 Test #892: tutorial-dataframe-df024_Display-py ......................***Failed 9.91 sec; test 893; Start 893: tutorial-dataframe-df031_Stats-py. 893: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df031_Stats.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 893: Environment variables:; 893: ROOT_HIST=0; 893: Test timeout computed to be: 1500; 893: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 893: error code: -529697949; 893:; 893:; 16/16 Test #893: tutorial-dataframe-df031_Stats-py ........................***Failed 4.47 sec. 0% tests passed, 16 tests failed out of 16. Label Time Summary:; tutorial = 85.86 sec*proc (16 tests). Total Test time (real) = 94.38 sec. The following tests FAILED:; 878 - tutorial-dataframe-df001_introduction-py (Failed); 879 - tutorial-dataframe-df002_dataModel-py (Failed); 880 - tutorial-dataframe-df003_profiles-py (Failed); 881 - tutorial-dataframe-df004_cutFlowReport-py (Failed); 882 - tutorial-dataframe-df006_ranges-py (Failed); 883 - tutorial-dataframe-df007_snapshot-py (Failed); 884 - tutorial-dataframe-df008_createDataSetFromScratch-py (Failed); 885 - tutorial-dataframe-df010_trivialDataSource-py (Failed); 886 - tutorial-dataframe-df012_DefinesAndFiltersAsStrings-py (Failed); 887 - tutorial-dataframe-df014_CSVDataSource-py (Failed); 888 - t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6083#issuecomment-665456331:16196,timeout,timeout,16196,https://root.cern,https://github.com/root-project/root/pull/6083#issuecomment-665456331,1,['timeout'],['timeout']
Safety,article. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC::GenParticle; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC::GenParticle. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC::GenParticle; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC::GenParticle. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC::GenParticle; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC::GenParticle. Info in <TInterpreter::TCling::AutoLoad>: Explicitly disabled (the class name is HepMC::GenParticle); TClass::GetClass: Header Parsing - The representation of HepMC::GenParticle was not found in the type system. A lookup in the interpreter is about to be tried: this can cause parsing. This can be avoided selecting HepMC::GenParticle in the linkdef/selection file.; Info in <TInterpreter::TCling::AutoLoad>: Explicitly disabled (the class name is HepMC::GenParticle); Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC::Flow; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC::Flow. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC::Flow; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC::Flow. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC::Flow; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC::Flow. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC::Flow; Info ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10910#issuecomment-1268084280:6233,avoid,avoided,6233,https://root.cern,https://github.com/root-project/root/pull/10910#issuecomment-1268084280,1,['avoid'],['avoided']
Safety,"as it turnes out the `...class.C` files generated by the TMVA MLP are not thread safe (`fWeights` is a constant array of contant pointers to beginnings of double arrays, and the contents therein vary at runtime inside the GetMvaValue__ method). So the quick hack here is to replace the class member of dynamically allocated arrays by fixed sized arrays in the function scope. # QUASICODE OLD. ```; class mlp {; private:; double *fweights[3]; mlp() {; fweights[0] = new double[5];; fweights[1] = new double[10];; fweights[2] = new double[1];; }; ~mlp() {; delete fweights[0];; delete fweights[1];; delete fweights[2];; }; getmvavalue( std::vector<double> input) const {; fweights[0] = input;; fweights[1] = some_function(fweights[0]);; fweights[2] = some_other_function(fweights[1]);; return fweights[2][0];; }; ```. # QUASICODE NEW. ```; class mlp {; private:; mlp() {; }; ~mlp() {; }; getmvavalue( std::vector<double> input) const {. double fweights0[5];; double fweights1[10];; double fweights2[1];; fweights0 = input;; fweights1 = some_function(fweights0);; fweights2 = some_other_function(fweights1);; return fweights2[0];; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/572:81,safe,safe,81,https://root.cern,https://github.com/root-project/root/pull/572,1,['safe'],['safe']
Safety,"assInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state.; fState = kForwardDeclared;. delete fIsA; fIsA = 0;; // Disable the autoloader while calling SetClassInfo, to prevent; // the library from being reloaded!; {; TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);; TInterpreter::SuspendAutoParsing autoParseRaii(gCling);; gInterpreter->SetClassInfo(this,kTRUE);; }; ```. Likely disabling template instantiation inside SetClassInfo in this use case. ```; art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:1463,Abort,Aborted,1463,https://root.cern,https://github.com/root-project/root/pull/5462,1,['Abort'],['Aborted']
Safety,"at http://root.cern.ch/bugs. Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #6 TList::RecursiveRemove (this=0x1e0d6c0, obj=0x7f75e4d04b40) at /home/amadio/src/root/core/cont/src/TList.cxx:717; #7 0x00007f75efe885b3 in THashList::RecursiveRemove (this=<optimized out>, obj=0x7f75e4d04b40) at /home/amadio/src/root/core/cont/src/THashList.cxx:286; #8 0x00007f75efe25047 in TObject::~TObject (this=0x7f75e4d04b40, __in_chrg=<optimized out>) at /home/amadio/src/root/core/base/src/TObject.cxx:88; #9 0x00007f75f0eef6a9 in TTree::~TTree (this=0x7f75e4d04b40, __in_chrg=<optimized out>) at /home/amadio/src/root/tree/tree/src/TTree.cxx:917; #10 0x00007f75efeba961 in TClass::Destructor (this=this; entry=0x1e81470, obj=obj; entry=0x7f75e4d04b40, dtorOnly=dtorOnly; entry=false) at /home/amadio/src/root/core/meta/src/TClass.cxx:5074; #11 0x00007f75f0758a38 in TFileMerger::MergeRecursive (this=0x7f75ebd75a90, target=0x7f75e4dd2780, sourcelist=0x7f75e4844ec0, type=14) at /home/amadio/src/root/io/io/src/TFileMerger.cxx:756; #12 0x00007f75f0756e37 in TFileMerger::PartialMerge (this=this; entry=0x7f75ebd75a90, in_type=in_type; entry=14) at /home/amadio/src/root/io/io/src/TFileMerger.cxx:842; #13 0x00007f75f073097e in ROOT::Experimental::TBufferMerger::WriteOutputFile (this=0x7fff3e662d00) at /home/amadio/src/root/io/io/src/TBufferMerger.cxx:90; #14 0x00007f75ef904d9e in ?? () from /usr/lib/gcc/x86_64-pc-linux-gnu/7.1.0/libstdc++.so.6; #15 0x00007f75ef0f43f4 in start_thread (arg=0x7f75ebd7a700) at pthread_create.c:333; #16 0x00007f75eee3f65f in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:105. ===========================================================. Fatal in <TFileMerger::RecursiveRemove>: Output file of the TFile Merger (targeting tbuffermerger_parallel.root) has been deleted (likely due to a TTree larger than 100Gb); aborting; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/666#issuecomment-309810781:7739,abort,aborting,7739,https://root.cern,https://github.com/root-project/root/pull/666#issuecomment-309810781,1,['abort'],['aborting']
Safety,"at version: RC 1; [ OK ] RNTuple.ReconstructModel (160 ms); [ RUN ] RNTuple.MultipleInFile; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Fatal: nread == nbytes violated at line 1083 of `/builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RMiniFile.cxx'; aborting; [ --- ]; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-endian. Here the bytes are in the right order, but shifted 4 bytes. $ printf '%016x\n%016x\n' 1234605615003729920 287454020; 1122334400000000; 0000000011223344; $ printf '%016x\n%016x\n' 6153737371142586367 1432778632; 55667788ffffffff; 0000000055667788; ~~~; 449/1272 Test #424: gtest-tree-ntuple-v7-test-ntuple-endian .............................***Failed 0.04 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 9 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 9 tests from RColumnElementEndian; [ RUN ] RColumnElementEndian.Float; [ OK ] RColumnElementEndian.Float (6 ms); [ RUN ] RColumnElementEndian.Double; [ OK ] RColumnElementEndian.Double (3 ms); [",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:2796,abort,aborted,2796,https://root.cern,https://github.com/root-project/root/issues/12426,1,['abort'],['aborted']
Safety,"ate a histogram; ROOT::RDF::RResultPtr<TH1D> h = rdf.Define(""x"", [](){ return gRandom->Rndm(); }).Histo1D(""x"");. // Add the histogram to a vector; vector<ROOT::RDF::RResultPtr<TH1D>> histograms;; histograms.push_back(h);. // Attempt to throw an error; throw std::runtime_error(""intended error throw for debugging"");. return histograms;; }; ```. ### Additional context; For additional context see https://root-forum.cern.ch/t/pointer-not-allocated-when-adding-rresultptr-to-vector/51831/2. Interesting part of the gdb backtrace follows (thanks @eguiraud!):; ```; >>> bt; #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at pthread_kill.c:44; #1 0x00007ffff72a1503 in __pthread_kill_internal (signo=6, threadid=<optimized out>) at pthread_kill.c:78; #2 0x00007ffff7251958 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26; #3 0x00007ffff723b53d in __GI_abort () at abort.c:79; #4 0x00007ffff729563e in __libc_message (action=action@entry=do_abort, fmt=fmt@entry=0x7ffff73b4432 ""%s\n"") at ../sysdeps/posix/libc_fatal.c:155; #5 0x00007ffff72ab22c in malloc_printerr (str=str@entry=0x7ffff73b6ff8 ""free(): double free detected in tcache 2"") at malloc.c:5660; #6 0x00007ffff72ad587 in _int_free (av=0x7ffff73f1ba0 <main_arena>, p=0x55555e7134c0, have_lock=have_lock@entry=0) at malloc.c:4469; #7 0x00007ffff72af9f3 in __GI___libc_free (mem=<optimized out>) at malloc.c:3385; #8 0x00007ffff18d07b4 in std::_Vector_base<ROOT::RDF::RResultPtr<TH1D>, std::allocator<ROOT::RDF::RResultPtr<TH1D> > >::~_Vector_base (this=0x55555881f750) at /usr/lib/gcc/x86_64-pc-linux-gnu/12.2.0/../../../../include/c++/12.2.0/bits/stl_vector.h:366; #9 0x00007ffff23aa435 in cling::Value::~Value() () from /home/blue/ROOT/master/cmake-build-foo/lib/libCling.so; #10 0x00007ffff21a1869 in TCling::ProcessLine (this=0x5555555ee950, line=0x5555563e9c60 "".X /tmp/./pointer_not_allocated_error.C"", error=0x7fffffffb600) at ../core/metacling/src/TCling.cxx:2633; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11494:2163,detect,detected,2163,https://root.cern,https://github.com/root-project/root/issues/11494,1,['detect'],['detected']
Safety,"ativity) and I also took the liberty and modified `root://eospublic.cern.ch//eos/root-eos/xrootd.test` so it is in line with `http://root.cern.ch/files/davix.test`. ```; ctest -I 164,165; Test project /home/simonm/git/root-my/buildtmp; Start 164: gtest-net-davix-test-RRawFileDavix; 1/2 Test #164: gtest-net-davix-test-RRawFileDavix ..... Passed 0.20 sec; Start 165: gtest-net-netxng-test-RRawFileNetXNG; 2/2 Test #165: gtest-net-netxng-test-RRawFileNetXNG ... Passed 0.05 sec; ```. However running the full test suite yielded some failures:. ```; 99% tests passed, 18 tests failed out of 2101. Label Time Summary:; cling = 69.10 sec; longtest = 1541.18 sec; matrix = 0.22 sec; multithreaded = 206.29 sec; python_runtime_deps = 27.45 sec; regression = 68.69 sec; roottest = 69.32 sec; tutorial = 1559.92 sec. Total Test time (real) = 5594.32 sec. The following tests FAILED:; 	 3 - pyunittests-pyroot-dependency-versions (Failed); 	 56 - pyunittests-pyroot-numbadeclare (Failed); 	 57 - test-import-numba (Failed); 	918 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed); 	920 - test-import-pandas (Failed); 	961 - tutorial-pyroot-pyroot004_NumbaDeclare-py (Failed); 	962 - test-import-numba (Failed); 	1219 - roottest-python-JupyROOT-cppcompleter_doctest (Failed); 	1220 - roottest-python-JupyROOT-handlers_doctest (Failed); 	1221 - roottest-python-JupyROOT-utils_doctest (Failed); 	1222 - roottest-python-JupyROOT-importROOT_notebook (Failed); 	1223 - roottest-python-JupyROOT-simpleCppMagic_notebook (Failed); 	1224 - roottest-python-JupyROOT-thread_local_notebook (Failed); 	1225 - roottest-python-JupyROOT-ROOT_kernel_notebook (Failed); 	1226 - roottest-python-JupyROOT-tpython_notebook (Failed); 	1227 - roottest-python-JupyROOT-Cpp_IMT_Canvas_notebook (Failed); 	1444 - roottest-root-html-runMakeIndex (Failed); 	1627 - roottest-root-meta-execTypedefList-auto (Failed); ```. I don't think it's related to the PR but to be on the safe side I'm reporting it. P. S.; Again, sorry for the delay!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9012#issuecomment-948823698:2020,safe,safe,2020,https://root.cern,https://github.com/root-project/root/pull/9012#issuecomment-948823698,1,['safe'],['safe']
Safety,"ator' in 'ROOT::Internal::VecOps::SmallVectorTemplateBase&lt;int, true&gt;' ; - [2021-05-04T11:11:26.423Z] /mnt/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:488:48: error: no type named 'const_iterator' in 'ROOT::Internal::VecOps::SmallVectorTemplateBase&lt;int, true&gt;' ; - [2021-05-04T11:11:26.423Z] /mnt/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:489:43: error: no type named 'reference' in 'ROOT::Internal::VecOps::SmallVectorTemplateBase&lt;int, true&gt;' ; - [2021-05-04T11:11:26.423Z] /mnt/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:490:43: error: no type named 'size_type' in 'ROOT::Internal::VecOps::SmallVectorTemplateBase&lt;int, true&gt;' ; - [2021-05-04T11:11:26.423Z] /mnt/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1285:27: error: no type named 'pointer' in 'ROOT::VecOps::RVec&lt;int&gt;' ; - [2021-05-04T11:11:26.424Z] /mnt/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1527:1: error: no member named 'begin' in 'ROOT::VecOps::RVec&lt;int&gt;' ; - [2021-05-04T11:11:26.424Z] /mnt/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1527:1: error: no member named 'begin' in 'ROOT::VecOps::RVec&lt;int&gt;' ; - [2021-05-04T11:11:26.424Z] /mnt/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1527:1: error: no member named 'begin' in 'ROOT::VecOps::RVec&lt;int&gt;' . And 32 more. ### Warnings:; - [2021-05-04T11:11:26.423Z] /mnt/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:193:19: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-05-04T11:11:27.359Z] /mnt/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:193:19: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-831862141:4186,avoid,avoid,4186,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-831862141,2,['avoid'],['avoid']
Safety,"attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; See the following reproducer https://gist.github.com/vepadulano/cf52f6326ae2058c36a35d08dee3a258. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; ROOT master; Fedora 32; `cmake -GNinja -Ddev=ON -DCMAKE_BUILD_TYPE=Debug -Dtesting=ON -Droottest=ON -DCMAKE_INSTALL_PREFIX=$ROOT_INSTALL $ROOT_HOME`; ### Additional context; <!--; Add any other context about the problem here.; -->; Stack trace of the reproducer; ```; Fill: Switching to new file: filemergerinput_1.root; Fill: Switching to new file: filemergerinput_2.root; Fill: Switching to new file: filemergeroutput_1.root; Fatal in <TFileMerger::RecursiveRemove>: Output file of the TFile Merger (targeting filemergeroutput.root) has been deleted (likely due to a TTree larger than 100Gb); aborting; #0 0x00007fb64aa08eca in __GI___wait4 (pid=307930, stat_loc=stat_loc; entry=0x7ffcc038dd08, options=options; entry=0, usage=usage; entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27; #1 0x00007fb64aa08e8b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc; entry=0x7ffcc038dd08, options=options; entry=0) at waitpid.c:38; #2 0x00007fb64a984aa7 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172; #3 0x00007fb64d2901a2 in TUnixSystem::Exec (this=0x1ce7800, shellcmd=0x3dc6940 ""/home/vpadulan/Programs/rootproject/rootinstall/debugtest/etc/gdb-backtrace.sh 307906 1>&2"") at /home/vpadulan/Programs/rootproject/root/core/unix/src/TUnixSystem.cxx:2120; #4 0x00007fb64d290a08 in TUnixSystem::StackTrace (this=0x1ce7800) at /home/vpadulan/Programs/rootproject/root/core/unix/src/TUnixSystem.cxx:2411; #5 0x00007fb64d1328b7 in DefaultErrorHandler (level=6000, abort_bool=true, location=0x7fb64a12d1e4 ""TFileMerger::RecursiveRemove"", msg=0x376e0b0 ""Output file of the TFile Merger (targeting filemergeroutput.root) ha",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6640:2232,abort,aborting,2232,https://root.cern,https://github.com/root-project/root/issues/6640,1,['abort'],['aborting']
Safety,avoid error bar clipping,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6697:0,avoid,avoid,0,https://root.cern,https://github.com/root-project/root/pull/6697,1,['avoid'],['avoid']
Safety,avoid error when copy&pasting code from doxygen,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/268:0,avoid,avoid,0,https://root.cern,https://github.com/root-project/root/pull/268,1,['avoid'],['avoid']
Safety,avoid memory copy in TDecompChol::TDecompChol,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15284:0,avoid,avoid,0,https://root.cern,https://github.com/root-project/root/pull/15284,1,['avoid'],['avoid']
Safety,"b.com/minimistjs/minimist/commit/47acf72c715a630bf9ea013867f47f1dd69dfc54""><code>47acf72</code></a></li>; <li>don't assign onto <strong>proto</strong> <a href=""https://github.com/minimistjs/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94""><code>63e7ed0</code></a></li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/minimistjs/minimist/commit/c590d75b741a12b5423e2b299f38a7f7c7d25a18""><code>c590d75</code></a> v1.2.7</li>; <li><a href=""https://github.com/minimistjs/minimist/commit/0ebf4ebcd5f7787a5524d31a849ef41316b83c3c""><code>0ebf4eb</code></a> [meta] add <code>auto-changelog</code></li>; <li><a href=""https://github.com/minimistjs/minimist/commit/e115b63fa9d3909f33b00a2db647ff79068388de""><code>e115b63</code></a> [actions] add reusable workflows</li>; <li><a href=""https://github.com/minimistjs/minimist/commit/01fc23f5104f85c75059972e01dd33796ab529ff""><code>01fc23f</code></a> [meta] add <code>safe-publish-latest</code></li>; <li><a href=""https://github.com/minimistjs/minimist/commit/f58745b9bb84348e1be72af7dbba5840c7c13013""><code>f58745b</code></a> [eslint] add eslint; rules to enable later are warnings</li>; <li><a href=""https://github.com/minimistjs/minimist/commit/228ae938f3cd9db9dfd8bd7458b076a7b2aef280""><code>228ae93</code></a> [Tests] add <code>aud</code> in <code>posttest</code></li>; <li><a href=""https://github.com/minimistjs/minimist/commit/236f4a07e4ebe5ee44f1496ec6974991ab293ffd""><code>236f4a0</code></a> [readme] rename and add badges</li>; <li><a href=""https://github.com/minimistjs/minimist/commit/ab033567b9c8b31117cb026dc7f1e592ce455c65""><code>ab03356</code></a> [Dev Deps] switch from <code>covert</code> to <code>nyc</code></li>; <li><a href=""https://github.com/minimistjs/minimist/commit/49c5f9fb7e6a92db9eb340cc679de92fb3aacded""><code>49c5f9f</code></a> [Dev Deps] update <code>covert</code>, <code>tape</code>; remove unnecessary <code",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11865:5960,safe,safe-publish-latest,5960,https://root.cern,https://github.com/root-project/root/pull/11865,1,['safe'],['safe-publish-latest']
Safety,"b293ffd""><code>236f4a0</code></a></li>; <li>[meta] create FUNDING.yml; add <code>funding</code> in package.json <a href=""https://github.com/minimistjs/minimist/commit/783a49bfd47e8335d3098a8cac75662cf71eb32a""><code>783a49b</code></a></li>; <li>[meta] use <code>npmignore</code> to autogenerate an npmignore file <a href=""https://github.com/minimistjs/minimist/commit/f81ece6aaec2fa14e69ff4f1e0407a8c4e2635a2""><code>f81ece6</code></a></li>; <li>Only apps should have lockfiles <a href=""https://github.com/minimistjs/minimist/commit/56cad44c7f879b9bb5ec18fcc349308024a89bfc""><code>56cad44</code></a></li>; <li>[Dev Deps] update <code>covert</code>, <code>tape</code>; remove unnecessary <code>tap</code> <a href=""https://github.com/minimistjs/minimist/commit/49c5f9fb7e6a92db9eb340cc679de92fb3aacded""><code>49c5f9f</code></a></li>; <li>[Tests] add <code>aud</code> in <code>posttest</code> <a href=""https://github.com/minimistjs/minimist/commit/228ae938f3cd9db9dfd8bd7458b076a7b2aef280""><code>228ae93</code></a></li>; <li>[meta] add <code>safe-publish-latest</code> <a href=""https://github.com/minimistjs/minimist/commit/01fc23f5104f85c75059972e01dd33796ab529ff""><code>01fc23f</code></a></li>; <li>[meta] update repo URLs <a href=""https://github.com/minimistjs/minimist/commit/6b164c7d68e0b6bf32f894699effdfb7c63041dd""><code>6b164c7</code></a></li>; </ul>; <h2><a href=""https://github.com/minimistjs/minimist/compare/v1.2.5...v1.2.6"">v1.2.6</a> - 2022-03-21</h2>; <h3>Commits</h3>; <ul>; <li>test from prototype pollution PR <a href=""https://github.com/minimistjs/minimist/commit/bc8ecee43875261f4f17eb20b1243d3ed15e70eb""><code>bc8ecee</code></a></li>; <li>isConstructorOrProto adapted from PR <a href=""https://github.com/minimistjs/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d""><code>c2b9819</code></a></li>; <li>security notice for additional prototype pollution issue <a href=""https://github.com/minimistjs/minimist/commit/ef88b9325f77b5ee643ccfc97e2ebda577e4c4e2""><code>ef88b93</code></",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11865:2394,safe,safe-publish-latest,2394,https://root.cern,https://github.com/root-project/root/pull/11865,1,['safe'],['safe-publish-latest']
Safety,"bCore.so; #12 0x00007f682e411d18 in TScopeAdapter::Init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, bool) () from /sw/atlas/Athena/22.0.60/InstallArea/x86_64-centos7-gcc11-opt/lib/libDataModelRoot.so; ```. The place in the code where it's crashing in GetSplit after it calls; to StdLen:. ```; if ( mode & kDropStd) {; unsigned int offset = (0==strncmp(""const "",full.c_str(),6)) ? 6 : 0;; RemoveStd( full, offset );; }; ```. where RemoveStd is inlined:. ```; static void RemoveStd(std::string &name, size_t pos = 0); {; size_t len = StdLen({name.data()+pos,name.length()-pos});; if (len) {; ```. So, it calls to StdLen, which apparently then crashes by branching to 0.; It's unfortunately difficult to then tell exactly why that happened.; FWIW, the registers at the crash were:. ```; rip: 0033:0000000000000000 eflags: 0000000000010202; rax: 00000000ffffffeb rbx: 0000000000000220; rcx: 0000000000000078 rdx: 0000000000000000; r08: ffffffffffffffff r09: 00007f68354af4d0; r10: 72543a3a444f4178 r11: 0000000000000006; r12: 00000000961170c0 r13: 00007f67e4395a90; r14: 0000000000000000 r15: 00007f683459fb22; rsi: 00000000961170c0 rdi: 000000000000001f; rbp: 00007f67e4395c28 rsp: 00007f67e4395a48; ```. However, the reason i'm writing this up here is that StdLen contains; a mutable, static std::set instance:. ```; static ShuttingDownSignaler<std::set<std::string>> gInlined;; ```. So this appears to be a thread-safety issue, regardless of whether; this is actually reponsible for the observed crash. There is no lock protecting this in either StdLen or in the TClass; methods that call it. There is a lock (gCoreMutex) taken in TClass::GetClass,; so we should be safe against other code that's using GetClass.; However, ATLAS code also directly uses TClassEdit in a number of places,; so i think we do have a potential race. (Though we don't use it from so many places, so it may be feasible; to wrap our uses of TClassEdit with taking gCoreMutex.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10353:3016,safe,safety,3016,https://root.cern,https://github.com/root-project/root/issues/10353,2,['safe'],"['safe', 'safety']"
Safety,"back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in; addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same; STL collection (this is supported) and we have the following sequence of operation:. 1. load library A; 2. load library B (dictionary registration is ignored as intended); 3. request TClass for STL collection.; 4. unload (dclose) library B; 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL; collection to be marked as ""unloaded"" even though it library (A); was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed; from memory on first use and thus if the library was closed and re-opened/loaded; we no longer had the information needed to restore the TClass object corresponding; to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12914:867,avoid,avoid,867,https://root.cern,https://github.com/root-project/root/pull/12914,1,['avoid'],['avoid']
Safety,"because of the hierarchical nature of the list of cleanups, a 'thread-safe' collection is not enough. You need a 'global' lock and the full complexity I described.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/719#issuecomment-312228731:70,safe,safe,70,https://root.cern,https://github.com/root-project/root/pull/719#issuecomment-312228731,1,['safe'],['safe']
Safety,"better but:; ```; % cmake /Users/couet/git/couet-root/documentation/doxygen/CMakeLists.txt -DDOCU_INPUT=""./mainpage.md;../../core/base/"" -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt; -- The C compiler identification is AppleClang 12.0.5.12050022; -- The CXX compiler identification is AppleClang 12.0.5.12050022; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /Users/couet/bin/cc - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /Users/couet/bin/g++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Doxygen: /Users/couet/bin/doxygen (found version ""1.9.4 (a85850bf5b32843d6cde6b9a25b147c9a40bbc8a)"") found components: doxygen dot ; -- Found Python: /usr/local/Frameworks/Python.framework/Versions/3.9/bin/python3.9 (found version ""3.9.7"") found components: Interpreter ; -- Configuring done; -- Generating done; -- Build files have been written to: /Users/couet/git/couet-root/documentation/doxygen; % make; make: *** No targets specified and no makefile found. Stop.; ```; I guess we need to go back to `/Users/couet/git/couet-root/documentation/doxygen/` before typing `make` ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9966#issuecomment-1076504876:352,Detect,Detecting,352,https://root.cern,https://github.com/root-project/root/pull/9966#issuecomment-1076504876,8,['Detect'],['Detecting']
Safety,"bits are immediately modified again by `_int_free`:. ```cpp; #0 tcache_put (tc_idx=0, chunk=0x55555562e400) at malloc.c:3183; #1 _int_free (av=0x7ffff4dfdbc0 <main_arena>, p=0x55555562e400, have_lock=0) at malloc.c:4481; #2 0x00007ffff4c9c8f3 in __GI___libc_free (mem=<optimized out>) at malloc.c:3391; #3 0x00007ffff7b30e64 in TStorage::ObjectDealloc (vp=0x55555562e410) at ../core/base/src/TStorage.cxx:362; #4 0x00007ffff7b14518 in TObject::operator delete (ptr=0x55555562e410) at ../core/base/src/TObject.cxx:1001; #5 0x00007ffff7b11cba in TObject::~TObject (this=0x55555562e410, __in_chrg=<optimized out>) at ../core/base/src/TObject.cxx:91; #6 0x0000555555556242 in main () at foo.cpp:9; ```. where the line that accidentally sets the bit again is 3181 here:. ```cpp; 3172 /* Caller must ensure that we know tc_idx is valid and there's room; 3173 for more chunks. */; 3174 static __always_inline void; 3175 tcache_put (mchunkptr chunk, size_t tc_idx); 3176 {; 3177 tcache_entry *e = (tcache_entry *) chunk2mem (chunk);; 3178; 3179 /* Mark this chunk as ""in the tcache"" so the test in _int_free will; 3180 detect a double free. */; 3181 e->key = tcache_key;; 3182; 3183 e->next = PROTECT_PTR (&e->next, tcache->entries[tc_idx]);; ```. and this version of the test circumvents that behavior of `_int_free` so it does not crash (at least on my laptop):. ```cpp; void *mem = malloc(sizeof(TObject));; auto o = new (mem) TObject();; auto l = new TList();; l->SetName(""my own list"");; l->Add(o);; o->~TObject();; l->Clear();; free(mem);; ```. If my understanding is correct, this also means that the test failure is real in the sense that the `kNotDeleted` mechanism does not correctly work on platforms where `free` has that behavior. From Philippe (https://github.com/root-project/roottest/pull/880#issuecomment-1239663370):. > We (I) need to extend the core library to detect when there is a memory checker (or similar) that leads to the memory being salted after a delete and in that case disable ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11330:1260,detect,detect,1260,https://root.cern,https://github.com/root-project/root/issues/11330,1,['detect'],['detect']
Safety,"bject: CN=dpool46.lcg.triumf.ca ; >>>> <http://dpool46.lcg.triumf.ca/>,OU=triumf.ca ; >>>> <https://can01.safelinks.protection.outlook.com/?url=http%3A%2F%2Ftriumf.ca%2F&data=04%7C01%7Cdqing%40triumf.ca%7Cb7cde810efc1452a4eab08d9156d8727%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564382428518448%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=PNABpB6eQBLHoIjd3QUDm%2FMdUbyGTv6O%2BkpuRdme%2B3k%3D&reserved=0>,O=Grid,C=CA; >>>> * start date: Apr 08 16:29:03 2021 GMT; >>>> * expire date: May 08 16:29:03 2022 GMT; >>>> * common name: dpool46.lcg.triumf.ca <http://dpool46.lcg.triumf.ca/>; >>>> * issuer: CN=Grid Canada Certificate Authority,O=Grid,C=CA; >>>> * NSS error -8179 (SEC_ERROR_UNKNOWN_ISSUER); >>>> * Peer's Certificate issuer is not recognized.; >>>> * Closing connection 0; >>>> curl: (60) Peer's Certificate issuer is not recognized.; >>>> More details here: http://curl.haxx.se/docs/sslcerts.html ; >>>> <https://can01.safelinks.protection.outlook.com/?url=http%3A%2F%2Fcurl.haxx.se%2Fdocs%2Fsslcerts.html&data=04%7C01%7Cdqing%40triumf.ca%7Cb7cde810efc1452a4eab08d9156d8727%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564382428518448%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=uIrfnt21mOTnhAWQN7zxmDDm9NhvlwTvp4wDcEZqcgE%3D&reserved=0>; >>>>; >>>> curl performs SSL certificate verification by default, using a ""bundle""; >>>>  of Certificate Authority (CA) public keys (CA certs). If the default; >>>>  bundle file isn't adequate, you can specify an alternate file; >>>>  using the --cacert option.; >>>> If this HTTPS server uses a certificate signed by a CA represented in; >>>>  the bundle, the certificate verification probably failed due to a; >>>>  problem with the certificate (it might be expired, or the name might; >>>>  not match the domain name in the URL).; >>>> If you'd like to turn off curl's verification of the certificate, use; >>>>  the -k",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-839989913:4618,safe,safelinks,4618,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-839989913,1,['safe'],['safelinks']
Safety,"build/master-debug/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date; <<< cling interactive line includer >>>: note: imported by module 'Hist' in '/home/pcanal/root_working/build/master-debug/lib/Hist.pcm'; ....; ```. This seems ""reversed and indeed:. ```; ls -lrt lib/RIO.pcm lib/Hist.pcm; -rw-r--r-- 1 pcanal pcanal 5537736 Mar 25 21:11 lib/Hist.pcm; -rw-r--r-- 1 pcanal pcanal 3220264 Mar 25 21:13 lib/RIO.pcm; ```. Maybe either:; ```; <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/master-debug/lib/Hist.pcm' is out of date and needs to be rebuilt: module file out of date; <<< cling interactive line includer >>>: note: imported module 'RIO' in '/home/pcanal/root_working/build/master-debug/lib/RIO.pcm' is newer.; ....; ```. ```; <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/master-debug/lib/RIO.pcm' is newer and all dependent module needs to be rebuilt; <<< cling interactive line includer >>>: note: imported by module 'Hist' in '/home/pcanal/root_working/build/master-debug/lib/Hist.pcm'; ....; ```. Cheers,; Philippe. PS Full error message:; ```; <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/master-debug/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date; <<< cling interactive line includer >>>: note: imported by module 'Hist' in '/home/pcanal/root_working/build/master-debug/lib/Hist.pcm'; Failed to load module Hist; Failed to load module RDAVIX; Failed to load module RooFitMore; Failed to load module RooFitRDataFrameHelpers; Failed to load module FITSIO; Failed to load module FFTW; Failed to load module MathMore; root.exe: /home/pcanal/root_working/code/root/interpreter/llvm/src/tools/clang/lib/Lex/Lexer.cpp:3940: bool clang::Lexer::LexTokenInternal(clang::Token&, bool): Assertion `Result.is(tok::eof) && ""Preprocessor did not set tok:eof""' failed. ; Aborted; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7704:2206,Abort,Aborted,2206,https://root.cern,https://github.com/root-project/root/issues/7704,1,['Abort'],['Aborted']
Safety,"bviously, but 2) also because the full source is needed to build `zmq::ppoll`. `ppoll` was written as an extension to libzmq itself. In the ideal world, I would have committed this back to libzmq (which they are open to, and which I'll do later, see https://github.com/zeromq/libzmq/issues/4220), but haven't had time yet. The interim solution is to just ship it with ROOT, but this requires (part of) the libzmq source to build against. We can do this in two ways: a) just include the necessary libzmq files or b) get them externally on the fly. I actually went with option a) first. However, when people started trying out this branch on their machines, it turned out that the `conda` libzmq build (which I was using in my dev setup) had a more favorable configuration than for instance most Linux native builds, especially because those native builds lack CMake configuration files. That latter fact made me decide to just make the built-in dependency the default; this way I wouldn't have to figure out how to best detect libzmq on each platform (or find / cobble together a good and freely licensed FindZeroMQ.cmake, but the general feeling around the ZeroMQ community is that this is a waste of effort, because the CMake config files that come along with libzmq itself already solve this finding problem; it's just unfortunate that the Linux distro's won't include them...). So in the end, because of time constraints, I made the choice to prioritize other things over putting a lot of effort into this dependency which will probably end up different in the near future anyway (because of the ppoll PR, which will make things a lot easier on the ROOT side). So, long story, I hope it is clear. Do you think that given this (temporary) situation, the choice for built-in only is acceptable?. Then about the RooFitZMQ option: agreed, I should add an option for that. The only catch is that this PR is part of a bigger series and the ""real"" end-product that should be optional in my opinion is Roo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8385#issuecomment-870411730:1201,detect,detect,1201,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870411730,1,['detect'],['detect']
Safety,"by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; 	add-auto-load-safe-path /srv/root/build/lib/libCore.so-gdb.py; line to your configuration file ""/home/amadio/.config/gdb/gdbinit"".; To completely disable this security protection add; 	set auto-load safe-path /; line to your configuration file ""/home/amadio/.config/gdb/gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; 	info ""(gdb)Auto-loading safe path""; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/usr/lib64/libthread_db.so.1"".; [Detaching after vfork from child process 798483]; [Detaching after vfork from child process 800084]; [Detaching after vfork from child process 800087]; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Dec 13 2022, 14:33:20 |; | From heads/cling-profile-debug@v6-25-02-3189-gf5fced388b |; | With c++ (Gentoo 12.2.1_p20221203 p3) 12.2.1 20221203 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. [Detaching after vfork from child process 800350]; root [0] double f(double x) { return x*x; }; root [1] double y = f(3.0);; Failure value returned from cantFail wrapped call; inconsistent use of embedded source; UNREACHABLE executed at /srv/root/src/root/interpreter/llvm/src/include/llvm/Support/Error.h:782!. Program received signal SIGABRT, Aborted.; __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at pthread_kill.c:44; 44	 return INTERNAL_SYSCALL_ERROR_P (ret) ? INTERNAL_SYSCALL_ERRNO (ret) : 0;; (gdb) . ```; I will try with dwarf-5 for everything, let's see if that helps. At least GDB didn't crash this time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11882:3088,Abort,Aborted,3088,https://root.cern,https://github.com/root-project/root/pull/11882,1,['Abort'],['Aborted']
Safety,c/TGeoTube.cxx:2107:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2107; /opt/root_src/geom/geom/src/TGeoTube.cxx:2773:13: warning: Value stored to 's' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 's' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2773; /opt/root_src/geom/geom/src/TGeoTube.cxx:2909:13: warning: Value stored to 'sz1' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'sz1' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2909; /opt/root_src/geom/geom/src/TGeoTube.cxx:3015:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:3015; /opt/root_src/geom/geom/src/TGeoVolume.cxx:2899:7: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Assuming field 'fNodes' is null in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2876; 2: Taking false branch in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2876; 3: Assuming field 'fFinder' is null in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2880; 4: Taking false branch in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2880; 5: Assuming 'ncells' is not equal to 0 in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2885; 6: Left side of '||' is false in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2885; 7: Assuming the condition is false in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2885; 8: Taking false branch in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2885; 9: Taking false branch in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2892; 10: Assuming 'i' is < 'ncells' in /opt/root_src/geom/geom/src/TG,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:75764,safe,safe,75764,https://root.cern,https://github.com/root-project/root/issues/7428,1,['safe'],['safe']
Safety,c/TProof.cxx:10517; 2: Taking false branch in /opt/root_src/proof/proof/src/TProof.cxx:10517; 3: Assuming 'sl' is non-null in /opt/root_src/proof/proof/src/TProof.cxx:10522; 4: Left side of '||' is false in /opt/root_src/proof/proof/src/TProof.cxx:10522; 5: Assuming the condition is false in /opt/root_src/proof/proof/src/TProof.cxx:10522; 6: Left side of '||' is false in /opt/root_src/proof/proof/src/TProof.cxx:10522; 7: Assuming 's' is non-null in /opt/root_src/proof/proof/src/TProof.cxx:10522; 8: Taking false branch in /opt/root_src/proof/proof/src/TProof.cxx:10522; 9: Assuming the condition is true in /opt/root_src/proof/proof/src/TProof.cxx:10527; 10: Left side of '||' is true in /opt/root_src/proof/proof/src/TProof.cxx:10527; 11: 'shutdown' is true in /opt/root_src/proof/proof/src/TProof.cxx:10530; 12: Left side of '&&' is true in /opt/root_src/proof/proof/src/TProof.cxx:10530; 13: Taking true branch in /opt/root_src/proof/proof/src/TProof.cxx:10530; 14: Assuming 'timeout' is <= 20 in /opt/root_src/proof/proof/src/TProof.cxx:10535; 15: '?' condition is false in /opt/root_src/proof/proof/src/TProof.cxx:10535; 16: Calling 'TProof::Collect' in /opt/root_src/proof/proof/src/TProof.cxx:10539; 17: 'list' is not equal to kAll in /opt/root_src/proof/proof/src/TProof.cxx:2728; 18: Taking false branch in /opt/root_src/proof/proof/src/TProof.cxx:2728; 19: 'list' is equal to kActive in /opt/root_src/proof/proof/src/TProof.cxx:2729; 20: Taking true branch in /opt/root_src/proof/proof/src/TProof.cxx:2729; 21: Value assigned to 'mon' in /opt/root_src/proof/proof/src/TProof.cxx:2729; 22: 'list' is not equal to kUnique in /opt/root_src/proof/proof/src/TProof.cxx:2730; 23: Taking false branch in /opt/root_src/proof/proof/src/TProof.cxx:2730; 24: 'list' is not equal to kAllUnique in /opt/root_src/proof/proof/src/TProof.cxx:2731; 25: Taking false branch in /opt/root_src/proof/proof/src/TProof.cxx:2731; 26: Assuming 'mon' is equal to field 'fCurrentMonitor' in /opt/root_src/proof/pr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7534:13477,timeout,timeout,13477,https://root.cern,https://github.com/root-project/root/issues/7534,1,['timeout'],['timeout']
Safety,c/geom/geom/src/TGeoSphere.cxx:994; 4: Value assigned to field 'fNodes' in /opt/root_src/geom/geom/src/TGeoSphere.cxx:999; 5: Called C++ object pointer is null in /opt/root_src/geom/geom/src/TGeoSphere.cxx:1000; /opt/root_src/geom/geom/src/TGeoSphere.cxx:1158:32: warning: Value stored to 'nbPnts' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'nbPnts' is never read in /opt/root_src/geom/geom/src/TGeoSphere.cxx:1158; /opt/root_src/geom/geom/src/TGeoSphere.cxx:1163:4: warning: Value stored to 'nbSegs' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'nbSegs' is never read in /opt/root_src/geom/geom/src/TGeoSphere.cxx:1163; /opt/root_src/geom/geom/src/TGeoSphere.cxx:1168:4: warning: Value stored to 'nbPols' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'nbPols' is never read in /opt/root_src/geom/geom/src/TGeoSphere.cxx:1168; /opt/root_src/geom/geom/src/TGeoSphere.cxx:1533:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoSphere.cxx:1533; /opt/root_src/geom/geom/src/TGeoTessellated.cxx:745:15: warning: Missing reference in range-for with non trivial type (std::__cxx11::basic_string<char>) [clazy-range-loop]; 1: const in /opt/root_src/geom/geom/src/TGeoTessellated.cxx:745; 2: & in /opt/root_src/geom/geom/src/TGeoTessellated.cxx:745; /opt/root_src/geom/geom/src/TGeoTorus.cxx:297:13: warning: Value stored to 'snext' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'snext' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:297; /opt/root_src/geom/geom/src/TGeoTorus.cxx:305:13: warning: Value stored to 'dphi' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'dphi' during its initialization is never read in /opt/roo,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:63679,safe,safe,63679,https://root.cern,https://github.com/root-project/root/issues/7428,1,['safe'],['safe']
Safety,"cale_data_public'; typedef struct __crt_locale_data_public; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt.h:610:16: note: previous definition is here; typedef struct __crt_locale_data_public; ^; In file included from libGeom dictionary payload:17:; In file included from C:/root-dev/root\include\TGeoExtension.h:15:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt\corecrt.h:617:16: error: redefinition of '__crt_locale_pointers'; typedef struct __crt_locale_pointers; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt.h:617:16: note: previous definition is here; typedef struct __crt_locale_pointers; ^; In file included from libGeom dictionary payload:17:; In file included from C:/root-dev/root\include\TGeoExtension.h:15:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt\corecrt.h:625:16: error: redefinition of '_Mbstatet'; typedef struct _Mbstatet; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt.h:625:16: note: previous definition is here; typedef struct _Mbstatet; ^; Error in <TInterpreter::AutoParse>: Error parsing payload code for class gGeoManager with content:. ... Assertion failed: !m_Unloading && ""Must not nest within unloading transaction"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\Transaction.cpp, line 98; *** Break *** abort. ==========================================; =============== STACKTRACE ===============; ==========================================; ...; ```; This PR fixes #14302",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14335:3661,abort,abort,3661,https://root.cern,https://github.com/root-project/root/pull/14335,1,['abort'],['abort']
Safety,"call zeroext i1 %9(%class.TSystem* %5, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i32 zeroext 0); %11 = zext i1 %10 to i64; tail call void @_ZN5cling7runtime8internal15setValueNoAllocEPvS2_S2_cy(i8* %2, i8* %0, i8* nonnull inttoptr (i64 283832976 to i8*), i8 signext 1, i64 %11); ret void; }. declare void @_ZN5cling7runtime8internal15setValueNoAllocEPvS2_S2_cy(i8*, i8*, i8*, i8 signext, i64) local_unnamed_addr #1. declare i8* @cling_runtime_internal_throwIfInvalidPointer(i8*, i8*, i8*) local_unnamed_addr #1. ; Function Attrs: nounwind; declare void @llvm.stackprotector(i8*, i8**) #2. attributes #0 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-frame-pointer-elim""=""false"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""ppc64le"" ""target-features""=""+altivec,+bpermd,+crypto,+direct-move,+extdiv,+htm,+power8-vector,+vsx,-power9-vector,-qpx"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }; attributes #1 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""less-precise-fpmad""=""false"" ""no-frame-pointer-elim""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""ppc64le"" ""target-features""=""+altivec,+bpermd,+crypto,+direct-move,+extdiv,+htm,+power8-vector,+vsx,-power9-vector,-qpx"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }; attributes #2 = { nounwind }. !llvm.module.flags = !{!0}; !llvm.ident = !{!1}. !0 = !{i32 1, !""wchar_size"", i32 4}; !1 = !{!""clang version 9.0.1 ""}; !2 = !{!3, !3, i64 0}; !3 = !{!""any pointer"", !4, i64 0}; !4 = !{!""omnipotent char"", !5, i64 0}; !5 = !{!""Simple C++ TBAA""}; !6 = !{!7, !7, i64 0}; !7 = !{!""vtable pointer"", !5, i64 0}; $5 = void; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8072#issuecomment-981977924:78993,unsafe,unsafe-fp-math,78993,https://root.cern,https://github.com/root-project/root/issues/8072#issuecomment-981977924,2,['unsafe'],['unsafe-fp-math']
Safety,"cation of the certificate, use; >>>>> the -k (or --insecure) option.; >>>>> ***@***.*** t5]$ ; >>>> ; >>>> ; >>>> I am unfamiliar with how to use curl with X509 and everything I tried so far has not worked. eg; >>>> curl -v https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Cdqing%40triumf.ca%7Cb7cde810efc1452a4eab08d9156d8727%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564382428528444%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=kixSR3Oc%2B0Kwn0yq8EDl%2FAgeDJDmM%2Bvkvzsc5wxLvcE%3D&reserved=0> --key ~/.globus/userkey.pem --cert ~/.globus/usercert.pem; >>>> or; >>>> curl -v https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Cdqing%40triumf.ca%7Cb7cde810efc1452a4eab08d9156d8727%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564382428528444%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=kixSR3Oc%2B0Kwn0yq8EDl%2FAgeDJDmM%2Bvkvzsc5wxLvcE%3D&reserved=0> --key ~/.globus/userkey.pem --cert ~/.globus/usercert.pem --capath /etc/grid-security/certificates; >>>> ; >>>> ; >>>> regards,; >>>> Asoka; >>>> ; >>>>> On May 12, 2021, at 10:18 AM, Axel Naumann ***@***.*** ***@***.***>> wrote:; >>>>> ; >>>>> ; >>>>> Right - without authentication I cannot see what's happening. If this is due to a redirect it would be a dupe of #8155 <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8155&data=04%7C01%7Cdqing%40triumf.ca%7Cb7cde810efc1452a4eab",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-839991525:6757,safe,safelinks,6757,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-839991525,1,['safe'],['safelinks']
Safety,"cc8-opt/lib/libCore.so; #13 0x00007efd5441c1b6 in TMemberInspector::InspectMember(char const*, void const*, char const*, bool) () from /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc8-opt/lib/libCore.so; #14 0x00007efd551d0f65 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc8-opt/lib/libCling.so; #15 0x00007efd544ca94d in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc8-opt/lib/libCore.so; #16 0x00007efd544d6b45 in TClass::BuildRealData(void*, bool) () from /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc8-opt/lib/libCore.so; #17 0x00007efd544d6c00 in TClass::BuildRealData(void*, bool) () from /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc8-opt/lib/libCore.so; #18 0x00007efd544fa6df in TProtoClass::TProtoClass(TClass*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc8-opt/lib/libCore.so; #19 0x00007efd58ee6750 in CloseStreamerInfoROOTFile () from /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc8-opt/lib/libRIO.so; #20 0x00007efd55165471 in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc8-opt/lib/libCling.so; #21 0x00007efd551751a4 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, bool) () from /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc8-opt/lib/libCling.so; #22 0x00007efd5517d829 in RootClingMain(int, char**, bool) () from /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc8-opt/lib/libCling.so; #23 0x00007efd55181f15 in ROOT_rootcling_Driver () from /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc8-opt/lib/libCling.so; #24 0x0000000000400c45 in main (); Aborted (core dumped); [bash][pcadp02]:ATLASG-1596 >; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8387#issuecomment-858702680:5438,Abort,Aborted,5438,https://root.cern,https://github.com/root-project/root/issues/8387#issuecomment-858702680,1,['Abort'],['Aborted']
Safety,"cd root-build.foo; [bellenot@lxplus803 root-build.foo]$ cmake ../root; -- The C compiler identification is GNU 8.5.0; -- The CXX compiler identification is GNU 8.5.0; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /usr/bin/cc - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/c++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Git: /usr/bin/git (found version ""2.39.3""); -- Building ROOT version 6.31.01; -- Checking internet connectivity; -- Checking internet connectivity - found; -- Looking for Python; -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed; -- Found GCC. Major version 8, minor version 5; -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard.; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed; -- Looking for pthread_create in pthreads; -- Looking for pthread_create in pthreads - not found; -- Looking for pthread_create in pthread; -- Looking for pthread_create in pthread - found; -- Found Threads: TRUE; -- Performing Test GLIBCXX_USE_CXX11_ABI; -- Performing Test GLIBCXX_USE_CXX11_ABI - Success; -- ROOT Platform: linux; -- ROOT Compiler: GNU 8.5.0; -- ROOT Processor: x86_64; -- ROOT Architecture: linuxx8664gcc; -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'); -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG; -- ROOT default compression algorithm: zlib; -- Cannot enable cudnn without enabling cuda or tmva-gpu: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14159#issuecomment-1838972446:1732,detect,detected,1732,https://root.cern,https://github.com/root-project/root/issues/14159#issuecomment-1838972446,1,['detect'],['detected']
Safety,centos7/gcc7 projectroot.test.test_stressIOPlugins_xroot failure is a timeout unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2078#issuecomment-393687586:70,timeout,timeout,70,https://root.cern,https://github.com/root-project/root/pull/2078#issuecomment-393687586,1,['timeout'],['timeout']
Safety,"cert.pem; >>>> or; >>>> curl -v https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Cdqing%40triumf.ca%7Cb7cde810efc1452a4eab08d9156d8727%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564382428528444%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=kixSR3Oc%2B0Kwn0yq8EDl%2FAgeDJDmM%2Bvkvzsc5wxLvcE%3D&reserved=0> --key ~/.globus/userkey.pem --cert ~/.globus/usercert.pem --capath /etc/grid-security/certificates; >>>> ; >>>> ; >>>> regards,; >>>> Asoka; >>>> ; >>>>> On May 12, 2021, at 10:18 AM, Axel Naumann ***@***.*** ***@***.***>> wrote:; >>>>> ; >>>>> ; >>>>> Right - without authentication I cannot see what's happening. If this is due to a redirect it would be a dupe of #8155 <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8155&data=04%7C01%7Cdqing%40triumf.ca%7Cb7cde810efc1452a4eab08d9156d8727%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564382428538437%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=NSH3DFaDuhyR%2FbU8u99%2BhMt%2F%2Bl%2BPFoyMoNKO2CIFrZM%3D&reserved=0> - if not then it's different :-) But I don't know how to tell whether it's a redirect. Do you?; >>>>> ; >>>>> If not let's get #8155 <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8155&data=04%7C01%7Cdqing%40triumf.ca%7Cb7cde810efc1452a4eab08d9156d8727%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564382428538437%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=NSH3DFaDuhyR%2FbU8u99%2BhMt%2F%2Bl%2BPFoyMoNKO2CIFrZM%3D&reserved=0> fixed and then we re-visit this one: either i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-839991525:7606,safe,safelinks,7606,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-839991525,1,['safe'],['safelinks']
Safety,"cg.triumf.ca/>,OU=triumf.ca ; >>>>>>>> <https://can01.safelinks.protection.outlook.com/?url=http%3A%2F%2Ftriumf.ca%2F&data=04%7C01%7Csimonliu%40triumf.ca%7Ca59fceaddf634d196e5608d91576f34a%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564422909247358%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=6x%2BvqAwaP4JatJuGaFF%2FDau8refUUubCF0W9oyCbdgg%3D&reserved=0>,O=Grid,C=CA; >>>>>>>> * start date: Apr 08 16:29:03 2021 GMT; >>>>>>>> * expire date: May 08 16:29:03 2022 GMT; >>>>>>>> * common name: dpool46.lcg.triumf.ca ; >>>>>>>> <http://dpool46.lcg.triumf.ca/>; >>>>>>>> * issuer: CN=Grid Canada Certificate Authority,O=Grid,C=CA; >>>>>>>> * NSS error -8179 (SEC_ERROR_UNKNOWN_ISSUER); >>>>>>>> * Peer's Certificate issuer is not recognized.; >>>>>>>> * Closing connection 0; >>>>>>>> curl: (60) Peer's Certificate issuer is not recognized.; >>>>>>>> More details here: http://curl.haxx.se/docs/sslcerts.html ; >>>>>>>> <https://can01.safelinks.protection.outlook.com/?url=http%3A%2F%2Fcurl.haxx.se%2Fdocs%2Fsslcerts.html&data=04%7C01%7Csimonliu%40triumf.ca%7Ca59fceaddf634d196e5608d91576f34a%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564422909257351%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=u7Y%2FanQwDppeiiawxeAhNcTy09JgTzHSTAvPUZDe3c4%3D&reserved=0>; >>>>>>>>; >>>>>>>> curl performs SSL certificate verification by default, using a ; >>>>>>>> ""bundle""; >>>>>>>>  of Certificate Authority (CA) public keys (CA certs). If the ; >>>>>>>> default; >>>>>>>>  bundle file isn't adequate, you can specify an alternate file; >>>>>>>>  using the --cacert option.; >>>>>>>> If this HTTPS server uses a certificate signed by a CA ; >>>>>>>> represented in; >>>>>>>>  the bundle, the certificate verification probably failed due to a; >>>>>>>>  problem with the certificate (it might be expired, or the name ; >>>>>>>> might; >>>>>>>>  not match the domain name in the URL).; >>>",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840043080:7326,safe,safelinks,7326,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840043080,1,['safe'],['safelinks']
Safety,"ch test.; Some things to note:. - Test pyunittests-pyroot-import-load-libs fails with; ```sh; ERROR: test_import (import_load_libs.ImportLoadLibs); Test libraries loaded after importing ROOT; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/srv/root/src/root/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 117, in test_import; raise Exception('Found not whitelisted libraries after importing ROOT:' \; Exception: Found not whitelisted libraries after importing ROOT:; - libz3; If the test fails with a library that is loaded on purpose, please add it to the whitelist.; ```; Note that z3 is a library used by LLVM. It may be that because I have other versions of LLVM/Clang in the system, z3 got installed and picked up by the builtin LLVM from the ROOT build. Ideally, this sort of behavior of automatically picking whatever is installed on the system should be avoided, as it can cause problems, so I recommend looking into the configuration of the builtin LLVM more closely and either disabling z3 if not used, or adding it to the dependencies of ROOT and enabling by force. - Test tutorial-v7-ntuple-ntpl005_introspection failure is related to uring support, is that tested in nightlies? It could also be a permissions issue that I don't have configured properly, I don't know.; ```sh; Start 995: tutorial-v7-ntuple-ntpl005_introspection; 7/18 Test #995: tutorial-v7-ntuple-ntpl005_introspection ...........***Failed 1.57 sec; ...; terminate called after throwing an instance of 'std::runtime_error'; what(): Fatal Error: failed to allocate memory for the smallest possible io_uring instance. 'memlock' memory has been exhausted for this user; CMake Error at /srv/root/build/RootTestDriver.cmake:237 (message):; error code: Subprocess aborted; ```; - The dataframe tests all fail with something like this; ```sh; Processing /srv/root/src/roottest/root/dataframe/test_ctors.C+...; Info in <TUnixSystem::ACLiC>: creat",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936:3454,avoid,avoided,3454,https://root.cern,https://github.com/root-project/root/issues/7936,1,['avoid'],['avoided']
Safety,"cided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). ; With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. ; This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain.; * If we ever add fields to the class, Clone could be buggy (missing the added field); In contrast, the copy constructor will never miss any fields. ; * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: ; * define default values for a field descriptor; * remove move-only restriction on `RFieldDescriptor`; * implement a builder class for `RFieldDescriptor` to make construction (and using `RNTupleDescriptorBuilder`) more explicit. ; </details>. We introduce a new type, `RDanglingFieldDescriptor`, that supports the builder pattern for field descriptor values, e.g. ; ```c++; RFieldDescriptor fieldDesc = RDanglingFieldDescriptor(); .FieldId(1); .FieldName(""some_field""); .Structure(ENTupleStructure::kCollection); .UnwrapDescriptor(); ; ```. Dangling descriptors let us modify all field descriptor information except for relationship information (i.e. they have no idea about field parents or",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5934:1558,risk,risk,1558,https://root.cern,https://github.com/root-project/root/pull/5934,1,['risk'],['risk']
Safety,"civetweb server creates pre-coinfigured number of threads and this number cannot be change once server running. Each active websocket consumes one thread, where all communication handling is performed. ; To avoid situation that simple http requests fails just while websockets blocked all threads number of; websocket connection will be limited by 90% of configured threads. Issue warning message from `TCivetweb.cxx` when websocket connection refused because of threads number like:; ```; Error in <TCivetweb::WebSocketHandler>: Only 2 threads are available, reject connection request for win3. Increase WebGui.HttpThreads parameter in rootrc, now it is 7; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13542:207,avoid,avoid,207,https://root.cern,https://github.com/root-project/root/pull/13542,1,['avoid'],['avoid']
Safety,"ck (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/tutorials/math/exampleFunction.py"", line 57, in <module>; fitter.Result().Print(ROOT.std.cout); ReferenceError: attempt to access a null-pointer; CMake Error at /builddir/build/BUILD/root-6.28.00/redhat-linux-build/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### tutorial-tmva-TMVA_CNN_Classification-py. There are probably 6 thread, not 25769803776. (Zero-extended from 32 to 64 bits in the wrong direction.). $ printf '%016x\n' 25769803776; 0000000600000000. TypeError: none of the 3 overloaded methods succeeded.; ~~~; 1270/1272 Test #1267: tutorial-tmva-TMVA_CNN_Classification-py ............................***Failed 1.33 sec; TMVA_CNN_Classificaton:0: RuntimeWarning: Skip using Keras since tensorflow is not installed; TMVA_CNN_Classificaton:0: RuntimeWarning: Skip using PyTorch since torch is not installed; DataSetInfo : [dataset] : Added class ""Signal""; : Add Tree sig_tree of type Signal with 1000 events; DataSetInfo : [dataset] : Added class ""Background""; : Add Tree bkg_tree of type Background with 1000 events; <FATAL> : Unknown method index in map: 0; ***> abort program execution; Running with nthreads = 25769803776; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/tutorials/tmva/TMVA_CNN_Classification.py"", line 299, in <module>; factory.BookMethod(; File ""/builddir/build/BUILD/root-6.28.00/redhat-linux-build/lib/ROOT/_pythonization/_tmva/_factory.py"", line 61, in BookMethod; return self._BookMethod(*args, **kwargs); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; TypeError: none of the 3 overloaded methods succeeded. Full details:; TMVA::MethodBase* TMVA::Factory::BookMethod(TMVA::DataLoader* loader, TString theMethodName, TString methodTitle, TString theOption = """") =>; TypeError: could not convert argument 2; TMVA::MethodBase* TMVA::Factory::BookMethod(TMVA::DataLoader* loader, TMVA::Types::EMVA theMethod, TString methodTitle, TString theOption = """") =>; runtime_e",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:8486,abort,abort,8486,https://root.cern,https://github.com/root-project/root/issues/12429,1,['abort'],['abort']
Safety,"cked for duplicates. ### Description. When using Python in interactive mode, the web window does not launch properly (see screenshot). It works from a C++ macro. One can also save canvas contents in ROOT batch mode. ![image](https://github.com/root-project/root/assets/1557360/2181f05e-27bd-4473-9151-b28a90773900). ### Reproducer. ```python; import ROOT; import numpy as np. def main():; voltages = np.array([1,2,3], dtype=np.uint32); capacitances = np.array([4,5,6], dtype=np.float32). #ROOT.gROOT.SetBatch(True); df = ROOT.RDF.FromNumpy({'voltages': voltages, 'capacitances': capacitances}); df = df.Define('inv', '1/(capacitances*capacitances)'). c = ROOT.TCanvas(); graph = df.Graph('voltages', 'inv'); graph.Draw('APL'). c.SaveAs(""graph.pdf""). if __name__ == ""__main__"":; main(); ```; Output:; ```bash; $ python3 -i repro.py ; Info in <THttpEngine::Create>: Starting HTTP server on port 127.0.0.1:9449; Opening in existing browser session.; [102887:102898:0312/160727.268507:ERROR:object_proxy.cc(576)] Failed to call method: org.freedesktop.DBus.Properties.Get: object_path= /org/freedesktop/portal/desktop: org.freedesktop.DBus.Error.InvalidArgs: No such interface “org.freedesktop.portal.FileChooser”; [102887:102898:0312/160727.268546:ERROR:select_file_dialog_linux_portal.cc(285)] Failed to read portal version property; [102887:102887:0312/160727.306050:ERROR:policy_logger.cc(156)] :components/enterprise/browser/controller/chrome_browser_cloud_management_controller.cc(161) Cloud management controller initialization aborted as CBCM is not enabled. Please use the `--enable-chrome-browser-cloud-management` command line flag to enable it if you are not using the official Google Chrome build.; 13986 bytes written to file /home/jakob/Documents/CERN/ROOT/demo/graph.pdf; Info in <ProduceImage>: PDF file graph.pdf with 1 pages has been created; >>> ; ```. ### ROOT version. master. ### Installation method. From sources. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14943:1568,abort,aborted,1568,https://root.cern,https://github.com/root-project/root/issues/14943,1,['abort'],['aborted']
Safety,"clang-tidy with `modernize-use-bool-literals` complains about the fact that 0 is used in place of false. Given I assume there is no particular reason for using `0` rather than `false`, I suggest to change it to avoid the false positives.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/472:211,avoid,avoid,211,https://root.cern,https://github.com/root-project/root/pull/472,1,['avoid'],['avoid']
Safety,cling error recovery issues,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7970:12,recover,recovery,12,https://root.cern,https://github.com/root-project/root/issues/7970,1,['recover'],['recovery']
Safety,cling: changes needed on MacOS to avoid G__Core.cxx generation failures complaining about time_point,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16494:34,avoid,avoid,34,https://root.cern,https://github.com/root-project/root/pull/16494,1,['avoid'],['avoid']
Safety,"code. I'm attaching the largest instance, which is the last of 50 sub-tests: [sg50.zip](https://github.com/root-project/root/files/7587535/sg50.zip) (similar to Enrico, I added the `#include`s to make it compile standalone); For this single file, Clang 12.0.1 (from C8S) takes 4s with `-O0` and 12s with `-O1`. Looking at `Pass execution timing report` from `-ftime-report` shows, for `sg50.cpp` down to a time of 0.1s:; ```; 1.5001 ( 71.7%) 0.0359 ( 9.5%) 1.5360 ( 62.2%) 1.5395 ( 62.2%) X86 DAG->DAG Instruction Selection; 0.3250 ( 15.5%) 0.3377 ( 89.2%) 0.6627 ( 26.8%) 0.6633 ( 26.8%) X86 Assembly Printer; 0.0760 ( 3.6%) 0.0040 ( 1.0%) 0.0800 ( 3.2%) 0.0801 ( 3.2%) Fast Register Allocator; ```; for `-O0`, while for `-O1`:; ```; 2.1491 ( 23.0%) 0.0050 ( 1.7%) 2.1540 ( 22.4%) 2.1562 ( 22.4%) Greedy Register Allocator; 1.8328 ( 19.6%) 0.0439 ( 14.7%) 1.8767 ( 19.5%) 1.8805 ( 19.5%) X86 DAG->DAG Instruction Selection; 0.5354 ( 5.7%) 0.0000 ( 0.0%) 0.5354 ( 5.6%) 0.5361 ( 5.6%) Combine redundant instructions; 0.2517 ( 2.7%) 0.2238 ( 75.0%) 0.4755 ( 4.9%) 0.4760 ( 4.9%) X86 Assembly Printer; 0.3088 ( 3.3%) 0.0000 ( 0.0%) 0.3088 ( 3.2%) 0.3091 ( 3.2%) Control Flow Optimizer; 0.2958 ( 3.2%) 0.0010 ( 0.3%) 0.2968 ( 3.1%) 0.2972 ( 3.1%) Machine Instruction Scheduler; 0.2617 ( 2.8%) 0.0000 ( 0.0%) 0.2617 ( 2.7%) 0.2620 ( 2.7%) Merge disjoint stack slots; 0.1949 ( 2.1%) 0.0070 ( 2.3%) 0.2019 ( 2.1%) 0.2021 ( 2.1%) Simple Register Coalescing; 0.1759 ( 1.9%) 0.0000 ( 0.0%) 0.1759 ( 1.8%) 0.1761 ( 1.8%) Live Variable Analysis; 0.1414 ( 1.5%) 0.0000 ( 0.0%) 0.1414 ( 1.5%) 0.1416 ( 1.5%) Combine redundant instructions #6; 0.1413 ( 1.5%) 0.0000 ( 0.0%) 0.1413 ( 1.5%) 0.1415 ( 1.5%) Combine redundant instructions #7; 0.1411 ( 1.5%) 0.0000 ( 0.0%) 0.1411 ( 1.5%) 0.1413 ( 1.5%) Combine redundant instructions #4; 0.1410 ( 1.5%) 0.0000 ( 0.0%) 0.1410 ( 1.5%) 0.1412 ( 1.5%) Combine redundant instructions #3; 0.1408 ( 1.5%) 0.0000 ( 0.0%) 0.1408 ( 1.5%) 0.1410 ( 1.5%) Combine redundant instruc",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9312#issuecomment-976463242:1071,redund,redundant,1071,https://root.cern,https://github.com/root-project/root/issues/9312#issuecomment-976463242,1,['redund'],['redundant']
Safety,"code.DeadStores]; 1: Value stored to 'dist' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoXtru.cxx:558; /opt/root_src/geom/geom/src/TGeoXtru.cxx:878:11: warning: Although the value stored to 'indx2' is used in the enclosing expression, the value is never actually read from 'indx2' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to 'indx2' is used in the enclosing expression, the value is never actually read from 'indx2' in /opt/root_src/geom/geom/src/TGeoXtru.cxx:878; /opt/root_src/geom/geom/src/TGeoXtru.cxx:939:13: warning: Value stored to 'safz' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safz' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoXtru.cxx:939; /opt/root_src/geom/geom/src/TGeoXtru.cxx:943:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoXtru.cxx:943; /opt/root_src/geom/geombuilder/src/TGeoSphereEditor.cxx:351:22: warning: Value stored to 'rmin' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'rmin' is never read in /opt/root_src/geom/geombuilder/src/TGeoSphereEditor.cxx:351; /opt/root_src/geom/geombuilder/src/TGeoVolumeEditor.cxx:239:17: warning: Although the value stored to 'label' is used in the enclosing expression, the value is never actually read from 'label' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to 'label' is used in the enclosing expression, the value is never actually read from 'label' in /opt/root_src/geom/geombuilder/src/TGeoVolumeEditor.cxx:239; /opt/root_src/geom/geombuilder/src/TGeoVolumeEditor.cxx:317:17: warning: Although the value stored to 'label' is used in the enclosing expression, the value is never actually read from 'label' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:80405,safe,safe,80405,https://root.cern,https://github.com/root-project/root/issues/7428,1,['safe'],['safe']
Safety,"control.cpp#L50. It just opens a web browser with the following [link](https://gitlab.com/kicad/code/kicad/-/issues/new?issue[description]=%3C%21--%20Before%20Creating%20a%20New%20Issue%3A%0A%2A%20Search%20the%20issue%20tracker%20to%20verify%20the%20issue%20has%20not%20already%20been%20reported.%0A%2A%20Only%20report%20one%20problem%20per%20issue.%20--%3E%0A%0A%23%20Description%0A%3C%21--%20What%20is%20the%20current%20behavior%20and%20what%20is%20the%20expected%20behavior%3F%20--%3E%0A%3C%21--%20Please%20attach%20screenshots%20if%20they%20will%20help%20explain%20the%20problem.%20--%3E%0A%0A%23%20Steps%20to%20reproduce%0A%3C%21--%20Please%20include%20a%20screen%20recording%20if%20it%20will%20help%20explain%20how%20to%20reproduce.%20--%3E%0A%3C%21--%20If%20this%20issue%20is%20specific%20to%20a%20project%2C%20please%20attach%20it.%20--%3E%0A1.%0A2.%0A%23%20KiCad%20Version%0A%0A%60%60%60%0AApplication%3A%20KiCad%20PCB%20Editor%0A%0AVersion%3A%205.99.0-unknown-baf6798695~131~ubuntu18.04.1%2C%20release%20build%0A%0ALibraries%3A%0A%09wxWidgets%203.0.4%0A%0APlatform%3A%20Linux%205.4.0-77-generic%20x86_64%2C%2064%20bit%2C%20Little%20endian%2C%20wxGTK%2C%20mate%2C%20x11%0A%0A%09wxWidgets%3A%203.0.4%20%28wchar_t%2Cwx%20containers%2Ccompatible%20with%202.8%29%20GTK%2B%203.22%0A%09Boost%3A%201.65.1%0A%09OCC%3A%207.5.1%0A%09Curl%3A%207.58.0%0A%09ngspice%3A%2033%0A%09Compiler%3A%20GCC%207.5.0%20with%20C%2B%2B%20ABI%201011%0A%0ABuild%20settings%3A%0A%09KICAD_USE_OCC%3DON%0A%09KICAD_SPICE%3DON%0A%0A%60%60%60), that looks like this:. ![image](https://user-images.githubusercontent.com/10653970/128146364-f40a992b-1730-40d8-996a-7d51a262aec7.png). This homogenizes bug reports and saves time of the dev's asking what their current settings and versions are. The KiCad gitlab bot also warns the user if it detects that no version info was added to the issue. And they have a very nice webpage to aid users in reporting issues at the right repository: https://www.kicad.org/help/report-an-issue/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8795:2863,detect,detects,2863,https://root.cern,https://github.com/root-project/root/issues/8795,1,['detect'],['detects']
Safety,"cout<<""\n"";; ULong64_t y = x-1;; formula = TString::Format(""x-%lld"", y);; std::cout<<"" TTree::Scan(\""""<<formula<<""\"");\n"";; std::cout<<""Expected output: ""<<std::setw(19)<<x-y<<""\n"";; t->Scan(formula, """", ""colsize=25 col=lld"");; ; std::cout<<""\n"";; y = x-926;; formula = TString::Format(""x-%lld"", y);; std::cout<<"" TTree::Scan(\""""<<formula<<""\"");\n"";; std::cout<<""Expected output: ""<<std::setw(19)<<x-y<<""\n"";; t->Scan(formula, """", ""colsize=25 col=lld"");; ; ; f.Close();; }. int main() {; ULong64_t x = 1617047019150033926;; ; write(x);; read(x);; }; ```. The program:. 1. Creates a tree with a single ULong64_t branch and single entry, and saves it to file f.root; 2. Reads the file and the tree:; - Reads the value from tree with TTree::GetEntry() to confirm the variable is saved properly – this seems to work correctly; - Displays the value with Scan() – displayed value is different on the last digit; - Perform simple subtractions using Scan() – the results are incorrect as well. This is output I obtained with 6.22/08 in Linux:; ```; Written to tree: 1617047019150033926; Read from tree: 1617047019150033926 (correct). TTree::Scan(""x"");; Expected output: 1617047019150033926; ****************************************; * Row * x *; ****************************************; * 0 * 1617047019150033920 *; ****************************************. TTree::Scan(""x-1617047019150033925"");; Expected output: 1; ****************************************; * Row * x-1617047019150033925 *; ****************************************; * 0 * 0 *; ****************************************. TTree::Scan(""x-1617047019150033000"");; Expected output: 926; ****************************************; * Row * x-1617047019150033000 *; ****************************************; * 0 * 1024 *; ****************************************; ```; I encountered similar issues when trying to plot the values with TTree::Draw(). It seems to me that the values are rounded... perhaps casted to double? Is there any way to avoid it?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7844:2966,avoid,avoid,2966,https://root.cern,https://github.com/root-project/root/issues/7844,1,['avoid'],['avoid']
Safety,coverity 94012: removed redundant unreachable return statement			89a4a67; coverity 82573: fixed copy paste error fXaxis to fZaxis			1f8f137; coverity 82274: fixed uninitialised class members,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/384:24,redund,redundant,24,https://root.cern,https://github.com/root-project/root/pull/384,1,['redund'],['redundant']
Safety,critical bugfix in RooFit to avoid last bin getting lost in histogram,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1916:29,avoid,avoid,29,https://root.cern,https://github.com/root-project/root/pull/1916,1,['avoid'],['avoid']
Safety,"ct %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; The second-order RooChebyshev class produces negative values for certain parameter range around `c1=-0.5` and `c2=-0.55`. ; These negative values are then handled differently in different versions of ROOT; ![chebtest_6 2004](https://user-images.githubusercontent.com/8844360/223719234-2a99dc62-3c1a-4f2b-9690-3ccc5fa45df0.png); ![chebtest_6 2406](https://user-images.githubusercontent.com/8844360/223719704-06e4d558-9aa0-4d48-a15c-7316297f0bfb.png). ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. A preferred solution would be to set negative values to 0 as in ROOT 6.20, because setting them to +inf is causing the fits to diverge. ; Is it possible to avoid the negative values in RooChebychev in the first place?. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. The code which produces the plots above:; ```; import ROOT; canvas = ROOT.TCanvas(""cv1"", ""cv1"", 700, 500); #ROOT.__version__ = '6.20/04' # Earlier pyROOT implementations have no __version__; mass = ROOT.RooRealVar(""KS_M"", ""m(#pi^{+}#pi^{-}) GeV/c^{2}"", 0.47, 0.53); frame = mass.frame(ROOT.RooFit.Bins(100), ROOT.RooFit.Title(ROOT.__version__)); c1 = ROOT.RooRealVar(""c1"", "" 1st cheb parameter"",-0.5, -1, 1); c2 = ROOT.RooRealVar(""c2"", "" 2nd cheb parameter"", -0.55, -1, 1); bkg = ROOT.RooChebychev(""bkg"", ""Chebyshev Polynomial"", mass, ROOT.RooArgList(c1, c2)); bkg.plotOn(frame); canvas.cd(); frame.Draw(); canvas.Draw(); canvas.Update(); canvas.SaveAs(f'pdf/chebtest_{ROOT._",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12452:1164,avoid,avoid,1164,https://root.cern,https://github.com/root-project/root/issues/12452,1,['avoid'],['avoid']
Safety,"cumentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>. For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from root/multicore/processExecutorH1Test...; (gdb) run; Starting program: /srv/root/roottest-build/root/multicore/processExecutorH1Test ; warning: File ""/usr/lib/root/9999/lib/libCore.so.6.25.01-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; 	add-auto-load-safe-path /usr/lib/root/9999/lib/libCore.so.6.25.01-gdb.py; line to your configuration file ""/home/amadio/.gdbinit"".; To completely disable this security protection add; 	set auto-load safe-path /; line to your configuration file ""/home/amadio/.gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; 	info ""(gdb)Auto-loading safe path""; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib64/libthread_db.so.1"".; +++ Executing tProcessExecutorH1Test ......................................... +++; [Detaching after vfork from child process 340387]; [Detaching after vfork from child process 340389]; [Detaching after vfork from child process 340391]; [Detaching after vfork from child process 340393]; [Detaching after vfork from child process 341564]; [Detaching after vfork from child process 341566]; [Detaching after vfork from child process 341606]; [Detaching after fork from child process 341608]; [Detaching after fork from child process 341609]; [Detaching after fork from child process 341610]; [Detaching after vfork from child process 341705]; +++ Processing the H1 dataset with a lambda .................................. OK ; [Detaching after fork from child process 341711]; [Detaching after fork from child process 341712]; [Detaching after fork from child process 341713]; +++ Processing the H1 dataset with h",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936#issuecomment-823920792:1622,safe,safe,1622,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-823920792,1,['safe'],['safe']
Safety,"cxxmodules-ON/bin/root.exe...; Starting program: /data/root-build-runtime_cxxmodules-ON/bin/root.exe -l -q -b; warning: Could not trace the inferior process.; warning: ptrace: Function not implemented; During startup program exited with code 127.; ```. - After `apt-get install qemu-user-static`, there is a `gdb` hook in an explicit qemu call, and with `docker cp sad_gauss:/lib/ .` I can copy the necessary aarch64 libs over:; ```console; # ROOTIGNOREPREFIX=1 ROOT_HIST=0 qemu-aarch64-static -g 1234 /mnt/root-build-runtime_cxxmodules-ON/bin/root.exe -l -q -b; ^C^\; ```; but doesn't crash, and it just keep spinning at 100% CPU for a few hours, and requires a SIGINT to get a backtrace, which we can view outside the container:; ```console; $ gdb-multiarch -q --nh -ex 'file ../root-build-runtime_cxxmodules-ON/bin/root.exe' -ex 'set architecture aarch64' -ex 'set solib-search-path ../root-build-runtime_cxxmodules-ON/lib:./lib' -ex 'target remote 172.17.0.3:1234' -ex 'set auto-load safe-path /' -ex 'continue'; Reading symbols from ../root-build-runtime_cxxmodules-ON/bin/root.exe...; The target architecture is set to ""aarch64"".; Remote debugging using 172.17.0.3:1234; warning: remote target does not support file transfer, attempting to access files from local filesystem.; Reading symbols from /home/wdconinc/git/root/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1... This GDB supports auto-downloading debuginfo from the following URLs:; <https://debuginfod.ubuntu.com>; Enable debuginfod for this session? (y or [n]) n; Debuginfod has been disabled.; To make this setting permanent, add 'set debuginfod enabled off' to .gdbinit.; (No debugging symbols found in /home/wdconinc/git/root/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1); 0x00007f6925dc2c40 in ?? () from /home/wdconinc/git/root/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1; Continuing. Program received signal SIGINT, Interrupt.; 0x00007f6908203f2c in llvm::SmallDenseMap<clang::Decl*, unsigned int, 4u, llvm::DenseMapInfo<clang::De",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13845#issuecomment-1791689926:5345,safe,safe-path,5345,https://root.cern,https://github.com/root-project/root/issues/13845#issuecomment-1791689926,1,['safe'],['safe-path']
Safety,"d ""show warranty"" for details.; This GDB was configured as ""x86_64-pc-linux-gnu"".; Type ""show configuration"" for configuration details.; For bug reporting instructions, please see:; <https://www.gnu.org/software/gdb/bugs/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>. For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from python...; (No debugging symbols found in python); (gdb) run testnullptr.py; Starting program: /opt/venv/bin/python testnullptr.py; warning: Error disabling address space randomization: Function not implemented; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/usr/lib/libthread_db.so.1"".; warning: File ""/home/b/bendavid/rootdev19/install/lib/libCore.so-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; add-auto-load-safe-path /home/b/bendavid/rootdev19/install/lib/libCore.so-gdb.py; line to your configuration file ""/home/b/bendavid/.config/gdb/gdbinit"".; To completely disable this security protection add; set auto-load safe-path /; line to your configuration file ""/home/b/bendavid/.config/gdb/gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; info ""(gdb)Auto-loading safe path""; [Detaching after vfork from child process 1453]; [Detaching after vfork from child process 1455]; [Detaching after vfork from child process 1457]; [Detaching after vfork from child process 1459]; [Detaching after vfork from child process 1461]; [Detaching after vfork from child process 1465]; [Detaching after vfork from child process 1467]; [New Thread 0x7fb1af5b6640 (LWP 1469)]; sleep; ^C; Thread 1 ""python"" received signal SIGINT, Interrupt.; 0x00007fb1cb2a1201 in select () from /usr/lib/libc.so.6; (gdb) break cling::NullDeref",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9112#issuecomment-1010779015:1718,safe,safe-path,1718,https://root.cern,https://github.com/root-project/root/issues/9112#issuecomment-1010779015,1,['safe'],['safe-path']
Safety,"d ""show warranty"" for details.; This GDB was configured as ""x86_64-pc-linux-gnu"".; Type ""show configuration"" for configuration details.; For bug reporting instructions, please see:; <https://www.gnu.org/software/gdb/bugs/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>. For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from python...; (No debugging symbols found in python); (gdb) run testnullptr.py; Starting program: /opt/venv/bin/python testnullptr.py; warning: Error disabling address space randomization: Function not implemented; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/usr/lib/libthread_db.so.1"".; warning: File ""/home/b/bendavid/rootdev19/install/lib/libCore.so-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; add-auto-load-safe-path /home/b/bendavid/rootdev19/install/lib/libCore.so-gdb.py; line to your configuration file ""/home/b/bendavid/.config/gdb/gdbinit"".; To completely disable this security protection add; set auto-load safe-path /; line to your configuration file ""/home/b/bendavid/.config/gdb/gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; info ""(gdb)Auto-loading safe path""; [Detaching after vfork from child process 2333]; [Detaching after vfork from child process 2335]; [Detaching after vfork from child process 2337]; [Detaching after vfork from child process 2339]; [Detaching after vfork from child process 2341]; [Detaching after vfork from child process 2345]; [Detaching after vfork from child process 2347]; [New Thread 0x7f05f42cb640 (LWP 2349)]; sleep; ^C; Thread 1 ""python"" received signal SIGINT, Interrupt.; 0x00007f060ffb6201 in select () from /usr/lib/libc.so.6; (gdb) break cling::NullDeref",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9112#issuecomment-1010786248:1694,safe,safe-path,1694,https://root.cern,https://github.com/root-project/root/issues/9112#issuecomment-1010786248,1,['safe'],['safe-path']
Safety,"d final part of a split and clean-up of #8294. ## Changes or fixes:; - Adds `LikelihoodJob` and `LikelihoodGradientJob` under the `RooFit::TestStatistics` namespace.; - Adds the `LikelihoodGradientJob` test case, which also covers the rest of the `TestStatistics` framework, as promised in https://github.com/root-project/root/pull/8700#issue-947741252.; - Adds two `KahanSum` constructors that allow for initialization of the full internal state. This is necessary for serializing and rematerializing `KahanSum`s so they can be sent over ZeroMQ sockets.; - `RooMinimizer` templated constructors and create factory functions were removed. These are replaced with enum class flags that allow the user to choose the type of `RooAbsMinimizerFcn` (this was already in place) and the `Likelihood(Gradient)Wrapper` implementations to use, i.e. the classes introduced in this PR. Similar changes were made in `MinuitFcnGrad`, which is now also template-free.; - `RooMinimizer`'s (now) two constructors use two helper functions now to avoid code duplication.; - There were some mistakes in the build setup of `RooFitZMQ` and `RooFit::MultiProcess` that only came to light now when building these classes that depend on `RooFit::MultiProcess`. These are fixed.; - A few functions had to be added to `LikelihoodGradientWrapper` and `MinuitFcnGrad` for passing along previous gradient, second derivative and step size information from Minuit2 to RooFit and back, i.e. using the functionality introduced in #8694. ## Checklist:. - [x] tested changes locally; - [x] update the docs (if necessary); - [x] unify copyright/license headers with previous commits; - [x] includes: correct order (matching header, RooFit, ROOT, std) and ROOT includes in quotation marks; - [x] refactor member names: underscore suffix; - [x] remove commented out code and TODOs and other junk; - [x] clang-tidy up; - [ ] rebase into two commits (one for `KahanSum` and one for the rest); - [x] make Readme.md for developers with some exam",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9349:1559,avoid,avoid,1559,https://root.cern,https://github.com/root-project/root/pull/9349,1,['avoid'],['avoid']
Safety,"d it to the whitelist.; ```; Note that z3 is a library used by LLVM. It may be that because I have other versions of LLVM/Clang in the system, z3 got installed and picked up by the builtin LLVM from the ROOT build. Ideally, this sort of behavior of automatically picking whatever is installed on the system should be avoided, as it can cause problems, so I recommend looking into the configuration of the builtin LLVM more closely and either disabling z3 if not used, or adding it to the dependencies of ROOT and enabling by force. - Test tutorial-v7-ntuple-ntpl005_introspection failure is related to uring support, is that tested in nightlies? It could also be a permissions issue that I don't have configured properly, I don't know.; ```sh; Start 995: tutorial-v7-ntuple-ntpl005_introspection; 7/18 Test #995: tutorial-v7-ntuple-ntpl005_introspection ...........***Failed 1.57 sec; ...; terminate called after throwing an instance of 'std::runtime_error'; what(): Fatal Error: failed to allocate memory for the smallest possible io_uring instance. 'memlock' memory has been exhausted for this user; CMake Error at /srv/root/build/RootTestDriver.cmake:237 (message):; error code: Subprocess aborted; ```; - The dataframe tests all fail with something like this; ```sh; Processing /srv/root/src/roottest/root/dataframe/test_ctors.C+...; Info in <TUnixSystem::ACLiC>: creating shared library /srv/root/build/roottest/root/dataframe/test_ctors_C.so; /usr/lib/gcc/x86_64-pc-linux-gnu/8.4.0/../../../../x86_64-pc-linux-gnu/bin/ld: /srv/root/build/roottest/root/dataframe/par: _ZTISt16invalid_argument: invalid version 7 (max 0); /usr/lib/gcc/x86_64-pc-linux-gnu/8.4.0/../../../../x86_64-pc-linux-gnu/bin/ld: /srv/root/build/roottest/root/dataframe/par: error adding symbols: bad value; collect2: error: ld returned 1 exit status; ```; Could it be a mismatch between Clang and GCC ABIs? Or maybe an issue with my linker? (I am using binutils version 2.35.2). Please let me know if you have any questions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936:4330,abort,aborted,4330,https://root.cern,https://github.com/root-project/root/issues/7936,1,['abort'],['aborted']
Safety,"dangling-pointer=]; 783 | if (objname && strlen(objname) > 0 && strcmp(objname, ""htemp"")) {; | ~~~~~~^~~~~~~~~~~~~~~~~~; root/proof/proofplayer/src/TProofDraw.cxx:782:62: note: unnamed temporary defined here; 782 | const char *objname = fTreeDrawArgsParser.GetObjectName();; | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~; root/proof/proofplayer/src/TProofDraw.cxx:789:30: warning: dangling pointer to an unnamed temporary may be used [-Wdangling-pointer=]; 789 | PDB(kDraw,1) Info(""SlaveBegin"", ""original object '%s' not found""; | ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; 790 | "" or it is not a histogram"", objname);; | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; root/proof/proofplayer/src/TProofDraw.cxx:782:62: note: unnamed temporary defined here; 782 | const char *objname = fTreeDrawArgsParser.GetObjectName();; | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~; root/proof/proofplayer/src/TProofDraw.cxx:784:60: warning: dangling pointer to an unnamed temporary may be used [-Wdangling-pointer=]; 784 | TH1 *hist = dynamic_cast<TH1*> (fInput->FindObject(objname));; | ~~~~~~~~~~~~~~~~~~^~~~~~~~~; root/proof/proofplayer/src/TProofDraw.cxx:782:62: note: unnamed temporary defined here; 782 | const char *objname = fTreeDrawArgsParser.GetObjectName();; | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~; root/proof/proofplayer/src/TProofDraw.cxx:783:38: warning: dangling pointer to an unnamed temporary may be used [-Wdangling-pointer=]; 783 | if (objname && strlen(objname) > 0 && strcmp(objname, ""htemp"")) {; | ~~~~~~~~~~~~~~~~^~~; root/proof/proofplayer/src/TProofDraw.cxx:782:62: note: unnamed temporary defined here; 782 | const char *objname = fTreeDrawArgsParser.GetObjectName();; ```. Indeed, `GetObjectName()` returns a temporary `TString` here, and with; the implicit `const char*` conversion we get a dangling pointer to the; TString data. If we avoid the copy in `GetObjectName()` and company such that a `const&` is returned, we not only fix the dangling pointer problem but also avoid an unnecessary copy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10581:2281,avoid,avoid,2281,https://root.cern,https://github.com/root-project/root/pull/10581,2,['avoid'],['avoid']
Safety,"dant instructions #2; 0.1359 ( 1.5%) 0.0000 ( 0.0%) 0.1359 ( 1.4%) 0.1360 ( 1.4%) Branch Probability Basic Block Placement; 0.1342 ( 1.4%) 0.0000 ( 0.0%) 0.1342 ( 1.4%) 0.1343 ( 1.4%) Machine Common Subexpression Elimination; 0.1065 ( 1.1%) 0.0000 ( 0.0%) 0.1065 ( 1.1%) 0.1066 ( 1.1%) MemCpy Optimization; ```; -> mostly register allocation and `instcombine`. A similar picture for `jitted_code.cpp`:; ```; 8.6377 ( 81.7%) 0.0066 ( 0.7%) 8.6444 ( 75.4%) 8.6522 ( 75.4%) Fast Register Allocator; 0.7586 ( 7.2%) 0.7869 ( 87.4%) 1.5455 ( 13.5%) 1.5470 ( 13.5%) X86 Assembly Printer; 0.5620 ( 5.3%) 0.0794 ( 8.8%) 0.6414 ( 5.6%) 0.6424 ( 5.6%) X86 DAG->DAG Instruction Selection; 0.1600 ( 1.5%) 0.0031 ( 0.3%) 0.1632 ( 1.4%) 0.1633 ( 1.4%) Prologue/Epilogue Insertion & Frame Finalization; 0.1125 ( 1.1%) 0.0071 ( 0.8%) 0.1195 ( 1.0%) 0.1197 ( 1.0%) Two-Address instruction pass; ```; for `-O0`, while for `-O1`:; ```; 115.8049 ( 89.6%) 0.0191 ( 2.1%) 115.8240 ( 89.0%) 115.9569 ( 89.0%) Combine redundant instructions; 4.2064 ( 3.3%) 0.1518 ( 16.6%) 4.3582 ( 3.3%) 4.3642 ( 3.3%) X86 DAG->DAG Instruction Selection; 0.5607 ( 0.4%) 0.5501 ( 60.0%) 1.1108 ( 0.9%) 1.1122 ( 0.9%) X86 Assembly Printer; 0.8415 ( 0.7%) 0.0053 ( 0.6%) 0.8468 ( 0.7%) 0.8477 ( 0.7%) Machine Instruction Scheduler; 0.7902 ( 0.6%) 0.0112 ( 1.2%) 0.8013 ( 0.6%) 0.8022 ( 0.6%) Greedy Register Allocator; 0.6279 ( 0.5%) 0.0060 ( 0.7%) 0.6339 ( 0.5%) 0.6345 ( 0.5%) Live Variable Analysis; 0.3958 ( 0.3%) 0.0048 ( 0.5%) 0.4006 ( 0.3%) 0.4010 ( 0.3%) Simple Register Coalescing; 0.2857 ( 0.2%) 0.0020 ( 0.2%) 0.2877 ( 0.2%) 0.2881 ( 0.2%) Combine redundant instructions #3; 0.2847 ( 0.2%) 0.0021 ( 0.2%) 0.2867 ( 0.2%) 0.2871 ( 0.2%) Combine redundant instructions #2; 0.2842 ( 0.2%) 0.0024 ( 0.3%) 0.2866 ( 0.2%) 0.2870 ( 0.2%) Combine redundant instructions #6; 0.2842 ( 0.2%) 0.0015 ( 0.2%) 0.2858 ( 0.2%) 0.2861 ( 0.2%) Combine redundant instructions #5; 0.2837 ( 0.2%) 0.0017 ( 0.2%) 0.2854 ( 0.2%) 0.2857 ( 0.2%) Combine redun",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9312#issuecomment-976463242:3154,redund,redundant,3154,https://root.cern,https://github.com/root-project/root/issues/9312#issuecomment-976463242,1,['redund'],['redundant']
Safety,"dataset with a lambda .................................. OK ; [Detaching after fork from child process 341711]; [Detaching after fork from child process 341712]; [Detaching after fork from child process 341713]; +++ Processing the H1 dataset with h1analysisTreeReader ...................... OK ; [Detaching after fork from child process 341899]; [Detaching after fork from child process 341900]; [Detaching after fork from child process 341901]; +++ Processing the H1 dataset to create list ................................. OK ; [Detaching after fork from child process 341976]; [Detaching after fork from child process 341977]; [Detaching after fork from child process 341978]; +++ Processing the H1 dataset with a lambda from entry list .................. OK . Program received signal SIGABRT, Aborted.; __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:49; 49	 return ret;; (gdb) bt; #0 __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:49; #1 0x00007ffff633054a in __GI_abort () at abort.c:79; #2 0x00007ffff633042c in __assert_fail_base (fmt=0x7ffff64a3018 ""%s%s%s:%u: %s%sAssertion `%s' failed.\n%n"", ; assertion=0x7ffff4783308 ""!T.getTopmostParent()->getNext() && \""Can not revert previous transactions\"""", ; file=0x7ffff4782c68 ""/var/tmp/portage/sci-physics/root-9999/work/root-9999/interpreter/cling/lib/Interpreter/Interpreter.cpp"", line=1513, ; function=<optimized out>) at assert.c:92; #3 0x00007ffff633eda3 in __GI___assert_fail (; assertion=assertion@entry=0x7ffff4783308 ""!T.getTopmostParent()->getNext() && \""Can not revert previous transactions\"""", ; file=file@entry=0x7ffff4782c68 ""/var/tmp/portage/sci-physics/root-9999/work/root-9999/interpreter/cling/lib/Interpreter/Interpreter.cpp"", ; line=line@entry=1513, function=function@entry=0x7ffff47832d0 ""void cling::Interpreter::unload(cling::Transaction&)"") at assert.c:101; #4 0x00007ffff194bdca in cling::Interpreter::unload (this=this@entry=0x555555594760, T=...); at /usr/src/debug/sci-physics/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936#issuecomment-823920792:3427,abort,abort,3427,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-823920792,1,['abort'],['abort']
Safety,"de810efc1452a4eab08d9156d8727%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564382428538437%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=NSH3DFaDuhyR%2FbU8u99%2BhMt%2F%2Bl%2BPFoyMoNKO2CIFrZM%3D&reserved=0> - if not then it's different :-) But I don't know how to tell whether it's a redirect. Do you?; >>>>> ; >>>>> If not let's get #8155 <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8155&data=04%7C01%7Cdqing%40triumf.ca%7Cb7cde810efc1452a4eab08d9156d8727%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564382428538437%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=NSH3DFaDuhyR%2FbU8u99%2BhMt%2F%2Bl%2BPFoyMoNKO2CIFrZM%3D&reserved=0> fixed and then we re-visit this one: either it's fixed, too, or we need to call in help from the Davix (?) folks.; >>>>> ; >>>>> —; >>>>> You are receiving this because you authored the thread.; >>>>> Reply to this email directly, view it on GitHub <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8092%23issuecomment-839953723&data=04%7C01%7Cdqing%40triumf.ca%7Cb7cde810efc1452a4eab08d9156d8727%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564382428548436%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=f8%2FLHZugBV9iTxE9qpnhPNwfwgv2PIrB5lm3xqBvZDk%3D&reserved=0>, or unsubscribe <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAK3WHVSCH3RYO2YJNPNMVNTTNKZ6VANCNFSM44DEPE6Q&data=04%7C01%7Cdqing%40triumf.ca%7Cb7cde810efc1452a4eab08d9156d8727%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564382428558426%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=Z3MlzHXKpd4AkC3X6nUMCVVnpLED4hS6AhA%2B2UOPBHE%3D&reserved=0>.; >>>>> ; >>>> ; >>",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-839991525:8830,safe,safelinks,8830,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-839991525,2,['safe'],['safelinks']
Safety,"derArray<o2::trd::Tracklet64>* tracklets = new TTreeReaderArray<o2::trd::Tracklet64>(*dataReader, ""Tracklet"");. dataTree->AddFriend(""o2sim"", ""trddigits.root"");; TTreeReaderArray<o2::trd::Digit>* digits = new TTreeReaderArray<o2::trd::Digit>(*dataReader, ""TRDDigit"");. int tfno = 0;; while(dataReader->Next()) {; cout << ""Next TF: "" << tfno << endl;. for (auto tracklet : *tracklets) {; cout << tracklet << endl;; }; cout << dec << ""Start to sort "" << std::distance(tracklets->begin(), tracklets->end()) << "" tracklets..."" << endl;; std::stable_sort(tracklets->begin(), tracklets->end(), comp_tracklet);; cout << ""Start to sort "" << std::distance(digits->begin(), digits->end()) << "" digits..."" << endl;; std::stable_sort(digits->begin(), digits->end(), comp_digit);; }. }; ```. The code creates the following stack trace:; ```; Fatal: fArray && ""invalid iterator!"" violated at line 118 of `/scratch/tdietel/alisw/slc7_x86-64/ROOT/v6-28-04-14/include/TTreeReaderArray.h'; aborting; #0 0x00007fa77058860c in waitpid () from /lib64/libc.so.6; #1 0x00007fa770505f62 in do_system () from /lib64/libc.so.6; #2 0x00007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104; #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395; #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177; #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13314:4108,abort,aborting,4108,https://root.cern,https://github.com/root-project/root/issues/13314,1,['abort'],['aborting']
Safety,dexIter.hxx strlcpy.h snprintf.h strtok.h root_std_complex.h ROOT/TSeq.hxx TArrayC.h TArrayD.h TArrayF.h TArray.h TArrayI.h TArrayL64.h TArrayL.h TArrayS.h TBits.h TBtree.h TClassTable.h TClonesArray.h TCollection.h TCollectionProxyInfo.h TExMap.h THashList.h THashTable.h TIterator.h TList.h TMap.h TObjArray.h TObjectTable.h TOrdCollection.h TRefArray.h TRefTable.h TSeqCollection.h TSortedList.h TVirtualCollectionProxy.h ESTLType.h RStringView.h TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /bld6/root/src/core/base/inc/LinkDef.h; Subprocess aborted; ```. I understand thought that a special version of clang is needed (at least that's what a warning in one of the CMakelists.txt states). Are there any instructions on how to build it or what patches need to be applied?. I've been using v6-30-03 for this. ### Reproducer. . ### ROOT version. v6-30-03. ### Installation method. source. ### Operating system. centos7. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14250:8461,abort,aborted,8461,https://root.cern,https://github.com/root-project/root/issues/14250,1,['abort'],['aborted']
Safety,"double, Kind::First&gt;' ; - /build/jenkins/workspace/root-pullrequests-build/root/roofit/roofit/src/RooChebychev.cxx:235:10: error: cannot increment value of type 'ChebychevIterator&lt;double, Kind::First&gt;' ; - /build/jenkins/workspace/root-pullrequests-build/root/roofit/roofit/src/RooChebychev.cxx:235:17: error: cannot increment value of type 'ChebychevIterator&lt;double, Kind::First&gt;' ; - /build/jenkins/workspace/root-pullrequests-build/root/roofit/roofit/src/RooChebychev.cxx:241:13: error: cannot increment value of type 'ChebychevIterator&lt;double, Kind::First&gt;' ; - /build/jenkins/workspace/root-pullrequests-build/root/roofit/roofit/src/RooChebychev.cxx:241:20: error: cannot increment value of type 'ChebychevIterator&lt;double, Kind::First&gt;' . ### Warnings:; - /build/jenkins/workspace/root-pullrequests-build/root/roofit/roofit/src/RooChebychev.cxx:94:40: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - /build/jenkins/workspace/root-pullrequests-build/root/roofit/roofit/src/RooChebychev.cxx:102:39: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - /build/jenkins/workspace/root-pullrequests-build/root/roofit/roofit/src/RooChebychev.cxx:96:9: warning: variable declaration in a constexpr function is a C++14 extension [-Wc++14-extensions] ; - /build/jenkins/workspace/root-pullrequests-build/root/roofit/roofit/src/RooChebychev.cxx:97:7: warning: use of this statement in a constexpr function is a C++14 extension [-Wc++14-extensions] ; - /build/jenkins/workspace/root-pullrequests-build/root/roofit/roofit/src/RooChebychev.cxx:104:25: warning: variable declaration in a constexpr function is a C++14 extension [-Wc++14-extensions] ; - /build/jenkins/workspace/root-pullrequests-build/root/roofit/roofit/src/RooChebychev.cxx:105:7: warning: use of th",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3775#issuecomment-489975352:1979,avoid,avoid,1979,https://root.cern,https://github.com/root-project/root/pull/3775#issuecomment-489975352,1,['avoid'],['avoid']
Safety,"e ""B.h"". #undef _BACKWARD_BACKWARD_WARNING_H; ```. ### What is the expected behaviour?. The correct output is:; ```. Loading A.sl. Processing macro.cc...; init A with arg=0; test A; init A with arg=0; test A; ```. ### How to reproduce?. ```; unzip linker_example.zip; make; root.exe -b -q -q macro.cc; ```. ### ROOT version. Any v6 version. ### How did you install ROOT?. any. ### Which operating system are you using?. linux. ### Additional context. The problem might have been introduced by commit 3081bf5e006. In particular applying this diff 'fixes' the problem:; ```; diff --git a/core/dictgen/src/rootcling_impl.cxx b/core/dictgen/src/rootcling_impl.cxx; index f56ce23b7a..7cd24d2c63 100644; --- a/core/dictgen/src/rootcling_impl.cxx; +++ b/core/dictgen/src/rootcling_impl.cxx; @@ -4971,7 +4971,7 @@ int RootClingMain(int argc,; if (!gOptCxxModule) {; headersClassesMapString = GenerateStringFromHeadersForClasses(headersDeclsMap,; detectedUmbrella,; - true);; + false);; if (!gDriverConfig->fBuildingROOTStage1) {; if (!gOptWriteEmptyRootPCM); fwdDeclsString = GenerateFwdDeclString(scan, interp);; ```; This introduces the following diff in the generated dictionary:; ```; rootsrv1:2023-dict pcanal$ diff -C2 dict.cxx dict.good.2.cxx ; *** dict.cxx 2023-06-15 15:55:39.818476668 -0500; --- dict.good.2.cxx 2023-06-15 14:54:48.505264642 -0500; ***************; *** 187,192 ****; )DICTPAYLOAD"";; static const char* classesHeaders[] = {; ! ""A"", payloadCode, ""@"",; ! ""B"", payloadCode, ""@"",; nullptr; };; --- 187,192 ----; )DICTPAYLOAD"";; static const char* classesHeaders[] = {; ! ""A"", ""A.h"", ""@"",; ! ""B"", ""B.h"", ""@"",; nullptr; };; ```. and indeed in practice the order of operation are as follow: (macro.cc contains a `#include ""A.h""`):; * Process the `A.h` and then start declaring class `A`:; * While declaring `A`, process the constructor (of anything involving `A` itself in `A` declaration and call ` TCling::AutoParse`; * ` TCling::AutoParse` recognizes `A` for the dictionary's `classesHea",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13034:2200,detect,detectedUmbrella,2200,https://root.cern,https://github.com/root-project/root/issues/13034,1,['detect'],['detectedUmbrella']
Safety,"e '\s'; m = re.match('\s*(const\s+)?(RVec\w+|RVec<[\w\s]+>)', t); ```. Then, upon ROOT import, the system crashes:; ```; ~>python -c ""import ROOT""; [/foo/build/lib/libcppyy_backend3_12.so] (anonymous namespace)::do_trace(int) /foo/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:184; [/foo/build/lib/libcppyy_backend3_12.so] (anonymous namespace)::TExceptionHandlerImp::HandleException(int) /foo/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:202; [/foo/build/lib/libCore.so] TUnixSystem::DispatchSignals(ESignals) /foo/root/core/unix/src/TUnixSystem.cxx:3626; [/foo/build/lib/libCore.so] SigHandler(ESignals) /foo/root/core/unix/src/TUnixSystem.cxx:402; [/foo/build/lib/libCore.so] sighandler(int) /foo/root/core/unix/src/TUnixSystem.cxx:3603; [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info); [/usr/lib/system/libsystem_pthread.dylib] pthread_kill (no debug info); [/usr/lib/system/libsystem_c.dylib] abort (no debug info); [/usr/lib/system/libsystem_c.dylib] err (no debug info); [/foo/build/lib/libcppyy3_12.so] PyMethod_GET_SELF(_object*) /Library/Frameworks/Python.framework/Versions/3.12/include/python3.12/cpython/classobject.h:40; [/foo/build/lib/libcppyy3_12.so] CPyCppyy::im_descr_get(_object*, _object*, _object*) /foo/root/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx:215; [/Library/Frameworks/Python.framework/Versions/3.12/Python] _Py_type_getattro_impl (no debug info); [/foo/build/lib/libcppyy3_12.so] CPyCppyy::meta_getattro(_object*, _object*) /foo/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx:308; [/Library/Frameworks/Python.framework/Versions/3.12/Python] _PyObject_LookupAttr (no debug info); [/Library/Frameworks/Python.framework/Versions/3.12/Python] builtin_getattr (no debug info); [/Library/Frameworks/Python.framework/Versions/3.12/Python] _PyEval_EvalFrameDefault (no debug info); [/foo/build/lib/libcppyy3_12.so] CPyCppyy::Pythonize(_object*, std::__1::basic_string<char, std::__",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13864:1713,abort,abort,1713,https://root.cern,https://github.com/root-project/root/issues/13864,1,['abort'],['abort']
Safety,"e (219 ms); [ RUN ] LikelihoodJobTest.UnbinnedGaussianND; [ OK ] LikelihoodJobTest.UnbinnedGaussianND (331 ms); [ RUN ] LikelihoodJobTest.SimBinned; [ OK ] LikelihoodJobTest.SimBinned (323 ms); [ RUN ] LikelihoodJobTest.BinnedConstrained; [ OK ] LikelihoodJobTest.BinnedConstrained (311 ms); [ RUN ] LikelihoodJobTest.SimUnbinned; [ OK ] LikelihoodJobTest.SimUnbinned (281 ms); [ RUN ] LikelihoodJobTest.SimUnbinnedNonExtended; [ OK ] LikelihoodJobTest.SimUnbinnedNonExtended (264 ms); [ RUN ] LikelihoodJobTest.BatchedUnbinnedGaussianND; [ OK ] LikelihoodJobTest.BatchedUnbinnedGaussianND (362 ms); [----------] 9 tests from LikelihoodJobTest (2698 ms total); [----------] 2 tests from LikelihoodJobBinnedDatasetTest; [ RUN ] LikelihoodJobBinnedDatasetTest.UnbinnedPdf; [ OK ] LikelihoodJobBinnedDatasetTest.UnbinnedPdf (152 ms); [ RUN ] LikelihoodJobBinnedDatasetTest.BinnedNLL; [ OK ] LikelihoodJobBinnedDatasetTest.BinnedNLL (325 ms); [----------] 2 tests from LikelihoodJobBinnedDatasetTest (480 ms total); [----------] 2 tests from LikelihoodJobSimBinnedConstrainedTest; [ RUN ] LikelihoodJobSimBinnedConstrainedTest.BasicParameters; [ OK ] LikelihoodJobSimBinnedConstrainedTest.BasicParameters (452 ms); [ RUN ] LikelihoodJobSimBinnedConstrainedTest.ConstrainedAndOffset; /usr/include/c++/14/bits/stl_vector.h:1130: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = ROOT::Math::KahanSum<double>; _Alloc = std::allocator<ROOT::Math::KahanSum<double> >; reference = ROOT::Math::KahanSum<double>&; size_type = long unsigned int]: Assertion '__n < this->size()' failed.; ```; The test hangs at this point, and is eventually killed by the timeout limit. ### Reproducer. Compile ROOT with `-Wp,-D_GLIBCXX_ASSERTIONS` in CXXFLAGS. This is part of the default flags for Fedora package builds. ### ROOT version. 6.32.00. ### Installation method. Package build on Fedora from source. ### Operating system. Fedora Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15730:2350,timeout,timeout,2350,https://root.cern,https://github.com/root-project/root/issues/15730,1,['timeout'],['timeout']
Safety,"e = '/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0/test-listarray.root'; tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). tests/test_1781-rdataframe-snapshot.py:53: SystemError; ```; while running the same code line by line in `Python` or in `lldb`:; ```python; >>> data_frame.Snapshot(""ListArray"", ""listarray.root"", (""x"",)); Error in <TStreamerInfo::Build>: awkward::ArrayView, discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved; <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>; ```; ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line.; Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user?. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; Unfortunately, it is not reproducible if the code is run line by line in `Python`:; ```python; % python ; Python 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:43:44) [Clang 13.0.1 ] on darwin; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import awkward as ak; >>> import ROOT; >>> ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]); >>> data_frame = ak.to_rdataframe({""x"": ak_array_in}); >>> data_frame.Snapshot(""ListArray"", ""filename.root"", (""x"",)); TStreamerInfo::Build:0: RuntimeWarning: awkward::List",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11602:4214,avoid,avoided,4214,https://root.cern,https://github.com/root-project/root/issues/11602,1,['avoid'],['avoided']
Safety,"e configuration file provided by ""nlohmann_json""; (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake; nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set; ""nlohmann_json_DIR"" to a directory containing one of the above files. If; ""nlohmann_json"" provides a separate development package or SDK, be sure it; has been installed.; Call Stack (most recent call first):; /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency); gui/CMakeLists.txt:28 (find_package); ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```; cmake ../testroot/; -- The C compiler identification is GNU 11.4.0; -- The CXX compiler identification is GNU 11.4.0; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /usr/bin/cc - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/c++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") ; CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):; Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY); Call Stack (most recent call first):; /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE); /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args); /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package); /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency); CMakeLists.txt:5 (find_package); ```. And not sure how to solve it. ### Reproducer. ```; cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFI",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14163:1339,Detect,Detecting,1339,https://root.cern,https://github.com/root-project/root/issues/14163,8,['Detect'],['Detecting']
Safety,"e file '/build/workspace/root-pullrequests-build/build/tree/tree/test/libc.pcm' not found: module file not found . ### Warnings:; - [2020-09-27T10:32:30.248Z] /build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Utils/PlatformPosix.cpp:73:44: warning: type qualifiers ignored on cast result type [-Wignored-qualifiers] ; - [2020-09-27T10:35:57.183Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Pass.h:105:16: warning: ‘virtual bool llvm::Pass::doInitialization(llvm::Module&)’ was hidden [-Woverloaded-virtual] ; - [2020-09-27T10:35:57.183Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Transforms/IPO/Inliner.h:39:8: warning: by ‘virtual bool llvm::LegacyInlinerBase::doInitialization(llvm::CallGraph&)’ [-Woverloaded-virtual] ; - [2020-09-27T10:35:57.629Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:212:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:35:57.629Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:427:27: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:35:57.629Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:450:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:36:09.553Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:431:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:36:09.553Z] /build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/IncrementalJIT.h:108:74: warning: ‘llvm::orc::LegacyRTDyldObjectLinkingLayer::LegacyRTDyldObjectLinkingLayer(llvm::orc::ExecutionSession&, llvm::orc::LegacyRTDyldObjectLinkingLayer::ResourcesGetter, llvm::orc::Legacy",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-699617654:2126,redund,redundant,2126,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-699617654,1,['redund'],['redundant']
Safety,"e file '/build/workspace/root-pullrequests-build/build/tree/tree/test/libc.pcm' not found: module file not found . ### Warnings:; - [2020-09-27T10:43:01.497Z] /build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Utils/PlatformPosix.cpp:73:44: warning: type qualifiers ignored on cast result type [-Wignored-qualifiers] ; - [2020-09-27T10:48:24.113Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Pass.h:105:16: warning: ‘virtual bool llvm::Pass::doInitialization(llvm::Module&)’ was hidden [-Woverloaded-virtual] ; - [2020-09-27T10:48:24.113Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Transforms/IPO/Inliner.h:39:8: warning: by ‘virtual bool llvm::LegacyInlinerBase::doInitialization(llvm::CallGraph&)’ [-Woverloaded-virtual] ; - [2020-09-27T10:48:41.699Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:212:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:48:41.699Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:427:27: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:48:41.699Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:450:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:48:54.024Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:431:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:48:54.024Z] /build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/IncrementalJIT.h:108:74: warning: ‘llvm::orc::LegacyRTDyldObjectLinkingLayer::LegacyRTDyldObjectLinkingLayer(llvm::orc::ExecutionSession&, llvm::orc::LegacyRTDyldObjectLinkingLayer::ResourcesGetter, llvm::orc::Legacy",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-699618970:2126,redund,redundant,2126,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-699618970,1,['redund'],['redundant']
Safety,"e in ALICE, in which the parallel world ""scene"" can be very large (~100K volumes). In this case, TGeoVoxelFinder takes very long; to construct and consumes a very large amount of memory (GBs). In addition, the evaluation of the Safety function dominates the Geant simulation time. The improvements in this commit are mainly achieved through:. * The use of a boundary volume hierarchy (BVH) as the base acceleration entity, replacing TGeoVoxelFinder.; BVH are the standard in industry/computer-graphics, for what concerns ray-object intersection tasks. The BVH is constructed from axis-aligned bounding boxes and employed in the FindBoundary/FindNode implementations. * The use of a 3D voxel grid (TGeoVoxelGrid) structure, able to store properties ""local"" or in the vicinity of a cartesian coordinate P. This structure allows to reduce the (typical) algorithmic complexity for ""Safety"" queries to ~O(1) (with a constant factor determined by the voxel size). Filling of the 3D voxel grid cache for Safety is done on-the-fly (using the BVH once). * (Optional) Additional caching of ""last-call"" safety values for really quick return when the value is still valid at the next call. Ideas for these improvements come from prior work in related libraries such as VecGeom. -----. Implementation details:. * The implementation is, for now (until fully tested), provided in a backward compatible manner:. - By default, nothing changes; - Users have to activate the BVH mode by setting an environment variable TGEO_PW_USEBVH; - Users may hence compare the 2 modes. * Functions for Safety, FindNode, FindBoundary dispatch to some internal implementation. This causes an extra lookup/jump, which can be removed once BVH is fully validated. * For the BVH, a well known open source implementation is included in header-only form. The headers are copied from https://github.com/madmann91/bvh commit 66e445b92f68801a6dd8ef943fe3038976ecb4ff. * A new class, TGeoVoxelGrid is provided for the cartesian VoxelGrid contai",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16442:1369,Safe,Safety,1369,https://root.cern,https://github.com/root-project/root/pull/16442,1,['Safe'],['Safety']
Safety,e llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):; ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling(_ZN4llvm3sys15PrintStackTraceERNS_11raw_ostreamEi+0x3c)[0x55e9492a6288]; ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling(+0x17fb34b)[0x55e9492a634b]; ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling(_ZN4llvm3sys17RunSignalHandlersEv+0x88)[0x55e9492a3eac]; ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling(+0x17fabfe)[0x55e9492a5bfe]; ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling(_ZN9textinput18TerminalConfigUnix12HandleSignalEi+0x76)[0x55e9492f41a8]; ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling(+0x1848ed8)[0x55e9492f3ed8]; /usr/lib/libc.so.6(+0x3e8e0)[0x7f264623e8e0]; /usr/lib/libc.so.6(+0x8e36c)[0x7f264628e36c]; /usr/lib/libc.so.6(raise+0x18)[0x7f264623e838]; /usr/lib/libc.so.6(abort+0xcf)[0x7f2646228535]; /usr/lib/libc.so.6(+0x2845c)[0x7f264622845c]; /usr/lib/libc.so.6(+0x37366)[0x7f2646237366]; ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling(_ZN5cling11Transaction11forceAppendENS0_13DelayCallInfoE+0x14f)[0x55e9491826bb]; ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling(_ZN5cling11Transaction6appendENS0_13DelayCallInfoE+0xaa)[0x55e949182568]; ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling(_ZN5cling13DeclCollector18HandleTopLevelDeclEN5clang12DeclGroupRefE+0xc4)[0x55e948f99f2e]; ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling(_ZN5clang17MultiplexConsumer18HandleTopLevelDeclENS_12DeclGroupRefE+0x89)[0x55e94b42f5bf]; ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling(_ZN5clang4Sema23InstantiateClassMembersENS_14SourceLocationEPNS_13CXXRecordDeclERKNS_30MultiLevelTemplateArgumentListENS_26TemplateSpecializationKindE+0x2dc)[0x55e94c7a0f84]; ./cling-build/cling-Arch Lin,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1192175843:5479,abort,abort,5479,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1192175843,1,['abort'],['abort']
Safety,"e redundant instructions; 0.2517 ( 2.7%) 0.2238 ( 75.0%) 0.4755 ( 4.9%) 0.4760 ( 4.9%) X86 Assembly Printer; 0.3088 ( 3.3%) 0.0000 ( 0.0%) 0.3088 ( 3.2%) 0.3091 ( 3.2%) Control Flow Optimizer; 0.2958 ( 3.2%) 0.0010 ( 0.3%) 0.2968 ( 3.1%) 0.2972 ( 3.1%) Machine Instruction Scheduler; 0.2617 ( 2.8%) 0.0000 ( 0.0%) 0.2617 ( 2.7%) 0.2620 ( 2.7%) Merge disjoint stack slots; 0.1949 ( 2.1%) 0.0070 ( 2.3%) 0.2019 ( 2.1%) 0.2021 ( 2.1%) Simple Register Coalescing; 0.1759 ( 1.9%) 0.0000 ( 0.0%) 0.1759 ( 1.8%) 0.1761 ( 1.8%) Live Variable Analysis; 0.1414 ( 1.5%) 0.0000 ( 0.0%) 0.1414 ( 1.5%) 0.1416 ( 1.5%) Combine redundant instructions #6; 0.1413 ( 1.5%) 0.0000 ( 0.0%) 0.1413 ( 1.5%) 0.1415 ( 1.5%) Combine redundant instructions #7; 0.1411 ( 1.5%) 0.0000 ( 0.0%) 0.1411 ( 1.5%) 0.1413 ( 1.5%) Combine redundant instructions #4; 0.1410 ( 1.5%) 0.0000 ( 0.0%) 0.1410 ( 1.5%) 0.1412 ( 1.5%) Combine redundant instructions #3; 0.1408 ( 1.5%) 0.0000 ( 0.0%) 0.1408 ( 1.5%) 0.1410 ( 1.5%) Combine redundant instructions #5; 0.1406 ( 1.5%) 0.0000 ( 0.0%) 0.1406 ( 1.5%) 0.1407 ( 1.5%) Combine redundant instructions #2; 0.1359 ( 1.5%) 0.0000 ( 0.0%) 0.1359 ( 1.4%) 0.1360 ( 1.4%) Branch Probability Basic Block Placement; 0.1342 ( 1.4%) 0.0000 ( 0.0%) 0.1342 ( 1.4%) 0.1343 ( 1.4%) Machine Common Subexpression Elimination; 0.1065 ( 1.1%) 0.0000 ( 0.0%) 0.1065 ( 1.1%) 0.1066 ( 1.1%) MemCpy Optimization; ```; -> mostly register allocation and `instcombine`. A similar picture for `jitted_code.cpp`:; ```; 8.6377 ( 81.7%) 0.0066 ( 0.7%) 8.6444 ( 75.4%) 8.6522 ( 75.4%) Fast Register Allocator; 0.7586 ( 7.2%) 0.7869 ( 87.4%) 1.5455 ( 13.5%) 1.5470 ( 13.5%) X86 Assembly Printer; 0.5620 ( 5.3%) 0.0794 ( 8.8%) 0.6414 ( 5.6%) 0.6424 ( 5.6%) X86 DAG->DAG Instruction Selection; 0.1600 ( 1.5%) 0.0031 ( 0.3%) 0.1632 ( 1.4%) 0.1633 ( 1.4%) Prologue/Epilogue Insertion & Frame Finalization; 0.1125 ( 1.1%) 0.0071 ( 0.8%) 0.1195 ( 1.0%) 0.1197 ( 1.0%) Two-Address instruction pass; ```; for `-O0`, while for `-O1`:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9312#issuecomment-976463242:2061,redund,redundant,2061,https://root.cern,https://github.com/root-project/root/issues/9312#issuecomment-976463242,1,['redund'],['redundant']
Safety,e vs. Mix_1_Fe_G4 Units: G4 Deviation density: 0 % RadLen: 0.028 % IntLen: 1.1 % ; TEST PASSED Fe vs. Mix_2_Fe_G4 Units: G4 Deviation density: 0 % RadLen: 0.019 % IntLen: 1.1 % ; TEST PASSED Fe vs. Mix_3_Fe_G4 Units: G4 Deviation density: 0 % RadLen: 0.019 % IntLen: 1.1 % ; TEST PASSED Mat_Fe_TGeo vs. Mat_Fe_G4 Units: G4 Deviation density: 0 % RadLen: 2.2e-14 % IntLen: 0 % ; TEST PASSED Mix_1_Fe_TGeo vs. Mix_1_Fe_G4 Units: G4 Deviation density: 0 % RadLen: 0 % IntLen: 0 % ; TEST PASSED Mix_2_Fe_TGeo vs. Mix_2_Fe_G4 Units: G4 Deviation density: 0 % RadLen: 2.2e-14 % IntLen: 0 % ; TEST PASSED Mix_3_Fe_TGeo vs. Mix_3_Fe_G4 Units: G4 Deviation density: 0 % RadLen: 2.2e-14 % IntLen: 0 % ; TEST PASSED U vs. Mat_U_TGeo Units: TGeo Deviation density: 0 % RadLen: 0.11 % IntLen: 3.8 % ; TEST PASSED U vs. Mix_1_U_TGeo Units: TGeo Deviation density: 0 % RadLen: 0.0093 % IntLen: 3.8 % ; TEST PASSED U vs. Mix_2_U_TGeo Units: TGeo Deviation density: 0 % RadLen: 0.11 % IntLen: 3.8 % ; TEST PASSED U vs. Mix_3_U_TGeo Units: TGeo Deviation density: 0 % RadLen: 0.11 % IntLen: 3.8 % ; TEST PASSED U vs. Mat_U_G4 Units: G4 Deviation density: 0 % RadLen: 0.11 % IntLen: 3.8 % ; TEST PASSED U vs. Mix_1_U_G4 Units: G4 Deviation density: 0 % RadLen: 0.0093 % IntLen: 3.8 % ; TEST PASSED U vs. Mix_2_U_G4 Units: G4 Deviation density: 0 % RadLen: 0.11 % IntLen: 3.8 % ; TEST PASSED U vs. Mix_3_U_G4 Units: G4 Deviation density: 0 % RadLen: 0.11 % IntLen: 3.8 % ; TEST PASSED Mat_U_TGeo vs. Mat_U_G4 Units: G4 Deviation density: 0 % RadLen: 0 % IntLen: 0 % ; TEST PASSED Mix_1_U_TGeo vs. Mix_1_U_G4 Units: G4 Deviation density: 0 % RadLen: 0 % IntLen: 0 % ; TEST PASSED Mix_2_U_TGeo vs. Mix_2_U_G4 Units: G4 Deviation density: 0 % RadLen: 0 % IntLen: 0 % ; TEST PASSED Mix_3_U_TGeo vs. Mix_3_U_G4 Units: G4 Deviation density: 0 % RadLen: 0 % IntLen: 0 % . TEST PASSED Hurray!!!! 0 failures detected.; ```; [test_material_units.C.txt](https://github.com/root-project/root/files/9212397/test_material_units.C.txt),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11060#issuecomment-1198355345:5259,detect,detected,5259,https://root.cern,https://github.com/root-project/root/pull/11060#issuecomment-1198355345,1,['detect'],['detected']
Safety,"e/ROOT/RVec.hxx:193:19: error: constexpr function's return type 'void' is not a literal type ; - [2021-04-16T12:15:32.321Z] /build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:487:42: error: no type named 'iterator' in 'ROOT::Internal::VecOps::SmallVectorTemplateBase&lt;int, true&gt;' ; - [2021-04-16T12:15:32.321Z] /build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:488:48: error: no type named 'const_iterator' in 'ROOT::Internal::VecOps::SmallVectorTemplateBase&lt;int, true&gt;' ; - [2021-04-16T12:15:32.321Z] /build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:489:43: error: no type named 'reference' in 'ROOT::Internal::VecOps::SmallVectorTemplateBase&lt;int, true&gt;' ; - [2021-04-16T12:15:32.321Z] /build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:490:43: error: no type named 'size_type' in 'ROOT::Internal::VecOps::SmallVectorTemplateBase&lt;int, true&gt;' ; - [2021-04-16T12:15:32.321Z] /build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1281:27: error: no type named 'pointer' in 'ROOT::VecOps::RVec&lt;int&gt;' ; - [2021-04-16T12:15:32.321Z] /build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1523:1: error: no member named 'begin' in 'ROOT::VecOps::RVec&lt;int&gt;' ; - [2021-04-16T12:15:32.321Z] /build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1523:1: error: no member named 'begin' in 'ROOT::VecOps::RVec&lt;int&gt;' ; - [2021-04-16T12:15:32.321Z] /build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1523:1: error: no member named 'begin' in 'ROOT::VecOps::RVec&lt;int&gt;' . And 11 more. ### Warnings:; - [2021-04-16T12:15:32.321Z] /build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:193:19: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-821132938:2374,avoid,avoid,2374,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-821132938,1,['avoid'],['avoid']
Safety,e/root-pullrequests-build/build/ginclude/tbb/tbb_machine.h:612:9: warning: 'OSMemoryBarrier' is deprecated: first deprecated in macOS 10.12 - Use std::atomic_thread_fence() from &lt;atomic&gt; instead [-Wdeprecated-declarations] ; - [2023-01-18T07:43:46.960Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/ginclude/tbb/tbb_machine.h:635:9: warning: 'OSMemoryBarrier' is deprecated: first deprecated in macOS 10.12 - Use std::atomic_thread_fence() from &lt;atomic&gt; instead [-Wdeprecated-declarations] . And 41 more. ### Failing tests:; - [projectroot.roottest.cling.other.roottest_cling_other_runsprintfselect](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164577/testReport/projectroot.roottest.cling/other/roottest_cling_other_runsprintfselect/); - [projectroot.roottest.cling.printf.roottest_cling_printf_star](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164577/testReport/projectroot.roottest.cling/printf/roottest_cling_printf_star/); - [projectroot.roottest.root.io.recover.roottest_root_io_recover_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164577/testReport/projectroot.roottest.root.io/recover/roottest_root_io_recover_make/); - [projectroot.roottest.root.tree.cache.roottest_root_tree_cache_perfstattest](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164577/testReport/projectroot.roottest.root.tree/cache/roottest_root_tree_cache_perfstattest/); - [projectroot.roottest.root.treeformula.ntuple.roottest_root_treeformula_ntuple_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164577/testReport/projectroot.roottest.root.treeformula/ntuple/roottest_root_treeformula_ntuple_make/); - [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_vary](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164577/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_dataframe_vary/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11946#issuecomment-1386638532:3898,recover,recover,3898,https://root.cern,https://github.com/root-project/root/pull/11946#issuecomment-1386638532,2,['recover'],['recover']
Safety,e/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:30:31: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:41:22: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:59:33: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:60:34: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:61:33: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:62:32: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:30:31: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8240#issuecomment-867532806:1539,avoid,avoid,1539,https://root.cern,https://github.com/root-project/root/pull/8240#issuecomment-867532806,1,['avoid'],['avoid']
Safety,e/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:41:22: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:59:33: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:60:34: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:61:33: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:62:32: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:30:31: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:41:22: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8240#issuecomment-867532806:1820,avoid,avoid,1820,https://root.cern,https://github.com/root-project/root/pull/8240#issuecomment-867532806,1,['avoid'],['avoid']
Safety,e/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:59:33: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:60:34: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:61:33: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:62:32: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:30:31: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:41:22: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:59:33: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8240#issuecomment-867532806:2101,avoid,avoid,2101,https://root.cern,https://github.com/root-project/root/pull/8240#issuecomment-867532806,1,['avoid'],['avoid']
Safety,"e; >>>>  the -k (or --insecure) option.; >>>> ***@***.*** t5]$; >>>; >>>; >>> I am unfamiliar with how to use curl with X509 and everything I ; >>> tried so far has not worked. eg; >>> *curl*-v ; >>> https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root ; >>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Cdqing%40triumf.ca%7Cb7cde810efc1452a4eab08d9156d8727%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564382428528444%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=kixSR3Oc%2B0Kwn0yq8EDl%2FAgeDJDmM%2Bvkvzsc5wxLvcE%3D&reserved=0> ; >>> --key ~/.globus/userkey.pem  --cert ~/.globus/usercert.pem; >>> or; >>> *curl*-v ; >>> https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root ; >>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Cdqing%40triumf.ca%7Cb7cde810efc1452a4eab08d9156d8727%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564382428528444%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=kixSR3Oc%2B0Kwn0yq8EDl%2FAgeDJDmM%2Bvkvzsc5wxLvcE%3D&reserved=0> ; >>> --key ~/.globus/userkey.pem  --cert ~/.globus/usercert.pem --capath ; >>> /etc/grid-security/certificates; >>>; >>>; >>> regards,; >>> Asoka; >>>; >>>> On May 12, 2021, at 10:18 AM, Axel Naumann ; >>>> ***@***.*** ***@***.***>> wrote:; >>>>; >>>>; >>>> Right - without authentication I cannot see what's happening. /If/ ; >>>> this is due to a redirect it would be a dupe of #8155 ; >>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8155&data=04%7C01%7Cdqing%40triumf.ca%",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-839989913:6603,safe,safelinks,6603,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-839989913,1,['safe'],['safelinks']
Safety,"eSpan()` family of functions; 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code; 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing; 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file; 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector; 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`; d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers; cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`; 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers; f4fc140268 [RF] Remove RooMomentMorphND; d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10; 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper.; 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument; 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext; ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(); c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew.; 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation; c51376731b [RF][NFC] Fix typo.; 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off.; 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit.; 98d004c200 [RF] Fix visibility of the res/ directories.; e97347056c [RF] Make RooBatchCompute dependency public.; 4483b01b7f [RF] Add initial interface and implementation for code-squashing.; f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer; 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; fce73f0565 [R",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12723:1900,Avoid,Avoid,1900,https://root.cern,https://github.com/root-project/root/pull/12723,5,['Avoid'],['Avoid']
Safety,"eTools/SDKs/MacOSX10.14.sdk/usr/include/sys/_types.h:56:9: error: unknown type name '__int32_t'; did you mean '__int128_t'? ; - /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/sys/_types.h:57:9: error: unknown type name '__int32_t'; did you mean '__int128_t'? ; - /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/sys/_types.h:60:9: error: unknown type name '__uint32_t'; did you mean '__uint128_t'? ; - /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/sys/_types.h:61:9: error: unknown type name '__uint32_t'; did you mean '__uint128_t'? . And 230 more. ### Warnings:; - CMake Warning at interpreter/cling/lib/Interpreter/CMakeLists.txt:277 (MESSAGE): ; - /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/sys/cdefs.h:81:2: warning: ""Unsupported compiler detected"" [-W#warnings] ; - /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/sys/cdefs.h:81:2: warning: ""Unsupported compiler detected"" [-W#warnings] ; - /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/sys/cdefs.h:81:2: warning: ""Unsupported compiler detected"" [-W#warnings] ; - /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/sys/cdefs.h:81:2: warning: ""Unsupported compiler detected"" [-W#warnings] ; - /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/sys/cdefs.h:81:2: warning: ""Unsupported compiler detected"" [-W#warnings] ; - /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/sys/cdefs.h:81:2: warning: ""Unsupported compiler detected"" [-W#warnings] ; - /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/sys/cdefs.h:81:2: warning: ""Unsupported compiler detected"" [-W#warnings] ; - /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/sys/cdefs.h:81:2: warning: ""Unsupported compiler detected"" [-W#warnings] ; - /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/sys/cdefs.h:81:2: warning: ""Unsupported compile",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4201#issuecomment-521161432:1781,detect,detected,1781,https://root.cern,https://github.com/root-project/root/pull/4201#issuecomment-521161432,1,['detect'],['detected']
Safety,"eady----------------; (TGeoManager *) 0x556180ad1d50; root [1] geo->CheckOverlaps(); Info in <TGeoNodeMatrix::CheckOverlaps>: Checking overlaps for barrel and daughters within 0.1; warning: Failed to call `P020_REveGeoPainter()` to execute the macro.; Add this function or rename the macro. Falling back to `.L`.; Check overlaps: [==========] 3 [100.00 %] 00:00 ; Info in <TGeoNodeMatrix::CheckOverlaps>: Number of illegal overlaps/extrusions : 1. root [2] geo->PrintOverlaps(); === Overlaps for Default ===; = Overlap ov00000: barrel/plate_1 overlapping barrel/plate_2 ovlp=10.0823; root [3] auto* vol1 = geo->GetTopNode()->GetDaughter(0)->GetVolume(); (TGeoVolume *) 0x556181070960; root [4] auto* vol2 = geo->GetTopNode()->GetDaughter(1)->GetVolume(); (TGeoVolume *) 0x556181070960; root [5] auto* mat1 = geo->GetTopNode()->GetDaughter(0)->GetMatrix(); (TGeoMatrix *) 0x5561811a2390; root [6] auto* mat2 = geo->GetTopNode()->GetDaughter(1)->GetMatrix(); (TGeoMatrix *) 0x5561811b19c0; root [7] TGeoChecker ch(geo); (TGeoChecker &) Name: TGeoChecker Title: a simple geometry checker; root [8] overlap = ch.MakeCheckOverlap(""overlap"", vol1, vol2, mat1, mat2, false, 0.1); (TGeoOverlap *) 0x55618132f820; root [9] overlap->Print(); = Overlap : overlap ovlp=3.51789; - first volume: plate at position:; matrix - tr=1 rot=1 refl=0 scl=0 shr=0 reg=0 own=0; 0.959245 0.282576 0.000000 Tx = 75.401418; -0.282576 0.959245 0.000000 Ty = 214.140485; 0.000000 0.000000 1.000000 Tz = 25.354000; - second volume: plate at position:; matrix - tr=1 rot=1 refl=0 scl=0 shr=0 reg=0 own=0; 0.964608 0.263688 0.000000 Tx = 71.182515; -0.263688 0.964608 0.000000 Ty = 215.579615; 0.000000 0.000000 1.000000 Tz = 25.354000; ```. ### Setup; This occurs on an install of ROOT 6.26.06 with spack (v0.19) as well as a compiled version of `master`. ### Additional context; This issue originates in a DD4hep geometry of a detector at the Electron-Ion Collider, but we have been able to narrow it down to this minimal example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11784:4355,detect,detector,4355,https://root.cern,https://github.com/root-project/root/issues/11784,1,['detect'],['detector']
Safety,"ecome tricky, even LLVM upstream is unable to handle exceptions during JIT: I tested the most basic; ```c++; int main() {; try {; throw 1;; } catch (...) { }; }; ```; compiled with `./bin/clang++ -S -emit-llvm throw.cc` and interpreted using `./bin/lli throw.ll`, resulting in; ```; libc++abi.dylib: terminating with uncaught exception of type int; PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace.; Stack dump:; 0. Program arguments: ./bin/lli throw.ll; Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):; 0 lli 0x000000010104824c llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 56; 1 lli 0x00000001010471b4 llvm::sys::RunSignalHandlers() + 128; 2 lli 0x00000001010488c4 SignalHandler(int) + 304; 3 libsystem_platform.dylib 0x00000001826b1c44 _sigtramp + 56; 4 libsystem_pthread.dylib 0x0000000182669c24 pthread_kill + 292; 5 libsystem_c.dylib 0x00000001825b1864 abort + 104; 6 libc++abi.dylib 0x0000000182629cf8 __cxxabiv1::__aligned_malloc_with_fallback(unsigned long) + 0; 7 libc++abi.dylib 0x000000018261ae4c demangling_unexpected_handler() + 0; 8 libobjc.A.dylib 0x00000001825136d8 _objc_terminate() + 160; 9 libc++abi.dylib 0x00000001826290e0 std::__terminate(void (*)()) + 20; 10 libc++abi.dylib 0x000000018262beb0 __cxa_get_exception_ptr + 0; 11 libc++abi.dylib 0x000000018262be5c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 0; 12 libc++abi.dylib 0x000000010224003c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 18446744071557956064; 13 lli 0x0000000100c8f680 llvm::MCJIT::runFunction(llvm::Function*, llvm::ArrayRef<llvm::GenericValue>) + 768; 14 lli 0x0000000100bd574c llvm::ExecutionEngine::runFunctionAsMain(llvm::Function*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7541#issuecomment-801803930:1021,abort,abort,1021,https://root.cern,https://github.com/root-project/root/issues/7541#issuecomment-801803930,1,['abort'],['abort']
Safety,"ected during instantiation of ""void TMVA::DNN::TCudnn<AFloat>::RNNForward(const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDescriptors_t &, TMVA::DNN::TCudnn<AFloat>::RNNWorkspace_t &, bool) [with AFloat=Float_t]"" at line 43 of /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu. /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn/RecurrentPropagation.cu(513): error: identifier ""cudnnRNNForwardInference"" is undefined; cudnnStatus_t status = cudnnRNNForwardInference(; ^; detected during instantiation of ""void TMVA::DNN::TCudnn<AFloat>::RNNForward(const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDescriptors_t &, TMVA::DNN::TCudnn<AFloat>::RNNWorkspace_t &, bool) [with AFloat=Float_t]"" at line 43 of /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu. /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn/RecurrentPropagation.cu(545): error: identifier ""cudnnRNNBackwardData"" is undefined; cudnnStatus_t status = cudnnRNNBackwardData(; ^; detected during instantiation of ""void TMVA::DNN::TCudnn<AFloat>::RNNBackward(const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloa",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15413:1149,detect,detected,1149,https://root.cern,https://github.com/root-project/root/issues/15413,1,['detect'],['detected']
Safety,ed on ROOT-fedora31/noimt.; Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/97071/console).; ### Errors:; - [2020-09-28T08:13:35.720Z] /build/workspace/root-pullrequests-build/build/include/TF3.h:145:11: error: call to member function 'GetRange' is ambiguous . ### Warnings:; - [2020-09-28T08:12:20.858Z] /build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Utils/PlatformPosix.cpp:73:44: warning: type qualifiers ignored on cast result type [-Wignored-qualifiers] ; - [2020-09-28T08:12:21.117Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:212:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:21.117Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:427:27: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:21.117Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:450:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:28.744Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Pass.h:105:16: warning: ‘virtual bool llvm::Pass::doInitialization(llvm::Module&)’ was hidden [-Woverloaded-virtual] ; - [2020-09-28T08:12:28.744Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Transforms/IPO/Inliner.h:39:8: warning: by ‘virtual bool llvm::LegacyInlinerBase::doInitialization(llvm::CallGraph&)’ [-Woverloaded-virtual] ; - [2020-09-28T08:12:29.296Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:212:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:29.296Z] /build/workspace/root-pullrequests-build/root,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-699854008:980,redund,redundant,980,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-699854008,1,['redund'],['redundant']
Safety,edy Register Allocator; 1.8328 ( 19.6%) 0.0439 ( 14.7%) 1.8767 ( 19.5%) 1.8805 ( 19.5%) X86 DAG->DAG Instruction Selection; 0.5354 ( 5.7%) 0.0000 ( 0.0%) 0.5354 ( 5.6%) 0.5361 ( 5.6%) Combine redundant instructions; 0.2517 ( 2.7%) 0.2238 ( 75.0%) 0.4755 ( 4.9%) 0.4760 ( 4.9%) X86 Assembly Printer; 0.3088 ( 3.3%) 0.0000 ( 0.0%) 0.3088 ( 3.2%) 0.3091 ( 3.2%) Control Flow Optimizer; 0.2958 ( 3.2%) 0.0010 ( 0.3%) 0.2968 ( 3.1%) 0.2972 ( 3.1%) Machine Instruction Scheduler; 0.2617 ( 2.8%) 0.0000 ( 0.0%) 0.2617 ( 2.7%) 0.2620 ( 2.7%) Merge disjoint stack slots; 0.1949 ( 2.1%) 0.0070 ( 2.3%) 0.2019 ( 2.1%) 0.2021 ( 2.1%) Simple Register Coalescing; 0.1759 ( 1.9%) 0.0000 ( 0.0%) 0.1759 ( 1.8%) 0.1761 ( 1.8%) Live Variable Analysis; 0.1414 ( 1.5%) 0.0000 ( 0.0%) 0.1414 ( 1.5%) 0.1416 ( 1.5%) Combine redundant instructions #6; 0.1413 ( 1.5%) 0.0000 ( 0.0%) 0.1413 ( 1.5%) 0.1415 ( 1.5%) Combine redundant instructions #7; 0.1411 ( 1.5%) 0.0000 ( 0.0%) 0.1411 ( 1.5%) 0.1413 ( 1.5%) Combine redundant instructions #4; 0.1410 ( 1.5%) 0.0000 ( 0.0%) 0.1410 ( 1.5%) 0.1412 ( 1.5%) Combine redundant instructions #3; 0.1408 ( 1.5%) 0.0000 ( 0.0%) 0.1408 ( 1.5%) 0.1410 ( 1.5%) Combine redundant instructions #5; 0.1406 ( 1.5%) 0.0000 ( 0.0%) 0.1406 ( 1.5%) 0.1407 ( 1.5%) Combine redundant instructions #2; 0.1359 ( 1.5%) 0.0000 ( 0.0%) 0.1359 ( 1.4%) 0.1360 ( 1.4%) Branch Probability Basic Block Placement; 0.1342 ( 1.4%) 0.0000 ( 0.0%) 0.1342 ( 1.4%) 0.1343 ( 1.4%) Machine Common Subexpression Elimination; 0.1065 ( 1.1%) 0.0000 ( 0.0%) 0.1065 ( 1.1%) 0.1066 ( 1.1%) MemCpy Optimization; ```; -> mostly register allocation and `instcombine`. A similar picture for `jitted_code.cpp`:; ```; 8.6377 ( 81.7%) 0.0066 ( 0.7%) 8.6444 ( 75.4%) 8.6522 ( 75.4%) Fast Register Allocator; 0.7586 ( 7.2%) 0.7869 ( 87.4%) 1.5455 ( 13.5%) 1.5470 ( 13.5%) X86 Assembly Printer; 0.5620 ( 5.3%) 0.0794 ( 8.8%) 0.6414 ( 5.6%) 0.6424 ( 5.6%) X86 DAG->DAG Instruction Selection; 0.1600 ( 1.5%) 0.0031 ( 0.3%) 0.1632 ( 1.4,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9312#issuecomment-976463242:1871,redund,redundant,1871,https://root.cern,https://github.com/root-project/root/issues/9312#issuecomment-976463242,1,['redund'],['redundant']
Safety,"ee/ntuple/v7/inc/ROOT/RField.hxx; @@ -570,7 +570,7 @@ public:; RFieldBase(RFieldBase&&) = default;; RFieldBase& operator =(const RFieldBase&) = delete;; RFieldBase& operator =(RFieldBase&&) = default;; - virtual ~RFieldBase() = default;; + virtual ~RFieldBase();; ; /// Copies the field and its sub fields using a possibly new name and a new, unconnected set of columns; std::unique_ptr<RFieldBase> Clone(std::string_view newName) const;; diff --git a/tree/ntuple/v7/src/RField.cxx b/tree/ntuple/v7/src/RField.cxx; index ef04fec76c..41d4962ac5 100644; --- a/tree/ntuple/v7/src/RField.cxx; +++ b/tree/ntuple/v7/src/RField.cxx; @@ -410,6 +410,10 @@ ROOT::Experimental::RFieldBase::RFieldBase(std::string_view name, std::string_vi; {; }; ; +ROOT::Experimental::RFieldBase::~RFieldBase(); +{; +}; +; std::string ROOT::Experimental::RFieldBase::GetQualifiedFieldName() const; {; std::string result = GetFieldName();; ```. Alternatively it helps to switch the `if constexpr` around to avoid the compiler instantiate the `RField<void>`:; ```diff; diff --git a/tree/ntuple/v7/inc/ROOT/REntry.hxx b/tree/ntuple/v7/inc/ROOT/REntry.hxx; index 1f3ec47095..b7b70b24cb 100644; --- a/tree/ntuple/v7/inc/ROOT/REntry.hxx; +++ b/tree/ntuple/v7/inc/ROOT/REntry.hxx; @@ -124,12 +124,11 @@ public:; if (v.GetField().GetFieldName() != fieldName); continue;; ; - if constexpr (std::is_void_v<T>); - return v.GetPtr<void>();; -; - if (v.GetField().GetTypeName() != RField<T>::TypeName()) {; - throw RException(R__FAIL(""type mismatch for field "" + std::string(fieldName) + "": "" +; - v.GetField().GetTypeName() + "" vs. "" + RField<T>::TypeName()));; + if constexpr (!std::is_void_v<T>) {; + if (v.GetField().GetTypeName() != RField<T>::TypeName()) {; + throw RException(R__FAIL(""type mismatch for field "" + std::string(fieldName) + "": "" +; + v.GetField().GetTypeName() + "" vs. "" + RField<T>::TypeName()));; + }; }; return std::static_pointer_cast<T>(v.GetPtr<void>());; }; ```. Finally we can either disable `CreateValue` in th",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14468#issuecomment-1916371964:1785,avoid,avoid,1785,https://root.cern,https://github.com/root-project/root/pull/14468#issuecomment-1916371964,1,['avoid'],['avoid']
Safety,"eeds to hook `find_package` itself to point it to the installed dependencies. ### Expected behavior. ROOT can be configured with vcpkg and other tools sensitive to overriden `find_package`. This requires ROOT to not override `find_package`. ### To Reproduce. Clone ROOT, create `build_win` folder, run:; ```; PS C:\dev\root\build_win> cmake -DCMAKE_TOOLCHAIN_FILE=D:\dev\vcpkg\scripts\buildsystems\vcpkg.cmake ..; -- Building for: Visual Studio 16 2019; -- Selecting Windows SDK version 10.0.19041.0 to target Windows 10.0.19042.; -- The C compiler identification is MSVC 19.29.30037.0; -- The CXX compiler identification is MSVC 19.29.30037.0; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30037/bin/Hostx64/x64/cl.exe - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30037/bin/Hostx64/x64/cl.exe - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Git: C:/Program Files/Git/cmd/git.exe (found version ""2.30.0.windows.2""); -- Detected ROOT_VERSION 6.25.01; -- Looking for Python; -- Could NOT find Python3 (missing: Python3_NumPy_INCLUDE_DIRS NumPy) (found version ""3.9.2""); -- Could NOT find Python2 (missing: Python2_EXECUTABLE Python2_LIBRARIES Python2_INCLUDE_DIRS Python2_NumPy_INCLUDE_DIRS Interpreter Development NumPy Development.Module Development.Embed); Reason given by package:; Interpreter: Wrong major version for the interpreter ""C:/Program Files/Python39/python.exe"". -- Looking for pthread.h; -- Looking for pthread.h - not found; -- Found Threads: TRUE; -- Performing Test GLIBCXX_USE_CXX11_ABI; -- Performing Test GLIBCXX_USE_CXX11_ABI - Failed; -- ROOT Platfor",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8633:1449,Detect,Detecting,1449,https://root.cern,https://github.com/root-project/root/issues/8633,4,['Detect'],['Detecting']
Safety,"efinition of '__crt_locale_data_public'; typedef struct __crt_locale_data_public; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt.h:610:16: note: previous definition is here; typedef struct __crt_locale_data_public; ^; In file included from libGeom dictionary payload:17:; In file included from C:/root-dev/root\include\TGeoExtension.h:15:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt\corecrt.h:617:16: error: redefinition of '__crt_locale_pointers'; typedef struct __crt_locale_pointers; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt.h:617:16: note: previous definition is here; typedef struct __crt_locale_pointers; ^; In file included from libGeom dictionary payload:17:; In file included from C:/root-dev/root\include\TGeoExtension.h:15:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt\corecrt.h:625:16: error: redefinition of '_Mbstatet'; typedef struct _Mbstatet; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt.h:625:16: note: previous definition is here; typedef struct _Mbstatet; ^; Error in <TInterpreter::AutoParse>: Error parsing payload code for class gGeoManager with content:. ... Assertion failed: !m_Unloading && ""Must not nest within unloading transaction"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\Transaction.cpp, line 98; *** Break *** abort. ==========================================; =============== STACKTRACE ===============; ==========================================; ...; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14346:3661,abort,abort,3661,https://root.cern,https://github.com/root-project/root/pull/14346,1,['abort'],['abort']
Safety,"elease"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 886: Environment variables:; 886: ROOT_HIST=0; 886: Test timeout computed to be: 1500; 886: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 886: error code: -529697949; 886:; 886:; 9/16 Test #886: tutorial-dataframe-df012_DefinesAndFiltersAsStrings-py ...***Failed 4.43 sec; test 887; Start 887: tutorial-dataframe-df014_CSVDataSource-py. 887: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df014_CSVDataSource.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 887: Environment variables:; 887: ROOT_HIST=0; 887: Test timeout computed to be: 1500; [TFile::Cp] Total 14.46 MB |====================| 100.00 % [57.6 MB/s]; 887: Traceback (most recent call last):; 887: File ""C:/Users/sftnight/git/master/tutorials/launcher.py"", line 33, in <module>; 887: spec.loader.exec_module(module); 887: File ""<frozen importlib._bootstrap_external>"", line 783, in exec_module; 887: File ""<frozen importlib._bootstrap>"", line 219, in _call_with_frames_removed; 887: File ""C:/Users/sftnight/git/master/tutorials/dataframe/df014_CSVDataSource.py"", line 43, in <module>; 887: invMass = filteredEvents.Histo1D((""invMass"", ""CMS Opendata: #mu#mu mass;#mu#mu mass [GeV];Events"", 512, 2, 110), ""m""); 887: File ""C:\Users\sftnight\build\release\bin\ROOT\pythonization\_rdataframe.py"", line 114, in _histo_profile; 887: res = original_method(model, *args[1:]); 887: TypeError: Template method resolution failed:; 887: none of the 4 overloaded methods succeeded. Full details:; 887: ROOT::RDF::RResultPtr<TH1D> ROOT::RDF::RInterface<ROOT:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6083#issuecomment-665456331:8494,timeout,timeout,8494,https://root.cern,https://github.com/root-project/root/pull/6083#issuecomment-665456331,1,['timeout'],['timeout']
Safety,"elease/RootTestDriver.cmake:237 (message):; 891: error code: -529697949; 891:; 891:; 14/16 Test #891: tutorial-dataframe-df021_createTGraph-py .................***Failed Error regular expression found in output. Regex=[: error:] 4.85 sec; test 892; Start 892: tutorial-dataframe-df024_Display-py. 892: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df024_Display.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 892: Environment variables:; 892: ROOT_HIST=0; 892: Test timeout computed to be: 1500; 892: IncrementalExecutor::executeFunction: symbol '?printValue@cling@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PB_K@Z' unresolved while linking [cling interface function]!; 892: You are probably missing the definition of class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > __cdecl cling::printValue(unsigned __int64 const *); 892: Maybe you need to load the corresponding shared library?; 892: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 892: error code: -529697949; 892:; 892:; 15/16 Test #892: tutorial-dataframe-df024_Display-py ......................***Failed 9.91 sec; test 893; Start 893: tutorial-dataframe-df031_Stats-py. 893: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df031_Stats.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 893: Environment variables:; 893: ROOT_HIST=0; 893: Test timeout computed to ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6083#issuecomment-665456331:14975,timeout,timeout,14975,https://root.cern,https://github.com/root-project/root/pull/6083#issuecomment-665456331,1,['timeout'],['timeout']
Safety,"election; (Pdb) s; --Call--; > /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-dbg/lib/cppyy/__init__.py(143)_standard_pythonizations(); -> def _standard_pythonizations(pyclass, name):; (Pdb) w; /home/cdelort/git/cool/x86_64-centos7-gcc8-dbg/test.py(6)<module>(); -> cool.FieldSelection; > /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-dbg/lib/cppyy/__init__.py(143)_standard_pythonizations(); -> def _standard_pythonizations(pyclass, name):; (Pdb) s; > /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-dbg/lib/cppyy/__init__.py(145)_standard_pythonizations(); -> if name.find('std::tuple<', 0, 11) == 0 or name.find('tuple<', 0, 6) == 0:; (Pdb) pp name; 'cool::IRecordSelection'; (Pdb) pp name.find('std::tuple<', 0, 11); -1; (Pdb) pp name.find('tuple<', 0, 6); -1; (Pdb) list; 140 	from . import _pythonization as py; 141 	py._set_backend(_backend); 142 	; 143 	def _standard_pythonizations(pyclass, name):; 144 	 # pythonization of tuple; TODO: placed here for convenience, but verify that decision; 145 ->	 if name.find('std::tuple<', 0, 11) == 0 or name.find('tuple<', 0, 6) == 0:; 146 	 import cppyy; 147 	 pyclass._tuple_len = cppyy.gbl.std.tuple_size(pyclass).value; 148 	 def tuple_len(self):; 149 	 return self.__class__._tuple_len; 150 	 pyclass.__len__ = tuple_len; (Pdb) step; --Return--; > /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-dbg/lib/cppyy/__init__.py(145)_standard_pythonizations()->None; -> if name.find('std::tuple<', 0, 11) == 0 or name.find('tuple<', 0, 6) == 0:; (Pdb) step; python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; *** Break *** abort; __boot(); import os; *** Break *** abort; __boot(); import os. ```; Let me know what I can do to help",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6359#issuecomment-694103261:2215,abort,abort,2215,https://root.cern,https://github.com/root-project/root/issues/6359#issuecomment-694103261,2,['abort'],['abort']
Safety,"em --cert ~/.globus/usercert.pem; >> or; >> curl -v https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Cdqing%40triumf.ca%7C96f8066e53054f808afe08d9156b7b02%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564373643157499%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=56%2Fzdx8AYUMDio2HJ6lKgj%2BEhDVoS5nYEh69aXHYZS8%3D&reserved=0> --key ~/.globus/userkey.pem --cert ~/.globus/usercert.pem --capath /etc/grid-security/certificates; >> ; >> ; >> regards,; >> Asoka; >> ; >>> On May 12, 2021, at 10:18 AM, Axel Naumann ***@***.*** ***@***.***>> wrote:; >>> ; >>> ; >>> Right - without authentication I cannot see what's happening. If this is due to a redirect it would be a dupe of #8155 <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8155&data=04%7C01%7Cdqing%40triumf.ca%7C96f8066e53054f808afe08d9156b7b02%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564373643367382%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=Sks%2FDd3rFaTWUbAotHxdTG7EQfZWLHeVrkmSb4E5PhU%3D&reserved=0> - if not then it's different :-) But I don't know how to tell whether it's a redirect. Do you?; >>> ; >>> If not let's get #8155 <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8155&data=04%7C01%7Cdqing%40triumf.ca%7C96f8066e53054f808afe08d9156b7b02%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564373643377374%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=Z2XrbS0rRc1sDI3e%2FjB8nbNngwpbzvPPsLFp9suKyUc%3D&reserved=0> fixed and then we re-visit this one: either it's fixed, too, or w",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-839972447:6913,safe,safelinks,6913,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-839972447,1,['safe'],['safelinks']
Safety,"ems to notice. The best I've managed is to delete all `lib/*.pcm` files which obviously triggers them to be rebuilt:. ```bash; $ root; input_line_1:1:10: remark: building module 'std' as '/home/cburr/miniconda3/envs/test/lib/std.pcm' [-Rmodule-build]; #include <new>; ^; input_line_1:1:10: remark: finished building module 'std' [-Rmodule-build]; input_line_2:1:10: remark: building module 'Cling_Runtime' as '/home/cburr/miniconda3/envs/test/lib/Cling_Runtime.pcm' [-Rmodule-build]; #include ""cling/Interpreter/RuntimeUniverse.h""; ^; While building module 'Cling_Runtime' imported from input_line_2:1:; In file included from <module-includes>:3:; /home/cburr/miniconda3/envs/test/etc//cling/Interpreter/DynamicLookupRuntimeUniverse.h:16:10: remark: building module 'Cling_Runtime_Extra' as '/home/cburr/miniconda3/envs/test/lib/Cling_Runtime_Extra.pcm' [-Rmodule-build]; #include ""cling/Interpreter/DynamicExprInfo.h""; ^; ```. I don't know if ROOT is supposed to be able to recover from this but I run in to three issues, the first is the known `tbb` dependency issue in 6.24.0 that is already fixed for the next patch release. The second issue is that `MathCore.pcm` fails to build with:. ```bash; <<< cling interactive line includer >>>: remark: building module 'MathCore' as '/home/cburr/miniconda3/envs/test/lib/MathCore.pcm' [-Rmodule-build]; While building module 'MathCore':; In file included from <module-includes>:3:; In file included from /home/cburr/miniconda3/envs/test/include/Fit/Chi2FCN.h:19:; /home/cburr/miniconda3/envs/test/include/Fit/FitUtil.h:404:23: error: no matching constructor for initialization of 'std::vector<double>'; std::vector<double> ones{1, 1, 1, 1};; ^ ~~~~~~~~~~~~~~~~; ```. I can workaround this by using four `ones.push_back(1.0);` lines instead of initialising it as ones though it doesn't explain why this fails. Finally after fixing this it, running `root.exe -b -l -q -e '1+1' -x` repeatedly continues to rebuild modules, e.g. on the second iteration:. ```;",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8518:1667,recover,recover,1667,https://root.cern,https://github.com/root-project/root/issues/8518,1,['recover'],['recover']
Safety,"endencyMissingError` to public to make it catchable; [RF][HS3] Support MultiVarGaussian and TF1Binding plus code cleanup; [RF][HS3] Added helper function for writing matrices in JSONInterface; [RF][HS3] JSON IO of positive definite flag in PiecewiseInterpolation; [RF] Added getters to TFnBinding, MultiVarGauss, PiecewiseInterpolation; [RF] Avoid invalid pointer access in `RooAbsPdf::printStream()`; [RF] Add intiial minimizer interface for RooFuncWrapper.; [RF] Improve code in `MinuitFcnGrad`; [RF] Code improvements in tests for new TestStatistics; [RF] Composition over inheritance in RooAbsMinimizerFcn implementations; [RF] No need for `RooAbsMinimizerFcn::fit()` method; [RF] Further refactor RooJSONFactoryWSTool; [RF][HS3] Avoid catching without re-throwing; [RF][HS3] Write out bin counts as `int` and other small improvements; [RF] Correctly support constants in RooFit JSON IO; [RF] Add test for a simultaneous model written and read from JSON; [RF] Skip the RooSimultaneous in JSON IO; [RF] Don't export `factory_tag` in JSON; [RF][HS3] Move the default variable values to the estimates section; [RF] RooFit JSON: no need to tag variables, just export them; [RF] Rename fields in JSON file to match new standard; [RF] Complete also the reading of likelihoods and analysis fields; [RF] Add likelihoods and analyses fields for HS3 v2; [RF] Decouple `RooDataHist` reading from rest of workspace in RooFitHS3; [RF] Some refactoring of RooFit HS3; [RF] New `domains` section in JSON to store variable ranges; Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252); [RF] Clearly mark `RooFit::CloneData()` as deprecated; [RF] Again code-format RooMinimizer; [RF] Avoid overhead of tracking evaluation error msgs when not needed; [RF] Implement safe way to set eval error logging in RooMinimizer; [RF] Use proper infinity checks in RooFit HS3; [RF] Avoid `sin` or `cos` of infinity in RooTruthModel integral code; [RF] RooTruthModel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12590#issuecomment-1491813664:7305,Avoid,Avoid,7305,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664,1,['Avoid'],['Avoid']
Safety,"entalExecutor::executeFunction: symbol '_ZNK5cling5Value5getAsIP4TH1FEET_v' unresolved while linking function '_GLOBAL__sub_I_cling_module_25'!; > You are probably missing the definition of TH1F* cling::Value::getAs<TH1F*>() const; > Maybe you need to load the corresponding shared library?; > ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (defined); > ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (noaccess); > ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (defined); > ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (noaccess); > terminate called after throwing an instance of 'cling::InvalidDerefException'; > what(): Trying to dereference null pointer or trying to call routine taking non-null arguments; > ==22765== ; > ==22765== Process terminating with default action of signal 6 (SIGABRT); > ==22765== at 0x546E18B: raise (raise.c:51); > ==22765== by 0x544D92D: abort (abort.c:100); > ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29); > ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29); > ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29); > ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29); > ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so); > ==22765== by 0x4DFF3CC: ???; > ==22765== by 0x1FFEFFBB3F: ???; > ==22765== by 0xB60A6A5548AF56FF: ???; > ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so); > ==22765== by 0x4DEB03F: ???; > ==22765== ; > ==22765== HEAP SUMMARY:; > ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks; > ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated; > ==22765== ; > ==22765== LEAK SUMMARY:; > ==22765== definitely l",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11252#issuecomment-1250619567:7233,abort,abort,7233,https://root.cern,https://github.com/root-project/root/pull/11252#issuecomment-1250619567,2,['abort'],['abort']
Safety,"er takes very long; to construct and consumes a very large amount of memory (GBs). In addition, the evaluation of the Safety function dominates the Geant simulation time. The improvements in this commit are mainly achieved through:. * The use of a boundary volume hierarchy (BVH) as the base acceleration entity, replacing TGeoVoxelFinder.; BVH are the standard in industry/computer-graphics, for what concerns ray-object intersection tasks. The BVH is constructed from axis-aligned bounding boxes and employed in the FindBoundary/FindNode implementations. * The use of a 3D voxel grid (TGeoVoxelGrid) structure, able to store properties ""local"" or in the vicinity of a cartesian coordinate P. This structure allows to reduce the (typical) algorithmic complexity for ""Safety"" queries to ~O(1) (with a constant factor determined by the voxel size). Filling of the 3D voxel grid cache for Safety is done on-the-fly (using the BVH once). * (Optional) Additional caching of ""last-call"" safety values for really quick return when the value is still valid at the next call. Ideas for these improvements come from prior work in related libraries such as VecGeom. -----. Implementation details:. * The implementation is, for now (until fully tested), provided in a backward compatible manner:. - By default, nothing changes; - Users have to activate the BVH mode by setting an environment variable TGEO_PW_USEBVH; - Users may hence compare the 2 modes. * Functions for Safety, FindNode, FindBoundary dispatch to some internal implementation. This causes an extra lookup/jump, which can be removed once BVH is fully validated. * For the BVH, a well known open source implementation is included in header-only form. The headers are copied from https://github.com/madmann91/bvh commit 66e445b92f68801a6dd8ef943fe3038976ecb4ff. * A new class, TGeoVoxelGrid is provided for the cartesian VoxelGrid container. ----. Performance examples:. In a test with the ALICE simulation framework including the ITS + TPC detect",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16442:1464,safe,safety,1464,https://root.cern,https://github.com/root-project/root/pull/16442,1,['safe'],['safety']
Safety,"er.h""; #include ""TGeoPcon.h""; #include ""TGeoPgon.h""; #include ""TGeoPhysicalConstants.h""; #include ""TGeoPhysicalNode.h""; #include ""TGeoPolygon.h""; #include ""TGeoRCPtr.h""; #include ""TGeoRegion.h""; #include ""TGeoScaledShape.h""; #include ""TGeoShape.h""; #include ""TGeoShapeAssembly.h""; #include ""TGeoSphere.h""; #include ""TGeoStateInfo.h""; #include ""TGeoSystemOfUnits.h""; #include ""TGeoTorus.h""; #include ""TGeoTrd1.h""; #include ""TGeoTrd2.h""; #include ""TGeoTube.h""; #include ""TGeoUniformMagField.h""; #include ""TGeoVolume.h""; #include ""TGeoVoxelFinder.h""; #include ""TGeoXtru.h""; #include ""TGeoTessellated.h""; #include ""TGeoVector3.h""; #include ""TVirtualGeoConverter.h""; #include ""TVirtualGeoPainter.h""; #include ""TVirtualGeoTrack.h""; #include ""TVirtualMagField.h"". #undef _BACKWARD_BACKWARD_WARNING_H. Assertion failed: !m_Unloading && ""Must not nest within unloading transaction"", file C:\build\ws\BUILDTYPE\Release\LABEL\windows64\V\6-30\root\interpreter\cling\lib\Interpreter\Transaction.cpp, line 98; *** Break *** abort. ==========================================; =============== STACKTRACE ===============; ==========================================. ================ Thread 0 ================; libcppyy_backend3_8!??; libCore!TWinNTSystem::DispatchSignals(); ucrtbase!raise(); ucrtbase!abort(); ucrtbase!get_wpgmptr(); ucrtbase!get_wpgmptr(); ucrtbase!wassert(); libCling!TClingValue::ToTypeAndValueString(); libCling!cling::Value::print(); libCling!TClingValue::ToTypeAndValueString(); libCling!TCling::LoadEnums(); libCore!TListOfEnums::Load(); libCore!TClass::GetListOfEnums(); libCling!TCling::InvalidateCachedDecl(); libCling!TCling::UpdateListsOnUnloaded(); libCling!TCling::UpdateListsOnUnloaded(); libCling!cling::runtime::internal::EvaluateDynamicExpression(); libCling!cling::runtime::internal::EvaluateDynamicExpression(); libCling!cling::Value::print(); libCling!TClingValue::ToTypeAndValueString(); libCling!TClingValue::ToTypeAndValueString(); libCling!TClingTypedefInfo::Init(); libCli",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14302:4965,abort,abort,4965,https://root.cern,https://github.com/root-project/root/issues/14302,1,['abort'],['abort']
Safety,"er/llvm/src/include/llvm/Pass.h:105:16: warning: ‘virtual bool llvm::Pass::doInitialization(llvm::Module&)’ was hidden [-Woverloaded-virtual] ; - [2020-09-27T10:35:57.183Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Transforms/IPO/Inliner.h:39:8: warning: by ‘virtual bool llvm::LegacyInlinerBase::doInitialization(llvm::CallGraph&)’ [-Woverloaded-virtual] ; - [2020-09-27T10:35:57.629Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:212:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:35:57.629Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:427:27: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:35:57.629Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:450:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:36:09.553Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:431:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:36:09.553Z] /build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/IncrementalJIT.h:108:74: warning: ‘llvm::orc::LegacyRTDyldObjectLinkingLayer::LegacyRTDyldObjectLinkingLayer(llvm::orc::ExecutionSession&, llvm::orc::LegacyRTDyldObjectLinkingLayer::ResourcesGetter, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyLoadedFtor, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyFinalizedFtor, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyFreedFtor)’ is deprecated [-Wdeprecated-declarations] ; - [2020-09-27T10:36:09.553Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:277:33: warning: redundant move in return statement",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-699617654:2546,redund,redundant,2546,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-699617654,1,['redund'],['redundant']
Safety,"er/llvm/src/include/llvm/Pass.h:105:16: warning: ‘virtual bool llvm::Pass::doInitialization(llvm::Module&)’ was hidden [-Woverloaded-virtual] ; - [2020-09-27T10:48:24.113Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Transforms/IPO/Inliner.h:39:8: warning: by ‘virtual bool llvm::LegacyInlinerBase::doInitialization(llvm::CallGraph&)’ [-Woverloaded-virtual] ; - [2020-09-27T10:48:41.699Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:212:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:48:41.699Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:427:27: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:48:41.699Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:450:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:48:54.024Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:431:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:48:54.024Z] /build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/IncrementalJIT.h:108:74: warning: ‘llvm::orc::LegacyRTDyldObjectLinkingLayer::LegacyRTDyldObjectLinkingLayer(llvm::orc::ExecutionSession&, llvm::orc::LegacyRTDyldObjectLinkingLayer::ResourcesGetter, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyLoadedFtor, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyFinalizedFtor, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyFreedFtor)’ is deprecated [-Wdeprecated-declarations] ; - [2020-09-27T10:48:54.025Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:277:33: warning: redundant move in return statement",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-699618970:2546,redund,redundant,2546,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-699618970,1,['redund'],['redundant']
Safety,"er/llvm/src/include/llvm/Pass.h:105:16: warning: ‘virtual bool llvm::Pass::doInitialization(llvm::Module&)’ was hidden [-Woverloaded-virtual] ; - [2020-09-28T08:12:00.548Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Transforms/IPO/Inliner.h:39:8: warning: by ‘virtual bool llvm::LegacyInlinerBase::doInitialization(llvm::CallGraph&)’ [-Woverloaded-virtual] ; - [2020-09-28T08:12:01.066Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:212:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:01.066Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:427:27: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:01.066Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:450:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:01.066Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:431:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:01.066Z] /build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/IncrementalJIT.h:108:74: warning: ‘llvm::orc::LegacyRTDyldObjectLinkingLayer::LegacyRTDyldObjectLinkingLayer(llvm::orc::ExecutionSession&, llvm::orc::LegacyRTDyldObjectLinkingLayer::ResourcesGetter, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyLoadedFtor, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyFinalizedFtor, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyFreedFtor)’ is deprecated [-Wdeprecated-declarations] ; - [2020-09-28T08:12:01.067Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:277:33: warning: redundant move in return statement",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-699853926:1743,redund,redundant,1743,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-699853926,1,['redund'],['redundant']
Safety,"er` | `ESnapshotOutputFormat::kDefault` | `ESnapshotOutputFormat::kRNTuple` |. ## Implementation; As mentioned, the existing `Snapshot` interface is used. A new `SnapshotRNTupleHelper` has been created to handle the creation and writing of the RNTuple, akin to the existing `SnapshotHelper` (which has been renamed to `SnapshotTTreeHelper` for consistency). ### RLoopManager data source initialization (rev bbf221f); The snapshot action creates a new loop manager which manages the snapshotted data set. The loop manager gets initialized before the actual snapshotting takes place. Originally, the pointer to the data source owned by the loop manager was marked as `const`. Because the RNTuple's data source _has_ to be created after the loop manager, for this PR the `const` qualifier has been dropped. ### Move `ROOT::RDF::Experimental::FromRNTuple` (rev 0a29b02); For snapshotting RNTuples, we need to include the header file for RNTupleDS in `ActionHelpers.hxx`. To avoid dependency conflicts related to including `ROOT/RDataFrame.hxx`, the free `FromRNTuple` functions have been moved to a separate header. ## Current limitations and follow-ups; This PR adds the minimal functionality for (single-threaded) snapshotting to RNTuple. A number of follow-ups are foreseen:. ### RNTuple write options; Currently no RNTuple-specific write options have been added to `RSnapshotOptions` yet, except for compression settings which were already present as an option. Adding (a subset) of the other `RNTupleWriteOptions` is trivial. ### Default compression settings; `RSnapshotOptions`' default compression setting is 101 (Zlib). However, RNTuple's default compression setting is 505 (zstd). We could change the default compression setting to `kInherit` and decide which settings to use according to the target data format (unless explicitly set by the user, of course). ### Multithreaded snapshotting; This PR only adds single-threaded RNTuple snapshotting. Multithreaded (and parallel) snapshotting will b",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15750:1700,avoid,avoid,1700,https://root.cern,https://github.com/root-project/root/pull/15750,1,['avoid'],['avoid']
Safety,"eractive line includer >>>:1:1: error: expected '}'; 884: input_line_40:1:43: note: to match this '{'; 884: void __cling_Un1Qu315(void* vpClingValue) {; 884: ^; 884: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 884: error code: -529697949; 884:; 884:; 7/16 Test #884: tutorial-dataframe-df008_createDataSetFromScratch-py .....***Failed Error regular expression found in output. Regex=[: error:] 6.23 sec; test 885; Start 885: tutorial-dataframe-df010_trivialDataSource-py. 885: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df010_trivialDataSource.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 885: Environment variables:; 885: ROOT_HIST=0; 885: Test timeout computed to be: 1500; 885: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 885: error code: -529697949; 885:; 885:; 8/16 Test #885: tutorial-dataframe-df010_trivialDataSource-py ............***Failed 4.46 sec; test 886; Start 886: tutorial-dataframe-df012_DefinesAndFiltersAsStrings-py. 886: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df012_DefinesAndFiltersAsStrings.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 886: Environment variables:; 886: ROOT_HIST=0; 886: Test timeout computed to be: 1500; 886: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 886: error code: -529697949; 886:; 886:; 9/16 Test #886: tutorial-dataframe-df012_Def",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6083#issuecomment-665456331:6896,timeout,timeout,6896,https://root.cern,https://github.com/root-project/root/pull/6083#issuecomment-665456331,1,['timeout'],['timeout']
Safety,ere are the git information I can extract in case it helps.; ```; [16:38:14] marcomeyer@MarcoMacBook-Pro:~/Software/root/20240914-src $ ; $ git status; On branch v6-32-00-patches; Your branch is up to date with 'origin/v6-32-00-patches'.; ```; I use a MacBook Pro Apple M1 Max with XCode SDK 15.0; ```; $ ls -ls /Library/Developer/CommandLineTools/SDKs/ ; total 0; 0 lrwxr-xr-x 1 root wheel 14 Jul 21 08:29 MacOSX.sdk -> MacOSX15.0.sdk; [...]; ```. Here is the result of the cmake command.; ```; cmake ../20240914-src -DCMAKE_INSTALL_PREFIX=/Users/marcomeyer/Software/root/20240914 -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang && make -j8; -- The C compiler identification is AppleClang 16.0.0.16000022; -- The CXX compiler identification is AppleClang 16.0.0.16000022; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /usr/bin/clang - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/clang++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Building ROOT version 6.32.04; -- Checking internet connectivity; -- Checking internet connectivity - found; -- The default C++ standard in use by the detected compiler (/usr/bin/clang++) is lower than C++17. Setting C++17 as the minimum standard.; -- Performing Test HAS_LIBCXX11; -- Performing Test HAS_LIBCXX11 - Success; -- Found a macOS system 15.0; -- Found an AArch64 system; -- ROOT default compression algorithm: zlib; -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled.; -- Looking for ZLib; -- Building freetype version 2.12.1 included in ROOT itself; -- Looking for PCRE; -- Looking for LZMA; -- Looking for ZSTD; -- Looking for LZ4; -- Building AfterImage library included in ROOT itself; -- Looking for Python; -- Found Python3: /opt/homebrew/bin/python3,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16428#issuecomment-2350895635:846,Detect,Detecting,846,https://root.cern,https://github.com/root-project/root/issues/16428#issuecomment-2350895635,8,['Detect'],['Detecting']
Safety,"erface/GBRForestTools.h. The interface remains the same, only that the template parameter; specifying the backend is gone. This change adds support for unbalanced trees. To see the fixed logic, as one run a modified version of the `tmva101_Training.py` tutorial (remember to run `tutorials/tmva/tmva100_DataPreparation.py` first):; ```python; import ROOT; import numpy as np. from tmva100_DataPreparation import variables. def load_data(signal_filename, background_filename):; # Read data from ROOT files; data_sig = ROOT.RDataFrame(""Events"", signal_filename).AsNumpy(); data_bkg = ROOT.RDataFrame(""Events"", background_filename).AsNumpy(). # Convert inputs to format readable by machine learning tools; x_sig = np.vstack([data_sig[var] for var in variables]).T; x_bkg = np.vstack([data_bkg[var] for var in variables]).T; x = np.vstack([x_sig, x_bkg]). # Create labels; num_sig = x_sig.shape[0]; num_bkg = x_bkg.shape[0]; y = np.hstack([np.ones(num_sig), np.zeros(num_bkg)]). # Compute weights balancing both classes; num_all = num_sig + num_bkg; w = np.hstack([np.ones(num_sig) * num_all / num_sig, np.ones(num_bkg) * num_all / num_bkg]). return x, y, w. # Load data; x, y, w = load_data(""train_signal.root"", ""train_background.root""). # Fit xgboost model; from xgboost import XGBClassifier; xbdt = XGBClassifier(max_depth=3, n_estimators=500); xbdt.fit(x, y, sample_weight=w). # Save model in TMVA format; ROOT.TMVA.Experimental.SaveXGBoost(xbdt, ""myBDT"", ""tmva101.root"", num_inputs=x.shape[1]). # Load data; x, y_true, w = load_data(""test_signal.root"", ""test_background.root""). # Load trained model; File = ""tmva101.root"". bdt = ROOT.TMVA.Experimental.RBDT(""myBDT"", File). # Make prediction; y_pred_ref = xbdt.predict_proba(x)[:, 1]; y_pred = bdt.Compute(x).T. diff = y_pred - y_pred_ref. print(""max diff"", np.max(np.abs(diff))); ```; Before, the max difference was `0.379578`, and with this PR it is `5.9604645e-08`, compatible with floating point precision. FYI @martamaja10, @lmoneta, @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15173:2040,predict,prediction,2040,https://root.cern,https://github.com/root-project/root/pull/15173,1,['predict'],['prediction']
Safety,ern.ch/job/root-pullrequests-build/76607/testReport/projectroot/runtutorials/tutorial_roofit_rf509_wsinteractive_py/); - [projectroot.runtutorials.tutorial_roofit_rf513_wsfactory_tools_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76607/testReport/projectroot/runtutorials/tutorial_roofit_rf513_wsfactory_tools_py/); - [projectroot.runtutorials.tutorial_roofit_rf903_numintcache_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76607/testReport/projectroot/runtutorials/tutorial_roofit_rf903_numintcache_py/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76607/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.root.io.recover.roottest_root_io_recover_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76607/testReport/projectroot.roottest.root.io/recover/roottest_root_io_recover_make/); - [projectroot.roottest.root.multicore.roottest_root_multicore_tp_process_imt](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76607/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt/); - [projectroot.core.metacling.test.gtest_core_metacling_test_coremetaclingtestUnit](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76607/testReport/projectroot.core.metacling/test/gtest_core_metacling_test_coremetaclingtestUnit/); - [projectroot.test.test_stressmathcore_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76607/testReport/projectroot/test/test_stressmathcore_interpreted/); - [projectroot.runtutorials.tutorial_dataframe_df002_dataModel](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76607/testReport/projectroot/runtutorials/tutorial_dataframe_df002_dataModel/); - [projectroot.runtutorials.tutorial_dataframe_df004_cutFlowReport](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/7660,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4016#issuecomment-579477135:1838,recover,recover,1838,https://root.cern,https://github.com/root-project/root/pull/4016#issuecomment-579477135,1,['recover'],['recover']
Safety,ern.ch/job/root-pullrequests-build/76639/testReport/projectroot/runtutorials/tutorial_roofit_rf509_wsinteractive_py/); - [projectroot.runtutorials.tutorial_roofit_rf513_wsfactory_tools_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76639/testReport/projectroot/runtutorials/tutorial_roofit_rf513_wsfactory_tools_py/); - [projectroot.runtutorials.tutorial_roofit_rf903_numintcache_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76639/testReport/projectroot/runtutorials/tutorial_roofit_rf903_numintcache_py/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76639/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.root.io.recover.roottest_root_io_recover_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76639/testReport/projectroot.roottest.root.io/recover/roottest_root_io_recover_make/); - [projectroot.test.test_stressmathcore_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76639/testReport/projectroot/test/test_stressmathcore_interpreted/); - [projectroot.test.test_stresshistofit_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76639/testReport/projectroot/test/test_stresshistofit_interpreted/); - [projectroot.runtutorials.tutorial_roostats_StandardFrequentistDiscovery](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76639/testReport/projectroot/runtutorials/tutorial_roostats_StandardFrequentistDiscovery/); - [projectroot.runtutorials.tutorial_roostats_TestNonCentral](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76639/testReport/projectroot/runtutorials/tutorial_roostats_TestNonCentral/); - [projectroot.runtutorials.tutorial_roofit_rf511_wsfactory_basic_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76639/testReport/projectroot/runtutorials/tutorial_roofit_rf511_wsfactory_,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4016#issuecomment-579668392:1436,recover,recover,1436,https://root.cern,https://github.com/root-project/root/pull/4016#issuecomment-579668392,1,['recover'],['recover']
Safety,"ertificate, use; >>>>>>> the -k (or --insecure) option.; >>>>>>> ***@***.*** t5]$ ; >>>>>> ; >>>>>> ; >>>>>> I am unfamiliar with how to use curl with X509 and everything I tried so far has not worked. eg; >>>>>> curl -v https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Csimonliu%40triumf.ca%7C2bf615c9bb89486eaecd08d91571b94b%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564400461006280%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=9rNIbI2R5ESPtOLXdPFPq%2FjbCNRptjBM1fTLrmOZgEI%3D&reserved=0> --key ~/.globus/userkey.pem --cert ~/.globus/usercert.pem; >>>>>> or; >>>>>> curl -v https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Csimonliu%40triumf.ca%7C2bf615c9bb89486eaecd08d91571b94b%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564400461006280%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=9rNIbI2R5ESPtOLXdPFPq%2FjbCNRptjBM1fTLrmOZgEI%3D&reserved=0> --key ~/.globus/userkey.pem --cert ~/.globus/usercert.pem --capath /etc/grid-security/certificates; >>>>>> ; >>>>>> ; >>>>>> regards,; >>>>>> Asoka; >>>>>> ; >>>>>>> On May 12, 2021, at 10:18 AM, Axel Naumann ***@***.*** ***@***.***>> wrote:; >>>>>>> ; >>>>>>> ; >>>>>>> Right - without authentication I cannot see what's happening. If this is due to a redirect it would be a dupe of #8155 <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8155&data=04%7C01%7Csimonliu%40triumf.ca%7C",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840018942:8001,safe,safelinks,8001,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840018942,1,['safe'],['safelinks']
Safety,"es.cern.ch/root-jenkins/job/root-pullrequests-build/120236/console).; ### Errors:; - [2021-06-15T16:11:07.469Z] C:\build\workspace\root-pullrequests-build\build\test\Release\stressRooFit.exe : fatal error LNK1120: 1 unresolved externals [C:\build\workspace\root-pullrequests-build\build\test\stressRooFit.vcxproj] ; - [2021-06-15T16:11:36.563Z] C:\build\workspace\root-pullrequests-build\build\roofit\roofitcore\test\Release\testRooAbsPdf.exe : fatal error LNK1120: 1 unresolved externals [C:\build\workspace\root-pullrequests-build\build\roofit\roofitcore\test\testRooAbsPdf.vcxproj] ; - [2021-06-15T16:12:03.470Z] C:\build\workspace\root-pullrequests-build\build\bin\libRooStats.dll : fatal error LNK1120: 1 unresolved externals [C:\build\workspace\root-pullrequests-build\build\roofit\roostats\RooStats.vcxproj] . ### Warnings:; - [2021-06-15T15:20:25.342Z] ghprbPullLongDescription=* replace wrong `dynamic_cast&lt;RooAbsReal*&gt;` with\r\n `dynamic_cast&lt;RooAbsPdf*&gt;` (presumably a copy-paste error)\r\n\r\n* use `TIter` and range-based loop instead of `TIterator*`\r\n\r\n* avoid C-style casts\r\n\r\n* replace `assert(0)` with `std::runtime_error`, as asserts only work in\r\n debug buils\r\n\r\n* replace one orrurence of `coef-&gt;GetName()` with `pdf-&gt;GetName()`,\r\n which was probably also a copy-paste error\r\n\r\nThis fixes the following warning in gcc11:\r\n\r\n```\r\n../roofit/roofitcore/src/RooAddModel.cxx: In constructor 'RooAddModel::RooAddModel(const char*, const char*, const RooArgList&, const RooArgList&, Bool_t)':\r\n../roofit/roofitcore/src/RooAddModel.cxx:125:106: warning: 'this' pointer is null [-Wnonnull]\r\n 125 | coutE(InputArguments) &lt;&lt; \""RooAddModel::RooAddModel(\"" &lt;&lt; GetName() &lt;&lt; \"") pdf \"" &lt;&lt; pdf-&gt;GetName() &lt;&lt; \"" is not of type RooAbsPdf, ignored\"" &lt;&lt; endl ;\r\n```\r\n\r\nThis PR superseeds PR https://github.com/root-project/root/pull/8432 and addresses issue https://github.com/root-project/root/issues/8129.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8434#issuecomment-861634132:1221,avoid,avoid,1221,https://root.cern,https://github.com/root-project/root/pull/8434#issuecomment-861634132,1,['avoid'],['avoid']
Safety,"ess `c_str()` conversions in RooFitHS3; [RF][HS3] New `wsEmplace()` method for creating objects in workspace; [RF][HS3] New `wsImport()` function to avoid repeating command args; [RF] Less manual memory management in RooAbsArg and RooProdGenContext; [RF] Code modernization of RooAbsReal; [RF][HS3] Renaming some distributions to conform with HS3 standard; [RF][HS3] Use HistFunc variables instead of underlying hist variables; [RF] Added protection against invalid variable names in createHistogram; [RF][HS3] Correct error messages when IO keys are missing; [RF][HS3] Code improvements in HS3 HistFactory; [RF][HS3] Small HS3 closure fixes; [RF][HS3] Import HistFactory constraints directly upon creation; [RF][HS3] Cleanup of generic functions to avoid using arguments; [RF][HS3] Don't import embedded data directly to RooWorkspace; [RF] Avoid false warnings in RooAbsReal::createHistogram(); [RF][HS3] Reduce verbosity of unit tests; [RF][HS3] Less usage of TString; [RF][HS3] Avoid code duplication when requesting RooArgLists and Sets; [RF][HS3] Remove unused functions from JSONFactories_HistFactory; [RF][HS3] Export `staterror` correctly for HistFactory; [RF][HS3] Major restructuring of HistFactory in HS3 - part 2; [RF][HS3] Major refactoring of `JSONFactories_HistFactory`; [RF][HS3] Correctly consider weight errors in `readBinnedData()`; [RF][HS3] Small code style improvement (renaming); [RF][HS3] Make `testHS3HistFactory` less verbose; [RF][HS3] Changed some JSON keywords to comply with new HS3 standard; [RF][HS3] Moved `DependencyMissingError` to public to make it catchable; [RF][HS3] Support MultiVarGaussian and TF1Binding plus code cleanup; [RF][HS3] Added helper function for writing matrices in JSONInterface; [RF][HS3] JSON IO of positive definite flag in PiecewiseInterpolation; [RF] Added getters to TFnBinding, MultiVarGauss, PiecewiseInterpolation; [RF] Avoid invalid pointer access in `RooAbsPdf::printStream()`; [RF] Add intiial minimizer interface for RooFuncWrapper.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12590#issuecomment-1491813664:6913,Avoid,Avoid,6913,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664,2,['Avoid'],['Avoid']
Safety,"est ; GNU gdb (Gentoo 10.1 vanilla) 10.1; Copyright (C) 2020 Free Software Foundation, Inc.; License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>; This is free software: you are free to change and redistribute it.; There is NO WARRANTY, to the extent permitted by law.; Type ""show copying"" and ""show warranty"" for details.; This GDB was configured as ""x86_64-pc-linux-gnu"".; Type ""show configuration"" for configuration details.; For bug reporting instructions, please see:; <https://bugs.gentoo.org/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>. For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from root/multicore/processExecutorH1Test...; (gdb) run; Starting program: /srv/root/roottest-build/root/multicore/processExecutorH1Test ; warning: File ""/usr/lib/root/9999/lib/libCore.so.6.25.01-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; 	add-auto-load-safe-path /usr/lib/root/9999/lib/libCore.so.6.25.01-gdb.py; line to your configuration file ""/home/amadio/.gdbinit"".; To completely disable this security protection add; 	set auto-load safe-path /; line to your configuration file ""/home/amadio/.gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; 	info ""(gdb)Auto-loading safe path""; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib64/libthread_db.so.1"".; +++ Executing tProcessExecutorH1Test ......................................... +++; [Detaching after vfork from child process 340387]; [Detaching after vfork from child process 340389]; [Detaching after vfork from child process 340391]; [Detaching after vfork from child process 340393]; [Detaching after vfork from child process 341564]; [Detaching aft",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936#issuecomment-823920792:1097,safe,safe-path,1097,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-823920792,1,['safe'],['safe-path']
Safety,"est/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 8 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 8 tests from MiniFile; [ RUN ] MiniFile.Raw; [ OK ] MiniFile.Raw (0 ms); [ RUN ] MiniFile.Stream; Error in <TFile::ReadBuffer>: error reading all requested bytes from file test_ntuple_minifile_stream.root, got 0 of 6816316; Error in <TFile::Init>: test_ntuple_minifile_stream.root failed to read the file header information at 1677721600 (size=6816316); /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_minifile.cxx:84: Failure; Value of: file; Actual: false; Expected: true; [ FAILED ] MiniFile.Stream (191 ms); [ RUN ] MiniFile.Proper; Fatal: nread == nbytes violated at line 1083 of `/builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RMiniFile.cxx'; aborting; [ --- ]; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-rdf. $ printf '%x\n' 1677721600; 64000000. Header length shoud be 0x00000064 = 100; ~~~; 491/1272 Test #431: gtest-tree-ntuple-v7-test-ntuple-rdf ................................***Failed 74.39 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 1 test from 1 test suite.; [----------] Global test environment set-up.; [----------] 1 test from RNTuple; [ RUN ] RNTuple.RDF; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:9737,abort,aborting,9737,https://root.cern,https://github.com/root-project/root/issues/12426,1,['abort'],['aborting']
Safety,"evert ""[RF] Make RooBatchCompute dependency public.""; [RF] Move loop management for code generation into CodeSquashContext; [RF] Avoid need for buildLoopBegin() by recursive calls to translate(); [RF] Add 'translate' to RooNllVarNew.; [RF] Remove function declarations in RooStats LinkDef.h; [RF] Apply clang-format to ModelConfig.h and ModelConfig.cxx; [RF] Move `ModelConfig` from RooStats to RooFit; [RF] Don't add `weightVar` to observables in HistFactory; [RF] Minor improvements to RooFit evaluation code generation; [RF][NFC] Fix typo.; [RF] Disable RooFuncWrapper test if clad is off.; [RF] Remove wrong header declaration from roofit/roofit.; [RF] Fix visibility of the res/ directories.; [RF] Make RooBatchCompute dependency public.; [RF] Add initial interface and implementation for code-squashing.; [RF][HS3] Put exported `histosys` in the correct vector; [RF][HS3] Avoid creating temporary objects to import into workspace; [RF][HS3][HF] General cleanup of HS3 HistFactory implementation; [RF][HS3] Cover also `HistoSys` in HS3 HistFactory test; [RF] Enable passing of gradient function directly to RooMinimizer; [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory variables; [RF][HS3] Don't import datasets that are parts of a combined dataset; [RF][HS3] Some code simplification in `RooJSONFactoryWSTool`; [RF][HS3] Generate input file for testHS3HistFactory on the fly; [RF][HS3] Improveme",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12590#issuecomment-1491813664:1727,Avoid,Avoid,1727,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664,1,['Avoid'],['Avoid']
Safety,"ext; hadd Target file: ../merged.root; hadd compression setting for all output: 1; hadd Source file 1: ntuple1.root; hadd Source file 2: ntuple2.root; hadd Sources and Target have different compression levels; hadd merging will be slower; hadd Target path: ../merged.root:/; Fatal in <TFileMerger::MergeRecursive>: Merging objects that don't inherit from TObject is unimplemented (key: ntuple in file ntuple2.root); aborting; grep: warning: GREP_OPTIONS is deprecated; please use an alias or script; #0 0x00007f2dfd7ec07a in __GI___waitpid (pid=20605, stat_loc=stat_loc; entry=0x7fffc72e6c90, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29; #1 0x00007f2dfd764fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007f2dfe92beb6 in TUnixSystem::StackTrace() () from /home/max/projects/root/new-errors/lib/libCore.so; #3 0x00007f2dfe7fe1aa in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/max/projects/root/new-errors/lib/libCore.so; #4 0x00007f2dfe8b9be8 in ErrorHandler () from /home/max/projects/root/new-errors/lib/libCore.so; #5 0x00007f2dfe810e29 in TObject::Fatal(char const*, char const*, ...) const () from /home/max/projects/root/new-errors/lib/libCore.so; #6 0x00007f2dfeed49e3 in TFileMerger::MergeRecursive(TDirectory*, TList*, int) () from /home/max/projects/root/new-errors/lib/libRIO.so; #7 0x00007f2dfeed2e41 in TFileMerger::PartialMerge(int) () from /home/max/projects/root/new-errors/lib/libRIO.so; #8 0x0000000000406c8d in main::{lambda(TFileMerger&, int, int)#2}::operator()(TFileMerger&, int, int) const [clone .constprop.0] (); #9 0x0000000000404ccd in main (); #10 0x00007f2dfd740830 in __libc_start_main (main=0x403fa0 <main>, argc=5, argv=0x7fffc72ea358, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffc72ea348) at ../csu/libc-start.c:291; #11 0x0000000000406199 in _start (); zsh: abort (core dumped) ../bin/hadd -f ../merged.root ntuple1.root ntuple2.root; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6008#issuecomment-662581836:2208,abort,abort,2208,https://root.cern,https://github.com/root-project/root/pull/6008#issuecomment-662581836,1,['abort'],['abort']
Safety,"f.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root ; >>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Csimonliu%40triumf.ca%7C2bf615c9bb89486eaecd08d91571b94b%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564400461006280%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=9rNIbI2R5ESPtOLXdPFPq%2FjbCNRptjBM1fTLrmOZgEI%3D&reserved=0> ; >>>>> --key ~/.globus/userkey.pem --cert ~/.globus/usercert.pem --capath ; >>>>> /etc/grid-security/certificates; >>>>>; >>>>>; >>>>> regards,; >>>>> Asoka; >>>>>; >>>>>> On May 12, 2021, at 10:18 AM, Axel Naumann ; >>>>>> ***@***.*** ***@***.***>> wrote:; >>>>>>; >>>>>>; >>>>>> Right - without authentication I cannot see what's happening. ; >>>>>> /If/ this is due to a redirect it would be a dupe of #8155 ; >>>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8155&data=04%7C01%7Csimonliu%40triumf.ca%7C2bf615c9bb89486eaecd08d91571b94b%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564400461016279%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=Sfm43%2BJmWVsFVHOn7Tob%2BXe4STr003%2FgQQiBpBRgur0%3D&reserved=0> ; >>>>>> - if not then it's different :-) But I don't know how to tell ; >>>>>> whether it's a redirect. Do you?; >>>>>>; >>>>>> If not let's get #8155 ; >>>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8155&data=04%7C01%7Csimonliu%40triumf.ca%7C2bf615c9bb89486eaecd08d91571b94b%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564400461016279%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=Sfm43%2BJmWVsFVHOn7Tob%2BXe4STr003%2FgQQiBpBRgur0%3D&reserved=0> ; >>>>>> fixed and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840016493:8239,safe,safelinks,8239,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840016493,1,['safe'],['safelinks']
Safety,"f/dl-error-skeleton.c:208; #22 0x00007f7901b74973 in __GI__dl_catch_error (objname=0x7ffeb2a74918, errstring=0x7ffeb2a74920, mallocedp=0x7ffeb2a74917, operate=<optimized out>, args=<optimized out>) at ./elf/dl-error-skeleton.c:227; #23 0x00007f7901a9012e in _dlerror_run (operate=operate; entry=0x7f7901a905e0 <dlopen_doit>, args=args; entry=0x7ffeb2a74960) at ./dlfcn/dlerror.c:138; #24 0x00007f7901a906c8 in dlopen_implementation (dl_caller=<optimized out>, mode=<optimized out>, file=<optimized out>) at ./dlfcn/dlopen.c:71; #25 ___dlopen (file=<optimized out>, mode=<optimized out>) at ./dlfcn/dlopen.c:81; #26 0x00007f7902a01a07 in TROOT::InitInterpreter() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so; #27 0x00007f7902a01bcf in ROOT::Internal::GetROOT2() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so; #28 0x00007f79029ae41d in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so; #29 0x00005572a86f2327 in main ; Aborted (core dumped); ```. *****************************************************************************************************************************; run the demo macro of TMapFile, similar error appears,; ```; Fatal in <operator new>: with std::align_val_t is not implemented yet; aborting; #0 0x00007f1de22ea3ea in __GI___wait4 (pid=10442, stat_loc=stat_loc; entry=0x7ffc77af3ad8, options=options; entry=0, usage=usage; entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30; #1 0x00007f1de22ea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc; entry=0x7ffc77af3ad8, options=options; entry=0) at ./posix/waitpid.c:38; #2 0x00007f1de2250bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171; #3 0x00007f1de3b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so; #4 0x00007f1de39d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so; #5 0x00007f1de3a96fe9 in E",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13511#issuecomment-1867607489:4531,Abort,Aborted,4531,https://root.cern,https://github.com/root-project/root/issues/13511#issuecomment-1867607489,1,['Abort'],['Aborted']
Safety,"f7ce9d04875 ""<string>"", mod=<optimized out>) at /workspace/build/externals/Python-2.7.16/src/Python/2.7.16/Python/pythonrun.c:1385; #33 PyRun_StringFlags (str=str; entry=0x1c67010 ""from PyCool import cool; cool.FieldSelectionn"", start=start; entry=257, globals=0x7f7cea140168, locals=0x7f7cea140168, flags=flags; entry=0x7ffc3c9f58ec) at /workspace/build/externals/Python-2.7.16/src/Python/2.7.16/Python/pythonrun.c:1348; #34 0x00007f7ce9cd8a9b in PyRun_SimpleStringFlags (command=command; entry=0x1c67010 ""from PyCool import cool; cool.FieldSelectionn"", flags=flags; entry=0x7ffc3c9f58ec) at /workspace/build/externals/Python-2.7.16/src/Python/2.7.16/Python/pythonrun.c:983; #35 0x00007f7ce9cebe0f in Py_Main (argc=3, argv=<optimized out>) at /workspace/build/externals/Python-2.7.16/src/Python/2.7.16/Modules/main.c:589; #36 0x00007f7ce8ee1555 in __libc_start_main () from /lib64/libc.so.6; #37 0x00000000004006be in _start (); ===========================================================. *** Break *** abort. ===========================================================; There was a crash (kSigAbort).; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007f7ce8f8446c in waitpid () from /lib64/libc.so.6; #1 0x00007f7ce8f01f62 in do_system () from /lib64/libc.so.6; #2 0x00007f7ce1c6d484 in TUnixSystem::Exec (this=0x1d21040, shellcmd=0x11c2f7d0 ""/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Mon/ROOT/HEAD/x86_64-centos7-gcc8-dbg/etc/gdb-backtrace.sh 27438 1>&2"") at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120; #3 0x00007f7ce1c6dce0 in TUnixSystem::StackTrace (this=0x1d21040) at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411; #4 0x00007f7ce216f258 in (anonymous namespace)::do_trace (sig=5) at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182; #5 0x00007f7ce216f2e5 in (ano",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6359#issuecomment-694290624:13160,abort,abort,13160,https://root.cern,https://github.com/root-project/root/issues/6359#issuecomment-694290624,1,['abort'],['abort']
Safety,"far to little context to understand what you are trying to solve here. I assume something broke when you switched to C++20. C++20 (leaving `operator<=>` on the side for now) introduced comparison rewrite rules which may be a potential cause. E.g. an expression `tstring == charptr` can now be rewritten by the compiler to `operator==(charptr, tstring)`. This is further complicated by the presence of non-`explicit` unary constructors, since the compiler can use such constructors to perform conversions in order to be able to rewrite comparisons. Looking at `TString.h`, I see lots of non-explicit constructors, non-explicit conversion operators (to `std::string_view` and `std::string`) in the header file (clang-tidy fills up the file with warnings on these). I strongly suspect that the compiler could somehow rewrite a comparison using any of the conversions and find a better match. I strongly believe adding `operator<=>` does not solve anything but just hides an existing problem. Also this block:; ```c++; #ifndef WIN32; // To avoid ambiguities.; inline Bool_t operator==(const char *s1, const std::string_view &s2) { ... }; inline Bool_t operator==(const std::string_view &s1, const char *s2) { ... }; #endif; ```; fosters my believe that there is already something fishy. I would advice to step through a failing unit test in C++20 mode and observe what overloads and conversions are picked .; I am also scared by e.g. defining `operator==(const TString &s1, const char *s2);` at the beginning of the file and the symmetric `operator==(const char *s1, const TString &s2)` at the end. If there is any call to ` charptr == tstring` anywhere in-between, you would get a conversion in C++17 `TString(charptr) == tstring` and a rewrite in C++20, which could change behavior if there is an inconsistency anywhere. I would advice to refactor and keep asymmetric operators close together. (And just a though: you could just delete all comparisons, and rely on the conversion to `std::string_view`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12525#issuecomment-1479606106:1193,avoid,avoid,1193,https://root.cern,https://github.com/root-project/root/pull/12525#issuecomment-1479606106,1,['avoid'],['avoid']
Safety,"fc57/x86_64-centos7/bin/gcc; -- Could NOT find Z3: Found unsuitable version ""0.0.0"", but required is at least ""4.7.1"" (found Z3_LIBRARIES-NOTFOUND); -- Looking for backtrace; -- Looking for backtrace - found; -- backtrace facility detected in default set of libraries; -- Found Backtrace: /usr/include; -- Native target architecture is X86; -- Threads disabled.; -- Doxygen disabled.; -- Go bindings disabled.; -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH); -- OCaml bindings disabled.; -- Could NOT find Python module pygments; -- Could NOT find Python module pygments.lexers.c_cpp; -- Could NOT find Python module yaml; -- LLVM host triple: x86_64-unknown-linux-gnu; -- LLVM default target triple: x86_64-unknown-linux-gnu; -- Building with -fPIC; -- Found PythonInterp: /build/jenkins/workspace/lcg_nightly_pipeline/install/dev3/Python/3.9.6/x86_64-centos7-gcc9-dbg/bin/python (found version ""3.9.6""); -- Constructing LLVMBuild project information; -- Linker detection: GNU ld; -- Targeting X86; -- Targeting NVPTX; -- Clang version: 9.0.1; -- Cling version (from VERSION file): ROOT_1.0~dev; -- Cling will look for C++ headers in '/cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/../lib/gcc/x86_64-pc-linux-gnu/9.2.0/../../../../include/c++/9.2.0:/cvmfs/sft.ce; rn.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/../lib/gcc/x86_64-pc-linux-gnu/9.2.0/../../../../include/c++/9.2.0/x86_64-pc-linux-gnu:/cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc; 57/x86_64-centos7/bin/../lib/gcc/x86_64-pc-linux-gnu/9.2.0/../../../../include/c++/9.2.0/backward' at runtime.; -- And then fallback to: 'g++'; -- Performing Test CXX_HAS_fno_rtti; -- Performing Test CXX_HAS_fno_rtti - Success; -- Performing Test C_HAS_Wno_strict_overflow; -- Performing Test C_HAS_Wno_strict_overflow - Success; -- Performing Test C_HAS_Wno_maybe_uninitialized; -- Performing Test C_HAS_Wno_maybe_uninitialized - Success; -- Performing Test C_HAS_Wno_parentheses_equality; -- Perf",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9594#issuecomment-1015634743:16865,detect,detection,16865,https://root.cern,https://github.com/root-project/root/issues/9594#issuecomment-1015634743,1,['detect'],['detection']
Safety,"find_package(Python) seems to have the following unsexpected behavior:; if Python_EXECUTABLE is specified to e.g. /usr/bin/python3 and; DEVELOPMENT is required but not found, then CMake looks for the; development package of python2. If it succeeds, Python_INCLUDE_DIRS and; Python_LIBRARIES are set as a consequently. This brings to a mismatch; between the variables set, since they refer to different python; versions.; ; To avoid this, we use find_package(PythonX) also for the build with one; version of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5579:426,avoid,avoid,426,https://root.cern,https://github.com/root-project/root/pull/5579,1,['avoid'],['avoid']
Safety,"for all builds since it is subject to timeouts when the build happens from scratch. This is of course a temporary measure, until we find a future proof solution for this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16355:38,timeout,timeouts,38,https://root.cern,https://github.com/root-project/root/pull/16355,1,['timeout'],['timeouts']
Safety,"force-pushed just to fix a clang-format issue, the previous build was green, merging (EDIT: and I aborted the latest jenkins build)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10894#issuecomment-1175920956:98,abort,aborted,98,https://root.cern,https://github.com/root-project/root/pull/10894#issuecomment-1175920956,1,['abort'],['aborted']
Safety,"forming download step (download, verify and extract) for 'BUILTIN_cppzmq'; -- Downloading...; dst='/home/ubuntu/build/ninja/builtins/zeromq/cppzmq/BUILTIN_cppzmq-prefix/src/cppzmq-4.8.1.tar.gz'; timeout='none'; inactivity timeout='none'; -- Using src='http://lcgpackages.web.cern.ch/lcgpackages/tarFiles/sources/cppzmq-4.8.1.tar.gz'; -- [download 100% complete]; -- verifying file...; file='/home/ubuntu/build/ninja/builtins/zeromq/cppzmq/BUILTIN_cppzmq-prefix/src/cppzmq-4.8.1.tar.gz'; -- Downloading... done; -- extracting...; src='/home/ubuntu/build/ninja/builtins/zeromq/cppzmq/BUILTIN_cppzmq-prefix/src/cppzmq-4.8.1.tar.gz'; dst='/home/ubuntu/build/ninja/builtins/zeromq/cppzmq/BUILTIN_cppzmq-prefix/src/BUILTIN_cppzmq'; -- extracting... [tar xfz]; -- extracting... [analysis]; -- extracting... [rename]; -- extracting... [clean up]; -- extracting... done; [287/527] Generating G__ROOTHist.cxx, ../../lib/ROOTHist.pcm. ... [106/527] Performing download step (download, verify and extract) for 'BUILTIN_cppzmq'; -- Downloading...; dst='/home/ubuntu/build/ninja/builtins/zeromq/cppzmq/BUILTIN_cppzmq-prefix/src/cppzmq-4.8.1.tar.gz'; timeout='none'; inactivity timeout='none'; -- Using src='http://lcgpackages.web.cern.ch/lcgpackages/tarFiles/sources/cppzmq-4.8.1.tar.gz'; -- [download 100% complete]; -- verifying file...; file='/home/ubuntu/build/ninja/builtins/zeromq/cppzmq/BUILTIN_cppzmq-prefix/src/cppzmq-4.8.1.tar.gz'; -- Downloading... done; -- extracting...; src='/home/ubuntu/build/ninja/builtins/zeromq/cppzmq/BUILTIN_cppzmq-prefix/src/cppzmq-4.8.1.tar.gz'; dst='/home/ubuntu/build/ninja/builtins/zeromq/cppzmq/BUILTIN_cppzmq-prefix/src/BUILTIN_cppzmq'; -- extracting... [tar xfz]; -- extracting... [analysis]; -- extracting... [rename]; -- extracting... [clean up]; -- extracting... done; [526/527] Generating lib/modules.idx. [527/527] Generating tutorials/hsimple.root. Processing hsimple.C...; hsimple : Real Time = 0.10 seconds Cpu Time = 0.10 seconds; (TFile *) 0x562048c754d0; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16227#issuecomment-2288847307:1804,timeout,timeout,1804,https://root.cern,https://github.com/root-project/root/issues/16227#issuecomment-2288847307,2,['timeout'],['timeout']
Safety,"from one entry to another.; It can happen that the size of C arrays stored in branches varies a lot; from event to event. It can happen also that a very small array becomes; suddently very big. This triggers a reallocation of the buffer ROOT; uses internally to hold the read content.; When snapshotting, RDataFrame, was setting the addresses of the output; tree only once at the 1st event processed (per slot). This of course could; lead to the persistification of corrupted values. This change allow to keep track of the changing addresses and properly; handle them via the TBranch::SetAddress method. A test is also added to the suite in order to avoid regressions in the; future. Nota bene: this **does also** fix ROOT-9860",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3153:650,avoid,avoid,650,https://root.cern,https://github.com/root-project/root/pull/3153,1,['avoid'],['avoid']
Safety,g interactive line includer &gt;&gt;&gt;: fatal error: module file '/build/workspace/root-pullrequests-build/build/tree/tree/test/libc.pcm' not found: module file not found . ### Warnings:; - [2020-09-27T10:46:13.218Z] /build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Utils/PlatformPosix.cpp:73:44: warning: type qualifiers ignored on cast result type [-Wignored-qualifiers] ; - [2020-09-27T10:46:16.716Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:212:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:46:16.716Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:427:27: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:46:16.716Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:450:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:49:19.928Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Pass.h:105:16: warning: ‘virtual bool llvm::Pass::doInitialization(llvm::Module&)’ was hidden [-Woverloaded-virtual] ; - [2020-09-27T10:49:19.928Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Transforms/IPO/Inliner.h:39:8: warning: by ‘virtual bool llvm::LegacyInlinerBase::doInitialization(llvm::CallGraph&)’ [-Woverloaded-virtual] ; - [2020-09-27T10:49:35.454Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:212:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:49:35.454Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:427:27: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:49:35.454Z] /build/workspace/root-pullrequests-build/root,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-699619048:1436,redund,redundant,1436,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-699619048,1,['redund'],['redundant']
Safety,"g webdav.lcg.triumf.ca ; > <http://webdav.lcg.triumf.ca>; > PING (137.138.28.175) 56(124) bytes of data.; >; > --- ping statistics ---; > 10 packets transmitted, 0 received, 100% packet loss, time 8999ms; >; > ***@***.*** ~]$; >; > Vitaliy, shouldn't we expect that to be accessible from lxplus ?; >; > regards,; > Asoka; >; >> On May 12, 2021, at 10:37 AM, Di Qing ***@***.*** ; >> ***@***.***>> wrote:; >>; >> Maybe the connections were from commodity network? Are you able to ; >> ping webdav.lcg.triumf.ca <http://webdav.lcg.triumf.ca>?; >>; >> Thanks,; >>; >> Di; >>; >>> On May 12, 2021, at 10:29 AM, Asoka De Silva ***@***.*** ; >>> ***@***.***>> wrote:; >>>; >>> ﻿ Hi Axel,; >>>; >>> I don't know but I'll add Simon and Di who are the Tier-1 experts ; >>> and may have ideas.; >>>; >>> Simon and Di, Axel has this issue and me a similar one - any ideas ?; >>>; >>>; >>>>; >>>>> s I crosscheck (to see whether it's related to the Davix redirect ; >>>>> issue #8155 ; >>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8155&data=04%7C01%7Cdqing%40triumf.ca%7Cb7cde810efc1452a4eab08d9156d8727%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564382428498460%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=uCliumeh1X0KTsDzvHcojQm9qfvqZ96DsLCqoTBDdgs%3D&reserved=0> ) ; >>>>> I tried with curl but I get; >>>>>; >>>>> |$ curl -v ; >>>>> https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root ; >>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Cdqing%40triumf.ca%7Cb7cde810efc1452a4eab08d9156d8727%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564382428498460%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=10rGCkpmGr%2B9fH%2B",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-839989913:1281,safe,safelinks,1281,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-839989913,1,['safe'],['safelinks']
Safety,g::AutoLoad>: Trying to autoload for TObjectEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TObjectEditor. TClass::GetClass: Header Parsing - The representation of TObjectEditor was not found in the type system. A lookup in the interpreter is about to be tried: this can cause parsing. This can be avoided selecting TObjectEditor in the linkdef/selection file.; Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for TObjectEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TObjectEditor. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for TObjectEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TObjectEditor. Info in <TInterpreter::TCling::AutoLoad>: Trying to autoload for TObjectEditor; TEnum::GetEnum: Header Parsing - The enumerator TObjectEditor is not known to the typesystem: an interpreter lookup will be performed. This can imply parsing of headers. This can be avoided selecting the numerator in the linkdef/selection file.; Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for TObjectEditor; Info in <TInterpreter::TCling::AutoLoad>: Trying to autoload for TObjectEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TObjectEditor. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for TObjectEditor; Info in <TInterpreter::TCling::AutoLoad>: Trying to autoload for TObjectEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TObjectEditor. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for TObjectEditor; Info in <TInterpreter::TCling::AutoLoad>: Trying to autoload for TObjectEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TObjectEditor. Info in <TInterpreter::TCling::AutoLoad>: Trying to autoload for TGWin32; Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for kMaxEntries; Info in <TInterpreter::TCling::AutoLoad>: Trying to autoload for kMaxEntries; ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15963#issuecomment-2200648481:30286,avoid,avoided,30286,https://root.cern,https://github.com/root-project/root/issues/15963#issuecomment-2200648481,1,['avoid'],['avoided']
Safety,"g; `RNTupleView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior; The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:; ```c++; auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");; {; auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");; {; auto copy{std::move(viewH1IsMuon)};; } // dtor for copy, frees shared state; } // dtor for viewH1IsMuon, double free; ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup; ```; bgruber@graviola:$ root --version; ROOT Version: 6.29/01; Built for linuxx8664gcc on Jan 16 2023, 14:47:00; From remotes/origin/HEAD@v6-29-01-212-gc8ad008463; ```; Built with g++-12 on Ubunt",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12136:1095,detect,detect,1095,https://root.cern,https://github.com/root-project/root/issues/12136,1,['detect'],['detect']
Safety,"gDirectory is now backed by an atomic thread local pointer so that the thread deleting a TFile can update other thread's gDirectory.; TDirectory now has a `std::vector<std::atomic<TDirectory*>*>` to keep track of the gDirectory's thread local pointing to the TDirectory.; TDirectory::TContext was already thread safe.; gDirectory is a macro that now actualy 'return' a TDirectoryAtomicAdapter which provides an adaption from std::atomic<TDirectory*> to the; outstanding usage (i.e. behave somewhat like a TDirectory*).; TDirectory::CurrentDirectory now returns a reference to a `std::atomic<TDirectory*>`. Note: due to the actual (but intended to be unnoticeable) change in the type of gDirectory, there is no plan to backport this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6952:312,safe,safe,312,https://root.cern,https://github.com/root-project/root/pull/6952,1,['safe'],['safe']
Safety,"g]$ if(true) {auto h1 = new int(any_undeclared_variable_here);}; input_line_4:2:30: error: use of undeclared identifier 'any_undeclared_variable_here'; if(true) {auto h1 = new int(any_undeclared_variable_here);}; ^; ```. In root, the first example gives a syntax error instead (which is already wrong). This is because `ROOT` tries to resolve `any_undeclared_variable_here` at runtime:; ```; root [0] auto h1 = new int(any_undeclared_variable_here);; ROOT_prompt_0:1:1: error: Syntax error; auto h1 = new int(any_undeclared_variable_here);; ^; FunctionDecl 0x55555714b7c8 <input_line_8:1:1, ROOT_prompt_0:3:1> input_line_8:1:6 __cling_Un1Qu30 'void (void *)'; |-ParmVarDecl 0x55555714b710 <col:22, col:28> col:28 vpClingValue 'void *'; |-CompoundStmt 0x555557161e30 <col:42, ROOT_prompt_0:3:1>; | |-DeclStmt 0x555557161e10 <line:1:1, col:48>; | | `-VarDecl 0x55555714b918 <col:1, col:47> col:6 h1 'int *':'int *' cinit; | | `-CXXNewExpr 0x555557161ce8 <col:11, col:47> 'int *' Function 0x55555714bb40 'operator new' 'void *(std::size_t)'; | | `-ParenListExpr 0x55555714bad0 <col:18, col:47> 'NULL TYPE'; | | `-DeclRefExpr 0x55555714ba90 <col:19> '<dependent type>' lvalue Var 0x55555714b988 'any_undeclared_variable_here' '<dependent type>'; | `-NullStmt 0x555557161e28 <line:2:1>; `-AnnotateAttr 0x55555714b9f0 <<invalid sloc>> Implicit R""ATTRDUMP(__ResolveAtRuntime)ATTRDUMP""; <<<NULL>>>; root [1] ; ```. And we get a segfault when added inside an if clause: ; ```; root [1] if(true) {auto h1 = new int(any_undeclared_variable_here);}; root.exe: /home/dvalapar/work/root/dev.bug-fixes/interpreter/llvm-project/clang/include/clang/AST/Type.h:752: const clang::ExtQualsTypeCommonBase* clang::QualType::getCommonPtr() const: Assertion `!isNull() && ""Cannot retrieve a NULL type pointer""' failed. Program received signal SIGABRT, Aborted.; __pthread_kill_implementation (no_tid=0, signo=6, threadid=140737352911424) at ./nptl/pthread_kill.c:44; 44 ./nptl/pthread_kill.c: No such file or directory.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13252#issuecomment-2082487744:2103,Abort,Aborted,2103,https://root.cern,https://github.com/root-project/root/issues/13252#issuecomment-2082487744,1,['Abort'],['Aborted']
Safety,"gcc9-dbg/include/GaudiKernel/StatEntity.h:12:; In file included from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Tue/x86_64-centos7-gcc9-dbg/include/Gaudi/Accumulators.h:14:; In file included from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Tue/x86_64-centos7-gcc9-dbg/include/Gaudi/MonitoringHub.h:15:; In file included from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Tue/x86_64-centos7-gcc9-dbg/include/nlohmann/json.hpp:49:; In file included from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Tue/x86_64-centos7-gcc9-dbg/include/nlohmann/adl_serializer.hpp:5:; In file included from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Tue/x86_64-centos7-gcc9-dbg/include/nlohmann/detail/conversions/from_json.hpp:18:; /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Tue/x86_64-centos7-gcc9-dbg/include/nlohmann/detail/meta/type_traits.hpp:11:10: fatal error: cannot open file '/build/jenkins/workspace/lcg_nightly_pipeline/install/dev3/jsonmcpp/3.9.1/x86_64-centos7-gcc9-dbg/include/nlohmann/json_fwd.hpp': No such file or directory; #include <nlohmann/json_fwd.hpp>; ^; python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/cling/lib/Interpreter/TransactionUnloader.cpp:72: bool cling::TransactionUnloader::unloadFromPreprocessor(cling::Transaction*, cling::DeclUnloader&): Assertion `Successful && ""Cannot handle that yet!""' failed.; *** Break *** abort; ...; ```; The header file being loaded is in `/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Tue/x86_64-centos7-gcc9-dbg/include/nlohmann/json_fwd.hpp`, which is included in `ROOT_INCLUDE_PATH `. According to Vassil. This is due to some bug/feature in clang when it resolves include paths with symlinks. The problem is avoided if the realpath of the directory containing the header is prepended explicitely to `ROOT_INCLUDE_PATH`. ```; $ export ROOT_INCLUDE_PATH=/cvmfs/sft.cern.ch/lcg/releases/jsonmcpp/3.9.1-72770/x86_64-centos7-gcc9-dbg/include:$ROOT_INCLUDE_PATH; $ python -c 'import GaudiPython'; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7950:2130,abort,abort,2130,https://root.cern,https://github.com/root-project/root/issues/7950,2,"['abort', 'avoid']","['abort', 'avoided']"
Safety,"ge the setting of the property together with the ones in the protoclass (see above)? I am thinking to state transitions.; > ; > How is the state transition for the properties covered by fASTProperty differs from that of the properties covered by fClassProperty?. The difference is in the classes which are not associated to ROOT pcms. For those, fClassProperty is filled via an interpreter lookup.; ; > >> Should fASTProperty be set via TProtoClass? (for consistency); > > This leaves out the classes in the libraries with an empty pcm such as Core, RIO and Thread.; > ; > Sorta, this would also mean a second path to setting (as it is already the case for fProperty and fClassProperty). See above: the worry here is to avoid the lookup, i.e. one of these two paths. > >> Shouldn't this multiple-inheritance flag be set via/in TClass::Property (via ClassInfo_ClassProperty for example)?; > > I think I do not fully understand. ; > ; > This PR introduces a completely different paths/pattern for setting the ASTProperties and all the other properties. Technically the 'nature' of the information is similar to that of stored in ClassInfo_ClassProperty). This question was one of the way to explore why/if the ASTProperties should be treated differently. I now understand. To be checked, I do not have an answer now.; ; > >> Should fProperty and fClassProperty be set through the TClass constructor? (to benefit from the same ""all classes"" speed-up?; > > I do not understand this question :(; > ; > Similarly to the above, this question is asking *if* the fASTProperties is 'better' than the old one then shouldn't the other two be moved towards the same pattern (and the speed-up that this PR introduced would, possibly, benefit the Property and fClassProperty usage too). From this last comments and the above (which may need a few other iterations) I distil that we agree on trying to avoid a 3rd place where properties are stored, accommodating the upgrade in the existing system: is this accurate?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2319#issuecomment-412846950:1971,avoid,avoid,1971,https://root.cern,https://github.com/root-project/root/pull/2319#issuecomment-412846950,1,['avoid'],['avoid']
Safety,"ge_cast and static_range_cast #8769 (comment)](https://github.com/root-project/root/pull/8769#issuecomment-891036930): I didn't generalize TRangeDynCast and TRangeStaticCast. They are tied to TCollection and fulfill a different purpose because of that. They are also part of `ROOT::Internal`, while my new functions are supposed to be also used by the RooFit users. I would suggest we leave them as they are, but if you think the new `static_range_cast` and `dynamic_range_cast` are useful for everyone we can move the new file if you want. But where?. I was already expecting that it would be difficult to adapt those, but there will be ways to adapt them. I think it would be *better* if there's one good solution for all, but you have to decide how much time you want to invest. > 2. [[RF] New RangeCast file with dynamic_range_cast and static_range_cast #8769 (comment)](https://github.com/root-project/root/pull/8769#discussion_r680892053): I didn't add the `assert(dynamic_cast)` to the `static_range_cast` because the performance penalty it introduces in debug mode is not probably not expected by non-RooFit developers. There's not many loops out there in the world that will depend on this. If somebody uses it, they might be glad to have the extra safety. About the performance:; - When you run from the interpreter, you don't care about the performance of your loop as much.; - When you compile, you probably know what `NDEBUG` is.; - When you ACLIC-compile, I would have hoped that you get an automatic `NDEBUG` in release builds of ROOT, or when you `+O` a file. You don't, unfortunately. My preferred solution would have been to fix that and use the asserts, but it's your project now. > 3. [[RF] New RangeCast file with dynamic_range_cast and static_range_cast #8769 (comment)](https://github.com/root-project/root/pull/8769#issuecomment-890998817): I stuck with the detection of `dynamic_cast` vs. `static_cast` at compile time to also support non-polymorphic types.; > . Sounds good.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8769#issuecomment-891155267:1473,safe,safety,1473,https://root.cern,https://github.com/root-project/root/pull/8769#issuecomment-891155267,2,"['detect', 'safe']","['detection', 'safety']"
Safety,"ge`. ### To Reproduce. Clone ROOT, create `build_win` folder, run:; ```; PS C:\dev\root\build_win> cmake -DCMAKE_TOOLCHAIN_FILE=D:\dev\vcpkg\scripts\buildsystems\vcpkg.cmake ..; -- Building for: Visual Studio 16 2019; -- Selecting Windows SDK version 10.0.19041.0 to target Windows 10.0.19042.; -- The C compiler identification is MSVC 19.29.30037.0; -- The CXX compiler identification is MSVC 19.29.30037.0; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30037/bin/Hostx64/x64/cl.exe - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30037/bin/Hostx64/x64/cl.exe - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Git: C:/Program Files/Git/cmd/git.exe (found version ""2.30.0.windows.2""); -- Detected ROOT_VERSION 6.25.01; -- Looking for Python; -- Could NOT find Python3 (missing: Python3_NumPy_INCLUDE_DIRS NumPy) (found version ""3.9.2""); -- Could NOT find Python2 (missing: Python2_EXECUTABLE Python2_LIBRARIES Python2_INCLUDE_DIRS Python2_NumPy_INCLUDE_DIRS Interpreter Development NumPy Development.Module Development.Embed); Reason given by package:; Interpreter: Wrong major version for the interpreter ""C:/Program Files/Python39/python.exe"". -- Looking for pthread.h; -- Looking for pthread.h - not found; -- Found Threads: TRUE; -- Performing Test GLIBCXX_USE_CXX11_ABI; -- Performing Test GLIBCXX_USE_CXX11_ABI - Failed; -- ROOT Platform: win32; -- ROOT Compiler: MSVC 19.29.30037.0; -- ROOT Processor: AMD64; -- ROOT Architecture: win32; -- Build Type: '' (flags = ''); -- Compiler Flags: -nologo -IC:/dev/root/build/win -FIw32pragma.h -FIsehmap.h -Zc:__cplusplus -MD -GR",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8633:1758,Detect,Detecting,1758,https://root.cern,https://github.com/root-project/root/issues/8633,2,['Detect'],['Detecting']
Safety,"get energy and transverse energy; float e();; float et();; };; ```. * Now, consider 3 stages of evolution for Position:. 1. Simplest implementation is to have Cartesian coordinates as private attributes;. 2. The users find that they most often use radius and azimuth, hence decide to store spherical coordinates instead of (x,y,z);. 3. Actually, colliders use eta more often than theta, so that the internal state is now given by (r, phi, eta). * In parallel and independently, Hit also evolves:. a. Simplest implementation is to have only the energy as private member;. b. Because the number of requests for the transverse energy is very high, the users want to optimize the speed by keeping Et as private member;. c. Well, it happens that disk space is short and e() is rarely called, so that it makes sense to reduce the size of the Hit class by dropping the energy member and computing the energy just when calling the method e(). They also found that the detector parameters used to store data in version b are wrong, so that one needs to scale the energy by 1.3 only for version b (a and c are correct). Could you please provide a working example in which data are saved and fetched with different combinations of (1, 2, 3)x(a, b, c) (at least with 1a, 2b, 3c)?. * The next step is to consider collections of objects:. i) define. ```cpp; class Track { /* particle trajectory */. private:; std::vector< Hit > m_hits;. };; ```. ii) Because the crazy developers of Hit decided to make such class variable size, one needs to store a vector of pointers instead of objects:. ```cpp; class Track { /* particle trajectory */. private:; std::vector< Hit* > m_hits;. };; ```. iii) Disk space is very short! We cannot waste the single 32-bits word used by the STL vector... ```cpp; class Track { /* particle trajectory */. private:; unsigned int m_Nhits;; Hit* m_hits; //[m_Nhits]. };; ```. Please, provide some working example that shows how to write and read all these 3 evolutions of Track (you may use",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14540:1575,detect,detector,1575,https://root.cern,https://github.com/root-project/root/issues/14540,1,['detect'],['detector']
Safety,"ght/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 889: Environment variables:; 889: ROOT_HIST=0; 889: Test timeout computed to be: 1500; 889: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 889: error code: -529697949; 889:; 889:; 12/16 Test #889: tutorial-dataframe-df017_vecOpsHEP-py ....................***Failed 5.05 sec; test 890; Start 890: tutorial-dataframe-df019_Cache-py. 890: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df019_Cache.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 890: Environment variables:; 890: ROOT_HIST=0; 890: Test timeout computed to be: 1500; 890: Error in <TChain::LoadTree>: Cannot find tree with name ÉB D═ in file C:\Users\sftnight\build\release\tutorials\hsimple.root; 890: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 890: error code: -529697949; 890:; 890:; 13/16 Test #890: tutorial-dataframe-df019_Cache-py ........................***Failed Error regular expression found in output. Regex=[Error in] 4.65 sec; test 891; Start 891: tutorial-dataframe-df021_createTGraph-py. 891: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df021_createTGraph.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 891: Environment variables:; 891: ROOT_HIST=0; 891: Test timeout computed to be: 1500; 891: input_line_39:2:28: error: use of u",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6083#issuecomment-665456331:12943,timeout,timeout,12943,https://root.cern,https://github.com/root-project/root/pull/6083#issuecomment-665456331,1,['timeout'],['timeout']
Safety,"gle AMD EPYC 7702P 64-Core Processor), the test as is use close to 94% of all cpus and only a little system time:; ```; User time (seconds): 7250.76; System time (seconds): 3.58; Percent of CPU this job got: 12019%; ```; However tweaking to 390000 files of a 1000 entries, we get:; ```; User time (seconds): 450.77; System time (seconds): 438.39; Percent of CPU this job got: 7039%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.63; ```. Some are straight-forward to avoid:. ```; // Avoid lock internal to linux date/time:; diff --git a/io/io/src/TKey.cxx b/io/io/src/TKey.cxx; index e604af2980..f349bd8710 100644; --- a/io/io/src/TKey.cxx; +++ b/io/io/src/TKey.cxx; @@ -99,7 +99,7 @@ TKey::TKey() : TNamed(), fDatime((UInt_t)0); ////////////////////////////////////////////////////////////////////////////////; /// TKey default constructor.; ; -TKey::TKey(TDirectory* motherDir) : TNamed(), fDatime((UInt_t)0); +TKey::TKey(TDirectory* motherDir) : TNamed(), fDatime((UInt_t)0, (UInt_t)0); {; Build(motherDir, """", 0);; ; ```; Some require some thoughts:; ```; Try to avoid bottlenecking on recording TContext with gROOT when reading objects out files.; diff --git a/tree/dataframe/src/RLoopManager.cxx b/tree/dataframe/src/RLoopManager.cxx; index 4112e7aeb8..8d92534015 100644; --- a/tree/dataframe/src/RLoopManager.cxx; +++ b/tree/dataframe/src/RLoopManager.cxx; @@ -495,6 +495,7 @@ void RLoopManager::RunTreeProcessorMT(); const auto entryRange = r.GetEntriesRange(); // we trust TTreeProcessorMT to call SetEntriesRange; const auto nEntries = entryRange.second - entryRange.first;; auto count = entryCount.fetch_add(nEntries);; + // TDirectory::TContext ctxt(nullptr);; try {; // recursive call to check filters and conditionally execute actions; while (r.Next()) {; diff --git a/tree/treeplayer/src/TTreeProcessorMT.cxx b/tree/treeplayer/src/TTreeProcessorMT.cxx; index ad0100e377..f29a67b65b 100644; --- a/tree/treeplayer/src/TTreeProcessorMT.cxx; +++ b/tree/treeplayer/src/TTreeProcessorMT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12761:1823,avoid,avoid,1823,https://root.cern,https://github.com/root-project/root/issues/12761,1,['avoid'],['avoid']
Safety,"gleMu.root Run2012B_SingleMu.root Run2012B_SingleMu.root Run2012B_SingleMu.root Run2012B_SingleMu.root Run2012B_SingleMu.root Run2012B_SingleMu.root Run2012B_SingleMu.root Run2012B_SingleMu.root; hadd Target file: Run2012B_SingleMu10x.root; hadd compression setting for all output: 1; hadd Source file 1: Run2012B_SingleMu.root; hadd Source file 2: Run2012B_SingleMu.root; hadd Source file 3: Run2012B_SingleMu.root; hadd Source file 4: Run2012B_SingleMu.root; hadd Source file 5: Run2012B_SingleMu.root; hadd Source file 6: Run2012B_SingleMu.root; hadd Source file 7: Run2012B_SingleMu.root; hadd Source file 8: Run2012B_SingleMu.root; hadd Source file 9: Run2012B_SingleMu.root; hadd Source file 10: Run2012B_SingleMu.root; hadd Target path: Run2012B_SingleMu10x.root:/; Fill: Switching to new file: Run2012B_SingleMu10x_1.root; Fatal in <TFileMerger::RecursiveRemove>: Output file of the TFile Merger (targeting Run2012B_SingleMu10x.root) has been deleted (likely due to a TTree larger than 100Gb); aborting; #0 0x00007fea7e19b48a in wait4 () from /usr/lib/libc.so.6; #1 0x00007fea7e10d09b in do_system () from /usr/lib/libc.so.6; #2 0x00007fea7ea7fdac in TUnixSystem::Exec (this=0x5593666eb200, shellcmd=0x559368e19160 ""/home/blue/ROOT/master/cmake-build-foo/etc/gdb-backtrace.sh 538334 1>&2"") at ../core/unix/src/TUnixSystem.cxx:2108; #3 0x00007fea7ea8069e in TUnixSystem::StackTrace (this=0x5593666eb200) at ../core/unix/src/TUnixSystem.cxx:2399; #4 0x00007fea7e911bc1 in DefaultErrorHandler (level=6000, abort_bool=true, location=0x7fea7d7ab1b5 ""TFileMerger::RecursiveRemove"", msg=0x55936842c8a0 ""Output file of the TFile Merger (targeting Run2012B_SingleMu10x.root) has been deleted (likely due to a TTree larger than 100Gb)"") at ../core/base/src/TErrorDefaultHandler.cxx:174; #5 0x00007fea7e9ee212 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fea7d7ab1b5 ""TFileMerger::RecursiveRemove"", fmt=0x7fea7f1cb4c8 ""Output file of ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10102:1560,abort,aborting,1560,https://root.cern,https://github.com/root-project/root/issues/10102,1,['abort'],['aborting']
Safety,"gtests can print errors using ROOT's message system, but these get; ignored completely.; Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for; ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to; ROOT_ADD_GTEST. ### How to fix the tests:; - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything.; - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics ; - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5591:356,unsafe,unsafe,356,https://root.cern,https://github.com/root-project/root/pull/5591,2,"['Safe', 'unsafe']","['Safe', 'unsafe']"
Safety,"har> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::at(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (unordered_map.h:1001); ==270704== by 0x1979847F: ???; ==270704== by 0x27231F92: ROOT::Detail::RDF::RLoopManager::RunEmptySource() (RLoopManager.cxx:418); ==270704== by 0x272360B1: ROOT::Detail::RDF::RLoopManager::Run() (RLoopManager.cxx:761); ==270704== by 0x2F3C1107: ???; ==270704== by 0x5EF49CC: Cppyy::CallR(long, void*, unsigned long, void*) (clingwrapper.cxx:846); ==270704== by 0x5E37CA5: GILCallR(long, void*, CPyCppyy::CallContext*) (Executors.cxx:78); ==270704== by 0x5E39270: CPyCppyy::(anonymous namespace)::ULongLongRefExecutor::Execute(long, void*, CPyCppyy::CallContext*) (Executors.cxx:367); ==270704== ; ==270704== ; ==270704== HEAP SUMMARY:; ==270704== in use at exit: 164,725,300 bytes in 125,412 blocks; ==270704== total heap usage: 5,802,833 allocs, 5,677,422 frees, 2,881,639,983 bytes allocated; ==270704== ; ==270704== LEAK SUMMARY:; ==270704== definitely lost: 18 bytes in 3 blocks; ==270704== indirectly lost: 0 bytes in 0 blocks; ==270704== possibly lost: 38,887,858 bytes in 15,700 blocks; ==270704== still reachable: 10,654,285 bytes in 57,037 blocks; ==270704== of which reachable via heuristic:; ==270704== newarray : 8,616 bytes in 18 blocks; ==270704== multipleinheritance: 14,904 bytes in 3 blocks; ==270704== suppressed: 115,183,139 bytes in 52,672 blocks; ==270704== Rerun with --leak-check=full to see details of leaked memory; ==270704== ; ==270704== Use --track-origins=yes to see where uninitialised values come from; ==270704== For lists of detected and suppressed errors, rerun with: -s; ==270704== ERROR SUMMARY: 1305 errors from 60 contexts (suppressed: 1110 from 25); ```; </details>",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10092#issuecomment-1064001383:256213,detect,detected,256213,https://root.cern,https://github.com/root-project/root/issues/10092#issuecomment-1064001383,1,['detect'],['detected']
Safety,"he 'roottest' tests (with -Droottest=ON)? Because all the failing tests are in this category. Lets take for example `roottest-cling-function-refClasses-build`, I get this error:; ```; Start 634: roottest-cling-function-refClasses-build. 634: Test command: /Applications/CMake.app/Contents/bin/cmake ""--build"" ""/Users/mato/Development/ROOT/build.master"" ""--target"" ""roottest-cling-function-refClasses-compile-macro/fast"" ""--"" ""--always-make""; 634: Test timeout computed to be: 1500; 634: Error in <UnknownClass::FindDynamicLibrary>: libCling[.so | .dll | .dylib | .sl | .dl | .a] does not exist in .:/Users/mato/Development/ROOT/root.prefix/lib/root:/usr/local/lib:/usr/X11R6/lib:/usr/lib:/lib:/lib/x86_64-linux-gnu:/usr/local/lib64:/usr/lib64:/lib64:; 634: Fatal in <TROOT::InitInterpreter>: cannot load symbol dlsym(RTLD_DEFAULT, CreateInterpreter): symbol not found; 634: make[1]: *** [roottest/cling/function/CMakeFiles/roottest-cling-function-refClasses-compile-macro] Error 1; 634: make: *** [roottest-cling-function-refClasses-compile-macro/fast] Error 2; 1/1 Test #634: roottest-cling-function-refClasses-build ...***Failed 0.11 sec. 0% tests passed, 1 tests failed out of 1; ```; Another type of failures are the following, which involves the location of Clang resources.; ```; Start 1020: roottest-root-meta-expressiveErrorMessages-libgen-build. 1020: Test command: /Applications/CMake.app/Contents/bin/cmake ""--build"" ""/Users/mato/Development/ROOT/build.master"" ""--target"" ""roottest-root-meta-expressiveErrorMessages-libgen/fast"" ""--"" ""--always-make""; 1020: Test timeout computed to be: 1500; 1020: Generating expressiveErrorMessages.cxx, expressiveErrorMessages.rootmap; 1020: ERROR in cling::CIFactory::createCI():; 1020: resource directory /Users/mato/Development/ROOT/root.prefix/etc/root/cling/lib/clang/3.9.0 not found!; 1020: input_line_2:1:10: fatal error: 'cling/Interpreter/RuntimeUniverse.h' file not found; 1020: #include ""cling/Interpreter/RuntimeUniverse.h""; 1020: ^; ...; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/130#issuecomment-273492132:1591,timeout,timeout,1591,https://root.cern,https://github.com/root-project/root/pull/130#issuecomment-273492132,1,['timeout'],['timeout']
Safety,"he Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947; - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:; - [ ] https://github.com/root-project/root/issues/9953; - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999; - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process.; - [x] Make the doxygen documentation thread-safe; - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally; - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md; - [ ] Update rootspi scripts to build docu in CI accordingly; - [ ] tutorial generation does not work yet as ""out of source"". To-do...; - [x] require min doxygen version 1.9.4; - [ ] pre-check that output directory is empty ?; - [ ] if GVIZ not found, disable dot; - [ ] Stamp file generation to only recompile when changes; - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source); - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc; - [x] set NUM_PROC_THREADS; - [ ] listLibs pass ROOT_CMD as variable; - [x] check why there are stdout.dat and NumberOfImages not being removed; - [ ] Consider enabling https://www.doxygen.nl/manual/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9966:1353,safe,safe,1353,https://root.cern,https://github.com/root-project/root/pull/9966,1,['safe'],['safe']
Safety,"he explicit pthread-based version, so we can think about whether this is really safe from deadlocks, but the numbers looks pretty good. In the test output below ""TBB"" is using ```tbb::enumerable_thread_specific<LocalCounts>``` and ""TBBUnique"" is using ```tbb::enumerable_thread_specific<LocalCounts, tbb::cache_aligned_allocator<LocalCounts>, tbb::ets_key_per_instance>``` which is limited to a small number of instances per process (but not strictly to 1). If you would be willing to have tbb as a dependency for core/thread then I can add this (and maybe even remove the shared_mutex versions). ```; 76: Test command: /usr/bin/cmake ""-DCMD=/scratchnvme/bendavid/rootdev2/build/core/thread/test/corethreadtestUnit"" ""-DCWD=/scratchnvme/bendavid/rootdev2/build/core/thread/test"" ""-DSYS=/scratchnvme/bendavid/rootdev2/build"" ""-P"" ""/scratchnvme/bendavid/rootdev2/root/cmake/modules/RootTestDriver.cmake""; 76: Environment variables: ; 76: ROOT_HIST=0; 76: Test timeout computed to be: 1500; 76: Running main() from /scratchnvme/bendavid/rootdev2/build/googletest-prefix/src/googletest/googletest/src/gtest_main.cc; 76: [==========] Running 126 tests from 3 test suites.; 76: [----------] Global test environment set-up.; 76: [----------] 6 tests from InterpreterLock; 76: [ RUN ] InterpreterLock.ConcurrentCalc; 76: [ OK ] InterpreterLock.ConcurrentCalc (87 ms); 76: [ RUN ] InterpreterLock.ReadLocks; 76: [ OK ] InterpreterLock.ReadLocks (78 ms); 76: [ RUN ] InterpreterLock.BalancedUserReadLock; 76: [ OK ] InterpreterLock.BalancedUserReadLock (169 ms); 76: [ RUN ] InterpreterLock.BalancedUserWriteLock; 76: [ OK ] InterpreterLock.BalancedUserWriteLock (178 ms); 76: [ RUN ] InterpreterLock.UnBalancedUserReadLock; 76: [ OK ] InterpreterLock.UnBalancedUserReadLock (124 ms); 76: [ RUN ] InterpreterLock.UnBalancedUserWriteLock; 76: [ OK ] InterpreterLock.UnBalancedUserWriteLock (89 ms); 76: [----------] 6 tests from InterpreterLock (725 ms total); 76: ; 76: [----------] 110 tests from RWLock; 76: [ ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-742071485:1502,timeout,timeout,1502,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-742071485,1,['timeout'],['timeout']
Safety,"hello @wlav,. I was confused to have to set PYTHONPATH in the first place, like Andy was :). Forgive me but your objections do not seem rock-solid:; - '""distutils.sysconfig"" is far from robust as claimed' : afaik it works very well from 2.6-2.7, 3.1,3.2, 3.3 to 3.4; - ""package as a whole gets split, which risks that one part gets updated whereas another doesn't"": how would that be possible for users ? a decent package manager should handle that well. regards",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/73#issuecomment-137528092:307,risk,risks,307,https://root.cern,https://github.com/root-project/root/pull/73#issuecomment-137528092,1,['risk'],['risks']
Safety,"hen trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp; #include <ROOT/RNTupleModel.hxx>; #include <ROOT/RNTupleWriter.hxx>; ; #include <TSystem.h>; ; #include <vector>; #include <variant>; #include <optional>; ; using RNTupleModel = ROOT::Experimental::RNTupleModel;; using RNTupleWriter = ROOT::Experimental::RNTupleWriter;; ; void ntpl_issue(); {; auto model = RNTupleModel::Create();; ; auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");; ; auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");; ; for (int i = 0; i < 10; i++) {; fldVvar->clear();; ; for (int j = 0; j < 5; ++j) {; std::variant<std::optional<int>,float> var(1.0);; fldVvar->emplace_back(var);; }; ; ntuple->Fill();; }; }; ```. And this is the error that it produces.; ```; Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'; aborting; ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp; struct S {; operator int() { throw 42; }; };. std::variant<int,float> var;; try {; var = S();; } catch (int) {}; fldVvar->emplace_back(var);; ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an invalid state. It either ends up initializing the first variant or it crashes. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/tree/ntuple/v7/doc/specifications.md?plain=1#L780",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15534:1149,abort,aborting,1149,https://root.cern,https://github.com/root-project/root/issues/15534,1,['abort'],['aborting']
Safety,"hi Bertrand, thank you for fixing this!; It's certainly safer in general that different test cases write on different output files.; I don't understand however why we need to delete the files if they already exist. Does that mean that Windows does not support `TFile(""f.root"", ""recreate"")` (i.e. recreating an existing file)? I think i'm missing something :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2416#issuecomment-409849546:56,safe,safer,56,https://root.cern,https://github.com/root-project/root/pull/2416#issuecomment-409849546,1,['safe'],['safer']
Safety,"hi, i don't have a strong opinion about the naming, just some comments:; - only tangentially related, but does RVec has a standard Sort? It seems weird to have more elaborate index operations and no Sort; - the name Take is used for a similar operation in other libraries (that I know, mxnet in python and ranges-v3 in c++) so in principle it's appropriate; - it's very common to also have the signature Take(v, 3) which takes the first 3 elements. Since one of the most common operations in HEP is ""take best"" or ""take best 2"" and that translates to Sort + Take, I think there is value in adding the overload; - @dpiparo: we already have Filter both in RVec and RDataFrame, I don't think there is a risk to confuse the two, but if we don't want overlap we should change that too. Sorry if these things have already bee. discussed/solved, my laptop broke and github is not mobile friendly",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2329#issuecomment-406161111:700,risk,risk,700,https://root.cern,https://github.com/root-project/root/pull/2329#issuecomment-406161111,1,['risk'],['risk']
Safety,"his=this; entry=0x7ff42547e5f0, imtHelper=imtHelper; entry=0x0) at /home/aliperf/aliperf_workspace/sw/SOURCES/ROOT/v6-24-02/v6-24-02/tree/tree/src/TBranch.cxx:854; #11 0x00007ff4494ae36b in TBranchElement::FillImpl (this=0x7ff42547e5f0, imtHelper=0x0) at /home/aliperf/aliperf_workspace/sw/SOURCES/ROOT/v6-24-02/v6-24-02/tree/tree/src/TBranchElement.cxx:1265; #12 0x00007ff4494ae069 in TBranchElement::FillImpl (this=0x7ff425170850, imtHelper=0x0) at /home/aliperf/aliperf_workspace/sw/SOURCES/ROOT/v6-24-02/v6-24-02/tree/tree/src/TBranchElement.cxx:1290; #13 0x00007ff44f4faf89 in TBranch::Fill (this=0x7ff425170850) at /home/aliperf/aliperf_workspace/sw/slc7_x86-64/ROOT/v6-24-02-local5/include/TBranch.h:201; #14 o2::base::DetImpl<o2::trd::Detector>::mergeAndAdjustHits<std::vector<o2::trd::Hit, std::allocator<o2::trd::Hit> > > (this=this; entry=0x3e69680, brname=..., origin=..., target=..., trackoffsets=..., nprimaries=..., subevtsOrdered=...) at /home/aliperf/aliperf_workspace/sw/SOURCES/O2/dev/0/Detectors/Base/include/DetectorsBase/Detector.h:403; #15 0x00007ff44f4fb507 in o2::base::DetImpl<o2::trd::Detector>::mergeHitEntries (this=0x3e69680, origin=..., target=..., trackoffsets=..., nprimaries=..., subevtsOrdered=...) at /home/aliperf/aliperf_workspace/sw/SOURCES/O2/dev/0/Detectors/Base/include/DetectorsBase/Detector.h:422; #16 0x00000000004456e1 in o2::devices::O2HitMerger::mergeAndFlushData (this=0x162d640, eventID=<optimized out>) at /home/aliperf/aliperf_workspace/sw/SOURCES/O2/dev/0/run/O2HitMerger.h:745; #17 0x00007ff446ec9f10 in std::execute_native_thread_routine (__p=0x7ad9e10) at ../../../../../gcc/libstdc++-v3/src/c++11/thread.cc:80; #18 0x00007ff44e186ea5 in start_thread () from /lib64/libpthread.so.0; #19 0x00007ff44680796d in clone () from /lib64/libc.so.6. Thread 5 (Thread 0x7ff42a18e700 (LWP 25519) ""o2-sim-hit-merg""):; #0 0x00007ff44e18ade2 in pthread_cond_timedwait. GLIBC_2.3.2 () from /lib64/libpthread.so.0; #1 0x00007ff44aca29d3 in __gthread_cond_timedw",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8931:4054,Detect,Detectors,4054,https://root.cern,https://github.com/root-project/root/issues/8931,3,['Detect'],"['Detector', 'Detectors', 'DetectorsBase']"
Safety,"hmm ... that was really unexpected for me for lxplus ... ***@***.*** ~]$ ping -c 10 ping webdav.lcg.triumf.ca; PING (137.138.28.175) 56(124) bytes of data. --- ping statistics ---; 10 packets transmitted, 0 received, 100% packet loss, time 8999ms. ***@***.*** ~]$ . Vitaliy, shouldn't we expect that to be accessible from lxplus ?. regards,; Asoka. > On May 12, 2021, at 10:37 AM, Di Qing ***@***.***> wrote:; > ; > Maybe the connections were from commodity network? Are you able to ping webdav.lcg.triumf.ca?; > ; > Thanks,; > ; > Di; > ; >> On May 12, 2021, at 10:29 AM, Asoka De Silva ***@***.***> wrote:; >> ; >> ﻿ Hi Axel,; >> ; >> I don't know but I'll add Simon and Di who are the Tier-1 experts and may have ideas.; >> ; >> Simon and Di, Axel has this issue and me a similar one - any ideas ?; >> ; >> ; >>> ; >>>> s I crosscheck (to see whether it's related to the Davix redirect issue #8155 <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8155&data=04%7C01%7Cdqing%40triumf.ca%7C96f8066e53054f808afe08d9156b7b02%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564373643127522%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=ieWzynOWVK%2BPOmP4TMbx4CxPX%2FiVAcbvEM8tjOw7c2k%3D&reserved=0> ) I tried with curl but I get; >>>> ; >>>> $ curl -v https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Cdqing%40triumf.ca%7C96f8066e53054f808afe08d9156b7b02%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564373643137511%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=GjymmnKYXiP8M44wA%2FsXFGn3CjwfNf1W8%2BpOLMvcaJg%3D&reserved=0>; >>>> * Trying 206.12.9.197:2880...; >>>> * TCP_NODELAY se",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-839972447:916,safe,safelinks,916,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-839972447,1,['safe'],['safelinks']
Safety,http: increase websocket timeout to 300 s,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/503:25,timeout,timeout,25,https://root.cern,https://github.com/root-project/root/pull/503,1,['timeout'],['timeout']
Safety,http: try to avoid civetweb warnings on clang/mac,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1966:13,avoid,avoid,13,https://root.cern,https://github.com/root-project/root/pull/1966,1,['avoid'],['avoid']
Safety,"https://github.com/root-project/root/pull/11874 ; (I had seen this same error last week in cmssw while just picking up the stl.modulemap changes - I had assumed the rest of the PR would avoid this error, but seems not)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12240#issuecomment-1420544238:186,avoid,avoid,186,https://root.cern,https://github.com/root-project/root/issues/12240#issuecomment-1420544238,1,['avoid'],['avoid']
Safety,"ib\IR\Module.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\IR\LLVMCore.vcxproj] ; - [2021-05-10T15:13:50.633Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\IR\LLVMContextImpl.cpp(252,1): fatal error C1060: compiler is out of heap space [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\IR\LLVMCore.vcxproj] ; - [2021-05-10T15:13:50.633Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/IR/Metadata.h(50,31): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\IR\Statepoint.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\IR\LLVMCore.vcxproj] ; - [2021-05-10T15:13:50.633Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\tuple(460,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\IR\SafepointIRVerifier.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\IR\LLVMCore.vcxproj] ; - [2021-05-10T15:13:50.633Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility(211,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\IR\PassManager.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\IR\LLVMCore.vcxproj] ; - [2021-05-10T15:13:50.633Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/ADT/PointerUnion.h(51,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\IR\TypeFinder.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\IR\LLVMCore.vcxproj",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8113#issuecomment-836826947:2364,Safe,SafepointIRVerifier,2364,https://root.cern,https://github.com/root-project/root/pull/8113#issuecomment-836826947,1,['Safe'],['SafepointIRVerifier']
Safety,"ication (Failed); 1070 - tutorial-tmva-TMVA_RNN_Classification (Failed); 1071 - tutorial-tmva-TMVA_SOFIE_PyTorch (Failed); 1203 - tutorial-dataframe-df102_NanoAODDimuonAnalysis-py (Failed); 1205 - tutorial-dataframe-df104_HiggsToTwoPhotons-py (Failed); 1261 - tutorial-rcanvas-df104-py (Failed); 1564 - roottest-python-JupyROOT-importROOT_notebook (Failed); 1565 - roottest-python-JupyROOT-simpleCppMagic_notebook (Failed); 1566 - roottest-python-JupyROOT-thread_local_notebook (Failed); 1567 - roottest-python-JupyROOT-ROOT_kernel_notebook (Failed); 1568 - roottest-python-JupyROOT-tpython_notebook (Failed); 1664 - roottest-python-distrdf-backends-test_all (Failed); ```; The specific run I references only failed the `TMapFile` test (which sometimes fails, sometimes succeed). The set of failure types is as follow:; ```; Warning in <TMVA_CNN_Classification>: TMVA is not build with GPU or CPU multi-thread support. Cannot use TMVA Deep Learning for CNN; Running with nthreads = 4; [37;41;1m<FATAL> : Can't import __main__[0m; ***> abort program execution; ```; ```; Setup TMVA...; [37;41;1m<FATAL> : Can't import __main__[0m; ***> abort program execution; ```; ```; Generate PyTorch model...; Traceback (most recent call last):; File ""/github/home/ROOT-CI/build/tmva/pymva/test/generatePyTorchModelClassification.py"", line 1, in <module>; import torch; ModuleNotFoundError: No module named 'torch'; ```; ```; RDataFrame::Run: event loop was interrupted; Traceback (most recent call last):; File ""/github/home/ROOT-CI/src/tutorials/dataframe/df102_NanoAODDimuonAnalysis.py"", line 50, in <module>; h.SetTitle(""""); ^^^^^^^^^^; cppyy.gbl.std.bad_alloc: TH1D& ROOT::RDF::RResultPtr<TH1D>::operator*() =>; bad_alloc: std::bad_alloc; CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```; ```; Traceback (most recent call last):; File ""/github/home/ROOT-CI/src/tutorials/dataframe/df104_HiggsToTwoPhotons.py"", line 87, in <module>; ROOT.RDF.RunGraphs([hist",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16242:2568,abort,abort,2568,https://root.cern,https://github.com/root-project/root/issues/16242,1,['abort'],['abort']
Safety,"identification is GNU 10.3.0; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /usr/lib/ccache/bin/x86_64-pc-linux-gnu-gcc - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/lib/ccache/bin/x86_64-pc-linux-gnu-g++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Git: /usr/bin/git (found version ""2.31.1"") ; -- Detected ROOT_VERSION 6.25.01; -- Looking for Python; -- Found Python3: /usr/bin/python3.8 (found version ""3.8.10"") found components: Interpreter Development NumPy Development.Module Development.Embed ; -- The Fortran compiler identification is GNU 10.3.0; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Check for working Fortran compiler: /usr/bin/x86_64-pc-linux-gnu-gfortran - skipped; -- Checking whether /usr/bin/x86_64-pc-linux-gnu-gfortran supports Fortran 90; -- Checking whether /usr/bin/x86_64-pc-linux-gnu-gfortran supports Fortran 90 - yes; -- Found GCC. Major version 10, minor version 3; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed; -- Looking for pthread_create in pthreads; -- Looking for pthread_create in pthreads - not found; -- Looking for pthread_create in pthread; -- Looking for pthread_create in pthread - found; -- Found Threads: TRUE ; -- Performing Test GLIBCXX_USE_CXX11_ABI; -- Performing Test GLIBCXX_USE_CXX11_ABI - Success; -- ROOT Platform: linux; -- ROOT Compiler: GNU 10.3.0; -- ROOT Processor: x86_64; -- ROOT Architecture: linuxx8664gcc; -- Build Type: 'Debug' (flags = ''); -- Compiler Flags: -march=native -O2 -pipe -Og -fno-omit-frame-pointer -g -ggdb -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Wove",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8193:3499,Detect,Detecting,3499,https://root.cern,https://github.com/root-project/root/issues/8193,2,['Detect'],['Detecting']
Safety,"if ""[skip ci]"" is detected in the PR title, the CI does not start. This is done to have at least one string in common with the ones the GH CI uses for commits.; The test of this PR is that the CI does not start given its title.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15524:18,detect,detected,18,https://root.cern,https://github.com/root-project/root/pull/15524,1,['detect'],['detected']
Safety,"if imt is not specified, this tutorial should not be run as a test. # This Pull request:; Avoids running the `TMVA_CNN_Classification.C` when ROOT is not built with imt, since it is a requirement and trying to proceed nevertheless causes errors. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13712:90,Avoid,Avoids,90,https://root.cern,https://github.com/root-project/root/pull/13712,1,['Avoid'],['Avoids']
Safety,"ify compile options for imported target ""gmock"".; Call Stack (most recent call first):; CMakeLists.txt:219 (include). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1783 (target_compile_options):; Cannot specify compile options for imported target ""gmock_main"".; Call Stack (most recent call first):; CMakeLists.txt:219 (include). -- Building LLVM in 'Release' mode.; -- Could NOT find Z3: Found unsuitable version ""0.0.0"", but required is at least ""4.7.1"" (found Z3_LIBRARIES-NOTFOUND); -- Could NOT find LibXml2 (missing: LIBXML2_LIBRARY LIBXML2_INCLUDE_DIR) ; -- Native target architecture is X86; -- Threads disabled.; -- Doxygen disabled.; -- Go bindings disabled.; -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH) ; -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH) ; -- OCaml bindings disabled.; -- LLVM host triple: x86_64-unknown-linux-gnu; -- LLVM default target triple: x86_64-unknown-linux-gnu; -- Building with -fPIC; -- Constructing LLVMBuild project information; -- Linker detection: GNU ld; -- Targeting X86; -- Targeting NVPTX; -- Clang version: 9.0.1; -- Cling version (from VERSION file): ROOT_0.9~dev; -- Cling will look for C++ headers in '/usr/include/c++/9:/usr/include/x86_64-linux-gnu/c++/9:/usr/include/c++/9/backward' at runtime.; -- And then fallback to: 'x86_64-linux-gnu-g++-9'; -- Performing Test found_stdstringview; -- Performing Test found_stdstringview - Failed; -- Performing Test found_stdexpstringview; -- Performing Test found_stdexpstringview - Success; -- Performing Test found_stod_stringview; -- Performing Test found_stod_stringview - Failed; -- Performing Test found_stdapply; -- Performing Test found_stdapply - Failed; -- Performing Test found_stdinvoke; -- Performing Test found_stdinvoke - Failed; -- Performing Test found_stdindexsequence; -- Performing Test found_stdindexsequence - Success; -- 530/857 C++ tutorials have been activated.; -- 119/166 python tutorials have been activ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7654:3421,detect,detection,3421,https://root.cern,https://github.com/root-project/root/issues/7654,1,['detect'],['detection']
Safety,"ile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 8 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 8 tests from MiniFile; [ RUN ] MiniFile.Raw; [ OK ] MiniFile.Raw (0 ms); [ RUN ] MiniFile.Stream; Error in <TFile::ReadBuffer>: error reading all requested bytes from file test_ntuple_minifile_stream.root, got 0 of 6816316; Error in <TFile::Init>: test_ntuple_minifile_stream.root failed to read the file header information at 1677721600 (size=6816316); /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_minifile.cxx:84: Failure; Value of: file; Actual: false; Expected: true; [ FAILED ] MiniFile.Stream (191 ms); [ RUN ] MiniFile.Proper; Fatal: nread == nbytes violated at line 1083 of `/builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RMiniFile.cxx'; aborting; [ --- ]; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-rdf. $ printf '%x\n' 1677721600; 64000000. Header length shoud be 0x00000064 = 100; ~~~; 491/1272 Test #431: gtest-tree-ntuple-v7-test-ntuple-rdf ................................***Failed 74.39 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 1 test from 1 test suite.; [----------] Global test environment set-up.; [----------] 1 test from RNTuple; [ RUN ] RNTuple.RDF; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RN",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:9880,abort,aborted,9880,https://root.cern,https://github.com/root-project/root/issues/12426,1,['abort'],['aborted']
Safety,iled on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/45228/console).; ### Errors:; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/libc.modulemap:82:35: error: header 'bits/assert.h' not found ; - /cvmfs/sft.cern.ch/lcg/contrib/gcc/6.2.0native/x86_64-slc6/bin/../lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/x86_64-pc-linux-gnu/bits/os_defines.h:44:5: error: function-like macro '__GLIBC_PREREQ' is not defined ; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/libc.modulemap:82:35: error: header 'bits/assert.h' not found ; - /cvmfs/sft.cern.ch/lcg/contrib/gcc/6.2.0native/x86_64-slc6/bin/../lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/x86_64-pc-linux-gnu/bits/os_defines.h:44:5: error: function-like macro '__GLIBC_PREREQ' is not defined ; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/libc.modulemap:82:35: error: header 'bits/assert.h' not found ; - /cvmfs/sft.cern.ch/lcg/contrib/gcc/6.2.0native/x86_64-slc6/bin/../lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/x86_64-pc-linux-gnu/bits/os_defines.h:44:5: error: function-like macro '__GLIBC_PREREQ' is not defined ; - /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/libc.modulemap:82:35: error: header 'bits/assert.h' not found ; - /cvmfs/sft.cern.ch/lcg/contrib/gcc/6.2.0native/x86_64-slc6/bin/../lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/cstdlib:124:11: error: no member named 'div_t' in the global namespace ; - /cvmfs/sft.cern.ch/lcg/contrib/gcc/6.2.0native/x86_64-slc6/bin/../lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/cstdlib:125:11: error: no member named 'ldiv_t' in the global namespace ; - /cvmfs/sft.cern.ch/lcg/contrib/gcc/6.2.0native/x86_64-slc6/bin/../lib/gcc/x86_64-pc-linux-gnu/6.2.0/../../../../include/c++/6.2.0/cstdlib:127:11: error: no member named 'abort' in the global namespace . And 22 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2838#issuecomment-432562543:1964,abort,abort,1964,https://root.cern,https://github.com/root-project/root/pull/2838#issuecomment-432562543,1,['abort'],['abort']
Safety,iler Flags: -std=c++11 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread ; -- Looking for ZLib; -- Looking for Freetype; -- Looking for LZMA; -- Found LZMA includes at /usr/include; -- Found LZMA library at /usr/lib/x86_64-linux-gnu/liblzma.so; -- Building AfterImage library included in ROOT itself; -- Looking for GSL; -- Downloading and building GSL version 2.1; -- Looking for python; -- Enabled support for: builtin_afterimage builtin_clang builtin_ftgl builtin_glew builtin_gsl builtin_llvm builtin_lz4 builtin_openssl builtin_pcre builtin_tbb builtin_vdt builtin_xxhash clad exceptions explicitlink gdml http imt mathmore mlp python roofit runtime_cxxmodules shared ssl tmva spectrum vdt; -- Native target architecture is X86; -- Threads disabled.; -- Doxygen disabled.; -- Go bindings disabled.; -- LLVM host triple: x86_64-unknown-linux-gnu; -- LLVM default target triple: x86_64-unknown-linux-gnu; -- Building with -fPIC; -- Constructing LLVMBuild project information; -- Linker detection: GNU ld; -- SysLibs: rt;dl;tinfo;-lpthread;/usr/lib/x86_64-linux-gnu/libz.so; -- Targeting X86; -- Clang version: 5.0.0; -- Cling version (from VERSION file): ROOT_0.6~dev; -- Cling will look for C++ headers in '/usr/include/c++/7:/usr/include/x86_64-linux-gnu/c++/7:/usr/include/c++/7/backward' at runtime.; -- And then fallback to: 'x86_64-linux-gnu-g++-7'; Recording the git revision now; -- Performing Test found_stdstringview; -- Performing Test found_stdstringview - Failed; -- Performing Test found_stdexpstringview; -- Performing Test found_stdexpstringview - Failed; -- Performing Test found_stdapply; -- Performing Test found_stdapply - Failed; -- Performing Test found_stdinvoke; -- Performing Test found_stdinvoke - Failed; -- Performing Test found_stdindexsequence; -- Performing Test found_stdindexsequence - Failed; -- 315/786 tutorials have been vetoed for various reasons; -- Using directly ROOTSYS for roottest.git is und,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3891#issuecomment-502686211:1610,detect,detection,1610,https://root.cern,https://github.com/root-project/root/pull/3891#issuecomment-502686211,1,['detect'],['detection']
Safety,"ilva/a1/a8/myFile.1.root <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Cdqing%40triumf.ca%7C96f8066e53054f808afe08d9156b7b02%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564373643137511%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=GjymmnKYXiP8M44wA%2FsXFGn3CjwfNf1W8%2BpOLMvcaJg%3D&reserved=0>; >>> * About to connect() to webdav.lcg.triumf.ca <http://webdav.lcg.triumf.ca/> port 2880 (#0); >>> * Trying 2607:f8f0:660:3::36...; >>> * Connected to webdav.lcg.triumf.ca <http://webdav.lcg.triumf.ca/> (2607:f8f0:660:3::36) port 2880 (#0); >>> * Initializing NSS with certpath: sql:/etc/pki/nssdb; >>> * CAfile: /etc/pki/tls/certs/ca-bundle.crt; >>> CApath: none; >>> * Server certificate:; >>> * 	subject: CN=dpool46.lcg.triumf.ca <http://dpool46.lcg.triumf.ca/>,OU=triumf.ca <https://can01.safelinks.protection.outlook.com/?url=http%3A%2F%2Ftriumf.ca%2F&data=04%7C01%7Cdqing%40triumf.ca%7C96f8066e53054f808afe08d9156b7b02%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564373643147501%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=0DVPYYS02Z%2FWDinl5epoHThDnGOb4UCelc0w7lDZwVc%3D&reserved=0>,O=Grid,C=CA; >>> * 	start date: Apr 08 16:29:03 2021 GMT; >>> * 	expire date: May 08 16:29:03 2022 GMT; >>> * 	common name: dpool46.lcg.triumf.ca <http://dpool46.lcg.triumf.ca/>; >>> * 	issuer: CN=Grid Canada Certificate Authority,O=Grid,C=CA; >>> * NSS error -8179 (SEC_ERROR_UNKNOWN_ISSUER); >>> * Peer's Certificate issuer is not recognized.; >>> * Closing connection 0; >>> curl: (60) Peer's Certificate issuer is not recognized.; >>> More details here: http://curl.haxx.se/docs/sslcerts.html <https://can01.safelinks.protection.outlook.com/?url=http%3A%2F%2Fcurl.haxx.se%2Fdocs%2Fsslcerts.html&data=04%7C01%7Cdqing%40triumf.ca%7C96f8066e53",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-839972447:3284,safe,safelinks,3284,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-839972447,1,['safe'],['safelinks']
Safety,"in /usr/home/erik/devel/resources/root/build; 1 error. make: stopped in /usr/home/erik/devel/resources/root/build; ```. on my machine via `cmake --build . -- -j8` with the following (default/automatic) configuration:. ```shell; -- ROOT Configuration . System FreeBSD-13.2-RELEASE-p4; Processor 8 core 0 MHz (amd64); Build type RelWithDebInfo; Install path /usr/local; Compiler Clang 14.0.5; Compiler flags:; C -pipe -Wall -W -pthread -O2 -g -DNDEBUG; C++ -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -g -DNDEBUG; Linker flags:; Executable -rdynamic; Module ; Shared -Wl,--no-undefined. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_openui5 clad dataframe exceptions fitsio gdml http imt minuit2 opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd; ```. As for the original CMake configuration error, my guess is that the CMake target ""host"" used to be part of the CMake project, but is no longer part of the CMake project, and that the error message in `interpreter/cling/CMakeLists.txt:196` was not updated to reflect this when the CMake target ""host"" was removed from the CMake project. As for the error on the final generation of `lib/modules.idx`, the issue seems to be with `root.exe` which is invoked with the following build step command: . ```shell; cd /usr/home/erik/devel/resources/root/build/lib && LD_LIBRARY_PATH=/usr/home/erik/devel/resources/root/build/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /usr/home/erik/devel/resources/root/build/bin/root.exe -l -q -b; ```. Running `root.exe` by itself generates an `Abort trap (core dumped)`. Have you stumbled upon this issue previously, @mkrzewic, and if so, have you managed to deal with it somehow?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13865#issuecomment-1779361849:4312,Abort,Abort,4312,https://root.cern,https://github.com/root-project/root/issues/13865#issuecomment-1779361849,1,['Abort'],['Abort']
Safety,"in case keys could not be recovered, the file was made a Zombie; and caused the system to crash.; Relates to https://github.com/root-project/roottest/pull/217",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2583:26,recover,recovered,26,https://root.cern,https://github.com/root-project/root/pull/2583,1,['recover'],['recovered']
Safety,"in(){. // Choose the number of the test; // 0 or 1 ; int numTest = 0;. createFileWithHists(""myFileWithHists.root"");. TFileMerger fileMerger(false);; fileMerger.SetMsgPrefix(""selectiveHadd"");; fileMerger.SetPrintLevel(1);. // Set a selective list of objects to hadd ; // The rest of objects will not be considered in the input files ; fileMerger.AddObjectNames(""hist1"");; fileMerger.AddObjectNames(""hist2"");. // Set output file ; fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) ; fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){; ; // In that case add a dummy file i.e. empty file ; // In order to avoid the bug in in the TFileMerger class ; // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();; // create a unique empty file ; std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;; // Just create dummy file ; TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");; delete file;; fileMerger.AddFile(dummyFileName.c_str());; }; ; // Will only merge in the output files ; // the list of objects specified ; Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::kOnlyListed);; ; fileMerger.PartialMerge(mode);; ; return 0;; }. void createFileWithHists(const std::string &fileName){; TFile *file = TFile::Open(fileName.c_str(), ""recreate""); . TH1F *hist1 = new TH1F(""hist1"", ""hist1"", 1 , 0 , 2);; TH1F *hist2 = new TH1F(""hist2"", ""hist2"", 1 , 0 , 2);; TH1F *hist3 = new TH1F(""hist3"", ""hist3"", 1 , 0 , 2);; TH1F *hist4 = new TH1F(""hist4"", ""hist4"", 1 , 0 , 2);. hist1->Fill(1);. hist2->Fill(1);; hist2->Fill(2);. hist3->Fill(1);; hist3->Fill(1);; hist3->Fill(1);. hist4->Fill(1);; hist4->Fill(1);; hist4->Fill(1);; hist4->Fill(1);. // Write and close file; file->Write();; delete file;; }; ```. ### ROOT version. Tested with ROOT Version: 6.26",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13359:3489,avoid,avoid,3489,https://root.cern,https://github.com/root-project/root/issues/13359,1,['avoid'],['avoid']
Safety,"include(s).; #include <memory>. // Forward declaration(s).; class ROpaqueTaskArena;. class RTaskArena {; public:; /// Default constructor; RTaskArena();. private:; /// Task arena object; std::unique_ptr<ROpaqueTaskArena> fTaskArena;; };. #endif // TEST_RTASKARENA_HXX; [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s).; #include ""RTaskArena.hxx""; #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(); : fTaskArena( new ROpaqueTaskArena() ) {}; [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s).; #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;; return 0;; }; [bash][Legolas]:build > cmake ../ROpaqueTaskArena/; -- The CXX compiler identification is GNU 9.3.0; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Configuring done; -- Generating done; -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build; [bash][Legolas]:build > make; Scanning dependencies of target TaskArenaLib; [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o; [ 50%] Linking CXX shared library libTaskArenaLib.so; [ 50%] Built target TaskArenaLib; Scanning dependencies of target TaskArenaTest; [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o; In file included from /usr/include/c++/9/memory:80,; from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,; from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:; /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:; /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7062#issuecomment-762847080:2507,Detect,Detecting,2507,https://root.cern,https://github.com/root-project/root/pull/7062#issuecomment-762847080,4,['Detect'],['Detecting']
Safety,"ing after fork from child process 341608]; [Detaching after fork from child process 341609]; [Detaching after fork from child process 341610]; [Detaching after vfork from child process 341705]; +++ Processing the H1 dataset with a lambda .................................. OK ; [Detaching after fork from child process 341711]; [Detaching after fork from child process 341712]; [Detaching after fork from child process 341713]; +++ Processing the H1 dataset with h1analysisTreeReader ...................... OK ; [Detaching after fork from child process 341899]; [Detaching after fork from child process 341900]; [Detaching after fork from child process 341901]; +++ Processing the H1 dataset to create list ................................. OK ; [Detaching after fork from child process 341976]; [Detaching after fork from child process 341977]; [Detaching after fork from child process 341978]; +++ Processing the H1 dataset with a lambda from entry list .................. OK . Program received signal SIGABRT, Aborted.; __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:49; 49	 return ret;; (gdb) bt; #0 __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:49; #1 0x00007ffff633054a in __GI_abort () at abort.c:79; #2 0x00007ffff633042c in __assert_fail_base (fmt=0x7ffff64a3018 ""%s%s%s:%u: %s%sAssertion `%s' failed.\n%n"", ; assertion=0x7ffff4783308 ""!T.getTopmostParent()->getNext() && \""Can not revert previous transactions\"""", ; file=0x7ffff4782c68 ""/var/tmp/portage/sci-physics/root-9999/work/root-9999/interpreter/cling/lib/Interpreter/Interpreter.cpp"", line=1513, ; function=<optimized out>) at assert.c:92; #3 0x00007ffff633eda3 in __GI___assert_fail (; assertion=assertion@entry=0x7ffff4783308 ""!T.getTopmostParent()->getNext() && \""Can not revert previous transactions\"""", ; file=file@entry=0x7ffff4782c68 ""/var/tmp/portage/sci-physics/root-9999/work/root-9999/interpreter/cling/lib/Interpreter/Interpreter.cpp"", ; line=line@entry=1513, function=function@e",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936#issuecomment-823920792:3203,Abort,Aborted,3203,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-823920792,1,['Abort'],['Aborted']
Safety,ing autoparse for HepMC::GenEvent. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC::GenEvent; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC::GenEvent. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC::GenEvent; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC::GenEvent. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC::GenEvent; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC::GenEvent. Info in <TInterpreter::TCling::AutoLoad>: Explicitly disabled (the class name is HepMC::GenEvent); TClass::GetClass: Header Parsing - The representation of HepMC::GenEvent was not found in the type system. A lookup in the interpreter is about to be tried: this can cause parsing. This can be avoided selecting HepMC::GenEvent in the linkdef/selection file.; Info in <TInterpreter::TCling::AutoLoad>: Explicitly disabled (the class name is HepMC::GenEvent); Info in <TInterpreter::TCling::AutoLoad>: Explicitly disabled (the class name is HepMC::GenEvent); Info in <TInterpreter::TCling::AutoLoad>: Explicitly disabled (the class name is HepMC::GenEvent); Info in <TInterpreter::TCling::AutoLoad>: Explicitly disabled (the class name is HepMC::GenEvent); dynpath = /home/jun/dev/root/Debug/lib:.:/home/jun/dev/root/Debug/lib:/lib/x86_64-linux-gnu/glibc-hwcaps/x86-64-v3:/lib/x86_64-linux-gnu/glibc-hwcaps/x86-64-v2:/lib/x86_64-linux-gnu/tls/haswell/x86_64:/lib/x86_64-linux-gnu/tls/haswell:/lib/x86_64-linux-gnu/tls/x86_64:/lib/x86_64-linux-gnu/tls:/lib/x86_64-linux-gnu/haswell/x86_64:/lib/x86_64-linux-gnu/haswell:/lib/x86_64-linux-gnu/x86_64:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu/glibc-hwcaps/x86-64-v3:/usr/lib/x86_64-linux-gnu/glibc-hwcaps/x86-64-v2:/usr/lib/x86_64-linux-gnu/tls/haswell/x86_64:/usr/lib/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10910#issuecomment-1268084280:9880,avoid,avoided,9880,https://root.cern,https://github.com/root-project/root/pull/10910#issuecomment-1268084280,1,['avoid'],['avoided']
Safety,"ing boxes and employed in the FindBoundary/FindNode implementations. * The use of a 3D voxel grid (TGeoVoxelGrid) structure, able to store properties ""local"" or in the vicinity of a cartesian coordinate P. This structure allows to reduce the (typical) algorithmic complexity for ""Safety"" queries to ~O(1) (with a constant factor determined by the voxel size). Filling of the 3D voxel grid cache for Safety is done on-the-fly (using the BVH once). * (Optional) Additional caching of ""last-call"" safety values for really quick return when the value is still valid at the next call. Ideas for these improvements come from prior work in related libraries such as VecGeom. -----. Implementation details:. * The implementation is, for now (until fully tested), provided in a backward compatible manner:. - By default, nothing changes; - Users have to activate the BVH mode by setting an environment variable TGEO_PW_USEBVH; - Users may hence compare the 2 modes. * Functions for Safety, FindNode, FindBoundary dispatch to some internal implementation. This causes an extra lookup/jump, which can be removed once BVH is fully validated. * For the BVH, a well known open source implementation is included in header-only form. The headers are copied from https://github.com/madmann91/bvh commit 66e445b92f68801a6dd8ef943fe3038976ecb4ff. * A new class, TGeoVoxelGrid is provided for the cartesian VoxelGrid container. ----. Performance examples:. In a test with the ALICE simulation framework including the ITS + TPC detectors with 48240 volumes on the parallel world, we see. * initialization time goes from TGeoVoxelFinder: 10s ---> BVH: 40ms; * Geant simulation time: 10s --> 2s; * memory usage: 3GB --> 1GB. Hence, this PR will make a big difference for the ALICE simulation program. It was verified, that identical results (number of hits, steps, etc) are obtained when going from TGeoVoxelFinder --> BVH+GRID. ----. Outlook:. Similar techniques could be applied to ordinary TGeoNavigator routines. Checkli",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16442:1943,Safe,Safety,1943,https://root.cern,https://github.com/root-project/root/pull/16442,1,['Safe'],['Safety']
Safety,ing declarator [-Wredundant-parens] ; - [2021-06-28T12:58:41.023Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T12:58:42.361Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T12:58:42.361Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T12:58:42.877Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T12:58:45.528Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T12:59:31.741Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T13:00:12.046Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T13:00:22.838Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] . And 3 more. ### Failing tests:; - [projectroot.roottest.root.meta.roottest_root_meta_drawing](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/121132/testReport/projectroot.roottest.root/meta/roottest_root_meta_drawing/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execInitOrder](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/121132/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execInitOrder/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8555#issuecomment-869689634:1645,redund,redundant,1645,https://root.cern,https://github.com/root-project/root/pull/8555#issuecomment-869689634,3,['redund'],['redundant']
Safety,ing: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Control jumps to 'case 3:' at line 1846 in /opt/root_src/geom/geom/src/TGeoTube.cxx:1814; 2: Assuming 'id' is < 'ndiv' in /opt/root_src/geom/geom/src/TGeoTube.cxx:1855; 3: Loop condition is true. Entering loop body in /opt/root_src/geom/geom/src/TGeoTube.cxx:1855; 4: Value assigned to field 'fNodes' in /opt/root_src/geom/geom/src/TGeoTube.cxx:1856; 5: Called C++ object pointer is null in /opt/root_src/geom/geom/src/TGeoTube.cxx:1857; /opt/root_src/geom/geom/src/TGeoTube.cxx:2059:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2059; /opt/root_src/geom/geom/src/TGeoTube.cxx:2107:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2107; /opt/root_src/geom/geom/src/TGeoTube.cxx:2773:13: warning: Value stored to 's' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 's' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2773; /opt/root_src/geom/geom/src/TGeoTube.cxx:2909:13: warning: Value stored to 'sz1' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'sz1' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2909; /opt/root_src/geom/geom/src/TGeoTube.cxx:3015:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:3015; /opt/root_src/geom/geom/src/TGeoVolume.cxx:2899:7: warning: Called C++ object pointer is null [clang-analyzer-c,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:74944,safe,safe,74944,https://root.cern,https://github.com/root-project/root/issues/7428,1,['safe'],['safe']
Safety,"ing::IsLoaded(const char* filename) const; llvm::StringRef(filesStr).split(files, ""\n"");. std::set<std::string> fileMap;; + llvm::StringRef file_name_ref(file_name);; // Fill fileMap; return early on exact match.; for (llvm::SmallVector<llvm::StringRef, 100>::const_iterator; iF = files.begin(), iE = files.end(); iF != iE; ++iF) {; - if ((*iF) == file_name.c_str()) return kTRUE; // exact match; + if ((*iF) == file_name_ref) return kTRUE; // exact match; fileMap.insert(iF->str());; }. @@ -7116,9 +7117,12 @@ static std::string GetSharedLibImmediateDepsSlow(std::string lib,; // FIXME: It is unclear whether we can ignore all weak undefined; // symbols:; // http://lists.llvm.org/pipermail/llvm-dev/2017-October/118177.html; - if (SymName == ""_Jv_RegisterClasses"" ||; - SymName == ""_ITM_deregisterTMCloneTable"" ||; - SymName == ""_ITM_registerTMCloneTable""); + static constexpr llvm::StringRef RegisterClasses(""_Jv_RegisterClasses"");; + static constexpr llvm::StringRef RegisterCloneTable(""_ITM_registerTMCloneTable"");; + static constexpr llvm::StringRef DeregisterCloneTable(""_ITM_deregisterTMCloneTable"");; + if (SymName == RegisterClasses ||; + SymName == RegisterCloneTable ||; + SymName == DeregisterCloneTable); continue;; }. ```. Do you want me to submit this separately, outside this PR?. > > On the performance side, the current state seems to veery slow: `ctest -j12 -R dataframe .` used to take in the order of 2m30s, now I aborted it after 13 minutes. A lot of time seems to be spent in `sys`, are you aware of changes that could explain this?; > ; > Can you paste the stack trace? I fear that the DynamicLibraryManagerSymbol.cpp stopped inlining functions due to some recent calls of ::StringRef::str()... `perf` says a number of kernel functions and indeed `cling::Dyld::ContainsSymbol` are the largest contenders. I don't understand why though, the annotations inside the functions make no sense to me (showing more than 50% on a ` mov %ebx,%r8d` without something obvious around it).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1088604187:2216,abort,aborted,2216,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1088604187,1,['abort'],['aborted']
Safety,instructions; 4.2064 ( 3.3%) 0.1518 ( 16.6%) 4.3582 ( 3.3%) 4.3642 ( 3.3%) X86 DAG->DAG Instruction Selection; 0.5607 ( 0.4%) 0.5501 ( 60.0%) 1.1108 ( 0.9%) 1.1122 ( 0.9%) X86 Assembly Printer; 0.8415 ( 0.7%) 0.0053 ( 0.6%) 0.8468 ( 0.7%) 0.8477 ( 0.7%) Machine Instruction Scheduler; 0.7902 ( 0.6%) 0.0112 ( 1.2%) 0.8013 ( 0.6%) 0.8022 ( 0.6%) Greedy Register Allocator; 0.6279 ( 0.5%) 0.0060 ( 0.7%) 0.6339 ( 0.5%) 0.6345 ( 0.5%) Live Variable Analysis; 0.3958 ( 0.3%) 0.0048 ( 0.5%) 0.4006 ( 0.3%) 0.4010 ( 0.3%) Simple Register Coalescing; 0.2857 ( 0.2%) 0.0020 ( 0.2%) 0.2877 ( 0.2%) 0.2881 ( 0.2%) Combine redundant instructions #3; 0.2847 ( 0.2%) 0.0021 ( 0.2%) 0.2867 ( 0.2%) 0.2871 ( 0.2%) Combine redundant instructions #2; 0.2842 ( 0.2%) 0.0024 ( 0.3%) 0.2866 ( 0.2%) 0.2870 ( 0.2%) Combine redundant instructions #6; 0.2842 ( 0.2%) 0.0015 ( 0.2%) 0.2858 ( 0.2%) 0.2861 ( 0.2%) Combine redundant instructions #5; 0.2837 ( 0.2%) 0.0017 ( 0.2%) 0.2854 ( 0.2%) 0.2857 ( 0.2%) Combine redundant instructions #4; 0.2825 ( 0.2%) 0.0017 ( 0.2%) 0.2842 ( 0.2%) 0.2846 ( 0.2%) Combine redundant instructions #7; 0.2828 ( 0.2%) 0.0012 ( 0.1%) 0.2841 ( 0.2%) 0.2844 ( 0.2%) Machine Common Subexpression Elimination; 0.1977 ( 0.2%) 0.0031 ( 0.3%) 0.2008 ( 0.2%) 0.2010 ( 0.2%) CodeGen Prepare; 0.1788 ( 0.1%) 0.0036 ( 0.4%) 0.1824 ( 0.1%) 0.1826 ( 0.1%) Constant Hoisting; 0.1525 ( 0.1%) 0.0040 ( 0.4%) 0.1565 ( 0.1%) 0.1567 ( 0.1%) Called Value Propagation; 0.1465 ( 0.1%) 0.0070 ( 0.8%) 0.1535 ( 0.1%) 0.1538 ( 0.1%) Interprocedural Sparse Conditional Constant Propagation; 0.1317 ( 0.1%) 0.0010 ( 0.1%) 0.1327 ( 0.1%) 0.1329 ( 0.1%) Machine Copy Propagation Pass; 0.1281 ( 0.1%) 0.0019 ( 0.2%) 0.1299 ( 0.1%) 0.1301 ( 0.1%) Prologue/Epilogue Insertion & Frame Finalization; 0.1210 ( 0.1%) 0.0016 ( 0.2%) 0.1226 ( 0.1%) 0.1227 ( 0.1%) Live Interval Analysis; 0.1161 ( 0.1%) 0.0011 ( 0.1%) 0.1172 ( 0.1%) 0.1173 ( 0.1%) X86 Byte/Word Instruction Fixup; 0.1104 ( 0.1%) 0.0037 ( 0.4%) 0.1141 ( 0.1%) 0.1,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9312#issuecomment-976463242:4156,redund,redundant,4156,https://root.cern,https://github.com/root-project/root/issues/9312#issuecomment-976463242,1,['redund'],['redundant']
Safety,"int-BackslashNewline; Done constructing a list of tests; Updating test list for fixtures; Added 0 tests to meet fixture requirements; Checking test dependency graph...; Checking test dependency graph end; test 972; Start 972: roottest-cling-exception-nullderef-e. 972: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Users/bellenot/build/x64/release/bin/root.exe^-l^-b^-q^--ptrcheck^-e^int*p=nullptr^-e^*p"" ""-DOUT=C:/Users/bellenot/build/x64/release/roottest/cling/exception/nullderef-e.log"" ""-DCWD=C:/Users/bellenot/build/x64/release/roottest/cling/exception"" ""-DRC=1"" ""-DDIFFCMD=C:/Python39-32/python.exe^C:/Users/bellenot/git/roottest/scripts/custom_diff.py"" ""-DSYS=C:/Users/bellenot/build/x64/release"" ""-DENV=ROOTSYS=C:/Users/bellenot/build/x64/release#PYTHONPATH=C:/Users/bellenot/build/x64/release/bin"" ""-P"" ""C:/Users/bellenot/build/x64/release/RootTestDriver.cmake""; 972: Environment variables:; 972: ROOT_HIST=0; 972: Test timeout computed to be: 300; 972: -- TEST COMMAND --; 972: cd C:/Users/bellenot/build/x64/release/roottest/cling/exception; 972: C:/Users/bellenot/build/x64/release/bin/root.exe -l -b -q --ptrcheck -e 'int*p=nullptr' -e '*p'; 972: -- BEGIN TEST OUTPUT --; 972:; 972: (int *) nullptr; 972:; 972: -- END TEST OUTPUT --; 972: -- BEGIN TEST ERROR --; 972: Error in <HandleInterpreterException>: Trying to dereference null pointer or trying to call routine taking non-null arguments; 972: Execution of your code was aborted.; 972: ROOT_cli_1:1:2: warning: null passed to a callee that requires a non-null argument [-Wnonnull]; 972: *p; 972: ^; 972:; 972: -- END TEST ERROR --; 1/1 Test #972: roottest-cling-exception-nullderef-e ... Passed 0.44 sec. The following tests passed:; roottest-cling-exception-nullderef-e. 100% tests passed, 0 tests failed out of 1. Label Time Summary:; cling = 0.44 sec*proc (1 test); regression = 0.44 sec*proc (1 test); roottest = 0.44 sec*proc (1 test). Total Test time (real) = 2.93 sec; ```; And BTW, no need to report the tes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9742#issuecomment-1025965371:1713,timeout,timeout,1713,https://root.cern,https://github.com/root-project/root/issues/9742#issuecomment-1025965371,1,['timeout'],['timeout']
Safety,io: Avoid infinite recursion in TFile::Open,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15591:4,Avoid,Avoid,4,https://root.cern,https://github.com/root-project/root/pull/15591,3,['Avoid'],['Avoid']
Safety,ion ; //--------------------------------------------------------------------------; // Copyright (C) Organisation europeenne pour la Recherche nucleaire (CERN); // All rights reserved.; //; // For the licensing terms see $DD4hepINSTALL/LICENSE.; // For the list of contributors see $DD4hepINSTALL/doc/CREDITS.; //; //====================================================================; //; // Define the ROOT dictionaries for all data classes to be saved ; // which are created by the DDG4 examples.; //; // Author : M.Frank; //; //====================================================================. // Framework include files; #include <DDG4/DDG4Dict.h>; #include <DDG4/Geant4Config.h>; #include <DDG4/Geant4Primary.h>; #include <DDG4/Geant4Random.h>; #include <DDG4/Geant4DataDump.h>; #include <DDG4/Geant4InputAction.h>; #include <DDG4/Geant4GeneratorWrapper.h>. /// Namespace for the AIDA detector description toolkit; namespace dd4hep {. /// Namespace for the Geant4 based simulation part of the AIDA detector description toolkit; namespace sim {. #define ACTIONHANDLE(x) \; struct x##Handle { \; Geant4##x* action; \; explicit x##Handle(Geant4##x* a) : action(a) { if ( action ) action->addRef();} \; x##Handle(const x##Handle& h) : action(h.action) { if ( action ) action->addRef();} \; ~x##Handle() { if ( action) action->release(); } \; Geant4##x* release() { Geant4##x* tmp = action; action=0; return tmp; } \; operator dd4hep::sim::Geant4##x* () const { return action; } \; Geant4##x* operator->() const { return action; } \; Geant4##x* get() const { return action; } \; }. ACTIONHANDLE(Filter);; ACTIONHANDLE(Action);; ACTIONHANDLE(PhaseAction);; ACTIONHANDLE(RunAction);; ACTIONHANDLE(EventAction);; ACTIONHANDLE(GeneratorAction);; ACTIONHANDLE(PhysicsList);; ACTIONHANDLE(TrackingAction);; ACTIONHANDLE(SteppingAction);; ACTIONHANDLE(StackingAction);; ACTIONHANDLE(DetectorConstruction);; ACTIONHANDLE(Sensitive);; ACTIONHANDLE(ParticleHandler);; ACTIONHANDLE(UserInitialization);. A,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15221#issuecomment-2053701039:3016,detect,detector,3016,https://root.cern,https://github.com/root-project/root/issues/15221#issuecomment-2053701039,3,['detect'],['detector']
Safety,"ion(GeneratorActionHandle f) { return f.action; }; static Geant4Action* toAction(GeneratorActionSequenceHandle f) { return f.action; }; static Geant4Action* toAction(RunActionSequenceHandle f) { return f.action; }; static Geant4Action* toAction(EventActionSequenceHandle f) { return f.action; }; static Geant4Action* toAction(TrackingActionSequenceHandle f) { return f.action; }; static Geant4Action* toAction(SteppingActionSequenceHandle f) { return f.action; }; static Geant4Action* toAction(StackingActionSequenceHandle f) { return f.action; }; static Geant4Action* toAction(PhysicsListActionSequenceHandle f) { return f.action; }; static Geant4Action* toAction(SensDetActionSequenceHandle f) { return f.action; }; static Geant4Action* toAction(UserInitializationHandle f) { return f.action; }; static Geant4Action* toAction(UserInitializationSequenceHandle f){ return f.action; }; static Geant4Action* toAction(DetectorConstructionHandle f) { return f.action; }; static Geant4Action* toAction(DetectorConstructionSequenceHandle f){ return f.action; }; static PropertyResult getProperty(Geant4Action* action, const std::string& name) {; if ( action->hasProperty(name) ) {; return PropertyResult(action->property(name).str(),1);; }; return PropertyResult("""",0);; }; static int setProperty(Geant4Action* action, const std::string& name, const std::string& value) {; if ( action->hasProperty(name) ) {; action->property(name).str(value);; return 1;; }; return 0;; }; static PropertyResult getPropertyKernel(Geant4Kernel* kernel, const std::string& name) {; if ( kernel->hasProperty(name) ) {; return PropertyResult(kernel->property(name).str(),1);; }; return PropertyResult("""",0);; }; static int setPropertyKernel(Geant4Kernel* kernel, const std::string& name, const std::string& value) {; if ( kernel->hasProperty(name) ) {; kernel->property(name).str(value);; return 1;; }; return 0;; }; };. /// Container definitions for Geant4Vertex; typedef std::vector<Geant4Vertex*> Geant4VertexVector;; typedef",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15221#issuecomment-2053701039:11022,Detect,DetectorConstructionSequenceHandle,11022,https://root.cern,https://github.com/root-project/root/issues/15221#issuecomment-2053701039,3,['Detect'],['DetectorConstructionSequenceHandle']
Safety,"ion, const std::string& name, const std::string& value) {; if ( action->hasProperty(name) ) {; action->property(name).str(value);; return 1;; }; return 0;; }; static PropertyResult getPropertyKernel(Geant4Kernel* kernel, const std::string& name) {; if ( kernel->hasProperty(name) ) {; return PropertyResult(kernel->property(name).str(),1);; }; return PropertyResult("""",0);; }; static int setPropertyKernel(Geant4Kernel* kernel, const std::string& name, const std::string& value) {; if ( kernel->hasProperty(name) ) {; kernel->property(name).str(value);; return 1;; }; return 0;; }; };. /// Container definitions for Geant4Vertex; typedef std::vector<Geant4Vertex*> Geant4VertexVector;; typedef std::map<int,Geant4Vertex*> Geant4VertexIntMap;. /// Container definitions for Geant4Particle; typedef std::vector<Geant4Particle*> Geant4ParticleVector;; typedef std::map<int,Geant4Particle*> Geant4ParticleIntMap;; }; }. typedef dd4hep::sim::Geant4ActionCreation Geant4ActionCreation;. #include <DD4hep/detail/DetectorInterna.h>; #include <DDG4/Geant4UIManager.h>. // CINT configuration; #if defined(__CINT__) || defined(__MAKECINT__) || defined(__CLING__) || defined(__ROOTCLING__). //#pragma link C++ namespace DDSegmentation;. /// Geant4 Vertex dictionaries; #pragma link C++ class dd4hep::sim::VertexExtension+;; #pragma link C++ class dd4hep::sim::Geant4Vertex+;; #pragma link C++ class vector<dd4hep::sim::Geant4Vertex*>+;; #pragma link C++ class map<int,dd4hep::sim::Geant4Vertex*>+;. #pragma link C++ class dd4hep::sim::Geant4ParticleMap+;; #pragma link C++ class dd4hep::sim::PrimaryExtension+;; #pragma link C++ class dd4hep::sim::Geant4PrimaryInteraction+;; #pragma link C++ class std::vector<dd4hep::sim::Geant4PrimaryInteraction*>+;; #pragma link C++ class std::map<int,dd4hep::sim::Geant4PrimaryInteraction*>+;; #pragma link C++ class dd4hep::sim::Geant4PrimaryEvent+;. #pragma link C++ typedef dd4hep::sim::Geant4VertexVector;; #pragma link C++ typedef dd4hep::sim::Geant4VertexIntMap;. #pra",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15221#issuecomment-2053701039:12338,Detect,DetectorInterna,12338,https://root.cern,https://github.com/root-project/root/issues/15221#issuecomment-2053701039,3,['Detect'],['DetectorInterna']
Safety,"ion; TString operator+(const char *cs, const TString &s);; ^; /home/user/builds/build-root_src-Desktop-Debug/include/TEveUtil.h:117:15: note: candidate function; TEveException operator+(const TEveException &s1, const TString &s2);; ^; root.exe: /opt/root_src/core/metacling/src/TCling.cxx:2326: virtual void TCling::RegisterModule(const char*, const char**, const char**, const char*, const char*, void (*)(), const FwdDeclArgsToKeepCollection_t&, const char**, Bool_t, Bool_t): Assertion `cling::Interpreter::kSuccess == compRes && ""Payload code of a dictionary could not be parsed correctly.""' failed.; ```. When running with gdb, I get:. ```; (gdb) run; Starting program: /home/user/builds/build-root_src-Desktop-Debug/bin/root.exe -b /tmp/test.cpp+; warning: File ""/home/user/builds/build-root_src-Desktop-Debug/lib/libCore.so-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; 	add-auto-load-safe-path /home/user/builds/build-root_src-Desktop-Debug/lib/libCore.so-gdb.py; line to your configuration file ""/home/user/.gdbinit"".; To completely disable this security protection add; 	set auto-load safe-path /; line to your configuration file ""/home/user/.gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; 	info ""(gdb)Auto-loading safe path""; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; ------------------------------------------------------------------; | Welcome to ROOT 6.25/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jun 08 2021, 21:53:04 |; | From heads/master@v6-25-01-1189-g1ca221f010 |; | With |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8524#issuecomment-870074605:2765,safe,safe-path,2765,https://root.cern,https://github.com/root-project/root/issues/8524#issuecomment-870074605,1,['safe'],['safe-path']
Safety,"ionEb+0x18c)[0x55e9490e2204]; ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling(_ZN5cling13MetaProcessor7processEN4llvm9StringRefERNS_11Interpreter17CompilationResultEPNS_5ValueEb+0x2e8)[0x55e9491af26c]; ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling(_ZN5cling13UserInterface16runInteractivelyEb+0x350)[0x55e9492e7de2]; ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling(main+0x662)[0x55e948db547f]; /usr/lib/libc.so.6(+0x29290)[0x7f2646229290]; /usr/lib/libc.so.6(__libc_start_main+0x8a)[0x7f264622934a]; ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling(_start+0x25)[0x55e948db4c55]; PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace.; Stack dump:; 0.	Program arguments: ""./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling"" -std=c++17; 1.	/usr/lib/gcc/x86_64-pc-linux-gnu/12.1.0/../../../../include/c++/12.1.0/bits/fs_dir.h:43:1: parsing namespace 'std'; Aborted (core dumped); ```. I did have some failing tests, so perhaps they culminate into this issue. ```; Failed Tests (14):; Cling :: CodeUnloading/AtExit.C; Cling :: CodeUnloading/PCH/VTables.C; Cling :: CodeUnloading/PCH/VTablesClingPCH.C; Cling :: CodeUnloading/RereadFile.C; Cling :: CodeUnloading/RunAgainstClangTestSuite/RunAgainstClangTestSuite.C; Cling :: DynamicLibraryManager/cached_realpath.C; Cling :: DynamicLibraryManager/callable_lib_L_AB_abs.C; Cling :: DynamicLibraryManager/callable_lib_L_AB_order1.C; Cling :: ErrorRecovery/Lamda.C; Cling :: ErrorRecovery/StoredState.C; Cling :: MultipleInterpreters/MultipleInterpreters.C; Cling :: Pragmas/opt.C; Cling :: Prompt/MetaProcessor/DotO.C; Cling :: Prompt/ValuePrinter/Collections.C. Testing Time: 158.54s; Unsupported : 14; Passed : 144; Expectedly Failed: 13; Failed : 14; make[3]: *** [tools/cling/test/CMakeFiles/check-cling.dir/build.make:71: tools/cling/test/CMakeFiles/check-cling] Error 1; make[2]: *** [CMakeFiles/Makefi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1192175843:11083,Abort,Aborted,11083,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1192175843,1,['Abort'],['Aborted']
Safety,"is PR adds a CLI to the `RNTupleImporter` utility. The executable is called `ttree2rntuple` (can be changed if there are suggestions for better names), usage is as follows (copied from `ttree2rntuple --help`):. ```; Usage:; ttree2rntuple (--ttree|-t) name; (--infile|-i) path; (--outfile|-o) path; [(--rntuple|-r) name]; [(--compression|-c) compression]; [--unzipped-page-size size]; [--zipped-cluster-size size]; [--max-unzipped-cluster-size size]; [--convert-dots]; [(--verbose|-v)]; ttree2rntuple [--help|-h]. ttree2rntuple: a utility CLI for converting ROOT TTrees to ROOT RNTuples. Required arguments:; --ttree, -t name; The name of the source TTree to convert to RNTuple.; --infile, -i path; The path to the ROOT file that contains the source TTree.; --outfile, -o path; The path to the ROOT file to write the target RNTuple to. This file does not have to exist yet.; This may be the same file as the input file. Note that in this case the name of the target RNTuple should; be set to something different from the source TTree name using `--rntuple`, to avoid naming conflicts. Optional arguments:; --rntuple, -r name; The name of the target RNTuple.; This argument is optional. When not provided, the name of the source TTree will be used.; --compression, -c compression; The compression settings of the target RNTuple, provided as an integer.; This argument should be provided following ROOT's compression setting scheme (algorithm * 100 + level),; where `algorithm` uses the following mapping: {1: ZLIB, 2: LZMA, 4: LZMA, 5: ZSTD} ; and `level` is a number from 0 to 9 (inclusive, 0 indicating no compression).; If not specified, the default zstd (505) compression is used.; --unzipped-page-size size; The desired approximate unzipped (in-memory) page size in bytes, provided as an integer.; If not specified, the default size of 64 * 1024 bytes is used.; --zipped-cluster-size size; The desired approximate zipped cluster size in bytes, provided as an integer.; If not specified, the default",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14038:1062,avoid,avoid,1062,https://root.cern,https://github.com/root-project/root/pull/14038,1,['avoid'],['avoid']
Safety,"is false in /opt/root_src/geom/geom/src/TGeoPcon.cxx:680; 17: 'is_seg' is false in /opt/root_src/geom/geom/src/TGeoPcon.cxx:681; 18: Taking false branch in /opt/root_src/geom/geom/src/TGeoPcon.cxx:681; 19: 'is_tube' is false in /opt/root_src/geom/geom/src/TGeoPcon.cxx:685; 20: Taking false branch in /opt/root_src/geom/geom/src/TGeoPcon.cxx:685; 21: Value assigned to field 'fNodes' in /opt/root_src/geom/geom/src/TGeoPcon.cxx:690; 22: Called C++ object pointer is null in /opt/root_src/geom/geom/src/TGeoPcon.cxx:691; /opt/root_src/geom/geom/src/TGeoPcon.cxx:857:11: warning: Although the value stored to 'indx2' is used in the enclosing expression, the value is never actually read from 'indx2' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to 'indx2' is used in the enclosing expression, the value is never actually read from 'indx2' in /opt/root_src/geom/geom/src/TGeoPcon.cxx:857; /opt/root_src/geom/geom/src/TGeoPcon.cxx:1108:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoPcon.cxx:1108; /opt/root_src/geom/geom/src/TGeoPcon.cxx:1174:7: warning: Value stored to 'iplane' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'iplane' is never read in /opt/root_src/geom/geom/src/TGeoPcon.cxx:1174; /opt/root_src/geom/geom/src/TGeoPcon.cxx:1175:7: warning: Value stored to 'saftmp' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'saftmp' is never read in /opt/root_src/geom/geom/src/TGeoPcon.cxx:1175; /opt/root_src/geom/geom/src/TGeoPcon.cxx:1200:7: warning: Value stored to 'dz' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'dz' is never read in /opt/root_src/geom/geom/src/TGeoPcon.cxx:1200; /opt/root_src/geom/geom/src/TGeoPcon.cxx:1205:4: warning: Value stored to 'saftmp' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:52194,safe,safe,52194,https://root.cern,https://github.com/root-project/root/issues/7428,1,['safe'],['safe']
Safety,it 'was' in the sense that the user 'got' a typed object (maybe via some currently type-unsafe method) and could from then on only use it for a single type.; With the new abstraction the type-safety check now needs to be executed for every single call to RFieldValue::Get rather than 'just' for the 'grab the RFieldValue<type>',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3829#issuecomment-493469099:88,unsafe,unsafe,88,https://root.cern,https://github.com/root-project/root/pull/3829#issuecomment-493469099,2,"['safe', 'unsafe']","['safety', 'unsafe']"
Safety,it gets in this condition:. https://github.com/AIDASoft/DD4hep/blob/9bbe12b080ce52615251facc6f6ff5dd58a60e69/DDCore/src/DetectorImp.cpp#L205-L208. which changes the value to ; https://github.com/AIDASoft/DD4hep/blob/9bbe12b080ce52615251facc6f6ff5dd58a60e69/DDCore/src/DetectorImp.cpp#L207. DD4HEP_USE_GEANT4_UNITS if DD4Hep is built with DD4HEP_USE_GEANT4_UNITS. should we build DD4Hep with DD4HEP_USE_GEANT4_UNITS=OFF then ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8955#issuecomment-914123141:120,Detect,DetectorImp,120,https://root.cern,https://github.com/root-project/root/pull/8955#issuecomment-914123141,2,['Detect'],['DetectorImp']
Safety,"ition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested; dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case woul",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11049:3377,detect,detector,3377,https://root.cern,https://github.com/root-project/root/pull/11049,1,['detect'],['detector']
Safety,ixMaxEngineImpl&lt;17&gt;’ ; - include/Math/MixMaxEngine.icc:38:12: error: invalid use of incomplete type ‘class ROOT::Math::MixMaxEngineImpl&lt;256&gt;’ ; - include/Math/MixMaxEngine.icc:38:12: error: invalid use of incomplete type ‘class ROOT::Math::MixMaxEngineImpl&lt;256&gt;’ ; - include/Math/MixMaxEngine.icc:55:7: error: invalid use of incomplete type ‘class ROOT::Math::MixMaxEngineImpl&lt;240&gt;’ ; - include/Math/MixMaxEngine.icc:55:7: error: invalid use of incomplete type ‘class ROOT::Math::MixMaxEngineImpl&lt;17&gt;’ ; - include/Math/MixMaxEngine.icc:55:7: error: invalid use of incomplete type ‘class ROOT::Math::MixMaxEngineImpl&lt;256&gt;’ . And 24 more. ### Warnings:; - include/Math/MixMaxEngine.icc:43:17: warning: possible problem detected in invocation of delete operator: [-Wdelete-incomplete] ; - include/Math/MixMaxEngine.icc:43:17: warning: invalid use of incomplete type ‘class ROOT::Math::MixMaxEngineImpl&lt;240&gt;’ ; - include/Math/MixMaxEngine.icc:43:17: warning: possible problem detected in invocation of delete operator: [-Wdelete-incomplete] ; - include/Math/MixMaxEngine.icc:43:17: warning: invalid use of incomplete type ‘class ROOT::Math::MixMaxEngineImpl&lt;17&gt;’ ; - include/Math/MixMaxEngine.icc:43:17: warning: possible problem detected in invocation of delete operator: [-Wdelete-incomplete] ; - include/Math/MixMaxEngine.icc:43:17: warning: invalid use of incomplete type ‘class ROOT::Math::MixMaxEngineImpl&lt;17&gt;’ ; - include/Math/MixMaxEngine.icc:43:17: warning: possible problem detected in invocation of delete operator: [-Wdelete-incomplete] ; - include/Math/MixMaxEngine.icc:43:17: warning: invalid use of incomplete type ‘class ROOT::Math::MixMaxEngineImpl&lt;17&gt;’ ; - include/Math/MixMaxEngine.icc:43:17: warning: possible problem detected in invocation of delete operator: [-Wdelete-incomplete] ; - include/Math/MixMaxEngine.icc:43:17: warning: invalid use of incomplete type ‘class ROOT::Math::MixMaxEngineImpl&lt;256&gt;’ . And 4 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1932#issuecomment-384663627:1760,detect,detected,1760,https://root.cern,https://github.com/root-project/root/pull/1932#issuecomment-384663627,8,['detect'],['detected']
Safety,"ject/root/issues/8947; - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:; - [ ] https://github.com/root-project/root/issues/9953 in combination with https://github.com/ammaraskar/gcc-problem-matcher; - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999; - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process.; - [x] Make the doxygen documentation thread-safe; - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally; - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md; - [x] Update rootspi scripts to build docu in CI accordingly; - [ ] tutorial generation does not work yet as ""out of source"". To-do...; - [x] require min doxygen version 1.9.4; - [ ] pre-check that output directory is empty ?; - [ ] if GVIZ not found, disable dot; - [ ] Stamp file generation to only recompile when changes; - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source); - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc; - [x] set NUM_PROC_THREADS; - [x] listLibs pass ROOT_CMD as variable; - [x] Understand why libs.C does not find classes such as TBrowserTimer in libCore.so; - [x] check why there are stdout.dat and N",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15160:1874,safe,safe,1874,https://root.cern,https://github.com/root-project/root/pull/15160,1,['safe'],['safe']
Safety,"jenkins/workspace/lc; g_nightly_pipeline/install/dev3/oracle/19.11.0.0.0/x86_64-centos7-gcc9-dbg;-Dbuiltin_nlohmannjson=OFF;-Droofit_multiprocess=OFF;-GUnix Makefiles;/build/jenkins/workspace/lcg_nightly_pipe; line/build/projects/ROOT-HEAD/src/ROOT/HEAD""); ```; And this is the corresponding log:; ```; -- The C compiler identification is GNU 9.2.0; -- The CXX compiler identification is GNU 9.2.0; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/gcc - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Git: /usr/bin/git (found version ""1.8.3.1""); -- Detected ROOT_VERSION 6.27.01; -- Checking internet connectivity...; -- Yes; -- Looking for Python; -- Found Python3: /build/jenkins/workspace/lcg_nightly_pipeline/install/dev3/Python/3.9.6/x86_64-centos7-gcc9-dbg/bin/python (found version ""3.9.6"") found components: Interpreter Develop; ment NumPy Development.Module Development.Embed; -- Looking for a Fortran compiler; -- Looking for a Fortran compiler - /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/gfortran; -- The Fortran compiler identification is GNU 9.2.0; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Check for working Fortran compiler: /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/gfortran - skipped; -- Checking whether /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/gfortran supports Fortran 90; -- Checking whether /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/gfortran supports Fortran 90 - yes; -- Found GCC. Maj",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9594#issuecomment-1015634743:2461,Detect,Detected,2461,https://root.cern,https://github.com/root-project/root/issues/9594#issuecomment-1015634743,1,['Detect'],['Detected']
Safety,"k: 3 Time/ms: 150; Chunk: 4 Time/ms: 200; Chunk: 5 Time/ms: 250; Chunk: 6 Time/ms: 301; Chunk: 7 Time/ms: 352; Chunk: 8 Time/ms: 402; Chunk: 9 Time/ms: 453; ```; (A similar result is obtained if I use the `std::cout` statement instead of the `TThread::Printf`.). Now the problem. If I run this same loop in an application with a GUI window and a `TThread` (full reproducer code is below), then I get quite weird results. The first step takes 107 ms ! And the later steps take 60 ms instead of 50 ms.; ```; Chunk: 0 Time/ms: 0; Chunk: 1 Time/ms: 107; Chunk: 2 Time/ms: 167; Chunk: 3 Time/ms: 226; Chunk: 4 Time/ms: 287; Chunk: 5 Time/ms: 347; Chunk: 6 Time/ms: 409; Chunk: 7 Time/ms: 470; Chunk: 8 Time/ms: 531; Chunk: 9 Time/ms: 592; ```; (In contrast, if I use `std::cout` instead of `Printf`, every step is perfectly 50 ms). I found out that on line https://github.com/root-project/root/blob/a89eb12f83228833842813c4b690a2033778316b/core/thread/src/TThread.cxx#L1043, there is a timer being created, with a timeout of 20 ms, https://github.com/root-project/root/blob/a89eb12f83228833842813c4b690a2033778316b/core/thread/inc/TThread.h#L208. If I remove the `+ 10` ms and recompile ROOT, I get better results, (except for the first iteration):; ```; Chunk: 0 Time/ms: 0; Chunk: 1 Time/ms: 111; Chunk: 2 Time/ms: 161; Chunk: 3 Time/ms: 211; Chunk: 4 Time/ms: 262; Chunk: 5 Time/ms: 312; Chunk: 6 Time/ms: 362; Chunk: 7 Time/ms: 415; Chunk: 8 Time/ms: 469; Chunk: 9 Time/ms: 521; ```. ### Optional: share how it could be improved; It would be nice if there was a static method to tune the resolution of the `TThreadTimer` as well as the `TSystem::kITimerResolution` for applications requiring high performance, so that there is no 10ms (or 100ms at the beginning) delay due to a `Printf()` (or an` Emit()` for the signal-slot mechanism to communicate between threads). Right now, `ESysConstants::kItimerResolution` is not assignable at runtime, and `TThreadTimer` timeout is not configurable by the user",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8582:2479,timeout,timeout,2479,https://root.cern,https://github.com/root-project/root/issues/8582,1,['timeout'],['timeout']
Safety,"ked_Muons.root"", ""eos.url.xroot"", ""root://eoshome-a.cern.ch//eos/us""..., 79) = 79; write(1, ""Muons with opposite charge: pass""..., 97Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %; ```; and finally, one with the code moved to the place you suggested (using `expandedUrl`):; ```bash; $ strace ./dimuon Run2012BC_DoubleMuParked_Muons.root 2>&1 | grep Muons; execve(""./dimuon"", [""./dimuon"", ""Run2012BC_DoubleMuParked_Muons.r""...], 0x7ffccf746158 /* 49 vars */) = 0; getxattr(""Run2012BC_DoubleMuParked_Muons.root"", ""eos.url.xroot"", NULL, 0) = 25; getxattr(""Run2012BC_DoubleMuParked_Muons.root"", ""eos.url.xroot"", ""root://eoshome-a.cern.ch/"", 25) = 25; access(""/eos/home-a/amadio/Run2012BC_DoubleMuParked_Muons.root"", F_OK) = 0; access(""/eos/home-a/amadio/Run2012BC_DoubleMuParked_Muons.root"", R_OK) = 0; openat(AT_FDCWD, ""/eos/home-a/amadio/Run2012BC_DoubleMuParked_Muons.root"", O_RDONLY) = 12; lstat(""/eos/home-a/amadio/Run2012BC_DoubleMuParked_Muons.root"", {st_mode=S_IFREG|0644, st_size=2244449133, ...}) = 0; lstat(""/eos/home-a/amadio/Run2012BC_DoubleMuParked_Muons.root"", {st_mode=S_IFREG|0644, st_size=2244449133, ...}) = 0; getxattr(""Run2012BC_DoubleMuParked_Muons.root"", ""eos.url.xroot"", NULL, 0) = 79; getxattr(""Run2012BC_DoubleMuParked_Muons.root"", ""eos.url.xroot"", ""root://eoshome-a.cern.ch//eos/us""..., 79) = 79; getxattr(""Run2012BC_DoubleMuParked_Muons.root"", ""eos.url.xroot"", NULL, 0) = 79; getxattr(""Run2012BC_DoubleMuParked_Muons.root"", ""eos.url.xroot"", ""root://eoshome-a.cern.ch//eos/us""..., 79) = 79; write(1, ""Muons with opposite charge: pass""..., 97Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %; ```; It is a bit puzzling (doesn't always happen), but as you can see, in the case using `expandedUrl`, sometimes the URL returned is only the base management URL, and the file may be opened via FUSE. This doesn't always happen, but I thought I'd be on the safe side and avoid potential problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11644#issuecomment-1311572434:4678,safe,safe,4678,https://root.cern,https://github.com/root-project/root/pull/11644#issuecomment-1311572434,2,"['avoid', 'safe']","['avoid', 'safe']"
Safety,"l but I get; >>>> ; >>>> $ curl -v https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Cdqing%40triumf.ca%7C96f8066e53054f808afe08d9156b7b02%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564373643137511%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=GjymmnKYXiP8M44wA%2FsXFGn3CjwfNf1W8%2BpOLMvcaJg%3D&reserved=0>; >>>> * Trying 206.12.9.197:2880...; >>>> * TCP_NODELAY set; >>>> * Trying 2607:f8f0:660:3::36:2880...; >>>> * TCP_NODELAY set; >>>> * Immediate connect fail for 2607:f8f0:660:3::36: Network is unreachable; >>>> Is that expected?; >>>> ; >> ; >>> ***@***.*** t5]$ curl -v https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Cdqing%40triumf.ca%7C96f8066e53054f808afe08d9156b7b02%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564373643137511%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=GjymmnKYXiP8M44wA%2FsXFGn3CjwfNf1W8%2BpOLMvcaJg%3D&reserved=0>; >>> * About to connect() to webdav.lcg.triumf.ca <http://webdav.lcg.triumf.ca/> port 2880 (#0); >>> * Trying 2607:f8f0:660:3::36...; >>> * Connected to webdav.lcg.triumf.ca <http://webdav.lcg.triumf.ca/> (2607:f8f0:660:3::36) port 2880 (#0); >>> * Initializing NSS with certpath: sql:/etc/pki/nssdb; >>> * CAfile: /etc/pki/tls/certs/ca-bundle.crt; >>> CApath: none; >>> * Server certificate:; >>> * 	subject: CN=dpool46.lcg.triumf.ca <http://dpool46.lcg.triumf.ca/>,OU=triumf.ca <https://can01.safelinks.protection.outlook.com/?url=http%3A%2F%2",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-839972447:2329,safe,safelinks,2329,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-839972447,1,['safe'],['safelinks']
Safety,"l>; This is free software: you are free to change and redistribute it.; There is NO WARRANTY, to the extent permitted by law.; Type ""show copying"" and ""show warranty"" for details.; This GDB was configured as ""x86_64-pc-linux-gnu"".; Type ""show configuration"" for configuration details.; For bug reporting instructions, please see:; <https://bugs.gentoo.org/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>. For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from bin/root.exe...; (gdb) break f; Function ""f"" not defined.; Make breakpoint pending on future shared library load? (y or [n]) y; Breakpoint 1 (f) pending.; (gdb) run; Starting program: /srv/root/build/bin/root.exe ; warning: File ""/srv/root/build/lib/libCore.so-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; 	add-auto-load-safe-path /srv/root/build/lib/libCore.so-gdb.py; line to your configuration file ""/home/amadio/.config/gdb/gdbinit"".; To completely disable this security protection add; 	set auto-load safe-path /; line to your configuration file ""/home/amadio/.config/gdb/gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; 	info ""(gdb)Auto-loading safe path""; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/usr/lib64/libthread_db.so.1"".; [Detaching after vfork from child process 798483]; [Detaching after vfork from child process 800084]; [Detaching after vfork from child process 800087]; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Dec 13 2022, 14:33:20 |; | From heads/cling-profile-debug@v6-25-02-31",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11882:1537,safe,safe-path,1537,https://root.cern,https://github.com/root-project/root/pull/11882,1,['safe'],['safe-path']
Safety,lang-analyzer-deadcode.DeadStores]; 1: Value stored to 'nbPnts' is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:577; /opt/root_src/geom/geom/src/TGeoTorus.cxx:646:10: warning: Value stored to 'indx' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'indx' is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:646; /opt/root_src/geom/geom/src/TGeoTorus.cxx:661:10: warning: Value stored to 'indx' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'indx' is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:661; /opt/root_src/geom/geom/src/TGeoTorus.cxx:697:7: warning: Value stored to 'i' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'i' is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:697; /opt/root_src/geom/geom/src/TGeoTorus.cxx:741:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:741; /opt/root_src/geom/geom/src/TGeoTorus.cxx:1065:13: warning: Value stored to 's' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 's' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:1065; /opt/root_src/geom/geom/src/TGeoTrd1.cxx:199:13: warning: Value stored to 'snxt' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'snxt' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTrd1.cxx:199; /opt/root_src/geom/geom/src/TGeoTrd1.cxx:317:13: warning: Value stored to 'snxt' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'snxt' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTrd1.cxx:317; /opt/root_src/geom/geom/src/TGeoTrd1.cxx:456:31: warning: Called C++ object pointer is null [clang-analyzer-cor,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:66313,safe,safe,66313,https://root.cern,https://github.com/root-project/root/issues/7428,1,['safe'],['safe']
Safety,"lapping, yet for which ROOT reports an overlap. (This is similar to #11781, but this time there is no explanation due to incorrect default units.). ### Expected behavior; There should be no overlap reported. Drawing the overlap (last line in reproduce commands below) shows the two tessellated objects without overlap:; ![image](https://user-images.githubusercontent.com/4656391/204112181-59b9798d-ca48-4426-9ab8-734e11f895d0.png). ### To Reproduce; ```console; auto* geo = TGeoManager::Import(""overlap_issue.gdml""); geo->CheckOverlaps(); geo->PrintOverlaps(); auto* vol1 = geo->GetTopNode()->GetDaughter(0)->GetVolume(); auto* vol2 = geo->GetTopNode()->GetDaughter(1)->GetVolume(); auto* mat1 = geo->GetTopNode()->GetDaughter(0)->GetMatrix(); auto* mat2 = geo->GetTopNode()->GetDaughter(1)->GetMatrix(); TGeoChecker ch(geo); overlap = ch.MakeCheckOverlap(""overlap"", vol1, vol2, mat1, mat2, false, 0.1); overlap->Print(); overlap->Draw(); ```; which produces:; ```console; 17:07:21 wdconinc@menelaos ~/EIC/detectors/epic (main *$%=) $ root -l ; root [0] auto* geo = TGeoManager::Import(""overlap_issue.gdml""); Info in <TGeoManager::Import>: Reading geometry from file: overlap_issue.gdml; Info in <TGeoManager::TGeoManager>: Geometry GDMLImport, Geometry imported from GDML created; Info in <TGeoManager::SetTopVolume>: Top volume is barrel. Master volume is barrel; Info in <TGeoNavigator::BuildCache>: --- Maximum geometry depth set to 100; Info in <TGeoManager::CheckGeometry>: Fixing runtime shapes...; Info in <TGeoManager::CheckGeometry>: ...Nothing to fix; Warning in <TGeoManager::CheckGeometry>: Volume ""plate"" has no medium: assigned dummy medium and material; Warning in <TGeoManager::CheckGeometry>: Volume ""barrel"" has no medium: assigned dummy medium and material; Info in <TGeoManager::CloseGeometry>: Counting nodes...; Info in <TGeoManager::Voxelize>: Voxelizing...; Info in <TGeoManager::CloseGeometry>: Building cache...; Info in <TGeoManager::CountLevels>: max level = 1, max placem",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11784:1296,detect,detectors,1296,https://root.cern,https://github.com/root-project/root/issues/11784,1,['detect'],['detectors']
Safety,"lar expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C...; In module 'std' imported from input_line_1:1:; /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer; static constexpr size_type npos = size_type(-1);; ^; /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here; rfind(_CharT __c, size_type __pos = npos) const noexcept;; ^; /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here; return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);; ^; input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here; *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<ROOT::RDF::RSnapshotOptions*>(0x7fffffff9a40));; ^; /usr/include/c++/7/string_view:88:41: note: previous initialization is here; static constexpr size_type npos = size_type(-1);; ^; terminate called after throwing an instance of 'std::runtime_error'; what(): ; An error occurred while jitting in Snapshot. The lines above might indicate the cause of the crash. CMake Error at /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/RootTestDriver.cmake:238 (message):; error code: Child aborted. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4437:2432,abort,aborted,2432,https://root.cern,https://github.com/root-project/root/pull/4437,1,['abort'],['aborted']
Safety,"lbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/131193/console).; ### Warnings:; - [2021-11-30T07:25:41.000Z] /data/sftnight/workspace/root-pullrequests-build/root/graf2d/mathtext/src/table/adobeglyphlist.h:128:44: warning: unpaired UTF-8 bidirectional character detected [-Wbidirectional=] ; - [2021-11-30T07:25:41.000Z] /data/sftnight/workspace/root-pullrequests-build/root/graf2d/mathtext/src/table/adobeglyphlist.h:128:55: warning: unpaired UTF-8 bidirectional character detected [-Wbidirectional=] ; - [2021-11-30T07:31:10.411Z] /data/sftnight/workspace/root-pullrequests-build/root/graf2d/postscript/src/AdobeGlyphList.h:110:44: warning: unpaired UTF-8 bidirectional character detected [-Wbidirectional=] ; - [2021-11-30T07:31:10.411Z] /data/sftnight/workspace/root-pullrequests-build/root/graf2d/postscript/src/AdobeGlyphList.h:110:55: warning: unpaired UTF-8 bidirectional character detected [-Wbidirectional=] ; - [2021-11-30T07:31:27.486Z] /data/sftnight/workspace/root-pullrequests-build/root/roofit/roofitcore/inc/TestStatistics/LikelihoodGradientWrapper.h:45:17: warning: ‘virtual void RooFit::TestStatistics::LikelihoodGradientWrapper::synchronizeParameterSettings(const std::vector&lt;ROOT::Fit::ParameterSettings&gt;&)’ was hidden [-Woverloaded-virtual] ; - [2021-11-30T07:31:27.486Z] /data/sftnight/workspace/root-pullrequests-build/root/roofit/roofitcore/inc/TestStatistics/LikelihoodGradientJob.h:47:9: warning: by ‘virtual void RooFit::TestStatistics::LikelihoodGradientJob::synchronizeParameterSettings(ROOT::Math::IMultiGenFunction*, const std::vector&lt;ROOT::Fit::ParameterSettings&gt;&)’ [-Woverloaded-virtual] ; - [2021-11-30T07:32:08.900Z] /data/sftnight/workspace/root-pullrequests-build/root/roofit/roofitcore/inc/TestStatistics/LikelihoodGradientWrapper.h:45:17: warning: ‘virtual void RooFit::TestStatistics::LikelihoodGradientWrapper::synchronizeParameterSe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9349#issuecomment-982368250:1076,detect,detected,1076,https://root.cern,https://github.com/root-project/root/pull/9349#issuecomment-982368250,1,['detect'],['detected']
Safety,lbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/133990/console).; ### Warnings:; - [2022-01-13T12:28:46.446Z] /data/sftnight/workspace/root-pullrequests-build/root/graf2d/mathtext/src/table/adobeglyphlist.h:128:44: warning: unpaired UTF-8 bidirectional character detected [-Wbidirectional=] ; - [2022-01-13T12:28:46.446Z] /data/sftnight/workspace/root-pullrequests-build/root/graf2d/mathtext/src/table/adobeglyphlist.h:128:55: warning: unpaired UTF-8 bidirectional character detected [-Wbidirectional=] ; - [2022-01-13T12:36:24.625Z] /data/sftnight/workspace/root-pullrequests-build/root/graf2d/postscript/src/AdobeGlyphList.h:110:44: warning: unpaired UTF-8 bidirectional character detected [-Wbidirectional=] ; - [2022-01-13T12:36:24.625Z] /data/sftnight/workspace/root-pullrequests-build/root/graf2d/postscript/src/AdobeGlyphList.h:110:55: warning: unpaired UTF-8 bidirectional character detected [-Wbidirectional=] ; - [2022-01-13T12:36:30.262Z] /data/sftnight/workspace/root-pullrequests-build/build/include/RooAddPdf.h:43:20: warning: 'clone' overrides a member function but is not marked 'override' [-Winconsistent-missing-override] ; - [2022-01-13T12:36:30.262Z] /data/sftnight/workspace/root-pullrequests-build/build/include/RooAddPdf.h:46:18: warning: 'checkObservables' overrides a member function but is not marked 'override' [-Winconsistent-missing-override] ; - [2022-01-13T12:36:30.262Z] /data/sftnight/workspace/root-pullrequests-build/build/include/RooAddPdf.h:48:18: warning: 'forceAnalyticalInt' overrides a member function but is not marked 'override' [-Winconsistent-missing-override] ; - [2022-01-13T12:36:30.262Z] /data/sftnight/workspace/root-pullrequests-build/build/include/RooAddPdf.h:52:9: warning: 'getAnalyticalIntegralWN' overrides a member function but is not marked 'override' [-Winconsistent-missing-override] ; - [2022-01-13T12:36:30.262Z] /data/sftnight,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9560#issuecomment-1012109052:1076,detect,detected,1076,https://root.cern,https://github.com/root-project/root/pull/9560#issuecomment-1012109052,1,['detect'],['detected']
Safety,"lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root ; >>>>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Csimonliu%40triumf.ca%7C2bf615c9bb89486eaecd08d91571b94b%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564400460976298%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=YgqiD9GIPDhABbE6mxc9%2BtWy8Q8red4Pa6zme6lmNgs%3D&reserved=0> ; >>>>>>> * Trying 206.12.9.197:2880... * TCP_NODELAY set * Trying ; >>>>>>> 2607:f8f0:660:3::36:2880... * TCP_NODELAY set * Immediate ; >>>>>>> connect fail for 2607:f8f0:660:3::36: Network is unreachable |; >>>>>>>; >>>>>>> Is that expected?; >>>>>>>; >>>>>; >>>>>> ***@***.*** t5]$ curl -v ; >>>>>> https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root ; >>>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Csimonliu%40triumf.ca%7C2bf615c9bb89486eaecd08d91571b94b%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564400460986294%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=5bPVTg%2FPGN9TjNPlZWD4xVs43NW32MwdifaSj7PR%2FEc%3D&reserved=0>; >>>>>> * About to connect() to webdav.lcg.triumf.ca ; >>>>>> <http://webdav.lcg.triumf.ca/> port 2880 (#0); >>>>>> * Trying 2607:f8f0:660:3::36...; >>>>>> * Connected to webdav.lcg.triumf.ca ; >>>>>> <http://webdav.lcg.triumf.ca/> (2607:f8f0:660:3::36) port 2880 (#0); >>>>>> * Initializing NSS with certpath: sql:/etc/pki/nssdb; >>>>>> * CAfile: /etc/pki/tls/certs/ca-bundle.crt; >>>>>> CApath: none; >>>>>> * Server certificate:; >>>>>> * subject: CN=dpool46.lcg.triumf.ca ; >>>>>> <http://dpool46.lcg.triumf.ca/>,OU=triumf.ca ; >>>>>> <ht",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840016493:3372,safe,safelinks,3372,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840016493,1,['safe'],['safelinks']
Safety,"ld/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:509:21: error: static_assert expression is not an integral constant expression ; - [2022-08-05T23:31:09.233Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:512:37: error: no matching function for call to 'GetNthElement' ; - [2022-08-05T23:31:09.233Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/RVariedAction.hxx:119:75: error: cannot pass object of non-trivial type 'ROOT::VecOps::RVec&lt;int&gt;' through variadic method; call will abort at runtime [-Wnon-pod-varargs] ; - [2022-08-05T23:31:09.494Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:529:7: error: static_assert failed due to requirement 'sizeof(TH1D) &lt; 0' ""When filling an object with RDataFrame (e.g. via a Fill action) the number or types of the columns passed did not match the signature of the object's `Fill` method."" ; - [2022-08-05T23:31:09.494Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:507:29: error: constexpr variable 'colidx' must be initialized by a constant expression ; - [2022-08-05T23:31:09.495Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:509:21: error: static_assert expression is not an integral constant expression ; - [2022-08-05T23:31:09.495Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:512:37: error: no matching function for call to 'GetNthElement' ; - [2022-08-05T23:31:09.495Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/RVariedAction.hxx:119:75: error: cannot pass object of non-trivial type 'ROOT::VecOps::RVec&lt;int&gt;' through variadic method; call will abort at runtime [-Wnon-pod-varargs] . And 25 more",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11127#issuecomment-1207087616:2583,abort,abort,2583,https://root.cern,https://github.com/root-project/root/pull/11127#issuecomment-1207087616,1,['abort'],['abort']
Safety,le '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:24' (0x7f7b0e15ea60) of size 5; 1148: '<string literal>' is ascii string 'true'; 1148: SUMMARY: AddressSanitizer: global-buffer-overflow (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db) in __asan_memcpy; 1148: Shadow bytes around the buggy address:; 1148: 0x0fefe1c23cf0: 00 00 03 f9 f9 f9 f9 f9 00 06 f9 f9 00 00 03 f9; 1148: 0x0fefe1c23d00: f9 f9 f9 f9 00 f9 f9 f9 07 f9 f9 f9 00 f9 f9 f9; 1148: 0x0fefe1c23d10: 00 00 01 f9 f9 f9 f9 f9 00 00 00 00 06 f9 f9 f9; 1148: 0x0fefe1c23d20: f9 f9 f9 f9 00 00 00 00 00 00 07 f9 f9 f9 f9 f9; 1148: 0x0fefe1c23d30: 00 00 00 00 05 f9 f9 f9 f9 f9 f9 f9 07 f9 f9 f9; 1148: =>0x0fefe1c23d40: 00 00 f9 f9 00 00 00 00 f9 f9 f9 f9[05]f9 f9 f9; 1148: 0x0fefe1c23d50: 06 f9 f9 f9 00 04 f9 f9 00 04 f9 f9 00 04 f9 f9; 1148: 0x0fefe1c23d60: 00 00 00 00 07 f9 f9 f9 f9 f9 f9 f9 00 00 00 00; 1148: 0x0fefe1c23d70: 03 f9 f9 f9 f9 f9 f9 f9 00 00 00 03 f9 f9 f9 f9; 1148: 0x0fefe1c23d80: 00 00 00 00 00 04 f9 f9 f9 f9 f9 f9 03 f9 f9 f9; 1148: 0x0fefe1c23d90: 02 f9 f9 f9 00 00 00 03 f9 f9 f9 f9 00 00 00 00; 1148: Shadow byte legend (one shadow byte represents 8 application bytes):; 1148: Addressable: 00; 1148: Partially addressable: 01 02 03 04 05 06 07; 1148: Heap left redzone: fa; 1148: Freed heap region: fd; 1148: Stack left redzone: f1; 1148: Stack mid redzone: f2; 1148: Stack right redzone: f3; 1148: Stack after return: f5; 1148: Stack use after scope: f8; 1148: Global redzone: f9; 1148: Global init order: f6; 1148: Poisoned by user: f7; 1148: Container overflow: fc; 1148: Array cookie: ac; 1148: Intra object redzone: bb; 1148: ASan internal: fe; 1148: Left alloca redzone: ca; 1148: Right alloca redzone: cb; 1148: ==4075620==ABORTING; ```. Note: There may be other problems in the test after this issue is fixed. Please check locally with an instrumented build that the test passes afterwards!,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11629:17961,ABORT,ABORTING,17961,https://root.cern,https://github.com/root-project/root/issues/11629,1,['ABORT'],['ABORTING']
Safety,"le C:\Users\sftnight\build\release\tutorials\hsimple.root; 890: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 890: error code: -529697949; 890:; 890:; 13/16 Test #890: tutorial-dataframe-df019_Cache-py ........................***Failed Error regular expression found in output. Regex=[Error in] 4.65 sec; test 891; Start 891: tutorial-dataframe-df021_createTGraph-py. 891: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df021_createTGraph.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 891: Environment variables:; 891: ROOT_HIST=0; 891: Test timeout computed to be: 1500; 891: input_line_39:2:28: error: use of undeclared identifier 'x'; 891: auto lambda0 = [](){return x*x; 891: ^; 891: input_line_39:2:30: error: use of undeclared identifier 'x'; 891: auto lambda0 = [](){return x*x; 891: ^; 891: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 891: error code: -529697949; 891:; 891:; 14/16 Test #891: tutorial-dataframe-df021_createTGraph-py .................***Failed Error regular expression found in output. Regex=[: error:] 4.85 sec; test 892; Start 892: tutorial-dataframe-df024_Display-py. 892: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df024_Display.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 892: Environment variables:; 892: ROOT_HIST=0; 892: Test timeout computed to be: 1500; 892: IncrementalExecutor::executeFunction",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6083#issuecomment-665456331:13919,timeout,timeout,13919,https://root.cern,https://github.com/root-project/root/pull/6083#issuecomment-665456331,1,['timeout'],['timeout']
Safety,"le features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/c++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found LLVM_CONFIG as /usr/lib/llvm/15/bin/llvm-config; -- Performing Test HAVE_FFI_CALL; -- Performing Test HAVE_FFI_CALL - Success; -- Found FFI: /usr/lib64/libffi.so; -- Performing Test Terminfo_LINKABLE; -- Performing Test Terminfo_LINKABLE - Success; -- Found Terminfo: /usr/lib64/libtinfo.so; -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.13""); -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.10.3""); -- Linker detection: GNU ld; -- Performing Test C_SUPPORTS_FPIC; -- Performing Test C_SUPPORTS_FPIC - Success; -- Performing Test CXX_SUPPORTS_FPIC; -- Performing Test CXX_SUPPORTS_FPIC - Success; -- Building with -fPIC; -- Performing Test C_SUPPORTS_FNO_SEMANTIC_INTERPOSITION; -- Performing Test C_SUPPORTS_FNO_SEMANTIC_INTERPOSITION - Success; -- Performing Test CXX_SUPPORTS_FNO_SEMANTIC_INTERPOSITION; -- Performing Test CXX_SUPPORTS_FNO_SEMANTIC_INTERPOSITION - Success; -- Performing Test SUPPORTS_FVISIBILITY_INLINES_HIDDEN_FLAG; -- Performing Test SUPPORTS_FVISIBILITY_INLINES_HIDDEN_FLAG - Success; CMake Warning (dev) at /usr/lib/llvm/15/lib/cmake/llvm/HandleLLVMOptions.cmake:449 (option):; Policy CMP0077 is not set: option() honors normal variables. Run ""cmake; --help-policy CMP0077"" for policy details. Use the cmake_policy command to; set the policy and suppress this warning. For compatibility with older versions of CMake, option is clearing the; normal variable 'LLVM_ENABLE_WARNINGS'.; Call Stack (most recent call first):; CMakeLists.txt:95 (include); This warning is for project developers. Use -Wno-dev to suppress it. -- Performing Test C_SUPPORTS_WERROR_DATE_TIME; -- Performing Test C_SUPPORTS_WERROR_DATE_TIME - Success; -- Performing Test CXX_SUPPORTS_WERROR_DATE_TIME; -- Performing Test CXX_SUPPORTS_WERROR_D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11920#issuecomment-1370394653:1482,detect,detection,1482,https://root.cern,https://github.com/root-project/root/issues/11920#issuecomment-1370394653,1,['detect'],['detection']
Safety,le output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/121132/console).; ### Warnings:; - [2021-06-28T12:57:59.922Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T12:58:37.332Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T12:58:41.023Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T12:58:42.361Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T12:58:42.361Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T12:58:42.877Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T12:58:45.528Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T12:59:31.741Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T13:00:12.046Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T13:00:22.838Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] . And 3 more. ### Failing tests:; - [projectroot.rootte,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8555#issuecomment-869689634:1096,redund,redundant,1096,https://root.cern,https://github.com/root-project/root/pull/8555#issuecomment-869689634,1,['redund'],['redundant']
Safety,"le::Open fixes this behaviour. ## Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. TTree::ChangeFile should not rely on the original TFile to be on the heap. ## To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; See the following gist:; https://gist.github.com/vepadulano/848ebbfbbb7efc95d2f5726538583b82. ## Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; 1. ROOT master; 2. Fedora 32; 3. ROOT build with cmake: `cmake -GNinja -Ddev=ON -DCMAKE_BUILD_TYPE=Debug -Dtesting=ON -Droottest=ON`. ## Additional context; Stacktrace; ```; #0 __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50; #1 0x00007ffff54f2535 in __GI_abort () at abort.c:79; #2 0x00007ffff5549508 in __libc_message (action=action@entry=do_abort, fmt=fmt@entry=0x7ffff565428d ""%s\n"") at ../sysdeps/posix/libc_fatal.c:181; #3 0x00007ffff554fc1a in malloc_printerr (str=str@entry=0x7ffff5655ff8 ""double free or corruption (out)"") at malloc.c:5341; #4 0x00007ffff5551730 in _int_free (av=0x7ffff568bc40 <main_arena>, p=0x7fffffffde90, have_lock=<optimized out>) at malloc.c:4306; #5 0x00007ffff7bf3dfc in TStorage::ObjectDealloc (vp=0x7fffffffdea0) at ../../../root_dbg/core/base/src/TStorage.cxx:362; #6 0x00007ffff7bd95c8 in TObject::operator delete (ptr=0x7fffffffdea0) at ../../../root_dbg/core/base/src/TObject.cxx:998; #7 0x00007ffff75db056 in TFile::~TFile (this=0x7fffffffdea0, __in_chrg=<optimized out>) at ../../../root_dbg/io/io/src/TFile.cxx:542; #8 0x00007ffff683c479 in TTree::ChangeFile (this=0x7fffffffdbd0, file=0x7fffffffdea0) at ../../../root_dbg/tree/tree/src/TTree.cxx:2792; #9 0x00007ffff6841802 in TTree::Fill (this=0x7ffff",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6527:1298,abort,abort,1298,https://root.cern,https://github.com/root-project/root/issues/6527,1,['abort'],['abort']
Safety,"le=OFF;-Dgfal=OFF;-DCMAKE_CXX_STANDARD=17;-Ddcache=ON;-Dgfal=ON;-DGFAL_DIR=/build/jenkins/workspace/lcg_nightly_pipeline/install/dev3/Grid/gfal/1.13.0-0/x86_64-cento; s7-gcc9-dbg;-DSRM_IFCE_DIR=/build/jenkins/workspace/lcg_nightly_pipeline/install/dev3/Grid/srm-ifce/1.13.0-0/x86_64-centos7-gcc9-dbg;-Doracle=ON;-DORACLE_HOME=/build/jenkins/workspace/lc; g_nightly_pipeline/install/dev3/oracle/19.11.0.0.0/x86_64-centos7-gcc9-dbg;-Dbuiltin_nlohmannjson=OFF;-Droofit_multiprocess=OFF;-GUnix Makefiles;/build/jenkins/workspace/lcg_nightly_pipe; line/build/projects/ROOT-HEAD/src/ROOT/HEAD""); ```; And this is the corresponding log:; ```; -- The C compiler identification is GNU 9.2.0; -- The CXX compiler identification is GNU 9.2.0; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/gcc - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Git: /usr/bin/git (found version ""1.8.3.1""); -- Detected ROOT_VERSION 6.27.01; -- Checking internet connectivity...; -- Yes; -- Looking for Python; -- Found Python3: /build/jenkins/workspace/lcg_nightly_pipeline/install/dev3/Python/3.9.6/x86_64-centos7-gcc9-dbg/bin/python (found version ""3.9.6"") found components: Interpreter Develop; ment NumPy Development.Module Development.Embed; -- Looking for a Fortran compiler; -- Looking for a Fortran compiler - /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/gfortran; -- The Fortran compiler identification is GNU 9.2.0; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Check for working Fortran compiler: /cvmfs/sft.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9594#issuecomment-1015634743:2061,Detect,Detecting,2061,https://root.cern,https://github.com/root-project/root/issues/9594#issuecomment-1015634743,4,['Detect'],['Detecting']
Safety,le>) [clazy-range-loop]; 1: const in /opt/root_src/geom/gdml/src/TGDMLParse.cxx:819; 2: & in /opt/root_src/geom/gdml/src/TGDMLParse.cxx:819; /opt/root_src/geom/geom/src/TGeoArb8.cxx:594:13: warning: Value stored to 's' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 's' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoArb8.cxx:594; /opt/root_src/geom/geom/src/TGeoArb8.cxx:918:13: warning: Value stored to 'ddmin' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'ddmin' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoArb8.cxx:918; /opt/root_src/geom/geom/src/TGeoArb8.cxx:1549:4: warning: Value stored to 'snxt' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'snxt' is never read in /opt/root_src/geom/geom/src/TGeoArb8.cxx:1549; /opt/root_src/geom/geom/src/TGeoArb8.cxx:1711:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoArb8.cxx:1711; /opt/root_src/geom/geom/src/TGeoArb8.cxx:1716:21: warning: Value stored to 'az' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'az' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoArb8.cxx:1716; /opt/root_src/geom/geom/src/TGeoArb8.cxx:1968:11: warning: Maybe you meant to call TGeoTrap::DistFromInside() instead [clazy-skipped-base-method]; /opt/root_src/geom/geom/src/TGeoArb8.cxx:1983:11: warning: Maybe you meant to call TGeoTrap::DistFromOutside() instead [clazy-skipped-base-method]; /opt/root_src/geom/geom/src/TGeoArb8.cxx:2032:11: warning: Maybe you meant to call TGeoTrap::Safety() instead [clazy-skipped-base-method]; /opt/root_src/geom/geom/src/TGeoBBox.cxx:324:25: warning: Called C++ object pointer is null [clang-analyzer-co,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:1156,safe,safe,1156,https://root.cern,https://github.com/root-project/root/issues/7428,1,['safe'],['safe']
Safety,"lease#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 885: Environment variables:; 885: ROOT_HIST=0; 885: Test timeout computed to be: 1500; 885: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 885: error code: -529697949; 885:; 885:; 8/16 Test #885: tutorial-dataframe-df010_trivialDataSource-py ............***Failed 4.46 sec; test 886; Start 886: tutorial-dataframe-df012_DefinesAndFiltersAsStrings-py. 886: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df012_DefinesAndFiltersAsStrings.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 886: Environment variables:; 886: ROOT_HIST=0; 886: Test timeout computed to be: 1500; 886: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 886: error code: -529697949; 886:; 886:; 9/16 Test #886: tutorial-dataframe-df012_DefinesAndFiltersAsStrings-py ...***Failed 4.43 sec; test 887; Start 887: tutorial-dataframe-df014_CSVDataSource-py. 887: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df014_CSVDataSource.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 887: Environment variables:; 887: ROOT_HIST=0; 887: Test timeout computed to be: 1500; [TFile::Cp] Total 14.46 MB |====================| 100.00 % [57.6 MB/s]; 887: Traceback (most recent call last):; 887: File ""C:/Users/sftnight/git/master/tutorials/launcher.py"", line 33, in <module>; 8",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6083#issuecomment-665456331:7708,timeout,timeout,7708,https://root.cern,https://github.com/root-project/root/pull/6083#issuecomment-665456331,1,['timeout'],['timeout']
Safety,"ling::Transaction::forceAppend(DelayCallInfo): Assertion `oldDCI != DCI && ""Duplicates?!""' failed.; > #0 0x000055e9492a6288 ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x17fb288 ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x17fb34b; > #1 0x000055e9492a6288 ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x17f8eac ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x17fabfe; > #2 0x000055e9492a6288 ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x18491a8 ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x1848ed8; > #3 0x000055e9492a6288 (./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling+0x17fb288); > #4 0x000055e9492a634b (./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling+0x17fb34b); > #5 0x000055e9492a3eac gsignal (./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling+0x17f8eac); > #6 0x000055e9492a5bfe abort (./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling+0x17fabfe); > #7 0x000055e9492f41a8 (./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling+0x18491a8); > #8 0x000055e9492f3ed8 (./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling+0x1848ed8); > #9 0x00007f264623e8e0 ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x16d76bb ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x16d7568; > #10 0x00007f264623e8e0 ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x14eef2e ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x39845bf; > #11 0x00007f264623e8e0 ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x4cf5f84 ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x4cf690d; > #12 0x00007f264623e8e0 ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1192249515:1703,abort,abort,1703,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1192249515,1,['abort'],['abort']
Safety,"lldb project is disabled; -- mlir project is disabled; -- openmp project is disabled; -- parallel-libs project is disabled; -- polly project is disabled; -- pstl project is disabled; -- flang project is disabled; -- Looking for backtrace; -- Looking for backtrace - found; -- backtrace facility detected in default set of libraries; -- Found Backtrace: /usr/include; -- Native target architecture is X86; -- Threads disabled.; -- Doxygen disabled.; -- Go bindings disabled.; -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH); -- OCaml bindings disabled.; -- Could NOT find Python module pygments; -- Could NOT find Python module pygments.lexers.c_cpp; -- Could NOT find Python module yaml; -- LLVM host triple: x86_64-unknown-linux-gnu; -- LLVM default target triple: x86_64-unknown-linux-gnu; -- Building with -fPIC; -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter; -- Linker detection: GNU ld; -- Targeting X86; -- Targeting NVPTX; -- Clang version: 13.0.0; -- Not building amdgpu-arch: hsa-runtime64 not found; -- Building Cling as part of ROOT; -- Cling version (from VERSION file): ROOT_1.0~dev; -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime.; -- And then fallback to: 'c++'; -- Performing Test CXX_HAS_fno_rtti; -- Performing Test CXX_HAS_fno_rtti - Success; -- Performing Test C_HAS_Wno_strict_overflow; -- Performing Test C_HAS_Wno_strict_overflow - Success; -- Performing Test C_HAS_Wno_maybe_uninitialized; -- Performing Test C_HAS_Wno_maybe_uninitialized - Success; -- Performing Test C_HAS_Wno_parentheses_equality; -- Performing Test C_HAS_Wno_parentheses_equality - Success; -- Looking for m; -- Looking for m - not found; -- Use SSL API VERSION 1.1 for civetweb;",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14159#issuecomment-1838972446:9494,detect,detection,9494,https://root.cern,https://github.com/root-project/root/issues/14159#issuecomment-1838972446,1,['detect'],['detection']
Safety,llrequests-build/root/roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodGradientWrapper.h:44:11: error: ‘LikelihoodGradientMode’ has not been declared . And 2038 more. ### Warnings:; - [2023-01-06T12:13:58.100Z] /data/sftnight/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx:3:32: warning: declaration of ‘G__RooFitCoreInit290’ shadows a global declaration [-Wshadow] ; - [2023-01-06T12:13:58.935Z] /data/sftnight/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx:19968:46: warning: possible problem detected in invocation of delete operator: [-Wdelete-incomplete] ; - [2023-01-06T12:13:58.935Z] /data/sftnight/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx:19968:15: warning: invalid use of incomplete type ‘class RooMinimizer’ ; - [2023-01-06T12:13:58.935Z] /data/sftnight/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx:19971:49: warning: possible problem detected in invocation of delete [] operator: [-Wdelete-incomplete] ; - [2023-01-06T12:13:58.935Z] /data/sftnight/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx:19971:18: warning: invalid use of incomplete type ‘class RooMinimizer’ ; - [2023-01-06T12:13:58.936Z] /data/sftnight/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx:20260:47: warning: possible problem detected in invocation of delete operator: [-Wdelete-incomplete] ; - [2023-01-06T12:13:58.936Z] /data/sftnight/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx:20260:15: warning: invalid use of incomplete type ‘class RooNumConvPdf’ ; - [2023-01-06T12:13:58.936Z] /data/sftnight/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx:20263:50: warning: possible problem detected in invocation of delete [] operator: [-Wdelete-incomplete] ; - [2023-01-06T12:13:58.936Z] /data/sftnight/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx:2,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11981#issuecomment-1373555060:3363,detect,detected,3363,https://root.cern,https://github.com/root-project/root/pull/11981#issuecomment-1373555060,1,['detect'],['detected']
Safety,"loop over 3 parallel histograms, you'd need the global to be a vector and you'd have to push_back() onto it, but you're in the same (bad) place then. I wrote a script just like that this week exactly to fit a number of peaks determined by a file read inside one routine, and looped over outside, and I used example 1, not example 2, and future use of the base routine will never cause leaks. . The code structure is problematic to me. RDirectory itself isn't terrible, but I just don't see what it solves other than more syntax to remember. A final point, the shared pointers supposedly perform worse than unique pointers. I don't know how much it matters, but when you're fitting millions of waveforms maybe it does. Of course then you shouldn't be using RDirectory, but you can still use my_subroutines.C to do your fit if you're looping the million without RDirectory or to examining one of those fits with RDirectory, without rewriting the routine. I'm going to skip the point about empty root objects just to limit the scope for now. ### How to skip globals entirely. Of course you can just let the top level code return an object or structure. The downside is just that you have to .L the code and call it with auto ret=make_th1(). It can't be a complied main(), but that's no big deal. It violates the spirit of ""scripting"" but is of course very clean:. example 3: ; ```cpp; //subroutine.C. // my_subroutines.C; void my_subroutine(unique_ptr<TH1> &x) {; x.reset(); // not needed for TH1F, but safer in general.; x.reset(new TH1F());; // .. do something with it.; }; ```; ```cpp; //make_th1.C. vector<unique_ptr<TH1>> make_th1() { //edit: changed to TH1's here; vector<unique_ptr<TH1>> retvec(3); // and here, as intended.; for (int i=0; i<3; i++) {; my_subroutine(retvec[i]);; }; return retvec;; }; ```. But the end-user can decide. Again, the subroutine works regardless. The PR is an improvement, and I don't object to it. I think more improvement is possible. (minor edits made for cleanup)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7305#issuecomment-791104038:6736,safe,safer,6736,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-791104038,1,['safe'],['safer']
Safety,"loper/CommandLineTools/SDKs/ ; total 0; 0 lrwxr-xr-x 1 root wheel 14 Jul 21 08:29 MacOSX.sdk -> MacOSX15.0.sdk; [...]; ```. Here is the result of the cmake command.; ```; cmake ../20240914-src -DCMAKE_INSTALL_PREFIX=/Users/marcomeyer/Software/root/20240914 -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang && make -j8; -- The C compiler identification is AppleClang 16.0.0.16000022; -- The CXX compiler identification is AppleClang 16.0.0.16000022; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /usr/bin/clang - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/clang++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Building ROOT version 6.32.04; -- Checking internet connectivity; -- Checking internet connectivity - found; -- The default C++ standard in use by the detected compiler (/usr/bin/clang++) is lower than C++17. Setting C++17 as the minimum standard.; -- Performing Test HAS_LIBCXX11; -- Performing Test HAS_LIBCXX11 - Success; -- Found a macOS system 15.0; -- Found an AArch64 system; -- ROOT default compression algorithm: zlib; -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled.; -- Looking for ZLib; -- Building freetype version 2.12.1 included in ROOT itself; -- Looking for PCRE; -- Looking for LZMA; -- Looking for ZSTD; -- Looking for LZ4; -- Building AfterImage library included in ROOT itself; -- Looking for Python; -- Found Python3: /opt/homebrew/bin/python3.12 (found suitable version ""3.12.6"", minimum required is ""3.8"") found components: Interpreter Development NumPy Development.Module Development.Embed ; -- Looking for OpenGL; -- Looking for LibXml2; -- Looking for SQLite; -- Looking for XROOTD; -- Checking for module 'davix>=0.6.4'; -- Found davix, version 0.8.7; -- Looking",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16428#issuecomment-2350895635:1423,detect,detected,1423,https://root.cern,https://github.com/root-project/root/issues/16428#issuecomment-2350895635,1,['detect'],['detected']
Safety,"lp, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from python...; (No debugging symbols found in python); (gdb) run testnullptr.py; Starting program: /opt/venv/bin/python testnullptr.py; warning: Error disabling address space randomization: Function not implemented; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/usr/lib/libthread_db.so.1"".; warning: File ""/home/b/bendavid/rootdev19/install/lib/libCore.so-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; add-auto-load-safe-path /home/b/bendavid/rootdev19/install/lib/libCore.so-gdb.py; line to your configuration file ""/home/b/bendavid/.config/gdb/gdbinit"".; To completely disable this security protection add; set auto-load safe-path /; line to your configuration file ""/home/b/bendavid/.config/gdb/gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; info ""(gdb)Auto-loading safe path""; [Detaching after vfork from child process 1453]; [Detaching after vfork from child process 1455]; [Detaching after vfork from child process 1457]; [Detaching after vfork from child process 1459]; [Detaching after vfork from child process 1461]; [Detaching after vfork from child process 1465]; [Detaching after vfork from child process 1467]; [New Thread 0x7fb1af5b6640 (LWP 1469)]; sleep; ^C; Thread 1 ""python"" received signal SIGINT, Interrupt.; 0x00007fb1cb2a1201 in select () from /usr/lib/libc.so.6; (gdb) break cling::NullDerefProtectionTransformer::Transform; Breakpoint 1 at 0x7fb1c5732850; (gdb) continue; Continuing.; instantiating template; [Thread 0x7fb1af5b6640 (LWP 1469) exited]. Thread 1 ""python"" hit Breakpoint 1, 0x00007fb1c5732850 in cling::NullDerefProtectionTransformer::Transform(clang::Decl*) () from /home/b/bendavid/rootdev19/install/lib/libCling.so; (gd",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9112#issuecomment-1010779015:2086,safe,safe,2086,https://root.cern,https://github.com/root-project/root/issues/9112#issuecomment-1010779015,1,['safe'],['safe']
Safety,"lp, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from python...; (No debugging symbols found in python); (gdb) run testnullptr.py; Starting program: /opt/venv/bin/python testnullptr.py; warning: Error disabling address space randomization: Function not implemented; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/usr/lib/libthread_db.so.1"".; warning: File ""/home/b/bendavid/rootdev19/install/lib/libCore.so-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; add-auto-load-safe-path /home/b/bendavid/rootdev19/install/lib/libCore.so-gdb.py; line to your configuration file ""/home/b/bendavid/.config/gdb/gdbinit"".; To completely disable this security protection add; set auto-load safe-path /; line to your configuration file ""/home/b/bendavid/.config/gdb/gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; info ""(gdb)Auto-loading safe path""; [Detaching after vfork from child process 2333]; [Detaching after vfork from child process 2335]; [Detaching after vfork from child process 2337]; [Detaching after vfork from child process 2339]; [Detaching after vfork from child process 2341]; [Detaching after vfork from child process 2345]; [Detaching after vfork from child process 2347]; [New Thread 0x7f05f42cb640 (LWP 2349)]; sleep; ^C; Thread 1 ""python"" received signal SIGINT, Interrupt.; 0x00007f060ffb6201 in select () from /usr/lib/libc.so.6; (gdb) break cling::NullDerefProtectionTransformer::Transform; Breakpoint 1 at 0x7f060a447850; (gdb) continue; Continuing.; instantiating template. Thread 1 ""python"" hit Breakpoint 1, 0x00007f060a447850 in cling::NullDerefProtectionTransformer::Transform(clang::Decl*) () from /home/b/bendavid/rootdev19/install/lib/libCling.so; (gdb) bt; #0 0x00007f060a447850 in cling::Null",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9112#issuecomment-1010786248:2062,safe,safe,2062,https://root.cern,https://github.com/root-project/root/issues/9112#issuecomment-1010786248,1,['safe'],['safe']
Safety,"ls using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory variables; [RF][HS3] Don't import datasets that are parts of a combined dataset; [RF][HS3] Some code simplification in `RooJSONFactoryWSTool`; [RF][HS3] Generate input file for testHS3HistFactory on the fly; [RF][HS3] Improvements to the HS3 HistFactory implementation; [RF] Use `std::vector` diretly in RooVectorDataStore::RealFullVector; [RF][HS3] Some refactoring for less lines of code; [RF][HS3] Ordering fixes; [RF][HS3] Achieved closure for ATLAS ttW workspace; [RF][HS3] Sorting distributions; [RF][HS3] Bugfixes for histfactory workspaces; [RF][HS3] Small renamings; [RF][HS3] Improved attribute handling, caught some typecast-errors; [RF][HS3] Bugfix for FlexibleInterpVar; [RF] Avoid unnecessary warnings in `FlexibleInterpVar::setInterpCode`; [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; [RF][HS3] Re-retrieve element after exporting dependants; [RF][HS3] Don't write `histfactory_dist` axes redundantly; [RF] Exclude RooHistError from IO; [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; [RF] Code-format `testRooDataHist.cxx`; [RF][HS3] Change analysis and likelihoods fields to match HS3 standard; [RF] Remove native buffers from `RooVectorDataStore::RealFullVector`; [RF] Modernize `RooVectorDataStore::RealF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12590#issuecomment-1491813664:2364,Avoid,Avoid,2364,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664,6,"['Avoid', 'redund']","['Avoid', 'redundantly']"
Safety,ltercount=1&field1=buildname/string&compare1=65&value1=PR-5530-ROOT-fedora30-cxx14&date=2020-05-04).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/80231/console).; ### Warnings:; - [2020-05-04T15:51:07.368Z] /home/sftnight/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/RooAbsReal.cxx:3268:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-05-04T15:51:07.368Z] /home/sftnight/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/RooAbsReal.cxx:3268:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-05-04T15:51:07.368Z] /home/sftnight/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/RooAbsReal.cxx:3268:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-05-04T15:51:07.368Z] /home/sftnight/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/RooAbsReal.cxx:3268:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-05-04T15:51:07.368Z] /home/sftnight/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/RooAbsReal.cxx:3268:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-05-04T15:51:07.368Z] /home/sftnight/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/RooAbsReal.cxx:3268:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-05-04T15:51:07.368Z] /home/sftnight/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/RooAbsReal.cxx:3268:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-05-04T15:51:07.368Z] /home/sftnight/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/RooAbsReal.cxx:3268:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-05-04T15:51:07.368Z] /home/sftnight/build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/RooAbsReal.cxx:3268:23: warning: redundant move in return stat,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5530#issuecomment-623553898:1159,redund,redundant,1159,https://root.cern,https://github.com/root-project/root/pull/5530#issuecomment-623553898,1,['redund'],['redundant']
Safety,lude/Math/MixMaxEngine.icc:38:12: error: invalid use of incomplete type ‘class ROOT::Math::MixMaxEngineImpl&lt;17&gt;’ ; - include/Math/MixMaxEngine.icc:38:12: error: invalid use of incomplete type ‘class ROOT::Math::MixMaxEngineImpl&lt;17&gt;’ ; - include/Math/MixMaxEngine.icc:38:12: error: invalid use of incomplete type ‘class ROOT::Math::MixMaxEngineImpl&lt;256&gt;’ ; - include/Math/MixMaxEngine.icc:38:12: error: invalid use of incomplete type ‘class ROOT::Math::MixMaxEngineImpl&lt;256&gt;’ ; - include/Math/MixMaxEngine.icc:55:7: error: invalid use of incomplete type ‘class ROOT::Math::MixMaxEngineImpl&lt;240&gt;’ ; - include/Math/MixMaxEngine.icc:55:7: error: invalid use of incomplete type ‘class ROOT::Math::MixMaxEngineImpl&lt;17&gt;’ ; - include/Math/MixMaxEngine.icc:55:7: error: invalid use of incomplete type ‘class ROOT::Math::MixMaxEngineImpl&lt;256&gt;’ . And 24 more. ### Warnings:; - include/Math/MixMaxEngine.icc:43:17: warning: possible problem detected in invocation of delete operator: [-Wdelete-incomplete] ; - include/Math/MixMaxEngine.icc:43:17: warning: invalid use of incomplete type ‘class ROOT::Math::MixMaxEngineImpl&lt;240&gt;’ ; - include/Math/MixMaxEngine.icc:43:17: warning: possible problem detected in invocation of delete operator: [-Wdelete-incomplete] ; - include/Math/MixMaxEngine.icc:43:17: warning: invalid use of incomplete type ‘class ROOT::Math::MixMaxEngineImpl&lt;17&gt;’ ; - include/Math/MixMaxEngine.icc:43:17: warning: possible problem detected in invocation of delete operator: [-Wdelete-incomplete] ; - include/Math/MixMaxEngine.icc:43:17: warning: invalid use of incomplete type ‘class ROOT::Math::MixMaxEngineImpl&lt;17&gt;’ ; - include/Math/MixMaxEngine.icc:43:17: warning: possible problem detected in invocation of delete operator: [-Wdelete-incomplete] ; - include/Math/MixMaxEngine.icc:43:17: warning: invalid use of incomplete type ‘class ROOT::Math::MixMaxEngineImpl&lt;17&gt;’ ; - include/Math/MixMaxEngine.icc:43:17: warning: possi,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1932#issuecomment-384663627:1499,detect,detected,1499,https://root.cern,https://github.com/root-project/root/pull/1932#issuecomment-384663627,2,['detect'],['detected']
Safety,"lude/ROOT/RVec.hxx:487:42: error: no type named 'iterator' in 'ROOT::Internal::VecOps::SmallVectorTemplateBase&lt;int, true&gt;' ; - [2021-04-16T11:19:56.871Z] /data/sftnight/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:488:48: error: no type named 'const_iterator' in 'ROOT::Internal::VecOps::SmallVectorTemplateBase&lt;int, true&gt;' ; - [2021-04-16T11:19:56.871Z] /data/sftnight/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:489:43: error: no type named 'reference' in 'ROOT::Internal::VecOps::SmallVectorTemplateBase&lt;int, true&gt;' ; - [2021-04-16T11:19:56.871Z] /data/sftnight/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:490:43: error: no type named 'size_type' in 'ROOT::Internal::VecOps::SmallVectorTemplateBase&lt;int, true&gt;' ; - [2021-04-16T11:19:56.871Z] /data/sftnight/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1281:27: error: no type named 'pointer' in 'ROOT::VecOps::RVec&lt;int&gt;' ; - [2021-04-16T11:19:56.871Z] /data/sftnight/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1523:1: error: no member named 'begin' in 'ROOT::VecOps::RVec&lt;int&gt;' ; - [2021-04-16T11:19:56.871Z] /data/sftnight/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1523:1: error: no member named 'begin' in 'ROOT::VecOps::RVec&lt;int&gt;' ; - [2021-04-16T11:19:56.872Z] /data/sftnight/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1523:1: error: no member named 'begin' in 'ROOT::VecOps::RVec&lt;int&gt;' ; - [2021-04-16T11:19:56.872Z] /data/sftnight/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1524:1: error: no member named 'begin' in 'ROOT::VecOps::RVec&lt;int&gt;' . And 10 more. ### Warnings:; - [2021-04-16T11:19:56.871Z] /data/sftnight/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:193:19: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-821106191:2486,avoid,avoid,2486,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-821106191,1,['avoid'],['avoid']
Safety,"lude/ROOT/RVec.hxx:487:42: error: no type named 'iterator' in 'ROOT::Internal::VecOps::SmallVectorTemplateBase&lt;int, true&gt;' ; - [2021-05-04T11:38:57.204Z] /data/sftnight/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:488:48: error: no type named 'const_iterator' in 'ROOT::Internal::VecOps::SmallVectorTemplateBase&lt;int, true&gt;' ; - [2021-05-04T11:38:57.204Z] /data/sftnight/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:489:43: error: no type named 'reference' in 'ROOT::Internal::VecOps::SmallVectorTemplateBase&lt;int, true&gt;' ; - [2021-05-04T11:38:57.204Z] /data/sftnight/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:490:43: error: no type named 'size_type' in 'ROOT::Internal::VecOps::SmallVectorTemplateBase&lt;int, true&gt;' ; - [2021-05-04T11:38:57.204Z] /data/sftnight/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1285:27: error: no type named 'pointer' in 'ROOT::VecOps::RVec&lt;int&gt;' ; - [2021-05-04T11:38:57.205Z] /data/sftnight/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1527:1: error: no member named 'begin' in 'ROOT::VecOps::RVec&lt;int&gt;' ; - [2021-05-04T11:38:57.205Z] /data/sftnight/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1527:1: error: no member named 'begin' in 'ROOT::VecOps::RVec&lt;int&gt;' ; - [2021-05-04T11:38:57.205Z] /data/sftnight/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1527:1: error: no member named 'begin' in 'ROOT::VecOps::RVec&lt;int&gt;' ; - [2021-05-04T11:38:57.205Z] /data/sftnight/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1528:1: error: no member named 'begin' in 'ROOT::VecOps::RVec&lt;int&gt;' . And 10 more. ### Warnings:; - [2021-05-04T11:38:57.204Z] /data/sftnight/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:193:19: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-831876091:2486,avoid,avoid,2486,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-831876091,1,['avoid'],['avoid']
Safety,"lvm13/src/core/meta/inc/TInterpreter.h:25,; > from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.h:27,; > from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.cxx:20:; > /home/jhahnfel/ROOT/llvm13/src/core/base/inc/TString.h:844:15: note: candidate: ‘Bool_t operator==(const string_view&, const char*)’; > inline Bool_t operator==(const std::string_view &s1, const char *s2); > ^~~~~~~~; > In file included from /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/tools/clang/include/clang/Basic/DiagnosticIDs.h:19,; > from /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/tools/clang/include/clang/Basic/Diagnostic.h:17,; > from /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/tools/clang/include/clang/AST/NestedNameSpecifier.h:18,; > from /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/tools/clang/include/clang/AST/Type.h:21,; > from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TClingDeclInfo.h:20,; > from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TClingClassInfo.h:28,; > from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TClingBaseClassInfo.h:29,; > from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.cxx:24:; > /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/include/llvm/ADT/StringRef.h:919:15: note: candidate: ‘bool llvm::operator==(llvm::StringRef, llvm::StringRef)’; > inline bool operator==(StringRef LHS, StringRef RHS) {; > ^~~~~~~~; > ```. I do not understand why. Calling `.str()` is often too expensive but we may need to do it here. . > This happens with a C++17 build in general, C++14 is fine.; > ; > On the performance side, the current state seems to veery slow: `ctest -j12 -R dataframe .` used to take in the order of 2m30s, now I aborted it after 13 minutes. A lot of time seems to be spent in `sys`, are you aware of changes that could explain this?. Can you paste the stack trace? I fear that the DynamicLibraryManagerSymbol.cpp stopped inlining functions due to some recent calls of ::StringRef::str()...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1088544588:2516,abort,aborted,2516,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1088544588,1,['abort'],['aborted']
Safety,"ly, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved; - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request; - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR).; - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes.; - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted.; - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell; - [ ] Alternative approach suggested by albert-github to avoid missing references: use the overnight tag file from https://root.cern/reference/ with the pull request update test; - [ ] https://github.com/root-project/jenkins-pipelines/issues/10 jenkins parsing log fine-tune. ### Additional context; See https://root.cern/for_developers/doxygen/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9953:1942,avoid,avoid,1942,https://root.cern,https://github.com/root-project/root/issues/9953,1,['avoid'],['avoid']
Safety,"mIntFactory` plugin system; 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase; 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions; 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`; 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob; 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility; c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization; aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous; 1ab0f6ddba [RF] Remove default constructors of old test statistic classes; 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage; 2de763972e [RF] Use BatchMode for data projection plots; a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData; f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists; d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`; 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit; 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists; 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory; 07b56333f9 [RF] Put members in RooAbsReal class declaration in order; 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal; 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows; 1e74086875 [RF] Extend AD tests in `testHistFactory`; 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory; 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal.; 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation.; 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD; efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`; 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface; 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper; 168b9ef861 [RF] Add Cod",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13295:2986,Avoid,Avoid,2986,https://root.cern,https://github.com/root-project/root/pull/13295,2,"['Avoid', 'safe']","['Avoid', 'safe']"
Safety,"mbly Printer; 0.3088 ( 3.3%) 0.0000 ( 0.0%) 0.3088 ( 3.2%) 0.3091 ( 3.2%) Control Flow Optimizer; 0.2958 ( 3.2%) 0.0010 ( 0.3%) 0.2968 ( 3.1%) 0.2972 ( 3.1%) Machine Instruction Scheduler; 0.2617 ( 2.8%) 0.0000 ( 0.0%) 0.2617 ( 2.7%) 0.2620 ( 2.7%) Merge disjoint stack slots; 0.1949 ( 2.1%) 0.0070 ( 2.3%) 0.2019 ( 2.1%) 0.2021 ( 2.1%) Simple Register Coalescing; 0.1759 ( 1.9%) 0.0000 ( 0.0%) 0.1759 ( 1.8%) 0.1761 ( 1.8%) Live Variable Analysis; 0.1414 ( 1.5%) 0.0000 ( 0.0%) 0.1414 ( 1.5%) 0.1416 ( 1.5%) Combine redundant instructions #6; 0.1413 ( 1.5%) 0.0000 ( 0.0%) 0.1413 ( 1.5%) 0.1415 ( 1.5%) Combine redundant instructions #7; 0.1411 ( 1.5%) 0.0000 ( 0.0%) 0.1411 ( 1.5%) 0.1413 ( 1.5%) Combine redundant instructions #4; 0.1410 ( 1.5%) 0.0000 ( 0.0%) 0.1410 ( 1.5%) 0.1412 ( 1.5%) Combine redundant instructions #3; 0.1408 ( 1.5%) 0.0000 ( 0.0%) 0.1408 ( 1.5%) 0.1410 ( 1.5%) Combine redundant instructions #5; 0.1406 ( 1.5%) 0.0000 ( 0.0%) 0.1406 ( 1.5%) 0.1407 ( 1.5%) Combine redundant instructions #2; 0.1359 ( 1.5%) 0.0000 ( 0.0%) 0.1359 ( 1.4%) 0.1360 ( 1.4%) Branch Probability Basic Block Placement; 0.1342 ( 1.4%) 0.0000 ( 0.0%) 0.1342 ( 1.4%) 0.1343 ( 1.4%) Machine Common Subexpression Elimination; 0.1065 ( 1.1%) 0.0000 ( 0.0%) 0.1065 ( 1.1%) 0.1066 ( 1.1%) MemCpy Optimization; ```; -> mostly register allocation and `instcombine`. A similar picture for `jitted_code.cpp`:; ```; 8.6377 ( 81.7%) 0.0066 ( 0.7%) 8.6444 ( 75.4%) 8.6522 ( 75.4%) Fast Register Allocator; 0.7586 ( 7.2%) 0.7869 ( 87.4%) 1.5455 ( 13.5%) 1.5470 ( 13.5%) X86 Assembly Printer; 0.5620 ( 5.3%) 0.0794 ( 8.8%) 0.6414 ( 5.6%) 0.6424 ( 5.6%) X86 DAG->DAG Instruction Selection; 0.1600 ( 1.5%) 0.0031 ( 0.3%) 0.1632 ( 1.4%) 0.1633 ( 1.4%) Prologue/Epilogue Insertion & Frame Finalization; 0.1125 ( 1.1%) 0.0071 ( 0.8%) 0.1195 ( 1.0%) 0.1197 ( 1.0%) Two-Address instruction pass; ```; for `-O0`, while for `-O1`:; ```; 115.8049 ( 89.6%) 0.0191 ( 2.1%) 115.8240 ( 89.0%) 115.9569 ( 89.0%) Combine redundant i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9312#issuecomment-976463242:2156,redund,redundant,2156,https://root.cern,https://github.com/root-project/root/issues/9312#issuecomment-976463242,1,['redund'],['redundant']
Safety,"me/sftnight/swunsch/python/bin/python3^/home/sftnight/swunsch/root/roottest/scripts/custom_diff.py"" ""-DCHECKOUT=true"" ""-DCHECKERR=true"" ""-DSYS=/home/sftnight/swunsch/build"" ""-DENV=LEGACY_PYROOT=False#ROOTSYS=/home/sftnight/swunsch/build#PATH=/home/sftnight/swunsch/build/bin:/home/sftnight/swunsch/python/bin:/home/sftnight/.local/bin:/home/sftnight/bin:/usr/lib64/ccache:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin#PYTHONPATH=/home/sftnight/swunsch/build/lib:#LD_LIBRARY_PATH=/home/sftnight/swunsch/build/lib:/home/sftnight/swunsch/python/lib:"" ""-DCOPY=/home/sftnight/swunsch/root/roottest/python/basic/ArgumentPassingCompiled.C^/home/sftnight/swunsch/root/roottest/python/basic/ReturnValues.C^/home/sftnight/swunsch/root/roottest/python/basic/SimpleClass.C^/home/sftnight/swunsch/root/roottest/python/basic/ArgumentPassingInterpreted.C"" ""-P"" ""/home/sftnight/swunsch/build/RootTestDriver.cmake""; 1312: Environment variables: ; 1312: ROOT_HIST=0; 1312: Test timeout computed to be: 300; 1312: Info in <TUnixSystem::ACLiC>: creating shared library /home/sftnight/swunsch/build/roottest/python/basic/./ArgumentPassingCompiled_C.so; 1312: ; 1312: -- TEST COMMAND -- ; 1312: cd /home/sftnight/swunsch/build/roottest/python/basic; 1312: /usr/bin/timeout -s USR2 270s /home/sftnight/swunsch/python/bin/python3 /home/sftnight/swunsch/root/roottest/python/basic/PyROOT_basictests.py --fixcling; 1312: -- BEGIN TEST OUTPUT --; 1312: INTERNALERROR> Traceback (most recent call last):; 1312: INTERNALERROR> File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytest/main.py"", line 77, in wrap_session; 1312: INTERNALERROR> config.do_configure(); 1312: INTERNALERROR> File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytest/config.py"", line 608, in do_configure; 1312: INTERNALERROR> self.hook.pytest_configure(config=self); 1312: INTERNALERROR> File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytest/core.py"", line 377, in __call__; 1312: INTERNALERROR> return self._docall(method",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6597:1884,timeout,timeout,1884,https://root.cern,https://github.com/root-project/root/issues/6597,1,['timeout'],['timeout']
Safety,"me_type, bool shared); { return cr<FilterHandle,Setup::Filter>(kernel,name_type,shared); }; static PhaseActionHandle createPhaseAction(KernelHandle& kernel, const std::string& name_type, bool shared) ; { return cr<PhaseActionHandle,Setup::PhaseAction>(kernel,name_type,shared); }; static PhysicsListHandle createPhysicsList(KernelHandle& kernel, const std::string& name_type); { return cr<PhysicsListHandle,Setup::PhysicsList>(kernel,name_type,false); }; static RunActionHandle createRunAction(KernelHandle& kernel, const std::string& name_type, bool shared); { return cr<RunActionHandle,Setup::RunAction>(kernel,name_type,shared); }; static EventActionHandle createEventAction(KernelHandle& kernel, const std::string& name_type, bool shared); { return cr<EventActionHandle,Setup::EventAction>(kernel,name_type,shared); }; static TrackingActionHandle createTrackingAction(KernelHandle& kernel, const std::string& name_type, bool shared); { return cr<TrackingActionHandle,Setup::TrackAction>(kernel,name_type,shared); }; static SteppingActionHandle createSteppingAction(KernelHandle& kernel, const std::string& name_type, bool shared); { return cr<SteppingActionHandle,Setup::StepAction>(kernel,name_type,shared); }; static StackingActionHandle createStackingAction(KernelHandle& kernel, const std::string& name_type, bool shared); { return cr<StackingActionHandle,Setup::StackAction>(kernel,name_type,shared); }; ; static GeneratorActionHandle createGeneratorAction(KernelHandle& kernel, const std::string& name_type, bool shared); { return cr<GeneratorActionHandle,Setup::GenAction>(kernel,name_type,shared); }; ; static DetectorConstructionHandle createDetectorConstruction(KernelHandle& kernel, const std::string& name_type); { return cr<DetectorConstructionHandle,Setup::DetectorConstruction>(kernel,name_type,false); }; ; static UserInitializationHandle createUserInitialization(KernelHandle& kernel, const std::string& name_type); {	return UserInitializationHandle(Setup::Initialization(*kernel.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15221#issuecomment-2053701039:6761,Detect,DetectorConstructionHandle,6761,https://root.cern,https://github.com/root-project/root/issues/15221#issuecomment-2053701039,9,['Detect'],"['DetectorConstruction', 'DetectorConstructionHandle']"
Safety,ml/src/TGDMLParse.cxx:819; /opt/root_src/geom/geom/src/TGeoArb8.cxx:594:13: warning: Value stored to 's' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 's' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoArb8.cxx:594; /opt/root_src/geom/geom/src/TGeoArb8.cxx:918:13: warning: Value stored to 'ddmin' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'ddmin' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoArb8.cxx:918; /opt/root_src/geom/geom/src/TGeoArb8.cxx:1549:4: warning: Value stored to 'snxt' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'snxt' is never read in /opt/root_src/geom/geom/src/TGeoArb8.cxx:1549; /opt/root_src/geom/geom/src/TGeoArb8.cxx:1711:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoArb8.cxx:1711; /opt/root_src/geom/geom/src/TGeoArb8.cxx:1716:21: warning: Value stored to 'az' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'az' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoArb8.cxx:1716; /opt/root_src/geom/geom/src/TGeoArb8.cxx:1968:11: warning: Maybe you meant to call TGeoTrap::DistFromInside() instead [clazy-skipped-base-method]; /opt/root_src/geom/geom/src/TGeoArb8.cxx:1983:11: warning: Maybe you meant to call TGeoTrap::DistFromOutside() instead [clazy-skipped-base-method]; /opt/root_src/geom/geom/src/TGeoArb8.cxx:2032:11: warning: Maybe you meant to call TGeoTrap::Safety() instead [clazy-skipped-base-method]; /opt/root_src/geom/geom/src/TGeoBBox.cxx:324:25: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Control jumps to 'case 1:' at line 298 in /opt/root_src/geom/geom/src/TGeoBBox.cxx:297; 2: E,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:1260,safe,safe,1260,https://root.cern,https://github.com/root-project/root/issues/7428,1,['safe'],['safe']
Safety,n /opt/root_src/geom/geom/src/TGeoTube.cxx:1841; 8: Value assigned to field 'fNodes' in /opt/root_src/geom/geom/src/TGeoTube.cxx:1842; 9: Called C++ object pointer is null in /opt/root_src/geom/geom/src/TGeoTube.cxx:1843; /opt/root_src/geom/geom/src/TGeoTube.cxx:1857:31: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Control jumps to 'case 3:' at line 1846 in /opt/root_src/geom/geom/src/TGeoTube.cxx:1814; 2: Assuming 'id' is < 'ndiv' in /opt/root_src/geom/geom/src/TGeoTube.cxx:1855; 3: Loop condition is true. Entering loop body in /opt/root_src/geom/geom/src/TGeoTube.cxx:1855; 4: Value assigned to field 'fNodes' in /opt/root_src/geom/geom/src/TGeoTube.cxx:1856; 5: Called C++ object pointer is null in /opt/root_src/geom/geom/src/TGeoTube.cxx:1857; /opt/root_src/geom/geom/src/TGeoTube.cxx:2059:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2059; /opt/root_src/geom/geom/src/TGeoTube.cxx:2107:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2107; /opt/root_src/geom/geom/src/TGeoTube.cxx:2773:13: warning: Value stored to 's' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 's' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2773; /opt/root_src/geom/geom/src/TGeoTube.cxx:2909:13: warning: Value stored to 'sz1' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'sz1' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2909; /opt/root_src/geom/geom/src/TGeoTube.cxx:3015:13: warning: Value stored to 'safe' during its initialization is ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:74668,safe,safe,74668,https://root.cern,https://github.com/root-project/root/issues/7428,1,['safe'],['safe']
Safety,"n Mac (11 or 12) on ARM. Here is an example stacktrace (up until the calls to cling). ```; -- TEST COMMAND -- ; cd /Users/sftnight/build/workspace/roottest-pullrequests-build/build/roottest/python/distrdf/dask; /usr/bin/python3 /Users/sftnight/build/workspace/roottest-pullrequests-build/roottest/python/distrdf/dask/test_backend.py --fixcling; -- BEGIN TEST OUTPUT --; Assertion failed: (isInt<33>(Addend) && ""Invalid page reloc value.""), function encodeAddend, file /Users/sftnight/build/workspace/roottest-pullrequests-build/root/interpreter/llvm/src/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldMachOAArch64.h, line 210.; *** Break *** abort; [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/libCore.6.27.01.so] TUnixSystem::DispatchSignals(ESignals) (no debug info); [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info); [/usr/lib/system/libsystem_pthread.dylib] pthread_kill (no debug info); [/usr/lib/system/libsystem_c.dylib] abort (no debug info); [/usr/lib/system/libsystem_c.dylib] err (no debug info); [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/libCling.6.27.01.so] llvm::RuntimeDyldMachOAArch64::encodeAddend(unsigned char*, unsigned int, llvm::MachO::RelocationInfoType, long long) const (.cold.6) (no debug info); [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/libCling.6.27.01.so] llvm::RuntimeDyldMachOAArch64::encodeAddend(unsigned char*, unsigned int, llvm::MachO::RelocationInfoType, long long) const (no debug info); [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/libCling.6.27.01.so] llvm::RuntimeDyldImpl::resolveLocalRelocations() (no debug info); [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/libCling.6.27.01.so] llvm::RuntimeDyldImpl::resolveRelocations() (no debug info); [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/libCling.6.27.01.so] llvm::RuntimeDyld::finalizeWithMemoryManagerLocking() (no debug ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10061:1062,abort,abort,1062,https://root.cern,https://github.com/root-project/root/issues/10061,1,['abort'],['abort']
Safety,"n RooFit JSON IO; [RF] Add test for a simultaneous model written and read from JSON; [RF] Skip the RooSimultaneous in JSON IO; [RF] Don't export `factory_tag` in JSON; [RF][HS3] Move the default variable values to the estimates section; [RF] RooFit JSON: no need to tag variables, just export them; [RF] Rename fields in JSON file to match new standard; [RF] Complete also the reading of likelihoods and analysis fields; [RF] Add likelihoods and analyses fields for HS3 v2; [RF] Decouple `RooDataHist` reading from rest of workspace in RooFitHS3; [RF] Some refactoring of RooFit HS3; [RF] New `domains` section in JSON to store variable ranges; Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252); [RF] Clearly mark `RooFit::CloneData()` as deprecated; [RF] Again code-format RooMinimizer; [RF] Avoid overhead of tracking evaluation error msgs when not needed; [RF] Implement safe way to set eval error logging in RooMinimizer; [RF] Use proper infinity checks in RooFit HS3; [RF] Avoid `sin` or `cos` of infinity in RooTruthModel integral code; [RF] RooTruthModel: local `xmin` and `xmax` to make code more readable; [RF] Define infinity as `std::numeric_limits<double>::infinity()`; [RF] Inline infinity constant and checks in `RooNumber`; [RF] Code-format RooNumber.h and RooNumber.cxx; [RF] Fill weight errors when importing RooDataHists to RooDataSet; [RF] Make it possible to directly import RooDataHist to RooDataSet; [RF] Reduce code duplication in RooDataSet constructor; [RF] Always create weight var in RooDataSet when importing weighted data; [RF] Implicitly create `WeightVar` for RooDataSet if it doesn't exist; [RF] Support also importing `RooDataHists` into RooDataSets; [RF] Avoid some code duplication in `RooDataSet` with importing slices; [RF] Split RooFuncWrapper into '.h' and '.cxx'.; [RF] Add observables as another parameter in RooFuncWrapper.; [RF] Test rough prototype of code generation in `testRooFuncWrapper`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12590#issuecomment-1491813664:8304,Avoid,Avoid,8304,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664,3,"['Avoid', 'safe']","['Avoid', 'safe']"
Safety,"n be specified besides the compression level: this is https://github.com/root-project/root/issues/6438; - `ROOT:::CompressionSettings` is undocumented (I only just now realized that it does precisely this conversion). One of the overloads has one line of documentation that mention it is deprecated but it is not actually deprecated with `R__DEPRECATE` ; - expected usage of `RCompressionSetting::EAlgorithm::EValues` is unclear (see https://root.cern/doc/master/structROOT_1_1RCompressionSetting_1_1EAlgorithm.html), the docs should probably point to `ROOT::CompressionSettings`. The docstring ""Note: this is only temporarily a struct and will become a enum class hence the name. "" should probably not appear in Doxygen, seems to be a not for developers; - `ROOT::CompressionSettings` requires that the user mentions the desired compression level. most of the time users just want to use whatever ROOT's default is. IIRC there is an enum for that too, but I could not find it in Doxygen. I would suggest the following improvements:; - `hadd --help` should mention that `-f` can also be used to trigger the compression algorithm, and it could have an examples section that shows how to use it and mentions `ROOT::CompressionSettings` as the API to recover the required integer given the desired compression algorithm; - `RCompressionSetting` should be documented with an example usage and pointers to the enums/structs to be used in conjunction to it; - the deprecated `RCompressionSetting` should be actually deprecated; - `RCompressionSetting` should provide a default value for the second argument that simply provides ROOT's default compression level for the specified compression algorithm; - the `RCompressionSetting::EAlgorithm` enum (which is currently a struct) should be made an enum, and its docs should point to `RCompressionSetting`; - the deprecated [ECompressionAlgorithm](https://root.cern/doc/master/namespaceROOT.html#a60945f6fe634f9f3be9872e57bf87f2e) should actually be deprecated",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8444:1614,recover,recover,1614,https://root.cern,https://github.com/root-project/root/issues/8444,1,['recover'],['recover']
Safety,"n the 2nd run). The issue here (well there https://github.com/root-project/root/issues/10743) does not seems to be the 2nd running of EndOfProcessCleanups but rather that there is a bad interaction between the 'early' running of the cleanups and that something in RDataFrame is not properly informed that something is delete early. The early cleanups is necessary because of the following issue. * The python code (directly or indirectly) can load libraries (Ls); * The python code (directly or indirectly) can open TFile (Fs) and can elect to never delete them; * The python code (directly or indirectly) can attach objects based on the Libraries on to the TFile. Then the order of execution at tear down will be. (1) tear down python; (2) unload the loaded libraries (Ls); (3) execute the atexit registered by TROOT, ; (4) this includes EndOfProcessCleanups; (5) this includes flushing and closing the TFiles. During (5) the object attached the TFile (usually just histogram and `TTree` but can also be object from the user libraries. However if the libraries for the user objects are already unloaded, their code (including a Streamer function or even their dictionary) are gone and this result in crash at best or worse in data loss. In order to prevent that we introduced (in https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a and friends), running the `EndOfProcessCleanups` of cleanups as soon as possible (i.e. as soon as we can detect the process is starting to tear down). (i.e. make it part of (1)). More likely that not this means than rather than removing early this call to `EndOfProcessCleanups`, the solution is to inform `RDataFrame` of those early deletion (depending whether the things that are deleted that are annoying `RDataFrame`, they may or may not be having the trouble described above, so another solution might be to insure that the things that bother `RDataFrame` are not included in the list of things deleted by `EndOfProcessCleanups`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10753#issuecomment-1155610874:1596,detect,detect,1596,https://root.cern,https://github.com/root-project/root/pull/10753#issuecomment-1155610874,1,['detect'],['detect']
Safety,"n version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved; <!--; If you already have an idea what we could improve, then please tell us.; -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code: build it / `root myMacro.C` / ...; -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf in",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9967:1555,safe,safely,1555,https://root.cern,https://github.com/root-project/root/issues/9967,1,['safe'],['safely']
Safety,"n't itself use the offset (it doesn't calculate the likelihood), it must still synchronize offsets, because during the gradient calculation the LikelihoodSerial objects on the workers are used to calculate the likelihoods there, so for them the offsets must be up to date.; * The LikelihoodJob contains a LikelihoodSerial member as well now. This allows the LikelihoodJob to trigger calculating the offsets on the master process before sending them to the workers.; * LikelihoodWrapper has some added private helper functions for managing offsets. - Other miscellaneous changes:; * LikelihoodWrapper::setApplyWeightSquared was implemented properly for RooSumL likelihoods as well, passing along the call to component RooUnbinnedLs. Note, however, that it is currently not reachable for users because there is no interface to pass this along from the RooMinimizer, which contains the MinuitFcnGrad, which contains the LikelihoodWrapper. A comment in MinuitFcnGrad.h refers to this, reminding future devs to also flip offsets_reset_ when (un)setting squared weights.; * LikelihoodWrapper now holds the likelihood_type. This cleans up some code duplication in LikelihoodSerial and LikelihoodJob, which previously used the type only in their ctors, and avoids dynamic_casts later, e.g. on when calculating offsets.; * A RooSubsidiaryL can now also be computed with LikelihoodSerial and LikelihoodJob; this case was still missing in their evaluation functions.; * The LikelihoodSerial, LikelihoodJob and LikelihoodGradientJob ""ConstrainedAndOffset"" test cases used the wrong argument for the constrained parameter. These are now corrected from alpha_bkg_obs_A to become alpha_bkg_A.; * In LikelihoodJobTest, the added test case ""UnbinnedGaussian1DSelectedParameterValues"" shows where splitting over events can lead to bit-wise differences. This test will be useful in the future if further precision enhancements are made. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12202:3890,avoid,avoids,3890,https://root.cern,https://github.com/root-project/root/pull/12202,1,['avoid'],['avoids']
Safety,"nHandle createStackingAction(KernelHandle& kernel, const std::string& name_type, bool shared); { return cr<StackingActionHandle,Setup::StackAction>(kernel,name_type,shared); }; ; static GeneratorActionHandle createGeneratorAction(KernelHandle& kernel, const std::string& name_type, bool shared); { return cr<GeneratorActionHandle,Setup::GenAction>(kernel,name_type,shared); }; ; static DetectorConstructionHandle createDetectorConstruction(KernelHandle& kernel, const std::string& name_type); { return cr<DetectorConstructionHandle,Setup::DetectorConstruction>(kernel,name_type,false); }; ; static UserInitializationHandle createUserInitialization(KernelHandle& kernel, const std::string& name_type); {	return UserInitializationHandle(Setup::Initialization(*kernel.get(),name_type,false).get());}; ; static SensitiveHandle createSensitive(KernelHandle& kernel, const std::string& name_type, const std::string& detector, bool shared); {	return SensitiveHandle(Setup::Sensitive(*kernel.get(),name_type,detector,shared).get()); }; ; static SensDetActionSequenceHandle createSensDetSequence(KernelHandle& kernel, const std::string& name_type); {	return cr<SensDetActionSequenceHandle,Setup::SensitiveSeq>(kernel,name_type,false); }; ; static Geant4Action* toAction(Geant4Filter* f) { return f; }; static Geant4Action* toAction(Geant4Action* f) { return f; }; static Geant4Action* toAction(Geant4PhaseAction* f) { return f; }; static Geant4Action* toAction(Geant4Sensitive* f) { return f; }; static Geant4Action* toAction(Geant4PhysicsList* f) { return f; }; static Geant4Action* toAction(Geant4RunAction* f) { return f; }; static Geant4Action* toAction(Geant4EventAction* f) { return f; }; static Geant4Action* toAction(Geant4TrackingAction* f) { return f; }; static Geant4Action* toAction(Geant4SteppingAction* f) { return f; }; static Geant4Action* toAction(Geant4StackingAction* f) { return f; }; static Geant4Action* toAction(Geant4GeneratorAction* f) { return f; }; static Geant4Action* toAction(Gean",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15221#issuecomment-2053701039:7375,detect,detector,7375,https://root.cern,https://github.com/root-project/root/issues/15221#issuecomment-2053701039,2,['detect'],['detector']
Safety,"nHandle createStackingAction(KernelHandle& kernel, const std::string& name_type, bool shared); { return cr<StackingActionHandle,Setup::StackAction>(kernel,name_type,shared); }; ; static GeneratorActionHandle createGeneratorAction(KernelHandle& kernel, const std::string& name_type, bool shared); { return cr<GeneratorActionHandle,Setup::GenAction>(kernel,name_type,shared); }; ; static DetectorConstructionHandle createDetectorConstruction(KernelHandle& kernel, const std::string& name_type); { return cr<DetectorConstructionHandle,Setup::DetectorConstruction>(kernel,name_type,false); }; ; static UserInitializationHandle createUserInitialization(KernelHandle& kernel, const std::string& name_type); {	return UserInitializationHandle(Setup::Initialization(*kernel.get(),name_type,false).get());}; ; static SensitiveHandle createSensitive(KernelHandle& kernel, const std::string& name_type, const std::string& detector, bool shared); {	return SensitiveHandle(Setup::Sensitive(*kernel.get(),name_type,detector,shared).get()); }; ; static SensDetActionSequenceHandle createSensDetSequence(KernelHandle& kernel, const std::string& name_type); {	return cr<SensDetActionSequenceHandle,Setup::SensitiveSeq>(kernel,name_type,false); }; ; static Geant4Action* toAction(Geant4Filter* f) { return f; }; static Geant4Action* toAction(Geant4Action* f) { return f; }; static Geant4Action* toAction(Geant4PhaseAction* f) { return f; }; static Geant4Action* toAction(Geant4Sensitive* f) { return f; }; static Geant4Action* toAction(Geant4PhysicsList* f) { return f; }; static Geant4Action* toAction(Geant4RunAction* f) … { return f.action; }; static Geant4Action* toAction(PhaseActionHandle f) { return f.action; }; static Geant4Action* toAction(SensitiveHandle f) { return f.action; }; static Geant4Action* toAction(PhysicsListHandle f) { return f.action; }; static Geant4Action* toAction(RunActionHandle f) { return f.action; }; static Geant4Action* toAction(EventActionHandle f) { return f.action; }; static Geant",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15221#issuecomment-2053701039:26180,detect,detector,26180,https://root.cern,https://github.com/root-project/root/issues/15221#issuecomment-2053701039,1,['detect'],['detector']
Safety,"nResult&, cling::Value*) (MetaParser.cpp:315); ==92602== by 0x11A4333F: cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (MetaParser.cpp:119); ==92602== by 0x11A430EB: cling::MetaParser::isMetaCommand(cling::MetaSema::ActionResult&, cling::Value*) (MetaParser.cpp:96); ==92602== by 0x11A1DC77: cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (MetaProcessor.cpp:317); ==92602== by 0x11351E8F: HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) (TCling.cxx:2437); ==92602== by 0x11352BF3: TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) (TCling.cxx:2581); ==92602== by 0x1135721B: TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) (TCling.cxx:3511); ==92602== by 0x442744B: TApplication::ExecuteFile(char const*, int*, bool) (TApplication.cxx:1591); ==92602== by 0x4426A7F: TApplication::ProcessFile(char const*, int*, bool) (TApplication.cxx:1463); ==92602== by 0x4426803: TApplication::ProcessLine(char const*, bool, int*) (TApplication.cxx:1436); ==92602== by 0x40E088B: TRint::ProcessLineNr(char const*, char const*, int*) (TRint.cxx:783); ==92602== by 0x40DE71B: TRint::Run(bool) (TRint.cxx:434); ==92602== by 0x100011EB: main (rmain.cxx:83); client stack range: [0x1FFEFE0000 0x1FFF00FFFF] client SP: 0x1FFF000B90; valgrind stack range: [0x1002EA0000 0x1002F9FFFF] top usage: 18160 of 1048576. Note: see also the FAQ in the source distribution.; It contains workarounds to several common problems.; In particular, if Valgrind aborted or crashed after; identifying problems in your program, there's a good chance; that fixing those problems will prevent Valgrind aborting or; crashing, especially if it happened in m_mallocfree.c. If that doesn't help, please report this bug to: www.valgrind.org. In the bug report, send all the above text, the valgrind; version, and what OS and version you are using. Thanks.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9297#issuecomment-979895686:42693,abort,aborted,42693,https://root.cern,https://github.com/root-project/root/issues/9297#issuecomment-979895686,2,['abort'],"['aborted', 'aborting']"
Safety,"n_codeset in libpython3.10.a(_localemodule.o); ""_libintl_bindtextdomain"", referenced from:; __locale_bindtextdomain in libpython3.10.a(_localemodule.o); ""_libintl_dcgettext"", referenced from:; __locale_dcgettext in libpython3.10.a(_localemodule.o); ""_libintl_dgettext"", referenced from:; __locale_dgettext in libpython3.10.a(_localemodule.o); ""_libintl_gettext"", referenced from:; __locale_gettext in libpython3.10.a(_localemodule.o); ""_libintl_setlocale"", referenced from:; __locale_setlocale in libpython3.10.a(_localemodule.o); __locale_localeconv in libpython3.10.a(_localemodule.o); ""_libintl_textdomain"", referenced from:; __locale_textdomain in libpython3.10.a(_localemodule.o); ld: symbol(s) not found for architecture x86_64; clang: error: linker command failed with exit code 1 (use -v to see invocation); make[2]: *** [lib/libPyMVA.so] Error 1; make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2; make: *** [all] Error 2; ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```; root -b -q ; ------------------------------------------------------------------------------; | Welcome to ROOT 6.31/01 https://root.cern |; | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for macosx64 on Feb 13 2024, 09:47:07 |; | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |; | With Apple clang version 13.0.0 (clang-1300.0.29.30) |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `libintl` but not using necessary linker flags when compiling. For example, fix for my local build is to add `-L/usr/local/lib -lintl`. ```; Python 3.10.1 (main, Jan 10 2022, 12:04:16) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14672:2013,detect,detecting,2013,https://root.cern,https://github.com/root-project/root/issues/14672,1,['detect'],['detecting']
Safety,"nating with default action of signal 6 (SIGABRT); ==22765== at 0x546E18B: raise (raise.c:51); ==22765== by 0x544D92D: abort (abort.c:100); ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29); ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29); ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29); ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29); ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so); ==22765== by 0x4DFF3CC: ???; ==22765== by 0x1FFEFFBB3F: ???; ==22765== by 0xB60A6A5548AF56FF: ???; ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so); ==22765== by 0x4DEB03F: ???; ==22765== ; ==22765== HEAP SUMMARY:; ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks; ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated; ==22765== ; ==22765== LEAK SUMMARY:; ==22765== definitely lost: 0 bytes in 0 blocks; ==22765== indirectly lost: 0 bytes in 0 blocks; ==22765== possibly lost: 7,728 bytes in 66 blocks; ==22765== still reachable: 66,622,884 bytes in 169,043 blocks; ==22765== of which reachable via heuristic:; ==22765== stdstring : 111 bytes in 1 blocks; ==22765== multipleinheritance: 7,776 bytes in 10 blocks; ==22765== suppressed: 278,964 bytes in 3,461 blocks; ==22765== Rerun with --leak-check=full to see details of leaked memory; ==22765== ; ==22765== Use --track-origins=yes to see where uninitialised values come from; ==22765== For lists of detected and suppressed errors, rerun with: -s; ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20); Aborted (core dumped); ```. That seems an important issue to fix. We should also probably run valgrind on all the tests to get a feeling of where we stand. And, yes I know it can take days or weeks but I think it is worth it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11385:8599,detect,detected,8599,https://root.cern,https://github.com/root-project/root/issues/11385,2,"['Abort', 'detect']","['Aborted', 'detected']"
Safety,"nclude <DDG4/Geant4InputAction.h>; #include <DDG4/Geant4GeneratorWrapper.h>. /// Namespace for the AIDA detector description toolkit; namespace dd4hep {. /// Namespace for the Geant4 based simulation part of the AIDA detector description toolkit; namespace sim {. #define ACTIONHANDLE(x) \; struct x##Handle { \; Geant4##x* action; \; explicit x##Handle(Geant4##x* a) : action(a) { if ( action ) action->addRef();} \; x##Handle(const x##Handle& h) : action(h.action) { if ( action ) action->addRef();} \; ~x##Handle() { if ( action) action->release(); } \; Geant4##x* release() { Geant4##x* tmp = action; action=0; return tmp; } \; operator dd4hep::sim::Geant4##x* () const { return action; } \; Geant4##x* operator->() const { return action; } \; Geant4##x* get() const { return action; } \; }. ACTIONHANDLE(Filter);; ACTIONHANDLE(Action);; ACTIONHANDLE(PhaseAction);; ACTIONHANDLE(RunAction);; ACTIONHANDLE(EventAction);; ACTIONHANDLE(GeneratorAction);; ACTIONHANDLE(PhysicsList);; ACTIONHANDLE(TrackingAction);; ACTIONHANDLE(SteppingAction);; ACTIONHANDLE(StackingAction);; ACTIONHANDLE(DetectorConstruction);; ACTIONHANDLE(Sensitive);; ACTIONHANDLE(ParticleHandler);; ACTIONHANDLE(UserInitialization);. ACTIONHANDLE(GeneratorActionSequence);; ACTIONHANDLE(RunActionSequence);; ACTIONHANDLE(EventActionSequence);; ACTIONHANDLE(TrackingActionSequence);; ACTIONHANDLE(SteppingActionSequence);; ACTIONHANDLE(StackingActionSequence);; ACTIONHANDLE(DetectorConstructionSequence);; ACTIONHANDLE(PhysicsListActionSequence);; ACTIONHANDLE(SensDetActionSequence);; ACTIONHANDLE(UserInitializationSequence);. struct PropertyResult {; std::string data;; int status;; PropertyResult() : status(0) {}; PropertyResult(const std::string& d, int s) : data(d), status(s) {}; PropertyResult(const PropertyResult& c) : data(c.data), status(c.status) {}; ~PropertyResult() {}; };. struct Geant4ActionCreation {; template <typename H,typename T> static H cr(KernelHandle& kernel, const std::string& name_type, bool shar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15221#issuecomment-2053701039:3889,Detect,DetectorConstruction,3889,https://root.cern,https://github.com/root-project/root/issues/15221#issuecomment-2053701039,3,['Detect'],['DetectorConstruction']
Safety,"ndef COMMA; #endif // PREFIX. /////////; // Prefix Union. #ifdef PREFIX_UNION; #define COMMA ,; PREFIX_UNION({; llvm::StringLiteral(""-"") COMMA llvm::StringLiteral(""--"") COMMA llvm::StringLiteral("""")}); #undef COMMA; #endif // PREFIX_UNION. /////////; // ValuesCode. #ifdef OPTTABLE_VALUES_CODE; #endif; /////////; // Groups. #ifdef OPTION. //////////; // Options. OPTION(prefix_0, llvm::StringLiteral(""<input>""), INPUT, Input, INVALID, INVALID, nullptr, 0, 0, nullptr, nullptr, nullptr); OPTION(prefix_0, llvm::StringLiteral(""<unknown>""), UNKNOWN, Unknown, INVALID, INVALID, nullptr, 0, 0, nullptr, nullptr, nullptr); OPTION(prefix_1, llvm::StringLiteral(""debug-only=""), _debugFlags_EQ, Joined, INVALID, INVALID, nullptr, 0, 0, nullptr, nullptr, nullptr); OPTION(prefix_1, llvm::StringLiteral(""debug-only""), _debugFlags, Flag, INVALID, INVALID, nullptr, 0, 0, nullptr, nullptr, nullptr); OPTION(prefix_1, llvm::StringLiteral(""errorout""), _errorout, Flag, INVALID, INVALID, nullptr, 0, 0,; ""Do not recover from input errors"", nullptr, nullptr); OPTION(prefix_2, llvm::StringLiteral(""help""), help, Flag, INVALID, INVALID, nullptr, 0, 0,; ""Print this help text"", nullptr, nullptr); OPTION(prefix_3, llvm::StringLiteral(""L""), L, JoinedOrSeparate, INVALID, INVALID, nullptr, 0, 0,; ""Add directory to library search path"", ""<directory>"", nullptr); OPTION(prefix_3, llvm::StringLiteral(""l""), l, JoinedOrSeparate, INVALID, INVALID, nullptr, 0, 0,; ""Load a library before prompt"", ""<library>"", nullptr); OPTION(prefix_1, llvm::StringLiteral(""metastr=""), _metastr_EQ, Joined, INVALID, INVALID, nullptr, 0, 0,; ""Set the meta command tag, default '.'"", nullptr, nullptr); OPTION(prefix_1, llvm::StringLiteral(""metastr""), _metastr, Separate, INVALID, INVALID, nullptr, 0, 0,; ""Set the meta command tag, default '.'"", nullptr, nullptr); OPTION(prefix_1, llvm::StringLiteral(""nologo""), _nologo, Flag, INVALID, INVALID, nullptr, 0, 0,; ""Do not show startup-banner"", nullptr, nullptr); OPTION(prefix_2, llvm::StringLi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14628#issuecomment-1933795392:1915,recover,recover,1915,https://root.cern,https://github.com/root-project/root/pull/14628#issuecomment-1933795392,1,['recover'],['recover']
Safety,"ne=0x55bdca174110 ""#line 1 \""ROOT_prompt_6\""\nstrlen(cs)"", sync=false, err=0x7ffc922b1588) at /opt/root_src/core/base/src/TApplication.cxx:1471; #19 0x00007fa53a245bb9 in TRint::ProcessLineNr (this=0x55bdc97497e0, filestem=0x7fa53a255f2f ""ROOT_prompt_"", line=0x7ffc922b1649 ""strlen(cs)"", error=0x7ffc922b1588) at /opt/root_src/core/rint/src/TRint.cxx:751; #20 0x00007fa53a245484 in TRint::HandleTermInput (this=0x55bdc97497e0) at /opt/root_src/core/rint/src/TRint.cxx:612; #21 0x00007fa53a242df1 in TTermInputHandler::Notify (this=0x55bdca28cb00) at /opt/root_src/core/rint/src/TRint.cxx:132; #22 0x00007fa53a2473f7 in TTermInputHandler::ReadNotify (this=0x55bdca28cb00) at /opt/root_src/core/rint/src/TRint.cxx:124; #23 0x00007fa539d4b871 in TUnixSystem::CheckDescriptors (this=0x55bdc96f17c0) at /opt/root_src/core/unix/src/TUnixSystem.cxx:1322; #24 0x00007fa539d4aae7 in TUnixSystem::DispatchOneEvent (this=0x55bdc96f17c0, pendingOnly=false) at /opt/root_src/core/unix/src/TUnixSystem.cxx:1077; #25 0x00007fa539c2dc49 in TSystem::InnerLoop (this=0x55bdc96f17c0) at /opt/root_src/core/base/src/TSystem.cxx:404; #26 0x00007fa539c2d9de in TSystem::Run (this=0x55bdc96f17c0) at /opt/root_src/core/base/src/TSystem.cxx:354; #27 0x00007fa539bb6fea in TApplication::Run (this=0x55bdc97497e0, retrn=false) at /opt/root_src/core/base/src/TApplication.cxx:1623; #28 0x00007fa53a2447ef in TRint::Run (this=0x55bdc97497e0, retrn=false) at /opt/root_src/core/rint/src/TRint.cxx:463; #29 0x000055bdc8f70a99 in main (argc=1, argv=0x7ffc922b3ac8) at /opt/root_src/main/src/rmain.cxx:30; Error in <HandleInterpreterException>: Trying to access a pointer that points to an invalid memory address..; Execution of your code was aborted.; ROOT_prompt_6:1:8: warning: invalid memory pointer passed to a callee:; strlen(cs); ^~; root [7] cs; (const char *) 0x1 <invalid memory address>. ```. If I select the first element of the Combo-Box, then cs = 0 and it does not crash because the if(cs) in the TString constructor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7195#issuecomment-779844279:4837,abort,aborted,4837,https://root.cern,https://github.com/root-project/root/issues/7195#issuecomment-779844279,1,['abort'],['aborted']
Safety,nevermind ... this was against work-in-progress code attempting to improve the detection of the underlying type of an enum.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12953#issuecomment-1577645571:79,detect,detection,79,https://root.cern,https://github.com/root-project/root/issues/12953#issuecomment-1577645571,1,['detect'],['detection']
Safety,new branch to avoid warning about missing roottest PR.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3760:14,avoid,avoid,14,https://root.cern,https://github.com/root-project/root/pull/3760,1,['avoid'],['avoid']
Safety,"nfo, re-calculated the state.; fState = kForwardDeclared;. delete fIsA; fIsA = 0;; // Disable the autoloader while calling SetClassInfo, to prevent; // the library from being reloaded!; {; TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);; TInterpreter::SuspendAutoParsing autoParseRaii(gCling);; gInterpreter->SetClassInfo(this,kTRUE);; }; ```. Likely disabling template instantiation inside SetClassInfo in this use case. ```; art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/green",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:1553,abort,abort,1553,https://root.cern,https://github.com/root-project/root/pull/5462,1,['abort'],['abort']
Safety,"ng GetSharedLibImmediateDepsSlow(std::string lib,; > // FIXME: It is unclear whether we can ignore all weak undefined; > // symbols:; > // http://lists.llvm.org/pipermail/llvm-dev/2017-October/118177.html; > - if (SymName == ""_Jv_RegisterClasses"" ||; > - SymName == ""_ITM_deregisterTMCloneTable"" ||; > - SymName == ""_ITM_registerTMCloneTable""); > + static constexpr llvm::StringRef RegisterClasses(""_Jv_RegisterClasses"");; > + static constexpr llvm::StringRef RegisterCloneTable(""_ITM_registerTMCloneTable"");; > + static constexpr llvm::StringRef DeregisterCloneTable(""_ITM_deregisterTMCloneTable"");; > + if (SymName == RegisterClasses ||; > + SymName == RegisterCloneTable ||; > + SymName == DeregisterCloneTable); > continue;; > }; > ```; > ; > Do you want me to submit this separately, outside this PR?. I think you should be able to submit as part of this PR. > ; > > > On the performance side, the current state seems to veery slow: `ctest -j12 -R dataframe .` used to take in the order of 2m30s, now I aborted it after 13 minutes. A lot of time seems to be spent in `sys`, are you aware of changes that could explain this?; > > ; > > ; > > Can you paste the stack trace? I fear that the DynamicLibraryManagerSymbol.cpp stopped inlining functions due to some recent calls of ::StringRef::str()...; > ; > `perf` says a number of kernel functions and indeed `cling::Dyld::ContainsSymbol` are the largest contenders. I don't understand why though, the annotations inside the functions make no sense to me (showing more than 50% on a ` mov %ebx,%r8d` without something obvious around it). yeah, this is a bit tricky, the profiler is useful if you built in debug mode. What usually works is removing the `DynamicLibraryManagerSymbol.cpp.o` and copying the build command, changing it to clang and adding [a variation of] `-Rpass=inline -Rpass-missed=.*` (https://godbolt.org/z/xGEsGhf97). Then you can compare old and the new version for missed optimization opportunities. My feeling is that I mechani",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1089931729:2377,abort,aborted,2377,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1089931729,1,['abort'],['aborted']
Safety,ng::AutoParse>: Trying to autoparse for TObjectEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TObjectEditor. Info in <TInterpreter::TCling::AutoLoad>: Trying to autoload for TObjectEditor; Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for TObjectEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TObjectEditor. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for TObjectEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TObjectEditor. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for TObjectEditor; Info in <TInterpreter::TCling::AutoLoad>: Trying to autoload for TObjectEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TObjectEditor. TClass::GetClass: Header Parsing - The representation of TObjectEditor was not found in the type system. A lookup in the interpreter is about to be tried: this can cause parsing. This can be avoided selecting TObjectEditor in the linkdef/selection file.; Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for TObjectEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TObjectEditor. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for TObjectEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TObjectEditor. Info in <TInterpreter::TCling::AutoLoad>: Trying to autoload for TObjectEditor; TEnum::GetEnum: Header Parsing - The enumerator TObjectEditor is not known to the typesystem: an interpreter lookup will be performed. This can imply parsing of headers. This can be avoided selecting the numerator in the linkdef/selection file.; Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for TObjectEditor; Info in <TInterpreter::TCling::AutoLoad>: Trying to autoload for TObjectEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TObjectEditor. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15963#issuecomment-2200648481:29634,avoid,avoided,29634,https://root.cern,https://github.com/root-project/root/issues/15963#issuecomment-2200648481,1,['avoid'],['avoided']
Safety,night/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22; #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12; #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const; Shadow bytes around the buggy address:; 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa; 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd; 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd; 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd; =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd; 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa; 0x0c2c800bafa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c2c800bafb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c2c800bafc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c2c800bafd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07 ; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==1544443==ABORTING. -- END TEST OUTPUT --; CMake Error at /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/RootTestDriver.cmake:186 (message):; got exit code 1 but expected 0. Standard Output. -- TEST COMMAND --,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12715:22260,ABORT,ABORTING,22260,https://root.cern,https://github.com/root-project/root/issues/12715,1,['ABORT'],['ABORTING']
Safety,nstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:60:34: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:61:33: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:62:32: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:30:31: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:41:22: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:59:33: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:60:34: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] . And 362 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8240#issuecomment-867532806:2382,avoid,avoid,2382,https://root.cern,https://github.com/root-project/root/pull/8240#issuecomment-867532806,4,['avoid'],['avoid']
Safety,nterpreter/cling/lib/Utils/PlatformPosix.cpp:73:44: warning: type qualifiers ignored on cast result type [-Wignored-qualifiers] ; - [2020-09-27T08:08:03.343Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/include/clang/AST/DeclOpenMP.h:97:1: warning: multi-line comment [-Wcomment] ; - [2020-09-27T08:08:06.296Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Pass.h:105:16: warning: ‘virtual bool llvm::Pass::doInitialization(llvm::Module&)’ was hidden [-Woverloaded-virtual] ; - [2020-09-27T08:08:06.296Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Transforms/IPO/Inliner.h:39:8: warning: by ‘virtual bool llvm::LegacyInlinerBase::doInitialization(llvm::CallGraph&)’ [-Woverloaded-virtual] ; - [2020-09-27T08:08:09.694Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/include/clang/AST/DeclOpenMP.h:97:1: warning: multi-line comment [-Wcomment] ; - [2020-09-27T08:08:20.537Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:212:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T08:08:20.537Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:427:27: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T08:08:20.537Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:450:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T08:08:20.537Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/include/clang/AST/DeclOpenMP.h:97:1: warning: multi-line comment [-Wcomment] ; - [2020-09-27T08:08:20.537Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/include/clang/AST/DeclOpenMP.h:97:1: warning: multi-line comment [-Wcomment] . And 185 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-699602087:1605,redund,redundant,1605,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-699602087,3,['redund'],['redundant']
Safety,nterpreter/cling/lib/Utils/PlatformPosix.cpp:73:44: warning: type qualifiers ignored on cast result type [-Wignored-qualifiers] ; - [2020-09-27T10:10:00.219Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/include/clang/AST/DeclOpenMP.h:97:1: warning: multi-line comment [-Wcomment] ; - [2020-09-27T10:10:05.030Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Pass.h:105:16: warning: ‘virtual bool llvm::Pass::doInitialization(llvm::Module&)’ was hidden [-Woverloaded-virtual] ; - [2020-09-27T10:10:05.030Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Transforms/IPO/Inliner.h:39:8: warning: by ‘virtual bool llvm::LegacyInlinerBase::doInitialization(llvm::CallGraph&)’ [-Woverloaded-virtual] ; - [2020-09-27T10:10:08.344Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/include/clang/AST/DeclOpenMP.h:97:1: warning: multi-line comment [-Wcomment] ; - [2020-09-27T10:10:17.991Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:212:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:10:17.991Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:427:27: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:10:17.991Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:450:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:10:18.818Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/include/clang/AST/DeclOpenMP.h:97:1: warning: multi-line comment [-Wcomment] ; - [2020-09-27T10:10:19.767Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/include/clang/AST/DeclOpenMP.h:97:1: warning: multi-line comment [-Wcomment] . And 185 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-699615010:2500,redund,redundant,2500,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-699615010,3,['redund'],['redundant']
Safety,nterpreter/llvm/src/tools/clang/include/clang/AST/DeclOpenMP.h:97:1: warning: multi-line comment [-Wcomment] ; - [2020-09-27T08:08:30.018Z] /build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Utils/PlatformPosix.cpp:73:44: warning: type qualifiers ignored on cast result type [-Wignored-qualifiers] ; - [2020-09-27T08:08:40.231Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Pass.h:105:16: warning: ‘virtual bool llvm::Pass::doInitialization(llvm::Module&)’ was hidden [-Woverloaded-virtual] ; - [2020-09-27T08:08:40.231Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Transforms/IPO/Inliner.h:39:8: warning: by ‘virtual bool llvm::LegacyInlinerBase::doInitialization(llvm::CallGraph&)’ [-Woverloaded-virtual] ; - [2020-09-27T08:08:41.268Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:212:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T08:08:41.268Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:427:27: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T08:08:41.268Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:450:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T08:08:46.643Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/include/clang/AST/DeclOpenMP.h:97:1: warning: multi-line comment [-Wcomment] ; - [2020-09-27T08:08:55.641Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/include/clang/AST/DeclOpenMP.h:97:1: warning: multi-line comment [-Wcomment] ; - [2020-09-27T08:08:57.622Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/include/clang/AST/DeclOpenMP.h:97:1: warning: multi-line comment [-Wcomment] . And 185 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-699602154:1566,redund,redundant,1566,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-699602154,2,['redund'],['redundant']
Safety,"o it existed, to the value set on its initialization. ```cpp; //We initialize the scheduler with 4 threads; ROOT::EnableIMT(4);; { ; //The scheduler is active, so the value passed to TThreadExecutor; //is overriden with the number of threads the scheduler has been; //initialized with (4); TThreadExecutor executor(9);; }; ROOT::DisableIMT();. //The scheduler is not alive at this point, ; //so we initialize it with 2 threads; ROOT::EnableIMT(2);; ROOT::TThreadExecutor executor(8);; ROOT::DisableIMT();. executor.MapReduce(...); //Runs on two threads!. ROOT::EnableIMT(3);; //Still two threads! TThreadExecutor instance was keeping the scheduler alive; ```; This also implies that given two co-existent instances of TThreadExecutor initialized with a different number of threads, the first one to be initialized forces on the second one the number of threads to work with. ```cpp; ROOT::TThreadExecutor executor(4);; ROOT::TThreadExecutor executor2(8); //will run limited to two threads!!; ```; This setup was useful [to avoid undefined behaviours between the implicit and explicit parallelism modes of ROOT](https://indico.cern.ch/event/607814/contributions/2466931/attachments/1409778/2155811/TScheduler.pdf). . # New behaviour; With this PR, we can separate this two modes of execution. We support the co-existance of several TThreadExecutors, each handling a different number of threads, by initializing the scheduler with the [default number of threads](tbb::task_scheduler_init::default_num_threads) and using a ```tbb::task_arena``` per TThreadExecutor to work with a subset of them instead. ```cpp. //Each of the executor manages its own tbb::task_arena,; //which allows the co-existance of TThreadExecutors; //handling different number of threads.; TThreadExecutor executor1(8); //will run on 8 threads; TThreadExecutor executor2(4); //will run on 4 threads. //IMT keeps a different task Arena too!; ROOT::EnableIMT(4); //4 threads will be used in IMT operations; //executor3 will be initi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2389:1924,avoid,avoid,1924,https://root.cern,https://github.com/root-project/root/pull/2389,1,['avoid'],['avoid']
Safety,"oPcon.cxx:681; 18: Taking false branch in /opt/root_src/geom/geom/src/TGeoPcon.cxx:681; 19: 'is_tube' is false in /opt/root_src/geom/geom/src/TGeoPcon.cxx:685; 20: Taking false branch in /opt/root_src/geom/geom/src/TGeoPcon.cxx:685; 21: Value assigned to field 'fNodes' in /opt/root_src/geom/geom/src/TGeoPcon.cxx:690; 22: Called C++ object pointer is null in /opt/root_src/geom/geom/src/TGeoPcon.cxx:691; /opt/root_src/geom/geom/src/TGeoPcon.cxx:857:11: warning: Although the value stored to 'indx2' is used in the enclosing expression, the value is never actually read from 'indx2' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to 'indx2' is used in the enclosing expression, the value is never actually read from 'indx2' in /opt/root_src/geom/geom/src/TGeoPcon.cxx:857; /opt/root_src/geom/geom/src/TGeoPcon.cxx:1108:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoPcon.cxx:1108; /opt/root_src/geom/geom/src/TGeoPcon.cxx:1174:7: warning: Value stored to 'iplane' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'iplane' is never read in /opt/root_src/geom/geom/src/TGeoPcon.cxx:1174; /opt/root_src/geom/geom/src/TGeoPcon.cxx:1175:7: warning: Value stored to 'saftmp' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'saftmp' is never read in /opt/root_src/geom/geom/src/TGeoPcon.cxx:1175; /opt/root_src/geom/geom/src/TGeoPcon.cxx:1200:7: warning: Value stored to 'dz' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'dz' is never read in /opt/root_src/geom/geom/src/TGeoPcon.cxx:1200; /opt/root_src/geom/geom/src/TGeoPcon.cxx:1205:4: warning: Value stored to 'saftmp' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'saftmp' is never read in /opt/root_src/geom/geom/src/TGeoPcon.cxx:1205; /opt/root_src/geom/geom/src/TGe",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:52298,safe,safe,52298,https://root.cern,https://github.com/root-project/root/issues/7428,1,['safe'],['safe']
Safety,"oRealVar mean(""mean"", ""mean of gaussian"", 1, -10, 10);; RooRealVar sigma(""sigma"", ""width of gaussian"", 1, 0.1, 10);. RooGaussian gauss(""gauss"", ""gaussian PDF"", x, mean, sigma);. RooRealVar mean2(mean);. gauss.replaceServer(mean, mean2, true, false);; gauss.Print(""v"");. std::cout << ""x : "" << &gauss.getX() << std::endl;; std::cout << ""mean : "" << &gauss.getMean() << std::endl;; std::cout << ""sigma: "" << &gauss.getSigma() << std::endl;; ```. Here, the proxy for `mean` will still point to the original `mean`, but; the server was redirected to the copy `mean2`. This is dangerous, and; desyncing of the proxy and server list are actually the underlying; reason for a set of RooFit problems. The safter `RooAbsArg::redirectServers()` should always be used,; becauese that one is also updating the proxies. Therefore, the; `replaceServer()` interface is now marked as dangerous everywhere; possible: in a printout when you use it, in the docs, and with the; `R__SUGGEST_ALTERNATIVE` macro. Internally, the `replaceServer()` was also used in `redirectServers()`.; But this was also causing problems: `replaceServer()` always adds the; new server at the end of the server list, which means the list gets; reordered. This can confuse usercode that rely on the server list being; ordered (yes, that's not a good idea anyway, but there are many codes; that do this). This reordering can also be seein in the example code; above. Therefore, the `redirectServers()` function is now rewritten to replace; the server without changing its position in the server list. This also; means that the original server list doesn't need to be copied, as not; iterators are invalidated. Furthermore, the `redirectServers()` is more optimized now. Before, it; redundantly figured out whether a server was a value and/or shape; server. Now, this is figured out only once when removing the original; server from the client. In summary: this PR makes RooFit code safer and faster by changing; `RooAbsArg::redirectServers()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12040:1941,redund,redundantly,1941,https://root.cern,https://github.com/root-project/root/pull/12040,2,"['redund', 'safe']","['redundantly', 'safer']"
Safety,"ocked` memory. . I say a hard limit because we probably don't want our users to have to adjust these settings, and we can batch submit calls when the number of files is larger than the ring size. From the liburing [readme](https://github.com/axboe/liburing/blob/332a17f3d9e4a34e9dacc42f11ba5bc3fcf4cc0b/README#L22-L25): . > io_uring accounts memory it needs under the rlimit memlocked option, which; > can be quite low on some setups (64K). The default is usually enough for; > most use cases, but bigger rings or things like registered buffers deplete; > it quickly. root isn't under this restriction, but regular users are. Going. If I run this code:; ```c; #include <stdio.h>; #include ""liburing.h""; #include ""liburing/io_uring.h"". int main(int argc, char* argv[]) {. int num_files = 1;; struct io_uring ring;; while(!io_uring_queue_init(num_files, &ring, 0)) {; io_uring_queue_exit(&ring);; num_files++;; }; perror("""");; printf(""queue init failed at %d files\n"", num_files);; return 0;; }. ```; we can see this in action: ; ```shell; $ ./ring_size ; Cannot allocate memory; queue init failed at 1079 files; $ ./ring_size ; Cannot allocate memory; queue init failed at 851 files; $ ./ring_size ; Cannot allocate memory; queue init failed at 992 files ; ```. ```shell; sudo ./ring_size; Cannot allocate memory; queue init failed at 9343 files; ```; These are all being rounded up to the next power of two. . By default the completion queue size is twice that of the submission queue (what we specify in the setup call). Before kernel 5.5., this means we run the risk of overflowing the completion queue buffer if we keep submitting events without handling them! (see io_uring section of this [article](https://ndportmann.com/io_uring-foundation/)). After 5.5 the kernel maintains an overflow list for us. . I don't know how many files we're typically opening, but based on everything else I'd suggest a ring size of 512 as a default? ; We can measure whether different ring sizes make a difference.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5919#issuecomment-658821831:1934,risk,risk,1934,https://root.cern,https://github.com/root-project/root/pull/5919#issuecomment-658821831,1,['risk'],['risk']
Safety,"oducer that doesn't depend on Marcs workspace:. ```c++; #include <RooGenContext.h>; #include <RooRealVar.h>; #include <RooExponential.h>; #include <RooUniform.h>; #include <RooMsgService.h>. #include <TFile.h>; #include <TSystem.h>. #include <iostream>. void repro(); {; using namespace RooFit;. ProcInfo_t procinfo;; const float toMB = 1.f / 1024.f;. RooRealVar x{""x"", ""x"", 0.1, 5.1};; RooRealVar c{""c"", ""c"", -1.8, -5, 5};. RooExponential expo{""expo"", ""expo"", x, c};; RooAbsPdf *pdf = &expo;. // With the uniform distribution, there is no leak!; // RooUniform uni{""uni"", ""uni"", x};; // RooAbsPdf * pdf = &uni;. std::size_t nToys = 5000;. for (std::size_t index_toy = 1; index_toy <= nToys; index_toy++) {. if (index_toy % 500 == 0) {; gSystem->GetProcInfo(&procinfo);; std::cout << index_toy << "": "" << procinfo.fMemResident * toMB << "" "" << procinfo.fMemVirtual * toMB; << std::endl;; }. if (index_toy == nToys) {; RooMsgService::instance().addStream(DEBUG, Topic(Generation));; }. RooGenContext{*pdf, x};; }; }; ```. The output:. ```; 500: 209.504 345.379; 1000: 209.762 345.77; 1500: 209.762 345.77; 2000: 210.535 346.551; 2500: 210.535 346.551; 3000: 210.535 346.551; 3500: 210.535 346.551; 4000: 212.082 348.117; 4500: 212.082 348.117; 5000: 212.082 348.117; [#3] INFO:Generation -- RooGenContext::ctor() setting up event generator context for p.d.f. expo for generation of observable(s) (x); [#3] DEBUG:Generation -- RooGenContext::ctor() observables (x) are safe for internal generator (if supported by p.d.f); [#3] DEBUG:Generation -- RooGenContext::ctor() Model indicates that it can internally generate observables () with configuration identifier 0; [#3] INFO:Generation -- RooGenContext::ctor() Context will generate variables (x) with accept/reject sampling; [#3] INFO:Generation -- RooGenContext::ctor() accept/reject sampling function is expo_AccRej; [#3] DEBUG:Generation -- RooGenContext::ctor() creating MC sampling generator RooFoamGenerator from function for observables (x); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8984#issuecomment-1396133152:1670,safe,safe,1670,https://root.cern,https://github.com/root-project/root/issues/8984#issuecomment-1396133152,1,['safe'],['safe']
Safety,"of course not xD it can't be, because the standard allows the implementation to pack the bits together. that's where all the evilness comes from. we have a few places in RDF where we SFINAE away from vector<bool> because of the thread-safety issue",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3135#issuecomment-446357707:235,safe,safety,235,https://root.cern,https://github.com/root-project/root/pull/3135#issuecomment-446357707,1,['safe'],['safety']
Safety,"of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this; ```c++; MN_INFO_MSG(""MnHesse: Some foo happened"");; [...]; MN_INFO_MSG(""MnHesse: Some bar happened"");; [...]; int n = 5;; MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");; ```; Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope.; ```c++; MnPrint print(""MnHesse""); // appears once at the beginning of a long method; [...]; print.Info(""Some foo happened"");; [...]; print.Info(""Some bar happened"");; [...]; int n = 5;; print.Info(""Frobinated"", n, ""glorps"");; ```; The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step.; * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read.; * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession.; * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705#issuecomment-719713799:1981,redund,redundant,1981,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-719713799,1,['redund'],['redundant']
Safety,"oftware/gdb/bugs/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>. For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from python...; (No debugging symbols found in python); (gdb) run testnullptr.py; Starting program: /opt/venv/bin/python testnullptr.py; warning: Error disabling address space randomization: Function not implemented; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/usr/lib/libthread_db.so.1"".; warning: File ""/home/b/bendavid/rootdev19/install/lib/libCore.so-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; add-auto-load-safe-path /home/b/bendavid/rootdev19/install/lib/libCore.so-gdb.py; line to your configuration file ""/home/b/bendavid/.config/gdb/gdbinit"".; To completely disable this security protection add; set auto-load safe-path /; line to your configuration file ""/home/b/bendavid/.config/gdb/gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; info ""(gdb)Auto-loading safe path""; [Detaching after vfork from child process 1453]; [Detaching after vfork from child process 1455]; [Detaching after vfork from child process 1457]; [Detaching after vfork from child process 1459]; [Detaching after vfork from child process 1461]; [Detaching after vfork from child process 1465]; [Detaching after vfork from child process 1467]; [New Thread 0x7fb1af5b6640 (LWP 1469)]; sleep; ^C; Thread 1 ""python"" received signal SIGINT, Interrupt.; 0x00007fb1cb2a1201 in select () from /usr/lib/libc.so.6; (gdb) break cling::NullDerefProtectionTransformer::Transform; Breakpoint 1 at 0x7fb1c5732850; (gdb) continue; Continuing.; instantiating template; [Thread 0x7fb1af5b6640 (LWP 1469) exited]. Thread 1 ""python"" hit Breakpoint 1, 0x000",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9112#issuecomment-1010779015:1925,safe,safe-path,1925,https://root.cern,https://github.com/root-project/root/issues/9112#issuecomment-1010779015,1,['safe'],['safe-path']
Safety,"oftware/gdb/bugs/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>. For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from python...; (No debugging symbols found in python); (gdb) run testnullptr.py; Starting program: /opt/venv/bin/python testnullptr.py; warning: Error disabling address space randomization: Function not implemented; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/usr/lib/libthread_db.so.1"".; warning: File ""/home/b/bendavid/rootdev19/install/lib/libCore.so-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; add-auto-load-safe-path /home/b/bendavid/rootdev19/install/lib/libCore.so-gdb.py; line to your configuration file ""/home/b/bendavid/.config/gdb/gdbinit"".; To completely disable this security protection add; set auto-load safe-path /; line to your configuration file ""/home/b/bendavid/.config/gdb/gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; info ""(gdb)Auto-loading safe path""; [Detaching after vfork from child process 2333]; [Detaching after vfork from child process 2335]; [Detaching after vfork from child process 2337]; [Detaching after vfork from child process 2339]; [Detaching after vfork from child process 2341]; [Detaching after vfork from child process 2345]; [Detaching after vfork from child process 2347]; [New Thread 0x7f05f42cb640 (LWP 2349)]; sleep; ^C; Thread 1 ""python"" received signal SIGINT, Interrupt.; 0x00007f060ffb6201 in select () from /usr/lib/libc.so.6; (gdb) break cling::NullDerefProtectionTransformer::Transform; Breakpoint 1 at 0x7f060a447850; (gdb) continue; Continuing.; instantiating template. Thread 1 ""python"" hit Breakpoint 1, 0x00007f060a447850 in cling::NullDerefProtection",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9112#issuecomment-1010786248:1901,safe,safe-path,1901,https://root.cern,https://github.com/root-project/root/issues/9112#issuecomment-1010786248,1,['safe'],['safe-path']
Safety,"oid setting internal variables directly. Python error message:; Traceback (most recent call last):; File ""<string>"", line 6, in <module>; File ""<string>"", line 6, in <dictcomp>; TypeError: 'torch._C.Node' object is not subscriptable; terminate called after throwing an instance of 'std::runtime_error'; what(): ; Failed to run python code: for i in graph[0].nodes():; globals().update(locals()); nodeData={}; nodeData['nodeType']=i.kind(); nodeAttributeNames=[x for x in i.attributeNames()]; nodeAttributes={j:i[j] for j in nodeAttributeNames}; nodeData['nodeAttributes']=nodeAttributes; nodeInputs=[x for x in i.inputs()]; nodeInputNames=[x.debugName() for x in nodeInputs]; nodeData['nodeInputs']=nodeInputNames; nodeOutputs=[x for x in i.outputs()]; nodeOutputNames=[x.debugName() for x in nodeOutputs]; nodeData['nodeOutputs']=nodeOutputNames; nodeDType=[x.type().scalarType() for x in nodeOutputs]; nodeData['nodeDType']=nodeDType; modelData.append(nodeData); Subprocess aborted; make[2]: *** [tmva/pymva/test/CMakeFiles/SofieCompileModels_PyTorch.dir/build.make:70: SofieCompileModels_PyTorch] Error 1; make[1]: *** [CMakeFiles/Makefile2:62828: tmva/pymva/test/CMakeFiles/SofieCompileModels_PyTorch.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs....; ```. ### Reproducer. `cmake ../src -DCMAKE_BUILD_TYPE=RelWithDebInfo -Droofit=on -Dmysql=off -Dpgsql=off -Droostats=on -Dfortran=off -Dhistfactory=on -Dtmva=on -Dminuit2=on -Droottest=on -Droot7=on -Dtesting=on -Dbuiltin_llvm=on -Dbuiltin_tbb=off -Dbuiltin_nlohmannjson=on -DCMAKE_CXX_STANDARD=17 -DPYTHON_EXECUTABLE=$(which python) -Dfail-on-missing=on -Doracle=off -Dpythia6=off -Dpythia8=off -Dgfal=off -Dvdt=off -Ddavix=off -Droofit_hs3_yml=ON -Droofit_multiprocess=ON -Dbuiltin_zeromq=ON -Dbuiltin_cppzmq=ON`. ### ROOT version. ROOT Version: 6.29/01; Built for linuxx8664gcc on Jul 03 2023, 09:06:02; From heads/master@v6-29-01-1847-g7f288f1ca8e. ### Installation method. compiled with cmake from master. ### Operating system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13155:1877,abort,aborted,1877,https://root.cern,https://github.com/root-project/root/issues/13155,1,['abort'],['aborted']
Safety,"oject %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->; Yes. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; Root fails to build in Arch Linux.; `$ cmake -DCMAKE_INSTALL_PREFIX=../install ../gitclone`; <details>; <summary>output</summary>. ```; -- The C compiler identification is GNU 11.2.0; -- The CXX compiler identification is GNU 11.2.0; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /usr/bin/cc - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/c++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Git: /usr/bin/git (found version ""2.36.0""); -- Detected ROOT_VERSION 6.27.01; -- Checking internet connectivity...; -- Yes; -- Looking for Python; -- Found Python3: /usr/bin/python3.10 (found version ""3.10.4"") found components: Interpreter Development NumPy Development.Module Development.Embed; -- Could NOT find Python2 (missing: Python2_NumPy_INCLUDE_DIRS NumPy) (found version ""2.7.18""); -- Found GCC. Major version 11, minor version 2; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success; -- Found Threads: TRUE; -- Performing Test GLIBCXX_USE_CXX11_ABI; -- Performing Test GLIBCXX_USE_CXX11_ABI - Success; -- ROOT Platform: linux; -- ROOT Compiler: GNU 11.2.0; -- ROOT Processor: x86_64; -- ROOT Architecture: linuxx8664gcc; -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'); -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG; -- ROOT def",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10528:1172,Detect,Detected,1172,https://root.cern,https://github.com/root-project/root/issues/10528,1,['Detect'],['Detected']
Safety,"ok, i think i finally understand what you meant in the other thread. Ciao,; Giulio. On Wed, Nov 24 2021 at 4:47 PM, Philippe Canal ***@***.***>; wrote:. > Yes. The ""Serialized"" part in the function name indicates that the return; > buffer is ""only"" decompressed but is other-wise ""as-on-file"". The idea is; > that doing the swapping at the usage site will avoid one scan through the; > buffer and ""may"" results in better performance.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/issues/9331#issuecomment-977999652>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAACSMDFIVEHPPGQQWM32BTUNUCIBANCNFSM5IWMPLXQ>; > .; >",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9331#issuecomment-978143097:356,avoid,avoid,356,https://root.cern,https://github.com/root-project/root/issues/9331#issuecomment-978143097,1,['avoid'],['avoid']
Safety,"ok, that makes sense. For now I'm happy to use the web viewer as a workaround, but will this be fixed in new releases? I'd prefer to keep using a precompiled version rather than risk problems in compiling it myself",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13885#issuecomment-1770996104:178,risk,risk,178,https://root.cern,https://github.com/root-project/root/pull/13885#issuecomment-1770996104,1,['risk'],['risk']
Safety,ole).; ### Errors:; - [2020-09-28T08:13:35.720Z] /build/workspace/root-pullrequests-build/build/include/TF3.h:145:11: error: call to member function 'GetRange' is ambiguous . ### Warnings:; - [2020-09-28T08:12:20.858Z] /build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Utils/PlatformPosix.cpp:73:44: warning: type qualifiers ignored on cast result type [-Wignored-qualifiers] ; - [2020-09-28T08:12:21.117Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:212:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:21.117Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:427:27: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:21.117Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:450:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:28.744Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Pass.h:105:16: warning: ‘virtual bool llvm::Pass::doInitialization(llvm::Module&)’ was hidden [-Woverloaded-virtual] ; - [2020-09-28T08:12:28.744Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Transforms/IPO/Inliner.h:39:8: warning: by ‘virtual bool llvm::LegacyInlinerBase::doInitialization(llvm::CallGraph&)’ [-Woverloaded-virtual] ; - [2020-09-28T08:12:29.296Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:212:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:29.296Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:427:27: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:29.296Z] /build/workspace/root-pullrequests-build/root,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-699854008:1190,redund,redundant,1190,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-699854008,1,['redund'],['redundant']
Safety,"ole).; ### Errors:; - [2022-08-05T23:31:08.230Z] FAILED: tree/dataframe/test/CMakeFiles/dataframe_vary.dir/dataframe_vary.cxx.o ; - [2022-08-05T23:31:09.233Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:507:29: error: constexpr variable 'colidx' must be initialized by a constant expression ; - [2022-08-05T23:31:09.233Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:509:21: error: static_assert expression is not an integral constant expression ; - [2022-08-05T23:31:09.233Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:512:37: error: no matching function for call to 'GetNthElement' ; - [2022-08-05T23:31:09.233Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/RVariedAction.hxx:119:75: error: cannot pass object of non-trivial type 'ROOT::VecOps::RVec&lt;int&gt;' through variadic method; call will abort at runtime [-Wnon-pod-varargs] ; - [2022-08-05T23:31:09.494Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:529:7: error: static_assert failed due to requirement 'sizeof(TH1D) &lt; 0' ""When filling an object with RDataFrame (e.g. via a Fill action) the number or types of the columns passed did not match the signature of the object's `Fill` method."" ; - [2022-08-05T23:31:09.494Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:507:29: error: constexpr variable 'colidx' must be initialized by a constant expression ; - [2022-08-05T23:31:09.495Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:509:21: error: static_assert expression is not an integral constant expression ; - [2022-08-05T23:31:09.495Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/tree/dataframe/i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11127#issuecomment-1207087616:1261,abort,abort,1261,https://root.cern,https://github.com/root-project/root/pull/11127#issuecomment-1207087616,1,['abort'],['abort']
Safety,"on `lxplus8`:; ```; [bellenot@lxplus803 ~/temp]$ git clone https://github.com/root-project/root.git; Cloning into 'root'...; remote: Enumerating objects: 886380, done.; remote: Counting objects: 100% (40490/40490), done.; remote: Compressing objects: 100% (3412/3412), done.; remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890; Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done.; Resolving deltas: 100% (645163/645163), done.; Updating files: 100% (22793/22793), done.; [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo; [bellenot@lxplus803 ~/temp]$ cd root-build.foo; [bellenot@lxplus803 root-build.foo]$ cmake ../root; -- The C compiler identification is GNU 8.5.0; -- The CXX compiler identification is GNU 8.5.0; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /usr/bin/cc - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/c++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Git: /usr/bin/git (found version ""2.39.3""); -- Building ROOT version 6.31.01; -- Checking internet connectivity; -- Checking internet connectivity - found; -- Looking for Python; -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed; -- Found GCC. Major version 8, minor version 5; -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard.; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed; -- Looking for pthread_create in pthreads; -- Looking for pthread_create in pthreads - not found; -- Looking for pthread_create in pthr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14159#issuecomment-1838972446:890,Detect,Detecting,890,https://root.cern,https://github.com/root-project/root/issues/14159#issuecomment-1838972446,8,['Detect'],['Detecting']
Safety,on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/97055/console).; ### Errors:; - [2020-09-27T10:51:21.589Z] input_line_1:1:2: fatal error: module file '/build/workspace/root-pullrequests-build/build/tree/tree/test/libc.pcm' not found: module file not found ; - [2020-09-27T10:51:21.589Z] &lt;&lt;&lt; cling interactive line includer &gt;&gt;&gt;: fatal error: module file '/build/workspace/root-pullrequests-build/build/tree/tree/test/libc.pcm' not found: module file not found . ### Warnings:; - [2020-09-27T10:46:13.218Z] /build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Utils/PlatformPosix.cpp:73:44: warning: type qualifiers ignored on cast result type [-Wignored-qualifiers] ; - [2020-09-27T10:46:16.716Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:212:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:46:16.716Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:427:27: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:46:16.716Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:450:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:49:19.928Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Pass.h:105:16: warning: ‘virtual bool llvm::Pass::doInitialization(llvm::Module&)’ was hidden [-Woverloaded-virtual] ; - [2020-09-27T10:49:19.928Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Transforms/IPO/Inliner.h:39:8: warning: by ‘virtual bool llvm::LegacyInlinerBase::doInitialization(llvm::CallGraph&)’ [-Woverloaded-virtual] ; - [2020-09-27T10:49:35.454Z] /build/workspace/root-pullrequests-build/root,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-699619048:1016,redund,redundant,1016,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-699619048,1,['redund'],['redundant']
Safety,"on* toAction(StackingActionHandle f) { return f.action; }; static Geant4Action* toAction(GeneratorActionHandle f) { return f.action; }; static Geant4Action* toAction(GeneratorActionSequenceHandle f) { return f.action; }; static Geant4Action* toAction(RunActionSequenceHandle f) { return f.action; }; static Geant4Action* toAction(EventActionSequenceHandle f) { return f.action; }; static Geant4Action* toAction(TrackingActionSequenceHandle f) { return f.action; }; static Geant4Action* toAction(SteppingActionSequenceHandle f) { return f.action; }; static Geant4Action* toAction(StackingActionSequenceHandle f) { return f.action; }; static Geant4Action* toAction(PhysicsListActionSequenceHandle f) { return f.action; }; static Geant4Action* toAction(SensDetActionSequenceHandle f) { return f.action; }; static Geant4Action* toAction(UserInitializationHandle f) { return f.action; }; static Geant4Action* toAction(UserInitializationSequenceHandle f){ return f.action; }; static Geant4Action* toAction(DetectorConstructionHandle f) { return f.action; }; static Geant4Action* toAction(DetectorConstructionSequenceHandle f){ return f.action; }; static PropertyResult getProperty(Geant4Action* action, const std::string& name) {; if ( action->hasProperty(name) ) {; return PropertyResult(action->property(name).str(),1);; }; return PropertyResult("""",0);; }; static int setProperty(Geant4Action* action, const std::string& name, const std::string& value) {; if ( action->hasProperty(name) ) {; action->property(name).str(value);; return 1;; }; return 0;; }; static PropertyResult getPropertyKernel(Geant4Kernel* kernel, const std::string& name) {; if ( kernel->hasProperty(name) ) {; return PropertyResult(kernel->property(name).str(),1);; }; return PropertyResult("""",0);; }; static int setPropertyKernel(Geant4Kernel* kernel, const std::string& name, const std::string& value) {; if ( kernel->hasProperty(name) ) {; kernel->property(name).str(value);; return 1;; }; return 0;; }; };. /// Container definit",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15221#issuecomment-2053701039:10940,Detect,DetectorConstructionHandle,10940,https://root.cern,https://github.com/root-project/root/issues/15221#issuecomment-2053701039,3,['Detect'],['DetectorConstructionHandle']
Safety,"on.tcl; Parse Config file:/home/dvalapar/work/root/newpassmanager/DartConfiguration.tcl; Test project /home/dvalapar/work/root/newpassmanager; Constructing a list of tests; Ignore test: test-stressproof; Ignore test: roottest-cling-parsing-semicolon; Done constructing a list of tests; Updating test list for fixtures; Added 0 tests to meet fixture requirements; Checking test dependency graph...; Checking test dependency graph end; test 338; Start 338: test-stressinterpreter. 338: Test command: /usr/bin/cmake ""-DCMD=/home/dvalapar/work/root/newpassmanager/test/stressInterpreter"" ""-DPRE=/usr/bin/cmake^-E^copy^/home/dvalapar/work/root/test/stressInterpreter.cxx^/home/dvalapar/work/root/newpassmanager/test/stressInterpreter.cxx"" ""-DSYS=/home/dvalapar/work/root/newpassmanager"" ""-P"" ""/home/dvalapar/work/root/newpassmanager/RootTestDriver.cmake""; 338: Environment variables: ; 338: ROOT_HIST=0; 338: Test timeout computed to be: 1500; 338: ****************************************************************************; 338: * Starting stress INTERPRETER *; 338: ****************************************************************************; 338: FuncCall ................................................................ OK; 338: STLDict ................................................................. OK; 338: Reflection .............................................................. OK; 338: NestedStatements ........................................................ OK; 338: ****************************************************************************; 338: stressInterpreter: Real Time = 0.58 seconds Cpu Time = 0.58 seconds; 338: ****************************************************************************; 338: * ROOTMARKS =16551.7 * Root6.31/01 20231010/0; 338: ****************************************************************************; 338: (bool) false; 1/1 Test #338: test-stressinterpreter ........... Passed 1.51 sec. The following tests passed:; test-stressinterpreter. 100% tests p",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14267#issuecomment-1915174574:3891,timeout,timeout,3891,https://root.cern,https://github.com/root-project/root/pull/14267#issuecomment-1915174574,1,['timeout'],['timeout']
Safety,"ool shared); { return cr<SteppingActionHandle,Setup::StepAction>(kernel,name_type,shared); }; static StackingActionHandle createStackingAction(KernelHandle& kernel, const std::string& name_type, bool shared); { return cr<StackingActionHandle,Setup::StackAction>(kernel,name_type,shared); }; ; static GeneratorActionHandle createGeneratorAction(KernelHandle& kernel, const std::string& name_type, bool shared); { return cr<GeneratorActionHandle,Setup::GenAction>(kernel,name_type,shared); }; ; static DetectorConstructionHandle createDetectorConstruction(KernelHandle& kernel, const std::string& name_type); { return cr<DetectorConstructionHandle,Setup::DetectorConstruction>(kernel,name_type,false); }; ; static UserInitializationHandle createUserInitialization(KernelHandle& kernel, const std::string& name_type); {	return UserInitializationHandle(Setup::Initialization(*kernel.get(),name_type,false).get());}; ; static SensitiveHandle createSensitive(KernelHandle& kernel, const std::string& name_type, const std::string& detector, bool shared); {	return SensitiveHandle(Setup::Sensitive(*kernel.get(),name_type,detector,shared).get()); }; ; static SensDetActionSequenceHandle createSensDetSequence(KernelHandle& kernel, const std::string& name_type); {	return cr<SensDetActionSequenceHandle,Setup::SensitiveSeq>(kernel,name_type,false); }; ; static Geant4Action* toAction(Geant4Filter* f) { return f; }; static Geant4Action* toAction(Geant4Action* f) { return f; }; static Geant4Action* toAction(Geant4PhaseAction* f) { return f; }; static Geant4Action* toAction(Geant4Sensitive* f) { return f; }; static Geant4Action* toAction(Geant4PhysicsList* f) { return f; }; static Geant4Action* toAction(Geant4RunAction* f) { return f; }; static Geant4Action* toAction(Geant4EventAction* f) { return f; }; static Geant4Action* toAction(Geant4TrackingAction* f) { return f; }; static Geant4Action* toAction(Geant4SteppingAction* f) { return f; }; static Geant4Action* toAction(Geant4StackingAction* f) { ret",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15221#issuecomment-2053701039:7285,detect,detector,7285,https://root.cern,https://github.com/root-project/root/issues/15221#issuecomment-2053701039,2,['detect'],['detector']
Safety,"ool shared); { return cr<SteppingActionHandle,Setup::StepAction>(kernel,name_type,shared); }; static StackingActionHandle createStackingAction(KernelHandle& kernel, const std::string& name_type, bool shared); { return cr<StackingActionHandle,Setup::StackAction>(kernel,name_type,shared); }; ; static GeneratorActionHandle createGeneratorAction(KernelHandle& kernel, const std::string& name_type, bool shared); { return cr<GeneratorActionHandle,Setup::GenAction>(kernel,name_type,shared); }; ; static DetectorConstructionHandle createDetectorConstruction(KernelHandle& kernel, const std::string& name_type); { return cr<DetectorConstructionHandle,Setup::DetectorConstruction>(kernel,name_type,false); }; ; static UserInitializationHandle createUserInitialization(KernelHandle& kernel, const std::string& name_type); {	return UserInitializationHandle(Setup::Initialization(*kernel.get(),name_type,false).get());}; ; static SensitiveHandle createSensitive(KernelHandle& kernel, const std::string& name_type, const std::string& detector, bool shared); {	return SensitiveHandle(Setup::Sensitive(*kernel.get(),name_type,detector,shared).get()); }; ; static SensDetActionSequenceHandle createSensDetSequence(KernelHandle& kernel, const std::string& name_type); {	return cr<SensDetActionSequenceHandle,Setup::SensitiveSeq>(kernel,name_type,false); }; ; static Geant4Action* toAction(Geant4Filter* f) { return f; }; static Geant4Action* toAction(Geant4Action* f) { return f; }; static Geant4Action* toAction(Geant4PhaseAction* f) { return f; }; static Geant4Action* toAction(Geant4Sensitive* f) { return f; }; static Geant4Action* toAction(Geant4PhysicsList* f) { return f; }; static Geant4Action* toAction(Geant4RunAction* f) … { return f.action; }; static Geant4Action* toAction(PhaseActionHandle f) { return f.action; }; static Geant4Action* toAction(SensitiveHandle f) { return f.action; }; static Geant4Action* toAction(PhysicsListHandle f) { return f.action; }; static Geant4Action* toAction(RunActionHa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15221#issuecomment-2053701039:26090,detect,detector,26090,https://root.cern,https://github.com/root-project/root/issues/15221#issuecomment-2053701039,1,['detect'],['detector']
Safety,oot-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/97047/console).; ### Errors:; - [2020-09-27T10:38:37.433Z] input_line_1:1:2: fatal error: module file '/build/workspace/root-pullrequests-build/build/tree/tree/test/libc.pcm' not found: module file not found ; - [2020-09-27T10:38:37.433Z] &lt;&lt;&lt; cling interactive line includer &gt;&gt;&gt;: fatal error: module file '/build/workspace/root-pullrequests-build/build/tree/tree/test/libc.pcm' not found: module file not found . ### Warnings:; - [2020-09-27T10:35:17.800Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:212:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:35:18.058Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:427:27: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:35:18.058Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:450:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:35:22.960Z] /build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Utils/PlatformPosix.cpp:73:44: warning: type qualifiers ignored on cast result type [-Wignored-qualifiers] ; - [2020-09-27T10:36:57.561Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Pass.h:105:16: warning: ‘virtual bool llvm::Pass::doInitialization(llvm::Module&)’ was hidden [-Woverloaded-virtual] ; - [2020-09-27T10:36:57.562Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Transforms/IPO/Inliner.h:39:8: warning: by ‘virtual bool llvm::LegacyInlinerBase::doInitialization(llvm::CallGraph&)’ [-Woverloaded-virtual] ; - [2020-09-27T10:36:57.827Z] /build/workspace/root-pullrequests-build/root/int,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-699617774:1020,redund,redundant,1020,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-699617774,1,['redund'],['redundant']
Safety,"oot-project/root/pull/9539; Only the first four commits that are not about code modernization; - [x] https://github.com/root-project/root/pull/11969; - [x] https://github.com/root-project/root/pull/11962; - [x] https://github.com/root-project/root/pull/11970; - [x] https://github.com/root-project/root/pull/11966; - [x] https://github.com/root-project/root/pull/11984; - [x] https://github.com/root-project/root/pull/11986; - [x] https://github.com/root-project/root/pull/11841; - [x] https://github.com/root-project/root/pull/11985; - [x] https://github.com/root-project/root/pull/11988; - [x] https://github.com/root-project/root/pull/11995; - [x] https://github.com/root-project/root/pull/11999; - [x] https://github.com/root-project/root/pull/12000; - [x] https://github.com/root-project/root/pull/12010; - [x] https://github.com/root-project/root/pull/12011; - [x] https://github.com/root-project/root/pull/12017; - [x] https://github.com/root-project/root/pull/12022; All commits except for the last one for `RooAbsArg`, which might be a bit too unsafe...; - [x] https://github.com/root-project/root/pull/12024; - [x] https://github.com/root-project/root/pull/12029; - [x] https://github.com/root-project/root/pull/12030; - [x] https://github.com/root-project/root/pull/12033; - [x] https://github.com/root-project/root/pull/12039; - [x] https://github.com/root-project/root/pull/12046; - [x] https://github.com/root-project/root/pull/12051; - [x] https://github.com/root-project/root/pull/12048; - [x] https://github.com/root-project/root/pull/12061; - [x] https://github.com/root-project/root/pull/12071; Only the first commit that is not a fixup to a recent typo is `master`; - [x] https://github.com/root-project/root/pull/12089; - [x] https://github.com/root-project/root/pull/12079; - [x] https://github.com/root-project/root/pull/12040; - [x] https://github.com/root-project/root/pull/12064; - [x] https://github.com/root-project/root/pull/12114; - [x] https://github.com/root-project/ro",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11856:2640,unsafe,unsafe,2640,https://root.cern,https://github.com/root-project/root/issues/11856,1,['unsafe'],['unsafe']
Safety,"oot/issues/8523), a next step is to translate also the [RooStats tutorials](https://root.cern/doc/master/group__tutorial__roostats.html) to pyROOT. The RooStats tutorials can be found in the [tutorials/roostats](https://github.com/root-project/root/tree/master/tutorials/roostats) directory. Right now, none of the tutorials are translated to Python yet. For a start, one could start with the translation of the very popular [StandardHypoTestInvDemo](https://root.cern.ch/doc/master/StandardHypoTestInvDemo_8C.html) tutorial, which explains the widely used AsymptoticCalculator and HypoTestInverter classes. Any new Python tutorials should be formatted with [black](https://github.com/psf/black):; ```; black --line-length=120 <tutorial file>.py; ```. *Please note:* if you want to work on this issue, please don't open a PR with all tutorials translated at once! This makes the review process unsustainable. For example, if you submit one translation at a time, you will get feedback that will help you improving your next translation, so the same comments don't have to be made redundantly. This saves time for both the contributor and reviewer :slightly_smiling_face: . Here is the list of all the RooStats tutorials and whether they have already been translated:. - [x] FourBinInstructional.C; - [x] HybridInstructional.C; - [x] HybridStandardForm.C; - [x] IntervalExamples.C; - [ ] ModelInspector.C; - [x] MultivariateGaussianTest.C; - [ ] OneSidedFrequentistUpperLimitWithBands.C; - [x] rs101_limitexample.C; - [ ] rs102_hypotestwithshapes.C; - [x] rs301_splot.C; - [ ] rs302_JeffreysPriorDemo.C; - [x] rs401c_FeldmanCousins.C; - [ ] rs401d_FeldmanCousins.C; - [x] rs601_HLFactoryexample.C; - [ ] rs602_HLFactoryCombinationexample.C; - [ ] rs603_HLFactoryElaborateExample.C; - [x] rs701_BayesianCalculator.C; - [x] rs_bernsteinCorrection.C; - [ ] rs_numberCountingCombination.C; - [x] rs_numbercountingutils.C; - [ ] StandardBayesianMCMCDemo.C; - [ ] StandardBayesianNumericalDemo.C; - [ ] Stan",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8758:1190,redund,redundantly,1190,https://root.cern,https://github.com/root-project/root/issues/8758,1,['redund'],['redundantly']
Safety,oot/roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodGradientWrapper.h:38:46: error: ‘WrapperCalculationCleanFlags’ was not declared in this scope ; - [2023-01-06T12:13:57.553Z] /data/sftnight/workspace/root-pullrequests-build/root/roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodGradientWrapper.h:38:74: error: template argument 1 is invalid ; - [2023-01-06T12:13:57.553Z] /data/sftnight/workspace/root-pullrequests-build/root/roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodGradientWrapper.h:44:11: error: ‘LikelihoodGradientMode’ has not been declared . And 2038 more. ### Warnings:; - [2023-01-06T12:13:58.100Z] /data/sftnight/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx:3:32: warning: declaration of ‘G__RooFitCoreInit290’ shadows a global declaration [-Wshadow] ; - [2023-01-06T12:13:58.935Z] /data/sftnight/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx:19968:46: warning: possible problem detected in invocation of delete operator: [-Wdelete-incomplete] ; - [2023-01-06T12:13:58.935Z] /data/sftnight/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx:19968:15: warning: invalid use of incomplete type ‘class RooMinimizer’ ; - [2023-01-06T12:13:58.935Z] /data/sftnight/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx:19971:49: warning: possible problem detected in invocation of delete [] operator: [-Wdelete-incomplete] ; - [2023-01-06T12:13:58.935Z] /data/sftnight/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx:19971:18: warning: invalid use of incomplete type ‘class RooMinimizer’ ; - [2023-01-06T12:13:58.936Z] /data/sftnight/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx:20260:47: warning: possible problem detected in invocation of delete operator: [-Wdelete-incomplete] ; - [2023-01-06T12:13:58.936Z] /data/sftnight/workspace/root-pullrequests-build/build/roofit/roofitcore/G__RooFitCore.cxx:202,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11981#issuecomment-1373555060:2947,detect,detected,2947,https://root.cern,https://github.com/root-project/root/pull/11981#issuecomment-1373555060,1,['detect'],['detected']
Safety,"or validity of the existing `FileEntry` was removed:. ```; - if (UFE.isValid() &&; - llvm::sys::toTimeT(Status.getLastModificationTime()) == UFE.ModTime) {; + if (llvm::sys::toTimeT(Status.getLastModificationTime()) == UFE->ModTime) {; ```. In praticed this resulted in the usage of the zero-initialized `FileEntry` for files with mtime equal zero. The check for the mod time is a ROOT specific patch introduced by commit 8d492b6b9ca359294d018995d097736f762866c8 we the commit log:. Make sure the inode did not get updated since we read it. During the upgrade to LLVM svn revision 214630, the code was sub-optimally merged with the new related code:. ```; + if (UFE.isValid()) { // Already have an entry with this inode, return it.; +; + // FIXME: this hack ensures that if we look up a file by a virtual path in; + // the VFS that the getDir() will have the virtual path, even if we found; + // the file by a 'real' path first. This is required in order to find a; + // module's structure when its headers/module map are mapped in the VFS.; + // We should remove this as soon as we can properly support a file having; + // multiple names.; + if (DirInfo != UFE.Dir && Data.IsVFSMapped); + UFE.Dir = DirInfo;; + }; if (UFE.isValid() && Data.ModTime == UFE.ModTime) {; - // Already have an entry with this inode, return it.; - // If the stat process opened the file, close it to avoid a FD leak.; - if (F); - delete F;; -; return &UFE;; }; ```. where the new code (top part) should also have not been executed unless the UFE was actually returned. This also made meger the LLVM code more challenged were one the change was:; ```; - if (UFE.isValid()) { // Already have an entry with this inode, return it.; + if (ReusingEntry) { // Already have an entry with this inode, return it. ```; this lead to the inadvertent removal of `UFE.isValid() conditional` in the patched part (and the forgetting of adding `ReusingEntry conditional`). This patch remerge the two section under the a single if statement.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14373:1438,avoid,avoid,1438,https://root.cern,https://github.com/root-project/root/pull/14373,1,['avoid'],['avoid']
Safety,"or_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDescriptors_t &, TMVA::DNN::TCudnn<AFloat>::RNNWorkspace_t &) [with AFloat=Double_t]"" at line 44 of /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu. /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn/RecurrentPropagation.cu(571): error: identifier ""cudnnRNNBackwardWeights"" is undefined; status = cudnnRNNBackwardWeights(cudnnHandle, rnnDesc, seqLength, desc.xDesc.data(), x.GetDataPointer(),; ^; detected during instantiation of ""void TMVA::DNN::TCudnn<AFloat>::RNNBackward(const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDescriptors_t &, TMVA::DNN::TCudnn<AFloat>::RNNWorkspace_t &) [with AFloat=Double_t]"" at line 44 of /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu. 8 errors detected in the compilation of ""/build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu"".; ```. The missing functions were [deprecated in cuDNN 8.0](https://docs.nvidia.com/deeplearning/cudnn/archives/cudnn-897/api/index.html#cudnnRNNForwardTraining) and [removed in cuDNN 9.0](https://docs.nvidia.com/deeplearning/cudnn/latest/api/overview.html#id1). ### Reproducer. Build from source with cuDNN 9.0 or newer. ### ROOT version. 6.30.06. ### Installation method. build from source. ### Operating system. Arch Linux. ### Additional context. _N",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15413:6656,detect,detected,6656,https://root.cern,https://github.com/root-project/root/issues/15413,1,['detect'],['detected']
Safety,ored-qualifiers] ; - [2020-09-27T10:46:16.716Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:212:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:46:16.716Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:427:27: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:46:16.716Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:450:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:49:19.928Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Pass.h:105:16: warning: ‘virtual bool llvm::Pass::doInitialization(llvm::Module&)’ was hidden [-Woverloaded-virtual] ; - [2020-09-27T10:49:19.928Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Transforms/IPO/Inliner.h:39:8: warning: by ‘virtual bool llvm::LegacyInlinerBase::doInitialization(llvm::CallGraph&)’ [-Woverloaded-virtual] ; - [2020-09-27T10:49:35.454Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:212:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:49:35.454Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:427:27: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:49:35.454Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:450:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:49:47.052Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:431:25: warning: redundant move in return statement [-Wredundant-move] . And 259 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-699619048:2126,redund,redundant,2126,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-699619048,4,['redund'],['redundant']
Safety,ored-qualifiers] ; - [2020-09-28T08:12:21.117Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:212:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:21.117Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:427:27: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:21.117Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:450:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:28.744Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Pass.h:105:16: warning: ‘virtual bool llvm::Pass::doInitialization(llvm::Module&)’ was hidden [-Woverloaded-virtual] ; - [2020-09-28T08:12:28.744Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Transforms/IPO/Inliner.h:39:8: warning: by ‘virtual bool llvm::LegacyInlinerBase::doInitialization(llvm::CallGraph&)’ [-Woverloaded-virtual] ; - [2020-09-28T08:12:29.296Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:212:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:29.296Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:427:27: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:29.296Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:450:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:29.822Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:431:25: warning: redundant move in return statement [-Wredundant-move] . And 258 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-699854008:1880,redund,redundant,1880,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-699854008,4,['redund'],['redundant']
Safety,"otd/5.5.0/lib/libXrdUtils.dylib;/Users/marcomeyer/Software/xrootd/5.5.0/lib/libXrdCl.dylib; -- Checking for module 'davix>=0.6.4'; -- Found davix, version 0.8.4; -- Cannot select cudnn without selecting cuda or tmva-gpu. Option is ignored; -- Looking for BLAS for optional parts of TMVA; -- Building LLVM in 'Release' mode.; -- Could NOT find Z3: Found unsuitable version ""0.0.0"", but required is at least ""4.7.1"" (found Z3_LIBRARIES-NOTFOUND); -- Found libtool - /Library/Developer/CommandLineTools/usr/bin/libtool; -- Native target ARM is not selected; lli will not JIT code; -- Threads disabled.; -- Doxygen disabled.; -- Go bindings disabled.; -- Found ld64 - /Library/Developer/CommandLineTools/usr/bin/ld; -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH) ; -- OCaml bindings disabled.; -- LLVM host triple: arm-apple-darwin23.2.0; -- LLVM default target triple: arm-apple-darwin23.2.0; -- Building with -fPIC; -- Constructing LLVMBuild project information; -- Linker detection: unknown; -- Targeting AArch64; -- Targeting NVPTX; -- Clang version: 9.0.1; -- Cling version (from VERSION file): ROOT_1.0~dev; CMake Warning at interpreter/cling/lib/Interpreter/CMakeLists.txt:278 (MESSAGE):; Cannot determine location of C++ headers for runtime. -- Cling will look for C++ headers in '' at runtime.; -- And then fallback to: 'clang'; -- Performing Test found_stdstringview; -- Performing Test found_stdstringview - Success; -- Performing Test found_stod_stringview; -- Performing Test found_stod_stringview - Failed; -- Performing Test found_stdapply; -- Performing Test found_stdapply - Success; -- Performing Test found_stdinvoke; -- Performing Test found_stdinvoke - Success; -- Performing Test found_stdindexsequence; -- Performing Test found_stdindexsequence - Success; -- ROOT Configuration . System Darwin-23.2.0; Processor 10 core Apple M1 Max (arm64); Build type Release; Install path /Users/marcomeyer/Software/root/20240113; Compiler AppleClang 15.0.0.1500010",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14337:3239,detect,detection,3239,https://root.cern,https://github.com/root-project/root/issues/14337,1,['detect'],['detection']
Safety,"other compression algorithms already do this,. Indeed. The diffs was made less obvious because:; ZLIB decompression is already doing the right thing.; ZLIB and LZMA use a struct to pass the configuration rather than function argument so the code pattern is slight different.; ; > it seems that all existing code paths in TKey.cxx, TBufferXML.cxx, TMessage.cxx, and TBasket.cxx allocate a buffer that is slightly larger, so it's probably not an as critical problem . Right, the allocations is done:; ```; Int_t buflen = TMath::Max(512,fKeylen + fObjlen + 9*nbuffers + 28); //add 28 bytes in case object is placed in a deleted gap; ```; and used via; ```; char *bufcur = &fBuffer[fKeylen];; ```; so the only extra is `9*nbuffers + 28` which reduces the risk of writing the end since the size is larger than `fObjlen + kHeaderSize` but that leaves 2 additional question:; * why are those added?; * why doesn't RNTuple need it?. 01bb6965557fcc63d5d2e535b89f57e025922731 hints that the compression engine were seen as writing past the end ... it is plausible since the prior delta was ``9*nbuffers + 8` with `nbuffers==0` is common case. (in hindsight, this commit was not investigated long enough and needed a test). The `9*nbuffers` is meant to be for the keys and is now inaccurate (most algorithms have a 9 bytes header but for lz4 we have seemingly 73. This part is missing from the `RNTuple` usage. The consequences is that on data set that is not compressible `TTree` might use a bit more space (header + barely compressed size) vs `RNTuple` (uncompressed size which might be less than header + barely compressed size). This of course assume that the compression algorithm strictly respect the limit given (it would be a serious security risk if not). The `8` is commented as ""8 bytes in case object is placed in a deleted gap"" (the 20 was seemingly added to work-around the bug fixed here) ~and is not clear to me (the 'delete gap' is most likely talking about a space 'freed' inside a ROOT file.~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14523#issuecomment-1932803605:1803,risk,risk,1803,https://root.cern,https://github.com/root-project/root/pull/14523#issuecomment-1932803605,1,['risk'],['risk']
Safety,otherwise there is a risk of overcommiting the machine with too many workers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3661:21,risk,risk,21,https://root.cern,https://github.com/root-project/root/pull/3661,1,['risk'],['risk']
Safety,ottest.root.meta/MakeProject/roottest_root_meta_MakeProject_stltest/); - [projectroot.test.test_stressmathcore_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76637/testReport/projectroot/test/test_stressmathcore_interpreted/); - [projectroot.runtutorials.tutorial_roostats_TestNonCentral](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76637/testReport/projectroot/runtutorials/tutorial_roostats_TestNonCentral/); - [projectroot.runtutorials.tutorial_roofit_rf511_wsfactory_basic_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76637/testReport/projectroot/runtutorials/tutorial_roofit_rf511_wsfactory_basic_py/); - [projectroot.roottest.python.pickle.roottest_python_pickle_read](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76637/testReport/projectroot.roottest.python/pickle/roottest_python_pickle_read/); - [projectroot.runtutorials.tutorial_roostats_StandardFrequentistDiscovery](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76637/testReport/projectroot/runtutorials/tutorial_roostats_StandardFrequentistDiscovery/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76637/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.recover.roottest_root_io_recover_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76637/testReport/projectroot.roottest.root.io/recover/roottest_root_io_recover_make/); - [projectroot.roottest.root.io.webfile.roottest_root_io_webfile_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76637/testReport/projectroot.roottest.root.io/webfile/roottest_root_io_webfile_make/); - [projectroot.roottest.root.meta.MakeProject.roottest_root_meta_MakeProject_stltest2](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76637/testReport/projectroot.roottest.root.meta/MakeProject/roottest_root_meta_MakeProject_stltest2/). And 17 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4016#issuecomment-579623104:1909,recover,recover,1909,https://root.cern,https://github.com/root-project/root/pull/4016#issuecomment-579623104,2,['recover'],['recover']
Safety,"oupdisk/rucio/user/desilva/a1/a8/myFile.1.root ; >>>>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Csimonliu%40triumf.ca%7Ca59fceaddf634d196e5608d91576f34a%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564422909267345%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=MrLsQ1shn0qv2itSXIVUc3da2Y5VUnltiBnYwHs6YjE%3D&reserved=0> ; >>>>>>> --key ~/.globus/userkey.pem --cert ~/.globus/usercert.pem ; >>>>>>> --capath /etc/grid-security/certificates; >>>>>>>; >>>>>>>; >>>>>>> regards,; >>>>>>> Asoka; >>>>>>>; >>>>>>>> On May 12, 2021, at 10:18 AM, Axel Naumann ; >>>>>>>> ***@***.*** ***@***.***>> wrote:; >>>>>>>>; >>>>>>>>; >>>>>>>> Right - without authentication I cannot see what's happening. ; >>>>>>>> /If/ this is due to a redirect it would be a dupe of #8155 ; >>>>>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8155&data=04%7C01%7Csimonliu%40triumf.ca%7Ca59fceaddf634d196e5608d91576f34a%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564422909277340%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=zggbyYqBAFAg%2FMlgDfFg3zamaawZqBMBbmbK7glOxj4%3D&reserved=0> ; >>>>>>>> - if not then it's different :-) But I don't know how to tell ; >>>>>>>> whether it's a redirect. Do you?; >>>>>>>>; >>>>>>>> If not let's get #8155 ; >>>>>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8155&data=04%7C01%7Csimonliu%40triumf.ca%7Ca59fceaddf634d196e5608d91576f34a%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564422909277340%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=zggbyYqBAFAg%2FMlgDfFg3zamaawZqBMBbmbK7glOxj4%3D&reserved=0> ; >>>>>>>> fixed ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840043080:10386,safe,safelinks,10386,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840043080,1,['safe'],['safelinks']
Safety,"p:173: void cling::Transaction::forceAppend(DelayCallInfo): Assertion `oldDCI != DCI && ""Duplicates?!""' failed.; #0 0x000055e9492a6288 ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x17fb288 ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x17fb34b; #1 0x000055e9492a6288 ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x17f8eac ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x17fabfe; #2 0x000055e9492a6288 ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x18491a8 ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x1848ed8; #3 0x000055e9492a6288 (./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling+0x17fb288); #4 0x000055e9492a634b (./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling+0x17fb34b); #5 0x000055e9492a3eac gsignal (./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling+0x17f8eac); #6 0x000055e9492a5bfe abort (./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling+0x17fabfe); #7 0x000055e9492f41a8 (./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling+0x18491a8); #8 0x000055e9492f3ed8 (./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling+0x1848ed8); #9 0x00007f264623e8e0 ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x16d76bb ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x16d7568; #10 0x00007f264623e8e0 ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x14eef2e ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x39845bf; #11 0x00007f264623e8e0 ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x4cf5f84 ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x4cf690d; #12 0x00007f264623e8e0 ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x4b10de0 ./",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1192175843:1661,abort,abort,1661,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1192175843,1,['abort'],['abort']
Safety,"pand_pseudo_components); interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake:641 (llvm_map_components_to_libnames); interpreter/cling/CMakeLists.txt:426 (llvm_add_library); interpreter/cling/lib/Interpreter/CMakeLists.txt:60 (add_cling_library). -- Configuring incomplete, errors occurred!; ```. Removing the ""host"" string from the list LLVM_TARGETS_TO_BUILD, seems to fix the issue, as running `cmake ../root -DCMAKE_CXX_STANDARD=17 -DCMAKE_BUILD_TYPE=RelWithDebInfo -DLLVM_TARGETS_TO_BUILD=""NVPTX""` results in successful build configuration. Following this, ROOT successfully compiles almost all the way up to 100%:; ```shell; [ 98%] Linking CXX executable ../../bin/hist2workspace; [ 98%] Linking CXX shared library ../../lib/libRooFitHS3.so; [ 98%] Built target hist2workspace; [100%] Built target RooFitHS3; [100%] Linking CXX shared library ../../lib/libRooFitXRooFit.so; [100%] Built target RooFitXRooFit; [100%] Built target onepcm; [100%] Generating lib/modules.idx; Abort trap (core dumped); --- lib/modules.idx ---; *** [lib/modules.idx] Error code 134. make[2]: stopped in /usr/home/erik/devel/resources/root/build; 1 error. make[2]: stopped in /usr/home/erik/devel/resources/root/build; --- CMakeFiles/modules_idx.dir/all ---; *** [CMakeFiles/modules_idx.dir/all] Error code 2. make[1]: stopped in /usr/home/erik/devel/resources/root/build; 1 error. make[1]: stopped in /usr/home/erik/devel/resources/root/build; *** [all] Error code 2. make: stopped in /usr/home/erik/devel/resources/root/build; 1 error. make: stopped in /usr/home/erik/devel/resources/root/build; ```. on my machine via `cmake --build . -- -j8` with the following (default/automatic) configuration:. ```shell; -- ROOT Configuration . System FreeBSD-13.2-RELEASE-p4; Processor 8 core 0 MHz (amd64); Build type RelWithDebInfo; Install path /usr/local; Compiler Clang 14.0.5; Compiler flags:; C -pipe -Wall -W -pthread -O2 -g -DNDEBUG; C++ -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wcond",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13865#issuecomment-1779361849:1960,Abort,Abort,1960,https://root.cern,https://github.com/root-project/root/issues/13865#issuecomment-1779361849,1,['Abort'],['Abort']
Safety,"pcode.ai/app/gh/root-project/root/ae14e906642ef1d61c92057c4b5fa46946c2d2b4/root-project/root/51516ae7e1ec80b8b4056ea39ffc08ce6e571266/pr/_/%2Fjs%2Fscripts%2FJSRoot.core.js/javascript%2Fdc_interfile_project%2FPrototypePollution/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>; </tr>; <tr>; <td width=""77%"">Unsanitized input from the document location flows into eval, where it is executed as JavaScript code. This may result in a Code Injection vulnerability. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/51516ae7e1ec80b8b4056ea39ffc08ce6e571266/js/scripts/JSRoot.core.js#L1313"">JSRoot.core.js:1313</a></li></ul></td>; <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/ae14e906642ef1d61c92057c4b5fa46946c2d2b4/root-project/root/51516ae7e1ec80b8b4056ea39ffc08ce6e571266/pr/_/%2Fjs%2Fscripts%2FJSRoot.core.js/javascript%2Fdc_interfile_project%2FCodeInjection/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>; </tr>; <tr>; <td width=""77%"">Use binary mode in open (current mode is w) to avoid encoding-related issues for written file, on Windows or with Python 3. Occurrences: <ul><li><a href=""https://github.com/root-project/root/blob/51516ae7e1ec80b8b4056ea39ffc08ce6e571266/interpreter/llvm/src/utils/benchmark/mingw.py#L122"">mingw.py:122</a></li></ul></td>; <td width=""23%""><a href=""https://www.deepcode.ai/app/gh/root-project/root/ae14e906642ef1d61c92057c4b5fa46946c2d2b4/root-project/root/51516ae7e1ec80b8b4056ea39ffc08ce6e571266/pr/_/%2Finterpreter%2Fllvm%2Fsrc%2Futils%2Fbenchmark%2Fmingw.py/python%2Fdc_interfile_project%2FBinaryWrite/code/?utm_source=gh_review&"">:wrench: Example fixes</a></td>; </tr>; </tbody>; </table>. #### 👉 View analysis in [**DeepCode’s Dashboard**](https://www.deepcode.ai/app/gh/root-project/root/ae14e906642ef1d61c92057c4b5fa46946c2d2b4/root-project/root/51516ae7e1ec80b8b4056ea39ffc08ce6e571266/pr/_/%2F/code/?utm_source=gh_review&c=5&w=24&i=22&) | [_Configure the bot_](https://www.deepcode.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6254#issuecomment-898501733:2215,avoid,avoid,2215,https://root.cern,https://github.com/root-project/root/pull/6254#issuecomment-898501733,1,['avoid'],['avoid']
Safety,"ping, we need to imperatively test this asap because if the failures persist, we must take immediate action upstream to avoid releasing a broken Clang 18! @ktf can you help with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13808#issuecomment-1880547480:120,avoid,avoid,120,https://root.cern,https://github.com/root-project/root/pull/13808#issuecomment-1880547480,1,['avoid'],['avoid']
Safety,"ping. found time to look at it again.; I'm stuck with two issues:. - making the data store a unique pointer member of the rooabsdata deletes the copy constructor needed for; ```; RooAbsData a = ....; RooAbsData& b = a;; ```; (used in e.g. in `RooStats/NeymanConstruction.h: virtual void SetData(RooAbsData& data){fData = data;}`); i think how to solve this is more a conceptual design decision and not so much just finding something that works. (… and just like introducing a unique pointer broke roostats for me, it might break third party code); - I don't think we converged on what the storage type enum should do. as i see it, there should remain a static one defining what type a newly created rooabsdata should be (can be vector or tree) and one per-instance to avoid dynamic casts which stores what the instance is (there can be data sets of all kinds simultaneously at run time) which can have a third value (vector, tree, composite).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/363#issuecomment-302631421:768,avoid,avoid,768,https://root.cern,https://github.com/root-project/root/pull/363#issuecomment-302631421,1,['avoid'],['avoid']
Safety,"pipeline/install/dev3/Grid/srm-ifce/1.13.0-0/x86_64-centos7-gcc9-dbg;-Doracle=ON;-DORACLE_HOME=/build/jenkins/workspace/lc; g_nightly_pipeline/install/dev3/oracle/19.11.0.0.0/x86_64-centos7-gcc9-dbg;-Dbuiltin_nlohmannjson=OFF;-Droofit_multiprocess=OFF;-GUnix Makefiles;/build/jenkins/workspace/lcg_nightly_pipe; line/build/projects/ROOT-HEAD/src/ROOT/HEAD""); ```; And this is the corresponding log:; ```; -- The C compiler identification is GNU 9.2.0; -- The CXX compiler identification is GNU 9.2.0; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/gcc - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Git: /usr/bin/git (found version ""1.8.3.1""); -- Detected ROOT_VERSION 6.27.01; -- Checking internet connectivity...; -- Yes; -- Looking for Python; -- Found Python3: /build/jenkins/workspace/lcg_nightly_pipeline/install/dev3/Python/3.9.6/x86_64-centos7-gcc9-dbg/bin/python (found version ""3.9.6"") found components: Interpreter Develop; ment NumPy Development.Module Development.Embed; -- Looking for a Fortran compiler; -- Looking for a Fortran compiler - /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/gfortran; -- The Fortran compiler identification is GNU 9.2.0; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Check for working Fortran compiler: /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/gfortran - skipped; -- Checking whether /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/gfortran supports Fortran 90; -- Checking whether /cvmfs/sft.cern.ch",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9594#issuecomment-1015634743:2330,Detect,Detecting,2330,https://root.cern,https://github.com/root-project/root/issues/9594#issuecomment-1015634743,2,['Detect'],['Detecting']
Safety,plex.roottest_root_io_complex_writecomplex](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36627/testReport/projectroot.roottest.root.io/complex/roottest_root_io_complex_writecomplex/); - [projectroot.roottest.root.io.emulated.roottest_root_io_emulated_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36627/testReport/projectroot.roottest.root.io/emulated/roottest_root_io_emulated_make/); - [projectroot.roottest.python.cling.roottest_python_cling_class](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36627/testReport/projectroot.roottest.python/cling/roottest_python_cling_class/); - [projectroot.roottest.root.io.stdarray.roottest_root_io_stdarray_checkRealData](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36627/testReport/projectroot.roottest.root.io/stdarray/roottest_root_io_stdarray_checkRealData/); - [projectroot.roottest.root.html.roottest_root_html_runClassInModule_WILL_FAIL](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36627/testReport/projectroot.roottest.root/html/roottest_root_html_runClassInModule_WILL_FAIL/); - [projectroot.roottest.root.io.ignoretobject.roottest_root_io_ignoretobject_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36627/testReport/projectroot.roottest.root.io/ignoretobject/roottest_root_io_ignoretobject_make/); - [projectroot.roottest.root.io.recover.roottest_root_io_recover_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36627/testReport/projectroot.roottest.root.io/recover/roottest_root_io_recover_make/); - [projectroot.roottest.root.io.tree.roottest_root_io_tree_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36627/testReport/projectroot.roottest.root.io/tree/roottest_root_io_tree_make/); - [projectroot.roottest.root.io.treeproblem.roottest_root_io_treeproblem_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36627/testReport/projectroot.roottest.root.io/treeproblem/roottest_root_io_treeproblem_make/). And 22 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2464#issuecomment-411733284:1755,recover,recover,1755,https://root.cern,https://github.com/root-project/root/pull/2464#issuecomment-411733284,2,['recover'],['recover']
Safety,"preter/cling/lib/Utils/PlatformPosix.cpp:73:44: warning: type qualifiers ignored on cast result type [-Wignored-qualifiers] ; - [2020-09-27T10:35:57.183Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Pass.h:105:16: warning: ‘virtual bool llvm::Pass::doInitialization(llvm::Module&)’ was hidden [-Woverloaded-virtual] ; - [2020-09-27T10:35:57.183Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Transforms/IPO/Inliner.h:39:8: warning: by ‘virtual bool llvm::LegacyInlinerBase::doInitialization(llvm::CallGraph&)’ [-Woverloaded-virtual] ; - [2020-09-27T10:35:57.629Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:212:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:35:57.629Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:427:27: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:35:57.629Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:450:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:36:09.553Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:431:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:36:09.553Z] /build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/IncrementalJIT.h:108:74: warning: ‘llvm::orc::LegacyRTDyldObjectLinkingLayer::LegacyRTDyldObjectLinkingLayer(llvm::orc::ExecutionSession&, llvm::orc::LegacyRTDyldObjectLinkingLayer::ResourcesGetter, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyLoadedFtor, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyFinalizedFtor, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyFreedFtor)’ is deprecated [-Wdeprecated-declarations]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-699617654:2336,redund,redundant,2336,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-699617654,1,['redund'],['redundant']
Safety,"preter/cling/lib/Utils/PlatformPosix.cpp:73:44: warning: type qualifiers ignored on cast result type [-Wignored-qualifiers] ; - [2020-09-27T10:48:24.113Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Pass.h:105:16: warning: ‘virtual bool llvm::Pass::doInitialization(llvm::Module&)’ was hidden [-Woverloaded-virtual] ; - [2020-09-27T10:48:24.113Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Transforms/IPO/Inliner.h:39:8: warning: by ‘virtual bool llvm::LegacyInlinerBase::doInitialization(llvm::CallGraph&)’ [-Woverloaded-virtual] ; - [2020-09-27T10:48:41.699Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:212:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:48:41.699Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:427:27: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:48:41.699Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:450:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:48:54.024Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:431:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:48:54.024Z] /build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/IncrementalJIT.h:108:74: warning: ‘llvm::orc::LegacyRTDyldObjectLinkingLayer::LegacyRTDyldObjectLinkingLayer(llvm::orc::ExecutionSession&, llvm::orc::LegacyRTDyldObjectLinkingLayer::ResourcesGetter, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyLoadedFtor, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyFinalizedFtor, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyFreedFtor)’ is deprecated [-Wdeprecated-declarations]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-699618970:2336,redund,redundant,2336,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-699618970,1,['redund'],['redundant']
Safety,"preter/cling/lib/Utils/PlatformPosix.cpp:73:44: warning: type qualifiers ignored on cast result type [-Wignored-qualifiers] ; - [2020-09-28T08:12:00.548Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Pass.h:105:16: warning: ‘virtual bool llvm::Pass::doInitialization(llvm::Module&)’ was hidden [-Woverloaded-virtual] ; - [2020-09-28T08:12:00.548Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Transforms/IPO/Inliner.h:39:8: warning: by ‘virtual bool llvm::LegacyInlinerBase::doInitialization(llvm::CallGraph&)’ [-Woverloaded-virtual] ; - [2020-09-28T08:12:01.066Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:212:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:01.066Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:427:27: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:01.066Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:450:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:01.066Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:431:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:01.066Z] /build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/IncrementalJIT.h:108:74: warning: ‘llvm::orc::LegacyRTDyldObjectLinkingLayer::LegacyRTDyldObjectLinkingLayer(llvm::orc::ExecutionSession&, llvm::orc::LegacyRTDyldObjectLinkingLayer::ResourcesGetter, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyLoadedFtor, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyFinalizedFtor, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyFreedFtor)’ is deprecated [-Wdeprecated-declarations]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-699853926:1533,redund,redundant,1533,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-699853926,1,['redund'],['redundant']
Safety,"produced with version 5.34/32 of ROOT.; hadd Source file 2: ppfx_me000z-200i_run_526.root; Warning in <TFile::Init>: no StreamerInfo found in ppfx_me000z-200i_run_526.root therefore preventing schema evolution when reading this file. The file was produced with version 5.34/32 of ROOT.; hadd Target path: out.root:/; hadd Target path: out.root:/nom; hadd Target path: out.root:/nom/parent; Error in <TBufferFile::ReadClassBuffer>: Could not find the StreamerInfo for version 7 of the class TH1, object skipped at offset 110; Error in <TBufferFile::CheckByteCount>: object of class TH1 read too few bytes: 2 instead of 2216; Error in <TBufferFile::ReadClassBuffer>: Could not find the StreamerInfo for version 7 of the class TH1, object skipped at offset 107; Error in <TBufferFile::CheckByteCount>: object of class TH1 read too few bytes: 2 instead of 2213; Error in <TBufferFile::ReadClassBuffer>: Could not find the StreamerInfo for version 7 of the class TH1, object skipped at offset 109; Error in <TBufferFile::CheckByteCount>: object of class TH1 read too few bytes: 2 instead of 2215; ```; however hadd proceeds to operate despite of corrupted input. Moreover the exit code is 0, which typically means successful completion of a process.; When merging multiple sets of files it is possible to miss the printed messages. I don't know of any way of automating the process of detecting the issues. ### Describe the solution you'd like; I believe the operation would be much more robust if; 1. hadd produced no output file if any issues with the input files are encountered, except when option `-k` is provided explicitly; 2. hadd generates exit code different from 0 if any issues with input files are encountered. ### Describe alternatives you've considered; Alternative solution is of course avoiding the errors to occur and checking for them separately. ### Additional context; Input ROOT files were produced with ROOT version 5.34.32, but I can use more modern versions of hadd to merge them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8952:2566,detect,detecting,2566,https://root.cern,https://github.com/root-project/root/issues/8952,2,"['avoid', 'detect']","['avoiding', 'detecting']"
Safety,"projectroot.core.thread.test.gtest_core_thread_test_testInterpreterLock: test usually last 4 minutes, sometimes 16 minutes, sometimes a little more leading to the timeout failure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6559#issuecomment-726209980:163,timeout,timeout,163,https://root.cern,https://github.com/root-project/root/pull/6559#issuecomment-726209980,1,['timeout'],['timeout']
Safety,"pullrequests-build\build\interpreter\llvm-project\llvm\tools\clang\lib\Parse\obj.clangParse.vcxproj] ; - [2023-12-16T12:20:06.977Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\llvm\include\llvm/Support/Casting.h(498,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Serialization\ModuleFile.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm-project\llvm\tools\clang\lib\Serialization\obj.clangSerialization.vcxproj] ; - [2023-12-16T12:20:06.977Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\llvm\include\llvm/ADT/DenseMap.h(98,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Serialization\ASTCommon.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm-project\llvm\tools\clang\lib\Serialization\obj.clangSerialization.vcxproj] ; - [2023-12-16T12:20:07.283Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\include\clang/Lex/ModuleMap.h(275,3): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Serialization\GlobalModuleIndex.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm-project\llvm\tools\clang\lib\Serialization\obj.clangSerialization.vcxproj] ; - [2023-12-16T12:20:07.283Z] C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\algorithm(5790,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Analysis\UnsafeBufferUsage.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm-project\llvm\tools\clang\lib\Analysis\obj.clangAnalysis.vcxproj] . And 56 more",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14249#issuecomment-1858805611:4794,Unsafe,UnsafeBufferUsage,4794,https://root.cern,https://github.com/root-project/root/pull/14249#issuecomment-1858805611,1,['Unsafe'],['UnsafeBufferUsage']
Safety,"py `hist1`, `hist2`. ; But instead the full file is copied and `myExclusiveFile.root` contains all histograms. ; ```; selectiveHadd Source file 1: myFileWithHists.root; [TFile::Cp] Total 0.00 MB	|====================| 100.00 % [6.7 MB/s]. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root ; root [0] ; Attaching file myExclusiveFile.root as _file0...; (TFile *) 0x562d3abbe360; root [1] .ls; TFile**		myExclusiveFile.root	; TFile*		myExclusiveFile.root	; KEY: TH1F	hist1;1	hist1; KEY: TH1F	hist2;1	hist2; KEY: TH1F	hist3;1	hist3; KEY: TH1F	hist4;1	hist4; root [2] ; ```. The case `numTest=1` is a way to avoid this bug. ; One can create a dummy empty file and add it as input file of the `TFileMerger` so that there is 2 input files the one of interest + the dummy empty one . ; In that case as requested only `hist1` and `hist2` are found in the `myExclusiveFile.root` file.; ```; selectiveHadd Source file 1: myFileWithHists.root; Creating a dummy empty file to avoid a bug in TFileMerger class: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root; selectiveHadd Source file 2: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root; selectiveHadd Target path: myExclusiveFile.root:/. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root ; root [0] ; Attaching file myExclusiveFile.root as _file0...; (TFile *) 0x55932d5cd940; root [1] .ls; TFile**		myExclusiveFile.root	; TFile*		myExclusiveFile.root	; KEY: TH1F	hist1;1	hist1; KEY: TH1F	hist2;1	hist2; root [2] ; ```. Many thanks in advance for fixing that issue, ; Romain. ### Reproducer. ```C++; #include ""TFileMerger.h""; #include ""TSystem.h""; #include ""TUUID.h""; #include ""TFile.h""; #include ""TH1F.h"". #include <iostream>; #include <string> . // Function defined after the main function ; void createFileWithHists(const std::string &fileName);. int main(){. // Choose the number of the test; // 0 or 1 ; int numTest = 0;. createFileWithHists(""myFileWithHists.root"");. TFileMerger fileMerger(false);; fileMerger.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13359:1667,avoid,avoid,1667,https://root.cern,https://github.com/root-project/root/issues/13359,1,['avoid'],['avoid']
Safety,"pyROOT uses special thread for events processing, where `gSystem->ProcessEvents()` are called.; Both in script and interactive mode. Problem that thread id is not known from beginning and changing once when running python in script mode. Therefore special mode is now implemented, which simply uses `gSystem->ProcessEvents()` calls to allow processing; of web-windows communication. RWebWindow simply ""trust"" that ProcessEvents will not be called concurrently. Also improve timeout handling in THttpServer and in TWebCanvas. Both using special timers to process their events.; While it is not always possible `TurnOn/TurnOff` timers (it fails from inside timeout handler), just increase/decrease timeout interval, but always let run timer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13630:474,timeout,timeout,474,https://root.cern,https://github.com/root-project/root/pull/13630,3,['timeout'],['timeout']
Safety,"py](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/173155/testReport/projectroot/runtutorials/tutorial_dataframe_distrdf001_spark_connection_py/); > ; > * [projectroot.runtutorials.tutorial_dataframe_distrdf002_dask_connection_py](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/173155/testReport/projectroot/runtutorials/tutorial_dataframe_distrdf002_dask_connection_py/); > ; > * [projectroot.runtutorials.tutorial_tmva_TMVA_Higgs_Classification_py](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/173155/testReport/projectroot/runtutorials/tutorial_tmva_TMVA_Higgs_Classification_py/); > ; > * [projectroot.bindings.experimental.distrdf.test.pyunittests_distrdf_unit_test_operation](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/173155/testReport/projectroot.bindings.experimental.distrdf/test/pyunittests_distrdf_unit_test_operation/); > ; > * [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_rdataframe_makenumpy](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/173155/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_rdataframe_makenumpy/); > ; > * [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_rdataframe_histo_profile](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/173155/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_rdataframe_histo_profile/); > ; > * [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_rtensor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/173155/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_rtensor/). These failures are timeouts and are also seen in other PRs. @Axel-Naumann @vgvassilev In principle, I think merging this PR for the release should be safe; it's on `master` already and we saw no relevant issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12703#issuecomment-1523326456:2131,timeout,timeouts,2131,https://root.cern,https://github.com/root-project/root/pull/12703#issuecomment-1523326456,2,"['safe', 'timeout']","['safe', 'timeouts']"
Safety,quests-build/root/interpreter/llvm/src/tools/clang/include/clang/AST/DeclOpenMP.h:97:1: warning: multi-line comment [-Wcomment] ; - [2020-09-27T08:08:30.018Z] /build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Utils/PlatformPosix.cpp:73:44: warning: type qualifiers ignored on cast result type [-Wignored-qualifiers] ; - [2020-09-27T08:08:40.231Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Pass.h:105:16: warning: ‘virtual bool llvm::Pass::doInitialization(llvm::Module&)’ was hidden [-Woverloaded-virtual] ; - [2020-09-27T08:08:40.231Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Transforms/IPO/Inliner.h:39:8: warning: by ‘virtual bool llvm::LegacyInlinerBase::doInitialization(llvm::CallGraph&)’ [-Woverloaded-virtual] ; - [2020-09-27T08:08:41.268Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:212:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T08:08:41.268Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:427:27: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T08:08:41.268Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:450:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T08:08:46.643Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/include/clang/AST/DeclOpenMP.h:97:1: warning: multi-line comment [-Wcomment] ; - [2020-09-27T08:08:55.641Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/include/clang/AST/DeclOpenMP.h:97:1: warning: multi-line comment [-Wcomment] ; - [2020-09-27T08:08:57.622Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/include/clang/AST/DeclOpenMP.h:97:1: warning: multi-line comment [-Wcomm,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-699602154:1356,redund,redundant,1356,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-699602154,1,['redund'],['redundant']
Safety,quests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5530-ROOT-fedora31-noimt&date=2020-05-04).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/80232/console).; ### Warnings:; - [2020-05-04T15:52:04.960Z] /build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/RooAbsReal.cxx:3268:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-05-04T15:52:04.960Z] /root-pullrequests-build/root/roofit/roofitcore/src/RooAbsReal.cxx:3268:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-05-04T15:52:04.960Z] /build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/RooAbsReal.cxx:3268:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-05-04T15:52:04.960Z] /build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/RooAbsReal.cxx:3268:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-05-04T15:52:04.960Z] /build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/RooAbsReal.cxx:3268:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-05-04T15:52:04.960Z] /build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/RooAbsReal.cxx:3268:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-05-04T15:52:04.960Z] uild/workspace/root-pullrequests-build/root/roofit/roofitcore/src/RooAbsReal.cxx:3268:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-05-04T15:52:04.960Z] /build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/RooAbsReal.cxx:3268:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-05-04T15:52:04.960Z] /build/workspace/root-pullrequests-build/root/roofit/roofitcore/src/RooAbsReal.cxx:3268:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-05-04T15:52:04.960Z] /build/workspace,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5530#issuecomment-623552894:1074,redund,redundant,1074,https://root.cern,https://github.com/root-project/root/pull/5530#issuecomment-623552894,1,['redund'],['redundant']
Safety,"quired to define `operator<=>` for `TString`. Here is the reasoning:. The original example with the `std::pair<TString, int>` in a map eventually compares two pairs. Since we compile with C++20, it will invoke `operator<=>(const std::pair<TString, int>& a, const std::pair<TString, int>& b)`. That in turn will invoke some standard library internal comparison helper that will check, whether `TString` supports `operator<=>` using `std::three_way_comparable_with<TString, TString>`. This evaluates to `true` (!!), because the concept basically checkes whether `requires(TString a, TString b) { a <=> b }` is well-formed. This is the case, because a `TString` can be implicitely converted into a `const char*`: `requires(TString a, TString b) { a.operator const char* <=> b.operator const char* }` is well-formed (but semantically wrong). Now, because `TString` can be compared with `operator<=>`, the standard library internal comparison helper will actually call it to compare to `TString`s (and do a pointer comparison, which is wrong). We could avoid that, by making `operator const char*` of `TString` `explicit`. Then two `TString`s cannot be compared with `operator<=>`. However, this breaks lots of other code in ROOT. My recommendation is therefore, to implement `operator<=>` for `TString`, when the compiler supports it. There is no other way around it, because in the current state (before this PR), `operator<=>` already works for `TString` but with wrong behavior. Edit: the standard library internal comparison helper is `synth-three-way` from https://wg21.link/p1614:; ```c++; constexpr auto synth-three-way =; []<class T, class U>(const T& t, const U& u); requires requires {; { t < u } -> bool;; { u < t } -> bool;; }; {; if constexpr (ThreeWayComparableWith<T, U>) { // TString fullfills this by accident; return t <=> u; // compares pointers; } else {; if (t < u) return weak_ordering::less;; if (u < t) return weak_ordering::greater;; return weak_ordering::equivalent;; }; };; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12525#issuecomment-1486507821:1117,avoid,avoid,1117,https://root.cern,https://github.com/root-project/root/pull/12525#issuecomment-1486507821,1,['avoid'],['avoid']
Safety,"r (level=32048, location=0x7fffab271828 """", fmt=0x0, ap=0x7fa7e57aacbe <__GI___waitpid+46>) at /home/amadio/src/root/core/base/src/TError.cxx:251; #5 0x00007fa7e668fb04 in Fatal (location=0x7d30 <error: Cannot access memory at address 0x7d30>, fmt=0x7fffab271828 """") at /home/amadio/src/root/core/base/src/TError.cxx:350; #6 0x00007fa7e67058b2 in TClassTable::Add (cname=0x7d30 <error: Cannot access memory at address 0x7d30>, id=6184, info=..., dict=0x7fa7e57aacbe <__GI___waitpid+46>, pragmabits=-441829952) at /home/amadio/src/root/core/cont/src/TClassTable.cxx:350; #7 0x00007fa7e6704da5 in ROOT::AddClass (cname=0x7d30 <error: Cannot access memory at address 0x7d30>, id=6184, info=..., dict=0x7fa7e57aacbe <__GI___waitpid+46>, pragmabits=-441829952) at /home/amadio/src/root/core/cont/src/TClassTable.cxx:761; #8 0x00007fa7e6704b94 in TClassTable::TClassTable (this=0x7d30) at /home/amadio/src/root/core/cont/src/TClassTable.cxx:236; #9 0x00007fa7e6588e34 in TROOT::InitInterpreter (this=0x7d30) at /home/amadio/src/root/core/base/src/TROOT.cxx:2020; #10 0x00007fa7e6587ffc in ROOT::Internal::GetROOT2 () at /home/amadio/src/root/core/base/src/TROOT.cxx:385; #11 0x00007fa7e7f86986 in TCling__GetInterpreter () at /home/amadio/src/root/core/metacling/src/rootclingTCling.cxx:48; #12 0x00007fa7e7ea51d5 in RootClingMain (argc=98, argv=0x7fffab271828, isDeep=false, isGenreflex=190) at /home/amadio/src/root/core/dictgen/src/rootcling_impl.cxx:4333; #13 0x00007fa7e7e9dd43 in ROOT_rootcling_Driver (argc=32048, argv=0x7fffab271828, config=...) at /home/amadio/src/root/core/dictgen/src/rootcling_impl.cxx:6091; #14 0x00000000004027a8 in main (argc=32048, argv=0x7fffab271828) at /home/amadio/src/root/main/src/rootcling.cxx:44; Child aborted; gmake[2]: *** [math/mathcore/CMakeFiles/G__MathCore.dir/build.make:213: math/mathcore/G__MathCore.cxx] Error 1; gmake[1]: *** [CMakeFiles/Makefile2:19283: math/mathcore/CMakeFiles/G__MathCore.dir/all] Error 2; gmake: *** [Makefile:163: all] Error 2; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1389#issuecomment-347619862:3363,abort,aborted,3363,https://root.cern,https://github.com/root-project/root/pull/1389#issuecomment-347619862,1,['abort'],['aborted']
Safety,"r and a copy assignment operator but does not define a destructor, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,-warnings-as-errors]; TEST(RunGraphs, EmptyListOfHandles); ^; /home/blue/ROOT/master/_build/googletest-prefix/src/googletest/googletest/include/gtest/gtest.h:2338:42: note: expanded from macro 'TEST'; #define TEST(test_suite_name, test_name) GTEST_TEST(test_suite_name, test_name); ^; /home/blue/ROOT/master/_build/googletest-prefix/src/googletest/googletest/include/gtest/gtest.h:2332:3: note: expanded from macro 'GTEST_TEST'; GTEST_TEST_(test_suite_name, test_name, ::testing::Test, \; ^; /home/blue/ROOT/master/_build/googletest-prefix/src/googletest/googletest/include/gtest/internal/gtest-internal.h:1355:9: note: expanded from macro 'GTEST_TEST_'; class GTEST_TEST_CLASS_NAME_(test_suite_name, test_name) \; ^; /home/blue/ROOT/master/_build/googletest-prefix/src/googletest/googletest/include/gtest/internal/gtest-internal.h:1347:3: note: expanded from macro 'GTEST_TEST_CLASS_NAME_'; test_suite_name##_##test_name##_Test; ^; note: expanded from here; /home/blue/ROOT/master/tree/dataframe/test/dataframe_helpers.cxx:418:1: error: variable 'test_info_' provides global access to a non-const object; consider making the pointed-to data 'const' [cppcoreguidelines-avoid-non-const-global-variables,-warnings-as-errors]; TEST(RunGraphs, AlreadyRun); ^; /home/blue/ROOT/master/_build/googletest-prefix/src/googletest/googletest/include/gtest/gtest.h:2338:42: note: expanded from macro 'TEST'; #define TEST(test_suite_name, test_name) GTEST_TEST(test_suite_name, test_name); ^; ```. What can we do to silence these? Maybe running on tests needs a slightly different conf? Or do we just not want to run on directories containing tests? . My command:. ```; clang-tidy (fd --type file --extension 'cxx' --extension 'hxx' . tree/dataframe/); ```. The output:; [clang-tidy.log](https://github.com/root-project/root/files/6908796/clang-tidy.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8773#issuecomment-889998560:2668,avoid,avoid-non-const-global-variables,2668,https://root.cern,https://github.com/root-project/root/pull/8773#issuecomment-889998560,1,['avoid'],['avoid-non-const-global-variables']
Safety,r is null in /opt/root_src/geom/geom/src/TGeoTube.cxx:1843; /opt/root_src/geom/geom/src/TGeoTube.cxx:1857:31: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Control jumps to 'case 3:' at line 1846 in /opt/root_src/geom/geom/src/TGeoTube.cxx:1814; 2: Assuming 'id' is < 'ndiv' in /opt/root_src/geom/geom/src/TGeoTube.cxx:1855; 3: Loop condition is true. Entering loop body in /opt/root_src/geom/geom/src/TGeoTube.cxx:1855; 4: Value assigned to field 'fNodes' in /opt/root_src/geom/geom/src/TGeoTube.cxx:1856; 5: Called C++ object pointer is null in /opt/root_src/geom/geom/src/TGeoTube.cxx:1857; /opt/root_src/geom/geom/src/TGeoTube.cxx:2059:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2059; /opt/root_src/geom/geom/src/TGeoTube.cxx:2107:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2107; /opt/root_src/geom/geom/src/TGeoTube.cxx:2773:13: warning: Value stored to 's' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 's' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2773; /opt/root_src/geom/geom/src/TGeoTube.cxx:2909:13: warning: Value stored to 'sz1' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'sz1' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2909; /opt/root_src/geom/geom/src/TGeoTube.cxx:3015:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:30,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:74840,safe,safe,74840,https://root.cern,https://github.com/root-project/root/issues/7428,1,['safe'],['safe']
Safety,"r"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals.; In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:; - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range; - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done; - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28.; Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your cod",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12645:1340,avoid,avoid,1340,https://root.cern,https://github.com/root-project/root/issues/12645,1,['avoid'],['avoid']
Safety,"r-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++; - C++ (built type specific): -O3 -DNDEBUG; Linker flags:; - Executable: -mmacosx-version-min=15.0; - Module: ; - Shared: . -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_tbb builtin_vdt builtin_xxhash clad cocoa dataframe davix gdml http imt libcxx opengl pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt xml xrootd; -- Configuring done (17.6s); -- Generating done (3.7s); -- Build files have been written to: /Users/marcomeyer/Software/root/20240914-build; -- Building ROOT version 6.32.04; -- Checking internet connectivity; -- Checking internet connectivity - found; -- The default C++ standard in use by the detected compiler (/usr/bin/clang++) is lower than C++17. Setting C++17 as the minimum standard.; -- Found a macOS system 15.0; -- Found an AArch64 system; -- ROOT default compression algorithm: zlib; -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled.; -- Looking for ZLib; -- Building freetype version 2.12.1 included in ROOT itself; -- Looking for PCRE; -- Looking for LZMA; -- Looking for ZSTD; -- Looking for LZ4; -- Building AfterImage library included in ROOT itself; -- Looking for Python; -- Found Python3: /opt/homebrew/bin/python3.12 (found suitable version ""3.12.6"", minimum required is ""3.8"") found components: Interpreter Development NumPy Development.Module Development.Embed ; -- Looking for OpenGL; -- Looking for LibXml2; -- Looking for SQLite; -- Looking for XROOTD; -- Checking for module 'davix>=0.6.4'; -- Found davix, version 0.8.7; -- Looking for BLAS for optional parts of TMVA; -- PyROOT: development package found. ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16428#issuecomment-2350895635:6073,detect,detected,6073,https://root.cern,https://github.com/root-project/root/issues/16428#issuecomment-2350895635,1,['detect'],['detected']
Safety,"r/llvm/src/include/llvm/Transforms/IPO/Inliner.h:39:8: warning: by ‘virtual bool llvm::LegacyInlinerBase::doInitialization(llvm::CallGraph&)’ [-Woverloaded-virtual] ; - [2020-09-27T10:35:57.629Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:212:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:35:57.629Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:427:27: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:35:57.629Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:450:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:36:09.553Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:431:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:36:09.553Z] /build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/IncrementalJIT.h:108:74: warning: ‘llvm::orc::LegacyRTDyldObjectLinkingLayer::LegacyRTDyldObjectLinkingLayer(llvm::orc::ExecutionSession&, llvm::orc::LegacyRTDyldObjectLinkingLayer::ResourcesGetter, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyLoadedFtor, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyFinalizedFtor, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyFreedFtor)’ is deprecated [-Wdeprecated-declarations] ; - [2020-09-27T10:36:09.553Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:277:33: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:36:09.553Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:431:25: warning: redundant move in return statement",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-699617654:2775,redund,redundant,2775,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-699617654,1,['redund'],['redundant']
Safety,"r/llvm/src/include/llvm/Transforms/IPO/Inliner.h:39:8: warning: by ‘virtual bool llvm::LegacyInlinerBase::doInitialization(llvm::CallGraph&)’ [-Woverloaded-virtual] ; - [2020-09-27T10:48:41.699Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:212:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:48:41.699Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:427:27: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:48:41.699Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:450:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:48:54.024Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:431:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:48:54.024Z] /build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/IncrementalJIT.h:108:74: warning: ‘llvm::orc::LegacyRTDyldObjectLinkingLayer::LegacyRTDyldObjectLinkingLayer(llvm::orc::ExecutionSession&, llvm::orc::LegacyRTDyldObjectLinkingLayer::ResourcesGetter, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyLoadedFtor, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyFinalizedFtor, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyFreedFtor)’ is deprecated [-Wdeprecated-declarations] ; - [2020-09-27T10:48:54.025Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:277:33: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:48:55.090Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:431:25: warning: redundant move in return statement",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-699618970:2775,redund,redundant,2775,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-699618970,1,['redund'],['redundant']
Safety,"r/llvm/src/include/llvm/Transforms/IPO/Inliner.h:39:8: warning: by ‘virtual bool llvm::LegacyInlinerBase::doInitialization(llvm::CallGraph&)’ [-Woverloaded-virtual] ; - [2020-09-28T08:12:01.066Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:212:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:01.066Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:427:27: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:01.066Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:450:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:01.066Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:431:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:01.066Z] /build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/IncrementalJIT.h:108:74: warning: ‘llvm::orc::LegacyRTDyldObjectLinkingLayer::LegacyRTDyldObjectLinkingLayer(llvm::orc::ExecutionSession&, llvm::orc::LegacyRTDyldObjectLinkingLayer::ResourcesGetter, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyLoadedFtor, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyFinalizedFtor, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyFreedFtor)’ is deprecated [-Wdeprecated-declarations] ; - [2020-09-28T08:12:01.067Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:277:33: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:01.067Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:431:25: warning: redundant move in return statement",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-699853926:1972,redund,redundant,1972,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-699853926,1,['redund'],['redundant']
Safety,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':; TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'; CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':; TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'; CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':; TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'; CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':; TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'; CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':; TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'; CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':; TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'; collect2: error: ld returned 1 exit status; io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed; make[3]: *** [lib/libRIO.so] Error 1; CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed; make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2; CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed; make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2; Makefile:5971: recipe for target 'RIO' failed; make: *** [RIO] Error 2; ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4561:3436,safe,safest,3436,https://root.cern,https://github.com/root-project/root/pull/4561,1,['safe'],['safest']
Safety,"r/work/root/builddir/DartConfiguration.tcl; Parse Config file:/home/dvalapar/work/root/builddir/DartConfiguration.tcl; Test project /home/dvalapar/work/root/builddir; Constructing a list of tests; Ignore test: test-stressproof; Ignore test: roottest-cling-parsing-semicolon; Done constructing a list of tests; Updating test list for fixtures; Added 0 tests to meet fixture requirements; Checking test dependency graph...; Checking test dependency graph end; test 338; Start 338: test-stressinterpreter. 338: Test command: /usr/bin/cmake ""-DCMD=/home/dvalapar/work/root/builddir/test/stressInterpreter"" ""-DPRE=/usr/bin/cmake^-E^copy^/home/dvalapar/work/root/test/stressInterpreter.cxx^/home/dvalapar/work/root/builddir/test/stressInterpreter.cxx"" ""-DSYS=/home/dvalapar/work/root/builddir"" ""-P"" ""/home/dvalapar/work/root/builddir/RootTestDriver.cmake""; 338: Environment variables: ; 338: ROOT_HIST=0; 338: Test timeout computed to be: 1500; 338: ****************************************************************************; 338: * Starting stress INTERPRETER *; 338: ****************************************************************************; 338: FuncCall ................................................................ OK; 338: STLDict ................................................................. OK; 338: Reflection .............................................................. OK; 338: NestedStatements ........................................................ OK; 338: ****************************************************************************; 338: stressInterpreter: Real Time = 0.74 seconds Cpu Time = 0.74 seconds; 338: ****************************************************************************; 338: * ROOTMARKS =12973.0 * Root6.31/01 20231010/0; 338: ****************************************************************************; 338: (bool) false; 1/1 Test #338: test-stressinterpreter ........... Passed 1.71 sec. The following tests passed:; test-stressinterpreter. 100% tests p",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14267#issuecomment-1915174574:1374,timeout,timeout,1374,https://root.cern,https://github.com/root-project/root/pull/14267#issuecomment-1915174574,1,['timeout'],['timeout']
Safety,"ration"" for configuration details.; For bug reporting instructions, please see:; <https://bugs.gentoo.org/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>. For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from root/multicore/processExecutorH1Test...; (gdb) run; Starting program: /srv/root/roottest-build/root/multicore/processExecutorH1Test ; warning: File ""/usr/lib/root/9999/lib/libCore.so.6.25.01-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; 	add-auto-load-safe-path /usr/lib/root/9999/lib/libCore.so.6.25.01-gdb.py; line to your configuration file ""/home/amadio/.gdbinit"".; To completely disable this security protection add; 	set auto-load safe-path /; line to your configuration file ""/home/amadio/.gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; 	info ""(gdb)Auto-loading safe path""; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib64/libthread_db.so.1"".; +++ Executing tProcessExecutorH1Test ......................................... +++; [Detaching after vfork from child process 340387]; [Detaching after vfork from child process 340389]; [Detaching after vfork from child process 340391]; [Detaching after vfork from child process 340393]; [Detaching after vfork from child process 341564]; [Detaching after vfork from child process 341566]; [Detaching after vfork from child process 341606]; [Detaching after fork from child process 341608]; [Detaching after fork from child process 341609]; [Detaching after fork from child process 341610]; [Detaching after vfork from child process 341705]; +++ Processing the H1 dataset with a lambda .................................. OK ; [Detaching after fork from child process 341",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936#issuecomment-823920792:1532,safe,safe,1532,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-823920792,1,['safe'],['safe']
Safety,"rc/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411; #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182; #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:195; #6 0x00007facdfe8f519 in TUnixSystem::DispatchSignals(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3644; #7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407; #8 0x00007facdfe8f474 in sighandler(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3620; #9 <signal handler called>; #10 0x00007facdea2e4f5 in raise () from /lib64/libc.so.6; #11 0x00007facdea2fcd5 in abort () from /lib64/libc.so.6; #12 0x00007facdea2766e in __assert_fail_base () from /lib64/libc.so.6; #13 0x00007facdea27730 in __assert_fail () from /lib64/libc.so.6; #14 0x00007facd7a7438f in llvm::isa_impl_cl<clang::UsingDecl, clang::Decl const*>::doit(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106; #15 0x00007facd7a74211 in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const*, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:133; #16 0x00007facd7a7407a in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const* const, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:124; #17 0x00007facd7a73d65 in bool llvm::isa<clang::UsingDecl, clang::Decl const*>(clang::Decl const* const",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6359:2361,abort,abort,2361,https://root.cern,https://github.com/root-project/root/issues/6359,1,['abort'],['abort']
Safety,re-assigning from me to danilo as there are a few design decisions that I can't take:; * which safety checks to put in place and for what debug levels; * overloads of Take vs several functions with different names,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2351#issuecomment-409829058:95,safe,safety,95,https://root.cern,https://github.com/root-project/root/pull/2351#issuecomment-409829058,1,['safe'],['safety']
Safety,recovering cmake option descriptions when forcing values,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2056:0,recover,recovering,0,https://root.cern,https://github.com/root-project/root/pull/2056,1,['recover'],['recovering']
Safety,ression found in output. Regex=[: error:] 16.59 sec . ### Failing tests:; - [projectroot.runtutorials.tutorial_roofit_rf509_wsinteractive_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76639/testReport/projectroot/runtutorials/tutorial_roofit_rf509_wsinteractive_py/); - [projectroot.runtutorials.tutorial_roofit_rf513_wsfactory_tools_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76639/testReport/projectroot/runtutorials/tutorial_roofit_rf513_wsfactory_tools_py/); - [projectroot.runtutorials.tutorial_roofit_rf903_numintcache_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76639/testReport/projectroot/runtutorials/tutorial_roofit_rf903_numintcache_py/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76639/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.root.io.recover.roottest_root_io_recover_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76639/testReport/projectroot.roottest.root.io/recover/roottest_root_io_recover_make/); - [projectroot.test.test_stressmathcore_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76639/testReport/projectroot/test/test_stressmathcore_interpreted/); - [projectroot.test.test_stresshistofit_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76639/testReport/projectroot/test/test_stresshistofit_interpreted/); - [projectroot.runtutorials.tutorial_roostats_StandardFrequentistDiscovery](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76639/testReport/projectroot/runtutorials/tutorial_roostats_StandardFrequentistDiscovery/); - [projectroot.runtutorials.tutorial_roostats_TestNonCentral](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76639/testReport/projectroot/runtutorials/tutorial_roostats_TestNonCentral/); - [projectroot.runtutorials.tutorial,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4016#issuecomment-579668392:1293,recover,recover,1293,https://root.cern,https://github.com/root-project/root/pull/4016#issuecomment-579668392,1,['recover'],['recover']
Safety,ression found in output. Regex=[: error:] 17.99 sec . ### Failing tests:; - [projectroot.runtutorials.tutorial_roofit_rf509_wsinteractive_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76607/testReport/projectroot/runtutorials/tutorial_roofit_rf509_wsinteractive_py/); - [projectroot.runtutorials.tutorial_roofit_rf513_wsfactory_tools_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76607/testReport/projectroot/runtutorials/tutorial_roofit_rf513_wsfactory_tools_py/); - [projectroot.runtutorials.tutorial_roofit_rf903_numintcache_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76607/testReport/projectroot/runtutorials/tutorial_roofit_rf903_numintcache_py/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76607/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.root.io.recover.roottest_root_io_recover_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76607/testReport/projectroot.roottest.root.io/recover/roottest_root_io_recover_make/); - [projectroot.roottest.root.multicore.roottest_root_multicore_tp_process_imt](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76607/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt/); - [projectroot.core.metacling.test.gtest_core_metacling_test_coremetaclingtestUnit](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76607/testReport/projectroot.core.metacling/test/gtest_core_metacling_test_coremetaclingtestUnit/); - [projectroot.test.test_stressmathcore_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76607/testReport/projectroot/test/test_stressmathcore_interpreted/); - [projectroot.runtutorials.tutorial_dataframe_df002_dataModel](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76607/testReport/projectroot/runtutorials/tu,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4016#issuecomment-579477135:1695,recover,recover,1695,https://root.cern,https://github.com/root-project/root/pull/4016#issuecomment-579477135,1,['recover'],['recover']
Safety,reter::TCling::AutoParse>: Trying to autoparse for TNamedEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TNamedEditor. Info in <TInterpreter::TCling::AutoLoad>: Trying to autoload for TNamedEditor; Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for TNamedEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TNamedEditor. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for TNamedEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TNamedEditor. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for TNamedEditor; Info in <TInterpreter::TCling::AutoLoad>: Trying to autoload for TNamedEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TNamedEditor. TClass::GetClass: Header Parsing - The representation of TNamedEditor was not found in the type system. A lookup in the interpreter is about to be tried: this can cause parsing. This can be avoided selecting TNamedEditor in the linkdef/selection file.; Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for TNamedEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TNamedEditor. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for TNamedEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TNamedEditor. Info in <TInterpreter::TCling::AutoLoad>: Trying to autoload for TNamedEditor; TEnum::GetEnum: Header Parsing - The enumerator TNamedEditor is not known to the typesystem: an interpreter lookup will be performed. This can imply parsing of headers. This can be avoided selecting the numerator in the linkdef/selection file.; Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for TNamedEditor; Info in <TInterpreter::TCling::AutoLoad>: Trying to autoload for TNamedEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TNamedEditor. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for TNamedEd,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15963#issuecomment-2200648481:27039,avoid,avoided,27039,https://root.cern,https://github.com/root-project/root/issues/15963#issuecomment-2200648481,1,['avoid'],['avoided']
Safety,ring its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2059; /opt/root_src/geom/geom/src/TGeoTube.cxx:2107:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2107; /opt/root_src/geom/geom/src/TGeoTube.cxx:2773:13: warning: Value stored to 's' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 's' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2773; /opt/root_src/geom/geom/src/TGeoTube.cxx:2909:13: warning: Value stored to 'sz1' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'sz1' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2909; /opt/root_src/geom/geom/src/TGeoTube.cxx:3015:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:3015; /opt/root_src/geom/geom/src/TGeoVolume.cxx:2899:7: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Assuming field 'fNodes' is null in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2876; 2: Taking false branch in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2876; 3: Assuming field 'fFinder' is null in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2880; 4: Taking false branch in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2880; 5: Assuming 'ncells' is not equal to 0 in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2885; 6: Left side of '||' is false in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2885; 7: Assuming the condition is false in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2885; 8: Taking false branch in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2885; 9: Taking false branch i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:75660,safe,safe,75660,https://root.cern,https://github.com/root-project/root/issues/7428,1,['safe'],['safe']
Safety,"root-6.33.01/interpreter/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:22; #1 0x00001529359d3ec6 PrintStackTraceSignalHandler(void*) /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc12/lcg/root/6.33.01-48fd78c793bc73bd3f87499c5ca7bf90/root-6.33.01/interpreter/llvm-project/llvm/lib/Support/Unix/Signals.inc:641:1; #2 0x00001529359d19bd llvm::sys::RunSignalHandlers() /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc12/lcg/root/6.33.01-48fd78c793bc73bd3f87499c5ca7bf90/root-6.33.01/interpreter/llvm-project/llvm/lib/Support/Signals.cpp:104:20; #3 0x00001529359d34fb SignalHandler(int) /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc12/lcg/root/6.33.01-48fd78c793bc73bd3f87499c5ca7bf90/root-6.33.01/interpreter/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1; #4 0x000015292dff2d20 __restore_rt (/lib64/libpthread.so.0+0x12d20); #5 0x000015292ccf652f raise (/lib64/libc.so.6+0x4e52f); #6 0x000015292ccc9e65 abort (/lib64/libc.so.6+0x21e65); #7 0x000015292ccc9d39 _nl_load_domain.cold.0 (/lib64/libc.so.6+0x21d39); #8 0x000015292cceee86 (/lib64/libc.so.6+0x46e86); #9 0x000015292f2f3d10 cling::utils::CreateNestedNameSpecifierForScopeOf(clang::ASTContext const&, clang::Decl const*, bool, clang::ClassTemplateSpecializationDecl const*) /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc12/lcg/root/6.33.01-48fd78c793bc73bd3f87499c5ca7bf90/root-6.33.01/interpreter/cling/lib/Utils/AST.cpp:1568:65; #10 0x000015292f2f3f03 cling::utils::CreateNestedNameSpecifierForScopeOf(clang::ASTContext const&, clang::Type const*, bool, clang::ClassTemplateSpecializationDecl const*) /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc12/lcg/root/6.33.01-48fd78c793bc73bd3f87499c5ca7bf90/root-6.33.01/interpreter/cling/lib/Utils/AST.cpp:1621:79; #11 0x000015292f2f4573 cling::utils::TypeName::GetFullyQualifiedType(clang::QualType, clang::ASTContext const&, c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16232#issuecomment-2332005936:1737,abort,abort,1737,https://root.cern,https://github.com/root-project/root/pull/16232#issuecomment-2332005936,1,['abort'],['abort']
Safety,"root-pullrequests-build/build/include/ROOT/RVec.hxx:193:19: error: constexpr function's return type 'void' is not a literal type ; - [2021-04-16T11:18:42.066Z] /mnt/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:487:42: error: no type named 'iterator' in 'ROOT::Internal::VecOps::SmallVectorTemplateBase&lt;int, true&gt;' ; - [2021-04-16T11:18:42.066Z] /mnt/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:488:48: error: no type named 'const_iterator' in 'ROOT::Internal::VecOps::SmallVectorTemplateBase&lt;int, true&gt;' ; - [2021-04-16T11:18:42.066Z] /mnt/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:489:43: error: no type named 'reference' in 'ROOT::Internal::VecOps::SmallVectorTemplateBase&lt;int, true&gt;' ; - [2021-04-16T11:18:42.066Z] /mnt/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:490:43: error: no type named 'size_type' in 'ROOT::Internal::VecOps::SmallVectorTemplateBase&lt;int, true&gt;' ; - [2021-04-16T11:18:42.066Z] /mnt/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1281:27: error: no type named 'pointer' in 'ROOT::VecOps::RVec&lt;int&gt;' ; - [2021-04-16T11:18:42.066Z] /mnt/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1523:1: error: no member named 'begin' in 'ROOT::VecOps::RVec&lt;int&gt;' ; - [2021-04-16T11:18:42.066Z] /mnt/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1523:1: error: no member named 'begin' in 'ROOT::VecOps::RVec&lt;int&gt;' ; - [2021-04-16T11:18:42.066Z] /mnt/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1523:1: error: no member named 'begin' in 'ROOT::VecOps::RVec&lt;int&gt;' . And 11 more. ### Warnings:; - [2021-04-16T11:18:42.066Z] /mnt/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:193:19: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-821105657:4186,avoid,avoid,4186,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-821105657,1,['avoid'],['avoid']
Safety,"root.cern marked as ""unsafe"" by Google",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6539:21,unsafe,unsafe,21,https://root.cern,https://github.com/root-project/root/issues/6539,1,['unsafe'],['unsafe']
Safety,rors:; - [2020-09-27T10:12:28.485Z] input_line_1:1:2: fatal error: module file '/build/workspace/root-pullrequests-build/build/tree/tree/test/libc.pcm' not found: module file not found ; - [2020-09-27T10:12:28.485Z] &lt;&lt;&lt; cling interactive line includer &gt;&gt;&gt;: fatal error: module file '/build/workspace/root-pullrequests-build/build/tree/tree/test/libc.pcm' not found: module file not found . ### Warnings:; - [2020-09-27T10:10:37.750Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/include/clang/AST/DeclOpenMP.h:97:1: warning: multi-line comment [-Wcomment] ; - [2020-09-27T10:10:39.335Z] /build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Utils/PlatformPosix.cpp:73:44: warning: type qualifiers ignored on cast result type [-Wignored-qualifiers] ; - [2020-09-27T10:10:45.642Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:212:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:10:45.642Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:427:27: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:10:45.642Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:450:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:10:46.173Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Pass.h:105:16: warning: ‘virtual bool llvm::Pass::doInitialization(llvm::Module&)’ was hidden [-Woverloaded-virtual] ; - [2020-09-27T10:10:46.173Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Transforms/IPO/Inliner.h:39:8: warning: by ‘virtual bool llvm::LegacyInlinerBase::doInitialization(llvm::CallGraph&)’ [-Woverload[ 61%] Copying /build/workspace/root-pullrequests-build/root/tutorials/roofit/rf107_plot,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-699615114:1203,redund,redundant,1203,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-699615114,1,['redund'],['redundant']
Safety,rors:; - [2021-06-24T10:41:54.262Z] FAILED: roottest/root/roofitstats/vectorisedPDFs/testGaussBinned ; - [2021-06-24T10:41:54.519Z] clang: error: linker command failed with exit code 1 (use -v to see invocation) . ### Warnings:; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:30:31: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:41:22: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:59:33: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:60:34: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:61:33: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roofit/batchcompute/inc/Batches.h:62:32: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-06-24T10:39:06.701Z] /build/jenkins/workspace/root-pullrequests-build/root/roo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8240#issuecomment-867532806:1258,avoid,avoid,1258,https://root.cern,https://github.com/root-project/root/pull/8240#issuecomment-867532806,1,['avoid'],['avoid']
Safety,"rrow. And I am afraid this will become more complicated in the future. Instead of messing with each of them, I thought it might be better to fix the issue in a single place on the ROOT side. > I am not a huge fan of the `RTLD_DEEPBIND` approach because it is not portable and it essentially overrides the dynamic linker behavior yet one more time. I am not sure how this would translate to Windows for example.; > ; I agree, me neither. If we can find a better and cleaner way, I am absolutely in favor of that. > IIUC, `RTLD_DEEPBIND` alters the search order of the dynamic linker and using -fPIC intends to deduplicate. That seems as bad as preloading a set of llvm dependent libraries, IMO. Do we need `libgandiva.so` to be compiled with -fPIC or just the executables which 'use' ROOT?; > ; All shared libraries must be compiled with -fPIC by definition, so libgandiva is already compiler with -fPIC. The change would only be for exectuables, which usually do not have -fPIC by default. But then actually other libraries have similar requirements, e.g. Qt5 (with -reduce-relocation flag, which is the default) requires all executables to link against Qt to be compiled with -fPIC. But again, if there is a better way, I am also in favor of avoiding -fPIC-. > This check is to protect the subsequent `dlsyms` in TCling to resolve symbols from the wrong place. We can fix the check and play with the JIT resolution logic by playing with the search order here:; > ; > https://github.com/root-project/root/blob/39630b7530771be3e4643048361886dcfb057f07/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp#L299-L302; > ; > The challenge is to come up with a consistent symbol resolution :); Just as a comment, two other possibilities would be to:; - put the llvm / clang which are embedded in ROOT into a namespace, so the symbols do not collide with system LLVM symbols.; - If the clang changes are upstreamed eventually, this shouldn't be necessary anymore, since cling could use system LLVM / Clang.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4668#issuecomment-564020905:2054,avoid,avoiding,2054,https://root.cern,https://github.com/root-project/root/pull/4668#issuecomment-564020905,1,['avoid'],['avoiding']
Safety,rse for HepMC::GenVertex. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC::GenVertex; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC::GenVertex. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC::GenVertex; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC::GenVertex. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC::GenVertex; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC::GenVertex. Info in <TInterpreter::TCling::AutoLoad>: Explicitly disabled (the class name is HepMC::GenVertex); TClass::GetClass: Header Parsing - The representation of HepMC::GenVertex was not found in the type system. A lookup in the interpreter is about to be tried: this can cause parsing. This can be avoided selecting HepMC::GenVertex in the linkdef/selection file.; Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC::GenParticle; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC::GenParticle. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC::GenParticle; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC::GenParticle. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC::GenParticle; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC::GenParticle. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC::GenParticle; Info in <TInterpreter::TCling::AutoParse>: Starting autopar,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10910#issuecomment-1268084280:4389,avoid,avoided,4389,https://root.cern,https://github.com/root-project/root/pull/10910#issuecomment-1268084280,1,['avoid'],['avoided']
Safety,"rt; terminate called after throwing an instance of '. terminate called after throwing an instance of 'std::length_errorstd::length_error'. '; what(): what(): vector::_M_fill_insert; vector::_M_fill_insert; terminate called after throwing an instance of 'terminate called after throwing an instance of 'std::length_error'; terminate called after throwing an instance of 'std::length_error'; terminate called after throwing an instance of 'terminate called after throwing an instance of 'std::length_errorstd::length_errorstd::length_error'; what(): vector::_M_fill_insert; what(): vector::_M_fill_insert; '; '; what(): vector::_M_fill_insert what(): ; vector::_M_fill_insert; what(): vector::_M_fill_insert; terminate called after throwing an instance of 'std::length_error'; what(): vector::_M_fill_insert; terminate called after throwing an instance of 'std::length_error'; what(): vector::_M_fill_insert; terminate called after throwing an instance of 'std::length_error'; what(): vector::_M_fill_insert; terminate called after throwing an instance of 'std::length_error'; terminate called after throwing an instance of ' what(): vector::_M_fill_insert; std::length_error'; terminate called after throwing an instance of 'std::length_error what(): terminate called after throwing an instance of ''; terminate called after throwing an instance of 'vector::_M_fill_insertstd::length_error; '; std::length_error'; what(): vector::_M_fill_insert; what(): vector::_M_fill_insert; what(): vector::_M_fill_insert; RooRealMPFE::evaluate(nll_exp_expData_55d734b4c5e0_MPFE0) ERROR: unexpected message from server process: 8; ```. At the same time, either setting `BatchMode(0)` or reducing the number of requested CPU cores allows to avoid this misbehavior. I have also encountered a case (with a complex simultanous fit) where the `BatchMode(1)` alone was leading to this terminate even without any NumCPU request. . I believe this can be handled by RooFit in a more careful manner to avoid such terminates.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9406:3193,avoid,avoid,3193,https://root.cern,https://github.com/root-project/root/issues/9406,2,['avoid'],['avoid']
Safety,"rts of errors. Consider the following example code:. ```Python; from ROOT import RooArgList,RooArgSet,RooRealVar,TMatrixDSym,RooMultiVarGaussian,RooFit,RooWorkspace,RooStats,RooExtendPdf; ; allvars = []; ; xvals = RooArgList(); variables = RooArgSet(); muvals = RooArgList(); ; for i in range(0,3):; mu = RooRealVar(""mu_{:d}"".format(i),""mu_{:d}"".format(i),1.,-10,10); muvals.add(mu); x = RooRealVar(""x_{:d}"".format(i),""x_{:d}"".format(i),1.); xvals.add(x); variables.add(x); ; # side problem: unless these two lines are executed, the python garbage collector deletes mu and x; # causing a segfault in the construction of the RooMultiVarGaussian; allvars.append(mu); allvars.append(x); ; covmat = TMatrixDSym(3); covmat[0][0] = 1.; covmat[1][1] = 2.; covmat[2][2] = 3.; covmat[0][1] = 0.2; covmat[1][0] = 0.2; covmat[1][2] = 0.6; covmat[2][1] = 0.6; covmat[2][0] = 0.3; covmat[0][2] = 0.3; ; nevents = 1000.; mvg = RooMultiVarGaussian(""mvg"",""mvg"",xvals,muvals,covmat); allvars.append(mvg); ; ws = RooWorkspace(""ws""); ws.Import(mvg); mc = RooStats.ModelConfig(""model"",""model"",ws); mc.SetObservables(xvals); mc.SetParametersOfInterest(muvals); mc.SetPdf(mvg.GetName()); ; # main problem: AsymptoticCalculator doesn't accept RooMultiVarGaussian; data = RooStats.AsymptoticCalculator.MakeAsimovData(mc,muvals,RooArgSet()); ```; ; Also, wrapping the Multivariate Gaussian in `RooExtendPdf` doesn't help either, as this results in lots of warnings saying `WARNING::Detected a bin with zero expected events- skip it` - probably that warning should only be emitted once.; Also, the resulting asimov dataset has 0 events. norm = RooRealVar(""norm"",""norm"",1000); extmvg = RooExtendPdf(""extPdf"",""extPdf"",mvg,norm); ws.Import(extmvg,RooFit.RecycleConflictNodes()); mc_cnt = RooStats.ModelConfig(""countingModel"",""countingModel"",ws); mc_cnt.SetObservables(xvals); mc_cnt.SetParametersOfInterest(muvals); mc_cnt.SetPdf(extmvg.GetName()); ; data = RooStats.AsymptoticCalculator.MakeAsimovData(mc_cnt,muvals,RooArgSet())",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7967:1600,Detect,Detected,1600,https://root.cern,https://github.com/root-project/root/issues/7967,1,['Detect'],['Detected']
Safety,"running rootdrawtree without arguments leads to a crash; ```; [user@host]$ rootdrawtree ; /usr/include/c++/8/bits/stl_vector.h:932: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::reference = std::__cxx11::basic_string<char>&; std::vector<_Tp, _Alloc>::size_type = long unsigned int]: Assertion '__builtin_expect(__n < this->size(), true)' failed.; *** Break *** abort; ```; root 6.22.08 from EPEL on CentOS8 x86_64 . Sorry if that is a duplicate. Best regards,. Andrii",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8778:557,abort,abort,557,https://root.cern,https://github.com/root-project/root/issues/8778,1,['abort'],['abort']
Safety,running the test a few times it seems 10% is too tight a margin. The fluctuations from just rerunning the test a few times can be quite sizeable. To avoid false positives I have extended the margin to 25%.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/394#issuecomment-286548692:149,avoid,avoid,149,https://root.cern,https://github.com/root-project/root/pull/394#issuecomment-286548692,1,['avoid'],['avoid']
Safety,"runtest_protocol; File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall; File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec; File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__; File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop; File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall; File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec; File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__; File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main; File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session; File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main; File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall; File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec; File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__; File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main; File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest; File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4); *** Break *** segmentation violation; /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --; CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):; got exit code Segmentation fault but expected 0; ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14098#issuecomment-1837114968:4591,timeout,timeout,4591,https://root.cern,https://github.com/root-project/root/pull/14098#issuecomment-1837114968,1,['timeout'],['timeout']
Safety,"ry::TContext ctxt(nullptr);; try {; // recursive call to check filters and conditionally execute actions; while (r.Next()) {; diff --git a/tree/treeplayer/src/TTreeProcessorMT.cxx b/tree/treeplayer/src/TTreeProcessorMT.cxx; index ad0100e377..f29a67b65b 100644; --- a/tree/treeplayer/src/TTreeProcessorMT.cxx; +++ b/tree/treeplayer/src/TTreeProcessorMT.cxx; @@ -492,7 +492,8 @@ void TTreeProcessorMT::Process(std::function<void(TTreeReader &)> func); const auto &clusters = clustersAndEntries.first[0];; const auto &entries = clustersAndEntries.second[0];; auto processCluster = [&](const EntryRange &c) {; - auto r = fTreeView->GetTreeReader(c.first, c.second, treeNames, fileNames, fFriendInfo, fEntryList, {entries});; + gDirectory = nullptr; // TDirectory::TContext ctxt(nullptr);; + auto r = fTreeView->GetTreeReader(c.first, c.second, treeNames, fileNames, fFriendInfo, fEntryList, {entries});; func(*r);; };; fPool.Foreach(processCluster, clusters);; ```; Some might require some redesign:; ```; // Avoid spin lock inside GetThisSlotNumber just to get a thread local value ... but is this value; // really the same for the life of the thread ... and if so why is the next bottleneck then in: ROOT::Internal::RSlotStack::ReturnSlot; diff --git a/core/thread/inc/ROOT/TThreadedObject.hxx b/core/thread/inc/ROOT/TThreadedObject.hxx; index b3d73228e3..cff216e67f 100644; --- a/core/thread/inc/ROOT/TThreadedObject.hxx; +++ b/core/thread/inc/ROOT/TThreadedObject.hxx; @@ -279,7 +279,8 @@ namespace ROOT {; /// ~~~; std::shared_ptr<T> Get(); {; - return GetAtSlot(GetThisSlotNumber());; + static thread_local unsigned thisSlotNumber = GetThisSlotNumber();; + return GetAtSlot(thisSlotNumber);; }; ; /// Access the wrapped object and allow to call its methods.; ```; The next bottleneck after that might be:; ```; #5 0x00007ffff01a8c69 in std::unique_lock<std::mutex>::unique_lock (this=0x7ffedfffd910, __m=...) at /usr/include/c++/11/bits/unique_lock.h:69; #6 0x00007ffff01ca1e9 in TClingClassInfo::Ge",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12761:3405,Avoid,Avoid,3405,https://root.cern,https://github.com/root-project/root/issues/12761,1,['Avoid'],['Avoid']
Safety,"s);; 	; 	// background used in model; 	RooRealVar fitargpar(""shape"", ""fit argus shape parameter"", -6.5, -8, -6);; 	RooRealVar fitpower(""power"", ""fit argus power parameter"", 0.5, 0, 1);; 	RooArgusBG fitbkg(""fitbkg"", ""Fit Background ARGUS"", x, RooConst(m0), fitargpar, fitpower);; 	RooRealVar fitnsig(""nsig"", ""signal number"", 0.6 * nevents, 0, 1.2 * nevents);; 	RooRealVar fitnbg(""nbg"", ""bg number"", 0.4 * nevents, 0, 1.2 * nevents);. 	// fitting model; 	RooAddPdf model(""model"", ""BW+a fitted"", RooArgList(fitsig, fitbkg), RooArgList(fitnsig, fitnbg));. 	RooMCStudy* mcstudy =; 		new RooMCStudy(mcdist, x, FitModel(model), Binned(kFALSE), Silence(), Extended(kFALSE),; 			FitOptions(Extended(kFALSE), PrintEvalErrors(-1), Save(kTRUE)));. 	RooDLLSignificanceMCSModule sigModule(""nsig"", 0);; 	mcstudy->addModule(sigModule);. 	mcstudy->generateAndFit(100, nevents, kTRUE);. 	std::cout << mcstudy->fitParDataSet() << std::endl;; }; ```. which results in . ```; [#0] ERROR:InputArguments -- RooDataSet::merge(fitParData_model_distribution) ERROR: datasets have different size; RooDataSet::fitParData_model_distribution[#mean_{gauss},#sigma_{gauss},nbg,nsig,power,shape,NLL,ngen,#mean_{gauss}err,#mean_{gauss}pull,#sigma_{gauss}err,#sigma_{gauss}pull,nbgerr,nbgpull,nsigerr,nsigpull,powererr,powerpull,shapeerr,shapepull] = 84 entries; ```. ### Setup; ROOT 6.22/02; WSL v2 with Ubuntu 20.04 ; Binay download (built for linuxx8664gcc). ### Additional context; RooDLLSignificanceMCSModule::finalizeRun() states that ` If a RooDataSet is returned, it must have a length equal to the number of toy experiments performed and will merged with the fitpar dataset of RooMCStudy. `, however that is not true.; If some of the toy experiments performed did not converge, the RooMCStudy dataset size is lower than the number of experiments. At the same time, there is no way (that i could find) to access the fit result status of current run from RooAbsMCStudyModule, making it hard to consistently avoid the merge error",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6949:3801,avoid,avoid,3801,https://root.cern,https://github.com/root-project/root/issues/6949,1,['avoid'],['avoid']
Safety,"s, ROOT complains as above. If the dot is _not_ at the; start of a path component (e.g., `LIBDIR=foo.libs`), then all is; fine. . So it seems that somewhere deep in the ROOT code, there is some; assumption about a dot (`.`) as the leading character of a; sub-directory name which shouldn't be there. As far as I can tell,; the dot makes the code think that the library loaded is the ROOT; executable (`<ROOTSYS>/bin/root.exe`) rather than the actual shared; library. The reason seems to be that, because of some bad stripping; of path components, the shared library isn't found by Cling and then; the binary image falls back to the executable binary image. . ## Why this is problematic . Many build tools (e.g., Autotools) uses temporary directories that; start with a dot (`.`), including for building examples and tests. The; current behaviour of ROOT prevents building production level packages; with these tools that has rigorous test suites and rich examples. . More than that, ROOT should not assume _anything_ given a path _name_.; Rather, it should use system tools to detect if a given path is a; directory, a file, or what not. File and directory names are; completely volatile and proper tools should be used to deduct what it; is the code is dealing with. ## Additional tests . Sub-directory with dot in name . 	$ make clean ; 	$ make test LIBDIR=foo.libs ; 	...; 	LD_LIBRARY_PATH=foo.libs:<ROOTSYS>/lib root -l -b -q Test.C. 	Processing Test.C...; 	this is a Foo; 	hello from a Foo; 	; Sub-directory with leading underscore . 	$ make clean ; 	$ make test LIBDIR=_libs; 	...; 	LD_LIBRARY_PATH=_libs:<ROOTSYS>/lib root -l -b -q Test.C. 	Processing Test.C...; 	this is a Foo; 	hello from a Foo; 	; Current directory . 	$ make clean ; 	$ make test LIBDIR=. ; 	...; 	LD_LIBRARY_PATH=.:<ROOTSYS>/lib root -l -b -q Test.C. 	Processing Test.C...; 	this is a Foo; 	hello from a Foo. [root-library-load-test.tar.gz](https://github.com/root-project/root/files/8843058/root-library-load-test.tar.gz)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10704:3425,detect,detect,3425,https://root.cern,https://github.com/root-project/root/issues/10704,1,['detect'],['detect']
Safety,s-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T12:58:37.332Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T12:58:41.023Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T12:58:42.361Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T12:58:42.361Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T12:58:42.877Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T12:58:45.528Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T12:59:31.741Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T13:00:12.046Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T13:00:22.838Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] . And 3 more. ### Failing tests:; - [projectroot.roottest.root.meta.roottest_root_meta_drawing](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/121132/testReport/projectroot.roottest.root/meta/roottest_root_meta_d,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8555#issuecomment-869689634:1279,redund,redundant,1279,https://root.cern,https://github.com/root-project/root/pull/8555#issuecomment-869689634,1,['redund'],['redundant']
Safety,s-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T12:58:41.023Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T12:58:42.361Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T12:58:42.361Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T12:58:42.877Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T12:58:45.528Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T12:59:31.741Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T13:00:12.046Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] ; - [2021-06-28T13:00:22.838Z] /mnt/build/workspace/root-pullrequests-build/build/include/TSystem.h:238:14: warning: redundant parentheses surrounding declarator [-Wredundant-parens] . And 3 more. ### Failing tests:; - [projectroot.roottest.root.meta.roottest_root_meta_drawing](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/121132/testReport/projectroot.roottest.root/meta/roottest_root_meta_drawing/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execInitOrder](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/121132/testReport/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8555#issuecomment-869689634:1462,redund,redundant,1462,https://root.cern,https://github.com/root-project/root/pull/8555#issuecomment-869689634,1,['redund'],['redundant']
Safety,"s-build/root/roofit/roofit/src/RooChebychev.cxx:235:17: error: cannot increment value of type 'ChebychevIterator&lt;double, Kind::First&gt;' ; - /build/jenkins/workspace/root-pullrequests-build/root/roofit/roofit/src/RooChebychev.cxx:241:13: error: cannot increment value of type 'ChebychevIterator&lt;double, Kind::First&gt;' ; - /build/jenkins/workspace/root-pullrequests-build/root/roofit/roofit/src/RooChebychev.cxx:241:20: error: cannot increment value of type 'ChebychevIterator&lt;double, Kind::First&gt;' . ### Warnings:; - /build/jenkins/workspace/root-pullrequests-build/root/roofit/roofit/src/RooChebychev.cxx:94:40: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - /build/jenkins/workspace/root-pullrequests-build/root/roofit/roofit/src/RooChebychev.cxx:102:39: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - /build/jenkins/workspace/root-pullrequests-build/root/roofit/roofit/src/RooChebychev.cxx:96:9: warning: variable declaration in a constexpr function is a C++14 extension [-Wc++14-extensions] ; - /build/jenkins/workspace/root-pullrequests-build/root/roofit/roofit/src/RooChebychev.cxx:97:7: warning: use of this statement in a constexpr function is a C++14 extension [-Wc++14-extensions] ; - /build/jenkins/workspace/root-pullrequests-build/root/roofit/roofit/src/RooChebychev.cxx:104:25: warning: variable declaration in a constexpr function is a C++14 extension [-Wc++14-extensions] ; - /build/jenkins/workspace/root-pullrequests-build/root/roofit/roofit/src/RooChebychev.cxx:105:7: warning: use of this statement in a constexpr function is a C++14 extension [-Wc++14-extensions] ; - /build/jenkins/workspace/root-pullrequests-build/root/roofit/roofit/src/RooChebychev.cxx:182:28: warning: variables 'iend' and 'i' used in loop condition not modified in lo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3775#issuecomment-489975352:2235,avoid,avoid,2235,https://root.cern,https://github.com/root-project/root/pull/3775#issuecomment-489975352,1,['avoid'],['avoid']
Safety,"s/userkey.pem --cert ~/.globus/usercert.pem --capath ; >>>>> /etc/grid-security/certificates; >>>>>; >>>>>; >>>>> regards,; >>>>> Asoka; >>>>>; >>>>>> On May 12, 2021, at 10:18 AM, Axel Naumann ; >>>>>> ***@***.*** ***@***.***>> wrote:; >>>>>>; >>>>>>; >>>>>> Right - without authentication I cannot see what's happening. ; >>>>>> /If/ this is due to a redirect it would be a dupe of #8155 ; >>>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8155&data=04%7C01%7Csimonliu%40triumf.ca%7C2bf615c9bb89486eaecd08d91571b94b%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564400461016279%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=Sfm43%2BJmWVsFVHOn7Tob%2BXe4STr003%2FgQQiBpBRgur0%3D&reserved=0> ; >>>>>> - if not then it's different :-) But I don't know how to tell ; >>>>>> whether it's a redirect. Do you?; >>>>>>; >>>>>> If not let's get #8155 ; >>>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8155&data=04%7C01%7Csimonliu%40triumf.ca%7C2bf615c9bb89486eaecd08d91571b94b%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564400461016279%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=Sfm43%2BJmWVsFVHOn7Tob%2BXe4STr003%2FgQQiBpBRgur0%3D&reserved=0> ; >>>>>> fixed and then we re-visit this one: either it's fixed, too, or ; >>>>>> we need to call in help from the Davix (?) folks.; >>>>>>; >>>>>> —; >>>>>> You are receiving this because you authored the thread.; >>>>>> Reply to this email directly, view it on GitHub ; >>>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8092%23issuecomment-839953723&data=04%7C01%7Csimonliu%40triumf.ca%7C2bf615c9bb89486eaecd08d91571b94b%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564400461026272%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiL",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840016493:8820,safe,safelinks,8820,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840016493,1,['safe'],['safelinks']
Safety,"s://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; Creating a branch in `TTree` with type `std::vector<A>` raises an internal error in ROOT, when class `A` inherits from a class that uses the old I/O system. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; Branch should be created successfully (I don't know if this behavior is supposed to be supported) or ROOT should abort with a more descriptive error message. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; Compile and run the following macro with `root -l -b -q T.C+`:; ```C++; #include <vector>; #include ""TTree.h"". #pragma link C++ class A;; #pragma link C++ class B+;; #pragma link C++ class std::vector<B>+;. struct A {; int x;; ClassDef(A, 1);; };; ClassImp(A);. struct B : A {; int y;; ClassDef(B, 1);; };; ClassImp(B);. void T() {; TTree* tree = new TTree(""T"", ""T"");; std::vector<B> bvec;; tree->Branch(""B"", &bvec);; }; ```; Macro aborts with the error: ; ```Fatal in <TBranchElement::InitializeOffsets>: Could not find the real data member 'B' when constructing the branch 'B' [Likely an internal error, please report to the developers].```. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; 1. ROOT version: 6.22.08 (built myself), 6.26.00 (binary download); 2. Operating System: Ubuntu 18.04. ### Additional context; <!--; Add any other context about the problem here.; -->; None.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10240:1587,abort,aborts,1587,https://root.cern,https://github.com/root-project/root/issues/10240,1,['abort'],['aborts']
Safety,"sClass` is from https://github.com/root-project/root/blob/master/core/meta/inc/TDictionary.h#L64 , but if I try the below cases, it told me that _this enum type `EProperty`_ from https://github.com/root-project/root/blob/master/core/cont/inc/TVirtualCollectionProxy.h#L49 ???; > ; > That may said, the compiler got confused about these two types that have same name?. That's interesting: `TGenCollectionStreamer` inherits from `TVirtualCollectionProxy` (via `TGenCollectionProxy`), so that `EProperty` is indeed ""closer"" than `::EProperty`. > > ""case value is not a constant expression"".; > ; > Humm ... either I don't understand the meaning or Clang is 'wrong' on this part. Both; > ; > ```; > EProperty(kIsPointer | kBIT_ISSTRING); > and; > kIsPointer | kBIT_ISSTRING; > ```; > ; > are ""constant"" (i.e calculatable at compile time). As discussed post-commit in https://reviews.llvm.org/D130058, the check is indeed questionable in a few corner cases. But that shouldn't stop us from finding a portable solution that avoids the problems altogether. > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type""; > > That may said, the compiler got confused about these two types that have same name?; > ; > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:; > ; > ```; > case ::EProperty(kBIT_ISSTRING):; > ```. The range checks of that new warning are also known bad for some cases, not sure if that is one of them... > > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type""; > > > That may said, the compiler got confused about these two types that have same name?; > > ; > > ; > > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:; > > ```; > > case ::EProperty(kBIT_ISSTRING):; > > ```; > ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11148#issuecomment-1208992073:1471,avoid,avoids,1471,https://root.cern,https://github.com/root-project/root/pull/11148#issuecomment-1208992073,1,['avoid'],['avoids']
Safety,"sable the rcanvas/rbox.py test which is failing with the following errors:; ```; Start 993: tutorial-rcanvas-rbox-py. 993: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python39-32/python.exe^C:/Users/bellenot/git/master/tutorials/launcher.py^C:/Users/bellenot/git/master/tutorials/rcanvas/rbox.py"" ""-DSYS=C:/Users/bellenot/build/release"" ""-DENV=ROOTSYS=C:/Users/bellenot/build/release#PYTHONPATH=C:/Users/bellenot/build/release/bin#PYTHIA8DATA=C:/Users/bellenot/libs/pythia8/8.3.03/share/Pythia8/xmldoc"" ""-P"" ""C:/Users/bellenot/build/release/RootTestDriver.cmake""; 993: Environment variables:; 993: ROOT_HIST=0; 993: Test timeout computed to be: 1500; 993: input_line_35:10:7: warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]; 993: ((const shared_ptr<ROOT::Experimental::RCanvas>*)obj)->operator-><ROOT::Experimental::RCanvas, 0>();; 993: ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; 993: input_line_39:10:7: warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]; 993: ((const shared_ptr<ROOT::Experimental::RBox>*)obj)->operator-><ROOT::Experimental::RBox, 0>();; 993: ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; 993: Traceback (most recent call last):; 993: File ""C:\Users\bellenot\git\master\tutorials\launcher.py"", line 34, in <module>; 993: spec.loader.exec_module(module); 993: File ""<frozen importlib._bootstrap_external>"", line 850, in exec_module; 993: File ""<frozen importlib._bootstrap>"", line 228, in _call_with_frames_removed; 993: File ""C:/Users/bellenot/git/master/tutorials/rcanvas/rbox.py"", line 24, in <module>; 993: box1.border.color = RColor.kBlue; 993: AttributeError: <class cppyy.gbl.ROOT.Experimental.RColor at 0x12092B98> has no attribute 'kBlue'. Full details:; 993: attribute access requires an instance; 993: 'ROOT::Experimental::RColor::kBlue' is not a known C",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9035:642,timeout,timeout,642,https://root.cern,https://github.com/root-project/root/pull/9035,1,['timeout'],['timeout']
Safety,"says ""Add **a** module for experimental/string_view""; The commit says:. That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context. The code says:; ```; module ""experimental/string_view"" {; export *; header ""experimental/algorithm""; }; ```; ; The commit content as-is seems completely unrelated to the commit log as far as I could tell (without doing research on the relationship between `range_base`, `string_view` and `algorithm`.; ; So I pondered whether the fix was the right fix for a problem I did not know anything about ... ; ; The right thing to do would have probably be have been to request a complete explanation of what the original problem was, what was the mechanism leading to the error and why this solution was the best solution. This was obviously much more than this seemingly simple fix required. So instead I thought to ask for a very low cost, straight forward solution: simply copy/pasting the error with no additional effort to explain in detail. > Can you suggest a commit message which adds enough information which makes me happy as well?. That requires to paraphrase the error and add a few more details. ```; That should fix a recent nightly failure with gcc11. The failure presented during dictionary generation in a C++14 and C++17 build and incorrectly complained about needing the 'cplusplus20' feature for the 'std.bits/ranges_base.h' module. The issue was triggered by an inclusion of `<bits/ranges_base.h>` from `string_view`. This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the experimental/string_view header file). . It seems the issue is solved by exporting `algorithm` as part of the `string_view` module.; ```. Actually, I still don't know why adding `algorithm` fixes a problem with `range_base.h`, so I can't add that to the commit ... maybe it is something like ""... by avoiding to use the module maps provided by the standard library in those case""?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12276#issuecomment-1430326540:1973,avoid,avoiding,1973,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430326540,1,['avoid'],['avoiding']
Safety,"secure) option.; >>>>>> ***@***.*** t5]$; >>>>>; >>>>>; >>>>> I am unfamiliar with how to use curl with X509 and everything I ; >>>>> tried so far has not worked. eg; >>>>> *curl*-v ; >>>>> https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root ; >>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Csimonliu%40triumf.ca%7C2bf615c9bb89486eaecd08d91571b94b%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564400461006280%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=9rNIbI2R5ESPtOLXdPFPq%2FjbCNRptjBM1fTLrmOZgEI%3D&reserved=0> ; >>>>> --key ~/.globus/userkey.pem --cert ~/.globus/usercert.pem; >>>>> or; >>>>> *curl*-v ; >>>>> https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root ; >>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Csimonliu%40triumf.ca%7C2bf615c9bb89486eaecd08d91571b94b%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564400461006280%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=9rNIbI2R5ESPtOLXdPFPq%2FjbCNRptjBM1fTLrmOZgEI%3D&reserved=0> ; >>>>> --key ~/.globus/userkey.pem --cert ~/.globus/usercert.pem --capath ; >>>>> /etc/grid-security/certificates; >>>>>; >>>>>; >>>>> regards,; >>>>> Asoka; >>>>>; >>>>>> On May 12, 2021, at 10:18 AM, Axel Naumann ; >>>>>> ***@***.*** ***@***.***>> wrote:; >>>>>>; >>>>>>; >>>>>> Right - without authentication I cannot see what's happening. ; >>>>>> /If/ this is due to a redirect it would be a dupe of #8155 ; >>>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8155&data=04",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840016493:7342,safe,safelinks,7342,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840016493,1,['safe'],['safelinks']
Safety,"see https://sft.its.cern.ch/jira/browse/ROOT-10300. If sub-class of TObject uses `=default` specifier for default constructor, all members (including from TObject) are initialized. By this special logic for TObject::kIsOnHeap bit is corrupted. The only solution for now - avoid such `= default` specifier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4320:272,avoid,avoid,272,https://root.cern,https://github.com/root-project/root/pull/4320,1,['avoid'],['avoid']
Safety,"self. [This patch has now been included in libzmq proper](https://github.com/zeromq/libzmq/pull/4255). Another blocking review comment was that libzmq symbols must not be allowed to be exported through our libraries. [This has been solved in theory, and in practice is pending another PR to libzmq](https://github.com/zeromq/libzmq/pull/4266). Having fixed these two blockers, we should now be able to continue. To recap:. > In this PR, we introduce two packages: RooFitZMQ and RooFit::MultiProcess. It also adds two builtins for ZeroMQ to ease dependency management: libzmq and cppzmq. The builtin for libzmq is especially necessary at this point because it has recently gained a necessary feature that has not been released yet.; > ; > RooFit::MultiProcess is a task-based parallelization framework.; > ; > It uses forked processes for parallelization, as opposed to threads. We chose this approach because A) the existing RooRealMPFE parallelization framework already made use of forks as well, so we had something to build on and B) it was at the time deemed infeasible to check the entire RooFit code for thread-safety. Moreover, we use MultiProcess to parallelize gradients -- i.e. the tasks to be executed in parallel are partial derivatives -- and these are sufficiently large tasks that communication in between tasks is not a big concern in the big fits that we aimed to parallelize.; > ; > The communication between processes is done using ZeroMQ. The ZeroMQ dependency is wrapped in convenience classes contributed by @roelaaij which here are packaged as RooFitZMQ. Will un-draft the PR once the following is done (based on previous review comments by @guitargeek @hageboeck @amadio @lmoneta and also some other things from myself):; - [x] includes: correct order (matching header, RooFit, ROOT, std) and ROOT includes in quotation marks; - [x] fix ZMQ deprecation warnings; - [x] refactor member names: underscore suffix; - [x] document important things with doxygen; - [x] remove comment",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9078:1320,safe,safety,1320,https://root.cern,https://github.com/root-project/root/pull/9078,1,['safe'],['safety']
Safety,"sercert.pem ; >>>>>>> --capath /etc/grid-security/certificates; >>>>>>>; >>>>>>>; >>>>>>> regards,; >>>>>>> Asoka; >>>>>>>; >>>>>>>> On May 12, 2021, at 10:18 AM, Axel Naumann ; >>>>>>>> ***@***.*** ***@***.***>> wrote:; >>>>>>>>; >>>>>>>>; >>>>>>>> Right - without authentication I cannot see what's happening. ; >>>>>>>> /If/ this is due to a redirect it would be a dupe of #8155 ; >>>>>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8155&data=04%7C01%7Csimonliu%40triumf.ca%7Ca59fceaddf634d196e5608d91576f34a%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564422909277340%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=zggbyYqBAFAg%2FMlgDfFg3zamaawZqBMBbmbK7glOxj4%3D&reserved=0> ; >>>>>>>> - if not then it's different :-) But I don't know how to tell ; >>>>>>>> whether it's a redirect. Do you?; >>>>>>>>; >>>>>>>> If not let's get #8155 ; >>>>>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8155&data=04%7C01%7Csimonliu%40triumf.ca%7Ca59fceaddf634d196e5608d91576f34a%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564422909277340%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=zggbyYqBAFAg%2FMlgDfFg3zamaawZqBMBbmbK7glOxj4%3D&reserved=0> ; >>>>>>>> fixed and then we re-visit this one: either it's fixed, too, or ; >>>>>>>> we need to call in help from the Davix (?) folks.; >>>>>>>>; >>>>>>>> —; >>>>>>>> You are receiving this because you authored the thread.; >>>>>>>> Reply to this email directly, view it on GitHub ; >>>>>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8092%23issuecomment-839953723&data=04%7C01%7Csimonliu%40triumf.ca%7Ca59fceaddf634d196e5608d91576f34a%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564422909287326%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840043080:10973,safe,safelinks,10973,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840043080,1,['safe'],['safelinks']
Safety,"sid). **command line used**: ; ```fish; clang++ -fsanitize=address $(root-config --cflags) long.cxx $(root-config --libs) -O#; ```; (where `# = 0,1,2,3`). **clang version**: ; ```; Debian clang version 16.0.6 (27); Target: x86_64-pc-linux-gnu; Thread model: posix; InstalledDir: /usr/bin; ```. The results were all the same independently on the opt level. ROOT was compiled from source from the `master` branch. Tried both in Debug and in RelWithDebSymbols modes. ROOT RelWithDebSymbols:; ```; ==7224==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 8176 byte(s) in 70 object(s) allocated from:; #0 0x55c975513f82 in malloc (/home/jp/a.out+0xb9f82) (BuildId: f22a18192d6097da92ce5b1350d6cc50f66c0c83); #1 0x7f3f1567d59a in clang::TemplateIdAnnotation::Create(clang::SourceLocation, clang::SourceLocation, clang::IdentifierInfo*, clang::OverloadedOperatorKind, clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<clang::ParsedTemplateArgument>, bool, llvm::SmallVectorImpl<clang::TemplateIdAnnotation*>&) (/home/jp/root_build/release/lib/libCling.so+0x147d59a) (BuildId: 3d3940bfa5d71a7ddadacb52dc8efab302b58bd0). SUMMARY: AddressSanitizer: 8176 byte(s) leaked in 70 allocation(s).; ```. ROOT Debug:; ```; ==6956==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 8904 byte(s) in 76 object(s) allocated from:; #0 0x557ce50baf82 in malloc (/home/jp/a.out+0xb9f82) (BuildId: f61cf0a7a2dabd0ff44f3a73dc969a3c8bbdbc6b); #1 0x7fe17b35224a in clang::TemplateIdAnnotation::Create(clang::SourceLocation, clang::SourceLocation, clang::IdentifierInfo*, clang::OverloadedOperatorKind, clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<clang::ParsedTemplateArgument>, bool, llvm::SmallVectorImpl<clang::TemplateIdAnnotation*>&) ParseExprCXX.cpp. SUMMARY: AddressSanitizer: 8904 byte(s) leaked in 76 allocation(s).; ```. There was no segfaults.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15818#issuecomment-2162394965:1412,detect,detected,1412,https://root.cern,https://github.com/root-project/root/issues/15818#issuecomment-2162394965,1,['detect'],['detected']
Safety,slc6/gcc62 error is:; ```; 19:29:14 Unknown option: -c; 19:29:14 usage: git [--version] [--exec-path[=GIT_EXEC_PATH]] [--html-path]; 19:29:14 [-p|--paginate|--no-pager] [--no-replace-objects]; 19:29:14 [--bare] [--git-dir=GIT_DIR] [--work-tree=GIT_WORK_TREE]; 19:29:14 [--help] COMMAND [ARGS]; 19:29:14 -- Cleaning up [git rebase --abort] in /var/build/jenkins/workspace/root-pullrequests-build/root; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2959#issuecomment-438388117:332,abort,abort,332,https://root.cern,https://github.com/root-project/root/pull/2959#issuecomment-438388117,1,['abort'],['abort']
Safety,"so after a quick git grep _REENTRANT through the system sources I see that nothing noteworthy is defining/using this macro, so i guess libc and other guts are thread safe by default (unless you count ncurses as guts ;) ). Now the interpreter thing: the build defs seem to be set by interpreter/llvm/src/tools/clang/lib/Basic/Targets/OSTargets.h for interpreted code - and that can rely on _REENTRANT being defined. Maybe there is some other place I don't know about.; Now the following patch also works, at least for TThread...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13069#issuecomment-1602565889:166,safe,safe,166,https://root.cern,https://github.com/root-project/root/pull/13069#issuecomment-1602565889,1,['safe'],['safe']
Safety,"sor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDescriptors_t &, TMVA::DNN::TCudnn<AFloat>::RNNWorkspace_t &) [with AFloat=Float_t]"" at line 43 of /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu. /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn/RecurrentPropagation.cu(571): error: identifier ""cudnnRNNBackwardWeights"" is undefined; status = cudnnRNNBackwardWeights(cudnnHandle, rnnDesc, seqLength, desc.xDesc.data(), x.GetDataPointer(),; ^; detected during instantiation of ""void TMVA::DNN::TCudnn<AFloat>::RNNBackward(const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDescriptors_t &, TMVA::DNN::TCudnn<AFloat>::RNNWorkspace_t &) [with AFloat=Float_t]"" at line 43 of /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu. /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn/RecurrentPropagation.cu(500): error: identifier ""cudnnRNNForwardTraining"" is undefined; cudnnStatus_t status = cudnnRNNForwardTraining(; ^; detected during instantiation of ""void TMVA::DNN::TCudnn<AFloat>::RNNForward(const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloa",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15413:3000,detect,detected,3000,https://root.cern,https://github.com/root-project/root/issues/15413,1,['detect'],['detected']
Safety,"space/lcg_nightly_pipeline/install/dev3/xrootd/5.3.1/x86_64-centos7-gcc9-dbg/include/xrootd;/build/jenkins/workspace/lcg_nightly_pipeline; /build/projects/ROOT-HEAD/src/ROOT/HEAD/proof/xrdinc; -- libraries: /build/jenkins/workspace/lcg_nightly_pipeline/install/dev3/xrootd/5.3.1/x86_64-centos7-gcc9-dbg/lib64/libXrdUtils.so;/build/jenkins/workspace/lcg_nightly_pipel; ine/install/dev3/xrootd/5.3.1/x86_64-centos7-gcc9-dbg/lib64/libXrdCl.so; -- Found GFAL: /build/jenkins/workspace/lcg_nightly_pipeline/install/dev3/Grid/gfal/1.13.0-0/x86_64-centos7-gcc9-dbg/include/.; -- Found DCAP: /build/jenkins/workspace/lcg_nightly_pipeline/install/dev3/Grid/dcap/2.47.7-1/x86_64-centos7-gcc9-dbg/include; -- Checking for module 'davix>=0.6.4'; -- Found davix, version 0.7.6; -- Looking for TBB; -- Found TBB: /build/jenkins/workspace/lcg_nightly_pipeline/install/dev3/tbb/2020_U2/x86_64-centos7-gcc9-dbg (found suitable version ""2020.2"", minimum required is ""2018""); -- Performing Test tbb_exception_result; -- Performing Test tbb_exception_result - Success; -- Detected Compiler: GCC 9.2.0; -- Performing Test check_cxx_compiler_flag__Wabi; -- Performing Test check_cxx_compiler_flag__Wabi - Success; -- Performing Test check_cxx_compiler_flag__fabi_version_0; -- Performing Test check_cxx_compiler_flag__fabi_version_0 - Success; -- Performing Test check_cxx_compiler_flag__fabi_compat_version_0; -- Performing Test check_cxx_compiler_flag__fabi_compat_version_0 - Success; -- Performing Test check_cxx_compiler_flag__ffp_contract_fast; -- Performing Test check_cxx_compiler_flag__ffp_contract_fast - Success; -- target changed from """" to ""auto""; -- Detected CPU: broadwell; -- Performing Test check_cxx_compiler_flag__march_broadwell; -- Performing Test check_cxx_compiler_flag__march_broadwell - Success; -- Performing Test check_cxx_compiler_flag__msse2; -- Performing Test check_cxx_compiler_flag__msse2 - Success; -- Performing Test check_cxx_compiler_flag__msse3; -- Performing Test check_cxx_compiler_f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9594#issuecomment-1015634743:11405,Detect,Detected,11405,https://root.cern,https://github.com/root-project/root/issues/9594#issuecomment-1015634743,1,['Detect'],['Detected']
Safety,"space/root-pullrequests-build/build/include/TF3.h:145:11: error: call to member function 'GetRange' is ambiguous . ### Warnings:; - [2020-09-28T08:11:55.604Z] /build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Utils/PlatformPosix.cpp:73:44: warning: type qualifiers ignored on cast result type [-Wignored-qualifiers] ; - [2020-09-28T08:12:00.548Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Pass.h:105:16: warning: ‘virtual bool llvm::Pass::doInitialization(llvm::Module&)’ was hidden [-Woverloaded-virtual] ; - [2020-09-28T08:12:00.548Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Transforms/IPO/Inliner.h:39:8: warning: by ‘virtual bool llvm::LegacyInlinerBase::doInitialization(llvm::CallGraph&)’ [-Woverloaded-virtual] ; - [2020-09-28T08:12:01.066Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:212:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:01.066Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:427:27: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:01.066Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:450:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:01.066Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:431:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-28T08:12:01.066Z] /build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/IncrementalJIT.h:108:74: warning: ‘llvm::orc::LegacyRTDyldObjectLinkingLayer::LegacyRTDyldObjectLinkingLayer(llvm::orc::ExecutionSession&, llvm::orc::LegacyRTDyldObjectLinkingLayer::ResourcesGetter, llvm::orc::Legacy",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-699853926:1323,redund,redundant,1323,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-699853926,1,['redund'],['redundant']
Safety,"ssions.; SetCTestConfiguration:CMakeCommand:/usr/bin/cmake; UpdateCTestConfiguration from :/scratchnvme/bendavid/rootdev2/build/DartConfiguration.tcl; Parse Config file:/scratchnvme/bendavid/rootdev2/build/DartConfiguration.tcl; Test project /scratchnvme/bendavid/rootdev2/build; Constructing a list of tests; Ignore test: roottest-cling-parsing-semicolon; Done constructing a list of tests; Updating test list for fixtures; Added 0 tests to meet fixture requirements; Checking test dependency graph...; Checking test dependency graph end; test 76; Start 76: gtest-core-thread-test-corethreadtestUnit. 76: Test command: /usr/bin/cmake ""-DCMD=/scratchnvme/bendavid/rootdev2/build/core/thread/test/corethreadtestUnit"" ""-DCWD=/scratchnvme/bendavid/rootdev2/build/core/thread/test"" ""-DSYS=/scratchnvme/bendavid/rootdev2/build"" ""-P"" ""/scratchnvme/bendavid/rootdev2/root/cmake/modules/RootTestDriver.cmake""; 76: Environment variables: ; 76: ROOT_HIST=0; 76: Test timeout computed to be: 1500; 76: Running main() from /scratchnvme/bendavid/rootdev2/build/googletest-prefix/src/googletest/googletest/src/gtest_main.cc; 76: [==========] Running 104 tests from 3 test suites.; 76: [----------] Global test environment set-up.; 76: [----------] 6 tests from InterpreterLock; 76: [ RUN ] InterpreterLock.ConcurrentCalc; 76: [ OK ] InterpreterLock.ConcurrentCalc (112 ms); 76: [ RUN ] InterpreterLock.ReadLocks; 76: [ OK ] InterpreterLock.ReadLocks (95 ms); 76: [ RUN ] InterpreterLock.BalancedUserReadLock; 76: [ OK ] InterpreterLock.BalancedUserReadLock (210 ms); 76: [ RUN ] InterpreterLock.BalancedUserWriteLock; 76: [ OK ] InterpreterLock.BalancedUserWriteLock (198 ms); 76: [ RUN ] InterpreterLock.UnBalancedUserReadLock; 76: [ OK ] InterpreterLock.UnBalancedUserReadLock (146 ms); 76: [ RUN ] InterpreterLock.UnBalancedUserWriteLock; 76: [ OK ] InterpreterLock.UnBalancedUserWriteLock (96 ms); 76: [----------] 6 tests from InterpreterLock (857 ms total); 76: ; 76: [----------] 88 tests from RWLock; 76: [ ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-741456188:1748,timeout,timeout,1748,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-741456188,1,['timeout'],['timeout']
Safety,"st):; File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless; _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""); File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary; np.testing.assert_array_almost_equal(y_xgb, y_bdt); File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner; return func(*args, **kwds); ^^^^^^^^^^^^^^^^^^^; File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 1034, in assert_array_almost_equal; assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,; File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py"", line 81, in inner; return func(*args, **kwds); ^^^^^^^^^^^^^^^^^^^; File ""/Users/vpadulan/Programs/python-venvs/root-dev/lib/python3.12/site-packages/numpy/testing/_private/utils.py"", line 797, in assert_array_compare; raise AssertionError(msg); AssertionError:; Arrays are not almost equal to 6 decimals. Mismatched elements: 1000 / 1000 (100%); Max absolute difference: 0.34220904; Max relative difference: 0.78311133; x: array([0.698255, 0.875646, 0.785947, 0.813333, 0.254368, 0.882497,; 0.74103 , 0.150452, 0.859295, 0.71447 , 0.637931, 0.218663,; 0.338688, 0.2761 , 0.488564, 0.569222, 0.849197, 0.854105,...; y: array([0.697412, 0.87521 , 0.785273, 0.812725, 0.26237 , 0.882081,; 0.740262, 0.149942, 0.817386, 0.713653, 0.637007, 0.555826,; 0.326997, 0.275301, 0.487565, 0.568241, 0.848684, 0.853606,...; ```. Which is a further demonstration that this test was never run. I propose we disable the test, to avoid having the CI needlessly red. The test should be re-enabled then by https://github.com/root-project/root/pull/15173 which is the actual fix for this buggy behaviour",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15183#issuecomment-2046134260:3339,avoid,avoid,3339,https://root.cern,https://github.com/root-project/root/pull/15183#issuecomment-2046134260,1,['avoid'],['avoid']
Safety,stReport/projectroot.roottest.python/cling/roottest_python_cling_class/); - [projectroot.roottest.root.io.complex.roottest_root_io_complex_writecomplex](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36513/testReport/projectroot.roottest.root.io/complex/roottest_root_io_complex_writecomplex/); - [projectroot.roottest.python.cling.roottest_python_cling_api](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36513/testReport/projectroot.roottest.python/cling/roottest_python_cling_api/); - [projectroot.roottest.root.html.roottest_root_html_runClassInModule_WILL_FAIL](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36513/testReport/projectroot.roottest.root/html/roottest_root_html_runClassInModule_WILL_FAIL/); - [projectroot.roottest.root.io.emulated.roottest_root_io_emulated_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36513/testReport/projectroot.roottest.root.io/emulated/roottest_root_io_emulated_make/); - [projectroot.roottest.root.io.recover.roottest_root_io_recover_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36513/testReport/projectroot.roottest.root.io/recover/roottest_root_io_recover_make/); - [projectroot.roottest.root.io.stdarray.roottest_root_io_stdarray_checkRealData](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36513/testReport/projectroot.roottest.root.io/stdarray/roottest_root_io_stdarray_checkRealData/); - [projectroot.roottest.root.tree.cache.roottest_root_tree_cache_multiTree](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36513/testReport/projectroot.roottest.root.tree/cache/roottest_root_tree_cache_multiTree/); - [projectroot.roottest.root.io.tree.roottest_root_io_tree_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36513/testReport/projectroot.roottest.root.io/tree/roottest_root_io_tree_make/); - [projectroot.roottest.root.tree.array.roottest_root_tree_array_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36513/testReport/projec,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2464#issuecomment-411491918:1277,recover,recover,1277,https://root.cern,https://github.com/root-project/root/pull/2464#issuecomment-411491918,1,['recover'],['recover']
Safety,"std::set was not good because it sorted libraries by alphabetical order; and didn't preserve LD_LIBRARY_PATH order information. We can use; std::vector instead. (Erasing rarely happens and doesn't cost so much). Path prefix like ""/home/yuka/modules/lib/"" costs memory, I; think it makes sense to avoid path duplication in sLibraries and make sPaths; vector for this prefix. With this patch; ```; Processing tutorials/hsimple.C...; hsimple : Real Time = 0.14 seconds Cpu Time = 0.14 seconds; (TFile *) 0x31eb0d0; Processing memory.C...; cpu time = 0.861813 seconds; sys time = 0.155326 seconds; res memory = 178.988 Mbytes; vir memory = 435.332 Mbytes; ```. w/o; ```; Processing tutorials/hsimple.C...; hsimple : Real Time = 0.21 seconds Cpu Time = 0.20 seconds; (TFile *) 0x30db6e0; Processing memory.C...; cpu time = 1.266833 seconds; sys time = 0.227562 seconds; res memory = 178.965 Mbytes; vir memory = 435.301 Mbytes; ```. Actually cpu time improved",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2137:296,avoid,avoid,296,https://root.cern,https://github.com/root-project/root/pull/2137,1,['avoid'],['avoid']
Safety,"std::string &s2);; ^; /home/user/builds/build-root_src-Desktop-Debug/include/TString.h:51:9: note: candidate function; TString operator+(const char *cs, const TString &s);; ^; /home/user/builds/build-root_src-Desktop-Debug/include/TEveUtil.h:117:15: note: candidate function; TEveException operator+(const TEveException &s1, const TString &s2);; ^; root.exe: /opt/root_src/core/metacling/src/TCling.cxx:2326: virtual void TCling::RegisterModule(const char*, const char**, const char**, const char*, const char*, void (*)(), const FwdDeclArgsToKeepCollection_t&, const char**, Bool_t, Bool_t): Assertion `cling::Interpreter::kSuccess == compRes && ""Payload code of a dictionary could not be parsed correctly.""' failed.; ```. When running with gdb, I get:. ```; (gdb) run; Starting program: /home/user/builds/build-root_src-Desktop-Debug/bin/root.exe -b /tmp/test.cpp+; warning: File ""/home/user/builds/build-root_src-Desktop-Debug/lib/libCore.so-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; 	add-auto-load-safe-path /home/user/builds/build-root_src-Desktop-Debug/lib/libCore.so-gdb.py; line to your configuration file ""/home/user/.gdbinit"".; To completely disable this security protection add; 	set auto-load safe-path /; line to your configuration file ""/home/user/.gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; 	info ""(gdb)Auto-loading safe path""; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; ------------------------------------------------------------------; | Welcome to ROOT 6.25/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jun 08 2021, 21:53:04 |; | From heads/master@v6-25-01-1189-g1ca221f010 |; | With |; | Try '.help', '.demo', ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8524#issuecomment-870074605:2661,safe,safe-path,2661,https://root.cern,https://github.com/root-project/root/issues/8524#issuecomment-870074605,1,['safe'],['safe-path']
Safety,"sterModule(const char*, const char**, const char**, const char*, const char*, void (*)(), const FwdDeclArgsToKeepCollection_t&, const char**, Bool_t, Bool_t): Assertion `cling::Interpreter::kSuccess == compRes && ""Payload code of a dictionary could not be parsed correctly.""' failed.; ```. When running with gdb, I get:. ```; (gdb) run; Starting program: /home/user/builds/build-root_src-Desktop-Debug/bin/root.exe -b /tmp/test.cpp+; warning: File ""/home/user/builds/build-root_src-Desktop-Debug/lib/libCore.so-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; 	add-auto-load-safe-path /home/user/builds/build-root_src-Desktop-Debug/lib/libCore.so-gdb.py; line to your configuration file ""/home/user/.gdbinit"".; To completely disable this security protection add; 	set auto-load safe-path /; line to your configuration file ""/home/user/.gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; 	info ""(gdb)Auto-loading safe path""; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; ------------------------------------------------------------------; | Welcome to ROOT 6.25/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jun 08 2021, 21:53:04 |; | From heads/master@v6-25-01-1189-g1ca221f010 |; | With |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root [0] ; Processing /tmp/test.cpp+...; In file included from test_cpp_ACLiC_dict dictionary payload:8:; /tmp/test.cpp:6:29: error: use of overloaded operator '+' is ambiguous (with operand types 'TString' and 'std::__cxx11::string' (aka 'basic_string<char>')); TString tryit = other + ""h"" + std::to_string(2);; ~~~~~~~~~~~ ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8524#issuecomment-870074605:3112,safe,safe,3112,https://root.cern,https://github.com/root-project/root/issues/8524#issuecomment-870074605,1,['safe'],['safe']
Safety,"structing a list of tests; Ignore test: test-tcollex; Ignore test: roottest-cling-parsing-semicolon; Ignore test: roottest-root-rint-TabCom; Ignore test: roottest-root-rint-BackslashNewline; Done constructing a list of tests; Updating test list for fixtures; Added 0 tests to meet fixture requirements; Checking test dependency graph...; Checking test dependency graph end; test 2338; Start 2338: gtestC--root-dev-git-roottest-root-tree-readrules-gh-14462-gh14462regression. 2338: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/root-dev/build/x64/relwithdebinfo/roottest/root/tree/readrules/gh-14462/RelWithDebInfo/gh14462regression.exe"" ""-DCWD=C:/root-dev/build/x64/relwithdebinfo/roottest/root/tree/readrules/gh-14462"" ""-DSYS=C:/root-dev/build/x64/relwithdebinfo"" ""-P"" ""C:/root-dev/build/x64/relwithdebinfo/RootTestDriver.cmake""; 2338: Working Directory: C:/root-dev/build/x64/relwithdebinfo/roottest/root/tree/readrules/gh-14462; 2338: Environment variables:; 2338: ROOT_HIST=0; 2338: Test timeout computed to be: 1500; 2338: Running main() from C:\root-dev\build\x64\relwithdebinfo\googletest-prefix\src\googletest\googletest\src\gtest_main.cc; 2338: [==========] Running 1 test from 1 test suite.; 2338: [----------] Global test environment set-up.; 2338: [----------] 1 test from ReadRules; 2338: [ RUN ] ReadRules.CustomReadRuleWithSpace; 2338: Error in TCling::LoadPCM ROOT PCM C:\root-dev\build\x64\relwithdebinfo\roottest\root\tree\readrules\gh-14462\RelWithDebInfo\gh14462regressionDict_rdict.pcm file does not exist; 2338: [ OK ] ReadRules.CustomReadRuleWithSpace (317 ms); 2338: [----------] 1 test from ReadRules (317 ms total); 2338:; 2338: [----------] Global test environment tear-down; 2338: [==========] 1 test from 1 test suite ran. (317 ms total); 2338: [ PASSED ] 1 test.; 1/1 Test #2338: gtestC--root-dev-git-roottest-root-tree-readrules-gh-14462-gh14462regression ... Passed 0.41 sec. The following tests passed:; gtestC--root-dev-git-roottest-root-tree-readrul",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9354#issuecomment-2370611327:1574,timeout,timeout,1574,https://root.cern,https://github.com/root-project/root/issues/9354#issuecomment-2370611327,1,['timeout'],['timeout']
Safety,"sure, but I am now thinking of the user's perspective, if someone's default browser is ""safari"" and they are not aware that chrome, and hence always running ""root --web=chrome"" instead of just ""root"", provides the best functionality, they would also run into some issues like I did. I'm just thinking of how to communicate this well so that user issues are avoided (and I don't think this is explained anywhere yet, unless I am wrong, but then where is it explained?) . I now also tried doing the same but with firefox and I also run into issues . ![Screenshot 2023-11-14 at 14 20 05](https://github.com/root-project/root/assets/80402204/02710082-1104-4cf4-9a08-1aec4575aa21); <img width=""1275"" alt=""Screenshot 2023-11-14 at 14 20 15"" src=""https://github.com/root-project/root/assets/80402204/7b55511e-ed78-4321-b279-7abd2d278f3d"">",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14051#issuecomment-1810197357:357,avoid,avoided,357,https://root.cern,https://github.com/root-project/root/issues/14051#issuecomment-1810197357,1,['avoid'],['avoided']
Safety,"t TEveException &s1, const TString &s2);; ^; root.exe: /opt/root_src/core/metacling/src/TCling.cxx:2326: virtual void TCling::RegisterModule(const char*, const char**, const char**, const char*, const char*, void (*)(), const FwdDeclArgsToKeepCollection_t&, const char**, Bool_t, Bool_t): Assertion `cling::Interpreter::kSuccess == compRes && ""Payload code of a dictionary could not be parsed correctly.""' failed.; ```. When running with gdb, I get:. ```; (gdb) run; Starting program: /home/user/builds/build-root_src-Desktop-Debug/bin/root.exe -b /tmp/test.cpp+; warning: File ""/home/user/builds/build-root_src-Desktop-Debug/lib/libCore.so-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; 	add-auto-load-safe-path /home/user/builds/build-root_src-Desktop-Debug/lib/libCore.so-gdb.py; line to your configuration file ""/home/user/.gdbinit"".; To completely disable this security protection add; 	set auto-load safe-path /; line to your configuration file ""/home/user/.gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; 	info ""(gdb)Auto-loading safe path""; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; ------------------------------------------------------------------; | Welcome to ROOT 6.25/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jun 08 2021, 21:53:04 |; | From heads/master@v6-25-01-1189-g1ca221f010 |; | With |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root [0] ; Processing /tmp/test.cpp+...; In file included from test_cpp_ACLiC_dict dictionary payload:8:; /tmp/test.cpp:6:29: error: use of overloaded operator '+' is ambiguous (with operand types",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8524#issuecomment-870074605:2968,safe,safe-path,2968,https://root.cern,https://github.com/root-project/root/issues/8524#issuecomment-870074605,1,['safe'],['safe-path']
Safety,"t TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDescriptors_t &, TMVA::DNN::TCudnn<AFloat>::RNNWorkspace_t &) [with AFloat=Float_t]"" at line 43 of /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu. /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn/RecurrentPropagation.cu(500): error: identifier ""cudnnRNNForwardTraining"" is undefined; cudnnStatus_t status = cudnnRNNForwardTraining(; ^; detected during instantiation of ""void TMVA::DNN::TCudnn<AFloat>::RNNForward(const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDescriptors_t &, TMVA::DNN::TCudnn<AFloat>::RNNWorkspace_t &, bool) [with AFloat=Double_t]"" at line 44 of /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu. /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn/RecurrentPropagation.cu(513): error: identifier ""cudnnRNNForwardInference"" is undefined; cudnnStatus_t status = cudnnRNNForwardInference(; ^; detected during instantiation of ""void TMVA::DNN::TCudnn<AFloat>::RNNForward(const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDesc",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15413:4007,detect,detected,4007,https://root.cern,https://github.com/root-project/root/issues/15413,1,['detect'],['detected']
Safety,t [-Wredundant-move] ; - [2020-09-27T10:35:18.058Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:427:27: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:35:18.058Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:450:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:35:22.960Z] /build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Utils/PlatformPosix.cpp:73:44: warning: type qualifiers ignored on cast result type [-Wignored-qualifiers] ; - [2020-09-27T10:36:57.561Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Pass.h:105:16: warning: ‘virtual bool llvm::Pass::doInitialization(llvm::Module&)’ was hidden [-Woverloaded-virtual] ; - [2020-09-27T10:36:57.562Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Transforms/IPO/Inliner.h:39:8: warning: by ‘virtual bool llvm::LegacyInlinerBase::doInitialization(llvm::CallGraph&)’ [-Woverloaded-virtual] ; - [2020-09-27T10:36:57.827Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:212:23: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:36:57.827Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:427:27: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:36:57.827Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/Bitstream/BitstreamReader.h:450:25: warning: redundant move in return statement [-Wredundant-move] ; - [2020-09-27T10:36:58.773Z] /build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:431:25: warning: redundant move in return statement [-Wredundant-move] . And 259 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-699617774:2126,redund,redundant,2126,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-699617774,4,['redund'],['redundant']
Safety,"t-roofit-roofitcore-test-testSumW2Error (Failed); 	294 - gtest-roofit-roofitcore-test-testLikelihoodGradientJob (Failed); 	295 - gtest-roofit-roofitcore-test-testLikelihoodJob (Failed); 	298 - gtest-roofit-roostats-test-testSPlot (Failed). Here is an example failure:; ```; 331/1268 Test #292: gtest-roofit-roofitcore-test-testSumW2Error ...............................***Failed 0.58 sec; Running main() from /builddir/build/BUILD/googletest-1.14.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TChainParsing.RemoteGlob:TFile.ReadWithoutGlobalRegistrationNet:TFile.ReadWithoutGlobalRegistrationWeb:RNTuple.TClassEBO; [==========] Running 2 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 2 tests from SumW2Error; [ RUN ] SumW2Error.BatchMode; /builddir/build/BUILD/root-6.30.02/core/testsupport/src/TestSupport.cxx:77: Failure; Failed; Received unexpected diagnostic of severity 2000 at 'RooNaNPacker' reading 'Fast recovery from undefined function values only implemented for little-endian machines. If necessary, request an extension of functionality on https://root.cern'.; Suppress those using ROOT/TestSupport.hxx; [ FAILED ] SumW2Error.BatchMode (408 ms); [ RUN ] SumW2Error.ExtendedFit; [ OK ] SumW2Error.ExtendedFit (112 ms); [----------] 2 tests from SumW2Error (521 ms total); [----------] Global test environment tear-down; [==========] 2 tests from 1 test suite ran. (521 ms total); [ PASSED ] 1 test.; [ FAILED ] 1 test, listed below:; [ FAILED ] SumW2Error.BatchMode; 1 FAILED TEST; CMake Error at /builddir/build/BUILD/root-6.30.02/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ```; Normally, when root issues a warning it is not fatal, and program execution continues. However, this is a test, and the ROOT::TestSupport installs a custum error handler that captures warnings and rethrow them as GTest failures. So it this contaext a warning is expected to generate a fai",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10303#issuecomment-1837156931:2275,recover,recovery,2275,https://root.cern,https://github.com/root-project/root/pull/10303#issuecomment-1837156931,1,['recover'],['recovery']
Safety,t.tree.cache.roottest_root_tree_cache_autocache](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30062/testReport/projectroot.roottest.root.tree/cache/roottest_root_tree_cache_autocache/); - [projectroot.io.io.test.gtest_io_io_test_test_io](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30062/testReport/projectroot.io.io/test/gtest_io_io_test_test_io/); - [projectroot.test.test_stressHistFactory_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30062/testReport/projectroot/test/test_stressHistFactory_interpreted/); - [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_snapshot](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30062/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_dataframe_snapshot/); - [projectroot.roottest.root.io.recover.roottest_root_io_recover_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30062/testReport/projectroot.roottest.root.io/recover/roottest_root_io_recover_make/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_mixedBase_merge1](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30062/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_mixedBase_merge1/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_mixedBase_merge2](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30062/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_mixedBase_merge2/); - [projectroot.roottest.root.tree.chain.roottest_root_tree_chain_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30062/testReport/projectroot.roottest.root.tree/chain/roottest_root_tree_chain_make/); - [projectroot.roottest.root.tree.cloning.roottest_root_tree_cloning_assertBranchCount](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30062/testReport/projectroot.roottest.root.tree/cloning/roottest_root_tree_cloning_assertBranchCount/). And 5 mo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2188#issuecomment-396924388:3801,recover,recover,3801,https://root.cern,https://github.com/root-project/root/pull/2188#issuecomment-396924388,1,['recover'],['recover']
Safety,t.tree.cache.roottest_root_tree_cache_autocache](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30063/testReport/projectroot.roottest.root.tree/cache/roottest_root_tree_cache_autocache/); - [projectroot.io.io.test.gtest_io_io_test_test_io](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30063/testReport/projectroot.io.io/test/gtest_io_io_test_test_io/); - [projectroot.test.test_stressHistFactory_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30063/testReport/projectroot/test/test_stressHistFactory_interpreted/); - [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_snapshot](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30063/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_dataframe_snapshot/); - [projectroot.roottest.root.io.recover.roottest_root_io_recover_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30063/testReport/projectroot.roottest.root.io/recover/roottest_root_io_recover_make/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_mixedBase_merge1](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30063/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_mixedBase_merge1/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_mixedBase_merge2](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30063/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_mixedBase_merge2/); - [projectroot.roottest.root.tree.cloning.roottest_root_tree_cloning_assertBranchCount](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30063/testReport/projectroot.roottest.root.tree/cloning/roottest_root_tree_cloning_assertBranchCount/); - [projectroot.roottest.root.tree.chain.roottest_root_tree_chain_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30063/testReport/projectroot.roottest.root.tree/chain/roottest_root_tree_chain_make/). And 5 mo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2188#issuecomment-396933089:1313,recover,recover,1313,https://root.cern,https://github.com/root-project/root/pull/2188#issuecomment-396933089,1,['recover'],['recover']
Safety,"t/swunsch/build/bin:/home/sftnight/swunsch/python/bin:/home/sftnight/.local/bin:/home/sftnight/bin:/usr/lib64/ccache:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin#PYTHONPATH=/home/sftnight/swunsch/build/lib:#LD_LIBRARY_PATH=/home/sftnight/swunsch/build/lib:/home/sftnight/swunsch/python/lib:"" ""-DCOPY=/home/sftnight/swunsch/root/roottest/python/basic/ArgumentPassingCompiled.C^/home/sftnight/swunsch/root/roottest/python/basic/ReturnValues.C^/home/sftnight/swunsch/root/roottest/python/basic/SimpleClass.C^/home/sftnight/swunsch/root/roottest/python/basic/ArgumentPassingInterpreted.C"" ""-P"" ""/home/sftnight/swunsch/build/RootTestDriver.cmake""; 1312: Environment variables: ; 1312: ROOT_HIST=0; 1312: Test timeout computed to be: 300; 1312: Info in <TUnixSystem::ACLiC>: creating shared library /home/sftnight/swunsch/build/roottest/python/basic/./ArgumentPassingCompiled_C.so; 1312: ; 1312: -- TEST COMMAND -- ; 1312: cd /home/sftnight/swunsch/build/roottest/python/basic; 1312: /usr/bin/timeout -s USR2 270s /home/sftnight/swunsch/python/bin/python3 /home/sftnight/swunsch/root/roottest/python/basic/PyROOT_basictests.py --fixcling; 1312: -- BEGIN TEST OUTPUT --; 1312: INTERNALERROR> Traceback (most recent call last):; 1312: INTERNALERROR> File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytest/main.py"", line 77, in wrap_session; 1312: INTERNALERROR> config.do_configure(); 1312: INTERNALERROR> File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytest/config.py"", line 608, in do_configure; 1312: INTERNALERROR> self.hook.pytest_configure(config=self); 1312: INTERNALERROR> File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytest/core.py"", line 377, in __call__; 1312: INTERNALERROR> return self._docall(methods, kwargs); 1312: INTERNALERROR> File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytest/core.py"", line 388, in _docall; 1312: INTERNALERROR> res = mc.execute(); 1312: INTERNALERROR> File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytes",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6597:2167,timeout,timeout,2167,https://root.cern,https://github.com/root-project/root/issues/6597,1,['timeout'],['timeout']
Safety,"t;' ; - [2021-05-04T11:52:39.407Z] /Volumes/HD2/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:488:48: error: no type named 'const_iterator' in 'ROOT::Internal::VecOps::SmallVectorTemplateBase&lt;int, true&gt;' ; - [2021-05-04T11:52:39.407Z] /Volumes/HD2/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:489:43: error: no type named 'reference' in 'ROOT::Internal::VecOps::SmallVectorTemplateBase&lt;int, true&gt;' ; - [2021-05-04T11:52:39.407Z] /Volumes/HD2/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:490:43: error: no type named 'size_type' in 'ROOT::Internal::VecOps::SmallVectorTemplateBase&lt;int, true&gt;' ; - [2021-05-04T11:52:39.407Z] /Volumes/HD2/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1285:27: error: no type named 'pointer' in 'ROOT::VecOps::RVec&lt;int&gt;' ; - [2021-05-04T11:52:39.407Z] /Volumes/HD2/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1527:1: error: no member named 'begin' in 'ROOT::VecOps::RVec&lt;int&gt;' ; - [2021-05-04T11:52:39.407Z] /Volumes/HD2/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1527:1: error: no member named 'begin' in 'ROOT::VecOps::RVec&lt;int&gt;' ; - [2021-05-04T11:52:39.407Z] /Volumes/HD2/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1527:1: error: no member named 'begin' in 'ROOT::VecOps::RVec&lt;int&gt;' . And 32 more. ### Warnings:; - [2021-05-04T11:52:39.407Z] /Volumes/HD2/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:193:19: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - [2021-05-04T11:52:40.545Z] /Volumes/HD2/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:193:19: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-831882989:2421,avoid,avoid,2421,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-831882989,2,['avoid'],['avoid']
Safety,"t>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDescriptors_t &, TMVA::DNN::TCudnn<AFloat>::RNNWorkspace_t &, bool) [with AFloat=Float_t]"" at line 43 of /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu. /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn/RecurrentPropagation.cu(545): error: identifier ""cudnnRNNBackwardData"" is undefined; cudnnStatus_t status = cudnnRNNBackwardData(; ^; detected during instantiation of ""void TMVA::DNN::TCudnn<AFloat>::RNNBackward(const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDescriptors_t &, TMVA::DNN::TCudnn<AFloat>::RNNWorkspace_t &) [with AFloat=Float_t]"" at line 43 of /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu. /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn/RecurrentPropagation.cu(571): error: identifier ""cudnnRNNBackwardWeights"" is undefined; status = cudnnRNNBackwardWeights(cudnnHandle, rnnDesc, seqLength, desc.xDesc.data(), x.GetDataPointer(),; ^; detected during instantiation of ""void TMVA::DNN::TCudnn<AFloat>::RNNBackward(const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15413:1936,detect,detected,1936,https://root.cern,https://github.com/root-project/root/issues/15413,1,['detect'],['detected']
Safety,"tStats=<optimized out>, SkipFunctionBodies=<optimized out>) at /home/yuka/root/interpreter/llvm/src/tools/clang/lib/Parse/ParseAST.cpp:159; #4 0x00007ffff1d67996 in clang::FrontendAction::Execute (this=this@entry=0x7fffeb7f9c00) at /home/yuka/root/interpreter/llvm/src/tools/clang/lib/Frontend/FrontendAction.cpp:896; #5 0x00007ffff1d302f4 in clang::CompilerInstance::ExecuteAction (this=0x7fffebff7ed0, Act=...) at /home/yuka/root/interpreter/llvm/src/tools/clang/lib/Frontend/CompilerInstance.cpp:984; #6 0x00007ffff1d309af in <lambda()>::operator() (__closure=0x7fffebff7db0) at /home/yuka/root/interpreter/llvm/src/tools/clang/lib/Frontend/CompilerInstance.cpp:1154; #7 llvm::function_ref<void()>::callback_fn<compileModuleImpl(clang::CompilerInstance&, clang::SourceLocation, llvm::StringRef, clang::FrontendInputFile, llvm::StringRef, llvm::StringRef, llvm::function_ref<void(clang::CompilerInstance&)>, llvm::function_ref<void(clang::CompilerInstance&)>)::<lambda()> >(intptr_t) (callable=140737152777648) at /usr/include/llvm/ADT/STLExtras.h:98; #8 0x00007ffff43bffb3 in llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) () from /home/yuka/module-relwithdeb/lib/libCling.so; #9 0x00007ffff43c00a5 in RunSafelyOnThread_Dispatch(void*) () from /home/yuka/module-relwithdeb/lib/libCling.so; #10 0x00007ffff44360ad in ExecuteOnThread_Dispatch(void*) () from /home/yuka/module-relwithdeb/lib/libCling.so; #11 0x00007ffff6e3d08c in start_thread () from /usr/lib/libpthread.so.0; #12 0x00007ffff6b74e7f in clone () from /usr/lib/libc.so.6; ```; My point is; 1. In user's machine, I think it is unlikely that LD_LIBRARY_PATH and DYLD_LIBRARY_PATH is unset because if ROOT is successfully installed in the machine, they should be set. Thus I'm not 100% sure that we should add DynamicPath to search because it causes overhead in the lookup.; 2. Instead, I think we can change Clang code to abort when it generates implicit modules on-demand and emit error messages. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1761#issuecomment-377492896:5941,abort,abort,5941,https://root.cern,https://github.com/root-project/root/pull/1761#issuecomment-377492896,1,['abort'],['abort']
Safety,"t_src/proof/proof/src/TDataSetManager.cxx:1267; 32: Assuming 'newStagedFiles' is equal to 'flist' in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1268; 33: Taking false branch in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1268; 34: Assuming 'mss' is null in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1270; 35: Left side of '&&' is false in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1270; 36: 'stager' is null in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1271; 37: '?' condition is false in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1271; 38: Loop condition is false. Execution continues on line 1304 in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1280; 39: 'stager' is null in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1304; 40: expanded from macro 'SafeDelete' in /opt/root_src/core/foundation/inc/ROOT/RConfig.hxx:522; 41: Taking false branch in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1304; 42: expanded from macro 'SafeDelete' in /opt/root_src/core/foundation/inc/ROOT/RConfig.hxx:522; 43: 'getlistonly' is true in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1307; 44: Taking true branch in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1307; 45: Assuming 'dbg' is true in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1308; 46: Left side of '&&' is true in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1308; 47: Called C++ object pointer is null in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1308; /opt/root_src/proof/proof/src/TDataSetManager.cxx:1774:4: warning: Value stored to 'rc' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'rc' is never read in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1774; /opt/root_src/proof/proof/src/TDataSetManagerFile.cxx:1553:12: warning: Although the value stored to 'rc' is used in the enclosing expression, the value is never actually read from 'rc' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to 'rc' is use",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7534:8462,Safe,SafeDelete,8462,https://root.cern,https://github.com/root-project/root/issues/7534,1,['Safe'],['SafeDelete']
Safety,"taframe-df102_NanoAODDimuonAnalysis-py (Failed); 1205 - tutorial-dataframe-df104_HiggsToTwoPhotons-py (Failed); 1261 - tutorial-rcanvas-df104-py (Failed); 1564 - roottest-python-JupyROOT-importROOT_notebook (Failed); 1565 - roottest-python-JupyROOT-simpleCppMagic_notebook (Failed); 1566 - roottest-python-JupyROOT-thread_local_notebook (Failed); 1567 - roottest-python-JupyROOT-ROOT_kernel_notebook (Failed); 1568 - roottest-python-JupyROOT-tpython_notebook (Failed); 1664 - roottest-python-distrdf-backends-test_all (Failed); ```; The specific run I references only failed the `TMapFile` test (which sometimes fails, sometimes succeed). The set of failure types is as follow:; ```; Warning in <TMVA_CNN_Classification>: TMVA is not build with GPU or CPU multi-thread support. Cannot use TMVA Deep Learning for CNN; Running with nthreads = 4; [37;41;1m<FATAL> : Can't import __main__[0m; ***> abort program execution; ```; ```; Setup TMVA...; [37;41;1m<FATAL> : Can't import __main__[0m; ***> abort program execution; ```; ```; Generate PyTorch model...; Traceback (most recent call last):; File ""/github/home/ROOT-CI/build/tmva/pymva/test/generatePyTorchModelClassification.py"", line 1, in <module>; import torch; ModuleNotFoundError: No module named 'torch'; ```; ```; RDataFrame::Run: event loop was interrupted; Traceback (most recent call last):; File ""/github/home/ROOT-CI/src/tutorials/dataframe/df102_NanoAODDimuonAnalysis.py"", line 50, in <module>; h.SetTitle(""""); ^^^^^^^^^^; cppyy.gbl.std.bad_alloc: TH1D& ROOT::RDF::RResultPtr<TH1D>::operator*() =>; bad_alloc: std::bad_alloc; CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```; ```; Traceback (most recent call last):; File ""/github/home/ROOT-CI/src/tutorials/dataframe/df104_HiggsToTwoPhotons.py"", line 87, in <module>; ROOT.RDF.RunGraphs([hists[s] for s in [""ggH"", ""VBF"", ""data""]]); cppyy.gbl.std.bad_alloc: unsigned int ROOT::RDF::RunGraphs(vector<ROOT::RDF::RResultHandle>) =>; bad",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16242:2670,abort,abort,2670,https://root.cern,https://github.com/root-project/root/issues/16242,1,['abort'],['abort']
Safety,"tal::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ OK ] RNTuple.LargeFile1 (34858 ms); [ RUN ] RNTuple.LargeFile2; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Fatal: fWritePage[otherIdx].IsEmpty() violated at line 82 of `/builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RColumn.cxx'; aborting; Thread 6 (Thread 0xe26ffb40 (LWP 117258) ""ntuple_extended""):; #0 0xf7ef1559 in __kernel_vsyscall (); #1 0xf69239bb in syscall () from /lib/libc.so.6; #2 0xf7338c73 in tbb::internal::rml::private_worker::thread_routine(void*) () from /lib/libtbb.so.2; #3 0xf689f47d in start_thread () from /lib/libc.so.6; #4 0xf6927d6c in clone3 () from /lib/libc.so.6; Thread 5 (Thread 0xe2afeb40 (LWP 117257) ""ntuple_extended""):; #0 0xf7ef1559 in __kernel_vsyscall (); #1 0xf69239bb in syscall () from /lib/libc.so.6; #2 0xf7338c73 in tbb::internal::rml::private_worker::thread_routine(void*) () from /lib/libtbb.so.2; #3 0xf689f47d in start_thread () from /lib/libc.so.6; #4 0xf6927d6c in clone3 () from /lib/libc.so.6; Thread 4 (Thread 0xe2cffb40 (LWP 117256) ""ntuple_extended""):; #0 0xf7ef1559 in __kernel_vsyscall (); #1 0xf69239bb in syscall () from /lib/libc.so.6; #2 0xf7338c73 in tbb::internal::rml::private_worker::thread_routine(void*) () from /lib/libtbb.so.2; #3 0xf689f47d in start_thread () from /lib/libc.so.6; #4 0xf6927d6c in clone3 () from /lib/libc.so.6; Threa",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12427:7167,abort,aborting,7167,https://root.cern,https://github.com/root-project/root/issues/12427,1,['abort'],['aborting']
Safety,"tall precompiled ROOT 6.30.04, downloaded from root.cern, on RHEL8 or 9.; - Run `thisroot.sh` to set up the runtime environment; - Type rootn.exe; - Hard crash. Transcript of session on RHEL8:; ```; % source /apps/ROOT/6.30.04/bin/thisroot.sh; % root-config --version; 6.30.04; % root-config --features; cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_davix builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xrootd builtin_xxhash builtin_zeromq builtin_zlib builtin_zstd clad dataframe davix fftw3 fitsio fortran gdml http imt mathmore mlp minuit2 mysql opengl pgsql proof pyroot roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore x11 xml xrootd; % which rootn.exe; /apps/ROOT/6.30.04/bin/rootn.exe; % rootn.exe; Fatal in <operator new>: with std::align_val_t is not implemented yet; aborting; ... longish stack trace ...; ```; This works without error with ROOT 6.26.14 and 6.28.12 on the exact same machine. Running plain `root` 6.30.04 also works, of course. Only `rootn.exe` seems affected. ### ROOT version. ```; ------------------------------------------------------------------; | Welcome to ROOT 6.30/04 https://root.cern |; | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jan 31 2024, 09:46:18 |; | From heads/master@tags/v6-30-04 |; | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21) |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```. ### Installation method. pre-built binary, downloaded from root.cern. ### Operating system. Linux RHEL8 or 9. ### Additional context. Tried several different Linux hosts running RHEL8/CentOS 8, all with same result.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14767:1346,abort,aborting,1346,https://root.cern,https://github.com/root-project/root/issues/14767,1,['abort'],['aborting']
Safety,"tead I have a tuple or list on the Python side and the template expects some STL container? Then it can not just be that STL container of say `T*`, but also the STL container of pointer any of the base classes, or worse, a mix thereof. And what if the tuple isn't actually targeting a container, but is an initalizer_list? There is often no (relevant) type information available at that point in Python, but many cases can still be resolved b/c the C++ side has some hints. For example `template<typename T, int N> void func(const std::array<T, N>&)` being given a Python tuple `(1, 2, 3)`. Absolutely clear what needs to be done for the conversion to work, but otherwise yet another case to add to the combinatorics. The above, current, situation is very much ""eeew"" and ""might not like the result."" It has also reached its breaking point, as you can see from the open bug reports and the constant hacking on workarounds. I appreciate that for the old PyROOT no-one actually seriously used templates, as folks avoided it in their interfaces b/c of non-support in the CINT world. The only client with moderately interesting templates would be RDataFrame. But in the real world, folks write modern C++ and template usage is much more pervasive. Just last week, I was looking at a massive series of variadically templated constructors: each peeled of an argument to eventually initialize a grand total of 3 data members. It was just a struct with an `unsigned int`, a `double`, and an `std::array<double, 3>`. The point of the whole set of constructors being that you can use initializer syntax with the data member in every order, either the ""naked"" types or with casts of explicitly named typedefs. Oh, it works _now_, with yet another workaround, but it actually crashed `lookupHelper` (segfault and die; and it's not the only one; I have a few more for Vassil, e.g. lookup in an unnamed namespace also crashes deep, deep inside Cling/Clang). So, I consider that another strong argument against ""tryi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6393#issuecomment-696889449:2471,avoid,avoided,2471,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-696889449,1,['avoid'],['avoided']
Safety,"ted during instantiation of ""void TMVA::DNN::TCudnn<AFloat>::RNNForward(const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDescriptors_t &, TMVA::DNN::TCudnn<AFloat>::RNNWorkspace_t &, bool) [with AFloat=Double_t]"" at line 44 of /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu. /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn/RecurrentPropagation.cu(513): error: identifier ""cudnnRNNForwardInference"" is undefined; cudnnStatus_t status = cudnnRNNForwardInference(; ^; detected during instantiation of ""void TMVA::DNN::TCudnn<AFloat>::RNNForward(const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDescriptors_t &, TMVA::DNN::TCudnn<AFloat>::RNNWorkspace_t &, bool) [with AFloat=Double_t]"" at line 44 of /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu. /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn/RecurrentPropagation.cu(545): error: identifier ""cudnnRNNBackwardData"" is undefined; cudnnStatus_t status = cudnnRNNBackwardData(; ^; detected during instantiation of ""void TMVA::DNN::TCudnn<AFloat>::RNNBackward(const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFlo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15413:4803,detect,detected,4803,https://root.cern,https://github.com/root-project/root/issues/15413,1,['detect'],['detected']
Safety,ter/buildtrees/root/src/57b00fa7ea-10a10c16cc/core/base/v7/inc -IE:/vcpkg_folders/new_master/buildtrees/root/src/57b00fa7ea-10a10c16cc/core/base/inc -IE:/vcpkg_folders/new_master/buildtrees/root/x64-windows-dbg/ginclude -IE:/vcpkg_folders/new_master/buildtrees/root/src/57b00fa7ea-10a10c16cc/io/io/v7/inc -IE:/vcpkg_folders/new_master/buildtrees/root/src/57b00fa7ea-10a10c16cc/io/io/inc -IE:/vcpkg_folders/new_master/buildtrees/root/src/57b00fa7ea-10a10c16cc/core/clib/res TBufferXML.h TKeyXML.h TXMLEngine.h TXMLFile.h TXMLPlayer.h TXMLSetup.h E:/vcpkg_folders/new_master/buildtrees/root/src/57b00fa7ea-10a10c16cc/io/xml/inc/LinkDef.h; #0 0x00007ffefe214d7b HandleAbort E:\vcpkg_folders\new_master\buildtrees\root\src\57b00fa7ea-10a10c16cc\interpreter\llvm\src\lib\Support\Windows\Signals.inc:408:0; #1 0x00007fff6c0690ed (C:\Windows\SYSTEM32\ucrtbased.dll+0xa90ed); #2 0x00007fff6c06ae49 (C:\Windows\SYSTEM32\ucrtbased.dll+0xaae49); #3 0x00007fff20c79818 TWinNTSystem::Abort(int) E:\vcpkg_folders\new_master\buildtrees\root\src\57b00fa7ea-10a10c16cc\core\winnt\src\TWinNTSystem.cxx:3902:0; #4 0x00007fff20c7897c TWinNTSystem::DispatchSignals(enum ESignals) E:\vcpkg_folders\new_master\buildtrees\root\src\57b00fa7ea-10a10c16cc\core\winnt\src\TWinNTSystem.cxx:1781:0; #5 0x00007fff20c81f52 `anonymous namespace'::SigHandler E:\vcpkg_folders\new_master\buildtrees\root\src\57b00fa7ea-10a10c16cc\core\winnt\src\TWinNTSystem.cxx:456:0; #6 0x00007fff20c81d8e `anonymous namespace'::sighandler E:\vcpkg_folders\new_master\buildtrees\root\src\57b00fa7ea-10a10c16cc\core\winnt\src\TWinNTSystem.cxx:398:0; #7 0x00007fff6c067ade (C:\Windows\SYSTEM32\ucrtbased.dll+0xa7ade); #8 0x00007ff6481b6f38 `__scrt_common_main_seh'::`1'::filt$0 D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl:304:0; #9 0x00007fffaa5bc96b (C:\Windows\SYSTEM32\VCRUNTIME140D.dll+0x1c96b); #10 0x00007fffb6e323df (C:\Windows\SYSTEM32\ntdll.dll+0xa23df); #11 0x00007fffb6de14a4 (C:\Windows\SYSTEM32\ntdll.dll+0x514a4); #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12738:13953,Abort,Abort,13953,https://root.cern,https://github.com/root-project/root/issues/12738,1,['Abort'],['Abort']
Safety,ter::TCling::AutoLoad>: Trying to autoload for TNamedEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TNamedEditor. TClass::GetClass: Header Parsing - The representation of TNamedEditor was not found in the type system. A lookup in the interpreter is about to be tried: this can cause parsing. This can be avoided selecting TNamedEditor in the linkdef/selection file.; Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for TNamedEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TNamedEditor. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for TNamedEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TNamedEditor. Info in <TInterpreter::TCling::AutoLoad>: Trying to autoload for TNamedEditor; TEnum::GetEnum: Header Parsing - The enumerator TNamedEditor is not known to the typesystem: an interpreter lookup will be performed. This can imply parsing of headers. This can be avoided selecting the numerator in the linkdef/selection file.; Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for TNamedEditor; Info in <TInterpreter::TCling::AutoLoad>: Trying to autoload for TNamedEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TNamedEditor. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for TNamedEditor; Info in <TInterpreter::TCling::AutoLoad>: Trying to autoload for TNamedEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TNamedEditor. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for TNamedEditor; Info in <TInterpreter::TCling::AutoLoad>: Trying to autoload for TNamedEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TNamedEditor. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for TObjectEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TObjectEditor. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for TObjectEdit,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15963#issuecomment-2200648481:27684,avoid,avoided,27684,https://root.cern,https://github.com/root-project/root/issues/15963#issuecomment-2200648481,1,['avoid'],['avoided']
Safety,"test=OFF -Drpath=OFF -Druntime_cxxmodules=OFF -Dshadowpw=yes -Dspectrum=ON -Dsqlite=yes -Dssl=yes -Dtcmalloc=OFF -Dtest_distrdf_pyspark=OFF -Dtesting=no -Dtmva=yes -Dtmva-cpu=yes -Dtmva-gpu=no -Dtmva-pymva=yes -Dtmva-rmva=yes -Dunuran=yes -During=no -Dvc=yes -Dvdt=OFF -Dveccore=OFF -Dvecgeom=OFF -Dvmc=no -Dx11=yes -Dxml=yes -Dxrootd=yes -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=/var/tmp/portage/sci-physics/root-9999/work/root-9999_build/gentoo_toolchain.cmake /var/tmp/portage/sci-physics/root-9999/work/root-9999; loading initial cache file /var/tmp/portage/sci-physics/root-9999/work/root-9999_build/gentoo_common_config.cmake; -- The C compiler identification is GNU 10.3.0; -- The CXX compiler identification is GNU 10.3.0; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /usr/lib/ccache/bin/x86_64-pc-linux-gnu-gcc - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/lib/ccache/bin/x86_64-pc-linux-gnu-g++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Git: /usr/bin/git (found version ""2.31.1"") ; -- Detected ROOT_VERSION 6.25.01; -- Looking for Python; -- Found Python3: /usr/bin/python3.8 (found version ""3.8.10"") found components: Interpreter Development NumPy Development.Module Development.Embed ; -- The Fortran compiler identification is GNU 10.3.0; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Check for working Fortran compiler: /usr/bin/x86_64-pc-linux-gnu-gfortran - skipped; -- Checking whether /usr/bin/x86_64-pc-linux-gnu-gfortran supports Fortran 90; -- Checking whether /usr/bin/x86_64-pc-linux-gnu-gfortran supports Fortran 90 - yes; -- Found GCC. Major version 10, minor version 3; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Performing Test",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8193:2703,Detect,Detecting,2703,https://root.cern,https://github.com/root-project/root/issues/8193,8,['Detect'],['Detecting']
Safety,"th weight errors; [RF] Add weight errors and not weight squared when filling split data; [RF] Correctly propagate error storage in `RooDataSet::emptyClone()`; [RF][HS3] Don't assume that combined dataset name is always `""obsData""`; [RF][HS3] Use less `c_str()` conversions in RooFitHS3; [RF][HS3] New `wsEmplace()` method for creating objects in workspace; [RF][HS3] New `wsImport()` function to avoid repeating command args; [RF] Less manual memory management in RooAbsArg and RooProdGenContext; [RF] Code modernization of RooAbsReal; [RF][HS3] Renaming some distributions to conform with HS3 standard; [RF][HS3] Use HistFunc variables instead of underlying hist variables; [RF] Added protection against invalid variable names in createHistogram; [RF][HS3] Correct error messages when IO keys are missing; [RF][HS3] Code improvements in HS3 HistFactory; [RF][HS3] Small HS3 closure fixes; [RF][HS3] Import HistFactory constraints directly upon creation; [RF][HS3] Cleanup of generic functions to avoid using arguments; [RF][HS3] Don't import embedded data directly to RooWorkspace; [RF] Avoid false warnings in RooAbsReal::createHistogram(); [RF][HS3] Reduce verbosity of unit tests; [RF][HS3] Less usage of TString; [RF][HS3] Avoid code duplication when requesting RooArgLists and Sets; [RF][HS3] Remove unused functions from JSONFactories_HistFactory; [RF][HS3] Export `staterror` correctly for HistFactory; [RF][HS3] Major restructuring of HistFactory in HS3 - part 2; [RF][HS3] Major refactoring of `JSONFactories_HistFactory`; [RF][HS3] Correctly consider weight errors in `readBinnedData()`; [RF][HS3] Small code style improvement (renaming); [RF][HS3] Make `testHS3HistFactory` less verbose; [RF][HS3] Changed some JSON keywords to comply with new HS3 standard; [RF][HS3] Moved `DependencyMissingError` to public to make it catchable; [RF][HS3] Support MultiVarGaussian and TF1Binding plus code cleanup; [RF][HS3] Added helper function for writing matrices in JSONInterface; [RF][HS3] JSON IO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12590#issuecomment-1491813664:5778,avoid,avoid,5778,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664,2,['avoid'],['avoid']
Safety,"thanks @pcanal . If I understand correctly, this PR makes half of 3110 redundant, i.e. only the test is needed: is this correct?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3115#issuecomment-445021777:71,redund,redundant,71,https://root.cern,https://github.com/root-project/root/pull/3115#issuecomment-445021777,1,['redund'],['redundant']
Safety,the calling code in TFileMerger is not exception-safe and this ends up hiding the original exception under some bogus error. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15898:49,safe,safe,49,https://root.cern,https://github.com/root-project/root/pull/15898,1,['safe'],['safe']
Safety,the failure are real and due to a compiler bug which introduce (infinite) loop where there isn't ... Trying to narrow down and/or avoid the pattern provoking this ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3964#issuecomment-502762392:130,avoid,avoid,130,https://root.cern,https://github.com/root-project/root/pull/3964#issuecomment-502762392,1,['avoid'],['avoid']
Safety,"the first two weeks of December I've not run my tests very often.; Actually all my GitHub actions tests started to fail to due to timeout from the Friday.; And inspecting the overall CPU time for all tests, I do not see large steps/peaks ; around December 8 for my [tests](https://github.com/OstapHEP/ostap/actions?page=2)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11927#issuecomment-1357415192:130,timeout,timeout,130,https://root.cern,https://github.com/root-project/root/issues/11927#issuecomment-1357415192,1,['timeout'],['timeout']
Safety,"the goal of this commit is to avoid too many allocations/deallocations in two cases:; 1. sophisticated expressions manipulating RVec<T> instances: churn kicks in due to temporaries; 2. RDataFrame runs with Defines returning RVec<T>s which are saved within custom columns via a copy. For every event, the old value is deallocated and the new one allocated. This change implements a thread local stack of buffers in the RAdoptAllocator.; If the allocation is smaller than RAdoptAllocator<T>::fgBuffersSize, before allocating; a fresh region of memory through the stl allocator, a pop from the aforementioned stack is tried.; At deallocation time, the memory taken from the stak, is put back in the stack.; In some sense, this is an optimisation for short (defined by RAdoptAllocator<T>::fgBuffersSize) RVec<T>s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3467:30,avoid,avoid,30,https://root.cern,https://github.com/root-project/root/pull/3467,1,['avoid'],['avoid']
Safety,"the implementation of histo models has been simplified avoiding code duplication.; The creation of the shared_pointer containing the histogram has been moved to; the model classes, in order to simplify the TDFInterface.; Test coverage has been significantly increased.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1770:55,avoid,avoiding,55,https://root.cern,https://github.com/root-project/root/pull/1770,1,['avoid'],['avoiding']
Safety,the unit test was already there but the bug was passing that particular version of the test by chance. it can be modified this way to detect the bug; https://github.com/root-project/root/compare/master...arizzi:root:patch-2,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14915#issuecomment-1985321215:134,detect,detect,134,https://root.cern,https://github.com/root-project/root/pull/14915#issuecomment-1985321215,1,['detect'],['detect']
Safety,"theMethod, TString methodTitle, TString theOption = """") =>; runtime_error: FATAL error; TMVA::MethodBase* TMVA::Factory::BookMethod(TMVA::DataLoader*, TMVA::Types::EMVA, TString, TString, TMVA::Types::EMVA, TString) =>; TypeError: takes at least 6 arguments (4 given); CMake Error at /builddir/build/BUILD/root-6.28.00/redhat-linux-build/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### tutorial-tmva-TMVA_RNN_Classification-py. TypeError: none of the 3 overloaded methods succeeded.; ~~~; 1272/1272 Test #1269: tutorial-tmva-TMVA_RNN_Classification-py ............................***Failed 1.39 sec; Warning in <TMVA_RNN_Classificaton>: Skip using Keras since tensorflow is not installed; Warning in <TMVA_RNN_Classification>: TMVA is not build with GPU or CPU multi-thread support. Cannot use TMVA Deep Learning for RNN; DataSetInfo : [dataset] : Added class ""Signal""; : Add Tree sgn of type Signal with 2000 events; DataSetInfo : [dataset] : Added class ""Background""; : Add Tree bkg of type Background with 2000 events; <FATAL> : Unknown method index in map: 0; ***> abort program execution; Running with nthreads = 25769803776; --- RNNClassification : Using input file: time_data_t10_d30.root; number of variables is 300; vars_time0[0]; [ --- ]; vars_time9[29]; prepared DATA LOADER ; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/tutorials/tmva/TMVA_RNN_Classification.py"", line 331, in <module>; factory.BookMethod(; File ""/builddir/build/BUILD/root-6.28.00/redhat-linux-build/lib/ROOT/_pythonization/_tmva/_factory.py"", line 61, in BookMethod; return self._BookMethod(*args, **kwargs); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; TypeError: none of the 3 overloaded methods succeeded. Full details:; TMVA::MethodBase* TMVA::Factory::BookMethod(TMVA::DataLoader* loader, TString theMethodName, TString methodTitle, TString theOption = """") =>; TypeError: could not convert argument 2; TMVA::MethodBase* TMVA::Factory::BookMethod(TMVA::DataLoader* loader, TMVA::",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:13092,abort,abort,13092,https://root.cern,https://github.com/root-project/root/issues/12429,1,['abort'],['abort']
Safety,therewith avoiding memory hogging because of the attached TTreeChaches. This code has been written by David Smith and minimally edited for its integration in root.; See sister PR in roottest: https://github.com/root-project/roottest/pull/1161. This PR fixes [ROOT-6286](https://its.cern.ch/jira/browse/ROOT-6286),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16198:10,avoid,avoiding,10,https://root.cern,https://github.com/root-project/root/pull/16198,1,['avoid'],['avoiding']
Safety,thread-safe gSystem list of timers,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8562:7,safe,safe,7,https://root.cern,https://github.com/root-project/root/pull/8562,1,['safe'],['safe']
Safety,threadsh1: Avoid heap-use-after-free.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10068:11,Avoid,Avoid,11,https://root.cern,https://github.com/root-project/root/pull/10068,1,['Avoid'],['Avoid']
Safety,"ting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Git: /usr/bin/git (found version ""1.8.3.1""); -- Detected ROOT_VERSION 6.27.01; -- Checking internet connectivity...; -- Yes; -- Looking for Python; -- Found Python3: /build/jenkins/workspace/lcg_nightly_pipeline/install/dev3/Python/3.9.6/x86_64-centos7-gcc9-dbg/bin/python (found version ""3.9.6"") found components: Interpreter Develop; ment NumPy Development.Module Development.Embed; -- Looking for a Fortran compiler; -- Looking for a Fortran compiler - /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/gfortran; -- The Fortran compiler identification is GNU 9.2.0; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Check for working Fortran compiler: /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/gfortran - skipped; -- Checking whether /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/gfortran supports Fortran 90; -- Checking whether /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/gfortran supports Fortran 90 - yes; -- Found GCC. Major version 9, minor version 2; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed; -- Looking for pthread_create in pthreads; -- Looking for pthread_create in pthreads - not found; -- Looking for pthread_create in pthread; -- Looking for pthread_create in pthread - found; -- Found Threads: TRUE; -- Performing Test GLIBCXX_USE_CXX11_ABI; -- Performing Test GLIBCXX_USE_CXX11_ABI - Success; -- ROOT Platform: linux; -- ROOT Compiler: GNU 9.2.0; -- ROOT Processor: x86_64; -- ROOT Architecture",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9594#issuecomment-1015634743:3002,Detect,Detecting,3002,https://root.cern,https://github.com/root-project/root/issues/9594#issuecomment-1015634743,2,['Detect'],['Detecting']
Safety,tion Selection; 0.5607 ( 0.4%) 0.5501 ( 60.0%) 1.1108 ( 0.9%) 1.1122 ( 0.9%) X86 Assembly Printer; 0.8415 ( 0.7%) 0.0053 ( 0.6%) 0.8468 ( 0.7%) 0.8477 ( 0.7%) Machine Instruction Scheduler; 0.7902 ( 0.6%) 0.0112 ( 1.2%) 0.8013 ( 0.6%) 0.8022 ( 0.6%) Greedy Register Allocator; 0.6279 ( 0.5%) 0.0060 ( 0.7%) 0.6339 ( 0.5%) 0.6345 ( 0.5%) Live Variable Analysis; 0.3958 ( 0.3%) 0.0048 ( 0.5%) 0.4006 ( 0.3%) 0.4010 ( 0.3%) Simple Register Coalescing; 0.2857 ( 0.2%) 0.0020 ( 0.2%) 0.2877 ( 0.2%) 0.2881 ( 0.2%) Combine redundant instructions #3; 0.2847 ( 0.2%) 0.0021 ( 0.2%) 0.2867 ( 0.2%) 0.2871 ( 0.2%) Combine redundant instructions #2; 0.2842 ( 0.2%) 0.0024 ( 0.3%) 0.2866 ( 0.2%) 0.2870 ( 0.2%) Combine redundant instructions #6; 0.2842 ( 0.2%) 0.0015 ( 0.2%) 0.2858 ( 0.2%) 0.2861 ( 0.2%) Combine redundant instructions #5; 0.2837 ( 0.2%) 0.0017 ( 0.2%) 0.2854 ( 0.2%) 0.2857 ( 0.2%) Combine redundant instructions #4; 0.2825 ( 0.2%) 0.0017 ( 0.2%) 0.2842 ( 0.2%) 0.2846 ( 0.2%) Combine redundant instructions #7; 0.2828 ( 0.2%) 0.0012 ( 0.1%) 0.2841 ( 0.2%) 0.2844 ( 0.2%) Machine Common Subexpression Elimination; 0.1977 ( 0.2%) 0.0031 ( 0.3%) 0.2008 ( 0.2%) 0.2010 ( 0.2%) CodeGen Prepare; 0.1788 ( 0.1%) 0.0036 ( 0.4%) 0.1824 ( 0.1%) 0.1826 ( 0.1%) Constant Hoisting; 0.1525 ( 0.1%) 0.0040 ( 0.4%) 0.1565 ( 0.1%) 0.1567 ( 0.1%) Called Value Propagation; 0.1465 ( 0.1%) 0.0070 ( 0.8%) 0.1535 ( 0.1%) 0.1538 ( 0.1%) Interprocedural Sparse Conditional Constant Propagation; 0.1317 ( 0.1%) 0.0010 ( 0.1%) 0.1327 ( 0.1%) 0.1329 ( 0.1%) Machine Copy Propagation Pass; 0.1281 ( 0.1%) 0.0019 ( 0.2%) 0.1299 ( 0.1%) 0.1301 ( 0.1%) Prologue/Epilogue Insertion & Frame Finalization; 0.1210 ( 0.1%) 0.0016 ( 0.2%) 0.1226 ( 0.1%) 0.1227 ( 0.1%) Live Interval Analysis; 0.1161 ( 0.1%) 0.0011 ( 0.1%) 0.1172 ( 0.1%) 0.1173 ( 0.1%) X86 Byte/Word Instruction Fixup; 0.1104 ( 0.1%) 0.0037 ( 0.4%) 0.1141 ( 0.1%) 0.1143 ( 0.1%) Two-Address instruction pass; 0.1024 ( 0.1%) 0.0026 ( 0.3%) 0.1050 ( 0.1%) 0.1052 (,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9312#issuecomment-976463242:4251,redund,redundant,4251,https://root.cern,https://github.com/root-project/root/issues/9312#issuecomment-976463242,1,['redund'],['redundant']
Safety,tion is AppleClang 11.0.3.11030032; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Performing Test COMPILER_SUPPORTS_-O1; -- Performing Test COMPILER_SUPPORTS_-O1 - Success; -- Performing Test COMPILER_SUPPORTS_-pipe; -- Performing Test COMPILER_SUPPORTS_-pipe - Success; -- Performing Test COMPILER_SUPPORTS_-g; -- Performing Test COMPILER_SUPPORTS_-g - Success; -- Performing Test COMPILER_SUPPORTS_-Wall; -- Performing Test COMPILER_SUPPORTS_-Wall - Success; -- ROOT_FOUND: 1; -- ROOT_USE_FILE /Users/couet/git/couet-root-bin/ROOTUseFile.cmake; -- ROOT includes: /Users/couet/git/couet-root-bin/include; -- ROOT libraries: /Users/couet/git/couet-root-bin/lib/libCore.so;/Users/couet/git/couet-root-bin/lib/libImt.so;/Users/couet/git/couet-root-bin/lib/libRIO.so;/Users/couet/git/couet-root-bin/lib/libNet.so;/Users/couet/git/couet-root-bin/lib/libHist.so;/Users/couet/git/couet-root-bin/lib/libGraf.so;/Users/couet/git/couet-root-bin/lib/libGraf3d.so;/Users/couet/git/couet-root-bin/lib/libGpad.so;/Users/couet/git/couet-root-bin/lib/libROOTDataFrame.so;/Users/couet/git/couet-root-bin/lib/libTree.so;/Users/couet/git/couet-root-bin/lib/libTreePlayer.so;/Users/couet/git/couet-root-bin/lib/libRint.so;/Users/couet/git,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6344#issuecomment-693277452:1292,Detect,Detecting,1292,https://root.cern,https://github.com/root-project/root/issues/6344#issuecomment-693277452,4,['Detect'],['Detecting']
Safety,"tion with authention files ; specified. Here is an example, check file existing. curl --verbose -I --head https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root. For your case, it's more like an authencation issue, this is curl SSL ; verification trick, error code 35, here is a way I figured out long time ; ago,specify cacert and capath to verify host. To download a file that needs redirection, use -L. curl --silent --show-error --cacert /tmp/x509up_u501  --connect-timeout 300 --max-time 3600 --capath /etc/grid-security/certificates --cert /tmp/x509up_u501 --key /tmp/x509up_u501 -L https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root  -o /tmp/ddddd-https. Hope it helps. Simon. On 5/12/2021 11:51 AM, Asoka De Silva wrote:; > Hi Simon,; >; >>>>>>>>> |curl -v ; >>>>>>>>> https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root ; >>>>>>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Csimonliu%40triumf.ca%7Ca59fceaddf634d196e5608d91576f34a%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564422908647699%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=DKbH3DJgHqWR8O0YknLB85pID2Q2zwz0CqqB18vukA4%3D&reserved=0>|; >; > How do I use curl to download on lxplus ?; >; > regards,; > Asoka; >; >> On May 12, 2021, at 11:47 AM, Simon Liu ***@***.*** ; >> ***@***.***>> wrote:; >>; >> Hi, Asoka; >>; >> I'm not sure which exactly problem you are chasing for, as far as I ; >> can tell, there is no problem access webdav.lcg.triumf.ca ; >> <http://webdav.lcg.triumf.ca> from lxplus, and downloading files from ; >> there works fine.; >>; >> thanks; >>; >> Simon; >>; >> On 5/12/2021 11:13 AM, Asoka De Silva wrote:; >>> ah ... thanks, I missed that.  So ping works f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840043080:1122,safe,safelinks,1122,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840043080,1,['safe'],['safelinks']
Safety,tlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root ; >>>>>>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Csimonliu%40triumf.ca%7Ca59fceaddf634d196e5608d91576f34a%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564422908657695%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=doCS6vzi0f487jtyrDrWCV9imCF8mwraGfSQOgAoR4s%3D&reserved=0> ; >>>>>>>>> * Trying 206.12.9.197:2880... * TCP_NODELAY set * Trying ; >>>>>>>>> 2607:f8f0:660:3::36:2880... * TCP_NODELAY set * Immediate ; >>>>>>>>> connect fail for 2607:f8f0:660:3::36: Network is unreachable |; >>>>>>>>>; >>>>>>>>> Is that expected?; >>>>>>>>>; >>>>>>>; >>>>>>>> ***@***.*** t5]$ curl -v ; >>>>>>>> https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root ; >>>>>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Csimonliu%40triumf.ca%7Ca59fceaddf634d196e5608d91576f34a%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564422909247358%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=lnK7F9PwtLyhMgfW1BGV%2F3jGJQ2O5M9uq%2F4p66Y5ihI%3D&reserved=0>; >>>>>>>> * About to connect() to webdav.lcg.triumf.ca ; >>>>>>>> <http://webdav.lcg.triumf.ca/> port 2880 (#0); >>>>>>>> *   Trying 2607:f8f0:660:3::36...; >>>>>>>> * Connected to webdav.lcg.triumf.ca ; >>>>>>>> <http://webdav.lcg.triumf.ca/> (2607:f8f0:660:3::36) port 2880 (#0); >>>>>>>> * Initializing NSS with certpath: sql:/etc/pki/nssdb; >>>>>>>> *   CAfile: /etc/pki/tls/certs/ca-bundle.crt; >>>>>>>>   CApath: none; >>>>>>>> * Server certificate:; >>>>>>>> * subject: CN=dpool46.lcg.triumf.ca ; >>>>>>>> <http://dpool46.lcg.triumf.ca,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840043080:5338,safe,safelinks,5338,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840043080,1,['safe'],['safelinks']
Safety,to avoid an odd namespace to appear in the doc,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3145:3,avoid,avoid,3,https://root.cern,https://github.com/root-project/root/pull/3145,1,['avoid'],['avoid']
Safety,"to avoid excessive memory usage, which can lead to issues on machines with a low memory per core. - [v] tested changes locally; - [v] updated the docs (if necessary). Fixes #16252",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16262:3,avoid,avoid,3,https://root.cern,https://github.com/root-project/root/pull/16262,1,['avoid'],['avoid']
Safety,to avoid malformed names in the string passed to CPack for the creation of the binary archive.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15800:3,avoid,avoid,3,https://root.cern,https://github.com/root-project/root/pull/15800,1,['avoid'],['avoid']
Safety,to avoid warnings about unused variable. This is possible because in master c++17 is enforced.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13835:3,avoid,avoid,3,https://root.cern,https://github.com/root-project/root/pull/13835,1,['avoid'],['avoid']
Safety,to avoid warnings when building docu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15446:3,avoid,avoid,3,https://root.cern,https://github.com/root-project/root/pull/15446,1,['avoid'],['avoid']
Safety,"tor' in 'ROOT::Internal::VecOps::SmallVectorTemplateBase&lt;int, true&gt;' ; - [2021-04-16T11:17:53.120Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:488:48: error: no type named 'const_iterator' in 'ROOT::Internal::VecOps::SmallVectorTemplateBase&lt;int, true&gt;' ; - [2021-04-16T11:17:53.120Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:489:43: error: no type named 'reference' in 'ROOT::Internal::VecOps::SmallVectorTemplateBase&lt;int, true&gt;' ; - [2021-04-16T11:17:53.120Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:490:43: error: no type named 'size_type' in 'ROOT::Internal::VecOps::SmallVectorTemplateBase&lt;int, true&gt;' ; - [2021-04-16T11:17:53.120Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1281:27: error: no type named 'pointer' in 'ROOT::VecOps::RVec&lt;int&gt;' ; - [2021-04-16T11:17:53.121Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1523:1: error: no member named 'begin' in 'ROOT::VecOps::RVec&lt;int&gt;' ; - [2021-04-16T11:17:53.121Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1523:1: error: no member named 'begin' in 'ROOT::VecOps::RVec&lt;int&gt;' ; - [2021-04-16T11:17:53.121Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1523:1: error: no member named 'begin' in 'ROOT::VecOps::RVec&lt;int&gt;' ; - [2021-04-16T11:17:53.121Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1524:1: error: no member named 'begin' in 'ROOT::VecOps::RVec&lt;int&gt;' . And 10 more. ### Warnings:; - [2021-04-16T11:17:53.120Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:193:19: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-821105357:2543,avoid,avoid,2543,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-821105357,1,['avoid'],['avoid']
Safety,"tor' in 'ROOT::Internal::VecOps::SmallVectorTemplateBase&lt;int, true&gt;' ; - [2021-05-04T11:09:43.403Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:488:48: error: no type named 'const_iterator' in 'ROOT::Internal::VecOps::SmallVectorTemplateBase&lt;int, true&gt;' ; - [2021-05-04T11:09:43.403Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:489:43: error: no type named 'reference' in 'ROOT::Internal::VecOps::SmallVectorTemplateBase&lt;int, true&gt;' ; - [2021-05-04T11:09:43.403Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:490:43: error: no type named 'size_type' in 'ROOT::Internal::VecOps::SmallVectorTemplateBase&lt;int, true&gt;' ; - [2021-05-04T11:09:43.403Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1285:27: error: no type named 'pointer' in 'ROOT::VecOps::RVec&lt;int&gt;' ; - [2021-05-04T11:09:43.403Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1527:1: error: no member named 'begin' in 'ROOT::VecOps::RVec&lt;int&gt;' ; - [2021-05-04T11:09:43.403Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1527:1: error: no member named 'begin' in 'ROOT::VecOps::RVec&lt;int&gt;' ; - [2021-05-04T11:09:43.403Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1527:1: error: no member named 'begin' in 'ROOT::VecOps::RVec&lt;int&gt;' ; - [2021-05-04T11:09:43.403Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:1528:1: error: no member named 'begin' in 'ROOT::VecOps::RVec&lt;int&gt;' . And 10 more. ### Warnings:; - [2021-05-04T11:09:43.133Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/RVec.hxx:193:19: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-831861333:2543,avoid,avoid,2543,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-831861333,1,['avoid'],['avoid']
Safety,"tps://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Csimonliu%40triumf.ca%7C2bf615c9bb89486eaecd08d91571b94b%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564400460976298%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=YgqiD9GIPDhABbE6mxc9%2BtWy8Q8red4Pa6zme6lmNgs%3D&reserved=0>; >>>>>>>> * Trying 206.12.9.197:2880...; >>>>>>>> * TCP_NODELAY set; >>>>>>>> * Trying 2607:f8f0:660:3::36:2880...; >>>>>>>> * TCP_NODELAY set; >>>>>>>> * Immediate connect fail for 2607:f8f0:660:3::36: Network is unreachable; >>>>>>>> Is that expected?; >>>>>>>> ; >>>>>> ; >>>>>>> ***@***.*** t5]$ curl -v https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Csimonliu%40triumf.ca%7C2bf615c9bb89486eaecd08d91571b94b%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564400460986294%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=5bPVTg%2FPGN9TjNPlZWD4xVs43NW32MwdifaSj7PR%2FEc%3D&reserved=0>; >>>>>>> * About to connect() to webdav.lcg.triumf.ca <http://webdav.lcg.triumf.ca/> port 2880 (#0); >>>>>>> * Trying 2607:f8f0:660:3::36...; >>>>>>> * Connected to webdav.lcg.triumf.ca <http://webdav.lcg.triumf.ca/> (2607:f8f0:660:3::36) port 2880 (#0); >>>>>>> * Initializing NSS with certpath: sql:/etc/pki/nssdb; >>>>>>> * CAfile: /etc/pki/tls/certs/ca-bundle.crt; >>>>>>> CApath: none; >>>>>>> * Server certificate:; >>>>>>> * 	subject: CN=dpool46.lcg.triumf.ca <http://dpool46.lcg.triumf.ca/>,OU=triumf.ca <https://can01.safelinks.prote",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840018942:4098,safe,safelinks,4098,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840018942,1,['safe'],['safelinks']
Safety,"trace (sig=5) at /home/vpadulan/programs/rootproject/rootsrc/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182; #5 0x00007f4d2f866644 in (anonymous namespace)::TExceptionHandlerImp::HandleException (this=0x55bd15d7d000, sig=5) at /home/vpadulan/programs/rootproject/rootsrc/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:201; #6 0x00007f4d2f5255f9 in TUnixSystem::DispatchSignals (this=0x55bd15241770, sig=kSigAbort) at /home/vpadulan/programs/rootproject/rootsrc/core/unix/src/TUnixSystem.cxx:3610; #7 0x00007f4d2f51d544 in SigHandler (sig=kSigAbort) at /home/vpadulan/programs/rootproject/rootsrc/core/unix/src/TUnixSystem.cxx:395; #8 0x00007f4d2f52554f in sighandler (sig=6) at /home/vpadulan/programs/rootproject/rootsrc/core/unix/src/TUnixSystem.cxx:3586; #9 <signal handler called>; #10 0x00007f4d6813bc4c in __pthread_kill_implementation () from /lib64/libc.so.6; #11 0x00007f4d680eb9c6 in raise () from /lib64/libc.so.6; #12 0x00007f4d680d57f4 in abort () from /lib64/libc.so.6; #13 0x00007f4d683a3f3d in _Py_FatalErrorFormat () from /lib64/libpython3.10.so.1.0; #14 0x00007f4d683532d8 in _enter_buffered_busy.cold () from /lib64/libpython3.10.so.1.0; #15 0x00007f4d6846b95e in buffered_flush () from /lib64/libpython3.10.so.1.0; #16 0x00007f4d683d0c24 in method_vectorcall_NOARGS () from /lib64/libpython3.10.so.1.0; #17 0x00007f4d683dfdae in PyObject_VectorcallMethod () from /lib64/libpython3.10.so.1.0; #18 0x00007f4d6846b70e in _io_TextIOWrapper_flush () from /lib64/libpython3.10.so.1.0; #19 0x00007f4d683d0c24 in method_vectorcall_NOARGS () from /lib64/libpython3.10.so.1.0; #20 0x00007f4d683dfdae in PyObject_VectorcallMethod () from /lib64/libpython3.10.so.1.0; #21 0x00007f4d6846e605 in flush_std_files () from /lib64/libpython3.10.so.1.0; #22 0x00007f4d6837f800 in fatal_error.lto_priv () from /lib64/libpython3.10.so.1.0; #23 0x00007f4d683a3ffa in _Py_FatalErrorFormat () from /lib64/libpython3.10.so.1.0; #24 0x00007f4d683532d8 in _e",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11515#issuecomment-1271819714:2193,abort,abort,2193,https://root.cern,https://github.com/root-project/root/issues/11515#issuecomment-1271819714,1,['abort'],['abort']
Safety,"train a model with TMVA.; const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";; train(filename);. // Next, we load the model from the TMVA XML file.; RLegacyReader model(""TMVAClassification/weights/TMVAClassification_BDT.weights.xml"");. // In case you need a reminder of the names and order of the variables during; // training, you can ask the model for it.; auto variables = model.GetVariableNames();; std::cout << ""\nVariable names used during training: "" << variables << ""\n\n"";. // The model can now be applied in different scenarios:; // 1) Event-by-event inference; // 2) Batch inference on data of multiple events; // 3) Model inference as part of an RDataFrame graph. // 1) Event-by-event inference; // The event-by-event inference takes the values of the variables as a std::vector<float>.; // Note that the return value is as well a std::vector<float> since the reader; // is also capable to process models with multiple outputs.; auto prediction = model.Predict({0.5, 1.0, -0.2, 1.5});; std::cout << ""Single-event inference: "" << prediction << ""\n\n"";. // 2) Batch inference on data of multiple events; // For batch inference, the data needs to be structured as a matrix. For this; // purpose, TMVA makes use of the RTensor class. For convenience, we use RDataFrame; // and the AsTensor utility to make the read-out from the ROOT file.; ROOT::RDataFrame df(""TreeS"", filename);; auto df2 = df.Range(3); // Read only 10 events; auto x = AsTensor<float>(df2, variables);; std::cout << ""RTensor input for inference on data of multiple events:\n"" << x << ""\n\n"";. auto y = model.Predict(x);; std::cout << ""Prediction performed on multiple events: "" << y << ""\n\n"";. // 3) Perform inference as part of an RDataFrame graph; // We write a small lambda function that performs for us the inference on; // a dataframe to omit code duplication.; auto make_histo = [&](const std::string &treename) {; ROOT::RDataFrame df(treename, filename);; auto df2 = df.Define(""y"", Pred",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3321:1336,Predict,Predict,1336,https://root.cern,https://github.com/root-project/root/pull/3321,1,['Predict'],['Predict']
Safety,"tringView.hxx(32): error: ""basic_string_view"" has already been declared in the current scope. /build/root/src/root-6.22.00-cuda/core/foundation/inc/ROOT/RStringView.hxx(35): error: invalid redeclaration of type name ""std::string_view""; /usr/lib/gcc/x86_64-pc-linux-gnu/9.3.0/include/c++/string_view(589): here. /build/root/src/root-6.22.00-cuda/core/foundation/inc/ROOT/RStringView.hxx(36): error: invalid redeclaration of type name ""std::u16string_view""; /usr/lib/gcc/x86_64-pc-linux-gnu/9.3.0/include/c++/string_view(596): here. /build/root/src/root-6.22.00-cuda/core/foundation/inc/ROOT/RStringView.hxx(37): error: invalid redeclaration of type name ""std::u32string_view""; /usr/lib/gcc/x86_64-pc-linux-gnu/9.3.0/include/c++/string_view(597): here. /build/root/src/root-6.22.00-cuda/core/foundation/inc/ROOT/RStringView.hxx(38): error: invalid redeclaration of type name ""std::wstring_view""; /usr/lib/gcc/x86_64-pc-linux-gnu/9.3.0/include/c++/string_view(591): here. 5 errors detected in the compilation of ""/build/root/src/root-6.22.00-cuda/tmva/tmva/src/DNN/Architectures/Cuda.cu"".; make[2]: *** [tmva/tmva/CMakeFiles/TMVA.dir/build.make:2227: tmva/tmva/CMakeFiles/TMVA.dir/src/DNN/Architectures/Cuda.cu.o] Error 1; [ 95%] Building CXX object roofit/roofit/CMakeFiles/RooFit.dir/src/RooJeffreysPrior.cxx.o; [ 95%] Building CXX object roofit/roofit/CMakeFiles/RooFit.dir/src/RooKeysPdf.cxx.o; [ 95%] Building CXX object roofit/roofit/CMakeFiles/RooFit.dir/src/RooLandau.cxx.o; [ 95%] Building CXX object roofit/roofit/CMakeFiles/RooFit.dir/src/RooLognormal.cxx.o; [ 95%] Building CXX object roofit/roofit/CMakeFiles/RooFit.dir/src/RooMathCoreReg.cxx.o; /build/root/src/root-6.22.00-cuda/core/foundation/inc/ROOT/RStringView.hxx(32): error: ""basic_string_view"" has already been declared in the current scope. /build/root/src/root-6.22.00-cuda/core/foundation/inc/ROOT/RStringView.hxx(35): error: invalid redeclaration of type name ""std::string_view""; /usr/lib/gcc/x86_64-pc-linux-gnu/9.3.0/include/c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6058#issuecomment-663594675:4784,detect,detected,4784,https://root.cern,https://github.com/root-project/root/pull/6058#issuecomment-663594675,1,['detect'],['detected']
Safety,"tringView.hxx(32): error: ""basic_string_view"" has already been declared in the current scope. /build/root/src/root-6.22.00-cuda/core/foundation/inc/ROOT/RStringView.hxx(35): error: invalid redeclaration of type name ""std::string_view""; /usr/lib/gcc/x86_64-pc-linux-gnu/9.3.0/include/c++/string_view(589): here. /build/root/src/root-6.22.00-cuda/core/foundation/inc/ROOT/RStringView.hxx(36): error: invalid redeclaration of type name ""std::u16string_view""; /usr/lib/gcc/x86_64-pc-linux-gnu/9.3.0/include/c++/string_view(596): here. /build/root/src/root-6.22.00-cuda/core/foundation/inc/ROOT/RStringView.hxx(37): error: invalid redeclaration of type name ""std::u32string_view""; /usr/lib/gcc/x86_64-pc-linux-gnu/9.3.0/include/c++/string_view(597): here. /build/root/src/root-6.22.00-cuda/core/foundation/inc/ROOT/RStringView.hxx(38): error: invalid redeclaration of type name ""std::wstring_view""; /usr/lib/gcc/x86_64-pc-linux-gnu/9.3.0/include/c++/string_view(591): here. 5 errors detected in the compilation of ""/build/root/src/root-6.22.00-cuda/tmva/tmva/src/DNN/Architectures/Cuda/CudaMatrix.cu"".; make[2]: *** [tmva/tmva/CMakeFiles/TMVA.dir/build.make:2253: tmva/tmva/CMakeFiles/TMVA.dir/src/DNN/Architectures/Cuda/CudaMatrix.cu.o] Error 1; make[2]: *** Waiting for unfinished jobs....; [ 95%] Building CXX object roofit/roofit/CMakeFiles/RooFit.dir/src/RooDecay.cxx.o; [ 95%] Building CXX object roofit/roofit/CMakeFiles/RooFit.dir/src/RooDstD0BG.cxx.o; [ 95%] Building CXX object roofit/roofit/CMakeFiles/RooFit.dir/src/RooExponential.cxx.o; [ 95%] Building CXX object roofit/roofit/CMakeFiles/RooFit.dir/src/RooFunctor1DBinding.cxx.o; [ 95%] Building CXX object roofit/roofit/CMakeFiles/RooFit.dir/src/RooFunctorBinding.cxx.o; /build/root/src/root-6.22.00-cuda/core/foundation/inc/ROOT/RStringView.hxx(32): error: ""basic_string_view"" has already been declared in the current scope. /build/root/src/root-6.22.00-cuda/core/foundation/inc/ROOT/RStringView.hxx(35): error: invalid redeclaration of typ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6058#issuecomment-663594675:1162,detect,detected,1162,https://root.cern,https://github.com/root-project/root/pull/6058#issuecomment-663594675,1,['detect'],['detected']
Safety,"tringView.hxx(32): error: ""basic_string_view"" has already been declared in the current scope. /build/root/src/root-6.22.00-cuda/core/foundation/inc/ROOT/RStringView.hxx(35): error: invalid redeclaration of type name ""std::string_view""; /usr/lib/gcc/x86_64-pc-linux-gnu/9.3.0/include/c++/string_view(589): here. /build/root/src/root-6.22.00-cuda/core/foundation/inc/ROOT/RStringView.hxx(36): error: invalid redeclaration of type name ""std::u16string_view""; /usr/lib/gcc/x86_64-pc-linux-gnu/9.3.0/include/c++/string_view(596): here. /build/root/src/root-6.22.00-cuda/core/foundation/inc/ROOT/RStringView.hxx(37): error: invalid redeclaration of type name ""std::u32string_view""; /usr/lib/gcc/x86_64-pc-linux-gnu/9.3.0/include/c++/string_view(597): here. /build/root/src/root-6.22.00-cuda/core/foundation/inc/ROOT/RStringView.hxx(38): error: invalid redeclaration of type name ""std::wstring_view""; /usr/lib/gcc/x86_64-pc-linux-gnu/9.3.0/include/c++/string_view(591): here. 5 errors detected in the compilation of ""/build/root/src/root-6.22.00-cuda/tmva/tmva/src/DNN/Architectures/Cuda/CudaTensor.cu"".; make[2]: *** [tmva/tmva/CMakeFiles/TMVA.dir/build.make:2266: tmva/tmva/CMakeFiles/TMVA.dir/src/DNN/Architectures/Cuda/CudaTensor.cu.o] Error 1; [ 95%] Building CXX object roofit/roofit/CMakeFiles/RooFit.dir/src/RooGamma.cxx.o; [ 95%] Building CXX object roofit/roofit/CMakeFiles/RooFit.dir/src/RooGaussian.cxx.o; [ 95%] Building CXX object roofit/roofit/CMakeFiles/RooFit.dir/src/RooGaussModel.cxx.o; [ 95%] Building CXX object roofit/roofit/CMakeFiles/RooFit.dir/src/RooGExpModel.cxx.o; [ 95%] Building CXX object roofit/roofit/CMakeFiles/RooFit.dir/src/RooHistConstraint.cxx.o; [ 95%] Building CXX object roofit/roofit/CMakeFiles/RooFit.dir/src/RooIntegralMorph.cxx.o; /build/root/src/root-6.22.00-cuda/core/foundation/inc/ROOT/RStringView.hxx(32): error: ""basic_string_view"" has already been declared in the current scope. /build/root/src/root-6.22.00-cuda/core/foundation/inc/ROOT/RStringView.hxx(35",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6058#issuecomment-663594675:2954,detect,detected,2954,https://root.cern,https://github.com/root-project/root/pull/6058#issuecomment-663594675,1,['detect'],['detected']
Safety,"try *>() == &UFE && ""filename from getStatValue() refers to wrong file""' failed.; error: subprocess-exited-with-error; ; Ã— python setup.py egg_info did not run successfully.; â”‚ exit code: -6; â•°â”€> See above for output.; ; note: This error originates from a subprocess, and is likely not a problem with pip.; full command: /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc10/external/python3/3.9.6-67e5cf5b4952101922f1d4c8474baa39/bin/python3 -c '; exec(compile('""'""''""'""''""'""'; # This is <pip-setuptools-caller> -- a caller that pip uses to run setup.py; #; # - It imports setuptools before invoking setup.py, to enable projects that directly; # import from `distutils.core` to work with newer packaging standards.; # - It provides a clear error message when setuptools is not installed.; # - It sets `sys.argv[0]` to the underlying `setup.py`, when invoking `setup.py` so; # setuptools doesn'""'""'t think the script is `-c`. This avoids the following warning:; # manifest_maker: standard file '""'""'-c'""'""' not found"".; # - It generates a shim setup.py, for handling setup.cfg-only projects.; import os, sys, tokenize; ; try:; import setuptools; except ImportError as error:; print(; ""ERROR: Can not execute `setup.py` since setuptools is not available in ""; ""the build environment."",; file=sys.stderr,; ); sys.exit(1); ; __file__ = %r; sys.argv[0] = __file__; ; if os.path.exists(__file__):; filename = __file__; with tokenize.open(__file__) as f:; setup_py_code = f.read(); else:; filename = ""<auto-generated setuptools caller>""; setup_py_code = ""from setuptools import setup; setup()""; ; exec(compile(setup_py_code, filename, ""exec"")); '""'""''""'""''""'""' % ('""'""'.../py3-hepdata-lib/0.8.1-ec986c2493f655785ae2df5c3741f2df/cmsdist-tmp/pip-req-build-02hlcwf_/setup.py'""'""',), ""<pip-setuptools-caller>"", ""exec""))' egg_info --egg-base .../py3-hepdata-lib/0.8.1-ec986c2493f655785ae2df5c3741f2df/cmsdist-tmp/pip-pip-egg-info-pxqkc5sy; cwd: .../py3-hepdata-lib/0.8.1-ec986c2493f6",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1154135015:3290,avoid,avoids,3290,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1154135015,1,['avoid'],['avoids']
Safety,"ttp://root.cern.ch/files/tmva_class_example.root"";; train(filename);. // Next, we load the model from the TMVA XML file.; RLegacyReader model(""TMVAClassification/weights/TMVAClassification_BDT.weights.xml"");. // In case you need a reminder of the names and order of the variables during; // training, you can ask the model for it.; auto variables = model.GetVariableNames();; std::cout << ""\nVariable names used during training: "" << variables << ""\n\n"";. // The model can now be applied in different scenarios:; // 1) Event-by-event inference; // 2) Batch inference on data of multiple events; // 3) Model inference as part of an RDataFrame graph. // 1) Event-by-event inference; // The event-by-event inference takes the values of the variables as a std::vector<float>.; // Note that the return value is as well a std::vector<float> since the reader; // is also capable to process models with multiple outputs.; auto prediction = model.Predict({0.5, 1.0, -0.2, 1.5});; std::cout << ""Single-event inference: "" << prediction << ""\n\n"";. // 2) Batch inference on data of multiple events; // For batch inference, the data needs to be structured as a matrix. For this; // purpose, TMVA makes use of the RTensor class. For convenience, we use RDataFrame; // and the AsTensor utility to make the read-out from the ROOT file.; ROOT::RDataFrame df(""TreeS"", filename);; auto df2 = df.Range(3); // Read only 10 events; auto x = AsTensor<float>(df2, variables);; std::cout << ""RTensor input for inference on data of multiple events:\n"" << x << ""\n\n"";. auto y = model.Predict(x);; std::cout << ""Prediction performed on multiple events: "" << y << ""\n\n"";. // 3) Perform inference as part of an RDataFrame graph; // We write a small lambda function that performs for us the inference on; // a dataframe to omit code duplication.; auto make_histo = [&](const std::string &treename) {; ROOT::RDataFrame df(treename, filename);; auto df2 = df.Define(""y"", Predict<4, float>(model), variables);; return df2.Histo1D({""""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3321:1412,predict,prediction,1412,https://root.cern,https://github.com/root-project/root/pull/3321,1,['predict'],['prediction']
Safety,ty checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1678; /opt/root_src/builtins/lz4/lz4.c:1678:9: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Assuming the condition is false in /opt/root_src/builtins/lz4/lz4.c:1673; 2: Taking false branch in /opt/root_src/builtins/lz4/lz4.c:1673; 3: Assuming 'dictSize' is <= field 'dictSize' in /opt/root_src/builtins/lz4/lz4.c:1674; 4: Taking false branch in /opt/root_src/builtins/lz4/lz4.c:1674; 5: Assuming 'safeBuffer' is equal to NULL in /opt/root_src/builtins/lz4/lz4.c:1676; 6: Taking true branch in /opt/root_src/builtins/lz4/lz4.c:1676; 7: Assuming 'dictSize' is > 0 in /opt/root_src/builtins/lz4/lz4.c:1677; 8: Taking true branch in /opt/root_src/builtins/lz4/lz4.c:1677; 9: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/builtins/lz4/lz4.c:1678; /opt/root_src/builtins/lz4/lz4.c:1833:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'me,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:15352,safe,safeBuffer,15352,https://root.cern,https://github.com/root-project/root/issues/7411,1,['safe'],['safeBuffer']
Safety,"ubuntu@root-cmake-devel:~/git/root/builddir$ cmake -DCMAKE_PREFIX_PATH=~/temp/install -Dminimal=ON -Dbuiltin_xrootd=OFF -Dxrootd=ON -Dfail-on-missing=ON -Dbuiltin_nlohmannjson=ON -Dbuiltin_lzma=ON -Dbuiltin_xxhash=ON -Dbuiltin_zstd=ON -Dbuiltin_lz4=ON -Dbuiltin_afterimage=ON -Dbuiltin_gl2ps=ON -DCMAKE_VERBOSE_MAKEFILE=ON ../; -- The C compiler identification is GNU 9.4.0; -- The CXX compiler identification is GNU 9.4.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Git: /usr/bin/git (found version ""2.25.1""); -- Detected ROOT_VERSION 6.29.01; -- Checking internet connectivity; -- Checking internet connectivity - found; -- Looking for Python; -- Found Python3: /usr/bin/python3.8 (found version ""3.8.10"") found components: Interpreter Development NumPy; -- Could NOT find Python2 (missing: Python2_NumPy_INCLUDE_DIRS NumPy) (found version ""2.7.18""); -- Found GCC. Major version 9, minor version 4; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed; -- Looking for pthread_create in pthreads; -- Looking for pthread_create in pthreads - not found; -- Looking for pthread_create in pthread; -- Looking for pthread_create in pthread - found; -- Found Threads: TRUE; -- Performing Test GLIBCXX_USE_CXX11_ABI; -- Performing Test GLIBCXX_USE_CXX11_ABI - Success; -- ROOT Platform: linux; -- ROOT Compiler: GNU 9.4.0; -- ROOT Processor: x86_64; -- ROOT Architecture: linuxx8664gcc; -- Build Type: 'Release' (flags = '-O3",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12631#issuecomment-1504751163:1050,Detect,Detected,1050,https://root.cern,https://github.com/root-project/root/issues/12631#issuecomment-1504751163,1,['Detect'],['Detected']
Safety,"uild\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\include\clang/Basic/OpenMPKinds.def(303,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\Analysis\ConstructionContext.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\Analysis\obj.clangAnalysis.vcxproj] ; - [2022-09-13T07:52:15.959Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\CodeGen\RegAllocPBQP.cpp(943,1): fatal error C1060: compiler is out of heap space [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\CodeGen\LLVMCodeGen.vcxproj] ; - [2022-09-13T07:52:15.959Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/ADT/PointerUnion.h(205,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\CodeGen\RenameIndependentSubregs.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\CodeGen\LLVMCodeGen.vcxproj] ; - [2022-09-13T07:52:15.959Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/ADT/ArrayRef.h(137,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\CodeGen\RegisterUsageInfo.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\CodeGen\LLVMCodeGen.vcxproj] ; - [2022-09-13T07:52:15.959Z] C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility(3986,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\CodeGen\SafeStackColoring.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\CodeGen\LLVMCodeGen.vcxproj] . And 52 more",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11350#issuecomment-1245043134:4316,Safe,SafeStackColoring,4316,https://root.cern,https://github.com/root-project/root/pull/11350#issuecomment-1245043134,1,['Safe'],['SafeStackColoring']
Safety,"ull pointer or trying to call routine taking non-null arguments; ==22765== ; ==22765== Process terminating with default action of signal 6 (SIGABRT); ==22765== at 0x546E18B: raise (raise.c:51); ==22765== by 0x544D92D: abort (abort.c:100); ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29); ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29); ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29); ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29); ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so); ==22765== by 0x4DFF3CC: ???; ==22765== by 0x1FFEFFBB3F: ???; ==22765== by 0xB60A6A5548AF56FF: ???; ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so); ==22765== by 0x4DEB03F: ???; ==22765== ; ==22765== HEAP SUMMARY:; ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks; ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated; ==22765== ; ==22765== LEAK SUMMARY:; ==22765== definitely lost: 0 bytes in 0 blocks; ==22765== indirectly lost: 0 bytes in 0 blocks; ==22765== possibly lost: 7,728 bytes in 66 blocks; ==22765== still reachable: 66,622,884 bytes in 169,043 blocks; ==22765== of which reachable via heuristic:; ==22765== stdstring : 111 bytes in 1 blocks; ==22765== multipleinheritance: 7,776 bytes in 10 blocks; ==22765== suppressed: 278,964 bytes in 3,461 blocks; ==22765== Rerun with --leak-check=full to see details of leaked memory; ==22765== ; ==22765== Use --track-origins=yes to see where uninitialised values come from; ==22765== For lists of detected and suppressed errors, rerun with: -s; ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20); Aborted (core dumped). ```. @hahnjo, do you have a clue what to do here?. PS: It seems similar to RadeonOpenCompute/ROCm#1179",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11252#issuecomment-1250106081:8651,detect,detected,8651,https://root.cern,https://github.com/root-project/root/pull/11252#issuecomment-1250106081,2,"['Abort', 'detect']","['Aborted', 'detected']"
Safety,"unction not viable: no known conversion from 'integral_constant<...>' to 'integral_constant<...>' for 2nd argument; _M_move_assign(vector&& __x, std::true_type) noexcept; ^; /usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_vector.h:1688:7: note: candidate function not viable: no known conversion from 'integral_constant<[...], true aka true>' to 'integral_constant<[...], false>' for 2nd argument; _M_move_assign(vector&& __x, std::false_type); ^; /usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_vector.h:601:2: error: no matching member function for call to '_M_move_assign'; _M_move_assign(std::move(__x), __bool_constant<__move_storage>());; ^~~~~~~~~~~~~~; /usr/include/Pythia8/HelicityBasics.h:240:9: note: in instantiation of member function 'std::vector<std::vector<std::complex<double>, std::allocator<std::complex<double> > >, std::allocator<std::vector<std::complex<double>, std::allocator<std::complex<double> > > > >::operator=' requested here; rho = vector< vector<complex> >(spinStates(),; ^; /usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_vector.h:1677:7: note: candidate function not viable: no known conversion from 'integral_constant<...>' to 'integral_constant<...>' for 2nd argument; _M_move_assign(vector&& __x, std::true_type) noexcept; ^; /usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_vector.h:1688:7: note: candidate function not viable: no known conversion from 'integral_constant<[...], true aka true>' to 'integral_constant<[...], false>' for 2nd argument; _M_move_assign(vector&& __x, std::false_type); ^; Error: /home/jhahnfel/ROOT/build/bin/rootcling: compilation failure (/home/jhahnfel/ROOT/build/lib/libEGPythia898309100d9_dictUmbrella.h); ```. ### Expected behavior; The build should succeed. ### To Reproduce; Configure current `master` with `cmake -DCMAKE_CXX_STANDARD=14` (or on a platform where this is detected as the default) and then switch to `CMAKE_CXX_STANDARD=17`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8642:10091,detect,detected,10091,https://root.cern,https://github.com/root-project/root/issues/8642,1,['detect'],['detected']
Safety,"utlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Csimonliu%40triumf.ca%7C2bf615c9bb89486eaecd08d91571b94b%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564400460986294%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=5bPVTg%2FPGN9TjNPlZWD4xVs43NW32MwdifaSj7PR%2FEc%3D&reserved=0>; >>>>>> * About to connect() to webdav.lcg.triumf.ca ; >>>>>> <http://webdav.lcg.triumf.ca/> port 2880 (#0); >>>>>> * Trying 2607:f8f0:660:3::36...; >>>>>> * Connected to webdav.lcg.triumf.ca ; >>>>>> <http://webdav.lcg.triumf.ca/> (2607:f8f0:660:3::36) port 2880 (#0); >>>>>> * Initializing NSS with certpath: sql:/etc/pki/nssdb; >>>>>> * CAfile: /etc/pki/tls/certs/ca-bundle.crt; >>>>>> CApath: none; >>>>>> * Server certificate:; >>>>>> * subject: CN=dpool46.lcg.triumf.ca ; >>>>>> <http://dpool46.lcg.triumf.ca/>,OU=triumf.ca ; >>>>>> <https://can01.safelinks.protection.outlook.com/?url=http%3A%2F%2Ftriumf.ca%2F&data=04%7C01%7Csimonliu%40triumf.ca%7C2bf615c9bb89486eaecd08d91571b94b%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564400460986294%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=h9OXPXSoNf6rog1YhZy1Iuiji7Tq8asNeePutHMw2rs%3D&reserved=0>,O=Grid,C=CA; >>>>>> * start date: Apr 08 16:29:03 2021 GMT; >>>>>> * expire date: May 08 16:29:03 2022 GMT; >>>>>> * common name: dpool46.lcg.triumf.ca <http://dpool46.lcg.triumf.ca/>; >>>>>> * issuer: CN=Grid Canada Certificate Authority,O=Grid,C=CA; >>>>>> * NSS error -8179 (SEC_ERROR_UNKNOWN_ISSUER); >>>>>> * Peer's Certificate issuer is not recognized.; >>>>>> * Closing connection 0; >>>>>> curl: (60) Peer's Certificate issuer is not recognized.; >>>>>> More details here: http://curl.haxx.se/docs/sslcerts.html ; >>>>>> <https://can01.safelinks.protection.outlook.com/?url=http%3A%2F%2Fcurl.haxx.se%2Fdocs%2Fsslcerts.html&data=04%7C01",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840016493:4389,safe,safelinks,4389,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840016493,1,['safe'],['safelinks']
Safety,"v.lcg.triumf.ca <http://webdav.lcg.triumf.ca/>; >> PING (137.138.28.175) 56(124) bytes of data.; >> ; >> --- ping statistics ---; >> 10 packets transmitted, 0 received, 100% packet loss, time 8999ms; >> ; >> ***@***.*** ~]$ ; >> ; >> Vitaliy, shouldn't we expect that to be accessible from lxplus ?; >> ; >> regards,; >> Asoka; >> ; >>> On May 12, 2021, at 10:37 AM, Di Qing ***@***.*** ***@***.***>> wrote:; >>> ; >>> Maybe the connections were from commodity network? Are you able to ping webdav.lcg.triumf.ca <http://webdav.lcg.triumf.ca/>?; >>> ; >>> Thanks,; >>> ; >>> Di; >>> ; >>>> On May 12, 2021, at 10:29 AM, Asoka De Silva ***@***.*** ***@***.***>> wrote:; >>>> ; >>>> ﻿ Hi Axel,; >>>> ; >>>> I don't know but I'll add Simon and Di who are the Tier-1 experts and may have ideas.; >>>> ; >>>> Simon and Di, Axel has this issue and me a similar one - any ideas ?; >>>> ; >>>> ; >>>>> ; >>>>>> s I crosscheck (to see whether it's related to the Davix redirect issue #8155 <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8155&data=04%7C01%7Cdqing%40triumf.ca%7Cb7cde810efc1452a4eab08d9156d8727%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564382428498460%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=uCliumeh1X0KTsDzvHcojQm9qfvqZ96DsLCqoTBDdgs%3D&reserved=0> ) I tried with curl but I get; >>>>>> ; >>>>>> $ curl -v https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Cdqing%40triumf.ca%7Cb7cde810efc1452a4eab08d9156d8727%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564382428498460%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=10rGCkpmGr%2B9fH%2Bkia72pl3SABkka%2Bj5DwU",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-839991525:1501,safe,safelinks,1501,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-839991525,1,['safe'],['safelinks']
Safety,v6-22: Fix issue #6670. Avoid infinite recursion from TClass::InheritsFrom.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6732:24,Avoid,Avoid,24,https://root.cern,https://github.com/root-project/root/pull/6732,1,['Avoid'],['Avoid']
Safety,v6-26: Avoid TPad::fFrame double delete when read from file,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11849:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/11849,1,['Avoid'],['Avoid']
Safety,v6-28 Core: Avoid (indirect) memory hoarding in TPluginManager.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14375:12,Avoid,Avoid,12,https://root.cern,https://github.com/root-project/root/pull/14375,1,['Avoid'],['Avoid']
Safety,v6-30 Core: Avoid (indirect) memory hoarding in TPluginManager.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14374:12,Avoid,Avoid,12,https://root.cern,https://github.com/root-project/root/pull/14374,1,['Avoid'],['Avoid']
Safety,v616 Avoid crash in IO and Prevent split in presence of Streamer free function,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4194:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/4194,1,['Avoid'],['Avoid']
Safety,v618 Avoid crash in IO and Prevent split in presence of Streamer free function,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4193:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/4193,1,['Avoid'],['Avoid']
Safety,v620: Avoid streaming a copy of the TPaveStats parent during the TH1 cloning process.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5635:6,Avoid,Avoid,6,https://root.cern,https://github.com/root-project/root/pull/5635,1,['Avoid'],['Avoid']
Safety,v620: Avoid template instantiation during tear down.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5463:6,Avoid,Avoid,6,https://root.cern,https://github.com/root-project/root/pull/5463,1,['Avoid'],['Avoid']
Safety,"vc++ -DCMAKE_C_COMPILER=nvc -DCMAKE_CXX_FLAGS=-std=c++17 -Dx11=OFF -Dtbb=OFF -Dopengl=OFF -Dgviz=OFF -Dimt=OFF -Ddavix=OFF -Dvdt=OFF -Dxrootd=OFF -Dwebgui=OFF -Dsqlite=OFF -Dssl=OFF -Dmysql=OFF -Doracle=OFF -Dpgsql=OFF -Ddavix=OFF -Dgfal=OFF -Dimt=OFF -Dbuiltin_llvm=OFF -DC_SUPPORTS_FPIC=true -DCXX_SUPPORTS_FPIC=true -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_INSTALL_PREFIX=/opt/root/v6-30-03_nvhpc239 ../src; ```. However this results in the following error:; ```; rootcling_stage1: /bld6/root/bld_nvhpc/interpreter/llvm-project/clang/include/clang/Driver/Options.inc:7564: lambda []()->auto::operator()()->auto: Assertion `ValuesWereAdded && ""Couldn't add values to OptTable!""' failed.; #0 0x000000000cb9e5b1 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0; #1 0x000000000cb9bf7e SignalHandler(int) Signals.cpp:0:0; #2 0x00007ffb0ce97630 __restore_rt sigaction.c:0:0; #3 0x00007ffb0a4f4387 raise (/lib64/libc.so.6+0x36387); #4 0x00007ffb0a4f5a78 abort (/lib64/libc.so.6+0x37a78); #5 0x00007ffb0a4ed1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6); #6 0x00007ffb0a4ed252 (/lib64/libc.so.6+0x2f252); #7 0x000000000628a2f0 clang::driver::getDriverOptTable()::'lambda'()::operator()() const /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:7569:1; #8 0x000000000628a22a clang::driver::getDriverOptTable() /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:43:1; #9 0x0000000004324c6c cling::CompilerOptions::Parse(int, char const* const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:152:1; #10 0x00000000043257e4 cling::InvocationOptions::InvocationOptions(int, char const* const*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:265:1; #11 0x00000",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14250:1826,abort,abort,1826,https://root.cern,https://github.com/root-project/root/issues/14250,1,['abort'],['abort']
Safety,"w users can register a drawing of a result histogram in the same way in single- and multi-thread analysis, like this:. ```c++; // Draw partial result on canvas every 500 events; TCanvas c(""c"", ""Running event loop..."");; h.OnPartialResult(100, [&c](TH1D &h_) {; c.cd();; h_.Draw();; c.Update();; });; ```; @Axel-Naumann users can open a `TBrowser` and check result updates while the event loop is running quite easily:; ```c++; // create ""TDFResults"" directory in TBrowser; TBrowser b(""b"", ""event loop peeper"");; TMemFile m(""TDFResults"", ""RECREATE"");. // add partial result to the ""TDFResults""; m.Browse(&b); // it would be cool if we could change the current directory in the TBrowser to `TDFResults` here; h.OnPartialResult(decltype(h)::kOnce, [&m](TH1D &h_) { m.Add(&h_); });. // call ProcessEvents every once in a while during the event loop to allow users to navigate the TBrowser; h.OnPartialResult(50, [](TH1D &hist) { gSystem->ProcessEvents(); });; ```; @peremato here is how one would implement a thread-safe progress bar for a TDF multi-thread analysis; ```c++; // Update progress bar every 100 events; std::string progress;; std::mutex bar_mutex;; c.OnPartialResultSlot(nEvents / 100, [&progress, &bar_mutex](unsigned int, ULong64_t &c_) {; std::lock_guard<std::mutex> lg(bar_mutex);; progress.push_back('#');; std::cout << ""\r["" << std::left << std::setw(100) << progress << ']' << std::flush;; });; ```. Here are the corresponding self-contained, fully working code examples:; [draw_partial_result.txt](https://github.com/root-project/root/files/1327464/draw_partial_result.txt); [inspect_analysis.txt](https://github.com/root-project/root/files/1327466/inspect_analysis.txt); [progress_bar.txt](https://github.com/root-project/root/files/1327469/progress_bar.txt); (for some reason github does not allow files with `.cpp` extension :man_shrugging: ). For common-enough callbacks one can always imagine to provide helper functions of course.; I like this feature a lot. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1037#issuecomment-331722007:1022,safe,safe,1022,https://root.cern,https://github.com/root-project/root/pull/1037#issuecomment-331722007,1,['safe'],['safe']
Safety,"ware Foundation, Inc.; License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>; This is free software: you are free to change and redistribute it.; There is NO WARRANTY, to the extent permitted by law.; Type ""show copying"" and ""show warranty"" for details.; This GDB was configured as ""x86_64-pc-linux-gnu"".; Type ""show configuration"" for configuration details.; For bug reporting instructions, please see:; <https://bugs.gentoo.org/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>. For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from bin/root.exe...; (gdb) break f; Function ""f"" not defined.; Make breakpoint pending on future shared library load? (y or [n]) y; Breakpoint 1 (f) pending.; (gdb) run; Starting program: /srv/root/build/bin/root.exe ; warning: File ""/srv/root/build/lib/libCore.so-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; 	add-auto-load-safe-path /srv/root/build/lib/libCore.so-gdb.py; line to your configuration file ""/home/amadio/.config/gdb/gdbinit"".; To completely disable this security protection add; 	set auto-load safe-path /; line to your configuration file ""/home/amadio/.config/gdb/gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; 	info ""(gdb)Auto-loading safe path""; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/usr/lib64/libthread_db.so.1"".; [Detaching after vfork from child process 798483]; [Detaching after vfork from child process 800084]; [Detaching after vfork from child process 800087]; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |; ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11882:1433,safe,safe-path,1433,https://root.cern,https://github.com/root-project/root/pull/11882,1,['safe'],['safe-path']
Safety,"we get; Result from TTree:Scan(""x:treefriend.y""):; ```; Error in <TTreeFormula::Compile>: Bad numerical expression : ""treefriend.y""; ************************************; * Row * x * treefrien *; ************************************; * 0 * 0 * *; * 1 * 1 * *; * 2 * 2 * *; * 3 * 3 * *; * 4 * 4 * *; * 5 * 5 * *; * 6 * 6 * *; * 7 * 7 * *; * 8 * 8 * *; ************************************; ```; Result from rdf.Display()->Print():; ```; Error in <TTreeReaderValueBase::CreateProxy()>: The branch treefriend.y is contained in a Friend TTree that is not directly attached to the main.; This is not yet supported by TTreeReader.; terminate called after throwing an instance of 'std::runtime_error'; what(): An error was encountered while processing the data. TTreeReader status code is: 6; Aborted (core dumped); ```; Which are both somewhat unexpected since the friend chain has a name and it should be easy to distinguish its entries from the main tree. I do like better the RDataFrame (TTreeReader) error here though since it gives me somewhat of an hint that I need to do something about my friend chain. ## Sub-case 3.2; Somehow inconsistently, calling the friend variable just ""y"" works for TTree::Scan; Result from TTree:Scan(""x:y""):; ```; ************************************; * Row * x * y *; ************************************; * 0 * 0 * 0 *; * 1 * 1 * 1 *; * 2 * 2 * 2 *; * 3 * 3 * 0 *; * 4 * 4 * 1 *; * 5 * 5 * 2 *; * 6 * 6 * 0 *; * 7 * 7 * 1 *; * 8 * 8 * 2 *; ************************************; ```; But fortunately RDataFrame(TTreeReader) still gives the same error; Result from rdf.Display()->Print():; ```; Error in <TTreeReaderValueBase::CreateProxy()>: The branch treefriend.y is contained in a Friend TTree that is not directly attached to the main.; This is not yet supported by TTreeReader.; terminate called after throwing an instance of 'std::runtime_error'; what(): An error was encountered while processing the data. TTreeReader status code is: 6; Aborted (core dumped); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7785#issuecomment-816500613:16059,Abort,Aborted,16059,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-816500613,1,['Abort'],['Aborted']
Safety,"webdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Csimonliu%40triumf.ca%7Ca59fceaddf634d196e5608d91576f34a%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564422909247358%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=lnK7F9PwtLyhMgfW1BGV%2F3jGJQ2O5M9uq%2F4p66Y5ihI%3D&reserved=0>; >>>>>>>> * About to connect() to webdav.lcg.triumf.ca ; >>>>>>>> <http://webdav.lcg.triumf.ca/> port 2880 (#0); >>>>>>>> *   Trying 2607:f8f0:660:3::36...; >>>>>>>> * Connected to webdav.lcg.triumf.ca ; >>>>>>>> <http://webdav.lcg.triumf.ca/> (2607:f8f0:660:3::36) port 2880 (#0); >>>>>>>> * Initializing NSS with certpath: sql:/etc/pki/nssdb; >>>>>>>> *   CAfile: /etc/pki/tls/certs/ca-bundle.crt; >>>>>>>>   CApath: none; >>>>>>>> * Server certificate:; >>>>>>>> * subject: CN=dpool46.lcg.triumf.ca ; >>>>>>>> <http://dpool46.lcg.triumf.ca/>,OU=triumf.ca ; >>>>>>>> <https://can01.safelinks.protection.outlook.com/?url=http%3A%2F%2Ftriumf.ca%2F&data=04%7C01%7Csimonliu%40triumf.ca%7Ca59fceaddf634d196e5608d91576f34a%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564422909247358%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=6x%2BvqAwaP4JatJuGaFF%2FDau8refUUubCF0W9oyCbdgg%3D&reserved=0>,O=Grid,C=CA; >>>>>>>> * start date: Apr 08 16:29:03 2021 GMT; >>>>>>>> * expire date: May 08 16:29:03 2022 GMT; >>>>>>>> * common name: dpool46.lcg.triumf.ca ; >>>>>>>> <http://dpool46.lcg.triumf.ca/>; >>>>>>>> * issuer: CN=Grid Canada Certificate Authority,O=Grid,C=CA; >>>>>>>> * NSS error -8179 (SEC_ERROR_UNKNOWN_ISSUER); >>>>>>>> * Peer's Certificate issuer is not recognized.; >>>>>>>> * Closing connection 0; >>>>>>>> curl: (60) Peer's Certificate issuer is not recognized.; >>>>>>>> More details here: http://curl.haxx.se/docs/sslcerts.html ; >>>>>>>> <https://can01.safelinks.protection.outlook.com/?url=http%3A%2F%2Fcurl.haxx.se%",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840043080:6385,safe,safelinks,6385,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840043080,1,['safe'],['safelinks']
Safety,"webdav.lcg.triumf.ca?; > ; > Thanks,; > ; > Di; > ; >> On May 12, 2021, at 10:29 AM, Asoka De Silva ***@***.***> wrote:; >> ; >> ﻿ Hi Axel,; >> ; >> I don't know but I'll add Simon and Di who are the Tier-1 experts and may have ideas.; >> ; >> Simon and Di, Axel has this issue and me a similar one - any ideas ?; >> ; >> ; >>> ; >>>> s I crosscheck (to see whether it's related to the Davix redirect issue #8155 <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8155&data=04%7C01%7Cdqing%40triumf.ca%7C96f8066e53054f808afe08d9156b7b02%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564373643127522%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=ieWzynOWVK%2BPOmP4TMbx4CxPX%2FiVAcbvEM8tjOw7c2k%3D&reserved=0> ) I tried with curl but I get; >>>> ; >>>> $ curl -v https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Cdqing%40triumf.ca%7C96f8066e53054f808afe08d9156b7b02%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564373643137511%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=GjymmnKYXiP8M44wA%2FsXFGn3CjwfNf1W8%2BpOLMvcaJg%3D&reserved=0>; >>>> * Trying 206.12.9.197:2880...; >>>> * TCP_NODELAY set; >>>> * Trying 2607:f8f0:660:3::36:2880...; >>>> * TCP_NODELAY set; >>>> * Immediate connect fail for 2607:f8f0:660:3::36: Network is unreachable; >>>> Is that expected?; >>>> ; >> ; >>> ***@***.*** t5]$ curl -v https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.roo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-839972447:1483,safe,safelinks,1483,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-839972447,1,['safe'],['safelinks']
Safety,webgui: avoid compiler warnings when Qt5 and/or CEF are not used,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1964:8,avoid,avoid,8,https://root.cern,https://github.com/root-project/root/pull/1964,1,['avoid'],['avoid']
Safety,"why does this need to be its own field type when we can in principle just store these as in a `0x04` (Byte) column and go from there?. Shouldn't it be application's job to restore bytes to in-memory representation if they need to ""hack"" it to store unsupported objects in RNTuple? IMHO adding this field is opening up to potential abuse of this feature and I can imagine experiments decide to store everything in 0x05 fields and basically void the purpose of RNTuple to some extend (i.e. you can't recover the data unless you're exactly using this experiment's C++ framework). More practically speaking, anything in filed 0x05 is impossible to read for 3rd party libraries unless they have the C++ class definitions as well as the decoding streamer logic?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14728#issuecomment-2002542194:498,recover,recover,498,https://root.cern,https://github.com/root-project/root/pull/14728#issuecomment-2002542194,1,['recover'],['recover']
Safety,x(); python38!PyEval_GetFuncDesc(); python38!PyEval_EvalFrameDefault(); python38!PyEval_EvalCodeWithName(); python38!PyFunction_Vectorcall(); python38!PyEval_GetFuncDesc(); python38!PyEval_EvalFrameDefault(); python38!PyEval_EvalCodeWithName(); python38!PyFunction_Vectorcall(); python38!PyEval_GetFuncDesc(); python38!PyEval_EvalFrameDefault(); python38!PyObject_Call(); python38!PyFunction_Vectorcall(); python38!PyEval_GetFuncDesc(); python38!PyEval_EvalFrameDefault(); python38!PyObject_Call(); python38!PyFunction_Vectorcall(); python38!PyEval_GetFuncDesc(); python38!PyEval_EvalFrameDefault(); python38!PyObject_Call(); python38!PyFunction_Vectorcall(); python38!PyMethod_Self(); python38!PyVectorcall_Call(); python38!PyOS_SigintEvent(); python38!PyThread_init_thread(); ucrtbase!recalloc(); KERNEL32!BaseThreadInitThunk(); ntdll!RtlUserThreadStart(). ==========================================; ============= END STACKTRACE =============; ==========================================. *** Break *** abort. ==========================================; =============== STACKTRACE ===============; ==========================================. ================ Thread 0 ================; libcppyy_backend3_8!??; libCore!TWinNTSystem::DispatchSignals(); ucrtbase!raise(); ucrtbase!abort(); ucrtbase!get_wpgmptr(); ucrtbase!get_wpgmptr(); ucrtbase!wassert(); libCling!TClingValue::ToTypeAndValueString(); libCling!cling::Value::print(); libCling!TClingValue::ToTypeAndValueString(); libCling!TCling::LoadEnums(); libCore!TListOfEnums::Load(); libCore!TClass::GetListOfEnums(); libCling!TCling::InvalidateCachedDecl(); libCling!TCling::UpdateListsOnUnloaded(); libCling!TCling::UpdateListsOnUnloaded(); libCling!cling::runtime::internal::EvaluateDynamicExpression(); libCling!cling::runtime::internal::EvaluateDynamicExpression(); libCling!cling::Value::print(); libCling!TClingValue::ToTypeAndValueString(); libCling!TClingValue::ToTypeAndValueString(); libCling!TClingTypedefInfo::Init(); libCling!TCli,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14302:23573,abort,abort,23573,https://root.cern,https://github.com/root-project/root/issues/14302,1,['abort'],['abort']
Safety,"xaUzcM3edlGm0YFY9wV%2BN2M%3D&reserved=0>; >>>>>>> ; >>>>>>> curl performs SSL certificate verification by default, using a ""bundle""; >>>>>>> of Certificate Authority (CA) public keys (CA certs). If the default; >>>>>>> bundle file isn't adequate, you can specify an alternate file; >>>>>>> using the --cacert option.; >>>>>>> If this HTTPS server uses a certificate signed by a CA represented in; >>>>>>> the bundle, the certificate verification probably failed due to a; >>>>>>> problem with the certificate (it might be expired, or the name might; >>>>>>> not match the domain name in the URL).; >>>>>>> If you'd like to turn off curl's verification of the certificate, use; >>>>>>> the -k (or --insecure) option.; >>>>>>> ***@***.*** t5]$ ; >>>>>> ; >>>>>> ; >>>>>> I am unfamiliar with how to use curl with X509 and everything I tried so far has not worked. eg; >>>>>> curl -v https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Csimonliu%40triumf.ca%7C2bf615c9bb89486eaecd08d91571b94b%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564400461006280%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=9rNIbI2R5ESPtOLXdPFPq%2FjbCNRptjBM1fTLrmOZgEI%3D&reserved=0> --key ~/.globus/userkey.pem --cert ~/.globus/usercert.pem; >>>>>> or; >>>>>> curl -v https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Csimonliu%40triumf.ca%7C2bf615c9bb89486eaecd08d91571b94b%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564400461006280%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQI",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840018942:7341,safe,safelinks,7341,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840018942,1,['safe'],['safelinks']
Safety,"xx:3189; #9 0x00007ff4494a1b11 in TBranch::FillImpl (imtHelper=0x0, this=0x7ff42547e5f0) at /home/aliperf/aliperf_workspace/sw/SOURCES/ROOT/v6-24-02/v6-24-02/tree/tree/src/TBranch.cxx:923; #10 TBranch::FillImpl (this=this; entry=0x7ff42547e5f0, imtHelper=imtHelper; entry=0x0) at /home/aliperf/aliperf_workspace/sw/SOURCES/ROOT/v6-24-02/v6-24-02/tree/tree/src/TBranch.cxx:854; #11 0x00007ff4494ae36b in TBranchElement::FillImpl (this=0x7ff42547e5f0, imtHelper=0x0) at /home/aliperf/aliperf_workspace/sw/SOURCES/ROOT/v6-24-02/v6-24-02/tree/tree/src/TBranchElement.cxx:1265; #12 0x00007ff4494ae069 in TBranchElement::FillImpl (this=0x7ff425170850, imtHelper=0x0) at /home/aliperf/aliperf_workspace/sw/SOURCES/ROOT/v6-24-02/v6-24-02/tree/tree/src/TBranchElement.cxx:1290; #13 0x00007ff44f4faf89 in TBranch::Fill (this=0x7ff425170850) at /home/aliperf/aliperf_workspace/sw/slc7_x86-64/ROOT/v6-24-02-local5/include/TBranch.h:201; #14 o2::base::DetImpl<o2::trd::Detector>::mergeAndAdjustHits<std::vector<o2::trd::Hit, std::allocator<o2::trd::Hit> > > (this=this; entry=0x3e69680, brname=..., origin=..., target=..., trackoffsets=..., nprimaries=..., subevtsOrdered=...) at /home/aliperf/aliperf_workspace/sw/SOURCES/O2/dev/0/Detectors/Base/include/DetectorsBase/Detector.h:403; #15 0x00007ff44f4fb507 in o2::base::DetImpl<o2::trd::Detector>::mergeHitEntries (this=0x3e69680, origin=..., target=..., trackoffsets=..., nprimaries=..., subevtsOrdered=...) at /home/aliperf/aliperf_workspace/sw/SOURCES/O2/dev/0/Detectors/Base/include/DetectorsBase/Detector.h:422; #16 0x00000000004456e1 in o2::devices::O2HitMerger::mergeAndFlushData (this=0x162d640, eventID=<optimized out>) at /home/aliperf/aliperf_workspace/sw/SOURCES/O2/dev/0/run/O2HitMerger.h:745; #17 0x00007ff446ec9f10 in std::execute_native_thread_routine (__p=0x7ad9e10) at ../../../../../gcc/libstdc++-v3/src/c++11/thread.cc:80; #18 0x00007ff44e186ea5 in start_thread () from /lib64/libpthread.so.0; #19 0x00007ff44680796d in clone () from /lib64/l",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8931:3791,Detect,Detector,3791,https://root.cern,https://github.com/root-project/root/issues/8931,1,['Detect'],['Detector']
Safety,xx:999; 5: Called C++ object pointer is null in /opt/root_src/geom/geom/src/TGeoSphere.cxx:1000; /opt/root_src/geom/geom/src/TGeoSphere.cxx:1158:32: warning: Value stored to 'nbPnts' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'nbPnts' is never read in /opt/root_src/geom/geom/src/TGeoSphere.cxx:1158; /opt/root_src/geom/geom/src/TGeoSphere.cxx:1163:4: warning: Value stored to 'nbSegs' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'nbSegs' is never read in /opt/root_src/geom/geom/src/TGeoSphere.cxx:1163; /opt/root_src/geom/geom/src/TGeoSphere.cxx:1168:4: warning: Value stored to 'nbPols' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'nbPols' is never read in /opt/root_src/geom/geom/src/TGeoSphere.cxx:1168; /opt/root_src/geom/geom/src/TGeoSphere.cxx:1533:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoSphere.cxx:1533; /opt/root_src/geom/geom/src/TGeoTessellated.cxx:745:15: warning: Missing reference in range-for with non trivial type (std::__cxx11::basic_string<char>) [clazy-range-loop]; 1: const in /opt/root_src/geom/geom/src/TGeoTessellated.cxx:745; 2: & in /opt/root_src/geom/geom/src/TGeoTessellated.cxx:745; /opt/root_src/geom/geom/src/TGeoTorus.cxx:297:13: warning: Value stored to 'snext' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'snext' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:297; /opt/root_src/geom/geom/src/TGeoTorus.cxx:305:13: warning: Value stored to 'dphi' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'dphi' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:305; /opt/root_src/geom/geom/src/TGeoTorus.cxx:378:13: warning: Value stored to 'd,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:63783,safe,safe,63783,https://root.cern,https://github.com/root-project/root/issues/7428,1,['safe'],['safe']
Safety,"y default, using a ; >>>>>>>> ""bundle""; >>>>>>>>  of Certificate Authority (CA) public keys (CA certs). If the ; >>>>>>>> default; >>>>>>>>  bundle file isn't adequate, you can specify an alternate file; >>>>>>>>  using the --cacert option.; >>>>>>>> If this HTTPS server uses a certificate signed by a CA ; >>>>>>>> represented in; >>>>>>>>  the bundle, the certificate verification probably failed due to a; >>>>>>>>  problem with the certificate (it might be expired, or the name ; >>>>>>>> might; >>>>>>>>  not match the domain name in the URL).; >>>>>>>> If you'd like to turn off curl's verification of the ; >>>>>>>> certificate, use; >>>>>>>>  the -k (or --insecure) option.; >>>>>>>> ***@***.*** t5]$; >>>>>>>; >>>>>>>; >>>>>>> I am unfamiliar with how to use curl with X509 and everything I ; >>>>>>> tried so far has not worked. eg; >>>>>>> *curl*-v ; >>>>>>> https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root ; >>>>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Csimonliu%40triumf.ca%7Ca59fceaddf634d196e5608d91576f34a%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564422909267345%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=MrLsQ1shn0qv2itSXIVUc3da2Y5VUnltiBnYwHs6YjE%3D&reserved=0> ; >>>>>>> --key ~/.globus/userkey.pem --cert ~/.globus/usercert.pem; >>>>>>> or; >>>>>>> *curl*-v ; >>>>>>> https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root ; >>>>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Csimonliu%40triumf.ca%7Ca59fceaddf634d196e5608d91576f34a%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564422909267345%7CUnknown%7CTWFpbG",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840043080:8772,safe,safelinks,8772,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840043080,1,['safe'],['safelinks']
Safety,"y law.; Type ""show copying"" and ""show warranty"" for details.; This GDB was configured as ""x86_64-pc-linux-gnu"".; Type ""show configuration"" for configuration details.; For bug reporting instructions, please see:; <https://bugs.gentoo.org/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>. For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from root/multicore/processExecutorH1Test...; (gdb) run; Starting program: /srv/root/roottest-build/root/multicore/processExecutorH1Test ; warning: File ""/usr/lib/root/9999/lib/libCore.so.6.25.01-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; 	add-auto-load-safe-path /usr/lib/root/9999/lib/libCore.so.6.25.01-gdb.py; line to your configuration file ""/home/amadio/.gdbinit"".; To completely disable this security protection add; 	set auto-load safe-path /; line to your configuration file ""/home/amadio/.gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; 	info ""(gdb)Auto-loading safe path""; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib64/libthread_db.so.1"".; +++ Executing tProcessExecutorH1Test ......................................... +++; [Detaching after vfork from child process 340387]; [Detaching after vfork from child process 340389]; [Detaching after vfork from child process 340391]; [Detaching after vfork from child process 340393]; [Detaching after vfork from child process 341564]; [Detaching after vfork from child process 341566]; [Detaching after vfork from child process 341606]; [Detaching after fork from child process 341608]; [Detaching after fork from child process 341609]; [Detaching after fork from child process 341610]; [Detaching after vfork from child process 341705]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936#issuecomment-823920792:1386,safe,safe-path,1386,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-823920792,1,['safe'],['safe-path']
Safety,"yDataFrame({id_column: arr_id}); df_id.Snapshot(treename, idfilepath). ch_data = ROOT.TChain(treename, '') ; for _, filepath in l_tp_file:; ch_data.Add(filepath). size_ch = ch_data.GetEntries(); size_id = arr_id.size. if size_ch != size_id:; print('Different id and chain sizes: {}/{}'.format(size_id, size_ch)); raise. ch_data.AddFriend(treename, idfilepath). df = ROOT.RDataFrame(ch_data). return (df, ch_data); #------------------------------------------; def test():; #----------------------; #Make input; #----------------------; index = 0 ; l_tp_file = [] ; for val in range(0, 100, 10):; filepath = make_data(val); l_tp_file.append((index, filepath)); index+=1; #----------------------; #Merge; #----------------------; df, _ = get_df(l_tp_file, 'tree', id_column='id'); df.Display(['a', 'id'], -1).Print(); #df.Snapshot('tree', 'file.root'); #------------------------------------------; test(); ```. I will add `get_df` to my personal library. The approach seems safe and clean enough, however the return value needs to include the chain (i.e. _) because otherwise I get a crash. Which seems to indicate that the chain's reference is not kept inside the dataframe. So once the function returns, the chain is removed by the garbage collector and the dataframe does not have anything to save (the script above is self contained and you can try it yourself). That should not be right, if I tell the dataframe to use the chain, the chain should be kept alive by the dataframe. > ; > The simplest solution: with the upcoming `DefinePerSample` method you can solve this more easily, but the feature will only be merged in ROOT master in a few days ([PR here](https://github.com/root-project/root/pull/8841)). With `DefinePerSample` you could write something like this:; > ; > ```c++; > df.DefinePerSample(""index"", ""GetIndex(rdfsampleinfo_.AsString())""); > ```; > ; > where `rdfsampleinfo_.AsString()` will be of the form `<filename>/<treename>`. I expect to merge this feature in master today or to",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9030#issuecomment-932494638:4286,safe,safe,4286,https://root.cern,https://github.com/root-project/root/issues/9030#issuecomment-932494638,1,['safe'],['safe']
Safety,"yFile.1.root <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Cdqing%40triumf.ca%7Cb7cde810efc1452a4eab08d9156d8727%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564382428508454%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=nfxduy6kAYVqAb9Y561kDpg578YKts2gajMGy3hd9fo%3D&reserved=0>; >>>>> * About to connect() to webdav.lcg.triumf.ca <http://webdav.lcg.triumf.ca/> port 2880 (#0); >>>>> * Trying 2607:f8f0:660:3::36...; >>>>> * Connected to webdav.lcg.triumf.ca <http://webdav.lcg.triumf.ca/> (2607:f8f0:660:3::36) port 2880 (#0); >>>>> * Initializing NSS with certpath: sql:/etc/pki/nssdb; >>>>> * CAfile: /etc/pki/tls/certs/ca-bundle.crt; >>>>> CApath: none; >>>>> * Server certificate:; >>>>> * 	subject: CN=dpool46.lcg.triumf.ca <http://dpool46.lcg.triumf.ca/>,OU=triumf.ca <https://can01.safelinks.protection.outlook.com/?url=http%3A%2F%2Ftriumf.ca%2F&data=04%7C01%7Cdqing%40triumf.ca%7Cb7cde810efc1452a4eab08d9156d8727%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564382428518448%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=PNABpB6eQBLHoIjd3QUDm%2FMdUbyGTv6O%2BkpuRdme%2B3k%3D&reserved=0>,O=Grid,C=CA; >>>>> * 	start date: Apr 08 16:29:03 2021 GMT; >>>>> * 	expire date: May 08 16:29:03 2022 GMT; >>>>> * 	common name: dpool46.lcg.triumf.ca <http://dpool46.lcg.triumf.ca/>; >>>>> * 	issuer: CN=Grid Canada Certificate Authority,O=Grid,C=CA; >>>>> * NSS error -8179 (SEC_ERROR_UNKNOWN_ISSUER); >>>>> * Peer's Certificate issuer is not recognized.; >>>>> * Closing connection 0; >>>>> curl: (60) Peer's Certificate issuer is not recognized.; >>>>> More details here: http://curl.haxx.se/docs/sslcerts.html <https://can01.safelinks.protection.outlook.com/?url=http%3A%2F%2Fcurl.haxx.se%2Fdocs%2Fsslcerts.html&data=04%7C01%7Cdqing%40",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-839991525:3901,safe,safelinks,3901,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-839991525,1,['safe'],['safelinks']
Safety,"yle) Array index 'ib' is used before limits check.; [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check.; [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed.; [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd; [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s; [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname; [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname; [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS; [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness.; [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness.; [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness.; [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness.; [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness.; [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness.; [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness.; [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fC",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1343:2118,Redund,Redundant,2118,https://root.cern,https://github.com/root-project/root/pull/1343,1,['Redund'],['Redundant']
Safety,your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):; > ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling(_ZN4llvm3sys15PrintStackTraceERNS_11raw_ostreamEi+0x3c)[0x55e9492a6288]; > ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling(+0x17fb34b)[0x55e9492a634b]; > ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling(_ZN4llvm3sys17RunSignalHandlersEv+0x88)[0x55e9492a3eac]; > ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling(+0x17fabfe)[0x55e9492a5bfe]; > ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling(_ZN9textinput18TerminalConfigUnix12HandleSignalEi+0x76)[0x55e9492f41a8]; > ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling(+0x1848ed8)[0x55e9492f3ed8]; > /usr/lib/libc.so.6(+0x3e8e0)[0x7f264623e8e0]; > /usr/lib/libc.so.6(+0x8e36c)[0x7f264628e36c]; > /usr/lib/libc.so.6(raise+0x18)[0x7f264623e838]; > /usr/lib/libc.so.6(abort+0xcf)[0x7f2646228535]; > /usr/lib/libc.so.6(+0x2845c)[0x7f264622845c]; > /usr/lib/libc.so.6(+0x37366)[0x7f2646237366]; > ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling(_ZN5cling11Transaction11forceAppendENS0_13DelayCallInfoE+0x14f)[0x55e9491826bb]; > ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling(_ZN5cling11Transaction6appendENS0_13DelayCallInfoE+0xaa)[0x55e949182568]; > ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling(_ZN5cling13DeclCollector18HandleTopLevelDeclEN5clang12DeclGroupRefE+0xc4)[0x55e948f99f2e]; > ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling(_ZN5clang17MultiplexConsumer18HandleTopLevelDeclENS_12DeclGroupRefE+0x89)[0x55e94b42f5bf]; > ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling(_ZN5clang4Sema23InstantiateClassMembersENS_14SourceLocationEPNS_13CXXRecordDeclERKNS_30MultiLevelTemplateArgumentListENS_26TemplateSpecializationKindE+0x2dc)[0x55e94c7a0f84]; > ./cling-build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1192249515:5577,abort,abort,5577,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1192249515,1,['abort'],['abort']
Safety,"your feature request related to a problem? Please describe.; I'm merging multiple root files into one with hadd. I realized some of the files were corrupted, because the jobs that produced them were killed in the middle. When I try to open these files I see messages about ""recovered keys"".; When merging those files with hadd there are multiple messages displayed, like:; ```Info in <TFile::Recover>: ppfx_me000z-200i_run_98.root, recovered key TDirectoryFile:nuebar_thintarget at address 5276; Info in <TFile::Recover>: ppfx_me000z-200i_run_98.root, recovered key TDirectoryFile:nuebar_mippnumi at address 5409; Info in <TFile::Recover>: ppfx_me000z-200i_run_98.root, recovered key TDirectoryFile:nuebar_attenuation at address 5538; Info in <TFile::Recover>: ppfx_me000z-200i_run_98.root, recovered key TDirectoryFile:nuebar_others at address 5673; Info in <TFile::Recover>: ppfx_me000z-200i_run_98.root, recovered key TDirectoryFile:nuebar_total at address 5798; Warning in <TFile::Init>: successfully recovered 21 keys; Warning in <TFile::Init>: no StreamerInfo found in ppfx_me000z-200i_run_98.root therefore preventing schema evolution when reading this file. The file was produced with version 5.34/32 of ROOT.; hadd Source file 2: ppfx_me000z-200i_run_526.root; Warning in <TFile::Init>: no StreamerInfo found in ppfx_me000z-200i_run_526.root therefore preventing schema evolution when reading this file. The file was produced with version 5.34/32 of ROOT.; hadd Target path: out.root:/; hadd Target path: out.root:/nom; hadd Target path: out.root:/nom/parent; Error in <TBufferFile::ReadClassBuffer>: Could not find the StreamerInfo for version 7 of the class TH1, object skipped at offset 110; Error in <TBufferFile::CheckByteCount>: object of class TH1 read too few bytes: 2 instead of 2216; Error in <TBufferFile::ReadClassBuffer>: Could not find the StreamerInfo for version 7 of the class TH1, object skipped at offset 107; Error in <TBufferFile::CheckByteCount>: object of class TH1 re",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8952:914,recover,recovered,914,https://root.cern,https://github.com/root-project/root/issues/8952,2,['recover'],['recovered']
Safety,"zeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ OK ] RNTuple.ReconstructModel (160 ms); [ RUN ] RNTuple.MultipleInFile; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Fatal: nread == nbytes violated at line 1083 of `/builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RMiniFile.cxx'; aborting; [ --- ]; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-endian. Here the bytes are in the right order, but shifted 4 bytes. $ printf '%016x\n%016x\n' 1234605615003729920 287454020; 1122334400000000; 0000000011223344; $ printf '%016x\n%016x\n' 6153737371142586367 1432778632; 55667788ffffffff; 0000000055667788; ~~~; 449/1272 Test #424: gtest-tree-ntuple-v7-test-ntuple-endian .............................***Failed 0.04 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 9 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 9 tests from RColumnElementEndian; [ RUN ] RColumnElementEndian.Float; [ OK ] RColumnElementEndi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:2653,abort,aborting,2653,https://root.cern,https://github.com/root-project/root/issues/12426,1,['abort'],['aborting']
Safety,"| Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Oct 28 2022, 09:49:15 |; | From heads/redirect-xrootd@v6-09-01-24773-gd85df4c5e9 |; | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");; root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");; root [2] f1->GetName(); (const char *) ""Run2012BC_DoubleMuParked_Muons.root""; root [3] f2->GetName(); (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root""; root [4] .q; $; ```; and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:; ```diff; void df102_NanoAODDimuonAnalysis(const char* filename); {; // Enable multi-threading; ROOT::EnableImplicitMT();; ; - // std::cout << ""Using filename: "" << filename << std::endl;; + auto f = TFile::Open(filename);; + auto t = f->Get<TTree>(""Events"");; ; - ROOT::RDataFrame df(""Events"", filename);; + ROOT::RDataFrame df(*t);; ```. I got the following:. ```sh; $ time ./dimuon file://Run2012BC_DoubleMuParked_Muons.root ; Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created; Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %; Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %; 13.34; $ time ./dimuon Run2012BC_DoubleMuParked_Muons.root ; Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created; Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %; Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %; 8.81; $; ```. **Note:** With the final version of the patch, instead of using `file://`, which now doe",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11644:1641,avoid,avoid,1641,https://root.cern,https://github.com/root-project/root/pull/11644,1,['avoid'],['avoid']
Safety,"}. declare dso_local i32 @__cudaRegisterFunction(i8**, i8*, i8*, i8*, i32, i8*, i8*, i8*, i8*, i32*). declare dso_local i32 @__cudaRegisterVar(i8**, i8*, i8*, i8*, i32, i32, i32, i32). declare dso_local i8** @__cudaRegisterFatBinary(i8*). define dso_local void @__cuda_module_ctor_cling_module_6(i8*) {; %2 = call i8** @__cudaRegisterFatBinary(i8* bitcast ({ i32, i32, i8*, i8* }* @__cuda_fatbin_wrapper to i8*)); store i8** %2, i8*** @__cuda_gpubin_handle, align 8; call void @__cuda_register_globals(i8** %2); call void @__cudaRegisterFatBinaryEnd(i8** %2); %3 = call i32 @atexit(void (i8*)* @__cuda_module_dtor_cling_module_6); ret void; }. declare dso_local void @__cudaRegisterFatBinaryEnd(i8**). declare dso_local void @__cudaUnregisterFatBinary(i8**). define dso_local void @__cuda_module_dtor_cling_module_6(i8*) {; %2 = load i8**, i8*** @__cuda_gpubin_handle, align 8; call void @__cudaUnregisterFatBinary(i8** %2); ret void; }. declare dso_local i32 @atexit(void (i8*)*). ; Function Attrs: nounwind; declare void @llvm.stackprotector(i8*, i8**) #2. attributes #0 = { noinline uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-frame-pointer-elim""=""false"" ""no-frame-pointer-elim-non-leaf"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }; attributes #1 = { argmemonly nounwind }; attributes #2 = { nounwind }. !llvm.module.flags = !{!0, !1}; !llvm.ident = !{!2}. !0 = !{i32 2, !""SDK Version"", [2 x i32] [i32 10, i32 1]}; !1 = !{i32 1, !""wchar_size"", i32 4}; !2 = !{!""clang version 9.0.1 (http://root.cern.ch/git/clang.git 535acc218f73a05f5602c950898dafda8a45feb7) (http://root.cern.ch/git/llvm.git c41338c59334340ee4d85a7c9bbdf49a4f59f76b)""}; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1156850209:22930,unsafe,unsafe-fp-math,22930,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1156850209,1,['unsafe'],['unsafe-fp-math']
Safety,"~~~; /home/bgruber/root/hist/hist/inc/TF1.h: In member function ‘virtual Double_t TF2::FindMinMax(Double_t*, Bool_t) const’:; /home/bgruber/root/hist/hist/inc/TF1.h:764:18: note: by argument 2 of type ‘const Double_t*’ {aka ‘const double*’} to ‘Double_t (TF1::)(const Double_t*, const Double_t*)’ {aka ‘double (TF1::)(const double*, const double*)’}; /home/bgruber/root/hist/hist/src/TF2.cxx:349:13: note: ‘xx’ declared here; 349 | Double_t xx[2];; | ^~; ```. ```; /home/bgruber/root/graf2d/graf/src/TText.cxx: In member function ‘virtual void TText::Copy(TObject&) const’:; /home/bgruber/root/graf2d/graf/src/TText.cxx:117:72: warning: ‘void operator delete(void*, std::size_t)’ called on pointer ‘obj’ with nonzero offset 112 [-Wfree-nonheap-object]; 117 | delete reinterpret_cast<std::wstring*>(&((TText&)obj).fWcsTitle);; | ^; ```. ```; /home/bgruber/root/geom/geom/src/TGeoManager.cxx:521:4: warning: this ‘if’ clause does not guard... [-Wmisleading-indentation]; 521 | if (fHashVolumes) fHashVolumes->Clear(""nodelete""); SafeDelete(fHashVolumes);; | ^~; ...; /home/bgruber/root/core/foundation/inc/ROOT/RConfig.hxx:534:26: note: ...this statement, but the latter is misleadingly indented as if it were guarded by the ‘if’; 534 | # define SafeDelete(p) { if (p) { delete p; p = 0; } }; | ^; ```. Several `may be used uninitialized` warnings in `/home/bgruber/root/graf2d/asimage/src/TASImage.cxx` and `/home/bgruber/root/gui/gui/src/TGNumberEntry.cxx`. ```; In function ‘char* strncpy(char*, const char*, size_t)’,; inlined from ‘TGTextLine::TGTextLine(const char*)’ at /home/bgruber/root/gui/gui/src/TGText.cxx:74:14:; /usr/include/bits/string_fortified.h:95:34: warning: ‘char* __builtin_strncpy(char*, const char*, long unsigned int)’ output truncated before terminating nul copying as many bytes from a string as its length; -Wstringop-truncation]; 95 | return __builtin___strncpy_chk (__dest, __src, __len,; | ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~; 96 | __glibc_objsize (__dest));; ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8129:4402,Safe,SafeDelete,4402,https://root.cern,https://github.com/root-project/root/issues/8129,1,['Safe'],['SafeDelete']
Safety,"¡De nada, @ferdymercury!. Ooops, sorry! To be honest, I was expecting far less changes. The generated diff is impossible to review by the corresponding maintainers of each area. :-(. Also, as already discussed in the PR, to avoid diverging too much from upstream LLVM, we avoid patching the ROOT's fork unless strictly required to make Cling work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7400#issuecomment-794387737:224,avoid,avoid,224,https://root.cern,https://github.com/root-project/root/issues/7400#issuecomment-794387737,2,['avoid'],['avoid']
Safety,"… separate files containing different volumes. (Markus Frank). This patch provides the method TGDMLWrite::WriteGDMLfile allowing to write the gdml corresponding to a volume hierarchy (like a detector). A geometry can be therefore exported in pieces, and the gdml parser was modified to avoid duplication of materials and other components upon reading.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1434:191,detect,detector,191,https://root.cern,https://github.com/root-project/root/pull/1434,2,"['avoid', 'detect']","['avoid', 'detector']"
Safety,"…akeLists.txt. This commit reverts some of the changes introduced in c9cedcc.; ROOT_LINKER_LIBRARY insures that the shared library is generated with; the suffix '.so', avoiding troubles in MacOS where it would be generated; with '.dylib' otherwise.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5478:168,avoid,avoiding,168,https://root.cern,https://github.com/root-project/root/pull/5478,1,['avoid'],['avoiding']
Safety,"…alizing. When we deserialize a function with noexcept(constant_expression) qualifier the; constant_expression itself might trigger deserialization. Triggering nested; deserializations is not supported in clang. Currently we just removed the assert but this shows problems when we go to; higher version of stl's (such as the one in ubuntu19) which more heavily; rely on constexpr. We segfault in cases where we do equivalent of:; ```; cling::Interpreter *interp = ((TCling*)gCling)->GetInterpreterImpl();; auto& lh = interp->getLookupHelper();; auto diag = cling::LookupHelper::WithDiagnostics;; auto S = lh.findScope(""ROOT::Internal::RDF"", diag);; lh.findAnyFunction(S, ""RDataFrameTake<float>"", diag);; lh.findAnyFunction(S, ""RDataFrameTake<std::vector<float>>"", diag);; ```. This patch delays the unsafe computation of type of the deserialized function; and thus the evaluation of the exception qualifier. This should fix the failing; pyunittests-pyroot-rdataframe-asnumpy nightly on ubuntu 19. The red pill is applying llvm-mirror/clang@5d50602a8de220e1f0bbdd136e9a7be21a1b63c0. This will happen after releasing v6.20.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4656:799,unsafe,unsafe,799,https://root.cern,https://github.com/root-project/root/pull/4656,1,['unsafe'],['unsafe']
Safety,…avoid clash with classes that CMS Combine will eventually provide. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15558:1,avoid,avoid,1,https://root.cern,https://github.com/root-project/root/pull/15558,1,['avoid'],['avoid']
Safety,"…ent and NumPy. As found out after investigating this failure:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84131/console. PythonX_EXECUTABLE, if set when find_package(PythonX) is called one; first time, is unset if find_package(PythonX) fails when called the; second time (i.e. whether Developmnet or NumPy are not found). To avoid that, as a consequence, PYTHON_EXECUTABLE is not set at all, we; set it (along with other variables) right after the first call to; find_package(PythonX).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5764:356,avoid,avoid,356,https://root.cern,https://github.com/root-project/root/pull/5764,1,['avoid'],['avoid']
Safety,"…ffer. This patch avoids asking ROOT to create a TClass entry in interpreted mode when loading an enum from a given namespace. This is dangerous in case no call to TClass::GetClass(""enum::namespace"") is not called in a context where autoloading is enabled. This should fix ROOT-10528 where GaudiMath::Interpolation is available across dictionaries. When reading the LHCbMathDict_rdict.pcm we find an enum GaudiMath::Interpolation::Type. This in turn creates a never used TClass entry for GaudiMath::Interpolation for which ROOT complains at teardown with:. Fatal in <TClass::SetUnloaded>: The TClass for GaudiMath::Interpolation is being unloaded when in state 3. Patch by Marco Clemencic(@pikacic) and me!. cc: @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4944:18,avoid,avoids,18,https://root.cern,https://github.com/root-project/root/pull/4944,1,['avoid'],['avoids']
Safety,"…hanged. This patch (also) aims to make runtime module installable. This part of code in Clang is comparing the location of ""modulemap which; is currently loaded and gives a definition of current module (say, stl); and ""the location of the modulemap where the current implicit module (like stl) was built"". This was problematic for CMSSW, as they should install modulemaps; and prebuilt pcms to other directory. stl and libc pcms should be; prebuilt, installed and used from installed directory, so this check is; redundant for that usecase.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3180:514,redund,redundant,514,https://root.cern,https://github.com/root-project/root/pull/3180,1,['redund'],['redundant']
Safety,"…ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date.; the file 'C:/Users/sftnight/git/master/CMakeLists.txt'; is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'; result='-1'; -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299.; -- Looking for python; -- Preferring Python version 3; -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development; CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args); cmake/modules/SearchRootCoreDeps.cmake:72 (find_package); CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred!; See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"".; See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"".; CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:; find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows.; Apparently the keyword REQUIRED is not enough to avoid stopping the; compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5001:1383,avoid,avoid,1383,https://root.cern,https://github.com/root-project/root/pull/5001,1,['avoid'],['avoid']
Safety,…ndows. Comment out part of the code to try to prevent false positive detection from several anti-virus engines on Windows (and multiproc is not supported on Windows anyway),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7006:70,detect,detection,70,https://root.cern,https://github.com/root-project/root/pull/7006,2,['detect'],['detection']
Safety,⚠️ This PR triggers failures (i.e. uncovers thread-unsafe constructs in ROOT) that will first need to get fixed before this PR can get merged.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2703#issuecomment-425405473:51,unsafe,unsafe,51,https://root.cern,https://github.com/root-project/root/pull/2703#issuecomment-425405473,1,['unsafe'],['unsafe']
Security," &gt;, std::hash&lt;std::string&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;' ; - /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/bits/hashtable.h:221:56: error: '__bucket_type' is a protected member of 'std::__detail::_Hashtable_base&lt;std::basic_string&lt;char&gt;, std::basic_string&lt;char&gt;, std::__detail::_Identity, std::equal_to&lt;std::basic_string&lt;char&gt; &gt;, std::hash&lt;std::string&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;' ; - /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/bits/unordered_set.h:104:36: error: no type named 'hasher' in 'std::_Hashtable&lt;std::basic_string&lt;char&gt;, std::basic_string&lt;char&gt;, std::allocator&lt;std::basic_string&lt;char&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::basic_string&lt;char&gt; &gt;, std::hash&lt;std::string&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;' ; - /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/bits/hashtable.h:179:24: error: default argument of '_Insert' must be imported from one of the following modules before it is required: ; - /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/bits/hashtable.h:220:54: error: '__node_base' is a protected member of 'std::__detail::_Hashtable_base&lt;std::basic_string&lt;char&gt;, std::basic_string&lt;char&gt;, std::__detail::_Identity, std::equal_to&lt;std::basic_string&lt;char&gt; &gt;, std::hash&lt;std::string&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;' ; - /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/bits/hashtable.h:221:56",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1412#issuecomment-361415584:1450,hash,hasher,1450,https://root.cern,https://github.com/root-project/root/pull/1412#issuecomment-361415584,2,['hash'],"['hash', 'hasher']"
Security, '/etc/grid-security/certificates/530f7122.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/9c979c2b.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UKeScienceCA-2B.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/9c979c2b.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/62c4a178.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/a603ba9c.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/8dd53007.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/943fd5f3.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridCA-1G2-Classic-2015.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustSecureCAG4-runbytheissuer.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridCA-1G2-Classic-2015.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustSecureCAG4-runbytheissuer.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridCA-1G2-Classic-2015.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d41ec82f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b85d64aa.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/598b583e.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridCA-1G2-Classic-2015.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/a603ba9c.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/82c2b224.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d41ec82f.signing_policy' from CURLOPT_CAPATH; * fa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:15011,secur,security,15011,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,2,"['certificate', 'secur']","['certificates', 'security']"
Security, '/etc/grid-security/certificates/95b96af1.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/IHEP-2013.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/95b96af1.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KISTIv3.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UNLPGrid.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/SDG-G2.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KISTIv3.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KISTIv3.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ead666c8.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/77637f58.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/SDG-G2.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/SDG-G2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/c1e29225.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/c1e29225.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/2f2e0e6e.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/2f2e0e6e.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NorduGrid-2015.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NorduGrid-2015.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NorduGrid-2015.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/a3e2dbca.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NIKHEF.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/a3e2dbca.signing_policy' from C,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:58700,secur,security,58700,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,2,"['certificate', 'secur']","['certificates', 'security']"
Security, '/etc/grid-security/certificates/DZeScience.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/55994d72.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/fdf90b95.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NCSA-slcs-2013.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/fdf90b95.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/seegrid-ca-2013.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CNIC.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/SRCE.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CNIC.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/da213f5b.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CNIC.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/SRCE.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/seegrid-ca-2013.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CNIC.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/seegrid-ca-2013.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b2771d44.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b2771d44.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/SRCE.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e2023333.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NCSA-slcs-2013.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e2023333.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/2fc6b233.namespaces,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:41988,secur,security,41988,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,2,"['certificate', 'secur']","['certificates', 'security']"
Security, '/etc/grid-security/certificates/DigiCertGridCA-1G2-Classic-2015.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d41ec82f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b85d64aa.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/598b583e.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridCA-1G2-Classic-2015.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/a603ba9c.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/82c2b224.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d41ec82f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridCA-1-Classic.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/bd43b60c.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridCA-1-Classic.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7b384752.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridCA-1-Classic.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7b384752.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustSecureCAG4-runbytheissuer.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridCA-1-Classic.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/598b583e.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/c7a717ce.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/c7a717ce.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GEANTeScienceSSLECCCA4.info' from CURLOPT_CAPATH; * fail,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:16230,secur,security,16230,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,2,"['certificate', 'secur']","['certificates', 'security']"
Security, '/etc/grid-security/certificates/DigiCertGridTrustCA-Classic.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/MYIFAM.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PKIUNAMgrid.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCA-Classic.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Grid-ICA-G2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/MYIFAM.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KEK.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCA-Classic.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENAeSciencePersonalCA3.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e91bd360.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENAeSciencePersonalCA3.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/2f2f573f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENAeSciencePersonalCA3.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KEK.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/MYIFAM.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENAeSciencePersonalCA3.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/dbf09133.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PK-Grid-2007.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/dbf09133.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/8f016f43.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-securi,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:27533,secur,security,27533,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,2,"['certificate', 'secur']","['certificates', 'security']"
Security, '/etc/grid-security/certificates/MaGrid.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/MaGrid.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/MaGrid.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d7e8dc79.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/SiGNET-CA.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/MaGrid.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/SlovakGrid.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7d0d064a.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/5d674a88.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/5d674a88.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7d0d064a.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GridCanada.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/MARGI.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GridCanada.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/SiGNET-CA.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GridCanada.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/MARGI.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GridCanada.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/MARGI.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/bffbd7d0.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/709bed08.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/bffbd7d0.signing_policy' from CURLOPT_CAPATH; * fail,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:46928,secur,security,46928,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,2,"['certificate', 'secur']","['certificates', 'security']"
Security, '/etc/grid-security/certificates/e13e0fcf.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/BYGCA.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/LIPCA.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/064e0aa9.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/be87b272.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/BYGCA.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/be87b272.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e21dc0c0.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/064e0aa9.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/036b3363.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/BYGCA.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/036b3363.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/126f0acf.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HPCI.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/126f0acf.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/1f58a078.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ANSPGrid.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/1f58a078.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ANSPGrid.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA2G3.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ANSPGrid.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA2G3.info' from CURLOPT_,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:49572,secur,security,49572,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,2,"['certificate', 'secur']","['certificates', 'security']"
Security, 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/base/src/TFolder.cxx:331; /opt/root_src/core/base/src/TPRegexp.cxx:416:10: warning: Value stored to 'nrMatch' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'nrMatch' is never read in /opt/root_src/core/base/src/TPRegexp.cxx:416; /opt/root_src/core/base/src/TQConnection.cxx:115:16: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/base/src/TQConnection.cxx:115; /opt/root_src/core/base/src/TQConnection.cxx:186:16: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/base/src/TQConnection.cxx:186; /opt/root_src/core/base/src/TQObject.cxx:183:23: warning: Call to function 'strcpy' is insecure as it does not provide bo,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7412:110130,secur,security,110130,https://root.cern,https://github.com/root-project/root/issues/7412,1,['secur'],['security']
Security, 'z' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'z' is never read in /opt/root_src/gui/guihtml/src/TGHtmlTable.cxx:1226; /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:230:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:230; /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:353:10: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:353; /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:357:16: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:357; /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:370:19: warning: Call to function 'strcpy' is insecure as it does not provide bo,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:94825,secur,security,94825,https://root.cern,https://github.com/root-project/root/issues/7533,1,['secur'],['security']
Security, '||' is true in /opt/root_src/core/clib/src/Demangle.c:2679; 55: Returning from 'string_append' in /opt/root_src/core/clib/src/Demangle.c:1315; 56: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/core/clib/src/Demangle.c:1316; /opt/root_src/core/clib/src/Demangle.c:1528:10: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:1528; /opt/root_src/core/clib/src/Demangle.c:1910:34: warning: Array access (via field 'typevec') results in a null pointer dereference [clang-analyzer-core.NullDereference]; 1: Assuming 'mangled' is not equal to NULL in /opt/root_src/core/clib/src/Demangle.c:503; 2: Left side of '&&' is true in /opt/root_src/core/clib/src/Demangle.c:503; 3: Assuming the condition is true in /opt/root_src/core/clib/src/Demangle.c:503; 4: Taking true branch in /opt/root_src/core/clib/src/Demangle.c:503; 5: Null pointer value stored to field 'typevec' in /opt/root_src/core/clib/src/Demangle.c:505; 6: Assuming the condition is false in /opt/root_src/core/clib/src/Demangle.c:507; 7: Taking false branch in /opt/root_src/core/clib/src/Demangle.c:507; 8: Assuming the condition is false in /opt/root_src/core/clib/src/Demangle.c:519; 9: expanded from macro 'AUTO_DEMANGLING' in /opt/root_src/core/clib/res/Demangle.h:56; 10: Left side of '||' is false in /opt/root_src/core/clib/src/Demangle.c:519; 11: expanded from macro 'AUTO_DEMANGLING' in /opt/root_src/core/clib/res/Demangle.h:56; 12: Assuming the condition ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:13468,access,access,13468,https://root.cern,https://github.com/root-project/root/issues/7422,1,['access'],['access']
Security, (loaded from variable 'ctmod') [clang-analyzer-core.NullDereference]; 1: expanded from macro 'Py_DECREF' in /usr/include/python2.7/object.h:774; 2: 'pyobj' is null in /opt/root_src/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:2082; 3: Taking false branch in /opt/root_src/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:2082; 4: Calling 'IsPyCArgObject' in /opt/root_src/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:2087; 5: 'pycarg_type' is null in /opt/root_src/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:164; 6: Taking true branch in /opt/root_src/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:164; 7: 'ctmod' initialized here in /opt/root_src/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:165; 8: Assuming 'ctmod' is null in /opt/root_src/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:166; 9: Taking true branch in /opt/root_src/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:166; 10: Access to field 'ob_refcnt' results in a dereference of a null pointer (loaded from variable 'ctmod') in /opt/root_src/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:176; 11: expanded from macro 'Py_DECREF' in /usr/include/python2.7/object.h:774; /opt/root_src/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:1132:9: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:1132; /opt/root_src/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:1146:25: warning: Call to 'realloc' has an allocation size of 0 bytes [clang-analyzer-optin.portability.UnixAPI]; 1: Assuming the condition is tr,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7400#issuecomment-792738257:12778,Access,Access,12778,https://root.cern,https://github.com/root-project/root/issues/7400#issuecomment-792738257,2,['Access'],['Access']
Security," (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584; #12 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102; #13 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1ab6a80) at /usr/include/c++/12/bits/stl_construct.h:151; #14 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1ab6a80) at /usr/include/c++/12/bits/alloc_traits.h:648; #15 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12023:7470,hash,hash,7470,https://root.cern,https://github.com/root-project/root/issues/12023,1,['hash'],['hash']
Security," (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584; #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102; #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151; #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648; #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12023:18323,hash,hash,18323,https://root.cern,https://github.com/root-project/root/issues/12023,2,['hash'],['hash']
Security," * Connected to webdav.lcg.triumf.ca <http://webdav.lcg.triumf.ca/> (2607:f8f0:660:3::36) port 2880 (#0); >>>>> * Initializing NSS with certpath: sql:/etc/pki/nssdb; >>>>> * CAfile: /etc/pki/tls/certs/ca-bundle.crt; >>>>> CApath: none; >>>>> * Server certificate:; >>>>> * 	subject: CN=dpool46.lcg.triumf.ca <http://dpool46.lcg.triumf.ca/>,OU=triumf.ca <https://can01.safelinks.protection.outlook.com/?url=http%3A%2F%2Ftriumf.ca%2F&data=04%7C01%7Cdqing%40triumf.ca%7Cb7cde810efc1452a4eab08d9156d8727%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564382428518448%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=PNABpB6eQBLHoIjd3QUDm%2FMdUbyGTv6O%2BkpuRdme%2B3k%3D&reserved=0>,O=Grid,C=CA; >>>>> * 	start date: Apr 08 16:29:03 2021 GMT; >>>>> * 	expire date: May 08 16:29:03 2022 GMT; >>>>> * 	common name: dpool46.lcg.triumf.ca <http://dpool46.lcg.triumf.ca/>; >>>>> * 	issuer: CN=Grid Canada Certificate Authority,O=Grid,C=CA; >>>>> * NSS error -8179 (SEC_ERROR_UNKNOWN_ISSUER); >>>>> * Peer's Certificate issuer is not recognized.; >>>>> * Closing connection 0; >>>>> curl: (60) Peer's Certificate issuer is not recognized.; >>>>> More details here: http://curl.haxx.se/docs/sslcerts.html <https://can01.safelinks.protection.outlook.com/?url=http%3A%2F%2Fcurl.haxx.se%2Fdocs%2Fsslcerts.html&data=04%7C01%7Cdqing%40triumf.ca%7Cb7cde810efc1452a4eab08d9156d8727%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564382428518448%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=uIrfnt21mOTnhAWQN7zxmDDm9NhvlwTvp4wDcEZqcgE%3D&reserved=0>; >>>>> ; >>>>> curl performs SSL certificate verification by default, using a ""bundle""; >>>>> of Certificate Authority (CA) public keys (CA certs). If the default; >>>>> bundle file isn't adequate, you can specify an alternate file; >>>>> using the --cacert option.; >>>>> If this HTTPS server uses a certificate signed by a CA represented in; >>>>> the bu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-839991525:4483,Certificate,Certificate,4483,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-839991525,2,['Certificate'],['Certificate']
Security, * failed to load '/etc/grid-security/certificates/DigiCertAssuredIDRootCA-Root.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-Root.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CNRS2-Projets.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertAssuredIDRootCA-Root.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-Root.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertAssuredIDRootCA-Root.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/727146a8.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b1159c4c.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b1159c4c.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/727146a8.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/04f60c28.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b4278411.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/04f60c28.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-Root.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/USERTrustECCCertificationAuthority.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7ed47087.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/USERTrustECCCertificationAuthority.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridRootCA-Root.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/USERTrustECCCertificationAuthority.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-Root.signing_policy' from CURLOP,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:2437,secur,security,2437,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,2,"['certificate', 'secur']","['certificates', 'security']"
Security, * failed to load '/etc/grid-security/certificates/DigiCertAssuredIDRootCA-Root.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/727146a8.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b1159c4c.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b1159c4c.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/727146a8.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/04f60c28.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b4278411.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/04f60c28.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-Root.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/USERTrustECCCertificationAuthority.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7ed47087.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/USERTrustECCCertificationAuthority.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridRootCA-Root.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/USERTrustECCCertificationAuthority.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-Root.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridRootCA-Root.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/USERTrustECCCertificationAuthority.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/98ef0ee5.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CNRS2.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/f30dd6ad.namespaces' from CURLOPT_CA,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:2930,secur,security,2930,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,2,"['certificate', 'secur']","['certificates', 'security']"
Security, * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/617ff41b.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/58b08cb5.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KEK.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d33760ec.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e732ef10.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/2f2f573f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/18700496.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/bd43b60c.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/f5ead794.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/1db3b27f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PK-Grid-2007.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/1db3b27f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d33760ec.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-eScience-SSL-CA-3.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KEK.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-eScience-SSL-CA-3.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/633dc6a4.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:23923,secur,security,23923,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,2,"['certificate', 'secur']","['certificates', 'security']"
Security, * failed to load '/etc/grid-security/certificates/UKeScienceCA-2B.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/COMODO-RSA-CA.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CNRS2-Grid-FR.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d4c339cb.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d6325660.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/InCommon-IGTF-Server-CA.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UKeScienceCA-2B.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/InCommon-IGTF-Server-CA.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d11f973e.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/82c2b224.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/InCommon-IGTF-Server-CA.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d11f973e.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ba240aa8.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/f5f0dfc2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/4339b4bc.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/3cc00941.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/68aa9d51.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/5168735f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KENETCA-ICA-2015.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CERN-GridCA.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:11317,secur,security,11317,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,2,"['certificate', 'secur']","['certificates', 'security']"
Security, * failed to load '/etc/grid-security/certificates/edca0fc0.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertAssuredIDRootCA-Root.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-Root.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CNRS2-Projets.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertAssuredIDRootCA-Root.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-Root.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertAssuredIDRootCA-Root.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/727146a8.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b1159c4c.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b1159c4c.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/727146a8.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/04f60c28.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b4278411.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/04f60c28.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-Root.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/USERTrustECCCertificationAuthority.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7ed47087.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/USERTrustECCCertificationAuthority.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridRootCA-Root.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/USERTrustECCCertificationAuthority.namespaces' from CURLOPT_CAPA,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:2341,secur,security,2341,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,2,"['certificate', 'secur']","['certificates', 'security']"
Security," - /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/bits/hashtable.h:179:24: error: default argument of '_Insert' must be imported from one of the following modules before it is required: ; - /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/bits/hashtable.h:220:54: error: '__node_base' is a protected member of 'std::__detail::_Hashtable_base&lt;std::basic_string&lt;char&gt;, std::basic_string&lt;char&gt;, std::__detail::_Identity, std::equal_to&lt;std::basic_string&lt;char&gt; &gt;, std::hash&lt;std::string&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;' ; - /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/bits/hashtable.h:221:56: error: '__bucket_type' is a protected member of 'std::__detail::_Hashtable_base&lt;std::basic_string&lt;char&gt;, std::basic_string&lt;char&gt;, std::__detail::_Identity, std::equal_to&lt;std::basic_string&lt;char&gt; &gt;, std::hash&lt;std::string&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;' ; - /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/bits/unordered_set.h:104:36: error: no type named 'hasher' in 'std::_Hashtable&lt;std::basic_string&lt;char&gt;, std::basic_string&lt;char&gt;, std::allocator&lt;std::basic_string&lt;char&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::basic_string&lt;char&gt; &gt;, std::hash&lt;std::string&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;' ; - /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/bits/hashtable.h:179:24: error: default argument of '_Insert' must be imported from one of the following modules before it is required: ; - /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../incl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1412#issuecomment-361415584:1166,hash,hash,1166,https://root.cern,https://github.com/root-project/root/pull/1412#issuecomment-361415584,1,['hash'],['hash']
Security, -u` -L https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root -o /dev/null; % Total % Received % Xferd Average Speed Time Time Time Current; Dload Upload Total Spent Left Speed; 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0* About to connect() to webdav.lcg.triumf.ca port 2880 (#0); * Trying 2607:f8f0:660:3::40...; * Connected to webdav.lcg.triumf.ca (2607:f8f0:660:3::40) port 2880 (#0); * Initializing NSS with certpath: sql:/etc/pki/nssdb; * failed to load '/etc/grid-security/certificates/7022e3c4.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/69105f4f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CERN-Root-2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/69105f4f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridRootCA-Root.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertAssuredIDRootCA-Root.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/edca0fc0.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertAssuredIDRootCA-Root.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-Root.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CNRS2-Projets.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertAssuredIDRootCA-Root.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-Root.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertAssuredIDRootCA-Root.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/727146a8.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b1159c4c.namespaces' from CURLOPT_CAPATH; * failed to load '/e,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:1244,secur,security,1244,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,2,"['certificate', 'secur']","['certificates', 'security']"
Security," /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003; [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609; [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611; [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181; [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260; [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104; [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970; [/Users/sftn",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13290:4054,hash,hash,4054,https://root.cern,https://github.com/root-project/root/pull/13290,1,['hash'],['hash']
Security, /opt/root_src/build/rmkdepend/main.c:403; 12: Loop condition is true. Entering loop body in /opt/root_src/build/rmkdepend/main.c:489; 13: Assuming 'rootBuild' is not equal to 0 in /opt/root_src/build/rmkdepend/main.c:495; 14: Taking false branch in /opt/root_src/build/rmkdepend/main.c:495; 15: Passing null pointer value via 1st parameter 'file' in /opt/root_src/build/rmkdepend/main.c:498; 16: Calling 'base_name' in /opt/root_src/build/rmkdepend/main.c:498; 17: Passing null pointer value via 1st parameter 'str' in /opt/root_src/build/rmkdepend/main.c:659; 18: Calling 'copy' in /opt/root_src/build/rmkdepend/main.c:659; 19: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/build/rmkdepend/main.c:567; /opt/root_src/build/rmkdepend/main.c:569:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/build/rmkdepend/main.c:569; /opt/root_src/build/rmkdepend/main.c:716:7: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/build/rmkdepend/main.c:7,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:35010,secur,security,35010,https://root.cern,https://github.com/root-project/root/issues/7410,1,['secur'],['security']
Security, /opt/root_src/builtins/lz4/lz4.c:1458; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4.c:1621:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1621; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1678:9: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1678; /opt/root_src/builtins/lz4/lz4.c:1678:9: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Assuming the condition is false in /opt/root_src/builtins/lz4/lz4.c:1673; 2: Taking false branch in /opt/root_src/builtins/lz4/lz4.c:1673; 3: Assuming 'dictSize' is <= field 'dictSize' in /opt/root_src/builtins/lz4/lz4.c:1674; 4: Taking false branch in /opt/root_src/builtins/lz4/lz4.c:1674; 5: Assuming,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:14367,secur,security,14367,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 12: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:166; 13: Null pointer value stored to 'i' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:167; 14: Control jumps to 'case kIsEnum:' at line 171 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:169; 15: Control jumps to 'case kBool_t:' at line 173 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:172; 16: Access to field 'boolean' results in a dereference of a null pointer (loaded from variable 'i') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:173; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:174:35: warning: Access to field 's_char' results in a dereference of a null pointer (loaded from variable 'i') [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_s,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:47670,Access,Access,47670,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security, /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 12: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:166; 13: Null pointer value stored to 'i' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:167; 14: Control jumps to 'case kIsEnum:' at line 171 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:169; 15: Control jumps to 'case kChar_t:' at line 174 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:172; 16: Access to field 's_char' results in a dereference of a null pointer (loaded from variable 'i') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:174; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:175:35: warning: Access to field 's_short' results in a dereference of a null pointer (loaded from variable 'i') [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:49365,Access,Access,49365,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security, /opt/root_src/net/http/civetweb/civetweb.c:17937; 21: Taking false branch in /opt/root_src/net/http/civetweb/civetweb.c:17937; 22: 1st function call argument is an uninitialized value in /opt/root_src/net/http/civetweb/civetweb.c:17939; /opt/root_src/net/http/civetweb/civetweb.c:18152:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:18152; /opt/root_src/net/http/civetweb/civetweb.c:18334:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:18334; /opt/root_src/net/http/civetweb/civetweb.c:18899:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it d,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:73427,secur,security,73427,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security," 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071; #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524; #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175; #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43; #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104; #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82; ===========================================================; ```; </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12023:30996,hash,hash,30996,https://root.cern,https://github.com/root-project/root/issues/12023,1,['hash'],['hash']
Security," 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51; 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985; 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288; 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::LateParsedAttrList*) + 6855; 13 rootcling_stage1 0x000000010d5f8a6a clang::Parser::ParseDeclOrFunctionDefInternal(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec&, clang::AccessSpecifier) + 138; 14 rootcling_stage1 0x000000010d5f8725 clang::Parser::ParseDeclarationOrFunctionDefinition(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) + 373; 15 rootcling_stage1 0x000000010d5f7477 clang::Parser::ParseExternalDeclaration(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) + 2423; 16 rootcling_stage1 0x000000010d5f641c clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&) + 588; 17 rootcling_stage1 0x000000010cd68a90 cling::IncrementalParser::ParseInternal(llvm::StringRef) + 2704; 18 rootcling_stage1 0x000000010cd6ca91 cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) + 81; 19 rootcling_stage1 0x000000010cd94044 cling::Interpreter::DeclareInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const + 884; 20 rootcling_stage1 0x000000010cd9110e cling::In",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3586:2176,Access,AccessSpecifier,2176,https://root.cern,https://github.com/root-project/root/pull/3586,1,['Access'],['AccessSpecifier']
Security," 0x5E1AC45: CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (CPPMethod.cxx:74); ==270704== by 0x5E1B1EF: CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (CPPMethod.cxx:149); ==270704== by 0x5E1A47E: CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (CPPMethod.cxx:728); ==270704== by 0x5E1A6B2: CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (CPPMethod.cxx:783); ==270704== by 0x5E1F5FA: CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) (CPPOverload.cxx:566); ==270704== by 0x5E60E19: CPyCppyy::CallMethodImp(CPyCppyy::TemplateProxy*, _object*&, _object*, _object*, bool, unsigned long) (TemplateProxy.cxx:449); ==270704== ; ==270704== Conditional jump or move depends on uninitialised value(s); ==270704== at 0x66272CB: std::_Hash_bytes(void const*, unsigned long, unsigned long) (hash_bytes.cc:145); ==270704== by 0x75167D5: std::_Hash_impl::hash(void const*, unsigned long, unsigned long) (functional_hash.h:198); ==270704== by 0x7516F81: std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator()(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (basic_string.h:6875); ==270704== by 0x753C32B: std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (hashtable_policy.h:1217); ==270704== by 0x753BA23: std::_Hashtab",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10092#issuecomment-1064001383:70216,hash,hash,70216,https://root.cern,https://github.com/root-project/root/issues/10092#issuecomment-1064001383,1,['hash'],['hash']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 101 more. ### Failing tests:; - [projectroot.math.mathcore.test.gtest_math_mathcore_test_VectorizedTMathUnit](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/31655/testReport/projectroot.m",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2236#issuecomment-401785227:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2236#issuecomment-401785227,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 101 more. ### Failing tests:; - [projectroot.math.mathcore.test.gtest_math_mathcore_test_VectorizedTMathUnit](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/31664/testReport/projectroot.m",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2236#issuecomment-401790307:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2236#issuecomment-401790307,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 174 more. ### Failing tests:; - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_SimpleRootcp1PrepareInput](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/28359/test",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2116#issuecomment-393485196:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2116#issuecomment-393485196,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 174 more. ### Failing tests:; - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_SimpleRootmkdir1PrepareInput](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/28339/t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2118#issuecomment-393467051:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2118#issuecomment-393467051,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 174 more. ### Failing tests:; - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_SimpleRootmkdir2PrepareInput](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/28349/t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2117#issuecomment-393471686:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2117#issuecomment-393471686,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 174 more. ### Failing tests:; - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_SimpleRootrm2PrepareInput](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/28319/test",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2116#issuecomment-393458046:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2116#issuecomment-393458046,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 174 more. ### Failing tests:; - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_SimpleRootrm3PrepareInput](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/28309/test",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2119#issuecomment-393426877:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2119#issuecomment-393426877,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 174 more. ### Failing tests:; - [projectroot.roottest.root.aclic.misc.roottest_root_aclic_misc_assertROOT7027](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/28759/testReport/projectroot.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2128#issuecomment-394339120:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2128#issuecomment-394339120,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 174 more. ### Failing tests:; - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/35916/testReport/projectroot.roottes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2408#issuecomment-410833810:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2408#issuecomment-410833810,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 174 more. ### Failing tests:; - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/35925/testReport/projectroot.roottes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2425#issuecomment-410838838:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2425#issuecomment-410838838,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 174 more. ### Failing tests:; - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/35934/testReport/projectroot.roottes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2424#issuecomment-410842792:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2424#issuecomment-410842792,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 174 more. ### Failing tests:; - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/35943/testReport/projectroot.roottes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2423#issuecomment-410846925:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2423#issuecomment-410846925,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 174 more. ### Failing tests:; - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/35952/testReport/projectroot.roottes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2445#issuecomment-410850862:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2445#issuecomment-410850862,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 174 more. ### Failing tests:; - [projectroot.roottest.root.io.stdarray.roottest_root_io_stdarray_modelReadDictTXMLFile](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/28399/testReport/pro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2121#issuecomment-393586302:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2121#issuecomment-393586302,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 174 more. ### Failing tests:; - [projectroot.roottest.root.io.stdarray.roottest_root_io_stdarray_modelReadDictTXMLFile](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/28429/testReport/pro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2121#issuecomment-393644259:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2121#issuecomment-393644259,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 174 more. ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29452/testReport/projectroot.ro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2167#issuecomment-395599631:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2167#issuecomment-395599631,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 174 more. ### Failing tests:; - [projectroot.roottest.root.multicore.roottest_root_multicore_semaphore](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29029/testReport/projectroot.roottes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2147#issuecomment-394741633:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2147#issuecomment-394741633,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 174 more. ### Failing tests:; - [projectroot.roottest.root.tree.cache.roottest_root_tree_cache_autocache](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/37576/testReport/projectroot.roott",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2492#issuecomment-414426779:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2492#issuecomment-414426779,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 174 more. ### Failing tests:; - [projectroot.roottest.root.tree.cache.roottest_root_tree_cache_autocache](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/37859/testReport/projectroot.roott",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2492#issuecomment-415001212:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2492#issuecomment-415001212,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 174 more. ### Failing tests:; - [projectroot.roottest.root.tree.fastcloning.roottest_root_tree_fastcloning_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/28469/testReport/projectroo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2125#issuecomment-393740963:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2125#issuecomment-393740963,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 174 more. ### Failing tests:; - [projectroot.roottest.root.tree.fastcloning.roottest_root_tree_fastcloning_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/28709/testReport/projectroo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2135#issuecomment-394293761:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2135#issuecomment-394293761,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 175 more. ### Failing tests:; - [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29705/testReport/projectroot.roottest.pyt",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2097#issuecomment-396066340:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2097#issuecomment-396066340,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 175 more. ### Failing tests:; - [projectroot.roottest.python.basic.roottest_python_basic_operator](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29736/testReport/projectroot.roottest.pyt",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2097#issuecomment-396162096:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2097#issuecomment-396162096,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 178 more. ### Failing tests:; - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_SimpleRootrm3PrepareInput](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/28329/test",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2097#issuecomment-393462547:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2097#issuecomment-393462547,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 89 more. ### Failing tests:; - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_SimpleRootcp4CheckOutput](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/37814/testRe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2495#issuecomment-414953063:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2495#issuecomment-414953063,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 89 more. ### Failing tests:; - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_SimpleRootmv4CheckOutput](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/37823/testRe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2498#issuecomment-414956948:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2498#issuecomment-414956948,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 89 more. ### Failing tests:; - [projectroot.roottest.python.pickle.roottest_python_pickle_write](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/37787/testReport/projectroot.roottest.pytho",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2496#issuecomment-414946221:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2496#issuecomment-414946221,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 89 more. ### Failing tests:; - [projectroot.tmva.tmva.test.DNN.CNN.TMVA_DNN_CNN_Backpropagation_CPU](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/37832/testReport/projectroot.tmva.tmva.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2498#issuecomment-414965082:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2498#issuecomment-414965082,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 91 more. ### Failing tests:; - [projectroot.io.io.test.gtest_io_io_test_test_io](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30090/testReport/projectroot.io.io/test/gtest_io_io_test_te",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2188#issuecomment-396975222:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2188#issuecomment-396975222,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 91 more. ### Failing tests:; - [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_snapshot](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30136/testReport/projectroot.t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2192#issuecomment-397195445:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2192#issuecomment-397195445,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 92 more. ### Failing tests:; - [projectroot.bindings.pyroot.test.pyunittests_pyroot_pretty_printing](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30425/testReport/projectroot.bindings.p",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2201#issuecomment-398086881:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2201#issuecomment-398086881,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 92 more. ### Failing tests:; - [projectroot.math.mathcore.test.gtest_math_mathcore_test_GradientUnit](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/34364/testReport/projectroot.math.math",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2389#issuecomment-409233856:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2389#issuecomment-409233856,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 92 more. ### Failing tests:; - [projectroot.roottest.cling.dict.ROOT-8096.roottest_cling_dict_ROOT_8096_build](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36222/testReport/projectroot.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2454#issuecomment-411275022:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2454#issuecomment-411275022,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 92 more. ### Failing tests:; - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_SimpleRootcp3CheckOutput](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36078/testRe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2408#issuecomment-411059605:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2408#issuecomment-411059605,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 92 more. ### Failing tests:; - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_SimpleRootcp4CheckOutput](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36150/testRe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/774#issuecomment-411101883:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/774#issuecomment-411101883,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 92 more. ### Failing tests:; - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_SimpleRootmkdir1PrepareInput](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/33519/te",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2366#issuecomment-407829804:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2366#issuecomment-407829804,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 92 more. ### Failing tests:; - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_SimpleRootmv2CheckOutput](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36186/testRe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2453#issuecomment-411165572:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2453#issuecomment-411165572,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 92 more. ### Failing tests:; - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_SimpleRootmv3CheckOutput](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36195/testRe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2453#issuecomment-411177216:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2453#issuecomment-411177216,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 92 more. ### Failing tests:; - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_SimpleRootmv4CheckOutput](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36168/testRe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/774#issuecomment-411129604:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/774#issuecomment-411129604,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 92 more. ### Failing tests:; - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_SimpleRootrm1CheckOutput](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36159/testRe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2452#issuecomment-411107206:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2452#issuecomment-411107206,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 92 more. ### Failing tests:; - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_SimpleRootrm2CheckOutput](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36213/testRe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2407#issuecomment-411277208:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2407#issuecomment-411277208,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 92 more. ### Failing tests:; - [projectroot.roottest.python.pickle.roottest_python_pickle_write](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36132/testReport/projectroot.roottest.pytho",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2453#issuecomment-411089672:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2453#issuecomment-411089672,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 92 more. ### Failing tests:; - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/31418/testReport/projectroot.roottest",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2217#issuecomment-400455069:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2217#issuecomment-400455069,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 92 more. ### Failing tests:; - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/31484/testReport/projectroot.roottest",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2217#issuecomment-400820416:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2217#issuecomment-400820416,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 92 more. ### Failing tests:; - [projectroot.roottest.root.dataframe.roottest_root_dataframe_misc](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36568/testReport/projectroot.roottest.root",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2424#issuecomment-411685113:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2424#issuecomment-411685113,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 92 more. ### Failing tests:; - [projectroot.roottest.root.dataframe.roottest_root_dataframe_misc](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36577/testReport/projectroot.roottest.root",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2408#issuecomment-411689618:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2408#issuecomment-411689618,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 92 more. ### Failing tests:; - [projectroot.roottest.root.dataframe.roottest_root_dataframe_misc](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36743/testReport/projectroot.roottest.root",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2412#issuecomment-411882917:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2412#issuecomment-411882917,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 92 more. ### Failing tests:; - [projectroot.roottest.root.dataframe.roottest_root_dataframe_misc](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36752/testReport/projectroot.roottest.root",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/774#issuecomment-411900558:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/774#issuecomment-411900558,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 92 more. ### Failing tests:; - [projectroot.roottest.root.dataframe.roottest_root_dataframe_misc](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36864/testReport/projectroot.roottest.root",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2449#issuecomment-412084096:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2449#issuecomment-412084096,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 92 more. ### Failing tests:; - [projectroot.roottest.root.dataframe.roottest_root_dataframe_misc](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36873/testReport/projectroot.roottest.root",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2449#issuecomment-412090993:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2449#issuecomment-412090993,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 92 more. ### Failing tests:; - [projectroot.roottest.root.dataframe.roottest_root_dataframe_misc](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/37080/testReport/projectroot.roottest.root",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2406#issuecomment-412985127:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2406#issuecomment-412985127,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 92 more. ### Failing tests:; - [projectroot.roottest.root.dataframe.roottest_root_dataframe_misc](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/37513/testReport/projectroot.roottest.root",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2128#issuecomment-414352157:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2128#issuecomment-414352157,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 92 more. ### Failing tests:; - [projectroot.roottest.root.dataframe.roottest_root_dataframe_regression_invalidref](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30217/testReport/projectr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2195#issuecomment-397357824:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2195#issuecomment-397357824,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 92 more. ### Failing tests:; - [projectroot.roottest.root.dataframe.roottest_root_dataframe_regression_invalidref](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36411/testReport/projectr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2459#issuecomment-411401046:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2459#issuecomment-411401046,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 92 more. ### Failing tests:; - [projectroot.roottest.root.dataframe.roottest_root_dataframe_regression_invalidref](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36502/testReport/projectr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2459#issuecomment-411478809:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2459#issuecomment-411478809,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 92 more. ### Failing tests:; - [projectroot.roottest.root.io.stdarray.roottest_root_io_stdarray_colWiseWrite_4](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36586/testReport/projectroot",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2442#issuecomment-411701514:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2442#issuecomment-411701514,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 92 more. ### Failing tests:; - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_readPtrColls](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36439/testReport/pro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2442#issuecomment-411436247:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2442#issuecomment-411436247,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 92 more. ### Failing tests:; - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_readUniqPtrColls](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/37449/testReport",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2442#issuecomment-414258112:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2442#issuecomment-414258112,1,['access'],['accessing']
Security," 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 92 more. ### Failing tests:; - [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/30614/testReport/projectroot.roo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2200#issuecomment-398742839:1744,access,accessing,1744,https://root.cern,https://github.com/root-project/root/pull/2200#issuecomment-398742839,1,['access'],['accessing']
