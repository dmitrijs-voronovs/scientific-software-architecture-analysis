quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Availability," Descent</td>; <td align=""center"">Optimize throw</td>; <td align=""center"">Learning to throw</td>; <td align=""center"">PIV</td>; </tr>; <tr>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/optim/Close_Packing.html""><img src=""docs/figures/examples/optim/Close_Packing.png""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/optim/Learn_Potential.html""><img src=""docs/figures/examples/optim/Learn_Potential.png""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/optim/Differentiable_Pressure.html""><img src=""docs/figures/examples/optim/Differentiable_Pressure.jpg""></a></td>; </tr>; <tr>; <td align=""center"">Close packing</td>; <td align=""center"">Learning Φ(x,y)</td>; <td align=""center"">Differentiable pressure</td>; </tr>; </tbody>; </table>. ## Installation. Installation with [pip](https://pypi.org/project/pip/) on [Python 3.6](https://www.python.org/downloads/) and above:; ``` bash; $ pip install phiflow; ```; Install [PyTorch](https://pytorch.org/), [TensorFlow](https://www.tensorflow.org/install) or [Jax](https://github.com/google/jax#installation) in addition to Φ<sub>Flow</sub> to enable machine learning capabilities and GPU execution.; To enable the web UI, also install [Dash](https://pypi.org/project/dash/).; For optimal GPU performance, you may compile the custom CUDA operators, see the [detailed installation instructions](https://tum-pbs.github.io/PhiFlow/Installation_Instructions.html). You can verify your installation by running; ```bash; $ python3 -c ""import phi; phi.verify()""; ```; This will check for compatible PyTorch, Jax and TensorFlow installations as well. ## Features. * Tight integration with PyTorch, Jax and TensorFlow for straightforward neural network training with fully differentiable simulations that can [run on the GPU](https://tum-pbs.github.io/PhiFlow/GPU_Execution.html#enabling-gpu-execution).; * Built-in PDE operations with focus on fluid phenomen",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md:8859,down,downloads,8859,README.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md,1,['down'],['downloads']
Availability," it comes to function operations.; This document outlines what should be avoided in order to keep your code compatible with all backends. ## Limitations of `jit_compile`. Do not do any of the following inside functions that may be jit-compiled. ### Avoid side effects (Jax); Jit-compiled functions should be [pure](https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html#pure-functions).; Do not let any values created inside a jit-compiled function escape to the outside. ### Avoid nested functions and lambdas (Jax); Do not pass temporary functions to any custom-gradient function.; Temporary functions are those whose `id` changes each time the function to be jit-compiled is called.; In particular, do not `solve_linear` temporary function or pass temporary functions as `preprocess_y`. ### Avoid nested `custom_gradient` (PyTorch); Functions that define a custom gradient via `math.custom_gradient` should not call other custom-gradient functions.; This may result in errors when jit-compiling the function. ### Do not jit-compile neural networks (Jax); Do not run neural networks within jit-compiled functions.; The only exception is the `loss_function` passed to `update_weights()`.; This is because Jax requires all parameters including network weights to be declared as parameters but Φ<sub>Flow</sub> does not. ### Do no compute gradients (PyTorch); Do not call `math.gradient` within a jit-compiled function.; PyTorch cannot trace backward passes. ### Do not use `SolveTape` (PyTorch); `SolveTape` does not work while tracing with PyTorch.; This is because PyTorch does not correctly trace `torch.autograd.Function` instances which are required for the implicit backward solve. ## Memory Leaks. Memory leaks can occur when transformed function are repeatedly called with non-compatible arguments.; This can happen with `custom_gradient` but also `jit_compile`, `functional_gradient` or `hessian`.; Each time such a function is called with new keyword arguments or tensors",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Known_Issues.md:1097,error,errors,1097,docs/Known_Issues.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Known_Issues.md,1,['error'],['errors']
Availability,"# Console Interface; The console interface enables interaction with Python scripts through the command line. Launch via `gui='console'` in [`view()`](phi/vis/index.html#phi.vis.view) or [`show()`](phi/vis/index.html#phi.vis.show). The console interface runs on a different thread than the main Python script. ## Commands. Multiple commands can be chained using `;` to separate them. Actions are registered as new commands.; E.g. if an action `my_function()` is. ### General Commands. `help` Prints available commands. `status` Prints the current status. `controls` Prints a list of available controls and their values. `actions` Prints a list of available actions. ### Plotting. `show` Plots the first two fields. `show <fields>`. `show <field>.<component>` where `<component>` must be one of `x`, `y`, `z`, `abs`. ### Control Execution. `play` Runs all loop iterations until paused. `play <frames>` Runs a certain number of iterations. Has no effect if already playing. `pause` Pauses loop execution after the current iteration finishes. `step` Progresses the loop by one iteration. `<control_name> = <value>` Sets a control value. `exit` Finishes the current loop iteration and exits the program. `kill` Immediately stops the Python process. ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/ConsoleUI.md:498,avail,available,498,docs/ConsoleUI.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/ConsoleUI.md,3,['avail'],['available']
Availability,"# Visualization. ## Interactive User Interface; Φ<sub>Flow</sub> provides interactive user interfaces for live visualization and control.; They allow you to see neural network predictions as the network is being trained or view training data while it is being generated. The following interfaces are currently available:. - [`dash`](Web_Interface.md) web interface hosts a web server; - [`console`](ConsoleUI.md) for command line applications. ### Viewing Data; The primary way to launch an interactive user interface is through; [`view()`](phi/vis/index.html#phi.vis.view).; This function takes a number of `SampledField` instances or variable names and shows them in a new UI.; ```python; from phi.flow import *. data = Domain(x=32, y=32).scalar_grid(Noise()); view(data, gui=None); ```; With `gui=None` (default) an appropriate interface is automatically selected based on the environment and installed packages.; Otherwise, the type of interface can be specified with `gui='dash'` or `gui='console'`. ### Batch Selection; When the viewed data are batched, the GUI will try to plot all examples at once which may result in crowded plots.; This can be avoided using the `select` keyword argument.; It specifies dimensions along which a single slice is displayed, e.g.; ```python; data = Domain(x=32, y=32).scalar_grid(Noise(batch=10, time=33)); view(batched_data, select='batch,time'); ```; For each dimension, a slider will be added to the UI for the user to select which slice to display. ### Controlling Loop Execution; The GUI can be used to let the user control loop execution.; To do this, the user code needs to iterate over ; [`Viewer.range()`](phi/vis/index.html#phi.vis.Viewer.range).; ```python; data = Domain(x=32, y=32).scalar_grid(Noise()); for _ in view(data, play=False).range(10):; data = physics(data); ```; Once the loop is encountered, the execution controls of the GUI can be used to pause execution, run single iterations or break the loop.; With `play=False`, execution stops ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Visualization.md:310,avail,available,310,docs/Visualization.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Visualization.md,1,['avail'],['available']
Availability,"# Φ<sub>Flow</sub> Installation. ## Requirements. * [Python](https://www.python.org/downloads/) 3.6 or newer (e.g. [Anaconda](https://www.anaconda.com/products/individual)); * [pip](https://pip.pypa.io/en/stable/) (included in many Python distributions). For GPU acceleration, deep learning and optimization, either; [PyTorch](https://pytorch.org/),; [TensorFlow 2.x](https://www.tensorflow.org/install/) or ; [Jax](https://github.com/google/jax); must be registered with your Python installation.; Note that these also require a CUDA installation with *cuDNN* libraries for GPU execution.; We recommend CUDA 11.0 with cuDNN 8. ## Installing Φ<sub>Flow</sub> using pip. *Note*: If you want to use the Φ<sub>Flow</sub> CUDA operations with TensorFlow, you have to build Φ<sub>Flow</sub> from source instead (see below). The following command installs the latest stable version of Φ<sub>Flow</sub> with GUI support using pip.; ```bash; $ pip install phiflow; ```; To install the latest developer version of Φ<sub>Flow</sub>, run; ```bash; $ pip install --upgrade git+https://github.com/tum-pbs/PhiFlow@develop; ```. Install [PyTorch](https://pytorch.org/), [TensorFlow](https://www.tensorflow.org/install) or [Jax](https://github.com/google/jax#installation) in addition to Φ<sub>Flow</sub> to enable machine learning capabilities and GPU execution. To enable the web UI, also install [`dash`](https://pypi.org/project/dash/).; ```bash; $ pip install dash; ```; If you only run Φ<sub>Flow</sub> inside of Jupyter notebooks, dash is not required as Matplotlib will be used for plots and animations by default. ## Installing Φ<sub>Flow</sub> from Source; The Φ<sub>Flow</sub> source additionally contains demo scripts and tests.; In particular, it includes [`tests/verify.py`](https://github.com/tum-pbs/PhiFlow/blob/develop/tests/verify.py),; which tests your configuration. Clone the git repository by running; ```bash; $ git clone https://github.com/tum-pbs/PhiFlow.git <target directory>; ```; This wi",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md:84,down,downloads,84,docs/Installation_Instructions.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md,1,['down'],['downloads']
Availability,"atial dimensions; * `.rank: int` number of spatial dimensions the geometry lives in; * `.center: Tensor` center points of shape (`*geometry.shape`, `vector`). Important methods:. * `lies_inside(location)` tests if the given points lie inside the geometry; * `approximate_signed_distance(location)` computes the distance of the given points from the surface; * `approximate_fraction_inside(Geometry)` computes the overlap between two geometries. Geometries can be checked for equality using `==` and `!=`.; They should generally be treated as immutable. ## Basic shapes. All built-in basic geometry types support n-dimensional spaces. [`Spheres`](phi/geom/#phi.geom.Sphere) has two defining properties:. * `.center: Tensor` has a single channel dimension called 'vector'.; * `.radius: Tensor` has no channel dimension. Boxes come in multiple variants:. * [`Box`](phi/geom/#phi.geom.Box) stores the lower and upper corner of the box.; * `Cuboid` stores the center position and half-size.; * [`UniformGrid`](phi/geom/#phi.geom.UniformGrid) is similar to `Cuboid` but its spatial dimensions are guaranteed to span a regular grid. [`Points`](phi/geom/#phi.geom.Point) have zero volume and are only characterized by their location. ## Transformations and Operations. Translation: `geometry.shift(delta)`. Rotation: `geometry.rotate(angle)`. Union: `union(geometries)`. Intersection: `intersection(geometries)`. Geometries can be inverted using the `~` operator, i.e. the results of ; `lies_inside`, `approximate_signed_distance` and `approximate_fraction_inside` return the inverse values. Stacking: `GeometryStack(geometries, axis)` allows the type of `Geometry` to vary along a dimension. ## Integration with fields. `Geometry` objects are not [Fields](./Fields.md).; To get a direct `Field` representation from a `Geometry`, use `field.mask()`.; Geometries can be resampled to existing fields using `field.resample()`.; In these cases, the field takes the value `1` inside the geometry and `0` outside. ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Geometry.md:2392,mask,mask,2392,docs/Geometry.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Geometry.md,1,['mask'],['mask']
Deployability," Descent</td>; <td align=""center"">Optimize throw</td>; <td align=""center"">Learning to throw</td>; <td align=""center"">PIV</td>; </tr>; <tr>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/optim/Close_Packing.html""><img src=""docs/figures/examples/optim/Close_Packing.png""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/optim/Learn_Potential.html""><img src=""docs/figures/examples/optim/Learn_Potential.png""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/optim/Differentiable_Pressure.html""><img src=""docs/figures/examples/optim/Differentiable_Pressure.jpg""></a></td>; </tr>; <tr>; <td align=""center"">Close packing</td>; <td align=""center"">Learning Φ(x,y)</td>; <td align=""center"">Differentiable pressure</td>; </tr>; </tbody>; </table>. ## Installation. Installation with [pip](https://pypi.org/project/pip/) on [Python 3.6](https://www.python.org/downloads/) and above:; ``` bash; $ pip install phiflow; ```; Install [PyTorch](https://pytorch.org/), [TensorFlow](https://www.tensorflow.org/install) or [Jax](https://github.com/google/jax#installation) in addition to Φ<sub>Flow</sub> to enable machine learning capabilities and GPU execution.; To enable the web UI, also install [Dash](https://pypi.org/project/dash/).; For optimal GPU performance, you may compile the custom CUDA operators, see the [detailed installation instructions](https://tum-pbs.github.io/PhiFlow/Installation_Instructions.html). You can verify your installation by running; ```bash; $ python3 -c ""import phi; phi.verify()""; ```; This will check for compatible PyTorch, Jax and TensorFlow installations as well. ## Features. * Tight integration with PyTorch, Jax and TensorFlow for straightforward neural network training with fully differentiable simulations that can [run on the GPU](https://tum-pbs.github.io/PhiFlow/GPU_Execution.html#enabling-gpu-execution).; * Built-in PDE operations with focus on fluid phenomen",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md:8899,install,install,8899,README.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md,1,['install'],['install']
Deployability," ```; If you only run Φ<sub>Flow</sub> inside of Jupyter notebooks, dash is not required as Matplotlib will be used for plots and animations by default. ## Installing Φ<sub>Flow</sub> from Source; The Φ<sub>Flow</sub> source additionally contains demo scripts and tests.; In particular, it includes [`tests/verify.py`](https://github.com/tum-pbs/PhiFlow/blob/develop/tests/verify.py),; which tests your configuration. Clone the git repository by running; ```bash; $ git clone https://github.com/tum-pbs/PhiFlow.git <target directory>; ```; This will create the folder \<target directory\> and copy all Φ<sub>Flow</sub> source files into it. With this done, you may compile CUDA kernels for better performance, see below. Finally, Φ<sub>Flow</sub> needs to be added to the Python path.; This can be done in one of multiple ways:. * Marking \<target directory\> as a source directory in your Python IDE.; * Manually adding the cloned directory to the Python path.; * Installing Φ<sub>Flow</sub> using pip: `$ pip install <target directory>/`. This command needs to be rerun after you make changes to the source code. ## Compiling the CUDA Kernels for TensorFlow. The Φ<sub>Flow</sub> source includes several custom CUDA kernels to speed up certain operations when using TensorFlow.; To use these, you must have a [TensorFlow compatible CUDA SDK with cuDNN](https://www.tensorflow.org/install/gpu#software_requirements) as well as a compatible C++ compiler installed.; We strongly recommend using Linux with GCC 7.3.1 (`apt-get install gcc-4.8`) for this.; See the [tested TensorFlow build configurations](https://www.tensorflow.org/install/source#tested_build_configurations). To compile the CUDA kernels for TensorFlow, clone the repository as described above, then run `$ python <target directory>/setup.py tf_cuda`.; This will add the compiled CUDA binaries to the \<target directory\>. ## Verifying the installation; If you have installed Φ<sub>Flow</sub> from source, execute the included `verify.p",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md:2465,install,install,2465,docs/Installation_Instructions.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md,1,['install'],['install']
Deployability," done, you may compile CUDA kernels for better performance, see below. Finally, Φ<sub>Flow</sub> needs to be added to the Python path.; This can be done in one of multiple ways:. * Marking \<target directory\> as a source directory in your Python IDE.; * Manually adding the cloned directory to the Python path.; * Installing Φ<sub>Flow</sub> using pip: `$ pip install <target directory>/`. This command needs to be rerun after you make changes to the source code. ## Compiling the CUDA Kernels for TensorFlow. The Φ<sub>Flow</sub> source includes several custom CUDA kernels to speed up certain operations when using TensorFlow.; To use these, you must have a [TensorFlow compatible CUDA SDK with cuDNN](https://www.tensorflow.org/install/gpu#software_requirements) as well as a compatible C++ compiler installed.; We strongly recommend using Linux with GCC 7.3.1 (`apt-get install gcc-4.8`) for this.; See the [tested TensorFlow build configurations](https://www.tensorflow.org/install/source#tested_build_configurations). To compile the CUDA kernels for TensorFlow, clone the repository as described above, then run `$ python <target directory>/setup.py tf_cuda`.; This will add the compiled CUDA binaries to the \<target directory\>. ## Verifying the installation; If you have installed Φ<sub>Flow</sub> from source, execute the included `verify.py` script.; ```bash; $ python <Φ-Flow directory>/tests/verify.py; ```; Otherwise, run the following Python code.; ```python; import phi; phi.verify(); ```; Or from the command line:; ```bash; $ python3 -c ""import phi; phi.verify()""; ```; If Φ<sub>Flow</sub> and dependencies are installed correctly, you should see the Φ<sub>Flow</sub> version, followed by additional information on the components at the end of the console output. ### Unit tests. PyTest is required to run the unit tests. To install it, run `$ pip install pytest`. Some unit tests require TensorFlow and PyTorch.; Make sure, both are installed before running the tests. Execute `$ ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md:3084,install,install,3084,docs/Installation_Instructions.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md,1,['install'],['install']
Deployability," layout; * `[physics]` for changes to `phi.physics`; * `[learning]` for non-backend changes to `phi.tf`, `phi.torch`. Example commit header: `[doc] Improve markdown layout`. Commits may be tagged with multiple tags, but this should be used sparingly. Bugfix commits are tagged with the module to which the fixes are applied. ## Style Guide; Style guidelines make the code more uniform and easier to read.; Generally we stick to the Python style guidelines as outlined in [PEP 8](https://www.python.org/dev/peps/pep-0008/), with some minor modifications outlined below. Have a look at the [Zen](https://en.wikipedia.org/wiki/Zen_of_Python) [of Python](https://www.python.org/dev/peps/pep-0020/) for the philosophy behind the rules.; We would like to add the rule *Concise is better than repetitive.*. We use PyLint for static code analysis with specific configuration files for; [demos](../demos/.pylintrc),; [tests](../tests/.pylintrc) and the; [code base](../phi/.pylintrc).; PyLint is part of the automatic testing pipeline.; The warning log can be viewed online by selecting a `Tests` job and expanding the pylint output. ### Docstrings; The [API documentation](https://tum-pbs.github.io/PhiFlow/) for Φ<sub>Flow</sub> is generated using [pdoc](https://pdoc3.github.io/pdoc/).; We use [Google style docstrings](https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings); with Markdown formatting. ```python; """"""; Function description. *Note in italic.*. Example:; ; ```python; def python_example(); ```. Args:; arg1: Description.; Indentation for multi-line description. Returns:; Single output. For multi-output use same format as for args.; """"""; ```. Docstrings for variables are located directly below the public declaration.; ```python; variable: type = value; """""" Docstring for the variable. """"""; ```. ### Additional style choices; - **No line length limit**; long lines are allowed as long as the code is easy to understand.; - **Code comments** should only describe informa",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md:2629,pipeline,pipeline,2629,CONTRIBUTING.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md,1,['pipeline'],['pipeline']
Deployability," log.; - **Φ Board** contains benchmarking functionality. For TensorFlow apps it also allows the user to launch TensorBoard and run the TensorFlow profiler.; - **Help** refers to this page. Tips & Tricks:. - You can run a specified number of frames by entering the number in the text box next to the 'Step' button. If you put a '*' before the number, it is multiplied by the app's `stride` value which can be found in the `info` tab. ## Frame Rate and Refresh Rate. The web interface provides a *Refresh rate* control above the field viewer.; This value describes how often the diagrams in the browser are updated.; It is independent of the framerate specified in `view()` which defines how quickly the user code is executed. ## Configuration. The `show` method supports additional keyword arguments to configure how the App contents are displayed. The `display` parameter defines which fields are displayed initially, e.g. `display='Density'` or `display=('Density', 'Velocity')`. ### Further configuration parameters. | Parameter | Description | Default |; |----------------------|---------------------------------------------------------------------------------------------------|---------|; | external_web_server | Whether an external tool is used to host the Dash server. If False, launches a new web server. | False |; | arrow_origin | Which part of the arrow is centered at the position of the field. One of 'base', 'center', 'tip'. | 'tip' |; | max_arrow_resolution | Downscale grids to have no more than resolution**2 cells before drawing arrows. | 40 |; | min_arrow_length | Fraction of figure size. Smaller arrows are not drawn. | 0.005 |; | max_arrows | Maximum number of arrows to draw. Arrows are sorted by length. | 2000 |; | draw_full_arrows | Whether to draw the tips of arrows. If False, draws arrows as lines. | False |; | colormap | Built-in: 'viridisx', 'OrWhBl'. Additional colormaps can be used if matplotlib is installed. | 'viridisx'|; | slow_colorbar | If True, keeps colorb",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Web_Interface.md:2163,configurat,configuration,2163,docs/Web_Interface.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Web_Interface.md,1,['configurat'],['configuration']
Deployability," Φ<sub>Flow</sub> Installation. ## Requirements. * [Python](https://www.python.org/downloads/) 3.6 or newer (e.g. [Anaconda](https://www.anaconda.com/products/individual)); * [pip](https://pip.pypa.io/en/stable/) (included in many Python distributions). For GPU acceleration, deep learning and optimization, either; [PyTorch](https://pytorch.org/),; [TensorFlow 2.x](https://www.tensorflow.org/install/) or ; [Jax](https://github.com/google/jax); must be registered with your Python installation.; Note that these also require a CUDA installation with *cuDNN* libraries for GPU execution.; We recommend CUDA 11.0 with cuDNN 8. ## Installing Φ<sub>Flow</sub> using pip. *Note*: If you want to use the Φ<sub>Flow</sub> CUDA operations with TensorFlow, you have to build Φ<sub>Flow</sub> from source instead (see below). The following command installs the latest stable version of Φ<sub>Flow</sub> with GUI support using pip.; ```bash; $ pip install phiflow; ```; To install the latest developer version of Φ<sub>Flow</sub>, run; ```bash; $ pip install --upgrade git+https://github.com/tum-pbs/PhiFlow@develop; ```. Install [PyTorch](https://pytorch.org/), [TensorFlow](https://www.tensorflow.org/install) or [Jax](https://github.com/google/jax#installation) in addition to Φ<sub>Flow</sub> to enable machine learning capabilities and GPU execution. To enable the web UI, also install [`dash`](https://pypi.org/project/dash/).; ```bash; $ pip install dash; ```; If you only run Φ<sub>Flow</sub> inside of Jupyter notebooks, dash is not required as Matplotlib will be used for plots and animations by default. ## Installing Φ<sub>Flow</sub> from Source; The Φ<sub>Flow</sub> source additionally contains demo scripts and tests.; In particular, it includes [`tests/verify.py`](https://github.com/tum-pbs/PhiFlow/blob/develop/tests/verify.py),; which tests your configuration. Clone the git repository by running; ```bash; $ git clone https://github.com/tum-pbs/PhiFlow.git <target directory>; ```; This wil",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md:940,install,install,940,docs/Installation_Instructions.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md,4,"['install', 'upgrade']","['install', 'upgrade']"
Deployability,"# ![PhiFlow](figures/Logo_DallE2_3_layout.png). [**Homepage**](https://github.com/tum-pbs/PhiFlow); &nbsp;&nbsp;&nbsp; [**API**](phi); &nbsp;&nbsp;&nbsp; [**Demos**](https://github.com/tum-pbs/PhiFlow/tree/master/demos); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [<img src=""https://www.tensorflow.org/images/colab_logo_32px.png"" height=16> **Playground**](https://colab.research.google.com/drive/1zBlQbmNguRt-Vt332YvdTqlV4DBcus2S#offline=true&sandboxMode=true). ### Beginner Guides. [Installation Instructions](Installation_Instructions.md):; Requirements, installation, CUDA compilation. [Cookbook](Cookbook.html): Example code snippets for various things. #### Tensors and Dimensions. * [▶️ Introduction Video](https://youtu.be/4nYwL8ZZDK8); * [Introduction Notebook](Math_Introduction.html). #### Differentiation. * [Billiards](Billiards.html); * [Differentiable fluid simulations](Fluids_Tutorial.html). #### Fluids. * [▶️ Introduction Video](https://youtu.be/YRi_c0v3HKs); * [Differentiable fluid simulations](Fluids_Tutorial.html); * [Higher-order incompressible fluids](HigherOrder_Demo.html). #### I/O. * [Introduction to Scenes](IO_with_Scenes.html). #### Neural Networks. * [▶️ Introduction Video](https://youtu.be/aNigTqklCBc); * [Learning to Throw](https://tum-pbs.github.io/PhiFlow/Learn_to_Throw_Tutorial.html). #### Advanced. * [What to Avoid](Known_Issues.html): How to keep your code compatible with PyTorch, TensorFlow and Jax. ### Module Documentation. | Module API | Documentation |; |--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/index.md:552,install,installation,552,docs/index.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/index.md,1,['install'],['installation']
Deployability,"# Differentiable Geometry. The module [phi.geom](phi/geom) integrates geometric shapes and supports differentiable volumes. The class [`Geometry`](phi/geom/#phi.geom.Geometry) serves as a base for all geometry objects, such as boxes or spheres. All properties of `Geometry` support the use of batch, instance and spatial dimensions.; The corresponding values take the type of [Φ-tensors](./Math.html).; This allows a single `Geometry` object to describe a collection of shapes with varying properties. Important properties:. * `.shape: Shape` all batch and spatial dimensions; * `.rank: int` number of spatial dimensions the geometry lives in; * `.center: Tensor` center points of shape (`*geometry.shape`, `vector`). Important methods:. * `lies_inside(location)` tests if the given points lie inside the geometry; * `approximate_signed_distance(location)` computes the distance of the given points from the surface; * `approximate_fraction_inside(Geometry)` computes the overlap between two geometries. Geometries can be checked for equality using `==` and `!=`.; They should generally be treated as immutable. ## Basic shapes. All built-in basic geometry types support n-dimensional spaces. [`Spheres`](phi/geom/#phi.geom.Sphere) has two defining properties:. * `.center: Tensor` has a single channel dimension called 'vector'.; * `.radius: Tensor` has no channel dimension. Boxes come in multiple variants:. * [`Box`](phi/geom/#phi.geom.Box) stores the lower and upper corner of the box.; * `Cuboid` stores the center position and half-size.; * [`UniformGrid`](phi/geom/#phi.geom.UniformGrid) is similar to `Cuboid` but its spatial dimensions are guaranteed to span a regular grid. [`Points`](phi/geom/#phi.geom.Point) have zero volume and are only characterized by their location. ## Transformations and Operations. Translation: `geometry.shift(delta)`. Rotation: `geometry.rotate(angle)`. Union: `union(geometries)`. Intersection: `intersection(geometries)`. Geometries can be inverted using the ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Geometry.md:59,integrat,integrates,59,docs/Geometry.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Geometry.md,1,['integrat'],['integrates']
Deployability,"# PhiFlow. [**Homepage**](https://github.com/tum-pbs/PhiFlow); &nbsp;&nbsp;&nbsp; [**Documentation**](https://tum-pbs.github.io/PhiFlow/); &nbsp;&nbsp;&nbsp; [**API**](https://tum-pbs.github.io/PhiFlow/phi); &nbsp;&nbsp;&nbsp; [**Demos**](https://github.com/tum-pbs/PhiFlow/tree/master/demos); &nbsp;&nbsp;&nbsp; [<img src=""https://www.tensorflow.org/images/colab_logo_32px.png"" height=16> **Fluids Tutorial**](https://colab.research.google.com/github/tum-pbs/PhiFlow/blob/develop/docs/Fluids_Tutorial.ipynb#offline=true&sandboxMode=true); &nbsp;&nbsp;&nbsp; [<img src=""https://www.tensorflow.org/images/colab_logo_32px.png"" height=16> **Playground**](https://colab.research.google.com/drive/1zBlQbmNguRt-Vt332YvdTqlV4DBcus2S#offline=true&sandboxMode=true). PhiFlow is an open-source simulation toolkit built for optimization and machine learning applications.; It is written mostly in Python and can be used with NumPy, TensorFlow, Jax or PyTorch.; The close integration with machine learning frameworks allows it to leverage their automatic differentiation functionality,; making it easy to build end-to-end differentiable functions involving both learning models and physics simulations. See the [installation Instructions](https://tum-pbs.github.io/PhiFlow/Installation_Instructions.html) on how to compile the optional custom CUDA operations.; ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Package_Info.md:960,integrat,integration,960,docs/Package_Info.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Package_Info.md,2,"['install', 'integrat']","['installation', 'integration']"
Deployability,"# Visualization. ## Interactive User Interface; Φ<sub>Flow</sub> provides interactive user interfaces for live visualization and control.; They allow you to see neural network predictions as the network is being trained or view training data while it is being generated. The following interfaces are currently available:. - [`dash`](Web_Interface.md) web interface hosts a web server; - [`console`](ConsoleUI.md) for command line applications. ### Viewing Data; The primary way to launch an interactive user interface is through; [`view()`](phi/vis/index.html#phi.vis.view).; This function takes a number of `SampledField` instances or variable names and shows them in a new UI.; ```python; from phi.flow import *. data = Domain(x=32, y=32).scalar_grid(Noise()); view(data, gui=None); ```; With `gui=None` (default) an appropriate interface is automatically selected based on the environment and installed packages.; Otherwise, the type of interface can be specified with `gui='dash'` or `gui='console'`. ### Batch Selection; When the viewed data are batched, the GUI will try to plot all examples at once which may result in crowded plots.; This can be avoided using the `select` keyword argument.; It specifies dimensions along which a single slice is displayed, e.g.; ```python; data = Domain(x=32, y=32).scalar_grid(Noise(batch=10, time=33)); view(batched_data, select='batch,time'); ```; For each dimension, a slider will be added to the UI for the user to select which slice to display. ### Controlling Loop Execution; The GUI can be used to let the user control loop execution.; To do this, the user code needs to iterate over ; [`Viewer.range()`](phi/vis/index.html#phi.vis.Viewer.range).; ```python; data = Domain(x=32, y=32).scalar_grid(Noise()); for _ in view(data, play=False).range(10):; data = physics(data); ```; Once the loop is encountered, the execution controls of the GUI can be used to pause execution, run single iterations or break the loop.; With `play=False`, execution stops ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Visualization.md:896,install,installed,896,docs/Visualization.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Visualization.md,1,['install'],['installed']
Deployability,"# Φ<sub>Flow</sub> Installation. ## Requirements. * [Python](https://www.python.org/downloads/) 3.6 or newer (e.g. [Anaconda](https://www.anaconda.com/products/individual)); * [pip](https://pip.pypa.io/en/stable/) (included in many Python distributions). For GPU acceleration, deep learning and optimization, either; [PyTorch](https://pytorch.org/),; [TensorFlow 2.x](https://www.tensorflow.org/install/) or ; [Jax](https://github.com/google/jax); must be registered with your Python installation.; Note that these also require a CUDA installation with *cuDNN* libraries for GPU execution.; We recommend CUDA 11.0 with cuDNN 8. ## Installing Φ<sub>Flow</sub> using pip. *Note*: If you want to use the Φ<sub>Flow</sub> CUDA operations with TensorFlow, you have to build Φ<sub>Flow</sub> from source instead (see below). The following command installs the latest stable version of Φ<sub>Flow</sub> with GUI support using pip.; ```bash; $ pip install phiflow; ```; To install the latest developer version of Φ<sub>Flow</sub>, run; ```bash; $ pip install --upgrade git+https://github.com/tum-pbs/PhiFlow@develop; ```. Install [PyTorch](https://pytorch.org/), [TensorFlow](https://www.tensorflow.org/install) or [Jax](https://github.com/google/jax#installation) in addition to Φ<sub>Flow</sub> to enable machine learning capabilities and GPU execution. To enable the web UI, also install [`dash`](https://pypi.org/project/dash/).; ```bash; $ pip install dash; ```; If you only run Φ<sub>Flow</sub> inside of Jupyter notebooks, dash is not required as Matplotlib will be used for plots and animations by default. ## Installing Φ<sub>Flow</sub> from Source; The Φ<sub>Flow</sub> source additionally contains demo scripts and tests.; In particular, it includes [`tests/verify.py`](https://github.com/tum-pbs/PhiFlow/blob/develop/tests/verify.py),; which tests your configuration. Clone the git repository by running; ```bash; $ git clone https://github.com/tum-pbs/PhiFlow.git <target directory>; ```; This wi",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md:395,install,install,395,docs/Installation_Instructions.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md,4,['install'],"['install', 'installation', 'installs']"
Deployability,"Learn_Potential.html""><img src=""docs/figures/examples/optim/Learn_Potential.png""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/optim/Differentiable_Pressure.html""><img src=""docs/figures/examples/optim/Differentiable_Pressure.jpg""></a></td>; </tr>; <tr>; <td align=""center"">Close packing</td>; <td align=""center"">Learning Φ(x,y)</td>; <td align=""center"">Differentiable pressure</td>; </tr>; </tbody>; </table>. ## Installation. Installation with [pip](https://pypi.org/project/pip/) on [Python 3.6](https://www.python.org/downloads/) and above:; ``` bash; $ pip install phiflow; ```; Install [PyTorch](https://pytorch.org/), [TensorFlow](https://www.tensorflow.org/install) or [Jax](https://github.com/google/jax#installation) in addition to Φ<sub>Flow</sub> to enable machine learning capabilities and GPU execution.; To enable the web UI, also install [Dash](https://pypi.org/project/dash/).; For optimal GPU performance, you may compile the custom CUDA operators, see the [detailed installation instructions](https://tum-pbs.github.io/PhiFlow/Installation_Instructions.html). You can verify your installation by running; ```bash; $ python3 -c ""import phi; phi.verify()""; ```; This will check for compatible PyTorch, Jax and TensorFlow installations as well. ## Features. * Tight integration with PyTorch, Jax and TensorFlow for straightforward neural network training with fully differentiable simulations that can [run on the GPU](https://tum-pbs.github.io/PhiFlow/GPU_Execution.html#enabling-gpu-execution).; * Built-in PDE operations with focus on fluid phenomena, allowing for concise formulation of simulations.; * Flexible, easy-to-use [web interface](https://tum-pbs.github.io/PhiFlow/Web_Interface.html) featuring live visualizations and interactive controls that can affect simulations or network training on the fly.; * Object-oriented, vectorized design for expressive code, ease of use, flexibility and extensibility.; * Reusable simulation code,",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md:9322,install,installation,9322,README.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md,1,['install'],['installation']
Deployability,"also require a CUDA installation with *cuDNN* libraries for GPU execution.; We recommend CUDA 11.0 with cuDNN 8. ## Installing Φ<sub>Flow</sub> using pip. *Note*: If you want to use the Φ<sub>Flow</sub> CUDA operations with TensorFlow, you have to build Φ<sub>Flow</sub> from source instead (see below). The following command installs the latest stable version of Φ<sub>Flow</sub> with GUI support using pip.; ```bash; $ pip install phiflow; ```; To install the latest developer version of Φ<sub>Flow</sub>, run; ```bash; $ pip install --upgrade git+https://github.com/tum-pbs/PhiFlow@develop; ```. Install [PyTorch](https://pytorch.org/), [TensorFlow](https://www.tensorflow.org/install) or [Jax](https://github.com/google/jax#installation) in addition to Φ<sub>Flow</sub> to enable machine learning capabilities and GPU execution. To enable the web UI, also install [`dash`](https://pypi.org/project/dash/).; ```bash; $ pip install dash; ```; If you only run Φ<sub>Flow</sub> inside of Jupyter notebooks, dash is not required as Matplotlib will be used for plots and animations by default. ## Installing Φ<sub>Flow</sub> from Source; The Φ<sub>Flow</sub> source additionally contains demo scripts and tests.; In particular, it includes [`tests/verify.py`](https://github.com/tum-pbs/PhiFlow/blob/develop/tests/verify.py),; which tests your configuration. Clone the git repository by running; ```bash; $ git clone https://github.com/tum-pbs/PhiFlow.git <target directory>; ```; This will create the folder \<target directory\> and copy all Φ<sub>Flow</sub> source files into it. With this done, you may compile CUDA kernels for better performance, see below. Finally, Φ<sub>Flow</sub> needs to be added to the Python path.; This can be done in one of multiple ways:. * Marking \<target directory\> as a source directory in your Python IDE.; * Manually adding the cloned directory to the Python path.; * Installing Φ<sub>Flow</sub> using pip: `$ pip install <target directory>/`. This command needs t",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md:1441,install,install,1441,docs/Installation_Instructions.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md,1,['install'],['install']
Deployability,"and description of the app. It allows the user to choose one field to view and to start/pause the app or step a single frame. Additionally all app-specific controls are shown at the bottom.; - **Side-by-Side** is similar to Home but shows two fields at a time instead of one.; - **Info** displays additional information about the current session such as file paths and run time.; - **Log** displays the complete application log.; - **Φ Board** contains benchmarking functionality. For TensorFlow apps it also allows the user to launch TensorBoard and run the TensorFlow profiler.; - **Help** refers to this page. Tips & Tricks:. - You can run a specified number of frames by entering the number in the text box next to the 'Step' button. If you put a '*' before the number, it is multiplied by the app's `stride` value which can be found in the `info` tab. ## Frame Rate and Refresh Rate. The web interface provides a *Refresh rate* control above the field viewer.; This value describes how often the diagrams in the browser are updated.; It is independent of the framerate specified in `view()` which defines how quickly the user code is executed. ## Configuration. The `show` method supports additional keyword arguments to configure how the App contents are displayed. The `display` parameter defines which fields are displayed initially, e.g. `display='Density'` or `display=('Density', 'Velocity')`. ### Further configuration parameters. | Parameter | Description | Default |; |----------------------|---------------------------------------------------------------------------------------------------|---------|; | external_web_server | Whether an external tool is used to host the Dash server. If False, launches a new web server. | False |; | arrow_origin | Which part of the arrow is centered at the position of the field. One of 'base', 'center', 'tip'. | 'tip' |; | max_arrow_resolution | Downscale grids to have no more than resolution**2 cells before drawing arrows. | 40 |; | min_arrow_le",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Web_Interface.md:1775,update,updated,1775,docs/Web_Interface.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Web_Interface.md,1,['update'],['updated']
Deployability,"ath.; * Installing Φ<sub>Flow</sub> using pip: `$ pip install <target directory>/`. This command needs to be rerun after you make changes to the source code. ## Compiling the CUDA Kernels for TensorFlow. The Φ<sub>Flow</sub> source includes several custom CUDA kernels to speed up certain operations when using TensorFlow.; To use these, you must have a [TensorFlow compatible CUDA SDK with cuDNN](https://www.tensorflow.org/install/gpu#software_requirements) as well as a compatible C++ compiler installed.; We strongly recommend using Linux with GCC 7.3.1 (`apt-get install gcc-4.8`) for this.; See the [tested TensorFlow build configurations](https://www.tensorflow.org/install/source#tested_build_configurations). To compile the CUDA kernels for TensorFlow, clone the repository as described above, then run `$ python <target directory>/setup.py tf_cuda`.; This will add the compiled CUDA binaries to the \<target directory\>. ## Verifying the installation; If you have installed Φ<sub>Flow</sub> from source, execute the included `verify.py` script.; ```bash; $ python <Φ-Flow directory>/tests/verify.py; ```; Otherwise, run the following Python code.; ```python; import phi; phi.verify(); ```; Or from the command line:; ```bash; $ python3 -c ""import phi; phi.verify()""; ```; If Φ<sub>Flow</sub> and dependencies are installed correctly, you should see the Φ<sub>Flow</sub> version, followed by additional information on the components at the end of the console output. ### Unit tests. PyTest is required to run the unit tests. To install it, run `$ pip install pytest`. Some unit tests require TensorFlow and PyTorch.; Make sure, both are installed before running the tests. Execute `$ pytest <target directory>/tests/commit` to run the normal tests.; The result of this should match the automated tests run by Travis CI which are linked on the main GitHub page. You can run the additional tests; ```bash; $ pytest <target directory>/tests/gpu; $ pytest <target directory>/tests/release; ```; ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md:3734,install,installed,3734,docs/Installation_Instructions.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md,5,"['install', 'release']","['install', 'installed', 'release']"
Deployability,"e latest stable version of Φ<sub>Flow</sub> with GUI support using pip.; ```bash; $ pip install phiflow; ```; To install the latest developer version of Φ<sub>Flow</sub>, run; ```bash; $ pip install --upgrade git+https://github.com/tum-pbs/PhiFlow@develop; ```. Install [PyTorch](https://pytorch.org/), [TensorFlow](https://www.tensorflow.org/install) or [Jax](https://github.com/google/jax#installation) in addition to Φ<sub>Flow</sub> to enable machine learning capabilities and GPU execution. To enable the web UI, also install [`dash`](https://pypi.org/project/dash/).; ```bash; $ pip install dash; ```; If you only run Φ<sub>Flow</sub> inside of Jupyter notebooks, dash is not required as Matplotlib will be used for plots and animations by default. ## Installing Φ<sub>Flow</sub> from Source; The Φ<sub>Flow</sub> source additionally contains demo scripts and tests.; In particular, it includes [`tests/verify.py`](https://github.com/tum-pbs/PhiFlow/blob/develop/tests/verify.py),; which tests your configuration. Clone the git repository by running; ```bash; $ git clone https://github.com/tum-pbs/PhiFlow.git <target directory>; ```; This will create the folder \<target directory\> and copy all Φ<sub>Flow</sub> source files into it. With this done, you may compile CUDA kernels for better performance, see below. Finally, Φ<sub>Flow</sub> needs to be added to the Python path.; This can be done in one of multiple ways:. * Marking \<target directory\> as a source directory in your Python IDE.; * Manually adding the cloned directory to the Python path.; * Installing Φ<sub>Flow</sub> using pip: `$ pip install <target directory>/`. This command needs to be rerun after you make changes to the source code. ## Compiling the CUDA Kernels for TensorFlow. The Φ<sub>Flow</sub> source includes several custom CUDA kernels to speed up certain operations when using TensorFlow.; To use these, you must have a [TensorFlow compatible CUDA SDK with cuDNN](https://www.tensorflow.org/install/gpu#softw",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md:1857,configurat,configuration,1857,docs/Installation_Instructions.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md,1,['configurat'],['configuration']
Deployability,"e.g. dash, widgets, console.; * `[geom]` for changes to `phi.geom`; * `[field]` for changes to `phi.field` except Scene; * `[io]` for changes to Scenes, data layout; * `[physics]` for changes to `phi.physics`; * `[learning]` for non-backend changes to `phi.tf`, `phi.torch`. Example commit header: `[doc] Improve markdown layout`. Commits may be tagged with multiple tags, but this should be used sparingly. Bugfix commits are tagged with the module to which the fixes are applied. ## Style Guide; Style guidelines make the code more uniform and easier to read.; Generally we stick to the Python style guidelines as outlined in [PEP 8](https://www.python.org/dev/peps/pep-0008/), with some minor modifications outlined below. Have a look at the [Zen](https://en.wikipedia.org/wiki/Zen_of_Python) [of Python](https://www.python.org/dev/peps/pep-0020/) for the philosophy behind the rules.; We would like to add the rule *Concise is better than repetitive.*. We use PyLint for static code analysis with specific configuration files for; [demos](../demos/.pylintrc),; [tests](../tests/.pylintrc) and the; [code base](../phi/.pylintrc).; PyLint is part of the automatic testing pipeline.; The warning log can be viewed online by selecting a `Tests` job and expanding the pylint output. ### Docstrings; The [API documentation](https://tum-pbs.github.io/PhiFlow/) for Φ<sub>Flow</sub> is generated using [pdoc](https://pdoc3.github.io/pdoc/).; We use [Google style docstrings](https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings); with Markdown formatting. ```python; """"""; Function description. *Note in italic.*. Example:; ; ```python; def python_example(); ```. Args:; arg1: Description.; Indentation for multi-line description. Returns:; Single output. For multi-output use same format as for args.; """"""; ```. Docstrings for variables are located directly below the public declaration.; ```python; variable: type = value; """""" Docstring for the variable. """"""; ```. ### Additional ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md:2465,configurat,configuration,2465,CONTRIBUTING.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md,1,['configurat'],['configuration']
Deployability,"e_plume.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/smoke_plume.py) which additionally introduces a buoyancy force,; [fluid_logo.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/fluid_logo.py) which adds obstacles to the scene and; [rotating_bar.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/rotating_bar.py) which adds geometry movement. ## Differences to MantaFlow. [MantaFlow](http://mantaflow.com/) is a simulation framework that also offers; deep learning functionality and TensorFlow integration. However, in contrast to; Φ<sub>Flow</sub>, it focuses on fast CPU-based simulations, and does not; support differentiable operators. Nonetheless, it can be useful to, e.g.,; pre-compute simulation data for learning tasks in Φ<sub>Flow</sub>. One central difference of both fluid solvers is that mantaflow grids all have; the same size, while in Φ<sub>Flow</sub>, the staggered velocity grids are; larger by one layer on the positive domain sides ; (also see the [data format section](Scene_Format_Specification.md)). Mantaflow always stores 3-component vectors in its `Vec3`; struct, while Φ<sub>Flow</sub> changes the vectors size with the; dimensionality of the solver. E.g., a 2D solver in mantaflow with a velocity `Vec3 v`; has `v[0]` for X, and `v[1]` for the Y component. `v[2]` for Z is still; defined, but typically set to zero. For a 3D solver in mantaflow, this indexing; scheme does not change. Φ<sub>Flow</sub>, on the other hand, uses a two component numpy array for the; velocity component of a 2D solver, where the first or last index denotes X, depending on the configuration.; This scheme is closer to the typical ordering of numpy arrays, and simplifies the; implementation of operators that are agnostic of the solver dimension. As a side effect of this indexing, gravity is defined to act along the last or first; dimension in Φ<sub>Flow</sub>, i.e., Z in 3D, and Y in 2D.; In contrast, gravity always acts along the Y direction in Mantaflow.; ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Physics.md:3668,configurat,configuration,3668,docs/Physics.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Physics.md,1,['configurat'],['configuration']
Deployability,"ectory>; ```; This will create the folder \<target directory\> and copy all Φ<sub>Flow</sub> source files into it. With this done, you may compile CUDA kernels for better performance, see below. Finally, Φ<sub>Flow</sub> needs to be added to the Python path.; This can be done in one of multiple ways:. * Marking \<target directory\> as a source directory in your Python IDE.; * Manually adding the cloned directory to the Python path.; * Installing Φ<sub>Flow</sub> using pip: `$ pip install <target directory>/`. This command needs to be rerun after you make changes to the source code. ## Compiling the CUDA Kernels for TensorFlow. The Φ<sub>Flow</sub> source includes several custom CUDA kernels to speed up certain operations when using TensorFlow.; To use these, you must have a [TensorFlow compatible CUDA SDK with cuDNN](https://www.tensorflow.org/install/gpu#software_requirements) as well as a compatible C++ compiler installed.; We strongly recommend using Linux with GCC 7.3.1 (`apt-get install gcc-4.8`) for this.; See the [tested TensorFlow build configurations](https://www.tensorflow.org/install/source#tested_build_configurations). To compile the CUDA kernels for TensorFlow, clone the repository as described above, then run `$ python <target directory>/setup.py tf_cuda`.; This will add the compiled CUDA binaries to the \<target directory\>. ## Verifying the installation; If you have installed Φ<sub>Flow</sub> from source, execute the included `verify.py` script.; ```bash; $ python <Φ-Flow directory>/tests/verify.py; ```; Otherwise, run the following Python code.; ```python; import phi; phi.verify(); ```; Or from the command line:; ```bash; $ python3 -c ""import phi; phi.verify()""; ```; If Φ<sub>Flow</sub> and dependencies are installed correctly, you should see the Φ<sub>Flow</sub> version, followed by additional information on the components at the end of the console output. ### Unit tests. PyTest is required to run the unit tests. To install it, run `$ pip install p",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md:2979,install,install,2979,docs/Installation_Instructions.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md,1,['install'],['install']
Deployability,"github.io/PhiFlow/examples/optim/Close_Packing.html""><img src=""docs/figures/examples/optim/Close_Packing.png""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/optim/Learn_Potential.html""><img src=""docs/figures/examples/optim/Learn_Potential.png""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/optim/Differentiable_Pressure.html""><img src=""docs/figures/examples/optim/Differentiable_Pressure.jpg""></a></td>; </tr>; <tr>; <td align=""center"">Close packing</td>; <td align=""center"">Learning Φ(x,y)</td>; <td align=""center"">Differentiable pressure</td>; </tr>; </tbody>; </table>. ## Installation. Installation with [pip](https://pypi.org/project/pip/) on [Python 3.6](https://www.python.org/downloads/) and above:; ``` bash; $ pip install phiflow; ```; Install [PyTorch](https://pytorch.org/), [TensorFlow](https://www.tensorflow.org/install) or [Jax](https://github.com/google/jax#installation) in addition to Φ<sub>Flow</sub> to enable machine learning capabilities and GPU execution.; To enable the web UI, also install [Dash](https://pypi.org/project/dash/).; For optimal GPU performance, you may compile the custom CUDA operators, see the [detailed installation instructions](https://tum-pbs.github.io/PhiFlow/Installation_Instructions.html). You can verify your installation by running; ```bash; $ python3 -c ""import phi; phi.verify()""; ```; This will check for compatible PyTorch, Jax and TensorFlow installations as well. ## Features. * Tight integration with PyTorch, Jax and TensorFlow for straightforward neural network training with fully differentiable simulations that can [run on the GPU](https://tum-pbs.github.io/PhiFlow/GPU_Execution.html#enabling-gpu-execution).; * Built-in PDE operations with focus on fluid phenomena, allowing for concise formulation of simulations.; * Flexible, easy-to-use [web interface](https://tum-pbs.github.io/PhiFlow/Web_Interface.html) featuring live visualizations and interacti",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md:9050,install,installation,9050,README.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md,1,['install'],['installation']
Deployability,"iable_Pressure.jpg""></a></td>; </tr>; <tr>; <td align=""center"">Close packing</td>; <td align=""center"">Learning Φ(x,y)</td>; <td align=""center"">Differentiable pressure</td>; </tr>; </tbody>; </table>. ## Installation. Installation with [pip](https://pypi.org/project/pip/) on [Python 3.6](https://www.python.org/downloads/) and above:; ``` bash; $ pip install phiflow; ```; Install [PyTorch](https://pytorch.org/), [TensorFlow](https://www.tensorflow.org/install) or [Jax](https://github.com/google/jax#installation) in addition to Φ<sub>Flow</sub> to enable machine learning capabilities and GPU execution.; To enable the web UI, also install [Dash](https://pypi.org/project/dash/).; For optimal GPU performance, you may compile the custom CUDA operators, see the [detailed installation instructions](https://tum-pbs.github.io/PhiFlow/Installation_Instructions.html). You can verify your installation by running; ```bash; $ python3 -c ""import phi; phi.verify()""; ```; This will check for compatible PyTorch, Jax and TensorFlow installations as well. ## Features. * Tight integration with PyTorch, Jax and TensorFlow for straightforward neural network training with fully differentiable simulations that can [run on the GPU](https://tum-pbs.github.io/PhiFlow/GPU_Execution.html#enabling-gpu-execution).; * Built-in PDE operations with focus on fluid phenomena, allowing for concise formulation of simulations.; * Flexible, easy-to-use [web interface](https://tum-pbs.github.io/PhiFlow/Web_Interface.html) featuring live visualizations and interactive controls that can affect simulations or network training on the fly.; * Object-oriented, vectorized design for expressive code, ease of use, flexibility and extensibility.; * Reusable simulation code, independent of backend and dimensionality, i.e. the exact same code can run a 2D fluid sim using NumPy and a 3D fluid sim on the GPU using TensorFlow or PyTorch.; * High-level linear equation solver with automated sparse matrix generation. ## 📖 Docum",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md:9575,install,installations,9575,README.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md,1,['install'],['installations']
Deployability,"im/Close_Packing.png""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/optim/Learn_Potential.html""><img src=""docs/figures/examples/optim/Learn_Potential.png""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/optim/Differentiable_Pressure.html""><img src=""docs/figures/examples/optim/Differentiable_Pressure.jpg""></a></td>; </tr>; <tr>; <td align=""center"">Close packing</td>; <td align=""center"">Learning Φ(x,y)</td>; <td align=""center"">Differentiable pressure</td>; </tr>; </tbody>; </table>. ## Installation. Installation with [pip](https://pypi.org/project/pip/) on [Python 3.6](https://www.python.org/downloads/) and above:; ``` bash; $ pip install phiflow; ```; Install [PyTorch](https://pytorch.org/), [TensorFlow](https://www.tensorflow.org/install) or [Jax](https://github.com/google/jax#installation) in addition to Φ<sub>Flow</sub> to enable machine learning capabilities and GPU execution.; To enable the web UI, also install [Dash](https://pypi.org/project/dash/).; For optimal GPU performance, you may compile the custom CUDA operators, see the [detailed installation instructions](https://tum-pbs.github.io/PhiFlow/Installation_Instructions.html). You can verify your installation by running; ```bash; $ python3 -c ""import phi; phi.verify()""; ```; This will check for compatible PyTorch, Jax and TensorFlow installations as well. ## Features. * Tight integration with PyTorch, Jax and TensorFlow for straightforward neural network training with fully differentiable simulations that can [run on the GPU](https://tum-pbs.github.io/PhiFlow/GPU_Execution.html#enabling-gpu-execution).; * Built-in PDE operations with focus on fluid phenomena, allowing for concise formulation of simulations.; * Flexible, easy-to-use [web interface](https://tum-pbs.github.io/PhiFlow/Web_Interface.html) featuring live visualizations and interactive controls that can affect simulations or network training on the fly.; * Object-orient",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md:9183,install,install,9183,README.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md,1,['install'],['install']
Deployability,"ing and optimization, either; [PyTorch](https://pytorch.org/),; [TensorFlow 2.x](https://www.tensorflow.org/install/) or ; [Jax](https://github.com/google/jax); must be registered with your Python installation.; Note that these also require a CUDA installation with *cuDNN* libraries for GPU execution.; We recommend CUDA 11.0 with cuDNN 8. ## Installing Φ<sub>Flow</sub> using pip. *Note*: If you want to use the Φ<sub>Flow</sub> CUDA operations with TensorFlow, you have to build Φ<sub>Flow</sub> from source instead (see below). The following command installs the latest stable version of Φ<sub>Flow</sub> with GUI support using pip.; ```bash; $ pip install phiflow; ```; To install the latest developer version of Φ<sub>Flow</sub>, run; ```bash; $ pip install --upgrade git+https://github.com/tum-pbs/PhiFlow@develop; ```. Install [PyTorch](https://pytorch.org/), [TensorFlow](https://www.tensorflow.org/install) or [Jax](https://github.com/google/jax#installation) in addition to Φ<sub>Flow</sub> to enable machine learning capabilities and GPU execution. To enable the web UI, also install [`dash`](https://pypi.org/project/dash/).; ```bash; $ pip install dash; ```; If you only run Φ<sub>Flow</sub> inside of Jupyter notebooks, dash is not required as Matplotlib will be used for plots and animations by default. ## Installing Φ<sub>Flow</sub> from Source; The Φ<sub>Flow</sub> source additionally contains demo scripts and tests.; In particular, it includes [`tests/verify.py`](https://github.com/tum-pbs/PhiFlow/blob/develop/tests/verify.py),; which tests your configuration. Clone the git repository by running; ```bash; $ git clone https://github.com/tum-pbs/PhiFlow.git <target directory>; ```; This will create the folder \<target directory\> and copy all Φ<sub>Flow</sub> source files into it. With this done, you may compile CUDA kernels for better performance, see below. Finally, Φ<sub>Flow</sub> needs to be added to the Python path.; This can be done in one of multiple ways:. * Mar",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md:1243,install,installation,1243,docs/Installation_Instructions.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md,1,['install'],['installation']
Deployability,"ion={PMLR}; }; ```. ## Publications. We will upload a whitepaper, soon.; In the meantime, please cite the ICLR 2020 paper. * [Learning to Control PDEs with Differentiable Physics](https://ge.in.tum.de/publications/2020-iclr-holl/), *Philipp Holl, Vladlen Koltun, Nils Thuerey*, ICLR 2020.; * [Solver-in-the-Loop: Learning from Differentiable Physics to Interact with Iterative PDE-Solvers](https://arxiv.org/abs/2007.00016), *Kiwon Um, Raymond Fei, Philipp Holl, Robert Brand, Nils Thuerey*, NeurIPS 2020.; * [Φ<sub>Flow</sub>: A Differentiable PDE Solving Framework for Deep Learning via Physical Simulations](https://montrealrobotics.ca/diffcvgp/), *Nils Thuerey, Kiwon Um, Philipp Holl*, DiffCVGP workshop at NeurIPS 2020.; * [Physics-based Deep Learning](https://physicsbaseddeeplearning.org/intro.html) (book), *Nils Thuerey, Philipp Holl, Maximilian Mueller, Patrick Schnell, Felix Trost, Kiwon Um*, DiffCVGP workshop at NeurIPS 2020.; * [Half-Inverse Gradients for Physical Deep Learning](https://arxiv.org/abs/2203.10131), *Patrick Schnell, Philipp Holl, Nils Thuerey*, ICLR 2022.; * [Scale-invariant Learning by Physics Inversion](https://arxiv.org/abs/2109.15048), *Philipp Holl, Vladlen Koltun, Nils Thuerey*, NeurIPS 2022. ## Benchmarks & Data Sets. Φ<sub>Flow</sub> has been used in the creation of various public data sets, such as; [PDEBench](https://github.com/pdebench/PDEBench) and [PDEarena](https://microsoft.github.io/pdearena/). [See more packages that use Φ<sub>Flow</sub>](https://github.com/tum-pbs/PhiFlow/network/dependents). ## 🕒 Version History. The [Version history](https://github.com/tum-pbs/PhiFlow/releases) lists all major changes since release.; The releases are also listed on [PyPI](https://pypi.org/project/phiflow/). ## 👥 Contributions. Contributions are welcome! Check out [this document](CONTRIBUTING.md) for guidelines. ## Acknowledgements. This work is supported by the ERC Starting Grant realFlow (StG-2015-637014) and the Intel Intelligent Systems Lab.; ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md:15598,release,releases,15598,README.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md,3,['release'],"['release', 'releases']"
Deployability,"ity. For TensorFlow apps it also allows the user to launch TensorBoard and run the TensorFlow profiler.; - **Help** refers to this page. Tips & Tricks:. - You can run a specified number of frames by entering the number in the text box next to the 'Step' button. If you put a '*' before the number, it is multiplied by the app's `stride` value which can be found in the `info` tab. ## Frame Rate and Refresh Rate. The web interface provides a *Refresh rate* control above the field viewer.; This value describes how often the diagrams in the browser are updated.; It is independent of the framerate specified in `view()` which defines how quickly the user code is executed. ## Configuration. The `show` method supports additional keyword arguments to configure how the App contents are displayed. The `display` parameter defines which fields are displayed initially, e.g. `display='Density'` or `display=('Density', 'Velocity')`. ### Further configuration parameters. | Parameter | Description | Default |; |----------------------|---------------------------------------------------------------------------------------------------|---------|; | external_web_server | Whether an external tool is used to host the Dash server. If False, launches a new web server. | False |; | arrow_origin | Which part of the arrow is centered at the position of the field. One of 'base', 'center', 'tip'. | 'tip' |; | max_arrow_resolution | Downscale grids to have no more than resolution**2 cells before drawing arrows. | 40 |; | min_arrow_length | Fraction of figure size. Smaller arrows are not drawn. | 0.005 |; | max_arrows | Maximum number of arrows to draw. Arrows are sorted by length. | 2000 |; | draw_full_arrows | Whether to draw the tips of arrows. If False, draws arrows as lines. | False |; | colormap | Built-in: 'viridisx', 'OrWhBl'. Additional colormaps can be used if matplotlib is installed. | 'viridisx'|; | slow_colorbar | If True, keeps colorbar similar to previous frame if possible. | False |; ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Web_Interface.md:3104,install,installed,3104,docs/Web_Interface.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Web_Interface.md,1,['install'],['installed']
Deployability,"le/) (included in many Python distributions). For GPU acceleration, deep learning and optimization, either; [PyTorch](https://pytorch.org/),; [TensorFlow 2.x](https://www.tensorflow.org/install/) or ; [Jax](https://github.com/google/jax); must be registered with your Python installation.; Note that these also require a CUDA installation with *cuDNN* libraries for GPU execution.; We recommend CUDA 11.0 with cuDNN 8. ## Installing Φ<sub>Flow</sub> using pip. *Note*: If you want to use the Φ<sub>Flow</sub> CUDA operations with TensorFlow, you have to build Φ<sub>Flow</sub> from source instead (see below). The following command installs the latest stable version of Φ<sub>Flow</sub> with GUI support using pip.; ```bash; $ pip install phiflow; ```; To install the latest developer version of Φ<sub>Flow</sub>, run; ```bash; $ pip install --upgrade git+https://github.com/tum-pbs/PhiFlow@develop; ```. Install [PyTorch](https://pytorch.org/), [TensorFlow](https://www.tensorflow.org/install) or [Jax](https://github.com/google/jax#installation) in addition to Φ<sub>Flow</sub> to enable machine learning capabilities and GPU execution. To enable the web UI, also install [`dash`](https://pypi.org/project/dash/).; ```bash; $ pip install dash; ```; If you only run Φ<sub>Flow</sub> inside of Jupyter notebooks, dash is not required as Matplotlib will be used for plots and animations by default. ## Installing Φ<sub>Flow</sub> from Source; The Φ<sub>Flow</sub> source additionally contains demo scripts and tests.; In particular, it includes [`tests/verify.py`](https://github.com/tum-pbs/PhiFlow/blob/develop/tests/verify.py),; which tests your configuration. Clone the git repository by running; ```bash; $ git clone https://github.com/tum-pbs/PhiFlow.git <target directory>; ```; This will create the folder \<target directory\> and copy all Φ<sub>Flow</sub> source files into it. With this done, you may compile CUDA kernels for better performance, see below. Finally, Φ<sub>Flow</sub> needs to ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md:1195,install,install,1195,docs/Installation_Instructions.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md,1,['install'],['install']
Deployability,"ll examples at once which may result in crowded plots.; This can be avoided using the `select` keyword argument.; It specifies dimensions along which a single slice is displayed, e.g.; ```python; data = Domain(x=32, y=32).scalar_grid(Noise(batch=10, time=33)); view(batched_data, select='batch,time'); ```; For each dimension, a slider will be added to the UI for the user to select which slice to display. ### Controlling Loop Execution; The GUI can be used to let the user control loop execution.; To do this, the user code needs to iterate over ; [`Viewer.range()`](phi/vis/index.html#phi.vis.Viewer.range).; ```python; data = Domain(x=32, y=32).scalar_grid(Noise()); for _ in view(data, play=False).range(10):; data = physics(data); ```; Once the loop is encountered, the execution controls of the GUI can be used to pause execution, run single iterations or break the loop.; With `play=False`, execution stops immediately once the loop is hit. The GUI will update the displayed values either after each iteration, or at a configurable refresh rate. ### Loop Recording; The GUI can also be used to record the values of the viewed variables during loop execution.; Recording is enabled if the stop argument in; [`Viewer.range()`](phi/vis/index.html#phi.vis.Viewer.range); is named, e.g. `viewer.range(frames=10)`.; Then, the values for each viewed variable are accumulated and stacked along a new batch dimension with this name. The recorded values can later be accessed through `Viewer.rec.<variable>`.; ```python; data = Domain(x=32, y=32).scalar_grid(Noise()); viewer = view(data); for _ in viewer.range(frames=10):; data = physics(data); all_data = viewer.rec.data # CenteredGrid (frames=11, x=32, y=32); ```. ### Custom Controls; It is often useful to modify parameters while a script is running,; e.g. adjusting the learning rate to see which values work best.; This can be easily achieved using [`control()`](phi/vis/#phi.vis.control).; ```python; learning_rate = control(0.001); checkpoint_",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Visualization.md:2048,update,update,2048,docs/Visualization.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Visualization.md,1,['update'],['update']
Deployability,"ne the git repository by running; ```bash; $ git clone https://github.com/tum-pbs/PhiFlow.git <target directory>; ```; This will create the folder \<target directory\> and copy all Φ<sub>Flow</sub> source files into it. With this done, you may compile CUDA kernels for better performance, see below. Finally, Φ<sub>Flow</sub> needs to be added to the Python path.; This can be done in one of multiple ways:. * Marking \<target directory\> as a source directory in your Python IDE.; * Manually adding the cloned directory to the Python path.; * Installing Φ<sub>Flow</sub> using pip: `$ pip install <target directory>/`. This command needs to be rerun after you make changes to the source code. ## Compiling the CUDA Kernels for TensorFlow. The Φ<sub>Flow</sub> source includes several custom CUDA kernels to speed up certain operations when using TensorFlow.; To use these, you must have a [TensorFlow compatible CUDA SDK with cuDNN](https://www.tensorflow.org/install/gpu#software_requirements) as well as a compatible C++ compiler installed.; We strongly recommend using Linux with GCC 7.3.1 (`apt-get install gcc-4.8`) for this.; See the [tested TensorFlow build configurations](https://www.tensorflow.org/install/source#tested_build_configurations). To compile the CUDA kernels for TensorFlow, clone the repository as described above, then run `$ python <target directory>/setup.py tf_cuda`.; This will add the compiled CUDA binaries to the \<target directory\>. ## Verifying the installation; If you have installed Φ<sub>Flow</sub> from source, execute the included `verify.py` script.; ```bash; $ python <Φ-Flow directory>/tests/verify.py; ```; Otherwise, run the following Python code.; ```python; import phi; phi.verify(); ```; Or from the command line:; ```bash; $ python3 -c ""import phi; phi.verify()""; ```; If Φ<sub>Flow</sub> and dependencies are installed correctly, you should see the Φ<sub>Flow</sub> version, followed by additional information on the components at the end of the cons",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md:2836,install,install,2836,docs/Installation_Instructions.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md,2,['install'],"['install', 'installed']"
Deployability,"nter"">PIV</td>; </tr>; <tr>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/optim/Close_Packing.html""><img src=""docs/figures/examples/optim/Close_Packing.png""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/optim/Learn_Potential.html""><img src=""docs/figures/examples/optim/Learn_Potential.png""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/optim/Differentiable_Pressure.html""><img src=""docs/figures/examples/optim/Differentiable_Pressure.jpg""></a></td>; </tr>; <tr>; <td align=""center"">Close packing</td>; <td align=""center"">Learning Φ(x,y)</td>; <td align=""center"">Differentiable pressure</td>; </tr>; </tbody>; </table>. ## Installation. Installation with [pip](https://pypi.org/project/pip/) on [Python 3.6](https://www.python.org/downloads/) and above:; ``` bash; $ pip install phiflow; ```; Install [PyTorch](https://pytorch.org/), [TensorFlow](https://www.tensorflow.org/install) or [Jax](https://github.com/google/jax#installation) in addition to Φ<sub>Flow</sub> to enable machine learning capabilities and GPU execution.; To enable the web UI, also install [Dash](https://pypi.org/project/dash/).; For optimal GPU performance, you may compile the custom CUDA operators, see the [detailed installation instructions](https://tum-pbs.github.io/PhiFlow/Installation_Instructions.html). You can verify your installation by running; ```bash; $ python3 -c ""import phi; phi.verify()""; ```; This will check for compatible PyTorch, Jax and TensorFlow installations as well. ## Features. * Tight integration with PyTorch, Jax and TensorFlow for straightforward neural network training with fully differentiable simulations that can [run on the GPU](https://tum-pbs.github.io/PhiFlow/GPU_Execution.html#enabling-gpu-execution).; * Built-in PDE operations with focus on fluid phenomena, allowing for concise formulation of simulations.; * Flexible, easy-to-use [web interface](https://tum-pbs.git",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md:9002,install,install,9002,README.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md,1,['install'],['install']
Deployability,"o the Python path.; * Installing Φ<sub>Flow</sub> using pip: `$ pip install <target directory>/`. This command needs to be rerun after you make changes to the source code. ## Compiling the CUDA Kernels for TensorFlow. The Φ<sub>Flow</sub> source includes several custom CUDA kernels to speed up certain operations when using TensorFlow.; To use these, you must have a [TensorFlow compatible CUDA SDK with cuDNN](https://www.tensorflow.org/install/gpu#software_requirements) as well as a compatible C++ compiler installed.; We strongly recommend using Linux with GCC 7.3.1 (`apt-get install gcc-4.8`) for this.; See the [tested TensorFlow build configurations](https://www.tensorflow.org/install/source#tested_build_configurations). To compile the CUDA kernels for TensorFlow, clone the repository as described above, then run `$ python <target directory>/setup.py tf_cuda`.; This will add the compiled CUDA binaries to the \<target directory\>. ## Verifying the installation; If you have installed Φ<sub>Flow</sub> from source, execute the included `verify.py` script.; ```bash; $ python <Φ-Flow directory>/tests/verify.py; ```; Otherwise, run the following Python code.; ```python; import phi; phi.verify(); ```; Or from the command line:; ```bash; $ python3 -c ""import phi; phi.verify()""; ```; If Φ<sub>Flow</sub> and dependencies are installed correctly, you should see the Φ<sub>Flow</sub> version, followed by additional information on the components at the end of the console output. ### Unit tests. PyTest is required to run the unit tests. To install it, run `$ pip install pytest`. Some unit tests require TensorFlow and PyTorch.; Make sure, both are installed before running the tests. Execute `$ pytest <target directory>/tests/commit` to run the normal tests.; The result of this should match the automated tests run by Travis CI which are linked on the main GitHub page. You can run the additional tests; ```bash; $ pytest <target directory>/tests/gpu; $ pytest <target directory>/tests/r",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md:3359,install,installation,3359,docs/Installation_Instructions.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md,2,['install'],"['installation', 'installed']"
Deployability,"ons that improve or extend the Φ<sub>Flow</sub> library.; We especially welcome; - New equations / solvers; - Code optimizations or native (CUDA) implementations.; - Integrations with other computing libraries.; - Bug fixes. Φ<sub>Flow</sub> is a framework, not an application collection.; While we list applications in the [demos](../demos) directory, these should be short and easy to understand. ## How to Contribute; We recommend you to contact the developers before starting your contribution.; There may already be similar internal work or planned changes that would affect how to code the contribution. To contribute code, fork Φ<sub>Flow</sub> on GitHub, make your changes, and submit a pull request.; Make sure that your contribution passes all tests. For commits, we use the following tags in the header:. * `[doc]` for documentation updates; * `[ci]` for CI configuration changes; * `[build]` for changes to the installation; * `[tests]` for adding or changing unit tests; * `[demos]` for adding or changing demo scripts; * `[Φ]` for general changes like version numbers or default imports; ; If the commit modifies the main codebase (`phi/`), use one of the following tags:. * `[vis]` for general changes in `phi.vis` as well as changes to any GUI, e.g. dash, widgets, console.; * `[geom]` for changes to `phi.geom`; * `[field]` for changes to `phi.field` except Scene; * `[io]` for changes to Scenes, data layout; * `[physics]` for changes to `phi.physics`; * `[learning]` for non-backend changes to `phi.tf`, `phi.torch`. Example commit header: `[doc] Improve markdown layout`. Commits may be tagged with multiple tags, but this should be used sparingly. Bugfix commits are tagged with the module to which the fixes are applied. ## Style Guide; Style guidelines make the code more uniform and easier to read.; Generally we stick to the Python style guidelines as outlined in [PEP 8](https://www.python.org/dev/peps/pep-0008/), with some minor modifications outlined below. Have a look at",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md:1038,update,updates,1038,CONTRIBUTING.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md,3,"['configurat', 'install', 'update']","['configuration', 'installation', 'updates']"
Deployability,"ory\> and copy all Φ<sub>Flow</sub> source files into it. With this done, you may compile CUDA kernels for better performance, see below. Finally, Φ<sub>Flow</sub> needs to be added to the Python path.; This can be done in one of multiple ways:. * Marking \<target directory\> as a source directory in your Python IDE.; * Manually adding the cloned directory to the Python path.; * Installing Φ<sub>Flow</sub> using pip: `$ pip install <target directory>/`. This command needs to be rerun after you make changes to the source code. ## Compiling the CUDA Kernels for TensorFlow. The Φ<sub>Flow</sub> source includes several custom CUDA kernels to speed up certain operations when using TensorFlow.; To use these, you must have a [TensorFlow compatible CUDA SDK with cuDNN](https://www.tensorflow.org/install/gpu#software_requirements) as well as a compatible C++ compiler installed.; We strongly recommend using Linux with GCC 7.3.1 (`apt-get install gcc-4.8`) for this.; See the [tested TensorFlow build configurations](https://www.tensorflow.org/install/source#tested_build_configurations). To compile the CUDA kernels for TensorFlow, clone the repository as described above, then run `$ python <target directory>/setup.py tf_cuda`.; This will add the compiled CUDA binaries to the \<target directory\>. ## Verifying the installation; If you have installed Φ<sub>Flow</sub> from source, execute the included `verify.py` script.; ```bash; $ python <Φ-Flow directory>/tests/verify.py; ```; Otherwise, run the following Python code.; ```python; import phi; phi.verify(); ```; Or from the command line:; ```bash; $ python3 -c ""import phi; phi.verify()""; ```; If Φ<sub>Flow</sub> and dependencies are installed correctly, you should see the Φ<sub>Flow</sub> version, followed by additional information on the components at the end of the console output. ### Unit tests. PyTest is required to run the unit tests. To install it, run `$ pip install pytest`. Some unit tests require TensorFlow and PyTorch.; M",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md:3041,configurat,configurations,3041,docs/Installation_Instructions.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md,1,['configurat'],['configurations']
Deployability,"ows/unit-tests.yml/badge.svg); [![PyPI pyversions](https://img.shields.io/pypi/pyversions/phiflow.svg)](https://pypi.org/project/phiflow/); [![PyPI license](https://img.shields.io/pypi/l/phiflow.svg)](https://pypi.org/project/phiflow/); [![Code Coverage](https://codecov.io/gh/tum-pbs/PhiFlow/branch/develop/graph/badge.svg)](https://codecov.io/gh/tum-pbs/PhiFlow/branch/develop/); [![Google Collab Book](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/tum-pbs/PhiFlow/blob/develop/docs/Fluids_Tutorial.ipynb). Φ<sub>Flow</sub> is an open-source simulation toolkit built for optimization and machine learning applications.; It is written mostly in Python and can be used with; [NumPy](https://numpy.org/),; [PyTorch](https://pytorch.org/),; [Jax](https://github.com/google/jax); or [TensorFlow](https://www.tensorflow.org/).; The close integration with these machine learning frameworks allows it to leverage their automatic differentiation functionality,; making it easy to build end-to-end differentiable functions involving both learning models and physics simulations. ## Examples. ### Grids. <table>; <tbody>; <tr>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Fluid_Logo.html""><img src=""docs/figures/examples/grids/Fluid_Logo.gif""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Wake_Flow.html""><img src=""docs/figures/examples/grids/Wake_Flow.png""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Lid_Driven_Cavity.html""><img src=""docs/figures/examples/grids/Lid_Driven_Cavity.png""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Taylor_Green.html""><img src=""docs/figures/examples/grids/Taylor_Green.jpg""></a></td>; </tr>; <tr>; <td align=""center"">Fluid logo</td>; <td align=""center"">Wake flow</td>; <td align=""center"">Lid-driven cavity</td>; <td align=""center"">Taylor-Gr",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md:1006,integrat,integration,1006,README.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md,1,['integrat'],['integration']
Deployability,"tiable pressure</td>; </tr>; </tbody>; </table>. ## Installation. Installation with [pip](https://pypi.org/project/pip/) on [Python 3.6](https://www.python.org/downloads/) and above:; ``` bash; $ pip install phiflow; ```; Install [PyTorch](https://pytorch.org/), [TensorFlow](https://www.tensorflow.org/install) or [Jax](https://github.com/google/jax#installation) in addition to Φ<sub>Flow</sub> to enable machine learning capabilities and GPU execution.; To enable the web UI, also install [Dash](https://pypi.org/project/dash/).; For optimal GPU performance, you may compile the custom CUDA operators, see the [detailed installation instructions](https://tum-pbs.github.io/PhiFlow/Installation_Instructions.html). You can verify your installation by running; ```bash; $ python3 -c ""import phi; phi.verify()""; ```; This will check for compatible PyTorch, Jax and TensorFlow installations as well. ## Features. * Tight integration with PyTorch, Jax and TensorFlow for straightforward neural network training with fully differentiable simulations that can [run on the GPU](https://tum-pbs.github.io/PhiFlow/GPU_Execution.html#enabling-gpu-execution).; * Built-in PDE operations with focus on fluid phenomena, allowing for concise formulation of simulations.; * Flexible, easy-to-use [web interface](https://tum-pbs.github.io/PhiFlow/Web_Interface.html) featuring live visualizations and interactive controls that can affect simulations or network training on the fly.; * Object-oriented, vectorized design for expressive code, ease of use, flexibility and extensibility.; * Reusable simulation code, independent of backend and dimensionality, i.e. the exact same code can run a 2D fluid sim using NumPy and a 3D fluid sim on the GPU using TensorFlow or PyTorch.; * High-level linear equation solver with automated sparse matrix generation. ## 📖 Documentation and Tutorials; [**Documentation Overview**](https://tum-pbs.github.io/PhiFlow/); &nbsp; • &nbsp; [**▶ YouTube Tutorials**](https://www.youtub",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md:9619,integrat,integration,9619,README.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md,1,['integrat'],['integration']
Deployability,"vpsY5nXpQKW15KlOY7xcYGs8tImFJqPFdVn0Lrk63bk6FRfUicJNzhOjdtzZlMlDthscSC18tjwe9RSx7piadoM2yWFyniye25QjxPnMsxj5PROItv7A8Hpd1J4ONCgXf606dC8UlfPfysFPNmD5Ta74j08tqXP1rpX3lX33Bkxo2I3R3/HaoM1xacBPo8Z7BaBQA6CaDhmOTALqMZveOFt1sve5BEBtt8xpRdx5m7vIFpol94TbWns1WzUlUw9RDswrAtELvaQYrpkq3sDw2Hvuvsdwtp0vRzzik/QAjRMVMqaQyVO28kiXU8IuZxoNe8O5/X6hEb8GOleqDeoRxl0uGI7lb37iu4/B57pgQPVztz9Sgy+UIEBB1WZplVCA6XOhmj79thqgv40/meTUU1uaTbt5LtFpunqs5k/xu25xiTTjTmVT/tQLOMnPmbQJoRM9/si84SbyikBeVUqfuMO+r38mvVfZr+p0v6n8nk9OJz013PjwkG7P8QYf4fWBWjbK6w43ipV03zah7uDpcsDxyx1wqF9UavpWRtMJh3EEHA444UhjlpMhA0kZ1yrjHnxhK4e4muIYYsFtnwMHI7vKuJw4vFOi4gQdCon9hwbNeYqow5F5zRFF83lIda73OaEw9LbvKfWL88v5ii2xvpT9DpL60cTFR+pChNBI50gjtM4VBhr65Rs152Sw/c55hIZeP+zkhhbAA+hPo/hksyFR+XqA23JruuXR1PY5o9nxwk4UNE37nXOKXxnxHyFEE7OfEKl34sdIUWNGh1mToRr3z5XRIbMpNF23B5X8qNFw0JlRUc7tUNO7jKLiVOldDQkcjfkh75rVkQvfB0nrsJS0B2QqItw3rcNS/y6EGka1pHWcKuephxV9c4SYoz0ZhBIhehUcJ898/Gi5TfJk6oOAAPS7po8nxaciyZOxNhkrUUlfVKCheghhvSkqmi5a3x4VwwoqkGX3Q0WT3QA2/ZZ2Q37N4YMgxrAm2qT8MapWxOYJlyM9/yhS3zvHF5ma9L1kvi1Cb4qgHt/yOj+CDFRBkL0vl/VUEGjLzR+N94HwrQCUH9T8agiq+Usjru2K9PXJkZCxzOP8sEPTay3VshlW97oUeiQC81MlwlObPH1HT9Zw/PV/30fT+zia/5Uncb0jeCvAPTFsW9xHHRm/IDw/WFyEulxCw7QArJNa86FgHSnRl6EmA54KrIqymezBqqqbjMqXXA7FKhSLP7qZkRd/1BTd/x8=&lt;/diagram&gt;&lt;/mxfile&gt;&quot;}""></div>; <script type=""text/javascript"" src=""https://viewer.diagrams.net/js/viewer-static.min.js""></script>. ### API Documentation. The [API documentation](phi) is generated using [pdoc3](https://pdoc3.github.io/pdoc/).; To manually generate the documentation, add the PhiFlow directory to your Python path and run; ```bash; $ pdoc --html --output-dir docs --force phi; ```; This requires PyTorch, TensorFlow and Jax to be installed, in addition to the standard Φ<sub>Flow</sub> requirements. ### Contributing to Φ<sub>Flow</sub>. Contributions are welcome!. If you have changes to merge, check out our [style guide](https://github.com/tum-pbs/PhiFlow/blob/master/CONTRIBUTING.md) before opening a pull request.; ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/index.md:8060,install,installed,8060,docs/index.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/index.md,1,['install'],['installed']
Deployability,"www.tensorflow.org/install/) or ; [Jax](https://github.com/google/jax); must be registered with your Python installation.; Note that these also require a CUDA installation with *cuDNN* libraries for GPU execution.; We recommend CUDA 11.0 with cuDNN 8. ## Installing Φ<sub>Flow</sub> using pip. *Note*: If you want to use the Φ<sub>Flow</sub> CUDA operations with TensorFlow, you have to build Φ<sub>Flow</sub> from source instead (see below). The following command installs the latest stable version of Φ<sub>Flow</sub> with GUI support using pip.; ```bash; $ pip install phiflow; ```; To install the latest developer version of Φ<sub>Flow</sub>, run; ```bash; $ pip install --upgrade git+https://github.com/tum-pbs/PhiFlow@develop; ```. Install [PyTorch](https://pytorch.org/), [TensorFlow](https://www.tensorflow.org/install) or [Jax](https://github.com/google/jax#installation) in addition to Φ<sub>Flow</sub> to enable machine learning capabilities and GPU execution. To enable the web UI, also install [`dash`](https://pypi.org/project/dash/).; ```bash; $ pip install dash; ```; If you only run Φ<sub>Flow</sub> inside of Jupyter notebooks, dash is not required as Matplotlib will be used for plots and animations by default. ## Installing Φ<sub>Flow</sub> from Source; The Φ<sub>Flow</sub> source additionally contains demo scripts and tests.; In particular, it includes [`tests/verify.py`](https://github.com/tum-pbs/PhiFlow/blob/develop/tests/verify.py),; which tests your configuration. Clone the git repository by running; ```bash; $ git clone https://github.com/tum-pbs/PhiFlow.git <target directory>; ```; This will create the folder \<target directory\> and copy all Φ<sub>Flow</sub> source files into it. With this done, you may compile CUDA kernels for better performance, see below. Finally, Φ<sub>Flow</sub> needs to be added to the Python path.; This can be done in one of multiple ways:. * Marking \<target directory\> as a source directory in your Python IDE.; * Manually adding t",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md:1375,install,install,1375,docs/Installation_Instructions.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md,1,['install'],['install']
Deployability,"xample above) is to use the `ModuleViewer` class.; In the above example, simply replace the line containing the `for` loop with the following line.; ```python; for _ in ModuleViewer().range(100):; ```; This launches a web interface displaying the velocity and pressure fields and allows you to step through the simulation step by step. Slightly more complex examples can be found in ; [marker.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/marker.py) which passively advects an additional marker field,; [smoke_plume.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/smoke_plume.py) which additionally introduces a buoyancy force,; [fluid_logo.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/fluid_logo.py) which adds obstacles to the scene and; [rotating_bar.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/rotating_bar.py) which adds geometry movement. ## Differences to MantaFlow. [MantaFlow](http://mantaflow.com/) is a simulation framework that also offers; deep learning functionality and TensorFlow integration. However, in contrast to; Φ<sub>Flow</sub>, it focuses on fast CPU-based simulations, and does not; support differentiable operators. Nonetheless, it can be useful to, e.g.,; pre-compute simulation data for learning tasks in Φ<sub>Flow</sub>. One central difference of both fluid solvers is that mantaflow grids all have; the same size, while in Φ<sub>Flow</sub>, the staggered velocity grids are; larger by one layer on the positive domain sides ; (also see the [data format section](Scene_Format_Specification.md)). Mantaflow always stores 3-component vectors in its `Vec3`; struct, while Φ<sub>Flow</sub> changes the vectors size with the; dimensionality of the solver. E.g., a 2D solver in mantaflow with a velocity `Vec3 v`; has `v[0]` for X, and `v[1]` for the Y component. `v[2]` for Z is still; defined, but typically set to zero. For a 3D solver in mantaflow, this indexing; scheme does not change. Φ<sub>Flow</sub>, on the other hand, use",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Physics.md:2576,integrat,integration,2576,docs/Physics.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Physics.md,1,['integrat'],['integration']
Deployability,"xamples/optim/Differentiable_Pressure.html""><img src=""docs/figures/examples/optim/Differentiable_Pressure.jpg""></a></td>; </tr>; <tr>; <td align=""center"">Close packing</td>; <td align=""center"">Learning Φ(x,y)</td>; <td align=""center"">Differentiable pressure</td>; </tr>; </tbody>; </table>. ## Installation. Installation with [pip](https://pypi.org/project/pip/) on [Python 3.6](https://www.python.org/downloads/) and above:; ``` bash; $ pip install phiflow; ```; Install [PyTorch](https://pytorch.org/), [TensorFlow](https://www.tensorflow.org/install) or [Jax](https://github.com/google/jax#installation) in addition to Φ<sub>Flow</sub> to enable machine learning capabilities and GPU execution.; To enable the web UI, also install [Dash](https://pypi.org/project/dash/).; For optimal GPU performance, you may compile the custom CUDA operators, see the [detailed installation instructions](https://tum-pbs.github.io/PhiFlow/Installation_Instructions.html). You can verify your installation by running; ```bash; $ python3 -c ""import phi; phi.verify()""; ```; This will check for compatible PyTorch, Jax and TensorFlow installations as well. ## Features. * Tight integration with PyTorch, Jax and TensorFlow for straightforward neural network training with fully differentiable simulations that can [run on the GPU](https://tum-pbs.github.io/PhiFlow/GPU_Execution.html#enabling-gpu-execution).; * Built-in PDE operations with focus on fluid phenomena, allowing for concise formulation of simulations.; * Flexible, easy-to-use [web interface](https://tum-pbs.github.io/PhiFlow/Web_Interface.html) featuring live visualizations and interactive controls that can affect simulations or network training on the fly.; * Object-oriented, vectorized design for expressive code, ease of use, flexibility and extensibility.; * Reusable simulation code, independent of backend and dimensionality, i.e. the exact same code can run a 2D fluid sim using NumPy and a 3D fluid sim on the GPU using TensorFlow or PyTorc",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md:9436,install,installation,9436,README.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md,1,['install'],['installation']
Energy Efficiency,"MIT License. Copyright (c) 2019 TUM Physics-based Simulation. Permission is hereby granted, free of charge, to any person obtaining a copy; of this software and associated documentation files (the ""Software""), to deal; in the Software without restriction, including without limitation the rights; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell; copies of the Software, and to permit persons to whom the Software is; furnished to do so, subject to the following conditions:. The above copyright notice and this permission notice shall be included in all; copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE; SOFTWARE.; ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/LICENSE.txt:100,charge,charge,100,LICENSE.txt,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/LICENSE.txt,1,['charge'],['charge']
Energy Efficiency,"trapolation determines the values outside the region in which the field is sampled.; It takes the place of the boundary condition (e.g. Neumann / Dirichlet) which would be used in a mathematical formulation. ### Extrapolations vs Boundary Conditions. While both extrapolation and traditional boundary conditions fill the same role, there are a couple of differences between the two.; Boundary conditions determine the field values (or a spatial derivative thereof) at the boundary of a volume, i.e. they cover an n-1 dimensional region.; Extrapolations, on the other hand, cover everything outside the sampled volume, i.e. an n-dimensional region. Numerical methods working directly with traditional boundary conditions have to treat the boundaries separately (e.g. different stencils).; With extrapolations, the same computations can typically be achieved by first padding the field and then applying a single operation everywhere.; This makes low-order methods more efficient, especially on GPUs or TPUs where fewer kernels need to be launched, reducing the overhead.; Also, user code typically is more concise and expressive with extrapolations. ### Standard Extrapolations. Standard extrapolation types are listed [here](phi/math/extrapolation.html#header-variables). * `PERIODIC` copies the values from the opposite side.; * `BOUNDARY` copies the closest value from the grid. For the boundary condition *∂u/∂x = 0*, this is accurate to second order.; * `ConstantExtrapolation`, such as `ZERO` or `ONE` fill the outside with a constant value.; For a boundary condition *u=c*, the first padded value is exact and values padded further out are accurate to first order. Custom extrapolations can be implemented by extending the; [`Extrapolation`](phi/math/extrapolation.html#phiml.math.extrapolation.Extrapolation) class.; Extrapolations also support a limited set of arithmetic operations, e.g. `PERIODIC * ZERO = ZERO`. ### Specifying Extrapolations per Side. Different extrapolation types can be c",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Fields.md:5928,efficient,efficient,5928,docs/Fields.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Fields.md,1,['efficient'],['efficient']
Integrability,"# Console Interface; The console interface enables interaction with Python scripts through the command line. Launch via `gui='console'` in [`view()`](phi/vis/index.html#phi.vis.view) or [`show()`](phi/vis/index.html#phi.vis.show). The console interface runs on a different thread than the main Python script. ## Commands. Multiple commands can be chained using `;` to separate them. Actions are registered as new commands.; E.g. if an action `my_function()` is. ### General Commands. `help` Prints available commands. `status` Prints the current status. `controls` Prints a list of available controls and their values. `actions` Prints a list of available actions. ### Plotting. `show` Plots the first two fields. `show <fields>`. `show <field>.<component>` where `<component>` must be one of `x`, `y`, `z`, `abs`. ### Control Execution. `play` Runs all loop iterations until paused. `play <frames>` Runs a certain number of iterations. Has no effect if already playing. `pause` Pauses loop execution after the current iteration finishes. `step` Progresses the loop by one iteration. `<control_name> = <value>` Sets a control value. `exit` Finishes the current loop iteration and exits the program. `kill` Immediately stops the Python process. ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/ConsoleUI.md:33,interface,interface,33,docs/ConsoleUI.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/ConsoleUI.md,2,['interface'],['interface']
Integrability,"# Differentiable Geometry. The module [phi.geom](phi/geom) integrates geometric shapes and supports differentiable volumes. The class [`Geometry`](phi/geom/#phi.geom.Geometry) serves as a base for all geometry objects, such as boxes or spheres. All properties of `Geometry` support the use of batch, instance and spatial dimensions.; The corresponding values take the type of [Φ-tensors](./Math.html).; This allows a single `Geometry` object to describe a collection of shapes with varying properties. Important properties:. * `.shape: Shape` all batch and spatial dimensions; * `.rank: int` number of spatial dimensions the geometry lives in; * `.center: Tensor` center points of shape (`*geometry.shape`, `vector`). Important methods:. * `lies_inside(location)` tests if the given points lie inside the geometry; * `approximate_signed_distance(location)` computes the distance of the given points from the surface; * `approximate_fraction_inside(Geometry)` computes the overlap between two geometries. Geometries can be checked for equality using `==` and `!=`.; They should generally be treated as immutable. ## Basic shapes. All built-in basic geometry types support n-dimensional spaces. [`Spheres`](phi/geom/#phi.geom.Sphere) has two defining properties:. * `.center: Tensor` has a single channel dimension called 'vector'.; * `.radius: Tensor` has no channel dimension. Boxes come in multiple variants:. * [`Box`](phi/geom/#phi.geom.Box) stores the lower and upper corner of the box.; * `Cuboid` stores the center position and half-size.; * [`UniformGrid`](phi/geom/#phi.geom.UniformGrid) is similar to `Cuboid` but its spatial dimensions are guaranteed to span a regular grid. [`Points`](phi/geom/#phi.geom.Point) have zero volume and are only characterized by their location. ## Transformations and Operations. Translation: `geometry.shift(delta)`. Rotation: `geometry.rotate(angle)`. Union: `union(geometries)`. Intersection: `intersection(geometries)`. Geometries can be inverted using the ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Geometry.md:59,integrat,integrates,59,docs/Geometry.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Geometry.md,1,['integrat'],['integrates']
Integrability,"# Fields. The [`phi.field`](phi/field/) module contains various data structures - such as grids or point clouds - ; and provides a common interface to access them.; This allows the physics to be independent of the underlying data structure to some degree. ## Abstract classes. The [`Field`](phi/field/#phi.field.Field) class is the base class that all fields extend.; It represents a physical quantity `F(x)` that defines a value at every point `x` in n-dimensional space.; The values of `F(x)` may have any number of dimensions, described by the channel dimensions of the Field.; Scalar fields have no channel dimensions, vector fields have one, etc. Important properties:. * `.shape: Shape` contains batch and spatial dimensions from ; * `.spatial_rank: int = len(shape.spatial)` is the dimensionality of physical space. Important methods. * `sample_at(Tensor) -> Tensor` computes the field values at the given points; * `sample_in(Geometry) -> Tensor` computes the field values in the given volumes; * `at(SampledField) -> SampledField` returns a field with the same sample points as the specified representation.; * `unstack(dim) -> tuple[Field]` slices the field along a dimension. Fields implement many mathematical operators, e.g. `+, -, * , /, **`.; The shift operator `@` calls the `at()` method on the left field. The class [`SampledField`](phi/field/#phi.field.SampledField) extends `Field` to form the basis for all fields that explicitly store their data.; The most important sampled fields are ; [`CenteredGrid`](phi/field/#phi.field.CenteredGrid), ; [`StaggeredGrid`](phi/field/#phi.field.StaggeredGrid) and ; [`PointCloud`](phi/field/#phi.field.PointCloud). Important properties:. * `.values: Tensor` data that is used in sampling; * `.geometry: Geometry` sample points as finite volumes; * `.points: Tensor` center points of `elements`; * `.extrapolation: Extrapolation` determines how values outside the region covered by `values` are determined. Non-sampled fields inherit from `Ana",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Fields.md:138,interface,interface,138,docs/Fields.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Fields.md,1,['interface'],['interface']
Integrability,"# PhiFlow. [**Homepage**](https://github.com/tum-pbs/PhiFlow); &nbsp;&nbsp;&nbsp; [**Documentation**](https://tum-pbs.github.io/PhiFlow/); &nbsp;&nbsp;&nbsp; [**API**](https://tum-pbs.github.io/PhiFlow/phi); &nbsp;&nbsp;&nbsp; [**Demos**](https://github.com/tum-pbs/PhiFlow/tree/master/demos); &nbsp;&nbsp;&nbsp; [<img src=""https://www.tensorflow.org/images/colab_logo_32px.png"" height=16> **Fluids Tutorial**](https://colab.research.google.com/github/tum-pbs/PhiFlow/blob/develop/docs/Fluids_Tutorial.ipynb#offline=true&sandboxMode=true); &nbsp;&nbsp;&nbsp; [<img src=""https://www.tensorflow.org/images/colab_logo_32px.png"" height=16> **Playground**](https://colab.research.google.com/drive/1zBlQbmNguRt-Vt332YvdTqlV4DBcus2S#offline=true&sandboxMode=true). PhiFlow is an open-source simulation toolkit built for optimization and machine learning applications.; It is written mostly in Python and can be used with NumPy, TensorFlow, Jax or PyTorch.; The close integration with machine learning frameworks allows it to leverage their automatic differentiation functionality,; making it easy to build end-to-end differentiable functions involving both learning models and physics simulations. See the [installation Instructions](https://tum-pbs.github.io/PhiFlow/Installation_Instructions.html) on how to compile the optional custom CUDA operations.; ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Package_Info.md:960,integrat,integration,960,docs/Package_Info.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Package_Info.md,1,['integrat'],['integration']
Integrability,"# Visualization. ## Interactive User Interface; Φ<sub>Flow</sub> provides interactive user interfaces for live visualization and control.; They allow you to see neural network predictions as the network is being trained or view training data while it is being generated. The following interfaces are currently available:. - [`dash`](Web_Interface.md) web interface hosts a web server; - [`console`](ConsoleUI.md) for command line applications. ### Viewing Data; The primary way to launch an interactive user interface is through; [`view()`](phi/vis/index.html#phi.vis.view).; This function takes a number of `SampledField` instances or variable names and shows them in a new UI.; ```python; from phi.flow import *. data = Domain(x=32, y=32).scalar_grid(Noise()); view(data, gui=None); ```; With `gui=None` (default) an appropriate interface is automatically selected based on the environment and installed packages.; Otherwise, the type of interface can be specified with `gui='dash'` or `gui='console'`. ### Batch Selection; When the viewed data are batched, the GUI will try to plot all examples at once which may result in crowded plots.; This can be avoided using the `select` keyword argument.; It specifies dimensions along which a single slice is displayed, e.g.; ```python; data = Domain(x=32, y=32).scalar_grid(Noise(batch=10, time=33)); view(batched_data, select='batch,time'); ```; For each dimension, a slider will be added to the UI for the user to select which slice to display. ### Controlling Loop Execution; The GUI can be used to let the user control loop execution.; To do this, the user code needs to iterate over ; [`Viewer.range()`](phi/vis/index.html#phi.vis.Viewer.range).; ```python; data = Domain(x=32, y=32).scalar_grid(Noise()); for _ in view(data, play=False).range(10):; data = physics(data); ```; Once the loop is encountered, the execution controls of the GUI can be used to pause execution, run single iterations or break the loop.; With `play=False`, execution stops ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Visualization.md:91,interface,interfaces,91,docs/Visualization.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Visualization.md,6,['interface'],"['interface', 'interfaces']"
Integrability,"# Φ<sub>Flow</sub> Web Interface. ![Gui](figures/WebInterface.png). Φ<sub>Flow</sub> provides an interactive web interface that can display 1D, 2D and 3D data.; This GUI uses [Dash](https://plotly.com/dash/) to host a website on a local port.; Opening the website remotely may require port forwarding, e.g. via SSH. The Dash GUI is the default user interface for python modules, i.e. when running a `.py` file as the main module.; It can be specifically selected by setting `gui='dash'` in [`view()`](phi/vis/index.html#phi.vis.view) or [`show()`](phi/vis/index.html#phi.vis.show). ## Tabs & Features. The web interface consists of multiple tabs (web pages) which can be accessed at the upper left corner of each page. - **Home** shows the title and description of the app. It allows the user to choose one field to view and to start/pause the app or step a single frame. Additionally all app-specific controls are shown at the bottom.; - **Side-by-Side** is similar to Home but shows two fields at a time instead of one.; - **Info** displays additional information about the current session such as file paths and run time.; - **Log** displays the complete application log.; - **Φ Board** contains benchmarking functionality. For TensorFlow apps it also allows the user to launch TensorBoard and run the TensorFlow profiler.; - **Help** refers to this page. Tips & Tricks:. - You can run a specified number of frames by entering the number in the text box next to the 'Step' button. If you put a '*' before the number, it is multiplied by the app's `stride` value which can be found in the `info` tab. ## Frame Rate and Refresh Rate. The web interface provides a *Refresh rate* control above the field viewer.; This value describes how often the diagrams in the browser are updated.; It is independent of the framerate specified in `view()` which defines how quickly the user code is executed. ## Configuration. The `show` method supports additional keyword arguments to configure how the App content",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Web_Interface.md:113,interface,interface,113,docs/Web_Interface.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Web_Interface.md,3,['interface'],['interface']
Integrability,"; The following script runs 100 steps of an inviscid fluid simulation.; ```python; from phi.flow import *. DOMAIN = Domain(x=64, y=80, boundaries=CLOSED, bounds=Box(x=100, y=100)); velocity = DOMAIN.staggered_grid(Noise()); pressure = DOMAIN.scalar_grid(0); for _ in range(100):; velocity = advect.semi_lagrangian(velocity, velocity, dt=1); velocity, pressure, iterations, _ = fluid.make_incompressible(velocity, DOMAIN, pressure_guess=pressure); ```; Note that `advect.semi_lagrangian` and `fluid.make_incompressible` are standard functions in Φ<sub>Flow</sub>, contained in the standard import. ## Visualizing the simulation. The simplest way to visualize a simple simulation with module-level variables (`velocity` and `pressure` in the example above) is to use the `ModuleViewer` class.; In the above example, simply replace the line containing the `for` loop with the following line.; ```python; for _ in ModuleViewer().range(100):; ```; This launches a web interface displaying the velocity and pressure fields and allows you to step through the simulation step by step. Slightly more complex examples can be found in ; [marker.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/marker.py) which passively advects an additional marker field,; [smoke_plume.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/smoke_plume.py) which additionally introduces a buoyancy force,; [fluid_logo.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/fluid_logo.py) which adds obstacles to the scene and; [rotating_bar.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/rotating_bar.py) which adds geometry movement. ## Differences to MantaFlow. [MantaFlow](http://mantaflow.com/) is a simulation framework that also offers; deep learning functionality and TensorFlow integration. However, in contrast to; Φ<sub>Flow</sub>, it focuses on fast CPU-based simulations, and does not; support differentiable operators. Nonetheless, it can be useful to, e.g.,; pre-compute simulation data for ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Physics.md:1757,interface,interface,1757,docs/Physics.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Physics.md,1,['interface'],['interface']
Integrability,"ath.; * Installing Φ<sub>Flow</sub> using pip: `$ pip install <target directory>/`. This command needs to be rerun after you make changes to the source code. ## Compiling the CUDA Kernels for TensorFlow. The Φ<sub>Flow</sub> source includes several custom CUDA kernels to speed up certain operations when using TensorFlow.; To use these, you must have a [TensorFlow compatible CUDA SDK with cuDNN](https://www.tensorflow.org/install/gpu#software_requirements) as well as a compatible C++ compiler installed.; We strongly recommend using Linux with GCC 7.3.1 (`apt-get install gcc-4.8`) for this.; See the [tested TensorFlow build configurations](https://www.tensorflow.org/install/source#tested_build_configurations). To compile the CUDA kernels for TensorFlow, clone the repository as described above, then run `$ python <target directory>/setup.py tf_cuda`.; This will add the compiled CUDA binaries to the \<target directory\>. ## Verifying the installation; If you have installed Φ<sub>Flow</sub> from source, execute the included `verify.py` script.; ```bash; $ python <Φ-Flow directory>/tests/verify.py; ```; Otherwise, run the following Python code.; ```python; import phi; phi.verify(); ```; Or from the command line:; ```bash; $ python3 -c ""import phi; phi.verify()""; ```; If Φ<sub>Flow</sub> and dependencies are installed correctly, you should see the Φ<sub>Flow</sub> version, followed by additional information on the components at the end of the console output. ### Unit tests. PyTest is required to run the unit tests. To install it, run `$ pip install pytest`. Some unit tests require TensorFlow and PyTorch.; Make sure, both are installed before running the tests. Execute `$ pytest <target directory>/tests/commit` to run the normal tests.; The result of this should match the automated tests run by Travis CI which are linked on the main GitHub page. You can run the additional tests; ```bash; $ pytest <target directory>/tests/gpu; $ pytest <target directory>/tests/release; ```; ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md:3717,depend,dependencies,3717,docs/Installation_Instructions.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md,1,['depend'],['dependencies']
Integrability,"ccessed at the upper left corner of each page. - **Home** shows the title and description of the app. It allows the user to choose one field to view and to start/pause the app or step a single frame. Additionally all app-specific controls are shown at the bottom.; - **Side-by-Side** is similar to Home but shows two fields at a time instead of one.; - **Info** displays additional information about the current session such as file paths and run time.; - **Log** displays the complete application log.; - **Φ Board** contains benchmarking functionality. For TensorFlow apps it also allows the user to launch TensorBoard and run the TensorFlow profiler.; - **Help** refers to this page. Tips & Tricks:. - You can run a specified number of frames by entering the number in the text box next to the 'Step' button. If you put a '*' before the number, it is multiplied by the app's `stride` value which can be found in the `info` tab. ## Frame Rate and Refresh Rate. The web interface provides a *Refresh rate* control above the field viewer.; This value describes how often the diagrams in the browser are updated.; It is independent of the framerate specified in `view()` which defines how quickly the user code is executed. ## Configuration. The `show` method supports additional keyword arguments to configure how the App contents are displayed. The `display` parameter defines which fields are displayed initially, e.g. `display='Density'` or `display=('Density', 'Velocity')`. ### Further configuration parameters. | Parameter | Description | Default |; |----------------------|---------------------------------------------------------------------------------------------------|---------|; | external_web_server | Whether an external tool is used to host the Dash server. If False, launches a new web server. | False |; | arrow_origin | Which part of the arrow is centered at the position of the field. One of 'base', 'center', 'tip'. | 'tip' |; | max_arrow_resolution | Downscale grids to have no ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Web_Interface.md:1643,interface,interface,1643,docs/Web_Interface.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Web_Interface.md,1,['interface'],['interface']
Integrability,"e_plume.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/smoke_plume.py) which additionally introduces a buoyancy force,; [fluid_logo.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/fluid_logo.py) which adds obstacles to the scene and; [rotating_bar.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/rotating_bar.py) which adds geometry movement. ## Differences to MantaFlow. [MantaFlow](http://mantaflow.com/) is a simulation framework that also offers; deep learning functionality and TensorFlow integration. However, in contrast to; Φ<sub>Flow</sub>, it focuses on fast CPU-based simulations, and does not; support differentiable operators. Nonetheless, it can be useful to, e.g.,; pre-compute simulation data for learning tasks in Φ<sub>Flow</sub>. One central difference of both fluid solvers is that mantaflow grids all have; the same size, while in Φ<sub>Flow</sub>, the staggered velocity grids are; larger by one layer on the positive domain sides ; (also see the [data format section](Scene_Format_Specification.md)). Mantaflow always stores 3-component vectors in its `Vec3`; struct, while Φ<sub>Flow</sub> changes the vectors size with the; dimensionality of the solver. E.g., a 2D solver in mantaflow with a velocity `Vec3 v`; has `v[0]` for X, and `v[1]` for the Y component. `v[2]` for Z is still; defined, but typically set to zero. For a 3D solver in mantaflow, this indexing; scheme does not change. Φ<sub>Flow</sub>, on the other hand, uses a two component numpy array for the; velocity component of a 2D solver, where the first or last index denotes X, depending on the configuration.; This scheme is closer to the typical ordering of numpy arrays, and simplifies the; implementation of operators that are agnostic of the solver dimension. As a side effect of this indexing, gravity is defined to act along the last or first; dimension in Φ<sub>Flow</sub>, i.e., Z in 3D, and Y in 2D.; In contrast, gravity always acts along the Y direction in Mantaflow.; ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Physics.md:3651,depend,depending,3651,docs/Physics.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Physics.md,1,['depend'],['depending']
Integrability,"ion={PMLR}; }; ```. ## Publications. We will upload a whitepaper, soon.; In the meantime, please cite the ICLR 2020 paper. * [Learning to Control PDEs with Differentiable Physics](https://ge.in.tum.de/publications/2020-iclr-holl/), *Philipp Holl, Vladlen Koltun, Nils Thuerey*, ICLR 2020.; * [Solver-in-the-Loop: Learning from Differentiable Physics to Interact with Iterative PDE-Solvers](https://arxiv.org/abs/2007.00016), *Kiwon Um, Raymond Fei, Philipp Holl, Robert Brand, Nils Thuerey*, NeurIPS 2020.; * [Φ<sub>Flow</sub>: A Differentiable PDE Solving Framework for Deep Learning via Physical Simulations](https://montrealrobotics.ca/diffcvgp/), *Nils Thuerey, Kiwon Um, Philipp Holl*, DiffCVGP workshop at NeurIPS 2020.; * [Physics-based Deep Learning](https://physicsbaseddeeplearning.org/intro.html) (book), *Nils Thuerey, Philipp Holl, Maximilian Mueller, Patrick Schnell, Felix Trost, Kiwon Um*, DiffCVGP workshop at NeurIPS 2020.; * [Half-Inverse Gradients for Physical Deep Learning](https://arxiv.org/abs/2203.10131), *Patrick Schnell, Philipp Holl, Nils Thuerey*, ICLR 2022.; * [Scale-invariant Learning by Physics Inversion](https://arxiv.org/abs/2109.15048), *Philipp Holl, Vladlen Koltun, Nils Thuerey*, NeurIPS 2022. ## Benchmarks & Data Sets. Φ<sub>Flow</sub> has been used in the creation of various public data sets, such as; [PDEBench](https://github.com/pdebench/PDEBench) and [PDEarena](https://microsoft.github.io/pdearena/). [See more packages that use Φ<sub>Flow</sub>](https://github.com/tum-pbs/PhiFlow/network/dependents). ## 🕒 Version History. The [Version history](https://github.com/tum-pbs/PhiFlow/releases) lists all major changes since release.; The releases are also listed on [PyPI](https://pypi.org/project/phiflow/). ## 👥 Contributions. Contributions are welcome! Check out [this document](CONTRIBUTING.md) for guidelines. ## Acknowledgements. This work is supported by the ERC Starting Grant realFlow (StG-2015-637014) and the Intel Intelligent Systems Lab.; ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md:15506,depend,dependents,15506,README.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md,1,['depend'],['dependents']
Integrability,"of the cell with same index (depth=z+2, height=y+2, width=x+2), the top rows are invalid.; - Φ<sub>Flow</sub>: The arrays of centered fields store only valid values (depth=z, height=y, width=x). Staggered grids store the component at the lower face of the cell with same index, the top-most rows hold partly invalid values (depth=z+1, height=y+1, width=x+1). The filename of an array at a certain frame is:. ```bash; <Property>_<frame>.npz; ```. The property name starts with an upper case letter and the frame index is padded by zeros forming a 6-digit string. Examples: `Density_000000.npz`, `Velocity_000042.npz`. ## Scenes. A scene is a directory that directly contains all arrays associated with the simulation.; Its name starts with `sim_` followed by a six-digit scene index. In addition to arrays, scenes store properties of the simulation in a JSON file called `description.json`.; This file describes both simulation properties and the origin of the data.; It can store any number of properties, depending on the application. The following content was created by running the [simpleplume.py](../demos/smoke_plume.py) demo and can be used as a reference. ```json; {; ""instigator"": ""App"",; ""traits"": [],; ""app"": ""smoke_plume.py"",; ""app_path"": ""~/phiflow/demos/smoke_plume.py"",; ""name"": ""Simpleplume"",; ""description"": """",; ""all_fields"": [; ""Density"",; ""Velocity""; ],; ""actions"": [],; ""controls"": [],; ""summary"": ""Simpleplume"",; ""time_of_writing"": 0,; ""world"": {; ""age"": 0.0,; ""states"": [; {; ""age"": 0.0,; ""domain"": {; ""grid"": {; ""dimensions"": [; 80,; 64; ],; ""box"": {; ""origin"": [; 0,; 0; ],; ""size"": [; 80,; 64; ],; ""type"": ""Box"",; ""module"": ""phi.physics.geom""; },; ""type"": ""Grid"",; ""module"": ""phi.physics.geom""; },; ""boundaries"": {; ""solid"": true,; ""friction"": 0.0,; ""extrapolate_fluid"": true,; ""global_velocity"": 0.0,; ""local_velocity"": 0.0,; ""type"": ""Material"",; ""module"": ""phi.physics.material""; },; ""type"": ""Domain"",; ""module"": ""phi.physics.domain""; },; ""gravity"": -9.81,; ""buoyancy_fact",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Scene_Format_Specification.md:2631,depend,depending,2631,docs/Scene_Format_Specification.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Scene_Format_Specification.md,1,['depend'],['depending']
Integrability,"ows/unit-tests.yml/badge.svg); [![PyPI pyversions](https://img.shields.io/pypi/pyversions/phiflow.svg)](https://pypi.org/project/phiflow/); [![PyPI license](https://img.shields.io/pypi/l/phiflow.svg)](https://pypi.org/project/phiflow/); [![Code Coverage](https://codecov.io/gh/tum-pbs/PhiFlow/branch/develop/graph/badge.svg)](https://codecov.io/gh/tum-pbs/PhiFlow/branch/develop/); [![Google Collab Book](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/tum-pbs/PhiFlow/blob/develop/docs/Fluids_Tutorial.ipynb). Φ<sub>Flow</sub> is an open-source simulation toolkit built for optimization and machine learning applications.; It is written mostly in Python and can be used with; [NumPy](https://numpy.org/),; [PyTorch](https://pytorch.org/),; [Jax](https://github.com/google/jax); or [TensorFlow](https://www.tensorflow.org/).; The close integration with these machine learning frameworks allows it to leverage their automatic differentiation functionality,; making it easy to build end-to-end differentiable functions involving both learning models and physics simulations. ## Examples. ### Grids. <table>; <tbody>; <tr>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Fluid_Logo.html""><img src=""docs/figures/examples/grids/Fluid_Logo.gif""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Wake_Flow.html""><img src=""docs/figures/examples/grids/Wake_Flow.png""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Lid_Driven_Cavity.html""><img src=""docs/figures/examples/grids/Lid_Driven_Cavity.png""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Taylor_Green.html""><img src=""docs/figures/examples/grids/Taylor_Green.jpg""></a></td>; </tr>; <tr>; <td align=""center"">Fluid logo</td>; <td align=""center"">Wake flow</td>; <td align=""center"">Lid-driven cavity</td>; <td align=""center"">Taylor-Gr",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md:1006,integrat,integration,1006,README.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md,1,['integrat'],['integration']
Integrability,"tiable pressure</td>; </tr>; </tbody>; </table>. ## Installation. Installation with [pip](https://pypi.org/project/pip/) on [Python 3.6](https://www.python.org/downloads/) and above:; ``` bash; $ pip install phiflow; ```; Install [PyTorch](https://pytorch.org/), [TensorFlow](https://www.tensorflow.org/install) or [Jax](https://github.com/google/jax#installation) in addition to Φ<sub>Flow</sub> to enable machine learning capabilities and GPU execution.; To enable the web UI, also install [Dash](https://pypi.org/project/dash/).; For optimal GPU performance, you may compile the custom CUDA operators, see the [detailed installation instructions](https://tum-pbs.github.io/PhiFlow/Installation_Instructions.html). You can verify your installation by running; ```bash; $ python3 -c ""import phi; phi.verify()""; ```; This will check for compatible PyTorch, Jax and TensorFlow installations as well. ## Features. * Tight integration with PyTorch, Jax and TensorFlow for straightforward neural network training with fully differentiable simulations that can [run on the GPU](https://tum-pbs.github.io/PhiFlow/GPU_Execution.html#enabling-gpu-execution).; * Built-in PDE operations with focus on fluid phenomena, allowing for concise formulation of simulations.; * Flexible, easy-to-use [web interface](https://tum-pbs.github.io/PhiFlow/Web_Interface.html) featuring live visualizations and interactive controls that can affect simulations or network training on the fly.; * Object-oriented, vectorized design for expressive code, ease of use, flexibility and extensibility.; * Reusable simulation code, independent of backend and dimensionality, i.e. the exact same code can run a 2D fluid sim using NumPy and a 3D fluid sim on the GPU using TensorFlow or PyTorch.; * High-level linear equation solver with automated sparse matrix generation. ## 📖 Documentation and Tutorials; [**Documentation Overview**](https://tum-pbs.github.io/PhiFlow/); &nbsp; • &nbsp; [**▶ YouTube Tutorials**](https://www.youtub",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md:9619,integrat,integration,9619,README.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md,1,['integrat'],['integration']
Integrability,"tps://youtu.be/aNigTqklCBc); * [Learning to Throw](https://tum-pbs.github.io/PhiFlow/Learn_to_Throw_Tutorial.html). #### Advanced. * [What to Avoid](Known_Issues.html): How to keep your code compatible with PyTorch, TensorFlow and Jax. ### Module Documentation. | Module API | Documentation |; |--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|; | [phi.vis](phi/vis) | [Visualization](Visualization.md): Plotting, interactive user interfaces <br /> [Dash](Web_Interface.md): Web interface <br /> [Console](ConsoleUI.md): Command line interface |; | [phi.physics](phi/physics) <br /> [phi.physics.advect](phi/physics/advect.html) <br /> [phi.physics.fluid](phi/physics/fluid.html) <br /> [phi.physics.diffuse](phi/physics/diffuse.html) | [Fluids Tutorial](Fluids_Tutorial.html): Introduction to core classes and fluid-related functions. <br /> [Higher-order schemes](Taylor_Green_Comparison.html): Compares the accuracy of various numerial schemes. <br /> [Overview](Physics.md): Domains, built-in physics functions <br /> [Functions for Fluid Simulations](Fluid_Simulation.html): Advection, projection, diffusion |; | [phi.field](phi/field) | [Overview](Fields.md): Grids, particles <br /> [Staggered Grids](Staggered_Grids.html): Data layout, usage <br /> [Reading and Writing Simulation Data](Reading_and_Writing_Data.md) <br /> [Scene Format Specification](Scene_Format_Specification.md): Directory layout, file format |; | [phi.geo",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/index.md:2202,interface,interfaces,2202,docs/index.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/index.md,1,['interface'],['interfaces']
Integrability,"tum-pbs.github.io/PhiFlow/Learn_to_Throw_Tutorial.html). #### Advanced. * [What to Avoid](Known_Issues.html): How to keep your code compatible with PyTorch, TensorFlow and Jax. ### Module Documentation. | Module API | Documentation |; |--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|; | [phi.vis](phi/vis) | [Visualization](Visualization.md): Plotting, interactive user interfaces <br /> [Dash](Web_Interface.md): Web interface <br /> [Console](ConsoleUI.md): Command line interface |; | [phi.physics](phi/physics) <br /> [phi.physics.advect](phi/physics/advect.html) <br /> [phi.physics.fluid](phi/physics/fluid.html) <br /> [phi.physics.diffuse](phi/physics/diffuse.html) | [Fluids Tutorial](Fluids_Tutorial.html): Introduction to core classes and fluid-related functions. <br /> [Higher-order schemes](Taylor_Green_Comparison.html): Compares the accuracy of various numerial schemes. <br /> [Overview](Physics.md): Domains, built-in physics functions <br /> [Functions for Fluid Simulations](Fluid_Simulation.html): Advection, projection, diffusion |; | [phi.field](phi/field) | [Overview](Fields.md): Grids, particles <br /> [Staggered Grids](Staggered_Grids.html): Data layout, usage <br /> [Reading and Writing Simulation Data](Reading_and_Writing_Data.md) <br /> [Scene Format Specification](Scene_Format_Specification.md): Directory layout, file format |; | [phi.geom](phi/geom) | [Overview](Geometry.md): Differentiable Geo",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/index.md:2250,interface,interface,2250,docs/index.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/index.md,1,['interface'],['interface']
Integrability,"ty); models a vortex-like velocity field around one or multiple points.; This is useful for sampling the velocity of rotating objects. ## Resampling Fields; Given `val: Field` and `representation: SampledField` with different values structures or different sampling points, ; they can be made compatible using [`at()`](phi/field/#phi.field.Field.at) or `@`.; ```python; val.at(representation, keep_boundary=False) # resamples val at the elements of representation; val @ representation # same as above; ```; These functions return a `Field` of the same type as `representation`.; If they are already sampled at the same elements, the above operations simply return `val`.; Φ<sub>Flow</sub> may choose optimized code paths for specific combinations, such as two grids with equal sample point spacing `dx`. When resampling staggered grids with `keep_boundary=True`, the sample points of the resampled field may be different from `representation`.; This is because the sample points and value tensor shape of staggered grids depends on the extrapolation type. Additionally, there are two functions for sampling field values at given locations. * [`sample`](phi/field/#phi.field.sample) samples the field values at the location of a single geometry or geometry batch.; * [`reduce_sample`](phi/field/#phi.field.reduce_sample) differs from `sample` in that the geometry here describes; staggered locations at which the individual channel components of the field are stored.; For centered grids, `sample` and `reduce_sample` are equal. ## Extrapolations. Sampled fields, such as [`CenteredGrid`](phi/field/#phi.field.CenteredGrid),; [`StaggeredGrid`](phi/field/#phi.field.StaggeredGrid); [`PointCloud`](phi/field/#phi.field.PointCloud) all have an `extrapolation` member variable of type ; [`Extrapolation`](phi/math/extrapolation.html#phiml.math.extrapolation.Extrapolation).; The extrapolation determines the values outside the region in which the field is sampled.; It takes the place of the boundary con",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Fields.md:4105,depend,depends,4105,docs/Fields.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Fields.md,1,['depend'],['depends']
Integrability,"utorial.html). #### Advanced. * [What to Avoid](Known_Issues.html): How to keep your code compatible with PyTorch, TensorFlow and Jax. ### Module Documentation. | Module API | Documentation |; |--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|; | [phi.vis](phi/vis) | [Visualization](Visualization.md): Plotting, interactive user interfaces <br /> [Dash](Web_Interface.md): Web interface <br /> [Console](ConsoleUI.md): Command line interface |; | [phi.physics](phi/physics) <br /> [phi.physics.advect](phi/physics/advect.html) <br /> [phi.physics.fluid](phi/physics/fluid.html) <br /> [phi.physics.diffuse](phi/physics/diffuse.html) | [Fluids Tutorial](Fluids_Tutorial.html): Introduction to core classes and fluid-related functions. <br /> [Higher-order schemes](Taylor_Green_Comparison.html): Compares the accuracy of various numerial schemes. <br /> [Overview](Physics.md): Domains, built-in physics functions <br /> [Functions for Fluid Simulations](Fluid_Simulation.html): Advection, projection, diffusion |; | [phi.field](phi/field) | [Overview](Fields.md): Grids, particles <br /> [Staggered Grids](Staggered_Grids.html): Data layout, usage <br /> [Reading and Writing Simulation Data](Reading_and_Writing_Data.md) <br /> [Scene Format Specification](Scene_Format_Specification.md): Directory layout, file format |; | [phi.geom](phi/geom) | [Overview](Geometry.md): Differentiable Geometry |. ### Core Classes. <div class=""mxg",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/index.md:2305,interface,interface,2305,docs/index.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/index.md,1,['interface'],['interface']
Integrability,"w.tensorflow.org/install) or [Jax](https://github.com/google/jax#installation) in addition to Φ<sub>Flow</sub> to enable machine learning capabilities and GPU execution.; To enable the web UI, also install [Dash](https://pypi.org/project/dash/).; For optimal GPU performance, you may compile the custom CUDA operators, see the [detailed installation instructions](https://tum-pbs.github.io/PhiFlow/Installation_Instructions.html). You can verify your installation by running; ```bash; $ python3 -c ""import phi; phi.verify()""; ```; This will check for compatible PyTorch, Jax and TensorFlow installations as well. ## Features. * Tight integration with PyTorch, Jax and TensorFlow for straightforward neural network training with fully differentiable simulations that can [run on the GPU](https://tum-pbs.github.io/PhiFlow/GPU_Execution.html#enabling-gpu-execution).; * Built-in PDE operations with focus on fluid phenomena, allowing for concise formulation of simulations.; * Flexible, easy-to-use [web interface](https://tum-pbs.github.io/PhiFlow/Web_Interface.html) featuring live visualizations and interactive controls that can affect simulations or network training on the fly.; * Object-oriented, vectorized design for expressive code, ease of use, flexibility and extensibility.; * Reusable simulation code, independent of backend and dimensionality, i.e. the exact same code can run a 2D fluid sim using NumPy and a 3D fluid sim on the GPU using TensorFlow or PyTorch.; * High-level linear equation solver with automated sparse matrix generation. ## 📖 Documentation and Tutorials; [**Documentation Overview**](https://tum-pbs.github.io/PhiFlow/); &nbsp; • &nbsp; [**▶ YouTube Tutorials**](https://www.youtube.com/playlist?list=PLYLhRkuWBmZ5R6hYzusA2JBIUPFEE755O); &nbsp; • &nbsp; [**API**](https://tum-pbs.github.io/PhiFlow/phi/); &nbsp; • &nbsp; [**Demos**](https://github.com/tum-pbs/PhiFlow/tree/master/demos); &nbsp; • &nbsp; [<img src=""https://www.tensorflow.org/images/colab_logo_32px.pn",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md:9987,interface,interface,9987,README.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md,1,['interface'],['interface']
Integrability,"xample above) is to use the `ModuleViewer` class.; In the above example, simply replace the line containing the `for` loop with the following line.; ```python; for _ in ModuleViewer().range(100):; ```; This launches a web interface displaying the velocity and pressure fields and allows you to step through the simulation step by step. Slightly more complex examples can be found in ; [marker.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/marker.py) which passively advects an additional marker field,; [smoke_plume.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/smoke_plume.py) which additionally introduces a buoyancy force,; [fluid_logo.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/fluid_logo.py) which adds obstacles to the scene and; [rotating_bar.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/rotating_bar.py) which adds geometry movement. ## Differences to MantaFlow. [MantaFlow](http://mantaflow.com/) is a simulation framework that also offers; deep learning functionality and TensorFlow integration. However, in contrast to; Φ<sub>Flow</sub>, it focuses on fast CPU-based simulations, and does not; support differentiable operators. Nonetheless, it can be useful to, e.g.,; pre-compute simulation data for learning tasks in Φ<sub>Flow</sub>. One central difference of both fluid solvers is that mantaflow grids all have; the same size, while in Φ<sub>Flow</sub>, the staggered velocity grids are; larger by one layer on the positive domain sides ; (also see the [data format section](Scene_Format_Specification.md)). Mantaflow always stores 3-component vectors in its `Vec3`; struct, while Φ<sub>Flow</sub> changes the vectors size with the; dimensionality of the solver. E.g., a 2D solver in mantaflow with a velocity `Vec3 v`; has `v[0]` for X, and `v[1]` for the Y component. `v[2]` for Z is still; defined, but typically set to zero. For a 3D solver in mantaflow, this indexing; scheme does not change. Φ<sub>Flow</sub>, on the other hand, use",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Physics.md:2576,integrat,integration,2576,docs/Physics.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Physics.md,1,['integrat'],['integration']
Modifiability," log.; - **Φ Board** contains benchmarking functionality. For TensorFlow apps it also allows the user to launch TensorBoard and run the TensorFlow profiler.; - **Help** refers to this page. Tips & Tricks:. - You can run a specified number of frames by entering the number in the text box next to the 'Step' button. If you put a '*' before the number, it is multiplied by the app's `stride` value which can be found in the `info` tab. ## Frame Rate and Refresh Rate. The web interface provides a *Refresh rate* control above the field viewer.; This value describes how often the diagrams in the browser are updated.; It is independent of the framerate specified in `view()` which defines how quickly the user code is executed. ## Configuration. The `show` method supports additional keyword arguments to configure how the App contents are displayed. The `display` parameter defines which fields are displayed initially, e.g. `display='Density'` or `display=('Density', 'Velocity')`. ### Further configuration parameters. | Parameter | Description | Default |; |----------------------|---------------------------------------------------------------------------------------------------|---------|; | external_web_server | Whether an external tool is used to host the Dash server. If False, launches a new web server. | False |; | arrow_origin | Which part of the arrow is centered at the position of the field. One of 'base', 'center', 'tip'. | 'tip' |; | max_arrow_resolution | Downscale grids to have no more than resolution**2 cells before drawing arrows. | 40 |; | min_arrow_length | Fraction of figure size. Smaller arrows are not drawn. | 0.005 |; | max_arrows | Maximum number of arrows to draw. Arrows are sorted by length. | 2000 |; | draw_full_arrows | Whether to draw the tips of arrows. If False, draws arrows as lines. | False |; | colormap | Built-in: 'viridisx', 'OrWhBl'. Additional colormaps can be used if matplotlib is installed. | 'viridisx'|; | slow_colorbar | If True, keeps colorb",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Web_Interface.md:2163,config,configuration,2163,docs/Web_Interface.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Web_Interface.md,1,['config'],['configuration']
Modifiability," on the other hand, cover everything outside the sampled volume, i.e. an n-dimensional region. Numerical methods working directly with traditional boundary conditions have to treat the boundaries separately (e.g. different stencils).; With extrapolations, the same computations can typically be achieved by first padding the field and then applying a single operation everywhere.; This makes low-order methods more efficient, especially on GPUs or TPUs where fewer kernels need to be launched, reducing the overhead.; Also, user code typically is more concise and expressive with extrapolations. ### Standard Extrapolations. Standard extrapolation types are listed [here](phi/math/extrapolation.html#header-variables). * `PERIODIC` copies the values from the opposite side.; * `BOUNDARY` copies the closest value from the grid. For the boundary condition *∂u/∂x = 0*, this is accurate to second order.; * `ConstantExtrapolation`, such as `ZERO` or `ONE` fill the outside with a constant value.; For a boundary condition *u=c*, the first padded value is exact and values padded further out are accurate to first order. Custom extrapolations can be implemented by extending the; [`Extrapolation`](phi/math/extrapolation.html#phiml.math.extrapolation.Extrapolation) class.; Extrapolations also support a limited set of arithmetic operations, e.g. `PERIODIC * ZERO = ZERO`. ### Specifying Extrapolations per Side. Different extrapolation types can be chosen for each side of a domain, e.g. a closed box with an open top.; This can be achieved using [`combine_sides()`](phi/math/extrapolation.html#phiml.math.extrapolation.combine_sides); which allows the extrapolations to be specified by dimension. The following example uses 0 for the upper face along `y` and 1 everywhere else.; ```python; zero_top = extrapolation.combine_sides(x=extrapolation.ONE, y=(extrapolation.ONE, extrapolation.ZERO)); ```; For a full example, see the [pipe demo](https://github.com/tum-pbs/PhiFlow/blob/master/demos/pipe.py).",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Fields.md:6675,extend,extending,6675,docs/Fields.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Fields.md,1,['extend'],['extending']
Modifiability,"# ![PhiFlow](figures/Logo_DallE2_3_layout.png). [**Homepage**](https://github.com/tum-pbs/PhiFlow); &nbsp;&nbsp;&nbsp; [**API**](phi); &nbsp;&nbsp;&nbsp; [**Demos**](https://github.com/tum-pbs/PhiFlow/tree/master/demos); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [<img src=""https://www.tensorflow.org/images/colab_logo_32px.png"" height=16> **Playground**](https://colab.research.google.com/drive/1zBlQbmNguRt-Vt332YvdTqlV4DBcus2S#offline=true&sandboxMode=true). ### Beginner Guides. [Installation Instructions](Installation_Instructions.md):; Requirements, installation, CUDA compilation. [Cookbook](Cookbook.html): Example code snippets for various things. #### Tensors and Dimensions. * [▶️ Introduction Video](https://youtu.be/4nYwL8ZZDK8); * [Introduction Notebook](Math_Introduction.html). #### Differentiation. * [Billiards](Billiards.html); * [Differentiable fluid simulations](Fluids_Tutorial.html). #### Fluids. * [▶️ Introduction Video](https://youtu.be/YRi_c0v3HKs); * [Differentiable fluid simulations](Fluids_Tutorial.html); * [Higher-order incompressible fluids](HigherOrder_Demo.html). #### I/O. * [Introduction to Scenes](IO_with_Scenes.html). #### Neural Networks. * [▶️ Introduction Video](https://youtu.be/aNigTqklCBc); * [Learning to Throw](https://tum-pbs.github.io/PhiFlow/Learn_to_Throw_Tutorial.html). #### Advanced. * [What to Avoid](Known_Issues.html): How to keep your code compatible with PyTorch, TensorFlow and Jax. ### Module Documentation. | Module API | Documentation |; |--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/index.md:438,sandbox,sandboxMode,438,docs/index.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/index.md,1,['sandbox'],['sandboxMode']
Modifiability,"# Contributing to Φ<sub>Flow</sub>; All contributions are welcome!; You can mail the developers to get in touch. ## Types of contributions we're looking for; We're open to all kind of contributions that improve or extend the Φ<sub>Flow</sub> library.; We especially welcome; - New equations / solvers; - Code optimizations or native (CUDA) implementations.; - Integrations with other computing libraries.; - Bug fixes. Φ<sub>Flow</sub> is a framework, not an application collection.; While we list applications in the [demos](../demos) directory, these should be short and easy to understand. ## How to Contribute; We recommend you to contact the developers before starting your contribution.; There may already be similar internal work or planned changes that would affect how to code the contribution. To contribute code, fork Φ<sub>Flow</sub> on GitHub, make your changes, and submit a pull request.; Make sure that your contribution passes all tests. For commits, we use the following tags in the header:. * `[doc]` for documentation updates; * `[ci]` for CI configuration changes; * `[build]` for changes to the installation; * `[tests]` for adding or changing unit tests; * `[demos]` for adding or changing demo scripts; * `[Φ]` for general changes like version numbers or default imports; ; If the commit modifies the main codebase (`phi/`), use one of the following tags:. * `[vis]` for general changes in `phi.vis` as well as changes to any GUI, e.g. dash, widgets, console.; * `[geom]` for changes to `phi.geom`; * `[field]` for changes to `phi.field` except Scene; * `[io]` for changes to Scenes, data layout; * `[physics]` for changes to `phi.physics`; * `[learning]` for non-backend changes to `phi.tf`, `phi.torch`. Example commit header: `[doc] Improve markdown layout`. Commits may be tagged with multiple tags, but this should be used sparingly. Bugfix commits are tagged with the module to which the fixes are applied. ## Style Guide; Style guidelines make the code more uniform and ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md:214,extend,extend,214,CONTRIBUTING.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md,1,['extend'],['extend']
Modifiability,"# Fields. The [`phi.field`](phi/field/) module contains various data structures - such as grids or point clouds - ; and provides a common interface to access them.; This allows the physics to be independent of the underlying data structure to some degree. ## Abstract classes. The [`Field`](phi/field/#phi.field.Field) class is the base class that all fields extend.; It represents a physical quantity `F(x)` that defines a value at every point `x` in n-dimensional space.; The values of `F(x)` may have any number of dimensions, described by the channel dimensions of the Field.; Scalar fields have no channel dimensions, vector fields have one, etc. Important properties:. * `.shape: Shape` contains batch and spatial dimensions from ; * `.spatial_rank: int = len(shape.spatial)` is the dimensionality of physical space. Important methods. * `sample_at(Tensor) -> Tensor` computes the field values at the given points; * `sample_in(Geometry) -> Tensor` computes the field values in the given volumes; * `at(SampledField) -> SampledField` returns a field with the same sample points as the specified representation.; * `unstack(dim) -> tuple[Field]` slices the field along a dimension. Fields implement many mathematical operators, e.g. `+, -, * , /, **`.; The shift operator `@` calls the `at()` method on the left field. The class [`SampledField`](phi/field/#phi.field.SampledField) extends `Field` to form the basis for all fields that explicitly store their data.; The most important sampled fields are ; [`CenteredGrid`](phi/field/#phi.field.CenteredGrid), ; [`StaggeredGrid`](phi/field/#phi.field.StaggeredGrid) and ; [`PointCloud`](phi/field/#phi.field.PointCloud). Important properties:. * `.values: Tensor` data that is used in sampling; * `.geometry: Geometry` sample points as finite volumes; * `.points: Tensor` center points of `elements`; * `.extrapolation: Extrapolation` determines how values outside the region covered by `values` are determined. Non-sampled fields inherit from `Ana",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Fields.md:359,extend,extend,359,docs/Fields.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Fields.md,1,['extend'],['extend']
Modifiability,"# PhiFlow. [**Homepage**](https://github.com/tum-pbs/PhiFlow); &nbsp;&nbsp;&nbsp; [**Documentation**](https://tum-pbs.github.io/PhiFlow/); &nbsp;&nbsp;&nbsp; [**API**](https://tum-pbs.github.io/PhiFlow/phi); &nbsp;&nbsp;&nbsp; [**Demos**](https://github.com/tum-pbs/PhiFlow/tree/master/demos); &nbsp;&nbsp;&nbsp; [<img src=""https://www.tensorflow.org/images/colab_logo_32px.png"" height=16> **Fluids Tutorial**](https://colab.research.google.com/github/tum-pbs/PhiFlow/blob/develop/docs/Fluids_Tutorial.ipynb#offline=true&sandboxMode=true); &nbsp;&nbsp;&nbsp; [<img src=""https://www.tensorflow.org/images/colab_logo_32px.png"" height=16> **Playground**](https://colab.research.google.com/drive/1zBlQbmNguRt-Vt332YvdTqlV4DBcus2S#offline=true&sandboxMode=true). PhiFlow is an open-source simulation toolkit built for optimization and machine learning applications.; It is written mostly in Python and can be used with NumPy, TensorFlow, Jax or PyTorch.; The close integration with machine learning frameworks allows it to leverage their automatic differentiation functionality,; making it easy to build end-to-end differentiable functions involving both learning models and physics simulations. See the [installation Instructions](https://tum-pbs.github.io/PhiFlow/Installation_Instructions.html) on how to compile the optional custom CUDA operations.; ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Package_Info.md:521,sandbox,sandboxMode,521,docs/Package_Info.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Package_Info.md,2,['sandbox'],['sandboxMode']
Modifiability,"# Visualization. ## Interactive User Interface; Φ<sub>Flow</sub> provides interactive user interfaces for live visualization and control.; They allow you to see neural network predictions as the network is being trained or view training data while it is being generated. The following interfaces are currently available:. - [`dash`](Web_Interface.md) web interface hosts a web server; - [`console`](ConsoleUI.md) for command line applications. ### Viewing Data; The primary way to launch an interactive user interface is through; [`view()`](phi/vis/index.html#phi.vis.view).; This function takes a number of `SampledField` instances or variable names and shows them in a new UI.; ```python; from phi.flow import *. data = Domain(x=32, y=32).scalar_grid(Noise()); view(data, gui=None); ```; With `gui=None` (default) an appropriate interface is automatically selected based on the environment and installed packages.; Otherwise, the type of interface can be specified with `gui='dash'` or `gui='console'`. ### Batch Selection; When the viewed data are batched, the GUI will try to plot all examples at once which may result in crowded plots.; This can be avoided using the `select` keyword argument.; It specifies dimensions along which a single slice is displayed, e.g.; ```python; data = Domain(x=32, y=32).scalar_grid(Noise(batch=10, time=33)); view(batched_data, select='batch,time'); ```; For each dimension, a slider will be added to the UI for the user to select which slice to display. ### Controlling Loop Execution; The GUI can be used to let the user control loop execution.; To do this, the user code needs to iterate over ; [`Viewer.range()`](phi/vis/index.html#phi.vis.Viewer.range).; ```python; data = Domain(x=32, y=32).scalar_grid(Noise()); for _ in view(data, play=False).range(10):; data = physics(data); ```; Once the loop is encountered, the execution controls of the GUI can be used to pause execution, run single iterations or break the loop.; With `play=False`, execution stops ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Visualization.md:636,variab,variable,636,docs/Visualization.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Visualization.md,1,['variab'],['variable']
Modifiability,"/fluid.html) <br /> [phi.physics.diffuse](phi/physics/diffuse.html) | [Fluids Tutorial](Fluids_Tutorial.html): Introduction to core classes and fluid-related functions. <br /> [Higher-order schemes](Taylor_Green_Comparison.html): Compares the accuracy of various numerial schemes. <br /> [Overview](Physics.md): Domains, built-in physics functions <br /> [Functions for Fluid Simulations](Fluid_Simulation.html): Advection, projection, diffusion |; | [phi.field](phi/field) | [Overview](Fields.md): Grids, particles <br /> [Staggered Grids](Staggered_Grids.html): Data layout, usage <br /> [Reading and Writing Simulation Data](Reading_and_Writing_Data.md) <br /> [Scene Format Specification](Scene_Format_Specification.md): Directory layout, file format |; | [phi.geom](phi/geom) | [Overview](Geometry.md): Differentiable Geometry |. ### Core Classes. <div class=""mxgraph"" style=""max-width:100%;border:1px solid transparent;"" data-mxgraph=""{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;lightbox&quot;:false,&quot;nav&quot;:true,&quot;resize&quot;:true,&quot;toolbar&quot;:&quot;zoom layers&quot;,&quot;xml&quot;:&quot;&lt;mxfile host=\&quot;app.diagrams.net\&quot; modified=\&quot;2021-07-02T20:16:56.988Z\&quot; agent=\&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36\&quot; etag=\&quot;_2Yp1tYnDWZnCvK0xIgF\&quot; version=\&quot;14.8.0\&quot; type=\&quot;onedrive\&quot;&gt;&lt;diagram name=\&quot;Page-1\&quot; id=\&quot;c4acf3e9-155e-7222-9cf6-157b1a14988f\&quot;&gt;7Vxbc+I6Ev41VGVOVVy2hcE8hiTMPsypw06SnbNPKYEF1owvrC1P4Pz6bdmSL/IFQyDJ1MBMJZbUuljdX1+kJgN0628/R3jj/hk6xBuYurMdoLuBaRqGbcEvXrPLakZolFWsI+oIoqLigf5DRKUuahPqkLhCyMLQY3RTrVyGQUCWrFKHoyh8qZKtQq866wavSa3iYYm9eu036jA3q7Utvaj/F6FrV85s6KJlgZc/1lGYBGK+IAxI1uJjOYwgjV3shC+lKnQ/QLdRGLLsyd/eEo9vq9yxrN+spTVfckQC1tDhKSbRX4vvfLdM3cML4FhKNLi9H9yMtHR56QgeDX5kTS5jfL9v+BjmjCX+9WYRa2vK3GSh0RDq5i6defAS5mzjUviZjTIrBnrE0ZqI5TwvPAxDl7mZNcxh0zhDYPUuFSsBeUEgDWhafrw3B7Y+uDFLlBrZMpDB0MOMh",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/index.md:3525,layers,layers,3525,docs/index.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/index.md,1,['layers'],['layers']
Modifiability,"To do this, the user code needs to iterate over ; [`Viewer.range()`](phi/vis/index.html#phi.vis.Viewer.range).; ```python; data = Domain(x=32, y=32).scalar_grid(Noise()); for _ in view(data, play=False).range(10):; data = physics(data); ```; Once the loop is encountered, the execution controls of the GUI can be used to pause execution, run single iterations or break the loop.; With `play=False`, execution stops immediately once the loop is hit. The GUI will update the displayed values either after each iteration, or at a configurable refresh rate. ### Loop Recording; The GUI can also be used to record the values of the viewed variables during loop execution.; Recording is enabled if the stop argument in; [`Viewer.range()`](phi/vis/index.html#phi.vis.Viewer.range); is named, e.g. `viewer.range(frames=10)`.; Then, the values for each viewed variable are accumulated and stacked along a new batch dimension with this name. The recorded values can later be accessed through `Viewer.rec.<variable>`.; ```python; data = Domain(x=32, y=32).scalar_grid(Noise()); viewer = view(data); for _ in viewer.range(frames=10):; data = physics(data); all_data = viewer.rec.data # CenteredGrid (frames=11, x=32, y=32); ```. ### Custom Controls; It is often useful to modify parameters while a script is running,; e.g. adjusting the learning rate to see which values work best.; This can be easily achieved using [`control()`](phi/vis/#phi.vis.control).; ```python; learning_rate = control(0.001); checkpoint_interval = control(100, (1, 200)); ```; `control()` returns the first argument which specifies the initial value.; Consequently, `learning_rate` is a `float` and can be used as such.; The value of the variable will be modified each time the user edits the value.; This can happen while the user code is running. The following control types are supported:. - Linear sliders for `int` and `float` with a suitable value range; - Logarithmic sliders for `float` values with a large range or no range spe",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Visualization.md:2581,variab,variable,2581,docs/Visualization.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Visualization.md,1,['variab'],['variable']
Modifiability,"and interactive controls that can affect simulations or network training on the fly.; * Object-oriented, vectorized design for expressive code, ease of use, flexibility and extensibility.; * Reusable simulation code, independent of backend and dimensionality, i.e. the exact same code can run a 2D fluid sim using NumPy and a 3D fluid sim on the GPU using TensorFlow or PyTorch.; * High-level linear equation solver with automated sparse matrix generation. ## 📖 Documentation and Tutorials; [**Documentation Overview**](https://tum-pbs.github.io/PhiFlow/); &nbsp; • &nbsp; [**▶ YouTube Tutorials**](https://www.youtube.com/playlist?list=PLYLhRkuWBmZ5R6hYzusA2JBIUPFEE755O); &nbsp; • &nbsp; [**API**](https://tum-pbs.github.io/PhiFlow/phi/); &nbsp; • &nbsp; [**Demos**](https://github.com/tum-pbs/PhiFlow/tree/master/demos); &nbsp; • &nbsp; [<img src=""https://www.tensorflow.org/images/colab_logo_32px.png"" height=16> **Playground**](https://colab.research.google.com/drive/1zBlQbmNguRt-Vt332YvdTqlV4DBcus2S#offline=true&sandboxMode=true). Φ-Flow builds on the tensor functionality from [Φ<sub>ML</sub>](https://github.com/tum-pbs/PhiML).; To understand how Φ<sub>Flow</sub> works, check [named and typed dimensions](https://tum-pbs.github.io/PhiML/Introduction.html) first. ### Getting started. * [Installation instructions](https://tum-pbs.github.io/PhiFlow/Installation_Instructions.html); * [<img src=""https://www.tensorflow.org/images/colab_logo_32px.png"" height=16>](https://colab.research.google.com/github/tum-pbs/PhiFlow/blob/develop/docs/Math_Introduction.ipynb) [Tensors](https://tum-pbs.github.io/PhiFlow/Math_Introduction.html); * [<img src=""https://www.tensorflow.org/images/colab_logo_32px.png"" height=16>](https://colab.research.google.com/github/tum-pbs/PhiFlow/blob/develop/docs/Fluids_Tutorial.ipynb) [Fluids](https://tum-pbs.github.io/PhiFlow/Fluids_Tutorial.html); * [<img src=""https://www.tensorflow.org/images/colab_logo_32px.png"" height=16>](https://colab.research.google.com/gi",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md:11102,sandbox,sandboxMode,11102,README.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md,1,['sandbox'],['sandboxMode']
Modifiability,"ar to Home but shows two fields at a time instead of one.; - **Info** displays additional information about the current session such as file paths and run time.; - **Log** displays the complete application log.; - **Φ Board** contains benchmarking functionality. For TensorFlow apps it also allows the user to launch TensorBoard and run the TensorFlow profiler.; - **Help** refers to this page. Tips & Tricks:. - You can run a specified number of frames by entering the number in the text box next to the 'Step' button. If you put a '*' before the number, it is multiplied by the app's `stride` value which can be found in the `info` tab. ## Frame Rate and Refresh Rate. The web interface provides a *Refresh rate* control above the field viewer.; This value describes how often the diagrams in the browser are updated.; It is independent of the framerate specified in `view()` which defines how quickly the user code is executed. ## Configuration. The `show` method supports additional keyword arguments to configure how the App contents are displayed. The `display` parameter defines which fields are displayed initially, e.g. `display='Density'` or `display=('Density', 'Velocity')`. ### Further configuration parameters. | Parameter | Description | Default |; |----------------------|---------------------------------------------------------------------------------------------------|---------|; | external_web_server | Whether an external tool is used to host the Dash server. If False, launches a new web server. | False |; | arrow_origin | Which part of the arrow is centered at the position of the field. One of 'base', 'center', 'tip'. | 'tip' |; | max_arrow_resolution | Downscale grids to have no more than resolution**2 cells before drawing arrows. | 40 |; | min_arrow_length | Fraction of figure size. Smaller arrows are not drawn. | 0.005 |; | max_arrows | Maximum number of arrows to draw. Arrows are sorted by length. | 2000 |; | draw_full_arrows | Whether to draw the tips of arrows. ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Web_Interface.md:1972,config,configure,1972,docs/Web_Interface.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Web_Interface.md,1,['config'],['configure']
Modifiability,"can be used to pause execution, run single iterations or break the loop.; With `play=False`, execution stops immediately once the loop is hit. The GUI will update the displayed values either after each iteration, or at a configurable refresh rate. ### Loop Recording; The GUI can also be used to record the values of the viewed variables during loop execution.; Recording is enabled if the stop argument in; [`Viewer.range()`](phi/vis/index.html#phi.vis.Viewer.range); is named, e.g. `viewer.range(frames=10)`.; Then, the values for each viewed variable are accumulated and stacked along a new batch dimension with this name. The recorded values can later be accessed through `Viewer.rec.<variable>`.; ```python; data = Domain(x=32, y=32).scalar_grid(Noise()); viewer = view(data); for _ in viewer.range(frames=10):; data = physics(data); all_data = viewer.rec.data # CenteredGrid (frames=11, x=32, y=32); ```. ### Custom Controls; It is often useful to modify parameters while a script is running,; e.g. adjusting the learning rate to see which values work best.; This can be easily achieved using [`control()`](phi/vis/#phi.vis.control).; ```python; learning_rate = control(0.001); checkpoint_interval = control(100, (1, 200)); ```; `control()` returns the first argument which specifies the initial value.; Consequently, `learning_rate` is a `float` and can be used as such.; The value of the variable will be modified each time the user edits the value.; This can happen while the user code is running. The following control types are supported:. - Linear sliders for `int` and `float` with a suitable value range; - Logarithmic sliders for `float` values with a large range or no range specified.; - Checkboxes for `bool` values.; - Text fields for `str` values.; ; Additionally, buttons are generated for functions declared in the user script that take no parameters. ## Plotting; See [`plot()`](phi/vis/index.html#phi.vis.plot) and; [`plot_scalars()`](phi/vis/index.html#phi.vis.plot_scalars).",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Visualization.md:3288,variab,variable,3288,docs/Visualization.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Visualization.md,1,['variab'],['variable']
Modifiability,"e latest stable version of Φ<sub>Flow</sub> with GUI support using pip.; ```bash; $ pip install phiflow; ```; To install the latest developer version of Φ<sub>Flow</sub>, run; ```bash; $ pip install --upgrade git+https://github.com/tum-pbs/PhiFlow@develop; ```. Install [PyTorch](https://pytorch.org/), [TensorFlow](https://www.tensorflow.org/install) or [Jax](https://github.com/google/jax#installation) in addition to Φ<sub>Flow</sub> to enable machine learning capabilities and GPU execution. To enable the web UI, also install [`dash`](https://pypi.org/project/dash/).; ```bash; $ pip install dash; ```; If you only run Φ<sub>Flow</sub> inside of Jupyter notebooks, dash is not required as Matplotlib will be used for plots and animations by default. ## Installing Φ<sub>Flow</sub> from Source; The Φ<sub>Flow</sub> source additionally contains demo scripts and tests.; In particular, it includes [`tests/verify.py`](https://github.com/tum-pbs/PhiFlow/blob/develop/tests/verify.py),; which tests your configuration. Clone the git repository by running; ```bash; $ git clone https://github.com/tum-pbs/PhiFlow.git <target directory>; ```; This will create the folder \<target directory\> and copy all Φ<sub>Flow</sub> source files into it. With this done, you may compile CUDA kernels for better performance, see below. Finally, Φ<sub>Flow</sub> needs to be added to the Python path.; This can be done in one of multiple ways:. * Marking \<target directory\> as a source directory in your Python IDE.; * Manually adding the cloned directory to the Python path.; * Installing Φ<sub>Flow</sub> using pip: `$ pip install <target directory>/`. This command needs to be rerun after you make changes to the source code. ## Compiling the CUDA Kernels for TensorFlow. The Φ<sub>Flow</sub> source includes several custom CUDA kernels to speed up certain operations when using TensorFlow.; To use these, you must have a [TensorFlow compatible CUDA SDK with cuDNN](https://www.tensorflow.org/install/gpu#softw",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md:1857,config,configuration,1857,docs/Installation_Instructions.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md,1,['config'],['configuration']
Modifiability,"e.g. dash, widgets, console.; * `[geom]` for changes to `phi.geom`; * `[field]` for changes to `phi.field` except Scene; * `[io]` for changes to Scenes, data layout; * `[physics]` for changes to `phi.physics`; * `[learning]` for non-backend changes to `phi.tf`, `phi.torch`. Example commit header: `[doc] Improve markdown layout`. Commits may be tagged with multiple tags, but this should be used sparingly. Bugfix commits are tagged with the module to which the fixes are applied. ## Style Guide; Style guidelines make the code more uniform and easier to read.; Generally we stick to the Python style guidelines as outlined in [PEP 8](https://www.python.org/dev/peps/pep-0008/), with some minor modifications outlined below. Have a look at the [Zen](https://en.wikipedia.org/wiki/Zen_of_Python) [of Python](https://www.python.org/dev/peps/pep-0020/) for the philosophy behind the rules.; We would like to add the rule *Concise is better than repetitive.*. We use PyLint for static code analysis with specific configuration files for; [demos](../demos/.pylintrc),; [tests](../tests/.pylintrc) and the; [code base](../phi/.pylintrc).; PyLint is part of the automatic testing pipeline.; The warning log can be viewed online by selecting a `Tests` job and expanding the pylint output. ### Docstrings; The [API documentation](https://tum-pbs.github.io/PhiFlow/) for Φ<sub>Flow</sub> is generated using [pdoc](https://pdoc3.github.io/pdoc/).; We use [Google style docstrings](https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings); with Markdown formatting. ```python; """"""; Function description. *Note in italic.*. Example:; ; ```python; def python_example(); ```. Args:; arg1: Description.; Indentation for multi-line description. Returns:; Single output. For multi-output use same format as for args.; """"""; ```. Docstrings for variables are located directly below the public declaration.; ```python; variable: type = value; """""" Docstring for the variable. """"""; ```. ### Additional ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md:2465,config,configuration,2465,CONTRIBUTING.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md,1,['config'],['configuration']
Modifiability,"e_plume.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/smoke_plume.py) which additionally introduces a buoyancy force,; [fluid_logo.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/fluid_logo.py) which adds obstacles to the scene and; [rotating_bar.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/rotating_bar.py) which adds geometry movement. ## Differences to MantaFlow. [MantaFlow](http://mantaflow.com/) is a simulation framework that also offers; deep learning functionality and TensorFlow integration. However, in contrast to; Φ<sub>Flow</sub>, it focuses on fast CPU-based simulations, and does not; support differentiable operators. Nonetheless, it can be useful to, e.g.,; pre-compute simulation data for learning tasks in Φ<sub>Flow</sub>. One central difference of both fluid solvers is that mantaflow grids all have; the same size, while in Φ<sub>Flow</sub>, the staggered velocity grids are; larger by one layer on the positive domain sides ; (also see the [data format section](Scene_Format_Specification.md)). Mantaflow always stores 3-component vectors in its `Vec3`; struct, while Φ<sub>Flow</sub> changes the vectors size with the; dimensionality of the solver. E.g., a 2D solver in mantaflow with a velocity `Vec3 v`; has `v[0]` for X, and `v[1]` for the Y component. `v[2]` for Z is still; defined, but typically set to zero. For a 3D solver in mantaflow, this indexing; scheme does not change. Φ<sub>Flow</sub>, on the other hand, uses a two component numpy array for the; velocity component of a 2D solver, where the first or last index denotes X, depending on the configuration.; This scheme is closer to the typical ordering of numpy arrays, and simplifies the; implementation of operators that are agnostic of the solver dimension. As a side effect of this indexing, gravity is defined to act along the last or first; dimension in Φ<sub>Flow</sub>, i.e., Z in 3D, and Y in 2D.; In contrast, gravity always acts along the Y direction in Mantaflow.; ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Physics.md:3668,config,configuration,3668,docs/Physics.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Physics.md,1,['config'],['configuration']
Modifiability,"given volumes; * `at(SampledField) -> SampledField` returns a field with the same sample points as the specified representation.; * `unstack(dim) -> tuple[Field]` slices the field along a dimension. Fields implement many mathematical operators, e.g. `+, -, * , /, **`.; The shift operator `@` calls the `at()` method on the left field. The class [`SampledField`](phi/field/#phi.field.SampledField) extends `Field` to form the basis for all fields that explicitly store their data.; The most important sampled fields are ; [`CenteredGrid`](phi/field/#phi.field.CenteredGrid), ; [`StaggeredGrid`](phi/field/#phi.field.StaggeredGrid) and ; [`PointCloud`](phi/field/#phi.field.PointCloud). Important properties:. * `.values: Tensor` data that is used in sampling; * `.geometry: Geometry` sample points as finite volumes; * `.points: Tensor` center points of `elements`; * `.extrapolation: Extrapolation` determines how values outside the region covered by `values` are determined. Non-sampled fields inherit from `AnalyticField`.; They model `F(x)` as a function instead of from data. ## Built-in Fields. [`CenteredGrid`](phi/field/#phi.field.CenteredGrid) stores values in a regular grid structure.; The grid values are stored in a `Tensor` whose spatial dimensions match the resolution of the grid.; The `bounds` property stores the physical size of the grid from which the cell size is derived.; `CenteredGrid.geometry` is a `UniformGrid` matching the grid resolution. [`StaggeredGrid`](phi/field/#phi.field.StaggeredGrid); stores vector fields in staggered form.; The velocity components are not sampled at the cell centers but at the cell faces.; This results in the `values` having different shapes for the different vector components.; [More on staggered grids](Staggered_Grids.html). [`PointCloud`](phi/field/#phi.field.PointCloud); is a set of points or finite elements, each associated with a value. [`Noise`](phi/field/#phi.field.Noise); samples random fluctuations of certain sizes.; Currently",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Fields.md:1984,inherit,inherit,1984,docs/Fields.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Fields.md,1,['inherit'],['inherit']
Modifiability,"h equal sample point spacing `dx`. When resampling staggered grids with `keep_boundary=True`, the sample points of the resampled field may be different from `representation`.; This is because the sample points and value tensor shape of staggered grids depends on the extrapolation type. Additionally, there are two functions for sampling field values at given locations. * [`sample`](phi/field/#phi.field.sample) samples the field values at the location of a single geometry or geometry batch.; * [`reduce_sample`](phi/field/#phi.field.reduce_sample) differs from `sample` in that the geometry here describes; staggered locations at which the individual channel components of the field are stored.; For centered grids, `sample` and `reduce_sample` are equal. ## Extrapolations. Sampled fields, such as [`CenteredGrid`](phi/field/#phi.field.CenteredGrid),; [`StaggeredGrid`](phi/field/#phi.field.StaggeredGrid); [`PointCloud`](phi/field/#phi.field.PointCloud) all have an `extrapolation` member variable of type ; [`Extrapolation`](phi/math/extrapolation.html#phiml.math.extrapolation.Extrapolation).; The extrapolation determines the values outside the region in which the field is sampled.; It takes the place of the boundary condition (e.g. Neumann / Dirichlet) which would be used in a mathematical formulation. ### Extrapolations vs Boundary Conditions. While both extrapolation and traditional boundary conditions fill the same role, there are a couple of differences between the two.; Boundary conditions determine the field values (or a spatial derivative thereof) at the boundary of a volume, i.e. they cover an n-1 dimensional region.; Extrapolations, on the other hand, cover everything outside the sampled volume, i.e. an n-dimensional region. Numerical methods working directly with traditional boundary conditions have to treat the boundaries separately (e.g. different stencils).; With extrapolations, the same computations can typically be achieved by first padding the field and then a",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Fields.md:4847,variab,variable,4847,docs/Fields.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Fields.md,1,['variab'],['variable']
Modifiability,"ll examples at once which may result in crowded plots.; This can be avoided using the `select` keyword argument.; It specifies dimensions along which a single slice is displayed, e.g.; ```python; data = Domain(x=32, y=32).scalar_grid(Noise(batch=10, time=33)); view(batched_data, select='batch,time'); ```; For each dimension, a slider will be added to the UI for the user to select which slice to display. ### Controlling Loop Execution; The GUI can be used to let the user control loop execution.; To do this, the user code needs to iterate over ; [`Viewer.range()`](phi/vis/index.html#phi.vis.Viewer.range).; ```python; data = Domain(x=32, y=32).scalar_grid(Noise()); for _ in view(data, play=False).range(10):; data = physics(data); ```; Once the loop is encountered, the execution controls of the GUI can be used to pause execution, run single iterations or break the loop.; With `play=False`, execution stops immediately once the loop is hit. The GUI will update the displayed values either after each iteration, or at a configurable refresh rate. ### Loop Recording; The GUI can also be used to record the values of the viewed variables during loop execution.; Recording is enabled if the stop argument in; [`Viewer.range()`](phi/vis/index.html#phi.vis.Viewer.range); is named, e.g. `viewer.range(frames=10)`.; Then, the values for each viewed variable are accumulated and stacked along a new batch dimension with this name. The recorded values can later be accessed through `Viewer.rec.<variable>`.; ```python; data = Domain(x=32, y=32).scalar_grid(Noise()); viewer = view(data); for _ in viewer.range(frames=10):; data = physics(data); all_data = viewer.rec.data # CenteredGrid (frames=11, x=32, y=32); ```. ### Custom Controls; It is often useful to modify parameters while a script is running,; e.g. adjusting the learning rate to see which values work best.; This can be easily achieved using [`control()`](phi/vis/#phi.vis.control).; ```python; learning_rate = control(0.001); checkpoint_",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Visualization.md:2113,config,configurable,2113,docs/Visualization.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Visualization.md,1,['config'],['configurable']
Modifiability,"nt.; It specifies dimensions along which a single slice is displayed, e.g.; ```python; data = Domain(x=32, y=32).scalar_grid(Noise(batch=10, time=33)); view(batched_data, select='batch,time'); ```; For each dimension, a slider will be added to the UI for the user to select which slice to display. ### Controlling Loop Execution; The GUI can be used to let the user control loop execution.; To do this, the user code needs to iterate over ; [`Viewer.range()`](phi/vis/index.html#phi.vis.Viewer.range).; ```python; data = Domain(x=32, y=32).scalar_grid(Noise()); for _ in view(data, play=False).range(10):; data = physics(data); ```; Once the loop is encountered, the execution controls of the GUI can be used to pause execution, run single iterations or break the loop.; With `play=False`, execution stops immediately once the loop is hit. The GUI will update the displayed values either after each iteration, or at a configurable refresh rate. ### Loop Recording; The GUI can also be used to record the values of the viewed variables during loop execution.; Recording is enabled if the stop argument in; [`Viewer.range()`](phi/vis/index.html#phi.vis.Viewer.range); is named, e.g. `viewer.range(frames=10)`.; Then, the values for each viewed variable are accumulated and stacked along a new batch dimension with this name. The recorded values can later be accessed through `Viewer.rec.<variable>`.; ```python; data = Domain(x=32, y=32).scalar_grid(Noise()); viewer = view(data); for _ in viewer.range(frames=10):; data = physics(data); all_data = viewer.rec.data # CenteredGrid (frames=11, x=32, y=32); ```. ### Custom Controls; It is often useful to modify parameters while a script is running,; e.g. adjusting the learning rate to see which values work best.; This can be easily achieved using [`control()`](phi/vis/#phi.vis.control).; ```python; learning_rate = control(0.001); checkpoint_interval = control(100, (1, 200)); ```; `control()` returns the first argument which specifies the initial va",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Visualization.md:2220,variab,variables,2220,docs/Visualization.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Visualization.md,1,['variab'],['variables']
Modifiability,"of Python](https://www.python.org/dev/peps/pep-0020/) for the philosophy behind the rules.; We would like to add the rule *Concise is better than repetitive.*. We use PyLint for static code analysis with specific configuration files for; [demos](../demos/.pylintrc),; [tests](../tests/.pylintrc) and the; [code base](../phi/.pylintrc).; PyLint is part of the automatic testing pipeline.; The warning log can be viewed online by selecting a `Tests` job and expanding the pylint output. ### Docstrings; The [API documentation](https://tum-pbs.github.io/PhiFlow/) for Φ<sub>Flow</sub> is generated using [pdoc](https://pdoc3.github.io/pdoc/).; We use [Google style docstrings](https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings); with Markdown formatting. ```python; """"""; Function description. *Note in italic.*. Example:; ; ```python; def python_example(); ```. Args:; arg1: Description.; Indentation for multi-line description. Returns:; Single output. For multi-output use same format as for args.; """"""; ```. Docstrings for variables are located directly below the public declaration.; ```python; variable: type = value; """""" Docstring for the variable. """"""; ```. ### Additional style choices; - **No line length limit**; long lines are allowed as long as the code is easy to understand.; - **Code comments** should only describe information that is not obvious from the code. They should be used sparingly as the code should be understandable by itself. For documentation, use docstrings instead. Code comments that explain a single line of code should go in the same line as the code they refer to, if possible.; - Code comments that describe multiple lines precede the block and have the format `# --- Comment ---`.; - Avoid empty lines inside of methods. To separate code blocks use multi-line comments as described above.; - Use the apostrophe character ' to enclose strings that affect the program / are not displayed to the user. Use quotes for text such as warnings.; ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md:3301,variab,variables,3301,CONTRIBUTING.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md,3,['variab'],"['variable', 'variables']"
Modifiability,"ons that improve or extend the Φ<sub>Flow</sub> library.; We especially welcome; - New equations / solvers; - Code optimizations or native (CUDA) implementations.; - Integrations with other computing libraries.; - Bug fixes. Φ<sub>Flow</sub> is a framework, not an application collection.; While we list applications in the [demos](../demos) directory, these should be short and easy to understand. ## How to Contribute; We recommend you to contact the developers before starting your contribution.; There may already be similar internal work or planned changes that would affect how to code the contribution. To contribute code, fork Φ<sub>Flow</sub> on GitHub, make your changes, and submit a pull request.; Make sure that your contribution passes all tests. For commits, we use the following tags in the header:. * `[doc]` for documentation updates; * `[ci]` for CI configuration changes; * `[build]` for changes to the installation; * `[tests]` for adding or changing unit tests; * `[demos]` for adding or changing demo scripts; * `[Φ]` for general changes like version numbers or default imports; ; If the commit modifies the main codebase (`phi/`), use one of the following tags:. * `[vis]` for general changes in `phi.vis` as well as changes to any GUI, e.g. dash, widgets, console.; * `[geom]` for changes to `phi.geom`; * `[field]` for changes to `phi.field` except Scene; * `[io]` for changes to Scenes, data layout; * `[physics]` for changes to `phi.physics`; * `[learning]` for non-backend changes to `phi.tf`, `phi.torch`. Example commit header: `[doc] Improve markdown layout`. Commits may be tagged with multiple tags, but this should be used sparingly. Bugfix commits are tagged with the module to which the fixes are applied. ## Style Guide; Style guidelines make the code more uniform and easier to read.; Generally we stick to the Python style guidelines as outlined in [PEP 8](https://www.python.org/dev/peps/pep-0008/), with some minor modifications outlined below. Have a look at",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md:1063,config,configuration,1063,CONTRIBUTING.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md,1,['config'],['configuration']
Modifiability,"ory\> and copy all Φ<sub>Flow</sub> source files into it. With this done, you may compile CUDA kernels for better performance, see below. Finally, Φ<sub>Flow</sub> needs to be added to the Python path.; This can be done in one of multiple ways:. * Marking \<target directory\> as a source directory in your Python IDE.; * Manually adding the cloned directory to the Python path.; * Installing Φ<sub>Flow</sub> using pip: `$ pip install <target directory>/`. This command needs to be rerun after you make changes to the source code. ## Compiling the CUDA Kernels for TensorFlow. The Φ<sub>Flow</sub> source includes several custom CUDA kernels to speed up certain operations when using TensorFlow.; To use these, you must have a [TensorFlow compatible CUDA SDK with cuDNN](https://www.tensorflow.org/install/gpu#software_requirements) as well as a compatible C++ compiler installed.; We strongly recommend using Linux with GCC 7.3.1 (`apt-get install gcc-4.8`) for this.; See the [tested TensorFlow build configurations](https://www.tensorflow.org/install/source#tested_build_configurations). To compile the CUDA kernels for TensorFlow, clone the repository as described above, then run `$ python <target directory>/setup.py tf_cuda`.; This will add the compiled CUDA binaries to the \<target directory\>. ## Verifying the installation; If you have installed Φ<sub>Flow</sub> from source, execute the included `verify.py` script.; ```bash; $ python <Φ-Flow directory>/tests/verify.py; ```; Otherwise, run the following Python code.; ```python; import phi; phi.verify(); ```; Or from the command line:; ```bash; $ python3 -c ""import phi; phi.verify()""; ```; If Φ<sub>Flow</sub> and dependencies are installed correctly, you should see the Φ<sub>Flow</sub> version, followed by additional information on the components at the end of the console output. ### Unit tests. PyTest is required to run the unit tests. To install it, run `$ pip install pytest`. Some unit tests require TensorFlow and PyTorch.; M",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md:3041,config,configurations,3041,docs/Installation_Instructions.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md,1,['config'],['configurations']
Modifiability,"s a value at every point `x` in n-dimensional space.; The values of `F(x)` may have any number of dimensions, described by the channel dimensions of the Field.; Scalar fields have no channel dimensions, vector fields have one, etc. Important properties:. * `.shape: Shape` contains batch and spatial dimensions from ; * `.spatial_rank: int = len(shape.spatial)` is the dimensionality of physical space. Important methods. * `sample_at(Tensor) -> Tensor` computes the field values at the given points; * `sample_in(Geometry) -> Tensor` computes the field values in the given volumes; * `at(SampledField) -> SampledField` returns a field with the same sample points as the specified representation.; * `unstack(dim) -> tuple[Field]` slices the field along a dimension. Fields implement many mathematical operators, e.g. `+, -, * , /, **`.; The shift operator `@` calls the `at()` method on the left field. The class [`SampledField`](phi/field/#phi.field.SampledField) extends `Field` to form the basis for all fields that explicitly store their data.; The most important sampled fields are ; [`CenteredGrid`](phi/field/#phi.field.CenteredGrid), ; [`StaggeredGrid`](phi/field/#phi.field.StaggeredGrid) and ; [`PointCloud`](phi/field/#phi.field.PointCloud). Important properties:. * `.values: Tensor` data that is used in sampling; * `.geometry: Geometry` sample points as finite volumes; * `.points: Tensor` center points of `elements`; * `.extrapolation: Extrapolation` determines how values outside the region covered by `values` are determined. Non-sampled fields inherit from `AnalyticField`.; They model `F(x)` as a function instead of from data. ## Built-in Fields. [`CenteredGrid`](phi/field/#phi.field.CenteredGrid) stores values in a regular grid structure.; The grid values are stored in a `Tensor` whose spatial dimensions match the resolution of the grid.; The `bounds` property stores the physical size of the grid from which the cell size is derived.; `CenteredGrid.geometry` is a `Uniform",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Fields.md:1386,extend,extends,1386,docs/Fields.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Fields.md,1,['extend'],['extends']
Modifiability,"th extrapolation and traditional boundary conditions fill the same role, there are a couple of differences between the two.; Boundary conditions determine the field values (or a spatial derivative thereof) at the boundary of a volume, i.e. they cover an n-1 dimensional region.; Extrapolations, on the other hand, cover everything outside the sampled volume, i.e. an n-dimensional region. Numerical methods working directly with traditional boundary conditions have to treat the boundaries separately (e.g. different stencils).; With extrapolations, the same computations can typically be achieved by first padding the field and then applying a single operation everywhere.; This makes low-order methods more efficient, especially on GPUs or TPUs where fewer kernels need to be launched, reducing the overhead.; Also, user code typically is more concise and expressive with extrapolations. ### Standard Extrapolations. Standard extrapolation types are listed [here](phi/math/extrapolation.html#header-variables). * `PERIODIC` copies the values from the opposite side.; * `BOUNDARY` copies the closest value from the grid. For the boundary condition *∂u/∂x = 0*, this is accurate to second order.; * `ConstantExtrapolation`, such as `ZERO` or `ONE` fill the outside with a constant value.; For a boundary condition *u=c*, the first padded value is exact and values padded further out are accurate to first order. Custom extrapolations can be implemented by extending the; [`Extrapolation`](phi/math/extrapolation.html#phiml.math.extrapolation.Extrapolation) class.; Extrapolations also support a limited set of arithmetic operations, e.g. `PERIODIC * ZERO = ZERO`. ### Specifying Extrapolations per Side. Different extrapolation types can be chosen for each side of a domain, e.g. a closed box with an open top.; This can be achieved using [`combine_sides()`](phi/math/extrapolation.html#phiml.math.extrapolation.combine_sides); which allows the extrapolations to be specified by dimension. The followi",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Fields.md:6220,variab,variables,6220,docs/Fields.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Fields.md,1,['variab'],['variables']
Modifiability,"to select which slice to display. ### Controlling Loop Execution; The GUI can be used to let the user control loop execution.; To do this, the user code needs to iterate over ; [`Viewer.range()`](phi/vis/index.html#phi.vis.Viewer.range).; ```python; data = Domain(x=32, y=32).scalar_grid(Noise()); for _ in view(data, play=False).range(10):; data = physics(data); ```; Once the loop is encountered, the execution controls of the GUI can be used to pause execution, run single iterations or break the loop.; With `play=False`, execution stops immediately once the loop is hit. The GUI will update the displayed values either after each iteration, or at a configurable refresh rate. ### Loop Recording; The GUI can also be used to record the values of the viewed variables during loop execution.; Recording is enabled if the stop argument in; [`Viewer.range()`](phi/vis/index.html#phi.vis.Viewer.range); is named, e.g. `viewer.range(frames=10)`.; Then, the values for each viewed variable are accumulated and stacked along a new batch dimension with this name. The recorded values can later be accessed through `Viewer.rec.<variable>`.; ```python; data = Domain(x=32, y=32).scalar_grid(Noise()); viewer = view(data); for _ in viewer.range(frames=10):; data = physics(data); all_data = viewer.rec.data # CenteredGrid (frames=11, x=32, y=32); ```. ### Custom Controls; It is often useful to modify parameters while a script is running,; e.g. adjusting the learning rate to see which values work best.; This can be easily achieved using [`control()`](phi/vis/#phi.vis.control).; ```python; learning_rate = control(0.001); checkpoint_interval = control(100, (1, 200)); ```; `control()` returns the first argument which specifies the initial value.; Consequently, `learning_rate` is a `float` and can be used as such.; The value of the variable will be modified each time the user edits the value.; This can happen while the user code is running. The following control types are supported:. - Linear sliders ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Visualization.md:2437,variab,variable,2437,docs/Visualization.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Visualization.md,1,['variab'],['variable']
Modifiability,"tom Simulation; In previous version of Φ<sub>Flow</sub>, all custom simulations were based on the abstract classes `State` and `Physics`.; This is no longer the case. It is recommended to define custom re-usable operations as functions and call them directly from the top-level Python script.; The following script runs 100 steps of an inviscid fluid simulation.; ```python; from phi.flow import *. DOMAIN = Domain(x=64, y=80, boundaries=CLOSED, bounds=Box(x=100, y=100)); velocity = DOMAIN.staggered_grid(Noise()); pressure = DOMAIN.scalar_grid(0); for _ in range(100):; velocity = advect.semi_lagrangian(velocity, velocity, dt=1); velocity, pressure, iterations, _ = fluid.make_incompressible(velocity, DOMAIN, pressure_guess=pressure); ```; Note that `advect.semi_lagrangian` and `fluid.make_incompressible` are standard functions in Φ<sub>Flow</sub>, contained in the standard import. ## Visualizing the simulation. The simplest way to visualize a simple simulation with module-level variables (`velocity` and `pressure` in the example above) is to use the `ModuleViewer` class.; In the above example, simply replace the line containing the `for` loop with the following line.; ```python; for _ in ModuleViewer().range(100):; ```; This launches a web interface displaying the velocity and pressure fields and allows you to step through the simulation step by step. Slightly more complex examples can be found in ; [marker.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/marker.py) which passively advects an additional marker field,; [smoke_plume.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/smoke_plume.py) which additionally introduces a buoyancy force,; [fluid_logo.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/fluid_logo.py) which adds obstacles to the scene and; [rotating_bar.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/rotating_bar.py) which adds geometry movement. ## Differences to MantaFlow. [MantaFlow](http://mantaflow.com/) is a simulatio",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Physics.md:1490,variab,variables,1490,docs/Physics.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Physics.md,1,['variab'],['variables']
Performance," let any values created inside a jit-compiled function escape to the outside. ### Avoid nested functions and lambdas (Jax); Do not pass temporary functions to any custom-gradient function.; Temporary functions are those whose `id` changes each time the function to be jit-compiled is called.; In particular, do not `solve_linear` temporary function or pass temporary functions as `preprocess_y`. ### Avoid nested `custom_gradient` (PyTorch); Functions that define a custom gradient via `math.custom_gradient` should not call other custom-gradient functions.; This may result in errors when jit-compiling the function. ### Do not jit-compile neural networks (Jax); Do not run neural networks within jit-compiled functions.; The only exception is the `loss_function` passed to `update_weights()`.; This is because Jax requires all parameters including network weights to be declared as parameters but Φ<sub>Flow</sub> does not. ### Do no compute gradients (PyTorch); Do not call `math.gradient` within a jit-compiled function.; PyTorch cannot trace backward passes. ### Do not use `SolveTape` (PyTorch); `SolveTape` does not work while tracing with PyTorch.; This is because PyTorch does not correctly trace `torch.autograd.Function` instances which are required for the implicit backward solve. ## Memory Leaks. Memory leaks can occur when transformed function are repeatedly called with non-compatible arguments.; This can happen with `custom_gradient` but also `jit_compile`, `functional_gradient` or `hessian`.; Each time such a function is called with new keyword arguments or tensors of new shapes, a record is stored with that function.; For top-level functions, such as `solve_linear`, that record will be held indefinitely.; In cases, where this becomes an issue, you can manually clear the these records or `jit_compile` the function producing the repeated calls. To clear the cached mappings of a transformed function `f`, use; ```python; f.traces.clear(); f.recorded_mappings.clear(); ```; ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Known_Issues.md:2404,cache,cached,2404,docs/Known_Issues.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Known_Issues.md,1,['cache'],['cached']
Performance,"# ![PhiFlow](docs/figures/Logo_DallE2_3_layout.png). ![Build Status](https://github.com/tum-pbs/PhiFlow/actions/workflows/unit-tests.yml/badge.svg); [![PyPI pyversions](https://img.shields.io/pypi/pyversions/phiflow.svg)](https://pypi.org/project/phiflow/); [![PyPI license](https://img.shields.io/pypi/l/phiflow.svg)](https://pypi.org/project/phiflow/); [![Code Coverage](https://codecov.io/gh/tum-pbs/PhiFlow/branch/develop/graph/badge.svg)](https://codecov.io/gh/tum-pbs/PhiFlow/branch/develop/); [![Google Collab Book](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/tum-pbs/PhiFlow/blob/develop/docs/Fluids_Tutorial.ipynb). Φ<sub>Flow</sub> is an open-source simulation toolkit built for optimization and machine learning applications.; It is written mostly in Python and can be used with; [NumPy](https://numpy.org/),; [PyTorch](https://pytorch.org/),; [Jax](https://github.com/google/jax); or [TensorFlow](https://www.tensorflow.org/).; The close integration with these machine learning frameworks allows it to leverage their automatic differentiation functionality,; making it easy to build end-to-end differentiable functions involving both learning models and physics simulations. ## Examples. ### Grids. <table>; <tbody>; <tr>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Fluid_Logo.html""><img src=""docs/figures/examples/grids/Fluid_Logo.gif""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Wake_Flow.html""><img src=""docs/figures/examples/grids/Wake_Flow.png""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Lid_Driven_Cavity.html""><img src=""docs/figures/examples/grids/Lid_Driven_Cavity.png""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Taylor_Green.html""><img src=""docs/figures/examples/grids/Taylor_Green.jpg""></a></td>; </tr>; <tr>; <td align=""center"">Fluid ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md:745,optimiz,optimization,745,README.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md,1,['optimiz'],['optimization']
Performance,"# Contributing to Φ<sub>Flow</sub>; All contributions are welcome!; You can mail the developers to get in touch. ## Types of contributions we're looking for; We're open to all kind of contributions that improve or extend the Φ<sub>Flow</sub> library.; We especially welcome; - New equations / solvers; - Code optimizations or native (CUDA) implementations.; - Integrations with other computing libraries.; - Bug fixes. Φ<sub>Flow</sub> is a framework, not an application collection.; While we list applications in the [demos](../demos) directory, these should be short and easy to understand. ## How to Contribute; We recommend you to contact the developers before starting your contribution.; There may already be similar internal work or planned changes that would affect how to code the contribution. To contribute code, fork Φ<sub>Flow</sub> on GitHub, make your changes, and submit a pull request.; Make sure that your contribution passes all tests. For commits, we use the following tags in the header:. * `[doc]` for documentation updates; * `[ci]` for CI configuration changes; * `[build]` for changes to the installation; * `[tests]` for adding or changing unit tests; * `[demos]` for adding or changing demo scripts; * `[Φ]` for general changes like version numbers or default imports; ; If the commit modifies the main codebase (`phi/`), use one of the following tags:. * `[vis]` for general changes in `phi.vis` as well as changes to any GUI, e.g. dash, widgets, console.; * `[geom]` for changes to `phi.geom`; * `[field]` for changes to `phi.field` except Scene; * `[io]` for changes to Scenes, data layout; * `[physics]` for changes to `phi.physics`; * `[learning]` for non-backend changes to `phi.tf`, `phi.torch`. Example commit header: `[doc] Improve markdown layout`. Commits may be tagged with multiple tags, but this should be used sparingly. Bugfix commits are tagged with the module to which the fixes are applied. ## Style Guide; Style guidelines make the code more uniform and ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md:309,optimiz,optimizations,309,CONTRIBUTING.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md,1,['optimiz'],['optimizations']
Performance,"# PhiFlow. [**Homepage**](https://github.com/tum-pbs/PhiFlow); &nbsp;&nbsp;&nbsp; [**Documentation**](https://tum-pbs.github.io/PhiFlow/); &nbsp;&nbsp;&nbsp; [**API**](https://tum-pbs.github.io/PhiFlow/phi); &nbsp;&nbsp;&nbsp; [**Demos**](https://github.com/tum-pbs/PhiFlow/tree/master/demos); &nbsp;&nbsp;&nbsp; [<img src=""https://www.tensorflow.org/images/colab_logo_32px.png"" height=16> **Fluids Tutorial**](https://colab.research.google.com/github/tum-pbs/PhiFlow/blob/develop/docs/Fluids_Tutorial.ipynb#offline=true&sandboxMode=true); &nbsp;&nbsp;&nbsp; [<img src=""https://www.tensorflow.org/images/colab_logo_32px.png"" height=16> **Playground**](https://colab.research.google.com/drive/1zBlQbmNguRt-Vt332YvdTqlV4DBcus2S#offline=true&sandboxMode=true). PhiFlow is an open-source simulation toolkit built for optimization and machine learning applications.; It is written mostly in Python and can be used with NumPy, TensorFlow, Jax or PyTorch.; The close integration with machine learning frameworks allows it to leverage their automatic differentiation functionality,; making it easy to build end-to-end differentiable functions involving both learning models and physics simulations. See the [installation Instructions](https://tum-pbs.github.io/PhiFlow/Installation_Instructions.html) on how to compile the optional custom CUDA operations.; ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Package_Info.md:813,optimiz,optimization,813,docs/Package_Info.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Package_Info.md,1,['optimiz'],['optimization']
Performance,"# Writing to a Scene; The simulation data are stored as in individual files, one for each quantity and frame.; Frames are integers (up to 1000000) that typically represent time steps of a simulation.; They can, however, be used for any purpose. Instead of writing tensors directly, the scene writes instances of [`SampledField`](phi/field/index.html#phi.field.SampledField).; These also encode physical size and extrapolation.; The method [`write()`](phi/app/index.html#phi.app.Scene.write) stores a dictionary containing fields and their names.; ```python; scene.write({'smoke': smoke, 'velocity': staggered_velocity}, frame=0); ```. Subdirectories in the scene can be created using the method [`subpath()`](phi/app/index.html#phi.app.Scene.subpath). The methods `copy_calling_script()` and `copy_src` can be used to copy source files into the `src` folder of a scene. ## Reading from a Scene; Similar to `write()`, the method [`read()`](phi/app/index.html#phi.app.Scene.read) loads `Field` objects that were previously stored.; It can be used to read single fields or multiple fields.; ```python; smoke = scene.read('smoke', frame=0, convert_to_backend=False); smoke, velocity_staggered = scene.read(['density', 'velocity'], frame=0); ```; The `convert_to_backend` argument determines how the loaded data is stored.; If `True`, the default backend is used to create the tensors, e.g. TensorFlow or PyTorch.; If `False`, the loaded data will be held as NumPy arrays and future operations will also use NumPy functions unless converted manually. ## Properties; Scenes may contain a property file named `description.json` that stores information about the simulation in an easy-to-parse format.; For further documentation, see the [scene format specification](Scene_Format_Specification.md). Properties can be set using `put_property` and read from `scene.properties`. ## Batches of Scenes; It is recommended to combine data into large tensors whenever possible.; For example, multiple smoke simulatio",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Reading_and_Writing_Data.md:1908,load,loads,1908,docs/Reading_and_Writing_Data.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Reading_and_Writing_Data.md,1,['load'],['loads']
Performance,"# Φ<sub>Flow</sub> Installation. ## Requirements. * [Python](https://www.python.org/downloads/) 3.6 or newer (e.g. [Anaconda](https://www.anaconda.com/products/individual)); * [pip](https://pip.pypa.io/en/stable/) (included in many Python distributions). For GPU acceleration, deep learning and optimization, either; [PyTorch](https://pytorch.org/),; [TensorFlow 2.x](https://www.tensorflow.org/install/) or ; [Jax](https://github.com/google/jax); must be registered with your Python installation.; Note that these also require a CUDA installation with *cuDNN* libraries for GPU execution.; We recommend CUDA 11.0 with cuDNN 8. ## Installing Φ<sub>Flow</sub> using pip. *Note*: If you want to use the Φ<sub>Flow</sub> CUDA operations with TensorFlow, you have to build Φ<sub>Flow</sub> from source instead (see below). The following command installs the latest stable version of Φ<sub>Flow</sub> with GUI support using pip.; ```bash; $ pip install phiflow; ```; To install the latest developer version of Φ<sub>Flow</sub>, run; ```bash; $ pip install --upgrade git+https://github.com/tum-pbs/PhiFlow@develop; ```. Install [PyTorch](https://pytorch.org/), [TensorFlow](https://www.tensorflow.org/install) or [Jax](https://github.com/google/jax#installation) in addition to Φ<sub>Flow</sub> to enable machine learning capabilities and GPU execution. To enable the web UI, also install [`dash`](https://pypi.org/project/dash/).; ```bash; $ pip install dash; ```; If you only run Φ<sub>Flow</sub> inside of Jupyter notebooks, dash is not required as Matplotlib will be used for plots and animations by default. ## Installing Φ<sub>Flow</sub> from Source; The Φ<sub>Flow</sub> source additionally contains demo scripts and tests.; In particular, it includes [`tests/verify.py`](https://github.com/tum-pbs/PhiFlow/blob/develop/tests/verify.py),; which tests your configuration. Clone the git repository by running; ```bash; $ git clone https://github.com/tum-pbs/PhiFlow.git <target directory>; ```; This wi",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md:295,optimiz,optimization,295,docs/Installation_Instructions.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md,1,['optimiz'],['optimization']
Performance,"=0); ```. Subdirectories in the scene can be created using the method [`subpath()`](phi/app/index.html#phi.app.Scene.subpath). The methods `copy_calling_script()` and `copy_src` can be used to copy source files into the `src` folder of a scene. ## Reading from a Scene; Similar to `write()`, the method [`read()`](phi/app/index.html#phi.app.Scene.read) loads `Field` objects that were previously stored.; It can be used to read single fields or multiple fields.; ```python; smoke = scene.read('smoke', frame=0, convert_to_backend=False); smoke, velocity_staggered = scene.read(['density', 'velocity'], frame=0); ```; The `convert_to_backend` argument determines how the loaded data is stored.; If `True`, the default backend is used to create the tensors, e.g. TensorFlow or PyTorch.; If `False`, the loaded data will be held as NumPy arrays and future operations will also use NumPy functions unless converted manually. ## Properties; Scenes may contain a property file named `description.json` that stores information about the simulation in an easy-to-parse format.; For further documentation, see the [scene format specification](Scene_Format_Specification.md). Properties can be set using `put_property` and read from `scene.properties`. ## Batches of Scenes; It is recommended to combine data into large tensors whenever possible.; For example, multiple smoke simulations can be simulated in a data-parallel way by stacking the tensors of the different simulation, assuming all have the same resolution. To facilitate reading and writing batched data, scenes have a batch mode.; A batch of scenes can be created using [`create`](phi/app/index.html#phi.app.Scene.create) with `count>1`.; ```python; scenes = Scene.create('~/data', count=batch_size, batch_dim='batch'); ```; When writing data using `scenes.write()`, the fields are unstacked along *batch_dim* and written to the corresponding scenes. Similarly, reading from a batch of scenes stacks the loaded fields along the batch dimension.; ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Reading_and_Writing_Data.md:3513,load,loaded,3513,docs/Reading_and_Writing_Data.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Reading_and_Writing_Data.md,1,['load'],['loaded']
Performance,"Learn_Potential.html""><img src=""docs/figures/examples/optim/Learn_Potential.png""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/optim/Differentiable_Pressure.html""><img src=""docs/figures/examples/optim/Differentiable_Pressure.jpg""></a></td>; </tr>; <tr>; <td align=""center"">Close packing</td>; <td align=""center"">Learning Φ(x,y)</td>; <td align=""center"">Differentiable pressure</td>; </tr>; </tbody>; </table>. ## Installation. Installation with [pip](https://pypi.org/project/pip/) on [Python 3.6](https://www.python.org/downloads/) and above:; ``` bash; $ pip install phiflow; ```; Install [PyTorch](https://pytorch.org/), [TensorFlow](https://www.tensorflow.org/install) or [Jax](https://github.com/google/jax#installation) in addition to Φ<sub>Flow</sub> to enable machine learning capabilities and GPU execution.; To enable the web UI, also install [Dash](https://pypi.org/project/dash/).; For optimal GPU performance, you may compile the custom CUDA operators, see the [detailed installation instructions](https://tum-pbs.github.io/PhiFlow/Installation_Instructions.html). You can verify your installation by running; ```bash; $ python3 -c ""import phi; phi.verify()""; ```; This will check for compatible PyTorch, Jax and TensorFlow installations as well. ## Features. * Tight integration with PyTorch, Jax and TensorFlow for straightforward neural network training with fully differentiable simulations that can [run on the GPU](https://tum-pbs.github.io/PhiFlow/GPU_Execution.html#enabling-gpu-execution).; * Built-in PDE operations with focus on fluid phenomena, allowing for concise formulation of simulations.; * Flexible, easy-to-use [web interface](https://tum-pbs.github.io/PhiFlow/Web_Interface.html) featuring live visualizations and interactive controls that can affect simulations or network training on the fly.; * Object-oriented, vectorized design for expressive code, ease of use, flexibility and extensibility.; * Reusable simulation code,",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md:9248,perform,performance,9248,README.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md,1,['perform'],['performance']
Performance,"a.; This document explains the file structure of this format. If you only want to read an write data without knowing the specifics, check out the [data documentation](Reading_and_Writing_Data.md). The data format specifies the following elements:. - Arrays hold n-dimensional fields at one point in time (frame); - Scenes contain arrays for different properties and at different frames; - Categories enumerate scenes with similar properties. ## Arrays. Arrays hold the spatial distribution of one property of the simulation at a certain frame.; Each array is stored as one compressed NumPy (`.npz`) file.; The contained NumPy array has the shape `(height, width, components)` in 2D and `(depth, height, width, components)` in 3D where `components` refers to number of dimensions stored per cell,; 1 for scalar fields such as density,; 2 for vector fields in 2D,; 3 for vector fields in 3D.; I.e., the formats are [ZYXC] in 3D, and [YXC] in 2D. As `npz` files can contain multiple arrays, the last entry with a file has to contain the array data to be loaded. The spatial size of the arrays is not the same as the number of valid voxels in the simulation.; In the following, `x`, `y` and `z` refer to the shape of valid entries in centered fields like state density.; There are two conventions for how the array sizes can be derived from these:. - Mantaflow: The outer voxels of centered fields are invalid (depth=z+2, height=y+2, width=x+2). Staggered grids store the component at the lower face of the cell with same index (depth=z+2, height=y+2, width=x+2), the top rows are invalid.; - Φ<sub>Flow</sub>: The arrays of centered fields store only valid values (depth=z, height=y, width=x). Staggered grids store the component at the lower face of the cell with same index, the top-most rows hold partly invalid values (depth=z+1, height=y+1, width=x+1). The filename of an array at a certain frame is:. ```bash; <Property>_<frame>.npz; ```. The property name starts with an upper case letter and the ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Scene_Format_Specification.md:1180,load,loaded,1180,docs/Scene_Format_Specification.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Scene_Format_Specification.md,1,['load'],['loaded']
Performance,"p.Scene.write) stores a dictionary containing fields and their names.; ```python; scene.write({'smoke': smoke, 'velocity': staggered_velocity}, frame=0); ```. Subdirectories in the scene can be created using the method [`subpath()`](phi/app/index.html#phi.app.Scene.subpath). The methods `copy_calling_script()` and `copy_src` can be used to copy source files into the `src` folder of a scene. ## Reading from a Scene; Similar to `write()`, the method [`read()`](phi/app/index.html#phi.app.Scene.read) loads `Field` objects that were previously stored.; It can be used to read single fields or multiple fields.; ```python; smoke = scene.read('smoke', frame=0, convert_to_backend=False); smoke, velocity_staggered = scene.read(['density', 'velocity'], frame=0); ```; The `convert_to_backend` argument determines how the loaded data is stored.; If `True`, the default backend is used to create the tensors, e.g. TensorFlow or PyTorch.; If `False`, the loaded data will be held as NumPy arrays and future operations will also use NumPy functions unless converted manually. ## Properties; Scenes may contain a property file named `description.json` that stores information about the simulation in an easy-to-parse format.; For further documentation, see the [scene format specification](Scene_Format_Specification.md). Properties can be set using `put_property` and read from `scene.properties`. ## Batches of Scenes; It is recommended to combine data into large tensors whenever possible.; For example, multiple smoke simulations can be simulated in a data-parallel way by stacking the tensors of the different simulation, assuming all have the same resolution. To facilitate reading and writing batched data, scenes have a batch mode.; A batch of scenes can be created using [`create`](phi/app/index.html#phi.app.Scene.create) with `count>1`.; ```python; scenes = Scene.create('~/data', count=batch_size, batch_dim='batch'); ```; When writing data using `scenes.write()`, the fields are unstacked along ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Reading_and_Writing_Data.md:2356,load,loaded,2356,docs/Reading_and_Writing_Data.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Reading_and_Writing_Data.md,1,['load'],['loaded']
Performance,"riting tensors directly, the scene writes instances of [`SampledField`](phi/field/index.html#phi.field.SampledField).; These also encode physical size and extrapolation.; The method [`write()`](phi/app/index.html#phi.app.Scene.write) stores a dictionary containing fields and their names.; ```python; scene.write({'smoke': smoke, 'velocity': staggered_velocity}, frame=0); ```. Subdirectories in the scene can be created using the method [`subpath()`](phi/app/index.html#phi.app.Scene.subpath). The methods `copy_calling_script()` and `copy_src` can be used to copy source files into the `src` folder of a scene. ## Reading from a Scene; Similar to `write()`, the method [`read()`](phi/app/index.html#phi.app.Scene.read) loads `Field` objects that were previously stored.; It can be used to read single fields or multiple fields.; ```python; smoke = scene.read('smoke', frame=0, convert_to_backend=False); smoke, velocity_staggered = scene.read(['density', 'velocity'], frame=0); ```; The `convert_to_backend` argument determines how the loaded data is stored.; If `True`, the default backend is used to create the tensors, e.g. TensorFlow or PyTorch.; If `False`, the loaded data will be held as NumPy arrays and future operations will also use NumPy functions unless converted manually. ## Properties; Scenes may contain a property file named `description.json` that stores information about the simulation in an easy-to-parse format.; For further documentation, see the [scene format specification](Scene_Format_Specification.md). Properties can be set using `put_property` and read from `scene.properties`. ## Batches of Scenes; It is recommended to combine data into large tensors whenever possible.; For example, multiple smoke simulations can be simulated in a data-parallel way by stacking the tensors of the different simulation, assuming all have the same resolution. To facilitate reading and writing batched data, scenes have a batch mode.; A batch of scenes can be created using [`create",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Reading_and_Writing_Data.md:2225,load,loaded,2225,docs/Reading_and_Writing_Data.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Reading_and_Writing_Data.md,1,['load'],['loaded']
Performance,"tps://pytorch.org/), [TensorFlow](https://www.tensorflow.org/install) or [Jax](https://github.com/google/jax#installation) in addition to Φ<sub>Flow</sub> to enable machine learning capabilities and GPU execution. To enable the web UI, also install [`dash`](https://pypi.org/project/dash/).; ```bash; $ pip install dash; ```; If you only run Φ<sub>Flow</sub> inside of Jupyter notebooks, dash is not required as Matplotlib will be used for plots and animations by default. ## Installing Φ<sub>Flow</sub> from Source; The Φ<sub>Flow</sub> source additionally contains demo scripts and tests.; In particular, it includes [`tests/verify.py`](https://github.com/tum-pbs/PhiFlow/blob/develop/tests/verify.py),; which tests your configuration. Clone the git repository by running; ```bash; $ git clone https://github.com/tum-pbs/PhiFlow.git <target directory>; ```; This will create the folder \<target directory\> and copy all Φ<sub>Flow</sub> source files into it. With this done, you may compile CUDA kernels for better performance, see below. Finally, Φ<sub>Flow</sub> needs to be added to the Python path.; This can be done in one of multiple ways:. * Marking \<target directory\> as a source directory in your Python IDE.; * Manually adding the cloned directory to the Python path.; * Installing Φ<sub>Flow</sub> using pip: `$ pip install <target directory>/`. This command needs to be rerun after you make changes to the source code. ## Compiling the CUDA Kernels for TensorFlow. The Φ<sub>Flow</sub> source includes several custom CUDA kernels to speed up certain operations when using TensorFlow.; To use these, you must have a [TensorFlow compatible CUDA SDK with cuDNN](https://www.tensorflow.org/install/gpu#software_requirements) as well as a compatible C++ compiler installed.; We strongly recommend using Linux with GCC 7.3.1 (`apt-get install gcc-4.8`) for this.; See the [tested TensorFlow build configurations](https://www.tensorflow.org/install/source#tested_build_configurations). To co",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md:2151,perform,performance,2151,docs/Installation_Instructions.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md,1,['perform'],['performance']
Performance,"ud); is a set of points or finite elements, each associated with a value. [`Noise`](phi/field/#phi.field.Noise); samples random fluctuations of certain sizes.; Currently, it only supports resampling to grids. [`AngularVelocity`](phi/field/#phi.field.AngularVelocity); models a vortex-like velocity field around one or multiple points.; This is useful for sampling the velocity of rotating objects. ## Resampling Fields; Given `val: Field` and `representation: SampledField` with different values structures or different sampling points, ; they can be made compatible using [`at()`](phi/field/#phi.field.Field.at) or `@`.; ```python; val.at(representation, keep_boundary=False) # resamples val at the elements of representation; val @ representation # same as above; ```; These functions return a `Field` of the same type as `representation`.; If they are already sampled at the same elements, the above operations simply return `val`.; Φ<sub>Flow</sub> may choose optimized code paths for specific combinations, such as two grids with equal sample point spacing `dx`. When resampling staggered grids with `keep_boundary=True`, the sample points of the resampled field may be different from `representation`.; This is because the sample points and value tensor shape of staggered grids depends on the extrapolation type. Additionally, there are two functions for sampling field values at given locations. * [`sample`](phi/field/#phi.field.sample) samples the field values at the location of a single geometry or geometry batch.; * [`reduce_sample`](phi/field/#phi.field.reduce_sample) differs from `sample` in that the geometry here describes; staggered locations at which the individual channel components of the field are stored.; For centered grids, `sample` and `reduce_sample` are equal. ## Extrapolations. Sampled fields, such as [`CenteredGrid`](phi/field/#phi.field.CenteredGrid),; [`StaggeredGrid`](phi/field/#phi.field.StaggeredGrid); [`PointCloud`](phi/field/#phi.field.PointCloud) all have ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Fields.md:3784,optimiz,optimized,3784,docs/Fields.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Fields.md,1,['optimiz'],['optimized']
Safety,"# Visualization. ## Interactive User Interface; Φ<sub>Flow</sub> provides interactive user interfaces for live visualization and control.; They allow you to see neural network predictions as the network is being trained or view training data while it is being generated. The following interfaces are currently available:. - [`dash`](Web_Interface.md) web interface hosts a web server; - [`console`](ConsoleUI.md) for command line applications. ### Viewing Data; The primary way to launch an interactive user interface is through; [`view()`](phi/vis/index.html#phi.vis.view).; This function takes a number of `SampledField` instances or variable names and shows them in a new UI.; ```python; from phi.flow import *. data = Domain(x=32, y=32).scalar_grid(Noise()); view(data, gui=None); ```; With `gui=None` (default) an appropriate interface is automatically selected based on the environment and installed packages.; Otherwise, the type of interface can be specified with `gui='dash'` or `gui='console'`. ### Batch Selection; When the viewed data are batched, the GUI will try to plot all examples at once which may result in crowded plots.; This can be avoided using the `select` keyword argument.; It specifies dimensions along which a single slice is displayed, e.g.; ```python; data = Domain(x=32, y=32).scalar_grid(Noise(batch=10, time=33)); view(batched_data, select='batch,time'); ```; For each dimension, a slider will be added to the UI for the user to select which slice to display. ### Controlling Loop Execution; The GUI can be used to let the user control loop execution.; To do this, the user code needs to iterate over ; [`Viewer.range()`](phi/vis/index.html#phi.vis.Viewer.range).; ```python; data = Domain(x=32, y=32).scalar_grid(Noise()); for _ in view(data, play=False).range(10):; data = physics(data); ```; Once the loop is encountered, the execution controls of the GUI can be used to pause execution, run single iterations or break the loop.; With `play=False`, execution stops ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Visualization.md:176,predict,predictions,176,docs/Visualization.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Visualization.md,1,['predict'],['predictions']
Safety,"# What to avoid in Φ<sub>Flow</sub>. The feature sets of PyTorch, Jax and TensorFlow vary, especially when it comes to function operations.; This document outlines what should be avoided in order to keep your code compatible with all backends. ## Limitations of `jit_compile`. Do not do any of the following inside functions that may be jit-compiled. ### Avoid side effects (Jax); Jit-compiled functions should be [pure](https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html#pure-functions).; Do not let any values created inside a jit-compiled function escape to the outside. ### Avoid nested functions and lambdas (Jax); Do not pass temporary functions to any custom-gradient function.; Temporary functions are those whose `id` changes each time the function to be jit-compiled is called.; In particular, do not `solve_linear` temporary function or pass temporary functions as `preprocess_y`. ### Avoid nested `custom_gradient` (PyTorch); Functions that define a custom gradient via `math.custom_gradient` should not call other custom-gradient functions.; This may result in errors when jit-compiling the function. ### Do not jit-compile neural networks (Jax); Do not run neural networks within jit-compiled functions.; The only exception is the `loss_function` passed to `update_weights()`.; This is because Jax requires all parameters including network weights to be declared as parameters but Φ<sub>Flow</sub> does not. ### Do no compute gradients (PyTorch); Do not call `math.gradient` within a jit-compiled function.; PyTorch cannot trace backward passes. ### Do not use `SolveTape` (PyTorch); `SolveTape` does not work while tracing with PyTorch.; This is because PyTorch does not correctly trace `torch.autograd.Function` instances which are required for the implicit backward solve. ## Memory Leaks. Memory leaks can occur when transformed function are repeatedly called with non-compatible arguments.; This can happen with `custom_gradient` but also `jit_compile`, `func",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Known_Issues.md:10,avoid,avoid,10,docs/Known_Issues.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Known_Issues.md,2,['avoid'],"['avoid', 'avoided']"
Safety,"etwork predictions as the network is being trained or view training data while it is being generated. The following interfaces are currently available:. - [`dash`](Web_Interface.md) web interface hosts a web server; - [`console`](ConsoleUI.md) for command line applications. ### Viewing Data; The primary way to launch an interactive user interface is through; [`view()`](phi/vis/index.html#phi.vis.view).; This function takes a number of `SampledField` instances or variable names and shows them in a new UI.; ```python; from phi.flow import *. data = Domain(x=32, y=32).scalar_grid(Noise()); view(data, gui=None); ```; With `gui=None` (default) an appropriate interface is automatically selected based on the environment and installed packages.; Otherwise, the type of interface can be specified with `gui='dash'` or `gui='console'`. ### Batch Selection; When the viewed data are batched, the GUI will try to plot all examples at once which may result in crowded plots.; This can be avoided using the `select` keyword argument.; It specifies dimensions along which a single slice is displayed, e.g.; ```python; data = Domain(x=32, y=32).scalar_grid(Noise(batch=10, time=33)); view(batched_data, select='batch,time'); ```; For each dimension, a slider will be added to the UI for the user to select which slice to display. ### Controlling Loop Execution; The GUI can be used to let the user control loop execution.; To do this, the user code needs to iterate over ; [`Viewer.range()`](phi/vis/index.html#phi.vis.Viewer.range).; ```python; data = Domain(x=32, y=32).scalar_grid(Noise()); for _ in view(data, play=False).range(10):; data = physics(data); ```; Once the loop is encountered, the execution controls of the GUI can be used to pause execution, run single iterations or break the loop.; With `play=False`, execution stops immediately once the loop is hit. The GUI will update the displayed values either after each iteration, or at a configurable refresh rate. ### Loop Recording; The GUI c",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Visualization.md:1154,avoid,avoided,1154,docs/Visualization.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Visualization.md,1,['avoid'],['avoided']
Security,"# Fields. The [`phi.field`](phi/field/) module contains various data structures - such as grids or point clouds - ; and provides a common interface to access them.; This allows the physics to be independent of the underlying data structure to some degree. ## Abstract classes. The [`Field`](phi/field/#phi.field.Field) class is the base class that all fields extend.; It represents a physical quantity `F(x)` that defines a value at every point `x` in n-dimensional space.; The values of `F(x)` may have any number of dimensions, described by the channel dimensions of the Field.; Scalar fields have no channel dimensions, vector fields have one, etc. Important properties:. * `.shape: Shape` contains batch and spatial dimensions from ; * `.spatial_rank: int = len(shape.spatial)` is the dimensionality of physical space. Important methods. * `sample_at(Tensor) -> Tensor` computes the field values at the given points; * `sample_in(Geometry) -> Tensor` computes the field values in the given volumes; * `at(SampledField) -> SampledField` returns a field with the same sample points as the specified representation.; * `unstack(dim) -> tuple[Field]` slices the field along a dimension. Fields implement many mathematical operators, e.g. `+, -, * , /, **`.; The shift operator `@` calls the `at()` method on the left field. The class [`SampledField`](phi/field/#phi.field.SampledField) extends `Field` to form the basis for all fields that explicitly store their data.; The most important sampled fields are ; [`CenteredGrid`](phi/field/#phi.field.CenteredGrid), ; [`StaggeredGrid`](phi/field/#phi.field.StaggeredGrid) and ; [`PointCloud`](phi/field/#phi.field.PointCloud). Important properties:. * `.values: Tensor` data that is used in sampling; * `.geometry: Geometry` sample points as finite volumes; * `.points: Tensor` center points of `elements`; * `.extrapolation: Extrapolation` determines how values outside the region covered by `values` are determined. Non-sampled fields inherit from `Ana",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Fields.md:151,access,access,151,docs/Fields.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Fields.md,1,['access'],['access']
Security,"# Φ<sub>Flow</sub> Web Interface. ![Gui](figures/WebInterface.png). Φ<sub>Flow</sub> provides an interactive web interface that can display 1D, 2D and 3D data.; This GUI uses [Dash](https://plotly.com/dash/) to host a website on a local port.; Opening the website remotely may require port forwarding, e.g. via SSH. The Dash GUI is the default user interface for python modules, i.e. when running a `.py` file as the main module.; It can be specifically selected by setting `gui='dash'` in [`view()`](phi/vis/index.html#phi.vis.view) or [`show()`](phi/vis/index.html#phi.vis.show). ## Tabs & Features. The web interface consists of multiple tabs (web pages) which can be accessed at the upper left corner of each page. - **Home** shows the title and description of the app. It allows the user to choose one field to view and to start/pause the app or step a single frame. Additionally all app-specific controls are shown at the bottom.; - **Side-by-Side** is similar to Home but shows two fields at a time instead of one.; - **Info** displays additional information about the current session such as file paths and run time.; - **Log** displays the complete application log.; - **Φ Board** contains benchmarking functionality. For TensorFlow apps it also allows the user to launch TensorBoard and run the TensorFlow profiler.; - **Help** refers to this page. Tips & Tricks:. - You can run a specified number of frames by entering the number in the text box next to the 'Step' button. If you put a '*' before the number, it is multiplied by the app's `stride` value which can be found in the `info` tab. ## Frame Rate and Refresh Rate. The web interface provides a *Refresh rate* control above the field viewer.; This value describes how often the diagrams in the browser are updated.; It is independent of the framerate specified in `view()` which defines how quickly the user code is executed. ## Configuration. The `show` method supports additional keyword arguments to configure how the App content",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Web_Interface.md:671,access,accessed,671,docs/Web_Interface.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Web_Interface.md,1,['access'],['accessed']
Security,"o let the user control loop execution.; To do this, the user code needs to iterate over ; [`Viewer.range()`](phi/vis/index.html#phi.vis.Viewer.range).; ```python; data = Domain(x=32, y=32).scalar_grid(Noise()); for _ in view(data, play=False).range(10):; data = physics(data); ```; Once the loop is encountered, the execution controls of the GUI can be used to pause execution, run single iterations or break the loop.; With `play=False`, execution stops immediately once the loop is hit. The GUI will update the displayed values either after each iteration, or at a configurable refresh rate. ### Loop Recording; The GUI can also be used to record the values of the viewed variables during loop execution.; Recording is enabled if the stop argument in; [`Viewer.range()`](phi/vis/index.html#phi.vis.Viewer.range); is named, e.g. `viewer.range(frames=10)`.; Then, the values for each viewed variable are accumulated and stacked along a new batch dimension with this name. The recorded values can later be accessed through `Viewer.rec.<variable>`.; ```python; data = Domain(x=32, y=32).scalar_grid(Noise()); viewer = view(data); for _ in viewer.range(frames=10):; data = physics(data); all_data = viewer.rec.data # CenteredGrid (frames=11, x=32, y=32); ```. ### Custom Controls; It is often useful to modify parameters while a script is running,; e.g. adjusting the learning rate to see which values work best.; This can be easily achieved using [`control()`](phi/vis/#phi.vis.control).; ```python; learning_rate = control(0.001); checkpoint_interval = control(100, (1, 200)); ```; `control()` returns the first argument which specifies the initial value.; Consequently, `learning_rate` is a `float` and can be used as such.; The value of the variable will be modified each time the user edits the value.; This can happen while the user code is running. The following control types are supported:. - Linear sliders for `int` and `float` with a suitable value range; - Logarithmic sliders for `float` va",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Visualization.md:2551,access,accessed,2551,docs/Visualization.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Visualization.md,1,['access'],['accessed']
Testability," for changes to `phi.field` except Scene; * `[io]` for changes to Scenes, data layout; * `[physics]` for changes to `phi.physics`; * `[learning]` for non-backend changes to `phi.tf`, `phi.torch`. Example commit header: `[doc] Improve markdown layout`. Commits may be tagged with multiple tags, but this should be used sparingly. Bugfix commits are tagged with the module to which the fixes are applied. ## Style Guide; Style guidelines make the code more uniform and easier to read.; Generally we stick to the Python style guidelines as outlined in [PEP 8](https://www.python.org/dev/peps/pep-0008/), with some minor modifications outlined below. Have a look at the [Zen](https://en.wikipedia.org/wiki/Zen_of_Python) [of Python](https://www.python.org/dev/peps/pep-0020/) for the philosophy behind the rules.; We would like to add the rule *Concise is better than repetitive.*. We use PyLint for static code analysis with specific configuration files for; [demos](../demos/.pylintrc),; [tests](../tests/.pylintrc) and the; [code base](../phi/.pylintrc).; PyLint is part of the automatic testing pipeline.; The warning log can be viewed online by selecting a `Tests` job and expanding the pylint output. ### Docstrings; The [API documentation](https://tum-pbs.github.io/PhiFlow/) for Φ<sub>Flow</sub> is generated using [pdoc](https://pdoc3.github.io/pdoc/).; We use [Google style docstrings](https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings); with Markdown formatting. ```python; """"""; Function description. *Note in italic.*. Example:; ; ```python; def python_example(); ```. Args:; arg1: Description.; Indentation for multi-line description. Returns:; Single output. For multi-output use same format as for args.; """"""; ```. Docstrings for variables are located directly below the public declaration.; ```python; variable: type = value; """""" Docstring for the variable. """"""; ```. ### Additional style choices; - **No line length limit**; long lines are allowed as long as th",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md:2531,test,tests,2531,CONTRIBUTING.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md,1,['test'],['tests']
Testability," layout; * `[physics]` for changes to `phi.physics`; * `[learning]` for non-backend changes to `phi.tf`, `phi.torch`. Example commit header: `[doc] Improve markdown layout`. Commits may be tagged with multiple tags, but this should be used sparingly. Bugfix commits are tagged with the module to which the fixes are applied. ## Style Guide; Style guidelines make the code more uniform and easier to read.; Generally we stick to the Python style guidelines as outlined in [PEP 8](https://www.python.org/dev/peps/pep-0008/), with some minor modifications outlined below. Have a look at the [Zen](https://en.wikipedia.org/wiki/Zen_of_Python) [of Python](https://www.python.org/dev/peps/pep-0020/) for the philosophy behind the rules.; We would like to add the rule *Concise is better than repetitive.*. We use PyLint for static code analysis with specific configuration files for; [demos](../demos/.pylintrc),; [tests](../tests/.pylintrc) and the; [code base](../phi/.pylintrc).; PyLint is part of the automatic testing pipeline.; The warning log can be viewed online by selecting a `Tests` job and expanding the pylint output. ### Docstrings; The [API documentation](https://tum-pbs.github.io/PhiFlow/) for Φ<sub>Flow</sub> is generated using [pdoc](https://pdoc3.github.io/pdoc/).; We use [Google style docstrings](https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings); with Markdown formatting. ```python; """"""; Function description. *Note in italic.*. Example:; ; ```python; def python_example(); ```. Args:; arg1: Description.; Indentation for multi-line description. Returns:; Single output. For multi-output use same format as for args.; """"""; ```. Docstrings for variables are located directly below the public declaration.; ```python; variable: type = value; """""" Docstring for the variable. """"""; ```. ### Additional style choices; - **No line length limit**; long lines are allowed as long as the code is easy to understand.; - **Code comments** should only describe informa",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md:2621,test,testing,2621,CONTRIBUTING.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md,1,['test'],['testing']
Testability,"# ![PhiFlow](docs/figures/Logo_DallE2_3_layout.png). ![Build Status](https://github.com/tum-pbs/PhiFlow/actions/workflows/unit-tests.yml/badge.svg); [![PyPI pyversions](https://img.shields.io/pypi/pyversions/phiflow.svg)](https://pypi.org/project/phiflow/); [![PyPI license](https://img.shields.io/pypi/l/phiflow.svg)](https://pypi.org/project/phiflow/); [![Code Coverage](https://codecov.io/gh/tum-pbs/PhiFlow/branch/develop/graph/badge.svg)](https://codecov.io/gh/tum-pbs/PhiFlow/branch/develop/); [![Google Collab Book](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/tum-pbs/PhiFlow/blob/develop/docs/Fluids_Tutorial.ipynb). Φ<sub>Flow</sub> is an open-source simulation toolkit built for optimization and machine learning applications.; It is written mostly in Python and can be used with; [NumPy](https://numpy.org/),; [PyTorch](https://pytorch.org/),; [Jax](https://github.com/google/jax); or [TensorFlow](https://www.tensorflow.org/).; The close integration with these machine learning frameworks allows it to leverage their automatic differentiation functionality,; making it easy to build end-to-end differentiable functions involving both learning models and physics simulations. ## Examples. ### Grids. <table>; <tbody>; <tr>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Fluid_Logo.html""><img src=""docs/figures/examples/grids/Fluid_Logo.gif""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Wake_Flow.html""><img src=""docs/figures/examples/grids/Wake_Flow.png""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Lid_Driven_Cavity.html""><img src=""docs/figures/examples/grids/Lid_Driven_Cavity.png""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Taylor_Green.html""><img src=""docs/figures/examples/grids/Taylor_Green.jpg""></a></td>; </tr>; <tr>; <td align=""center"">Fluid ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md:127,test,tests,127,README.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md,1,['test'],['tests']
Testability,"# ![PhiFlow](figures/Logo_DallE2_3_layout.png). [**Homepage**](https://github.com/tum-pbs/PhiFlow); &nbsp;&nbsp;&nbsp; [**API**](phi); &nbsp;&nbsp;&nbsp; [**Demos**](https://github.com/tum-pbs/PhiFlow/tree/master/demos); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [<img src=""https://www.tensorflow.org/images/colab_logo_32px.png"" height=16> **Playground**](https://colab.research.google.com/drive/1zBlQbmNguRt-Vt332YvdTqlV4DBcus2S#offline=true&sandboxMode=true). ### Beginner Guides. [Installation Instructions](Installation_Instructions.md):; Requirements, installation, CUDA compilation. [Cookbook](Cookbook.html): Example code snippets for various things. #### Tensors and Dimensions. * [▶️ Introduction Video](https://youtu.be/4nYwL8ZZDK8); * [Introduction Notebook](Math_Introduction.html). #### Differentiation. * [Billiards](Billiards.html); * [Differentiable fluid simulations](Fluids_Tutorial.html). #### Fluids. * [▶️ Introduction Video](https://youtu.be/YRi_c0v3HKs); * [Differentiable fluid simulations](Fluids_Tutorial.html); * [Higher-order incompressible fluids](HigherOrder_Demo.html). #### I/O. * [Introduction to Scenes](IO_with_Scenes.html). #### Neural Networks. * [▶️ Introduction Video](https://youtu.be/aNigTqklCBc); * [Learning to Throw](https://tum-pbs.github.io/PhiFlow/Learn_to_Throw_Tutorial.html). #### Advanced. * [What to Avoid](Known_Issues.html): How to keep your code compatible with PyTorch, TensorFlow and Jax. ### Module Documentation. | Module API | Documentation |; |--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/index.md:438,sandbox,sandboxMode,438,docs/index.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/index.md,1,['sandbox'],['sandboxMode']
Testability,"# Contributing to Φ<sub>Flow</sub>; All contributions are welcome!; You can mail the developers to get in touch. ## Types of contributions we're looking for; We're open to all kind of contributions that improve or extend the Φ<sub>Flow</sub> library.; We especially welcome; - New equations / solvers; - Code optimizations or native (CUDA) implementations.; - Integrations with other computing libraries.; - Bug fixes. Φ<sub>Flow</sub> is a framework, not an application collection.; While we list applications in the [demos](../demos) directory, these should be short and easy to understand. ## How to Contribute; We recommend you to contact the developers before starting your contribution.; There may already be similar internal work or planned changes that would affect how to code the contribution. To contribute code, fork Φ<sub>Flow</sub> on GitHub, make your changes, and submit a pull request.; Make sure that your contribution passes all tests. For commits, we use the following tags in the header:. * `[doc]` for documentation updates; * `[ci]` for CI configuration changes; * `[build]` for changes to the installation; * `[tests]` for adding or changing unit tests; * `[demos]` for adding or changing demo scripts; * `[Φ]` for general changes like version numbers or default imports; ; If the commit modifies the main codebase (`phi/`), use one of the following tags:. * `[vis]` for general changes in `phi.vis` as well as changes to any GUI, e.g. dash, widgets, console.; * `[geom]` for changes to `phi.geom`; * `[field]` for changes to `phi.field` except Scene; * `[io]` for changes to Scenes, data layout; * `[physics]` for changes to `phi.physics`; * `[learning]` for non-backend changes to `phi.tf`, `phi.torch`. Example commit header: `[doc] Improve markdown layout`. Commits may be tagged with multiple tags, but this should be used sparingly. Bugfix commits are tagged with the module to which the fixes are applied. ## Style Guide; Style guidelines make the code more uniform and ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md:948,test,tests,948,CONTRIBUTING.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md,1,['test'],['tests']
Testability,"# Differentiable Geometry. The module [phi.geom](phi/geom) integrates geometric shapes and supports differentiable volumes. The class [`Geometry`](phi/geom/#phi.geom.Geometry) serves as a base for all geometry objects, such as boxes or spheres. All properties of `Geometry` support the use of batch, instance and spatial dimensions.; The corresponding values take the type of [Φ-tensors](./Math.html).; This allows a single `Geometry` object to describe a collection of shapes with varying properties. Important properties:. * `.shape: Shape` all batch and spatial dimensions; * `.rank: int` number of spatial dimensions the geometry lives in; * `.center: Tensor` center points of shape (`*geometry.shape`, `vector`). Important methods:. * `lies_inside(location)` tests if the given points lie inside the geometry; * `approximate_signed_distance(location)` computes the distance of the given points from the surface; * `approximate_fraction_inside(Geometry)` computes the overlap between two geometries. Geometries can be checked for equality using `==` and `!=`.; They should generally be treated as immutable. ## Basic shapes. All built-in basic geometry types support n-dimensional spaces. [`Spheres`](phi/geom/#phi.geom.Sphere) has two defining properties:. * `.center: Tensor` has a single channel dimension called 'vector'.; * `.radius: Tensor` has no channel dimension. Boxes come in multiple variants:. * [`Box`](phi/geom/#phi.geom.Box) stores the lower and upper corner of the box.; * `Cuboid` stores the center position and half-size.; * [`UniformGrid`](phi/geom/#phi.geom.UniformGrid) is similar to `Cuboid` but its spatial dimensions are guaranteed to span a regular grid. [`Points`](phi/geom/#phi.geom.Point) have zero volume and are only characterized by their location. ## Transformations and Operations. Translation: `geometry.shift(delta)`. Rotation: `geometry.rotate(angle)`. Union: `union(geometries)`. Intersection: `intersection(geometries)`. Geometries can be inverted using the ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Geometry.md:764,test,tests,764,docs/Geometry.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Geometry.md,1,['test'],['tests']
Testability,"# PhiFlow. [**Homepage**](https://github.com/tum-pbs/PhiFlow); &nbsp;&nbsp;&nbsp; [**Documentation**](https://tum-pbs.github.io/PhiFlow/); &nbsp;&nbsp;&nbsp; [**API**](https://tum-pbs.github.io/PhiFlow/phi); &nbsp;&nbsp;&nbsp; [**Demos**](https://github.com/tum-pbs/PhiFlow/tree/master/demos); &nbsp;&nbsp;&nbsp; [<img src=""https://www.tensorflow.org/images/colab_logo_32px.png"" height=16> **Fluids Tutorial**](https://colab.research.google.com/github/tum-pbs/PhiFlow/blob/develop/docs/Fluids_Tutorial.ipynb#offline=true&sandboxMode=true); &nbsp;&nbsp;&nbsp; [<img src=""https://www.tensorflow.org/images/colab_logo_32px.png"" height=16> **Playground**](https://colab.research.google.com/drive/1zBlQbmNguRt-Vt332YvdTqlV4DBcus2S#offline=true&sandboxMode=true). PhiFlow is an open-source simulation toolkit built for optimization and machine learning applications.; It is written mostly in Python and can be used with NumPy, TensorFlow, Jax or PyTorch.; The close integration with machine learning frameworks allows it to leverage their automatic differentiation functionality,; making it easy to build end-to-end differentiable functions involving both learning models and physics simulations. See the [installation Instructions](https://tum-pbs.github.io/PhiFlow/Installation_Instructions.html) on how to compile the optional custom CUDA operations.; ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Package_Info.md:521,sandbox,sandboxMode,521,docs/Package_Info.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Package_Info.md,2,['sandbox'],['sandboxMode']
Testability,"-backend changes to `phi.tf`, `phi.torch`. Example commit header: `[doc] Improve markdown layout`. Commits may be tagged with multiple tags, but this should be used sparingly. Bugfix commits are tagged with the module to which the fixes are applied. ## Style Guide; Style guidelines make the code more uniform and easier to read.; Generally we stick to the Python style guidelines as outlined in [PEP 8](https://www.python.org/dev/peps/pep-0008/), with some minor modifications outlined below. Have a look at the [Zen](https://en.wikipedia.org/wiki/Zen_of_Python) [of Python](https://www.python.org/dev/peps/pep-0020/) for the philosophy behind the rules.; We would like to add the rule *Concise is better than repetitive.*. We use PyLint for static code analysis with specific configuration files for; [demos](../demos/.pylintrc),; [tests](../tests/.pylintrc) and the; [code base](../phi/.pylintrc).; PyLint is part of the automatic testing pipeline.; The warning log can be viewed online by selecting a `Tests` job and expanding the pylint output. ### Docstrings; The [API documentation](https://tum-pbs.github.io/PhiFlow/) for Φ<sub>Flow</sub> is generated using [pdoc](https://pdoc3.github.io/pdoc/).; We use [Google style docstrings](https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings); with Markdown formatting. ```python; """"""; Function description. *Note in italic.*. Example:; ; ```python; def python_example(); ```. Args:; arg1: Description.; Indentation for multi-line description. Returns:; Single output. For multi-output use same format as for args.; """"""; ```. Docstrings for variables are located directly below the public declaration.; ```python; variable: type = value; """""" Docstring for the variable. """"""; ```. ### Additional style choices; - **No line length limit**; long lines are allowed as long as the code is easy to understand.; - **Code comments** should only describe information that is not obvious from the code. They should be used sparingly as t",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md:2652,log,log,2652,CONTRIBUTING.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md,1,['log'],['log']
Testability,"/dash/) to host a website on a local port.; Opening the website remotely may require port forwarding, e.g. via SSH. The Dash GUI is the default user interface for python modules, i.e. when running a `.py` file as the main module.; It can be specifically selected by setting `gui='dash'` in [`view()`](phi/vis/index.html#phi.vis.view) or [`show()`](phi/vis/index.html#phi.vis.show). ## Tabs & Features. The web interface consists of multiple tabs (web pages) which can be accessed at the upper left corner of each page. - **Home** shows the title and description of the app. It allows the user to choose one field to view and to start/pause the app or step a single frame. Additionally all app-specific controls are shown at the bottom.; - **Side-by-Side** is similar to Home but shows two fields at a time instead of one.; - **Info** displays additional information about the current session such as file paths and run time.; - **Log** displays the complete application log.; - **Φ Board** contains benchmarking functionality. For TensorFlow apps it also allows the user to launch TensorBoard and run the TensorFlow profiler.; - **Help** refers to this page. Tips & Tricks:. - You can run a specified number of frames by entering the number in the text box next to the 'Step' button. If you put a '*' before the number, it is multiplied by the app's `stride` value which can be found in the `info` tab. ## Frame Rate and Refresh Rate. The web interface provides a *Refresh rate* control above the field viewer.; This value describes how often the diagrams in the browser are updated.; It is independent of the framerate specified in `view()` which defines how quickly the user code is executed. ## Configuration. The `show` method supports additional keyword arguments to configure how the App contents are displayed. The `display` parameter defines which fields are displayed initially, e.g. `display='Density'` or `display=('Density', 'Velocity')`. ### Further configuration parameters. | Parameter",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Web_Interface.md:1199,benchmark,benchmarking,1199,docs/Web_Interface.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Web_Interface.md,1,['benchmark'],['benchmarking']
Testability,"and interactive controls that can affect simulations or network training on the fly.; * Object-oriented, vectorized design for expressive code, ease of use, flexibility and extensibility.; * Reusable simulation code, independent of backend and dimensionality, i.e. the exact same code can run a 2D fluid sim using NumPy and a 3D fluid sim on the GPU using TensorFlow or PyTorch.; * High-level linear equation solver with automated sparse matrix generation. ## 📖 Documentation and Tutorials; [**Documentation Overview**](https://tum-pbs.github.io/PhiFlow/); &nbsp; • &nbsp; [**▶ YouTube Tutorials**](https://www.youtube.com/playlist?list=PLYLhRkuWBmZ5R6hYzusA2JBIUPFEE755O); &nbsp; • &nbsp; [**API**](https://tum-pbs.github.io/PhiFlow/phi/); &nbsp; • &nbsp; [**Demos**](https://github.com/tum-pbs/PhiFlow/tree/master/demos); &nbsp; • &nbsp; [<img src=""https://www.tensorflow.org/images/colab_logo_32px.png"" height=16> **Playground**](https://colab.research.google.com/drive/1zBlQbmNguRt-Vt332YvdTqlV4DBcus2S#offline=true&sandboxMode=true). Φ-Flow builds on the tensor functionality from [Φ<sub>ML</sub>](https://github.com/tum-pbs/PhiML).; To understand how Φ<sub>Flow</sub> works, check [named and typed dimensions](https://tum-pbs.github.io/PhiML/Introduction.html) first. ### Getting started. * [Installation instructions](https://tum-pbs.github.io/PhiFlow/Installation_Instructions.html); * [<img src=""https://www.tensorflow.org/images/colab_logo_32px.png"" height=16>](https://colab.research.google.com/github/tum-pbs/PhiFlow/blob/develop/docs/Math_Introduction.ipynb) [Tensors](https://tum-pbs.github.io/PhiFlow/Math_Introduction.html); * [<img src=""https://www.tensorflow.org/images/colab_logo_32px.png"" height=16>](https://colab.research.google.com/github/tum-pbs/PhiFlow/blob/develop/docs/Fluids_Tutorial.ipynb) [Fluids](https://tum-pbs.github.io/PhiFlow/Fluids_Tutorial.html); * [<img src=""https://www.tensorflow.org/images/colab_logo_32px.png"" height=16>](https://colab.research.google.com/gi",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md:11102,sandbox,sandboxMode,11102,README.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md,1,['sandbox'],['sandboxMode']
Testability,"ath.; * Installing Φ<sub>Flow</sub> using pip: `$ pip install <target directory>/`. This command needs to be rerun after you make changes to the source code. ## Compiling the CUDA Kernels for TensorFlow. The Φ<sub>Flow</sub> source includes several custom CUDA kernels to speed up certain operations when using TensorFlow.; To use these, you must have a [TensorFlow compatible CUDA SDK with cuDNN](https://www.tensorflow.org/install/gpu#software_requirements) as well as a compatible C++ compiler installed.; We strongly recommend using Linux with GCC 7.3.1 (`apt-get install gcc-4.8`) for this.; See the [tested TensorFlow build configurations](https://www.tensorflow.org/install/source#tested_build_configurations). To compile the CUDA kernels for TensorFlow, clone the repository as described above, then run `$ python <target directory>/setup.py tf_cuda`.; This will add the compiled CUDA binaries to the \<target directory\>. ## Verifying the installation; If you have installed Φ<sub>Flow</sub> from source, execute the included `verify.py` script.; ```bash; $ python <Φ-Flow directory>/tests/verify.py; ```; Otherwise, run the following Python code.; ```python; import phi; phi.verify(); ```; Or from the command line:; ```bash; $ python3 -c ""import phi; phi.verify()""; ```; If Φ<sub>Flow</sub> and dependencies are installed correctly, you should see the Φ<sub>Flow</sub> version, followed by additional information on the components at the end of the console output. ### Unit tests. PyTest is required to run the unit tests. To install it, run `$ pip install pytest`. Some unit tests require TensorFlow and PyTorch.; Make sure, both are installed before running the tests. Execute `$ pytest <target directory>/tests/commit` to run the normal tests.; The result of this should match the automated tests run by Travis CI which are linked on the main GitHub page. You can run the additional tests; ```bash; $ pytest <target directory>/tests/gpu; $ pytest <target directory>/tests/release; ```; ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md:3504,test,tests,3504,docs/Installation_Instructions.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md,11,['test'],['tests']
Testability,"below). The following command installs the latest stable version of Φ<sub>Flow</sub> with GUI support using pip.; ```bash; $ pip install phiflow; ```; To install the latest developer version of Φ<sub>Flow</sub>, run; ```bash; $ pip install --upgrade git+https://github.com/tum-pbs/PhiFlow@develop; ```. Install [PyTorch](https://pytorch.org/), [TensorFlow](https://www.tensorflow.org/install) or [Jax](https://github.com/google/jax#installation) in addition to Φ<sub>Flow</sub> to enable machine learning capabilities and GPU execution. To enable the web UI, also install [`dash`](https://pypi.org/project/dash/).; ```bash; $ pip install dash; ```; If you only run Φ<sub>Flow</sub> inside of Jupyter notebooks, dash is not required as Matplotlib will be used for plots and animations by default. ## Installing Φ<sub>Flow</sub> from Source; The Φ<sub>Flow</sub> source additionally contains demo scripts and tests.; In particular, it includes [`tests/verify.py`](https://github.com/tum-pbs/PhiFlow/blob/develop/tests/verify.py),; which tests your configuration. Clone the git repository by running; ```bash; $ git clone https://github.com/tum-pbs/PhiFlow.git <target directory>; ```; This will create the folder \<target directory\> and copy all Φ<sub>Flow</sub> source files into it. With this done, you may compile CUDA kernels for better performance, see below. Finally, Φ<sub>Flow</sub> needs to be added to the Python path.; This can be done in one of multiple ways:. * Marking \<target directory\> as a source directory in your Python IDE.; * Manually adding the cloned directory to the Python path.; * Installing Φ<sub>Flow</sub> using pip: `$ pip install <target directory>/`. This command needs to be rerun after you make changes to the source code. ## Compiling the CUDA Kernels for TensorFlow. The Φ<sub>Flow</sub> source includes several custom CUDA kernels to speed up certain operations when using TensorFlow.; To use these, you must have a [TensorFlow compatible CUDA SDK with cuDNN](ht",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md:1821,test,tests,1821,docs/Installation_Instructions.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md,1,['test'],['tests']
Testability,"d 3D data.; This GUI uses [Dash](https://plotly.com/dash/) to host a website on a local port.; Opening the website remotely may require port forwarding, e.g. via SSH. The Dash GUI is the default user interface for python modules, i.e. when running a `.py` file as the main module.; It can be specifically selected by setting `gui='dash'` in [`view()`](phi/vis/index.html#phi.vis.view) or [`show()`](phi/vis/index.html#phi.vis.show). ## Tabs & Features. The web interface consists of multiple tabs (web pages) which can be accessed at the upper left corner of each page. - **Home** shows the title and description of the app. It allows the user to choose one field to view and to start/pause the app or step a single frame. Additionally all app-specific controls are shown at the bottom.; - **Side-by-Side** is similar to Home but shows two fields at a time instead of one.; - **Info** displays additional information about the current session such as file paths and run time.; - **Log** displays the complete application log.; - **Φ Board** contains benchmarking functionality. For TensorFlow apps it also allows the user to launch TensorBoard and run the TensorFlow profiler.; - **Help** refers to this page. Tips & Tricks:. - You can run a specified number of frames by entering the number in the text box next to the 'Step' button. If you put a '*' before the number, it is multiplied by the app's `stride` value which can be found in the `info` tab. ## Frame Rate and Refresh Rate. The web interface provides a *Refresh rate* control above the field viewer.; This value describes how often the diagrams in the browser are updated.; It is independent of the framerate specified in `view()` which defines how quickly the user code is executed. ## Configuration. The `show` method supports additional keyword arguments to configure how the App contents are displayed. The `display` parameter defines which fields are displayed initially, e.g. `display='Density'` or `display=('Density', 'Velocity')`",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Web_Interface.md:1170,log,log,1170,docs/Web_Interface.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Web_Interface.md,1,['log'],['log']
Testability,"e latest stable version of Φ<sub>Flow</sub> with GUI support using pip.; ```bash; $ pip install phiflow; ```; To install the latest developer version of Φ<sub>Flow</sub>, run; ```bash; $ pip install --upgrade git+https://github.com/tum-pbs/PhiFlow@develop; ```. Install [PyTorch](https://pytorch.org/), [TensorFlow](https://www.tensorflow.org/install) or [Jax](https://github.com/google/jax#installation) in addition to Φ<sub>Flow</sub> to enable machine learning capabilities and GPU execution. To enable the web UI, also install [`dash`](https://pypi.org/project/dash/).; ```bash; $ pip install dash; ```; If you only run Φ<sub>Flow</sub> inside of Jupyter notebooks, dash is not required as Matplotlib will be used for plots and animations by default. ## Installing Φ<sub>Flow</sub> from Source; The Φ<sub>Flow</sub> source additionally contains demo scripts and tests.; In particular, it includes [`tests/verify.py`](https://github.com/tum-pbs/PhiFlow/blob/develop/tests/verify.py),; which tests your configuration. Clone the git repository by running; ```bash; $ git clone https://github.com/tum-pbs/PhiFlow.git <target directory>; ```; This will create the folder \<target directory\> and copy all Φ<sub>Flow</sub> source files into it. With this done, you may compile CUDA kernels for better performance, see below. Finally, Φ<sub>Flow</sub> needs to be added to the Python path.; This can be done in one of multiple ways:. * Marking \<target directory\> as a source directory in your Python IDE.; * Manually adding the cloned directory to the Python path.; * Installing Φ<sub>Flow</sub> using pip: `$ pip install <target directory>/`. This command needs to be rerun after you make changes to the source code. ## Compiling the CUDA Kernels for TensorFlow. The Φ<sub>Flow</sub> source includes several custom CUDA kernels to speed up certain operations when using TensorFlow.; To use these, you must have a [TensorFlow compatible CUDA SDK with cuDNN](https://www.tensorflow.org/install/gpu#softw",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md:1846,test,tests,1846,docs/Installation_Instructions.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md,1,['test'],['tests']
Testability,"low, you have to build Φ<sub>Flow</sub> from source instead (see below). The following command installs the latest stable version of Φ<sub>Flow</sub> with GUI support using pip.; ```bash; $ pip install phiflow; ```; To install the latest developer version of Φ<sub>Flow</sub>, run; ```bash; $ pip install --upgrade git+https://github.com/tum-pbs/PhiFlow@develop; ```. Install [PyTorch](https://pytorch.org/), [TensorFlow](https://www.tensorflow.org/install) or [Jax](https://github.com/google/jax#installation) in addition to Φ<sub>Flow</sub> to enable machine learning capabilities and GPU execution. To enable the web UI, also install [`dash`](https://pypi.org/project/dash/).; ```bash; $ pip install dash; ```; If you only run Φ<sub>Flow</sub> inside of Jupyter notebooks, dash is not required as Matplotlib will be used for plots and animations by default. ## Installing Φ<sub>Flow</sub> from Source; The Φ<sub>Flow</sub> source additionally contains demo scripts and tests.; In particular, it includes [`tests/verify.py`](https://github.com/tum-pbs/PhiFlow/blob/develop/tests/verify.py),; which tests your configuration. Clone the git repository by running; ```bash; $ git clone https://github.com/tum-pbs/PhiFlow.git <target directory>; ```; This will create the folder \<target directory\> and copy all Φ<sub>Flow</sub> source files into it. With this done, you may compile CUDA kernels for better performance, see below. Finally, Φ<sub>Flow</sub> needs to be added to the Python path.; This can be done in one of multiple ways:. * Marking \<target directory\> as a source directory in your Python IDE.; * Manually adding the cloned directory to the Python path.; * Installing Φ<sub>Flow</sub> using pip: `$ pip install <target directory>/`. This command needs to be rerun after you make changes to the source code. ## Compiling the CUDA Kernels for TensorFlow. The Φ<sub>Flow</sub> source includes several custom CUDA kernels to speed up certain operations when using TensorFlow.; To use thes",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md:1755,test,tests,1755,docs/Installation_Instructions.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md,1,['test'],['tests']
Testability,"o leverage their automatic differentiation functionality,; making it easy to build end-to-end differentiable functions involving both learning models and physics simulations. ## Examples. ### Grids. <table>; <tbody>; <tr>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Fluid_Logo.html""><img src=""docs/figures/examples/grids/Fluid_Logo.gif""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Wake_Flow.html""><img src=""docs/figures/examples/grids/Wake_Flow.png""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Lid_Driven_Cavity.html""><img src=""docs/figures/examples/grids/Lid_Driven_Cavity.png""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Taylor_Green.html""><img src=""docs/figures/examples/grids/Taylor_Green.jpg""></a></td>; </tr>; <tr>; <td align=""center"">Fluid logo</td>; <td align=""center"">Wake flow</td>; <td align=""center"">Lid-driven cavity</td>; <td align=""center"">Taylor-Green</td>; </tr>; <tr>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Smoke_Plume.html""><img src=""docs/figures/examples/grids/Smoke_Plume.png""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Variable_Boundaries.html""><img src=""docs/figures/examples/grids/Variable_Boundaries.jpg""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Batched_Smoke.html""><img src=""docs/figures/examples/grids/Batched_Smoke.png""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Moving_Obstacles.html""><img src=""docs/figures/examples/grids/Moving_Obstacles.png""></a></td>; </tr>; <tr>; <td align=""center"">Smoke plume</td>; <td align=""center"">Variable boundaries</td>; <td align=""center"">Parallel simulations</td>; <td align=""center"">Moving obstacles</td>; </tr>; <tr>; <td style=""width: 25%;""><a href=""https",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md:2001,log,logo,2001,README.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md,1,['log'],['logo']
Testability,"om`; * `[field]` for changes to `phi.field` except Scene; * `[io]` for changes to Scenes, data layout; * `[physics]` for changes to `phi.physics`; * `[learning]` for non-backend changes to `phi.tf`, `phi.torch`. Example commit header: `[doc] Improve markdown layout`. Commits may be tagged with multiple tags, but this should be used sparingly. Bugfix commits are tagged with the module to which the fixes are applied. ## Style Guide; Style guidelines make the code more uniform and easier to read.; Generally we stick to the Python style guidelines as outlined in [PEP 8](https://www.python.org/dev/peps/pep-0008/), with some minor modifications outlined below. Have a look at the [Zen](https://en.wikipedia.org/wiki/Zen_of_Python) [of Python](https://www.python.org/dev/peps/pep-0020/) for the philosophy behind the rules.; We would like to add the rule *Concise is better than repetitive.*. We use PyLint for static code analysis with specific configuration files for; [demos](../demos/.pylintrc),; [tests](../tests/.pylintrc) and the; [code base](../phi/.pylintrc).; PyLint is part of the automatic testing pipeline.; The warning log can be viewed online by selecting a `Tests` job and expanding the pylint output. ### Docstrings; The [API documentation](https://tum-pbs.github.io/PhiFlow/) for Φ<sub>Flow</sub> is generated using [pdoc](https://pdoc3.github.io/pdoc/).; We use [Google style docstrings](https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings); with Markdown formatting. ```python; """"""; Function description. *Note in italic.*. Example:; ; ```python; def python_example(); ```. Args:; arg1: Description.; Indentation for multi-line description. Returns:; Single output. For multi-output use same format as for args.; """"""; ```. Docstrings for variables are located directly below the public declaration.; ```python; variable: type = value; """""" Docstring for the variable. """"""; ```. ### Additional style choices; - **No line length limit**; long lines are allowe",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md:2521,test,tests,2521,CONTRIBUTING.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md,1,['test'],['tests']
Testability,"on. The following content was created by running the [simpleplume.py](../demos/smoke_plume.py) demo and can be used as a reference. ```json; {; ""instigator"": ""App"",; ""traits"": [],; ""app"": ""smoke_plume.py"",; ""app_path"": ""~/phiflow/demos/smoke_plume.py"",; ""name"": ""Simpleplume"",; ""description"": """",; ""all_fields"": [; ""Density"",; ""Velocity""; ],; ""actions"": [],; ""controls"": [],; ""summary"": ""Simpleplume"",; ""time_of_writing"": 0,; ""world"": {; ""age"": 0.0,; ""states"": [; {; ""age"": 0.0,; ""domain"": {; ""grid"": {; ""dimensions"": [; 80,; 64; ],; ""box"": {; ""origin"": [; 0,; 0; ],; ""size"": [; 80,; 64; ],; ""type"": ""Box"",; ""module"": ""phi.physics.geom""; },; ""type"": ""Grid"",; ""module"": ""phi.physics.geom""; },; ""boundaries"": {; ""solid"": true,; ""friction"": 0.0,; ""extrapolate_fluid"": true,; ""global_velocity"": 0.0,; ""local_velocity"": 0.0,; ""type"": ""Material"",; ""module"": ""phi.physics.material""; },; ""type"": ""Domain"",; ""module"": ""phi.physics.domain""; },; ""gravity"": -9.81,; ""buoyancy_factor"": 0.1,; ""conserve_density"": false,; ""type"": ""Smoke"",; ""module"": ""phi.physics.smoke""; },; {; ""age"": 0.0,; ""geometry"": {; ""center"": [; 10,; 32; ],; ""radius"": 5,; ""type"": ""Sphere"",; ""module"": ""phi.physics.geom""; },; ""velocity"": 0,; ""rate"": 0.2,; ""type"": ""Inflow"",; ""module"": ""phi.physics.objects""; }; ],; ""type"": ""StateCollection"",; ""module"": ""phi.physics.collective""; }; }; ```. Φ<sub>Flow</sub> writes all simulation properties into the category `world`. Source files can be added to an optional `src` directory, images to an optional `images` directory.; Optionally, a log file can be added to the scene directory as `info.log`. Scenes can contain any number of additional subdirectories for specific information. ## Categories. Categories are used to organize scenes that belong together. Categories are realized simply as a directory that contains scene directories. It can have any name.; Scenes within that directory are assumed to have the same properties and the same number of frames but these restrictions are optional.; ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Scene_Format_Specification.md:4197,log,log,4197,docs/Scene_Format_Specification.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Scene_Format_Specification.md,2,['log'],['log']
Testability,"ons that improve or extend the Φ<sub>Flow</sub> library.; We especially welcome; - New equations / solvers; - Code optimizations or native (CUDA) implementations.; - Integrations with other computing libraries.; - Bug fixes. Φ<sub>Flow</sub> is a framework, not an application collection.; While we list applications in the [demos](../demos) directory, these should be short and easy to understand. ## How to Contribute; We recommend you to contact the developers before starting your contribution.; There may already be similar internal work or planned changes that would affect how to code the contribution. To contribute code, fork Φ<sub>Flow</sub> on GitHub, make your changes, and submit a pull request.; Make sure that your contribution passes all tests. For commits, we use the following tags in the header:. * `[doc]` for documentation updates; * `[ci]` for CI configuration changes; * `[build]` for changes to the installation; * `[tests]` for adding or changing unit tests; * `[demos]` for adding or changing demo scripts; * `[Φ]` for general changes like version numbers or default imports; ; If the commit modifies the main codebase (`phi/`), use one of the following tags:. * `[vis]` for general changes in `phi.vis` as well as changes to any GUI, e.g. dash, widgets, console.; * `[geom]` for changes to `phi.geom`; * `[field]` for changes to `phi.field` except Scene; * `[io]` for changes to Scenes, data layout; * `[physics]` for changes to `phi.physics`; * `[learning]` for non-backend changes to `phi.tf`, `phi.torch`. Example commit header: `[doc] Improve markdown layout`. Commits may be tagged with multiple tags, but this should be used sparingly. Bugfix commits are tagged with the module to which the fixes are applied. ## Style Guide; Style guidelines make the code more uniform and easier to read.; Generally we stick to the Python style guidelines as outlined in [PEP 8](https://www.python.org/dev/peps/pep-0008/), with some minor modifications outlined below. Have a look at",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md:1135,test,tests,1135,CONTRIBUTING.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md,2,['test'],['tests']
Testability,"ory\> and copy all Φ<sub>Flow</sub> source files into it. With this done, you may compile CUDA kernels for better performance, see below. Finally, Φ<sub>Flow</sub> needs to be added to the Python path.; This can be done in one of multiple ways:. * Marking \<target directory\> as a source directory in your Python IDE.; * Manually adding the cloned directory to the Python path.; * Installing Φ<sub>Flow</sub> using pip: `$ pip install <target directory>/`. This command needs to be rerun after you make changes to the source code. ## Compiling the CUDA Kernels for TensorFlow. The Φ<sub>Flow</sub> source includes several custom CUDA kernels to speed up certain operations when using TensorFlow.; To use these, you must have a [TensorFlow compatible CUDA SDK with cuDNN](https://www.tensorflow.org/install/gpu#software_requirements) as well as a compatible C++ compiler installed.; We strongly recommend using Linux with GCC 7.3.1 (`apt-get install gcc-4.8`) for this.; See the [tested TensorFlow build configurations](https://www.tensorflow.org/install/source#tested_build_configurations). To compile the CUDA kernels for TensorFlow, clone the repository as described above, then run `$ python <target directory>/setup.py tf_cuda`.; This will add the compiled CUDA binaries to the \<target directory\>. ## Verifying the installation; If you have installed Φ<sub>Flow</sub> from source, execute the included `verify.py` script.; ```bash; $ python <Φ-Flow directory>/tests/verify.py; ```; Otherwise, run the following Python code.; ```python; import phi; phi.verify(); ```; Or from the command line:; ```bash; $ python3 -c ""import phi; phi.verify()""; ```; If Φ<sub>Flow</sub> and dependencies are installed correctly, you should see the Φ<sub>Flow</sub> version, followed by additional information on the components at the end of the console output. ### Unit tests. PyTest is required to run the unit tests. To install it, run `$ pip install pytest`. Some unit tests require TensorFlow and PyTorch.; M",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md:3017,test,tested,3017,docs/Installation_Instructions.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md,1,['test'],['tested']
Testability,"pip. *Note*: If you want to use the Φ<sub>Flow</sub> CUDA operations with TensorFlow, you have to build Φ<sub>Flow</sub> from source instead (see below). The following command installs the latest stable version of Φ<sub>Flow</sub> with GUI support using pip.; ```bash; $ pip install phiflow; ```; To install the latest developer version of Φ<sub>Flow</sub>, run; ```bash; $ pip install --upgrade git+https://github.com/tum-pbs/PhiFlow@develop; ```. Install [PyTorch](https://pytorch.org/), [TensorFlow](https://www.tensorflow.org/install) or [Jax](https://github.com/google/jax#installation) in addition to Φ<sub>Flow</sub> to enable machine learning capabilities and GPU execution. To enable the web UI, also install [`dash`](https://pypi.org/project/dash/).; ```bash; $ pip install dash; ```; If you only run Φ<sub>Flow</sub> inside of Jupyter notebooks, dash is not required as Matplotlib will be used for plots and animations by default. ## Installing Φ<sub>Flow</sub> from Source; The Φ<sub>Flow</sub> source additionally contains demo scripts and tests.; In particular, it includes [`tests/verify.py`](https://github.com/tum-pbs/PhiFlow/blob/develop/tests/verify.py),; which tests your configuration. Clone the git repository by running; ```bash; $ git clone https://github.com/tum-pbs/PhiFlow.git <target directory>; ```; This will create the folder \<target directory\> and copy all Φ<sub>Flow</sub> source files into it. With this done, you may compile CUDA kernels for better performance, see below. Finally, Φ<sub>Flow</sub> needs to be added to the Python path.; This can be done in one of multiple ways:. * Marking \<target directory\> as a source directory in your Python IDE.; * Manually adding the cloned directory to the Python path.; * Installing Φ<sub>Flow</sub> using pip: `$ pip install <target directory>/`. This command needs to be rerun after you make changes to the source code. ## Compiling the CUDA Kernels for TensorFlow. The Φ<sub>Flow</sub> source includes several custo",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md:1718,test,tests,1718,docs/Installation_Instructions.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md,1,['test'],['tests']
Usability," CI configuration changes; * `[build]` for changes to the installation; * `[tests]` for adding or changing unit tests; * `[demos]` for adding or changing demo scripts; * `[Φ]` for general changes like version numbers or default imports; ; If the commit modifies the main codebase (`phi/`), use one of the following tags:. * `[vis]` for general changes in `phi.vis` as well as changes to any GUI, e.g. dash, widgets, console.; * `[geom]` for changes to `phi.geom`; * `[field]` for changes to `phi.field` except Scene; * `[io]` for changes to Scenes, data layout; * `[physics]` for changes to `phi.physics`; * `[learning]` for non-backend changes to `phi.tf`, `phi.torch`. Example commit header: `[doc] Improve markdown layout`. Commits may be tagged with multiple tags, but this should be used sparingly. Bugfix commits are tagged with the module to which the fixes are applied. ## Style Guide; Style guidelines make the code more uniform and easier to read.; Generally we stick to the Python style guidelines as outlined in [PEP 8](https://www.python.org/dev/peps/pep-0008/), with some minor modifications outlined below. Have a look at the [Zen](https://en.wikipedia.org/wiki/Zen_of_Python) [of Python](https://www.python.org/dev/peps/pep-0020/) for the philosophy behind the rules.; We would like to add the rule *Concise is better than repetitive.*. We use PyLint for static code analysis with specific configuration files for; [demos](../demos/.pylintrc),; [tests](../tests/.pylintrc) and the; [code base](../phi/.pylintrc).; PyLint is part of the automatic testing pipeline.; The warning log can be viewed online by selecting a `Tests` job and expanding the pylint output. ### Docstrings; The [API documentation](https://tum-pbs.github.io/PhiFlow/) for Φ<sub>Flow</sub> is generated using [pdoc](https://pdoc3.github.io/pdoc/).; We use [Google style docstrings](https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings); with Markdown formatting. ```python; """"""; Function descr",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md:2057,guid,guidelines,2057,CONTRIBUTING.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md,1,['guid'],['guidelines']
Usability," let any values created inside a jit-compiled function escape to the outside. ### Avoid nested functions and lambdas (Jax); Do not pass temporary functions to any custom-gradient function.; Temporary functions are those whose `id` changes each time the function to be jit-compiled is called.; In particular, do not `solve_linear` temporary function or pass temporary functions as `preprocess_y`. ### Avoid nested `custom_gradient` (PyTorch); Functions that define a custom gradient via `math.custom_gradient` should not call other custom-gradient functions.; This may result in errors when jit-compiling the function. ### Do not jit-compile neural networks (Jax); Do not run neural networks within jit-compiled functions.; The only exception is the `loss_function` passed to `update_weights()`.; This is because Jax requires all parameters including network weights to be declared as parameters but Φ<sub>Flow</sub> does not. ### Do no compute gradients (PyTorch); Do not call `math.gradient` within a jit-compiled function.; PyTorch cannot trace backward passes. ### Do not use `SolveTape` (PyTorch); `SolveTape` does not work while tracing with PyTorch.; This is because PyTorch does not correctly trace `torch.autograd.Function` instances which are required for the implicit backward solve. ## Memory Leaks. Memory leaks can occur when transformed function are repeatedly called with non-compatible arguments.; This can happen with `custom_gradient` but also `jit_compile`, `functional_gradient` or `hessian`.; Each time such a function is called with new keyword arguments or tensors of new shapes, a record is stored with that function.; For top-level functions, such as `solve_linear`, that record will be held indefinitely.; In cases, where this becomes an issue, you can manually clear the these records or `jit_compile` the function producing the repeated calls. To clear the cached mappings of a transformed function `f`, use; ```python; f.traces.clear(); f.recorded_mappings.clear(); ```; ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Known_Issues.md:2307,clear,clear,2307,docs/Known_Issues.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Known_Issues.md,4,['clear'],['clear']
Usability,"# ![PhiFlow](docs/figures/Logo_DallE2_3_layout.png). ![Build Status](https://github.com/tum-pbs/PhiFlow/actions/workflows/unit-tests.yml/badge.svg); [![PyPI pyversions](https://img.shields.io/pypi/pyversions/phiflow.svg)](https://pypi.org/project/phiflow/); [![PyPI license](https://img.shields.io/pypi/l/phiflow.svg)](https://pypi.org/project/phiflow/); [![Code Coverage](https://codecov.io/gh/tum-pbs/PhiFlow/branch/develop/graph/badge.svg)](https://codecov.io/gh/tum-pbs/PhiFlow/branch/develop/); [![Google Collab Book](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/tum-pbs/PhiFlow/blob/develop/docs/Fluids_Tutorial.ipynb). Φ<sub>Flow</sub> is an open-source simulation toolkit built for optimization and machine learning applications.; It is written mostly in Python and can be used with; [NumPy](https://numpy.org/),; [PyTorch](https://pytorch.org/),; [Jax](https://github.com/google/jax); or [TensorFlow](https://www.tensorflow.org/).; The close integration with these machine learning frameworks allows it to leverage their automatic differentiation functionality,; making it easy to build end-to-end differentiable functions involving both learning models and physics simulations. ## Examples. ### Grids. <table>; <tbody>; <tr>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Fluid_Logo.html""><img src=""docs/figures/examples/grids/Fluid_Logo.gif""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Wake_Flow.html""><img src=""docs/figures/examples/grids/Wake_Flow.png""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Lid_Driven_Cavity.html""><img src=""docs/figures/examples/grids/Lid_Driven_Cavity.png""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Taylor_Green.html""><img src=""docs/figures/examples/grids/Taylor_Green.jpg""></a></td>; </tr>; <tr>; <td align=""center"">Fluid ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md:770,learn,learning,770,README.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md,1,['learn'],['learning']
Usability,"# Console Interface; The console interface enables interaction with Python scripts through the command line. Launch via `gui='console'` in [`view()`](phi/vis/index.html#phi.vis.view) or [`show()`](phi/vis/index.html#phi.vis.show). The console interface runs on a different thread than the main Python script. ## Commands. Multiple commands can be chained using `;` to separate them. Actions are registered as new commands.; E.g. if an action `my_function()` is. ### General Commands. `help` Prints available commands. `status` Prints the current status. `controls` Prints a list of available controls and their values. `actions` Prints a list of available actions. ### Plotting. `show` Plots the first two fields. `show <fields>`. `show <field>.<component>` where `<component>` must be one of `x`, `y`, `z`, `abs`. ### Control Execution. `play` Runs all loop iterations until paused. `play <frames>` Runs a certain number of iterations. Has no effect if already playing. `pause` Pauses loop execution after the current iteration finishes. `step` Progresses the loop by one iteration. `<control_name> = <value>` Sets a control value. `exit` Finishes the current loop iteration and exits the program. `kill` Immediately stops the Python process. ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/ConsoleUI.md:876,pause,paused,876,docs/ConsoleUI.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/ConsoleUI.md,2,['pause'],"['pause', 'paused']"
Usability,"# PhiFlow. [**Homepage**](https://github.com/tum-pbs/PhiFlow); &nbsp;&nbsp;&nbsp; [**Documentation**](https://tum-pbs.github.io/PhiFlow/); &nbsp;&nbsp;&nbsp; [**API**](https://tum-pbs.github.io/PhiFlow/phi); &nbsp;&nbsp;&nbsp; [**Demos**](https://github.com/tum-pbs/PhiFlow/tree/master/demos); &nbsp;&nbsp;&nbsp; [<img src=""https://www.tensorflow.org/images/colab_logo_32px.png"" height=16> **Fluids Tutorial**](https://colab.research.google.com/github/tum-pbs/PhiFlow/blob/develop/docs/Fluids_Tutorial.ipynb#offline=true&sandboxMode=true); &nbsp;&nbsp;&nbsp; [<img src=""https://www.tensorflow.org/images/colab_logo_32px.png"" height=16> **Playground**](https://colab.research.google.com/drive/1zBlQbmNguRt-Vt332YvdTqlV4DBcus2S#offline=true&sandboxMode=true). PhiFlow is an open-source simulation toolkit built for optimization and machine learning applications.; It is written mostly in Python and can be used with NumPy, TensorFlow, Jax or PyTorch.; The close integration with machine learning frameworks allows it to leverage their automatic differentiation functionality,; making it easy to build end-to-end differentiable functions involving both learning models and physics simulations. See the [installation Instructions](https://tum-pbs.github.io/PhiFlow/Installation_Instructions.html) on how to compile the optional custom CUDA operations.; ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Package_Info.md:838,learn,learning,838,docs/Package_Info.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Package_Info.md,3,['learn'],['learning']
Usability,"# Physics. The module [`phi.physics`](phi/physics/) provides a library of common operations used to solve partial differential equations like [fluids](Fluid_Simulation.html).; It builds on the [field](Fields.md), [geometry](Geometry.md) and [math](Math.html) modules and constitutes the highest-level API for physical simulations in Φ<sub>Flow</sub>.; Similar to the field module, physics functions act on data structures represented by the [`Field`](phi/field/#phi.field.Field) class. ## Writing a Custom Simulation; In previous version of Φ<sub>Flow</sub>, all custom simulations were based on the abstract classes `State` and `Physics`.; This is no longer the case. It is recommended to define custom re-usable operations as functions and call them directly from the top-level Python script.; The following script runs 100 steps of an inviscid fluid simulation.; ```python; from phi.flow import *. DOMAIN = Domain(x=64, y=80, boundaries=CLOSED, bounds=Box(x=100, y=100)); velocity = DOMAIN.staggered_grid(Noise()); pressure = DOMAIN.scalar_grid(0); for _ in range(100):; velocity = advect.semi_lagrangian(velocity, velocity, dt=1); velocity, pressure, iterations, _ = fluid.make_incompressible(velocity, DOMAIN, pressure_guess=pressure); ```; Note that `advect.semi_lagrangian` and `fluid.make_incompressible` are standard functions in Φ<sub>Flow</sub>, contained in the standard import. ## Visualizing the simulation. The simplest way to visualize a simple simulation with module-level variables (`velocity` and `pressure` in the example above) is to use the `ModuleViewer` class.; In the above example, simply replace the line containing the `for` loop with the following line.; ```python; for _ in ModuleViewer().range(100):; ```; This launches a web interface displaying the velocity and pressure fields and allows you to step through the simulation step by step. Slightly more complex examples can be found in ; [marker.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/marker.py) which",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Physics.md:707,usab,usable,707,docs/Physics.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Physics.md,1,['usab'],['usable']
Usability,"# Φ<sub>Flow</sub> Installation. ## Requirements. * [Python](https://www.python.org/downloads/) 3.6 or newer (e.g. [Anaconda](https://www.anaconda.com/products/individual)); * [pip](https://pip.pypa.io/en/stable/) (included in many Python distributions). For GPU acceleration, deep learning and optimization, either; [PyTorch](https://pytorch.org/),; [TensorFlow 2.x](https://www.tensorflow.org/install/) or ; [Jax](https://github.com/google/jax); must be registered with your Python installation.; Note that these also require a CUDA installation with *cuDNN* libraries for GPU execution.; We recommend CUDA 11.0 with cuDNN 8. ## Installing Φ<sub>Flow</sub> using pip. *Note*: If you want to use the Φ<sub>Flow</sub> CUDA operations with TensorFlow, you have to build Φ<sub>Flow</sub> from source instead (see below). The following command installs the latest stable version of Φ<sub>Flow</sub> with GUI support using pip.; ```bash; $ pip install phiflow; ```; To install the latest developer version of Φ<sub>Flow</sub>, run; ```bash; $ pip install --upgrade git+https://github.com/tum-pbs/PhiFlow@develop; ```. Install [PyTorch](https://pytorch.org/), [TensorFlow](https://www.tensorflow.org/install) or [Jax](https://github.com/google/jax#installation) in addition to Φ<sub>Flow</sub> to enable machine learning capabilities and GPU execution. To enable the web UI, also install [`dash`](https://pypi.org/project/dash/).; ```bash; $ pip install dash; ```; If you only run Φ<sub>Flow</sub> inside of Jupyter notebooks, dash is not required as Matplotlib will be used for plots and animations by default. ## Installing Φ<sub>Flow</sub> from Source; The Φ<sub>Flow</sub> source additionally contains demo scripts and tests.; In particular, it includes [`tests/verify.py`](https://github.com/tum-pbs/PhiFlow/blob/develop/tests/verify.py),; which tests your configuration. Clone the git repository by running; ```bash; $ git clone https://github.com/tum-pbs/PhiFlow.git <target directory>; ```; This wi",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md:282,learn,learning,282,docs/Installation_Instructions.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md,1,['learn'],['learning']
Usability,"# Φ<sub>Flow</sub> Web Interface. ![Gui](figures/WebInterface.png). Φ<sub>Flow</sub> provides an interactive web interface that can display 1D, 2D and 3D data.; This GUI uses [Dash](https://plotly.com/dash/) to host a website on a local port.; Opening the website remotely may require port forwarding, e.g. via SSH. The Dash GUI is the default user interface for python modules, i.e. when running a `.py` file as the main module.; It can be specifically selected by setting `gui='dash'` in [`view()`](phi/vis/index.html#phi.vis.view) or [`show()`](phi/vis/index.html#phi.vis.show). ## Tabs & Features. The web interface consists of multiple tabs (web pages) which can be accessed at the upper left corner of each page. - **Home** shows the title and description of the app. It allows the user to choose one field to view and to start/pause the app or step a single frame. Additionally all app-specific controls are shown at the bottom.; - **Side-by-Side** is similar to Home but shows two fields at a time instead of one.; - **Info** displays additional information about the current session such as file paths and run time.; - **Log** displays the complete application log.; - **Φ Board** contains benchmarking functionality. For TensorFlow apps it also allows the user to launch TensorBoard and run the TensorFlow profiler.; - **Help** refers to this page. Tips & Tricks:. - You can run a specified number of frames by entering the number in the text box next to the 'Step' button. If you put a '*' before the number, it is multiplied by the app's `stride` value which can be found in the `info` tab. ## Frame Rate and Refresh Rate. The web interface provides a *Refresh rate* control above the field viewer.; This value describes how often the diagrams in the browser are updated.; It is independent of the framerate specified in `view()` which defines how quickly the user code is executed. ## Configuration. The `show` method supports additional keyword arguments to configure how the App content",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Web_Interface.md:834,pause,pause,834,docs/Web_Interface.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Web_Interface.md,1,['pause'],['pause']
Usability,"can be used to pause execution, run single iterations or break the loop.; With `play=False`, execution stops immediately once the loop is hit. The GUI will update the displayed values either after each iteration, or at a configurable refresh rate. ### Loop Recording; The GUI can also be used to record the values of the viewed variables during loop execution.; Recording is enabled if the stop argument in; [`Viewer.range()`](phi/vis/index.html#phi.vis.Viewer.range); is named, e.g. `viewer.range(frames=10)`.; Then, the values for each viewed variable are accumulated and stacked along a new batch dimension with this name. The recorded values can later be accessed through `Viewer.rec.<variable>`.; ```python; data = Domain(x=32, y=32).scalar_grid(Noise()); viewer = view(data); for _ in viewer.range(frames=10):; data = physics(data); all_data = viewer.rec.data # CenteredGrid (frames=11, x=32, y=32); ```. ### Custom Controls; It is often useful to modify parameters while a script is running,; e.g. adjusting the learning rate to see which values work best.; This can be easily achieved using [`control()`](phi/vis/#phi.vis.control).; ```python; learning_rate = control(0.001); checkpoint_interval = control(100, (1, 200)); ```; `control()` returns the first argument which specifies the initial value.; Consequently, `learning_rate` is a `float` and can be used as such.; The value of the variable will be modified each time the user edits the value.; This can happen while the user code is running. The following control types are supported:. - Linear sliders for `int` and `float` with a suitable value range; - Logarithmic sliders for `float` values with a large range or no range specified.; - Checkboxes for `bool` values.; - Text fields for `str` values.; ; Additionally, buttons are generated for functions declared in the user script that take no parameters. ## Plotting; See [`plot()`](phi/vis/index.html#phi.vis.plot) and; [`plot_scalars()`](phi/vis/index.html#phi.vis.plot_scalars).",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Visualization.md:2911,learn,learning,2911,docs/Visualization.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Visualization.md,1,['learn'],['learning']
Usability,"e top rows are invalid.; - Φ<sub>Flow</sub>: The arrays of centered fields store only valid values (depth=z, height=y, width=x). Staggered grids store the component at the lower face of the cell with same index, the top-most rows hold partly invalid values (depth=z+1, height=y+1, width=x+1). The filename of an array at a certain frame is:. ```bash; <Property>_<frame>.npz; ```. The property name starts with an upper case letter and the frame index is padded by zeros forming a 6-digit string. Examples: `Density_000000.npz`, `Velocity_000042.npz`. ## Scenes. A scene is a directory that directly contains all arrays associated with the simulation.; Its name starts with `sim_` followed by a six-digit scene index. In addition to arrays, scenes store properties of the simulation in a JSON file called `description.json`.; This file describes both simulation properties and the origin of the data.; It can store any number of properties, depending on the application. The following content was created by running the [simpleplume.py](../demos/smoke_plume.py) demo and can be used as a reference. ```json; {; ""instigator"": ""App"",; ""traits"": [],; ""app"": ""smoke_plume.py"",; ""app_path"": ""~/phiflow/demos/smoke_plume.py"",; ""name"": ""Simpleplume"",; ""description"": """",; ""all_fields"": [; ""Density"",; ""Velocity""; ],; ""actions"": [],; ""controls"": [],; ""summary"": ""Simpleplume"",; ""time_of_writing"": 0,; ""world"": {; ""age"": 0.0,; ""states"": [; {; ""age"": 0.0,; ""domain"": {; ""grid"": {; ""dimensions"": [; 80,; 64; ],; ""box"": {; ""origin"": [; 0,; 0; ],; ""size"": [; 80,; 64; ],; ""type"": ""Box"",; ""module"": ""phi.physics.geom""; },; ""type"": ""Grid"",; ""module"": ""phi.physics.geom""; },; ""boundaries"": {; ""solid"": true,; ""friction"": 0.0,; ""extrapolate_fluid"": true,; ""global_velocity"": 0.0,; ""local_velocity"": 0.0,; ""type"": ""Material"",; ""module"": ""phi.physics.material""; },; ""type"": ""Domain"",; ""module"": ""phi.physics.domain""; },; ""gravity"": -9.81,; ""buoyancy_factor"": 0.1,; ""conserve_density"": false,; ""type"": ""Smoke"",; ""module"": ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Scene_Format_Specification.md:2711,simpl,simpleplume,2711,docs/Scene_Format_Specification.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Scene_Format_Specification.md,1,['simpl'],['simpleplume']
Usability,"e_plume.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/smoke_plume.py) which additionally introduces a buoyancy force,; [fluid_logo.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/fluid_logo.py) which adds obstacles to the scene and; [rotating_bar.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/rotating_bar.py) which adds geometry movement. ## Differences to MantaFlow. [MantaFlow](http://mantaflow.com/) is a simulation framework that also offers; deep learning functionality and TensorFlow integration. However, in contrast to; Φ<sub>Flow</sub>, it focuses on fast CPU-based simulations, and does not; support differentiable operators. Nonetheless, it can be useful to, e.g.,; pre-compute simulation data for learning tasks in Φ<sub>Flow</sub>. One central difference of both fluid solvers is that mantaflow grids all have; the same size, while in Φ<sub>Flow</sub>, the staggered velocity grids are; larger by one layer on the positive domain sides ; (also see the [data format section](Scene_Format_Specification.md)). Mantaflow always stores 3-component vectors in its `Vec3`; struct, while Φ<sub>Flow</sub> changes the vectors size with the; dimensionality of the solver. E.g., a 2D solver in mantaflow with a velocity `Vec3 v`; has `v[0]` for X, and `v[1]` for the Y component. `v[2]` for Z is still; defined, but typically set to zero. For a 3D solver in mantaflow, this indexing; scheme does not change. Φ<sub>Flow</sub>, on the other hand, uses a two component numpy array for the; velocity component of a 2D solver, where the first or last index denotes X, depending on the configuration.; This scheme is closer to the typical ordering of numpy arrays, and simplifies the; implementation of operators that are agnostic of the solver dimension. As a side effect of this indexing, gravity is defined to act along the last or first; dimension in Φ<sub>Flow</sub>, i.e., Z in 3D, and Y in 2D.; In contrast, gravity always acts along the Y direction in Mantaflow.; ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Physics.md:3751,simpl,simplifies,3751,docs/Physics.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Physics.md,1,['simpl'],['simplifies']
Usability,"github.io/PhiFlow/examples/optim/Close_Packing.html""><img src=""docs/figures/examples/optim/Close_Packing.png""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/optim/Learn_Potential.html""><img src=""docs/figures/examples/optim/Learn_Potential.png""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/optim/Differentiable_Pressure.html""><img src=""docs/figures/examples/optim/Differentiable_Pressure.jpg""></a></td>; </tr>; <tr>; <td align=""center"">Close packing</td>; <td align=""center"">Learning Φ(x,y)</td>; <td align=""center"">Differentiable pressure</td>; </tr>; </tbody>; </table>. ## Installation. Installation with [pip](https://pypi.org/project/pip/) on [Python 3.6](https://www.python.org/downloads/) and above:; ``` bash; $ pip install phiflow; ```; Install [PyTorch](https://pytorch.org/), [TensorFlow](https://www.tensorflow.org/install) or [Jax](https://github.com/google/jax#installation) in addition to Φ<sub>Flow</sub> to enable machine learning capabilities and GPU execution.; To enable the web UI, also install [Dash](https://pypi.org/project/dash/).; For optimal GPU performance, you may compile the custom CUDA operators, see the [detailed installation instructions](https://tum-pbs.github.io/PhiFlow/Installation_Instructions.html). You can verify your installation by running; ```bash; $ python3 -c ""import phi; phi.verify()""; ```; This will check for compatible PyTorch, Jax and TensorFlow installations as well. ## Features. * Tight integration with PyTorch, Jax and TensorFlow for straightforward neural network training with fully differentiable simulations that can [run on the GPU](https://tum-pbs.github.io/PhiFlow/GPU_Execution.html#enabling-gpu-execution).; * Built-in PDE operations with focus on fluid phenomena, allowing for concise formulation of simulations.; * Flexible, easy-to-use [web interface](https://tum-pbs.github.io/PhiFlow/Web_Interface.html) featuring live visualizations and interacti",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md:9114,learn,learning,9114,README.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md,1,['learn'],['learning']
Usability,"he following tags in the header:. * `[doc]` for documentation updates; * `[ci]` for CI configuration changes; * `[build]` for changes to the installation; * `[tests]` for adding or changing unit tests; * `[demos]` for adding or changing demo scripts; * `[Φ]` for general changes like version numbers or default imports; ; If the commit modifies the main codebase (`phi/`), use one of the following tags:. * `[vis]` for general changes in `phi.vis` as well as changes to any GUI, e.g. dash, widgets, console.; * `[geom]` for changes to `phi.geom`; * `[field]` for changes to `phi.field` except Scene; * `[io]` for changes to Scenes, data layout; * `[physics]` for changes to `phi.physics`; * `[learning]` for non-backend changes to `phi.tf`, `phi.torch`. Example commit header: `[doc] Improve markdown layout`. Commits may be tagged with multiple tags, but this should be used sparingly. Bugfix commits are tagged with the module to which the fixes are applied. ## Style Guide; Style guidelines make the code more uniform and easier to read.; Generally we stick to the Python style guidelines as outlined in [PEP 8](https://www.python.org/dev/peps/pep-0008/), with some minor modifications outlined below. Have a look at the [Zen](https://en.wikipedia.org/wiki/Zen_of_Python) [of Python](https://www.python.org/dev/peps/pep-0020/) for the philosophy behind the rules.; We would like to add the rule *Concise is better than repetitive.*. We use PyLint for static code analysis with specific configuration files for; [demos](../demos/.pylintrc),; [tests](../tests/.pylintrc) and the; [code base](../phi/.pylintrc).; PyLint is part of the automatic testing pipeline.; The warning log can be viewed online by selecting a `Tests` job and expanding the pylint output. ### Docstrings; The [API documentation](https://tum-pbs.github.io/PhiFlow/) for Φ<sub>Flow</sub> is generated using [pdoc](https://pdoc3.github.io/pdoc/).; We use [Google style docstrings](https://google.github.io/styleguide/pyguide.html#3",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md:1959,guid,guidelines,1959,CONTRIBUTING.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md,1,['guid'],['guidelines']
Usability,"ing and optimization, either; [PyTorch](https://pytorch.org/),; [TensorFlow 2.x](https://www.tensorflow.org/install/) or ; [Jax](https://github.com/google/jax); must be registered with your Python installation.; Note that these also require a CUDA installation with *cuDNN* libraries for GPU execution.; We recommend CUDA 11.0 with cuDNN 8. ## Installing Φ<sub>Flow</sub> using pip. *Note*: If you want to use the Φ<sub>Flow</sub> CUDA operations with TensorFlow, you have to build Φ<sub>Flow</sub> from source instead (see below). The following command installs the latest stable version of Φ<sub>Flow</sub> with GUI support using pip.; ```bash; $ pip install phiflow; ```; To install the latest developer version of Φ<sub>Flow</sub>, run; ```bash; $ pip install --upgrade git+https://github.com/tum-pbs/PhiFlow@develop; ```. Install [PyTorch](https://pytorch.org/), [TensorFlow](https://www.tensorflow.org/install) or [Jax](https://github.com/google/jax#installation) in addition to Φ<sub>Flow</sub> to enable machine learning capabilities and GPU execution. To enable the web UI, also install [`dash`](https://pypi.org/project/dash/).; ```bash; $ pip install dash; ```; If you only run Φ<sub>Flow</sub> inside of Jupyter notebooks, dash is not required as Matplotlib will be used for plots and animations by default. ## Installing Φ<sub>Flow</sub> from Source; The Φ<sub>Flow</sub> source additionally contains demo scripts and tests.; In particular, it includes [`tests/verify.py`](https://github.com/tum-pbs/PhiFlow/blob/develop/tests/verify.py),; which tests your configuration. Clone the git repository by running; ```bash; $ git clone https://github.com/tum-pbs/PhiFlow.git <target directory>; ```; This will create the folder \<target directory\> and copy all Φ<sub>Flow</sub> source files into it. With this done, you may compile CUDA kernels for better performance, see below. Finally, Φ<sub>Flow</sub> needs to be added to the Python path.; This can be done in one of multiple ways:. * Mar",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md:1307,learn,learning,1307,docs/Installation_Instructions.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Installation_Instructions.md,1,['learn'],['learning']
Usability,"ion={PMLR}; }; ```. ## Publications. We will upload a whitepaper, soon.; In the meantime, please cite the ICLR 2020 paper. * [Learning to Control PDEs with Differentiable Physics](https://ge.in.tum.de/publications/2020-iclr-holl/), *Philipp Holl, Vladlen Koltun, Nils Thuerey*, ICLR 2020.; * [Solver-in-the-Loop: Learning from Differentiable Physics to Interact with Iterative PDE-Solvers](https://arxiv.org/abs/2007.00016), *Kiwon Um, Raymond Fei, Philipp Holl, Robert Brand, Nils Thuerey*, NeurIPS 2020.; * [Φ<sub>Flow</sub>: A Differentiable PDE Solving Framework for Deep Learning via Physical Simulations](https://montrealrobotics.ca/diffcvgp/), *Nils Thuerey, Kiwon Um, Philipp Holl*, DiffCVGP workshop at NeurIPS 2020.; * [Physics-based Deep Learning](https://physicsbaseddeeplearning.org/intro.html) (book), *Nils Thuerey, Philipp Holl, Maximilian Mueller, Patrick Schnell, Felix Trost, Kiwon Um*, DiffCVGP workshop at NeurIPS 2020.; * [Half-Inverse Gradients for Physical Deep Learning](https://arxiv.org/abs/2203.10131), *Patrick Schnell, Philipp Holl, Nils Thuerey*, ICLR 2022.; * [Scale-invariant Learning by Physics Inversion](https://arxiv.org/abs/2109.15048), *Philipp Holl, Vladlen Koltun, Nils Thuerey*, NeurIPS 2022. ## Benchmarks & Data Sets. Φ<sub>Flow</sub> has been used in the creation of various public data sets, such as; [PDEBench](https://github.com/pdebench/PDEBench) and [PDEarena](https://microsoft.github.io/pdearena/). [See more packages that use Φ<sub>Flow</sub>](https://github.com/tum-pbs/PhiFlow/network/dependents). ## 🕒 Version History. The [Version history](https://github.com/tum-pbs/PhiFlow/releases) lists all major changes since release.; The releases are also listed on [PyPI](https://pypi.org/project/phiflow/). ## 👥 Contributions. Contributions are welcome! Check out [this document](CONTRIBUTING.md) for guidelines. ## Acknowledgements. This work is supported by the ERC Starting Grant realFlow (StG-2015-637014) and the Intel Intelligent Systems Lab.; ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md:15817,guid,guidelines,15817,README.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md,1,['guid'],['guidelines']
Usability,"on. The following content was created by running the [simpleplume.py](../demos/smoke_plume.py) demo and can be used as a reference. ```json; {; ""instigator"": ""App"",; ""traits"": [],; ""app"": ""smoke_plume.py"",; ""app_path"": ""~/phiflow/demos/smoke_plume.py"",; ""name"": ""Simpleplume"",; ""description"": """",; ""all_fields"": [; ""Density"",; ""Velocity""; ],; ""actions"": [],; ""controls"": [],; ""summary"": ""Simpleplume"",; ""time_of_writing"": 0,; ""world"": {; ""age"": 0.0,; ""states"": [; {; ""age"": 0.0,; ""domain"": {; ""grid"": {; ""dimensions"": [; 80,; 64; ],; ""box"": {; ""origin"": [; 0,; 0; ],; ""size"": [; 80,; 64; ],; ""type"": ""Box"",; ""module"": ""phi.physics.geom""; },; ""type"": ""Grid"",; ""module"": ""phi.physics.geom""; },; ""boundaries"": {; ""solid"": true,; ""friction"": 0.0,; ""extrapolate_fluid"": true,; ""global_velocity"": 0.0,; ""local_velocity"": 0.0,; ""type"": ""Material"",; ""module"": ""phi.physics.material""; },; ""type"": ""Domain"",; ""module"": ""phi.physics.domain""; },; ""gravity"": -9.81,; ""buoyancy_factor"": 0.1,; ""conserve_density"": false,; ""type"": ""Smoke"",; ""module"": ""phi.physics.smoke""; },; {; ""age"": 0.0,; ""geometry"": {; ""center"": [; 10,; 32; ],; ""radius"": 5,; ""type"": ""Sphere"",; ""module"": ""phi.physics.geom""; },; ""velocity"": 0,; ""rate"": 0.2,; ""type"": ""Inflow"",; ""module"": ""phi.physics.objects""; }; ],; ""type"": ""StateCollection"",; ""module"": ""phi.physics.collective""; }; }; ```. Φ<sub>Flow</sub> writes all simulation properties into the category `world`. Source files can be added to an optional `src` directory, images to an optional `images` directory.; Optionally, a log file can be added to the scene directory as `info.log`. Scenes can contain any number of additional subdirectories for specific information. ## Categories. Categories are used to organize scenes that belong together. Categories are realized simply as a directory that contains scene directories. It can have any name.; Scenes within that directory are assumed to have the same properties and the same number of frames but these restrictions are optional.; ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Scene_Format_Specification.md:4442,simpl,simply,4442,docs/Scene_Format_Specification.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Scene_Format_Specification.md,1,['simpl'],['simply']
Usability,"ows/unit-tests.yml/badge.svg); [![PyPI pyversions](https://img.shields.io/pypi/pyversions/phiflow.svg)](https://pypi.org/project/phiflow/); [![PyPI license](https://img.shields.io/pypi/l/phiflow.svg)](https://pypi.org/project/phiflow/); [![Code Coverage](https://codecov.io/gh/tum-pbs/PhiFlow/branch/develop/graph/badge.svg)](https://codecov.io/gh/tum-pbs/PhiFlow/branch/develop/); [![Google Collab Book](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/tum-pbs/PhiFlow/blob/develop/docs/Fluids_Tutorial.ipynb). Φ<sub>Flow</sub> is an open-source simulation toolkit built for optimization and machine learning applications.; It is written mostly in Python and can be used with; [NumPy](https://numpy.org/),; [PyTorch](https://pytorch.org/),; [Jax](https://github.com/google/jax); or [TensorFlow](https://www.tensorflow.org/).; The close integration with these machine learning frameworks allows it to leverage their automatic differentiation functionality,; making it easy to build end-to-end differentiable functions involving both learning models and physics simulations. ## Examples. ### Grids. <table>; <tbody>; <tr>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Fluid_Logo.html""><img src=""docs/figures/examples/grids/Fluid_Logo.gif""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Wake_Flow.html""><img src=""docs/figures/examples/grids/Wake_Flow.png""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Lid_Driven_Cavity.html""><img src=""docs/figures/examples/grids/Lid_Driven_Cavity.png""></a></td>; <td style=""width: 25%;""><a href=""https://tum-pbs.github.io/PhiFlow/examples/grids/Taylor_Green.html""><img src=""docs/figures/examples/grids/Taylor_Green.jpg""></a></td>; </tr>; <tr>; <td align=""center"">Fluid logo</td>; <td align=""center"">Wake flow</td>; <td align=""center"">Lid-driven cavity</td>; <td align=""center"">Taylor-Gr",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md:1037,learn,learning,1037,README.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/README.md,2,['learn'],['learning']
Usability,"pressure fields and allows you to step through the simulation step by step. Slightly more complex examples can be found in ; [marker.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/marker.py) which passively advects an additional marker field,; [smoke_plume.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/smoke_plume.py) which additionally introduces a buoyancy force,; [fluid_logo.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/fluid_logo.py) which adds obstacles to the scene and; [rotating_bar.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/rotating_bar.py) which adds geometry movement. ## Differences to MantaFlow. [MantaFlow](http://mantaflow.com/) is a simulation framework that also offers; deep learning functionality and TensorFlow integration. However, in contrast to; Φ<sub>Flow</sub>, it focuses on fast CPU-based simulations, and does not; support differentiable operators. Nonetheless, it can be useful to, e.g.,; pre-compute simulation data for learning tasks in Φ<sub>Flow</sub>. One central difference of both fluid solvers is that mantaflow grids all have; the same size, while in Φ<sub>Flow</sub>, the staggered velocity grids are; larger by one layer on the positive domain sides ; (also see the [data format section](Scene_Format_Specification.md)). Mantaflow always stores 3-component vectors in its `Vec3`; struct, while Φ<sub>Flow</sub> changes the vectors size with the; dimensionality of the solver. E.g., a 2D solver in mantaflow with a velocity `Vec3 v`; has `v[0]` for X, and `v[1]` for the Y component. `v[2]` for Z is still; defined, but typically set to zero. For a 3D solver in mantaflow, this indexing; scheme does not change. Φ<sub>Flow</sub>, on the other hand, uses a two component numpy array for the; velocity component of a 2D solver, where the first or last index denotes X, depending on the configuration.; This scheme is closer to the typical ordering of numpy arrays, and simplifies the; implementation of operators ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Physics.md:2795,learn,learning,2795,docs/Physics.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Physics.md,1,['learn'],['learning']
Usability,"ribution.; There may already be similar internal work or planned changes that would affect how to code the contribution. To contribute code, fork Φ<sub>Flow</sub> on GitHub, make your changes, and submit a pull request.; Make sure that your contribution passes all tests. For commits, we use the following tags in the header:. * `[doc]` for documentation updates; * `[ci]` for CI configuration changes; * `[build]` for changes to the installation; * `[tests]` for adding or changing unit tests; * `[demos]` for adding or changing demo scripts; * `[Φ]` for general changes like version numbers or default imports; ; If the commit modifies the main codebase (`phi/`), use one of the following tags:. * `[vis]` for general changes in `phi.vis` as well as changes to any GUI, e.g. dash, widgets, console.; * `[geom]` for changes to `phi.geom`; * `[field]` for changes to `phi.field` except Scene; * `[io]` for changes to Scenes, data layout; * `[physics]` for changes to `phi.physics`; * `[learning]` for non-backend changes to `phi.tf`, `phi.torch`. Example commit header: `[doc] Improve markdown layout`. Commits may be tagged with multiple tags, but this should be used sparingly. Bugfix commits are tagged with the module to which the fixes are applied. ## Style Guide; Style guidelines make the code more uniform and easier to read.; Generally we stick to the Python style guidelines as outlined in [PEP 8](https://www.python.org/dev/peps/pep-0008/), with some minor modifications outlined below. Have a look at the [Zen](https://en.wikipedia.org/wiki/Zen_of_Python) [of Python](https://www.python.org/dev/peps/pep-0020/) for the philosophy behind the rules.; We would like to add the rule *Concise is better than repetitive.*. We use PyLint for static code analysis with specific configuration files for; [demos](../demos/.pylintrc),; [tests](../tests/.pylintrc) and the; [code base](../phi/.pylintrc).; PyLint is part of the automatic testing pipeline.; The warning log can be viewed online by sele",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md:1669,learn,learning,1669,CONTRIBUTING.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/CONTRIBUTING.md,1,['learn'],['learning']
Usability,"sics`.; This is no longer the case. It is recommended to define custom re-usable operations as functions and call them directly from the top-level Python script.; The following script runs 100 steps of an inviscid fluid simulation.; ```python; from phi.flow import *. DOMAIN = Domain(x=64, y=80, boundaries=CLOSED, bounds=Box(x=100, y=100)); velocity = DOMAIN.staggered_grid(Noise()); pressure = DOMAIN.scalar_grid(0); for _ in range(100):; velocity = advect.semi_lagrangian(velocity, velocity, dt=1); velocity, pressure, iterations, _ = fluid.make_incompressible(velocity, DOMAIN, pressure_guess=pressure); ```; Note that `advect.semi_lagrangian` and `fluid.make_incompressible` are standard functions in Φ<sub>Flow</sub>, contained in the standard import. ## Visualizing the simulation. The simplest way to visualize a simple simulation with module-level variables (`velocity` and `pressure` in the example above) is to use the `ModuleViewer` class.; In the above example, simply replace the line containing the `for` loop with the following line.; ```python; for _ in ModuleViewer().range(100):; ```; This launches a web interface displaying the velocity and pressure fields and allows you to step through the simulation step by step. Slightly more complex examples can be found in ; [marker.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/marker.py) which passively advects an additional marker field,; [smoke_plume.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/smoke_plume.py) which additionally introduces a buoyancy force,; [fluid_logo.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/fluid_logo.py) which adds obstacles to the scene and; [rotating_bar.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/rotating_bar.py) which adds geometry movement. ## Differences to MantaFlow. [MantaFlow](http://mantaflow.com/) is a simulation framework that also offers; deep learning functionality and TensorFlow integration. However, in contrast to; Φ<sub>Flow</sub>, i",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Physics.md:1608,simpl,simply,1608,docs/Physics.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Physics.md,1,['simpl'],['simply']
Usability,"the environment and installed packages.; Otherwise, the type of interface can be specified with `gui='dash'` or `gui='console'`. ### Batch Selection; When the viewed data are batched, the GUI will try to plot all examples at once which may result in crowded plots.; This can be avoided using the `select` keyword argument.; It specifies dimensions along which a single slice is displayed, e.g.; ```python; data = Domain(x=32, y=32).scalar_grid(Noise(batch=10, time=33)); view(batched_data, select='batch,time'); ```; For each dimension, a slider will be added to the UI for the user to select which slice to display. ### Controlling Loop Execution; The GUI can be used to let the user control loop execution.; To do this, the user code needs to iterate over ; [`Viewer.range()`](phi/vis/index.html#phi.vis.Viewer.range).; ```python; data = Domain(x=32, y=32).scalar_grid(Noise()); for _ in view(data, play=False).range(10):; data = physics(data); ```; Once the loop is encountered, the execution controls of the GUI can be used to pause execution, run single iterations or break the loop.; With `play=False`, execution stops immediately once the loop is hit. The GUI will update the displayed values either after each iteration, or at a configurable refresh rate. ### Loop Recording; The GUI can also be used to record the values of the viewed variables during loop execution.; Recording is enabled if the stop argument in; [`Viewer.range()`](phi/vis/index.html#phi.vis.Viewer.range); is named, e.g. `viewer.range(frames=10)`.; Then, the values for each viewed variable are accumulated and stacked along a new batch dimension with this name. The recorded values can later be accessed through `Viewer.rec.<variable>`.; ```python; data = Domain(x=32, y=32).scalar_grid(Noise()); viewer = view(data); for _ in viewer.range(frames=10):; data = physics(data); all_data = viewer.rec.data # CenteredGrid (frames=11, x=32, y=32); ```. ### Custom Controls; It is often useful to modify parameters while a scrip",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Visualization.md:1907,pause,pause,1907,docs/Visualization.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Visualization.md,1,['pause'],['pause']
Usability,"tom Simulation; In previous version of Φ<sub>Flow</sub>, all custom simulations were based on the abstract classes `State` and `Physics`.; This is no longer the case. It is recommended to define custom re-usable operations as functions and call them directly from the top-level Python script.; The following script runs 100 steps of an inviscid fluid simulation.; ```python; from phi.flow import *. DOMAIN = Domain(x=64, y=80, boundaries=CLOSED, bounds=Box(x=100, y=100)); velocity = DOMAIN.staggered_grid(Noise()); pressure = DOMAIN.scalar_grid(0); for _ in range(100):; velocity = advect.semi_lagrangian(velocity, velocity, dt=1); velocity, pressure, iterations, _ = fluid.make_incompressible(velocity, DOMAIN, pressure_guess=pressure); ```; Note that `advect.semi_lagrangian` and `fluid.make_incompressible` are standard functions in Φ<sub>Flow</sub>, contained in the standard import. ## Visualizing the simulation. The simplest way to visualize a simple simulation with module-level variables (`velocity` and `pressure` in the example above) is to use the `ModuleViewer` class.; In the above example, simply replace the line containing the `for` loop with the following line.; ```python; for _ in ModuleViewer().range(100):; ```; This launches a web interface displaying the velocity and pressure fields and allows you to step through the simulation step by step. Slightly more complex examples can be found in ; [marker.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/marker.py) which passively advects an additional marker field,; [smoke_plume.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/smoke_plume.py) which additionally introduces a buoyancy force,; [fluid_logo.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/fluid_logo.py) which adds obstacles to the scene and; [rotating_bar.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/rotating_bar.py) which adds geometry movement. ## Differences to MantaFlow. [MantaFlow](http://mantaflow.com/) is a simulatio",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Physics.md:1426,simpl,simplest,1426,docs/Physics.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Physics.md,2,['simpl'],"['simple', 'simplest']"
Usability,"vector components.; [More on staggered grids](Staggered_Grids.html). [`PointCloud`](phi/field/#phi.field.PointCloud); is a set of points or finite elements, each associated with a value. [`Noise`](phi/field/#phi.field.Noise); samples random fluctuations of certain sizes.; Currently, it only supports resampling to grids. [`AngularVelocity`](phi/field/#phi.field.AngularVelocity); models a vortex-like velocity field around one or multiple points.; This is useful for sampling the velocity of rotating objects. ## Resampling Fields; Given `val: Field` and `representation: SampledField` with different values structures or different sampling points, ; they can be made compatible using [`at()`](phi/field/#phi.field.Field.at) or `@`.; ```python; val.at(representation, keep_boundary=False) # resamples val at the elements of representation; val @ representation # same as above; ```; These functions return a `Field` of the same type as `representation`.; If they are already sampled at the same elements, the above operations simply return `val`.; Φ<sub>Flow</sub> may choose optimized code paths for specific combinations, such as two grids with equal sample point spacing `dx`. When resampling staggered grids with `keep_boundary=True`, the sample points of the resampled field may be different from `representation`.; This is because the sample points and value tensor shape of staggered grids depends on the extrapolation type. Additionally, there are two functions for sampling field values at given locations. * [`sample`](phi/field/#phi.field.sample) samples the field values at the location of a single geometry or geometry batch.; * [`reduce_sample`](phi/field/#phi.field.reduce_sample) differs from `sample` in that the geometry here describes; staggered locations at which the individual channel components of the field are stored.; For centered grids, `sample` and `reduce_sample` are equal. ## Extrapolations. Sampled fields, such as [`CenteredGrid`](phi/field/#phi.field.CenteredGrid),;",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Fields.md:3734,simpl,simply,3734,docs/Fields.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Fields.md,1,['simpl'],['simply']
Usability,"vpsY5nXpQKW15KlOY7xcYGs8tImFJqPFdVn0Lrk63bk6FRfUicJNzhOjdtzZlMlDthscSC18tjwe9RSx7piadoM2yWFyniye25QjxPnMsxj5PROItv7A8Hpd1J4ONCgXf606dC8UlfPfysFPNmD5Ta74j08tqXP1rpX3lX33Bkxo2I3R3/HaoM1xacBPo8Z7BaBQA6CaDhmOTALqMZveOFt1sve5BEBtt8xpRdx5m7vIFpol94TbWns1WzUlUw9RDswrAtELvaQYrpkq3sDw2Hvuvsdwtp0vRzzik/QAjRMVMqaQyVO28kiXU8IuZxoNe8O5/X6hEb8GOleqDeoRxl0uGI7lb37iu4/B57pgQPVztz9Sgy+UIEBB1WZplVCA6XOhmj79thqgv40/meTUU1uaTbt5LtFpunqs5k/xu25xiTTjTmVT/tQLOMnPmbQJoRM9/si84SbyikBeVUqfuMO+r38mvVfZr+p0v6n8nk9OJz013PjwkG7P8QYf4fWBWjbK6w43ipV03zah7uDpcsDxyx1wqF9UavpWRtMJh3EEHA444UhjlpMhA0kZ1yrjHnxhK4e4muIYYsFtnwMHI7vKuJw4vFOi4gQdCon9hwbNeYqow5F5zRFF83lIda73OaEw9LbvKfWL88v5ii2xvpT9DpL60cTFR+pChNBI50gjtM4VBhr65Rs152Sw/c55hIZeP+zkhhbAA+hPo/hksyFR+XqA23JruuXR1PY5o9nxwk4UNE37nXOKXxnxHyFEE7OfEKl34sdIUWNGh1mToRr3z5XRIbMpNF23B5X8qNFw0JlRUc7tUNO7jKLiVOldDQkcjfkh75rVkQvfB0nrsJS0B2QqItw3rcNS/y6EGka1pHWcKuephxV9c4SYoz0ZhBIhehUcJ898/Gi5TfJk6oOAAPS7po8nxaciyZOxNhkrUUlfVKCheghhvSkqmi5a3x4VwwoqkGX3Q0WT3QA2/ZZ2Q37N4YMgxrAm2qT8MapWxOYJlyM9/yhS3zvHF5ma9L1kvi1Cb4qgHt/yOj+CDFRBkL0vl/VUEGjLzR+N94HwrQCUH9T8agiq+Usjru2K9PXJkZCxzOP8sEPTay3VshlW97oUeiQC81MlwlObPH1HT9Zw/PV/30fT+zia/5Uncb0jeCvAPTFsW9xHHRm/IDw/WFyEulxCw7QArJNa86FgHSnRl6EmA54KrIqymezBqqqbjMqXXA7FKhSLP7qZkRd/1BTd/x8=&lt;/diagram&gt;&lt;/mxfile&gt;&quot;}""></div>; <script type=""text/javascript"" src=""https://viewer.diagrams.net/js/viewer-static.min.js""></script>. ### API Documentation. The [API documentation](phi) is generated using [pdoc3](https://pdoc3.github.io/pdoc/).; To manually generate the documentation, add the PhiFlow directory to your Python path and run; ```bash; $ pdoc --html --output-dir docs --force phi; ```; This requires PyTorch, TensorFlow and Jax to be installed, in addition to the standard Φ<sub>Flow</sub> requirements. ### Contributing to Φ<sub>Flow</sub>. Contributions are welcome!. If you have changes to merge, check out our [style guide](https://github.com/tum-pbs/PhiFlow/blob/master/CONTRIBUTING.md) before opening a pull request.; ",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/index.md:8247,guid,guide,8247,docs/index.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/index.md,1,['guid'],['guide']
Usability,"xample above) is to use the `ModuleViewer` class.; In the above example, simply replace the line containing the `for` loop with the following line.; ```python; for _ in ModuleViewer().range(100):; ```; This launches a web interface displaying the velocity and pressure fields and allows you to step through the simulation step by step. Slightly more complex examples can be found in ; [marker.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/marker.py) which passively advects an additional marker field,; [smoke_plume.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/smoke_plume.py) which additionally introduces a buoyancy force,; [fluid_logo.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/fluid_logo.py) which adds obstacles to the scene and; [rotating_bar.py](https://github.com/tum-pbs/PhiFlow/blob/master/demos/rotating_bar.py) which adds geometry movement. ## Differences to MantaFlow. [MantaFlow](http://mantaflow.com/) is a simulation framework that also offers; deep learning functionality and TensorFlow integration. However, in contrast to; Φ<sub>Flow</sub>, it focuses on fast CPU-based simulations, and does not; support differentiable operators. Nonetheless, it can be useful to, e.g.,; pre-compute simulation data for learning tasks in Φ<sub>Flow</sub>. One central difference of both fluid solvers is that mantaflow grids all have; the same size, while in Φ<sub>Flow</sub>, the staggered velocity grids are; larger by one layer on the positive domain sides ; (also see the [data format section](Scene_Format_Specification.md)). Mantaflow always stores 3-component vectors in its `Vec3`; struct, while Φ<sub>Flow</sub> changes the vectors size with the; dimensionality of the solver. E.g., a 2D solver in mantaflow with a velocity `Vec3 v`; has `v[0]` for X, and `v[1]` for the Y component. `v[2]` for Z is still; defined, but typically set to zero. For a 3D solver in mantaflow, this indexing; scheme does not change. Φ<sub>Flow</sub>, on the other hand, use",MatchSource.DOCS,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Physics.md:2538,learn,learning,2538,docs/Physics.md,,https://github.com/tum-pbs/PhiFlow/tree/3.1.0/docs/Physics.md,1,['learn'],['learning']
