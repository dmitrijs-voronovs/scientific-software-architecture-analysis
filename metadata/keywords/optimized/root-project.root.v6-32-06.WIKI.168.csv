quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Testability,"* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; virtual voidTEveElement::UnHighlighted(); virtual voidTEveProjected::UnRefProjectable(TEveProjectable* assumed_parent); virtual voidTEveElement::UnSelected(); virtual voidUpdateProjection(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveShape::WriteVizParams(ostream& out, const TString& var). protected:. voidTAttBBox::AssertBBoxExtents(Float_t epsilon = 0.005); voidTAttBBox::BBoxCheckPoint(const Float_t* p); voidTAttBBox::BBoxCheckPoint(Float_t x, Float_t y, Float_t z); voidTAttBBox::BBoxClear(); voidTAttBBox::BBoxInit(Float_t infinity = 1e6); voidTAttBBox::BBoxZero(Float_t epsilon = 0, Float_t x = 0, Float_t y = 0, Float_t z = 0); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); virtual voidTEveElement::PreDeleteElement(); virtual voidTEveElement::RemoveElementsInternal(); voidTEveProjected::SetDepthCommon(Float_t d, TEveElement* el, Float_t* bbox); virtual voidSetDepthLocal(Float_t d); static const char*TEveElement::ToString(Bool_t b). private:. TEveJetConeProjected(const TEveJetConeProjected&); TEveJetConeProjected&operator=(const TEveJetConeProjected&). Data Members; public:. enum TEveElement::ECompoundSelectionColorBits { kCSCBImplySelectAllChildren; kCSCBTakeAnyParentAsMaster; kCSCBApplyMainColorToAllChildren; kCSCBApplyMainColorT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveJetConeProjected.html:17108,Assert,AssertBBoxExtents,17108,root/html528/TEveJetConeProjected.html,https://root.cern,https://root.cern/root/html528/TEveJetConeProjected.html,1,['Assert'],['AssertBBoxExtents']
Testability,"* n = NULL); virtual TMVA::Node*CreateNode(UInt_t size = 0) const; virtual TMVA::BinaryTree*CreateTree() const; TMVA::Node*GetLeftDaughter(TMVA::Node* n); UInt_tGetNNodes() const; TMVA::Node*GetRightDaughter(TMVA::Node* n); virtual TMVA::Node*GetRoot() const; UInt_tGetTotalTreeDepth() const; virtual TClass*IsA() const; TMVA::BinaryTree&operator=(const TMVA::BinaryTree&); virtual voidPrint(ostream& os) const; virtual voidRead(istream& istr, UInt_t tmva_Version_Code = TMVA_VERSION_CODE); virtual voidReadXML(void* node, UInt_t tmva_Version_Code = TMVA_VERSION_CODE); voidSetRoot(TMVA::Node* r); voidSetTotalTreeDepth(Int_t depth); voidSetTotalTreeDepth(TMVA::Node* n = NULL); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidDeleteNode(TMVA::Node*); TMVA::MsgLogger&Log() const. Data Members; protected:. UInt_tfDepthmaximal depth in tree reached; UInt_tfNNodestotal number of nodes in the tree (counted); TMVA::Node*fRootthe root node of the tree; static TMVA::MsgLogger*fgLoggermessage logger, static to save resources . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~BinaryTree( void ); destructor (deletes the nodes and ""events"" if owned by the tree. void DeleteNode(TMVA::Node* ); protected, recursive, function used by the class destructor and when Pruning. TMVA::Node* GetLeftDaughter(TMVA::Node* n); get left daughter node current node ""n"". TMVA::Node* GetRightDaughter(TMVA::Node* n); get right daughter node current node ""n"". UInt_t CountNodes(TMVA::Node* n = NULL); return the number of nodes in the tree. (make a new count --> takes time). void Print(ostream& os) const; recursively print the tree. void* AddXMLTo(void* parent) const; add attributes to XML. void ReadXML(void* node, UInt_t tmva_Version_Code = TMVA_VERSION_CODE); read attributes from XML. void Read(istream& istr, UInt_t tmva_Version_Code = TMVA_VERSION_CODE); Read the binary tree from an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__BinaryTree.html:1741,log,logger,1741,root/html528/TMVA__BinaryTree.html,https://root.cern,https://root.cern/root/html528/TMVA__BinaryTree.html,3,['log'],['logger']
Testability,"* n); TMVA::MsgLogger&Log() const; voidOptimize(TMVA::DecisionTree* dt, Double_t weights). Data Members; protected:. Double_tTMVA::IPruneTool::B; Double_tTMVA::IPruneTool::S; Double_tTMVA::IPruneTool::fPruneStrength. private:. TMVA::MsgLogger*fLogger! output stream to save logging information; Int_tfOptimalK! the optimal index of the prune sequence; vector<TMVA::DecisionTreeNode*>fPruneSequence! map of weakest links (i.e., branches to prune) -> pruning index; vector<Double_t>fPruneStrengthList! map of alpha -> pruning index; vector<Double_t>fQualityIndexList! map of R(T) -> pruning index; TMVA::SeparationBase*fQualityIndexTool! the quality index used to calculate R(t), R(T) = sum[t in ~T]{ R(t) }. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CostComplexityPruneTool( SeparationBase* qualityIndex ); the constructor for the cost complexity prunig. ~CostComplexityPruneTool(); the destructor for the cost complexity prunig. CalculatePruningInfo(TMVA::DecisionTree* dt, const TMVA::IPruneTool::EventSample* testEvents = __null, Bool_t isAutomatic = kFALSE). void InitTreePruningMetaData(TMVA::DecisionTreeNode* n); initialise ""meta data"" for the pruning, like the ""costcomplexity"", the; critical alpha, the minimal alpha down the tree, etc... for each node!!. void Optimize(TMVA::DecisionTree* dt, Double_t weights); after the critical alpha values (at which the corresponding nodes would; be pruned away) had been established in the ""InitMetaData"" we need now:; automatic pruning:; find the value of ""alpha"" for which the test sample gives minimal error,; on the tree with all nodes pruned that have alpha_critital < alpha,; fixed parameter pruning. CostComplexityPruneTool( SeparationBase* qualityIndex = NULL ). » Last changed: Tue Jun 30 15:15:25 2015 » Last generated: 2015-06-30 15:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__CostComplexityPruneTool.html:2280,test,testEvents,2280,root/html602/TMVA__CostComplexityPruneTool.html,https://root.cern,https://root.cern/root/html602/TMVA__CostComplexityPruneTool.html,2,['test'],"['test', 'testEvents']"
Testability,"* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. boolDoCheckInputs() const; voidRunToys(vector<double>& bVals, vector<double>& sbVals, unsigned int nToys, bool usePriors) const. Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. RooAbsPdf*fBModelThe pdf of the background model; RooAbsData*fDatapointer to the data sets ; boolfGenerateBinnedFlag to control binned generation; unsigned intfNToysnumber of Toys MC; const RooArgSet*fNuisanceParametersCollection of the nuisance parameters in the model; RooArgList*fObservablesCollection of the observables of the model; RooAbsPdf*fPriorPdfPrior PDF of the nuisance parameters; RooAbsPdf*fSbModelThe pdf of the signal+background model; unsigned intfTestStatisticsIdxIndex of the test statistics to use; boolfTmpDoExtended; boolfUsePriorPdfuse a prior for nuisance parameters . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HybridCalculatorOriginal(const char* name = 0); constructor with name and title; set default parameters. HybridCalculatorOriginal(RooAbsPdf& sb_model, RooAbsPdf& b_model, RooArgList& observables, const RooArgSet* nuisance_parameters = 0, RooAbsPdf* prior_pdf = 0, bool GenerateBinned = false, int testStatistics = 1, int ntoys = 1000); HybridCalculatorOriginal constructor without specifying a data set; the user need to specify the models in the S+B case and B-only case,; the list of observables of the model(s) (for MC-generation), the list of parameters; that are marginalised and the prior distribution of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HybridCalculatorOriginal.html:10260,test,test,10260,root/html528/RooStats__HybridCalculatorOriginal.html,https://root.cern,https://root.cern/root/html528/RooStats__HybridCalculatorOriginal.html,4,['test'],['test']
Testability,"* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGContainer::SetPageDimension(const TGDimension& dim); virtual voidTGContainer::SetPageDimension(UInt_t w, UInt_t h); virtual voidTGContainer::SetPagePosition(const TGPosition& pos); virtual voidTGContainer::SetPagePosition(Int_t x, Int_t y); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGLVContainer::SetViewMode(EListViewMode viewMode); virtual voidTGContainer::SetVsbPosition(Int_t newPos); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSort(EFSSortMode sortType); virtual voidTGContainer::SpacePressed(TGFrame*)SIGNAL ; voidStartRefreshTimer(ULong_t msec = 1000); voidStopRefreshTimer(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGFileContainer(const TGFileContainer&); TGFileContainer(TGCanvas* p, UInt_t options = kSunkenFrame, Pixel_t back = GetDefaultFrameBackground()); TGFileContainer(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = kSunkenFrame, Pixel_t back = GetDefaultFrameBackground()); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGContainer::UnSelectAll()SIGNAL ; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGFileContainer.html:18850,Test,TestBit,18850,root/html602/TGFileContainer.html,https://root.cern,https://root.cern/root/html602/TGFileContainer.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"* name); virtual voidTObject::RecursiveRemove(TObject* obj); UInt_tTRefCnt::References() const; UInt_tTRefCnt::RemoveReference(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidSetArcMode(Int_t v); voidSetAttributes(GCValues_t* values); voidSetBackground(Pixel_t v); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCapStyle(Int_t v); voidSetClipMask(Pixmap_t v); voidSetClipXOrigin(Int_t v); voidSetClipYOrigin(Int_t v); voidSetDashList(const char[] v, Int_t len); voidSetDashOffset(Int_t v); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetFillRule(Int_t v); voidSetFillStyle(Int_t v); voidSetFont(FontH_t v); voidSetForeground(Pixel_t v); voidSetFunction(EGraphicsFunction v); voidSetGraphicsExposures(Bool_t v); voidSetJoinStyle(Int_t v); voidSetLineStyle(Int_t v); voidSetLineWidth(Int_t v); static voidTObject::SetObjectStat(Bool_t stat); voidSetPlaneMask(ULong_t v); voidTRefCnt::SetRefCount(UInt_t r); voidSetStipple(Pixmap_t v); voidSetSubwindowMode(Int_t v); voidSetTile(Pixmap_t v); voidSetTileStipXOrigin(Int_t v); voidSetTileStipYOrigin(Int_t v); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGGC(GCValues_t* values = 0); TGGC(const TGGC& g); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGGC.html:5992,Test,TestBit,5992,root/html602/TGGC.html,https://root.cern,https://root.cern/root/html602/TGGC.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); virtual voidSetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TStreamerObjectAnyPointer.html:6533,Test,TestBit,6533,root/html528/TStreamerObjectAnyPointer.html,https://root.cern,https://root.cern/root/html528/TStreamerObjectAnyPointer.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"* name, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2); Default constructor specifying minimum and maximum radius. TGeoTubeSeg(Double_t* params); Default constructor specifying minimum and maximum radius; param[0] = Rmin; param[1] = Rmax; param[2] = dz; param[3] = phi1; param[4] = phi2. ~TGeoTubeSeg(); destructor. Double_t Capacity() const; Computes capacity of the shape in [length^3]. Double_t Capacity(Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2); Computes capacity of the shape in [length^3]. void ComputeBBox(); compute bounding box of the tube segment. void ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. void ComputeNormalS(Double_t* point, Double_t* dir, Double_t* norm, Double_t rmin, Double_t rmax, Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2); Compute normal to closest surface from POINT. Bool_t Contains(Double_t* point) const; test if point is inside this tube segment; first check if point is inside the tube. Int_t DistancetoPrimitive(Int_t px, Int_t py); compute closest distance from point px,py to each corner. Double_t DistFromInsideS(Double_t* point, Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2, Double_t cm, Double_t sm, Double_t cdfi); Compute distance from inside point to surface of the tube segment (static); Boundary safe algorithm.; Do Z. Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to surface of the tube segment; Boundary safe algorithm. Double_t DistFromOutsideS(Double_t* point, Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2, Double_t cm, Double_t sm, Double_t cdfi); Static method to compute distance to arbitrary tube segment from outside point; Boundary safe algorithm. Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoTubeSeg.html:14185,test,test,14185,root/html528/TGeoTubeSeg.html,https://root.cern,https://root.cern/root/html528/TGeoTubeSeg.html,3,['test'],['test']
Testability,"* name, RooAbsArg* owner, const RooListProxy& other); RooListProxy(const char* name, const char* desc, RooAbsArg* owner, Bool_t defValueServer = kTRUE, Bool_t defShapeServer = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); RooAbsCollection*RooAbsCollection::selectByAttrib(const char* name, Bool_t value) const; RooAbsCollection*RooAbsCollection::selectByName(const char* nameList, Bool_t verbose = kFALSE) const; RooAbsCollection*RooAbsCollection::selectCommon(const RooAbsCollection& refColl) const; voidRooAbsCollection::setAttribAll(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidRooAbsCollection::setHashTableSize(Int_t i); voidRooAbsCollection::setName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; RooAbsCollection*RooAbsCollection::snapshot(Bool_t deepCopy = kTRUE) const; Bool_tRooAbsCollection::snapshot(RooAbsCollection& output, Bool_t deepCopy = kTRUE) const; voidRooArgList::sort(Bool_t reverse = kFALSE); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; voidRooAbsCollection::takeOwnership(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidRooArgList::writeToStream(ostream& os, Bool_t compact).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooListProxy.html:9725,Test,TestBit,9725,root/html602/RooListProxy.html,https://root.cern,https://root.cern/root/html602/RooListProxy.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTGObject::SaveAs(const char* filename = """", Option_t* option = """") const; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGResourcePool.html:5981,Test,TestBit,5981,root/html528/TGResourcePool.html,https://root.cern,https://root.cern/root/html528/TGResourcePool.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidSetId(TGButton* button, Long_t id); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGToolBar(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = kHorizontalFrame, Pixel_t back = GetDefaultFrameBackground()); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGToolBar.html:14611,Test,TestBit,14611,root/html602/TGToolBar.html,https://root.cern,https://root.cern/root/html602/TGToolBar.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; voidSmoothin(TGraph* grin); TGraph*SmoothKern(TGraph* grin, Option_t* option = ""normal"", Double_t bandwidth = 0.5, Int_t nout = 100, Double_t* xout = 0); TGraph*SmoothLowess(TGraph* grin, Option_t* option = """", Double_t span = 0.67000000000000004, Int_t iter = 3, Double_t delta = 0); TGraph*SmoothSuper(TGraph* grin, Option_t* option = """", Double_t bass = 0, Double_t span = 0, Bool_t isPeriodic = kFALSE, Double_t* w = 0); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphSmooth(); TGraphSmooth(const char* name); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TGraphSmooth&operator=(const TGraphSmooth&); TGraphSmooth(const TGraphSmooth&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraphSmooth.html:6276,Test,TestBit,6276,root/html602/TGraphSmooth.html,https://root.cern,https://root.cern/root/html602/TGraphSmooth.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"* obj); voidResetAll(); voidTObject::ResetBit(UInt_t f); voidResetState(); Double_tSafety(Bool_t inside = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TGeoNode*SearchNode(Bool_t downwards = kFALSE, const TGeoNode* skipnode = 0); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCheckingOverlaps(Bool_t flag = kTRUE); voidSetCldirChecked(Double_t* dir); voidSetCurrentDirection(const Double_t* dir); voidSetCurrentDirection(Double_t nx, Double_t ny, Double_t nz); voidSetCurrentPoint(const Double_t* point); voidSetCurrentPoint(Double_t x, Double_t y, Double_t z); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetLastPoint(Double_t x, Double_t y, Double_t z); voidSetLastSafetyForPoint(Double_t safe, const Double_t* point); voidSetLastSafetyForPoint(Double_t safe, Double_t x, Double_t y, Double_t z); static voidTObject::SetObjectStat(Bool_t stat); voidSetOutside(Bool_t flag = kTRUE); voidSetStartSafe(Bool_t flag = kTRUE); voidSetStep(Double_t step); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; TGeoNode*Step(Bool_t is_geom = kTRUE, Bool_t cross = kTRUE); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGeoNavigator(); TGeoNavigator(TGeoManager* geom); voidTopToMaster(const Double_t* top, Double_t* master) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoNavigator.html:8802,Test,TestBit,8802,root/html602/TGeoNavigator.html,https://root.cern,https://root.cern/root/html602/TGeoNavigator.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; UInt_tTargetSelectionToUInt(TMVA::ETargetSelection ts) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); voidTrainMonoTargetRegression(); voidTrainMultiTargetRegression(); voidTrainSeparatedClassification(); voidTrainUnifiedClassification(); TMVA::EKernelUIntToKernel(UInt_t iker); TMVA::ETargetSelectionUIntToTargetSelection(UInt_t its); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodPDEFoam.html:11247,Test,TestBits,11247,root/html528/TMVA__MethodPDEFoam.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodPDEFoam.html,1,['Test'],['TestBits']
Testability,"* obj, const TString& opt); virtual Bool_tTEveElement::SetRnrChildren(Bool_t rnr); virtual Bool_tTEveElement::SetRnrSelf(Bool_t rnr); virtual Bool_tTEveElement::SetRnrSelfChildren(Bool_t rnr_self, Bool_t rnr_children); virtual Bool_tTEveElement::SetRnrState(Bool_t rnr); voidTEveElement::SetSourceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector&); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEvePlot3D.html:15591,Test,TestBit,15591,root/html534/TEvePlot3D.html,https://root.cern,https://root.cern/root/html534/TEvePlot3D.html,3,['Test'],"['TestBit', 'TestBits', 'TestCSCBits']"
Testability,"* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TH2PolyBin&operator=(const TH2PolyBin&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetChanged(Bool_t flag); voidSetContent(Double_t content); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH2PolyBin.html:4716,Test,TestBit,4716,root/html534/TH2PolyBin.html,https://root.cern,https://root.cern/root/html534/TH2PolyBin.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TEnvRec&operator=(const TEnvRec&); TEnvRec&operator=(TEnvRec&&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; TEnvRec(); TEnvRec(TEnvRec&&); TEnvRec(const TEnvRec&); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEnvRec.html:6340,Test,TestBit,6340,root/html602/TEnvRec.html,https://root.cern,https://root.cern/root/html602/TEnvRec.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TEveMCRecCrossRef&operator=(const TEveMCRecCrossRef&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TEveMCRecCrossRef(); TEveMCRecCrossRef(const TEveMCRecCrossRef&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveMCRecCrossRef.html:4293,Test,TestBit,4293,root/html602/TEveMCRecCrossRef.html,https://root.cern,https://root.cern/root/html602/TEveMCRecCrossRef.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidTGeoBBox::SetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidSetPoints(Float_t* points) const; voidTGeoShape::SetRuntime(Bool_t flag = kTRUE); virtual voidSetSegsAndPols(TBuffer3D& buff) const; voidTGeoShape::SetShapeBit(UInt_t f); voidTGeoShape::SetShapeBit(UInt_t f, Bool_t set); virtual voidTNamed::SetTitle(const char* title = """")MENU ; static voidTGeoShape::SetTransform(TGeoMatrix* matrix); virtual voidTObject::SetUniqueID(UInt_t uid); Int_tTGeoShape::ShapeDistancetoPrimitive(Int_t numpoints, Int_t px, Int_t py) const; virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidTGeoBBox::Sizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTGeoShape::TestShapeBit(UInt_t f) const; Int_tTGeoShape::TestShapeBits(UInt_t f) const; static Double_tTGeoShape::Tolerance(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoShapeAssembly.html:10145,Test,TestBit,10145,root/html534/TGeoShapeAssembly.html,https://root.cern,https://root.cern/root/html534/TGeoShapeAssembly.html,4,['Test'],"['TestBit', 'TestBits', 'TestShapeBit', 'TestShapeBits']"
Testability,"* option = """") constMENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetAspectRatio(Float_t factor = 1); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTShape::SetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidSetNumberOfDivisions(Int_t ndiv); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTShape::SetVisibility(Int_t vis)MENU ; virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidSizeof3D() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTShape::TransformPoints(Double_t* points, UInt_t NbPnts) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTUBE.html:6524,Test,TestBit,6524,root/html530/TTUBE.html,https://root.cern,https://root.cern/root/html530/TTUBE.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"* option = """") constMENU ; virtual voidTAttMarker::SaveMarkerAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t sizdef = 1); virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t mcolor = 1); virtual voidTAttMarker::SetMarkerColorAlpha(Color_t mcolor, Float_t malpha); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual Int_tSetNextPoint(Double_t x, Double_t y)MENU ; static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoint(Int_t point, Double_t x, Double_t y)MENU ; virtual voidSetPolyMarker(Int_t n); virtual voidSetPolyMarker(Int_t n, Float_t* x, Float_t* y, Option_t* option = """"); virtual voidSetPolyMarker(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tSize() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TPolyMarker(); TPolyMarker(const TPolyMarker& polymarker); TPolyMarker(Int_t n, Option_t* option = """"); TPolyMarker(Int_t n, Float_t* x, Float_t* y, Option_t* option = """"); TPolyMarker(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPolyMarker.html:5704,Test,TestBit,5704,root/html602/TPolyMarker.html,https://root.cern,https://root.cern/root/html602/TPolyMarker.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tScanLcurve(Int_t nPoint, Double_t tauMin, Double_t tauMax, TGraph** lCurve, TSpline** logTauX = 0, TSpline** logTauY = 0); voidSetBias(const TH1* bias); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetConstraint(TUnfold::EConstraint constraint); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEpsMatrix(Double_t eps); virtual Int_tSetInput(const TH1* hist_y, Double_t scaleBias = 0.0, Double_t oneOverZeroError = 0.0, const TH2* hist_vyy = 0, const TH2* hist_vyy_inv = 0); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. TUnfold(); voidAddMSparse(TMatrixDSparse* dest, Double_t f, const TMatrixDSparse* src) const; Bool_tAddRegularisationCondition(Int_t nEle, const Int_t* indices, const Double_t* rowData); Bool_tAddRegularisationCondition(Int_t i0, Double_t f0, Int_t i1 = -1, Double_t f1 = 0., Int_t i2 = -1, Double_t f2 = 0.); voidClearHistogram(TH1* h, Double_t x = 0.) const; virtual voidClearResults(); TMatrixDSparse*CreateSparseMatrix(Int_t nrow, Int_t ncol, Int_t nele, Int_t* row, Int_t* col, Double_t* data) const; static voidDeleteMatrix(TMatrixD** m); static voidDeleteMatrix(TMatrixDSparse** m); virtual voidTObject::DoErr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfold.html:14500,Test,TestBit,14500,root/html534/TUnfold.html,https://root.cern,https://root.cern/root/html534/TUnfold.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"* option = """"); Draw the polygon. void FinishPolygon(); Decompose polygon in a convex outscribed part and a list of daughter; polygons that have to be substracted to get the actual one. void GetVertices(Double_t* x, Double_t* y) const; Fill list of vertices into provided arrays. void GetConvexVertices(Double_t* x, Double_t* y) const; Fill list of vertices of the convex outscribed polygon into provided arrays. Bool_t IsRightSided(const Double_t* point, Int_t ind1, Int_t ind2) const; Check if POINT is right-sided with respect to the segment defined by IND1 and IND2. Bool_t IsSegConvex(Int_t i1, Int_t i2 = -1) const; Check if a segment [0..fNvert-1] belongs to the outscribed convex pgon. Bool_t IsIllegalCheck() const; Check for illegal crossings between non-consecutive segments. void OutscribedConvex(); Compute indices for the outscribed convex polygon. Double_t Safety(const Double_t* point, Int_t& isegment) const; Compute minimum distance from POINT to any segment. Returns segment index. void SetNextIndex(Int_t index = -1); Sets the next polygone index. If index<0 sets all indices consecutive; in increasing order. void SetXY(Double_t* x, Double_t* y); Set X/Y array pointer for the polygon and daughters. TGeoPolygon(); constructors. Int_t GetNvert() const; {return fNvert;}. Int_t GetNconvex() const; {return fNconvex;}. Double_t * GetX(); {return fX;}. Double_t * GetY(); {return fY;}. Bool_t IsClockwise() const; {return !TObject::TestBit(kGeoACW);}. Bool_t IsConvex() const; {return TObject::TestBit(kGeoConvex);}. Bool_t IsFinished() const; {return TObject::TestBit(kGeoFinishPolygon);}. void SetConvex(Bool_t flag = kTRUE); {TObject::SetBit(kGeoConvex,flag);}. » Author: Mihaela Gheata 05/01/04 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-03-14 16:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoPolygon.html:9634,Test,TestBit,9634,root/html534/TGeoPolygon.html,https://root.cern,https://root.cern/root/html534/TGeoPolygon.html,3,['Test'],['TestBit']
Testability,"* option = """"); Draw the polygon. void FinishPolygon(); Decompose polygon in a convex outscribed part and a list of daughter; polygons that have to be substracted to get the actual one. void GetVertices(Double_t* x, Double_t* y) const; Fill list of vertices into provided arrays. void GetConvexVertices(Double_t* x, Double_t* y) const; Fill list of vertices of the convex outscribed polygon into provided arrays. Bool_t IsRightSided(const Double_t* point, Int_t ind1, Int_t ind2) const; Check if POINT is right-sided with respect to the segment defined by IND1 and IND2. Bool_t IsSegConvex(Int_t i1, Int_t i2 = -1) const; Check if a segment [0..fNvert-1] belongs to the outscribed convex pgon. Bool_t IsIllegalCheck() const; Check for illegal crossings between non-consecutive segments. void OutscribedConvex(); Compute indices for the outscribed convex polygon. Double_t Safety(const Double_t* point, Int_t& isegment) const; Compute minimum distance from POINT to any segment. Returns segment index. void SetNextIndex(Int_t index = -1); Sets the next polygone index. If index<0 sets all indices consecutive; in increasing order. void SetXY(Double_t* x, Double_t* y); Set X/Y array pointer for the polygon and daughters. TGeoPolygon(); constructors. Int_t GetNvert() const; {return fNvert;}. Int_t GetNconvex() const; {return fNconvex;}. Double_t * GetX(); {return fX;}. Double_t * GetY(); {return fY;}. Bool_t IsClockwise() const; {return !TObject::TestBit(kGeoACW);}. Bool_t IsConvex() const; {return TObject::TestBit(kGeoConvex);}. Bool_t IsFinished() const; {return TObject::TestBit(kGeoFinishPolygon);}. void SetConvex(Bool_t flag = kTRUE); {TObject::SetBit(kGeoConvex,flag);}. » Author: Mihaela Gheata 05/01/04 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-06-02 16:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoPolygon.html:10176,Test,TestBit,10176,root/html604/TGeoPolygon.html,https://root.cern,https://root.cern/root/html604/TGeoPolygon.html,3,['Test'],['TestBit']
Testability,"* option = """"); Draw the polygon. void FinishPolygon(); Decompose polygon in a convex outscribed part and a list of daughter; polygons that have to be substracted to get the actual one. void GetVertices(Double_t* x, Double_t* y) const; Fill list of vertices into provided arrays. void GetConvexVertices(Double_t* x, Double_t* y) const; Fill list of vertices of the convex outscribed polygon into provided arrays. Bool_t IsRightSided(const Double_t* point, Int_t ind1, Int_t ind2) const; Check if POINT is right-sided with respect to the segment defined by IND1 and IND2. Bool_t IsSegConvex(Int_t i1, Int_t i2 = -1) const; Check if a segment [0..fNvert-1] belongs to the outscribed convex pgon. Bool_t IsIllegalCheck() const; Check for illegal crossings between non-consecutive segments. void OutscribedConvex(); Compute indices for the outscribed convex polygon. Double_t Safety(const Double_t* point, Int_t& isegment) const; Compute minimum distance from POINT to any segment. Returns segment index. void SetNextIndex(Int_t index = -1); Sets the next polygone index. If index<0 sets all indices consecutive; in increasing order. void SetXY(Double_t* x, Double_t* y); Set X/Y array pointer for the polygon and daughters. TGeoPolygon(); constructors. Int_t GetNvert() const; {return fNvert;}. Int_t GetNconvex() const; {return fNconvex;}. Double_t * GetX(); {return fX;}. Double_t * GetY(); {return fY;}. Bool_t IsClockwise() const; {return !TObject::TestBit(kGeoACW);}. Bool_t IsConvex() const; {return TObject::TestBit(kGeoConvex);}. Bool_t IsFinished() const; {return TObject::TestBit(kGeoFinishPolygon);}. void SetConvex(Bool_t flag = kTRUE); {TObject::SetBit(kGeoConvex,flag);}. » Author: Mihaela Gheata 05/01/04 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-06-30 15:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoPolygon.html:10176,Test,TestBit,10176,root/html602/TGeoPolygon.html,https://root.cern,https://root.cern/root/html602/TGeoPolygon.html,3,['Test'],['TestBit']
Testability,"* option = """"); virtual voidPaintSingleObject(TVirtualGLPainter*); virtual voidPanObject(TVirtualGLPainter* o, Int_t x, Int_t y); virtual Bool_tPlotSelected(TVirtualGLPainter* plot, Int_t px, Int_t py); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual voidPrintViewer(TVirtualViewer3D* vv); virtual Int_tTObject::Read(const char* name); virtual voidReadGLBuffer(Int_t ctxInd); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual Bool_tResizeOffScreenDevice(Int_t ctxInd, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Bool_tSelectManip(TVirtualGLManip* manip, const TGLCamera* camera, const TGLRect* rect, const TGLBoundingBox* sceneBox); virtual voidSelectOffScreenDevice(Int_t ctxInd); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLManager.html:6206,Test,TestBit,6206,root/html530/TGLManager.html,https://root.cern,https://root.cern/root/html530/TGLManager.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"* option = """"); virtual voidPaintSingleObject(TVirtualGLPainter*); virtual voidPanObject(TVirtualGLPainter* o, Int_t x, Int_t y); virtual Bool_tPlotSelected(TVirtualGLPainter* plot, Int_t px, Int_t py); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual voidPrintViewer(TVirtualViewer3D* vv); virtual Int_tTObject::Read(const char* name); virtual voidReadGLBuffer(Int_t devInd); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual Bool_tResizeOffScreenDevice(Int_t devInd, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Bool_tSelectManip(TVirtualGLManip* manip, const TGLCamera* camera, const TGLRect* rect, const TGLBoundingBox* sceneBox); virtual voidSelectOffScreenDevice(Int_t devInd); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TX11GLManager.html:5691,Test,TestBit,5691,root/html530/TX11GLManager.html,https://root.cern,https://root.cern/root/html530/TX11GLManager.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"* option = """"); virtual voidTColor::SetAlpha(Float_t a); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCoordinateMode(TColorGradient::ECoordinateMode mode); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTColor::SetGrayscale(Bool_t set = kTRUE); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); static voidTColor::SetPalette(Int_t ncolors, Int_t* colors, Float_t alpha = 1.); virtual voidTColor::SetRGB(Float_t r, Float_t g, Float_t b); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. TColorGradient(); TColorGradient(Color_t newColor, UInt_t nPoints, const Double_t* points, const Color_t* colorIndices, TColorGradient::ECoordinateMode mode = kObjectBoundingMode); TColorGradient(Color_t newColor, UInt_t nPoints, const Double_t* points, const Double_t* colors, TColorGradient::ECoordinateMode mode = kObjectBoundingMode); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. voidRegisterColor(Color_t colorIndex). Data Members; public:. enum ECoordinateMode { kPadMode; kObjectBoundingMode;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TColorGradient.html:8367,Test,TestBit,8367,root/html534/TColorGradient.html,https://root.cern,https://root.cern/root/html534/TColorGradient.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidSetMaxima(Int_t maxop = 1000, Int_t maxpar = 1000, Int_t maxconst = 1000); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidSetNumber(Int_t number); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetParameter(const char* name, Double_t parvalue); virtual voidSetParameter(Int_t ipar, Double_t parvalue); virtual voidSetParameters(const Double_t* params); virtual voidSetParameters(Double_t p0, Double_t p1, Double_t p2 = 0, Double_t p3 = 0, Double_t p4 = 0, Double_t p5 = 0, Double_t p6 = 0, Double_t p7 = 0, Double_t p8 = 0, Double_t p9 = 0, Double_t p10 = 0)MENU ; virtual voidSetParName(Int_t ipar, const char* name); virtual voidSetParNames(const char* name0 = ""p0"", const char* name1 = ""p1"", const char* name2 = ""p2"", const char* name3 = ""p3"", const char* name4 = ""p4"", const char* name5 = ""p5"", const char* name6 = ""p6"", const char* name7 = ""p7"", const char* name8 = ""p8"", const char* name9 = ""p9"", const char* name10 = ""p10"")MENU ; virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidUpdate(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFormula.html:9646,Test,TestBit,9646,root/html534/TFormula.html,https://root.cern,https://root.cern/root/html534/TFormula.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetErrmsgcallback(void* p) const; virtual Bool_tSetErrorMessages(Bool_t enable = kTRUE); virtual voidSetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc); virtual voidSetgvp(Long_t) const; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetProcessLineLock(Bool_t lock = kTRUE); virtual voidSetRTLD_LAZY() const; virtual voidSetRTLD_NOW() const; virtual voidSetTempLevel(int val) const; virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTypedefInfo_Delete(TypedefInfo_t* tinfo) const; virtual TypedefInfo_t*TypedefInfo_Factory() const; virtual TypedefInfo_t*TypedefInfo_FactoryCopy(TypedefInfo_t* tinfo) const; virtual voidTypedefInfo_Init(TypedefInfo_t* tinfo, const char* funcname) const; virtual boolTypedefInfo_IsValid(TypedefInfo_t* tinfo) const; virtual const char*TypedefInfo_Name(TypedefInfo_t* tinfo) const; virtual Long_tTypedefInfo_Property(TypedefInfo_t* tinfo) const; virtual intTypedefInfo_Size(TypedefInfo_t* tinfo) const; virtual const char*TypedefInfo_Title(TypedefInfo_t* tinfo) const; virtual const char*TypedefInfo_TrueName(TypedefInfo_t* tinfo) const; virtual voidTypeInfo_Delete(TypeInfo_t* tinfo) const; virtual TypeInfo_t*TypeInfo_Factory() const; virtual TypeInfo_t*TypeInfo_Factory(G__value*) const; virtual TypeInfo_t*TypeInfo_FactoryCopy(TypeInfo_t*) const; virtual voidTypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TCint.html:15907,Test,TestBit,15907,root/html530/TCint.html,https://root.cern,https://root.cern/root/html530/TCint.html,2,['Test'],['TestBit']
Testability,"* options = """"); Paint the parallel coordinates graph. void PaintEntries(TParallelCoordSelect* sel = __null); Loop over the entries and paint them. void RemoveVariable(TParallelCoordVar* var); Delete a variable from the graph. TParallelCoordVar* RemoveVariable(const char* var); Delete the variable ""vartitle"" from the graph. void ResetTree(); Reset the tree entry list to the initial one.. void SaveEntryLists(const char* filename = """", Bool_t overwrite = kFALSE); Save the entry lists in a root file ""filename.root"". void SavePrimitive(ostream& out, Option_t* options); Save the TParallelCoord in a macro. void SaveTree(const char* filename = """", Bool_t overwrite = kFALSE); Save the tree in a file if fTreeFileName == """". void SetAxesPosition(); Update the position of the axes. void SetAxisHistogramBinning(Int_t n = 100); Set the same histogram axis binning for all axis. void SetAxisHistogramHeight(Double_t h = 0.5); Set the same histogram axis height for all axis. void SetGlobalLogScale(Bool_t ); All axes in log scale. void SetGlobalScale(Bool_t gl); Constraint all axes to the same scale. void SetAxisHistogramLineWidth(Int_t lw = 2); Set the same histogram axis line width for all axis. void SetCandleChart(Bool_t can); Set a candle chart display. void SetCurrentFirst(Long64_t ); Set the first entry to be dispayed. void SetCurrentN(Long64_t ); Set the number of entry to be displayed. TParallelCoordSelect* SetCurrentSelection(const char* title); Set the selection beeing edited. void SetCurrentSelection(TParallelCoordSelect* sel); Set the selection beeing edited. void SetDotsSpacing(Int_t s = 0); Set dots spacing. Modify the line style 11.; If the canvas support transparency dot spacing is ignored. void SetEntryList(TParallelCoord* para, TEntryList* enlist); Set the entry lists of ""para"". void SetGlobalMax(Double_t max); Force all variables to adopt the same max. void SetGlobalMin(Double_t min); Force all variables to adopt the same min. void SetLiveRangesUpdate(Bool_t ); If ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TParallelCoord.html:16763,log,log,16763,root/html602/TParallelCoord.html,https://root.cern,https://root.cern/root/html602/TParallelCoord.html,2,['log'],['log']
Testability,"* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidSetPoints(Float_t* points) const; voidTGeoShape::SetRuntime(Bool_t flag = kTRUE); virtual voidSetSegsAndPols(TBuffer3D& buff) const; voidTGeoShape::SetShapeBit(UInt_t f); voidTGeoShape::SetShapeBit(UInt_t f, Bool_t set); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidSetTorusDimensions(Double_t r, Double_t rmin, Double_t rmax, Double_t phi1, Double_t dphi); static voidTGeoShape::SetTransform(TGeoMatrix* matrix); virtual voidTObject::SetUniqueID(UInt_t uid); Int_tTGeoShape::ShapeDistancetoPrimitive(Int_t numpoints, Int_t px, Int_t py) const; virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidSizeof3D() const; Int_tSolveCubic(Double_t a, Double_t b, Double_t c, Double_t* x) const; Int_tSolveQuartic(Double_t a, Double_t b, Double_t c, Double_t d, Double_t* x) const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTGeoShape::TestShapeBit(UInt_t f) const; Int_tTGeoShape::TestShapeBits(UInt_t f) const; Double_tToBoundary(Double_t* pt, Double_t* dir, Double_t r, Bool_t in) const; static Double_tTGeoShape::Tolerance(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoTorus.html:9805,Test,TestBit,9805,root/html530/TGeoTorus.html,https://root.cern,https://root.cern/root/html530/TGeoTorus.html,8,['Test'],"['TestBit', 'TestBits', 'TestShapeBit', 'TestShapeBits']"
Testability,"* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooNameReg&operator=(const RooNameReg&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; static const TNamed*ptr(const char* stringPtr); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; static const char*str(const TNamed* ptr); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNameReg.html:5041,Test,TestBit,5041,root/html534/RooNameReg.html,https://root.cern,https://root.cern/root/html534/RooNameReg.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TBrowserPlugin&operator=(const TBrowserPlugin&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCommand(const char* cmd); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetSubTab(Int_t sub); voidSetTab(Int_t tab); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TBrowserPlugin.html:4805,Test,TestBit,4805,root/html534/TBrowserPlugin.html,https://root.cern,https://root.cern/root/html534/TBrowserPlugin.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THtml::TModuleDefinition&operator=(const THtml::TModuleDefinition&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidTHtml::THelperBase::SetOwner(THtml* html); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::THelperBaseTHtml::THelperBase::THelperBase(); THtml::THelperBaseTHtml::THelperBase::THelperBase(const THtml::THelperBase&); THtml::TModuleDefinitionTModuleDefinition(); THtml::TModuleDefinitionTModuleDefinition(const THtml::TModuleDefinition&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/THtml__TModuleDefinition.html:4553,Test,TestBit,4553,root/html530/THtml__TModuleDefinition.html,https://root.cern,https://root.cern/root/html530/THtml__TModuleDefinition.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetMinMax(const Rgl::Range_t& newRange); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetSliceWidth(Int_t width = 1)MENU ; virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLTH3Slice.html:4994,Test,TestBit,4994,root/html534/TGLTH3Slice.html,https://root.cern,https://root.cern/root/html534/TGLTH3Slice.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TStructNodeProperty&operator=(const TStructNodeProperty&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetColor(const TColor& color); voidSetColor(Pixel_t pixel); voidSetColor(Int_t color); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TStructNodeProperty.html:4880,Test,TestBit,4880,root/html530/TStructNodeProperty.html,https://root.cern,https://root.cern/root/html530/TStructNodeProperty.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TVirtualViewer3D&operator=(const TVirtualViewer3D&); virtual voidPadPaint(TVirtualPad*); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual Bool_tPreferLocalFrame() const; virtual voidTObject::Print(Option_t* option = """") const; virtual voidPrintObjects(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidResetCameras(); virtual voidResetCamerasAfterNextUpdate(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual TObject*SelectObject(Int_t, Int_t); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); static TVirtualViewer3D*Viewer3D(TVirtualPad* pad = 0, Option_t* type = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualViewer3D.html:15881,Test,TestBit,15881,root/html534/TVirtualViewer3D.html,https://root.cern,https://root.cern/root/html534/TVirtualViewer3D.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::PdfProposal&operator=(const RooStats::PdfProposal&); virtual voidTObject::Paint(Option_t* option = """"); RooStats::PdfProposalPdfProposal(); RooStats::PdfProposalPdfProposal(RooAbsPdf& pdf); RooStats::PdfProposalPdfProposal(const RooStats::PdfProposal&); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidprintMappings(); virtual voidPropose(RooArgSet& xPrime, RooArgSet& x); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidReset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetCacheSize(Int_t size); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOwnsPdf(Bool_t ownsPdf); virtual voidSetPdf(RooAbsPdf& pdf); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__PdfProposal.html:6152,Test,TestBit,6152,root/html526/RooStats__PdfProposal.html,https://root.cern,https://root.cern/root/html526/RooStats__PdfProposal.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGListLayout&operator=(const TGListLayout&); TGListLayout&operator=(TGListLayout&&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTGLayoutManager::SetDefaultHeight(UInt_t); virtual voidTGLayoutManager::SetDefaultWidth(UInt_t); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTGLayoutManager::SetModified(Bool_t flag = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGListLayout(TGListLayout&&); TGListLayout(const TGListLayout&); TGListLayout(TGCompositeFrame* main, Int_t sep = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGListLayout.html:5522,Test,TestBit,5522,root/html602/TGListLayout.html,https://root.cern,https://root.cern/root/html602/TGListLayout.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); doubleoperator()(double x, double y, double z) const; RooCFunction3Ref<double,double,double,double>&operator=(const RooCFunction3Ref<double,double,double,double>&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); RooCFunction3Ref<double,double,double,double>(double(*)(double,double,double) ptr = 0); RooCFunction3Ref<double,double,double,double>(const RooCFunction3Ref<double,double,double,double>&); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer& R__b); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3Ref_double_double_double_double_.html:5330,Test,TestBit,5330,root/html602/RooCFunction3Ref_double_double_double_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3Ref_double_double_double_double_.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetFieldValue(Double_t Bx, Double_t By, Double_t Bz); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGeoUniformMagField(); TGeoUniformMagField(Double_t Bx, Double_t By, Double_t Bz); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoUniformMagField.html:4710,Test,TestBit,4710,root/html602/TGeoUniformMagField.html,https://root.cern,https://root.cern/root/html602/TGeoUniformMagField.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMethod&operator=(const TMethod& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Long_tTFunction::Property() const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetMenuItem(EMenuItemKind menuItem); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual TMethodCall*SetterMethod(); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMethod.html:5420,Test,TestBit,5420,root/html528/TMethod.html,https://root.cern,https://root.cern/root/html528/TMethod.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNetFileStager&operator=(const TNetFileStager&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual Bool_tTFileStager::Stage(const char*, Option_t* = 0); virtual Bool_tTFileStager::Stage(TCollection* pathlist, Option_t* opt = 0); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TNetFileStager.html:5224,Test,TestBit,5224,root/html534/TNetFileStager.html,https://root.cern,https://root.cern/root/html534/TNetFileStager.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* name = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidReset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShow(const char* name); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStart(const char* name); virtual voidStop(const char* name); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidSummary(Float_t& rt, Float_t& cp); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBenchmark.html:4807,Test,TestBit,4807,root/html528/TBenchmark.html,https://root.cern,https://root.cern/root/html528/TBenchmark.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TToggle&operator=(const TToggle&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOffValue(Long_t lof); virtual voidSetOnValue(Long_t lon); virtual voidSetState(Bool_t state); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidSetToggledObject(TObject* obj, TMethod* anymethod); virtual voidSetToggledVariable(Int_t& var); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetValue(Long_t val); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidToggle(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TToggle.html:5771,Test,TestBit,5771,root/html530/TToggle.html,https://root.cern,https://root.cern/root/html530/TToggle.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidP2X(const Double_t* p, Double_t* x, Int_t nTest); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* opt = ""MSE"") constMENU ; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidSumOfSquareResiduals(const Double_t* x, Double_t* s); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; voidTest(Option_t* option = """")MENU ; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TPrincipal(); TPrincipal(Int_t nVariables, Option_t* opt = ""ND""); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidX2P(const Double_t* x, Double_t* p).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPrincipal.html:10383,Test,TestBit,10383,root/html602/TPrincipal.html,https://root.cern,https://root.cern/root/html602/TPrincipal.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; voidPutObjectWithID(TObject* obj, UInt_t uid = 0); virtual Int_tTObject::Read(const char* name); virtual voidRecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidSetObjectCount(UInt_t number); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProcessID.html:6690,Test,TestBit,6690,root/html530/TProcessID.html,https://root.cern,https://root.cern/root/html530/TProcessID.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); MINIMIZER*minimizer(); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; RooAbsReal&nll(); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; Int_tnumEval() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooProfileLL.html:19075,test,testArg,19075,root/html534/RooProfileLL.html,https://root.cern,https://root.cern/root/html534/RooProfileLL.html,1,['test'],['testArg']
Testability,"* t); virtual voidSetTrackParams(const TEveTrack& t); virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp) const; virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTPolyMarker3D::Size() const; virtual voidTAtt3D::Sizeof3D() const; voidSortPathMarksByTime(); voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTEvePointSet::TakeAction(TEvePointSelector*); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; TEveTrack(); TEveTrack(const TEveTrack& t); TEveTrack(TEveMCTrack* t, TEveTrackPropagator* prop = 0); TEveTrack(TEveRecTrack* t, TEveTrackPropagator* prop = 0); TEveTrack(TEveRecTrackD* t, TEveTrackPropagator* prop = 0); TEveTrack(TParticle* t, Int_t label, TEveTrackPropagator* prop = 0); virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveTrack.html:22881,Test,TestBit,22881,root/html602/TEveTrack.html,https://root.cern,https://root.cern/root/html602/TEveTrack.html,2,['Test'],['TestBit']
Testability,"* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); virtual voidsetVal(Double_t value); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::shapeClientMIterator() const; virtual voidShowMembers(TMemberInspector&); RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs); RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs, const RooArgSet& nset); virtual Int_tTNamed::Sizeof() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig(Bool_t createOnTheFly); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); const map<std::string,std::string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const set<std::string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; RooFIterRooAbsArg::valueClientMIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); virtual Double_tRooAbsRealLValue::volume(const char* rangeName) const; virtual Double_tRooAbsRealLValue::volume(const RooAbsBinning& binning) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; voidRooAbsArg::wireAllCaches(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidwriteToStream(ostream& o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooErrorVar.html:30664,Test,TestBits,30664,root/html534/RooErrorVar.html,https://root.cern,https://root.cern/root/html534/RooErrorVar.html,3,['Test'],['TestBits']
Testability,"* u, Int_t flag); Minimization function for H1s using a Chisquare method; Default method (function evaluated at center of bin); for each point the cache contains the following info; -1D : bc,e, xc (bin content, error, x of center of bin); -2D : bc,e, xc,yc; -3D : bc,e, xc,yc,zc. void FitChisquareI(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Chisquare method; The ""I""ntegral method is used; for each point the cache contains the following info; -1D : bc,e, xc,xw (bin content, error, x of center of bin, x bin width of bin); -2D : bc,e, xc,xw,yc,yw; -3D : bc,e, xc,xw,yc,yw,zc,zw. void FitLikelihood(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Likelihood method*-*-*-*-*-*; Basically, it forms the likelihood by determining the Poisson; probability that given a number of entries in a particular bin,; the fit would predict it's value. This is then done for each bin,; and the sum of the logs is taken as the likelihood.; Default method (function evaluated at center of bin); for each point the cache contains the following info; -1D : bc,e, xc (bin content, error, x of center of bin); -2D : bc,e, xc,yc; -3D : bc,e, xc,yc,zc. void FitLikelihoodI(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Likelihood method*-*-*-*-*-*; Basically, it forms the likelihood by determining the Poisson; probability that given a number of entries in a particular bin,; the fit would predict it's value. This is then done for each bin,; and the sum of the logs is taken as the likelihood.; The ""I""ntegral method is used; for each point the cache contains the following info; -1D : bc,e, xc,xw (bin content, error, x of center of bin, x bin width of bin); -2D : bc,e, xc,xw,yc,yw; -3D : bc,e, xc,xw,yc,yw,zc,zw. TFitter(const TFitter& ). TFitter& operator=(const TFitter& ). TMinuit * GetMinuit() const; {return fMinuit;}. » Author: Rene ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFitter.html:16252,log,logs,16252,root/html528/TFitter.html,https://root.cern,https://root.cern/root/html528/TFitter.html,6,['log'],['logs']
Testability,"* upar, Int_t npar = 0); virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidRegisterMatrix(TGeoMatrix* matrix); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); TGeoVolume*Volume(const char* name, const char* shape, Int_t nmed, Float_t* upar, Int_t npar = 0); TGeoVolume*Volume(const char* name, const char* shape, Int_t nmed, Double_t* upar, Int_t npar = 0); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoBuilder.html:8587,Test,TestBit,8587,root/html528/TGeoBuilder.html,https://root.cern,https://root.cern/root/html528/TGeoBuilder.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TPoints3DABC&TPoints3DABC::operator=(const TPoints3DABC&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTPoints3DABC::PaintPoints(Int_t n, Float_t* p, Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Int_tSetLastPosition(Int_t idx); virtual Int_tTPoints3DABC::SetNextPoint(Float_t x, Float_t y, Float_t z); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOption(Option_t*); virtual Int_tSetPoint(Int_t, Float_t, Float_t, Float_t); virtual Int_tSetPoints(Int_t, Float_t*, Option_t*); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tSize() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTablePoints.html:6115,Test,TestBit,6115,root/html530/TTablePoints.html,https://root.cern,https://root.cern/root/html530/TTablePoints.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TPointsArray3D&operator=(const TPointsArray3D&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidPaintPoints(Int_t, Float_t*, Option_t*); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Int_tSetLastPosition(Int_t idx); virtual Int_tTPoints3DABC::SetNextPoint(Float_t x, Float_t y, Float_t z); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOption(Option_t* option = """"); virtual Int_tSetPoint(Int_t point, Float_t x, Float_t y, Float_t z)MENU ; virtual Int_tSetPoints(Int_t n, Float_t* p = 0, Option_t* option = """"); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tSize() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TPointsArray3D.html:6438,Test,TestBit,6438,root/html530/TPointsArray3D.html,https://root.cern,https://root.cern/root/html530/TPointsArray3D.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Int_toperator()(Float_t value); Int_toperator()(Int_t value); Int_toperator()(Long_t value); Int_toperator()(Double_t value); TNamed&TNamed::operator=(const TNamed& rhs); Int_toperator[](Int_t value) const; Int_toperator[](Long_t value) const; Int_toperator[](Double_t value) const; Int_toperator[](void* value) const; virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTableSorter.html:8744,Test,TestBit,8744,root/html530/TTableSorter.html,https://root.cern,https://root.cern/root/html530/TTableSorter.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Bool_tProcess(Long64_t entry); virtual Bool_tTSelector::ProcessCut(Long64_t); virtual voidTSelector::ProcessFill(Long64_t); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTSelector::SetInputList(TList* input); virtual voidTSelector::SetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTSelector::SetOption(const char* option); virtual voidTSelector::SetStatus(Long64_t status); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidSlaveBegin(TTree* tree); virtual voidSlaveTerminate(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual Int_tVersion() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPySelector.html:6414,Test,TestBit,6414,root/html528/TPySelector.html,https://root.cern,https://root.cern/root/html528/TPySelector.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::PointSetInterval&operator=(const RooStats::PointSetInterval&); virtual voidTObject::Paint(Option_t* option = """"); RooStats::PointSetIntervalPointSetInterval(const char* name = 0); RooStats::PointSetIntervalPointSetInterval(const RooStats::PointSetInterval&); RooStats::PointSetIntervalPointSetInterval(const char* name, RooAbsData&); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetConfidenceLevel(Double_t cl); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Double_tUpperLimit(RooRealVar& param); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__PointSetInterval.html:5710,Test,TestBit,5710,root/html602/RooStats__PointSetInterval.html,https://root.cern,https://root.cern/root/html602/RooStats__PointSetInterval.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual voidPrintEnv(EEnvLevel level = kEnvAll) const; virtual Int_tTObject::Read(const char* name); virtual Int_tReadFile(const char* fname, EEnvLevel level); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidSave(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSaveLevel(EEnvLevel level); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetRcName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetValue(const char* name, EEnvLevel level = kEnvChange); virtual voidSetValue(const char* name, Int_t value); virtual voidSetValue(const char* name, Double_t value); virtual voidSetValue(const char* name, const char* value, EEnvLevel level = kEnvChange, const char* type = 0); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; TEnv(const char* name = """"); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual Int_tWriteFile(const char* fname, EEnvLevel level = kEnvAll).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEnv.html:7077,Test,TestBit,7077,root/html602/TEnv.html,https://root.cern,https://root.cern/root/html602/TEnv.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRolke&operator=(const TRolke&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t*) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetBounding(const bool bnd); voidSetCL(Double_t CL); voidSetCLSigmas(Double_t CLsigmas); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetGaussBkgGaussEff(Int_t x, Double_t bm, Double_t em, Double_t sde, Double_t sdb); voidSetGaussBkgKnownEff(Int_t x, Double_t bm, Double_t sdb, Double_t e); voidSetKnownBkgBinomEff(Int_t x, Int_t z, Int_t m, Double_t b); voidSetKnownBkgGaussEff(Int_t x, Double_t em, Double_t sde, Double_t b); static voidTObject::SetObjectStat(Bool_t stat); voidSetPoissonBkgBinomEff(Int_t x, Int_t y, Int_t z, Double_t tau, Int_t m); voidSetPoissonBkgGaussEff(Int_t x, Int_t y, Double_t em, Double_t tau, Double_t sde); voidSetPoissonBkgKnownEff(Int_t x, Int_t y, Double_t tau, Double_t e); voidSetSwitch(bool bnd); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRolke(const TRolke&); TRolke(Double_t CL = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRolke.html:10511,Test,TestBit,10511,root/html602/TRolke.html,https://root.cern,https://root.cern/root/html602/TRolke.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); doubleoperator()(double x, double y, double z, double w) const; RooCFunction4Ref<double,double,double,double,double>&operator=(const RooCFunction4Ref<double,double,double,double,double>&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); RooCFunction4Ref<double,double,double,double,double>(double(*)(double,double,double,double) ptr = 0); RooCFunction4Ref<double,double,double,double,double>(const RooCFunction4Ref<double,double,double,double,double>&); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer& R__b); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction4Ref_double_double_double_double_double_.html:5417,Test,TestBit,5417,root/html602/RooCFunction4Ref_double_double_double_double_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction4Ref_double_double_double_double_double_.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"*) const; voidTObject::MayNotUse(const char* method) const; virtual Int_tMerge(TCollection* in); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TParameter<int>&operator=(const TParameter<int>&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t*) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetMergeMode(char mergemode = '+'); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetVal(const int& val); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TParameter_int_.html:4657,Test,TestBit,4657,root/html530/TParameter_int_.html,https://root.cern,https://root.cern/root/html530/TParameter_int_.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"*)h->GetListOfFunctions()->FindObject(name);; or TF1 *f1 = h->GetFunction(name);; Associated functions are automatically painted when an histogram is drawn. To avoid the painting of the associated functions the option HIST should be added to the list of the options used to paint the histogram. Drawing using OpenGL; The class TGLHistPainter allows to paint data set using the OpenGL 3D graphics library. The plotting options start with GL keyword. In addition, in order to inform canvases that OpenGL should be used to render 3D representations, the following option should be set: gStyle->SetCanvasPreferGL(true);; General information: plot types and supported options; The following types of plots are provided:; For lego plots the supported options are:. Option Description . ""GLLEGO"" Draw a lego plot. It works also for TH2Poly. . ""GLLEGO2"" Bins with color levels. . ""GLLEGO3"" Cylindrical bars. . Lego painter in cartesian supports logarithmic scales for X, Y, Z. In polar only Z axis can be logarithmic, in cylindrical only Y.; For surface plots (TF2 and TH2) the supported options are:. Option Description . ""GLSURF"" Draw a surface. . ""GLSURF1"" Surface with color levels . ""GLSURF2"" The same as ""GLSURF1"" but without polygon outlines. . ""GLSURF3"" Color level projection on top of plot (works only in cartesian coordinate system). . ""GLSURF4"" Same as ""GLSURF"" but without polygon outlines. . The surface painting in cartesian coordinates supports logarithmic scales along X, Y, Z axis. In polar coordinates only the Z axis can be logarithmic, in cylindrical coordinates only the Y axis.; Additional options to SURF and LEGO - Coordinate systems:. Option Description . "" "" Default, cartesian coordinates system. . ""POL"" Polar coordinates system. . ""CYL"" Cylindrical coordinates system. . ""SPH"" Spherical coordinates system. . TH3 as color boxes; The supported option is:. Option Description . ""GLCOL"" H3 is drawn using semi-transparent colored boxes. See $ROOTSYS/tutorials/gl/glvox1.C. . TH3 as",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:124024,log,logarithmic,124024,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,1,['log'],['logarithmic']
Testability,"** Deep Learning Network *****; DEEP NEURAL NETWORK: Depth = 4 Input = ( 10, 1, 30 ) Batch size = 100 Loss function = C; Layer 0 LSTM Layer: (NInput = 30, NState = 10, NTime = 10 ) Output = ( 100 , 10 , 10 ); Layer 1 RESHAPE Layer Input = ( 1 , 10 , 10 ) Output = ( 1 , 100 , 100 ) ; Layer 2 DENSE Layer: ( Input = 100 , Width = 64 ) Output = ( 1 , 100 , 64 ) Activation Function = Tanh; Layer 3 DENSE Layer: ( Input = 64 , Width = 1 ) Output = ( 1 , 100 , 1 ) Activation Function = Identity; : Using 2560 events for training and 640 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 0.70799; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.70053 0.692869 0.625222 0.0421632 4287.73 0; : 2 | 0.694153 0.694394 0.638111 0.0419725 4193.66 1; : 3 | 0.689625 0.697522 0.634816 0.0412563 4211.88 2; : 4 | 0.681203 0.694822 0.628686 0.0407413 4252.1 3; : 5 Minimum Test error found - save the configuration ; : 5 | 0.673678 0.681248 0.619972 0.0411822 4319.36 0; : 6 Minimum Test error found - save the configuration ; : 6 | 0.660284 0.667264 0.614022 0.0406714 4360.33 0; : 7 Minimum Test error found - save the configuration ; : 7 | 0.640131 0.636981 0.602694 0.0404119 4446.16 0; : 8 | 0.616397 0.638352 0.610274 0.0409979 4391.54 1; : 9 Minimum Test error found - save the configuration ; : 9 | 0.599679 0.608826 0.618875 0.0405848 4323.09 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.585295 0.60026 0.603058 0.0404042 4443.23 0; : ; : Elapsed time for training with 3200 events: 6.25 sec ; : Evaluate deep neural network on CPU using batches with size = 100; : ; TMVA_LSTM : [dataset] ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html:15859,Test,Test,15859,doc/master/TMVA__RNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html,1,['Test'],['Test']
Testability,"** Deep Learning Network *****; DEEP NEURAL NETWORK: Depth = 4 Input = ( 10, 1, 30 ) Batch size = 100 Loss function = C; Layer 0 LSTM Layer: (NInput = 30, NState = 10, NTime = 10 ) Output = ( 100 , 10 , 10 ); Layer 1 RESHAPE Layer Input = ( 1 , 10 , 10 ) Output = ( 1 , 100 , 100 ) ; Layer 2 DENSE Layer: ( Input = 100 , Width = 64 ) Output = ( 1 , 100 , 64 ) Activation Function = Tanh; Layer 3 DENSE Layer: ( Input = 64 , Width = 1 ) Output = ( 1 , 100 , 1 ) Activation Function = Identity; : Using 2560 events for training and 640 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 0.70799; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.70053 0.692869 0.629389 0.0419042 4255.43 0; : 2 | 0.694153 0.694394 0.642643 0.0421501 4163.24 1; : 3 | 0.689625 0.697522 0.642119 0.0416746 4163.58 2; : 4 | 0.681203 0.694822 0.637781 0.0412238 4190.71 3; : 5 Minimum Test error found - save the configuration ; : 5 | 0.673678 0.681248 0.623882 0.0409529 4288.69 0; : 6 Minimum Test error found - save the configuration ; : 6 | 0.660284 0.667264 0.616834 0.0410715 4342.07 0; : 7 Minimum Test error found - save the configuration ; : 7 | 0.640131 0.636981 0.607427 0.0404816 4409.59 0; : 8 | 0.616397 0.638352 0.60791 0.0403928 4405.16 1; : 9 Minimum Test error found - save the configuration ; : 9 | 0.599679 0.608826 0.606268 0.0407993 4421.11 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.585295 0.60026 0.604906 0.0402508 4427.48 0; : 11 Minimum Test error found - save the configuration ; : 11 | 0.568589 0.592822 0.598106 0.0406425 4484.6 0; : 12 Minimum Test error found - save the conf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:15524,Test,Test,15524,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['Test'],['Test']
Testability,"*** b, Int_t first, Int_t last); virtual Int_tTObject::Read(const char* name); virtual voidTList::RecursiveRemove(TObject* obj); virtual TObject*TList::Remove(TObject* obj); virtual TObject*TList::Remove(TObjLink* lnk); virtual voidTSeqCollection::RemoveAfter(TObject* after); voidTCollection::RemoveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*TSeqCollection::RemoveAt(Int_t idx); virtual voidTSeqCollection::RemoveBefore(TObject* before); virtual voidTSeqCollection::RemoveFirst(); virtual voidTList::RemoveLast(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSort(Bool_t = kSortAscending); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSortedList(Bool_t order = kSortAscending); TSortedList(TSortedList&&); TSortedList(const TSortedList&); voidTSeqCollection::UnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSortedList.html:7813,Test,TestBit,7813,root/html602/TSortedList.html,https://root.cern,https://root.cern/root/html602/TSortedList.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"*/; 524 void BinData::Add( const double* x, double val, double eval ); 525 {; 526 assert( kValueError == fErrorType );; 527 assert( !fData.empty() && fDataPtr );; 528 assert( fDataErrorHigh.empty() && !fDataErrorHighPtr );; 529 assert( fDataErrorLow.empty() && !fDataErrorLowPtr );; 530 assert( !fDataError.empty() && fDataErrorPtr );; 531 assert( fCoordErrors.empty() && fCoordErrorsPtr.empty() );; 532 ; 533 fData[ fNPoints ] = val;; 534 fDataError[ fNPoints ] = (eval != 0.0) ? 1.0/eval : 0.0;; 535 ; 536 FitData::Add( x );; 537 fSumContent += val;; 538 if (val != 0 || eval != 1.0) fSumError2 += eval*eval;; 539 if (!fIsWeighted); 540 if (val != 0 && std::abs( eval*eval/val - 1.0) > 1.E-12) fIsWeighted = true;; 541 }; 542 ; 543 /**; 544 add multi-dim coordinate data with both error in coordinates and value; 545 */; 546 void BinData::Add( const double* x, double val, const double* ex, double eval ); 547 {; 548 assert( kCoordError == fErrorType );; 549 assert( !fData.empty() && fDataPtr );; 550 assert( !fDataError.empty() && fDataErrorPtr );; 551 assert( fDataErrorHigh.empty() && !fDataErrorHighPtr );; 552 assert( fDataErrorLow.empty() && !fDataErrorLowPtr );; 553 assert( fCoordErrors.size() == fDim );; 554 assert( fCoordErrorsPtr.size() == fDim );; 555 ; 556 fData[ fNPoints ] = val;; 557 ; 558 for( unsigned int i=0; i<fDim; i++ ); 559 {; 560 assert( &fCoordErrors[i].front() == fCoordErrorsPtr[i] );; 561 ; 562 fCoordErrors[i][ fNPoints ] = ex[i];; 563 }; 564 // in this case we store the y error and not the inverse; 565 fDataError[ fNPoints ] = eval;; 566 ; 567 FitData::Add( x );; 568 fSumContent += val;; 569 if (val != 0 || eval != 1.0) fSumError2 += eval*eval;; 570 if (!fIsWeighted); 571 if (val != 0 && std::abs( eval*eval/val - 1.0) > 1.E-12) fIsWeighted = true;; 572 }; 573 ; 574 /**; 575 add multi-dim coordinate data with both error in coordinates and value; 576 */; 577 void BinData::Add( const double* x, double val, const double* ex, double elval, double ehval ); 578 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:16927,assert,assert,16927,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['assert'],['assert']
Testability,"*TGFrame::fgBckgndGC; static Pixmap_tTGScrollBar::fgBckgndPixmap; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Int_tTGScrollBar::fgScrollBarWidth; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGVScrollBar(const TGWindow* p = 0, UInt_t w = 2, UInt_t h = 4, UInt_t options = kVerticalFrame, Pixel_t back = GetDefaultFrameBackground()); Create a vertical scrollbar. void Layout(); Layout and move vertical scrollbar components. Bool_t HandleButton(Event_t* event); Handle mouse button event in vertical scrollbar. Bool_t HandleMotion(Event_t* event); Handle mouse motion in a vertical scrollbar. void SetRange(Int_t range, Int_t page_size); Set range of vertical scrollbar. void SetPosition(Int_t pos); Set logical slider position of vertical scrollbar. void SavePrimitive(ostream& out, Option_t* option = """"); Save an vertical scrollbar as a C++ statement(s) on output stream out. TGDimension GetDefaultSize() const; { return TGDimension(fWidth, GetScrollBarWidth()); }. virtual ~TGVScrollBar(); { }. » Author: Fons Rademakers 10/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGScrollBar.h 23115 2008-04-10 13:35:37Z rdm $ » Last generated: 2010-09-23 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGVScrollBar.html:20535,log,logical,20535,root/html528/TGVScrollBar.html,https://root.cern,https://root.cern/root/html528/TGVScrollBar.html,1,['log'],['logical']
Testability,"*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPadEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor of TPad editor GUI. ~TPadEditor(); Destructor of fill editor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Pick up the used fill attributes. void ActivateBaseClassEditors(TClass* cl); Exclude TAttLineEditor from this interface. void DoEditable(Bool_t on); Slot connected to the check box 'Editable'. void DoCrosshair(Bool_t on); Slot connected to the check box 'Crosshair'. void DoFixedAspectRatio(Bool_t on); Slot connected to the check box 'Fixed aspect ratio'. void DoGridX(Bool_t on); Slot connected to the check box 'GridX'. void DoGridY(Bool_t on); Slot connected to the check box 'GridY'. void DoLogX(Bool_t on); Slot connected to the check box 'LogX'. void DoLogY(Bool_t on); Slot connected to the check box 'LogY'. void DoLogZ(Bool_t on); Slot connected to the check box 'LogZ'. void DoTickX(Bool_t on); Slot connected to the check box 'TickX'. void DoTickY(Bool_t on); Slot connected to the check box 'TickY'. void DoBorderMode(); Slot connected to the border mode settings. void DoBorderSize(Int_t size); Slot connected to the border size settings. TPadEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: Ilka Antcheva 24/06/04 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/ged:$Id$ » Last generated: 2015-06-02 16:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TPadEditor.html:22921,Log,LogX,22921,root/html604/TPadEditor.html,https://root.cern,https://root.cern/root/html604/TPadEditor.html,3,['Log'],"['LogX', 'LogY', 'LogZ']"
Testability,"*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPadEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor of TPad editor GUI. ~TPadEditor(); Destructor of fill editor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Pick up the used fill attributes. void ActivateBaseClassEditors(TClass* cl); Exclude TAttLineEditor from this interface. void DoEditable(Bool_t on); Slot connected to the check box 'Editable'. void DoCrosshair(Bool_t on); Slot connected to the check box 'Crosshair'. void DoFixedAspectRatio(Bool_t on); Slot connected to the check box 'Fixed aspect ratio'. void DoGridX(Bool_t on); Slot connected to the check box 'GridX'. void DoGridY(Bool_t on); Slot connected to the check box 'GridY'. void DoLogX(Bool_t on); Slot connected to the check box 'LogX'. void DoLogY(Bool_t on); Slot connected to the check box 'LogY'. void DoLogZ(Bool_t on); Slot connected to the check box 'LogZ'. void DoTickX(Bool_t on); Slot connected to the check box 'TickX'. void DoTickY(Bool_t on); Slot connected to the check box 'TickY'. void DoBorderMode(); Slot connected to the border mode settings. void DoBorderSize(Int_t size); Slot connected to the border size settings. TPadEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: Ilka Antcheva 24/06/04 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/ged:$Id$ » Last generated: 2015-06-30 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPadEditor.html:22921,Log,LogX,22921,root/html602/TPadEditor.html,https://root.cern,https://root.cern/root/html602/TPadEditor.html,3,['Log'],"['LogX', 'LogY', 'LogZ']"
Testability,"*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearShapeDirty() const; voidclearValueDirty() const; TIterator*clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*Clone(const char* newname = 0) const; virtual RooAbsArg*cloneTree(const char* newname = 0) const; virtual Int_tCompare(const TObject* other) const; virtual voidconstOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidcopyList(TList& dest, const TList& source); static UInt_tcrc32(const char* data); virtual RooAbsArg*createFundamental(const char* newname = 0) const; virtual Int_tdefaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tdependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tdependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tdependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tdependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tdependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tdependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsArg.html:3236,test,testArg,3236,root/html526/RooAbsArg.html,https://root.cern,https://root.cern/root/html526/RooAbsArg.html,3,['test'],['testArg']
Testability,"*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::HypoTestResult&operator=(const RooStats::HypoTestResult&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidSetAltDistribution(RooStats::SamplingDistribution* alt); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidSetNullDistribution(RooStats::SamplingDistribution* null); static voidTObject::SetObjectStat(Bool_t stat); voidSetPValueIsRightTail(Bool_t pr); voidSetTestStatisticData(const Double_t tsd); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Double_tSignificance() const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HypoTestResult.html:6142,Test,TestBit,6142,root/html528/RooStats__HypoTestResult.html,https://root.cern,https://root.cern/root/html528/RooStats__HypoTestResult.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Bool_tTProofDraw::Process(Long64_t); virtual Bool_tTSelector::ProcessCut(Long64_t); virtual voidTSelector::ProcessFill(Long64_t); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTSelector::SetInputList(TList* input); virtual voidTSelector::SetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTSelector::SetOption(const char* option); virtual voidTSelector::SetStatus(Long64_t status); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidSlaveBegin(TTree*); virtual voidSlaveTerminate(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual intTProofDraw::Version() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofDrawEntryList.html:5201,Test,TestBit,5201,root/html528/TProofDrawEntryList.html,https://root.cern,https://root.cern/root/html528/TProofDrawEntryList.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidPrintCovarianceMatrix(RooFitResult* result, RooArgSet* params, string filename); voidProcessExpectedHisto(TH1* hist, RooWorkspace* proto, string prefix, string productPrefix, string systTerm, double low, double high, int lowBin, int highBin); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetFunctionsToPreprocess(vector<string> lines); static voidTObject::SetObjectStat(Bool_t stat); voidSetObsName(const string& obsName); voidSetObsNameVec(const vector<std::string>& obsNameVec); voidSetObsToExpected(RooWorkspace* proto, string obsPrefix, string expPrefix, int lowBin, int highBin); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__HistFactory__HistoToWorkspaceFactoryFast.html:7375,Test,TestBit,7375,root/html532/RooStats__HistFactory__HistoToWorkspaceFactoryFast.html,https://root.cern,https://root.cern/root/html532/RooStats__HistFactory__HistoToWorkspaceFactoryFast.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TFFTReal&operator=(const TFFTReal&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); static voidTVirtualFFT::SetDefaultFFT(const char* name = """"); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoint(Int_t ipoint, Double_t re, Double_t im = 0); virtual voidSetPoint(const Int_t* ipoint, Double_t re, Double_t); virtual voidSetPointComplex(Int_t, TComplex&); virtual voidSetPoints(const Double_t* data); virtual voidSetPointsComplex(const Double_t*, const Double_t*); static voidTVirtualFFT::SetTransform(TVirtualFFT* fft); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); static TVirtualFFT*TVirtualFFT::SineCosine(Int_t ndim, Int_t* n, Int_t* r2rkind, Option_t* option); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTransform(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFFTReal.html:7753,Test,TestBit,7753,root/html534/TFFTReal.html,https://root.cern,https://root.cern/root/html534/TFFTReal.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"*TObject::operator new[](size_t sz, void* vp); RooAdaptiveGaussKronrodIntegrator1D&operator=(const RooAdaptiveGaussKronrodIntegrator1D&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; Bool_tRooAbsIntegrator::printEvalCounter() const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); RooAdaptiveGaussKronrodIntegrator1D(); RooAdaptiveGaussKronrodIntegrator1D(const RooAdaptiveGaussKronrodIntegrator1D&); RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Bool_tsetLimits(Double_t* xmin, Double_t* xmax); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsIntegrator::setPrintEvalCounter(Bool_t value); virtual voidTObject::SetUniqueID(UInt_t uid); virtual Bool_tsetUseIntegrandLimits(Bool_t flag); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAdaptiveGaussKronrodIntegrator1D.html:6606,Test,TestBit,6606,root/html602/RooAdaptiveGaussKronrodIntegrator1D.html,https://root.cern,https://root.cern/root/html602/RooAdaptiveGaussKronrodIntegrator1D.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"*f1, Double_t c1=1)Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2),...Definition TH1.cxx:2840; TH1::GetMinimumvirtual Double_t GetMinimum(Double_t minval=-FLT_MAX) constReturn minimum value larger than minval of bins in the range, unless the value has been overridden by...Definition TH1.cxx:8635; TH1::LoggedInconsistencyint LoggedInconsistency(const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) constDefinition TH1.cxx:883; TH1::CheckConsistentSubAxesstatic bool CheckConsistentSubAxes(const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0)Check that two sub axis are the same.Definition TH1.cxx:1640; TH1::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove object from the list of functions.Definition TH1.cxx:6576; TH1::fYaxisTAxis fYaxisY axis descriptor.Definition TH1.h:91; TH1::KolmogorovTestvirtual Double_t KolmogorovTest(const TH1 *h2, Option_t *option="""") constStatistical test of compatibility in shape between this histogram and h2, using Kolmogorov test.Definition TH1.cxx:8178; TH1::GetSumOfWeightsvirtual Double_t GetSumOfWeights() constReturn the sum of weights excluding under/overflows.Definition TH1.cxx:7917; TH1::SmoothArraystatic void SmoothArray(Int_t NN, Double_t *XX, Int_t ntimes=1)Smooth array xx, translation of Hbook routine hsmoof.F.Definition TH1.cxx:6768; TH1::GetCentervirtual void GetCenter(Double_t *center) constFill array with center of bins for 1D histogram Better to use h1.GetXaxis()->GetCenter(center)Definition TH1.cxx:9174; TH1::fPainterTVirtualHistPainter * fPainter! Pointer to histogram painterDefinition TH1.h:112; TH1::SetBinsvirtual void SetBins(Int_t nx, Double_t xmin, Double_t xmax)Redefine x axis parameters.Definition TH1.cxx:8767; TH1::FindFixBinvirtual Int_t FindFixBin(Double_t x, Double_t y=0, Double_t z=0) constReturn Global bin number corresponding to x,y,z.Definition TH1.cxx:3705; TH1::SetBinContentvirtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8h_source.html:83231,test,test,83231,doc/master/TH1_8h_source.html,https://root.cern,https://root.cern/doc/master/TH1_8h_source.html,2,['test'],['test']
Testability,"*f1, Double_t c1=1)Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2),...Definition TH1.cxx:2840; TH1::GetMinimumvirtual Double_t GetMinimum(Double_t minval=-FLT_MAX) constReturn minimum value larger than minval of bins in the range, unless the value has been overridden by...Definition TH1.cxx:8635; TH1::LoggedInconsistencyint LoggedInconsistency(const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) constDefinition TH1.cxx:883; TH1::CheckConsistentSubAxesstatic bool CheckConsistentSubAxes(const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0)Check that two sub axis are the same.Definition TH1.cxx:1640; TH1::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove object from the list of functions.Definition TH1.cxx:6576; TH1::fYaxisTAxis fYaxisY axis descriptor.Definition TH1.h:91; TH1::KolmogorovTestvirtual Double_t KolmogorovTest(const TH1 *h2, Option_t *option="""") constStatistical test of compatibility in shape between this histogram and h2, using Kolmogorov test.Definition TH1.cxx:8178; TH1::GetSumOfWeightsvirtual Double_t GetSumOfWeights() constReturn the sum of weights excluding under/overflows.Definition TH1.cxx:7917; TH1::SmoothArraystatic void SmoothArray(Int_t NN, Double_t *XX, Int_t ntimes=1)Smooth array xx, translation of Hbook routine hsmoof.F.Definition TH1.cxx:6768; TH1::GetCentervirtual void GetCenter(Double_t *center) constFill array with center of bins for 1D histogram Better to use h1.GetXaxis()->GetCenter(center)Definition TH1.cxx:9174; TH1::fPainterTVirtualHistPainter * fPainter! Pointer to histogram painterDefinition TH1.h:112; TH1::SetBinsvirtual void SetBins(Int_t nx, Double_t xmin, Double_t xmax)Redefine x axis parameters.Definition TH1.cxx:8767; TH1::FindFixBinvirtual Int_t FindFixBin(Double_t x, Double_t y=0, Double_t z=0) constReturn Global bin number corresponding to x,y,z.Definition TH1.cxx:3705; TH1::Sumw2virtual void Sum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:458736,test,test,458736,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,2,['test'],['test']
Testability,*fEnabledPackageslist of enabled packages; Bool_tfEndMastertrue for a master in direct contact only with workers; THashList*fGlobalPackageDirListlist of directories containing global packages libs; TStringfGroupgroup the user belongs to; Int_tfGroupIdslave unique id in the active slave group; Int_tfGroupPrioritypriority of group the user belongs to (0 - 100); Int_tfGroupSizesize of the active slave group; Long64_tfHWMBoxSizeHigh-Water-Mark on the sandbox size; Bool_tfIdleTRUE if idle; TIdleTOTimer*fIdleTOTimerTimer used to control children state; TStringfImageimage name of the session; TFileHandler*fInputHandlerInput socket handler; Bool_tfInterruptif true macro execution will be stopped; TStopwatchfLatencymeasures latency of packet requests; FILE*fLogFilelog file; Int_tfLogFileDeslog file descriptor; Long64_tfLogFileMaxSizemax size for log files (enabled if > 0); Int_tfLogLeveldebug logging level; Bool_tfMasterServtrue if we are a master server; Long64_tfMaxBoxSizeMax size of the sandbox; Int_tfMaxQueriesMax number of queries fully kept; Int_tfMergedWorkersNumber of workers merged; TMonitor*fMergingMonitorMonitor for merging sockets; TServerSocket*fMergingSocketSocket used for merging outputs if submerger; Long64_tfMsgSizeHWMHigh-Water-Mark on the size of messages with results; Int_tfNcmdcommand history number; TStringfOrdinalslave ordinal number; TStringfOutputFilepath with the temporary results of the current or last query; TStringfPackageDirdirectory containing packages and user libs; TProofLockPath*fPackageLockpackage dir locker; TVirtualProofPlayer*fPlayeractual player; TStringfPrefixPrefix identifying the node; TProof*fProofPROOF talking to slave servers; Int_tfProtocolprotocol version number; TQueryResultManager*fQMgrQuery-result manager; TMutex*fQMtxTo protect async msg queue; TStringfQueryDirdirectory containing query results and status; TProofLockPath*fQueryLockquery dir locker; Int_tfQuerySeqNumsequential number of the current or last query; TList*fQueue,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofServ.html:19596,sandbox,sandbox,19596,root/html602/TProofServ.html,https://root.cern,https://root.cern/root/html602/TProofServ.html,2,['sandbox'],['sandbox']
Testability,"*n/(m+n))*dn. Accuracy: The function is far too accurate for any imaginable application.; Probabilities less than 10^-15 are returned as zero.; However, remember that the formula is only valid for ""large"" n.; Theta function inversion formula is used for z <= 1. This function was translated by Rene Brun from PROBKL in CERNLIB. Double_t KolmogorovTest(Int_t na, const Double_t* a, Int_t nb, const Double_t* b, Option_t* option); Statistical test whether two one-dimensional sets of points are compatible; with coming from the same parent distribution, using the Kolmogorov test.; That is, it is used to compare two experimental distributions of unbinned data. Input:; a,b: One-dimensional arrays of length na, nb, respectively.; The elements of a and b must be given in ascending order.; option is a character string to specify options; ""D"" Put out a line of ""Debug"" printout; ""M"" Return the Maximum Kolmogorov distance instead of prob. Output:; The returned value prob is a calculated confidence level which gives a; statistical test for compatibility of a and b.; Values of prob close to zero are taken as indicating a small probability; of compatibility. For two point sets drawn randomly from the same parent; distribution, the value of prob should be uniformly distributed between; zero and one.; in case of error the function return -1; If the 2 sets have a different number of points, the minimum of; the two sets is used. Method:; The Kolmogorov test is used. The test statistic is the maximum deviation; between the two integrated distribution functions, multiplied by the; normalizing factor (rdmax*sqrt(na*nb/(na+nb)). Code adapted by Rene Brun from CERNLIB routine TKOLMO (Fred James); (W.T. Eadie, D. Drijard, F.E. James, M. Roos and B. Sadoulet,; Statistical Methods in Experimental Physics, (North-Holland,; Amsterdam 1971) 269-271). Method Improvement by Jason A Detwiler (JADetwiler@lbl.gov). The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop; over the two so",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMath.html:17903,test,test,17903,root/html528/TMath.html,https://root.cern,https://root.cern/root/html528/TMath.html,6,['test'],['test']
Testability,"*name, Version_t cversion,; 376 const std::type_info &info, TVirtualIsAProxy *isa,; 377 const char *dfil, const char *ifil,; 378 Int_t dl, Int_t il, Bool_t silent = kFALSE);; 379 virtual ~TClass();; 380 ; 381 void AddInstance(Bool_t heap = kFALSE) { fInstanceCount++; if (heap) fOnHeap++; }; 382 void AddImplFile(const char *filename, int line);; 383 static Bool_t AddRule(const char *rule);; 384 static Int_t ReadRules(const char *filename);; 385 static Int_t ReadRules();; 386 void AdoptSchemaRules( ROOT::Detail::TSchemaRuleSet *rules );; 387 void Browse(TBrowser *b) override;; 388 void BuildRealData(void *pointer = nullptr, Bool_t isTransient = kFALSE);; 389 void BuildEmulatedRealData(const char *name, Longptr_t offset, TClass *cl, Bool_t isTransient = kFALSE);; 390 void CalculateStreamerOffset() const;; 391 Bool_t CallShowMembers(const void* obj, TMemberInspector &insp, Bool_t isTransient = kFALSE) const;; 392 Bool_t CanSplit() const;; 393 Bool_t CanIgnoreTObjectStreamer() { return TestBit(kIgnoreTObjectStreamer);}; 394 Long_t ClassProperty() const;; 395 TObject *Clone(const char *newname="""") const override;; 396 void CopyCollectionProxy(const TVirtualCollectionProxy&);; 397 void Draw(Option_t *option="""") override;; 398 void Dump() const override { TDictionary::Dump(); }; 399 void Dump(const void *obj, Bool_t noAddr = kFALSE) const;; 400 char *EscapeChars(const char *text) const;; 401 TVirtualStreamerInfo *FindStreamerInfo(UInt_t checksum, Bool_t isTransient = kFALSE) const;; 402 TVirtualStreamerInfo *GetConversionStreamerInfo( const char* onfile_classname, Int_t version ) const;; 403 TVirtualStreamerInfo *FindConversionStreamerInfo( const char* onfile_classname, UInt_t checksum ) const;; 404 TVirtualStreamerInfo *GetConversionStreamerInfo( const TClass* onfile_cl, Int_t version ) const;; 405 TVirtualStreamerInfo *FindConversionStreamerInfo( const TClass* onfile_cl, UInt_t checksum ) const;; 406 void ForceReload (TClass* oldcl);; 407 Bool_t HasDataMemberInfo() const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8h_source.html:19309,Test,TestBit,19309,doc/master/TClass_8h_source.html,https://root.cern,https://root.cern/doc/master/TClass_8h_source.html,2,['Test'],['TestBit']
Testability,"*plotPull(const RooRealVar& param, Double_t lo = -3.0, Double_t hi = 3.0, Int_t nbins = 25, Bool_t fitGauss = kFALSE); RooPlot*plotPull(const RooRealVar& param, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidcalcPulls(); virtual voidTObject::DoError(int level, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooMCStudy.html:9231,Test,TestBit,9231,root/html530/RooMCStudy.html,https://root.cern,https://root.cern/root/html530/RooMCStudy.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"*refZ = nullptr;; 1985 Int_t ixbin, out1bin, out2bin;; 1986 if (projX == GetXaxis()) {; 1987 refX = &ixbin;; 1988 refY = &out1bin;; 1989 refZ = &out2bin;; 1990 }; 1991 if (projX == GetYaxis()) {; 1992 refX = &out1bin;; 1993 refY = &ixbin;; 1994 refZ = &out2bin;; 1995 }; 1996 if (projX == GetZaxis()) {; 1997 refX = &out1bin;; 1998 refY = &out2bin;; 1999 refZ = &ixbin;; 2000 }; 2001 R__ASSERT (refX != nullptr && refY != nullptr && refZ != nullptr);; 2002 ; 2003 // Fill the projected histogram excluding underflow/overflows if considered in the option; 2004 // if specified in the option (by default they considered); 2005 Double_t totcont = 0;; 2006 ; 2007 Int_t out1min = out1->GetFirst();; 2008 Int_t out1max = out1->GetLast();; 2009 // GetFirst(), GetLast() can return (0,0) when the range bit is set artificially (see TAxis::SetRange); 2010 //if (out1min == 0 && out1max == 0) { out1min = 1; out1max = out1->GetNbins(); }; 2011 // correct for underflow/overflows; 2012 if (useUF && !out1->TestBit(TAxis::kAxisRange) ) out1min -= 1;; 2013 if (useOF && !out1->TestBit(TAxis::kAxisRange) ) out1max += 1;; 2014 Int_t out2min = out2->GetFirst();; 2015 Int_t out2max = out2->GetLast();; 2016// if (out2min == 0 && out2max == 0) { out2min = 1; out2max = out2->GetNbins(); }; 2017 if (useUF && !out2->TestBit(TAxis::kAxisRange) ) out2min -= 1;; 2018 if (useOF && !out2->TestBit(TAxis::kAxisRange) ) out2max += 1;; 2019 ; 2020 // if the out axis has labels and is extendable, temporary make it non-extendable to avoid adding extra bins; 2021 Bool_t extendable = projX->CanExtend();; 2022 if ( labels && extendable ) h1->GetXaxis()->SetCanExtend(kFALSE);; 2023 for (ixbin=0;ixbin<=1+projX->GetNbins();ixbin++) {; 2024 if ( projX->TestBit(TAxis::kAxisRange) && ( ixbin < ixmin || ixbin > ixmax )) continue;; 2025 ; 2026 Double_t cont = 0;; 2027 Double_t err2 = 0;; 2028 ; 2029 // loop on the bins to be integrated (outbin should be called inbin); 2030 for (out1bin = out1min; out1bin <= out1max; out1bin+",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:79457,Test,TestBit,79457,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,1,['Test'],['TestBit']
Testability,"*s1, const TString &s2); 811{ return s2.CompareTo(s1) > 0; }; 812 ; 813inline Bool_t operator>(const char *s1, const TString &s2); 814{ return s2.CompareTo(s1) < 0; }; 815 ; 816inline Bool_t operator<=(const char *s1, const TString &s2); 817{ return s2.CompareTo(s1) >= 0; }; 818 ; 819inline Bool_t operator>=(const char *s1, const TString &s2); 820{ return s2.CompareTo(s1) <= 0; }; 821 ; 822// SubString Logical operators; 823// Bool_t operator==(const TSubString &s1, const TSubString &s2);; 824// Bool_t operator==(const TSubString &s1, const char *s2);; 825// Bool_t operator==(const TSubString &s1, const TString &s2);; 826inline Bool_t operator==(const TString &s1, const TSubString &s2); 827{ return (s2 == s1); }; 828 ; 829inline Bool_t operator==(const char *s1, const TSubString &s2); 830{ return (s2 == s1); }; 831 ; 832inline Bool_t operator!=(const TSubString &s1, const char *s2); 833{ return !(s1 == s2); }; 834 ; 835inline Bool_t operator!=(const TSubString &s1, const TString &s2); 836{ return !(s1 == s2); }; 837 ; 838inline Bool_t operator!=(const TSubString &s1, const TSubString &s2); 839{ return !(s1 == s2); }; 840 ; 841inline Bool_t operator!=(const TString &s1, const TSubString &s2); 842{ return !(s2 == s1); }; 843 ; 844inline Bool_t operator!=(const char *s1, const TSubString &s2); 845{ return !(s2 == s1); }; 846 ; 847namespace llvm {; 848 class raw_ostream;; 849}; 850 ; 851namespace cling {; 852 std::string printValue(const TString* val);; 853 std::string printValue(const TSubString* val);; 854 std::string printValue(const std::string_view* val);; 855}; 856 ; 857#endif; b#define b(i)Definition RSha256.hxx:100; f#define f(i)Definition RSha256.hxx:104; c#define c(i)Definition RSha256.hxx:101; a#define a(i)Definition RSha256.hxx:99; s1#define s1(x)Definition RSha256.hxx:91; Bool_tbool Bool_tDefinition RtypesCore.h:63; Int_tint Int_tDefinition RtypesCore.h:45; kMaxIntconstexpr Int_t kMaxIntDefinition RtypesCore.h:105; Ssiz_tint Ssiz_tDefinition RtypesCore.h:67",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8h_source.html:33956,Log,Logical,33956,doc/master/TString_8h_source.html,https://root.cern,https://root.cern/doc/master/TString_8h_source.html,1,['Log'],['Logical']
Testability,"*s2);  ; REveException operator+ (const REveException &s1, const std::string &s2);  ; REveException operator+ (const REveException &s1, const TString &s2);  ; REveException operator+ (const REveException &s1, ElementId_t x);  ; template<typename TT > ; REveVector2T< TT > operator+ (const REveVector2T< TT > &a, const REveVector2T< TT > &b);  ; template<typename TT > ; REveVector4T< TT > operator+ (const REveVector4T< TT > &a, const REveVector4T< TT > &b);  ; template<typename TT > ; REveVectorT< TT > operator+ (const REveVectorT< TT > &a, const REveVectorT< TT > &b);  ; ELogLevel operator+ (ELogLevel severity, int offset);  ; template<typename TT > ; REveVector2T< TT > operator- (const REveVector2T< TT > &a, const REveVector2T< TT > &b);  ; template<typename TT > ; REveVector4T< TT > operator- (const REveVector4T< TT > &a, const REveVector4T< TT > &b);  ; template<typename TT > ; REveVectorT< TT > operator- (const REveVectorT< TT > &a, const REveVectorT< TT > &b);  ; std::ostream & operator<< (std::ostream &s, const REveTrans &t);  ; bool operator== (const std::string &s, const TString &t);  ; bool operator== (const TString &t, const std::string &s);  ; template<> ; const RAttrMap::Value_t * RAttrMap::Value_t::GetValue< const RAttrMap::Value_t *, bool > (const Value_t *rec);  ; template<> ; const RAttrMap::Value_t * RAttrMap::Value_t::GetValue< const RAttrMap::Value_t *, double > (const Value_t *rec);  ; template<> ; const RAttrMap::Value_t * RAttrMap::Value_t::GetValue< const RAttrMap::Value_t *, int > (const Value_t *rec);  ; template<> ; const RAttrMap::Value_t * RAttrMap::Value_t::GetValue< const RAttrMap::Value_t *, RColor > (const Value_t *rec);  ; template<> ; const RAttrMap::Value_t * RAttrMap::Value_t::GetValue< const RAttrMap::Value_t *, RPadLength > (const Value_t *rec);  ; template<> ; const RAttrMap::Value_t * RAttrMap::Value_t::GetValue< const RAttrMap::Value_t *, void > (const Value_t *rec);  ; RLogChannel & REveLog ();  Log channel for Eve diagnostics.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:32967,Log,Log,32967,doc/master/namespaceROOT_1_1Experimental.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html,2,['Log'],['Log']
Testability,"*z;; 3396 fTsumwx += z*x;; 3397 fTsumwx2 += z*x*x;; 3398 return bin;; 3399}; 3400 ; 3401////////////////////////////////////////////////////////////////////////////////; 3402/// Increment bin with namex with a weight w; 3403///; 3404/// if x is less than the low-edge of the first bin, the Underflow bin is incremented; 3405/// if x is equal to or greater than the upper edge of last bin, the Overflow bin is incremented; 3406///; 3407/// If the weight is not equal to 1, the storage of the sum of squares of; 3408/// weights is automatically triggered and the sum of the squares of weights is incremented; 3409/// by \f$ w^2 \f$ in the bin corresponding to x.; 3410///; 3411/// The function returns the corresponding bin number which has its content; 3412/// incremented by w.; 3413 ; 3414Int_t TH1::Fill(const char *namex, Double_t w); 3415{; 3416 Int_t bin;; 3417 fEntries++;; 3418 bin =fXaxis.FindBin(namex);; 3419 if (bin <0) return -1;; 3420 if (!fSumw2.fN && w != 1.0 && !TestBit(TH1::kIsNotW)) Sumw2();; 3421 if (fSumw2.fN) fSumw2.fArray[bin] += w*w;; 3422 AddBinContent(bin, w);; 3423 if (bin == 0 || bin > fXaxis.GetNbins()) return -1;; 3424 Double_t z= w;; 3425 fTsumw += z;; 3426 fTsumw2 += z*z;; 3427 // this make sense if the histogram is not expanding (the x axis cannot be extended); 3428 if (!fXaxis.CanExtend() || !fXaxis.IsAlphanumeric()) {; 3429 Double_t x = fXaxis.GetBinCenter(bin);; 3430 fTsumwx += z*x;; 3431 fTsumwx2 += z*x*x;; 3432 }; 3433 return bin;; 3434}; 3435 ; 3436////////////////////////////////////////////////////////////////////////////////; 3437/// Fill this histogram with an array x and weights w.; 3438///; 3439/// \param[in] ntimes number of entries in arrays x and w (array size must be ntimes*stride); 3440/// \param[in] x array of values to be histogrammed; 3441/// \param[in] w array of weighs; 3442/// \param[in] stride step size through arrays x and w; 3443///; 3444/// If the weight is not equal to 1, the storage of the sum of squares of; 3445/// weig",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:136293,Test,TestBit,136293,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['Test'],['TestBit']
Testability,"* ; vol). pure virtual . Implemented in ROOT::RGeoPainter, and TGeoPainter. ◆ SetVisLevel(). virtual void TVirtualGeoPainter::SetVisLevel ; (; Int_t ; level = 3). pure virtual . Implemented in TGeoPainter, and ROOT::RGeoPainter. ◆ SetVisOption(). virtual void TVirtualGeoPainter::SetVisOption ; (; Int_t ; option = 0). pure virtual . Implemented in TGeoPainter, and ROOT::RGeoPainter. ◆ ShapeDistancetoPrimitive(). virtual Int_t TVirtualGeoPainter::ShapeDistancetoPrimitive ; (; const TGeoShape * ; shape, . Int_t ; numpoints, . Int_t ; px, . Int_t ; py . ); const. pure virtual . Implemented in ROOT::RGeoPainter, and TGeoPainter. ◆ Streamer(). void TVirtualGeoPainter::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TVirtualGeoPainter::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 143 of file TVirtualGeoPainter.h. ◆ Test(). virtual void TVirtualGeoPainter::Test ; (; Int_t ; npoints, . Option_t * ; option . ). pure virtual . Implemented in TGeoPainter, and ROOT::RGeoPainter. ◆ TestOverlaps(). virtual void TVirtualGeoPainter::TestOverlaps ; (; const char * ; path). pure virtual . Implemented in ROOT::RGeoPainter, and TGeoPainter. ◆ TestVoxels(). virtual Bool_t TVirtualGeoPainter::TestVoxels ; (; TGeoVolume * ; vol). pure virtual . Implemented in ROOT::RGeoPainter, and TGeoPainter. ◆ UnbombTranslation(). virtual void TVirtualGeoPainter::UnbombTranslation ; (; const Double_t * ; tr, . Double_t * ; bombtr . ). pure virtual . Implemented in ROOT::RGeoPainter, and TGeoPainter. ◆ Weight(). virtual Double_t TVirtualGeoPainter::Weight ; (; Double_t ; precision, . Option_t * ; option = ""v"" . ). pure virtual . Implemented in TGeoPainter, and ROOT::RGeoPainter. Member Data Documentation. ◆ fgGeoPainter. TVirtualGeoPainter * TVirtualGeoPainter::fgGeoPainter = nullptr. staticprotected . Definition at line 35 of file TVirtualGeoPainter.h. Libraries f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualGeoPainter.html:32957,Test,Test,32957,doc/master/classTVirtualGeoPainter.html,https://root.cern,https://root.cern/doc/master/classTVirtualGeoPainter.html,1,['Test'],['Test']
Testability,"* Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Results; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; MsgLogger & Log () const;  . Private Attributes; MsgLogger * fLogger;  ! message logger ;  ; std::vector< std::vector< Float_t > > fRegValues;  mva values (Results) ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ResultsRegression.html:10809,log,logger,10809,doc/master/classTMVA_1_1ResultsRegression.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ResultsRegression.html,1,['log'],['logger']
Testability,"* DrawCopy (Option_t *option="""") const override;  Draw a copy of this function with its current attributes-*. ;  ; virtual Int_t GetContour (Double_t *levels=nullptr);  Return contour values into array levels. ;  ; virtual Double_t GetContourLevel (Int_t level) const;  Return the number of contour levels. ;  ; virtual Double_t GetMaximum (Double_t *x) const;  Return maximum value of the function See TF2::GetMinimum. ;  ; virtual Double_t GetMaximum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the maximum value of the function. ;  ; virtual Double_t GetMaximumXY (Double_t &x, Double_t &y) const;  Compute the X and Y values corresponding to the maximum value of the function. ;  ; virtual Double_t GetMinimum (Double_t *x) const;  Return minimum/maximum value of the function. ;  ; virtual Double_t GetMinimum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Double_t GetMinimumXY (Double_t &x, Double_t &y) const;  Compute the X and Y values corresponding to the minimum value of the function. ;  ; Int_t GetNpy () const;  ; char * GetObjectInfo (Int_t px, Int_t py) const override;  Redefines TObject::GetObjectInfo. ;  ; Double_t GetRandom (Double_t xmin, Double_t xmax, TRandom *rng=nullptr, Option_t *opt=nullptr) override;  Return a random number following this function shape. ;  ; Double_t GetRandom (TRandom *rng=nullptr, Option_t *opt=nullptr) override;  Return a random number following this function shape. ;  ; virtual void GetRandom2 (Double_t &xrandom, Double_t &yrandom, TRandom *rng=nullptr);  Return 2 random numbers following this function shape. ;  ; virtual Double_t GetYmax () const;  ; virtual Double_t GetYmin () const;  ; virtual Double_t Mean2X (Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t epsilon=0.000001);  ; virtual Double_t Mean2Y (Doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF3.html:12251,log,logx,12251,doc/master/classTF3.html,https://root.cern,https://root.cern/doc/master/classTF3.html,1,['log'],['logx']
Testability,"* cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddModel.html:33968,Test,Test,33968,doc/master/classRooAddModel.html,https://root.cern,https://root.cern/doc/master/classRooAddModel.html,81,['Test'],['Test']
Testability,"* operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Paint (Option_t *option="""");  This method must be overridden if a class wants to paint itself. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class signal lists from class cls and all its base-classes. ;  ; Bool_t Connect (const char *signal, const char *receiver_class, void *receiver, const char *slot",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2Editor.html:27740,Test,TestBit,27740,doc/master/classTH2Editor.html,https://root.cern,https://root.cern/doc/master/classTH2Editor.html,18,['Test'],"['TestBit', 'TestBits']"
Testability,"+ Progress bar would be better.; [#9292] - Integer overflow in TTreeCache::FillBuffer; [#8959] - ninja clean does not remove modules.idx; [#8952] - Make hadd return a non-zero exit code when encountering a corrupted file; [#8942] - cannot buid the dependent project; [#8794] - [TGNumberEntry] centiseconds; [#8720] - Apply TChain::SetImplicitMT() to underlying trees; [#8639] - (RDataFrame) AsNumpy returns Boolean branches as ‘object’ dtype numpy arrays; [#8582] - TThreadTimer behavior; [#8581] - [ntuple] RNTupleModel columns ownership issue; [#8517] - Add integer support to TVectorT; [#8494] - cling crashes on conditional parameter in template; [#8260] - Build system cannot detect version of oneTBB; [#8148] - Document TMethodCall class limitations; [#7950] - Assertion exception including header file with GaudiPython module; [#7900] - Support spectator variables in RReader; [#7872] - TExecutorCRTP::Map() should support void; [#7871] - Usability of TExecutor::MapReduce; [#7845] - Improve TMatrix reference documentation; [#7805] - Inconsistent and unintuitive behaviour of TFormula::SetParNames and TFormula::SetParameters; [#7774] - Unreasonably slow behaviour of CompileMacro; [#7699] - [VecOps] Make free functions in VecOps better visible; [#7686] - PyROOT Segfault when creating proxy to derived class with multiple overloads; [#7669] - Inconsistent behaviour in wildcard import; [#7644] - Provide in the cmake configuration the C++ standard which was used to compile ROOT; [#7627] - Fix TMVA group links; [#7159] - TNetXNGFile::Open fails with double slash (//) in path; [#7128] - Cannot build ROOT if another ROOT at /usr/local; [#6900] - mathmore: invalid roots for a quartic polynomial; [#6811] - Bug displaying several 3D objects such as TGraph2D on the same canvas; [#6755] - Greek letter epsilon not rendered correctly using TLatex with OpenGL.CanvasPreferGL option, segmentation fault.; [#6753] - CMake dependency on Python: use targets; [#6616] - hadd writes files with unspe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:37426,Assert,Assertion,37426,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['Assert'],['Assertion']
Testability,"+); ������ decon->SetBinContent(i + 1,j + 1, source[i][j]);��. �� }; �� decon->Draw(""SURF"");� ; �� };  . Int_t SearchHighRes(Double_t** source, Double_t** dest, Int_t ssizex, Int_t ssizey, Double_t sigma, Double_t threshold, Bool_t backgroundRemove, Int_t deconIterations, Bool_t markov, Int_t averWindow). TWO-DIMENSIONAL HIGH-RESOLUTION PEAK SEARCH FUNCTION; This function searches for peaks in source spectrum; It is based on deconvolution method. First the background is; removed (if desired), then Markov spectrum is calculated; (if desired), then the response function is generated; according to given sigma and deconvolution is carried out. Function parameters:; source-pointer to the matrix of source spectrum; dest-pointer to the matrix of resulting deconvolved spectrum; ssizex-x length of source spectrum; ssizey-y length of source spectrum; sigma-sigma of searched peaks, for details we refer to manual; threshold-threshold value in % for selected peaks, peaks with; amplitude less than threshold*highest_peak/100; are ignored, see manual; backgroundRemove-logical variable, set if the removal of; background before deconvolution is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow-averanging window of searched peaks, for details; we refer to manual (applies only for Markov method). . Peaks searching;  ; Goal:; to identify automatically the peaks in spectrum with the presence of the; continuous background, one-fold coincidences (ridges) and statistical; fluctuations - noise. ;  ; The common problems connected with correct peak; identification in two-dimensional coincidence spectra are. non-sensitivity to noise, i.e., only statistically; relevant peaks should be identified; non-sensitivity of the algorithm to continuous; background; non-sensitivity to one-fold coincidences (coincidences; peak � background",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrum2.html:36059,log,logical,36059,root/html602/TSpectrum2.html,https://root.cern,https://root.cern/root/html602/TSpectrum2.html,4,['log'],['logical']
Testability,"++i); 1885 // xInput.emplace_back(Matrix_t(n1,n2));; 1886 ; 1887 // create pointer to output matrix used for the predictions; 1888 Matrix_t yHat(deepNet.GetBatchSize(), deepNet.GetOutputWidth() );; 1889 ; 1890 // use timer; 1891 Timer timer( nEvents, GetName(), kTRUE );; 1892 ; 1893 if (logProgress); 1894 Log() << kHEADER << Form(""[%s] : "",DataInfo().GetName()); 1895 << ""Evaluation of "" << GetMethodName() << "" on ""; 1896 << (Data()->GetCurrentType() == Types::kTraining ? ""training"" : ""testing""); 1897 << "" sample ("" << nEvents << "" events)"" << Endl;; 1898 ; 1899 ; 1900 // eventg loop; 1901 std::vector<double> mvaValues(nEvents);; 1902 ; 1903 ; 1904 for ( Long64_t ievt = firstEvt; ievt < lastEvt; ievt+=batchSize) {; 1905 ; 1906 Long64_t ievt_end = ievt + batchSize;; 1907 // case of batch prediction for; 1908 if (ievt_end <= lastEvt) {; 1909 ; 1910 if (ievt == firstEvt) {; 1911 Data()->SetCurrentEvent(ievt);; 1912 size_t nVariables = GetEvent()->GetNVariables();; 1913 ; 1914 if (n1 == batchSize && n0 == 1) {; 1915 if (n2 != nVariables) {; 1916 Log() << kFATAL << ""Input Event variable dimensions are not compatible with the built network architecture""; 1917 << "" n-event variables "" << nVariables << "" expected input matrix "" << n1 << "" x "" << n2; 1918 << Endl;; 1919 }; 1920 } else {; 1921 if (n1*n2 != nVariables || n0 != batchSize) {; 1922 Log() << kFATAL << ""Input Event variable dimensions are not compatible with the built network architecture""; 1923 << "" n-event variables "" << nVariables << "" expected input tensor "" << n0 << "" x "" << n1 << "" x "" << n2; 1924 << Endl;; 1925 }; 1926 }; 1927 }; 1928 ; 1929 auto batch = testData.GetTensorBatch();; 1930 auto inputTensor = batch.GetInput();; 1931 ; 1932 auto xInput = batch.GetInput();; 1933 // make the prediction; 1934 deepNet.Prediction(yHat, xInput, fOutputFunction);; 1935 for (size_t i = 0; i < batchSize; ++i) {; 1936 double value = yHat(i,0);; 1937 mvaValues[ievt + i] = (TMath::IsNaN(value)) ? -999. : value;; 1938 }; 1939 }",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:75851,test,testing,75851,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,4,"['Log', 'test']","['Log', 'testData', 'testing']"
Testability,"+0.5:Architecture=CPU""; : The following options are set:; : - By User:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""N"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : Layout: ""TANH|128,TANH|128,TANH|128,LINEAR"" [Layout of the network.]; : ErrorStrategy: ""CROSSENTROPY"" [Loss function: Mean squared error (regression) or cross entropy (binary classification).]; : WeightInitialization: ""XAVIERUNIFORM"" [Weight initialization strategy]; : Architecture: ""CPU"" [Which architecture to perform the training on.]; : TrainingStrategy: ""LearningRate=1e-2,Momentum=0.9,ConvergenceSteps=20,BatchSize=100,TestRepetitions=1,WeightDecay=1e-4,Regularization=None,DropConfig=0.0+0.5+0.5+0.5"" [Defines the training strategies.]; : - Default:; : VerbosityLevel: ""Default"" [Verbosity level]; : CreateMVAPdfs: ""False"" [Create PDFs for classifier outputs (signal and background)]; : IgnoreNegWeightsInTraining: ""False"" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]; : InputLayout: ""0|0|0"" [The Layout of the input]; : BatchLayout: ""0|0|0"" [The Layout of the batch]; : RandomSeed: ""0"" [Random seed used for weight initialization and batch shuffling]; : ValidationSize: ""20%"" [Part of the training data to use for validation. Specify as 0.2 or 20% to use a fifth of the data set as validation set. Specify as 100 to use exactly 100 events. (Default: 20%)]; DNN_CPU : [dataset] : Create Transformation ""N"" with events from all classes.; : ; : Transformation, Variable selection : ; : Input : variable 'myvar1' <---> Output : variable 'myvar1'; : Input : variable",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:7447,Test,TestRepetitions,7447,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['Test'],['TestRepetitions']
Testability,"+1) in these cases and also to; y(i+2) at a triple knot. the representation (*) remains; valid in each open interval (x(i),x(i+1)). at a double knot,; x(j) = x(j+1), the output coefficients have the following values:; y(j) = s(x(j)) = y(j+1); b(j) = s'(x(j)) = b(j+1); c(j) = s""(x(j))/2 = c(j+1); d(j) = s""'(x(j))/6 = d(j+1); e(j) = s""""(x(j)-0)/24 e(j+1) = s""""(x(j)+0)/24; f(j) = s""""'(x(j)-0)/120 f(j+1) = s""""'(x(j)+0)/120; at a triple knot, x(j) = x(j+1) = x(j+2), the output; coefficients have the following values:; y(j) = s(x(j)) = y(j+1) = y(j+2); b(j) = s'(x(j)) = b(j+1) = b(j+2); c(j) = s""(x(j))/2 = c(j+1) = c(j+2); d(j) = s""'((x(j)-0)/6 d(j+1) = 0 d(j+2) = s""'(x(j)+0)/6; e(j) = s""""(x(j)-0)/24 e(j+1) = 0 e(j+2) = s""""(x(j)+0)/24; f(j) = s""""'(x(j)-0)/120 f(j+1) = 0 f(j+2) = s""""'(x(j)+0)/120. void Test(); Test method for TSpline5. n number of data points.; m 2*m-1 is order of spline.; m = 3 always for quintic spline.; nn,nm1,mm,; mm1,i,k,; j,jj temporary integer variables.; z,p temporary double precision variables.; x[n] the sequence of knots.; y[n] the prescribed function values at the knots.; a[200][6] two dimensional array whose columns are; the computed spline coefficients; diff[5] maximum values of differences of values and; derivatives to right and left of knots.; com[5] maximum values of coefficients. test of TSpline5 with nonequidistant knots and; equidistant knots follows. void Streamer(TBuffer& ); Stream an object of class TSpline5. void GetKnot(Int_t i, Double_t& x, Double_t& y) const. void GetCoeff(Int_t i, Double_t &x, Double_t &y, Double_t &b, Double_t &c, Double_t &d). TSpline5(); {}. virtual ~TSpline5(); {if (fPoly) delete [] fPoly;}. » Author: Federico Carminati 28/02/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-03-14 16:50; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSpline5.html:16181,test,test,16181,root/html534/TSpline5.html,https://root.cern,https://root.cern/root/html534/TSpline5.html,1,['test'],['test']
Testability,"+1) in these cases and also to; y(i+2) at a triple knot. the representation (*) remains; valid in each open interval (x(i),x(i+1)). at a double knot,; x(j) = x(j+1), the output coefficients have the following values:; y(j) = s(x(j)) = y(j+1); b(j) = s'(x(j)) = b(j+1); c(j) = s""(x(j))/2 = c(j+1); d(j) = s""'(x(j))/6 = d(j+1); e(j) = s""""(x(j)-0)/24 e(j+1) = s""""(x(j)+0)/24; f(j) = s""""'(x(j)-0)/120 f(j+1) = s""""'(x(j)+0)/120; at a triple knot, x(j) = x(j+1) = x(j+2), the output; coefficients have the following values:; y(j) = s(x(j)) = y(j+1) = y(j+2); b(j) = s'(x(j)) = b(j+1) = b(j+2); c(j) = s""(x(j))/2 = c(j+1) = c(j+2); d(j) = s""'((x(j)-0)/6 d(j+1) = 0 d(j+2) = s""'(x(j)+0)/6; e(j) = s""""(x(j)-0)/24 e(j+1) = 0 e(j+2) = s""""(x(j)+0)/24; f(j) = s""""'(x(j)-0)/120 f(j+1) = 0 f(j+2) = s""""'(x(j)+0)/120. void Test(); Test method for TSpline5. n number of data points.; m 2*m-1 is order of spline.; m = 3 always for quintic spline.; nn,nm1,mm,; mm1,i,k,; j,jj temporary integer variables.; z,p temporary double precision variables.; x[n] the sequence of knots.; y[n] the prescribed function values at the knots.; a[200][6] two dimensional array whose columns are; the computed spline coefficients; diff[5] maximum values of differences of values and; derivatives to right and left of knots.; com[5] maximum values of coefficients. test of TSpline5 with nonequidistant knots and; equidistant knots follows. void Streamer(TBuffer& ); Stream an object of class TSpline5. void GetKnot(Int_t i, Double_t& x, Double_t& y) const. void GetCoeff(Int_t i, Double_t &x, Double_t &y, Double_t &b, Double_t &c, Double_t &d). TSpline5(); {}. virtual ~TSpline5(); {if (fPoly) delete [] fPoly;}. » Author: Federico Carminati 28/02/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TSpline5.html:16715,test,test,16715,root/html604/TSpline5.html,https://root.cern,https://root.cern/root/html604/TSpline5.html,1,['test'],['test']
Testability,"+1) in these cases and also to; y(i+2) at a triple knot. the representation (*) remains; valid in each open interval (x(i),x(i+1)). at a double knot,; x(j) = x(j+1), the output coefficients have the following values:; y(j) = s(x(j)) = y(j+1); b(j) = s'(x(j)) = b(j+1); c(j) = s""(x(j))/2 = c(j+1); d(j) = s""'(x(j))/6 = d(j+1); e(j) = s""""(x(j)-0)/24 e(j+1) = s""""(x(j)+0)/24; f(j) = s""""'(x(j)-0)/120 f(j+1) = s""""'(x(j)+0)/120; at a triple knot, x(j) = x(j+1) = x(j+2), the output; coefficients have the following values:; y(j) = s(x(j)) = y(j+1) = y(j+2); b(j) = s'(x(j)) = b(j+1) = b(j+2); c(j) = s""(x(j))/2 = c(j+1) = c(j+2); d(j) = s""'((x(j)-0)/6 d(j+1) = 0 d(j+2) = s""'(x(j)+0)/6; e(j) = s""""(x(j)-0)/24 e(j+1) = 0 e(j+2) = s""""(x(j)+0)/24; f(j) = s""""'(x(j)-0)/120 f(j+1) = 0 f(j+2) = s""""'(x(j)+0)/120. void Test(); Test method for TSpline5. n number of data points.; m 2*m-1 is order of spline.; m = 3 always for quintic spline.; nn,nm1,mm,; mm1,i,k,; j,jj temporary integer variables.; z,p temporary double precision variables.; x[n] the sequence of knots.; y[n] the prescribed function values at the knots.; a[200][6] two dimensional array whose columns are; the computed spline coefficients; diff[5] maximum values of differences of values and; derivatives to right and left of knots.; com[5] maximum values of coefficients. test of TSpline5 with nonequidistant knots and; equidistant knots follows. void Streamer(TBuffer& ); Stream an object of class TSpline5. void GetKnot(Int_t i, Double_t& x, Double_t& y) const. void GetCoeff(Int_t i, Double_t &x, Double_t &y, Double_t &b, Double_t &c, Double_t &d). TSpline5(); {}. virtual ~TSpline5(); {if (fPoly) delete [] fPoly;}. » Author: Federico Carminati 28/02/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpline5.html:16715,test,test,16715,root/html602/TSpline5.html,https://root.cern,https://root.cern/root/html602/TSpline5.html,1,['test'],['test']
Testability,", ""C"", 1, kMagenta);; 891 ; 892 ; 893 // setup error plots and progress bar variables for JsMVA; 894 if (fInteractive){; 895 fInteractive->AddPoint(cycleCount, trainError, testError);; 896 if (*fExitFromTraining) break;; 897 *fIPyCurrentIter = 100*(double)settings.maxConvergenceCount () /(double)settings.convergenceSteps ();; 898 }; 899 ; 900 if (hasConverged); 901 break;; 902 ; 903 if ((int)cycleCount % 10 == 0) {; 904 ; 905 TString convText = TString::Format( ""(train/test/epo/conv/maxco): %.3g/%.3g/%d/%d/%d"",; 906 trainError,; 907 testError,; 908 (int)cycleCount,; 909 (int)settings.convergenceCount (),; 910 (int)settings.maxConvergenceCount ());; 911 double progress = 100*(double)settings.maxConvergenceCount () /(double)settings.convergenceSteps ();; 912 settings.cycle (progress, convText);; 913 }; 914 }; 915 while (true);; 916 settings.endTrainCycle (trainError);; 917 ; 918 TString convText = TString::Format( ""(train/test/epoch): %.4g/%.4g/%d"", trainError, testError, (int)cycleCount);; 919 double progress = 100*(double)settings.maxConvergenceCount() /(double)settings.convergenceSteps ();; 920 settings.cycle (progress, convText);; 921 ; 922 return testError;; 923 }; 924 ; 925 ; 926 ; 927/*! \brief execute a single training cycle; 928 *; 929 * uses multithreading if turned on; 930 *; 931 * \param minimizer the minimizer to be used (e.g. SGD); 932 * \param weights the weight container with all the synapse weights; 933 * \param itPatternBegin begin of the pattern container; 934 * \param itPatternEnd the end of the pattern container; 935 * \param settings the settings for this training (e.g. multithreading or not, regularization, etc.); 936 * \param dropContainer the data for dropping-out nodes (regularization technique); 937 */; 938 template <typename Iterator, typename Minimizer>; 939 inline double Net::trainCycle (Minimizer& minimizer, std::vector<double>& weights,; 940 Iterator itPatternBegin, Iterator itPatternEnd, Settings& settings, DropContainer& dropContainer)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:27978,test,testError,27978,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['test'],['testError']
Testability,", ""PDEFoamBoost"",; 382 ""!H:!V:Boost_Num=30:Boost_Transform=linear:SigBgSeparate=F:MaxDepth=4:UseYesNoCell=T:DTLogic=MisClassificationError:FillFoamWithOrigWeights=F:TailCut=0:nActiveCells=500:nBin=20:Nmin=400:Kernel=None:Compress=T"" );; 383 ; 384 // K-Nearest Neighbour classifier (KNN); 385 if (Use[""KNN""]); 386 factory->BookMethod( dataloader, TMVA::Types::kKNN, ""KNN"",; 387 ""H:nkNN=20:ScaleFrac=0.8:SigmaFact=1.0:Kernel=Gaus:UseKernel=F:UseWeight=T:!Trim"" );; 388 ; 389 // H-Matrix (chi2-squared) method; 390 if (Use[""HMatrix""]); 391 factory->BookMethod( dataloader, TMVA::Types::kHMatrix, ""HMatrix"", ""!H:!V:VarTransform=None"" );; 392 ; 393 // Linear discriminant (same as Fisher discriminant); 394 if (Use[""LD""]); 395 factory->BookMethod( dataloader, TMVA::Types::kLD, ""LD"", ""H:!V:VarTransform=None:CreateMVAPdfs:PDFInterpolMVAPdf=Spline2:NbinsMVAPdf=50:NsmoothMVAPdf=10"" );; 396 ; 397 // Fisher discriminant (same as LD); 398 if (Use[""Fisher""]); 399 factory->BookMethod( dataloader, TMVA::Types::kFisher, ""Fisher"", ""H:!V:Fisher:VarTransform=None:CreateMVAPdfs:PDFInterpolMVAPdf=Spline2:NbinsMVAPdf=50:NsmoothMVAPdf=10"" );; 400 ; 401 // Fisher with Gauss-transformed input variables; 402 if (Use[""FisherG""]); 403 factory->BookMethod( dataloader, TMVA::Types::kFisher, ""FisherG"", ""H:!V:VarTransform=Gauss"" );; 404 ; 405 // Composite classifier: ensemble (tree) of boosted Fisher classifiers; 406 if (Use[""BoostedFisher""]); 407 factory->BookMethod( dataloader, TMVA::Types::kFisher, ""BoostedFisher"",; 408 ""H:!V:Boost_Num=20:Boost_Transform=log:Boost_Type=AdaBoost:Boost_AdaBoostBeta=0.2:!Boost_DetailedMonitoring"" );; 409 ; 410 // Function discrimination analysis (FDA) -- test of various fitters - the recommended one is Minuit (or GA or SA); 411 if (Use[""FDA_MC""]); 412 factory->BookMethod( dataloader, TMVA::Types::kFDA, ""FDA_MC"",; 413 ""H:!V:Formula=(0)+(1)*x0+(2)*x1+(3)*x2+(4)*x3:ParRanges=(-1,1);(-10,10);(-10,10);(-10,10);(-10,10):FitMethod=MC:SampleSize=100000:Sigma=0.1"" );; 414 ; 415 if (U",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C_source.html:19654,log,log,19654,doc/master/TMVAClassification_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C_source.html,1,['log'],['log']
Testability,", ""\\csc"");; y -= step ; l.DrawMathText(x1, y, ""\\deg""); l.DrawText(x2, y, ""\\deg"");; y -= step ; l.DrawMathText(x1, y, ""\\det""); l.DrawText(x2, y, ""\\det"");; y -= step ; l.DrawMathText(x1, y, ""\\dim""); l.DrawText(x2, y, ""\\dim"");; y -= step ; l.DrawMathText(x1, y, ""\\exp""); l.DrawText(x2, y, ""\\exp"");; y -= step ; l.DrawMathText(x1, y, ""\\gcd""); l.DrawText(x2, y, ""\\gcd"");; y -= step ; l.DrawMathText(x1, y, ""\\hom""); l.DrawText(x2, y, ""\\hom"");; y -= step ; l.DrawMathText(x1, y, ""\\inf""); l.DrawText(x2, y, ""\\inf"");; y -= step ; l.DrawMathText(x1, y, ""\\ker""); l.DrawText(x2, y, ""\\ker"");; y -= step ; l.DrawMathText(x1, y, ""\\lg""); l.DrawText(x2, y, ""\\lg"");; y -= step ; l.DrawMathText(x1, y, ""\\lim""); l.DrawText(x2, y, ""\\lim"");; y -= step ; l.DrawMathText(x1, y, ""\\liminf""); l.DrawText(x2, y, ""\\liminf"");; y -= step ; l.DrawMathText(x1, y, ""\\limsup""); l.DrawText(x2, y, ""\\limsup"");; y -= step ; l.DrawMathText(x1, y, ""\\ln""); l.DrawText(x2, y, ""\\ln"");; y -= step ; l.DrawMathText(x1, y, ""\\log""); l.DrawText(x2, y, ""\\log"");; y -= step ; l.DrawMathText(x1, y, ""\\max""); l.DrawText(x2, y, ""\\max"");; y -= step ; l.DrawMathText(x1, y, ""\\min""); l.DrawText(x2, y, ""\\min"");; y -= step ; l.DrawMathText(x1, y, ""\\sec""); l.DrawText(x2, y, ""\\sec"");; y -= step ; l.DrawMathText(x1, y, ""\\sin""); l.DrawText(x2, y, ""\\sin"");; y -= step ; l.DrawMathText(x1, y, ""\\sinh""); l.DrawText(x2, y, ""\\sinh"");; y -= step ; l.DrawMathText(x1, y, ""\\sup""); l.DrawText(x2, y, ""\\sup"");; y -= step ; l.DrawMathText(x1, y, ""\\tan""); l.DrawText(x2, y, ""\\tan"");; y -= step ; l.DrawMathText(x1, y, ""\\tanh""); l.DrawText(x2, y, ""\\tanh"");. return c1;; }. Function Members (Methods); public:. virtual~TMathText(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMathText.html:52199,log,log,52199,root/html602/TMathText.html,https://root.cern,https://root.cern/root/html602/TMathText.html,2,['log'],['log']
Testability,", ""\\csc"");; y -= step ; l.DrawMathText(x1, y, ""\\deg""); l.DrawText(x2, y, ""\\deg"");; y -= step ; l.DrawMathText(x1, y, ""\\det""); l.DrawText(x2, y, ""\\det"");; y -= step ; l.DrawMathText(x1, y, ""\\dim""); l.DrawText(x2, y, ""\\dim"");; y -= step ; l.DrawMathText(x1, y, ""\\exp""); l.DrawText(x2, y, ""\\exp"");; y -= step ; l.DrawMathText(x1, y, ""\\gcd""); l.DrawText(x2, y, ""\\gcd"");; y -= step ; l.DrawMathText(x1, y, ""\\hom""); l.DrawText(x2, y, ""\\hom"");; y -= step ; l.DrawMathText(x1, y, ""\\inf""); l.DrawText(x2, y, ""\\inf"");; y -= step ; l.DrawMathText(x1, y, ""\\ker""); l.DrawText(x2, y, ""\\ker"");; y -= step ; l.DrawMathText(x1, y, ""\\lg""); l.DrawText(x2, y, ""\\lg"");; y -= step ; l.DrawMathText(x1, y, ""\\lim""); l.DrawText(x2, y, ""\\lim"");; y -= step ; l.DrawMathText(x1, y, ""\\liminf""); l.DrawText(x2, y, ""\\liminf"");; y -= step ; l.DrawMathText(x1, y, ""\\limsup""); l.DrawText(x2, y, ""\\limsup"");; y -= step ; l.DrawMathText(x1, y, ""\\ln""); l.DrawText(x2, y, ""\\ln"");; y -= step ; l.DrawMathText(x1, y, ""\\log""); l.DrawText(x2, y, ""\\log"");; y -= step ; l.DrawMathText(x1, y, ""\\max""); l.DrawText(x2, y, ""\\max"");; y -= step ; l.DrawMathText(x1, y, ""\\min""); l.DrawText(x2, y, ""\\min"");; y -= step ; l.DrawMathText(x1, y, ""\\sec""); l.DrawText(x2, y, ""\\sec"");; y -= step ; l.DrawMathText(x1, y, ""\\sin""); l.DrawText(x2, y, ""\\sin"");; y -= step ; l.DrawMathText(x1, y, ""\\sinh""); l.DrawText(x2, y, ""\\sinh"");; y -= step ; l.DrawMathText(x1, y, ""\\sup""); l.DrawText(x2, y, ""\\sup"");; y -= step ; l.DrawMathText(x1, y, ""\\tan""); l.DrawText(x2, y, ""\\tan"");; y -= step ; l.DrawMathText(x1, y, ""\\tanh""); l.DrawText(x2, y, ""\\tanh"");; ; return c1;; }. Function Members (Methods); public:. TMathText(); TMathText(const TMathText& text); TMathText(Double_t x, Double_t y, const char* text); virtual~TMathText(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMathText.html:52217,log,log,52217,root/html534/TMathText.html,https://root.cern,https://root.cern/root/html534/TMathText.html,1,['log'],['log']
Testability,", -1 on error. Int_t SetOutFile(const char* outfile, Bool_t verbose = kTRUE); Set the output file; Return 0 on success, -1 on error. Int_t RunCPU(Long64_t nevents = -1, Int_t start = -1, Int_t stop = -1, Int_t step = -1); Perform the CPU run; Return 0 on success, -1 on error. Int_t RunCPUx(Long64_t nevents = -1, Int_t start = -1, Int_t stop = -1); Perform the CPU run scanning over the number of workers per node; Return 0 on success, -1 on error. void DrawCPU(const char* outfile, const char* opt = ""std:""); Draw the CPU speedup plot.; opt = 'std:' draw standard evt/s plot; 'stdx:' draw standard evt/s plot, 1 worker per node; 'norm:' draw normalized plot; 'normx:' draw normalized plot, 1 worker per node. Int_t RunDataSet(const char* dset = ""BenchDataSet"", Int_t start = 1, Int_t stop = -1, Int_t step = 1); Perform a test using dataset 'dset'; Return 0 on success, -1 on error; Open the file for the results. Int_t RunDataSetx(const char* dset = ""BenchDataSet"", Int_t start = 1, Int_t stop = -1); Perform a test using dataset 'dset' scanning over the number of workers; per node.; Return 0 on success, -1 on error; Open the file for the results. void DrawDataSet(const char* outfile, const char* opt = ""std:"", const char* type = ""mbs""); Draw the CPU speedup plot.; opt = 'std:' Standard scaling plot; 'norm:' Normalized scaling plot; 'stdx:' Standard scaling plot, 1 worker per node; 'normx:' Normalized scaling plot, 1 worker per node; type = 'mbs' MB/s scaling plots (default); 'evts' Event/s scaling plots. Int_t ReleaseCache(const char* dset); Release memory cache for dataset 'dset'; Return 0 on success, -1 on error. Int_t RemoveDataSet(const char* dset); Physically remove the dataset 'dset', i.e. remove the dataset and the files; it describes; Return 0 on success, -1 on error. Int_t MakeDataSet(const char* dset = 0, Long64_t nevt = -1, const char* fnroot = ""event"", Bool_t regenerate = kFALSE); Create the largest dataset for the run.; Defaults for; dataset name, filename root; are;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofBench.html:9033,test,test,9033,root/html530/TProofBench.html,https://root.cern,https://root.cern/root/html530/TProofBench.html,1,['test'],['test']
Testability,", . Double_t & ; vhigh . ); const. overridevirtual . Get all parameter info (name, value, errors) ; Implements TVirtualFitter.; Definition at line 563 of file TBackCompFitter.cxx. ◆ GetParError(). Double_t TBackCompFitter::GetParError ; (; Int_t ; ipar); const. overridevirtual . Parameter error. ; Implements TVirtualFitter.; Definition at line 541 of file TBackCompFitter.cxx. ◆ GetParName(). const char * TBackCompFitter::GetParName ; (; Int_t ; ipar); const. overridevirtual . Return name of parameter ipar. ; Implements TVirtualFitter.; Definition at line 590 of file TBackCompFitter.cxx. ◆ GetStats(). Int_t TBackCompFitter::GetStats ; (; Double_t & ; amin, . Double_t & ; edm, . Double_t & ; errdef, . Int_t & ; nvpar, . Int_t & ; nparx . ); const. overridevirtual . Get fit statistical information. ; Implements TVirtualFitter.; Definition at line 600 of file TBackCompFitter.cxx. ◆ GetSumLog(). Double_t TBackCompFitter::GetSumLog ; (; Int_t ; i). overridevirtual . Sum of log (un-needed) ; Implements TVirtualFitter.; Definition at line 613 of file TBackCompFitter.cxx. ◆ GetTFitResult(). TFitResult * TBackCompFitter::GetTFitResult ; (; ); const. Get a copy of the Fit result returning directly a new TFitResult. ; Return a new copy of the TFitResult object which needs to be deleted later by the user. ; Definition at line 787 of file TBackCompFitter.cxx. ◆ IsA(). TClass * TBackCompFitter::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 143 of file TBackCompFitter.h. ◆ IsFixed(). Bool_t TBackCompFitter::IsFixed ; (; Int_t ; ipar); const. overridevirtual . Query if parameter ipar is fixed. ; Implements TVirtualFitter.; Definition at line 621 of file TBackCompFitter.cxx. ◆ PrintResults(). void TBackCompFitter::PrintResults ; (; Int_t ; level, . Double_t ; amin . ); const. overridevirtual . Print the fit result. ; Use PrintResults function in case of Minuit for old -style printing ; Implements T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBackCompFitter.html:32693,log,log,32693,doc/master/classTBackCompFitter.html,https://root.cern,https://root.cern/doc/master/classTBackCompFitter.html,1,['log'],['log']
Testability,", . TMVA::DataLoader * ; dataloader, . TFile * ; outputFile, . TString ; options . ). explicit . Definition at line 277 of file CrossValidation.cxx. ◆ ~CrossValidation(). TMVA::CrossValidation::~CrossValidation ; (; ). default . Member Function Documentation. ◆ Class(). static TClass * TMVA::CrossValidation::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::CrossValidation::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::CrossValidation::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 175 of file CrossValidation.h. ◆ DeclFileName(). static const char * TMVA::CrossValidation::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 175 of file CrossValidation.h. ◆ Evaluate(). void TMVA::CrossValidation::Evaluate ; (; ). virtual . Does training, test set evaluation and performance evaluation of using cross-evalution. ; Implements TMVA::Envelope.; Definition at line 587 of file CrossValidation.cxx. ◆ GetFactory(). Factory & TMVA::CrossValidation::GetFactory ; (; ). inline . Definition at line 140 of file CrossValidation.h. ◆ GetNumFolds(). UInt_t TMVA::CrossValidation::GetNumFolds ; (; ). inline . Definition at line 137 of file CrossValidation.h. ◆ GetResults(). const std::vector< TMVA::CrossValidationResult > & TMVA::CrossValidation::GetResults ; (; ); const. Definition at line 699 of file CrossValidation.cxx. ◆ GetSplitExpr(). TString TMVA::CrossValidation::GetSplitExpr ; (; ). inline . Definition at line 138 of file CrossValidation.h. ◆ InitOptions(). void TMVA::CrossValidation::InitOptions ; (; ). Definition at line 321 of file CrossValidation.cxx. ◆ IsA(). virtual TClass * TMVA::CrossValidation::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::Envelope.; Definition at line 175 of file CrossValidati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CrossValidation.html:20918,test,test,20918,doc/master/classTMVA_1_1CrossValidation.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CrossValidation.html,1,['test'],['test']
Testability,", . const Bool_t * ; fixPositionY1, . const Double_t * ; ampInit, . const Bool_t * ; fixAmp, . const Double_t * ; ampInitX1, . const Bool_t * ; fixAmpX1, . const Double_t * ; ampInitY1, . const Bool_t * ; fixAmpY1 . ). This function sets the following fitting parameters of peaks: . sigmaX - initial value of sigma x parameter; fixSigmaX - logical value of sigma x parameter, which allows to fix the parameter (not to fit); sigmaY - initial value of sigma y parameter; fixSigmaY - logical value of sigma y parameter, which allows to fix the parameter (not to fit); ro - initial value of ro parameter (correlation coefficient); fixRo - logical value of ro parameter, which allows to fix the parameter (not to fit); positionInitX - array of initial values of peaks x positions; fixPositionX - array of logical values which allow to fix appropriate x positions (not fit). However they are present in the estimated functional.; positionInitY - array of initial values of peaks y positions; fixPositionY - array of logical values which allow to fix appropriate y positions (not fit). However they are present in the estimated functional.; ampInit - array of initial values of 2D peaks amplitudes; fixAmp - array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; ampInitX1 - array of initial values of amplitudes of 1D ridges in x direction; fixAmpX1 - array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional; ampInitY1 - array of initial values of amplitudes of 1D ridges in y direction; fixAmpY1 - array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional . Definition at line 5583 of file TSpectrum2Fit.cxx. ◆ SetTailParameters(). void TSpectrum2Fit::SetTailParameters ; (; Double_t ; tInitXY, . Bool_t ; fixTxy, .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:73170,log,logical,73170,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['log'],['logical']
Testability,", . const char * ; comment = 0 . ). virtual . Create a reference to a data member documentation page. ; str encloses the text to create the reference for (e.g. name of instance). comment will be added e.g. as tooltip text. After the reference is put into str.String(), str will enclose the reference and the original text. Example: Input: str.String(): ""a gHtml test"" str.Begin(): 2 str.Length(): 5 Output: str.String(): ""a <a href=""THtml.html"">gHtml</a> test"" str.Begin(): 2 str.Length(): 30 ; Definition at line 1814 of file TDocOutput.cxx. ◆ ReferenceEntity() [3/4]. void TDocOutput::ReferenceEntity ; (; TSubString & ; str, . TDataType * ; entity, . const char * ; comment = 0 . ). virtual . Create a reference to a type documentation page. ; str encloses the text to create the reference for (e.g. name of instance). comment will be added e.g. as tooltip text. After the reference is put into str.String(), str will enclose the reference and the original text. Example: Input: str.String(): ""a gHtml test"" str.Begin(): 2 str.Length(): 5 Output: str.String(): ""a <a href=""THtml.html"">gHtml</a> test"" str.Begin(): 2 str.Length(): 30 ; Definition at line 1866 of file TDocOutput.cxx. ◆ ReferenceEntity() [4/4]. void TDocOutput::ReferenceEntity ; (; TSubString & ; str, . TMethod * ; entity, . const char * ; comment = 0 . ). virtual . Create a reference to a method documentation page. ; str encloses the text to create the reference for (e.g. name of instance). comment will be added e.g. as tooltip text. After the reference is put into str.String(), str will enclose the reference and the original text. Example: Input: str.String(): ""a gHtml test"" str.Begin(): 2 str.Length(): 5 Output: str.String(): ""a <a href=""THtml.html"">gHtml</a> test"" str.Begin(): 2 str.Length(): 30 ; Definition at line 1909 of file TDocOutput.cxx. ◆ ReferenceIsRelative(). Bool_t TDocOutput::ReferenceIsRelative ; (; const char * ; reference); const. virtual . Check whether reference is a relative reference, and can (o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocOutput.html:24981,test,test,24981,doc/master/classTDocOutput.html,https://root.cern,https://root.cern/doc/master/classTDocOutput.html,1,['test'],['test']
Testability,", 0};; 419}; 420 ; 421// this function is meant to be called by the jitted code generated by BookFilterJit; 422template <typename F, typename PrevNode>; 423void JitFilterHelper(F &&f, const char **colsPtr, std::size_t colsSize, std::string_view name,; 424 std::weak_ptr<RJittedFilter> *wkJittedFilter, std::shared_ptr<PrevNode> *prevNodeOnHeap,; 425 RColumnRegister *colRegister) noexcept; 426{; 427 if (wkJittedFilter->expired()) {; 428 // The branch of the computation graph that needed this jitted code went out of scope between the type; 429 // jitting was booked and the time jitting actually happened. Nothing to do other than cleaning up.; 430 delete wkJittedFilter;; 431 delete colRegister;; 432 delete prevNodeOnHeap;; 433 return;; 434 }; 435 ; 436 const ColumnNames_t cols(colsPtr, colsPtr + colsSize);; 437 delete[] colsPtr;; 438 ; 439 const auto jittedFilter = wkJittedFilter->lock();; 440 ; 441 // mock Filter logic -- validity checks and Define-ition of RDataSource columns; 442 using Callable_t = std::decay_t<F>;; 443 using F_t = RFilter<Callable_t, PrevNode>;; 444 using ColTypes_t = typename TTraits::CallableTraits<Callable_t>::arg_types;; 445 constexpr auto nColumns = ColTypes_t::list_size;; 446 CheckFilter(f);; 447 ; 448 auto &lm = *jittedFilter->GetLoopManagerUnchecked(); // RLoopManager must exist at this time; 449 auto ds = lm.GetDataSource();; 450 ; 451 if (ds != nullptr); 452 AddDSColumns(cols, lm, *ds, ColTypes_t(), *colRegister);; 453 ; 454 jittedFilter->SetFilter(; 455 std::unique_ptr<RFilterBase>(new F_t(std::forward<F>(f), cols, *prevNodeOnHeap, *colRegister, name)));; 456 // colRegister points to the columns structure in the heap, created before the jitted call so that the jitter can; 457 // share data after it has lazily compiled the code. Here the data has been used and the memory can be freed.; 458 delete colRegister;; 459 delete prevNodeOnHeap;; 460 delete wkJittedFilter;; 461}; 462 ; 463namespace DefineTypes {; 464struct RDefineTag {};; 465struct ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/InterfaceUtils_8hxx_source.html:19997,mock,mock,19997,doc/master/InterfaceUtils_8hxx_source.html,https://root.cern,https://root.cern/doc/master/InterfaceUtils_8hxx_source.html,2,"['log', 'mock']","['logic', 'mock']"
Testability,", 1.0 . Example: Interval(.5,1.,6) ; [ min max ] ; ------------------------------------------------------------; | | | | | |; .5 .6 .7 .8 .9 1.0 ; ; bin 0 1 2 3 4 5 ; ; . Function Members (Methods); public:. virtual~Interval(); static TClass*Class(); virtual Double_tGetElement(Int_t position) const; virtual Double_tGetMax() const; virtual Double_tGetMean() const; virtual Double_tGetMin() const; virtual Int_tGetNbins() const; virtual Double_tGetRndm(TRandom3&) const; virtual Double_tGetStepSize(Int_t iBin = 0) const; virtual Double_tGetWidth() const; TMVA::IntervalInterval(const TMVA::Interval& other); TMVA::IntervalInterval(Double_t min, Double_t max, Int_t nbins = 0); virtual TClass*IsA() const; TMVA::Interval&operator=(const TMVA::Interval&); virtual voidPrint(ostream& os) const; voidSetMax(Double_t m); voidSetMin(Double_t m); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. TMVA::MsgLogger&Log() const. Data Members; protected:. Double_tfMaxthe constraints of the Interval; Double_tfMin; Int_tfNbinswhen >0 : number of bins (discrete interval); when ==0 continuous interval. private:. static TMVA::MsgLogger*fgLoggermessage logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Interval(Double_t min, Double_t max, Int_t nbins = 0). Interval(const TMVA::Interval& other). ~Interval(); destructor. Double_t GetElement(Int_t position) const; calculates the value of the ""number"" bin in a discrete interval.; Parameters:; Double_t position. Double_t GetStepSize(Int_t iBin = 0) const; retuns the step size between the numbers of a ""discrete Interval"". Double_t GetRndm(TRandom3& ) const; get uniformely distributed number within interval. Double_t GetWidth() const. Double_t GetMean() const. void Print(ostream& os) const. Double_t GetMin() const; accessors; accessors. { return fMin; }. Double_t GetMax() const; { return fMax; }. Int_t GetNbins(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__Interval.html:1998,Log,Log,1998,root/html534/TMVA__Interval.html,https://root.cern,https://root.cern/root/html534/TMVA__Interval.html,1,['Log'],['Log']
Testability,", 100 , 100 ) ; Layer 2 DENSE Layer: ( Input = 100 , Width = 64 ) Output = ( 1 , 100 , 64 ) Activation Function = Tanh; Layer 3 DENSE Layer: ( Input = 64 , Width = 1 ) Output = ( 1 , 100 , 1 ) Activation Function = Identity; : Using 2560 events for training and 640 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 0.70799; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.70053 0.692869 0.625222 0.0421632 4287.73 0; : 2 | 0.694153 0.694394 0.638111 0.0419725 4193.66 1; : 3 | 0.689625 0.697522 0.634816 0.0412563 4211.88 2; : 4 | 0.681203 0.694822 0.628686 0.0407413 4252.1 3; : 5 Minimum Test error found - save the configuration ; : 5 | 0.673678 0.681248 0.619972 0.0411822 4319.36 0; : 6 Minimum Test error found - save the configuration ; : 6 | 0.660284 0.667264 0.614022 0.0406714 4360.33 0; : 7 Minimum Test error found - save the configuration ; : 7 | 0.640131 0.636981 0.602694 0.0404119 4446.16 0; : 8 | 0.616397 0.638352 0.610274 0.0409979 4391.54 1; : 9 Minimum Test error found - save the configuration ; : 9 | 0.599679 0.608826 0.618875 0.0405848 4323.09 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.585295 0.60026 0.603058 0.0404042 4443.23 0; : ; : Elapsed time for training with 3200 events: 6.25 sec ; : Evaluate deep neural network on CPU using batches with size = 100; : ; TMVA_LSTM : [dataset] : Evaluation of TMVA_LSTM on training sample (3200 events); : Elapsed time for evaluation of 3200 events: 0.214 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAClassification_TMVA_LSTM.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html:16129,Test,Test,16129,doc/master/TMVA__RNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html,1,['Test'],['Test']
Testability,", 200, 10, 700, 500);; 1086 canvas->SetGrid();; 1087 ; 1088 TMultiGraph *multigraph = this->GetROCCurveAsMultiGraph(datasetname, iClass, type);; 1089 ; 1090 if (multigraph) {; 1091 multigraph->Draw(""AL"");; 1092 ; 1093 multigraph->GetYaxis()->SetTitle(""Background rejection (Specificity)"");; 1094 multigraph->GetXaxis()->SetTitle(""Signal efficiency (Sensitivity)"");; 1095 ; 1096 TString titleString = TString::Format(""Signal efficiency vs. Background rejection"");; 1097 if (this->fAnalysisType == Types::kMulticlass) {; 1098 titleString = TString::Format(""%s (Class=%i)"", titleString.Data(), iClass);; 1099 }; 1100 ; 1101 // Workaround for TMultigraph not drawing title correctly.; 1102 multigraph->GetHistogram()->SetTitle(titleString.Data());; 1103 multigraph->SetTitle(titleString.Data());; 1104 ; 1105 canvas->BuildLegend(0.15, 0.15, 0.35, 0.3, ""MVA Method"");; 1106 }; 1107 ; 1108 return canvas;; 1109}; 1110 ; 1111////////////////////////////////////////////////////////////////////////////////; 1112/// Iterates through all booked methods and calls training; 1113 ; 1114void TMVA::Factory::TrainAllMethods(); 1115{; 1116 Log() << kHEADER << gTools().Color(""bold"") << ""Train all methods"" << gTools().Color(""reset"") << Endl;; 1117 // iterates over all MVAs that have been booked, and calls their training methods; 1118 ; 1119 // don't do anything if no method booked; 1120 if (fMethodsMap.empty()) {; 1121 Log() << kINFO << ""...nothing found to train"" << Endl;; 1122 return;; 1123 }; 1124 ; 1125 // here the training starts; 1126 // Log() << kINFO << "" "" << Endl;; 1127 Log() << kDEBUG << ""Train all methods for ""; 1128 << (fAnalysisType == Types::kRegression; 1129 ? ""Regression""; 1130 : (fAnalysisType == Types::kMulticlass ? ""Multiclass"" : ""Classification"")); 1131 << "" ..."" << Endl;; 1132 ; 1133 std::map<TString, MVector *>::iterator itrMap;; 1134 ; 1135 for (itrMap = fMethodsMap.begin(); itrMap != fMethodsMap.end(); ++itrMap) {; 1136 MVector *methods = itrMap->second;; 1137 MVector::itera",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:45713,Log,Log,45713,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['Log'],['Log']
Testability,", B_2, … , B_N is also created. A node B_i does not represent a unique object in the geometry because its container A might be at its turn positioned as node inside several other volumes. Only when a complete branch of nodes is fully defined up to the top node in the geometry, a given path:/TOP_1/…/A_3/B_7 will represent a unique object. Its global transformation matrix can be computed as the pile-up of all local transformations in its branch. We will therefore call logical graph the hierarchy defined by nodes and volumes. The expansion of the logical graph by all possible paths defines a tree structure where all nodes are unique “touchable” objects. We will call this the “physical tree”. Unlike the logical graph, the physical tree can become a huge structure with several millions of nodes in case of complex geometries; therefore, it is not always a good idea to keep it transient in memory. Since the logical and physical structures are correlated, the modeller rather keeps track only of the current branch, updating the current global matrix at each change of the level in geometry. The current physical node is not an object that can be asked for at a given moment, but rather represented by the combination: current node/current global matrix. However, physical nodes have unique ID’s that can be retrieved for a given modeller state. These can be fed back to the modeller in order to force a physical node to become current. The advantage of this comes from the fact that all navigation queries check first the current node; therefore the location of a point in the geometry can be saved as a starting state for later use.; Nodes can be declared as overlapping in case they do overlap with other nodes inside the same container or extrude this container (see also ‘Checking the Geometry’). Non-overlapping nodes can be created with:; TGeoVolume::AddNode(TGeoVolume *daughter,Int_t copy_No,; TGeoMatrix *matr);; The creation of overlapping nodes can be done with a similar prototype:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:932770,log,logical,932770,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['log'],['logical']
Testability,", Bool_t checkstg, Bool_t doall, TFileStager* stager, Bool_t createStager, const char* stageopts, Bool_t dbg, Bool_t& changed, Bool_t& opened); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tRegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); virtual Bool_tRemoveDataSet(const char* uri); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tScanDataSet(const char* uri, UInt_t option = kReopen|kDebug); static Int_tTDataSetManager::ScanFile(TFileInfo* fileinfo, Bool_t notify); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidTDataSetManager::SetScanCounters(Int_t t = -1, Int_t o = -1, Int_t d = -1); virtual voidTObject::SetUniqueID(UInt_t uid); virtual Int_tShowCache(const char* uri = 0); virtual voidTDataSetManager::ShowDataSets(const char* uri = ""*"", const char* opt = """"); virtual voidShowMembers(TMemberInspector&); virtual voidTDataSetManager::ShowQuota(const char* opt); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Int_tWriteDataSet(const char* group, const char* user, const char* dsName, TFileCollection* dataset, UInt_t option = 0, TMD5* checksum = 0).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDataSetManagerFile.html:7372,Test,TestBit,7372,root/html534/TDataSetManagerFile.html,https://root.cern,https://root.cern/root/html534/TDataSetManagerFile.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,", Bool_t recurseADirty = kTRUE); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; virtual voidShowMembers(TMemberInspector& insp, char* parent); RooMoment*RooAbsReal::sigma(RooRealVar& obs); RooMoment*RooAbsReal::sigma(RooRealVar& obs, const RooArgSet& nset); virtual Int_tTNamed::Sizeof() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig(Bool_t createOnTheFly); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); const map<std::string,std::string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const set<std::string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidRooAbsReal::writeToStream(ostream& os, Bool_t compact) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsCachedReal.html:24249,Test,TestBit,24249,root/html526/RooAbsCachedReal.html,https://root.cern,https://root.cern/root/html526/RooAbsCachedReal.html,94,['Test'],"['TestBit', 'TestBits']"
Testability,", Bool_t regenerate=kFALSE);  Create the largest dataset for the run. ;  ; Int_t OpenOutFile (Bool_t wrt=kFALSE, Bool_t verbose=kTRUE);  Set the otuput file Return 0 on success, -1 on error. ;  ; Int_t ReleaseCache (const char *dset);  Release memory cache for dataset 'dset' Return 0 on success, -1 on error. ;  ; Int_t RemoveDataSet (const char *dset);  Physically remove the dataset 'dset', i.e. ;  ; Int_t RunCPU (Long64_t nevents=-1, Int_t start=-1, Int_t stop=-1, Int_t step=-1);  Perform the CPU run Return 0 on success, -1 on error. ;  ; Int_t RunCPUx (Long64_t nevents=-1, Int_t start=-1, Int_t stop=-1);  Perform the CPU run scanning over the number of workers per node Return 0 on success, -1 on error. ;  ; Int_t RunDataSet (const char *dset=""BenchDataSet"", Int_t start=1, Int_t stop=-1, Int_t step=1);  Perform a test using dataset 'dset' Return 0 on success, -1 on error Open the file for the results. ;  ; Int_t RunDataSetx (const char *dset=""BenchDataSet"", Int_t start=1, Int_t stop=-1);  Perform a test using dataset 'dset' scanning over the number of workers per node. ;  ; void SetCPUPar (const char *par);  ; void SetCPUSel (const char *sel);  ; void SetDataGenPar (const char *par);  ; void SetDataGenSel (const char *sel);  ; void SetDataPar (const char *par);  ; void SetDataSel (const char *sel);  ; void SetDebug (Bool_t debug=kTRUE);  ; void SetHistType (TPBHistType *histtype);  ; void SetNFilesWrk (Int_t nf=0);  ; void SetNHist (Int_t nh);  ; void SetNTries (Int_t nt);  ; Int_t SetOutFile (const char *outfile, Bool_t verbose=kTRUE);  Set the output file Return 0 on success, -1 on error. ;  ; void SetProofDS (TProof *p);  Set the PROOF instance to be used for dataset operations, like releasing cache ... Use SetProofDS(0) to reset and using the default PROOF. ;  ; void SetReadType (TPBReadType *readtype);  ; void SetReleaseCache (Bool_t on=kTRUE);  ; void SetSelOption (const char *opt);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofBench.html:2133,test,test,2133,doc/master/classTProofBench.html,https://root.cern,https://root.cern/doc/master/classTProofBench.html,1,['test'],['test']
Testability,", Bool_t rnr_children); virtual Bool_tTEveElement::SetRnrState(Bool_t rnr); voidSetSmooth(Bool_t r); voidTEvePointSelectorConsumer::SetSourceCS(TEvePointSelectorConsumer::ETreeVarType_e cs); voidTEveElement::SetSourceObject(TObject* o); virtual voidTEvePointSet::SetTitle(const char* t); virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector&); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTPolyMarker3D::Size() const; virtual voidTAtt3D::Sizeof3D() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTEvePointSet::TakeAction(TEvePointSelector*); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidWriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveLine.html:21805,Test,TestBit,21805,root/html534/TEveLine.html,https://root.cern,https://root.cern/root/html534/TEveLine.html,3,['Test'],"['TestBit', 'TestBits', 'TestCSCBits']"
Testability,", Bool_t rnr_children); virtual Bool_tTEveElement::SetRnrState(Bool_t rnr); voidTEveDigitSet::SetSelectViaFrame(Bool_t sf); voidTEveElement::SetSourceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidTEveDigitSet::SetTooltipCBFoo(TEveDigitSet::TooltipCB_foo f); virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; virtual voidTAtt3D::Sizeof3D() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; voidTest(Int_t nboxes); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; virtual voidTEveDigitSet::UnHighlighted(); virtual voidTEveDigitSet::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveDigitSet::UseSingleColor(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveBoxSet.html:21313,Test,TestBit,21313,root/html532/TEveBoxSet.html,https://root.cern,https://root.cern/root/html532/TEveBoxSet.html,3,['Test'],"['TestBit', 'TestBits', 'TestCSCBits']"
Testability,", Bool_t set); virtual voidTGFrame::SetCleanup(Int_t = kLocalCleanup); virtual voidSetContainer(TGFrame* f); voidTGFrame::SetDNDSource(Bool_t onoff); voidTGFrame::SetDNDTarget(Bool_t onoff); virtual voidTGFrame::SetDragType(Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGFrame::SetEditable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidSetHsbPosition(Int_t newPos); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); voidSetScrolling(Int_t scrolling); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetVsbPosition(Int_t newPos); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGCanvas.html:14373,Test,TestBit,14373,root/html528/TGCanvas.html,https://root.cern,https://root.cern/root/html528/TGCanvas.html,6,['Test'],"['TestBit', 'TestBits']"
Testability,", Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidSetCurrentEvent(Long64_t ievt) const; virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetMethodBaseDir(TDirectory* methodDir); voidSetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidSetSignalReferenceCut(Double_t cut); voidSetSignalReferenceCutOrientation(Double_t cutOrientation); voidSetTestTime(Double_t testTime); voidSetTestvarName(const TString& v = """"); voidSetTrainTime(Double_t trainTime); virtual voidSetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetupMethod(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTestClassification(); virtual voidTestMulticlass(); virtual voidTestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidWriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidWriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidWriteStateToFile() const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodBase.html:11484,Test,TestBit,11484,root/html530/TMVA__MethodBase.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodBase.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,", Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::shapeClientMIterator() const; virtual voidShowMembers(TMemberInspector&); RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs); RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs, const RooArgSet& nset); virtual Int_tTNamed::Sizeof() const; RooNumGenConfig*specialGeneratorConfig() const; RooNumGenConfig*specialGeneratorConfig(Bool_t createOnTheFly); RooNumIntConfig*RooAbsReal::specialIntegratorConfig() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig(Bool_t createOnTheFly); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); const map<std::string,std::string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_ttraceEvalHook(Double_t value) const; Bool_ttraceEvalPdf(Double_t value) const; const set<std::string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; RooFIterRooAbsArg::valueClientMIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); static intverboseEval(); static voidverboseEval(Int_t stat); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; voidRooAbsArg::wireAllCaches(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidRooAbsReal::writeTo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsPdf.html:34749,Test,TestBits,34749,root/html534/RooAbsPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsPdf.html,1,['Test'],['TestBits']
Testability,", Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; voidsetWidthScaleFactor(Double_t widthScaleFactor); TIterator*RooAbsArg::shapeClientIterator() const; virtual voidShowMembers(TMemberInspector& insp); RooMoment*RooAbsReal::sigma(RooRealVar& obs); RooMoment*RooAbsReal::sigma(RooRealVar& obs, const RooArgSet& nset); virtual Int_tTNamed::Sizeof() const; RooNumGenConfig*RooAbsPdf::specialGeneratorConfig() const; RooNumGenConfig*RooAbsPdf::specialGeneratorConfig(Bool_t createOnTheFly); RooNumIntConfig*RooAbsReal::specialIntegratorConfig() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig(Bool_t createOnTheFly); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); const map<std::string,std::string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tRooAbsPdf::traceEvalHook(Double_t value) const; Bool_tRooAbsPdf::traceEvalPdf(Double_t value) const; const set<std::string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); static intRooAbsPdf::verboseEval(); static voidRooAbsPdf::verboseEval(Int_t stat); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidwriteHistToFile(char* outputFile, const char* histName) const; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/Roo2DKeysPdf.html:29271,Test,TestBits,29271,root/html528/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html528/Roo2DKeysPdf.html,2,['Test'],['TestBits']
Testability,", Bool_t verbose = 0); TMVA::ReaderReader(vector<string>& varNames, const TString& theOption = """", Bool_t verbose = 0); TMVA::ReaderReader(const string& varNames, const TString& theOption, Bool_t verbose = 0); TMVA::ReaderReader(vector<TString>& varNames, const TString& theOption = """", Bool_t verbose = 0); TMVA::ReaderReader(const TString& varNames, const TString& theOption, Bool_t verbose = 0); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetVerbose(Bool_t v); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); Bool_tVerbose() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__Reader.html:9023,Test,TestBit,9023,root/html602/TMVA__Reader.html,https://root.cern,https://root.cern/root/html602/TMVA__Reader.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,", Double_t w, Double_t* range = 0, EHelixRangeType type = kUnchanged, Double_t* axis = 0); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual Int_tTPolyLine3D::SetNextPoint(Double_t x, Double_t y, Double_t z)MENU ; static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOption(Option_t* option = """"); virtual voidTPolyLine3D::SetPoint(Int_t point, Double_t x, Double_t y, Double_t z)MENU ; virtual voidTPolyLine3D::SetPolyLine(Int_t n, Option_t* option = """"); virtual voidTPolyLine3D::SetPolyLine(Int_t n, Float_t* p, Option_t* option = """"); virtual voidTPolyLine3D::SetPolyLine(Int_t n, Double_t* p, Option_t* option = """"); virtual voidSetRange(Double_t* range, EHelixRangeType rtype = kHelixZ); virtual voidSetRange(Double_t r1, Double_t r2, EHelixRangeType rtype = kHelixZ); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTPolyLine3D::Size() const; virtual voidTAtt3D::Sizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THelix(); THelix(const THelix& helix); THelix(Double_t* xyz, Double_t* v, Double_t w, Double_t* range = 0, EHelixRangeType rtype = kHelixZ, Double_t* axis = 0); THelix(Double_t x, Double_t y, Double_t z, Double_t vx, Double_t vy, Double_t vz, Double_t w); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THelix.html:7570,Test,TestBit,7570,root/html602/THelix.html,https://root.cern,https://root.cern/root/html602/THelix.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,", Double_t& parmin, Double_t& parmax) const; virtual const char*TFormula::GetParName(Int_t ipar) const; virtual Int_tTFormula::GetParNumber(const char* name) const; virtual Double_tGetProb() const; virtual Int_tGetQuantiles(Int_t nprobSum, Double_t* q, const Double_t* probSum); virtual Double_tGetRandom(); virtual Double_tGetRandom(Double_t xmin, Double_t xmax); virtual voidGetRange(Double_t& xmin, Double_t& xmax) const; virtual voidGetRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; virtual voidGetRange(Double_t& xmin, Double_t& ymin, Double_t& zmin, Double_t& xmax, Double_t& ymax, Double_t& zmax) const; virtual Double_tGetSave(const Double_t* x); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_tGetX(Double_t y, Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; TAxis*GetXaxis() const; virtual Double_tGetXmax() const; virtual Double_tGetXmin() const; TAxis*GetYaxis() const; TAxis*GetZaxis() const; virtual Double_tGradientPar(Int_t ipar, const Double_t* x, Double_t eps = 0.01); virtual voidGradientPar(const Double_t* x, Double_t* grad, Double_t eps = 0.01); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInitArgs(const Double_t* x, const Double_t* params); static voidInitStandardFunctions(); virtual voidTObject::Inspect() constMENU ; virtual Double_tIntegral(Double_t a, Double_t b, const Double_t* params = 0, Double_t epsilon = 1e-12); virtual Double_tIntegral(Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t epsilon = 1e-12); virtual Double_tIntegral(Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t az, Double_t bz, Double_t epsilon = 1e-12); virtual Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TF1.html:11904,log,logx,11904,root/html528/TF1.html,https://root.cern,https://root.cern/root/html528/TF1.html,4,['log'],['logx']
Testability,", Double_t& seed); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); TVectorT<float>&ResizeTo(Int_t n); TVectorT<float>&ResizeTo(const TVectorT<float>& v); TVectorT<float>&ResizeTo(Int_t lwb, Int_t upb); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TVectorT<float>&SelectNonZeros(const TVectorT<float>& select); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetElements(const float* elements); static voidTObject::SetObjectStat(Bool_t stat); TVectorT<float>&SetSub(Int_t row_lwb, const TVectorT<float>& source); virtual voidTObject::SetUniqueID(UInt_t uid); TVectorT<float>&Shift(Int_t row_shift); virtual voidShowMembers(TMemberInspector&); Bool_tSomePositive(const TVectorT<float>& select); TVectorT<float>&Sqr(); TVectorT<float>&Sqrt(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); floatSum() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TVectorT<float>&Use(TVectorT<float>& v); const TVectorT<float>&Use(const TVectorT<float>& v) const; TVectorT<float>&Use(Int_t n, float* data); const TVectorT<float>&Use(Int_t n, const float* data) const; TVectorT<float>&Use(Int_t lwb, Int_t upb, float* data); const TVectorT<float>&Use(Int_t lwb, Int_t upb, const float* data) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; TVectorT<float>&Zero().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVectorT_float_.html:8131,Test,TestBit,8131,root/html534/TVectorT_float_.html,https://root.cern,https://root.cern/root/html534/TVectorT_float_.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,", EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Constructor for 1-sample tests with a user specified distribution implementing the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ;  GoFTest (size_t sampleSize, const Double_t *sample, Dist &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Templated constructor for 1-sample tests with a user specified distribution as a functor object implementing double operator()(double x). ;  ;  GoFTest (size_t sampleSize, const Double_t *sample, EDistribution dist=kUndefined, const std::vector< double > &distParams={});  Constructor for 1-sample tests with a specified distribution. ;  ; virtual ~GoFTest ();  ; Double_t AndersonDarling2SamplesTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarling2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 2-Sample Test. ;  ; Double_t AndersonDarlingTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarlingTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 1-Sample Test. ;  ; Double_t KolmogorovSmirnov2SamplesTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; void KolmogorovSmirnov2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; Double_t KolmogorovSmirnovTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void KolmogorovSmirnovTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void operator() (ETestType test, Double_t &pvalue, Double_t &testStat) const;  The class's unary functions performing the gif test according to the ETestType provided. ;  ; Double_t operator() (ETestType test=kAD, const Char_t *option=""p"") const;  Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value specific",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:3259,Test,Test,3259,doc/master/classROOT_1_1Math_1_1GoFTest.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html,1,['Test'],['Test']
Testability,", Float_t y1, Float_t z1, Float_t x2, Float_t y2, Float_t z2); TEveStraightLineSet::Marker_t*TEveStraightLineSet::AddMarker(const TEveVector& p, Int_t line_id = -1); TEveStraightLineSet::Marker_t*TEveStraightLineSet::AddMarker(Int_t line_id, Float_t pos); TEveStraightLineSet::Marker_t*TEveStraightLineSet::AddMarker(Float_t x, Float_t y, Float_t z, Int_t line_id = -1); virtual voidTEveElement::AddParent(TEveElement* re); virtual voidTEveProjectable::AddProjected(TEveProjected* p); virtual voidTEveProjectable::AddProjectedsToSet(set<TEveElement*>& set); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidTEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearSt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveScalableStraightLineSet.html:2156,Assert,AssertBBox,2156,root/html602/TEveScalableStraightLineSet.html,https://root.cern,https://root.cern/root/html602/TEveScalableStraightLineSet.html,4,['Assert'],['AssertBBox']
Testability,", GEANT4, where we have very large number repeated placements of relatively few logical (unique) shapes. Some viewers (OpenGL only at present) are able to take advantage of this by identifying unique logical shapes from the fID logical ID member of TBuffer3D. If repeated addition of the same fID is found, the shape is cached already - and the costly tessellation does not need to be sent again. The viewer can also perform internal GL specific caching with considerable performance gains in these cases.; For this to work correctly the logical object in must be described in TBuffer3D in the local reference frame, complete with the local/master translation. The viewer indicates this through the interface method; PreferLocalFrame(); If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D containing the same fID, and different fLocalMaster placements.; For viewers supporting logical/physical objects, the TBuffer3D content refers to the properties of logical object, with the fLocalMaster transform and the fColor and fTransparency attributes, which can be varied for each physical object.; As a minimum requirement all clients must be capable of filling the raw tessellation of the object buffer, in the master reference frame. Conversely viewers must always be capable of displaying the object described by this buffer. Scene Rebuilds; It should be understood that AddObject is not an explicit command to the viewer; it may for various reasons decide to ignore it:; It already has the object internally cached .; The object falls outside some 'interest' limits of the viewer camera.; The object is too small to be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition, simply indicating it does not require you to provide further information about this object. You should not try to make any assumptions about what the viewer did with it.; This enables the viewer to be connected to a client which sends potentially millions o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBuffer3D.html:6282,log,logical,6282,doc/master/classTBuffer3D.html,https://root.cern,https://root.cern/doc/master/classTBuffer3D.html,2,['log'],['logical']
Testability,", Int_t NbkgTest,; 158 const TString& otherOpt=""SplitMode=Random:!V"" );; 159 ; 160 // Cross validation; 161 void MakeKFoldDataSet(CvSplit & s);; 162 void PrepareFoldDataSet(CvSplit & s, UInt_t foldNumber, Types::ETreeType tt = Types::kTraining);; 163 void RecombineKFoldDataSet(CvSplit & s, Types::ETreeType tt = Types::kTraining);; 164 ; 165 const DataSetInfo& GetDefaultDataSetInfo(){ return DefaultDataSetInfo(); }; 166 ; 167 TH2* GetCorrelationMatrix(const TString& className);; 168 ; 169 //Copy method use in VI and CV DEPRECATED: you can just call Clone DataLoader *dl2=(DataLoader *)dl1->Clone(""dl2""); 170 DataLoader* MakeCopy(TString name);; 171 friend void DataLoaderCopy(TMVA::DataLoader* des, TMVA::DataLoader* src);; 172 DataInputHandler& DataInput() { return *fDataInputHandler; }; 173 ; 174 private:; 175 ; 176 ; 177 DataSetInfo& DefaultDataSetInfo();; 178 void SetInputTreesFromEventAssignTrees();; 179 ; 180 ; 181 private:; 182 ; 183 // data members; 184 ; 185 ; 186 DataSetManager* fDataSetManager; // DSMTEST; 187 ; 188 ; 189 DataInputHandler* fDataInputHandler; ///<->; 190 ; 191 std::vector<TMVA::VariableTransformBase*> fDefaultTrfs; ///< list of transformations on default DataSet; 192 ; 193 // cd to local directory; 194 TString fOptions; ///< option string given by construction (presently only ""V""); 195 TString fTransformations; ///< List of transformations to test; 196 Bool_t fVerbose; ///< verbose mode; 197 ; 198 // flag determining the way training and test data are assigned to DataLoader; 199 enum DataAssignType { kUndefined = 0,; 200 kAssignTrees,; 201 kAssignEvents };; 202 DataAssignType fDataAssignType; ///< flags for data assigning; 203 std::vector<TTree*> fTrainAssignTree; ///< for each class: tmp tree if user wants to assign the events directly; 204 std::vector<TTree*> fTestAssignTree; ///< for each class: tmp tree if user wants to assign the events directly; 205 ; 206 Int_t fATreeType = 0; ///< type of event (=classIndex); 207 Float_t fATreeWeight = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataLoader_8h_source.html:8576,test,test,8576,doc/master/DataLoader_8h_source.html,https://root.cern,https://root.cern/doc/master/DataLoader_8h_source.html,2,['test'],['test']
Testability,", Int_t averWindow). One-dimensional high-resolution peak search function. This function searches for peaks in source spectrum. It is based on; deconvolution method. First the background is removed (if desired), then; Markov smoothed spectrum is calculated (if desired), then the response; function is generated according to given sigma and deconvolution is; carried out. The order of peaks is arranged according to their heights in; the spectrum after background elimination. The highest peak is the first in; the list. On success it returns number of found peaks.; ; Function parameters:. source: pointer to the vector of source spectrum.; destVector: pointer to the vector of resulting deconvolved spectrum.; ssize: length of source spectrum.; sigma: sigma of searched peaks, for details we refer to manual.; threshold: threshold value in % for selected peaks, peaks with; amplitude less than threshold*highest_peak/100; are ignored, see manual.; backgroundRemove: logical variable, set if the removal of; background before deconvolution is desired.; deconIterations-number of iterations in deconvolution operation.; markov: logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow: averanging window of searched peaks, for details; we refer to manual (applies only for Markov method).; . Peaks searching:. The goal of this function is to identify automatically the peaks in spectrum; with the presence of the continuous background and statistical; fluctuations - noise.; ; The common problems connected with correct peak identification are:; ; non-sensitivity to noise, i.e., only statistically; relevant peaks should be identified.; non-sensitivity of the algorithm to continuous; background.; ability to identify peaks close to the edges of the; spectrum region. Usually peak finders fail to detect them.; resolution, decomposition of Double_tts and multiplets.; The algorithm should be able to recognize close ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrum.html:52157,log,logical,52157,root/html602/TSpectrum.html,https://root.cern,https://root.cern/root/html602/TSpectrum.html,2,['log'],['logical']
Testability,", Int_t averWindow). One-dimensional high-resolution peak search function. This function searches for peaks in source spectrum. It is based on; deconvolution method. First the background is removed (if desired), then; Markov smoothed spectrum is calculated (if desired), then the response; function is generated according to given sigma and deconvolution is; carried out. The order of peaks is arranged according to their heights in; the spectrum after background elimination. The highest peak is the first in; the list. On success it returns number of found peaks.; ; Function parameters:. source: pointer to the vector of source spectrum.; destVector: pointer to the vector of resulting deconvolved spectrum.; ssize: length of source spectrum.; sigma: sigma of searched peaks, for details we refer to manual.; threshold: threshold value in % for selected peaks, peaks with; amplitude less than threshold*highest_peak/100; are ignored, see manual.; backgroundRemove: logical variable, set if the removal of; background before deconvolution is desired.; deconIterations-number of iterations in deconvolution operation.; markov: logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow: averanging window of searched peaks, for details; we refer to manual (applies only for Markov method).; . Peaks searching:. The goal of this function is to identify automatically the peaks in spectrum; with the presence of the continuous background and statistical; fluctuations - noise.; ; The common problems connected with correct peak identification are:; ; non-sensitivity to noise, i.e., only statistically; relevant peaks should be identified.; non-sensitivity of the algorithm to continuous; background.; ability to identify peaks close to the edges of the; spectrum region. Usually peak finders fail to detect them.; resolution, decomposition of doublets and multiplets.; The algorithm should be able to recognize close po",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum.html:50998,log,logical,50998,root/html528/TSpectrum.html,https://root.cern,https://root.cern/root/html528/TSpectrum.html,4,['log'],['logical']
Testability,", Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidDoGlobalFit() const; voidDoReset() const; RooAbsData*RooStats::CombinedCalculator::GetData() const; RooAbsPdf*RooStats::CombinedCalculator::GetPdf() const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. RooFitResult*fFitResultinternal result of gloabl fit . protected:. RooArgSetRooStats::CombinedCalculator::fAlternateParamsRooArgSet specifying alternate parameters for hypothesis test // Is it used ????; RooAbsData*RooStats::CombinedCalculator::fData; TStringTNamed::fNameobject identifier; RooArgSetRooStats::CombinedCalculator::fNuisParamsRooArgSet specifying nuisance parameters for interval; RooArgSetRooStats::CombinedCalculator::fNullParamsRooArgSet specifying null parameters for hypothesis test; RooArgSetRooStats::CombinedCalculator::fPOIRooArgSet specifying parameters of interest for interval; RooAbsPdf*RooStats::CombinedCalculator::fPdf; Double_tRooStats::CombinedCalculator::fSizesize of the test (eg. specified rate of Type I error); TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ProfileLikelihoodCalculator(); default dummy constructor. ProfileLikelihoodCalculator(RooAbsData& data, RooAbsPdf& pdf, const RooArgSet& paramsOfInterest, Double_t size = 0.05, const RooArgSet* nullParams = 0); constructor from the data, a model pdf and the parameter of Interest.; If nuisance parameters are present they should be specified as part of the model; i.e. the model pdf is a combined pdf for the poi and the nuisance; The default test size used is 0.05 ( for a 95% interval); A set for the null paramete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__ProfileLikelihoodCalculator.html:9453,test,test,9453,root/html526/RooStats__ProfileLikelihoodCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__ProfileLikelihoodCalculator.html,3,['test'],['test']
Testability,", Int_t depth = 0); virtual TStringPath() const; virtual voidTObject::Pop(); virtual TDataSet*Prev() const; virtual voidTNamed::Print(Option_t* option = """") const; virtual voidPrintContents(Option_t* opt = """") const; virtual Int_tPurge(Option_t* opt = """"); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRemove(TDataSet* set); virtual TDataSet*RemoveAt(Int_t idx); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetMother(TDataSet* parent = 0); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidSetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetParent(TDataSet* parent = 0); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetWrite(); virtual voidShowMembers(TMemberInspector& insp); virtual voidShunt(TDataSet* newParent = 0); virtual Int_tTNamed::Sizeof() const; virtual voidSort(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidUnMark()MENU ; voidUnMarkAll()MENU ; virtual voidUpdate(); virtual voidUpdate(TDataSet* set, UInt_t opt = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tWrite(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tWrite(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TDataSet.html:10217,Test,TestBit,10217,root/html530/TDataSet.html,https://root.cern,https://root.cern/root/html530/TDataSet.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,", Int_t first, Int_t eoffset); Int_tReadBufferSTL(TBuffer& b, TVirtualCollectionProxy* cont, Int_t nc, Int_t eoffset, Bool_t v7 = kTRUE); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); static voidTVirtualStreamerInfo::SetCanDelete(Bool_t opt = kTRUE); virtual voidSetCheckSum(UInt_t checksum); virtual voidSetClass(TClass* cl); virtual voidSetClassVersion(Int_t vers); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTVirtualStreamerInfo::SetFactory(TVirtualStreamerInfo* factory); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetOnFileClassVersion(Int_t vers); static Bool_tTVirtualStreamerInfo::SetStreamMemberWise(Bool_t enable = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTagFile(TFile* fFile); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TStreamerInfo(); TStreamerInfo(TClass* cl); virtual voidUpdate(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TStreamerInfo.html:10202,Test,TestBit,10202,root/html602/TStreamerInfo.html,https://root.cern,https://root.cern/root/html602/TStreamerInfo.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,", Int_t last); virtual Int_tTObject::Read(const char* name); virtual voidRecursiveRemove(TObject* obj); voidTHashList::Rehash(Int_t newCapacity); virtual TObject*Remove(TObject* obj); virtual TObject*Remove(TObjLink* lnk); virtual voidTSeqCollection::RemoveAfter(TObject* after); voidTCollection::RemoveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*TSeqCollection::RemoveAt(Int_t idx); virtual voidTSeqCollection::RemoveBefore(TObject* before); virtual voidTSeqCollection::RemoveFirst(); virtual voidTList::RemoveLast(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTList::Sort(Bool_t order = kSortAscending); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TListOfFunctionTemplates(TClass* cl); voidUnload(); voidUnload(TFunctionTemplate* func); voidTSeqCollection::UnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TListOfFunctionTemplates.html:8070,Test,TestBit,8070,root/html602/TListOfFunctionTemplates.html,https://root.cern,https://root.cern/root/html602/TListOfFunctionTemplates.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,", Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); static TConfidenceLevel*ComputeLimit(TH1* s, TH1* b, TH1* d, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); static TConfidenceLevel*ComputeLimit(Double_t s, Double_t b, Int_t d, TVectorD* se, TVectorD* be, TObjArray*, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); static TConfidenceLevel*ComputeLimit(TH1* s, TH1* b, TH1* d, TVectorD* se, TVectorD* be, TObjArray*, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); virtual TClass*IsA() const; TLimit&operator=(const TLimit&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. static boolFluctuate(TLimitDataSource* input, TLimitDataSource* output, bool init, TRandom*, bool stat = false); static Double_tLogLikelihood(Double_t s, Double_t b, Double_t b2, Double_t d). Data Members; private:. static TOrdCollection*fgSystNamesCollection of systematics names; static TArrayD*fgTablea log table... just to speed up calculation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TConfidenceLevel * ComputeLimit(TLimitDataSource* data, Int_t nmc = 50000, bool stat = false, TRandom* generator = 0); class TLimit. Algorithm to compute 95% C.L. limits using the Likelihood ratio; semi-bayesian method.; It takes signal, background and data histograms wrapped in a; TLimitDataSource as input and runs a set of Monte Carlo experiments in; order to compute the limits. If needed, inputs are fluctuated according; to systematics. The output is a TConfidenceLevel. class TLimitDataSource. Takes the signal, background and data histograms as well as different; systematics sources to form the TLimit input. class TConfidenceLevel. Final result of the TLimit algorithm. It is created just after the; time-consuming part and can be stored in a TFile for further processing.; It contains light methods to return CLs, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TLimit.html:2406,log,log,2406,root/html534/TLimit.html,https://root.cern,https://root.cern/root/html534/TLimit.html,1,['log'],['log']
Testability,", Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooFunctor1DPdfBinding&operator=(const RooFunctor1DPdfBinding&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFunctor1DPdfBinding.html:23620,test,testArg,23620,root/html602/RooFunctor1DPdfBinding.html,https://root.cern,https://root.cern/root/html602/RooFunctor1DPdfBinding.html,2,['test'],['testArg']
Testability,", Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooNonCentralChiSquare&operator=(const RooNonCentralChiSquare&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNonCentralChiSquare.html:24364,test,testArg,24364,root/html602/RooNonCentralChiSquare.html,https://root.cern,https://root.cern/root/html602/RooNonCentralChiSquare.html,2,['test'],['testArg']
Testability,", Int_t* error = 0, Bool_t keep = kFALSE); virtual Long_tTApplication::ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTApplication::RemoveIdleTimer(); voidTObject::ResetBit(UInt_t f); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidTApplication::Run(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTApplication::SetEchoMode(Bool_t mode); virtual voidTApplication::SetIdleTimer(UInt_t idleTimeInSec, const char* command); static voidTObject::SetObjectStat(Bool_t stat); voidTApplication::SetReturnFromRun(Bool_t ret); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTApplication::Show(); virtual voidShowMembers(TMemberInspector& insp); virtual voidTApplication::StartIdleing(); virtual voidTApplication::StopIdleing(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTApplication::Terminate(Int_t status = 0)SIGNAL ; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; const char*TApplication::WorkingDirectory() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGApplication.html:9486,Test,TestBit,9486,root/html528/TGApplication.html,https://root.cern,https://root.cern/root/html528/TGApplication.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,", ItTruth itTruthBegin, ItTruth /*itTruthEnd*/, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc /*itInvActFnc*/, double patternWeight); 413 {; 414 bool hasDeltas = (itDelta != itDeltaEnd);; 415 ; 416 double errorSum = 0.0;; 417 for (ItProbability itProbability = itProbabilityBegin; itProbability != itProbabilityEnd; ++itProbability); 418 {; 419 double probability = *itProbability;; 420 double truth = *itTruthBegin;; 421 /* truth = truth < 0.1 ? 0.1 : truth; */; 422 /* truth = truth > 0.9 ? 0.9 : truth; */; 423 truth = truth < 0.5 ? 0.1 : 0.9;; 424 if (hasDeltas); 425 {; 426 double delta = probability - truth;; 427 (*itDelta) = delta*patternWeight;; 428// (*itDelta) = (*itInvActFnc)(probability) * delta * patternWeight;; 429 ++itDelta;; 430 }; 431 double error (0);; 432 if (probability == 0) // protection against log (0); 433 {; 434 if (truth >= 0.5); 435 error += 1.0;; 436 }; 437 else if (probability == 1); 438 {; 439 if (truth < 0.5); 440 error += 1.0;; 441 }; 442 else; 443 error += - (truth * log (probability) + (1.0-truth) * log (1.0-probability)); // cross entropy function; 444 errorSum += error * patternWeight;; 445 ; 446 }; 447 return errorSum;; 448 }; 449 ; 450 ; 451 ; 452 ; 453/*! \brief soft-max-cross-entropy error function (for mutual exclusive cross-entropy); 454 *; 455 *; 456 */; 457 template <typename ItOutput, typename ItTruth, typename ItDelta, typename ItInvActFnc>; 458 double softMaxCrossEntropy (ItOutput itProbabilityBegin, ItOutput itProbabilityEnd, ItTruth itTruthBegin, ItTruth /*itTruthEnd*/, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc /*itInvActFnc*/, double patternWeight); 459 {; 460 double errorSum = 0.0;; 461 ; 462 bool hasDeltas = (itDelta != itDeltaEnd);; 463 // output - truth; 464 ItTruth itTruth = itTruthBegin;; 465 for (auto itProbability = itProbabilityBegin; itProbability != itProbabilityEnd; ++itProbability, ++itTruth); 466 {; 467// assert (itTruth != itTruthEnd);; 468 double probability = (*itProbability);; 469 double truth = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:13029,log,log,13029,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['log'],['log']
Testability,", Option_t* axis = ""X""); virtual voidTH1::SetTitleSize(Float_t size = 0.02, Option_t* axis = ""X""); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTH1::SetXTitle(const char* title); virtual voidTH1::SetYTitle(const char* title); virtual voidTH1::SetZTitle(const char* title); virtual TH1*TH1::ShowBackground(Int_t niter = 20, Option_t* option = ""same"")MENU ; virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTH1::ShowPeaks(Double_t sigma = 2, Option_t* option = """", Double_t threshold = 0.050000000000000003)MENU ; virtual Int_tTNamed::Sizeof() const; virtual voidTAtt3D::Sizeof3D() const; virtual voidTH1::Smooth(Int_t ntimes = 1, Option_t* option = """")MENU ; static voidTH1::SmoothArray(Int_t NN, Double_t* XX, Int_t ntimes = 1); static voidTH1::StatOverflows(Bool_t flag = kTRUE); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTH1::Sumw2(Bool_t flag = kTRUE); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; static TH1*TH1::TransformHisto(TVirtualFFT* fft, TH1* h_output, Option_t* option); virtual voidTH1::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual Int_tBufferFill(Double_t, Double_t); virtual Int_tBufferFill(Double_t, Double_t, Double_t); virtual Int_tBufferFill(Double_t x, Double_t y, Double_t z, Double_t w); static boolTH1::CheckAxisLimits(const TAxis* a1, const TAxis* a2); static boolTH1::CheckBinLabels(const TAxis* a1, const TAxis* a2); static boolTH1::CheckBinLimits(const TAxis* a1, const TAxis* a2); static boolTH1::CheckConsistency(const TH1* h1, const TH1* h2); static boolTH1::CheckConsistentSubAxes(const TAxis* a1, Int_t firstBi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH3.html:21255,Test,TestBit,21255,root/html602/TH3.html,https://root.cern,https://root.cern/root/html602/TH3.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,", Option_t* axis = ""X""); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTH1::SetXTitle(const char* title); virtual voidTH1::SetYTitle(const char* title); virtual voidTH1::SetZTitle(const char* title); virtual TH1*TH1::ShowBackground(Int_t niter = 20, Option_t* option = ""same"")MENU ; virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTH1::ShowPeaks(Double_t sigma = 2, Option_t* option = """", Double_t threshold = 0.050000000000000003)MENU ; virtual Int_tTNamed::Sizeof() const; virtual voidTH1::Smooth(Int_t ntimes = 1, Option_t* option = """")MENU ; static voidTH1::SmoothArray(Int_t NN, Double_t* XX, Int_t ntimes = 1); static voidTH1::StatOverflows(Bool_t flag = kTRUE); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTH1::Sumw2(Bool_t flag = kTRUE); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TH1K(); TH1K(const TH1K&); TH1K(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t k = 0); static TH1*TH1::TransformHisto(TVirtualFFT* fft, TH1* h_output, Option_t* option); virtual voidTH1::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; static voidTArray::WriteArray(TBuffer& b, const TArray* a). protected:. Bool_tTArray::BoundsOk(const char* where, Int_t at) const; virtual Int_tTH1::BufferFill(Double_t x, Double_t w); static boolTH1::CheckAxisLimits(const TAxis* a1, const TAxis* a2); static boolTH1::CheckBinLabels(const TAxis* a1, const TAxis* a2); static boolTH1::CheckBinLimits(const TAxis* a1, const TAxis* a2); static boolTH1::CheckConsistency(const TH1* h1, const TH1* h2); static boolTH1::CheckConsistentSubAxes(const TAxis* a1,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1K.html:19841,Test,TestBit,19841,root/html602/TH1K.html,https://root.cern,https://root.cern/root/html602/TH1K.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,", Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCalcMass(Double_t mass); voidSetDaughter(int i, int code); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetFirstDaughter(int code); voidSetFirstMother(int code); voidSetLastDaughter(int code); voidSetLastMother(int code); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); voidSetMomentum(const TLorentzVector& p); voidSetMomentum(Double_t px, Double_t py, Double_t pz, Double_t e); voidSetMother(int i, int code); static voidTObject::SetObjectStat(Bool_t stat); voidSetPdgCode(Int_t pdg); voidSetPolarisation(const TVector3& v); voidSetPolarisation(Double_t polx, Double_t poly, Double_t polz); voidSetProductionVertex(const TLorentzVector& v); voidSetProductionVertex(Double_t vx, Double_t vy, Double_t vz, Double_t t); voidSetStatusCode(int status); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetWeight(Float_t weight = 1); virtual voidShowMembers(TMemberInspector&); virtual voidSizeof3D() const; Int_tStrangeness() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Double_tT() const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Double_tTheta() const; virtual voidTObject::UseCurrentStyle(); Double_tVx() const; Double_tVy() const; Double_tVz() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Double_tY() const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TParticle.html:7845,Test,TestBit,7845,root/html534/TParticle.html,https://root.cern,https://root.cern/root/html534/TParticle.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,", Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetData(TTree*); voidSetDelta(Double_t delta); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEpsilon(Double_t eps); voidSetEta(Double_t eta); voidSetEtaDecay(Double_t ed); voidSetEventWeight(const char*); voidSetLearningMethod(TMultiLayerPerceptron::ELearningMethod method); static voidTObject::SetObjectStat(Bool_t stat); voidSetReset(Int_t reset); voidSetTau(Double_t tau); voidSetTestDataSet(TEventList* test); voidSetTestDataSet(const char* test); voidSetTrainingDataSet(TEventList* train); voidSetTrainingDataSet(const char* train); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TMultiLayerPerceptron(); TMultiLayerPerceptron(const char* layout, TTree* data = 0, const char* training = ""Entry$%2==0"", const char* test = """", TNeuron::ENeuronType type = TNeuron::kSigmoid, const char* extF = """", const char* extD = """"); TMultiLayerPerceptron(const char* layout, TTree* data, TEventList* training, TEventList* test, TNeuron::ENeuronType type = TNeuron::kSigmoid, const char* extF = """", const char* extD = """"); TMultiLayerPerceptron(const char* layout, const char* weight, TTree* data = 0, const char* training = ""Entry$%2==0"", const char* test = """", TNeuron::ENeuronType type = TNeuron::kSigmoid, const char* extF = """", const char* extD = """"); TMultiLayerPerceptron(const char* layout, const char* weight, TTree* data, TEventList* training, TEventList* test, TNeuron::ENeuronType type = TNeuron::kSigmoid, const char* extF = """", const char* extD = """"); voidTrain(Int_t nEpoch, Option_t* option = ""text"", Double_t minE = 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMultiLayerPerceptron.html:14186,Test,TestBit,14186,root/html602/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html602/TMultiLayerPerceptron.html,2,['Test'],['TestBit']
Testability,", Option_t* option = ""same"")MENU ; virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTH1::ShowPeaks(Double_t sigma = 2, Option_t* option = """", Double_t threshold = 0.050000000000000003)MENU ; virtual Int_tTNamed::Sizeof() const; virtual voidTH1::Smooth(Int_t ntimes = 1, Option_t* option = """")MENU ; static voidTH1::SmoothArray(Int_t NN, Double_t* XX, Int_t ntimes = 1); static voidTH1::StatOverflows(Bool_t flag = kTRUE); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidSumw2(Bool_t flag = kTRUE); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProfile(); TProfile(const TProfile& profile); TProfile(const char* name, const char* title, Int_t nbinsx, const Float_t* xbins, Option_t* option = """"); TProfile(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Option_t* option = """"); TProfile(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup, Option_t* option = """"); TProfile(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Double_t ylow, Double_t yup, Option_t* option = """"); TProfile(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup, Double_t ylow, Double_t yup, Option_t* option = """"); static TH1*TH1::TransformHisto(TVirtualFFT* fft, TH1* h_output, Option_t* option); virtual voidTH1::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; static voidTArray::WriteArray(TBuffer& b, const TArray* a). protected:. Bool_tTArray::BoundsOk(const char* where, Int_t at) const; virtual Int_tBufferFill(Double_t, Double_t); virtual Int_tBufferFill(Double_t x, Double_t y, Double_t w); static",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProfile.html:21418,Test,TestBit,21418,root/html602/TProfile.html,https://root.cern,https://root.cern/root/html602/TProfile.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,", Pixmap_t pxm); virtual voidSetWindowName(Window_t id, char* name); virtual voidSetWMPosition(Window_t id, Int_t x, Int_t y); virtual voidSetWMSize(Window_t id, UInt_t w, UInt_t h); virtual voidSetWMSizeHints(Window_t id, UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); virtual voidSetWMState(Window_t id, EInitialState state); virtual voidSetWMTransientHint(Window_t id, Window_t main_id); virtual voidTVirtualX::ShapeCombineMask(Window_t id, Int_t x, Int_t y, Pixmap_t mask); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidSubtractRegion(Region_t rega, Region_t regb, Region_t result); virtual Int_tSupportsExtension(const char* ext) const; virtual voidTVirtualX::Sync(Int_t mode); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; static TQtTextProxy*TextProxy(); virtual Int_tTextWidth(FontStruct_t font, const char* s, Int_t len); TGQt(); TGQt(const TGQt& vx); TGQt(const char* name, const char* title); virtual voidTranslateCoordinates(Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t& dest_x, Int_t& dest_y, Window_t& child); virtual voidUnionRectWithRegion(Rectangle_t* rect, Region_t src, Region_t dest); virtual voidUnionRegion(Region_t rega, Region_t regb, Region_t result); virtual voidUnmapWindow(Window_t id); virtual voidUpdate(Int_t mode = 0); virtual voidUpdateWindow(Int_t mode); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual voidWarp(Int_t ix, Int_t iy); virtual voidWarp(Int_t ix, Int_t iy, Window_t id); static QWidget*wid(Window_t id); static Window_twid(TQtClientWidget* widget); static QWidget*winid(Window_t id); virtual voidWMDeleteNotify(Window_t id); virtual Int_tTObject::Write(const char* name",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGQt.html:21385,Test,TestBits,21385,root/html602/TGQt.html,https://root.cern,https://root.cern/root/html602/TGQt.html,2,['Test'],['TestBits']
Testability,", RooDecay, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooLandau, RooLognormal, RooNonCPEigenDecay, RooPoisson, RooUniform, RooAddModel, RooBinSamplingPdf, RooMultiVarGaussian, RooProdPdf, and RooTruthModel.; Definition at line 1522 of file RooAbsPdf.cxx. ◆ getGeneratorConfig(). const RooNumGenConfig * RooAbsPdf::getGeneratorConfig ; (; ); const. Return the numeric MC generator configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 2651 of file RooAbsPdf.cxx. ◆ getLogProbabilities(). void RooAbsPdf::getLogProbabilities ; (; std::span< const double > ; pdfValues, . double * ; output . ); const. Definition at line 671 of file RooAbsPdf.cxx. ◆ getLogVal(). double RooAbsPdf::getLogVal ; (; const RooArgSet * ; set = nullptr); const. virtual . Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ; Reimplemented in RooLegacyExpPoly, and RooHistConstraint.; Definition at line 620 of file RooAbsPdf.cxx. ◆ getNorm() [1/2]. double RooAbsPdf::getNorm ; (; const RooArgSet & ; nset); const. inline . Get normalisation term needed to normalise the raw values returned by getVal(). ; Note that getVal(normalisationVariables) will automatically apply the normalisation term returned here. Parameters. nsetSet of variables to normalise over. . Definition at line 195 of file RooAbsPdf.h. ◆ getNorm() [2/2]. double RooAbsPdf::getNorm ; (; const RooArgSet * ; nset = nullptr); const. virtual . Get normalisation term needed to normalise the raw values returned by getVal(). ; Note that getVal(normalisationVariables) will automatically apply the normalisation term returned here. Parameters. nsetSet of variables to normalise over. . Reimplemented in RooResolutionModel.; Definition at line 419 of file RooAbsPdf.cxx. ◆ getNormIntegral(). co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:128148,log,log,128148,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,2,['log'],['log']
Testability,", TClass* receiver_class, void* receiver, const char* slot); TSlave*CreateSlave(const char* url, const char* ord, Int_t perf, const char* image, const char* workdir); TSlave*CreateSubmaster(const char* url, const char* ord, const char* image, const char* msd, Int_t nwk = 1); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; static Bool_tGetFileInCmd(const char* cmd, TString& fn); static Int_tGetInputData(TList* input, const char* cachedir, TString& emsg); TList*GetListOfActiveSlaves() const; TVirtualProofPlayer*GetPlayer() const; TPluginHandler*GetProgressDialog() const; Int_tGetSandbox(TString& sb, Bool_t assert = kFALSE, const char* rc = 0); virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidHandleLibIncPath(const char* what, Bool_t add, const char* dirs); Int_tHandleOutputOptions(TString& opt, TString& target, Int_t action); Int_tInit(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); voidInitMembers(); virtual TVirtualProofPlayer*MakePlayer(const char* player = 0, TSocket* s = 0); voidTObject::MakeZombie(); voidPrepareInputDataFile(TString& dataFile); Int_tRemoveWorkers(TList* wrks); static Int_tSaveInputData(TQueryResult* qr, const char* cachedir, TString& emsg); virtual voidSaveWorkerInfo(); Int_tSendFile(const char* file, Int_t opt = (kBinary | kForward | kCp | kCpBin), const char* rfile = 0, TSlave* sl = 0); static Int_tSendInputData(TQueryResult* qr, TProof* p, TString& emsg); virtual voidSendInputDataFile(); voidSetDSet(TDSet* dset); voidSetFeedback(TString& opt, TString& optfb, Int_t action); voidSetPlayer(TVirtualProofPlayer* player); static void*SlaveStartupThread(void* arg); virtual Bool_tStartSlaves(Bool_t attach = kFALSE); static voidSystemCmd(const char* cmd, Int_t fdout); TProof(); voidUpdateDialog(); virtual voidValidateDSet(TDSet* dset); Int_tVerifyDataSetParallel(const char* uri, const char* optStr).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProof.html:20446,log,loglevel,20446,root/html602/TProof.html,https://root.cern,https://root.cern/root/html602/TProof.html,1,['log'],['loglevel']
Testability,", TH2S, TH2I, TH2L, TH2F, TH2D, TH3, TH3C, TH3S, TH3I, TH3L, TH3F, and TH3D.; Definition at line 1277 of file TH1.cxx. ◆ AddDirectory(). void TH1::AddDirectory ; (; Bool_t ; add = kTRUE). static . Sets the flag controlling the automatic add of histograms in memory. ; By default (fAddDirectory = kTRUE), histograms are automatically added to the list of objects in memory. Note that one histogram can be removed from its support directory by calling h->SetDirectory(nullptr) or h->SetDirectory(dir) to add it to the list of objects in the directory dir.; NOTE that this is a static function. To call it, use; TH1::AddDirectory ; Definition at line 1294 of file TH1.cxx. ◆ AddDirectoryStatus(). Bool_t TH1::AddDirectoryStatus ; (; ). static . Static function: cannot be inlined on Windows/NT. ; Definition at line 754 of file TH1.cxx. ◆ AndersonDarlingTest() [1/2]. Double_t TH1::AndersonDarlingTest ; (; const TH1 * ; h2, . Double_t & ; advalue . ); const. virtual . Same function as above but returning also the test statistic value. ; Definition at line 8080 of file TH1.cxx. ◆ AndersonDarlingTest() [2/2]. Double_t TH1::AndersonDarlingTest ; (; const TH1 * ; h2, . Option_t * ; option = """" . ); const. virtual . Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ; The AD 2 sample test formula are derived from the paper F.W Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; The test is implemented in root in the ROOT::Math::GoFTest class It is the same formula ( (6) in the paper), and also shown in this preprint; Binned data are considered as un-binned data with identical observation happening in the bin center.; Parameters. [in]h2Pointer to 1D histogram ; [in]optionis a character string to specify options; ""D"" Put out a line of ""Debug"" printout; ""T"" Return the normalized A-D test statistic. Note1: Underflow and overflow are not considered in the test; Note2: The test works only for un-weighted histogram (i.e. rep",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:79969,test,test,79969,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['test'],['test']
Testability,", TMVA::KDEKernel::EKernelType ktype, TMVA::KDEKernel::EKernelIter kiter, TMVA::KDEKernel::EKernelBorder kborder, Float_t FineFactor, Bool_t norm = kTRUE); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidTMVA::Configurable::PrintOptions() const; voidProcessOptions(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidReadXML(void* pdfnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidSetReadingVersion(UInt_t rv); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); voidValidatePDF(TH1* original = 0) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__PDF.html:6339,Test,TestBit,6339,root/html534/TMVA__PDF.html,https://root.cern,https://root.cern/root/html534/TMVA__PDF.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,", TString); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. virtual Double_tEstimatorFunction(vector<Double_t>&); Double_tGetBkgEffAtSigEff(Double_t sigEff = 0.5); Double_tGetBkgRejAtSigEff(Double_t sigEff = 0.5); Double_tGetFOM(); TMVA::MethodBase*GetMethod(); voidGetMVADists(); Double_tGetROCIntegral(); vector<int>GetScanIndices(int val, vector<int> base); Double_tGetSeparation(); Double_tGetSigEffAtBkgEff(Double_t bkgEff = 0.1); TMVA::MsgLogger&Log() const; voidoptimizeFit(); voidoptimizeScan(). Data Members; private:. map<std::vector<Double_t>,Double_t>fAlreadyTrainedParCombinationsave parameters for which the FOM is already known (GA seems to evaluate the same parameters several times); TStringfFOMTypethe FOM type (Separation, ROC integra.. whaeter you implemented..; vector<Float_t>fFOMvsItergraph showing the develompment of the Figure Of Merit values during the fit; TMVA::MsgLogger*fLoggermessage logger; TMVA::MethodBase *constfMethodThe MVA method to be evaluated; TH1D*fMvaBkgMVA distrituion for bakgr. events, used for spline fit; TH1D*fMvaBkgFineBinMVA distrituion for bakgr. events; TH1D*fMvaSigMVA distrituion for signal events, used for spline fit; TH1D*fMvaSigFineBinMVA distrituion for signal events; Bool_tfNotDoneYetflat to indicate of Method Transformations have been optained yet or not (normally done in MethodBase::TrainMethod); TStringfOptimizationFitTypewhich type of optimisation procedure to be used ; map<TString,TMVA::Interval*>fTuneParametersparameters included in the tuning; map<TString,Double_t>fTunedParametersparameters included in the tuning. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; OptimizeConfigParameters(TMVA::MethodBase *const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); Constructor which sets either ""Classification or Regr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__OptimizeConfigParameters.html:1956,log,logger,1956,root/html534/TMVA__OptimizeConfigParameters.html,https://root.cern,https://root.cern/root/html534/TMVA__OptimizeConfigParameters.html,1,['log'],['logger']
Testability,", UChar_t* array2, Int_t& nf, Int_t* result); return the list of nodes corresponding to the intersection of two arrays of bits. Bool_t IntersectAndStore(Int_t n1, UChar_t* array1, Int_t n2, UChar_t* array2, Int_t tid = 0); return the list of nodes corresponding to the intersection of two arrays of bits. Bool_t Intersect(Int_t n1, UChar_t* array1, Int_t n2, UChar_t* array2, Int_t n3, UChar_t* array3, Int_t& nf, Int_t* result); return the list of nodes corresponding to the intersection of three arrays of bits. Bool_t IntersectAndStore(Int_t n1, UChar_t* array1, Int_t n2, UChar_t* array2, Int_t n3, UChar_t* array3, Int_t tid = 0); return the list of nodes corresponding to the intersection of three arrays of bits. void SortAll(Option_t* option = """"); order bounding boxes along x, y, z. void Print(Option_t* option = """") const; Print the voxels. void PrintVoxelLimits(Double_t* point) const; print the voxel containing point. void Voxelize(Option_t* option = """"); Voxelize attached volume according to option; If the volume is an assembly, make sure the bbox is computed. void Streamer(TBuffer& b); Stream an object of class TGeoVoxelFinder. ThreadData_t& GetThreadData(Int_t tid = 0) const. Int_t GetPriority(Int_t iaxis) const; {return fPriority[iaxis];}. Bool_t IsInvalid() const; {return TObject::TestBit(kGeoInvalidVoxels);}. Bool_t NeedRebuild() const; {return TObject::TestBit(kGeoRebuildVoxels);}. Double_t * GetBoxes() const; {return fBoxes;}. void SetInvalid(Bool_t flag = kTRUE); {TObject::SetBit(kGeoInvalidVoxels, flag);}. void SetNeedRebuild(Bool_t flag = kTRUE); {TObject::SetBit(kGeoRebuildVoxels, flag);}. » Author: Andrei Gheata 04/02/02 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id: TGeoVoxelFinder.h 41341 2011-10-11 14:58:29Z agheata $ » Last generated: 2011-12-02 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoVoxelFinder.html:14817,Test,TestBit,14817,root/html532/TGeoVoxelFinder.html,https://root.cern,https://root.cern/root/html532/TGeoVoxelFinder.html,2,['Test'],['TestBit']
Testability,", UInt_t *mapVarInFisher);  calculate the fisher coefficients for the event sample and the variables used ;  ; Int_t GetNNodesBeforePruning ();  ; Node * GetNode (ULong_t sequence, UInt_t depth);  retrieve node from the tree. ;  ; Double_t GetNodePurityLimit () const;  ; Double_t GetPruneStrength () const;  ; void GetRandomisedVariables (Bool_t *useVariable, UInt_t *variableMap, UInt_t &nVars);  ; virtual DecisionTreeNode * GetRoot () const;  ; Double_t GetSumWeights (const EventConstList *validationSample) const;  calculate the normalization factor for a pruning validation sample ;  ; Int_t GetTreeID ();  ; std::vector< Double_t > GetVariableImportance ();  Return the relative variable importance, normalized to all variables together having the importance 1. ;  ; Double_t GetVariableImportance (UInt_t ivar);  returns the relative importance of variable ivar ;  ; virtual TClass * IsA () const;  ; void PruneNode (TMVA::DecisionTreeNode *node);  prune away the subtree below the node ;  ; void PruneNodeInPlace (TMVA::DecisionTreeNode *node);  prune a node temporarily (without actually deleting its descendants which allows testing the pruned tree quality for many different pruning stages without ""touching"" the tree. ;  ; Double_t PruneTree (const EventConstList *validationSample=nullptr);  prune (get rid of internal nodes) the Decision tree to avoid overtraining several different pruning methods can be applied as selected by the variable ""fPruneMethod"". ;  ; void SetAnalysisType (Types::EAnalysisType t);  ; void SetMinLinCorrForFisher (Double_t min);  ; void SetNodePurityLimit (Double_t p);  ; void SetNVars (Int_t n);  ; void SetParentTreeInNodes (Node *n=nullptr);  descend a tree to find all its leaf nodes, fill max depth reached in the tree at the same time. ;  ; void SetPruneMethod (EPruneMethod m=kCostComplexityPruning);  ; void SetPruneStrength (Double_t p);  ; void SetTreeID (Int_t treeID);  ; void SetUseExclusiveVars (Bool_t t=kTRUE);  ; void SetUseFisherCuts (Bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html:6294,test,testing,6294,doc/master/classTMVA_1_1DecisionTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html,1,['test'],['testing']
Testability,", const TMatrixT< Element > &source2)operation this = source1+source2Definition TMatrixT.cxx:2303; TMatrixTAutoloadOps::AtMultBvoid AtMultB(const Element *const ap, Int_t ncolsa, const Element *const bp, Int_t nb, Int_t ncolsb, Element *cp)Elementary routine to calculate matrix multiplication A^T*B.Definition TMatrixT.cxx:3104; TMatrixTAutoloadOps::operator>=TMatrixT< Element > operator>=(const TMatrixT< Element > &source1, const TMatrixT< Element > &source2)logical operation source1 >= source2Definition TMatrixT.cxx:2649; TMatrixTAutoloadOps::ElementMultTMatrixT< Element > & ElementMult(TMatrixT< Element > &target, const TMatrixT< Element > &source)Multiply target by the source, element-by-element.Definition TMatrixT.cxx:2985; TMatrixTAutoloadOps::operator||TMatrixT< Element > operator||(const TMatrixT< Element > &source1, const TMatrixT< Element > &source2)Logical OR.Definition TMatrixT.cxx:2525; TMatrixTAutoloadOps::operator<TMatrixT< Element > operator<(const TMatrixT< Element > &source1, const TMatrixT< Element > &source2)logical operation source1 < source2Definition TMatrixT.cxx:2779; TMatrixTAutoloadOps::operator>TMatrixT< Element > operator>(const TMatrixT< Element > &source1, const TMatrixT< Element > &source2)logical operation source1 > source2Definition TMatrixT.cxx:2584; TMatrixTAutoloadOps::AddTMatrixT< Element > & Add(TMatrixT< Element > &target, Element scalar, const TMatrixT< Element > &source)Modify addition: target += scalar * source.Definition TMatrixT.cxx:2936; TMatrixTAutoloadOps::ElementDivTMatrixT< Element > & ElementDiv(TMatrixT< Element > &target, const TMatrixT< Element > &source)Divide target by the source, element-by-element.Definition TMatrixT.cxx:3025; TMatrixTAutoloadOps::MultElement1 Mult(const TVectorT< Element1 > &v1, const TMatrixT< Element2 > &m, const TVectorT< Element3 > &v2)Perform v1 * M * v2, a scalar result.Definition TVectorT.cxx:1542; TMatrixTAutoloadOps::operator-TMatrixT< Element > operator-(const TMatrixT< Element > &so",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMatrixT_8cxx_source.html:140282,log,logical,140282,doc/master/TMatrixT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMatrixT_8cxx_source.html,1,['log'],['logical']
Testability,", const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidInit(); voidPrintCoefficients(); virtual voidProcessOptions(). Data Members; public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TMVA::MethodPDEFoam::EKernelkGaus; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TMVA::MethodPDEFoam::EKernelkLinN; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TMVA::MethodPDEFoam::EKernelkNone; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodPDEFoam.html:16934,test,testing,16934,root/html602/TMVA__MethodPDEFoam.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodPDEFoam.html,2,['test'],['testing']
Testability,", const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; voidsetVerbose(Bool_t clientFlag = kTRUE, Bool_t serverFlag = kTRUE); TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::shapeClientMIterator() const; virtual voidShowMembers(TMemberInspector&); RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs); RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs, const RooArgSet& nset); virtual Int_tTNamed::Sizeof() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig(Bool_t createOnTheFly); voidstandby(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); const map<std::string,std::string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const set<std::string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; RooFIterRooAbsArg::valueClientMIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; voidRooAbsArg::wireAllCaches(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidRooAbsReal::writeToStream(ostream& os, Bool_t compact) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRealMPFE.html:26772,Test,TestBit,26772,root/html534/RooRealMPFE.html,https://root.cern,https://root.cern/root/html534/RooRealMPFE.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,", const char *alg=nullptr);  Minimise the function passed in the constructor. ;  ; std::string const & minimizerType () const;  ; int minos ();  Execute MINOS. ;  ; int minos (const RooArgSet &minosParamList);  Execute MINOS for given list of parameters. ;  ; void optimizeConst (int flag);  If flag is true, perform constant term optimization on function being minimized. ;  ; RooFit::OwningPtr< RooFitResult > save (const char *name=nullptr, const char *title=nullptr);  Save and return a RooFitResult snapshot of current minimizer status. ;  ; void saveStatus (const char *label, int status);  ; int seek ();  Execute SEEK. ;  ; void setEps (double eps);  Change MINUIT epsilon. ;  ; void setErrorLevel (double level);  Set the level for MINUIT error analysis to the given value. ;  ; void setEvalErrorWall (bool flag);  ; bool setLogFile (const char *logf=nullptr);  ; void setMaxFunctionCalls (int n);  Change maximum number of likelihood function class from MINUIT (RooMinimizer default 500 * #parameters) ;  ; void setMaxIterations (int n);  Change maximum number of MINUIT iterations (RooMinimizer default 500 * #parameters) ;  ; void setMinimizerType (std::string const &type);  Choose the minimizer algorithm. ;  ; void setOffsetting (bool flag);  Enable internal likelihood offsetting for enhanced numeric precision. ;  ; void setPrintEvalErrors (int numEvalErrors);  ; void setPrintLevel (int newLevel);  Change the MINUIT internal printing level. ;  ; void setProfile (bool flag=true);  ; void setRecoverFromNaNStrength (double strength);  Try to recover from invalid function values. ;  ; void setStrategy (int istrat);  Change MINUIT strategy to istrat. ;  ; void setVerbose (bool flag=true);  ; int simplex ();  Execute SIMPLEX. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void zeroEvalCount ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMinimizer.html:4255,log,logf,4255,doc/master/classRooMinimizer.html,https://root.cern,https://root.cern/doc/master/classRooMinimizer.html,1,['log'],['logf']
Testability,", const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TFileDrawMap&operator=(const TFileDrawMap&); virtual voidPaint(Option_t* option); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFileDrawMap.html:6878,Test,TestBit,6878,root/html534/TFileDrawMap.html,https://root.cern,https://root.cern/root/html534/TFileDrawMap.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,", const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooMsgService&operator=(const RooMsgService&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* options = 0) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidreset(); voidTObject::ResetBit(UInt_t f); voidrestoreState(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidsaveState(); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidsetGlobalKillBelow(RooFit::MsgLevel level); static voidTObject::SetObjectStat(Bool_t stat); voidsetSilentMode(Bool_t flag); voidsetStreamStatus(Int_t id, Bool_t active); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; voidshowPid(Bool_t flag); Bool_tsilentMode() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMsgService.html:6656,Test,TestBit,6656,root/html602/RooMsgService.html,https://root.cern,https://root.cern/root/html602/RooMsgService.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,", const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TDocParser&operator=(const TDocParser&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidParse(ostream& out); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCurrentModule(const char* module); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); static Bool_tStrip(TString& s); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; TDocParser(TDocOutput& docOutput); TDocParser(const TDocParser&); TDocParser(TClassDocOutput& docOutput, TClass* cl); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDocParser.html:6094,Test,TestBit,6094,root/html602/TDocParser.html,https://root.cern,https://root.cern/root/html602/TDocParser.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,", const char* cs); { return Replace(pos, n, cs, cs ? strlen(cs) : 0); }. TString & Replace(Ssiz_t pos, Ssiz_t n, const TString& s); { return Replace(pos, n, s.Data(), s.Length()); }. TString & Replace(Ssiz_t pos, Ssiz_t n1, const TString& s, Ssiz_t n2); { return Replace(pos, n1, s.Data(), TMath::Min(s.Length(), n2)); }. TString & ReplaceAll(const TString& s1, const TString& s2); { return ReplaceAll(s1.Data(), s1.Length(), s2.Data(), s2.Length()) ; }. TString & ReplaceAll(const TString& s1, const char* s2); { return ReplaceAll(s1.Data(), s1.Length(), s2, s2 ? strlen(s2) : 0); }. TString & ReplaceAll(const char* s1, const TString& s2); { return ReplaceAll(s1, s1 ? strlen(s1) : 0, s2.Data(), s2.Length()); }. TString & ReplaceAll(const char* s1, const char* s2); { return ReplaceAll(s1, s1 ? strlen(s1) : 0, s2, s2 ? strlen(s2) : 0); }. char & operator()(Ssiz_t i); { return GetPointer()[i]; }. char operator()(Ssiz_t i) const; { return GetPointer()[i]; }. char & operator[](Ssiz_t i); { AssertElement(i); return GetPointer()[i]; }. char operator[](Ssiz_t i) const; { AssertElement(i); return GetPointer()[i]; }. char & operator()(Ssiz_t i). char operator()(Ssiz_t i) const. const char * Data() const. Ssiz_t Length() const; { return fExtent; }. Bool_t IsNull() const; For detecting null substrings. { return fBegin == kNPOS; }. Ssiz_t Align(Ssiz_t s); { return (s + (kAlignment-1)) & ~(kAlignment-1); }. Ssiz_t Recommend(Ssiz_t s); { return (s < kMinCap ? kMinCap : Align(s+1)) - 1; }. Bool_t IsLong() const; { return Bool_t(fRep.fShort.fSize & kShortMask); }. void SetShortSize(Ssiz_t s); { fRep.fShort.fSize = (unsigned char)(s << 1); }. Ssiz_t GetShortSize() const; { return fRep.fShort.fSize >> 1; }. void SetLongSize(Ssiz_t s); { fRep.fLong.fSize = s; }. Ssiz_t GetLongSize() const; { return fRep.fLong.fSize; }. void SetSize(Ssiz_t s); { IsLong() ? SetLongSize(s) : SetShortSize(s); }. void SetLongCap(Ssiz_t s); { fRep.fLong.fCap = kLongMask | s; }. Ssiz_t GetLongCap() const; { return ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TString.html:22266,Assert,AssertElement,22266,root/html532/TString.html,https://root.cern,https://root.cern/root/html532/TString.html,2,['Assert'],['AssertElement']
Testability,", const char* cs); { return Replace(pos, n, cs, cs ? strlen(cs) : 0); }. TString & Replace(Ssiz_t pos, Ssiz_t n, const TString& s); { return Replace(pos, n, s.Data(), s.Length()); }. TString & Replace(Ssiz_t pos, Ssiz_t n1, const TString& s, Ssiz_t n2); { return Replace(pos, n1, s.Data(), TMath::Min(s.Length(), n2)); }. TString & ReplaceAll(const TString& s1, const TString& s2); { return ReplaceAll(s1.Data(), s1.Length(), s2.Data(), s2.Length()) ; }. TString & ReplaceAll(const TString& s1, const char* s2); { return ReplaceAll(s1.Data(), s1.Length(), s2, s2 ? strlen(s2) : 0); }. TString & ReplaceAll(const char* s1, const TString& s2); { return ReplaceAll(s1, s1 ? strlen(s1) : 0, s2.Data(), s2.Length()); }. TString & ReplaceAll(const char* s1, const char* s2); { return ReplaceAll(s1, s1 ? strlen(s1) : 0, s2, s2 ? strlen(s2) : 0); }. char & operator()(Ssiz_t i); { return GetPointer()[i]; }. char operator()(Ssiz_t i) const; { return GetPointer()[i]; }. char & operator[](Ssiz_t i); { AssertElement(i); return GetPointer()[i]; }. char operator[](Ssiz_t i) const; { AssertElement(i); return GetPointer()[i]; }. char & operator()(Ssiz_t i). char operator()(Ssiz_t i) const. const char * Data() const. Ssiz_t Length() const; { return fExtent; }. Bool_t IsNull() const; For detecting null substrings. { return fBegin == kNPOS; }. TString(const char* a1, Ssiz_t n1, const char* a2, Ssiz_t n2); Special concatenation constructor. Ssiz_t Align(Ssiz_t s); { return (s + (kAlignment-1)) & ~(kAlignment-1); }. Ssiz_t Recommend(Ssiz_t s); { return (s < kMinCap ? kMinCap : Align(s+1)) - 1; }. Bool_t IsLong() const; { return Bool_t(fRep.fShort.fSize & kShortMask); }. void SetShortSize(Ssiz_t s); { fRep.fShort.fSize = (unsigned char)(s << 1); }. Ssiz_t GetShortSize() const; { return fRep.fShort.fSize >> 1; }. void SetLongSize(Ssiz_t s); { fRep.fLong.fSize = s; }. Ssiz_t GetLongSize() const; { return fRep.fLong.fSize; }. void SetSize(Ssiz_t s); { IsLong() ? SetLongSize(s) : SetShortSize(s); }. voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TString.html:22204,Assert,AssertElement,22204,root/html530/TString.html,https://root.cern,https://root.cern/root/html530/TString.html,1,['Assert'],['AssertElement']
Testability,", const char* cutRange, Int_t nStart, Int_t nStop, Bool_t, const char* wgtVarName = 0); const RooArgSet&row(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidsetArgStatus(const RooArgSet& set, Bool_t active); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsDataStore::setDirtyProp(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidsetExternalWeightArray(Double_t* arrayWgt, Double_t* arrayWgtErrLo, Double_t* arrayWgtErrHi, Double_t* arraySumW2); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual Double_tsumEntries() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TTree&tree(); virtual const TTree*tree() const; virtual voidTObject::UseCurrentStyle(); virtual Bool_tvalid() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Double_tweight() const; virtual Double_tweight(Int_t index) const; virtual Double_tweightError(RooAbsData::ErrorType etype = RooAbsData::Poisson) const; virtual voidweightError(Double_t& lo, Double_t& hi, RooAbsData::ErrorType etype = RooAbsData::Poisson) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooTreeDataStore.html:8900,Test,TestBit,8900,root/html602/RooTreeDataStore.html,https://root.cern,https://root.cern/root/html602/RooTreeDataStore.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,", const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidSetBins(const RooAbsCollection& coll, Int_t numBins) const; voidSetupBasicUsage(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooArgList*fAxeswhich variables to put on each axis; RooArgSetfChainParamsparameters to store in the chain (if not specified they are all of them ); RooAbsData*fDatapointer to the data (owned by the workspace); Double_tfDeltaacceptable error for Keys cutoffs being equal; Double_tfEpsilonacceptable error for Keys interval determination; RooStats::MCMCInterval::IntervalTypefIntervalTypetype of interval to find; Double_tfLeftSideTFleft side tail-fraction for interval; TStringTNamed::fNameobject identifier; RooArgSetfNuisParamsnuisance parameters for interval (not really used); Int_tfNumBinsset the number of bins to create for each; Int_tfNumBurnInStepsnumber of iterations to discard as burn-in, starting from the first; Int_tfNumItersnumber of iterations to run metropolis algorithm; RooArgSetfPOIparameters of interest for interval; RooAbsPdf*fPdfpointer to common PDF (owned by the workspace); RooAbsPdf*fPriorPdfpointer to prior PDF (owned by the workspace); RooStats::ProposalFunction*fPropFuncProposal function for MCMC integration; Double_tfSizesize of the test (eg. specified rate of Type I error); TStringTNamed::fTitleobject title; Bool_tfUseKeyswhether to use kernel estimation to determine interval; Bool_tfUseSparseHistwhether to use sparse histogram (if using hist at all). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MCMCCalculator(). MCMCCalculator(RooAbsData& data, const RooStats::ModelConfig& model). void SetModel(const RooStats::ModelConfig& model); set the model. v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__MCMCCalculator.html:8405,test,test,8405,root/html532/RooStats__MCMCCalculator.html,https://root.cern,https://root.cern/root/html532/RooStats__MCMCCalculator.html,1,['test'],['test']
Testability,", const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tmaxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooLegendre.html:17338,test,testArg,17338,root/html528/RooLegendre.html,https://root.cern,https://root.cern/root/html528/RooLegendre.html,2,['test'],['testArg']
Testability,", const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tmaxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooLegendre.html:17330,test,testArg,17330,root/html530/RooLegendre.html,https://root.cern,https://root.cern/root/html530/RooLegendre.html,4,['test'],['testArg']
Testability,", const char* mother, Int_t ndiv, Int_t iaxis); The same as previous but in double precision; Create a new volume by dividing an existing one.; It divides a previously defined volume; name Volume name; mother Mother volume name; ndiv Number of divisions; iaxis Axis value:; X,Y,Z of CAXIS will be translated to 1,2,3 for IAXIS. void Gsdvt(const char* name, const char* mother, Double_t step, Int_t iaxis, Int_t numed, Int_t ndvmx); Create a new volume by dividing an existing one.; Divide mother into ndiv divisions called name; along axis iaxis starting at coordinate value c0i.; The new volume created will be medium number numed.; Create a new volume by dividing an existing one; Divide mother into divisions called name along; axis iaxis in steps of step. If not exactly divisible; will make as many as possible and will center them; with respect to the mother. Divisions will have medium; number numed. If numed is 0, numed of mother is taken.; ndvmx is the expected maximum number of divisions; (If 0, no protection tests are performed in Geant3). void Gsord(const char* name, Int_t iax); Create a new volume by dividing an existing one; Divides mother into divisions called name along; axis iaxis starting at coordinate value c0 with step; size step.; The new volume created will have medium number numed.; If numed is 0, numed of mother is taken.; ndvmx is the expected maximum number of divisions; (If 0, no protection tests are performed in Geant3); Flag volume name whose contents will have to be ordered; along axis iax, by setting the search flag to -iax; (Geant3 only). void Gspos(const char* name, Int_t nr, const char* mother, Double_t x, Double_t y, Double_t z, Int_t irot, const char* konly = ""ONLY""); Position a volume into an existing one.; It positions a previously defined volume in the mother.; name Volume name; nr Copy number of the volume; mother Mother volume name; x X coord. of the volume in mother ref. sys.; y Y coord. of the volume in mother ref. sys.; z Z coord. of th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualMC.html:21493,test,tests,21493,root/html528/TVirtualMC.html,https://root.cern,https://root.cern/root/html528/TVirtualMC.html,6,['test'],['tests']
Testability,", const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; Bool_tprintEvalCounter() const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Bool_tsetLimits(Double_t*, Double_t*); virtual Bool_tsetLimits(Double_t xmin, Double_t xmax); static voidTObject::SetObjectStat(Bool_t stat); voidsetPrintEvalCounter(Bool_t value); virtual voidTObject::SetUniqueID(UInt_t uid); virtual Bool_tsetUseIntegrandLimits(Bool_t flag); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsIntegrator.html:5264,Test,TestBit,5264,root/html534/RooAbsIntegrator.html,https://root.cern,https://root.cern/root/html534/RooAbsIntegrator.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,", const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSystemFile&operator=(const TSystemFile&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRename(const char* name)MENU ; voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetDrawOption(Option_t*); static voidTObject::SetDtorOnly(void* obj); virtual voidSetIconName(const char* name); virtual voidSetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSystemFile.html:4809,Test,TestBit,4809,root/html530/TSystemFile.html,https://root.cern,https://root.cern/root/html530/TSystemFile.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,", const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TVirtualMagField&operator=(const TVirtualMagField&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualMagField.html:5323,Test,TestBit,5323,root/html534/TVirtualMagField.html,https://root.cern,https://root.cern/root/html534/TVirtualMagField.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,", const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoPolygon&operator=(const TGeoPolygon&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); Double_tSafety(const Double_t* point, Int_t& isegment) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetConvex(Bool_t flag = kTRUE); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetNextIndex(Int_t index = -1); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetXY(Double_t* x, Double_t* y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGeoPolygon(); TGeoPolygon(Int_t nvert); TGeoPolygon(const TGeoPolygon&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoPolygon.html:6190,Test,TestBit,6190,root/html602/TGeoPolygon.html,https://root.cern,https://root.cern/root/html602/TGeoPolygon.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,", const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TLimitDataSource&operator=(const TLimitDataSource&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOwner(bool swtch = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TLimitDataSource(); TLimitDataSource(const TLimitDataSource&); TLimitDataSource(TH1* s, TH1* b, TH1* d); TLimitDataSource(TH1* s, TH1* b, TH1* d, TVectorD* es, TVectorD* eb, TObjArray* names); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TLimitDataSource.html:4734,Test,TestBit,4734,root/html602/TLimitDataSource.html,https://root.cern,https://root.cern/root/html602/TLimitDataSource.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,", const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProtoClass(); TProtoClass(TProtoClass* pc); TProtoClass(TClass* cl); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProtoClass.html:4705,Test,TestBit,4705,root/html602/TProtoClass.html,https://root.cern,https://root.cern/root/html602/TProtoClass.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,", const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsReal*mean(); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsMoment.html:18501,test,testArg,18501,root/html534/RooAbsMoment.html,https://root.cern,https://root.cern/root/html534/RooAbsMoment.html,1,['test'],['testArg']
Testability,", const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsReal*mean(); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooAbsMoment&operator=(const RooAbsMoment&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsMoment.html:18496,test,testArg,18496,root/html602/RooAbsMoment.html,https://root.cern,https://root.cern/root/html602/RooAbsMoment.html,2,['test'],['testArg']
Testability,", const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTProof::IsDataReady(Long64_t& totalbytes, Long64_t& bytesready); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTProof::IsFolder() const; Bool_tTProof::IsIdle() const; Bool_tTProof::IsLite() const; Bool_tTProof::IsMaster() const; Bool_tTObject::IsOnHeap() const; Bool_tTProof::IsParallel() const; Bool_tTProof::IsProofd() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTProof::IsValid() const; Bool_tTProof::IsWaiting() const; Bool_tTObject::IsZombie() const; virtual Int_tLoad(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); static voidTQObject::LoadRQ_OBJECT(); voidTProof::LogMessage(const char* msg, Bool_t all)SIGNAL ; static voidTProof::LogViewer(const char* url = 0, Int_t sessionidx = 0); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; static TProofMgr*TProof::Mgr(const char* url); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; static TProof*TProof::Open(const char* url = 0, const char* conffile = 0, const char* confdir = 0, Int_t loglevel = 0); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofLite.html:10903,Log,LogMessage,10903,root/html528/TProofLite.html,https://root.cern,https://root.cern/root/html528/TProofLite.html,1,['Log'],['LogMessage']
Testability,", const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTProof::IsDataReady(Long64_t& totalbytes, Long64_t& bytesready); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTProof::IsFolder() const; Bool_tTProof::IsIdle() const; Bool_tTProof::IsLite() const; Bool_tTProof::IsMaster() const; Bool_tTObject::IsOnHeap() const; Bool_tTProof::IsParallel() const; Bool_tTProof::IsProofd() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTProof::IsValid() const; Bool_tTProof::IsWaiting() const; Bool_tTObject::IsZombie() const; virtual Int_tLoad(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); static voidTQObject::LoadRQ_OBJECT(); voidTProof::LogMessage(const char* msg, Bool_t all)SIGNAL ; static voidTProof::LogViewer(const char* url = 0, Int_t sessionidx = 0); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; static TProofMgr*TProof::Mgr(const char* url); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static TProof*TProof::Open(const char* url = 0, const char* conffile = 0, const char* confdir = 0, Int_t loglevel = 0); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofLite.html:10968,Log,LogMessage,10968,root/html530/TProofLite.html,https://root.cern,https://root.cern/root/html530/TProofLite.html,2,['Log'],['LogMessage']
Testability,", const char* where); Execute 'action' (see EAdminExecType in 'XProofProtocol.h') at 'where'; (default master), with options 'how', on 'what'. The option specified by; 'how' are typically unix option for the relate commands. In addition to; the unix authorizations, the limitations are:. action = kRm limited to the sandbox (but basic dirs cannot be; removed) and on files owned by the user in the; allowed directories; action = kTail option '-f' is not supported and will be ignored. Int_t GetFile(const char* remote, const char* local, const char* opt = 0); Get file 'remote' into 'local' from the master.; If opt contains ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; If opt contains ""silent"" standard notificatons are not printed (errors and; warnings and prompts still are).; Return 0 on success, -1 on error. Int_t PutFile(const char* local, const char* remote, const char* opt = 0); Put file 'local'to 'remote' to the master; If opt is ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; Return 0 on success, -1 on error. void CpProgress(const char* pfx, Long64_t bytes, Long64_t size, TStopwatch* watch, Bool_t cr = kFALSE); Print file copy progress. Int_t Cp(const char* src, const char* dst = 0, const char* opts = 0); Copy files in/out of the sandbox. Either 'src' or 'dst' must be in the; sandbox.; Return 0 on success, -1 on error. TXProofMgr(const char* url, Int_t loglevel = -1, const char* alias = """"). Bool_t IsValid() const; { return fSocket; }. TProof * AttachSession(Int_t id, Bool_t gui = kFALSE); { return TProofMgr::AttachSession(id, gui); }. » Author: G. Ganis, Nov 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-06-02 16:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TXProofMgr.html:17585,sandbox,sandbox,17585,root/html604/TXProofMgr.html,https://root.cern,https://root.cern/root/html604/TXProofMgr.html,3,"['log', 'sandbox']","['loglevel', 'sandbox']"
Testability,", const char* where); Execute 'action' (see EAdminExecType in 'XProofProtocol.h') at 'where'; (default master), with options 'how', on 'what'. The option specified by; 'how' are typically unix option for the relate commands. In addition to; the unix authorizations, the limitations are:. action = kRm limited to the sandbox (but basic dirs cannot be; removed) and on files owned by the user in the; allowed directories; action = kTail option '-f' is not supported and will be ignored. Int_t GetFile(const char* remote, const char* local, const char* opt = 0); Get file 'remote' into 'local' from the master.; If opt contains ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; If opt contains ""silent"" standard notificatons are not printed (errors and; warnings and prompts still are).; Return 0 on success, -1 on error. Int_t PutFile(const char* local, const char* remote, const char* opt = 0); Put file 'local'to 'remote' to the master; If opt is ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; Return 0 on success, -1 on error. void CpProgress(const char* pfx, Long64_t bytes, Long64_t size, TStopwatch* watch, Bool_t cr = kFALSE); Print file copy progress. Int_t Cp(const char* src, const char* dst = 0, const char* opts = 0); Copy files in/out of the sandbox. Either 'src' or 'dst' must be in the; sandbox.; Return 0 on success, -1 on error. TXProofMgr(const char* url, Int_t loglevel = -1, const char* alias = """"). Bool_t IsValid() const; { return fSocket; }. TProof * AttachSession(Int_t id, Bool_t gui = kFALSE); { return TProofMgr::AttachSession(id, gui); }. » Author: G. Ganis, Nov 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXProofMgr.html:17585,sandbox,sandbox,17585,root/html602/TXProofMgr.html,https://root.cern,https://root.cern/root/html602/TXProofMgr.html,3,"['log', 'sandbox']","['loglevel', 'sandbox']"
Testability,", double xi=1, double x0=0);  Complement of the distribution function of the Landau distribution (upper tail). ;  ; double landau_xm1 (double x, double xi=1, double x0=0);  First moment (mean) of the truncated Landau distribution. ;  ; double landau_xm2 (double x, double xi=1, double x0=0);  Second moment of the truncated Landau distribution. ;  ; template<class T > ; T Lmag (const SVector< T, 4 > &rhs);  Lmag: Minkowski Lorentz-Vector norm (only for 4-dim vectors) Length of a vector Lorentz-Vector: \( |\vec{v}| = \sqrt{v_0^2 - v_1^2 - v_2^2 -v_3^2} \). ;  ; template<class A , class T > ; T Lmag (const VecExpr< A, T, 4 > &rhs);  ; template<class T > ; T Lmag2 (const SVector< T, 4 > &rhs);  Lmag2: Square of Minkowski Lorentz-Vector norm (only for 4D Vectors) Template to compute \( |\vec{v}|^2 = v_0^2 - v_1^2 - v_2^2 -v_3^2 \). ;  ; template<class A , class T > ; T Lmag2 (const VecExpr< A, T, 4 > &rhs);  ; double log1p (double x);  declarations for functions which are not implemented by some compilers ;  ; double lognormal_cdf (double x, double m, double s, double x0=0);  Cumulative distribution function of the lognormal distribution (lower tail). ;  ; double lognormal_cdf_c (double x, double m, double s, double x0=0);  Complement of the cumulative distribution function of the lognormal distribution (upper tail). ;  ; template<class char_t , class traits_t > ; std::basic_ios< char_t, traits_t > & machine_readable (std::basic_ios< char_t, traits_t > &ios);  ; template<class T , unsigned int D> ; T Mag (const SVector< T, D > &rhs);  Vector magnitude (Euclidean norm) Compute : \( |\vec{v}| = \sqrt{\sum_iv_i^2} \). ;  ; template<class A , class T , unsigned int D> ; T Mag (const VecExpr< A, T, D > &rhs);  ; template<class T , unsigned int D> ; T Mag2 (const SVector< T, D > &rhs);  Vector magnitude square Template to compute \(|\vec{v}|^2 = \sum_iv_i^2 \). ;  ; template<class A , class T , unsigned int D> ; T Mag2 (const VecExpr< A, T, D > &rhs);  ; template<class T > ; co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math.html:60193,log,lognormal,60193,doc/master/namespaceROOT_1_1Math.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html,2,['log'],['lognormal']
Testability,", each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : Layout: ""TANH|50,TANH|50,TANH|50,LINEAR"" [Layout of the network.]; : ErrorStrategy: ""SUMOFSQUARES"" [Loss function: Mean squared error (regression) or cross entropy (binary classification).]; : WeightInitialization: ""XAVIERUNIFORM"" [Weight initialization strategy]; : Architecture: ""CPU"" [Which architecture to perform the training on.]; : TrainingStrategy: ""LearningRate=1e-3,Momentum=0.3,ConvergenceSteps=20,BatchSize=50,TestRepetitions=1,WeightDecay=0.0,Regularization=None,Optimizer=Adam"" [Defines the training strategies.]; : - Default:; : VerbosityLevel: ""Default"" [Verbosity level]; : CreateMVAPdfs: ""False"" [Create PDFs for classifier outputs (signal and background)]; : IgnoreNegWeightsInTraining: ""False"" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]; : InputLayout: ""0|0|0"" [The Layout of the input]; : BatchLayout: ""0|0|0"" [The Layout of the batch]; : RandomSeed: ""0"" [Random seed used for weight initialization and batch shuffling]; : ValidationSize: ""20%"" [Part of the training data to use for validation. Specify as 0.2 or 20% to use a fifth of the data set as validation set. Specify as 100 to use exactly 100 events. (Default: 20%)]; DNN_CPU : [datasetreg] : Create Transformation ""G"" with events from all classes.; : ; : Transformation, Variable selection : ; : Input : variable 'var1' <---> Output : variable 'var1'; : Input : variable 'var2' <---> Output : variable 'var2'; : Will now use the CPU architecture with BLAS and IMT support !; Factory : Booking method: ␛[1mBDTG␛[0m; : ; <WARNING> : Value for option maxdepth was previously set to 3; : the option NegWeightTreatment=InverseBoostNegWeights does not exist for BoostType=Grad; : --> change to new default NegWeightTreatment=Pray; Factory : ␛[1mTrain all meth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:4227,test,testing,4227,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['test'],['testing']
Testability,", end;; 998 start = std::chrono::system_clock::now();; 999 ; 1000 if (!fInteractive) {; 1001 Log() << std::setw(10) << ""Epoch"" << "" | ""; 1002 << std::setw(12) << ""Train Err.""; 1003 << std::setw(12) << ""Test Err.""; 1004 << std::setw(12) << ""GFLOP/s""; 1005 << std::setw(12) << ""Conv. Steps"" << Endl;; 1006 std::string separator(62, '-');; 1007 Log() << separator << Endl;; 1008 }; 1009 ; 1010 while (!converged); 1011 {; 1012 stepCount++;; 1013 ; 1014 // Perform minimization steps for a full epoch.; 1015 trainingData.Shuffle();; 1016 for (size_t i = 0; i < batchesInEpoch; i += nThreads) {; 1017 batches.clear();; 1018 for (size_t j = 0; j < nThreads; j++) {; 1019 batches.reserve(nThreads);; 1020 batches.push_back(trainingData.GetBatch());; 1021 }; 1022 if (settings.momentum > 0.0) {; 1023 minimizer.StepMomentum(net, nets, batches, settings.momentum);; 1024 } else {; 1025 minimizer.Step(net, nets, batches);; 1026 }; 1027 }; 1028 ; 1029 if ((stepCount % minimizer.GetTestInterval()) == 0) {; 1030 ; 1031 // Compute test error.; 1032 Double_t testError = 0.0;; 1033 for (auto batch : testData) {; 1034 auto inputMatrix = batch.GetInput();; 1035 auto outputMatrix = batch.GetOutput();; 1036 testError += testNet.Loss(inputMatrix, outputMatrix);; 1037 }; 1038 testError /= (Double_t) (nTestSamples / settings.batchSize);; 1039 ; 1040 //Log the loss value; 1041 fTrainHistory.AddValue(""testError"",stepCount,testError);; 1042 ; 1043 end = std::chrono::system_clock::now();; 1044 ; 1045 // Compute training error.; 1046 Double_t trainingError = 0.0;; 1047 for (auto batch : trainingData) {; 1048 auto inputMatrix = batch.GetInput();; 1049 auto outputMatrix = batch.GetOutput();; 1050 trainingError += net.Loss(inputMatrix, outputMatrix);; 1051 }; 1052 trainingError /= (Double_t) (nTrainingSamples / settings.batchSize);; 1053 //Log the loss value; 1054 fTrainHistory.AddValue(""trainingError"",stepCount,trainingError);; 1055 ; 1056 // Compute numerical throughput.; 1057 std::chrono::duration<double> ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:36861,test,test,36861,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['test'],['test']
Testability,", epsrel, maxpts);; 2868 result = imd.Integral(a, b);; 2869 relerr = (result != 0) ? imd.Error() / std::abs(result) : imd.Error();; 2870 nfnevl = 0;; 2871 ifail = imd.Status();; 2872 }; 2873 ; 2874 ; 2875 return result;; 2876}; 2877 ; 2878 ; 2879////////////////////////////////////////////////////////////////////////////////; 2880/// Return kTRUE if the function is valid; 2881 ; 2882Bool_t TF1::IsValid() const; 2883{; 2884 if (fFormula) return fFormula->IsValid();; 2885 if (fMethodCall) return fMethodCall->IsValid();; 2886 // function built on compiled functors are always valid by definition; 2887 // (checked at compiled time); 2888 // invalid is a TF1 where the functor is null pointer and has not been saved; 2889 if (!fFunctor && fSave.empty()) return kFALSE;; 2890 return kTRUE;; 2891}; 2892 ; 2893 ; 2894//______________________________________________________________________________; 2895 ; 2896 ; 2897void TF1::Print(Option_t *option) const; 2898{; 2899 if (fType == EFType::kFormula) {; 2900 printf(""Formula based function: %s \n"", GetName());; 2901 assert(fFormula);; 2902 fFormula->Print(option);; 2903 } else if (fType > 0) {; 2904 if (fType == EFType::kInterpreted); 2905 printf(""Interpreted based function: %s(double *x, double *p). Ndim = %d, Npar = %d \n"", GetName(), GetNdim(),; 2906 GetNpar());; 2907 else if (fType == EFType::kCompositionFcn) {; 2908 printf(""Composition based function: %s. Ndim = %d, Npar = %d \n"", GetName(), GetNdim(), GetNpar());; 2909 if (!fComposition); 2910 printf(""fComposition not found!\n""); // this would be bad; 2911 } else {; 2912 if (fFunctor); 2913 printf(""Compiled based function: %s based on a functor object. Ndim = %d, Npar = %d\n"", GetName(),; 2914 GetNdim(), GetNpar());; 2915 else {; 2916 printf(""Function based on a list of points from a compiled based function: %s. Ndim = %d, Npar = %d, Npx ""; 2917 ""= %zu\n"",; 2918 GetName(), GetNdim(), GetNpar(), fSave.size());; 2919 if (fSave.empty()); 2920 Warning(""Print"", ""Function %s is base",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:110967,assert,assert,110967,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['assert'],['assert']
Testability,", ie, can it appear on the left-hand side; of an assignment expression? LValues are also special since they can; potentially be analytically integrated and generated. RooArgSet* getParameters(const RooAbsData* data, Bool_t stripDisconnected = kTRUE) const. RooArgSet* getParameters(const RooAbsData& data, Bool_t stripDisconnected = kTRUE) const; Return the parameters of this p.d.f when used in conjuction with dataset 'data'. RooArgSet* getObservables(const RooArgSet& set, Bool_t valueOnly = kTRUE) const; Return the observables of _this_ pdf given a set of observables. return getObservables(&set,valueOnly). RooArgSet* getDependents(const RooArgSet& set) const; --- Obsolete functions for backward compatibility. { return getObservables(set) ; }. RooArgSet* getDependents(const RooAbsData* set) const; { return getObservables(set) ; }. RooArgSet* getDependents(const RooArgSet* depList) const; { return getObservables(depList) ; }. Bool_t dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; { return observableOverlaps(dset,testArg) ; }. Bool_t dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; { return observableOverlaps(depList, testArg) ; }. Bool_t checkDependents(const RooArgSet* nset) const; { return checkObservables(nset) ; }. Bool_t recursiveCheckDependents(const RooArgSet* nset) const; --- End obsolete functions for backward compatibility. { return recursiveCheckObservables(nset) ; }. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); I/O streaming interface (machine readable). void writeToStream(ostream& os, Bool_t compact) const. void Print(Option_t* options = 0) const; Printing interface (human readable). void printMetaArgs(ostream& ) const; {}. const std::set<std::string>& attributes() const; Returns set of names of boolean attributes defined. const std::map<std::string,std::string>& stringAttributes() const; Returns map<string,string> with all string attributes defined. const std::set<std::s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsArg.html:38553,test,testArg,38553,root/html528/RooAbsArg.html,https://root.cern,https://root.cern/root/html528/RooAbsArg.html,6,['test'],['testArg']
Testability,", ie, can it appear on the left-hand side; of an assignment expression? LValues are also special since they can; potentially be analytically integrated and generated. RooArgSet* getParameters(const RooAbsData* data, Bool_t stripDisconnected = kTRUE) const. RooArgSet* getParameters(const RooAbsData& data, Bool_t stripDisconnected = kTRUE) const; Return the parameters of this p.d.f when used in conjuction with dataset 'data'. RooArgSet* getObservables(const RooArgSet& set, Bool_t valueOnly = kTRUE) const; Return the observables of _this_ pdf given a set of observables. return getObservables(&set,valueOnly). RooArgSet* getDependents(const RooArgSet& set) const; --- Obsolete functions for backward compatibility. { return getObservables(set) ; }. RooArgSet* getDependents(const RooAbsData* set) const; { return getObservables(set) ; }. RooArgSet* getDependents(const RooArgSet* depList) const; { return getObservables(depList) ; }. Bool_t dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; { return observableOverlaps(dset,testArg) ; }. Bool_t dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; { return observableOverlaps(depList, testArg) ; }. Bool_t checkDependents(const RooArgSet* nset) const; { return checkObservables(nset) ; }. Bool_t recursiveCheckDependents(const RooArgSet* nset) const; --- End obsolete functions for backward compatibility. { return recursiveCheckObservables(nset) ; }. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); I/O streaming interface (machine readable). void writeToStream(ostream& os, Bool_t compact) const. void Print(Option_t* options = 0) const; Printing interface (human readable). void printMetaArgs(ostream& ) const; {}. const std::set<std::string>& attributes() const; Returns set of names of boolean attributes defined. const std::map<std::string,std::string>& stringAttributes() const; Returns std::map<string,string> with all string attributes defined. const std::set<s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsArg.html:41621,test,testArg,41621,root/html534/RooAbsArg.html,https://root.cern,https://root.cern/root/html534/RooAbsArg.html,6,['test'],['testArg']
Testability,", model_arg);; 304 if(!obj) return 2;; 305 ; 306 Py_DECREF(file_arg);; 307 Py_DECREF(file);; 308 Py_DECREF(model_arg);; 309 ; 310 return 0;; 311}; 312 ; 313///////////////////////////////////////////////////////////////////////////////; 314/// Execute Python code from string; 315///; 316/// \param[in] code Python code as string; 317/// \param[in] errorMessage Error message which shall be shown if the execution fails; 318/// \param[in] start Start symbol; 319///; 320/// Helper function to run python code from string in local namespace with; 321/// error handling; 322/// `start` defines the start symbol defined in PyRun_String (Py_eval_input,; 323/// Py_single_input, Py_file_input); 324 ; 325void PyMethodBase::PyRunString(TString code, TString errorMessage, int start) {; 326 //std::cout << ""Run: >> "" << code << std::endl;; 327 fPyReturn = PyRun_String(code, start, fGlobalNS, fLocalNS);; 328 if (!fPyReturn) {; 329 Log() << kWARNING << ""Failed to run python code: "" << code << Endl;; 330 Log() << kWARNING << ""Python error message:"" << Endl;; 331 PyErr_Print();; 332 Log() << kFATAL << errorMessage << Endl;; 333 }; 334}; 335 ; 336///////////////////////////////////////////////////////////////////////////////; 337/// Execute Python code from string; 338///; 339/// \param[in] code Python code as string; 340/// \param[in] globalNS Global Namespace for Python Session; 341/// \param[in] localNS Local Namespace for Python Session; 342///; 343/// Overloaded static Helper function to run python code; 344/// from string and throw runtime error if the Python session; 345/// is unable to execute the code; 346 ; 347void PyMethodBase::PyRunString(TString code, PyObject *globalNS, PyObject *localNS){; 348 PyObject *fPyReturn = PyRun_String(code, Py_single_input, globalNS, localNS);; 349 if (!fPyReturn) {; 350 std::cout<<""\nPython error message:\n"";; 351 PyErr_Print();; 352 throw std::runtime_error(""\nFailed to run python code: ""+code);; 353 }; 354}; 355 ; 356////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/PyMethodBase_8cxx_source.html:11405,Log,Log,11405,doc/master/PyMethodBase_8cxx_source.html,https://root.cern,https://root.cern/doc/master/PyMethodBase_8cxx_source.html,1,['Log'],['Log']
Testability,", please consider the following citation; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201]. More documentation and updates are available on; http://www.desy.de/~sschmitt. As compared to TUnfold, TUndolfDensity adds the following functionality; * background subtraction (see documentation of TUnfoldSys); * error propagation (see documentation of TUnfoldSys); * regularisation schemes respecting the bin widths; * support for complex, multidimensional input distributions. Complex binning schemes are imposed on the measurements y and; on the result vector x with the help of the class TUnfoldBinning; The components of x or y are part of multi-dimensional distributions.; The bin widths along the relevant directions in these distributions; are used to calculate bin densities (number of events divided by bin width); or to calculate derivatives taking into account the proper distance of; adjacent bin centers. Complex binning schemes. in literature on unfolding, the ""standard"" test case is a; one-dimensional distribution without underflow or overflow bins.; The migration matrix is almost diagonal. This ""standard"" case is rarely realized for real problems. Often one has to deal with multi-dimensional input distributions.; In addition, there are underflow and overflow bins; or other background bins, possibly determined with the help of auxillary; measurements. In TUnfoldDensity, such complex binning schemes are handled with the help; of the class TUnfoldBinning. For each vector there is a tree; structure. The tree nodes hold multi-dimensiopnal distributions. For example, the ""measurement"" tree could have two leaves, one for; the primary distribution and one for auxillary measurements. Similarly, the ""truth"" tree could have two leaves, one for the; signal and one for the background. each of the leaves may then have a multi-dimensional distribution. The class TUnfoldBinning takes care to map all bins of the; ""measurement"" to the one-dimensional vector y.; Similarly, the ""truth"" b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfoldDensity.html:1659,test,test,1659,root/html534/TUnfoldDensity.html,https://root.cern,https://root.cern/root/html534/TUnfoldDensity.html,3,['test'],['test']
Testability,", pz;; for (Int_t i = 0; i < 25000; i++) {; if (i%1000 == 0) printf(""at entry: %d\n"",i);; gRandom->Rannor(px,py);; pz = px*px + py*py;; hpx->Fill(px);; hpxpy->Fill(px,py);; hprof->Fill(px,pz);; T->Fill();; }; T->Print();; f.Write();; gBenchmark->Show(""hsimple"");; }; ; void htr1() {; // Connect Tree generated by htw and show histograms for entry 12345; auto f = new TFile(""ht.root"");; auto T = (TTree*)f->Get(""T"");; TH1F *hpx = nullptr;; TH2F *hpxpy = nullptr;; TProfile *hprof = nullptr;; T->SetBranchAddress(""hpx"",&hpx);; T->SetBranchAddress(""hpxpy"",&hpxpy);; T->SetBranchAddress(""hprof"",&hprof);; T->GetEntry(12345);; auto c1 = new TCanvas(""c1"",""test"",10,10,600,1000);; c1->Divide(1,3);; c1->cd(1);; hpx->Draw();; c1->cd(2);; hpxpy->Draw();; c1->cd(3);; hprof->Draw();; c1->Print(""htr1.png"");; }; ; void htr2() {; // Connect Tree generated by htw and show histograms for entry 12345; // a variant of htr1; auto f = new TFile(""ht.root"");; auto T = (TTree*)f->Get(""T"");; auto c1 = new TCanvas(""c1"",""test"",10,10,600,1000);; c1->Divide(1,3);; c1->cd(1);; T->Draw(""hpx.Draw()"","""",""goff"",1,12345);; c1->cd(2);; T->Draw(""hpxpy.Draw()"","""",""goff"",1,12345);; c1->cd(3);; T->Draw(""hprof.Draw()"","""",""goff"",1,12345);; c1->Print(""htr2.png"");; }; ; void htr3() {; // Connect Tree generated by htw; // read all histograms and plot the RMS of hpx versus the Mean of hprof; // for each of the 25000 entries; auto f = new TFile(""ht.root"");; auto T = (TTree*)f->Get(""T"");; auto c1 = new TCanvas(""c1"",""test"",10,10,600,400);; T->Draw(""hpx.GetRMS():hprof.GetMean()"");; c1->Print(""htr3.png"");; }; ; void htest() {; htw();; htr1();; htr2();; htr3();; }; f#define f(i)Definition RSha256.hxx:104; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; gBenchmarkR__EXTERN TBenchmark * gBenchmarkDefinition TBenchmark.h:59; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TBenchmark::Startvirtual void Start(const char *name)Starts Benchmark with the specified name.Definition TB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/htest_8C.html:2000,test,test,2000,doc/master/htest_8C.html,https://root.cern,https://root.cern/doc/master/htest_8C.html,1,['test'],['test']
Testability,", statistical analysis and visualization. A (mostly historically interesting) list of ROOT talks and publications. Paper presented at the AIHENP conference in Laussanne 1996.; ROOT - An Object Oriented Data Analysis Framework; Slides of the presentation at CHEP'97 conference in Berlin.; ROOT - An Interactive Object Oriented Framework and its application to NA49 data analysis; Paper presented at the CHEP'97 conference in Berlin.; ROOT - An Interactive Object Oriented Framework and its application to NA49 data analysis; Paper published in ""Interface Magazine"" (Japanese Engineering Magazine).; The Power of Object Oriented Frameworks; Slides used in various presentations of the ROOT system.; This is a compressed tar file including a README file and about 40 Postscript files.; First three parts of a ROOT course.; Part1, part2 and part3 (the course is not finished yet and part 3 ends quite abruptly).; First comparison between ROOT, Objectivity/DB and LHC++ histOOgrams.; Paper and full source of used test programs.; Papers presented at HEPVis'98 at SLAC from Jan 28-30, 1998. ROOT Status Report; Atlfast++, the Atlas Fast Simulation program based on ROOT; gh2root, the GEANT3 to ROOT conversion tool; New ROOT GUI Classes. Paper published in the Linux Journal, Issue 51, July 1998.; ROOT: An Object-Oriented Data Analysis Framework. CHEP 2012. ROOT overview presented by Fons Rademakers. Cling - The LLVM-based C++ Interpreter presented by Vassil Vassilev.; ROOT I/O in Javascript presented by Bertrand Bellenot.; PEAC - A set of tools to quickly enable PROOF on a cluster poster presented by Gerri Ganis and Martin Vala.; Preparing for the new C++11 standard poster presented by Axel Naumann;; ROOT: High Quality, Systematically poster presented by Axel Naumann;; Improvements in ROOT I/O poster presented by Philippe Canal. An Exhibition Booth for demonstrating recent developments in data processing software used at the LHC presented by the CERN PH-SFT group (in Kimmel).; Papers NOT by ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/publications.html:3392,test,test,3392,d/publications.html,https://root.cern,https://root.cern/d/publications.html,1,['test'],['test']
Testability,", std::begin (nothing), std::end (nothing), 10000, outputContainer, true);; 1084 return error;; 1085 }; 1086 ; 1087 ; 1088 template <typename Weights, typename Gradients, typename PassThrough>; 1089 double Net::operator() (PassThrough& settingsAndBatch, Weights& weights, Gradients& gradients) const; 1090 {; 1091 std::vector<double> nothing;; 1092 assert (numWeights () == weights.size ());; 1093 assert (weights.size () == gradients.size ());; 1094 double error = forward_backward(m_layers, settingsAndBatch, std::begin (weights), std::end (weights), std::begin (gradients), std::end (gradients), 0, nothing, false);; 1095 return error;; 1096 }; 1097 ; 1098 template <typename Weights, typename Gradients, typename PassThrough, typename OutContainer>; 1099 double Net::operator() (PassThrough& settingsAndBatch, Weights& weights, Gradients& gradients, ModeOutput eFetch, OutContainer& outputContainer) const; 1100 {; 1101 MATH_UNUSED(eFetch);; 1102 assert (numWeights () == weights.size ());; 1103 assert (weights.size () == gradients.size ());; 1104 double error = forward_backward(m_layers, settingsAndBatch, std::begin (weights), std::end (weights), std::begin (gradients), std::end (gradients), 0, outputContainer, true);; 1105 return error;; 1106 }; 1107 ; 1108 ; 1109 ; 1110 template <typename LayerContainer, typename DropContainer, typename ItWeight, typename ItGradient>; 1111 std::vector<std::vector<LayerData>> Net::prepareLayerData (LayerContainer& _layers,; 1112 Batch& batch,; 1113 const DropContainer& dropContainer,; 1114 ItWeight itWeightBegin,; 1115 ItWeight /*itWeightEnd*/,; 1116 ItGradient itGradientBegin,; 1117 ItGradient itGradientEnd,; 1118 size_t& totalNumWeights) const; 1119 {; 1120 LayerData::const_dropout_iterator itDropOut;; 1121 bool usesDropOut = !dropContainer.empty ();; 1122 if (usesDropOut); 1123 itDropOut = std::begin (dropContainer);; 1124 ; 1125 if (_layers.empty ()); 1126 throw std::string (""no layers in this net"");; 1127 ; 1128 ; 1129 // ----------- cr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:35423,assert,assert,35423,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['assert'],['assert']
Testability,", that since third and fourth moment are not calculated; 7741/// at the fill time, kurtosis and its standard error are computed bin by bin; 7742///; 7743/// IMPORTANT NOTE: The returned value depends on how the histogram statistics; 7744/// are calculated. See TH1::GetMean and TH1::GetStdDev.; 7745 ; 7746Double_t TH1::GetKurtosis(Int_t axis) const; 7747{; 7748 if (axis > 0 && axis <= 3){; 7749 ; 7750 Double_t mean = GetMean(axis);; 7751 Double_t stddev = GetStdDev(axis);; 7752 Double_t stddev4 = stddev*stddev*stddev*stddev;; 7753 ; 7754 Int_t firstBinX = fXaxis.GetFirst();; 7755 Int_t lastBinX = fXaxis.GetLast();; 7756 Int_t firstBinY = fYaxis.GetFirst();; 7757 Int_t lastBinY = fYaxis.GetLast();; 7758 Int_t firstBinZ = fZaxis.GetFirst();; 7759 Int_t lastBinZ = fZaxis.GetLast();; 7760 // include underflow/overflow if TH1::StatOverflows(kTRUE) in case no range is set on the axis; 7761 if (GetStatOverflowsBehaviour()) {; 7762 if ( !fXaxis.TestBit(TAxis::kAxisRange) ) {; 7763 if (firstBinX == 1) firstBinX = 0;; 7764 if (lastBinX == fXaxis.GetNbins() ) lastBinX += 1;; 7765 }; 7766 if ( !fYaxis.TestBit(TAxis::kAxisRange) ) {; 7767 if (firstBinY == 1) firstBinY = 0;; 7768 if (lastBinY == fYaxis.GetNbins() ) lastBinY += 1;; 7769 }; 7770 if ( !fZaxis.TestBit(TAxis::kAxisRange) ) {; 7771 if (firstBinZ == 1) firstBinZ = 0;; 7772 if (lastBinZ == fZaxis.GetNbins() ) lastBinZ += 1;; 7773 }; 7774 }; 7775 ; 7776 Double_t x = 0;; 7777 Double_t sum=0;; 7778 Double_t np=0;; 7779 for (Int_t binx = firstBinX; binx <= lastBinX; binx++) {; 7780 for (Int_t biny = firstBinY; biny <= lastBinY; biny++) {; 7781 for (Int_t binz = firstBinZ; binz <= lastBinZ; binz++) {; 7782 if (axis==1 ) x = fXaxis.GetBinCenter(binx);; 7783 else if (axis==2 ) x = fYaxis.GetBinCenter(biny);; 7784 else if (axis==3 ) x = fZaxis.GetBinCenter(binz);; 7785 Double_t w = GetBinContent(binx,biny,binz);; 7786 np+=w;; 7787 sum+=w*(x-mean)*(x-mean)*(x-mean)*(x-mean);; 7788 }; 7789 }; 7790 }; 7791 sum/=(np*stddev4);; 7792 re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:304231,Test,TestBit,304231,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['Test'],['TestBit']
Testability,", va_list va) const; Double_tTMVA::PDEFoamDensityBase::GetBoxVolume(); TMVA::MsgLogger&TMVA::PDEFoamDensityBase::Log() const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::BinarySearchTree*TMVA::PDEFoamDensityBase::fBstBinary tree to find events within a volume; TMVA::MsgLogger*TMVA::PDEFoamDensityBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamEventDensity(); {}. PDEFoamEventDensity(vector<Double_t> box); User construcor. Parameters:. - box - size of sampling box. PDEFoamEventDensity(const TMVA::PDEFoamEventDensity& ); Copy constructor. Double_t Density(vector<Double_t>& Xarg, Double_t& event_density); This function is needed during the foam buildup. It returns the; event density within the range-searching volume (specified by; fBox). Parameters:. - xev - event vector (in [fXmin,fXmax]) to place the box at. - event_density - here the event density is stored. Returns:. Number of events (event weights), which were found in the; range-searching volume at point 'xev', divided by the box; volume. virtual ~PDEFoamEventDensity(); {}. » Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt » Copyright (c) 2008, 2010: *; » Last changed: root/tmva $Id$ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__PDEFoamEventDensity.html:6762,log,logger,6762,root/html602/TMVA__PDEFoamEventDensity.html,https://root.cern,https://root.cern/root/html602/TMVA__PDEFoamEventDensity.html,2,['log'],['logger']
Testability,", void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; void SetupFeedback () override;  Set up feedback (may not be used in this class). ;  ; void StopFeedback () override;  Stop feedback (may not be used in this class). ;  ;  Protected Member Functions inherited from TProofPlayer; Int_t AssertSelector (const char *selector_file);  Make sure that a valid selector object Return -1 in case of problems, 0 otherwise. ;  ; Bool_t CheckMemUsage (Long64_t &mfreq, Bool_t &w80r, Bool_t &w80v, TString &wmsg);  Check the memory usage, if requested. ;  ; virtual Int_t DrawCanvas (TObject *obj);  Draw the object if it is a canvas. ;  ; void * GetSender () override;  ; void MapOutputListToDataMembers () const;  ; void MergeOutput (Bool_t savememvalues=kFALSE) override;  Merge output (may not be used in this class). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Private Attributes; Bool_t fIsClient;  . Additional Inherited Members;  Public Types inherited from TProofPlayer; enum  EStatusBits { kDispatchOneEvent = (1ULL << ( 15 )); , kIsProces",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerLocal.html:19499,Assert,AssertSelector,19499,doc/master/classTProofPlayerLocal.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerLocal.html,1,['Assert'],['AssertSelector']
Testability,", void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Private Member Functions; Int_t Broadcast (const char *mess, Int_t kind=kMESS_STRING, Int_t type=kRRT_Undef);  Broadcast a character string buffer to the remote session. ;  ; Int_t Broadcast (const TMessage &mess);  Broadcast a message to the remote session. ;  ; Int_t Broadcast (Int_t kind, Int_t type=kRRT_Undef);  ; Int_t BroadcastObject (const TObject *obj, Int_t kind=kMESS_OBJECT);  Broadcast an object to the remote session. ;  ; Int_t BroadcastRaw (const void *buffer, Int_t length);  Broadcast a raw buffer of specified length to the remote session. ;  ; Bool_t CheckFile (const char *file, Long_t modtime);  Check if a file needs to be send to the server. ;  ; Int_t Collect (Long_t timeout=-1);  Collect responses from the remote server. ;  ; Int_t CollectInput ();  Collect and analyze available input from the socket. ;  ; void RecvLogFile (Int_t size);  Receive the log file from the server. ;  . Private Attributes; THashList * fFileList;  ; Bool_t fInterrupt;  ; TSignalHandler * fIntHandler;  ; TString fLogFilePath;  ; TMonitor * fMonitor;  ; TString fName;  ; Int_t fProtocol;  ; TObject * fReceivedObject;  ; TSeqCollection * fRootFiles;  ; TSocket * fSocket;  ; TUrl fUrl;  ; TRemoteObject * fWorkingDir;  . Static Private Attributes; static Int_t fgPortAttempts = 100;  ; static Int_t fgPortLower = 49152;  ; static Int_t fgPortUpper = 65535;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TApplication;  TApplication ();  Default ctor. Can be used by classes deriving from TApplication. ;  ; virtual void Forum (const char *line);  The function ("".forum <type>"") submits a new post on the ROOT forum via web browser. ;  ; virtual void GitHub (const char *line);  The function ("".gh <type>"") submits a new issue on GitHub via web",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationRemote.html:19192,log,log,19192,doc/master/classTApplicationRemote.html,https://root.cern,https://root.cern/doc/master/classTApplicationRemote.html,1,['log'],['log']
Testability,", void* vp); TQpLinSolverDens&operator=(const TQpLinSolverDens& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidPutXDiagonal(TVectorD& xdiag); virtual voidPutZDiagonal(TVectorD& zdiag); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTQpLinSolverBase::SeparateVars(TVectorD& vars1, TVectorD& vars2, TVectorD& vars3, TVectorD& vars); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTQpLinSolverBase::Solve(TQpDataBase* prob, TQpVar* vars, TQpResidual* resids, TQpVar* step); virtual voidSolveCompressed(TVectorD& rhs); virtual voidTQpLinSolverBase::SolveXYZS(TVectorD& stepx, TVectorD& stepy, TVectorD& stepz, TVectorD& steps, TVectorD& ztemp, TQpDataBase* data); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQpLinSolverDens(); TQpLinSolverDens(const TQpLinSolverDens& another); TQpLinSolverDens(TQpProbDens* factory, TQpDataDens* data); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQpLinSolverDens.html:5279,Test,TestBit,5279,root/html602/TQpLinSolverDens.html,https://root.cern,https://root.cern/root/html602/TQpLinSolverDens.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,", void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStudyPackage&operator=(const RooStudyPackage&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; static voidprocessFile(const char* infile, Int_t nexp); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidrun(Int_t nExperiments); voidrunOne(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); list<RooAbsStudy*>&studies(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; RooWorkspace&wspace().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStudyPackage.html:5034,Test,TestBit,5034,root/html530/RooStudyPackage.html,https://root.cern,https://root.cern/root/html530/RooStudyPackage.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,", void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamDecisionTreeDensity&operator=(const TMVA::PDEFoamDecisionTreeDensity&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamDecisionTreeDensityPDEFoamDecisionTreeDensity(); TMVA::PDEFoamDecisionTreeDensityPDEFoamDecisionTreeDensity(const TMVA::PDEFoamDecisionTreeDensity&); TMVA::PDEFoamDecisionTreeDensityPDEFoamDecisionTreeDensity(vector<Double_t> box, UInt_t cls); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::PDEFoamDensityBase::SetBox(vector<Double_t> box); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__PDEFoamDecisionTreeDensity.html:5235,Test,TestBit,5235,root/html534/TMVA__PDEFoamDecisionTreeDensity.html,https://root.cern,https://root.cern/root/html534/TMVA__PDEFoamDecisionTreeDensity.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,", void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamDiscriminantDensity&operator=(const TMVA::PDEFoamDiscriminantDensity&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamDiscriminantDensityPDEFoamDiscriminantDensity(); TMVA::PDEFoamDiscriminantDensityPDEFoamDiscriminantDensity(const TMVA::PDEFoamDiscriminantDensity&); TMVA::PDEFoamDiscriminantDensityPDEFoamDiscriminantDensity(vector<Double_t> box, UInt_t cls); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::PDEFoamDensityBase::SetBox(vector<Double_t> box); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__PDEFoamDiscriminantDensity.html:5182,Test,TestBit,5182,root/html534/TMVA__PDEFoamDiscriminantDensity.html,https://root.cern,https://root.cern/root/html534/TMVA__PDEFoamDiscriminantDensity.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,", void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidPrintOptions() const; virtual Int_tTObject::Read(const char* name); voidReadOptionsFromStream(istream& istr); voidReadOptionsFromXML(void* node); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetConfigDescription(const char* d); voidSetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidSetOptions(const TString& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidWriteOptionsToStream(ostream& o, const TString& prefix) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Configurable.html:4757,Test,TestBit,4757,root/html528/TMVA__Configurable.html,https://root.cern,https://root.cern/root/html528/TMVA__Configurable.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,", void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooMinimizer&operator=(const RooMinimizer&); voidoptimizeConst(Bool_t flag); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); RooFitResult*save(const char* name = 0, const char* title = 0); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); Int_tseek(); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidsetEps(Double_t eps); voidsetErrorLevel(Double_t level); voidsetEvalErrorWall(Bool_t flag); Bool_tsetLogFile(const char* logf = 0); voidsetMinimizerType(const char* type); static voidTObject::SetObjectStat(Bool_t stat); voidsetPrintEvalErrors(Int_t numEvalErrors); Int_tsetPrintLevel(Int_t newLevel); voidsetProfile(Bool_t flag = kTRUE); voidsetStrategy(Int_t strat); virtual voidTObject::SetUniqueID(UInt_t uid); voidsetVerbose(Bool_t flag = kTRUE); virtual voidShowMembers(TMemberInspector& insp); Int_tsimplex(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooMinimizer.html:5593,log,logf,5593,root/html530/RooMinimizer.html,https://root.cern,https://root.cern/root/html530/RooMinimizer.html,3,"['Test', 'log']","['TestBit', 'TestBits', 'logf']"
Testability,", void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGondzioSolver&operator=(const TGondzioSolver& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidReset_parameters(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTQpSolverBase::SetArTol(Double_t ar); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTQpSolverBase::SetMuTol(Double_t m); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tSolve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resid); virtual voidTQpSolverBase::Start(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); virtual voidTQpSolverBase::SteveStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGondzioSolver.html:6120,Test,TestBit,6120,root/html534/TGondzioSolver.html,https://root.cern,https://root.cern/root/html534/TGondzioSolver.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,", void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofMonSenderML&operator=(const TProofMonSenderML&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tSendDataSetInfo(TDSet*, TList*, const char*, const char*); virtual Int_tSendFileInfo(TDSet*, TList*, const char*, const char*); virtual Int_tSendSummary(TList*, const char*); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); Int_tTProofMonSender::SetSendOptions(const char*); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofMonSenderML.html:5065,Test,TestBit,5065,root/html534/TProofMonSenderML.html,https://root.cern,https://root.cern/root/html534/TProofMonSenderML.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,", void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooSimWSTool::SplitRule&operator=(const RooSimWSTool::SplitRule&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; voidsplitParameter(const char* paramList, const char* categoryList); voidsplitParameterConstrained(const char* paramNameList, const char* categoryNameList, const char* remainderStateName); RooSimWSTool::SplitRuleSplitRule(const char* pdfName = """"); RooSimWSTool::SplitRuleSplitRule(const RooSimWSTool::SplitRule&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooSimWSTool__SplitRule.html:8174,Test,TestBit,8174,root/html534/RooSimWSTool__SplitRule.html,https://root.cern,https://root.cern/root/html534/RooSimWSTool__SplitRule.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,", when you set a point it will be in the histogram coordinates.; For a newly created blank pad, one may use TPad::Range to set the user coordinate system. This function is defined as:; void Range(float x1,float y1,float x2,float y2); The arguments x1, x2 defines the new range in the x direction, and the y1, y2 define the new range in the y-direction.; root[] TCanvas MyCanvas (""MyCanvas""); root[] gPad->Range(-100,-100,100,100); This will set the active pad to have both coordinates to go from -100 to 100, with the center of the pad at (0,0). You can visually check the coordinates by viewing the status bar in the canvas. To display the status bar select Event Status entry in the View canvas menu. The status bar. 9.3.2.2 The Normalized Coordinate System (NDC); Normalized coordinates are independent of the window size and of the user system. The coordinates range from 0 to 1 and (0, 0) corresponds to the bottom-left corner of the pad. Several internal ROOT functions use the NDC system (3D primitives, PostScript, log scale mapping to linear scale). You may want to use this system if the user coordinates are not known ahead of time.; 9.3.2.3 The Pixel Coordinate System; The least common is the pixel coordinate system, used by functions such as DistancetoPrimitive() and ExecuteEvent(). Its primary use is for cursor position, which is always given in pixel coordinates. If (px,py) is the cursor position, px=0 and py=0 corresponds to the top-left corner of the pad, which is the standard convention in windowing systems.; 9.3.2.4 Using NDC for a particular Object; Most of the time, you will be using the user coordinate system. But sometimes, you will want to use NDC. For example, if you want to draw text always at the same place over a histogram, no matter what the histogram coordinates are. There are two ways to do this. You can set the NDC for one object or may convert NDC to user coordinates. Most graphical objects offer an option to be drawn in NDC. For instance, a line (TLin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:309223,log,log,309223,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['log'],['log']
Testability,", where \(\mathbf{w}_l\) is given by 4 and \( a_l\) by 9. Thus, using the Gram-Schmidt orthogonalisation, we can decide if we want to include this function in the final model, before* the matrix inversion. Function Selection Based on Residual; Supposing that \( L-1\) steps of the procedure have been performed, the problem now is to consider the \(L^{\mbox{th}}\) function.; The sum of squares of residuals can be written as ; \[; S_L = \textbf{D}^T\bullet\textbf{D} -; \sum^L_{l=1}a^2_l\left(\textbf{w}_l^T\bullet\textbf{w}_l\right); \]. where the relation 9 have been taken into account. The contribution of the \(L^{\mbox{th}}\) function to the reduction of S, is given by ; \[; \Delta S_L = a^2_L\left(\textbf{w}_L^T\bullet\textbf{w}_L\right); \]. Two test are now applied to decide whether this \(L^{\mbox{th}}\) function is to be included in the final expression, or not. Test 1; Denoting by \( H_{L-1}\) the subspace spanned by \(\textbf{w}_1,\ldots,\textbf{w}_{L-1}\) the function \(\textbf{w}_L\) is by construction (see 4) the projection of the function \( F_L\) onto the direction perpendicular to \( H_{L-1}\). Now, if the length of \(\textbf{w}_L\) (given by \(\textbf{w}_L\bullet\textbf{w}_L\)) is very small compared to the length of \(\textbf{f}_L\) this new function can not contribute much to the reduction of the sum of squares of residuals. The test consists then in calculating the angle \( \theta \) between the two vectors \(\textbf{w}_L\) \( \textbf {f}_L\) (see also figure 1) and requiring that it's greater* then a threshold value which the user must set (TMultiDimFit::SetMinAngle). Figure 1: (a) angle \f$\theta\f$ between \f$\textbf{w}_l\f$ and \f$\textbf{f}_L\f$, (b) angle \f$ \phi \f$ between \f$\textbf{w}_L\f$ and \f$\textbf{D}\f$. Test 2; Let \(\textbf{D}\) be the data vector to be fitted. As illustrated in figure 1, the \(L^{\mbox{th}}\) function \(\textbf{w}_L\) will contribute significantly to the reduction of \( S\), if the angle \(\phi^\prime\) between \(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:9435,Test,Test,9435,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['Test'],['Test']
Testability,", which allows to fix the parameter (not to fit). ; Definition at line 113 of file TSpectrum2Fit.h. ◆ fFixAmp. Bool_t* TSpectrum2Fit::fFixAmp. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 99 of file TSpectrum2Fit.h. ◆ fFixAmpX1. Bool_t* TSpectrum2Fit::fFixAmpX1. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional ; Definition at line 100 of file TSpectrum2Fit.h. ◆ fFixAmpY1. Bool_t* TSpectrum2Fit::fFixAmpY1. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional ; Definition at line 101 of file TSpectrum2Fit.h. ◆ fFixAx. Bool_t TSpectrum2Fit::fFixAx. protected . logical value of ax parameter, which allows to fix the parameter (not to fit). ; Definition at line 114 of file TSpectrum2Fit.h. ◆ fFixAy. Bool_t TSpectrum2Fit::fFixAy. protected . logical value of ay parameter, which allows to fix the parameter (not to fit). ; Definition at line 115 of file TSpectrum2Fit.h. ◆ fFixBx. Bool_t TSpectrum2Fit::fFixBx. protected . logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 111 of file TSpectrum2Fit.h. ◆ fFixBy. Bool_t TSpectrum2Fit::fFixBy. protected . logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ; Definition at line 112 of file TSpectrum2Fit.h. ◆ fFixPositionX. Bool_t* TSpectrum2Fit::fFixPositionX. protected . [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 95 of file TSpectrum2Fit.h. ◆ fFixPositionX1. Bool_t* TSpectrum2Fit::f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:83836,log,logical,83836,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['log'],['logical']
Testability,", which allows to fix the parameter (not to fit); -positionInitX - aray of initial values of peaks x positions; -fixPositionX - array of logical values which allow to fix appropriate x positions (not fit). However they are present in the estimated functional.; -positionInitY - aray of initial values of peaks y positions; -fixPositionY - array of logical values which allow to fix appropriate y positions (not fit). However they are present in the estimated functional.; -ampInit - aray of initial values of 2D peaks amplitudes; -fixAmp - aray of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; -ampInitX1 - aray of initial values of amplitudes of 1D ridges in x direction; -fixAmpX1 - aray of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional; -ampInitY1 - aray of initial values of amplitudes of 1D ridges in y direction; -fixAmpY1 - aray of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional. void SetBackgroundParameters(Double_t a0Init, Bool_t fixA0, Double_t axInit, Bool_t fixAx, Double_t ayInit, Bool_t fixAy). SETTER FUNCTION. This function sets the following fitting parameters of background:; -a0Init - initial value of a0 parameter (backgroud is estimated as a0+ax*x+ay*y); -fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); -axInit - initial value of ax parameter; -fixAx - logical value of ax parameter, which allows to fix the parameter (not to fit); -ayInit - initial value of ay parameter; -fixAy - logical value of ay parameter, which allows to fix the parameter (not to fit). void SetTailParameters(Double_t tInitXY, Bool_t fixTxy, Double_t tInitX, Bool_t fixTx, Double_t tInitY, Bool_t fixTy, Double_t bInitX, Bool_t fixBx, Double_t bInitY, Bool_t fixBy, Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Fit.html:65959,log,logical,65959,root/html528/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Fit.html,6,['log'],['logical']
Testability,",!autoExec);; 2429}; 2430 ; 2431////////////////////////////////////////////////////////////////////////////////; 2432/// Toggle event statusbar.; 2433 ; 2434void TCanvas::ToggleEventStatus(); 2435{; 2436 Bool_t showEventStatus = !TestBit(kShowEventStatus);; 2437 SetBit(kShowEventStatus,showEventStatus);; 2438 ; 2439 if (fCanvasImp) fCanvasImp->ShowStatusBar(showEventStatus);; 2440}; 2441 ; 2442////////////////////////////////////////////////////////////////////////////////; 2443/// Toggle toolbar.; 2444 ; 2445void TCanvas::ToggleToolBar(); 2446{; 2447 Bool_t showToolBar = !TestBit(kShowToolBar);; 2448 SetBit(kShowToolBar,showToolBar);; 2449 ; 2450 if (fCanvasImp) fCanvasImp->ShowToolBar(showToolBar);; 2451}; 2452 ; 2453////////////////////////////////////////////////////////////////////////////////; 2454/// Toggle editor.; 2455 ; 2456void TCanvas::ToggleEditor(); 2457{; 2458 Bool_t showEditor = !TestBit(kShowEditor);; 2459 SetBit(kShowEditor,showEditor);; 2460 ; 2461 if (fCanvasImp) fCanvasImp->ShowEditor(showEditor);; 2462}; 2463 ; 2464////////////////////////////////////////////////////////////////////////////////; 2465/// Toggle tooltip display.; 2466 ; 2467void TCanvas::ToggleToolTips(); 2468{; 2469 Bool_t showToolTips = !TestBit(kShowToolTips);; 2470 SetBit(kShowToolTips, showToolTips);; 2471 ; 2472 if (fCanvasImp) fCanvasImp->ShowToolTips(showToolTips);; 2473}; 2474 ; 2475 ; 2476////////////////////////////////////////////////////////////////////////////////; 2477/// Static function returning ""true"" if transparency is supported.; 2478 ; 2479Bool_t TCanvas::SupportAlpha(); 2480{; 2481 return gPad && (gVirtualX->InheritsFrom(""TGQuartz"") ||; 2482 (gPad->GetGLDevice() != -1) || (gPad->GetCanvas() && gPad->GetCanvas()->IsWeb()));; 2483}; 2484 ; 2485extern ""C"" void ROOT_TCanvas_Update(void* TheCanvas) {; 2486 static_cast<TCanvas*>(TheCanvas)->Update();; 2487}; 2488 ; 2489////////////////////////////////////////////////////////////////////////////////; 2490/// Update",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:79799,Test,TestBit,79799,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['Test'],['TestBit']
Testability,",!on); }; 144 void SetShortestInterval(Bool_t on = true) { SetBit(kShortestInterval,on); }; 145 void SetCentralInterval(Bool_t on = true) { SetBit(kShortestInterval,!on); }; 146 void SetStatisticOption(EStatOption option);; 147 Bool_t SetBins(Int_t nx, Double_t xmin, Double_t xmax);; 148 Bool_t SetBins(Int_t nx, const Double_t *xBins);; 149 Bool_t SetBins(Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);; 150 Bool_t SetBins(Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);; 151 Bool_t SetBins(Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax,; 152 Int_t nz, Double_t zmin, Double_t zmax);; 153 Bool_t SetBins(Int_t nx, const Double_t *xBins, Int_t ny, const Double_t * yBins, Int_t nz,; 154 const Double_t *zBins);; 155 ; 156 void SetTitle(const char* title) override;; 157 Bool_t SetTotalEvents(Int_t bin, Double_t events);; 158 Bool_t SetTotalHistogram(const TH1& rTotal,Option_t* opt);; 159 void SetUseWeightedEvents(Bool_t on = kTRUE);; 160 void SetWeight(Double_t weight);; 161 Bool_t UsesBayesianStat() const {return TestBit(kIsBayesian);}; 162 Bool_t UsesPosteriorMode() const {return TestBit(kPosteriorMode) && TestBit(kIsBayesian);}; 163 Bool_t UsesShortestInterval() const {return TestBit(kShortestInterval) && TestBit(kIsBayesian);}; 164 Bool_t UsesPosteriorAverage() const {return !UsesPosteriorMode();}; 165 Bool_t UsesCentralInterval() const {return !UsesShortestInterval();}; 166 Bool_t UsesWeights() const {return TestBit(kUseWeights);}; 167 ; 168 static Bool_t CheckBinning(const TH1& pass,const TH1& total);; 169 static Bool_t CheckConsistency(const TH1& pass,const TH1& total,Option_t* opt="""");; 170 static Bool_t CheckEntries(const TH1& pass,const TH1& total,Option_t* opt="""");; 171 static Bool_t CheckWeights(const TH1& pass,const TH1& total);; 172 static Double_t Combine(Double_t& up,Double_t& low,Int_t n,const Int_t* pass,const Int_t* total,; 173 Double_t alpha,Double_t beta,Double_t level=0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEfficiency_8h_source.html:8159,Test,TestBit,8159,doc/master/TEfficiency_8h_source.html,https://root.cern,https://root.cern/doc/master/TEfficiency_8h_source.html,6,['Test'],['TestBit']
Testability,",""[0]*x*sin([1]*x)"",-3,3);. This creates a function of variable x with 2 parameters.; The parameters must be initialized via:. fa->SetParameter(0,value_first_parameter);; fa->SetParameter(1,value_second_parameter);. Parameters may be given a name:. fa->SetParName(0,""Constant"");. Example b:; >; TF1 *fb = new TF1(""fb"",""gaus(0)*expo(3)"",0,10);. gaus(0) is a substitute for [0]*exp(-0.5*((x-[1])/[2])**2); and (0) means start numbering parameters at 0.; expo(3) is a substitute for exp([3]+[4]*x). Case 2: inline expression using TMath functions with parameters; >; TF1 *fb2 = new TF1(""fa3"",""TMath::Landau(x,[0],[1],0)"",-5,10);; fb2->SetParameters(0.2,1.3);; fb2->Draw();. C - A general C function with parameters; Consider the macro myfunc.C below:. // Macro myfunc.C; Double_t myfunction(Double_t *x, Double_t *par); {; Float_t xx =x[0];; Double_t f = TMath::Abs(par[0]*sin(par[1]*xx)/xx);; return f;; }; void myfunc(); {; TF1 *f1 = new TF1(""myfunc"",myfunction,0,10,2);; f1->SetParameters(2,1);; f1->SetParNames(""constant"",""coefficient"");; f1->Draw();; }; void myfit(); {; TH1F *h1=new TH1F(""h1"",""test"",100,0,10);; h1->FillRandom(""myfunc"",20000);; TF1 *f1=gROOT->GetFunction(""myfunc"");; f1->SetParameters(800,1);; h1->Fit(""myfunc"");; }. In an interactive session you can do:. Root > .L myfunc.C; Root > myfunc();; Root > myfit();. TF1 objects can reference other TF1 objects (thanks John; Odonnell) of type A or B defined above. This excludes CINT interpreted functions; and compiled functions. However, there is a restriction. A function cannot; reference a basic function if the basic function is a polynomial polN.; Example:. {; TF1 *fcos = new TF1 (""fcos"", ""[0]*cos(x)"", 0., 10.);; fcos->SetParNames( ""cos"");; fcos->SetParameter( 0, 1.1);; TF1 *fsin = new TF1 (""fsin"", ""[0]*sin(x)"", 0., 10.);; fsin->SetParNames( ""sin"");; fsin->SetParameter( 0, 2.1);; TF1 *fsincos = new TF1 (""fsc"", ""fcos+fsin"");; TF1 *fs2 = new TF1 (""fs2"", ""fsc+fsc"");; }. D - A general C++ function object (functor) with paramet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TF1.html:2653,test,test,2653,root/html528/TF1.html,https://root.cern,https://root.cern/root/html528/TF1.html,7,['test'],['test']
Testability,",...) constIssue error message.Definition TObject.cxx:987; TObject::Hashvirtual ULong_t Hash() constReturn hash value for this object.Definition TObject.cxx:515; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented in TEnvRec, TNamed, TObjString, TParameter< AParamType >, TParameter< Long64_t >, TCollection, TPair, TASImagePlugin, TASPluginGS, TPad, TImagePlugin, TPave, TGObject, TGPicture, TIconBoxThumb, TClassDocInfo, THtml::TFileSysEntry, TStatistic, TDrawFeedback, TStatsFeedback, and RooLinkedList.; Definition at line 515 of file TObject.cxx. ◆ HasInconsistentHash(). Bool_t TObject::HasInconsistentHash ; (; ); const. inline . Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ; missing call to RecursiveRemove in destructor).; Note: Since the consistency is only tested for during inserts, this routine will return true for object that have never been inserted whether or not they have a consistent setup. This has no negative side-effect as searching for the object with the right or wrong Hash will always yield a not-found answer (Since anyway no hash can be guaranteed unique, there is always a check) ; Definition at line 358 of file TObject.h. ◆ Info(). void TObject::Info ; (; const char * ; location, . const char * ; fmt, .  ; ... . ); const. virtual . Issue info message. ; Use ""location"" to specify the method where the warning occurred. Accepts standard printf formatting arguments. ; Definition at line 961 of file TObject.cxx. ◆ InheritsFrom() [1/2]. Bool_t TObject::InheritsFrom ; (; const char * ; classname); const. virtual . Returns kTRUE if object inherits from class ""classname"". ; Reimplemented in TClass.; Definition at line 525 of file TObject.cxx. ◆ InheritsFrom() [2/2]. Bool_t TObject::InheritsFrom ; (; const TClass * ; cl); const. virtual . Returns kTRUE if object inherits from TClass c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTObject.html:44098,test,tested,44098,doc/v632/classTObject.html,https://root.cern,https://root.cern/doc/v632/classTObject.html,1,['test'],['tested']
Testability,",...) constIssue error message.Definition TObject.cxx:993; TObject::Hashvirtual ULong_t Hash() constReturn hash value for this object.Definition TObject.cxx:520; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented in TEnvRec, TNamed, TObjString, TParameter< AParamType >, TParameter< Long64_t >, TCollection, TPair, TASImagePlugin, TASPluginGS, TPad, TImagePlugin, TPave, TGObject, TGPicture, TIconBoxThumb, TClassDocInfo, THtml::TFileSysEntry, TStatistic, TDrawFeedback, TStatsFeedback, and RooLinkedList.; Definition at line 520 of file TObject.cxx. ◆ HasInconsistentHash(). Bool_t TObject::HasInconsistentHash ; (; ); const. inline . Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ; missing call to RecursiveRemove in destructor).; Note: Since the consistency is only tested for during inserts, this routine will return true for object that have never been inserted whether or not they have a consistent setup. This has no negative side-effect as searching for the object with the right or wrong Hash will always yield a not-found answer (Since anyway no hash can be guaranteed unique, there is always a check) ; Definition at line 358 of file TObject.h. ◆ Info(). void TObject::Info ; (; const char * ; location, . const char * ; fmt, .  ; ... . ); const. virtual . Issue info message. ; Use ""location"" to specify the method where the warning occurred. Accepts standard printf formatting arguments. ; Definition at line 967 of file TObject.cxx. ◆ InheritsFrom() [1/2]. Bool_t TObject::InheritsFrom ; (; const char * ; classname); const. virtual . Returns kTRUE if object inherits from class ""classname"". ; Reimplemented in TClass.; Definition at line 530 of file TObject.cxx. ◆ InheritsFrom() [2/2]. Bool_t TObject::InheritsFrom ; (; const TClass * ; cl); const. virtual . Returns kTRUE if object inherits from TClass c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObject.html:43823,test,tested,43823,doc/master/classTObject.html,https://root.cern,https://root.cern/doc/master/classTObject.html,1,['test'],['tested']
Testability,",.01);; sumstat += chi2[n];; pt[n] = TMath::Sqrt(px[n]*px[n] + py[n]*py[n]);; }; t3->Fill();; t3f->Fill();; }; // Write the two files; t3->Print();; f.cd();; t3->Write();; fr.cd();; t3f->Write();; }. // Function to read the two files and add the friend; void tree3r() {; TFile *f = new TFile(""tree3.root"");; TTree *t3 = (TTree*)f->Get(""t3"");; // Add the second tree to the first tree as a friend; t3->AddFriend(""t3f"",""tree3f.root"");; // Draw pz which is in the first tree and use pt; // in the condition. pt is in the friend tree.; t3->Draw(""pz"",""pt>3"");; }. // This is executed when typing .x tree3.C; void tree3() {; tree3w();; tree3r();; }; 12.17 Example 4: A Tree with an Event Class; This example is a simplified version of $ROOTSYS/test/MainEvent.cxx and where Event objects are saved in a tree. The full definition of Event is in $ROOTSYS/test/Event.h. To execute this macro, you will need the library $ROOTSYS/test/libEvent.so. If it does not exist you can build the test directory applications by following the instruction in the $ROOTSYS/test/README file.; In this example we will show. the difference in splitting or not splitting a branch; how to read selected branches of the tree,; how to print a selected entry. 12.17.1 The Event Class; Event is a descendent of TObject. As such it inherits the data members of TObject and its methods such as Dump() and Inspect()andWrite(). In addition, because it inherits from TObject it can be a member of a collection. To summarize, the advantages of inheriting from a TObject are:. Inherit the Write, Inspect, and Dump methods; Enables a class to be a member of a ROOT collection; Enables RTTI. Below is the list of the Event data members. It contains a character array, several integers, a floating-point number, and an EventHeader object. The EventHeader class is described in the following paragraph. Event also has two pointers, one to a TClonesArray of tracks and one to a histogram. The string “->” in the comment field of the members *fTra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:575001,test,test,575001,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['test'],['test']
Testability,",0>> RandomMixMax;; 248 typedef Random<ROOT::Math::MersenneTwisterEngine> RandomMT19937;; 249 typedef Random<ROOT::Math::StdEngine<std::mt19937_64>> RandomMT64;; 250 typedef Random<ROOT::Math::StdEngine<std::ranlux48>> RandomRanlux48;; 251 ; 252} // namespace Math; 253} // namespace ROOT; 254 ; 255 ; 256#endif /* ROOT_Math_Random */; MersenneTwisterEngine.h; MixMaxEngine.h; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; RandomFunctions.h; StdEngine.h; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; ROOT::Math::RandomFunctionsDefinition RandomFunctions.h:140; ROOT::Math::RandomDocumentation for the Random class.Definition Random.h:43; ROOT::Math::Random::Logisticdouble Logistic(double a)Logistic distribution.Definition Random.h:141; ROOT::Math::Random::Betadouble Beta(double a, double b)Beta distribution.Definition Random.h:121; ROOT::Math::Random::fEngineEngine fEnginerandom generator engineDefinition Random.h:226; ROOT::Math::Random::tDistdouble tDist(double nu)t student distributionDefinition Random.h:156; ROOT::Math::Random::FDistdouble FDist(double nu1, double nu2)F-distribution.Definition Random.h:151; ROOT::Math::Random::ChiSquaredouble ChiSquare(double nu)chi-squareDefinition Random.h:131; ROOT::Math::Random::Circlevoid Circle(double &x, double &y, double r=1)generate random numbers in a 2D circle of radius 1Definition Random.h:170; ROOT::Math::Random::Poissonunsigned int Poisson(double mu)Poisson distribution.Definition Random.h:189; ROOT::Math::Random::RngEngine & Rng()Definition Random.h:102; ROOT::Math::Random::Rayleighdouble Rayleigh(double sigma)Rayleigh distribution.Definition Random.h:136; ROOT::Math::Random::MaxIntstatic uint64_t Max",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Random_8h_source.html:6836,Log,Logisticdouble,6836,doc/master/Random_8h_source.html,https://root.cern,https://root.cern/doc/master/Random_8h_source.html,3,['Log'],"['Logistic', 'Logisticdouble']"
Testability,",100,-2,2);; h2->Draw();. TF1 *f1=new TF1(""f1"",""-x"",-10,10);; TGaxis *A1 = new TGaxis(0,2,10,2,""f1"",510,""-"");; A1->SetTitle(""axis with decreasing values"");; A1->Draw();. TF1 *f2=new TF1(""f2"",""exp(x)"",0,2);; TGaxis *A2 = new TGaxis(1,1,9,1,""f2"");; A2->SetTitle(""exponential axis"");; A2->SetLabelSize(0.03);; A2->SetTitleSize(0.03);; A2->SetTitleOffset(1.2);; A2->Draw();. TF1 *f3=new TF1(""f3"",""log10(x)"",1,1000);; TGaxis *A3 = new TGaxis(2,-2,2,0,""f3"",505,""G"");; A3->SetTitle(""logarithmic axis"");; A3->SetLabelSize(0.03);; A3->SetTitleSize(0.03);; A3->SetTitleOffset(1.2);; A3->Draw();; return c2;; }; Logarithmic axis; By default axis are linear. To define a TGaxis as logarithmic, it is; enough to create it with the option ""G"". When plotting an histogram or a graph the logarithmic scale can be set using:. gPad->SetLogx(1); set the logarithmic scale on the X axis; gPad->SetLogy(1); set the logarithmic scale on the Y axis. When the SetMoreLogLabels() method is called more labels are drawn; when in logarithmic scale and there is a small number of decades (less than 3).; Blank axis; To draw only the axis tick marks without the axis body, it is enough to specify; the option ""B"". It useful to superpose axis.; Tick marks' orientation; By default tick marks are drawn on the positive side of the axis, except for; vertical axis for which the default is negative. The chop parameter; allows to control the tick marks orientation:. chopt = ""+"": tick marks are drawn on Positive side. (default); chopt =""-"": tick mark are drawn on the negative side.; chopt = ""+-"": tick marks are drawn on both sides of the axis.; chopt = ""U"": Unlabelled axis, default is labeled. Tick marks' size; By default, tick marks have a length equal to 3 per cent of the axis length.; When the option ""S"" is specified, the length of the tick marks is equal to; fTickSize*axis_length, where fTickSize may be set via; TGaxis::SetTickSize. When plotting an histogram h the tick marks size can be changed using:. h->GetXaxis()->",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGaxis.html:5355,log,logarithmic,5355,root/html604/TGaxis.html,https://root.cern,https://root.cern/root/html604/TGaxis.html,1,['log'],['logarithmic']
Testability,",32);; 10610 zmax = -bigp;; 10611 zmin = bigp;; 10612 Double_t c1, e1;; 10613 Double_t allchan = 0;; 10614 for (Int_t j=Hparam.yfirst; j<=Hparam.ylast;j++) {; 10615 for (Int_t i=Hparam.xfirst; i<=Hparam.xlast;i++) {; 10616 c1 = fH->GetBinContent(i,j);; 10617 zmax = TMath::Max(zmax,c1);; 10618 if (Hoption.Error) {; 10619 e1 = fH->GetBinError(i,j);; 10620 zmax = TMath::Max(zmax,c1+e1);; 10621 }; 10622 zmin = TMath::Min(zmin,c1);; 10623 allchan += c1;; 10624 }; 10625 }; 10626 ; 10627 // Take into account maximum , minimum; 10628 ; 10629 if (maximum) zmax = fH->GetMaximumStored();; 10630 if (minimum) zmin = fH->GetMinimumStored();; 10631 if (Hoption.Logz && zmax < 0) {; 10632 if (!Hoption.Same) Error(where, ""log scale is requested but maximum is less or equal 0 (%f)"", zmax);; 10633 return 0;; 10634 } else if (Hoption.Logz && zmin>=0 && zmax==0) { // empty histogram in log scale; 10635 zmin = 0.01;; 10636 zmax = 10.;; 10637 }; 10638 if (zmin >= zmax) {; 10639 if (Hoption.Logz) {; 10640 if (zmax > 0) zmin = 0.001*zmax;; 10641 else {; 10642 if (!Hoption.Same) Error(where, ""log scale is requested but maximum is less or equal 0 (%f)"", zmax);; 10643 return 0;; 10644 }; 10645 }; 10646 }; 10647 ; 10648 // take into account normalization factor; 10649 Hparam.allchan = allchan;; 10650 Double_t factor = allchan;; 10651 if (fH->GetNormFactor() > 0) factor = fH->GetNormFactor();; 10652 if (allchan) factor /= allchan;; 10653 if (factor == 0) factor = 1;; 10654 Hparam.factor = factor;; 10655 zmax = factor*zmax;; 10656 zmin = factor*zmin;; 10657 c1 = zmax;; 10658 if (TMath::Abs(zmin) > TMath::Abs(c1)) c1 = zmin;; 10659 ; 10660 // For log scales, histogram coordinates are log10(ymin) and; 10661 // log10(ymax). Final adjustment (if not option ""Same""); 10662 // or ""+"" for ymax) of ymax and ymin for logarithmic scale, if; 10663 // Maximum and Minimum are not defined.; 10664 if (Hoption.Logz) {; 10665 if (zmin <= 0) {; 10666 zmin = TMath::Min((Double_t)1, (Double_t)0.001*zmax);; 10667 fH->S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:382281,Log,Logz,382281,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Log'],['Logz']
Testability,",; 136 fSamples(std::vector<std::vector<Double_t> >(2)),; 137 fTestSampleFromH0(kFALSE) {; 138 Bool_t badSampleArg = sample1 == nullptr || sample1Size == 0;; 139 if (badSampleArg) {; 140 std::string msg = ""'sample1"";; 141 msg += !sample1Size ? ""Size' cannot be zero"" : ""' cannot be zero-length"";; 142 MATH_ERROR_MSG(""GoFTest"", msg.c_str());; 143 assert(!badSampleArg);; 144 }; 145 badSampleArg = sample2 == nullptr || sample2Size == 0;; 146 if (badSampleArg) {; 147 std::string msg = ""'sample2"";; 148 msg += !sample2Size ? ""Size' cannot be zero"" : ""' cannot be zero-length"";; 149 MATH_ERROR_MSG(""GoFTest"", msg.c_str());; 150 assert(!badSampleArg);; 151 }; 152 std::vector<const Double_t*> samples(2);; 153 std::vector<size_t> samplesSizes(2);; 154 samples[0] = sample1;; 155 samples[1] = sample2;; 156 samplesSizes[0] = sample1Size;; 157 samplesSizes[1] = sample2Size;; 158 SetSamples(samples, samplesSizes);; 159 }; 160 ; 161 GoFTest::GoFTest(size_t sampleSize, const Double_t* sample, EDistribution dist, const std::vector<double> & distParams); 162 : fDist(dist),; 163 fSamples(std::vector<std::vector<Double_t> >(1)),; 164 fTestSampleFromH0(kTRUE) {; 165 Bool_t badSampleArg = sample == nullptr || sampleSize == 0;; 166 if (badSampleArg) {; 167 std::string msg = ""'sample"";; 168 msg += !sampleSize ? ""Size' cannot be zero"" : ""' cannot be zero-length"";; 169 MATH_ERROR_MSG(""GoFTest"", msg.c_str());; 170 assert(!badSampleArg);; 171 }; 172 std::vector<const Double_t*> samples(1, sample);; 173 std::vector<size_t> samplesSizes(1, sampleSize);; 174 SetSamples(samples, samplesSizes);; 175 SetParameters(distParams);; 176 SetCDF();; 177 }; 178 ; 179 GoFTest::~GoFTest() {}; 180 ; 181 void GoFTest::SetSamples(std::vector<const Double_t*> samples, const std::vector<size_t> samplesSizes) {; 182 fCombinedSamples.assign(std::accumulate(samplesSizes.begin(), samplesSizes.end(), 0u), 0.0);; 183 size_t combinedSamplesSize = 0;; 184 for (size_t i = 0; i < samples.size(); ++i) {; 185 fSamples[i].assign(sam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:4887,assert,assert,4887,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,1,['assert'],['assert']
Testability,",; 30 fPointer(p); 31{; 32 if (fPointer) fStatus = fPointer->Status();; 33}; 34 ; 35////////////////////////////////////////////////////////////////////////////////; 36/// Constructor from a TFitResult pointer; 37 ; 38TFitResultPtr::TFitResultPtr(TFitResult * p) :; 39 fStatus(-1),; 40 fPointer(std::shared_ptr<TFitResult>(p)); 41{; 42 if (fPointer) fStatus = fPointer->Status();; 43}; 44 ; 45TFitResultPtr::TFitResultPtr(const TFitResultPtr& rhs) :; 46 fStatus(rhs.fStatus), fPointer(rhs.fPointer); 47{; 48}; 49 ; 50////////////////////////////////////////////////////////////////////////////////; 51/// Destructor. Delete the contained TFitResult pointer if needed; 52/// if ( fPointer != 0); 53/// delete fPointer;; 54 ; 55TFitResultPtr::~TFitResultPtr(); 56{; 57}; 58 ; 59////////////////////////////////////////////////////////////////////////////////; 60/// Implement the de-reference operator to make the class acts as a pointer to a TFitResult; 61/// assert in case the class does not contain a pointer to TFitResult; 62 ; 63TFitResult& TFitResultPtr::operator*() const; 64{; 65 if (!fPointer) {; 66 Error(""TFitResultPtr"",""TFitResult is empty - use the fit option S"");; 67 }; 68 return *fPointer;; 69}; 70 ; 71////////////////////////////////////////////////////////////////////////////////; 72/// Implement the -> operator to make the class acts as a pointer to a TFitResult.; 73/// assert in case the class does not contain a pointer to TFitResult; 74 ; 75TFitResult* TFitResultPtr::operator->() const; 76{; 77 if (!fPointer) {; 78 Error(""TFitResultPtr"",""TFitResult is empty - use the fit option S"");; 79 }; 80 return fPointer.get();; 81}; 82 ; 83////////////////////////////////////////////////////////////////////////////////; 84/// Return contained pointer; 85 ; 86TFitResult * TFitResultPtr::Get() const {; 87 return fPointer.get();; 88}; 89 ; 90////////////////////////////////////////////////////////////////////////////////; 91/// Assignment operator.; 92/// if needed copy the TFitR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFitResultPtr_8cxx_source.html:2313,assert,assert,2313,doc/master/TFitResultPtr_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFitResultPtr_8cxx_source.html,1,['assert'],['assert']
Testability,",; 8258 nc,; 8259 "":"",; 8260 cnonce,; 8261 "":"",; 8262 qop,; 8263 "":"",; 8264 ha2,; 8265 NULL);; 8266 ; 8267 return mg_strcasecmp(response, expected_response) == 0;; 8268}; 8269 ; 8270 ; 8271#if !defined(NO_FILESYSTEMS); 8272/* Use the global passwords file, if specified by auth_gpass option,; 8273 * or search for .htpasswd in the requested directory. */; 8274static void; 8275open_auth_file(struct mg_connection *conn,; 8276 const char *path,; 8277 struct mg_file *filep); 8278{; 8279 if ((conn != NULL) && (conn->dom_ctx != NULL)) {; 8280 char name[UTF8_PATH_MAX];; 8281 const char *p, *e,; 8282 *gpass = conn->dom_ctx->config[GLOBAL_PASSWORDS_FILE];; 8283 int truncated;; 8284 ; 8285 if (gpass != NULL) {; 8286 /* Use global passwords file */; 8287 if (!mg_fopen(conn, gpass, MG_FOPEN_MODE_READ, filep)) {; 8288#if defined(DEBUG); 8289 /* Use mg_cry_internal here, since gpass has been; 8290 * configured. */; 8291 mg_cry_internal(conn, ""fopen(%s): %s"", gpass, strerror(ERRNO));; 8292#endif; 8293 }; 8294 /* Important: using local struct mg_file to test path for; 8295 * is_directory flag. If filep is used, mg_stat() makes it; 8296 * appear as if auth file was opened.; 8297 * TODO(mid): Check if this is still required after rewriting; 8298 * mg_stat */; 8299 } else if (mg_stat(conn, path, &filep->stat); 8300 && filep->stat.is_directory) {; 8301 mg_snprintf(conn,; 8302 &truncated,; 8303 name,; 8304 sizeof(name),; 8305 ""%s/%s"",; 8306 path,; 8307 PASSWORDS_FILE_NAME);; 8308 ; 8309 if (truncated || !mg_fopen(conn, name, MG_FOPEN_MODE_READ, filep)) {; 8310#if defined(DEBUG); 8311 /* Don't use mg_cry_internal here, but only a trace, since; 8312 * this is a typical case. It will occur for every directory; 8313 * without a password file. */; 8314 DEBUG_TRACE(""fopen(%s): %s"", name, strerror(ERRNO));; 8315#endif; 8316 }; 8317 } else {; 8318 /* Try to find .htpasswd in requested directory. */; 8319 for (p = path, e = p + strlen(p) - 1; e > p; e--) {; 8320 if (e[0] == '/') {; 8321 break;; 83",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:239323,test,test,239323,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['test'],['test']
Testability,",; 8259 nc,; 8260 "":"",; 8261 cnonce,; 8262 "":"",; 8263 qop,; 8264 "":"",; 8265 ha2,; 8266 NULL);; 8267 ; 8268 return mg_strcasecmp(response, expected_response) == 0;; 8269}; 8270 ; 8271 ; 8272#if !defined(NO_FILESYSTEMS); 8273/* Use the global passwords file, if specified by auth_gpass option,; 8274 * or search for .htpasswd in the requested directory. */; 8275static void; 8276open_auth_file(struct mg_connection *conn,; 8277 const char *path,; 8278 struct mg_file *filep); 8279{; 8280 if ((conn != NULL) && (conn->dom_ctx != NULL)) {; 8281 char name[UTF8_PATH_MAX];; 8282 const char *p, *e,; 8283 *gpass = conn->dom_ctx->config[GLOBAL_PASSWORDS_FILE];; 8284 int truncated;; 8285 ; 8286 if (gpass != NULL) {; 8287 /* Use global passwords file */; 8288 if (!mg_fopen(conn, gpass, MG_FOPEN_MODE_READ, filep)) {; 8289#if defined(DEBUG); 8290 /* Use mg_cry_internal here, since gpass has been; 8291 * configured. */; 8292 mg_cry_internal(conn, ""fopen(%s): %s"", gpass, strerror(ERRNO));; 8293#endif; 8294 }; 8295 /* Important: using local struct mg_file to test path for; 8296 * is_directory flag. If filep is used, mg_stat() makes it; 8297 * appear as if auth file was opened.; 8298 * TODO(mid): Check if this is still required after rewriting; 8299 * mg_stat */; 8300 } else if (mg_stat(conn, path, &filep->stat); 8301 && filep->stat.is_directory) {; 8302 mg_snprintf(conn,; 8303 &truncated,; 8304 name,; 8305 sizeof(name),; 8306 ""%s/%s"",; 8307 path,; 8308 PASSWORDS_FILE_NAME);; 8309 ; 8310 if (truncated || !mg_fopen(conn, name, MG_FOPEN_MODE_READ, filep)) {; 8311#if defined(DEBUG); 8312 /* Don't use mg_cry_internal here, but only a trace, since; 8313 * this is a typical case. It will occur for every directory; 8314 * without a password file. */; 8315 DEBUG_TRACE(""fopen(%s): %s"", name, strerror(ERRNO));; 8316#endif; 8317 }; 8318 } else {; 8319 /* Try to find .htpasswd in requested directory. */; 8320 for (p = path, e = p + strlen(p) - 1; e > p; e--) {; 8321 if (e[0] == '/') {; 8322 break;; 83",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:239355,test,test,239355,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['test'],['test']
Testability,",compinfo,compinfo->fOffset,1,oldClass,element->GetTypeName(),isSTLbase));; 3806 }; 3807 }; 3808 } else {; 3809 if (newClass && newClass != oldClass) {; 3810 if (element->GetStreamer()) {; 3811 writeSequence->AddAction(WriteSTL<WriteArraySTLMemberWiseChangedClass,WriteSTLObjectWiseStreamer>, new; 3812 TConfigSTL(this,i,compinfo,compinfo->fOffset,element->GetArrayLength(),oldClass,newClass,element->GetStreamer(),element->GetTypeName(),isSTLbase));; 3813 } else {; 3814 writeSequence->AddAction(WriteSTL<WriteArraySTLMemberWiseChangedClass,WriteSTLObjectWiseFastArray>, new; 3815 TConfigSTL(this,i,compinfo,compinfo->fOffset,element->GetArrayLength(),oldClass,newClass,element->GetTypeName(),isSTLbase));; 3816 }; 3817 } else {; 3818 if (element->GetStreamer()) {; 3819 writeSequence->AddAction(WriteSTL<WriteArraySTLMemberWiseSameClass,WriteSTLObjectWiseStreamer>, new; 3820 TConfigSTL(this,i,compinfo,compinfo->fOffset,element->GetArrayLength(),oldClass,element->GetStreamer(),element->GetTypeName(),isSTLbase));; 3821 } else {; 3822 writeSequence->AddAction(WriteSTL<WriteArraySTLMemberWiseSameClass,WriteSTLObjectWiseFastArray>, new; 3823 TConfigSTL(this,i,compinfo,compinfo->fOffset,element->GetArrayLength(),oldClass,element->GetTypeName(),isSTLbase));; 3824 }; 3825 }; 3826 }; 3827 break;; 3828 } */; 3829 default: generic = kTRUE; break;; 3830 }; 3831 ; 3832 if (isBase) {; 3833 if (compinfo->fStreamer) {; 3834 writeSequence->AddAction(WriteTextStreamer, new TGenericConfiguration(this, i, compinfo));; 3835 } else {; 3836 writeSequence->AddAction(WriteTextBaseClass, new TGenericConfiguration(this, i, compinfo));; 3837 }; 3838 ; 3839 } else; 3840 ; 3841 // use generic write action when special handling is not provided; 3842 if (generic); 3843 writeSequence->AddAction(GenericWriteAction, new TGenericConfiguration(this, i, compinfo));; 3844 ; 3845#if defined(CDJ_NO_COMPILE); 3846 if (element->TestBit(TStreamerElement::kCache)) {; 3847 TConfiguredAction action(writeSequence->fActions.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:178639,Test,TestBit,178639,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['Test'],['TestBit']
Testability,",dsi.GetName()) << "" "" << Endl;; 243 }; 244 ; 245 return ds;; 246}; 247 ; 248////////////////////////////////////////////////////////////////////////////////; 249/// checks a TTreeFormula for problems; 250 ; 251Bool_t TMVA::DataSetFactory::CheckTTreeFormula( TTreeFormula* ttf,; 252 const TString& expression,; 253 Bool_t& hasDollar ); 254{; 255 Bool_t worked = kTRUE;; 256 ; 257 if( ttf->GetNdim() <= 0 ); 258 Log() << kFATAL << ""Expression "" << expression.Data(); 259 << "" could not be resolved to a valid formula. "" << Endl;; 260 if( ttf->GetNdata() == 0 ){; 261 Log() << kWARNING << ""Expression: "" << expression.Data(); 262 << "" does not provide data for this event. ""; 263 << ""This event is not taken into account. --> please check if you use as a variable ""; 264 << ""an entry of an array which is not filled for some events ""; 265 << ""(e.g. arr[4] when arr has only 3 elements)."" << Endl;; 266 Log() << kWARNING << ""If you want to take the event into account you can do something like: ""; 267 << ""\""Alt$(arr[4],0)\"" where in cases where arr doesn't have a 4th element, ""; 268 << "" 0 is taken as an alternative."" << Endl;; 269 worked = kFALSE;; 270 }; 271 if( expression.Contains(""$"") ); 272 hasDollar = kTRUE;; 273 else; 274 {; 275 for (int i = 0, iEnd = ttf->GetNcodes (); i < iEnd; ++i); 276 {; 277 TLeaf* leaf = ttf->GetLeaf (i);; 278 if (!leaf->IsOnTerminalBranch()); 279 hasDollar = kTRUE;; 280 }; 281 }; 282 return worked;; 283}; 284 ; 285 ; 286////////////////////////////////////////////////////////////////////////////////; 287/// While the data gets copied into the local training and testing; 288/// trees, the input tree can change (for instance when changing from; 289/// signal to background tree, or using TChains as input) The; 290/// TTreeFormulas, that hold the input expressions need to be; 291/// re-associated with the new tree, which is done here; 292 ; 293void TMVA::DataSetFactory::ChangeToNewTree( TreeInfo& tinfo, const DataSetInfo & dsi ); 294{; 295 TTree *tr = tinfo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:10420,Log,Log,10420,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['Log'],['Log']
Testability,",g.: ""class TDirectory*"". const char * GetTrueTypeName() const; Get full type description of data member, e,g.: ""class TDirectory*"". Long_t GetOffset() const; Get offset from ""this"". Long_t GetOffsetCint() const; Get offset from ""this"" using the information in CINT only. Int_t GetUnitSize() const; Get the sizeof the underlying type of the data member; (i.e. if the member is an array sizeof(member)/length). Bool_t IsBasic() const; Return true if data member is a basic type, e.g. char, int, long... Bool_t IsEnum() const; Return true if data member is an enum. Bool_t IsaPointer() const; Return true if data member is a pointer. int IsSTLContainer(); The return type is defined in TDictionary (kVector, kList, etc.). Long_t Property() const; Get property description word. For meaning of bits see EProperty. TList * GetOptions() const; Returns list of options - list of TOptionListItems. TMethodCall * GetterMethod(TClass* cl = 0); Return a TMethodCall method responsible for getting the value; of data member. The cl argument specifies the class of the object; which will be used to call this method (in case of multiple; inheritance TMethodCall needs to know this to calculate the proper; offset). TMethodCall * SetterMethod(TClass* cl); Return a TMethodCall method responsible for setting the value; of data member. The cl argument specifies the class of the object; which will be used to call this method (in case of multiple; inheritance TMethodCall needs to know this to calculate the proper; offset). TClass * GetClass() const; { return fClass; }. TDataType * GetDataType() const; { return fDataType; }. Bool_t IsPersistent() const; { return TestBit(kObjIsPersistent); }. » Author: Fons Rademakers 04/02/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id$ » Last generated: 2015-03-12 16:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDataMember.html:14721,Test,TestBit,14721,root/html534/TDataMember.html,https://root.cern,https://root.cern/root/html534/TDataMember.html,1,['Test'],['TestBit']
Testability,",int>fXBins; Bool_tfXLog; pair<double,double>fXRange; pair<double,double>fXRangeScaled; Double_tfXScale; pair<int,int>fYBins; Bool_tfYLog; pair<double,double>fYRange; pair<double,double>fYRangeScaled; Double_tfYScale; pair<int,int>fZBins; Bool_tfZLog; pair<double,double>fZRange; pair<double,double>fZRangeScaled; Double_tfZScale. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLPlotCoordinates(); Constructor. ~TGLPlotCoordinates(); Destructor. void SetCoordType(EGLCoordType type); If coord type was changed, plot must reset sections (if any),; set fModified. EGLCoordType GetCoordType() const; Get coordinates type. void SetXLog(Bool_t xLog); If log changed, sections must be reset,; set fModified. Bool_t GetXLog() const; Get X log. void SetYLog(Bool_t yLog); If log changed, sections must be reset,; set fModified. Bool_t GetYLog() const; Get Y log. void SetZLog(Bool_t zLog); If log changed, sections must be reset,; set fModified. Bool_t GetZLog() const; Get Z log. void ResetModified(); Reset modified. Bool_t Modified() const; Modified. Bool_t SetRanges(const TH1* hist, Bool_t errors = kFALSE, Bool_t zBins = kFALSE); Set bin ranges, ranges. Int_t GetNXBins() const; Number of X bins. Int_t GetNYBins() const; Number of Y bins. Int_t GetNZBins() const; Number of Z bins. const Rgl::BinRange_t & GetXBins() const; X bins range. const Rgl::BinRange_t & GetYBins() const; Y bins range. const Rgl::BinRange_t & GetZBins() const; Z bins range. const Rgl::Range_t & GetXRange() const; X range. Double_t GetXLength() const; X length. const Rgl::Range_t & GetYRange() const; Y range. Double_t GetYLength() const; Y length. const Rgl::Range_t & GetZRange() const; Z range. Double_t GetZLength() const; Z length. const Rgl::Range_t & GetXRangeScaled() const; Scaled range. const Rgl::Range_t & GetYRangeScaled() const; Scaled range. const Rgl::Range_t & GetZRangeScaled() const; Scaled range. Double_t GetFactor() const; Get factor. Bool_t SetRangesCartes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLPlotCoordinates.html:3362,log,log,3362,root/html528/TGLPlotCoordinates.html,https://root.cern,https://root.cern/root/html528/TGLPlotCoordinates.html,4,['log'],['log']
Testability,",namey by a weight w; 585///; 586/// - if x or/and y is less than the low-edge of the corresponding axis first bin,; 587/// the Underflow cell is incremented.; 588/// - if x or/and y is equal to or greater than the upper edge of corresponding axis last bin,; 589/// the Overflow cell is incremented.; 590///; 591/// - If the weight is not equal to 1, the storage of the sum of squares of; 592/// weights is automatically triggered and the sum of the squares of weights is incremented; 593/// by w^2 in the bin corresponding to x,y.; 594///; 595/// The function returns the corresponding global bin number which has its content; 596/// incremented by w; 597 ; 598Int_t TH2::Fill(Double_t x, const char *namey, Double_t w); 599{; 600 Int_t binx, biny, bin;; 601 fEntries++;; 602 binx = fXaxis.FindBin(x);; 603 biny = fYaxis.FindBin(namey);; 604 if (binx <0 || biny <0) return -1;; 605 bin = biny*(fXaxis.GetNbins()+2) + binx;; 606 if (!fSumw2.fN && w != 1.0 && !TestBit(TH1::kIsNotW)) Sumw2(); // must be called before AddBinContent; 607 if (fSumw2.fN) fSumw2.fArray[bin] += w*w;; 608 AddBinContent(bin,w);; 609 if (binx == 0 || binx > fXaxis.GetNbins()) {; 610 if (!GetStatOverflowsBehaviour()) return -1;; 611 }; 612 if (biny == 0 || biny > fYaxis.GetNbins()) return -1;; 613 ; 614 Double_t z= w; //(w > 0 ? w : -w);; 615 fTsumw += z;; 616 fTsumw2 += z*z;; 617 fTsumwx += z*x;; 618 fTsumwx2 += z*x*x;; 619 // skip statistics along y axis; 620 if (!fYaxis.CanExtend() || !fYaxis.IsAlphanumeric()) {; 621 Double_t y = fYaxis.GetBinCenter(biny);; 622 fTsumwy += z * y;; 623 fTsumwy2 += z * y * y;; 624 fTsumwxy += z * x * y;; 625 }; 626 return bin;; 627}; 628 ; 629 ; 630////////////////////////////////////////////////////////////////////////////////; 631/// Fill a 2-D histogram with an array of values and weights.; 632///; 633/// - ntimes: number of entries in arrays x and w (array size must be ntimes*stride); 634/// - x: array of x values to be histogrammed; 635/// - y: array of y values to be hi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2_8cxx_source.html:23776,Test,TestBit,23776,doc/master/TH2_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2_8cxx_source.html,1,['Test'],['TestBit']
Testability,",y,z), Interpolate approximates the value via trilinear interpolation based on the 8 nearest bin center points (corner of the cube surrounding the points) The Algorithm is described in http://en.wikipedia.org/wiki/Trilinear_interpolation The given values (x,y,z) must be between first bin center and last bin center for each coordinate: ; fXAxis.GetBinCenter(1) < x < fXaxis.GetBinCenter(nbinX) AND fYAxis.GetBinCenter(1) < y < fYaxis.GetBinCenter(nbinY) AND fZAxis.GetBinCenter(1) < z < fZaxis.GetBinCenter(nbinZ) ; Reimplemented from TH1.; Definition at line 1458 of file TH3.cxx. ◆ IsA(). TClass * TH3::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TH1.; Reimplemented in TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, and TProfile3D.; Definition at line 152 of file TH3.h. ◆ KolmogorovTest(). Double_t TH3::KolmogorovTest ; (; const TH1 * ; h2, . Option_t * ; option = """" . ); const. overridevirtual . Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ; Default: Ignore under- and overflow bins in comparison; option is a character string to specify options ""U"" include Underflows in test ""O"" include Overflows ""N"" include comparison of normalizations ""D"" Put out a line of ""Debug"" printout ""M"" Return the Maximum Kolmogorov distance instead of prob; The returned function value is the probability of test (much less than one means NOT compatible); The KS test uses the distance between the pseudo-CDF's obtained from the histogram. Since in more than 1D the order for generating the pseudo-CDF is arbitrary, we use the pseudo-CDF's obtained from all the possible 6 combinations of the 3 axis. The average of all the maximum distances obtained is used in the tests. ; Reimplemented from TH1.; Definition at line 1532 of file TH3.cxx. ◆ operator=(). TH3 & TH3::operator= ; (; const TH3 & ; ). privatedelete . ◆ Project3D(). TH1 * TH3::Project3D ; (; Option_t * ; option = ""x""); const. virtual . Project a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3.html:89150,test,test,89150,doc/master/classTH3.html,https://root.cern,https://root.cern/doc/master/classTH3.html,2,['test'],['test']
Testability,"-* vis = -2 shape is drawn. Its sons are not drawn; -; *. void PaintShape(Option_t* option = """"); Paint shape of the volume; To be called from the TObject::Paint method only. void DeletePosition(TVolumePosition* position); DeletePosition deletes the position of the TVolume *node from this TVolume; and removes that volume from the list of the nodes of this TVolume. void GetLocalRange(Float_t* min, Float_t* max); GetRange. Calculates the size of 3 box the volume occupies,; Return:; two floating point arrays with the bound of box; surroundind all shapes of this TVolumeView. void SetVisibility(TVolume::ENodeSEEN vis = TVolume::kBothVisible); Set visibility for this volume and its sons*-*-*-*-; *-* =========================================; ENodeSEEN Visibility flag 00 - everything visible,; 10 - this unvisible, but sons are visible; 01 - this visible but sons; 11 - neither this nor its sons are visible; -; *. void Sizeof3D() const; -*-*-*-*Return total size of this 3-D volume with its attributes; *-* ==========================================================. void Add(TDataSet* dataset); { TDataSet::Add(dataset);}. Bool_t IsMarked() const; { return TestBit(kMark); }. void SetPositionsList(TList* list = 0); {AddObject((TObject *)list);}. TVolume(). const Option_t * GetOption() const; { return fOption.Data();}. TShape * GetShape() const; {return fShape;}. TList * GetListOfShapes() const; {return fListOfShapes;}. ENodeSEEN GetVisibility() const; {return fVisibility;}. TList * GetListOfPositions(); { return (TList *)(GetObject());}. ULong_t Hash() const; { return TObject::Hash();}. Bool_t Is3D() const; {return kTRUE;}. TList * Nodes() const; { return GetList(); }. » Author: Valery Fine 10/12/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/table:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVolume.html:17954,Test,TestBit,17954,root/html534/TVolume.html,https://root.cern,https://root.cern/root/html534/TVolume.html,1,['Test'],['TestBit']
Testability,"-* vis = -2 shape is drawn. Its sons are not drawn; -; *. void PaintShape(Option_t* option = """"); Paint shape of the volume; To be called from the TObject::Paint method only. void DeletePosition(TVolumePosition* position); DeletePosition deletes the position of the TVolume *node from this TVolume; and removes that volume from the list of the nodes of this TVolume. void GetLocalRange(Float_t* min, Float_t* max); GetRange. Calculates the size of 3 box the volume occupies,; Return:; two floating point arrays with the bound of box; surroundind all shapes of this TVolumeView. void SetVisibility(TVolume::ENodeSEEN vis = TVolume::kBothVisible); Set visibility for this volume and its sons*-*-*-*-; *-* =========================================; ENodeSEEN Visibility flag 00 - everything visible,; 10 - this unvisible, but sons are visible; 01 - this visible but sons; 11 - neither this nor its sons are visible; -; *. void Sizeof3D() const; -*-*-*-*Return total size of this 3-D volume with its attributes; *-* ==========================================================. void Add(TDataSet* dataset); { TDataSet::Add(dataset);}. Bool_t IsMarked() const; { return TestBit(kMark); }. void SetPositionsList(TList* list = 0); {AddObject((TObject *)list);}. TVolume(). const Option_t * GetOption() const; { return fOption.Data();}. TShape * GetShape() const; {return fShape;}. TList * GetListOfShapes() const; {return fListOfShapes;}. ENodeSEEN GetVisibility() const; {return fVisibility;}. TList * GetListOfPositions(); { return (TList *)(GetObject());}. ULong_t Hash() const; { return TObject::Hash();}. Bool_t Is3D() const; {return kTRUE;}. TList * Nodes() const; { return GetList(); }. » Author: Valery Fine 10/12/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/table:$Id$ » Last generated: 2015-06-02 16:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TVolume.html:18983,Test,TestBit,18983,root/html604/TVolume.html,https://root.cern,https://root.cern/root/html604/TVolume.html,1,['Test'],['TestBit']
Testability,"-* vis = -2 shape is drawn. Its sons are not drawn; -; *. void PaintShape(Option_t* option = """"); Paint shape of the volume; To be called from the TObject::Paint method only. void DeletePosition(TVolumePosition* position); DeletePosition deletes the position of the TVolume *node from this TVolume; and removes that volume from the list of the nodes of this TVolume. void GetLocalRange(Float_t* min, Float_t* max); GetRange. Calculates the size of 3 box the volume occupies,; Return:; two floating point arrays with the bound of box; surroundind all shapes of this TVolumeView. void SetVisibility(TVolume::ENodeSEEN vis = TVolume::kBothVisible); Set visibility for this volume and its sons*-*-*-*-; *-* =========================================; ENodeSEEN Visibility flag 00 - everything visible,; 10 - this unvisible, but sons are visible; 01 - this visible but sons; 11 - neither this nor its sons are visible; -; *. void Sizeof3D() const; -*-*-*-*Return total size of this 3-D volume with its attributes; *-* ==========================================================. void Add(TDataSet* dataset); { TDataSet::Add(dataset);}. Bool_t IsMarked() const; { return TestBit(kMark); }. void SetPositionsList(TList* list = 0); {AddObject((TObject *)list);}. TVolume(). const Option_t * GetOption() const; { return fOption.Data();}. TShape * GetShape() const; {return fShape;}. TList * GetListOfShapes() const; {return fListOfShapes;}. ENodeSEEN GetVisibility() const; {return fVisibility;}. TList * GetListOfPositions(); { return (TList *)(GetObject());}. ULong_t Hash() const; { return TObject::Hash();}. Bool_t Is3D() const; {return kTRUE;}. TList * Nodes() const; { return GetList(); }. » Author: Valery Fine 10/12/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/table:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVolume.html:18983,Test,TestBit,18983,root/html602/TVolume.html,https://root.cern,https://root.cern/root/html602/TVolume.html,1,['Test'],['TestBit']
Testability,"------ = -----------; Log(xmax) - Log(xmin) Log(xmax/xmin) pxrange. ==> Log(x/xmin) = u*Log(xmax/xmin); x = xmin*exp(u*Log(xmax/xmin); Let alfa = Log(xmax/xmin)/fAbsWNDC. x = xmin*exp(-alfa*pxlow) + exp(alfa*px); x = fPixeltoXk*exp(fPixeltoX*px); ==> fPixeltoXk = xmin*exp(-alfa*pxlow); fPixeltoX = alfa. Log(y) - Log(ymin) Log(y/ymin) pylow - py; v = --------------------- = ------------- = -----------; Log(ymax) - Log(ymin) Log(ymax/ymin) pyrange. Let beta = Log(ymax/ymin)/pyrange; Log(y/ymin) = beta*pylow - beta*py; y/ymin = exp(beta*pylow - beta*py); y = ymin*exp(beta*pylow)*exp(-beta*py); ==> y = fPixeltoYk*exp(fPixeltoY*py); fPixeltoYk = ymin*exp(beta*pylow); fPixeltoY = -beta. - B, Conversion from World coordinates to pixel coordinates. px = pxlow + u*pxrange; = pxlow + Log(x/xmin)/alfa; = pxlow -Log(xmin)/alfa + Log(x)/alfa; = fXtoPixelk + fXtoPixel*Log(x); ==> fXtoPixelk = pxlow -Log(xmin)/alfa; ==> fXtoPixel = 1/alfa. py = pylow - Log(y/ymin)/beta; = fYtoPixelk + fYtoPixel*Log(y); ==> fYtoPixelk = pylow - Log(ymin)/beta; fYtoPixel = 1/beta. void SaveAs(const char* filename = """", Option_t* option = """") const; Save Pad contents in a file in one of various formats. if filename is """", the file produced is padname.ps; if filename starts with a dot, the padname is added in front; if filename contains .eps, an Encapsulated Postscript file is produced; if filename contains .pdf, a PDF file is produced; if filename contains .svg, a SVG file is produced; if filename contains .gif, a GIF file is produced; if filename contains .gif+NN, an animated GIF file is produced; if filename contains .xpm, a XPM file is produced; if filename contains .png, a PNG file is produced; if filename contains .jpg, a JPEG file is produced; NOTE: JPEG's lossy compression will make all sharp edges fuzzy.; if filename contains .tiff, a TIFF file is produced; if filename contains .C or .cxx, a C++ macro file is produced; if filename contains .root, a Root file is produced; if filename contains .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPad.html:55017,Log,Log,55017,root/html528/TPad.html,https://root.cern,https://root.cern/root/html528/TPad.html,9,['Log'],['Log']
Testability,"------ = -----------; Log(xmax) - Log(xmin) Log(xmax/xmin) pxrange. ==> Log(x/xmin) = u*Log(xmax/xmin); x = xmin*exp(u*Log(xmax/xmin); Let alfa = Log(xmax/xmin)/fAbsWNDC. x = xmin*exp(-alfa*pxlow) + exp(alfa*px); x = fPixeltoXk*exp(fPixeltoX*px); ==> fPixeltoXk = xmin*exp(-alfa*pxlow); fPixeltoX = alfa. Log(y) - Log(ymin) Log(y/ymin) pylow - py; v = --------------------- = ------------- = -----------; Log(ymax) - Log(ymin) Log(ymax/ymin) pyrange. Let beta = Log(ymax/ymin)/pyrange; Log(y/ymin) = beta*pylow - beta*py; y/ymin = exp(beta*pylow - beta*py); y = ymin*exp(beta*pylow)*exp(-beta*py); ==> y = fPixeltoYk*exp(fPixeltoY*py); fPixeltoYk = ymin*exp(beta*pylow); fPixeltoY = -beta. - B, Conversion from World coordinates to pixel coordinates. px = pxlow + u*pxrange; = pxlow + Log(x/xmin)/alfa; = pxlow -Log(xmin)/alfa + Log(x)/alfa; = fXtoPixelk + fXtoPixel*Log(x); ==> fXtoPixelk = pxlow -Log(xmin)/alfa; ==> fXtoPixel = 1/alfa. py = pylow - Log(y/ymin)/beta; = fYtoPixelk + fYtoPixel*Log(y); ==> fYtoPixelk = pylow - Log(ymin)/beta; fYtoPixel = 1/beta. void SaveAs(const char* filename = """", Option_t* option = """") const; Save Pad contents in a file in one of various formats. if filename is """", the file produced is padname.ps; if filename starts with a dot, the padname is added in front; if filename contains .eps, an Encapsulated Postscript file is produced; if filename contains .pdf, a PDF file is produced; if filename contains .svg, a SVG file is produced; if filename contains .tex, a TeX file is produced; if filename contains .gif, a GIF file is produced; if filename contains .gif+NN, an animated GIF file is produced; See comments in TASImage::WriteImage for meaning of NN and other .gif sufix variants; if filename contains .xpm, a XPM file is produced; if filename contains .png, a PNG file is produced; if filename contains .jpg, a JPEG file is produced; NOTE: JPEG's lossy compression will make all sharp edges fuzzy.; if filename contains .tiff, a TIFF file is produced; i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPad.html:57370,Log,Log,57370,root/html534/TPad.html,https://root.cern,https://root.cern/root/html534/TPad.html,6,['Log'],['Log']
Testability,"------ = -----------; Log(xmax) - Log(xmin) Log(xmax/xmin) pxrange. ==> Log(x/xmin) = u*Log(xmax/xmin); x = xmin*exp(u*Log(xmax/xmin); Let alfa = Log(xmax/xmin)/fAbsWNDC. x = xmin*exp(-alfa*pxlow) + exp(alfa*px); x = fPixeltoXk*exp(fPixeltoX*px); ==> fPixeltoXk = xmin*exp(-alfa*pxlow); fPixeltoX = alfa. Log(y) - Log(ymin) Log(y/ymin) pylow - py; v = --------------------- = ------------- = -----------; Log(ymax) - Log(ymin) Log(ymax/ymin) pyrange. Let beta = Log(ymax/ymin)/pyrange; Log(y/ymin) = beta*pylow - beta*py; y/ymin = exp(beta*pylow - beta*py); y = ymin*exp(beta*pylow)*exp(-beta*py); ==> y = fPixeltoYk*exp(fPixeltoY*py); fPixeltoYk = ymin*exp(beta*pylow); fPixeltoY = -beta. - B, Conversion from World coordinates to pixel coordinates. px = pxlow + u*pxrange; = pxlow + Log(x/xmin)/alfa; = pxlow -Log(xmin)/alfa + Log(x)/alfa; = fXtoPixelk + fXtoPixel*Log(x); ==> fXtoPixelk = pxlow -Log(xmin)/alfa; ==> fXtoPixel = 1/alfa. py = pylow - Log(y/ymin)/beta; = fYtoPixelk + fYtoPixel*Log(y); ==> fYtoPixelk = pylow - Log(ymin)/beta; fYtoPixel = 1/beta. void SaveAs(const char* filename = """", Option_t* option = """") const; Save Pad contents in a file in one of various formats. if filename is """", the file produced is padname.ps; if filename starts with a dot, the padname is added in front; if filename contains .eps, an Encapsulated Postscript file is produced; if filename contains .pdf, a PDF file is produced; if filename contains .svg, a SVG file is produced; if filename contains .tex, a TeX file is produced; if filename contains .gif, a GIF file is produced; if filename contains .gif+NN, an animated GIF file is produced; if filename contains .xpm, a XPM file is produced; if filename contains .png, a PNG file is produced; if filename contains .jpg, a JPEG file is produced; NOTE: JPEG's lossy compression will make all sharp edges fuzzy.; if filename contains .tiff, a TIFF file is produced; if filename contains .C or .cxx, a C++ macro file is produced; if filename contains .ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPad.html:57702,Log,Log,57702,root/html602/TPad.html,https://root.cern,https://root.cern/root/html602/TPad.html,3,['Log'],['Log']
Testability,"---------- Loop over the points---------------------; 6424 for (k=first; k<=last; k++) {; 6425 ; 6426 // get the data; 6427 // xp = X position of the current point; 6428 // yp = Y position of the current point; 6429 // ex1 = Low X error; 6430 // ex2 = Up X error; 6431 // ey1 = Low Y error; 6432 // ey2 = Up Y error; 6433 // (xi,yi) = Error bars coordinates; 6434 ; 6435 // apply offset on errors for bar histograms; 6436 Double_t xminTmp = gPad->XtoPad(fXaxis->GetBinLowEdge(k));; 6437 Double_t xmaxTmp = gPad->XtoPad(fXaxis->GetBinUpEdge(k));; 6438 if (Hoption.Logx) {; 6439 xminTmp = TMath::Power(10, xminTmp);; 6440 xmaxTmp = TMath::Power(10, xmaxTmp);; 6441 }; 6442 Double_t w = (xmaxTmp-xminTmp)*width;; 6443 xminTmp += offset*(xmaxTmp-xminTmp);; 6444 xmaxTmp = xminTmp + w;; 6445 xp = (xminTmp+xmaxTmp)/2.;; 6446 ; 6447 if (Hoption.Logx) {; 6448 if (xp <= 0) goto L30;; 6449 if (xp < logxmin) goto L30;; 6450 if (xp > TMath::Power(10,xmax)) break;; 6451 } else {; 6452 if (xp < xmin) goto L30;; 6453 if (xp > xmax) break;; 6454 }; 6455 yp = factor*fH->GetBinContent(k);; 6456 if (optionI0 && yp==0) goto L30;; 6457 if (fixbin) {; 6458 ex1 = xerror*Hparam.xbinsize;; 6459 } else {; 6460 delta = fH->GetBinWidth(k);; 6461 ex1 = xerror*delta;; 6462 }; 6463 if (fH->GetBinErrorOption() == TH1::kNormal) {; 6464 ey1 = factor*fH->GetBinError(k);; 6465 ey2 = ey1;; 6466 } else {; 6467 ey1 = factor*fH->GetBinErrorLow(k);; 6468 ey2 = factor*fH->GetBinErrorUp(k);; 6469 }; 6470 ex2 = ex1;; 6471 ; 6472 xi4 = xp;; 6473 xi3 = xp;; 6474 xi2 = xp + ex2;; 6475 xi1 = xp - ex1;; 6476 ; 6477 yi1 = yp;; 6478 yi2 = yp;; 6479 yi3 = yp - ey1;; 6480 yi4 = yp + ey2;; 6481 ; 6482 // take the LOG if necessary; 6483 if (Hoption.Logx) {; 6484 xi1 = TMath::Log10(TMath::Max(xi1,logxmin));; 6485 xi2 = TMath::Log10(TMath::Max(xi2,logxmin));; 6486 xi3 = TMath::Log10(TMath::Max(xi3,logxmin));; 6487 xi4 = TMath::Log10(TMath::Max(xi4,logxmin));; 6488 }; 6489 if (Hoption.Logy) {; 6490 yi1 = TMath::Log10(TMath::Max(yi1,lo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:237057,Log,Logx,237057,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,2,"['Log', 'log']","['Logx', 'logxmin']"
Testability,"-------------------"" << Endl;; 2070 printMatrix(multiclass_testConfusionEffB10[iMethod], multiclass_trainConfusionEffB10[iMethod], classnames,; 2071 numClasses, Log());; 2072 Log() << kINFO << Endl;; 2073 ; 2074 Log() << kINFO << ""(Signal Efficiency for Background Efficiency 0.30%)"" << Endl;; 2075 Log() << kINFO << ""---------------------------------------------------"" << Endl;; 2076 printMatrix(multiclass_testConfusionEffB30[iMethod], multiclass_trainConfusionEffB30[iMethod], classnames,; 2077 numClasses, Log());; 2078 Log() << kINFO << Endl;; 2079 }; 2080 Log() << kINFO << hLine << Endl;; 2081 Log() << kINFO << Endl;; 2082 ; 2083 } else {; 2084 // Binary classification; 2085 if (fROC) {; 2086 Log().EnableOutput();; 2087 gConfig().SetSilent(kFALSE);; 2088 Log() << Endl;; 2089 TString hLine = ""------------------------------------------------------------------------------------------""; 2090 ""-------------------------"";; 2091 Log() << kINFO << ""Evaluation results ranked by best signal efficiency and purity (area)"" << Endl;; 2092 Log() << kINFO << hLine << Endl;; 2093 Log() << kINFO << ""DataSet MVA "" << Endl;; 2094 Log() << kINFO << ""Name: Method: ROC-integ"" << Endl;; 2095 ; 2096 // Log() << kDEBUG << ""DataSet MVA Signal efficiency at bkg eff.(error):; 2097 // | Sepa- Signifi- "" << Endl; Log() << kDEBUG << ""Name: Method: @B=0.01; 2098 // @B=0.10 @B=0.30 ROC-integ ROCCurve| ration: cance: "" << Endl;; 2099 Log() << kDEBUG << hLine << Endl;; 2100 for (Int_t k = 0; k < 2; k++) {; 2101 if (k == 1 && nmeth_used[k] > 0) {; 2102 Log() << kINFO << hLine << Endl;; 2103 Log() << kINFO << ""Input Variables: "" << Endl << hLine << Endl;; 2104 }; 2105 for (Int_t i = 0; i < nmeth_used[k]; i++) {; 2106 TString datasetName = itrMap->first;; 2107 TString methodName = mname[k][i];; 2108 ; 2109 if (k == 1) {; 2110 methodName.ReplaceAll(""Variable_"", """");; 2111 }; 2112 ; 2113 MethodBase *theMethod = dynamic_cast<MethodBase *>(GetMethod(datasetName, methodName));; 2114 if (theMethod == 0) {; 21",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:88073,Log,Log,88073,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,6,['Log'],['Log']
Testability,"-------------------------------------------------------------------------------------------------; : ; <HEADER> Dataset:datasetBkg0 : Created tree 'TestTree' with 200 events; : ; <HEADER> Dataset:datasetBkg0 : Created tree 'TrainTree' with 200 events; : ; <HEADER> Factory : Thank you for using TMVA!; : For citation information, please visit: http://tmva.sf.net/citeTMVA.html; <HEADER> DataSetInfo : [datasetBkg1] : Added class ""Signal""; : Add Tree TreeS of type Signal with 200 events; <HEADER> DataSetInfo : [datasetBkg1] : Added class ""Background""; : Add Tree TreeB1 of type Background with 200 events; <HEADER> Factory : Booking method: BDTG; : ; : the option NegWeightTreatment=InverseBoostNegWeights does not exist for BoostType=Grad; : --> change to new default NegWeightTreatment=Pray; : Rebuilding Dataset datasetBkg1; : Building event vectors for type 2 Signal; : Dataset[datasetBkg1] : create input formulas for tree TreeS; : Building event vectors for type 2 Background; : Dataset[datasetBkg1] : create input formulas for tree TreeB1; <HEADER> DataSetFactory : [datasetBkg1] : Number of events in input trees; : ; : ; : Number of training and testing events; : ---------------------------------------------------------------------------; : Signal -- training events : 100; : Signal -- testing events : 100; : Signal -- training and testing events: 200; : Background -- training events : 100; : Background -- testing events : 100; : Background -- training and testing events: 200; : ; <HEADER> DataSetInfo : Correlation matrix (Signal):; : ----------------------------------------; : var1 var2 var3 var4; : var1: +1.000 +0.427 +0.620 +0.834; : var2: +0.427 +1.000 +0.756 +0.779; : var3: +0.620 +0.756 +1.000 +0.854; : var4: +0.834 +0.779 +0.854 +1.000; : ----------------------------------------; <HEADER> DataSetInfo : Correlation matrix (Background):; : ----------------------------------------; : var1 var2 var3 var4; : var1: +1.000 +0.390 +0.543 +0.801; : var2: +0.390 +1.000 +0.787 +",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html:11206,test,testing,11206,doc/master/TMVAMultipleBackgroundExample_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html,5,['test'],['testing']
Testability,"-------------------------------------------------------------------------------------------------; : ; <HEADER> Dataset:datasetBkg1 : Created tree 'TestTree' with 200 events; : ; <HEADER> Dataset:datasetBkg1 : Created tree 'TrainTree' with 200 events; : ; <HEADER> Factory : Thank you for using TMVA!; : For citation information, please visit: http://tmva.sf.net/citeTMVA.html; <HEADER> DataSetInfo : [datasetBkg2] : Added class ""Signal""; : Add Tree TreeS of type Signal with 200 events; <HEADER> DataSetInfo : [datasetBkg2] : Added class ""Background""; : Add Tree TreeB2 of type Background with 200 events; <HEADER> Factory : Booking method: BDTG; : ; : the option NegWeightTreatment=InverseBoostNegWeights does not exist for BoostType=Grad; : --> change to new default NegWeightTreatment=Pray; : Rebuilding Dataset datasetBkg2; : Building event vectors for type 2 Signal; : Dataset[datasetBkg2] : create input formulas for tree TreeS; : Building event vectors for type 2 Background; : Dataset[datasetBkg2] : create input formulas for tree TreeB2; <HEADER> DataSetFactory : [datasetBkg2] : Number of events in input trees; : ; : ; : Number of training and testing events; : ---------------------------------------------------------------------------; : Signal -- training events : 100; : Signal -- testing events : 100; : Signal -- training and testing events: 200; : Background -- training events : 100; : Background -- testing events : 100; : Background -- training and testing events: 200; : ; <HEADER> DataSetInfo : Correlation matrix (Signal):; : ----------------------------------------; : var1 var2 var3 var4; : var1: +1.000 +0.427 +0.620 +0.834; : var2: +0.427 +1.000 +0.756 +0.779; : var3: +0.620 +0.756 +1.000 +0.854; : var4: +0.834 +0.779 +0.854 +1.000; : ----------------------------------------; <HEADER> DataSetInfo : Correlation matrix (Background):; : ----------------------------------------; : var1 var2 var3 var4; : var1: +1.000 -0.689 -0.032 +0.201; : var2: -0.689 +1.000 +0.051 -",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html:20282,test,testing,20282,doc/master/TMVAMultipleBackgroundExample_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html,5,['test'],['testing']
Testability,"-------------------------------------------------------------------------------; : ; <HEADER> Factory : Thank you for using TMVA!; : For citation information, please visit: http://tmva.sf.net/citeTMVA.html; <HEADER> Factory : Booking method: Fisher_fold2; : ; <HEADER> Fisher_fold2 : Results for Fisher coefficients:; : -----------------------; : Variable: Coefficient:; : -----------------------; : x: +0.501; : y: +0.467; : (offset): -0.000; : -----------------------; : Elapsed time for training with 998 events: 0.000263 sec ; <HEADER> Fisher_fold2 : [datasetcv] : Evaluation of Fisher_fold2 on training sample (998 events); : Elapsed time for evaluation of 998 events: 7.08e-05 sec ; : Creating xml weight file: datasetcv/weights/TMVACrossValidation_Fisher_fold2.weights.xml; : Creating standalone class: datasetcv/weights/TMVACrossValidation_Fisher_fold2.class.C; <HEADER> Factory : Test all methods; <HEADER> Factory : Test method: Fisher_fold2 for Classification performance; : ; <HEADER> Fisher_fold2 : [datasetcv] : Evaluation of Fisher_fold2 on testing sample (1000 events); : Elapsed time for evaluation of 1000 events: 8.2e-05 sec ; <HEADER> Factory : Evaluate all methods; <HEADER> Factory : Evaluate classifier: Fisher_fold2; : ; <HEADER> Fisher_fold2 : [datasetcv] : Loop over test events and fill histograms with classifier response...; : ; : ; : Evaluation results ranked by best signal efficiency and purity (area); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA ; : Name: Method: ROC-integ; : datasetcv Fisher_fold2 : 0.966; : -------------------------------------------------------------------------------------------------------------------; : ; : Testing efficiency compared to training efficiency (overtraining check); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA Signal efficiency: from test sample (fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVACrossValidation_8C.html:11533,Test,Test,11533,doc/master/TMVACrossValidation_8C.html,https://root.cern,https://root.cern/doc/master/TMVACrossValidation_8C.html,3,"['Test', 'test']","['Test', 'testing']"
Testability,"----------------------------------------------------------------------------; : ; : Testing efficiency compared to training efficiency (overtraining check); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA Signal efficiency: from test sample (from training sample) ; : Name: Method: @B=0.01 @B=0.10 @B=0.30 ; : -------------------------------------------------------------------------------------------------------------------; : dataset DNN_CPU : 0.129 (0.138) 0.392 (0.444) 0.662 (0.711); : dataset BDT : 0.098 (0.099) 0.393 (0.402) 0.657 (0.681); : dataset PyKeras : 0.138 (0.111) 0.408 (0.410) 0.656 (0.661); : dataset Likelihood : 0.085 (0.082) 0.355 (0.363) 0.580 (0.596); : dataset Fisher : 0.015 (0.015) 0.121 (0.131) 0.487 (0.506); : -------------------------------------------------------------------------------------------------------------------; : ; Dataset:dataset : Created tree 'TestTree' with 6000 events; : ; Dataset:dataset : Created tree 'TrainTree' with 14000 events; : ; Factory : ␛[1mThank you for using TMVA!␛[0m; : ␛[1mFor citation information, please visit: http://tmva.sf.net/citeTMVA.html␛[0m; ; ## Declare Factory; ; ; ## Create the Factory class. Later you can choose the methods; ## whose performance you'd like to investigate.; ; ## The factory is the major TMVA object you have to interact with. Here is the list of parameters you need to pass; ; ## - The first argument is the base of the name of all the output; ## weightfiles in the directory weight/ that will be created with the; ## method parameters; ; ## - The second argument is the output file for the training results; ; ## - The third argument is a string option defining some general configuration for the TMVA session. For example all TMVA output can be suppressed by removing the ""!"" (not) in front of the ""Silent"" argument in the option string; ; import ROOT; import os; ; TMVA = ROOT.TMVA; TFile = ROOT.TFile; ; TMVA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:56315,Test,TestTree,56315,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,1,['Test'],['TestTree']
Testability,"----------------------------------------------------------------------------; : ; : Testing efficiency compared to training efficiency (overtraining check); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA Signal efficiency: from test sample (from training sample) ; : Name: Method: @B=0.01 @B=0.10 @B=0.30 ; : -------------------------------------------------------------------------------------------------------------------; : dataset DNN_CPU : 0.147 (0.142) 0.404 (0.444) 0.678 (0.708); : dataset PyKeras : 0.132 (0.121) 0.404 (0.410) 0.669 (0.673); : dataset BDT : 0.098 (0.099) 0.393 (0.402) 0.657 (0.681); : dataset Likelihood : 0.085 (0.082) 0.355 (0.363) 0.580 (0.596); : dataset Fisher : 0.015 (0.015) 0.121 (0.131) 0.487 (0.506); : -------------------------------------------------------------------------------------------------------------------; : ; Dataset:dataset : Created tree 'TestTree' with 6000 events; : ; Dataset:dataset : Created tree 'TrainTree' with 14000 events; : ; Factory : ␛[1mThank you for using TMVA!␛[0m; : ␛[1mFor citation information, please visit: http://tmva.sf.net/citeTMVA.html␛[0m; ; /***; ## Declare Factory; ; Create the Factory class. Later you can choose the methods; whose performance you'd like to investigate.; ; The factory is the major TMVA object you have to interact with. Here is the list of parameters you need to pass; ; - The first argument is the base of the name of all the output; weightfiles in the directory weight/ that will be created with the; method parameters; ; - The second argument is the output file for the training results; ; - The third argument is a string option defining some general configuration for the TMVA session. For example all TMVA output can be suppressed by removing the ""!"" (not) in front of the ""Silent"" argument in the option string; ; **/; ; void TMVA_Higgs_Classification() {; ; // options to control used methods; ; bool us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:56819,Test,TestTree,56819,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,1,['Test'],['TestTree']
Testability,"-----------------------------------------------------------------------; 1842 ; 1843 if (doRegression) {; 1844 ; 1845 Log() << kINFO << Endl;; 1846 TString hLine =; 1847 ""--------------------------------------------------------------------------------------------------"";; 1848 Log() << kINFO << ""Evaluation results ranked by smallest RMS on test sample:"" << Endl;; 1849 Log() << kINFO << ""(\""Bias\"" quotes the mean deviation of the regression from true target."" << Endl;; 1850 Log() << kINFO << "" \""MutInf\"" is the \""Mutual Information\"" between regression and target."" << Endl;; 1851 Log() << kINFO << "" Indicated by \""_T\"" are the corresponding \""truncated\"" quantities ob-"" << Endl;; 1852 Log() << kINFO << "" tained when removing events deviating more than 2sigma from average.)"" << Endl;; 1853 Log() << kINFO << hLine << Endl;; 1854 // Log() << kINFO << ""DataSet Name: MVA Method: <Bias> <Bias_T> RMS RMS_T | MutInf; 1855 // MutInf_T"" << Endl;; 1856 Log() << kINFO << hLine << Endl;; 1857 ; 1858 for (Int_t i = 0; i < nmeth_used[0]; i++) {; 1859 MethodBase *theMethod = dynamic_cast<MethodBase *>((*methods)[i]);; 1860 if (theMethod == 0); 1861 continue;; 1862 ; 1863 Log() << kINFO; 1864 << Form(""%-20s %-15s:%#9.3g%#9.3g%#9.3g%#9.3g | %#5.3f %#5.3f"", theMethod->fDataSetInfo.GetName(),; 1865 (const char *)mname[0][i], biastest[0][i], biastestT[0][i], rmstest[0][i], rmstestT[0][i],; 1866 minftest[0][i], minftestT[0][i]); 1867 << Endl;; 1868 }; 1869 Log() << kINFO << hLine << Endl;; 1870 Log() << kINFO << Endl;; 1871 Log() << kINFO << ""Evaluation results ranked by smallest RMS on training sample:"" << Endl;; 1872 Log() << kINFO << ""(overtraining check)"" << Endl;; 1873 Log() << kINFO << hLine << Endl;; 1874 Log() << kINFO; 1875 << ""DataSet Name: MVA Method: <Bias> <Bias_T> RMS RMS_T | MutInf MutInf_T""; 1876 << Endl;; 1877 Log() << kINFO << hLine << Endl;; 1878 ; 1879 for (Int_t i = 0; i < nmeth_used[0]; i++) {; 1880 MethodBase *theMethod = dynamic_cast<MethodBase *>((*methods)[i]);; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:77054,Log,Log,77054,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,4,['Log'],['Log']
Testability,"---------------------------------------------------------------------; : ; : Testing efficiency compared to training efficiency (overtraining check); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA Signal efficiency: from test sample (from training sample) ; : Name: Method: @B=0.01 @B=0.10 @B=0.30 ; : -------------------------------------------------------------------------------------------------------------------; : dataset PyTorch : 0.055 (0.225) 0.430 (0.620) 0.755 (0.832); : dataset TMVA_CNN_CPU : 0.040 (0.140) 0.345 (0.430) 0.699 (0.669); : dataset BDT : 0.105 (0.310) 0.360 (0.658) 0.678 (0.860); : dataset TMVA_DNN_CPU : 0.055 (0.135) 0.263 (0.441) 0.560 (0.701); : dataset PyKeras : 0.065 (0.070) 0.222 (0.348) 0.522 (0.629); : -------------------------------------------------------------------------------------------------------------------; : ; Dataset:dataset : Created tree 'TestTree' with 400 events; : ; Dataset:dataset : Created tree 'TrainTree' with 1600 events; : ; Factory : ␛[1mThank you for using TMVA!␛[0m; : ␛[1mFor citation information, please visit: http://tmva.sf.net/citeTMVA.html␛[0m; ; /***; ; # TMVA Classification Example Using a Convolutional Neural Network; ; ; **/; ; /// Helper function to create input images data; /// we create a signal and background 2D histograms from 2d gaussians; /// with a location (means in X and Y) different for each event; /// The difference between signal and background is in the gaussian width.; /// The width for the background gaussian is slightly larger than the signal width by few % values; ///; ///; void MakeImagesTree(int n, int nh, int nw); {; ; // image size (nh x nw); const int ntot = nh * nw;; const TString fileOutName = TString::Format(""images_data_%dx%d.root"", nh, nw);; TFile f(fileOutName, ""RECREATE"");; ; const int nRndmEvts = 10000; // number of events we use to fill each image; double delta_sigma = 0.1; // 5% differen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:44350,Test,TestTree,44350,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['Test'],['TestTree']
Testability,"-----------------------------------------------------------; : Start of deep neural network training on CPU using MT, nthreads = 1; : ; TFHandler_DNN_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : m_jj: 0.0043655 0.99836 [ -3.2801 5.7307 ]; : m_jjj: 0.0044371 0.99827 [ -3.2805 5.7307 ]; : m_lv: 0.0054053 1.0003 [ -3.2810 5.7307 ]; : m_jlv: 0.0044637 0.99837 [ -3.2803 5.7307 ]; : m_bb: 0.0043676 0.99847 [ -3.2797 5.7307 ]; : m_wbb: 0.0042343 0.99744 [ -3.2803 5.7307 ]; : m_wwbb: 0.0046014 0.99948 [ -3.2802 5.7307 ]; : -----------------------------------------------------------; : ***** Deep Learning Network *****; DEEP NEURAL NETWORK: Depth = 5 Input = ( 1, 1, 7 ) Batch size = 128 Loss function = C; Layer 0 DENSE Layer: ( Input = 7 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 1 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 2 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 3 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 4 DENSE Layer: ( Input = 64 , Width = 1 ) Output = ( 1 , 128 , 1 ) Activation Function = Identity; : Using 11200 events for training and 2800 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 0.868652; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.659892 0.620582 0.589558 0.0469541 20523.3 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.604286 0.594787 0.586926 0.0471912 20632.4 0; : 3 | 0.58117 0.603906",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:23812,test,testing,23812,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,1,['test'],['testing']
Testability,"-----------------------------------------------------------; : Start of deep neural network training on CPU using MT, nthreads = 1; : ; TFHandler_DNN_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : m_jj: 0.0043655 0.99836 [ -3.2801 5.7307 ]; : m_jjj: 0.0044371 0.99827 [ -3.2805 5.7307 ]; : m_lv: 0.0054053 1.0003 [ -3.2810 5.7307 ]; : m_jlv: 0.0044637 0.99837 [ -3.2803 5.7307 ]; : m_bb: 0.0043676 0.99847 [ -3.2797 5.7307 ]; : m_wbb: 0.0042343 0.99744 [ -3.2803 5.7307 ]; : m_wwbb: 0.0046014 0.99948 [ -3.2802 5.7307 ]; : -----------------------------------------------------------; : ***** Deep Learning Network *****; DEEP NEURAL NETWORK: Depth = 5 Input = ( 1, 1, 7 ) Batch size = 128 Loss function = C; Layer 0 DENSE Layer: ( Input = 7 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 1 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 2 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 3 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 4 DENSE Layer: ( Input = 64 , Width = 1 ) Output = ( 1 , 128 , 1 ) Activation Function = Identity; : Using 11200 events for training and 2800 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 1.171; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.66619 0.628056 0.587341 0.0468945 20605.2 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.605139 0.593298 0.586597 0.0468674 20632.5 0; : 3 Minimum Test error fou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:23875,test,testing,23875,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,1,['test'],['testing']
Testability,"---------------------------------------------------------. root [0]; To start ROOT you can type root at the system prompt. This starts up Cling, the ROOT command line C/C++ interpreter, and it gives you the ROOT prompt (root[0]).; It is possible to launch ROOT with some command line options, as shown below:; % root -?; Usage: root [-l] [-b] [-n] [-q] [dir] [[file:]data.root]; [file1.C ... fileN.C]; Options:; -b : run in batch mode without graphics; -n : do not execute logon and logoff macros as specified in .rootrc; -q : exit after processing command line macro files; -l : do not show splash screen; -x : exit on exception; dir : if dir is a valid directory cd to it before executing. -? : print usage; -h : print usage; --help : print usage; -config : print ./configure options. -b ROOT session runs in batch mode, without graphics display. This mode is useful in case one does not want to set the DISPLAY or cannot do it for some reason.; -n usually, launching a ROOT session will execute a logon script and quitting will execute a logoff script. This option prevents the execution of these two scripts.; it is also possible to execute a script without entering a ROOT session. One simply adds the name of the script(s) after the ROOT command. Be warned: after finishing the execution of the script, ROOT will normally enter a new session.; -q process command line script files and exit. For example if you would like to run a script myMacro.C in the background, redirect the output into a file myMacro.log, and exit after the script execution, use the following syntax:; root -b -q myMacro.C > myMacro.log; If you need to pass a parameter to the script use:; root -b -q 'myMacro.C(3)' > myMacro.log; Be mindful of the quotes, i.e. if you need to pass a string as a parameter, the syntax is:; root -b -q 'myMacro.C(""text"")' > myMacro.log; You can build a shared library with ACLiC and then use this shared library on the command line for a quicker execution (i.e. the compiled speed rather th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:33491,log,logon,33491,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['log'],"['logoff', 'logon']"
Testability,"---------------------------------------------------------; : m_jj m_jjj m_lv m_jlv m_bb m_wbb m_wwbb; : m_jj: +1.000 +0.808 +0.022 +0.150 +0.028 +0.407 +0.415; : m_jjj: +0.808 +1.000 +0.041 +0.206 +0.177 +0.569 +0.547; : m_lv: +0.022 +0.041 +1.000 +0.139 +0.037 +0.081 +0.085; : m_jlv: +0.150 +0.206 +0.139 +1.000 +0.309 +0.607 +0.557; : m_bb: +0.028 +0.177 +0.037 +0.309 +1.000 +0.625 +0.447; : m_wbb: +0.407 +0.569 +0.081 +0.607 +0.625 +1.000 +0.884; : m_wwbb: +0.415 +0.547 +0.085 +0.557 +0.447 +0.884 +1.000; : ----------------------------------------------------------------; DataSetFactory : [dataset] : ; : ; Factory : Booking method: ␛[1mDNN_CPU␛[0m; : ; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=G:WeightInitialization=XAVIER:InputLayout=1|1|7:BatchLayout=1|128|7:Layout=DENSE|64|TANH,DENSE|64|TANH,DENSE|64|TANH,DENSE|64|TANH,DENSE|1|LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.9,ConvergenceSteps=10,BatchSize=128,TestRepetitions=1,MaxEpochs=20,WeightDecay=1e-4,Regularization=None,Optimizer=ADAM,ADAM_beta1=0.9,ADAM_beta2=0.999,ADAM_eps=1.E-7,DropConfig=0.0+0.0+0.0+0.:Architecture=CPU""; : The following options are set:; : - By User:; : <none>; : - Default:; : Boost_num: ""0"" [Number of times the classifier will be boosted]; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=G:WeightInitialization=XAVIER:InputLayout=1|1|7:BatchLayout=1|128|7:Layout=DENSE|64|TANH,DENSE|64|TANH,DENSE|64|TANH,DENSE|64|TANH,DENSE|1|LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.9,ConvergenceSteps=10,BatchSize=128,TestRepetitions=1,MaxEpochs=20,WeightDecay=1e-4,Regularization=None,Optimizer=ADAM,ADAM_beta1=0.9,ADAM_beta2=0.999,ADAM_eps=1.E-7,DropConfig=0.0+0.0+0.0+0.:Architecture=CPU""; : The following options are set:; : - By User:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""G"" [List of variable transformations performed before training, e.g., ""D_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:10547,Test,TestRepetitions,10547,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,1,['Test'],['TestRepetitions']
Testability,"---------------------------------------------------------; : m_jj m_jjj m_lv m_jlv m_bb m_wbb m_wwbb; : m_jj: +1.000 +0.808 +0.022 +0.150 +0.028 +0.407 +0.415; : m_jjj: +0.808 +1.000 +0.041 +0.206 +0.177 +0.569 +0.547; : m_lv: +0.022 +0.041 +1.000 +0.139 +0.037 +0.081 +0.085; : m_jlv: +0.150 +0.206 +0.139 +1.000 +0.309 +0.607 +0.557; : m_bb: +0.028 +0.177 +0.037 +0.309 +1.000 +0.625 +0.447; : m_wbb: +0.407 +0.569 +0.081 +0.607 +0.625 +1.000 +0.884; : m_wwbb: +0.415 +0.547 +0.085 +0.557 +0.447 +0.884 +1.000; : ----------------------------------------------------------------; DataSetFactory : [dataset] : ; : ; Factory : Booking method: ␛[1mDNN_CPU␛[0m; : ; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=G:WeightInitialization=XAVIER:InputLayout=1|1|7:BatchLayout=1|128|7:Layout=DENSE|64|TANH,DENSE|64|TANH,DENSE|64|TANH,DENSE|64|TANH,DENSE|1|LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.9,ConvergenceSteps=10,BatchSize=128,TestRepetitions=1,MaxEpochs=30,WeightDecay=1e-4,Regularization=None,Optimizer=ADAM,ADAM_beta1=0.9,ADAM_beta2=0.999,ADAM_eps=1.E-7,DropConfig=0.0+0.0+0.0+0.:Architecture=CPU""; : The following options are set:; : - By User:; : <none>; : - Default:; : Boost_num: ""0"" [Number of times the classifier will be boosted]; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=G:WeightInitialization=XAVIER:InputLayout=1|1|7:BatchLayout=1|128|7:Layout=DENSE|64|TANH,DENSE|64|TANH,DENSE|64|TANH,DENSE|64|TANH,DENSE|1|LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.9,ConvergenceSteps=10,BatchSize=128,TestRepetitions=1,MaxEpochs=30,WeightDecay=1e-4,Regularization=None,Optimizer=ADAM,ADAM_beta1=0.9,ADAM_beta2=0.999,ADAM_eps=1.E-7,DropConfig=0.0+0.0+0.0+0.:Architecture=CPU""; : The following options are set:; : - By User:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""G"" [List of variable transformations performed before training, e.g., ""D_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:10534,Test,TestRepetitions,10534,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,1,['Test'],['TestRepetitions']
Testability,------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.605916 0.542204 0.0761789 0.00657979 45977.6 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.512732 0.499825 0.0771995 0.00657724 45311.5 0; : 3 Minimum Test error found - save the configuration ; : 3 | 0.477495 0.458718 0.0776312 0.00665553 45085.9 0; : 4 Minimum Test error found - save the configuration ; : 4 | 0.438338 0.418147 0.0780597 0.00669006 44837 0; : 5 Minimum Test error found - save the configuration ; : 5 | 0.407569 0.391703 0.0786075 0.00678976 44557.2 0; : 6 Minimum Test error found - save the configuration ; : 6 | 0.387736 0.373696 0.0792581 0.00678916 44156.9 0; : 7 Minimum Test error found - save the configuration ; : 7 | 0.373399 0.360485 0.0791536 0.00677002 44208.9 0; : 8 Minimum Test error found - save the configuration ; : 8 | 0.362792 0.352336 0.0796639 0.00682572 43933 0; : 9 Minimum Test error found - save the configuration ; : 9 | 0.353594 0.340526 0.0805399 0.00700876 43519 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.345712 0.336826 0.080966 0.0069933 43259.2 0; : 11 Minimum Test error found - save the configuration ; : 11 | 0.338399 0.329567 0.0802544 0.00691181 43630.9 0; : 12 Minimum Test error found - save the configuration ; : 12 | 0.333122 0.322325 0.0804981 0.00689735 43477.8 0; : 13 Minimum Test error found - save the configuration ; : 13 | 0.326577 0.317097 0.0800716 0.00688531 43724 0; : 14 Minimum Test error found - save the configuration ; : 14 | 0.320979 0.311994 0.080369 0.00694962 43585.2 0; : 15 Minimum Test error found - save the configuration ; : 15 | 0.316442 0.305918 0.0803736 0.00690045 43553.3 0; : 16 Minimum Test error found - save the configuration ; : 16 | 0.311672 0.301667 0.0807629 0.00695777 43357.4 0; : 17 Minimum Test error found - save the configuration ; : 17 | 0.306787 0.297289 0.0804752 0.00690149 43493.8 0; : 18 M,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:15701,Test,Test,15701,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['Test'],['Test']
Testability,"-----------------------------------------------------; : var1: 0.077270 0.29534 [ -1.1155 1.0914 ]; : var2: 0.068045 0.27981 [ -1.0016 1.0000 ]; : var3: 0.027548 0.24565 [ -0.80459 0.85902 ]; : var4: -0.034157 0.25816 [ -1.0000 0.83435 ]; : -----------------------------------------------------------; TFHandler_DL_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 0.077270 0.29534 [ -1.1155 1.0914 ]; : var2: 0.068045 0.27981 [ -1.0016 1.0000 ]; : var3: 0.027548 0.24565 [ -0.80459 0.85902 ]; : var4: -0.034157 0.25816 [ -1.0000 0.83435 ]; : -----------------------------------------------------------; : ; : 1-vs-rest performance metrics per class; : -------------------------------------------------------------------------------------------------------; : ; : Considers the listed class as signal and the other classes; : as background, reporting the resulting binary performance.; : A score of 0.820 (0.850) means 0.820 was acheived on the; : test set and 0.850 on the training set.; : ; : Dataset MVA Method ROC AUC Sig eff@B=0.01 Sig eff@B=0.10 Sig eff@B=0.30 ; : Name: / Class: test (train) test (train) test (train) test (train) ; : ; : dataset BDTG ; : ------------------------------; : Signal 0.968 (0.978) 0.508 (0.605) 0.914 (0.945) 0.990 (0.996) ; : bg0 0.910 (0.931) 0.256 (0.288) 0.737 (0.791) 0.922 (0.956) ; : bg1 0.947 (0.954) 0.437 (0.511) 0.833 (0.856) 0.971 (0.971) ; : bg2 0.978 (0.982) 0.585 (0.678) 0.951 (0.956) 0.999 (0.996) ; : ; : dataset MLP ; : ------------------------------; : Signal 0.970 (0.975) 0.596 (0.632) 0.933 (0.938) 0.988 (0.993) ; : bg0 0.929 (0.934) 0.303 (0.298) 0.787 (0.793) 0.949 (0.961) ; : bg1 0.962 (0.967) 0.467 (0.553) 0.881 (0.906) 0.985 (0.992) ; : bg2 0.975 (0.979) 0.629 (0.699) 0.929 (0.940) 0.998 (0.998) ; : ; : dataset PDEFoam ; : ------------------------------; : Signal 0.916 (0.928) 0.294 (0.382) 0.744 (0.782) 0.932 (0.952) ; : bg0 0.837 (0.848) 0.109 (0.147) 0.519 (0.543) 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:23933,test,test,23933,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['test'],['test']
Testability,---------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 1.28042 0.721714 1.40039 0.112743 931.931 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.744775 0.695682 1.39558 0.112793 935.465 0; : 3 Minimum Test error found - save the configuration ; : 3 | 0.694124 0.686492 1.40809 0.112179 925.986 0; : 4 | 0.679848 0.699399 1.40006 0.109116 929.552 1; : 5 Minimum Test error found - save the configuration ; : 5 | 0.670651 0.682024 1.40299 0.112234 929.685 0; : 6 Minimum Test error found - save the configuration ; : 6 | 0.652355 0.665731 1.40537 0.11341 928.823 0; : 7 Minimum Test error found - save the configuration ; : 7 | 0.647198 0.663594 1.40991 0.11661 927.858 0; : 8 | 0.624112 0.674678 1.40336 0.112656 929.728 1; : 9 Minimum Test error found - save the configuration ; : 9 | 0.597489 0.647076 1.41653 0.119736 925.361 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.561268 0.630455 1.40233 0.116045 932.919 0; : ; : Elapsed time for training with 1600 events: 14.2 sec ; : Evaluate deep neural network on CPU using batches with size = 100; : ; TMVA_CNN_CPU : [dataset] : Evaluation of TMVA_CNN_CPU on training sample (1600 events); : Elapsed time for evaluation of 1600 events: 0.629 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVA_CNN_Classification_TMVA_CNN_CPU.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVA_CNN_Classification_TMVA_CNN_CPU.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: PyKeras for Classification; : ; : ; : ␛[1m================================================================␛[0m; : ␛[1mH e l p f o r M V A m e t h o d [ PyKeras ] :␛[0m; : ; : Keras is a high-level API for the Theano and Tensorflow packages.; : This method wraps the t,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:15145,Test,Test,15145,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['Test'],['Test']
Testability,"---------------------------------------------------; : m_jj: 1.0447 0.66216 [ 0.14661 10.222 ]; : m_jjj: 1.0275 0.37015 [ 0.34201 5.6016 ]; : m_lv: 1.0500 0.15582 [ 0.29757 2.8989 ]; : m_jlv: 1.0053 0.39478 [ 0.41660 5.8799 ]; : m_bb: 0.97464 0.52138 [ 0.10941 5.5163 ]; : m_wbb: 1.0296 0.35719 [ 0.38878 3.9747 ]; : m_wwbb: 0.95617 0.30368 [ 0.44118 4.0728 ]; : -----------------------------------------------------------; : ; : Evaluation results ranked by best signal efficiency and purity (area); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA ; : Name: Method: ROC-integ; : dataset DNN_CPU : 0.759; : dataset BDT : 0.754; : dataset PyKeras : 0.752; : dataset Likelihood : 0.698; : dataset Fisher : 0.642; : -------------------------------------------------------------------------------------------------------------------; : ; : Testing efficiency compared to training efficiency (overtraining check); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA Signal efficiency: from test sample (from training sample) ; : Name: Method: @B=0.01 @B=0.10 @B=0.30 ; : -------------------------------------------------------------------------------------------------------------------; : dataset DNN_CPU : 0.129 (0.138) 0.392 (0.444) 0.662 (0.711); : dataset BDT : 0.098 (0.099) 0.393 (0.402) 0.657 (0.681); : dataset PyKeras : 0.138 (0.111) 0.408 (0.410) 0.656 (0.661); : dataset Likelihood : 0.085 (0.082) 0.355 (0.363) 0.580 (0.596); : dataset Fisher : 0.015 (0.015) 0.121 (0.131) 0.487 (0.506); : -------------------------------------------------------------------------------------------------------------------; : ; Dataset:dataset : Created tree 'TestTree' with 6000 events; : ; Dataset:dataset : Created tree 'TrainTree' with 14000 events; : ; Factory : ␛[1mThank you for using TMVA!␛[0m; : ␛[1mFor citation information, please v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:55419,Test,Testing,55419,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,2,"['Test', 'test']","['Testing', 'test']"
Testability,"---------------------------------------------------; : m_jj: 1.0447 0.66216 [ 0.14661 10.222 ]; : m_jjj: 1.0275 0.37015 [ 0.34201 5.6016 ]; : m_lv: 1.0500 0.15582 [ 0.29757 2.8989 ]; : m_jlv: 1.0053 0.39478 [ 0.41660 5.8799 ]; : m_bb: 0.97464 0.52138 [ 0.10941 5.5163 ]; : m_wbb: 1.0296 0.35719 [ 0.38878 3.9747 ]; : m_wwbb: 0.95617 0.30368 [ 0.44118 4.0728 ]; : -----------------------------------------------------------; : ; : Evaluation results ranked by best signal efficiency and purity (area); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA ; : Name: Method: ROC-integ; : dataset DNN_CPU : 0.762; : dataset PyKeras : 0.757; : dataset BDT : 0.754; : dataset Likelihood : 0.698; : dataset Fisher : 0.642; : -------------------------------------------------------------------------------------------------------------------; : ; : Testing efficiency compared to training efficiency (overtraining check); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA Signal efficiency: from test sample (from training sample) ; : Name: Method: @B=0.01 @B=0.10 @B=0.30 ; : -------------------------------------------------------------------------------------------------------------------; : dataset DNN_CPU : 0.147 (0.142) 0.404 (0.444) 0.678 (0.708); : dataset PyKeras : 0.132 (0.121) 0.404 (0.410) 0.669 (0.673); : dataset BDT : 0.098 (0.099) 0.393 (0.402) 0.657 (0.681); : dataset Likelihood : 0.085 (0.082) 0.355 (0.363) 0.580 (0.596); : dataset Fisher : 0.015 (0.015) 0.121 (0.131) 0.487 (0.506); : -------------------------------------------------------------------------------------------------------------------; : ; Dataset:dataset : Created tree 'TestTree' with 6000 events; : ; Dataset:dataset : Created tree 'TrainTree' with 14000 events; : ; Factory : ␛[1mThank you for using TMVA!␛[0m; : ␛[1mFor citation information, please v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:55923,Test,Testing,55923,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,2,"['Test', 'test']","['Testing', 'test']"
Testability,-----------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.659892 0.620582 0.589558 0.0469541 20523.3 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.604286 0.594787 0.586926 0.0471912 20632.4 0; : 3 | 0.58117 0.603906 0.587335 0.047007 20609.7 1; : 4 Minimum Test error found - save the configuration ; : 4 | 0.57382 0.588714 0.592175 0.0469679 20425.3 0; : 5 | 0.569519 0.59535 0.590168 0.0468081 20494.7 1; : 6 | 0.567869 0.590023 0.589038 0.0469022 20541 2; : 7 Minimum Test error found - save the configuration ; : 7 | 0.561012 0.586993 0.590467 0.0471223 20495.3 0; : 8 | 0.559195 0.590522 0.590271 0.0471869 20505.1 1; : 9 | 0.558998 0.588766 0.598449 0.0469787 20193.3 2; : 10 | 0.555383 0.590075 0.591595 0.0470733 20451 3; : 11 Minimum Test error found - save the configuration ; : 11 | 0.555591 0.582449 0.595129 0.047292 20327.2 0; : 12 Minimum Test error found - save the configuration ; : 12 | 0.550993 0.581236 0.592181 0.0472746 20436.5 0; : 13 | 0.548186 0.58351 0.592876 0.0471057 20404.2 1; : 14 | 0.547427 0.581875 0.592374 0.0471592 20425 2; : 15 Minimum Test error found - save the configuration ; : 15 | 0.545473 0.580893 0.592763 0.0477516 20432.6 0; : 16 | 0.544618 0.582994 0.591861 0.0472249 20446.7 1; : 17 | 0.542847 0.586139 0.592563 0.047232 20420.6 2; : 18 | 0.542463 0.586829 0.59647 0.0472837 20277.3 3; : 19 | 0.540337 0.582774 0.592992 0.0472829 20406.5 4; : 20 | 0.538876 0.589547 0.592937 0.0473047 20409.4 5; : ; : Elapsed time for training with 14000 events: 11.9 sec ; : Evaluate deep neural network on CPU using batches with size = 128; : ; DNN_CPU : [dataset] : Evaluation of DNN_CPU on training sample (14000 events); : Elapsed time for evaluation of 14000 events: 0.247 sec ; : Creating xml weight file: ␛[0;36mda,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:25014,Test,Test,25014,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,1,['Test'],['Test']
Testability,"-----------------------------------------------; | Welcome to ROOT 6.10/01 http://root.cern.ch |; | (c) 1995-2017, The ROOT Team |; | Built for macosx64 |; | From heads/v6-10-00-patches@v6-10-00-25-g9f78c3a, Jul 03 2017, 11:39:44 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; -------------------------------------------------------------------------. root [0] .x hsimple.C; Now execute demos.C, which brings up the button bar shown on the left. You can click on any button to execute another example. To see the source, open the corresponding source file (for example fit1.C). Once you are done, and want to quit the ROOT session, you can do so by typing .q.; root[] .x demos.C; root[] .q; 20.2 $ROOTSYS/test; The test directory contains a set of examples that represent all areas of the framework. When a new release is cut, the examples in this directory are compiled and run to test the new release’s backward compatibility.; We see these source files:. Makefile; Makefile to build all test programs. hsimple.cxx; Simple test program that creates and saves some histograms. MainEvent.cxx; Simple test program that creates a ROOT Tree object and fills it with some simple structures but also with complete histograms. This program uses the files Event.cxx, EventCint.cxx and Event.h. An example of a procedure to link this program is in bind_Event. Note that the Makefile invokes the rootcling utility to generate the Cling interface EventCint.cxx. Event.cxx; Implementation for classes Event and Track. minexam.cxx; Simple test program for data fitting. tcollex.cxx; Example usage of the ROOT collection classes. tcollbm.cxx; Benchmarks of ROOT collection classes. ctorture.cxx; Test program for the class TComplex. tstring.cxx; Example usage of the ROOT string class. vmatrix.cxx; Verification program for the TMatrix class. vvector.cxx; Verification program for the TVectorclass. vlazy.cxx; Verification program for lazy matrices. hworld.cxx; Small program showing basic grap",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1075451,test,test,1075451,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['test']
Testability,"---------------------------------------------; : Evaluate regression method: DNN_CPU; : TestRegression (testing); : Calculate regression for all events; : Elapsed time for evaluation of 9000 events: 0.23 sec ; : TestRegression (training); : Calculate regression for all events; : Elapsed time for evaluation of 1000 events: 0.0277 sec ; TFHandler_DNN_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: -0.027271 1.0264 [ -3.3694 5.7307 ]; : var2: 0.0028453 0.98623 [ -5.7307 5.7307 ]; : fvalue: 163.91 83.651 [ 1.6186 394.84 ]; : -----------------------------------------------------------; TFHandler_DNN_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: -0.027271 1.0264 [ -3.3694 5.7307 ]; : var2: 0.0028453 0.98623 [ -5.7307 5.7307 ]; : fvalue: 163.91 83.651 [ 1.6186 394.84 ]; : -----------------------------------------------------------; : Evaluate regression method: BDTG; : TestRegression (testing); : Calculate regression for all events; : Elapsed time for evaluation of 9000 events: 2.09 sec ; : TestRegression (training); : Calculate regression for all events; : Elapsed time for evaluation of 1000 events: 0.234 sec ; TFHandler_BDTG : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 3.3352 1.1893 [ 0.00020069 5.0000 ]; : var2: 2.4860 1.4342 [ 0.00071490 5.0000 ]; : fvalue: 163.91 83.651 [ 1.6186 394.84 ]; : -----------------------------------------------------------; : ; : Evaluation results ranked by smallest RMS on test sample:; : (""Bias"" quotes the mean deviation of the regression from true target.; : ""MutInf"" is the ""Mutual Information"" between regression and target.; : Indicated by ""_T"" are the corresponding ""truncated"" quantities ob-; : tained when removing events deviating more than 2sigma from average.); : ----------------------------------------------------------------------------------------------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:131820,Test,TestRegression,131820,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,2,"['Test', 'test']","['TestRegression', 'testing']"
Testability,----------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.725372 0.686272 0.190597 0.0152439 14599.1 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.695636 0.683324 0.189128 0.015082 14708.8 0; : 3 | 0.691864 0.689576 0.189646 0.0148842 14648.6 1; : 4 Minimum Test error found - save the configuration ; : 4 | 0.689168 0.677551 0.190642 0.015026 14577.3 0; : 5 | 0.686885 0.678678 0.189865 0.0148775 14629.7 1; : 6 | 0.68905 0.681357 0.189104 0.014885 14694.1 2; : 7 | 0.687138 0.683485 0.19023 0.0152893 14633.6 3; : 8 | 0.686429 0.685529 0.189996 0.0147979 14612 4; : 9 | 0.685179 0.683467 0.190317 0.0152552 14623.4 5; : 10 Minimum Test error found - save the configuration ; : 10 | 0.684262 0.673795 0.18992 0.0153518 14664.7 0; : 11 Minimum Test error found - save the configuration ; : 11 | 0.682907 0.671521 0.194162 0.0155002 14328.7 0; : 12 | 0.693473 0.677553 0.188937 0.0147664 14698.2 1; : 13 | 0.695581 0.671789 0.190501 0.0149406 14581.9 2; : 14 | 0.68024 0.680521 0.188432 0.0146998 14735.3 3; : 15 | 0.68435 0.688062 0.189615 0.0147881 14643.1 4; : 16 | 0.686476 0.675588 0.190015 0.0152195 14645.7 5; : 17 | 0.677004 0.674528 0.190369 0.0146787 14571.1 6; : 18 Minimum Test error found - save the configuration ; : 18 | 0.670403 0.662 0.188594 0.0151297 14758.1 0; : 19 | 0.673327 0.684121 0.189356 0.0146185 14650.5 1; : 20 | 0.68729 0.678527 0.188558 0.0148948 14741.2 2; : ; : Elapsed time for training with 3200 events: 3.82 sec ; : Evaluate deep neural network on CPU using batches with size = 256; : ; TMVA_DNN : [dataset] : Evaluation of TMVA_DNN on training sample (3200 events); : Elapsed time for evaluation of 3200 events: 0.0999 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAClassification_TMVA_DNN.weights.xml␛[0m; : Cr,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html:19141,Test,Test,19141,doc/master/TMVA__RNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html,1,['Test'],['Test']
Testability,"--------------------------------------; // ```; // End of tree registration; ; // Set individual event weights (the variables must exist in the original TTree); // - for signal : `dataloader->SetSignalWeightExpression (""weight1*weight2"");`; // - for background: `dataloader->SetBackgroundWeightExpression(""weight1*weight2"");`; dataloader->SetBackgroundWeightExpression( ""weight"" );; ; // Apply additional cuts on the signal and background samples (can be different); TCut mycuts = """"; // for example: TCut mycuts = ""abs(var1)<0.5 && abs(var2-0.5)<1"";; TCut mycutb = """"; // for example: TCut mycutb = ""abs(var1)<0.5"";; ; // Tell the dataloader how to use the training and testing events; //; // If no numbers of events are given, half of the events in the tree are used; // for training, and the other half for testing:; //; // dataloader->PrepareTrainingAndTestTree( mycut, ""SplitMode=random:!V"" );; //; // To also specify the number of testing events, use:; //; // dataloader->PrepareTrainingAndTestTree( mycut,; // ""NSigTrain=3000:NBkgTrain=3000:NSigTest=3000:NBkgTest=3000:SplitMode=Random:!V"" );; dataloader->PrepareTrainingAndTestTree( mycuts, mycutb,; ""nTrain_Signal=1000:nTrain_Background=1000:SplitMode=Random:NormMode=NumEvents:!V"" );; ; // ### Book MVA methods; //; // Please lookup the various method configuration options in the corresponding cxx files, eg:; // src/MethoCuts.cxx, etc, or here: http://tmva.sourceforge.net/old_site/optionRef.html; // it is possible to preset ranges in the option string in which the cut optimisation should be done:; // ""...:CutRangeMin[2]=-1:CutRangeMax[2]=1""..."", where [2] is the third input variable; ; // Cut optimisation; if (Use[""Cuts""]); factory->BookMethod( dataloader, TMVA::Types::kCuts, ""Cuts"",; ""!H:!V:FitMethod=MC:EffSel:SampleSize=200000:VarProp=FSmart"" );; ; if (Use[""CutsD""]); factory->BookMethod( dataloader, TMVA::Types::kCuts, ""CutsD"",; ""!H:!V:FitMethod=MC:EffSel:SampleSize=200000:VarProp=FSmart:VarTransform=Decorrelate"" );; ; if (Us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:90889,test,testing,90889,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,3,['test'],['testing']
Testability,"--------------------------------------; : DataSet MVA ; : Name: Method: ROC-integ; : datasetcv Fisher : 0.971; : datasetcv BDTG : 0.965; : -------------------------------------------------------------------------------------------------------------------; : ; : Testing efficiency compared to training efficiency (overtraining check); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA Signal efficiency: from test sample (from training sample) ; : Name: Method: @B=0.01 @B=0.10 @B=0.30 ; : -------------------------------------------------------------------------------------------------------------------; : datasetcv Fisher : 0.665 (0.665) 0.922 (0.922) 0.980 (0.980); : datasetcv BDTG : 0.617 (0.617) 0.914 (0.914) 0.974 (0.974); : -------------------------------------------------------------------------------------------------------------------; : ; <HEADER> Dataset:datasetcv : Created tree 'TestTree' with 1998 events; : ; <HEADER> Dataset:datasetcv : Created tree 'TrainTree' with 1998 events; : ; <HEADER> Factory : Thank you for using TMVA!; : For citation information, please visit: http://tmva.sf.net/citeTMVA.html; : Evaluation done.; Summary for method BDT; Fold 0: ROC int: 0.972504, BkgEff@SigEff=0.3: 0.981; Fold 1: ROC int: 0.96115, BkgEff@SigEff=0.3: 0.975; Summary for method Fisher; Fold 0: ROC int: 0.976137, BkgEff@SigEff=0.3: 0.986; Fold 1: ROC int: 0.96584, BkgEff@SigEff=0.3: 0.975; ==> Wrote root file: TMVACV.root; ==> TMVACrossValidation is done!; (int) 0; ; #include <cstdlib>; #include <iostream>; #include <map>; #include <string>; ; #include ""TChain.h""; #include ""TFile.h""; #include ""TTree.h""; #include ""TString.h""; #include ""TObjString.h""; #include ""TSystem.h""; #include ""TROOT.h""; ; #include ""TMVA/CrossValidation.h""; #include ""TMVA/DataLoader.h""; #include ""TMVA/Factory.h""; #include ""TMVA/Tools.h""; #include ""TMVA/TMVAGui.h""; ; // Helper function to load data into TTrees.; TTree ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVACrossValidation_8C.html:18063,Test,TestTree,18063,doc/master/TMVACrossValidation_8C.html,https://root.cern,https://root.cern/doc/master/TMVACrossValidation_8C.html,1,['Test'],['TestTree']
Testability,------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 34747.6 33079.7 0.0192196 0.00176099 45822.6 0; : 2 Minimum Test error found - save the configuration ; : 2 | 34222.2 32417.1 0.0195047 0.0017702 45109.9 0; : 3 Minimum Test error found - save the configuration ; : 3 | 33496 31618.4 0.0197158 0.00178336 44611.8 0; : 4 Minimum Test error found - save the configuration ; : 4 | 32719.2 30843.2 0.0198205 0.00178286 44351.8 0; : 5 Minimum Test error found - save the configuration ; : 5 | 31879.6 30001 0.0200761 0.00184919 43891 0; : 6 Minimum Test error found - save the configuration ; : 6 | 30965 29177.4 0.0203037 0.00185469 43362.8 0; : 7 Minimum Test error found - save the configuration ; : 7 | 30273.8 28682.9 0.0206315 0.00190133 42711.9 0; : 8 Minimum Test error found - save the configuration ; : 8 | 29852.4 28319.6 0.0206438 0.00186969 42611.9 0; : 9 Minimum Test error found - save the configuration ; : 9 | 29498.2 28000.3 0.0204359 0.0018446 43030.8 0; : 10 Minimum Test error found - save the configuration ; : 10 | 29182.7 27696.8 0.0202998 0.00181461 43277.8 0; : 11 Minimum Test error found - save the configuration ; : 11 | 28878.3 27413.2 0.0196838 0.00176755 44652.2 0; : 12 Minimum Test error found - save the configuration ; : 12 | 28593.7 27134.7 0.0196593 0.00176089 44696.8 0; : 13 Minimum Test error found - save the configuration ; : 13 | 28310.5 26871.8 0.0196662 0.00176724 44695.4 0; : 14 Minimum Test error found - save the configuration ; : 14 | 28043.7 26610.8 0.019761 0.00176915 44464.7 0; : 15 Minimum Test error found - save the configuration ; : 15 | 27781.4 26354.5 0.0197825 0.0017915 44466.6 0; : 16 Minimum Test error found - save the configuration ; : 16 | 27524.2 26104.3 0.0196926 0.00175551 44600.3 0; : 17 Minimum Test error found -,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:11970,Test,Test,11970,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"----------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.70053 0.692869 0.625222 0.0421632 4287.73 0; : 2 | 0.694153 0.694394 0.638111 0.0419725 4193.66 1; : 3 | 0.689625 0.697522 0.634816 0.0412563 4211.88 2; : 4 | 0.681203 0.694822 0.628686 0.0407413 4252.1 3; : 5 Minimum Test error found - save the configuration ; : 5 | 0.673678 0.681248 0.619972 0.0411822 4319.36 0; : 6 Minimum Test error found - save the configuration ; : 6 | 0.660284 0.667264 0.614022 0.0406714 4360.33 0; : 7 Minimum Test error found - save the configuration ; : 7 | 0.640131 0.636981 0.602694 0.0404119 4446.16 0; : 8 | 0.616397 0.638352 0.610274 0.0409979 4391.54 1; : 9 Minimum Test error found - save the configuration ; : 9 | 0.599679 0.608826 0.618875 0.0405848 4323.09 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.585295 0.60026 0.603058 0.0404042 4443.23 0; : ; : Elapsed time for training with 3200 events: 6.25 sec ; : Evaluate deep neural network on CPU using batches with size = 100; : ; TMVA_LSTM : [dataset] : Evaluation of TMVA_LSTM on training sample (3200 events); : Elapsed time for evaluation of 3200 events: 0.214 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAClassification_TMVA_LSTM.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVAClassification_TMVA_LSTM.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: TMVA_DNN for Classification; : ; : Start of deep neural network training on CPU using MT, nthreads = 4; : ; : ***** Deep Learning Network *****; DEEP NEURAL NETWORK: Depth = 4 Input = ( 1, 1, 300 ) Batch size = 256 Loss function = C; Layer 0 DENSE Layer: ( Input = 300 , Width = 64 ) Output = ( 1 , 256 , 64 ) Activation Function = Tanh; Layer 1 DENSE Layer: ( Input = 64 , Width = 64 ) Output = (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html:16624,Test,Test,16624,doc/master/TMVA__RNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html,1,['Test'],['Test']
Testability,----------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.70053 0.692869 0.629389 0.0419042 4255.43 0; : 2 | 0.694153 0.694394 0.642643 0.0421501 4163.24 1; : 3 | 0.689625 0.697522 0.642119 0.0416746 4163.58 2; : 4 | 0.681203 0.694822 0.637781 0.0412238 4190.71 3; : 5 Minimum Test error found - save the configuration ; : 5 | 0.673678 0.681248 0.623882 0.0409529 4288.69 0; : 6 Minimum Test error found - save the configuration ; : 6 | 0.660284 0.667264 0.616834 0.0410715 4342.07 0; : 7 Minimum Test error found - save the configuration ; : 7 | 0.640131 0.636981 0.607427 0.0404816 4409.59 0; : 8 | 0.616397 0.638352 0.60791 0.0403928 4405.16 1; : 9 Minimum Test error found - save the configuration ; : 9 | 0.599679 0.608826 0.606268 0.0407993 4421.11 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.585295 0.60026 0.604906 0.0402508 4427.48 0; : 11 Minimum Test error found - save the configuration ; : 11 | 0.568589 0.592822 0.598106 0.0406425 4484.6 0; : 12 Minimum Test error found - save the configuration ; : 12 | 0.559657 0.589421 0.600393 0.0404151 4464.46 0; : 13 Minimum Test error found - save the configuration ; : 13 | 0.552318 0.583187 0.601709 0.0405559 4455.11 0; : 14 Minimum Test error found - save the configuration ; : 14 | 0.540541 0.58147 0.593964 0.0401674 4514.29 0; : 15 Minimum Test error found - save the configuration ; : 15 | 0.532596 0.581192 0.589633 0.0399271 4547.88 0; : 16 Minimum Test error found - save the configuration ; : 16 | 0.529842 0.56732 0.599541 0.040336 4470.63 0; : 17 | 0.521737 0.574812 0.603666 0.0406979 4440.75 1; : 18 Minimum Test error found - save the configuration ; : 18 | 0.517445 0.565391 0.598324 0.0405273 4481.92 0; : 19 Minimum Test error found - save the configuration ; : 19 | 0.509836 0.557055 0.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:16289,Test,Test,16289,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['Test'],['Test']
Testability,---------------------------------; SVM : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_SVM : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.12216 0.20255 [ -1.0614 1.0246 ]; : myvar2: -0.12333 0.30492 [ -1.2280 0.99911 ]; : var3: 0.097148 0.21347 [ -1.0158 0.99984 ]; : var4: 0.17495 0.23851 [ -1.2661 1.0694 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: BDT; : ; BDT : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_BDT : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.21781 1.7248 [ -9.8605 7.9024 ]; : myvar2: -0.062175 1.1106 [ -4.0854 4.0259 ]; : var3: 0.16451 1.0589 [ -5.3563 4.6422 ]; : var4: 0.43566 1.2253 [ -6.9675 5.0307 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: RuleFit; : ; RuleFit : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_RuleFit : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.21781 1.7248 [ -9.8605 7.9024 ]; : myvar2: -0.062175 1.1106 [ -4.0854 4.0259 ]; : var3: 0.16451 1.0589 [ -5.3563 4.6422 ]; : var4: 0.43566 1.2253 [ -6.9675 5.0307 ]; : -----------------------------------------------------------; : ; : Evaluation results ranked by best signal efficiency and purity (area); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA ; : Name: Method: ROC-integ; : dataset DNN_CPU : 0.921; : dataset LD : 0.921; : dataset MLPBNN : 0.919; : dataset LikelihoodPCA : 0.913; : dataset CutsD : 0.908; : dataset SVM : 0.898; : dataset RuleFit : 0.881; : dataset BDT : 0.881; : dataset KNN : 0.838; : dataset PDEFoam : 0.822; : dataset PDERS : 0.797; : dataset Cuts ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:77700,test,test,77700,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['test'],['test']
Testability,"------------------------------; 427 ; 428 // this method is used to decide whether an event is signal- or background-like; 429 // the reference cut ""xC"" is taken to be where; 430 // Int_[-oo,xC] { PDF_S(x) dx } = Int_[xC,+oo] { PDF_B(x) dx }; 431 virtual Bool_t IsSignalLike();; 432 virtual Bool_t IsSignalLike(Double_t mvaVal);; 433 ; 434 ; 435 Bool_t HasMVAPdfs() const { return fHasMVAPdfs; }; 436 virtual void SetAnalysisType( Types::EAnalysisType type ) { fAnalysisType = type; }; 437 Types::EAnalysisType GetAnalysisType() const { return fAnalysisType; }; 438 Bool_t DoRegression() const { return fAnalysisType == Types::kRegression; }; 439 Bool_t DoMulticlass() const { return fAnalysisType == Types::kMulticlass; }; 440 ; 441 // setter method for suppressing writing to XML and writing of standalone classes; 442 void DisableWriting(Bool_t setter){ fModelPersistence = setter?kFALSE:kTRUE; }//DEPRECATED; 443 ; 444 protected:; 445 mutable const Event *fTmpEvent; //! temporary event when testing on a different DataSet than the own one; 446 DataSet *fTmpData = nullptr; //! temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues); 447 // helper variables for JsMVA; 448 IPythonInteractive *fInteractive = nullptr;; 449 bool fExitFromTraining = false;; 450 UInt_t fIPyMaxIter = 0, fIPyCurrentIter = 0;; 451 ; 452 public:; 453 ; 454 // initializing IPythonInteractive class (for JsMVA only); 455 inline void InitIPythonInteractive(){; 456 if (fInteractive) delete fInteractive;; 457 fInteractive = new IPythonInteractive();; 458 }; 459 ; 460 // get training errors (for JsMVA only); 461 inline TMultiGraph* GetInteractiveTrainingError(){return fInteractive->Get();}; 462 ; 463 // stop's the training process (for JsMVA only); 464 inline void ExitFromTraining(){; 465 fExitFromTraining = true;; 466 }; 467 ; 468 // check's if the training ended (for JsMVA only); 469 inline bool TrainingEnded(){; 470 if (fExitFromTraining && fInteractive){; 471 delete ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodBase_8h_source.html:19936,test,testing,19936,doc/master/MethodBase_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html,1,['test'],['testing']
Testability,"-----------------------------; : No variable ranking supplied by classifier: DNN_CPU; : No variable ranking supplied by classifier: SVM; BDT : Ranking result (top variable is best ranked); : ----------------------------------------; : Rank : Variable : Variable Importance; : ----------------------------------------; : 1 : var4 : 2.697e-01; : 2 : myvar1 : 2.467e-01; : 3 : myvar2 : 2.460e-01; : 4 : var3 : 2.377e-01; : ----------------------------------------; RuleFit : Ranking result (top variable is best ranked); : -------------------------------; : Rank : Variable : Importance; : -------------------------------; : 1 : var4 : 1.000e+00; : 2 : myvar1 : 6.981e-01; : 3 : var3 : 5.947e-01; : 4 : myvar2 : 4.105e-01; : -------------------------------; TH1.Print Name = TrainingHistory_DNN_CPU_trainingError, Entries= 0, Total sum= 15.1237; TH1.Print Name = TrainingHistory_DNN_CPU_valError, Entries= 0, Total sum= 14.7947; Factory : === Destroy and recreate all methods via weight files for testing ===; : ; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_Cuts.weights.xml␛[0m; : Read cuts optimised using sample of MC events; : Reading 100 signal efficiency bins for 4 variables; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_CutsD.weights.xml␛[0m; : Read cuts optimised using sample of MC events; : Reading 100 signal efficiency bins for 4 variables; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_Likelihood.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_LikelihoodPCA.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_PDERS.weights.xml␛[0m; : signal and background scales: 0.001 0.001; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_PDEFoam.weights.xml␛[0m; : Read foams from file: ␛[0;36mdataset/weights/TMVAClassification_PDEFoam.weights_foams.root␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_KNN.weights.xml␛[0m; : Creating kd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:63173,test,testing,63173,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['test'],['testing']
Testability,"--------------------------; 146 ; 147 // prepare tree branch with the method's discriminating variable; 148 void AddOutput( Types::ETreeType type, Types::EAnalysisType analysisType );; 149 ; 150 // performs classifier training; 151 // calls methods Train() implemented by derived classes; 152 void TrainMethod();; 153 ; 154 // optimize tuning parameters; 155 virtual std::map<TString,Double_t> OptimizeTuningParameters(TString fomType=""ROCIntegral"", TString fitType=""FitGA"");; 156 virtual void SetTuneParameters(std::map<TString,Double_t> tuneParameters);; 157 ; 158 virtual void Train() = 0;; 159 ; 160 // store and retrieve time used for training; 161 void SetTrainTime( Double_t trainTime ) { fTrainTime = trainTime; }; 162 Double_t GetTrainTime() const { return fTrainTime; }; 163 ; 164 // store and retrieve time used for testing; 165 void SetTestTime ( Double_t testTime ) { fTestTime = testTime; }; 166 Double_t GetTestTime () const { return fTestTime; }; 167 ; 168 // performs classifier testing; 169 virtual void TestClassification();; 170 virtual Double_t GetKSTrainingVsTest(Char_t SorB, TString opt=""X"");; 171 ; 172 // performs multiclass classifier testing; 173 virtual void TestMulticlass();; 174 ; 175 // performs regression testing; 176 virtual void TestRegression( Double_t& bias, Double_t& biasT,; 177 Double_t& dev, Double_t& devT,; 178 Double_t& rms, Double_t& rmsT,; 179 Double_t& mInf, Double_t& mInfT, // mutual information; 180 Double_t& corr,; 181 Types::ETreeType type );; 182 ; 183 // options treatment; 184 virtual void Init() = 0;; 185 virtual void DeclareOptions() = 0;; 186 virtual void ProcessOptions() = 0;; 187 virtual void DeclareCompatibilityOptions(); // declaration of past options; 188 ; 189 // reset the Method --> As if it was not yet trained, just instantiated; 190 // virtual void Reset() = 0;; 191 //for the moment, I provide a dummy (that would not work) default, just to make; 192 // compilation/running w/o parameter optimisation still possible; 193 vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodBase_8h_source.html:5819,test,testing,5819,doc/master/MethodBase_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html,1,['test'],['testing']
Testability,"------------------------; 147 ; 148 std::cout << std::endl;; 149 std::cout << ""==> Start TMVAClassification"" << std::endl;; 150 ; 151 // Select methods (don't look at this code - not of interest); 152 if (myMethodList != """") {; 153 for (std::map<std::string,int>::iterator it = Use.begin(); it != Use.end(); it++) it->second = 0;; 154 ; 155 std::vector<TString> mlist = TMVA::gTools().SplitString( myMethodList, ',' );; 156 for (UInt_t i=0; i<mlist.size(); i++) {; 157 std::string regMethod(mlist[i]);; 158 ; 159 if (Use.find(regMethod) == Use.end()) {; 160 std::cout << ""Method \"""" << regMethod << ""\"" not known in TMVA under this name. Choose among the following:"" << std::endl;; 161 for (std::map<std::string,int>::iterator it = Use.begin(); it != Use.end(); it++) std::cout << it->first << "" "";; 162 std::cout << std::endl;; 163 return 1;; 164 }; 165 Use[regMethod] = 1;; 166 }; 167 }; 168 ; 169 // --------------------------------------------------------------------------------------------------; 170 ; 171 // Here the preparation phase begins; 172 ; 173 // Read training and test data; 174 // (it is also possible to use ASCII format as input -> see TMVA Users Guide); 175 // Set the cache directory for the TFile to the current directory. The input; 176 // data file will be downloaded here if not present yet, then it will be read; 177 // from the cache path directly.; 178 TFile::SetCacheFileDir(""."");; 179 std::unique_ptr<TFile> input{TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"")};; 180 if (!input || input->IsZombie()) {; 181 throw std::runtime_error(""ERROR: could not open data file"");; 182 }; 183 std::cout << ""--- TMVAClassification : Using input file: "" << input->GetName() << std::endl;; 184 ; 185 // Register the training and test trees; 186 ; 187 TTree *signalTree = (TTree*)input->Get(""TreeS"");; 188 TTree *background = (TTree*)input->Get(""TreeB"");; 189 ; 190 // Create a ROOT output file where TMVA will store ntuples, histograms, etc.; 191 TString o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C_source.html:6356,test,test,6356,doc/master/TMVAClassification_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C_source.html,1,['test'],['test']
Testability,"---------------------; ; # The ARGUS background shape has a sharp kinematic cutoff at m=m0; # and is prone to evaluation errors if the cutoff parameter m0; # is floated: when the pdf cutoff value is lower than that in data; # events with m>m0 will have zero probability; ; # Perform unbinned ML fit. Print detailed error messages for up to; # 10 events per likelihood evaluation. The default error handling strategy; # is to return a very high value of the likelihood to MINUIT if errors occur,; # which will force MINUIT to retreat from the problematic area; ; argus.fitTo(data, PrintEvalErrors=10); ; # Perform another fit. In self configuration only the number of errors per; # likelihood evaluation is shown, it is greater than zero. The; # EvalErrorWall(kFALSE) arguments disables the default error handling strategy; # and will cause the actual (problematic) value of the likelihood to be passed; # to MINUIT.; #; # NB: Use of self option is NOT recommended as default strategt as broken -log(L) values; # can often be lower than 'good' ones because offending events are removed.; # ROOT.This may effectively create a False minimum in problem areas. ROOT.This is clearly; # illustrated in the second plot; ; m0.setError(0.1); argus.fitTo(data, PrintEvalErrors=0, EvalErrorWall=False); ; # Plot likelihood as function of m0; # ------------------------------------------------------------------; ; # Construct likelihood function of model and data; nll = argus.createNLL(data); ; # Plot likelihood in m0 in range that includes problematic values; # In self configuration no messages are printed for likelihood evaluation errors,; # but if an likelihood value evaluates with error, corresponding value; # on the curve will be set to the value given in EvalErrorValue().; ; frame2 = m0.frame(Range=(5.288, 5.293), Title=""-log(L) scan vs m0, regions masked""); nll.plotOn(frame2, ShiftToZero=True, PrintEvalErrors=-1, EvalErrorValue=(nll.getVal() + 10), LineColor=""r""); frame2.SetMaximum(15); frame2.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf606__nllerrorhandling_8py.html:1994,log,log,1994,doc/master/rf606__nllerrorhandling_8py.html,https://root.cern,https://root.cern/doc/master/rf606__nllerrorhandling_8py.html,1,['log'],['log']
Testability,"-----------------; : ; : ; : Confusion matrices for all methods; : -------------------------------------------------------------------------------------------------------; : ; : Does a binary comparison between the two classes given by a ; : particular row-column combination. In each case, the class ; : given by the row is considered signal while the class given ; : by the column index is considered background.; : ; : === Showing confusion matrix for method : BDTG ; : (Signal Efficiency for Background Efficiency 0.01%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.497 (0.373) 0.710 (0.693) 0.680 (0.574) ; : bg0 0.271 (0.184) - 0.239 (0.145) 0.705 (0.667) ; : bg1 0.855 (0.766) 0.369 (0.222) - 0.587 (0.578) ; : bg2 0.714 (0.585) 0.705 (0.581) 0.648 (0.601) - ; : ; : (Signal Efficiency for Background Efficiency 0.10%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.911 (0.853) 0.991 (0.981) 0.945 (0.913) ; : bg0 0.833 (0.774) - 0.654 (0.582) 0.930 (0.901) ; : bg1 0.971 (0.980) 0.716 (0.681) - 0.871 (0.862) ; : bg2 0.976 (0.951) 0.971 (0.973) 0.936 (0.941) - ; : ; : (Signal Efficiency for Background Efficiency 0.30%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.978 (0.957) 0.999 (1.000) 0.998 (0.997) ; : bg0 0.965 (0.926) - 0.874 (0.835) 0.991 (0.976) ; : bg1 1.000 (0.999) 0.916 (0.894) - 0.988 (0.985) ; : bg2 0.999 (0.999) 0.997 (0.999) 0.996 (0.997) - ; : ; : === Showing confusion matrix for method : MLP ; : (Signal Efficiency for Background Efficiency 0.01%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.465 (0.490) 0.974 (0.953) 0.632 (0.498) ; : bg0 0.320 (0.269) - 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:26487,test,test,26487,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,4,['test'],['test']
Testability,-----------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.605916 0.542204 0.0761789 0.00657979 45977.6 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.512732 0.499825 0.0771995 0.00657724 45311.5 0; : 3 Minimum Test error found - save the configuration ; : 3 | 0.477495 0.458718 0.0776312 0.00665553 45085.9 0; : 4 Minimum Test error found - save the configuration ; : 4 | 0.438338 0.418147 0.0780597 0.00669006 44837 0; : 5 Minimum Test error found - save the configuration ; : 5 | 0.407569 0.391703 0.0786075 0.00678976 44557.2 0; : 6 Minimum Test error found - save the configuration ; : 6 | 0.387736 0.373696 0.0792581 0.00678916 44156.9 0; : 7 Minimum Test error found - save the configuration ; : 7 | 0.373399 0.360485 0.0791536 0.00677002 44208.9 0; : 8 Minimum Test error found - save the configuration ; : 8 | 0.362792 0.352336 0.0796639 0.00682572 43933 0; : 9 Minimum Test error found - save the configuration ; : 9 | 0.353594 0.340526 0.0805399 0.00700876 43519 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.345712 0.336826 0.080966 0.0069933 43259.2 0; : 11 Minimum Test error found - save the configuration ; : 11 | 0.338399 0.329567 0.0802544 0.00691181 43630.9 0; : 12 Minimum Test error found - save the configuration ; : 12 | 0.333122 0.322325 0.0804981 0.00689735 43477.8 0; : 13 Minimum Test error found - save the configuration ; : 13 | 0.326577 0.317097 0.0800716 0.00688531 43724 0; : 14 Minimum Test error found - save the configuration ; : 14 | 0.320979 0.311994 0.080369 0.00694962 43585.2 0; : 15 Minimum Test error found - save the configuration ; : 15 | 0.316442 0.305918 0.0803736 0.00690045 43553.3 0; : 16 Minimum Test error found - save the configuration ; : 16 | 0.311672 0.301667 0.0807629 0.00695777 43357.4 0; : 17 Minimum Test,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:15591,Test,Test,15591,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['Test'],['Test']
Testability,"-----------------; : var1 var2 var3 var4; : var1: +1.000 +0.407 +0.610 +0.834; : var2: +0.407 +1.000 +0.710 +0.741; : var3: +0.610 +0.710 +1.000 +0.851; : var4: +0.834 +0.741 +0.851 +1.000; : ----------------------------------------; DataSetInfo : Correlation matrix (bg2):; : ----------------------------------------; : var1 var2 var3 var4; : var1: +1.000 -0.647 -0.016 -0.013; : var2: -0.647 +1.000 +0.015 +0.002; : var3: -0.016 +0.015 +1.000 -0.024; : var4: -0.013 +0.002 -0.024 +1.000; : ----------------------------------------; DataSetFactory : [dataset] : ; : ; Factory : Booking method: ␛[1mMLP␛[0m; : ; MLP : Building Network. ; : Initializing weights; Factory : Booking method: ␛[1mPDEFoam␛[0m; : ; Factory : Booking method: ␛[1mDL_CPU␛[0m; : ; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=N:WeightInitialization=XAVIERUNIFORM:Architecture=GPU:Layout=TANH|100,TANH|50,TANH|10,LINEAR:TrainingStrategy=Optimizer=ADAM,LearningRate=1e-3,TestRepetitions=1,ConvergenceSteps=10,BatchSize=100,MaxEpochs=20""; : The following options are set:; : - By User:; : <none>; : - Default:; : Boost_num: ""0"" [Number of times the classifier will be boosted]; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=N:WeightInitialization=XAVIERUNIFORM:Architecture=GPU:Layout=TANH|100,TANH|50,TANH|10,LINEAR:TrainingStrategy=Optimizer=ADAM,LearningRate=1e-3,TestRepetitions=1,ConvergenceSteps=10,BatchSize=100,MaxEpochs=20""; : The following options are set:; : - By User:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""N"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help messag",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:4041,Test,TestRepetitions,4041,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['Test'],['TestRepetitions']
Testability,"----------------; 1936 TString header1 = TString::Format(""%-15s%-15s%-15s%-15s%-15s%-15s"", ""Dataset"", ""MVA Method"", ""ROC AUC"", ""Sig eff@B=0.01"",; 1937 ""Sig eff@B=0.10"", ""Sig eff@B=0.30"");; 1938 TString header2 = TString::Format(""%-15s%-15s%-15s%-15s%-15s%-15s"", ""Name:"", ""/ Class:"", ""test (train)"", ""test (train)"",; 1939 ""test (train)"", ""test (train)"");; 1940 Log() << kINFO << Endl;; 1941 Log() << kINFO << ""1-vs-rest performance metrics per class"" << Endl;; 1942 Log() << kINFO << hLine << Endl;; 1943 Log() << kINFO << Endl;; 1944 Log() << kINFO << ""Considers the listed class as signal and the other classes"" << Endl;; 1945 Log() << kINFO << ""as background, reporting the resulting binary performance."" << Endl;; 1946 Log() << kINFO << ""A score of 0.820 (0.850) means 0.820 was acheived on the"" << Endl;; 1947 Log() << kINFO << ""test set and 0.850 on the training set."" << Endl;; 1948 ; 1949 Log() << kINFO << Endl;; 1950 Log() << kINFO << header1 << Endl;; 1951 Log() << kINFO << header2 << Endl;; 1952 for (Int_t k = 0; k < 2; k++) {; 1953 for (Int_t i = 0; i < nmeth_used[k]; i++) {; 1954 if (k == 1) {; 1955 mname[k][i].ReplaceAll(""Variable_"", """");; 1956 }; 1957 ; 1958 const TString datasetName = itrMap->first;; 1959 const TString mvaName = mname[k][i];; 1960 ; 1961 MethodBase *theMethod = dynamic_cast<MethodBase *>(GetMethod(datasetName, mvaName));; 1962 if (theMethod == 0) {; 1963 continue;; 1964 }; 1965 ; 1966 Log() << kINFO << Endl;; 1967 TString row = TString::Format(""%-15s%-15s"", datasetName.Data(), mvaName.Data());; 1968 Log() << kINFO << row << Endl;; 1969 Log() << kINFO << ""------------------------------"" << Endl;; 1970 ; 1971 UInt_t numClasses = theMethod->fDataSetInfo.GetNClasses();; 1972 for (UInt_t iClass = 0; iClass < numClasses; ++iClass) {; 1973 ; 1974 ROCCurve *rocCurveTrain = GetROC(datasetName, mvaName, iClass, Types::kTraining);; 1975 ROCCurve *rocCurveTest = GetROC(datasetName, mvaName, iClass, Types::kTesting);; 1976 ; 1977 const TString className = theM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:81692,Log,Log,81692,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,3,['Log'],['Log']
Testability,------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.731202 0.712689 0.193045 0.0157486 14439.1 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.701214 0.698536 0.191577 0.0154545 14535.3 0; : 3 Minimum Test error found - save the configuration ; : 3 | 0.6901 0.69615 0.192163 0.0158037 14515.8 0; : 4 | 0.683586 0.700826 0.19294 0.0151654 14400.2 1; : 5 | 0.682085 0.701998 0.192893 0.0153949 14422.7 2; : 6 | 0.6867 0.696275 0.191869 0.0152227 14492.2 3; : 7 Minimum Test error found - save the configuration ; : 7 | 0.692231 0.691692 0.197632 0.0164904 14132.6 0; : 8 | 0.683383 0.694963 0.194299 0.0156318 14328.3 1; : 9 Minimum Test error found - save the configuration ; : 9 | 0.682898 0.684979 0.192122 0.0157399 14513.9 0; : 10 | 0.670592 0.688549 0.192796 0.0152906 14422.1 1; : 11 Minimum Test error found - save the configuration ; : 11 | 0.670202 0.684295 0.191832 0.0154715 14515.7 0; : 12 Minimum Test error found - save the configuration ; : 12 | 0.675447 0.682107 0.194058 0.0158608 14366.1 0; : 13 | 0.678105 0.691356 0.193716 0.0152633 14345.5 1; : 14 | 0.684972 0.687408 0.191852 0.0154194 14509.8 2; : 15 | 0.676423 0.689156 0.193176 0.0153404 14395.3 3; : 16 | 0.683185 0.689966 0.191807 0.0149908 14478.3 4; : 17 | 0.672717 0.689982 0.192316 0.0149466 14433.2 5; : 18 | 0.670449 0.68412 0.190877 0.0151753 14570.1 6; : 19 Minimum Test error found - save the configuration ; : 19 | 0.661329 0.670317 0.192098 0.0154074 14488.6 0; : 20 Minimum Test error found - save the configuration ; : 20 | 0.658253 0.661402 0.192014 0.0155677 14508.7 0; : ; : Elapsed time for training with 3200 events: 3.87 sec ; : Evaluate deep neural network on CPU using batches with size = 256; : ; TMVA_DNN : [dataset] : Evaluation of TMVA_DNN on training sample (3200 events); : Elapsed time for evaluation of 3200 events: 0.102 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAClassification_TMVA_DNN.weights.xml␛[0m,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:19973,Test,Test,19973,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['Test'],['Test']
Testability,"------------; : var1: 0.070769 0.28960 [ -1.0000 1.0000 ]; : var2: 0.074130 0.28477 [ -1.0000 1.0000 ]; : var3: 0.026106 0.24582 [ -1.0000 1.0000 ]; : var4: -0.034951 0.25587 [ -1.0000 1.0000 ]; : -----------------------------------------------------------; : Start of deep neural network training on CPU using MT, nthreads = 1; : ; TFHandler_DL_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 0.070769 0.28960 [ -1.0000 1.0000 ]; : var2: 0.074130 0.28477 [ -1.0000 1.0000 ]; : var3: 0.026106 0.24582 [ -1.0000 1.0000 ]; : var4: -0.034951 0.25587 [ -1.0000 1.0000 ]; : -----------------------------------------------------------; : ***** Deep Learning Network *****; DEEP NEURAL NETWORK: Depth = 4 Input = ( 1, 1, 4 ) Batch size = 100 Loss function = C; Layer 0 DENSE Layer: ( Input = 4 , Width = 100 ) Output = ( 1 , 100 , 100 ) Activation Function = Tanh; Layer 1 DENSE Layer: ( Input = 100 , Width = 50 ) Output = ( 1 , 100 , 50 ) Activation Function = Tanh; Layer 2 DENSE Layer: ( Input = 50 , Width = 10 ) Output = ( 1 , 100 , 10 ) Activation Function = Tanh; Layer 3 DENSE Layer: ( Input = 10 , Width = 4 ) Output = ( 1 , 100 , 4 ) Activation Function = Identity; : Using 3200 events for training and 800 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 0.691476; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.605916 0.542204 0.0761789 0.00657979 45977.6 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.512732 0.499825 0.0771995 0.00657724 45311.5 0; : 3 Minimum Test error found - save the configuration ; : 3 | 0.47749",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:14365,test,testing,14365,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['test'],['testing']
Testability,----------; LikelihoodPCA : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_LikelihoodPCA : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 1.1147 2.2628 [ -12.508 10.719 ]; : myvar2: -0.25554 1.1225 [ -4.1578 3.8995 ]; : var3: -0.19401 0.58225 [ -2.2950 1.8880 ]; : var4: -0.32038 0.33412 [ -1.3929 0.88819 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: PDERS; : ; PDERS : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_PDERS : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.21781 1.7248 [ -9.8605 7.9024 ]; : myvar2: -0.062175 1.1106 [ -4.0854 4.0259 ]; : var3: 0.16451 1.0589 [ -5.3563 4.6422 ]; : var4: 0.43566 1.2253 [ -6.9675 5.0307 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: PDEFoam; : ; PDEFoam : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_PDEFoam : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.21781 1.7248 [ -9.8605 7.9024 ]; : myvar2: -0.062175 1.1106 [ -4.0854 4.0259 ]; : var3: 0.16451 1.0589 [ -5.3563 4.6422 ]; : var4: 0.43566 1.2253 [ -6.9675 5.0307 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: KNN; : ; KNN : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_KNN : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.21781 1.7248 [ -9.8605 7.9024 ]; : myvar2: -0.062175 1.1106 [ -4.0854 4.0259 ]; : var3: 0.16451 1.0589 [ -5.3563 4.6422 ]; : var4: 0.43566 1.2253 [ -6.9675 5.0307 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: LD; : ; LD : [datase,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:72553,test,test,72553,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['test'],['test']
Testability,"---; ; # Perform fit and save result; r = model.fitTo(data, Save=True, PrintLevel=-1); ; # Print fit results; # ---------------------------------; ; # Summary printing: Basic info plus final values of floating fit parameters; r.Print(); ; # Verbose printing: Basic info, of constant parameters, and; # final values of floating parameters, correlations; r.Print(""v""); ; # Visualize correlation matrix; # -------------------------------------------------------; ; # Construct 2D color plot of correlation matrix; ROOT.gStyle.SetOptStat(0); ROOT.gStyle.SetPalette(1); hcorr = r.correlationHist(); ; # Visualize ellipse corresponding to single correlation matrix element; frame = ROOT.RooPlot(sigma1, sig1frac, 0.45, 0.60, 0.65, 0.90); frame.SetTitle(""Covariance between sigma1 and sig1frac""); r.plotOn(frame, sigma1, sig1frac, ""ME12ABHV""); ; # Access fit result information; # ---------------------------------------------------------; ; # Access basic information; print(""EDM = "", r.edm()); print(""-log(L) minimum = "", r.minNll()); ; # Access list of final fit parameter values; print(""final value of floating parameters""); r.floatParsFinal().Print(""s""); ; # Access correlation matrix elements; print(""correlation between sig1frac and a0 is "", r.correlation(sig1frac, a0)); print(""correlation between bkgfrac and mean is "", r.correlation(""bkgfrac"", ""mean"")); ; # Extract covariance and correlation matrix as ROOT.TMatrixDSym; cor = r.correlationMatrix(); cov = r.covarianceMatrix(); ; # Print correlation, matrix; print(""correlation matrix""); cor.Print(); print(""covariance matrix""); cov.Print(); ; # Persist fit result in root file; # -------------------------------------------------------------; ; # Open ROOT file save save result; f = ROOT.TFile(""rf607_fitresult.root"", ""RECREATE""); r.Write(""rf607""); f.Close(); ; # In a clean ROOT session retrieve the persisted fit result as follows:; # r = gDirectory.Get(""rf607""); ; c = ROOT.TCanvas(""rf607_fitresult"", ""rf607_fitresult"", 800, 400); c.Divide(2)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf607__fitresult_8py.html:2692,log,log,2692,doc/master/rf607__fitresult_8py.html,https://root.cern,https://root.cern/doc/master/rf607__fitresult_8py.html,1,['log'],['log']
Testability,"--; ; // The ARGUS background shape has a sharp kinematic cutoff at m=m0; // and is prone to evaluation errors if the cutoff parameter m0; // is floated: when the pdf cutoff value is lower than that in data; // events with m>m0 will have zero probability; ; // Perform unbinned ML fit. Print detailed error messages for up to; // 10 events per likelihood evaluation. The default error handling strategy; // is to return a very high value of the likelihood to MINUIT if errors occur,; // which will force MINUIT to retreat from the problematic area; ; argus.fitTo(*data, PrintEvalErrors(10));; ; // Perform another fit. In this configuration only the number of errors per; // likelihood evaluation is shown, if it is greater than zero. The; // EvalErrorWall(false) arguments disables the default error handling strategy; // and will cause the actual (problematic) value of the likelihood to be passed; // to MINUIT.; //; // NB: Use of this option is NOT recommended as default strategy as broken -log(L) values; // can often be lower than 'good' ones because offending events are removed.; // This may effectively create a false minimum in problem areas. This is clearly; // illustrated in the second plot; ; m0.setError(0.1);; argus.fitTo(*data, PrintEvalErrors(0), EvalErrorWall(false));; ; // P l o t l i k e l i h o o d a s f u n c t i o n o f m 0; // ------------------------------------------------------------------; ; // Construct likelihood function of model and data; std::unique_ptr<RooAbsReal> nll{argus.createNLL(*data)};; ; // Plot likelihood in m0 in range that includes problematic values; // In this configuration no messages are printed for likelihood evaluation errors,; // but if an likelihood value evaluates with error, the corresponding value; // on the curve will be set to the value given in EvalErrorValue().; ; RooPlot *frame2 = m0.frame(Range(5.288, 5.293), Title(""-log(L) scan vs m0, problematic regions masked""));; nll->plotOn(frame2, PrintEvalErrors(-1), ShiftToZero(), E",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf606__nllerrorhandling_8C.html:2217,log,log,2217,doc/master/rf606__nllerrorhandling_8C.html,https://root.cern,https://root.cern/doc/master/rf606__nllerrorhandling_8C.html,1,['log'],['log']
Testability,"-00-patches@v6-10-00-25-g9f78c3a, Jul 03 2017, 11:39:44 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; -------------------------------------------------------------------------. root [0] .x hsimple.C; Now execute demos.C, which brings up the button bar shown on the left. You can click on any button to execute another example. To see the source, open the corresponding source file (for example fit1.C). Once you are done, and want to quit the ROOT session, you can do so by typing .q.; root[] .x demos.C; root[] .q; 20.2 $ROOTSYS/test; The test directory contains a set of examples that represent all areas of the framework. When a new release is cut, the examples in this directory are compiled and run to test the new release’s backward compatibility.; We see these source files:. Makefile; Makefile to build all test programs. hsimple.cxx; Simple test program that creates and saves some histograms. MainEvent.cxx; Simple test program that creates a ROOT Tree object and fills it with some simple structures but also with complete histograms. This program uses the files Event.cxx, EventCint.cxx and Event.h. An example of a procedure to link this program is in bind_Event. Note that the Makefile invokes the rootcling utility to generate the Cling interface EventCint.cxx. Event.cxx; Implementation for classes Event and Track. minexam.cxx; Simple test program for data fitting. tcollex.cxx; Example usage of the ROOT collection classes. tcollbm.cxx; Benchmarks of ROOT collection classes. ctorture.cxx; Test program for the class TComplex. tstring.cxx; Example usage of the ROOT string class. vmatrix.cxx; Verification program for the TMatrix class. vvector.cxx; Verification program for the TVectorclass. vlazy.cxx; Verification program for lazy matrices. hworld.cxx; Small program showing basic graphics. guitest.cxx; Example usage of the ROOT GUI classes. gui viewer .cxx; Another ROOT GUI example program. Hello.cxx; Dancing text example. Aclock.cxx; Analog clock (a la ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1075561,test,test,1075561,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['test']
Testability,"-1, Bool_t deactonfail = kFALSE); Int_tCollect(TList* slaves, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); TSlave*CreateSlave(const char* url, const char* ord, Int_t perf, const char* image, const char* workdir); TSlave*CreateSubmaster(const char* url, const char* ord, const char* image, const char* msd); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; static Bool_tGetFileInCmd(const char* cmd, TString& fn); static Int_tGetInputData(TList* input, const char* cachedir, TString& emsg); TList*GetListOfActiveSlaves() const; TVirtualProofPlayer*GetPlayer() const; TPluginHandler*GetProgressDialog() const; Int_tGetSandbox(TString& sb, Bool_t assert = kFALSE, const char* rc = 0); virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidHandleLibIncPath(const char* what, Bool_t add, const char* dirs); Int_tInit(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); voidInitMembers(); virtual TVirtualProofPlayer*MakePlayer(const char* player = 0, TSocket* s = 0); voidTObject::MakeZombie(); voidPrepareInputDataFile(TString& dataFile); Int_tRemoveWorkers(TList* wrks); static Int_tSaveInputData(TQueryResult* qr, const char* cachedir, TString& emsg); virtual voidSaveWorkerInfo(); Int_tSendFile(const char* file, Int_t opt = (kBinary|kForward|kCp|kCpBin), const char* rfile = 0, TSlave* sl = 0); static Int_tSendInputData(TQueryResult* qr, TProof* p, TString& emsg); virtual voidSendInputDataFile(); voidSetDSet(TDSet* dset); voidSetPlayer(TVirtualProofPlayer* player); static void*SlaveStartupThread(void* arg); virtual Bool_tStartSlaves(Bool_t attach",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProof.html:18558,assert,assert,18558,root/html530/TProof.html,https://root.cern,https://root.cern/root/html530/TProof.html,2,['assert'],['assert']
Testability,-1.0158 0.99984 ]; : var4: 0.17495 0.23851 [ -1.2661 1.0694 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: SVM; : ; TFHandler_SVM : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.12216 0.20255 [ -1.0614 1.0246 ]; : myvar2: -0.12333 0.30492 [ -1.2280 0.99911 ]; : var3: 0.097148 0.21347 [ -1.0158 0.99984 ]; : var4: 0.17495 0.23851 [ -1.2661 1.0694 ]; : -----------------------------------------------------------; SVM : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_SVM : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.12216 0.20255 [ -1.0614 1.0246 ]; : myvar2: -0.12333 0.30492 [ -1.2280 0.99911 ]; : var3: 0.097148 0.21347 [ -1.0158 0.99984 ]; : var4: 0.17495 0.23851 [ -1.2661 1.0694 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: BDT; : ; BDT : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_BDT : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.21781 1.7248 [ -9.8605 7.9024 ]; : myvar2: -0.062175 1.1106 [ -4.0854 4.0259 ]; : var3: 0.16451 1.0589 [ -5.3563 4.6422 ]; : var4: 0.43566 1.2253 [ -6.9675 5.0307 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: RuleFit; : ; RuleFit : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_RuleFit : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.21781 1.7248 [ -9.8605 7.9024 ]; : myvar2: -0.062175 1.1106 [ -4.0854 4.0259 ]; : var3: 0.16451 1.0589 [ -5.3563 4.6422 ]; : var4: 0.43566 1.2253 [ -6.9675 5.0307 ]; : -----------------------------------------------------------; : ; : Evaluation results ranked by best signal ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:77208,test,test,77208,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['test'],['test']
Testability,"-14)^{2}+1} (1); 1943///\f]; 1944/// defined on the interval [4,16]. Events distributed according to the formula; 1945/// (1) are simulated to create the unweighted histogram. Uniformly distributed; 1946/// events are simulated for the weighted histogram with weights calculated by; 1947/// formula (1). Each histogram has the same number of bins: 20. Fig.1 shows; 1948/// the result of comparison of the unweighted histogram with 200 events; 1949/// (minimal expected frequency equal to one) and the weighted histogram with; 1950/// 500 events (minimal expected frequency equal to 25); 1951/// Begin_Macro; 1952/// ../../../tutorials/math/chi2test.C; 1953/// End_Macro; 1954/// Fig 1. An example of comparison of the unweighted histogram with 200 events; 1955/// and the weighted histogram with 500 events:; 1956/// 1. unweighted histogram;; 1957/// 2. weighted histogram;; 1958/// 3. normalized residuals plot;; 1959/// 4. normal Q-Q plot of residuals.; 1960///; 1961/// The value of the test statistic \f$ \chi^{2} \f$ is equal to; 1962/// 21.09 with p-value equal to 0.33, therefore the hypothesis of identity of; 1963/// the two histograms can be accepted for 0.05 significant level. The behavior; 1964/// of the normalized residuals plot (see Fig. 1c) and the normal Q-Q plot; 1965/// (see Fig. 1d) of residuals are regular and we cannot identify the outliers; 1966/// or bins with a big influence on \f$ \chi^{2} \f$.; 1967///; 1968/// The second example presents the same two histograms but 17 events was added; 1969/// to content of bin number 15 in unweighted histogram. Fig.2 shows the result; 1970/// of comparison of the unweighted histogram with 217 events (minimal expected; 1971/// frequency equal to one) and the weighted histogram with 500 events (minimal; 1972/// expected frequency equal to 25); 1973/// Begin_Macro; 1974/// ../../../tutorials/math/chi2test.C(17); 1975/// End_Macro; 1976/// Fig 2. An example of comparison of the unweighted histogram with 217 events; 1977/// and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:79379,test,test,79379,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['test'],['test']
Testability,"-3). Set the user parameter for the function selection. ; The bigger the limit, the more functions are used. The meaning of this variable is defined in the class description ; Definition at line 2433 of file TMultiDimFit.cxx. ◆ SetPowers(). void TMultiDimFit::SetPowers ; (; const Int_t * ; powers, . Int_t ; terms . ). virtual . Define a user function. ; The input array must be of the form (p11, ..., p1N, ... ,pL1, ..., pLN) Where N is the dimension of the data sample, L is the number of terms (given in terms) and the first number, labels the term, the second the variable. More information is given in the class description ; Definition at line 2413 of file TMultiDimFit.cxx. ◆ Streamer(). void TMultiDimFit::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMultiDimFit::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 207 of file TMultiDimFit.h. ◆ TestFunction(). Bool_t TMultiDimFit::TestFunction ; (; Double_t ; squareResidual, . Double_t ; dResidur . ). protectedvirtual . PRIVATE METHOD: Test whether the currently considered function contributes to the fit. ; See also class description ; Definition at line 2470 of file TMultiDimFit.cxx. Member Data Documentation. ◆ fBinVarX. Int_t TMultiDimFit::fBinVarX. protected . Number of bin in independent variables. ; Definition at line 98 of file TMultiDimFit.h. ◆ fBinVarY. Int_t TMultiDimFit::fBinVarY. protected . Number of bin in dependent variables. ; Definition at line 99 of file TMultiDimFit.h. ◆ fChi2. Double_t TMultiDimFit::fChi2. protected . Chi square of fit. ; Definition at line 85 of file TMultiDimFit.h. ◆ fCoefficients. TVectorD TMultiDimFit::fCoefficients. protected . Vector of the final coefficients. ; Definition at line 82 of file TMultiDimFit.h. ◆ fCoefficientsRMS. TVectorD TMultiDimFit::fCoefficientsRMS. protected . Vector of RMS of coefficients. ; Definition at line 83 of fil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:60440,Test,TestFunction,60440,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['Test'],['TestFunction']
Testability,"-> %s"", bname);; 8620 else; 8621 Error(""SetBranchStatus"", ""unknown branch -> %s"", bname);; 8622 } else {; 8623 if (strchr(bname,'*') != nullptr); 8624 Warning(""SetBranchStatus"", ""No branch name is matching wildcard -> %s"", bname);; 8625 else; 8626 Warning(""SetBranchStatus"", ""unknown branch -> %s"", bname);; 8627 }; 8628 }; 8629 return;; 8630 }; 8631 if (found) *found = nb + foundInFriend;; 8632 ; 8633 // second pass, loop again on all branches; 8634 // activate leafcount branches for active branches only; 8635 for (i = 0; i < nleaves; i++) {; 8636 leaf = (TLeaf*)fLeaves.UncheckedAt(i);; 8637 branch = (TBranch*)leaf->GetBranch();; 8638 if (!branch->TestBit(kDoNotProcess)) {; 8639 leafcount = leaf->GetLeafCount();; 8640 if (leafcount) {; 8641 bcount = leafcount->GetBranch();; 8642 bcount->ResetBit(kDoNotProcess);; 8643 }; 8644 } else {; 8645 //Int_t nbranches = branch->GetListOfBranches()->GetEntriesFast();; 8646 Int_t nbranches = branch->GetListOfBranches()->GetEntries();; 8647 for (j=0;j<nbranches;j++) {; 8648 bson = (TBranch*)branch->GetListOfBranches()->UncheckedAt(j);; 8649 if (!bson) continue;; 8650 if (!bson->TestBit(kDoNotProcess)) {; 8651 if (bson->GetNleaves() <= 0) continue;; 8652 branch->ResetBit(kDoNotProcess);; 8653 break;; 8654 }; 8655 }; 8656 }; 8657 }; 8658}; 8659 ; 8660////////////////////////////////////////////////////////////////////////////////; 8661/// Set the current branch style. (static function); 8662///; 8663/// - style = 0 old Branch; 8664/// - style = 1 new Bronch; 8665 ; 8666void TTree::SetBranchStyle(Int_t style); 8667{; 8668 fgBranchStyle = style;; 8669}; 8670 ; 8671////////////////////////////////////////////////////////////////////////////////; 8672/// Set maximum size of the file cache .; 8673//; 8674/// - if cachesize = 0 the existing cache (if any) is deleted.; 8675/// - if cachesize = -1 (default) it is set to the AutoFlush value when writing; 8676/// the Tree (default is 30 MBytes).; 8677///; 8678/// The cacheSize might be clampe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:336712,Test,TestBit,336712,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,2,['Test'],['TestBit']
Testability,"-> no tick marks.; ndiv=2 --> 2 divisions, one tick mark in the middle of the axis. chopt : Drawing options (see below).; gridlength: grid length on main tick marks. Examples:. Picture; Source. {; TCanvas *c2 = new TCanvas(""c2"",""c2"",10,10,700,500);. gStyle->SetOptStat(0);. TH2F *h2 = new TH2F(""h"",""Axes"",100,0,10,100,-2,2);; h2->Draw();. TF1 *f1=new TF1(""f1"",""-x"",-10,10);; TGaxis *A1 = new TGaxis(0,2,10,2,""f1"",510,""-"");; A1->SetTitle(""axis with decreasing values"");; A1->Draw();. TF1 *f2=new TF1(""f2"",""exp(x)"",0,2);; TGaxis *A2 = new TGaxis(1,1,9,1,""f2"");; A2->SetTitle(""exponential axis"");; A2->SetLabelSize(0.03);; A2->SetTitleSize(0.03);; A2->SetTitleOffset(1.2);; A2->Draw();. TF1 *f3=new TF1(""f3"",""log10(x)"",1,1000);; TGaxis *A3 = new TGaxis(2,-2,2,0,""f3"",505,""G"");; A3->SetTitle(""logarithmic axis"");; A3->SetLabelSize(0.03);; A3->SetTitleSize(0.03);; A3->SetTitleOffset(1.2);; A3->Draw();; return c2;; }; Logarithmic axis; By default axis are linear. To define a TGaxis as logarithmic, it is; enough to create it with the option ""G"". When plotting an histogram or a graph the logarithmic scale can be set using:. gPad->SetLogx(1); set the logarithmic scale on the X axis; gPad->SetLogy(1); set the logarithmic scale on the Y axis. When the SetMoreLogLabels() method is called more labels are drawn; when in logarithmic scale and there is a small number of decades (less than 3).; Blank axis; To draw only the axis tick marks without the axis body, it is enough to specify; the option ""B"". It useful to superpose axis.; Tick marks' orientation; By default tick marks are drawn on the positive side of the axis, except for; vertical axis for which the default is negative. The chop parameter; allows to control the tick marks orientation:. chopt = ""+"": tick marks are drawn on Positive side. (default); chopt =""-"": tick mark are drawn on the negative side.; chopt = ""+-"": tick marks are drawn on both sides of the axis.; chopt = ""U"": Unlabelled axis, default is labeled. Tick marks' size; By de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGaxis.html:5021,log,logarithmic,5021,root/html604/TGaxis.html,https://root.cern,https://root.cern/root/html604/TGaxis.html,1,['log'],['logarithmic']
Testability,"->AddVariable( ""var2"", &var2 );; ; // Spectator variables declared in the training have to be added to the reader, too; Float_t spec1,spec2;; reader->AddSpectator( ""spec1:=var1*2"", &spec1 );; reader->AddSpectator( ""spec2:=var1*3"", &spec2 );; ; // --- Book the MVA methods; ; TString dir = ""datasetreg/weights/"";; TString prefix = ""TMVARegression"";; ; // Book method(s); for (std::map<std::string,int>::iterator it = Use.begin(); it != Use.end(); it++) {; if (it->second) {; TString methodName = it->first + "" method"";; TString weightfile = dir + prefix + ""_"" + TString(it->first) + "".weights.xml"";; reader->BookMVA( methodName, weightfile );; }; }; ; // Book output histograms; TH1* hists[100];; Int_t nhists = -1;; for (std::map<std::string,int>::iterator it = Use.begin(); it != Use.end(); it++) {; TH1* h = new TH1F( it->first.c_str(), TString(it->first) + "" method"", 100, -100, 600 );; if (it->second) hists[++nhists] = h;; }; nhists++;; ; // Prepare input tree (this must be replaced by your data source); // in this example, there is a toy tree with signal and one with background events; // we'll later on use only the ""signal"" events for the test in this example.; //; TFile *input(0);; TString fname = ""./tmva_reg_example.root"";; if (!gSystem->AccessPathName( fname )) {; input = TFile::Open( fname ); // check if file in local directory exists; }; else {; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_reg_example.root"", ""CACHEREAD""); // if not: download from ROOT server; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }; std::cout << ""--- TMVARegressionApp : Using input file: "" << input->GetName() << std::endl;; ; // --- Event loop; ; // Prepare the tree; // - here the variable names have to corresponds to your tree; // - you can use the same variables as above which is slightly faster,; // but of course you can use different ones and copy the values inside the event loop; //; TTree* theTree = (TTree*)inpu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegressionApplication_8C.html:5968,test,test,5968,doc/master/TMVARegressionApplication_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegressionApplication_8C.html,1,['test'],['test']
Testability,"->GetD() and/or using pseudo-experiments. ; Covariance matrices on the measured spectrum (for either the total uncertainties or individual sources of uncertainties) can be propagated to covariance matrices using the GetUnfoldCovMatrix method, which uses pseudo experiments for the propagation. In addition, GetAdetCovMatrix allows for the propagation of the statistical uncertainties on the response matrix using pseudo experiments. The covariance matrix corresponding to Bcov is also computed as described in Nucl. Instrum. Meth. A372, 469 (1996) [hep-ph/9509307] and can be obtained from tsvdunf->GetXtau() and its (regularisation independent) inverse from tsvdunf->GetXinv(). The distribution of singular values can be retrieved using tsvdunf->GetSV(). ; See also the tutorial for a toy example. ; Definition at line 46 of file TSVDUnfold.h. Public Member Functions;  TSVDUnfold (const TH1D *bdat, const TH1D *bini, const TH1D *xini, const TH2D *Adet);  Alternative constructor User provides data and MC test spectra, as well as detector response matrix, diagonal covariance matrix of measured spectrum built from the uncertainties on measured spectrum. ;  ;  TSVDUnfold (const TH1D *bdat, TH2D *Bcov, const TH1D *bini, const TH1D *xini, const TH2D *Adet);  Default constructor Initialisation of TSVDUnfold User provides data and MC test spectra, as well as detector response matrix and the covariance matrix of the measured distribution. ;  ;  TSVDUnfold (const TSVDUnfold &other);  Copy constructor. ;  ;  ~TSVDUnfold () override;  Destructor. ;  ; Double_t ComputeChiSquared (const TH1D &truspec, const TH1D &unfspec);  Helper routine to compute chi-squared between distributions using the computed inverse of the covariance matrix for the unfolded spectrum as given in paper. ;  ; TH2D * GetAdetCovMatrix (Int_t ntoys, Int_t seed=1);  Determine covariance matrix of unfolded spectrum from finite statistics in response matrix using pseudo experiments ""ntoys"" - number of pseudo experiments use",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSVDUnfold.html:3553,test,test,3553,doc/master/classTSVDUnfold.html,https://root.cern,https://root.cern/doc/master/classTSVDUnfold.html,1,['test'],['test']
Testability,"->GetNEvtSigTest()) );; 1696 ; 1697 return effS;; 1698 ; 1699 }; 1700 ; 1701 return -1;; 1702}; 1703 ; 1704////////////////////////////////////////////////////////////////////////////////; 1705/// write specific classifier response; 1706 ; 1707void TMVA::MethodCuts::MakeClassSpecific( std::ostream& fout, const TString& className ) const; 1708{; 1709 fout << "" // not implemented for class: \"""" << className << ""\"""" << std::endl;; 1710 fout << ""};"" << std::endl;; 1711}; 1712 ; 1713////////////////////////////////////////////////////////////////////////////////; 1714/// get help message text; 1715///; 1716/// typical length of text line:; 1717/// ""|--------------------------------------------------------------|""; 1718 ; 1719void TMVA::MethodCuts::GetHelpMessage() const; 1720{; 1721 TString bold = gConfig().WriteOptionsReference() ? ""<b>"" : """";; 1722 TString resbold = gConfig().WriteOptionsReference() ? ""</b>"" : """";; 1723 TString brk = gConfig().WriteOptionsReference() ? ""<br>"" : """";; 1724 ; 1725 Log() << Endl;; 1726 Log() << gTools().Color(""bold"") << ""--- Short description:"" << gTools().Color(""reset"") << Endl;; 1727 Log() << Endl;; 1728 Log() << ""The optimisation of rectangular cuts performed by TMVA maximises "" << Endl;; 1729 Log() << ""the background rejection at given signal efficiency, and scans "" << Endl;; 1730 Log() << ""over the full range of the latter quantity. Three optimisation"" << Endl;; 1731 Log() << ""methods are optional: Monte Carlo sampling (MC), a Genetics"" << Endl;; 1732 Log() << ""Algorithm (GA), and Simulated Annealing (SA). GA and SA are"" << Endl;; 1733 Log() << ""expected to perform best."" << Endl;; 1734 Log() << Endl;; 1735 Log() << ""The difficulty to find the optimal cuts strongly increases with"" << Endl;; 1736 Log() << ""the dimensionality (number of input variables) of the problem."" << Endl;; 1737 Log() << ""This behavior is due to the non-uniqueness of the solution space.""<< Endl;; 1738 Log() << Endl;; 1739 Log() << gTools().Color(""bold"") << ""--- Per",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:67040,Log,Log,67040,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,2,['Log'],['Log']
Testability,"->GetName() << "" -- ""; 1680 << ""training and testing events: ""; 1681 << (trainingSizePerClass.at(cls)+testingSizePerClass.at(cls)) << Endl;; 1682 Log() << kDEBUG << ""\t(sum of weights: ""; 1683 << (trainingSumWeightsPerClass.at(cls)+testingSumWeightsPerClass.at(cls)) << "")"" << Endl;; 1684 if(eventCounts[cls].nEvAfterCut<eventCounts[cls].nEvBeforeCut) {; 1685 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << setiosflags(ios::left) << std::setw(maxL); 1686 << dsi.GetClassInfo(cls)->GetName() << "" -- ""; 1687 << ""due to the preselection a scaling factor has been applied to the numbers of requested events: ""; 1688 << eventCounts[cls].cutScaling() << Endl;; 1689 }; 1690 }; 1691 Log() << kINFO << Endl;; 1692 ; 1693 // for information purposes; 1694 dsi.SetTrainingSumSignalWeights(trainingSumSignalWeights);; 1695 dsi.SetTrainingSumBackgrWeights(trainingSumBackgrWeights);; 1696 dsi.SetTestingSumSignalWeights(testingSumSignalWeights);; 1697 dsi.SetTestingSumBackgrWeights(testingSumBackgrWeights);; 1698 ; 1699 ; 1700}; Configurable.h; DataInputHandler.h; DataSetFactory.h; DataSetInfo.h; DataSet.h; Event.h; MsgLogger.h; d#define d(i)Definition RSha256.hxx:102; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; Int_tint Int_tDefinition RtypesCore.h:45; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; Float_tfloat Float_tDefinition RtypesCore.h:57; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Double_tdouble Double_tDefinition RtypesCore.h:59; Long64_tlong long Long64_tDefinition RtypesCore.h:69; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; TBranch.h; TEventList.h; TFile.h; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; TMath.h; TMatrixDT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:79414,test,testingSumBackgrWeights,79414,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['test'],['testingSumBackgrWeights']
Testability,"->GetParameters().data());; f_sum->SetParName(1, ""NBackground"");; f_sum->SetParName(0, ""NSignal"");; for (int i = 2; i < f_sum->GetNpar(); ++i); f_sum->SetParName(i, fnorm_exp_cb->GetParName(i));; ; // GENERATE HISTOGRAM TO FIT ..............................................................; TStopwatch w;; w.Start();; TH1D *h_sum = new TH1D(""h_ExpCB"", ""Exponential Bkg + CrystalBall function"", nBins, -5., 5.);; h_sum->FillRandom(""fsum"", nEvents);; printf(""Time to generate %d events: "", nEvents);; w.Print();; ; // need to scale histogram with width since we are fitting a density; h_sum->Sumw2();; h_sum->Scale(1., ""width"");; ; // fit - use Minuit2 if available; ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""Minuit2"");; new TCanvas(""Fit"", ""Fit"", 800, 1000);; // do a least-square fit of the spectrum; auto result = h_sum->Fit(""fsum"", ""SQ"");; result->Print();; h_sum->Draw();; printf(""Time to fit using ROOT TF1Normsum: "");; w.Print();; ; // test if parameters are fine; std::vector<double> pref = {nsig, nbkg, signal_mean};; for (unsigned int i = 0; i < pref.size(); ++i) {; if (!TMath::AreEqualAbs(pref[i], f_sum->GetParameter(i), f_sum->GetParError(i) * 10.)); Error(""testFitNormSum"", ""Difference found in fitted %s - difference is %g sigma"", f_sum->GetParName(i),; (f_sum->GetParameter(i) - pref[i]) / f_sum->GetParError(i));; }; ; gStyle->SetOptStat(0);; // add parameters; auto t1 = new TLatex(; -2.5, 300000, TString::Format(""%s = %8.0f #pm %4.0f"", ""NSignal"", f_sum->GetParameter(0), f_sum->GetParError(0)));; auto t2 = new TLatex(; -2.5, 270000, TString::Format(""%s = %8.0f #pm %4.0f"", ""Nbackgr"", f_sum->GetParameter(1), f_sum->GetParError(1)));; t1->Draw();; t2->Draw();; }; MinimizerOptions.h; TCanvas.h; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; TF1NormSum.h; TF1.h; TFitResult.h; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; resultOption_t Option_t TPoint TPoint const char GetTextMagnitu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fitNormSum_8C.html:3152,test,test,3152,doc/master/fitNormSum_8C.html,https://root.cern,https://root.cern/doc/master/fitNormSum_8C.html,1,['test'],['test']
Testability,"->GetTitleSize());; 972 SetBit(TAxis::kCenterTitle, axis->TestBit(TAxis::kCenterTitle));; 973 SetBit(TAxis::kCenterLabels, axis->TestBit(TAxis::kCenterLabels));; 974 SetBit(TAxis::kRotateTitle, axis->TestBit(TAxis::kRotateTitle));; 975 SetBit(TAxis::kNoExponent, axis->TestBit(TAxis::kNoExponent));; 976 SetBit(TAxis::kTickPlus, axis->TestBit(TAxis::kTickPlus));; 977 SetBit(TAxis::kTickMinus, axis->TestBit(TAxis::kTickMinus));; 978 SetBit(TAxis::kMoreLogLabels, axis->TestBit(TAxis::kMoreLogLabels));; 979 if (axis->GetDecimals()) SetBit(TAxis::kDecimals); //the bit is in TAxis::fAxis2; 980 SetTimeFormat(axis->GetTimeFormat());; 981}; 982 ; 983////////////////////////////////////////////////////////////////////////////////; 984/// Draw this axis with its current attributes.; 985 ; 986void TGaxis::Paint(Option_t *); 987{; 988 if (!gPad) return;; 989 ; 990 Double_t wmin = fWmin;; 991 Double_t wmax = fWmax;; 992 Int_t ndiv = fNdiv;; 993 ; 994 // following code required to support toggle of lin/log scales; 995 Double_t x1 = gPad->XtoPad(fX1);; 996 Double_t y1 = gPad->YtoPad(fY1);; 997 Double_t x2 = gPad->XtoPad(fX2);; 998 Double_t y2 = gPad->YtoPad(fY2);; 999 ; 1000 PaintAxis(x1,y1,x2,y2,wmin,wmax,ndiv,fChopt.Data(),fGridLength);; 1001}; 1002 ; 1003////////////////////////////////////////////////////////////////////////////////; 1004/// Control function to draw an axis.; 1005/// Original authors: O.Couet C.E.Vandoni N.Cremel-Somon.; 1006/// Modified and converted to C++ class by Rene Brun.; 1007 ; 1008void TGaxis::PaintAxis(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax,; 1009 Double_t &wmin, Double_t &wmax, Int_t &ndiv, Option_t *chopt,; 1010 Double_t gridlength, Bool_t drawGridOnly); 1011{; 1012 if (!gPad) return;; 1013 ; 1014 const char *where = ""PaintAxis"";; 1015 ; 1016 Double_t alfa, beta, ratio1, ratio2, grid_side;; 1017 Double_t axis_lengthN = 0;; 1018 Double_t axis_length0 = 0;; 1019 Double_t axis_length1 = 0;; 1020 Double_t axis_length;; 1021 Double_t at",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGaxis_8cxx_source.html:34498,log,log,34498,doc/master/TGaxis_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGaxis_8cxx_source.html,1,['log'],['log']
Testability,"->IsShared()) {; 226 // Now find the node having a composite shape using this shared matrix; 227 for (i = 0; i < nd; i++) {; 228 node = vm->GetNode(i);; 229 if (node == nnode); 230 continue;; 231 if (node->IsOffset()); 232 continue;; 233 if (!node->GetVolume()->GetShape()->IsComposite()); 234 continue;; 235 // We found a node having a composite shape, scan for the shared matrix; 236 cs = (TGeoCompositeShape *)node->GetVolume()->GetShape();; 237 if (cs->GetBoolNode()->GetRightMatrix() != nnode->GetMatrix()); 238 continue;; 239 // The composite uses the matrix -> replace it; 240 TGeoCompositeShape *ncs = new TGeoCompositeShape(cs->GetName(), cs->GetBoolNode()->MakeClone());; 241 ncs->GetBoolNode()->ReplaceMatrix(nnode->GetMatrix(), newmat);; 242 // We have to clone the node/volume having the composite shape; 243 TGeoVolume *newvol = node->GetVolume()->CloneVolume();; 244 if (!newvol) {; 245 Error(""Align"", ""Cannot clone volume %s"", node->GetVolume()->GetName());; 246 return kFALSE;; 247 }; 248 newvol->SetShape(ncs);; 249 TGeoNode *newnode = node->MakeCopyNode();; 250 if (!newnode) {; 251 Error(""Align"", ""Cannot clone node %s"", node->GetName());; 252 return kFALSE;; 253 }; 254 newnode->SetVolume(newvol);; 255 newnode->SetMotherVolume(vm);; 256 if (vm->TestBit(TGeoVolume::kVolumeImportNodes)) {; 257 gGeoManager->GetListOfGShapes()->Add(newnode);; 258 }; 259 vm->GetNodes()->RemoveAt(i);; 260 vm->GetNodes()->AddAt(newnode, i);; 261 shared = kTRUE;; 262 }; 263 if (!shared); 264 Error(""Align"", ""The matrix replaced for %s is not actually shared"", GetName());; 265 } else {; 266 // The aligned node may have a composite shape containing a shared matrix; 267 if (vd->GetShape()->IsComposite()) {; 268 cs = (TGeoCompositeShape *)vd->GetShape();; 269 if (cs->GetBoolNode()->GetRightMatrix()->IsShared()) {; 270 if (!nnode->GetMatrix()->IsIdentity()) {; 271 Error(""Align"", ""The composite shape having a shared matrix on the subtracted branch must be ""; 272 ""positioned using identity matrix.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPhysicalNode_8cxx_source.html:8850,Test,TestBit,8850,doc/master/TGeoPhysicalNode_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPhysicalNode_8cxx_source.html,1,['Test'],['TestBit']
Testability,"->SetGrid();; ; gBenchmark->Start(""hsum"");; ; // Create some histograms.; auto total = new TH1F(""total"",""This is the total distribution"",100,-4,4);; auto main = new TH1F(""main"",""Main contributor"",100,-4,4);; auto s1 = new TH1F(""s1"",""This is the first signal"",100,-4,4);; auto s2 = new TH1F(""s2"",""This is the second signal"",100,-4,4);; total->Sumw2(); // store the sum of squares of weights; total->SetMarkerStyle(21);; total->SetMarkerSize(0.7);; main->SetFillColor(16);; s1->SetFillColor(42);; s2->SetFillColor(46);; TSlider *slider = nullptr;; ; // Fill histograms randomly; gRandom->SetSeed();; const Int_t kUPDATE = 500;; Float_t xs1, xs2, xmain;; for ( Int_t i=0; i<10000; i++) {; xmain = gRandom->Gaus(-1,1.5);; xs1 = gRandom->Gaus(-0.5,0.5);; xs2 = gRandom->Landau(1,0.15);; main->Fill(xmain);; s1->Fill(xs1,0.3);; s2->Fill(xs2,0.2);; total->Fill(xmain);; total->Fill(xs1,0.3);; total->Fill(xs2,0.2);; if (i && (i%kUPDATE) == 0) {; if (i == kUPDATE) {; total->Draw(""e1p"");; main->Draw(""same"");; s1->Draw(""same"");; s2->Draw(""same"");; c1->Update();; slider = new TSlider(""slider"",; ""test"",4.2,0,4.6,total->GetMaximum(),38);; slider->SetFillColor(46);; }; if (slider) slider->SetRange(0., 1.*i/10000.);; c1->Modified();; c1->Update();; }; }; slider->SetRange(0., 1.);; c1->Modified();; gBenchmark->Show(""hsum"");; }; mainint main()Definition Prototype.cxx:12; s1#define s1(x)Definition RSha256.hxx:91; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; gBenchmarkR__EXTERN TBenchmark * gBenchmarkDefinition TBenchmark.h:59; kUPDATE@ kUPDATEDefinition TFitParametersDialog.cxx:46; totalstatic unsigned int totalDefinition TGWin32ProxyDefs.h:40; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TBenchmark::Startvirtual void Start(const char *name)Starts Benchmark with the specified name.Definition TBenchmark.cxx:172; TBenchmark::Showv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hsum_8C.html:1540,test,test,1540,doc/master/hsum_8C.html,https://root.cern,https://root.cern/doc/master/hsum_8C.html,1,['test'],['test']
Testability,"->SetTimeDisplay(1);""<<std::endl;; 720 out<<"" ""<<name<<subname<<""->SetTimeFormat(""<<quote<<GetTimeFormat()<<quote<<"");""<<std::endl;; 721 }; 722 if (fLabels) {; 723 TIter next(fLabels);; 724 TObjString *obj;; 725 while ((obj=(TObjString*)next())) {; 726 out<<"" ""<<name<<subname<<""->SetBinLabel(""<<obj->GetUniqueID()<<"",""<<quote<<obj->GetName()<<quote<<"");""<<std::endl;; 727 }; 728 }; 729 ; 730 if (fFirst || fLast) {; 731 out<<"" ""<<name<<subname<<""->SetRange(""<<fFirst<<"",""<<fLast<<"");""<<std::endl;; 732 }; 733 ; 734 if (TestBit(kLabelsHori)) {; 735 out<<"" ""<<name<<subname<<""->SetBit(TAxis::kLabelsHori);""<<std::endl;; 736 }; 737 ; 738 if (TestBit(kLabelsVert)) {; 739 out<<"" ""<<name<<subname<<""->SetBit(TAxis::kLabelsVert);""<<std::endl;; 740 }; 741 ; 742 if (TestBit(kLabelsDown)) {; 743 out<<"" ""<<name<<subname<<""->SetBit(TAxis::kLabelsDown);""<<std::endl;; 744 }; 745 ; 746 if (TestBit(kLabelsUp)) {; 747 out<<"" ""<<name<<subname<<""->SetBit(TAxis::kLabelsUp);""<<std::endl;; 748 }; 749 ; 750 if (TestBit(kCenterLabels)) {; 751 out<<"" ""<<name<<subname<<""->CenterLabels(true);""<<std::endl;; 752 }; 753 ; 754 if (TestBit(kCenterTitle)) {; 755 out<<"" ""<<name<<subname<<""->CenterTitle(true);""<<std::endl;; 756 }; 757 ; 758 if (TestBit(kRotateTitle)) {; 759 out<<"" ""<<name<<subname<<""->RotateTitle(true);""<<std::endl;; 760 }; 761 ; 762 if (TestBit(kDecimals)) {; 763 out<<"" ""<<name<<subname<<""->SetDecimals();""<<std::endl;; 764 }; 765 ; 766 if (TestBit(kMoreLogLabels)) {; 767 out<<"" ""<<name<<subname<<""->SetMoreLogLabels();""<<std::endl;; 768 }; 769 ; 770 if (TestBit(kNoExponent)) {; 771 out<<"" ""<<name<<subname<<""->SetNoExponent();""<<std::endl;; 772 }; 773 if (fModLabs) {; 774 TIter next(fModLabs);; 775 while (auto ml = (TAxisModLab*)next()) {; 776 if (ml->GetLabNum() == 0); 777 out<<"" ""<<name<<subname<<""->ChangeLabelByValue(""<<ml->GetLabValue()<<"","";; 778 else; 779 out<<"" ""<<name<<subname<<""->ChangeLabel(""<<ml->GetLabNum()<<"","";; 780 out<<ml->GetAngle()<<"",""; 781 <<ml->GetSize()<<"",""; 782 <<ml->G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAxis_8cxx_source.html:25125,Test,TestBit,25125,doc/master/TAxis_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TAxis_8cxx_source.html,1,['Test'],['TestBit']
Testability,"->Write();; h1f->Write();; ; // Produce a plot if requested; if (plot) {; TCanvas *c1 = new TCanvas(""c1"",""The FillRandom example"",200,10,700,900);; ; auto pad1 = new TPad(""pad1"",""The pad with the function"",0.05,0.50,0.95,0.95);; auto pad2 = new TPad(""pad2"",""The pad with the histogram"",0.05,0.05,0.95,0.45);; pad1->Draw();; pad2->Draw();; pad1->cd();; ; pad1->SetGridx();; pad1->SetGridy();; pad1->GetFrame()->SetBorderMode(-1);; pad1->GetFrame()->SetBorderSize(5);; ; sqroot->Draw();; auto lfunction = new TPaveLabel(5,39,9.8,46,""The sqroot function"");; lfunction->Draw();; c1->Update();; ; pad2->cd();; pad2->GetFrame()->SetBorderMode(-1);; pad2->GetFrame()->SetBorderSize(5);; ; h1f->SetFillColor(45);; h1f->Draw();; c1->Update();; }; ; gBenchmark->Show(""fillrandom"");; }; gBenchmarkR__EXTERN TBenchmark * gBenchmarkDefinition TBenchmark.h:59; plotwinID h TVirtualViewer3D TVirtualGLPainter char TVirtualGLPainter plotDefinition TGWin32VirtualGLProxy.cxx:53; TBenchmark::Startvirtual void Start(const char *name)Starts Benchmark with the specified name.Definition TBenchmark.cxx:172; TBenchmark::Showvirtual void Show(const char *name)Stops Benchmark name and Prints results.Definition TBenchmark.cxx:155; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TFormulaThe Formula class.Definition TFormula.h:89; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; c1return c1Definition legend1.C:41; fillrandomDefinition fillrandom.py:1; AuthorRene Brun ; Definition in file fillrandom.C. tutorialshistfillrandom.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fillrandom_8C.html:2004,Benchmark,Benchmark,2004,doc/master/fillrandom_8C.html,https://root.cern,https://root.cern/doc/master/fillrandom_8C.html,2,['Benchmark'],['Benchmark']
Testability,"->fStreamerImpl = &TClass::StreamerStreamerInfo;; 6146 }; 6147 }; 6148 ; 6149 if (fStreamer) {; 6150 kl->fStreamerType = kExternal;; 6151 kl->fStreamerImpl = &TClass::StreamerExternal;; 6152 }; 6153 ; 6154 if (const_cast<TClass *>(this)->GetClassMethodWithPrototype(""Hash"", """", kTRUE)) {; 6155 kl->SetBit(kHasLocalHashMember);; 6156 }; 6157 ; 6158 if (GetClassInfo()) {; 6159 // In the case where the TClass for one of ROOT's core class; 6160 // (eg TClonesArray for map<int,TClonesArray*>) is requested; 6161 // during the execution of rootcling, we could end up in a situation; 6162 // where we should have the information (since TClonesArray has; 6163 // a dictionary as part of libCore) but do not because the user; 6164 // only include a forward declaration of TClonesArray and we do not; 6165 // forcefully load the header file either (because the autoparsing; 6166 // is intentionally disabled).; 6167 kl->fClassProperty = gCling->ClassInfo_ClassProperty(fClassInfo);; 6168 // Must set this last since other threads may read fProperty; 6169 // and think all test bits have been properly set.; 6170 kl->fProperty = gCling->ClassInfo_Property(fClassInfo);; 6171 }; 6172 } else {; 6173 ; 6174 if (fStreamer) {; 6175 kl->fStreamerType = kExternal;; 6176 kl->fStreamerImpl = &TClass::StreamerExternal;; 6177 }; 6178 ; 6179 kl->fStreamerType |= kEmulatedStreamer;; 6180 kl->SetStreamerImpl();; 6181 // fProperty was *not* set so that it can be forced to be recalculated; 6182 // next time.; 6183 return 0;; 6184 }; 6185 ; 6186 return fProperty;; 6187}; 6188 ; 6189////////////////////////////////////////////////////////////////////////////////; 6190/// Internal routine to set calculate the class properties that can only be; 6191/// known at run-time, for example whether the Hash member function and the; 6192/// destructor are consistent.; 6193 ; 6194void TClass::SetRuntimeProperties(); 6195{; 6196 // For now, no need to lock this routines as fRuntimeProperties is; 6197 // the only atomic set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:237460,test,test,237460,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['test'],['test']
Testability,"->fStreamerImpl = &TClass::StreamerStreamerInfo;; 6213 }; 6214 }; 6215 ; 6216 if (fStreamer) {; 6217 kl->fStreamerType = kExternal;; 6218 kl->fStreamerImpl = &TClass::StreamerExternal;; 6219 }; 6220 ; 6221 if (const_cast<TClass *>(this)->GetClassMethodWithPrototype(""Hash"", """", kTRUE)) {; 6222 kl->SetBit(kHasLocalHashMember);; 6223 }; 6224 ; 6225 if (GetClassInfo()) {; 6226 // In the case where the TClass for one of ROOT's core class; 6227 // (eg TClonesArray for map<int,TClonesArray*>) is requested; 6228 // during the execution of rootcling, we could end up in a situation; 6229 // where we should have the information (since TClonesArray has; 6230 // a dictionary as part of libCore) but do not because the user; 6231 // only include a forward declaration of TClonesArray and we do not; 6232 // forcefully load the header file either (because the autoparsing; 6233 // is intentionally disabled).; 6234 kl->fClassProperty = gCling->ClassInfo_ClassProperty(fClassInfo);; 6235 // Must set this last since other threads may read fProperty; 6236 // and think all test bits have been properly set.; 6237 kl->fProperty = gCling->ClassInfo_Property(fClassInfo);; 6238 }; 6239 } else {; 6240 ; 6241 if (fStreamer) {; 6242 kl->fStreamerType = kExternal;; 6243 kl->fStreamerImpl = &TClass::StreamerExternal;; 6244 }; 6245 ; 6246 kl->fStreamerType |= kEmulatedStreamer;; 6247 kl->SetStreamerImpl();; 6248 // fProperty was *not* set so that it can be forced to be recalculated; 6249 // next time.; 6250 return 0;; 6251 }; 6252 ; 6253 return fProperty;; 6254}; 6255 ; 6256////////////////////////////////////////////////////////////////////////////////; 6257/// Internal routine to set calculate the class properties that can only be; 6258/// known at run-time, for example whether the Hash member function and the; 6259/// destructor are consistent.; 6260 ; 6261void TClass::SetRuntimeProperties(); 6262{; 6263 // For now, no need to lock this routines as fRuntimeProperties is; 6264 // the only atomic set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:240211,test,test,240211,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['test'],['test']
Testability,"->qop = value;; 8411 } else if (!strcmp(name, ""nc"")) {; 8412 ah->nc = value;; 8413 } else if (!strcmp(name, ""nonce"")) {; 8414 ah->nonce = value;; 8415 }; 8416 }; 8417 ; 8418#if !defined(NO_NONCE_CHECK); 8419 /* Read the nonce from the response. */; 8420 if (ah->nonce == NULL) {; 8421 return 0;; 8422 }; 8423 s = NULL;; 8424 nonce = strtoull(ah->nonce, &s, 10);; 8425 if ((s == NULL) || (*s != 0)) {; 8426 return 0;; 8427 }; 8428 ; 8429 /* Convert the nonce from the client to a number. */; 8430 nonce ^= conn->dom_ctx->auth_nonce_mask;; 8431 ; 8432 /* The converted number corresponds to the time the nounce has been; 8433 * created. This should not be earlier than the server start. */; 8434 /* Server side nonce check is valuable in all situations but one:; 8435 * if the server restarts frequently, but the client should not see; 8436 * that, so the server should accept nonces from previous starts. */; 8437 /* However, the reasonable default is to not accept a nonce from a; 8438 * previous start, so if anyone changed the access rights between; 8439 * two restarts, a new login is required. */; 8440 if (nonce < (uint64_t)conn->phys_ctx->start_time) {; 8441 /* nonce is from a previous start of the server and no longer valid; 8442 * (replay attack?) */; 8443 return 0;; 8444 }; 8445 /* Check if the nonce is too high, so it has not (yet) been used by the; 8446 * server. */; 8447 if (nonce >= ((uint64_t)conn->phys_ctx->start_time; 8448 + conn->dom_ctx->nonce_count)) {; 8449 return 0;; 8450 }; 8451#else; 8452 (void)nonce;; 8453#endif; 8454 ; 8455 /* CGI needs it as REMOTE_USER */; 8456 if (ah->user != NULL) {; 8457 conn->request_info.remote_user =; 8458 mg_strdup_ctx(ah->user, conn->phys_ctx);; 8459 } else {; 8460 return 0;; 8461 }; 8462 ; 8463 return 1;; 8464}; 8465 ; 8466 ; 8467static const char *; 8468mg_fgets(char *buf, size_t size, struct mg_file *filep); 8469{; 8470 if (!filep) {; 8471 return NULL;; 8472 }; 8473 ; 8474 if (filep->access.fp != NULL) {; 8475 return fgets(buf, (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:243654,log,login,243654,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['log'],['login']
Testability,"->qop = value;; 8412 } else if (!strcmp(name, ""nc"")) {; 8413 ah->nc = value;; 8414 } else if (!strcmp(name, ""nonce"")) {; 8415 ah->nonce = value;; 8416 }; 8417 }; 8418 ; 8419#if !defined(NO_NONCE_CHECK); 8420 /* Read the nonce from the response. */; 8421 if (ah->nonce == NULL) {; 8422 return 0;; 8423 }; 8424 s = NULL;; 8425 nonce = strtoull(ah->nonce, &s, 10);; 8426 if ((s == NULL) || (*s != 0)) {; 8427 return 0;; 8428 }; 8429 ; 8430 /* Convert the nonce from the client to a number. */; 8431 nonce ^= conn->dom_ctx->auth_nonce_mask;; 8432 ; 8433 /* The converted number corresponds to the time the nounce has been; 8434 * created. This should not be earlier than the server start. */; 8435 /* Server side nonce check is valuable in all situations but one:; 8436 * if the server restarts frequently, but the client should not see; 8437 * that, so the server should accept nonces from previous starts. */; 8438 /* However, the reasonable default is to not accept a nonce from a; 8439 * previous start, so if anyone changed the access rights between; 8440 * two restarts, a new login is required. */; 8441 if (nonce < (uint64_t)conn->phys_ctx->start_time) {; 8442 /* nonce is from a previous start of the server and no longer valid; 8443 * (replay attack?) */; 8444 return 0;; 8445 }; 8446 /* Check if the nonce is too high, so it has not (yet) been used by the; 8447 * server. */; 8448 if (nonce >= ((uint64_t)conn->phys_ctx->start_time; 8449 + conn->dom_ctx->nonce_count)) {; 8450 return 0;; 8451 }; 8452#else; 8453 (void)nonce;; 8454#endif; 8455 ; 8456 /* CGI needs it as REMOTE_USER */; 8457 if (ah->user != NULL) {; 8458 conn->request_info.remote_user =; 8459 mg_strdup_ctx(ah->user, conn->phys_ctx);; 8460 } else {; 8461 return 0;; 8462 }; 8463 ; 8464 return 1;; 8465}; 8466 ; 8467 ; 8468static const char *; 8469mg_fgets(char *buf, size_t size, struct mg_file *filep); 8470{; 8471 if (!filep) {; 8472 return NULL;; 8473 }; 8474 ; 8475 if (filep->access.fp != NULL) {; 8476 return fgets(buf, (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:243686,log,login,243686,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['log'],['login']
Testability,"-and-customize multiple models (modelPdf1,modelPdf2) according to ParamSplit and; ParamSplitConstrained() specifications and return a RooSimultaneous p.d.f. of all built clones,; using the specified master index to map prototype p.d.f.s to master states; Interface to RooCustomizer. EDIT::name( orig, substNode=origNode), ... ] -- Create a clone of input object orig, with the specified replacements operations executed; EDIT::name( orig, origNode=$REMOVE(), ... ] -- Create clone of input removing term origNode from all PROD() terms that contained it; EDIT::name( orig, origNode=$REMOVE(prodname,...), ... ] -- As above, but restrict removal of origNode to PROD term(s) prodname,... Interface to RooClassFactory. CEXPR::name('expr',var,...] -- Create an custom compiled p.d.f that evaluates the given expression; cexpr::name('expr',var,...] -- Create an custom compiled function that evaluates the given expression. $MetaType(...) - Meta argument that does not result in construction of an object but is used logically organize; input arguments in certain operator p.d.f. constructions. The defined meta arguments are context dependent. The only meta argument that is defined globally is $Alias(typeName,aliasName) to; define aliases for type names. For the definition of meta arguments in operator p.d.f.s; see the definitions below. std::string processExpression(const char* expr); Process a single high-level expression or list of; expressions. The returned string a the reduced expression where; all inline object creations have been executed and substituted; with the name of the created object. e.g. 'RooGaussian::g(x,m,s)' --> 'g'; '{x(-10,10),s} --> '{x,s}'. std::string processCompositeExpression(const char* arg); Process a single composite expression. e.g. 'A=RooGaussian::g[x,m,s]' --> 'A=g'; e.g. 'f[0,1]*RooGaussian::g[x,m,s]' --> 'f*g'; e.g. 'RooGaussian::g(x,y,s)|x' --> g|x'; e.g. '$MetaArg(RooGaussian::g[x,m,s],blah)' --> '$MetaArg(g,blah)'. std::string processSingleExpression(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooFactoryWSTool.html:16542,log,logically,16542,root/html530/RooFactoryWSTool.html,https://root.cern,https://root.cern/root/html530/RooFactoryWSTool.html,5,['log'],['logically']
Testability,"-firstArrayVarIndex));; 340 if (int(i)-firstArrayVarIndex == arraySize-1 ) {; 341 // I am the last element of the array; 342 firstArrayVar = kTRUE;; 343 firstArrayVarIndex = -1;; 344 Log() << kDEBUG << ""Using Last variable from array : "" << dsi.GetVariableInfo(i).GetInternalName() << Endl;; 345 }; 346 }; 347 ; 348 }; 349 ; 350 //; 351 // targets; 352 //; 353 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName()) << ""transform regression targets"" << Endl;; 354 for (formIt = fTargetFormulas.begin(), formItEnd = fTargetFormulas.end(); formIt!=formItEnd; ++formIt) if (*formIt) delete *formIt;; 355 fTargetFormulas.clear();; 356 for (UInt_t i=0; i<dsi.GetNTargets(); i++) {; 357 ttf = new TTreeFormula( TString::Format( ""Formula%s"", dsi.GetTargetInfo(i).GetInternalName().Data() ),; 358 dsi.GetTargetInfo(i).GetExpression().Data(), tr );; 359 CheckTTreeFormula( ttf, dsi.GetTargetInfo(i).GetExpression(), hasDollar );; 360 fTargetFormulas.push_back( ttf );; 361 }; 362 ; 363 //; 364 // spectators; 365 //; 366 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName()) << ""transform spectator variables"" << Endl;; 367 for (formIt = fSpectatorFormulas.begin(), formItEnd = fSpectatorFormulas.end(); formIt!=formItEnd; ++formIt) if (*formIt) delete *formIt;; 368 fSpectatorFormulas.clear();; 369 for (UInt_t i=0; i<dsi.GetNSpectators(); i++) {; 370 ttf = new TTreeFormula( TString::Format( ""Formula%s"", dsi.GetSpectatorInfo(i).GetInternalName().Data() ),; 371 dsi.GetSpectatorInfo(i).GetExpression().Data(), tr );; 372 CheckTTreeFormula( ttf, dsi.GetSpectatorInfo(i).GetExpression(), hasDollar );; 373 fSpectatorFormulas.push_back( ttf );; 374 }; 375 ; 376 //; 377 // the cuts (one per class, if non-existent: formula pointer = 0); 378 //; 379 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName()) << ""transform cuts"" << Endl;; 380 for (formIt = fCutFormulas.begin(), formItEnd = fCutFormulas.end(); formIt!=formItEnd; ++formIt) if (*formIt) delete *formIt;; 381 fCutFormulas.clear();; 382 for (UInt_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:14643,Log,Log,14643,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['Log'],['Log']
Testability,"-length; Double_tTGeoBBox::fDZZ half-length; TStringTNamed::fNameobject identifier; Double_tTGeoBBox::fOrigin[3]box origin; UInt_tTGeoShape::fShapeBitsshape bits; Int_tTGeoShape::fShapeIdshape id; TStringTNamed::fTitleobject title. private:. TGeoBoolNode*fNodetop boolean node. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoCompositeShape(); Default constructor. TGeoCompositeShape(const char* name, const char* expression); Default constructor. TGeoCompositeShape(const char* expression); Default constructor. TGeoCompositeShape(const char* name, TGeoBoolNode* node); Constructor with a Boolean node. ~TGeoCompositeShape(); destructor. Double_t Capacity() const; Computes capacity of this shape [length^3] by sampling with 1% error. void ComputeBBox(); compute bounding box of the sphere. void ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); Computes normal vector in POINT to the composite shape. Bool_t Contains(Double_t* point) const; Tests if point is inside the shape. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute closest distance from point px,py to each corner. Double_t DistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from outside point to this composite shape.; Check if the bounding box is crossed within the requested distance. Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to outside of this composite shape. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); Divide all range of iaxis in range/step cells. void GetMeshNumbers(Int_t& nvert, Int_t& nsegs, Int_t& npols) const; Returns numbers of vertices, segments and polygons composing the shape mesh. void InspectShape() const; print shape parameters. void MakeNode(const char* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoCompositeShape.html:17842,Test,Tests,17842,root/html528/TGeoCompositeShape.html,https://root.cern,https://root.cern/root/html528/TGeoCompositeShape.html,2,['Test'],['Tests']
Testability,"-level p.d.f evaluates to NaN @ numerator=wrap_pdf=59.1285, denominator=wrap_pdf_Int[pTV]=200921; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=0.338546 cHl3=0.879879 cHq3=-1.35856; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=0.372361 cHl3=0.491134 cHq3=-0.886807; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=5.8312, denominator=wrap_pdf_Int[pTV]=12183.6; ; [#1] INFO:Fitting -- RooAbsPdf::fitTo(wrap_pdf) Calculating sum-of-weights-squared correction matrix for covariance matrix; [#1] INFO:InputArguments -- RooAbsData::plotOn(pseudo_dh) INFO: dataset has non-integer weights, auto-selecting SumW2 errors instead of Poisson errors; [#1] INFO:Plotting -- RooPlot::updateFitRangeNorm: New event count of 7389.24 will supersede previous event count of 9313.81 for normalization of PDF projections; DateJanuary 2022 ; AuthorRahul Balasubramanian ; Definition in file rf712_lagrangianmorphfit.C. tutorialsroofitrf712_lagrangianmorphfit.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html:16218,log,log,16218,doc/master/rf712__lagrangianmorphfit_8C.html,https://root.cern,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html,1,['log'],['log']
Testability,"-mode interface based on ncurses. Tig has been written by Jonas Fonseca.; See the full Tig manual for a detailed description.; Obtaining Tig; Tig is available as package from many Linux distributions. On Debian/Ubuntu it is available with the package name tig from the default repositories.; On RHEL-based systems it is available from the additional repository RepoForge.; On OS X it is easily installed via Homebrew:; brew install tig. Tig pager mode; Many git commands can be piped into tig. When tig is invoked this way, it is in pager mode: output will be colored according to the input format, and colored.; For instance it is possible to pipe the differences of one file like this:; git diff path/to/file.cxx | tig. or see the changes of one revision like this:; git show b204d4c87 | tig. The most important interactive tig commands are:. 'h': opens the help screen; 'q': closes current window; 'Q': closes all windows and exits. Log view; Tig invoked without any argument spawns a full log view with one line per commit including author, date and log message. Heads of the different branches are clearly indicated. To see a graph view indicating branching graphically (just like git log --oneline --graph), do:; tig --all. A log can be selected with Enter to see the revision changes.; An example of useful application of the log view is interactive cherry-picking: just press 'C' to cherry-pick currently selected commit into your current branch.; Blame view; Blame view is extremely useful to see which lines were committed by whom. It is an improved version of the standard git blame command with a much clearer and interactive output.; Each line can be selected to display the associated full commit log and diff. Usage:; tig blame path/to/file.cxx. Interactive staging and current status; tig status opens an interactive display to quickly select files to be staged. Move over the file and press 'u' to (un)stage it. The .gitconfig file; This file contains global (~/.gitconfig) or reposit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-tips-and-tricks.html:17118,Log,Log,17118,d/git-tips-and-tricks.html,https://root.cern,https://root.cern/d/git-tips-and-tricks.html,3,"['Log', 'log']","['Log', 'log']"
Testability,"-object, while; 3196 // we are actually a different type.; 3197 TVirtualStreamerInfo* si = GetInfoImp();; 3198 // Note: We tested to make sure the streamer info was available previously.; 3199 if (!si->IsCompiled()) {; 3200 Warning(""InitializeOffsets"", ""Streamer info for branch: %s has no elements array!"", GetName());; 3201 fInitOffsets = true;; 3202 return;; 3203 }; 3204 // FIXME: Check that fID is in range.; 3205 branchElem = si->GetElement(fID);; 3206 if (!branchElem) {; 3207 Warning(""InitializeOffsets"", ""Cannot get streamer element for branch: %s!"", GetName());; 3208 fInitOffsets = true;; 3209 return;; 3210 } else if (branchElem->TestBit(TStreamerElement::kRepeat)) {; 3211 // If we have a repeating streamerElement, use the next; 3212 // one as it actually hold the 'real' data member('s offset); 3213 if (si->GetElement(fID+1)) {; 3214 branchElem = si->GetElement(fID+1);; 3215 }; 3216 }; 3217 localOffset = branchElem->GetOffset();; 3218 branchClass = branchElem->GetClassPointer();; 3219 if (localOffset == TStreamerInfo::kMissing) {; 3220 fObject = nullptr;; 3221 } else {; 3222 renamed = branchClass && branchElem->GetNewClass() && (branchClass != branchElem->GetNewClass());; 3223 }; 3224 } else {; 3225 renamed = fTargetClass != fBranchClass;; 3226 }; 3227 if (!branchClass) {; 3228 Error(""InitializeOffsets"", ""Could not find class for branch: %s"", GetName());; 3229 fInitOffsets = true;; 3230 return;; 3231 }; 3232 ; 3233 //------------------------------------------------------------------------; 3234 // Extract the name of the STL branch in case it has been split.; 3235 //////////////////////////////////////////////////////////////////////////; 3236 ; 3237 TString stlParentName;; 3238 bool stlParentNameUpdated = false;; 3239 if( fType == 4 ); 3240 {; 3241 TBranch *br = GetMother()->GetSubBranch( this );; 3242 stlParentName = br->GetName();; 3243 stlParentName = stlParentName.Strip( TString::kTrailing, '.' );; 3244 ; 3245 // We may ourself contain the 'Mother' branch n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:114803,Test,TestBit,114803,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['Test'],['TestBit']
Testability,"-par);; 207 } else {; 208 double out = x * std::log(par) - TMath::LnGamma(x + 1.) - par;; 209 return std::exp(out);; 210 }; 211}; 212 ; 213inline double flexibleInterpSingle(unsigned int code, double low, double high, double boundary, double nominal,; 214 double paramVal, double res); 215{; 216 if (code == 0) {; 217 // piece-wise linear; 218 if (paramVal > 0) {; 219 return paramVal * (high - nominal);; 220 } else {; 221 return paramVal * (nominal - low);; 222 }; 223 } else if (code == 1) {; 224 // piece-wise log; 225 if (paramVal >= 0) {; 226 return res * (std::pow(high / nominal, +paramVal) - 1);; 227 } else {; 228 return res * (std::pow(low / nominal, -paramVal) - 1);; 229 }; 230 } else if (code == 2) {; 231 // parabolic with linear; 232 double a = 0.5 * (high + low) - nominal;; 233 double b = 0.5 * (high - low);; 234 double c = 0;; 235 if (paramVal > 1) {; 236 return (2 * a + b) * (paramVal - 1) + high - nominal;; 237 } else if (paramVal < -1) {; 238 return -1 * (2 * a - b) * (paramVal + 1) + low - nominal;; 239 } else {; 240 return a * std::pow(paramVal, 2) + b * paramVal + c;; 241 }; 242 } else if (code == 3) {; 243 // parabolic version of log-normal; 244 double a = 0.5 * (high + low) - nominal;; 245 double b = 0.5 * (high - low);; 246 double c = 0;; 247 if (paramVal > 1) {; 248 return (2 * a + b) * (paramVal - 1) + high - nominal;; 249 } else if (paramVal < -1) {; 250 return -1 * (2 * a - b) * (paramVal + 1) + low - nominal;; 251 } else {; 252 return a * std::pow(paramVal, 2) + b * paramVal + c;; 253 }; 254 } else if (code == 4) {; 255 double x = paramVal;; 256 if (x >= boundary) {; 257 return x * (high - nominal);; 258 } else if (x <= -boundary) {; 259 return x * (nominal - low);; 260 }; 261 ; 262 // interpolate 6th degree; 263 double t = x / boundary;; 264 double eps_plus = high - nominal;; 265 double eps_minus = nominal - low;; 266 double S = 0.5 * (eps_plus + eps_minus);; 267 double A = 0.0625 * (eps_plus - eps_minus);; 268 ; 269 return x * (S + t * A * (15",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MathFuncs_8h_source.html:7292,log,log-normal,7292,doc/master/MathFuncs_8h_source.html,https://root.cern,https://root.cern/doc/master/MathFuncs_8h_source.html,1,['log'],['log-normal']
Testability,"-running with ord = ""restore"" restores the saved list; Return <0 if something went wrong (-2 if at least one worker was not found); or the number of workers with status change (on master; 0 on client). void SaveActiveList(); Save current list of active workers. Int_t RestoreActiveList(); Restore saved list of active workers. TProof * Open(const char* url = 0, const char* conffile = 0, const char* confdir = 0, Int_t loglevel = 0); Start a PROOF session on a specific cluster. If cluster is 0 (the; default) then the PROOF Session Viewer GUI pops up and 0 is returned.; If cluster is ""lite://"" we start a PROOF-lite session.; If cluster is """" (empty string) then we connect to the cluster specified; by 'Proof.LocalDefault', defaulting to ""lite://"".; If cluster is ""pod://"" (case insensitive), then we connect to a PROOF cluster; managed by PROOF on Demand (PoD, http://pod.gsi.de ).; Via conffile a specific PROOF config file in the confir directory can be specified.; Use loglevel to set the default loging level for debugging.; The appropriate instance of TProofMgr is created, if not; yet existing. The instantiated TProof object is returned.; Use TProof::cd() to switch between PROOF sessions.; For more info on PROOF see the TProof ctor. TProofMgr * Mgr(const char* url); Get instance of the effective manager for 'url'; Return 0 on failure. void Reset(const char* url, Bool_t hard = kFALSE); Wrapper around TProofMgr::Reset(...). const TList * GetEnvVars(); Get environemnt variables. void AddEnvVar(const char* name, const char* value); Add an variable to the list of environment variables passed to proofserv; on the master and slaves. void DelEnvVar(const char* name); Remove an variable from the list of environment variables passed to proofserv; on the master and slaves. void ResetEnvVars(); Clear the list of environment variables passed to proofserv; on the master and slaves. void SaveWorkerInfo(); Save information about the worker set in the file .workers in the working; dir. Call",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:98311,log,loglevel,98311,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,4,['log'],"['loging', 'loglevel']"
Testability,"-s}{\kappa}}\). \( \gamma = 0.5772156649\dots\) is Euler's constant.; For the class Vavilov, Pdf returns the Vavilov distribution as function of Landau's parameter \(\lambda_L = \lambda_V/\kappa - \ln \kappa\), which is the convention used in the CERNLIB routines, and in the tables by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons: Tabulation of the Vavilov distribution, pp 187-203 in: National Research Council (U.S.), Committee on Nuclear Science: Studies in penetration of charged particles in matter, Nat. Akad. Sci. Publication 1133, Nucl. Sci. Series Report No. 39, Washington (Nat. Akad. Sci.) 1964, 388 pp. Available from Google books; Therefore, for small values of \(\kappa < 0.01\), pdf approaches the Landau distribution.; For values \(\kappa > 10\), the Gauss approximation should be used with \(\mu\) and \(\sigma\) given by Vavilov::Mean(kappa, beta2) and sqrt(Vavilov::Variance(kappa, beta2).; The original Vavilov pdf is obtained by v.Pdf(lambdaV/kappa-log(kappa))/kappa.; Two subclasses are provided:; VavilovFast uses the algorithm by A. Rotondi and P. Montagna, Fast calculation of Vavilov distribution, Nucl. Instr. and Meth. B47 (1990) 215-224, which has been implemented in CERNLIB (G115).; VavilovAccurate uses the algorithm by B. Schorr, Programs for the Landau and the Vavilov distributions and the corresponding random numbers, Computer Phys. Comm. 7 (1974) 215-224, which has been implemented in CERNLIB (G116). Both subclasses store coefficients needed to calculate \(p(\lambda; \kappa, \beta^2)\) for fixed values of \(\kappa\) and \(\beta^2\). Changing these values is computationally expensive.; VavilovFast is about 5 times faster for the calculation of the Pdf than VavilovAccurate; initialization takes about 100 times longer than calculation of the Pdf value. For the quantile calculation, VavilovFast is 30 times faster for the initialization, and 6 times faster for subsequent calculations. Initialization for Quantile takes 27 (11)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Vavilov.html:2024,log,log,2024,doc/master/classROOT_1_1Math_1_1Vavilov.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Vavilov.html,1,['log'],['log']
Testability,"-width histogram.; 5///; 6/// This tutorial illustrates how to:; 7/// - create a variable bin-width histogram with a binning such; 8/// that the population per bin is about the same.; 9/// - rebin a variable bin-width histogram into another one.; 10///; 11/// \macro_image; 12/// \macro_code; 13///; 14/// \author Rene Brun; 15 ; 16#include ""TH1.h""; 17#include ""TCanvas.h""; 18void rebin() {; 19 //create a fix bin histogram; 20 TH1F *h = new TH1F(""h"",""test rebin"",100,-3,3);; 21 Int_t nentries = 1000;; 22 h->FillRandom(""gaus"",nentries);; 23 Double_t xbins[1001];; 24 Int_t k=0;; 25 TAxis *axis = h->GetXaxis();; 26 for (Int_t i=1;i<=100;i++) {; 27 Int_t y = (Int_t)h->GetBinContent(i);; 28 if (y <=0) continue;; 29 Double_t dx = axis->GetBinWidth(i)/y;; 30 Double_t xmin = axis->GetBinLowEdge(i);; 31 for (Int_t j=0;j<y;j++) {; 32 xbins[k] = xmin +j*dx;; 33 k++;; 34 }; 35 }; 36 xbins[k] = axis->GetXmax();; 37 //create a variable bin-width histogram out of fix bin histogram; 38 //new rebinned histogram should have about 10 entries per bin; 39 TH1F *hnew = new TH1F(""hnew"",""rebinned"",k,xbins);; 40 hnew->FillRandom(""gaus"",10*nentries);; 41 ; 42 //rebin hnew keeping only 50% of the bins; 43 Double_t xbins2[501];; 44 Int_t kk=0;; 45 for (Int_t j=0;j<k;j+=2) {; 46 xbins2[kk] = xbins[j];; 47 kk++;; 48 }; 49 xbins2[kk] = xbins[k];; 50 TH1F *hnew2 = (TH1F*)hnew->Rebin(kk,""hnew2"",xbins2);; 51 ; 52 //draw the 3 histograms; 53 TCanvas *c1 = new TCanvas(""c1"",""c1"",800,1000);; 54 c1->Divide(1,3);; 55 c1->cd(1);; 56 h->Draw();; 57 c1->cd(2);; 58 hnew->Draw();; 59 c1->cd(3);; 60 hnew2->Draw();; 61}; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; TCanvas.h; TH1.h; xminfloat xminDefinition THbookFile.cxx:95; nentriesint nentriesDefinition THbookFile.cxx:91; TAxisClass to manage histogram axis.Definition TAxis.h:31; TAxis::GetXmaxDouble_t GetXmax() constDefinition TAxis.h:140; TAxis::GetBinLowEdgevirtual Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rebin_8C_source.html:710,test,test,710,doc/master/rebin_8C_source.html,https://root.cern,https://root.cern/doc/master/rebin_8C_source.html,1,['test'],['test']
Testability,"-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetMaximumX and TF1::GetX ; Reimplemented in TF2.; Definition at line 1614 of file TF1.cxx. ◆ GetMaximumStored(). virtual Double_t TF1::GetMaximumStored ; (; ); const. inlinevirtual . Definition at line 501 of file TF1.h. ◆ GetMaximumX(). Double_t TF1::GetMaximumX ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the X value corresponding to the maximum value of the function. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetX ; Definition at line 1655 of file TF1.cxx. ◆ GetMethodCall(). TMethodCall * TF1::GetMethodCall ; (; ); const. inline . Definition at line 522 of file TF1.h. ◆ GetMinimum(). Double_t T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:75774,log,logx,75774,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,1,['log'],['logx']
Testability,"-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetMaximumX and TF1::GetX ; Reimplemented in TF2.; Definition at line 1696 of file TF1.cxx. ◆ GetMinimumStored(). virtual Double_t TF1::GetMinimumStored ; (; ); const. inlinevirtual . Definition at line 505 of file TF1.h. ◆ GetMinimumX(). Double_t TF1::GetMinimumX ; (; Double_t ; xmin = 0, . Double_t ; xmax = 0, . Double_t ; epsilon = 1.E-10, . Int_t ; maxiter = 100, . Bool_t ; logx = false . ); const. virtual . Returns the X value corresponding to the minimum value of the function on the (xmin, xmax) interval. ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ) and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number of iteration of the Brent algorithm If the flag logx is set the grid search is done in log step size This is done automatically if the log scale is set in the current Pad; NOTE: see also TF1::GetX ; Definition at line 1823 of file TF1.cxx. ◆ GetMinMaxNDim(). Double_t TF1::GetMinMaxNDim ; (; Double_t * ; x, . Bool_t ; findmax, . Double_t ; epsilon = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:78102,log,logx,78102,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,1,['log'],['logx']
Testability,". ). Get into 'env' the value of integer RC env variable 'rcenv' on node 'ord'. ; Definition at line 6665 of file TProof.cxx. ◆ GetRC() [3/3]. Int_t TProof::GetRC ; (; const char * ; RCenv, . TString & ; env, . const char * ; ord = ""0"" . ). Get into 'env' the value of string RC env variable 'rcenv' on node 'ord'. ; Definition at line 6717 of file TProof.cxx. ◆ GetRealTime(). Float_t TProof::GetRealTime ; (; ); const. inline . Definition at line 930 of file TProof.h. ◆ GetRemoteProtocol(). Int_t TProof::GetRemoteProtocol ; (; ); const. inline . Definition at line 913 of file TProof.h. ◆ GetRunStatus(). ERunStatus TProof::GetRunStatus ; (; ); const. inline . Definition at line 943 of file TProof.h. ◆ GetSandbox(). Int_t TProof::GetSandbox ; (; TString & ; sb, . Bool_t ; assert = kFALSE, . const char * ; rc = 0 . ). protected . Set the sandbox path from ' Proof.Sandbox' or the alternative var 'rc'. ; Use the existing setting or the default if nothing is found. If 'assert' is kTRUE, make also sure that the path exists. Return 0 on success, -1 on failure ; Definition at line 1016 of file TProof.cxx. ◆ GetSeqNum(). Int_t TProof::GetSeqNum ; (; ); const. inline . Definition at line 918 of file TProof.h. ◆ GetSessionID(). Int_t TProof::GetSessionID ; (; ); const. inline . Definition at line 919 of file TProof.h. ◆ GetSessionTag(). const char * TProof::GetSessionTag ; (; ); const. inline . Definition at line 909 of file TProof.h. ◆ GetStagingStatusDataSet(). TFileCollection * TProof::GetStagingStatusDataSet ; (; const char * ; dataset). virtual . Obtains a TFileCollection showing the staging status of the specified dataset. ; A valid dataset manager and dataset staging requests repository must be present on the endpoint. ; Reimplemented in TProofLite.; Definition at line 11073 of file TProof.cxx. ◆ GetStatistics(). void TProof::GetStatistics ; (; Bool_t ; verbose = kFALSE). Get statistics about CPU time, real time and bytes read. ; If verbose, print the resuls (always availab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:105739,assert,assert,105739,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['assert'],['assert']
Testability,". ). Set surface property coefficients. ; Parameters. [in]qqadiffusion coefficient for diffused light [0.,1.] ; [in]qqddiffusion coefficient for direct light [0.,1.] ; [in]qqsdiffusion coefficient for reflected light [0.,1.] ; [in]nnqspower coefficient for reflected light (.GE.1). Lightness model formula: Y = YD*QA + > YLi*(QD*cosNi+QS*cosRi); Parameters. [out]irepreply (0 - O.K, -1 error) . Definition at line 3975 of file TPainter3dAlgorithms.cxx. ◆ SurfaceSpherical(). void TPainter3dAlgorithms::SurfaceSpherical ; (; Int_t ; ipsdr, . Int_t ; iordr, . Int_t ; na, . Int_t ; nb, . const char * ; chopt . ). Draw surface in spheric coordinates. ; Parameters. [in]ipsdrpseudo-rapidity flag ; [in]iordrorder of variables (0 - THETA,PHI; 1 - PHI,THETA) ; [in]nanumber of steps along 1st variable ; [in]nbnumber of steps along 2nd variable ; [in]choptspecific options. chopt = 'BF' from BACK to FRONT; chopt = 'FB' from FRONT to BACK . Definition at line 3811 of file TPainter3dAlgorithms.cxx. ◆ TestEdge(). void TPainter3dAlgorithms::TestEdge ; (; Double_t ; del, . Double_t ; xyz[52][3], . Int_t ; i1, . Int_t ; i2, . Int_t ; iface[3], . Double_t ; abcd[4], . Int_t & ; irep . ). protected . Test edge against face (triangle) ; Parameters. [in]delprecision ; [in]xyznodes ; [in]i11-st node of edge ; [in]i22-nd node of edge ; [in]ifacetriangular face ; [in]abcdface plane; [out]irep1: edge under face, 0: no decision, +1: edge before face . Definition at line 5365 of file TPainter3dAlgorithms.cxx. ◆ ZDepth(). void TPainter3dAlgorithms::ZDepth ; (; Double_t ; xyz[52][3], . Int_t & ; nface, . Int_t ; iface[48][3], . Double_t ; dface[48][6], . Double_t ; abcd[48][4], . Int_t * ; iorder . ). Z-depth algorithm for set of triangles. ; Parameters. [in]xyznodes ; [in]nfacenumber of triangular faces ; [in]ifacefaces (triangles); [in]dfacearray for min-max scopes ; [in]abcdarray for face plane equations; [out]iorderface order . Definition at line 5172 of file TPainter3dAlgorithms.cxx. Member Data ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPainter3dAlgorithms.html:43414,Test,TestEdge,43414,doc/master/classTPainter3dAlgorithms.html,https://root.cern,https://root.cern/doc/master/classTPainter3dAlgorithms.html,1,['Test'],['TestEdge']
Testability,. ); const. inline . check if distribution has a defined domain and return in case its domain ; Definition at line 139 of file TUnuranContDist.h. ◆ HasCdf(). bool TUnuranContDist::HasCdf ; (; ); const. inline . check if a cdf function is provided for the distribution ; Definition at line 148 of file TUnuranContDist.h. ◆ HasMode(). bool TUnuranContDist::HasMode ; (; ); const. inline . check if distribution has a pre-computed mode ; Definition at line 153 of file TUnuranContDist.h. ◆ HasPdfArea(). bool TUnuranContDist::HasPdfArea ; (; ); const. inline . check if distribution has a pre-computed area below the Pdf ; Definition at line 159 of file TUnuranContDist.h. ◆ IsA(). TClass * TUnuranContDist::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TUnuranBaseDist.; Definition at line 216 of file TUnuranContDist.h. ◆ IsLogPdf(). bool TUnuranContDist::IsLogPdf ; (; ); const. inline . flag to control if given function represent the log of a pdf ; Definition at line 175 of file TUnuranContDist.h. ◆ Mode(). double TUnuranContDist::Mode ; (; ); const. inline . return the mode (x location of maximum of the pdf) ; Definition at line 164 of file TUnuranContDist.h. ◆ operator=(). TUnuranContDist & TUnuranContDist::operator= ; (; const TUnuranContDist & ; rhs). Assignment operator. ; Definition at line 78 of file TUnuranContDist.cxx. ◆ Pdf(). double TUnuranContDist::Pdf ; (; double ; x); const. evaluate the Probability Density function. ; Used by the UnuRan algorithms ; Definition at line 137 of file TUnuranContDist.cxx. ◆ PdfArea(). double TUnuranContDist::PdfArea ; (; ); const. inline . return area below the pdf ; Definition at line 169 of file TUnuranContDist.h. ◆ SetCdf() [1/2]. void TUnuranContDist::SetCdf ; (; const ROOT::Math::IGenFunction & ; cdf). set cdf distribution using a generic function interface ; Definition at line 117 of file TUnuranContDist.cxx. ◆ SetCdf() [2/2]. void TUnuranContDist::SetCdf ; (; TF1 * ; cdf),MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnuranContDist.html:10229,log,log,10229,doc/master/classTUnuranContDist.html,https://root.cern,https://root.cern/doc/master/classTUnuranContDist.html,1,['log'],['log']
Testability,". 0. Setting up ROOT | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 0. Setting up ROOT. Downloading; If you don't have ROOT yet, download it! We have binaries but you can also build it your",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/0-setting-root.html:716,test,tests,716,d/0-setting-root.html,https://root.cern,https://root.cern/d/0-setting-root.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". 1. Extracting an object from a TFile | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 1. Extracting an object from a TFile. File can be local on your disk or remote accessible for instance ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/1-extracting-object-tfile.html:734,test,tests,734,d/1-extracting-object-tfile.html,https://root.cern,https://root.cern/d/1-extracting-object-tfile.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". 10. Go Parallel! | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 10. Go Parallel!. Why you care; Number crunching takes time. If you look at top (open a terminal, type top) in Linux or you",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/10-go-parallel.html:714,test,tests,714,d/10-go-parallel.html,https://root.cern,https://root.cern/d/10-go-parallel.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". 11. Done! | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 11. Done!. Congratulations for finishing the tutorials! Here are a few relevant pointers on where to go from here:; The forum; Bug",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/11-done.html:707,test,tests,707,d/11-done.html,https://root.cern,https://root.cern/d/11-done.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". 2. Running code in ROOT | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 2. Running code in ROOT. Interpreting; ROOT executes your C++ code. There are two ways: loading it into the interpre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/2-running-code-root.html:721,test,tests,721,d/2-running-code-root.html,https://root.cern,https://root.cern/d/2-running-code-root.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". 3. Examining a TTree's data | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 3. Examining a TTree's data. The TTree; A TTree is a collection of similar data. It is the collection used by ba",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/3-examining-ttrees-data.html:725,test,tests,725,d/3-examining-ttrees-data.html,https://root.cern,https://root.cern/d/3-examining-ttrees-data.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". 4. Histogramming | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 4. Histogramming. What is a histogram?; Our TTree contains for instance the energy of all electrons. What we usually care a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/4-histogramming.html:714,test,tests,714,d/4-histogramming.html,https://root.cern,https://root.cern/d/4-histogramming.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". 5. Fitting | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 5. Fitting. Distributions; Some analyses want to check theory predictions that exist as a function definition. Others want to use",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/5-fitting.html:708,test,tests,708,d/5-fitting.html,https://root.cern,https://root.cern/d/5-fitting.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". 6. Multivariate Analysis | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 6. Multivariate Analysis. Multiple Variables; The muon trigger should fire more likely for higher muon momenta - le",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/6-multivariate-analysis.html:722,test,tests,722,d/6-multivariate-analysis.html,https://root.cern,https://root.cern/d/6-multivariate-analysis.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". 7. Using the TTreeReader | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 7. Using the TTreeReader. Accessing Value from a TTree; Up to now we have used TTree's ability to parse TTree::Draw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/7-using-ttreereader.html:722,test,tests,722,d/7-using-ttreereader.html,https://root.cern,https://root.cern/d/7-using-ttreereader.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". 8. Efficiency Calculation | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 8. Efficiency Calculation. Efficiency; Basically all analyses involve selections on parameters - as an example we ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/8-efficiency-calculation.html:723,test,tests,723,d/8-efficiency-calculation.html,https://root.cern,https://root.cern/d/8-efficiency-calculation.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". 9. Fitting By Coding | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 9. Fitting By Coding. TF1; In ROOT you can fit histograms (or TEfficiency objects) using formulas that you provide, and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/9-fitting-coding.html:718,test,tests,718,d/9-fitting-coding.html,https://root.cern,https://root.cern/d/9-fitting-coding.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome First Steps With ROOT. The ROOT framework provides a number of classes, grouped into several class cathegories. To start using ROOT, you may find useful to browse the following documents:. Processing data with ROOT (to learn about the interactive and batch use of ROOT); Analyzing data with ROOT (about histograms and trees; mathematical and statistical tools); Showing results with ROOT (explaining pads, 2D and 3D graphics, and the GUI editor); Simulation in ROOT (about the virtual Monte Carlo and the geometry packages); ROOT I/O (explaining how to use ROOT files and trees, and how to access data from d/b or other nodes). . Processing data with ROOT ›. Navigate through this book; Processing data with ROOT; Showing results with ROOT; Simulation in ROOT; ROOT I/O. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/first-steps-root-1.html:3164,test,tests,3164,d/first-steps-root-1.html,https://root.cern,https://root.cern/d/first-steps-root-1.html,4,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". ; Definition at line 542 of file RooMCStudy.cxx. ◆ fit() [2/2]. bool RooMCStudy::fit ; (; Int_t ; nSamples, . TList & ; dataSetList . ). Fit 'nSamples' datasets, as supplied in 'dataSetList'. ; Definition at line 557 of file RooMCStudy.cxx. ◆ fitParams(). const RooArgSet * RooMCStudy::fitParams ; (; Int_t ; sampleNum); const. Return an argset with the fit parameters for the given sample number. ; NB: The fit parameters are only stored for successful fits, thus the maximum sampleNum can be less that the number of generated samples and if so, the indices will be out of synch with genData() and fitResult() ; Definition at line 813 of file RooMCStudy.cxx. ◆ fitParDataSet(). const RooDataSet & RooMCStudy::fitParDataSet ; (; ). Return a RooDataSet containing the post-fit parameters of each toy cycle. ; This dataset also contains any additional output that was generated by study modules that were added to this RooMCStudy. By default, the two following variables are added (apart from fit parameters):; NLL: The value of the negative log-likelihood for each run.; ngen: Number of events generated for each run. . Definition at line 793 of file RooMCStudy.cxx. ◆ fitResult(). const RooFitResult * RooMCStudy::fitResult ; (; Int_t ; sampleNum); const. Return the RooFitResult of the fit with the given run number. ; NoteFit results are not saved by default. This requires passing FitOptions(Save(), ...) to the constructor. ; Definition at line 831 of file RooMCStudy.cxx. ◆ fitSample(). bool RooMCStudy::fitSample ; (; RooAbsData * ; genSample). protected . Internal method. ; Fit given dataset with fit model. If fit converges (TMinuit status code zero) The fit results are appended to the fit results dataset; If the fit option ""r"" is supplied, the RooFitResult objects will always be saved, regardless of the fit status. RooFitResults objects can be retrieved later via fitResult(). ; Definition at line 648 of file RooMCStudy.cxx. ◆ genData(). RooAbsData * RooMCStudy::genData ; (; Int_t ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMCStudy.html:25722,log,log-likelihood,25722,doc/master/classRooMCStudy.html,https://root.cern,https://root.cern/doc/master/classRooMCStudy.html,1,['log'],['log-likelihood']
Testability,". ; Definition at line 754 of file TH1.cxx. ◆ AndersonDarlingTest() [1/2]. Double_t TH1::AndersonDarlingTest ; (; const TH1 * ; h2, . Double_t & ; advalue . ); const. virtual . Same function as above but returning also the test statistic value. ; Definition at line 8080 of file TH1.cxx. ◆ AndersonDarlingTest() [2/2]. Double_t TH1::AndersonDarlingTest ; (; const TH1 * ; h2, . Option_t * ; option = """" . ); const. virtual . Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ; The AD 2 sample test formula are derived from the paper F.W Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; The test is implemented in root in the ROOT::Math::GoFTest class It is the same formula ( (6) in the paper), and also shown in this preprint; Binned data are considered as un-binned data with identical observation happening in the bin center.; Parameters. [in]h2Pointer to 1D histogram ; [in]optionis a character string to specify options; ""D"" Put out a line of ""Debug"" printout; ""T"" Return the normalized A-D test statistic. Note1: Underflow and overflow are not considered in the test; Note2: The test works only for un-weighted histogram (i.e. representing counts); Note3: The histograms are not required to have the same X axis; Note4: The test works only for 1-dimensional histograms . Definition at line 8062 of file TH1.cxx. ◆ AutoP2FindLimits(). Int_t TH1::AutoP2FindLimits ; (; Double_t ; xmi, . Double_t ; xma . ). protectedvirtual . Buffer-based estimate of the histogram range using the power of 2 algorithm. ; Used by the autobin power of 2 algorithm.; Works on arguments (min and max from fBuffer) and internal inputs: fXmin, fXmax, NBinsX (from fXaxis), ... Result save internally in fXaxis.; Overloaded by TH2 and TH3.; Return -1 if internal inputs are inconsistent, 0 otherwise. ; Definition at line 1343 of file TH1.cxx. ◆ AutoP2GetBins(). Int_t TH1::AutoP2GetBins ; (; Int_t ; n). inlinestaticprotected . Auxiliary functi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:80816,test,test,80816,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['test'],['test']
Testability,". ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome Support. Top level support is what makes ROOT a success. We do our utmost to solve any issues as soon as possible. To make this task as efficient as possible for us follow these few simple rules. In case you think you have found a bug, please first search the forum and roottalk digests to see if the issue has already been discussed. If not then please file a bug report. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/support.html:2752,test,tests,2752,d/support.html,https://root.cern,https://root.cern/d/support.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". ; For this, extract the logs and take the names of TProofLogElements ; Definition at line 145 of file TProofProgressMemoryPlot.cxx. ◆ Clear(). void TProofProgressMemoryPlot::Clear ; (; Option_t * ; = nullptr). overridevirtual . Clear the canvases. ; Reimplemented from TObject.; Definition at line 181 of file TProofProgressMemoryPlot.cxx. ◆ DoAveragePlot(). TGraph * TProofProgressMemoryPlot::DoAveragePlot ; (; Int_t & ; max_el, . Int_t & ; min_el . ). protected . Create the average plots. ; Definition at line 381 of file TProofProgressMemoryPlot.cxx. ◆ DoAveragePlotOld(). TGraph * TProofProgressMemoryPlot::DoAveragePlotOld ; (; Int_t & ; max_el, . Int_t & ; min_el . ). protected . ◆ DoMasterPlot(). TGraph * TProofProgressMemoryPlot::DoMasterPlot ; (; TProofLogElem * ; ple). protected . a master or submaster log display without meaningful labels for now ; Definition at line 609 of file TProofProgressMemoryPlot.cxx. ◆ DoPlot(). void TProofProgressMemoryPlot::DoPlot ; (; ). Draw the plot from the logs. ; Definition at line 192 of file TProofProgressMemoryPlot.cxx. ◆ DoWorkerPlot(). TGraph * TProofProgressMemoryPlot::DoWorkerPlot ; (; TProofLogElem * ; ple). protected . Make a memory consumption graph for a worker. ; Definition at line 553 of file TProofProgressMemoryPlot.cxx. ◆ ParseLine(). Int_t TProofProgressMemoryPlot::ParseLine ; (; TString ; l, . Long64_t & ; v, . Long64_t & ; r, . Long64_t & ; e . ). protected . Extract from line 'l' the virtual memory 'v', the resident memory 'r' and the number of events 'e'. ; The line is assumed to be in the form ""... Memory 130868 virtual 31540 ... event 5550"" The fields are only filled if >= 0 . Return 0 on success, -1 if any of the values could not be filled (the output fields are not touched in such a case). ; Definition at line 507 of file TProofProgressMemoryPlot.cxx. ◆ Select(). void TProofProgressMemoryPlot::Select ; (; Int_t ; id). actions of select all/clear all button ; Definition at line 644 of file TProofProgressM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofProgressMemoryPlot.html:38758,log,logs,38758,doc/master/classTProofProgressMemoryPlot.html,https://root.cern,https://root.cern/doc/master/classTProofProgressMemoryPlot.html,1,['log'],['logs']
Testability,". ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TProofProgressLog Class ReferenceGUI » Session Viewer. ; Dialog used to display Proof session logs from the Proof progress dialog. ; It uses TProofMgr::GetSessionLogs() mechanism internally ; Definition at line 31 of file TProofProgressLog.h. Public Member Functions;  TProofProgressLog (const char *url=nullptr, Int_t sessionidx=0, Int_t w=700, Int_t h=600);  Create a window frame for log messages. ;  ;  TProofProgressLog (TProofProgressDialog *d, Int_t w=700, Int_t h=600);  Create a window frame for log messages. ;  ;  ~TProofProgressLog () override;  Destructor. ;  ; void AddBuffer (const char *buffer);  Add text to the window. ;  ; void BuildLogList (Bool_t create=kFALSE);  Build the list of workers. ;  ; void Clear (Option_t *=nullptr) override;  Clear log window. ;  ; void CloseWindow () override;  Handle close button or when closed via window manager action. ;  ; void DoLog (Bool_t grep=kFALSE);  Display logs. ;  ; TClass * IsA () const override;  ; void LoadBuffer (const char *buffer);  Load a text buffer in the window. ;  ; void LoadFile (const char *file);  Load a file in the window. ;  ; void LogMessage (const char *msg, Bool_t all);  Load/append a log msg in the log frame, if open. ;  ; void NoLineEntry ();  Enable/disable the line number entry. ;  ; void Popup ();  Show log window. ;  ; void Rebuild ();  Rebuild the log info for a new entered session. ;  ; void SaveToFile ();  Save the logs to a file Only the name of the file is taken, no expansion. ;  ; void Select (Int_t id, Bool_t all=kTRUE);  actions of select all/clear all button ;  ; void SetGrepView ();  Sets the view of grep filters according to the value of checkboxes. ;  ; void SetUrl (const char *url);  ; void Streamer (TBuffer &) override;  S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofProgressLog.html:1063,log,log,1063,doc/master/classTProofProgressLog.html,https://root.cern,https://root.cern/doc/master/classTProofProgressLog.html,1,['log'],['log']
Testability,". ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; RooStats::HypoTestResult Class ReferenceRooFit » RooStats. ; HypoTestResult is a base class for results from hypothesis tests. ; Any tool inheriting from HypoTestCalculator can return a HypoTestResult. As such, it stores a p-value for the null-hypothesis (eg. background-only) and an alternate hypothesis (eg. signal+background). The p-values can also be transformed into confidence levels ( \(CL_{b}\), \(CL_{s+b}\)) in a trivial way. The ratio of the \(CL_{s+b}\) to \(CL_{b}\) is often called \(CL_{s}\), and is considered useful, though it is not a probability. Finally, the p-value of the null can be transformed into a number of equivalent Gaussian sigma using the Significance method.; The p-value of the null for a given test statistic is rigorously defined and this is the starting point for the following conventions. Conventions used in this class; The p-value for the null and alternate are on the same side of the observed value of the test statistic. This is the more standard convention and avoids confusion when doing inverted tests.; For exclusion, we also want the formula \(CL_{s} = CL_{s+b} / CL_{b}\) to hold which therefore defines our conventions for \(CL_{s+b}\) and \(CL_{b}\). \(CL_{s}\) was specifically invented for exclusion and therefore all quantities need be related through the assignments as they are for exclusion: \(CL_{s+b} = p_{s+b}\); \(CL_{b} = p_{b}\). This is derived by considering the scenarios of a powerful and not powerful inverted test, where for the not so powerful test, \(CL_{s}\) must be close to one.; For results of Hypothesis tests, \(CL_{s}\) has no similar direct interpretation as for exclusion and can be larger than one. ; Definition at line 22 of file HypoTestResult.h. Public Member Functions;  Hy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html:1018,test,test,1018,doc/master/classRooStats_1_1HypoTestResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html,1,['test'],['test']
Testability,". ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TestBinomial.C File ReferenceTutorials » Fit Tutorials. Detailed Description; Perform a fit to a set of data with binomial errors like those derived from the division of two histograms. ; Three different fits are performed and compared:. simple least square fit to the divided histogram obtained from TH1::Divide with option b; least square fit to the TGraphAsymmErrors obtained from TGraphAsymmErrors::BayesDivide; likelihood fit performed on the dividing histograms using binomial statistics with the TBinomialEfficiency class. The first two methods are biased while the last one is statistical correct. Running the script passing an integer value n larger than 1, n fits are performed and the bias are also shown. To run the script :; to show the bias performing 100 fits for 1000 events per ""experiment""; root[0]: .x TestBinomial.C+; to show the bias performing 100 fits for 1000 events per ""experiment""; .x TestBinomial.C+(100, 1000). ; 32 68; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 0.350714; NDf = 3; Edm = 1.27001e-06; NCalls = 81; p0 = 0.694132 +/- 0.210029 ; p1 = 19.3471 +/- 5.85483 ; p2 = 5.2245 +/- 5.11013 ; ****************************************; Minimizer is Minuit2 / Migrad; MinFCN = 14.3081; Chi2 = 28.6162; NDf = 21; Edm = 4.11934e-08; NCalls = 91; p0 = 0.822966 +/- 0.0807557 (limited); p1 = 21.9819 +/- 2.14579 ; p2 = 3.36105 +/- 1.05866 ; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 1.64738; NDf = 5; Edm = 1.01171e-06; NCalls = 137; p0 = 0.677329 +/- 0.135567 (limited); p1 = 15.5028 +/- 4.11118 ; p2 = 4.10441 +/- 2.77044 ; ****************************************; Minimizer is Minuit2 / Migrad; MinFCN = 19.363; Chi2 = 38.7261; NDf = 25; Edm = 9.40378e-08; NCalls = 80; p0 = 0.778188 +/- 0.0815568 (limited); p1 = 23.7948 +/- 2.21356 ; p2 = 4.58769 +/- 1.24153 ; ****************************************; Minimize",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TestBinomial_8C.html:1046,Test,TestBinomial,1046,doc/master/TestBinomial_8C.html,https://root.cern,https://root.cern/doc/master/TestBinomial_8C.html,1,['Test'],['TestBinomial']
Testability,". ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rebin.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Rebin a variable bin-width histogram. ; This tutorial illustrates how to:; create a variable bin-width histogram with a binning such that the population per bin is about the same.; rebin a variable bin-width histogram into another one. ; #include ""TH1.h""; #include ""TCanvas.h""; void rebin() {; //create a fix bin histogram; TH1F *h = new TH1F(""h"",""test rebin"",100,-3,3);; Int_t nentries = 1000;; h->FillRandom(""gaus"",nentries);; Double_t xbins[1001];; Int_t k=0;; TAxis *axis = h->GetXaxis();; for (Int_t i=1;i<=100;i++) {; Int_t y = (Int_t)h->GetBinContent(i);; if (y <=0) continue;; Double_t dx = axis->GetBinWidth(i)/y;; Double_t xmin = axis->GetBinLowEdge(i);; for (Int_t j=0;j<y;j++) {; xbins[k] = xmin +j*dx;; k++;; }; }; xbins[k] = axis->GetXmax();; //create a variable bin-width histogram out of fix bin histogram; //new rebinned histogram should have about 10 entries per bin; TH1F *hnew = new TH1F(""hnew"",""rebinned"",k,xbins);; hnew->FillRandom(""gaus"",10*nentries);; ; //rebin hnew keeping only 50% of the bins; Double_t xbins2[501];; Int_t kk=0;; for (Int_t j=0;j<k;j+=2) {; xbins2[kk] = xbins[j];; kk++;; }; xbins2[kk] = xbins[k];; TH1F *hnew2 = (TH1F*)hnew->Rebin(kk,""hnew2"",xbins2);; ; //draw the 3 histograms; TCanvas *c1 = new TCanvas(""c1"",""c1"",800,1000);; c1->Divide(1,3);; c1->cd(1);; h->Draw();; c1->cd(2);; hnew->Draw();; c1->cd(3);; hnew2->Draw();; }; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; TCanvas.h; TH1.h; xminfloat xminDefinition THbookFile.cxx:95; nentriesint nentriesDefinition THbookFile.cxx:91; TAxisClass to manage histogram axis.Definition TAxis.h:31; TAxis::GetXmaxDouble_t GetXmax() constDefinition TAxis.h:140; TAxis::GetBinLowEdgevirtual Double_t GetBinLowEdge(Int_t bin) constReturn low edge of bin.Definition",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rebin_8C.html:554,test,test,554,doc/master/rebin_8C.html,https://root.cern,https://root.cern/doc/master/rebin_8C.html,1,['test'],['test']
Testability,". ; Returns by default the p-value; option ""t"" returns the test statistic value ""Dn"". ; Definition at line 913 of file GoFTest.cxx. ◆ KolmogorovSmirnov2SamplesTest() [2/2]. void ROOT::Math::GoFTest::KolmogorovSmirnov2SamplesTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Kolmogorov-Smirnov 2-Samples Test. ; The Kolmogorov-Smirnov 2-Samples Test algorithm is described at http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/ks2samp.htm and described and taken from https://root.cern/doc/master/namespaceTMath.html ; Definition at line 896 of file GoFTest.cxx. ◆ KolmogorovSmirnovTest() [1/2]. Double_t ROOT::Math::GoFTest::KolmogorovSmirnovTest ; (; const Char_t * ; option = ""p""); const. Kolmogorov-Smirnov 1-Sample Test. ; Returns default p-value; option ""t"" returns the test statistic value ""Dn"". ; Definition at line 945 of file GoFTest.cxx. ◆ KolmogorovSmirnovTest() [2/2]. void ROOT::Math::GoFTest::KolmogorovSmirnovTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Kolmogorov-Smirnov 1-Sample Test. ; The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm and described and taken from (4) Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge University Press ; Definition at line 921 of file GoFTest.cxx. ◆ LogNormalCDF(). Double_t ROOT::Math::GoFTest::LogNormalCDF ; (; Double_t ; x); const. private . ◆ LogSample(). void ROOT::Math::GoFTest::LogSample ; (; ). private . Applies the logarithm to the sample when the specified distribution to test is LogNormal. ; Definition at line 303 of file GoFTest.cxx. ◆ operator()() [1/2]. void ROOT::Math::GoFTest::operator() ; (; ETestType ; test, . Double_t & ; pvalue, . Double_t & ; testStat . ); const. The class's unary functions performing the gif test according to the ETestType provide",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:15415,test,testStat,15415,doc/master/classROOT_1_1Math_1_1GoFTest.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html,1,['test'],['testStat']
Testability,". ;  ; Double_t Ldexp (Double_t x, Int_t exp);  Returns the result of multiplying x (the significant) by 2 raised to the power of exp (the exponent). ;  ; constexpr Double_t Ln10 ();  Natural log of 10 (to convert log to ln) ;  ; Double_t LnGamma (Double_t z);  Computation of ln[gamma(z)] for all z. ;  ; template<typename Iterator > ; Iterator LocMax (Iterator first, Iterator last);  Returns index of array with the maximum element. ;  ; template<typename T > ; Long64_t LocMax (Long64_t n, const T *a);  Returns index of array with the maximum element. ;  ; template<typename Iterator > ; Iterator LocMin (Iterator first, Iterator last);  Returns index of array with the minimum element. ;  ; template<typename T > ; Long64_t LocMin (Long64_t n, const T *a);  Returns index of array with the minimum element. ;  ; Double_t Log (Double_t x);  Returns the natural logarithm of x. ;  ; Double_t Log10 (Double_t x);  Returns the common (base-10) logarithm of x. ;  ; Double_t Log2 (Double_t x);  Returns the binary (base-2) logarithm of x. ;  ; constexpr Double_t LogE ();  Base-10 log of e (to convert ln to log) ;  ; Double_t LogNormal (Double_t x, Double_t sigma, Double_t theta=0, Double_t m=1);  Computes the density of LogNormal distribution at point x. ;  ; Double_t Max (Double_t a, Double_t b);  Returns the largest of a and b. ;  ; Float_t Max (Float_t a, Float_t b);  Returns the largest of a and b. ;  ; Int_t Max (Int_t a, Int_t b);  Returns the largest of a and b. ;  ; Long64_t Max (Long64_t a, Long64_t b);  Returns the largest of a and b. ;  ; Long_t Max (Long_t a, Long_t b);  Returns the largest of a and b. ;  ; Short_t Max (Short_t a, Short_t b);  Returns the largest of a and b. ;  ; UInt_t Max (UInt_t a, UInt_t b);  Returns the largest of a and b. ;  ; ULong64_t Max (ULong64_t a, ULong64_t b);  Returns the largest of a and b. ;  ; ULong_t Max (ULong_t a, ULong_t b);  Returns the largest of a and b. ;  ; UShort_t Max (UShort_t a, UShort_t b);  Returns the largest of a and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMath.html:12762,log,logarithm,12762,doc/master/namespaceTMath.html,https://root.cern,https://root.cern/doc/master/namespaceTMath.html,1,['log'],['logarithm']
Testability,". ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::Option< T >; virtual Bool_t IsPreDefinedValLocal (const T &) const;  ; Bool_t IsPreDefinedValLocal (const TString &val) const;  ; virtual void SetValueLocal (const TString &val, Int_t i=-1);  ; void SetValueLocal (const TString &val, Int_t);  ; void SetValueLocal (const TString &val, Int_t);  ; T & Value (Int_t=-1);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TMVA::OptionBase; static MsgLogger & Log ();  ;  Protected Attributes inherited from TMVA::Option< T >; std::vector< T > fPreDefs;  ; T * fRefPtr;  . #include <TMVA/Option.h>. Inheritance diagram for TMVA::Option< T * >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Option(). template<typename T > . TMVA::Option< T * >::Option ; (; T *& ; ref, . Int_t ; size, . const TString & ; name, . const TString & ; desc . ). inline . Definition at line 135 of file Option.h. ◆ ~Option(). template<typename T > . virtual TMVA::Option< T * >::~Option ; (; ). inlinevirtual . Reimplemented from TMVA::Option< T >.; Definition at line 137 of file Option.h. Member Function Documentation. ◆ GetArraySize(). template<typename T > . virtual Int_t TMVA::Option< T * >::GetArraySize ; (; ); const. inlinevirtual . Reimplemented from TMVA::Option< T >.; Definition at line 146 of file Option.h. ◆ GetValue(). template<typename T > . TString TMVA::Option< T * ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Option_3_01T_01_5_01_4.html:11573,Log,Log,11573,doc/master/classTMVA_1_1Option_3_01T_01_5_01_4.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Option_3_01T_01_5_01_4.html,1,['Log'],['Log']
Testability,". ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisqua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1S.html:2504,test,test,2504,doc/master/classTH1S.html,https://root.cern,https://root.cern/doc/master/classTH1S.html,6,['test'],['test']
Testability,". A suggested work flow for distributed projects: NoSY | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development » Git Primer A suggested work flow for distributed projects: NoSY. Overview; Building on the tips an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/suggested-work-flow-distributed-projects-nosy.html:750,test,tests,750,d/suggested-work-flow-distributed-projects-nosy.html,https://root.cern,https://root.cern/d/suggested-work-flow-distributed-projects-nosy.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". About ROOT | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome About ROOT. ROOT is a framework for data processing, born at CERN, at the heart of the research on high-energy physics. Every day, thousands of physicists u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/about-root.html:708,test,tests,708,d/about-root.html,https://root.cern,https://root.cern/d/about-root.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Accessing a TTree With a TBrowser | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Accessing a TTree With a TBrowser. Now, with the TFile still open, let's do some i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/accessing-ttree-tbrowser.html:731,test,tests,731,d/accessing-ttree-tbrowser.html,https://root.cern,https://root.cern/d/accessing-ttree-tbrowser.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Accessing a TTree With a TSelector | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Accessing a TTree With a TSelector. What is a Selector?; To benefit from many ROO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/accessing-ttree-tselector.html:732,test,tests,732,d/accessing-ttree-tselector.html,https://root.cern,https://root.cern/d/accessing-ttree-tselector.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RLogChannel() [1/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; ). default . Construct an anonymous channel. . ◆ RLogChannel() [2/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; ELogLevel ; verbosity). inlineexplicit . Construct an anonymous channel with a default verbosity. ; Definition at line 113 of file RLogger.hxx. ◆ RLogChannel() [3/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; const std::string & ; name). inline . Construct a log channel given its name, which is part of the diagnostics. ; Definition at line 116 of file RLogger.hxx. Member Function Documentation. ◆ GetEffectiveVerbosity(). ELogLevel ROOT::Experimental::RLogChannel::GetEffectiveVerbosity ; (; const RLogManager & ; mgr); const. inline . Definition at line 313 of file RLogger.hxx. ◆ GetName(). const std::string & ROOT::Experimental::RLogChannel::GetName ; (; ); const. inline . Definition at line 126 of file RLogger.hxx. ◆ GetVerbosity(). ELogLevel ROOT::Experimental::RLogChannel::GetVerbosity ; (; ); const. inline . Definition at line 123 of file RLogger.hxx. ◆ SetVerbosity(). ELogLevel ROOT::Experimental::RLogChannel::SetVerbosity ; (; ELogLevel ; verbosity). inline . Definition at line 118 of file RLogger.hxx. Member Data Documentation. ◆ fName. std::string ROOT::Experimental::RLogChannel::fName. private . Name as shown in diagnostics. ; Definition at line 103 of file RLogger.hxx. ◆ fVerbosity. ELogLevel ROOT::Experimental::RLogChannel::fVerbosity = ELogLevel::kUnse",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html:2493,log,log,2493,doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html,2,['log'],['log']
Testability,". As a result, the PointSetInterval class is used to ; represent the result. The user indicate which points in the parameter space to perform the constrution by providing; a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be considered is factorized and so is the ; creation of the sampling distribution of the test statistic (which is done by a concrete class implementing the DistributionCreator interface). As a result, this class basically just drives the construction by:. using a DistributionCreator to create the SamplingDistribution of a user-defined test statistic for each parameter point of interest,; defining the acceptance region in the data by finding the thresholds on the test statistic such that the integral of the sampling distribution is of the appropriate size and consistent with the limits of integration (eg. upper/lower/central limits), ; and finally updating the PointSetInterval based on whether the value of the test statistic evaluated on the data are in the acceptance region. Function Members (Methods); public:. virtual~NeymanConstruction(); voidAdditionalNToysFactor(double fact); static TClass*Class(); virtual Double_tConfidenceLevel() const; voidCreateConfBelt(bool flag = true); RooStats::ConfidenceBelt*GetConfidenceBelt(); virtual RooStats::PointSetInterval*GetInterval() const; RooStats::TestStatSampler*GetTestStatSampler(); RooStats::IntervalCalculatorRooStats::IntervalCalculator::IntervalCalculator(); RooStats::IntervalCalculatorRooStats::IntervalCalculator::IntervalCalculator(const RooStats::IntervalCalculator&); virtual TClass*IsA() const; RooStats::NeymanConstructionNeymanConstruction(const RooStats::NeymanConstruction&); RooStats::NeymanConstructionNeymanConstruction(RooAbsData& data, RooStats::ModelConfig& model); RooStats::NeymanConstruction&operator=(const RooStats::NeymanConstruction&); voidSaveBeltToFile(bool flag = true); virtual voidSetConfidenceLevel(Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__NeymanConstruction.html:2320,test,test,2320,root/html602/RooStats__NeymanConstruction.html,https://root.cern,https://root.cern/root/html602/RooStats__NeymanConstruction.html,2,['test'],['test']
Testability,". As a result, the PointSetInterval class is used to ; represent the result. The user indicate which points in the parameter space to perform the constrution by providing; a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be considered is factorized and so is the ; creation of the sampling distribution of the test statistic (which is done by a concrete class implementing the DistributionCreator interface). As a result, this class basically just drives the construction by:. using a DistributionCreator to create the SamplingDistribution of a user-defined test statistic for each parameter point of interest,; defining the acceptance region in the data by finding the thresholds on the test statistic such that the integral of the sampling distribution is of the appropriate size and consistent with the limits of integration (eg. upper/lower/central limits), ; and finally updating the PointSetInterval based on whether the value of the test statistic evaluated on the data are in the acceptance region. Function Members (Methods); public:. virtual~NeymanConstruction(); voidAdditionalNToysFactor(double fact); static TClass*Class(); virtual Double_tConfidenceLevel() const; voidCreateConfBelt(bool flag = true); RooStats::ConfidenceBelt*GetConfidenceBelt(); virtual RooStats::PointSetInterval*GetInterval() const; RooStats::TestStatSampler*GetTestStatSampler(); virtual TClass*IsA() const; RooStats::NeymanConstructionNeymanConstruction(const RooStats::NeymanConstruction&); RooStats::NeymanConstructionNeymanConstruction(RooAbsData& data, RooStats::ModelConfig& model); RooStats::IntervalCalculator&RooStats::IntervalCalculator::operator=(const RooStats::IntervalCalculator&); voidSaveBeltToFile(bool flag = true); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData& data); voidSetLeftSideTailFraction(Double_t leftSideFraction = 0.); virtual voidSetModel(const RooStats::ModelConfig& mode",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__NeymanConstruction.html:2320,test,test,2320,root/html528/RooStats__NeymanConstruction.html,https://root.cern,https://root.cern/root/html528/RooStats__NeymanConstruction.html,4,['test'],['test']
Testability,". As a result, the PointSetInterval class is used to ; represent the result. The user indicate which points in the parameter space to perform the constrution by providing; a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be considered is factorized and so is the ; creation of the sampling distribution of the test statistic (which is done by a concrete class implementing the DistributionCreator interface). As a result, this class basically just drives the construction by:. using a DistributionCreator to create the SamplingDistribution of a user-defined test statistic for each parameter point of interest,; defining the acceptance region in the data by finding the thresholds on the test statistic such that the integral of the sampling distribution is of the appropriate size and consistent with the limits of integration (eg. upper/lower/central limits), ; and finally updating the PointSetInterval based on whether the value of the test statistic evaluated on the data are in the acceptance region. Function Members (Methods); public:. virtual~NeymanConstruction(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenceLevel() const; virtual voidTNamed::Copy(TObject& named) const; voidCreateConfBelt(bool flag = true); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__NeymanConstruction.html:2335,test,test,2335,root/html526/RooStats__NeymanConstruction.html,https://root.cern,https://root.cern/root/html526/RooStats__NeymanConstruction.html,1,['test'],['test']
Testability,". Blog | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » News Blog. ROOT::RWhy! ; ## Background. ROOT is implementing new interfaces following new interface styles. We follow [C++ Core Guidelines](https://github.com/i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog.html:702,test,tests,702,d/blog.html,https://root.cern,https://root.cern/d/blog.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Bool_t TMVA::Experimental::Classification::IsCutsMethod ; (; TMVA::MethodBase * ; method). protected . Allows to check if the ml method is a Cuts method. ; Returnsboolen true if the method is a Cuts method. ; Definition at line 957 of file Classification.cxx. ◆ MergeFiles(). void TMVA::Experimental::Classification::MergeFiles ; (; ). protected . Definition at line 1130 of file Classification.cxx. ◆ Streamer(). virtual void TMVA::Experimental::Classification::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::Envelope. ◆ StreamerNVirtual(). void TMVA::Experimental::Classification::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 202 of file Classification.h. ◆ Test(). void TMVA::Experimental::Classification::Test ; (; ). virtual . Perform test evaluation in all booked methods. ; Definition at line 513 of file Classification.cxx. ◆ TestMethod() [1/2]. void TMVA::Experimental::Classification::TestMethod ; (; TString ; methodname, . TString ; methodtitle . ). virtual . Lets perform test an specific ml method. ; Parameters. methodnamename of the method. ; methodtitlemethod title. . Definition at line 526 of file Classification.cxx. ◆ TestMethod() [2/2]. void TMVA::Experimental::Classification::TestMethod ; (; Types::EMVA ; method, . TString ; methodtitle . ). virtual . Lets perform test an specific ml method given the method type in enum TMVA::Types::EMVA. ; Parameters. methodTMVA::Types::EMVA type. ; methodtitlemethod title. . Definition at line 935 of file Classification.cxx. ◆ Train(). void TMVA::Experimental::Classification::Train ; (; ). virtual . Method to train all booked ml methods. ; Definition at line 324 of file Classification.cxx. ◆ TrainMethod() [1/2]. void TMVA::Experimental::Classification::TrainMethod ; (; TString ; methodname, . TString ; methodtitle . ). virtual . Lets train an specific ml method. ; Parameters. methodnamename of the method. ; methodtitlemet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:26520,Test,TestMethod,26520,doc/master/classTMVA_1_1Experimental_1_1Classification.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html,1,['Test'],['TestMethod']
Testability,". Building ROOT | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Building ROOT. Introduction; ROOT uses the CMake cross-platform build-generator tool as a primary build system. CMake does not build the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/building-root.html:711,test,tests,711,d/building-root.html,https://root.cern,https://root.cern/d/building-root.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Cancels a dataset staging request. ; Returns kTRUE on success, kFALSE on failure. Dataset not found equals to a failure. ; Reimplemented in TProofLite.; Definition at line 11046 of file TProof.cxx. ◆ cd(). void TProof::cd ; (; Int_t ; id = -1). Set session with 'id' the default one. ; If 'id' is not found in the list, the current session is set as default ; Definition at line 10496 of file TProof.cxx. ◆ CheckFile(). Bool_t TProof::CheckFile ; (; const char * ; file, . TSlave * ; slave, . Long_t ; modtime, . Int_t ; cpopt = (kCp | kCpBin) . ). private . Check if a file needs to be send to the slave. ; Use the following algorithm:; check if file appears in file map; if yes, get file's modtime and check against time in map, if modtime not same get md5 and compare against md5 in map, if not same return kTRUE.; if no, get file's md5 and modtime and store in file map, ask slave if file exists with specific md5, if yes return kFALSE, if no return kTRUE. The options 'cpopt' define if to copy things from cache to sandbox and what. To retrieve from the cache the binaries associated with the file TProof::kCpBin must be set in cpopt; the default is copy everything. Returns kTRUE in case file needs to be send, returns kFALSE in case file is already on remote node. . Definition at line 6799 of file TProof.cxx. ◆ Class(). static TClass * TProof::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TProof::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TProof::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 1073 of file TProof.h. ◆ CleanGDirectory(). void TProof::CleanGDirectory ; (; TList * ; ol). private . Remove links to objects in list 'ol' from gDirectory. ; Definition at line 3046 of file TProof.cxx. ◆ CleanupSession(). Int_t TProof::CleanupSession ; (; const char * ; sessiontag). Send cleanup request for the session specified by ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:73270,sandbox,sandbox,73270,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['sandbox'],['sandbox']
Testability,. Class Hierarchy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT. Class Hierarchy. Event. PiecewiseInterpolation. PyROOT::TPyException. PyROOT::TPyROOTApplication. ROOT::Fit::BinData. ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::SparseData. ROOT::Fit::UnBinData. ROOT::Math::AdaptiveIntegratorMultiDim. ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>←. ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>←. ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Math::BrentMinimizer1D. ROOT::Math::BrentRootFinder. ROOT::Math::Functor. ROOT::Math::Functor1D. ROOT::Math::GSLIntegrator. ROOT::Math::GSLMCIntegrator. ROOT::Math::GSLMinimizer. ROOT::Math::GSLMinimizer1D. ROOT::Math::GSLNLSMinimizer. ROOT::Math::GSLRngGFSR4. ROOT::Math::GSLRngMT. ROOT::Math::GSLRngRanLux. ROOT::Math::GSLRngRanLuxD1. ROOT::Math::GSLRngRanLuxD2. ROOT::Math::GSLRngRanLuxS1. ROOT::Math::GSLRngRanLuxS2. ROOT::Math::GSLRngTaus. ROOT::Math::GSLRootFinder←. ROOT::Math::Roots::Bisection. ROOT::Math::Roots::Brent. ROOT::Math::Roots::FalsePos. ROOT::Math::GSLRootFinderDeriv←. ROOT::Math::Roots::Newton. ROOT::Math::Roots::Secant. ROOT::Math::Roots::Steffenson. ROOT::Math::GSLSimAnMinimizer. ROOT::Math::GaussIntegrator←. ROOT::Math::GaussLegendreIntegrator. ROOT::,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassHierarchy.html:335,Log,LogLikelihoodFCN,335,root/html528/ClassHierarchy.html,https://root.cern,https://root.cern/root/html528/ClassHierarchy.html,3,['Log'],['LogLikelihoodFCN']
Testability,". Class Hierarchy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT. Class Hierarchy. Memstat::TMemStatMng. ParamHistFunc. PiecewiseInterpolation. PyROOT::TPyException. PyROOT::TPyROOTApplication. ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>←. ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>←. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>←. ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>←. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::BinData. ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::SparseData. ROOT::Fit::UnBinData. ROOT::Math::AdaptiveIntegratorMultiDim. ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>←. ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>; ←. ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>; ←. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>←. ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>; ←. ROOT::Fit::Ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ClassHierarchy.html:508,Log,LogLikelihoodFCN,508,root/html604/ClassHierarchy.html,https://root.cern,https://root.cern/root/html604/ClassHierarchy.html,2,['Log'],['LogLikelihoodFCN']
Testability,. Class Hierarchy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT. Class Hierarchy. Memstat::TMemStatMng. ParamHistFunc. PiecewiseInterpolation. PyROOT::TPyException. PyROOT::TPyROOTApplication. ROOT::Fit::BinData. ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::SparseData. ROOT::Fit::UnBinData. ROOT::Math::AdaptiveIntegratorMultiDim. ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>←. ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>←. ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Math::BasicMinimizer←. ROOT::Math::GSLMinimizer. ROOT::Math::GSLNLSMinimizer. ROOT::Math::GSLSimAnMinimizer. ROOT::Math::BrentMinimizer1D. ROOT::Math::BrentRootFinder. ROOT::Math::Functor. ROOT::Math::Functor1D. ROOT::Math::GSLIntegrator. ROOT::Math::GSLMCIntegrator. ROOT::Math::GSLMinimizer. ROOT::Math::GSLMinimizer1D. ROOT::Math::GSLNLSMinimizer. ROOT::Math::GSLQRngNiederreiter2. ROOT::Math::GSLQRngSobol. ROOT::Math::GSLRngGFSR4. ROOT::Math::GSLRngMT. ROOT::Math::GSLRngRanLux. ROOT::Math::GSLRngRanLuxD1. ROOT::Math::GSLRngRanLuxD2. ROOT::Math::GSLRngRanLuxS1. ROOT::Math::GSLRngRanLuxS2. ROOT::Math::GSLRngTaus. ROOT::Math::GSLRootFinder←. ROOT::Math::Roots::Bisection. ROOT::Math::Roots::Brent. ROOT::Math::Roots::FalsePos. ROOT::Math::GSLRo,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassHierarchy.html:365,Log,LogLikelihoodFCN,365,root/html602/ClassHierarchy.html,https://root.cern,https://root.cern/root/html602/ClassHierarchy.html,3,['Log'],['LogLikelihoodFCN']
Testability,. Class Hierarchy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT. Class Hierarchy. ParamHistFunc. PiecewiseInterpolation. PyROOT::TPyException. PyROOT::TPyROOTApplication. ROOT::Fit::BinData. ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::SparseData. ROOT::Fit::UnBinData. ROOT::Math::AdaptiveIntegratorMultiDim. ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>←. ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>←. ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Math::BasicMinimizer←. ROOT::Math::GSLMinimizer. ROOT::Math::GSLNLSMinimizer. ROOT::Math::GSLSimAnMinimizer. ROOT::Math::BrentMinimizer1D. ROOT::Math::BrentRootFinder. ROOT::Math::Functor. ROOT::Math::Functor1D. ROOT::Math::GSLIntegrator. ROOT::Math::GSLMCIntegrator. ROOT::Math::GSLMinimizer. ROOT::Math::GSLMinimizer1D. ROOT::Math::GSLNLSMinimizer. ROOT::Math::GSLQRngNiederreiter2. ROOT::Math::GSLQRngSobol. ROOT::Math::GSLRngGFSR4. ROOT::Math::GSLRngMT. ROOT::Math::GSLRngRanLux. ROOT::Math::GSLRngRanLuxD1. ROOT::Math::GSLRngRanLuxD2. ROOT::Math::GSLRngRanLuxS1. ROOT::Math::GSLRngRanLuxS2. ROOT::Math::GSLRngTaus. ROOT::Math::GSLRootFinder←. ROOT::Math::Roots::Bisection. ROOT::Math::Roots::Brent. ROOT::Math::Roots::FalsePos. ROOT::Math::GSLRootFinderDeriv←. ROOT::,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassHierarchy.html:343,Log,LogLikelihoodFCN,343,root/html534/ClassHierarchy.html,https://root.cern,https://root.cern/root/html534/ClassHierarchy.html,3,['Log'],['LogLikelihoodFCN']
Testability,. Class Hierarchy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT. Class Hierarchy. ParamHistFunc. PiecewiseInterpolation. PyROOT::TPyException. PyROOT::TPyROOTApplication. ROOT::Fit::BinData. ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::SparseData. ROOT::Fit::UnBinData. ROOT::Math::AdaptiveIntegratorMultiDim. ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>←. ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>←. ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Math::BrentMinimizer1D. ROOT::Math::BrentRootFinder. ROOT::Math::Functor. ROOT::Math::Functor1D. ROOT::Math::GSLIntegrator. ROOT::Math::GSLMCIntegrator. ROOT::Math::GSLMinimizer. ROOT::Math::GSLMinimizer1D. ROOT::Math::GSLNLSMinimizer. ROOT::Math::GSLRngGFSR4. ROOT::Math::GSLRngMT. ROOT::Math::GSLRngRanLux. ROOT::Math::GSLRngRanLuxD1. ROOT::Math::GSLRngRanLuxD2. ROOT::Math::GSLRngRanLuxS1. ROOT::Math::GSLRngRanLuxS2. ROOT::Math::GSLRngTaus. ROOT::Math::GSLRootFinder←. ROOT::Math::Roots::Bisection. ROOT::Math::Roots::Brent. ROOT::Math::Roots::FalsePos. ROOT::Math::GSLRootFinderDeriv←. ROOT::Math::Roots::Newton. ROOT::Math::Roots::Secant. ROOT::Math::Roots::Steffenson. ROOT::Math::GSLSimAnMinimizer. ROOT::Math::GaussIntegrator←. ROOT::Math::GaussLegendreIntegrator,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ClassHierarchy.html:343,Log,LogLikelihoodFCN,343,root/html532/ClassHierarchy.html,https://root.cern,https://root.cern/root/html532/ClassHierarchy.html,3,['Log'],['LogLikelihoodFCN']
Testability,. Class Hierarchy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT. Class Hierarchy. PiecewiseInterpolation. PyROOT::TPyException. PyROOT::TPyROOTApplication. ROOT::Fit::BinData. ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::SparseData. ROOT::Fit::UnBinData. ROOT::Math::AdaptiveIntegratorMultiDim. ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>←. ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>←. ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Math::BrentMinimizer1D. ROOT::Math::BrentRootFinder. ROOT::Math::Functor. ROOT::Math::Functor1D. ROOT::Math::GSLIntegrator. ROOT::Math::GSLMCIntegrator. ROOT::Math::GSLMinimizer. ROOT::Math::GSLMinimizer1D. ROOT::Math::GSLNLSMinimizer. ROOT::Math::GSLRngGFSR4. ROOT::Math::GSLRngMT. ROOT::Math::GSLRngRanLux. ROOT::Math::GSLRngRanLuxD1. ROOT::Math::GSLRngRanLuxD2. ROOT::Math::GSLRngRanLuxS1. ROOT::Math::GSLRngRanLuxS2. ROOT::Math::GSLRngTaus. ROOT::Math::GSLRootFinder←. ROOT::Math::Roots::Bisection. ROOT::Math::Roots::Brent. ROOT::Math::Roots::FalsePos. ROOT::Math::GSLRootFinderDeriv←. ROOT::Math::Roots::Newton. ROOT::Math::Roots::Secant. ROOT::Math::Roots::Steffenson. ROOT::Math::GSLSimAnMinimizer. ROOT::Math::GaussIntegrator←. ROOT::Math::GaussLegendreIntegrator. ROOT::Math::G,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassHierarchy.html:328,Log,LogLikelihoodFCN,328,root/html530/ClassHierarchy.html,https://root.cern,https://root.cern/root/html530/ClassHierarchy.html,3,['Log'],['LogLikelihoodFCN']
Testability,. Class Hierarchy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT. Class Hierarchy. PyROOT::TPyException. PyROOT::TPyROOTApplication. ROOT::Fit::BinData. ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::SparseData. ROOT::Fit::UnBinData. ROOT::Math::AdaptiveIntegratorMultiDim. ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>←. ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>←. ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Math::BrentMinimizer1D. ROOT::Math::BrentRootFinder. ROOT::Math::Functor. ROOT::Math::Functor1D. ROOT::Math::GSLIntegrator. ROOT::Math::GSLMCIntegrator. ROOT::Math::GSLMinimizer. ROOT::Math::GSLMinimizer1D. ROOT::Math::GSLNLSMinimizer. ROOT::Math::GSLRngGFSR4. ROOT::Math::GSLRngMT. ROOT::Math::GSLRngRanLux. ROOT::Math::GSLRngTaus. ROOT::Math::GSLRootFinder←. ROOT::Math::Roots::Bisection. ROOT::Math::Roots::Brent. ROOT::Math::Roots::FalsePos. ROOT::Math::GSLRootFinderDeriv←. ROOT::Math::Roots::Newton. ROOT::Math::Roots::Secant. ROOT::Math::Roots::Steffenson. ROOT::Math::GSLSimAnMinimizer. ROOT::Math::GaussIntegrator. ROOT::Math::GaussLegendreIntegrator. ROOT::Math::GradFunctor. ROOT::Math::GradFunctor1D. ROOT::Math::IGradientFunctionMultiDim←. ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFu,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassHierarchy.html:304,Log,LogLikelihoodFCN,304,root/html526/ClassHierarchy.html,https://root.cern,https://root.cern/root/html526/ClassHierarchy.html,3,['Log'],['LogLikelihoodFCN']
Testability,. Class Index. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT. Class Index; Modules; BINDINGS; CINT; CORE; GEOM; GRAF2D; GRAF3D; GUI; HIST; HTML; IO; MATH; MISC; MONTECARLO; NET; PROOF; ROOFIT; SQL; TEST; TMVA; TREE. Jump to; C; ROOT:; ROOT::Math:; ROOT::Math::L; ROOT::Math::P; ROOT::Math::S; ROOT::Math::SMatrix<f; ROOT::Math::SV; ROOT::T; ROOT::TS; Roo1; RooC; RooCa; RooF; RooM; RooQ; RooS; RooSu; T; TB; TC; TD; TEv; TEveG; TEveP; TEveT; TF; TG; TGH; TGL; TGLO; TGLV; TGP; TGU; TGeo; TGeoN; TGeoU; TH; THo; TM; TMV; TMVA:; TMa; TMe; TP; TPo; TPy; TR; TRu; TS; TT; TU; TW. ColorStruct_t ; CpuInfo_t CPU load information.; Event Event structure; EventHeader Event Header; Event_t ; FileStat_t ; FontAttributes_t ; FontMetrics_t ; Foption_t ; GCValues_t ; HistogramManager Manages all histograms; MemInfo_t Memory utilization information.; PictureAttributes_t ; PiecewiseInterpolation Sum of RooAbsReal objects; Point_t ; ProcInfo_t System resource usage of given process.; PyROOT ; PyROOT::TPyException C++ exception for throwing python exceptions; PyROOT::TPyROOTApplication Setup interactive application; ROOT ; ROOT::Fit ; ROOT::Fit::BinData ; ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim> ; ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim> ; ROOT::Fit::DataOptions ; ROOT::Fit::DataRange ; ROOT::Fit::FitConfig ; ROOT::Fit::FitData ; ROOT::Fit::FitResult ; ROOT::Fit::Fitter ; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim> ; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim> ; ROOT::Fit::ParameterSettings ; ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim> ; ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim> ; ROOT::Fit::SparseData ; ROOT::Fit::UnBinData ; ROOT::Math ; ROOT::Math::AdaptiveIntegratorMultiDim ; ROOT::Math::AxisAngle ; ROOT::Math::BaseIntegratorOptions ; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim> ; ROOT::Math::BasicFitMethodFunction<,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:224,TEST,TEST,224,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,1,['TEST'],['TEST']
Testability,. Class Index. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT. Class Index; Modules; BINDINGS; CINT; CORE; GEOM; GRAF2D; GRAF3D; GUI; HIST; HTML; IO; MATH; MISC; MONTECARLO; NET; PROOF; ROOFIT; SQL; TEST; TMVA; TREE. Jump to; C; ROOT:; ROOT::Math:; ROOT::Math::L; ROOT::Math::P; ROOT::Math::S; ROOT::Math::SMatrix<f; ROOT::Math::SV; ROOT::T; ROOT::TS; Roo1; RooC; RooCh; RooG; RooN; RooS; RooSt; RooStats:; T; TB; TC; TD; TEv; TEveG; TEveP; TEveT; TF; TG; TGH; TGL; TGLP; TGLW; TGR; TGU; TGeo; TGeoN; TGeoT; TGu; TI; TM; TMV; TMVA:; TMVA::V; TMe; TP; TPl; TPy; TR; TS; TSp; TSu; TU; TW. ColorStruct_t ; CpuInfo_t CPU load information.; Event_t ; FileStat_t ; FontAttributes_t ; FontMetrics_t ; Foption_t ; GCValues_t ; MemInfo_t Memory utilization information.; PictureAttributes_t ; PiecewiseInterpolation Sum of RooAbsReal objects; Point_t ; ProcInfo_t System resource usage of given process.; PyROOT ; PyROOT::TPyException C++ exception for throwing python exceptions; PyROOT::TPyROOTApplication Setup interactive application; ROOT ; ROOT::Fit ; ROOT::Fit::BinData ; ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim> ; ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim> ; ROOT::Fit::DataOptions ; ROOT::Fit::DataRange ; ROOT::Fit::FitConfig ; ROOT::Fit::FitData ; ROOT::Fit::FitResult ; ROOT::Fit::Fitter ; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim> ; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim> ; ROOT::Fit::ParameterSettings ; ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim> ; ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim> ; ROOT::Fit::SparseData ; ROOT::Fit::UnBinData ; ROOT::Math ; ROOT::Math::AdaptiveIntegratorMultiDim ; ROOT::Math::AxisAngle ; ROOT::Math::BaseIntegratorOptions ; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim> ; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim> ; ROOT::Math::Boost ; ROOT::Math::BoostX ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:224,TEST,TEST,224,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,1,['TEST'],['TEST']
Testability,. Class Index. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT. Class Index; Modules; BINDINGS; CINT; CORE; GEOM; GRAF2D; GRAF3D; GUI; HIST; HTML; IO; MATH; MISC; MONTECARLO; NET; PROOF; ROOFIT; SQL; TEST; TMVA; TREE. Jump to; C; ROOT:; ROOT::Math:; ROOT::Math::L; ROOT::Math::P; ROOT::Math::S; ROOT::Math::SMatrix<f; ROOT::Math::T; ROOT::T; ROOT::TS; Roo1; RooC; RooCh; RooG; RooN; RooS; RooSt; RooStats:; RooU; T; TB; TC; TD; TEv; TEveG; TEveQ; TEveW; TG; TGH; TGL; TGLP; TGLW; TGR; TGU; TGeo; TGeoN; TGeoT; TGu; TI; TMV; TMVA:; TMVA::V; TMe; TO; TP; TPo; TPy; TR; TS; TSp; TSu; TU; TW. ColorStruct_t ; CpuInfo_t CPU load information.; Event_t ; FileStat_t ; FontAttributes_t ; FontMetrics_t ; Foption_t ; GCValues_t ; MemInfo_t Memory utilization information.; ParamHistFunc Sum of RooAbsReal objects; PictureAttributes_t ; PiecewiseInterpolation Sum of RooAbsReal objects; Point_t ; ProcInfo_t System resource usage of given process.; PyROOT ; PyROOT::TPyException C++ exception for throwing python exceptions; PyROOT::TPyROOTApplication Setup interactive application; ROOT ; ROOT::Fit ; ROOT::Fit::BinData ; ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim> ; ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim> ; ROOT::Fit::DataOptions ; ROOT::Fit::DataRange ; ROOT::Fit::FitConfig ; ROOT::Fit::FitData ; ROOT::Fit::FitResult ; ROOT::Fit::Fitter ; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim> ; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim> ; ROOT::Fit::ParameterSettings ; ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim> ; ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim> ; ROOT::Fit::SparseData ; ROOT::Fit::UnBinData ; ROOT::Math ; ROOT::Math::AdaptiveIntegratorMultiDim ; ROOT::Math::AxisAngle ; ROOT::Math::BaseIntegratorOptions ; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim> ; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:224,TEST,TEST,224,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,1,['TEST'],['TEST']
Testability,. Class Index. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT. Class Index; Modules; BINDINGS; CINT; CORE; GEOM; GRAF2D; GRAF3D; GUI; HIST; HTML; IO; MATH; MISC; MONTECARLO; NET; PROOF; ROOFIT; SQL; TEST; TMVA; TREE. Jump to; C; ROOT:; ROOT::Math:; ROOT::Math::L; ROOT::Math::P; ROOT::Math::S; ROOT::Math::SMatrix<f; ROOT::Math::T; ROOT::T; ROOT::TS; Roo1; RooC; RooCh; RooG; RooN; RooS; RooSt; RooStats:; T; TB; TC; TD; TEv; TEveG; TEveP; TEveT; TF; TG; TGH; TGL; TGLO; TGLV; TGP; TGT; TGe; TGeo; TGeoN; TGeoT; TGu; TI; TM; TMV; TMVA:; TMVA::k; TMe; TP; TPo; TPy; TR; TS; TSp; TSu; TU; TW. ColorStruct_t ; CpuInfo_t CPU load information.; Event_t ; FileStat_t ; FontAttributes_t ; FontMetrics_t ; Foption_t ; GCValues_t ; MemInfo_t Memory utilization information.; ParamHistFunc Sum of RooAbsReal objects; PictureAttributes_t ; PiecewiseInterpolation Sum of RooAbsReal objects; Point_t ; ProcInfo_t System resource usage of given process.; PyROOT ; PyROOT::TPyException C++ exception for throwing python exceptions; PyROOT::TPyROOTApplication Setup interactive application; ROOT ; ROOT::Fit ; ROOT::Fit::BinData ; ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim> ; ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim> ; ROOT::Fit::DataOptions ; ROOT::Fit::DataRange ; ROOT::Fit::FitConfig ; ROOT::Fit::FitData ; ROOT::Fit::FitResult ; ROOT::Fit::Fitter ; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim> ; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim> ; ROOT::Fit::ParameterSettings ; ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim> ; ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim> ; ROOT::Fit::SparseData ; ROOT::Fit::UnBinData ; ROOT::Math ; ROOT::Math::AdaptiveIntegratorMultiDim ; ROOT::Math::AxisAngle ; ROOT::Math::BaseIntegratorOptions ; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim> ; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiD,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ClassIndex.html:224,TEST,TEST,224,root/html532/ClassIndex.html,https://root.cern,https://root.cern/root/html532/ClassIndex.html,1,['TEST'],['TEST']
Testability,". Code Owners | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Code Owners. ROOT consists of several loosely coupled but consistently designed parts. The ""code owners"" of these parts are experts that revi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/code-owners.html:709,test,tests,709,d/code-owners.html,https://root.cern,https://root.cern/d/code-owners.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Coding Conventions | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Coding Conventions. Naming conventions; Class definition conventions. Inline; Declaration Order. Avoid raw C types; Exception handling",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/coding-conventions.html:716,test,tests,716,d/coding-conventions.html,https://root.cern,https://root.cern/d/coding-conventions.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Collaborate With Us | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Contribute Collaborate With Us. We warmly welcome external contributions to the ROOT! By providing code, you agree to transfer your copyright on ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/collaborate-with-us.html:717,test,tests,717,d/collaborate-with-us.html,https://root.cern,https://root.cern/d/collaborate-with-us.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Compiling Your Code (also known as ACLiC) | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Compiling Your Code (also known as ACLiC). You can run your code as compil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/compiling-your-code-also-known-aclic.html:739,test,tests,739,d/compiling-your-code-also-known-aclic.html,https://root.cern,https://root.cern/d/compiling-your-code-also-known-aclic.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Contact Us | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » About Contact Us. You can contact the ROOT developers in the following ways, in order of preference:. Via the RootTalk web forum. Use this forum to post y",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/contact-us.html:708,test,tests,708,d/contact-us.html,https://root.cern,https://root.cern/d/contact-us.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Courses | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Courses. This page lists a number of ROOT tutorials and courses. Some are made by third parties others by the ROOT team.; Basic. ROOT Basic Cou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/courses.html:705,test,tests,705,d/courses.html,https://root.cern,https://root.cern/d/courses.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Creating a Pull Request | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development » Git Primer Creating a Pull Request. Prerequisites. You have set up git on our system; You have registered a GitHub account and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/creating-pull-request.html:721,test,tests,721,d/creating-pull-request.html,https://root.cern,https://root.cern/d/creating-pull-request.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Definition at line 69 of file DataSet.h. ◆ GetNTrainingEvents(). Long64_t TMVA::DataSet::GetNTrainingEvents ; (; ); const. inline . Definition at line 68 of file DataSet.h. ◆ GetNVariables(). UInt_t TMVA::DataSet::GetNVariables ; (; ); const. access the number of variables through the datasetinfo ; Definition at line 216 of file DataSet.cxx. ◆ GetResults(). TMVA::Results * TMVA::DataSet::GetResults ; (; const TString & ; resultsName, . Types::ETreeType ; type, . Types::EAnalysisType ; analysistype . ). Definition at line 265 of file DataSet.cxx. ◆ GetTestEvent(). const Event * TMVA::DataSet::GetTestEvent ; (; Long64_t ; ievt); const. inline . Definition at line 75 of file DataSet.h. ◆ GetTrainingEvent(). const Event * TMVA::DataSet::GetTrainingEvent ; (; Long64_t ; ievt); const. inline . Definition at line 74 of file DataSet.h. ◆ GetTree(). TTree * TMVA::DataSet::GetTree ; (; Types::ETreeType ; type). create the test/trainings tree with all the variables, the weights, the classes, the targets, the spectators, the MVA outputs ; Definition at line 609 of file DataSet.cxx. ◆ HasNegativeEventWeights(). Bool_t TMVA::DataSet::HasNegativeEventWeights ; (; ); const. inline . Definition at line 101 of file DataSet.h. ◆ IncrementNClassEvents(). void TMVA::DataSet::IncrementNClassEvents ; (; Int_t ; type, . UInt_t ; classNumber . ). Definition at line 151 of file DataSet.cxx. ◆ InitSampling(). void TMVA::DataSet::InitSampling ; (; Float_t ; fraction, . Float_t ; weight, . UInt_t ; seed = 0 . ). initialize random or importance sampling ; Definition at line 459 of file DataSet.cxx. ◆ IsA(). virtual TClass * TMVA::DataSet::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 175 of file DataSet.h. ◆ Log(). MsgLogger & TMVA::DataSet::Log ; (; ); const. inlineprivate . Definition at line 164 of file DataSet.h. ◆ MoveTrainingBlock(). void TMVA::DataSet::MoveTrainingBlock ; (; Int_t ; blockInd, . Types::ETreeTy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataSet.html:22705,test,test,22705,doc/master/classTMVA_1_1DataSet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSet.html,1,['test'],['test']
Testability,". Development | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome Development. The links in this menu and in the block on your right are intended for the ROOT developers and for people who want to contribute to the ROOT s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/development.html:709,test,tests,709,d/development.html,https://root.cern,https://root.cern/d/development.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Do we need yet another custom C++ interpreter? | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Blogs » Axel Naumann's blog Do we need yet another custom C++ interpreter?. Axel Naumann on Thu, 12/22/2011 - 22:13 . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:744,test,tests,744,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Documentation | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome Documentation. ROOT provides different types of documentation:. The Reference Guide, which is generated by doxygen provides an up-to-date full code docum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/documentation.html:711,test,tests,711,d/documentation.html,https://root.cern,https://root.cern/d/documentation.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Double_t TMVA::LogInterval::GetMean ; (; ); const. virtual . Reimplemented from TMVA::Interval.; Definition at line 158 of file LogInterval.cxx. ◆ GetMin(). virtual Double_t TMVA::LogInterval::GetMin ; (; ); const. inlinevirtual . Reimplemented from TMVA::Interval.; Definition at line 92 of file LogInterval.h. ◆ GetNbins(). virtual Int_t TMVA::LogInterval::GetNbins ; (; ); const. inlinevirtual . Reimplemented from TMVA::Interval.; Definition at line 95 of file LogInterval.h. ◆ GetRndm(). Double_t TMVA::LogInterval::GetRndm ; (; TRandom3 & ; rnd); const. virtual . get uniformly distributed number within interval ; Reimplemented from TMVA::Interval.; Definition at line 144 of file LogInterval.cxx. ◆ GetStepSize(). Double_t TMVA::LogInterval::GetStepSize ; (; Int_t ; iBin = 0); const. virtual . returns the step size between the numbers of a ""discrete LogInterval"" ; Reimplemented from TMVA::Interval.; Definition at line 129 of file LogInterval.cxx. ◆ GetWidth(). Double_t TMVA::LogInterval::GetWidth ; (; ); const. virtual . Reimplemented from TMVA::Interval.; Definition at line 151 of file LogInterval.cxx. ◆ IsA(). virtual TClass * TMVA::LogInterval::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::Interval.; Definition at line 106 of file LogInterval.h. ◆ Log(). TMVA::MsgLogger & TMVA::LogInterval::Log ; (; ); const. Definition at line 165 of file LogInterval.cxx. ◆ SetMax(). void TMVA::LogInterval::SetMax ; (; Double_t ; m). inline . Definition at line 101 of file LogInterval.h. ◆ SetMin(). void TMVA::LogInterval::SetMin ; (; Double_t ; m). inline . Definition at line 102 of file LogInterval.h. ◆ Streamer(). virtual void TMVA::LogInterval::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::Interval. ◆ StreamerNVirtual(). void TMVA::LogInterval::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 106 of file LogInterval.h. Libraries for TMVA::LogInterval:. [legend",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1LogInterval.html:5962,Log,LogInterval,5962,doc/master/classTMVA_1_1LogInterval.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LogInterval.html,1,['Log'],['LogInterval']
Testability,". Downloading ROOT | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Download Downloading ROOT. We are developing ROOT according to the principle of Release early and release often. However, since a very large portion",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/downloading-root.html:714,test,tests,714,d/downloading-root.html,https://root.cern,https://root.cern/d/downloading-root.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Error messages logged in this; way can be printed in a structured way, eliminating duplicates and with the ability; to truncate the list by printEvalErrors. This is the standard mode of error logging; during MINUIT operations. If enableEvalErrorLogging() is false, all errors; reported through this method are passed for immediate printing through RooMsgService.; A string with server names and values is constructed automatically for error logging; purposes, unless a custom string with similar information is passed as argument. void clearEvalErrorLog(); Clear the stack of evaluation error messages. void printEvalErrors(ostream& os = std::cout, Int_t maxPerNode = 10000000); Print all outstanding logged evaluation error on the given ostream. If maxPerNode; is zero, only the number of errors for each source (object with unique name) is listed.; If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; per source of errors. A truncation message is shown if there were more errors logged; than shown. Int_t numEvalErrors(); Return the number of logged evaluation errors since the last clearing. void fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); Fix the interpretation of the coefficient of any RooAddPdf component in; the expression tree headed by this object to the given set of observables. If the force flag is false, the normalization choice is only fixed for those; RooAddPdf components that have the default 'automatic' interpretation of; coefficients (i.e. the interpretation is defined by the observables passed; to getVal()). If force is true, also RooAddPdf that already have a fixed; interpretation are changed to a new fixed interpretation. void fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); Fix the interpretation of the coefficient of any RooAddPdf component in; the expression tree headed by this object to the given set of observables. If the force flag is false, the normalization",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:63034,log,logged,63034,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,7,['log'],['logged']
Testability,. Event. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TEST; » Event. class Event: public TObject. Event and Track classes. The Event class is a naive/simple example of an event structure.; public:; char fType[20];; char *fEventName; //run+event number in character format; Int_t fNtrack;; Int_t fNseg;; Int_t fNvertex;; UInt_t fFlag;; Double32_t fTemperature;; Int_t fMeasures[10];; Double32_t fMatrix[4][4];; Double32_t *fClosestDistance; //[fNvertex] indexed array!; EventHeader fEvtHdr;; TClonesArray *fTracks;; TRefArray *fHighPt; //array of High Pt tracks only; TRefArray *fMuons; //array of Muon tracks only; TRef fLastTrack; //pointer to last track; TRef fHistoWeb; //EXEC:GetHistoWeb reference to an histogram in a TWebFile; TH1F *fH;; TBits fTriggerBits; //Bits triggered by this event. The EventHeader class has 3 data members (integers):; public:; Int_t fEvtNum;; Int_t fRun;; Int_t fDate;. The Event data member fTracks is a pointer to a TClonesArray.; It is an array of a variable number of tracks per event.; Each element of the array is an object of class Track with the members:; private:; Float_t fPx; //X component of the momentum; Float_t fPy; //Y component of the momentum; Float_t fPz; //Z component of the momentum; Float_t fRandom; //A random track quantity; Float_t fMass2; //The mass square of this particle; Float_t fBx; //X intercept at the vertex; Float_t fBy; //Y intercept at the vertex; Float_t fMeanCharge; //Mean charge deposition of all hits of this track; Float_t fXfirst; //X coordinate of the first point; Float_t fXlast; //X coordinate of the last point; Float_t fYfirst; //Y coordinate of the first point; Float_t fYlast; //Y coordinate of the last point; Float_t fZfirst; //Z coordinate of the first point; Float_t fZlast; //Z coordinate of the last point; Double32_t fCharge; //Charge of th,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/Event.html:224,TEST,TEST,224,root/html528/Event.html,https://root.cern,https://root.cern/root/html528/Event.html,1,['TEST'],['TEST']
Testability,. EventHeader. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TEST; » EventHeader. class EventHeader. Event and Track classes. The Event class is a naive/simple example of an event structure.; public:; char fType[20];; char *fEventName; //run+event number in character format; Int_t fNtrack;; Int_t fNseg;; Int_t fNvertex;; UInt_t fFlag;; Double32_t fTemperature;; Int_t fMeasures[10];; Double32_t fMatrix[4][4];; Double32_t *fClosestDistance; //[fNvertex] indexed array!; EventHeader fEvtHdr;; TClonesArray *fTracks;; TRefArray *fHighPt; //array of High Pt tracks only; TRefArray *fMuons; //array of Muon tracks only; TRef fLastTrack; //pointer to last track; TRef fHistoWeb; //EXEC:GetHistoWeb reference to an histogram in a TWebFile; TH1F *fH;; TBits fTriggerBits; //Bits triggered by this event. The EventHeader class has 3 data members (integers):; public:; Int_t fEvtNum;; Int_t fRun;; Int_t fDate;. The Event data member fTracks is a pointer to a TClonesArray.; It is an array of a variable number of tracks per event.; Each element of the array is an object of class Track with the members:; private:; Float_t fPx; //X component of the momentum; Float_t fPy; //Y component of the momentum; Float_t fPz; //Z component of the momentum; Float_t fRandom; //A random track quantity; Float_t fMass2; //The mass square of this particle; Float_t fBx; //X intercept at the vertex; Float_t fBy; //Y intercept at the vertex; Float_t fMeanCharge; //Mean charge deposition of all hits of this track; Float_t fXfirst; //X coordinate of the first point; Float_t fXlast; //X coordinate of the last point; Float_t fYfirst; //Y coordinate of the first point; Float_t fYlast; //Y coordinate of the last point; Float_t fZfirst; //Z coordinate of the first point; Float_t fZlast; //Z coordinate of the last point; Double32_t fCharge; //Charge of ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/EventHeader.html:230,TEST,TEST,230,root/html528/EventHeader.html,https://root.cern,https://root.cern/root/html528/EventHeader.html,1,['TEST'],['TEST']
Testability,". First Steps With ROOT | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome First Steps With ROOT. The ROOT framework provides a number of classes, grouped into several class cathegories. To start using ROOT, you may find",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/first-steps-root-1.html:719,test,tests,719,d/first-steps-root-1.html,https://root.cern,https://root.cern/d/first-steps-root-1.html,4,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Fit Panel | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Fit Panel. As you can see, the fit (solid line) doesn't really describe the data: a polynomial is nowhere ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/fit-panel.html:707,test,tests,707,d/fit-panel.html,https://root.cern,https://root.cern/d/fit-panel.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Foption_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » Foption_t. class Foption_t. Foption. Histogram fit options structure. Function Members (Methods); public:. Foption_t(); Foption_t(const Foption_t&); ~Foption_t(); Foption_t&operator=(const Foption_t&). Data Members; public:. intBound""B"" When using pre-defined functions user parameter settings are used instead of default one; intChi2""X"" For fitting THnsparse use chi2 method (default is likelihood); intErrors""E"" Performs a better error evaluation, calling HESSE and MINOS; intGradient""G"" Option to compute derivatives analytically; intIntegral""I"" Use function integral instead of function in center of bin; intLike""L"" Use Log Likelihood. Default is chisquare method except fitting THnsparse; intMinuit""F"" If fitting a polN, switch to minuit fitter; intMore""M"" Improve fit results.; intNoErrX""EX0"" or ""T"" When fitting a TGraphErrors do not consider error in coordinates ; intNochisq""C"" In case of linear fitting, don't calculate the chisquare; intNograph""0"" If set, do not display the function graph; intNostore""N"" If set, do not store the function graph; intPlus""+"" Add new function (default is replace); intQuiet""Q"" Quiet mode. No print; intRange""R"" Use the range stored in function; intRobust""ROB"" or ""H"": For a TGraph use robust fitting; intStoreResult""S"": Stores the result in a TFitResult structure; intUser""U"" Use a User specified fitting algorithm (via SetFCN); intVerbose""V"" Verbose mode. Print results after each iteration; intW1""W"" Set all the weights to 1. Ignore error bars; doublehRobustvalue of h parameter used in robust fitting . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Foption_t(); {}. » Last changed: Mon Dec 7 13:43:14 2009 » Last generated: 2009-12-07 13:43; This page has been automatically generated. For com",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/Foption_t.html:842,Log,Log,842,root/html526/Foption_t.html,https://root.cern,https://root.cern/root/html526/Foption_t.html,1,['Log'],['Log']
Testability,". Foption_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » Foption_t. class Foption_t. Foption. Histogram fit options structure. Function Members (Methods); public:. Foption_t(); Foption_t(const Foption_t&); ~Foption_t(); Foption_t&operator=(const Foption_t&). Data Members; public:. intBound""B"" When using pre-defined functions user parameter settings are used instead of default one; intChi2""X"" For fitting THnsparse use chi2 method (default is likelihood); intErrors""E"" Performs a better error evaluation, calling HESSE and MINOS; intGradient""G"" Option to compute derivatives analytically; intIntegral""I"" Use function integral instead of function in center of bin; intLike""L"" Use Log Likelihood. Default is chisquare method except fitting THnsparse; intMinuit""F"" If fitting a polN, switch to minuit fitter; intMore""M"" Improve fit results.; intNoErrX""EX0"" or ""T"" When fitting a TGraphErrors do not consider error in coordinates ; intNochisq""C"" In case of linear fitting, don't calculate the chisquare; intNograph""0"" If set, do not display the function graph; intNostore""N"" If set, do not store the function graph; intPlus""+"" Add new function (default is replace); intQuiet""Q"" Quiet mode. No print; intRange""R"" Use the range stored in function; intRobust""ROB"" or ""H"": For a TGraph use robust fitting; intStoreResult""S"": Stores the result in a TFitResult structure; intUser""U"" Use a User specified fitting algorithm (via SetFCN); intVerbose""V"" Verbose mode. Print results after each iteration; intW1""W"" Set all the weights to 1. Ignore error bars; doublehRobustvalue of h parameter used in robust fitting . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Foption_t(); {}. » Last changed: Thu Sep 23 19:55:49 2010 » Last generated: 2010-09-23 19:55; This page has been automatically generated. For co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/Foption_t.html:842,Log,Log,842,root/html528/Foption_t.html,https://root.cern,https://root.cern/root/html528/Foption_t.html,1,['Log'],['Log']
Testability,". Foption_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » Foption_t. class Foption_t. Foption. Histogram fit options structure. Function Members (Methods); public:. Foption_t(); Foption_t(const Foption_t&); ~Foption_t(); Foption_t&operator=(const Foption_t&). Data Members; public:. intBound""B"" When using pre-defined functions user parameter settings are used instead of default one; intChi2""X"" For fitting THnsparse use chi2 method (default is likelihood); intErrors""E"" Performs a better error evaluation, calling HESSE and MINOS; intGradient""G"" Option to compute derivatives analytically; intIntegral""I"" Use function integral instead of function in center of bin; intLike""L"" Use Log Likelihood. Default is chisquare method except fitting THnsparse; intMinuit""F"" If fitting a polN, switch to minuit fitter; intMore""M"" Improve fit results.; intNoErrX""EX0"" or ""T"" When fitting a TGraphErrors do not consider error in coordinates ; intNochisq""C"" In case of linear fitting, don't calculate the chisquare; intNograph""0"" If set, do not display the function graph; intNostore""N"" If set, do not store the function graph; intPlus""+"" Add new function (default is replace); intQuiet""Q"" Quiet mode. No print; intRange""R"" Use the range stored in function; intRobust""ROB"" or ""H"": For a TGraph use robust fitting; intStoreResult""S"": Stores the result in a TFitResult structure; intUser""U"" Use a User specified fitting algorithm (via SetFCN); intVerbose""V"" Verbose mode. Print results after each iteration; intW1""W"" Set all the weights to 1. Ignore error bars; doublehRobustvalue of h parameter used in robust fitting . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Foption_t(); {}. » Last changed: Mon Jul 4 15:19:08 2011 » Last generated: 2011-07-04 15:19; This page has been automatically generated. For c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/Foption_t.html:844,Log,Log,844,root/html530/Foption_t.html,https://root.cern,https://root.cern/root/html530/Foption_t.html,1,['Log'],['Log']
Testability,". Foption_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » Foption_t. class Foption_t. Foption. Histogram fit options structure. Function Members (Methods); public:. Foption_t(); Foption_t(const Foption_t&); ~Foption_t(); Foption_t&operator=(const Foption_t&). Data Members; public:. intBound""B"" When using pre-defined functions user parameter settings are used instead of default one; intChi2""X"" For fitting THnsparse use chi2 method (default is likelihood); intErrors""E"" Performs a better error evaluation, calling HESSE and MINOS; intGradient""G"" Option to compute derivatives analytically; intIntegral""I"" Use function integral instead of function in center of bin; intLike""L"" Use Log Likelihood. Default is chisquare method except fitting THnsparse; intMinuit""F"" If fitting a polN, switch to minuit fitter; intMore""M"" Improve fit results.; intNoErrX""EX0"" or ""T"" When fitting a TGraphErrors do not consider error in coordinates ; intNochisq""C"" In case of linear fitting, don't calculate the chisquare; intNograph""0"" If set, do not display the function graph; intNostore""N"" If set, do not store the function graph; intPlus""+"" Add new function (default is replace); intQuiet""Q"" Quiet mode. No print; intRange""R"" Use the range stored in function; intRobust""ROB"" or ""H"": For a TGraph use robust fitting; intStoreResult""S"": Stores the result in a TFitResult structure; intUser""U"" Use a User specified fitting algorithm (via SetFCN); intVerbose""V"" Verbose mode. Print results after each iteration; intW1""W"" Set all the weights to 1. Ignore error bars; doublehRobustvalue of h parameter used in robust fitting . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Foption_t(); {}. » Last changed: Thu Nov 3 20:04:27 2011 » Last generated: 2011-11-03 20:04; This page has been automatically generated. For c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/Foption_t.html:844,Log,Log,844,root/html532/Foption_t.html,https://root.cern,https://root.cern/root/html532/Foption_t.html,1,['Log'],['Log']
Testability,". Foption_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » Foption_t. class Foption_t. Foption. Histogram fit options structure. Function Members (Methods); public:. Foption_t(); Foption_t(const Foption_t&); ~Foption_t(); Foption_t&operator=(const Foption_t&). Data Members; public:. intBound""B"" When using pre-defined functions user parameter settings are used instead of default one; intChi2""X"" For fitting THnsparse use chi2 method (default is likelihood); intErrors""E"" Performs a better error evaluation, calling HESSE and MINOS; intGradient""G"" Option to compute derivatives analytically; intIntegral""I"" Use function integral instead of function in center of bin; intLike""L"" Use Log Likelihood. Default is chisquare method except fitting THnsparse; intMinuit""F"" If fitting a polN, switch to minuit fitter; intMore""M"" Improve fit results.; intNoErrX""EX0"" or ""T"" When fitting a TGraphErrors do not consider error in coordinates ; intNochisq""C"" In case of linear fitting, don't calculate the chisquare; intNograph""0"" If set, do not display the function graph; intNostore""N"" If set, do not store the function graph; intPlus""+"" Add new function (default is replace); intQuiet""Q"" Quiet mode. No print; intRange""R"" Use the range stored in function; intRobust""ROB"" or ""H"": For a TGraph use robust fitting; intStoreResult""S"": Stores the result in a TFitResult structure; intUser""U"" Use a User specified fitting algorithm (via SetFCN); intVerbose""V"" Verbose mode. Print results after each iteration; intW1""W"" Set all the weights to 1. Ignore error bars; doublehRobustvalue of h parameter used in robust fitting . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Foption_t(); {}. » Last changed: Tue Sep 8 16:58:28 2015 » Last generated: 2015-09-08 16:58; This page has been automatically generated. For c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Foption_t.html:844,Log,Log,844,root/html534/Foption_t.html,https://root.cern,https://root.cern/root/html534/Foption_t.html,1,['Log'],['Log']
Testability,". Foption_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » Foption_t. class Foption_t. Foption. Histogram fit options structure. Function Members (Methods); public:. ~Foption_t(); Foption_t(); Foption_t(const Foption_t&); Foption_t(Foption_t&&); Foption_t&operator=(const Foption_t&); Foption_t&operator=(Foption_t&&). Data Members; public:. intBinVolume""WIDTH"": scale content by the bin width/volume; intBound""B"" When using pre-defined functions user parameter settings are used instead of default one; intChi2""X"" For fitting THnsparse use chi2 method (default is likelihood); intErrors""E"" Performs a better error evaluation, calling HESSE and MINOS; intGradient""G"" Option to compute derivatives analytically; intIntegral""I"" Use function integral instead of function in center of bin; intLike""L"" Use Log Likelihood. Default is chisquare method except fitting THnsparse; intMinuit""F"" If fitting a polN, switch to minuit fitter; intMore""M"" Improve fit results.; intNoErrX""EX0"" or ""T"" When fitting a TGraphErrors do not consider error in coordinates; intNochisq""C"" In case of linear fitting, don't calculate the chisquare; intNograph""0"" If set, do not display the function graph; intNostore""N"" If set, do not store the function graph; intPChi2""P"" Use Pearson chi2 built with the expected error instead of the observed ones; intPlus""+"" Add new function (default is replace); intQuiet""Q"" Quiet mode. No print; intRange""R"" Use the range stored in function; intRobust""ROB"" or ""H"": For a TGraph use robust fitting; intStoreResult""S"": Stores the result in a TFitResult structure; intUser""U"" Use a User specified fitting algorithm (via SetFCN); intVerbose""V"" Verbose mode. Print results after each iteration; intW1""W"" Set all the weights to 1. Ignore error bars; doublehRobustvalue of h parameter used in robust fitting. Class Charts. Inheritance; I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/Foption_t.html:962,Log,Log,962,root/html604/Foption_t.html,https://root.cern,https://root.cern/root/html604/Foption_t.html,1,['Log'],['Log']
Testability,". Foption_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » Foption_t. class Foption_t. Foption. Histogram fit options structure. Function Members (Methods); public:. ~Foption_t(); Foption_t(); Foption_t(const Foption_t&); Foption_t(Foption_t&&); Foption_t&operator=(const Foption_t&); Foption_t&operator=(Foption_t&&). Data Members; public:. intBound""B"" When using pre-defined functions user parameter settings are used instead of default one; intChi2""X"" For fitting THnsparse use chi2 method (default is likelihood); intErrors""E"" Performs a better error evaluation, calling HESSE and MINOS; intGradient""G"" Option to compute derivatives analytically; intIntegral""I"" Use function integral instead of function in center of bin; intLike""L"" Use Log Likelihood. Default is chisquare method except fitting THnsparse; intMinuit""F"" If fitting a polN, switch to minuit fitter; intMore""M"" Improve fit results.; intNoErrX""EX0"" or ""T"" When fitting a TGraphErrors do not consider error in coordinates; intNochisq""C"" In case of linear fitting, don't calculate the chisquare; intNograph""0"" If set, do not display the function graph; intNostore""N"" If set, do not store the function graph; intPChi2""P"" Use Pearson chi2 built with the expected error instead of the observed ones; intPlus""+"" Add new function (default is replace); intQuiet""Q"" Quiet mode. No print; intRange""R"" Use the range stored in function; intRobust""ROB"" or ""H"": For a TGraph use robust fitting; intStoreResult""S"": Stores the result in a TFitResult structure; intUser""U"" Use a User specified fitting algorithm (via SetFCN); intVerbose""V"" Verbose mode. Print results after each iteration; intW1""W"" Set all the weights to 1. Ignore error bars; doublehRobustvalue of h parameter used in robust fitting. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/Foption_t.html:902,Log,Log,902,root/html602/Foption_t.html,https://root.cern,https://root.cern/root/html602/Foption_t.html,1,['Log'],['Log']
Testability,". Formatting Comments for Doxygen | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Formatting Comments for Doxygen. The ROOT team has adopted Doxygen for generating the reference manual. Here you will fin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/formatting-comments-doxygen.html:729,test,tests,729,d/formatting-comments-doxygen.html,https://root.cern,https://root.cern/d/formatting-comments-doxygen.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Frequently Asked Questions | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Frequently Asked Questions; [expand all][collapse all]. How to generate a dictionary . A dictionary is a source file that on",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/faq-page.html:724,test,tests,724,d/faq-page.html,https://root.cern,https://root.cern/d/faq-page.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Function documentation; void ClearThreadData() const. void SetIz(Int_t iz); Set current z-plane. void SetSeg(Int_t iseg); Set current segment. TGeoXtru(); dummy ctor. TGeoXtru(Int_t nz); Default constructor. TGeoXtru(Double_t* param); Default constructor in GEANT3 style; param[0] = nz // number of z planes. param[1] = z1 // Z position of first plane; param[2] = x1 // X position of first plane; param[3] = y1 // Y position of first plane; param[4] = scale1 // scale factor for first plane. param[4*(nz-1]+1] = zn; param[4*(nz-1)+2] = xn; param[4*(nz-1)+3] = yn; param[4*(nz-1)+4] = scalen. TGeoXtru(const TGeoXtru& ); copy constructor. TGeoXtru& operator=(const TGeoXtru& ); assignment operator. ~TGeoXtru(); destructor. Double_t Capacity() const; Compute capacity [length^3] of this shape. void ComputeBBox(); compute bounding box of the pcon. void ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. Bool_t Contains(Double_t* point) const; test if point is inside this shape. Int_t DistancetoPrimitive(Int_t px, Int_t py); compute closest distance from point px,py to each corner. Double_t DistToPlane(Double_t* point, Double_t* dir, Int_t iz, Int_t ivert, Double_t stepmax, Bool_t in) const; Compute distance to a Xtru lateral surface. Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from inside point to surface of the polycone; locate Z segment. Double_t DistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from outside point to surface of the tube; Warning(""DistFromOutside"", ""not implemented"");. Bool_t DefinePolygon(Int_t nvert, const Double_t* xv, const Double_t* yv); Creates the polygon representing the blueprint of any Xtru section.; nvert = number of vertices >2; xv[nvert] = array of X vertex positions; yv[nvert] = array of Y verte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoXtru.html:15127,test,test,15127,root/html532/TGeoXtru.html,https://root.cern,https://root.cern/root/html532/TGeoXtru.html,1,['test'],['test']
Testability,". Git How Tos | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development » Git Primer Git How Tos. Overview; Building on the tips and other points explained elsewhere, this workflow has the following advantages rel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-how-tos.html:709,test,tests,709,d/git-how-tos.html,https://root.cern,https://root.cern/d/git-how-tos.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Git Primer | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Git Primer. These links collect the minimal amount of knowledge about git a ROOT contributor needs to know:. Git How Tos; NoSY Workflow; Git T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-primer.html:708,test,tests,708,d/git-primer.html,https://root.cern,https://root.cern/d/git-primer.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Git Tips and Tricks | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development » Git Primer Git Tips and Tricks. Overview; This page gives some helpful hints and tricks on using git, along with a suggested work-f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-tips-and-tricks.html:717,test,tests,717,d/git-tips-and-tricks.html,https://root.cern,https://root.cern/d/git-tips-and-tricks.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Github ssh key | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development » Git Primer Github ssh key. Using Github with ssh keys is preferred, as it's much easier to use. Here is how to set it up:; 1. Create an ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/github-ssh-key.html:712,test,tests,712,d/github-ssh-key.html,https://root.cern,https://root.cern/d/github-ssh-key.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Given a point P(x,y), Interpolate approximates the value via bilinear interpolation based on the four nearest bin centers see Wikipedia, Bilinear Interpolation Andy Mastbaum 10/8/2008 vaguely based on R.Raja 6-Sep-2008. ; Reimplemented from TH1.; Reimplemented in TH2Poly.; Definition at line 1366 of file TH2.cxx. ◆ Interpolate() [3/3]. Double_t TH2::Interpolate ; (; Double_t ; x, . Double_t ; y, . Double_t ; z . ); const. overridevirtual . illegal for a TH2 ; Reimplemented from TH1.; Reimplemented in TH2Poly.; Definition at line 1440 of file TH2.cxx. ◆ IsA(). TClass * TH2::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TH1.; Reimplemented in TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH2Poly, TProfile2D, and TProfile2Poly.; Definition at line 133 of file TH2.h. ◆ KolmogorovTest(). Double_t TH2::KolmogorovTest ; (; const TH1 * ; h2, . Option_t * ; option = """" . ); const. overridevirtual . Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ; Default: Ignore under- and overflow bins in comparison; option is a character string to specify options; ""U"" include Underflows in test; ""O"" include Overflows; ""N"" include comparison of normalizations; ""D"" Put out a line of ""Debug"" printout; ""M"" Return the Maximum Kolmogorov distance instead of prob. The returned function value is the probability of test (much less than one means NOT compatible); The KS test uses the distance between the pseudo-CDF's obtained from the histogram. Since in 2D the order for generating the pseudo-CDF is arbitrary, two pairs of pseudo-CDF are used, one starting from the x axis the other from the y axis and the maximum distance is the average of the two maximum distances obtained.; Code adapted by Rene Brun from original HBOOK routine HDIFF ; Reimplemented from TH1.; Definition at line 1470 of file TH2.cxx. ◆ operator=(). TH2 & TH2::operator= ; (; const TH2 & ; ). privatedelete . ◆ ProfileX(). TProfile * TH2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2.html:91531,test,test,91531,doc/master/classTH2.html,https://root.cern,https://root.cern/doc/master/classTH2.html,2,['test'],['test']
Testability,". Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Anna Kreshuk 10/04/2006; 3 ; 4#ifndef ROOT_TVirtualFFT; 5#define ROOT_TVirtualFFT; 6 ; 7//////////////////////////////////////////////////////////////////////////; 8//; 9// TVirtualFFT; 10//; 11// TVirtualFFT is an interface class for Fast Fourier Transforms.; 12//; 13//; 14//; 15// The default FFT library is FFTW. To use it, FFTW3 library should already; 16// be installed, and ROOT should be have fftw3 module enabled, with the directories; 17// of fftw3 include file and library specified (see installation instructions).; 18// Function SetDefaultFFT() allows to change the default library.; 19//; 20// Available transform types:; 21// FFT:; 22// - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); 23// in one or more dimensions, -1 in the exponent; 24// - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); 25// in one or more dimensions, +1 in the exponent; 26// - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); 27// in one or more dimensions,; 28// - ""C2R"" - inverse transforms to ""R2C"", taking complex input; 29// (storing the non-redundant half of a logically Hermitian array); 30// to real output; 31// - ""R2HC"" - a real-input DFT with output in ""halfcomplex"" format,; 32// i.e. real and imaginary parts for a transform of size n stored as; 33// r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; 34// - ""HC2R"" - computes the reverse of FFTW_R2HC, above; 35// - ""DHT"" - computes a discrete Hartley transform; 36//; 37// Sine/cosine transforms:; 38// Different types of transforms are specified by parameter kind of the SineCosine() static; 39// function. 4 different kinds of sine and cosine transforms are available; 40// DCT-I (REDFT00 in FFTW3 notation)- kind=0; 41// DCT-II (REDFT10 in FFTW3 notation)- kind=1; 42// DCT-III(REDFT01 in FFTW3 notation)- kind=2; 43// DCT-IV (REDFT11 in FFTW3 notation)- kind=3; 44// DST-I (RODFT00 in FFTW3 notation",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TVirtualFFT_8h_source.html:1346,log,logically,1346,doc/master/TVirtualFFT_8h_source.html,https://root.cern,https://root.cern/doc/master/TVirtualFFT_8h_source.html,1,['log'],['logically']
Testability,". Guidelines for submitting a bug | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Support Guidelines for submitting a bug. Introduction; The RootTalk mailing list and forum can be used to pass information of general",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/guidelines-submitting-bug.html:729,test,tests,729,d/guidelines-submitting-bug.html,https://root.cern,https://root.cern/d/guidelines-submitting-bug.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,. HistogramManager. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TEST; » HistogramManager. class HistogramManager. Event and Track classes. The Event class is a naive/simple example of an event structure.; public:; char fType[20];; char *fEventName; //run+event number in character format; Int_t fNtrack;; Int_t fNseg;; Int_t fNvertex;; UInt_t fFlag;; Double32_t fTemperature;; Int_t fMeasures[10];; Double32_t fMatrix[4][4];; Double32_t *fClosestDistance; //[fNvertex] indexed array!; EventHeader fEvtHdr;; TClonesArray *fTracks;; TRefArray *fHighPt; //array of High Pt tracks only; TRefArray *fMuons; //array of Muon tracks only; TRef fLastTrack; //pointer to last track; TRef fHistoWeb; //EXEC:GetHistoWeb reference to an histogram in a TWebFile; TH1F *fH;; TBits fTriggerBits; //Bits triggered by this event. The EventHeader class has 3 data members (integers):; public:; Int_t fEvtNum;; Int_t fRun;; Int_t fDate;. The Event data member fTracks is a pointer to a TClonesArray.; It is an array of a variable number of tracks per event.; Each element of the array is an object of class Track with the members:; private:; Float_t fPx; //X component of the momentum; Float_t fPy; //Y component of the momentum; Float_t fPz; //Z component of the momentum; Float_t fRandom; //A random track quantity; Float_t fMass2; //The mass square of this particle; Float_t fBx; //X intercept at the vertex; Float_t fBy; //Y intercept at the vertex; Float_t fMeanCharge; //Mean charge deposition of all hits of this track; Float_t fXfirst; //X coordinate of the first point; Float_t fXlast; //X coordinate of the last point; Float_t fYfirst; //Y coordinate of the first point; Float_t fYlast; //Y coordinate of the last point; Float_t fZfirst; //Z coordinate of the first point; Float_t fZlast; //Z coordinate of the last point; Double32_t fCharg,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/HistogramManager.html:235,TEST,TEST,235,root/html528/HistogramManager.html,https://root.cern,https://root.cern/root/html528/HistogramManager.html,1,['TEST'],['TEST']
Testability,". Histogramming in a Selector | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Histogramming in a Selector. Preparation; As previously, we provide a ready-made TSelect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/histogramming-selector.html:725,test,tests,725,d/histogramming-selector.html,https://root.cern,https://root.cern/d/histogramming-selector.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Histogramming | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Histogramming. Preparation; Start from the previously used macro (AnalyzeTree.C).; Adding a Variable; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/histogramming.html:711,test,tests,711,d/histogramming.html,https://root.cern,https://root.cern/d/histogramming.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". How To | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation How To. Developer's Tips . Graphics and GUI . Histograms . Input/Output . Jupyter Notebooks . Language Bindings . Legacy . Linear Algebra . Mult",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/howtos.html:704,test,tests,704,d/howtos.html,https://root.cern,https://root.cern/d/howtos.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". How to create a ROOTbook? | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome How to create a ROOTbook?. ROOT 6.07 Onwards; The minimal version of Jupyter required in this case is 4.0.; Note that the sudo command might ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/how/how-create-rootbook.html:723,test,tests,723,d/how/how-create-rootbook.html,https://root.cern,https://root.cern/d/how/how-create-rootbook.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". How to setup ROOT externals from AFS/CVMFS | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development How to setup ROOT externals from AFS/CVMFS. The following instructions are useful for setting up an environmen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/how-setup-root-externals-afscvmfs.html:740,test,tests,740,d/how-setup-root-externals-afscvmfs.html,https://root.cern,https://root.cern/d/how-setup-root-externals-afscvmfs.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". How to use the ROOT Jenkins | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development How to use the ROOT Jenkins. The ROOT project uses a Jenkins instance to schedule a number of software development procedures",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/how-use-root-jenkins.html:725,test,tests,725,d/how-use-root-jenkins.html,https://root.cern,https://root.cern/d/how-use-root-jenkins.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". However they are present in the estimated functional ;  ; Bool_t * fFixPositionX1;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY1;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t fFixRo;  logical value of correlation coefficient, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaX;  logical value of sigma x parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaY;  logical value of sigma y parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSx;  logical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSxy;  logical value of s parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSy;  logical value of s parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTx;  logical value of t parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTxy;  logical value of t parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTy;  logical value of t parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Int_t fNPeaks;  number of peaks present in fit, input parameter, it should be > 0 ;  ; Int_t fNumberIterations;  number of iterations in fitting procedure, input parameter, it should be > 0 ;  ; Double_t * fPositionCalcX;  [fNPeaks] array of calculated values of x positions of 2D peaks, output parameters ;  ; Double_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:28041,log,logical,28041,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['log'],['logical']
Testability,". Implemented in TGeoPainter, and ROOT::RGeoPainter. ◆ SetVisOption(). virtual void TVirtualGeoPainter::SetVisOption ; (; Int_t ; option = 0). pure virtual . Implemented in TGeoPainter, and ROOT::RGeoPainter. ◆ ShapeDistancetoPrimitive(). virtual Int_t TVirtualGeoPainter::ShapeDistancetoPrimitive ; (; const TGeoShape * ; shape, . Int_t ; numpoints, . Int_t ; px, . Int_t ; py . ); const. pure virtual . Implemented in ROOT::RGeoPainter, and TGeoPainter. ◆ Streamer(). void TVirtualGeoPainter::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TVirtualGeoPainter::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 143 of file TVirtualGeoPainter.h. ◆ Test(). virtual void TVirtualGeoPainter::Test ; (; Int_t ; npoints, . Option_t * ; option . ). pure virtual . Implemented in TGeoPainter, and ROOT::RGeoPainter. ◆ TestOverlaps(). virtual void TVirtualGeoPainter::TestOverlaps ; (; const char * ; path). pure virtual . Implemented in ROOT::RGeoPainter, and TGeoPainter. ◆ TestVoxels(). virtual Bool_t TVirtualGeoPainter::TestVoxels ; (; TGeoVolume * ; vol). pure virtual . Implemented in ROOT::RGeoPainter, and TGeoPainter. ◆ UnbombTranslation(). virtual void TVirtualGeoPainter::UnbombTranslation ; (; const Double_t * ; tr, . Double_t * ; bombtr . ). pure virtual . Implemented in ROOT::RGeoPainter, and TGeoPainter. ◆ Weight(). virtual Double_t TVirtualGeoPainter::Weight ; (; Double_t ; precision, . Option_t * ; option = ""v"" . ). pure virtual . Implemented in TGeoPainter, and ROOT::RGeoPainter. Member Data Documentation. ◆ fgGeoPainter. TVirtualGeoPainter * TVirtualGeoPainter::fgGeoPainter = nullptr. staticprotected . Definition at line 35 of file TVirtualGeoPainter.h. Libraries for TVirtualGeoPainter:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TVirtualGeoPainter.h; geom/geom/src/TVirtualGeoPainter.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualGeoPainter.html:33128,Test,TestOverlaps,33128,doc/master/classTVirtualGeoPainter.html,https://root.cern,https://root.cern/doc/master/classTVirtualGeoPainter.html,1,['Test'],['TestOverlaps']
Testability,". Index of CINT. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT; » CINT. Index of CINT; CINT - The C++ Interpreter; The CINT package consists of. CINT; the current CINT core: interpreter, parser, etc.; CINT7; the new CINT core, using Reflex instead of arrays of C structures; Reflex; A C++ library for reflection data, i.e. to store information about available types, members, their sizes, etc.; Cintex; An interface between Reflex and the current CINT version. More information can be obtained from the CINT website.; The main area of work is currently getting CINT7 to work as well as the old CINT.; Once this merge with Reflex is finished, CINT will be a lot easier to maintain, use less memory, and also run faster than the current CINT.; You can watch our progress in the nightly test status for the rows labeled new.; The next major overhaul will convert CINT into a true C++ layout and make it thread-safe, with >= one interpreter per thread.; We have a draft proposal for the new layout written as C++ headers; a document describing this will follow.; For now you can peek at the subversion repository containing the set of headers.; Further Reading; bytecode; cint; cintapi; extlib; ifdef; limitati; limitnum; makecint; message; ref; List of Classes; CINT Modules; REFLEX. » Last changed: 2009-12-14 18:22 » Last generated: 2009-12-14 18:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/CINT_Index.html:810,test,test,810,root/html526/CINT_Index.html,https://root.cern,https://root.cern/root/html526/CINT_Index.html,1,['test'],['test']
Testability,". Index of CINT. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT; » CINT. Index of CINT; CINT - The C++ Interpreter; The CINT package consists of. CINT; the current CINT core: interpreter, parser, etc.; CINT7; the new CINT core, using Reflex instead of arrays of C structures; Reflex; A C++ library for reflection data, i.e. to store information about available types, members, their sizes, etc.; Cintex; An interface between Reflex and the current CINT version. More information can be obtained from the CINT website.; The main area of work is currently getting CINT7 to work as well as the old CINT.; Once this merge with Reflex is finished, CINT will be a lot easier to maintain, use less memory, and also run faster than the current CINT.; You can watch our progress in the nightly test status for the rows labeled new.; The next major overhaul will convert CINT into a true C++ layout and make it thread-safe, with >= one interpreter per thread.; We have a draft proposal for the new layout written as C++ headers; a document describing this will follow.; For now you can peek at the subversion repository containing the set of headers.; Further Reading; bytecode; cint; cintapi; extlib; ifdef; limitati; limitnum; makecint; message; ref; List of Classes; CINT Modules; REFLEX. » Last changed: 2010-12-15 15:10 » Last generated: 2010-12-15 15:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/CINT_Index.html:810,test,test,810,root/html528/CINT_Index.html,https://root.cern,https://root.cern/root/html528/CINT_Index.html,1,['test'],['test']
Testability,. Index of TEST. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT; » TEST. Index of TEST; Class Index. Event Event structure; EventHeader Event Header; HistogramManager Manages all histograms; TMVA::Event ; TMVA::kNN::Event ; Track A track segment. » Last changed: 2010-12-15 15:10 » Last generated: 2010-12-15 15:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEST_Index.html:11,TEST,TEST,11,root/html528/TEST_Index.html,https://root.cern,https://root.cern/root/html528/TEST_Index.html,3,['TEST'],['TEST']
Testability,. Index of TEST. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT; » TEST. Index of TEST; Class Index. TMVA::Event ; TMVA::kNN::Event . » Last changed: 2011-07-04 15:18 » Last generated: 2011-07-04 15:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEST_Index.html:11,TEST,TEST,11,root/html530/TEST_Index.html,https://root.cern,https://root.cern/root/html530/TEST_Index.html,3,['TEST'],['TEST']
Testability,. Index of TEST. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT; » TEST. Index of TEST; Class Index. TMVA::Event ; TMVA::kNN::Event . » Last changed: 2011-12-02 14:26 » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEST_Index.html:11,TEST,TEST,11,root/html532/TEST_Index.html,https://root.cern,https://root.cern/root/html532/TEST_Index.html,3,['TEST'],['TEST']
Testability,. Index of TEST. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT; » TEST. Index of TEST; Class Index. TMVA::Event ; TMVA::kNN::Event . » Last changed: 2015-09-08 16:58 » Last generated: 2015-09-08 16:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEST_Index.html:11,TEST,TEST,11,root/html534/TEST_Index.html,https://root.cern,https://root.cern/root/html534/TEST_Index.html,3,['TEST'],['TEST']
Testability,". Interfacing ROOT and Spark | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Interfacing ROOT and Spark. Presently two ways are available to exploit the widely adopted Spark technology for carrying out",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/interfacing-root-and-spark.html:724,test,tests,724,d/interfacing-root-and-spark.html,https://root.cern,https://root.cern/d/interfacing-root-and-spark.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Introductory Tutorials | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses Introductory Tutorials. Overview; The goal of this tutorial session is to learn how to read a tree from a ROOT file, e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/introductory-tutorials-1.html:720,test,tests,720,d/introductory-tutorials-1.html,https://root.cern,https://root.cern/d/introductory-tutorials-1.html,4,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". License | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » About License. The ROOT system is being made available under the LGPL 2.1 or (at your option) any later version, which allows ROOT to be used in a wide range",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/license.html:705,test,tests,705,d/license.html,https://root.cern,https://root.cern/d/license.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Mailing List mode on Discourse | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Support Mailing List mode on Discourse. Here is how to enable the ""mailing list mode"" feature on our Discourse forum. If you visit you",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/mailing-list-mode-discourse.html:728,test,tests,728,d/mailing-list-mode-discourse.html,https://root.cern,https://root.cern/d/mailing-list-mode-discourse.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Make a rectilinear step of length fStep from current point (fPoint) on current direction (fDirection). ; If the step is imposed by geometry, is_geom flag must be true (default). The cross flag specifies if the boundary should be crossed in case of a geometry step (default true). Returns new node after step. Set also on boundary condition. ; Definition at line 3638 of file TGeoManager.cxx. ◆ Streamer(). void TGeoManager::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TGeoManager. ; Reimplemented from TObject.; Definition at line 3934 of file TGeoManager.cxx. ◆ StreamerNVirtual(). void TGeoManager::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 605 of file TGeoManager.h. ◆ Test(). void TGeoManager::Test ; (; Int_t ; npoints = 1000000, . Option_t * ; option = """" . ). Check time of finding ""Where am I"" for n points. ; Definition at line 1942 of file TGeoManager.cxx. ◆ TestOverlaps(). void TGeoManager::TestOverlaps ; (; const char * ; path = """"). Geometry overlap checker based on sampling. ; Definition at line 1950 of file TGeoManager.cxx. ◆ ThreadId(). Int_t TGeoManager::ThreadId ; (; ). static . Translates the current thread id to an ordinal number. ; This can be used to manage data which is specific for a given thread. ; Definition at line 999 of file TGeoManager.cxx. ◆ TopToMaster(). void TGeoManager::TopToMaster ; (; const Double_t * ; top, . Double_t * ; master . ); const. Convert coordinates from top volume frame to master. ; Definition at line 4265 of file TGeoManager.cxx. ◆ TransformVolumeToAssembly(). Int_t TGeoManager::TransformVolumeToAssembly ; (; const char * ; vname). Transform all volumes named VNAME to assemblies. The volumes must be virtual. ; Definition at line 1203 of file TGeoManager.cxx. ◆ UnbombTranslation(). void TGeoManager::UnbombTranslation ; (; const Double_t * ; tr, . Double_t * ; bombtr . ). Get the new 'unbombed' translation vector according current exploded view mo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:142215,Test,TestOverlaps,142215,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['Test'],['TestOverlaps']
Testability,". Meet a TTree | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Meet a TTree. We have created an example ROOT file containing a TTree: a typical data container used e.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/meet-ttree.html:710,test,tests,710,d/meet-ttree.html,https://root.cern,https://root.cern/d/meet-ttree.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Meetings | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Meetings. All ROOT-related meetings ca be found in ROOT's Indico category; the upcoming ones can be seen here to the right.; Weekly Developers M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/meetings.html:706,test,tests,706,d/meetings.html,https://root.cern,https://root.cern/d/meetings.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Experimental;  ; namespace  ROOT::Experimental::Detail;  ; namespace  ROOT::Experimental::Internal;  . Macros; #define R__LOG_PRETTY_FUNCTION   __PRETTY_FUNCTION__;  ; #define R__LOG_TO_CHANNEL(SEVERITY, CHANNEL);  ; LogMacros; Macros to log diagnostics.; R__LOG_INFO(ROOT::Experimental::HistLog()) << ""all we know is "" << 42;; ; RLogScopedVerbosity verbose(kDebug + 5);; const int decreasedInfoLevel = 5;; R__LOG_DEBUG(ROOT::WebGUILog(), decreasedInfoLevel) << ""nitty-gritty details"";; R__LOG_DEBUG#define R__LOG_DEBUG(DEBUGLEVEL,...)Definition RLogger.hxx:365; R__LOG_INFO#define R__LOG_INFO(...)Definition RLogger.hxx:364; ROOT::Experimental::HistLogRLogChannel & HistLog()Log channel for Hist diagnostics.Definition RAxis.cxx:25; ROOT::WebGUILogROOT::Experimental::RLogChannel & WebGUILog()Log channel for WebGUI diagnostics.Definition RWebDisplayArgs.cxx:24; ; #define R__LOG_DEBUG(DEBUGLEVEL, ...)   R__LOG_TO_CHANNEL(ROOT::Experimental::ELogLevel::kDebug + DEBUGLEVEL, __VA_ARGS__);  ; #define R__LOG_ERROR(...)   R__LOG_TO_CHANNEL(ROOT::Experimental::ELogLevel::kError, __VA_ARGS__);  ; #define R__LOG_FATAL(...)   R__LOG_TO_CHANNEL(ROOT::Experimental::ELogLevel::kFatal, __VA_ARGS__);  ; #define R__LOG_INFO(...)   R__LOG_TO_CHANNEL(ROOT::Experimental::ELogLevel::kInfo, __VA_ARGS__);  ; #define R__LOG_WARNING(...)   R__LOG_TO_CHANNEL(ROOT::Experimental::ELogLevel::kWarning, __VA_ARGS__);  . Enumerations; enum class  ROOT::Experimental::ELogLevel : unsigned char { ;   ROOT::Experimental::kUnset; , ROOT::Experimental::kFatal; , ROOT::Experimental::kError; , ROOT::Experimental::kWarning; , ;   ROOT::Experimental::kInfo; , ROOT::Experimental::kDebug. };  Kinds of diagnostics. More...;  . Functions; RLogChannel & ROOT::Experimental::Internal::GetChannelOrManager (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RLogger_8hxx.html:2970,Log,Log,2970,doc/master/RLogger_8hxx.html,https://root.cern,https://root.cern/doc/master/RLogger_8hxx.html,1,['Log'],['Log']
Testability,". News | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome News. 02-02-2019 ; Full Totem Analysis based on RDataFrame and distributed on a big Spark cluster with PyRDF! ; Milosz Blaszkiewicz and Aleksandra Mnich (AGH Univ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/news.html:702,test,tests,702,d/news.html,https://root.cern,https://root.cern/d/news.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Options to control flow of fit procedure. Minimizer(type,algo) -- Choose minimization package and algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer; interface, but others can be specified (through RooMinimizer interface). Select OldMinuit to use; MINUIT through the old RooMinuit interface. Type Algorithm; ------ ---------; OldMinuit migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); Minuit migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); Minuit2 migrad, simplex, minimize, scan; GSLMultiMin conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent; GSLSimAn -. InitialHesse(Bool_t flag) -- Flag controls if HESSE before MIGRAD as well, off by default; Optimize(Bool_t flag) -- Activate constant term optimization of test statistic during minimization (on by default); Hesse(Bool_t flag) -- Flag controls if HESSE is run after MIGRAD, on by default; Minos(Bool_t flag) -- Flag controls if MINOS is run after HESSE, off by default; Minos(const RooArgSet& set) -- Only run MINOS on given subset of arguments; Save(Bool_t flag) -- Flac controls if RooFitResult object is produced and returned, off by default; Strategy(Int_t flag) -- Set Minuit strategy (0 through 2, default is 1); FitOptions(const char* optStr) -- Steer fit with classic options string (for backward compatibility). Use of this option; excludes use of any of the new style steering options. SumW2Error(Bool_t flag) -- Apply correaction to errors and covariance matrix using sum-of-weights covariance matrix; to obtain correct error for weighted likelihood fits. If this option is activated the; corrected covariance matrix is calculated as Vcorr = V C-1 V, where V is the original; covariance matrix and C is the inverse of the covariance matrix calculated using the; weights squared. Options to control informational output. Verbose(Bool_t flag) -- Flag controls if verbose output is printed (NLL, parameter changes during fit; Timer(Bool_t flag) -- Time",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsPdf.html:57402,test,test,57402,root/html534/RooAbsPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsPdf.html,3,['test'],['test']
Testability,". Parameters. [out]loLow error. ; [out]hiHigh error. . Reimplemented in RooDataHist, and RooDataSet.; Definition at line 122 of file RooAbsData.h. ◆ weightError() [2/2]. virtual double RooAbsData::weightError ; (; ErrorType ; = Poisson); const. inlinevirtual . Return the symmetric error on the current weight. ; See also weightError(double&,double&,ErrorType) const for asymmetric errors. ; Reimplemented in RooDataHist, and RooDataSet.; Definition at line 112 of file RooAbsData.h. ◆ weightSquared(). virtual double RooAbsData::weightSquared ; (; ); const. pure virtual . Implemented in RooDataHist, and RooDataSet. Friends And Related Symbol Documentation. ◆ RooAbsOptTestStatistic. friend class RooAbsOptTestStatistic. friend . Definition at line 332 of file RooAbsData.h. ◆ RooFit::TestStatistics::ConstantTermsOptimizer. friend struct RooFit::TestStatistics::ConstantTermsOptimizer. friend . Definition at line 333 of file RooAbsData.h. ◆ RooFit::TestStatistics::RooAbsL. friend class RooFit::TestStatistics::RooAbsL. friend . Definition at line 335 of file RooAbsData.h. Member Data Documentation. ◆ _cachedVars. RooArgSet RooAbsData::_cachedVars. protected . ! External variables cached with this data set ; Definition at line 349 of file RooAbsData.h. ◆ _dstore. std::unique_ptr<RooAbsDataStore> RooAbsData::_dstore. protected . Data storage implementation. ; Definition at line 351 of file RooAbsData.h. ◆ _globalObservables. std::unique_ptr<RooArgSet> RooAbsData::_globalObservables. protected . Snapshot of global observables. ; Definition at line 355 of file RooAbsData.h. ◆ _namePtr. const TNamed* RooAbsData::_namePtr = nullptr. mutableprotected . ! De-duplicated name pointer. This will be equal for all objects with the same name. ; Definition at line 357 of file RooAbsData.h. ◆ _ownedComponents. std::map<std::string,RooAbsData*> RooAbsData::_ownedComponents. protected . Owned external components. ; Definition at line 353 of file RooAbsData.h. ◆ _uniqueId. const RooFit::UniqueId",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsData.html:78058,Test,TestStatistics,78058,doc/master/classRooAbsData.html,https://root.cern,https://root.cern/doc/master/classRooAbsData.html,1,['Test'],['TestStatistics']
Testability,". Previous Developers | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » About Previous Developers. The following people have been working on ROOT for some time in their career and ROOT would not be what it is without ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/previous-developers.html:717,test,tests,717,d/previous-developers.html,https://root.cern,https://root.cern/d/previous-developers.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Processing data with ROOT | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » First Steps With ROOT Processing data with ROOT. The ROOT framework consists of many classes, grouped into several categories. Finally, the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/processing-data-root.html:723,test,tests,723,d/processing-data-root.html,https://root.cern,https://root.cern/d/processing-data-root.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Program of Work | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Program of Work. The program of work is guided by the project vision laid out here, and documented for the relevant years in the followin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/program-work.html:713,test,tests,713,d/program-work.html,https://root.cern,https://root.cern/d/program-work.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Project Founders | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » About Project Founders. Rene Brun ; ; Rene, a lifetime developer of ROOT. He joined CERN in 1973. While working with C. Rubbia at the ISR he develop",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/project-founders.html:714,test,tests,714,d/project-founders.html,https://root.cern,https://root.cern/d/project-founders.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,. Protected Attributes; std::vector< Float_t > classValues;  ; TString fFilenameClassifier;  ; TString fInit;  ; Double_t fLearningRate;  ; TString fLoss;  ; Int_t fMaxDepth;  ; TString fMaxFeatures;  ; TString fMaxLeafNodes;  ; Int_t fMinSamplesLeaf;  ; Int_t fMinSamplesSplit;  ; Double_t fMinWeightFractionLeaf;  ; Int_t fNestimators;  ; UInt_t fNoutputs;  ; UInt_t fNvars;  ; TString fRandomState;  ; Double_t fSubsample;  ; Int_t fVerbose;  ; Bool_t fWarmStart;  ; std::vector< Double_t > mvaValues;  ; PyObject * pInit;  ; PyObject * pLearningRate;  ; PyObject * pLoss;  ; PyObject * pMaxDepth;  ; PyObject * pMaxFeatures;  ; PyObject * pMaxLeafNodes;  ; PyObject * pMinSamplesLeaf;  ; PyObject * pMinSamplesSplit;  ; PyObject * pMinWeightFractionLeaf;  ; PyObject * pNestimators;  ; PyObject * pRandomState;  ; PyObject * pSubsample;  ; PyObject * pVerbose;  ; PyObject * pWarmStart;  ;  Protected Attributes inherited from TMVA::PyMethodBase; PyObject * fClassifier;  ; PyObject * fLocalNS;  ; PyObject * fModule;  ; PyObject * fPyReturn;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPyGTB.html:25893,test,testing,25893,doc/master/classTMVA_1_1MethodPyGTB.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPyGTB.html,2,"['log', 'test']","['logger', 'testing']"
Testability,". Publications | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Publications. In case you want to cite ROOT in your own publications, this is the preferred reference. Rene Brun and Fons Rademakers,; ROO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/publications.html:710,test,tests,710,d/publications.html,https://root.cern,https://root.cern/d/publications.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". ROOT 6 Analysis Workshop | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome ROOT 6 Analysis Workshop. Abstract; This tutorial will guide you through an example analysis with ROOT 6. It shows the recommended practices f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/root-6-analysis-workshop-1.html:722,test,tests,722,d/root-6-analysis-workshop-1.html,https://root.cern,https://root.cern/d/root-6-analysis-workshop-1.html,4,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". ROOT 7 | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development ROOT 7. For the first time since 20 year (i.e. ever), the ROOT team plans to break backward compatibility for crucial interfaces - once.; This new",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/root-7.html:704,test,tests,704,d/root-7.html,https://root.cern,https://root.cern/d/root-7.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". ROOT I/O | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » First Steps With ROOT ROOT I/O. The ROOT framework consists of many classes, grouped into several categories. Finally, the latter are grouped into few top-l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/root-io.html:706,test,tests,706,d/root-io.html,https://root.cern,https://root.cern/d/root-io.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". ROOT Reference Guide. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT. ROOT Reference Guide; These pages contain the documentation for all ROOT classes, and the conceptual structure of the ROOT classes, its modules.; The documentation can be accessed by browsing the modules below,; by accessing a certain class directly using the Class Index,; or by simply searching the reference guide (see search field above).; The ROOT Tutorials show how to use many of ROOT's classes. Modules; BINDINGS; CINT; CORE; GEOM; GRAF2D; GRAF3D; GUI; HIST; HTML; IO; MATH; MISC; MONTECARLO; NET; PROOF; ROOFIT; SQL; TEST; TMVA; TREE. Chapters; Class Index; A complete list of all classes defined in ROOT; Class Hierarchy; A hierarchy graph of all classes, showing each class's base and derived classes; Type Index; A complete list of all types; Library Dependency; A diagram showing all of ROOT's libraries and their dependencies. » Last changed: 2010-12-15 15:10 » Last generated: 2010-12-15 15:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/index.html:623,TEST,TEST,623,root/html528/index.html,https://root.cern,https://root.cern/root/html528/index.html,1,['TEST'],['TEST']
Testability,". ROOT Reference Guide. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT. ROOT Reference Guide; These pages contain the documentation for all ROOT classes, and the conceptual structure of the ROOT classes, its modules.; The documentation can be accessed by browsing the modules below,; by accessing a certain class directly using the Class Index,; or by simply searching the reference guide (see search field above).; The ROOT Tutorials show how to use many of ROOT's classes. Modules; BINDINGS; CINT; CORE; GEOM; GRAF2D; GRAF3D; GUI; HIST; HTML; IO; MATH; MISC; MONTECARLO; NET; PROOF; ROOFIT; SQL; TEST; TMVA; TREE. Chapters; Class Index; A complete list of all classes defined in ROOT; Class Hierarchy; A hierarchy graph of all classes, showing each class's base and derived classes; Type Index; A complete list of all types; Library Dependency; A diagram showing all of ROOT's libraries and their dependencies. » Last changed: 2011-07-04 15:18 » Last generated: 2011-07-04 15:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/index.html:623,TEST,TEST,623,root/html530/index.html,https://root.cern,https://root.cern/root/html530/index.html,1,['TEST'],['TEST']
Testability,". ROOT Reference Guide. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT. ROOT Reference Guide; These pages contain the documentation for all ROOT classes, and the conceptual structure of the ROOT classes, its modules.; The documentation can be accessed by browsing the modules below,; by accessing a certain class directly using the Class Index,; or by simply searching the reference guide (see search field above).; The ROOT Tutorials show how to use many of ROOT's classes. Modules; BINDINGS; CINT; CORE; GEOM; GRAF2D; GRAF3D; GUI; HIST; HTML; IO; MATH; MISC; MONTECARLO; NET; PROOF; ROOFIT; SQL; TEST; TMVA; TREE. Chapters; Class Index; A complete list of all classes defined in ROOT; Class Hierarchy; A hierarchy graph of all classes, showing each class's base and derived classes; Type Index; A complete list of all types; Library Dependency; A diagram showing all of ROOT's libraries and their dependencies. » Last changed: 2011-12-02 14:26 » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/index.html:623,TEST,TEST,623,root/html532/index.html,https://root.cern,https://root.cern/root/html532/index.html,1,['TEST'],['TEST']
Testability,". ROOT Reference Guide. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT. ROOT Reference Guide; These pages contain the documentation for all ROOT classes, and the conceptual structure of the ROOT classes, its modules.; The documentation can be accessed by browsing the modules below,; by accessing a certain class directly using the Class Index,; or by simply searching the reference guide (see search field above).; The ROOT Tutorials show how to use many of ROOT's classes. Modules; BINDINGS; CINT; CORE; GEOM; GRAF2D; GRAF3D; GUI; HIST; HTML; IO; MATH; MISC; MONTECARLO; NET; PROOF; ROOFIT; SQL; TEST; TMVA; TREE. Chapters; Class Index; A complete list of all classes defined in ROOT; Class Hierarchy; A hierarchy graph of all classes, showing each class's base and derived classes; Type Index; A complete list of all types; Library Dependency; A diagram showing all of ROOT's libraries and their dependencies. » Last changed: 2015-09-08 16:58 » Last generated: 2015-09-08 16:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/index.html:623,TEST,TEST,623,root/html534/index.html,https://root.cern,https://root.cern/root/html534/index.html,1,['TEST'],['TEST']
Testability,". ROOT User Guides and Manuals | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation ROOT User Guides and Manuals. ROOT Guides. Title; Quick Link; All Links. Reference Guide; head / 6.08; all releases. User'",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/root-user-guides-and-manuals.html:726,test,tests,726,d/root-user-guides-and-manuals.html,https://root.cern,https://root.cern/d/root-user-guides-and-manuals.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". ROOT Version 6.04 Series Release Notes. ROOT Version 6.04 Series Release Notes. Introduction; Core Libraries; General; Meta library; TROOT; TColor; Interpreter Library; Dictionary Generation. I/O Libraries; I/O New functionalities; I/O Behavior change. Networking Libraries; HTTP Server. JavaScript ROOT; TTree Libraries; TTree Behavior change.; TSelectorDraw; TParallelCoordVar. Histogram Libraries; TFormula; TF1; TF1NormSum; TF1Convolution; TGraph2DPainter; THistPainter; TGraph2D; TMultiGraph; THStack. GUI Libraries; TGTextViewostream; FitPanel. 2D Graphics Libraries; TText; TLegend; TTexDump; TPostScript; TPDF; TSVG; TASImage; TPadPainter; TPad; TCanvas; TLatex; TMathText; Cocoa backend. 3D Graphics Libraries; GL Viewer. Tutorials; Build, Configuration and Testing Infrastructure; New functionalities. Patch Releases; Release 6.04/02; Platform Support; Build System; Core; I/O; Proof; Interpreter; PyROOT; TFormula, TF1; RooFit; Dictionary Generation; Tree; Graphics. Release 6.04/04; Build System; Core; Interpreter; I/O; Tree; Geom; Bugs; Improvements; Tasks. Release 6.04/06; Build; Core; Bugs. Release 6.04/08; Build; Core; Interpreter; IO; Histograms; Minuit. Patches Release 6.04/08; Bugs; Improvement; Task. Release 6.04/10; Core; Interpreter; Hist; TNetXNGFileStager. Release 6.04/12; I/O; Interpreter; Documentation; Bugs and Improvements. Release 6.04/14; Build system; GL; Interpreter; PyROOT. Release 6.04/16; Core; Meta Library; Dictionaries; I/O; TTree. Release 6.04/18; Core; TTree; Bugs and issues fixed. HEAD of the v6-04-00-patches branch. Introduction; ROOT version 6.04/10 was released on 18 November, 2015. Changes with respect to 6.04/00 are listed at the end of the document.; For more information, see:; http://root.cern.ch; The following people have contributed to this new version:; David Abdurachmanov, CERN, CMS,; Bertrand Bellenot, CERN/SFT,; Rene Brun, CERN/SFT,; Philippe Canal, FNAL,; Cristina Cristescu, CERN/SFT,; Olivier Couet, CERN/SFT,; Kyle Cranmer, N",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:769,Test,Testing,769,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,1,['Test'],['Testing']
Testability,". ROOT Version 6.06 Release Notes. ROOT Version 6.06 Release Notes; 2015-12-10. Introduction; ROOT reference manual; Core Libraries; Dictionary generation; Thread safety and thread awareness; TDirectory::TContext; Collections; Global resources.; Code Cleanups. Interpreter; I/O Libraries; hadd; Command line utilities; TBufferFile.; I/O New functionalities. TTree Libraries; Improvement of handling of default number of entries; MakeSelector. Histogram Libraries; TH1; TGraph; TGraph2D; Fitting; TFormula. Math Libraries; Random numbers. R Interface; TMVA; RooFit Libraries; 2D Graphics Libraries; THistPainter; TTeXDump; TLatex; TColor; TMultiGraph; TASImage; TCreatePrimitives; TCanvas; Cocoa Backend; freetype library. 3D Graphics Libraries; Geometry Libraries; Database Libraries; Networking Libraries; THttpServer; TNetXNGFileStager; TWebFile. GUI Libraries; Montecarlo Libraries; Multi-processing; Language Bindings; Notebooks. JavaScript ROOT; Class Reference Guide; Tutorials; Build, Configuration and Testing Infrastructure; Patch Releases; Release 6.06/02; Core; Dictionaries; Interpreter; Meta Library; TTree; Histogram Libraries; Math; TColor; PyROOT; Bug Fixes and Tasks. Release 6.06/04; General; Dictionaries; Interpreter Library; I/O; Meta; Core; Minuit; Bug fixes. Release 6.06/06; Cling; Core; Dictionaries; TTree; Bugs fixed in this release. Release 6.06/08; Core; Hist. Bugs fixed in this release; HEAD of the v6-06-00-patches branch. Introduction; ROOT version 6.06/00 was released on December 10, 2015.; For more information, see:; http://root.cern.ch; The following people have contributed to this new version:; David Abdurachmanov, CERN, CMS,; Bertrand Bellenot, CERN/SFT,; Rene Brun, CERN/SFT,; Philippe Canal, FNAL,; Cristina Cristescu, CERN/SFT,; Olivier Couet, CERN/SFT,; Kyle Cranmer, NYU, RooStats,; Gerri Ganis, CERN/SFT,; Andrei Gheata, CERN/SFT,; Enrico Guiraud, CERN/SFT,; Burt Holzman, Fermilab, CMS,; Lukasz Janyst, CERN/IT,; Christopher Jones, Fermilab, CMS,; Wim ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v606/release-notes.html:1010,Test,Testing,1010,doc/v606/release-notes.html,https://root.cern,https://root.cern/doc/v606/release-notes.html,1,['Test'],['Testing']
Testability,". ROOT Version 6.32 Release Notes. ROOT Version 6.32 Release Notes; 2024-05-26. Introduction; Deprecation and Removal; Core Libraries; I/O Libraries; hadd respects compression settings. TTree Libraries; Add files from subdirectories with TChain::Add globbing; Improved efficiency of TTree friends with indices. RNTuple; Histogram Libraries; Parallelism; RooFit Libraries; New CPU likelihood evaluation backend by default; Asymptotically correct uncertainties for extended unbinned likelihood fits; Compile your code with memory safe interfaces; Removal of some memory-unsafe interfaces; Deprecation of legacy iterators; Deprecation of legacy test statistics classes in public interface; Change of RooParamHistFunc; Renaming of some RooFit classes. RDataFrame; Graphics backends; 2D Graphics Libraries; 3D Graphics Libraries; REve. PROOF Libraries; PyROOT; Different representation of std::string; No more implicit conversion of static size char buffer to Python strings; Deprecate the attribute pythonization of TDirectory in favor of item-getting syntax; Removal of Python 2 support; More usage of the public cppyy API. Class Reference Guide; Build, Configuration and Testing Infrastructure; Bugs and Issues fixed in this release; Release 6.32.02; Items addressed in this release. Release 6.32.04; Items addressed in this release. Release 6.32.06; Items addressed in this release. HEAD of the v6-32-00-patches branch. Introduction; ROOT version 6.32.00 was released on 28 May 2024. This release is a long term support one, ideal for inclusion in production or data taking software stacks of experiments.; For more information, see:; http://root.cern; The following people have contributed to this new version:; Anton Alkin, Sungkyunkwan University; Guilherme Amadio, CERN/IT,; Abhigyan Acherjee, University of Cincinnati,; Bertrand Bellenot, CERN/EP-SFT,; Jakob Blomer, CERN/EP-SFT,; Rene Brun,; Carsten Burgard, DESY; Will Buttinger, RAL,; Philippe Canal, FNAL,; Jolly Chen, CERN/EP-SFT,; Olivier Co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:642,test,test,642,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['test'],['test']
Testability,". ROOT a Data analysis Framework | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . . Getting Started. . Reference Guide. . Forum. . Gallery.  ; ROOT is ...; A modular scientific software toolkit. It provides all the functionalities need",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/index.html:728,test,tests,728,d/index.html,https://root.cern,https://root.cern/d/index.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". ROOT: Classification Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classification Class ReferenceTMVA. ; Class to perform two class classification. ; The first step before any analysis is to prepare the data, to do that you need to create an object of TMVA::DataLoader, in this object you need to configure the variables and the number of events to train/test. The class TMVA::Experimental::Classification needs a TMVA::DataLoader object, optional a TFile object to save the results and some extra options in a string like ""V:Color:Transformations=I;D;P;U;G:Silent:DrawProgressBar:ModelPersistence:Jobs=2"" where: V = verbose output Color = coloured screen output Silent = batch mode: boolean silent flag inhibiting any output from TMVA Transformations = list of transformations to test. DrawProgressBar = draw progress bar to display training and testing. ModelPersistence = to save the trained model in xml or serialized files. Jobs = number of ml methods to test/train in parallel using MultiProc, requires to call Evaluate method. Basic example. void classification(UInt_t jobs = 2); {; TMVA::Tools::Instance();; ; TFile *input(0);; TString fname = ""./tmva_class_example.root"";; if (!gSystem->AccessPathName(fname)) {; input = TFile::Open(fname); // check if file in local directory exists; } else {; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"");; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }; ; // Register the training and test trees; ; TTree *signalTree = (TTree *)input->Get(""TreeS"");; TTree *background = (TTree *)input->Get(""TreeB"");; ; TMVA::DataLoader *dataloader = new TMVA::DataLoader(""dataset"");; ; dataloader->AddVariable(""myvar1 := var1+var2"", 'F');; dataloader->AddVariable(""myvar2 := var1-var2"", ""Expression 2"", """", 'F');; dataloader->AddVariable(""var3"", ""Variable 3"", ""units"", 'F');; dataloader->AddVariable(""var4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Classification.html:409,test,test,409,doc/master/classTMVA_1_1Classification.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Classification.html,3,['test'],"['test', 'testing']"
Testability,". ROOT: Containers. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; ContainersCore ROOT classes. ; The containers and generators the ROOT framework offers. ; Collections are a key feature of the ROOT system. Many, if not most, of the applications you write will use collections. If you have used polymorphic C++ collections before, some of this material will be review. However, much of this tutorial covers aspects of collections specific to the ROOT system. In this tutorial the following features will be demonstrated:. Using collections; How to create instances of collections; The difference between lists, ordered collections, hash-tables, maps, etc.; How to add and remove elements of a collection; How to search a collection for a specific element; How to access and modify collection elements; How to iterate over a collection; How to manage memory for collections and collection elements; How collection elements are tested for equality (IsEqual()); How collection elements are compared (Compare()) in case of sorted collections; How collection elements are hashed (Hash()) in hash tables . Classes; class  TArray;  Abstract array base class. More...;  ; class  TArrayC;  Array of chars or bytes (8 bits per element). More...;  ; class  TArrayD;  Array of doubles (64 bits per element). More...;  ; class  TArrayF;  Array of floats (32 bits per element). More...;  ; class  TArrayI;  Array of integers (32 bits per element). More...;  ; class  TArrayL;  Array of longs (32 or 64 bits per element). More...;  ; class  TArrayL64;  Array of long64s (64 bits per element). More...;  ; class  TArrayS;  Array of shorts (16 bits per element). More...;  ; class  TBits;  Container of bits. More...;  ; class  TBtree;  B-tree class. More...;  ; class  TClassTable;  This class registers for all classes their name, id and dictionary function in a hash table. More...;  ; class  TClonesArray;  An array of clone (identical) objects. More...;  ; class  TColl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Containers.html:970,test,tested,970,doc/master/group__Containers.html,https://root.cern,https://root.cern/doc/master/group__Containers.html,1,['test'],['tested']
Testability,". ROOT: Fit Method Classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Fit Method ClassesMath » MathCore » Fitting and Parameter Estimation. ; Classes describing Fit Method functions. . Classes; class  ROOT::Math::BasicFitMethodFunction< FunctionType >;  FitMethodFunction class Interface for objective functions (like chi2 and likelihood used in the fit) In addition to normal function interface provide interface for calculating each data contribution to the function which is required by some algorithm (like Fumili) More...;  ; class  ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >;  Chi2FCN class for binned fits using the least square methods. More...;  ; class  ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >;  LogLikelihoodFCN class for likelihood fits. More...;  ; class  ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >;  class evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__FitMethodFunc.html:730,Log,LogLikelihoodFCN,730,doc/master/group__FitMethodFunc.html,https://root.cern,https://root.cern/doc/master/group__FitMethodFunc.html,3,"['Log', 'log']","['LogLikelihoodFCN', 'log']"
Testability,". ROOT: Graphs tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Graphs tutorialsTutorials. ; Examples showing the ""graphs classes"" usage. . Files; file  annotation3d.C;   This example show how to put some annotation on a 3D plot using 3D polylines. ;  ; file  approx.C;   Macro to test interpolation function Approx ;  ; file  bent.C;   Bent error bars ;  ; file  bent.py;   Bent error bars. ;  ; file  exclusiongraph.C;   Draw three graphs with an exclusion zone. ;  ; file  exclusiongraph2.C;   Draw several graphs with an exclusion zones. ;  ; file  gerrors.C;   Draw a graph with error bars ;  ; file  gerrors2.C;   Draw two graphs with error bars ;  ; file  gmultierrors.C;   Draw a graph with multiple y errors ;  ; file  graph.C;   Draw a simple graph. ;  ; file  graph2derrorsfit.C;   Draw and fit a TGraph2DErrors ;  ; file  graphApply.C;   A macro to demonstrate the functionality of TGraph::Apply() method. ;  ; file  graphpalettecolor.C;   Palette coloring for graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  graphpolar.C;   Create and draw a polar graph. ;  ; file  graphpolar2.C;   Create and draw a polar graph with PI axis ;  ; file  graphpolar3.C;   Create and draw a polar graph with PI axis using a TF1. ;  ; file  graphreverse.C;   This example test all the various case of reverse graphs combined with logarithmic scale. ;  ; file  graphShade.C;   Show how to shade an area between two graphs ;  ; file  graphstruct.C;   Draw a simple graph structure. ;  ; file  graphtext.C;   Draw a graph with text attached to each point. ;  ; file  gtime.C;   Example of TGraphTime. ;  ; file  gtime2.C;   Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program. ;  ; file  hlGraph1.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ; file  hlGraph2.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__graphs.html:332,test,test,332,doc/master/group__tutorial__graphs.html,https://root.cern,https://root.cern/doc/master/group__tutorial__graphs.html,1,['test'],['test']
Testability,. ROOT: IO tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; IO tutorialsTutorials. ; These tutorials illustrate some of the capabilities of the ROOT IO subsystem. . Files; file  copyFiles.C;   Example of script showing how to copy all objects (including directories) from a source file. ;  ; file  dirs.C;   This macro illustrates how to create a hierarchy of directories in a Root file. ;  ; file  double32.C;   Tutorial illustrating use and precision of the Double32_t data type You should run this tutorial with ACLIC: a dictionary will be automatically created. ;  ; file  fildir.C;   This macro displays the ROOT Directory data structure ;  ; file  file.C;   This macro displays the physical ROOT file structure ;  ; file  float16.C;   Tutorial illustrating use and precision of the Float16_t data type. ;  ; file  hadd.C;   Macro to add histogram files This macro is kept for didactical purposes only: use instead the executable $ROOTSYS/bin/hadd ! ;  ; file  importCode.C;   Example of script showing how to create a ROOT file with subdirectories. ;  ; file  loopdir.C;   Example script to loop over all the objects of a ROOT file directory and print in Postscript all the TH1 derived objects. ;  ; file  loopdir11.C;   Example script to loop over all the objects of a ROOT file directory and print in Postscript all the TH1 derived objects. ;  ; file  mergeSelective.C;   Merge only part of the content of a set of files. ;  ; file  readCode.C;   Example of script showing how to navigate in a ROOT file with sub-directories and read the objects in each sub-directory. ;  ; file  testMergeCont.C;   Macro demonstrating the merging of containers. ;  ; file  testTMPIFile.C;  This macro shows the usage of TMPIFile to simulate event reconstruction and merging them in parallel. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__io.html:1639,test,testMergeCont,1639,doc/master/group__tutorial__io.html,https://root.cern,https://root.cern/doc/master/group__tutorial__io.html,2,['test'],"['testMergeCont', 'testTMPIFile']"
Testability,". ROOT: Legacy tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; Legacy tutorialsTutorials. ; Legacy Tutorials. ; Some of ROOT's tutorials demonstrate interfaces that are not recommended anymore, because ROOT or C++ itself now offer superior ones. These have been moved here ""for the record"". . Modules;  Containers tutorials;  Examples showing the ""containers' classes"" usage.. ;  ;  Multi Layer Perceptron tutorials;  Examples showing the Multi Layer Perceptron classes. ;  ;  Regexp tutorials;  Examples for ROOT's regular expressions. ;  ;  Thread tutorials;  Thread examples. ;  . Files; file  benchmarks.C;  This macro run several tests and produces an benchmark report. ;  ; file  geant3tasks.C;  This script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects. ;  ; file  htmlex.C;  This file demonstrates how THtml can document sources. ;  ; file  MyTasks.cxx;  A set of classes deriving from TTask. ;  ; file  ProofNtuple.C;  Selector to fill a simple ntuple. ;  ; file  ProofNtuple.h;  Selector to fill a simple ntuple. ;  ; file  ProofPythia.C;  Selector to generate Monte Carlo events with Pythia8. ;  ; file  ProofPythia.h;  Selector to generate Monte Carlo events with Pythia8. ;  ; file  rootalias.C;  Defines aliases: ;  ; file  rootenv.C;  Produce a picture of the ROOT environment. ;  ; file  rootmarks.C;  Prints a summary of all ROOT benchmarks (must be run before). ;  ; file  tasks.C;  Example of TTasks. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__legacy.html:660,benchmark,benchmarks,660,doc/master/group__tutorial__legacy.html,https://root.cern,https://root.cern/doc/master/group__tutorial__legacy.html,4,"['benchmark', 'test']","['benchmark', 'benchmarks', 'tests']"
Testability,". ROOT: Math tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Math tutorialsTutorials. ; Examples showing the Math classes. . Files; file  Bessel.C;   Show the different kinds of Bessel functions available in ROOT To execute the macro type in: ;  ; file  Bessel.py;   Show the different kinds of Bessel functions available in ROOT To execute the macro type in: ;  ; file  binomial.C;   tutorial illustrating the use of TMath::Binomial can be run with: ;  ; file  BreitWigner.C;   Tutorial illustrating how to create a plot comparing a Breit Wigner to a Relativistic Breit Wigner ;  ; file  ChebyshevPol.C;   Example of Chebyshev polynomials using new TFormula pre-defined definitions of chebyshev polynomials ;  ; file  chi2test.C;   Example to use chi2 test for comparing two histograms One unweighted histogram is compared with a weighted histogram. ;  ; file  CrystalBall.C;   Example of CrystalBall Function and its distribution (pdf and cdf) ;  ; file  exampleFunction.py;   Example of using Python functions and input to numerical algorithm using the ROOT Functor class ;  ; file  exampleFunctor.C;   Tutorial illustrating how creating a TF1 class using functor or class member functions ;  ; file  exampleMultiRoot.C;   Example of using multiroot finder based on GSL algorithm. ;  ; file  exampleTKDE.C;   Example of using the TKDE class (kernel density estimator) ;  ; file  FeldmanCousins.C;   Example macro of using the TFeldmanCousins class in root. ;  ; file  GammaFun.C;   Example showing the usage of the major special math functions (gamma, beta, erf) in ROOT To execute the macro type in: ;  ; file  goftest.C;   GoFTest tutorial macro ;  ; file  hlquantiles.C;  Demo for quantiles (with highlight mode) ;  ; file  kdTreeBinning.C;   kdTreeBinning tutorial: bin the data in cells of equal content using a kd-tree ;  ; file  Legendre.C;   Example of first few Legendre Polynomials ;  ; file  Legendre.py;   Example of first few Legendr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__math.html:805,test,test,805,doc/master/group__tutorial__math.html,https://root.cern,https://root.cern/doc/master/group__tutorial__math.html,1,['test'],['test']
Testability,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType > Member List. This is the complete list of members for ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >, including all inherited members. BaseFCN typedefROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >; BaseFunction typedefROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >; BaseObjFunction typedefROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >; BasicFCN(const std::shared_ptr< DataType > &data, const std::shared_ptr< IModelFunction > &func)ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlineprotected; BasicFitMethodFunction(int dim, int npoint)ROOT::Math::BasicFitMethodFunction< DerivFunType >inline; Clone() constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlinevirtual; Data() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlinevirtual; DataElement(const double *x, unsigned int i, double *g, double *h=nullptr, bool fullHessian=false) constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlinevirtual; DataPtr() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inline; DoDerivative(const double *x, unsigned int icoord) constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlineprivatevirtual; DoEval(const double *x) constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlineprivatevirtual; fDataROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >protected; fExecutionPolicyROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >private; fFuncROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >protected; fGradROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >mutableprivate; fIsExtendedROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >private; fNCallsROOT::Math::BasicFitMethodFunction< DerivFunType >mutableprivate; fNDimROOT::Math::BasicFitMethodFunction< DerivFunType >",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html:113,Log,LogLikelihoodFCN,113,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html,2,['Log'],['LogLikelihoodFCN']
Testability,". ROOT: Net tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Net tutorialsTutorials. ; Examples showing the net classes. . Files; file  authclient.C;  This macro should be run together with authserv.C to test authentication between two remote ROOT sessions. ;  ; file  authserv.C;  This macro should be run together with authclient.C to test authentication between two remote ROOT sessions. ;  ; file  fastMergeServer.C;  This script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block. ;  ; file  hclient.C;  Client program which creates and fills a histogram. ;  ; file  hcons.C;  Histogram consumer script. ;  ; file  hprod.C;  Histogram producer script. ;  ; file  hserv.C;  Server program which waits for two clients to connect. ;  ; file  hserv2.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  parallelMergeServer.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeTest.C;  ; file  pclient.C;  Client program to test parallel sockets. ;  ; file  pserv.C;  Server program to test parallel sockets. ;  ; file  spy.C;  Client program which allows the snooping of objects from a spyserv process. ;  ; file  spyserv.C;  Server program which allows clients, ""spies"", to connect and snoop objects. ;  ; file  TestAuth.C;  Macro test authentication methods stand alone. ;  ; file  testTUDPSocket.C;  As test echo server use udpserver.c in the same directory. ;  ; file  treeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  TUriTest.C;  Rudimentary TUri test macro. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__net.html:255,test,test,255,doc/master/group__tutorial__net.html,https://root.cern,https://root.cern/doc/master/group__tutorial__net.html,2,['test'],['test']
Testability,". ROOT: PROOF. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; PROOF. ; Classes defining the Parallel ROOT Facility, PROOF, a framework for parallel analysis of ROOT TTrees. ; Deprecated:We keep PROOF for those who still need it for legacy use cases. PROOF is not developed anymore and receiving only limited support. ROOT has since a few years moved to RDataFrame and related products as multi-core/multi-processing engines. Modules;  PROOF kernel Libraries;  The PROOF kernel libraries (libProof, libProofPlayer, libProofDraw) contain the classes defining the kernel of the PROOF facility, i.e. ;  ;  PROOF benchmark utilities;  Set of utilities to benchmark a PROOF facility. ;  . Files; file  runProof.C;  Macro to run examples of analysis on PROOF, corresponding to the TSelector implementations found under <ROOTSYS>/tutorials/proof. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__proof.html:661,benchmark,benchmark,661,doc/master/group__proof.html,https://root.cern,https://root.cern/doc/master/group__proof.html,2,['benchmark'],['benchmark']
Testability,". ROOT: PdfWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; PdfWrapper Class Reference. . Definition at line 7162 of file xRooNode.cxx. Public Member Functions;  PdfWrapper (const PdfWrapper &other, const char *name=nullptr);  ;  PdfWrapper (RooAbsReal &f, RooAbsReal *coef, bool expEvMode=false, RooAbsPdf *expPdf=nullptr);  ;  ~PdfWrapper () override;  ; std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; TObject * clone (const char *newname) const override;  ; double evaluate () const override;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; double getSimplePropagatedError (const RooFitResult &fr, const RooArgSet &nset_in) const;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classPdfWrapper.html:1022,Test,Tests,1022,doc/master/classPdfWrapper.html,https://root.cern,https://root.cern/doc/master/classPdfWrapper.html,1,['Test'],['Tests']
Testability,". ROOT: Proof tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; Proof tutorialsTutorials. ; These examples aim to illustrate the usage of PROOF. . Modules;  ProcFileElements;  Class to hold information about the processed elements of a file. ;  ;  ProofAux;  Selector used for auxiliary actions in the PROOF tutorials. ;  ;  ProofEvent;  Selector for generic processing with Event. ;  ;  ProofEventProc;  Selector to process trees containing Event structures. ;  ;  ProofFriends;  Selector to process tree friends. ;  ;  ProofNtuple;  Selector to fill a simple ntuple. ;  ;  ProofPythia;  Selector to generate Monte Carlo events with Pythia8. ;  ;  ProofSimple;  Selector to fill a set of histograms. ;  ;  ProofSimpleFile;  Selector to fill a set of histograms and merging via file. ;  ;  ProofStdVec;  Selector for generic processing with stdlib collections. ;  ;  ProofTests;  Auxilliary selector used to test PROOF functionality. ;  . Files; file  EmptyInclude.h;  Empty file to test TProof::Load in runProof.C and StressProof.cxx in conjunction with ProcFileElements and ProofEventProc . ;  ; file  finalizeProof.C;  Macro to finalize queries run with the macro tutorials/runProof . ;  ; file  getProof.C;  Attaches to a PROOF session, possibly at the indicated URL. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__proof.html:969,test,test,969,doc/master/group__tutorial__proof.html,https://root.cern,https://root.cern/doc/master/group__tutorial__proof.html,2,['test'],['test']
Testability,". ROOT: PyROOT Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions |; Variables ; PyROOT Namespace Reference. Classes; class  RegulatorCleanup;  A TObject-derived class to inject the memory regulation logic in the ROOT list of cleanups. More...;  ; class  RPyROOTApplication;  Interactive application for Python. More...;  ; class  TMemoryRegulator;  Manages TObject-derived objects created in a PyROOT application. More...;  . Functions; PyObject * AddCPPInstancePickling (PyObject *self, PyObject *args);  Set reduce attribute for CPPInstance objects. ;  ; PyObject * AddPrettyPrintingPyz (PyObject *self, PyObject *args);  Add pretty printing pythonization. ;  ; PyObject * AddTClassDynamicCastPyz (PyObject *self, PyObject *args);  Add pythonization for TClass::DynamicCast. ;  ; PyObject * AddTObjectEqNePyz (PyObject *self, PyObject *args);  Add pythonization for equality and inequality operators in TObject. ;  ; PyObject * BranchPyz (PyObject *self, PyObject *args);  Add pythonization for TTree::Branch. ;  ; PyObject * ClearProxiedObjects (PyObject *self, PyObject *args);  ; PyObject * CPPInstanceExpand (PyObject *self, PyObject *args);  Deserialize pickled objects. ;  ; PyObject * GetBranchAttr (PyObject *self, PyObject *args);  ; void Init ();  ; PyObject * RegisterConverterAlias (PyObject *, PyObject *args);  ; PyObject * RegisterExecutorAlias (PyObject *, PyObject *args);  . Variables; PyObject * gRootModule = nullptr;  . Function Documentation. ◆ AddCPPInstancePickling(). PyObject * PyROOT::AddCPPInstancePickling ; (; PyObject * ; self, . PyObject * ; args . ). Set reduce attribute for CPPInstance objects. ; Parameters. [in]selfAlways null, since this is a module function. ; [in]argsPointer to a Python tuple object containing the arguments received from Python. The C++ function op_reduce defined above is wrapped in a Python method so that it can be injected in CPPInstance ; Definition at line 123 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespacePyROOT.html:272,log,logic,272,doc/master/namespacePyROOT.html,https://root.cern,https://root.cern/doc/master/namespacePyROOT.html,1,['log'],['logic']
Testability,". ROOT: PyROOT::RegulatorCleanup Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; PyROOT::RegulatorCleanup Class Referencefinal. ; A TObject-derived class to inject the memory regulation logic in the ROOT list of cleanups. ; The purpose of this class is to keep the responsibilities separate between the TMemoryRegulator logic and the rest of ROOT. ; Definition at line 85 of file TMemoryRegulator.h. Public Member Functions; void CallClearProxiedObjects ();  ; TClass * IsA () const;  ; void RecursiveRemove (TObject *object) final;  Recursively remove this object from a list. ;  ; void Streamer (TBuffer &R__b);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classPyROOT_1_1RegulatorCleanup.html:364,log,logic,364,doc/master/classPyROOT_1_1RegulatorCleanup.html,https://root.cern,https://root.cern/doc/master/classPyROOT_1_1RegulatorCleanup.html,2,['log'],['logic']
Testability,". ROOT: ROOT Namespace Reference. ; ROOT  ; . v6-28. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT Namespace ReferenceMath » MathCore | Math » MathMore » Statistical functions. This file contains a specialised ROOT message handler to test for diagnostic in unit tests. ; More... Namespaces; namespace  CocoaTutorials;  ; namespace  Detail;  Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ;  ; namespace  ExecutorUtils;  This namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  FoundationUtils;  ; namespace  Geom;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TestSupport;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. More...;  ; class  ROpaqueTaskArena;  ; class  RRangeCast;  Wraps any collection that can be used in range-based loops and applies static_cast<T> or",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v628/namespaceROOT.html:332,test,test,332,doc/v628/namespaceROOT.html,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html,2,['test'],"['test', 'tests']"
Testability,". ROOT: ROOT Namespace Reference. ; ROOT  ; . v6-30. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT Namespace ReferenceMath » MathCore | Math » MathMore » Statistical functions. This file contains a specialised ROOT message handler to test for diagnostic in unit tests. ; More... Namespaces; namespace  Browsable;  ; namespace  CocoaTutorials;  ; namespace  Detail;  Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ;  ; namespace  Details;  ; namespace  ExecutorUtils;  This namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  FoundationUtils;  ; namespace  Geom;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TestSupport;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; class  RBrowser;  Web-based ROOT files and objects browser. More...;  ; class  RBrowserCatchedWidget;  ; class  RBrowserData;  Way to browse (hopefully) everything in ROOT. More...;  ; class  RBrowserDataCleanup;  ; class  RBrowserEditorWidget;  ; class  RBrowserInfoWidget;  ; class  RBrowserReply;  Reply on browser request. More...;  ; class  RBrowserRequest;  Request send from client to get content of path element. More...;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v630/namespaceROOT.html:332,test,test,332,doc/v630/namespaceROOT.html,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html,2,['test'],"['test', 'tests']"
Testability,". ROOT: ROOT7 Pad related classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; ROOT7 Pad related classesGraphics » ROOT7 Graphics. ; The ROOT7 Pad related classes. . Classes; class  ROOT::Experimental::Detail::RArgsMenuItem;  Menu item which requires extra arguments for invoked class method. More...;  ; class  ROOT::Experimental::RAttrAggregation;  Base class for attributes aggregations like lines or fill attributes. More...;  ; class  ROOT::Experimental::RAttrAxis;  All supported axes attributes for: line, ticks, labels, title, min/max, log, reverse, ... More...;  ; class  ROOT::Experimental::RAttrAxisLabels;  Axis labels drawing attributes. More...;  ; class  ROOT::Experimental::RAttrAxisTicks;  Axis ticks attributes. More...;  ; class  ROOT::Experimental::RAttrAxisTitle;  Axis title and its drawing attributes. More...;  ; class  ROOT::Experimental::RAttrBase;  Base class for all attributes, used with RDrawable. More...;  ; class  ROOT::Experimental::RAttrBorder;  Drawing line attributes for different objects. More...;  ; class  ROOT::Experimental::RAttrFill;  Drawing fill attributes for different objects. More...;  ; class  ROOT::Experimental::RAttrFont;  A font attributes, used together with text attributes. More...;  ; class  ROOT::Experimental::RAttrLine;  Drawing line attributes for different objects. More...;  ; class  ROOT::Experimental::RAttrLineEnding;  Attributes for line ending. More...;  ; class  ROOT::Experimental::RAttrMap;  ; class  ROOT::Experimental::RAttrMargins;  A margins attributes. Only relative and pixel coordinates are allowed. More...;  ; class  ROOT::Experimental::RAttrMarker;  A marker attributes. More...;  ; class  ROOT::Experimental::RAttrText;  A text attributes. More...;  ; class  ROOT::Experimental::RAttrValue< T >;  Template class to access single value from drawable or other attributes. More...;  ; class  ROOT::Experimental::RCanvas;  A window's topmost RPad. More...;  ; class  ROOT::E",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__GpadROOT7.html:591,log,log,591,doc/master/group__GpadROOT7.html,https://root.cern,https://root.cern/doc/master/group__GpadROOT7.html,1,['log'],['log']
Testability,". ROOT: ROOT::Experimental::RLogChannel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RLogChannel Class Reference. ; A log configuration for a channel, e.g. ; ""RHist"". Each ROOT module has its own log, with potentially distinct verbosity. ; Definition at line 101 of file RLogger.hxx. Public Member Functions;  RLogChannel ()=default;  Construct an anonymous channel. ;  ;  RLogChannel (const std::string &name);  Construct a log channel given its name, which is part of the diagnostics. ;  ;  RLogChannel (ELogLevel verbosity);  Construct an anonymous channel with a default verbosity. ;  ; ELogLevel GetEffectiveVerbosity (const RLogManager &mgr) const;  ; const std::string & GetName () const;  ; ELogLevel GetVerbosity () const;  ; ELogLevel SetVerbosity (ELogLevel verbosity);  ;  Public Member Functions inherited from ROOT::Experimental::RLogDiagCount; long long GetNumErrors () const;  Returns the current number of errors. ;  ; long long GetNumFatalErrors () const;  Returns the current number of fatal errors. ;  ; long long GetNumWarnings () const;  Number of fatal errors. ;  ; void Increment (ELogLevel severity);  Increase warning or error count. ;  . Private Attributes; std::string fName;  Name as shown in diagnostics. ;  ; ELogLevel fVerbosity = ELogLevel::kUnset;  Verbosity of this channel. By default, use the global verbosity. ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constru",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html:285,log,log,285,doc/master/classROOT_1_1Experimental_1_1RLogChannel.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html,3,['log'],['log']
Testability,". ROOT: ROOT::Experimental::RLogChannel Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RLogChannel Class Reference. ; A log configuration for a channel, e.g. ; ""RHist"". Each ROOT module has its own log, with potentially distinct verbosity. ; Definition at line 101 of file RLogger.hxx. Public Member Functions;  RLogChannel ()=default;  Construct an anonymous channel. ;  ;  RLogChannel (const std::string &name);  Construct a log channel given its name, which is part of the diagnostics. ;  ;  RLogChannel (ELogLevel verbosity);  Construct an anonymous channel with a default verbosity. ;  ; ELogLevel GetEffectiveVerbosity (const RLogManager &mgr) const;  ; const std::string & GetName () const;  ; ELogLevel GetVerbosity () const;  ; ELogLevel SetVerbosity (ELogLevel verbosity);  ;  Public Member Functions inherited from ROOT::Experimental::RLogDiagCount; long long GetNumErrors () const;  Returns the current number of errors. ;  ; long long GetNumFatalErrors () const;  Returns the current number of fatal errors. ;  ; long long GetNumWarnings () const;  Number of fatal errors. ;  ; void Increment (ELogLevel severity);  Increase warning or error count. ;  . Private Attributes; std::string fName;  Name as shown in diagnostics. ;  ; ELogLevel fVerbosity = ELogLevel::kUnset;  Verbosity of this channel. By default, use the global verbosity. ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Construc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html:284,log,log,284,doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html,3,['log'],['log']
Testability,". ROOT: ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType > Class Template ReferenceMath » MathCore » Fitting and Parameter Estimation » Fit Method Classes. ; template<class DerivFunType, class ModelFunType = ROOT::Math::IParamMultiFunction>; class ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >LogLikelihoodFCN class for likelihood fits. ; it is template to distinguish gradient and non-gradient case ; Definition at line 40 of file LogLikelihoodFCN.h. Public Types; typedef BasicFCN< DerivFunType, ModelFunType, UnBinData > BaseFCN;  ; typedef BaseObjFunction::BaseFunction BaseFunction;  ; typedef ::ROOT::Math::BasicFitMethodFunction< DerivFunType > BaseObjFunction;  ; typedef ::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunction;  ; typedef ModelFunType::BackendType T;  ; typedef BaseObjFunction::Type_t Type_t;  ;  Public Types inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; typedef FunctionType::BaseFunc BaseFunction;  ; enum  Type_t ;  enumeration specifying the possible fit method types More...;  . Public Member Functions;  LogLikelihoodFCN (const LogLikelihoodFCN &f);  Copy constructor. ;  ;  LogLikelihoodFCN (const std::shared_ptr< UnBinData > &data, const std::shared_ptr< IModelFunction > &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential);  Constructor from unbin data set and model function (pdf) ;  ;  LogLikelihoodFCN (const UnBinData &data, const IModelFunction &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential);  Constructor from unbin data set and model function (pdf) fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:19,Log,LogLikelihoodFCN,19,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,5,['Log'],['LogLikelihoodFCN']
Testability,". ROOT: ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType > Class Template ReferenceMath » MathCore » Fitting and Parameter Estimation » Fit Method Classes. ; template<class DerivFunType, class ModelFunType = ROOT::Math::IParamMultiFunction>; class ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >class evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case ; Definition at line 46 of file PoissonLikelihoodFCN.h. Public Types; typedef BasicFCN< DerivFunType, ModelFunType, BinData > BaseFCN;  ; typedef BaseObjFunction::BaseFunction BaseFunction;  ; typedef ::ROOT::Math::BasicFitMethodFunction< DerivFunType > BaseObjFunction;  ; typedef ::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunction;  ; typedef ModelFunType::BackendType T;  ; typedef BaseObjFunction::Type_t Type_t;  ;  Public Types inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; typedef FunctionType::BaseFunc BaseFunction;  ; enum  Type_t ;  enumeration specifying the possible fit method types More...;  . Public Member Functions;  PoissonLikelihoodFCN (const BinData &data, const IModelFunction &func, int weight=0, bool extended=true, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential);  Constructor from unbin data set and model function (pdf) managed by the users. ;  ;  PoissonLikelihoodFCN (const PoissonLikelihoodFCN &f);  Copy constructor. ;  ;  PoissonLikelihoodFCN (const std::shared_ptr< BinData > &data, const std::shared_ptr< IModelFunction > &func, int weight=0, bool extended=true, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html:648,log,log,648,doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html,1,['log'],['log']
Testability,". ROOT: ROOT::Math Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT::Math Namespace Reference. Namespaces; namespace  Blas;  ; namespace  BrentMethods;  ; namespace  Cephes;  ; namespace  Chebyshev;  template recursive functions for defining evaluation of Chebyshev polynomials T_n(x) and the series S(x) = Sum_i c_i* T_i(x) ;  ; namespace  CholeskyDecompHelpers;  helpers for CholeskyDecomp ;  ; namespace  detail;  ; namespace  GenAlgoOptUtil;  ; namespace  GenVector;  ; namespace  GenVector_detail;  ; namespace  GSLRootHelper;  Helper functions to test convergence of Root-Finding algorithms. ;  ; namespace  GSLSimAn;  ; namespace  gv_detail;  ; namespace  Impl;  ; namespace  IntegMultiDim;  ; namespace  IntegOneDim;  ; namespace  IntegOptionsUtil;  ; namespace  Integration;  ; namespace  IntegrationMultiDim;  ; namespace  IntegrationOneDim;  ; namespace  Internal;  ; namespace  internal;  ; namespace  Interpolation;  ; namespace  MCIntegration;  ; namespace  Minim;  ; namespace  Minim1D;  ; namespace  Roots;  Root-Finding Algorithms. ;  ; namespace  rowOffsetsUtils;  ; namespace  Sampler;  ; namespace  Util;  namespace defining Utility functions needed by mathcore ;  ; namespace  VectorUtil;  Global Helper functions for generic Vector classes. ;  . Classes; class  AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  AddOp;  Addition Operation Class. More...;  ; struct  AddPolicy;  matrix addition policy More...;  ; struct  AddPolicy< T, D1, D2, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  ; struct  Assign;  Structure to assign from an expression based to general matrix to general matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Dummy Structure which flags an error to avoid assignment from expression based o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math.html:689,test,test,689,doc/master/namespaceROOT_1_1Math.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html,1,['test'],['test']
Testability,". ROOT: ROOT::Math Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT::Math Namespace Reference. Namespaces; namespace  Blas;  ; namespace  BrentMethods;  ; namespace  Cephes;  ; namespace  Chebyshev;  template recursive functions for defining evaluation of Chebyshev polynomials T_n(x) and the series S(x) = Sum_i c_i* T_i(x) ;  ; namespace  CholeskyDecompHelpers;  helpers for CholeskyDecomp ;  ; namespace  detail;  ; namespace  GenAlgoOptUtil;  ; namespace  GenVector;  ; namespace  GenVector_detail;  ; namespace  GSLRootHelper;  Helper functions to test convergence of Root-Finding algorithms. ;  ; namespace  GSLSimAn;  ; namespace  gv_detail;  ; namespace  Impl;  ; namespace  IntegMultiDim;  ; namespace  IntegOneDim;  ; namespace  IntegOptionsUtil;  ; namespace  Integration;  ; namespace  IntegrationMultiDim;  ; namespace  IntegrationOneDim;  ; namespace  Internal;  ; namespace  internal;  ; namespace  Interpolation;  ; namespace  MCIntegration;  ; namespace  Minim;  ; namespace  Minim1D;  ; namespace  Roots;  Root-Finding Algorithms. ;  ; namespace  rowOffsetsUtils;  ; namespace  Sampler;  ; namespace  Util;  namespace defining Utility functions needed by mathcore ;  ; namespace  VectorUtil;  Global Helper functions for generic Vector classes. ;  . Classes; class  AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  AddOp;  Addition Operation Class. More...;  ; struct  AddPolicy;  matrix addition policy More...;  ; struct  AddPolicy< T, D1, D2, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  ; struct  Assign;  Structure to assign from an expression based to general matrix to general matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Dummy Structure which flags an error to avoid assignment from expression based on",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1Math.html:688,test,test,688,doc/v632/namespaceROOT_1_1Math.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html,1,['test'],['test']
Testability,". ROOT: ROOT::Math::Delaunay2D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; ROOT::Math::Delaunay2D Class ReferenceMath » MathCore. ; Class to generate a Delaunay triangulation of a 2D set of points. ; Algorithm based on CDT, a C++ library for generating constraint or conforming Delaunay triangulations.; After having found the triangles using the above library, barycentric coordinates are used to test whether a point is inside a triangle (inTriangle test) and for interpolation. All this below is implemented in the DoInterpolateNormalized function.; Given triangle ABC and point P, P can be expressed by; P.x = la * A.x + lb * B.x + lc * C.x P.y = la * A.y + lb * B.y + lc * C.y; with lc = 1 - la - lb; P.x = la * A.x + lb * B.x + (1-la-lb) * C.x P.y = la * A.y + lb * B.y + (1-la-lb) * C.y; Rearranging yields; la * (A.x - C.x) + lb * (B.x - C.x) = P.x - C.x la * (A.y - C.y) + lb * (B.y - C.y) = P.y - C.y; Thus; la = ( (B.y - C.y)*(P.x - C.x) + (C.x - B.x)*(P.y - C.y) ) / ( (B.y - C.y)*(A.x - C.x) + (C.x - B.x)*(A.y - C.y) ) lb = ( (C.y - A.y)*(P.x - C.x) + (A.x - C.x)*(P.y - C.y) ) / ( (B.y - C.y)*(A.x - C.x) + (C.x - B.x)*(A.y - C.y) ) lc = 1 - la - lb; We save the inverse denominator to speedup computation; invDenom = 1 / ( (B.y - C.y)*(A.x - C.x) + (C.x - B.x)*(A.y - C.y) ); P is in triangle (including edges if; 0 <= [la, lb, lc] <= 1; The interpolation of P.z is; P.z = la * A.z + lb * B.z + lc * C.z; To speed up localisation of points (to see to which triangle belong) a grid is laid over the internal coordinate space. A reference to triangle ABC is added to all grid cells that include ABC's bounding box. The size of the grid is defined to be 25x25; Optionally (if the compiler macro HAS_GCAL is defined ) the t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Delaunay2D.html:664,test,test,664,doc/master/classROOT_1_1Math_1_1Delaunay2D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Delaunay2D.html,2,['test'],['test']
Testability,". ROOT: ROOT::Math::GSLRootHelper Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::Math::GSLRootHelper Namespace Reference. Helper functions to test convergence of Root-Finding algorithms. ; More... Functions; int TestDelta (double x1, double x0, double epsAbs, double epsRel);  ; int TestInterval (double xlow, double xup, double epsAbs, double epsRel);  ; int TestResidual (double f, double epsAbs);  . Detailed Description; Helper functions to test convergence of Root-Finding algorithms. ; Used by ROOT::Math::RootFinder class (see there for the doc) ; Function Documentation. ◆ TestDelta(). int ROOT::Math::GSLRootHelper::TestDelta ; (; double ; x1, . double ; x0, . double ; epsAbs, . double ; epsRel . ). Definition at line 47 of file GSLRootHelper.cxx. ◆ TestInterval(). int ROOT::Math::GSLRootHelper::TestInterval ; (; double ; xlow, . double ; xup, . double ; epsAbs, . double ; epsRel . ). Definition at line 42 of file GSLRootHelper.cxx. ◆ TestResidual(). int ROOT::Math::GSLRootHelper::TestResidual ; (; double ; f, . double ; epsAbs . ). Definition at line 52 of file GSLRootHelper.cxx. ROOTMathGSLRootHelper. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1GSLRootHelper.html:215,test,test,215,doc/master/namespaceROOT_1_1Math_1_1GSLRootHelper.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1GSLRootHelper.html,11,"['Test', 'test']","['TestDelta', 'TestInterval', 'TestResidual', 'test']"
Testability,". ROOT: ROOT::Math::GoFTest Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GoFTest Class ReferenceMath » MathCore » Goodness of Fit Tests. ; GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. ; The class implements the AndersonDarling and the KolmogorovSmirnov tests; In the case of the 1-sample test the user needs to provide:; input data; theoretical distribution. The distribution can be provided as a function object (functor) or an object implementing the ROOT::Math::IGenFunction interface. One can provide either the PDF (default) of the CDF (cumulative distribution) One can also provide a pre-defined function. In that case one needs to give also the distribution parameters otherwise the default values will be used. The pre-defined distributions are:; kGaussian with default parameter mean=0, sigma=1; kExponential with default parameter rate=1; kLogNormal with default parameter meanlog=0, sigmalog=1. Note that one should not use data computed distribution parameters, otherwise the test will be biased. The 1-sample KS test using data computed quantities is called Lilliefors test (see https://en.wikipedia.org/wiki/Lilliefors_test) . Definition at line 65 of file GoFTest.h. Public Types; enum  EDistribution { ;   kUndefined; , kUserDefined; , kGaussian; , kLogNormal; , ;   kExponential. };  H0 distributions for using only with 1-sample tests. More...;  ; enum  ETestType { kAD; , kAD2s; , kKS; , kKS2s; };  Goodness of Fit test types for using with the class's unary functions as a shorthand for the in-built methods. More...;  ; enum  EUserDistribution { kCDF; , kPDF; };  User input distribution option. More...;  . Public Member Functions;  GoFT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:402,Test,Tests,402,doc/master/classROOT_1_1Math_1_1GoFTest.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,". ROOT: ROOT::Math::Impl Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions ; ROOT::Math::Impl Namespace Reference. Classes; class  Plane3D;  Class describing a geometrical plane in 3 dimensions. More...;  ; class  Transform3D;  Basic 3D Transformation class describing a rotation and then a translation The internal data are a 3D rotation data (represented as a 3x3 matrix) and a 3D vector data. More...;  ; class  Translation3D;  Class describing a 3 dimensional translation. More...;  . Functions; template<typename Scalar > ; Scalar Eta_FromRhoZ (Scalar rho, Scalar z);  Calculate eta given rho and zeta. ;  ; template<typename Scalar > ; Scalar Eta_FromTheta (Scalar theta, Scalar r);  Implementation of eta from -log(tan(theta/2)). ;  ; template<class T > ; Transform3D< T > operator* (const AxisAngle &r, const Transform3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const AxisAngle &r, const Translation3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const EulerAngles &r, const Transform3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const EulerAngles &r, const Translation3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const Quaternion &r, const Transform3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const Quaternion &r, const Translation3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const Rotation3D &r, const Transform3D< T > &t);  combine a rotation and a transformation to give a transform3d First the transformation then the rotation ;  ; template<class T > ; Transform3D< T > operator* (const Rotation3D &r, const Translation3D< T > &t);  combine a translation and a rotation to give a transform3d First the translation then the rotation ;  ; template<class T > ; Transform3D< T > operator* (const RotationX &r, const Transform3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const Rotat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Impl.html:791,log,log,791,doc/master/namespaceROOT_1_1Math_1_1Impl.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Impl.html,1,['log'],['log']
Testability,. ROOT: ROOT::Math::Util Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::Math::Util Namespace Reference. namespace defining Utility functions needed by mathcore ; More... Functions; template<class T > ; T EvalLog (T x);  safe evaluation of log(x) with a protections against negative or zero argument to the log smooth linear extrapolation below function values smaller than epsilon (better than a simple cut-off) ;  ; template<class T > ; std::string ToString (const T &val);  Utility function for conversion to strings. ;  . Detailed Description; namespace defining Utility functions needed by mathcore ; Function Documentation. ◆ EvalLog(). template<class T > . T ROOT::Math::Util::EvalLog ; (; T ; x). inline . safe evaluation of log(x) with a protections against negative or zero argument to the log smooth linear extrapolation below function values smaller than epsilon (better than a simple cut-off) ; Definition at line 64 of file Util.h. ◆ ToString(). template<class T > . std::string ROOT::Math::Util::ToString ; (; const T & ; val). Utility function for conversion to strings. ; Definition at line 50 of file Util.h. ROOTMathUtil. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Util.html:312,log,log,312,doc/master/namespaceROOT_1_1Math_1_1Util.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Util.html,4,['log'],['log']
Testability,". ROOT: ROOT::RBrowserInfoWidget Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RBrowserInfoWidget Class Reference. . Definition at line 136 of file RBrowser.cxx. Public Types; enum  { kMaxContentLen = 10000000; };  . Public Member Functions;  RBrowserInfoWidget (const std::string &name);  ; virtual ~RBrowserInfoWidget ()=default;  ; bool DrawElement (std::shared_ptr< Browsable::RElement > &, const std::string &="""") override;  ; std::string GetKind () const override;  ; std::string GetTitle () override;  ; std::string GetUrl () override;  ; void Refresh ();  ; void RefreshFromLogs (const std::string &promt, const std::vector< std::string > &logs);  ; void ResetConn () override;  ; std::string SendWidgetContent () override;  ; void Show (const std::string &) override;  ;  Public Member Functions inherited from ROOT::RBrowserWidget;  RBrowserWidget (const std::string &name);  ; virtual ~RBrowserWidget ()=default;  ; virtual void CheckModified ();  ; RBrowser * GetBrowser () const;  ; const std::string & GetName () const;  ; const Browsable::RElementPath_t & GetPath () const;  ; virtual bool IsValid ();  ; std::string SendWidgetTitle ();  Returns string which can be send to browser client to set/change title of the widget tab. ;  ; virtual void SetActive ();  ; void SetPath (const Browsable::RElementPath_t &path);  . Public Attributes; std::string fContent;  ; bool fFirstSend {false};  ! if editor content was send at least once ;  ; std::string fTitle;  . Inheritance diagram for ROOT::RBrowserInfoWidget:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkMaxContentLen . Definition at line 139 of file RBrowser.cxx. Constructor & Destructor Documentation. ◆ RBrowserInfoWidget(). ROOT::R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RBrowserInfoWidget.html:815,log,logs,815,doc/master/classROOT_1_1RBrowserInfoWidget.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RBrowserInfoWidget.html,1,['log'],['logs']
Testability,". ROOT: ROOT::RBrowserInfoWidget Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RBrowserInfoWidget Class Reference. . Definition at line 136 of file RBrowser.cxx. Public Types; enum  { kMaxContentLen = 10000000; };  . Public Member Functions;  RBrowserInfoWidget (const std::string &name);  ; virtual ~RBrowserInfoWidget ()=default;  ; bool DrawElement (std::shared_ptr< Browsable::RElement > &, const std::string &="""") override;  ; std::string GetKind () const override;  ; std::string GetTitle () override;  ; std::string GetUrl () override;  ; void Refresh ();  ; void RefreshFromLogs (const std::string &promt, const std::vector< std::string > &logs);  ; void ResetConn () override;  ; std::string SendWidgetContent () override;  ; void Show (const std::string &) override;  ;  Public Member Functions inherited from ROOT::RBrowserWidget;  RBrowserWidget (const std::string &name);  ; virtual ~RBrowserWidget ()=default;  ; virtual void CheckModified ();  ; RBrowser * GetBrowser () const;  ; const std::string & GetName () const;  ; const Browsable::RElementPath_t & GetPath () const;  ; std::string SendWidgetTitle ();  Returns string which can be send to browser client to set/change title of the widget tab. ;  ; virtual void SetActive ();  ; void SetPath (const Browsable::RElementPath_t &path);  . Public Attributes; std::string fContent;  ; bool fFirstSend {false};  ! if editor content was send at least once ;  ; std::string fTitle;  . Inheritance diagram for ROOT::RBrowserInfoWidget:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkMaxContentLen . Definition at line 139 of file RBrowser.cxx. Constructor & Destructor Documentation. ◆ RBrowserInfoWidget(). ROOT::RBrowserInfoWidget::RBrowserIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RBrowserInfoWidget.html:814,log,logs,814,doc/v632/classROOT_1_1RBrowserInfoWidget.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserInfoWidget.html,1,['log'],['logs']
Testability,". ROOT: ROOT::TestSupport Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions |; Variables ; ROOT::TestSupport Namespace Reference. Classes; class  CheckDiagsRAII;  Install a ROOT diagnostic handler to analyse diagnostics. More...;  ; class  FilterDiagsRAII;  Allows a user function to catch and filter/analyse ROOT and cling diagnostics, e.g. More...;  ; struct  ForbidDiagnostics;  Error handler for gtests that generates failures for every received diagnostic > kInfo when this file is linked to. More...;  . Functions; std::ostream & operator<< (std::ostream &stream, CheckDiagsRAII::Diag_t const &diag);  . Variables; static struct ROOT::TestSupport::ForbidDiagnostics noDiagCheckerInstance;  . Function Documentation. ◆ operator<<(). std::ostream & ROOT::TestSupport::operator<< ; (; std::ostream & ; stream, . CheckDiagsRAII::Diag_t const & ; diag . ). Definition at line 138 of file TestSupport.cxx. Variable Documentation. ◆ noDiagCheckerInstance. struct ROOT::TestSupport::ForbidDiagnostics ROOT::TestSupport::noDiagCheckerInstance. static . ROOTTestSupport. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1TestSupport.html:14,Test,TestSupport,14,doc/master/namespaceROOT_1_1TestSupport.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TestSupport.html,7,['Test'],['TestSupport']
Testability,". ROOT: ROOT::TestSupport Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions |; Variables ; ROOT::TestSupport Namespace Reference. Classes; class  CheckDiagsRAII;  Install a ROOT diagnostic handler to analyse diagnostics. More...;  ; class  FilterDiagsRAII;  Allows a user function to catch and filter/analyse ROOT and cling diagnostics, e.g. More...;  ; struct  ForbidDiagnostics;  Error handler for gtests that generates failures for every received diagnostic > kInfo when this file is linked to. More...;  . Functions; std::ostream & operator<< (std::ostream &stream, CheckDiagsRAII::Diag_t const &diag);  . Variables; static struct ROOT::TestSupport::ForbidDiagnostics noDiagCheckerInstance;  . Function Documentation. ◆ operator<<(). std::ostream & ROOT::TestSupport::operator<< ; (; std::ostream & ; stream, . CheckDiagsRAII::Diag_t const & ; diag . ). Definition at line 138 of file TestSupport.cxx. Variable Documentation. ◆ noDiagCheckerInstance. struct ROOT::TestSupport::ForbidDiagnostics ROOT::TestSupport::noDiagCheckerInstance. static . ROOTTestSupport. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:05 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1TestSupport.html:14,Test,TestSupport,14,doc/v632/namespaceROOT_1_1TestSupport.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TestSupport.html,7,['Test'],['TestSupport']
Testability,". ROOT: ROOT::option::Option Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; ROOT::option::Option Class Reference. ; A parsed option from the command line together with its argument if it has one. ; The Parser chains all parsed options with the same Descriptor::index together to form a linked list. This allows you to easily implement all of the common ways of handling repeated options and enable/disable pairs. Test for presence of a switch in the argument vector: if ( options[QUIET] ) ... ; ; Evaluate –enable-foo/–disable-foo pair where the last one used wins: if ( options[FOO].last()->type() == DISABLE ) ... ; ROOT::option::Option::typeint type() constReturns Descriptor::type of this Option's Descriptor, or 0 if this Option is invalid (unused).Definition OptionParser.h:544; ROOT::option::Option::lastOption * last()Returns a pointer to the last element of the linked list.Definition OptionParser.h:643; ; Cumulative option (-v verbose, -vv more verbose, -vvv even more verbose): int verbosity = options[VERBOSE].count(); ; ; Iterate over all –file=<fname> arguments: for (Option* opt = options[FILE]; opt; opt = opt->next()); fname = opt->arg; ... ; ROOT::option::OptionA parsed option from the command line together with its argument if it has one.Definition OptionParser.h:454; ROOT::option::Option::nextOption * next()Returns a pointer to the next element of the linked list or NULL if called on last().Definition OptionParser.h:682; . Definition at line 453 of file OptionParser.h. Public Member Functions;  Option ();  Creates a new Option that is a one-element linked list and has NULL desc, name, arg and namelen. ;  ;  Option (const Descriptor *desc_, const char *name_, const char *arg_);  Creates a new Option that is a one-element linked list and has",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1option_1_1Option.html:642,Test,Test,642,doc/master/classROOT_1_1option_1_1Option.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1option_1_1Option.html,1,['Test'],['Test']
Testability,". ROOT: ROOT::option::Option Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; ROOT::option::Option Class Reference. ; A parsed option from the command line together with its argument if it has one. ; The Parser chains all parsed options with the same Descriptor::index together to form a linked list. This allows you to easily implement all of the common ways of handling repeated options and enable/disable pairs. Test for presence of a switch in the argument vector: if ( options[QUIET] ) ... ; ; Evaluate –enable-foo/–disable-foo pair where the last one used wins: if ( options[FOO].last()->type() == DISABLE ) ... ; ROOT::option::Option::typeint type() constReturns Descriptor::type of this Option's Descriptor, or 0 if this Option is invalid (unused).Definition OptionParser.h:544; ROOT::option::Option::lastOption * last()Returns a pointer to the last element of the linked list.Definition OptionParser.h:643; ; Cumulative option (-v verbose, -vv more verbose, -vvv even more verbose): int verbosity = options[VERBOSE].count(); ; ; Iterate over all –file=<fname> arguments: for (Option* opt = options[FILE]; opt; opt = opt->next()); fname = opt->arg; ... ; ROOT::option::OptionA parsed option from the command line together with its argument if it has one.Definition OptionParser.h:454; ROOT::option::Option::nextOption * next()Returns a pointer to the next element of the linked list or NULL if called on last().Definition OptionParser.h:682; . Definition at line 453 of file OptionParser.h. Public Member Functions;  Option ();  Creates a new Option that is a one-element linked list and has NULL desc, name, arg and namelen. ;  ;  Option (const Descriptor *desc_, const char *name_, const char *arg_);  Creates a new Option that is a one-element linked list and has ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html:641,Test,Test,641,doc/v632/classROOT_1_1option_1_1Option.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html,1,['Test'],['Test']
Testability,". ROOT: RooConstraintSum Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooConstraintSum Class ReferenceRooFit » RooFit Core. ; Calculates the sum of the -(log) likelihoods of a set of RooAbsPfs that represent constraint functions. ; This class is used to calculate the composite -log(L) of constraints to be added to the regular -log(L) in RooAbsPdf::fitTo() with Constrain(..) arguments. ; Definition at line 27 of file RooConstraintSum.h. Public Member Functions;  RooConstraintSum ();  ;  RooConstraintSum (const char *name, const char *title, const RooArgSet &constraintSet, const RooArgSet &paramSet, bool takeGlobalObservablesFromData=false);  Constructor with set of constraint p.d.f.s. All elements in constraintSet must inherit from RooAbsPdf. ;  ;  RooConstraintSum (const RooConstraintSum &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; void doEval (RooFit::EvalContext &) const override;  Base function for computing multiple values of a RooAbsReal. ;  ; TClass * IsA () const override;  ; const RooArgList & list ();  ; bool setData (RooAbsData &data, bool cloneData=true) override;  Replace the variables in this RooConstraintSum with the global observables in the dataset if they match by name. ;  ; bool setData (RooAbsData const &data, bool cloneData=true);  Replace the variables in this RooConstraintSum with the global observables in the dataset if they match by name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooConstraintSum.html:367,log,log,367,doc/master/classRooConstraintSum.html,https://root.cern,https://root.cern/doc/master/classRooConstraintSum.html,3,['log'],['log']
Testability,". ROOT: RooDLLSignificanceMCSModule Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooDLLSignificanceMCSModule Class ReferenceRooFit » RooFit Core. ; Add-on module to RooMCStudy that calculates the significance of a signal by comparing the likelihood of a fit fit with a given parameter floating with a fit with that given parameter fixed to a nominal value (usually zero). ; The difference in the -log(L) of those two fits can be interpreted as the probability that a statistical background fluctation may result in a signal as large or larger than the signal observed. This interpretation is contingent on underlying normal sampling distributions and a MC study is a good way to test that assumption. ; Definition at line 23 of file RooDLLSignificanceMCSModule.h. Public Member Functions;  RooDLLSignificanceMCSModule (const char *parName, double nullHypoValue=0.0);  Constructor of module with parameter name to be interpreted as nSignal and the value of the null hypothesis for nSignal (usually zero) ;  ;  RooDLLSignificanceMCSModule (const RooDLLSignificanceMCSModule &other);  Copy constructor. ;  ;  RooDLLSignificanceMCSModule (const RooRealVar &param, double nullHypoValue=0.0);  Constructor of module with parameter to be interpreted as nSignal and the value of the null hypothesis for nSignal (usually zero) ;  ;  ~RooDLLSignificanceMCSModule () override;  ; RooDataSet * finalizeRun () override;  Return auxiliary dataset with results of delta(-log(L)) calculations of this module so that it is merged with RooMCStudy::fitParDataSet() by RooMCStudy. ;  ; bool initializeInstance () override;  Initialize module after attachment to RooMCStudy object. ;  ; bool initializeRun (Int_t) override;  Initialize module at beginning of RooCMStudy run. ;  ; TClass * IsA () const override;  ; bool processAfterFit (Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDLLSignificanceMCSModule.html:578,log,log,578,doc/master/classRooDLLSignificanceMCSModule.html,https://root.cern,https://root.cern/doc/master/classRooDLLSignificanceMCSModule.html,2,"['log', 'test']","['log', 'test']"
Testability,". ROOT: RooFit Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions ; RooFit Namespace Reference. The namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or other types of arguments). ; More... Namespaces; namespace  Detail;  ; namespace  Experimental;  ; namespace  JSONIO;  ; namespace  MultiProcess;  ; namespace  TestStatistics;  Namespace for new RooFit test statistic calculation. ;  . Classes; class  EvalBackend;  ; class  EvalContext;  ; class  Evaluator;  Evaluates a RooAbsReal object in other ways than recursive graph traversal. More...;  ; struct  NodeInfo;  A struct used by the Evaluator to store information on the RooAbsArgs in the computation graph. More...;  ; struct  UniqueId;  A UniqueId can be added as a class member to enhance any class with a unique identifier for each instantiated object. More...;  . Typedefs; typedef double(* CFUNCD1D) (double);  ; typedef double(* CFUNCD1I) (Int_t);  ; typedef double(* CFUNCD2DD) (double, double);  ; typedef double(* CFUNCD2DI) (double, Int_t);  ; typedef double(* CFUNCD2ID) (Int_t, double);  ; typedef double(* CFUNCD2II) (Int_t, Int_t);  ; typedef double(* CFUNCD2UD) (UInt_t, double);  ; typedef double(* CFUNCD3DDB) (double, double, bool);  ; typedef double(* CFUNCD3DDD) (double, double, double);  ; typedef double(* CFUNCD3DII) (double, Int_t, Int_t);  ; typedef double(* CFUNCD3UDD) (UInt_t, double, double);  ; typedef double(* CFUNCD3UDU) (UInt_t, double, UInt_t);  ; typedef double(* CFUNCD3UUD) (UInt_t, UInt_t, double);  ; typedef double(* CFUNCD4DDDB) (double, double, double, bool);  ; typedef double(* CFUNCD4DDDD) (double, double, double, double);  ; typedef double(* CFUNCD4DDDI) (double, double, double, Int_t);  ; using ModelConfig = RooStats::ModelConfig;  ; template<typename T > ; using OwningPtr = T *;  An alias for raw pointers for indicating that the retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceRooFit.html:467,Test,TestStatistics,467,doc/master/namespaceRooFit.html,https://root.cern,https://root.cern/doc/master/namespaceRooFit.html,2,"['Test', 'test']","['TestStatistics', 'test']"
Testability,". ROOT: RooFit. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules ; RooFit. ; RooFit is a package for building likelihood models and fitting these to data. ; For an introduction check the RooFit Tutorials, user's guides, courses or the RooFit chapter of the Manual.; For developers, there is also the RooFit Developer Documentation, which serves as a reference on how to extend RooFit with custom classes or for contributing to RooFit itself. . Modules;  RooFit Developer Documentation;  How-to guides on how to extend RooFit with custom classes or to work on RooFit itself. ;  ;  RooFit;  RooFit main classes for building likelihood models, mainly PDFs. ;  ;  RooFit Core;  RooFit core classes. These provide the infrastructure for building likelihood models. ;  ;  RooFit Legacy;  Old RooFit classes. ;  ;  RooFit command arguments;  These arguments can be passed to functions of RooFit objects. ;  ;  RooFit More;  RooFit components that are only available if ROOT was built with the mathmore option. ;  ;  RooStats;  RooStats is a toolkit for statistical tests built on top of RooFit. ;  ;  xRooFit;  A high-level API for RooFit. ;  ;  RooFit Pythonizations;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Roofitmain.html:1098,test,tests,1098,doc/master/group__Roofitmain.html,https://root.cern,https://root.cern/doc/master/group__Roofitmain.html,1,['test'],['tests']
Testability,". ROOT: RooFit::MultiProcess::HeatmapAnalyzer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; RooFit::MultiProcess::HeatmapAnalyzer Class Reference. ; Reads and processes logfiles produced by RooFit::MultiProcess::ProcessTimer. ; RooFit::MultiProcess::ProcessTimer records timings of multiple processes simultaneously and allows for these timings to be written out in json format, one for each process. This class, the HeatmapAnalyzer, can read these json files and produce a heatmap from them with partial derivatives on the y-axis, likelihood evaluations on the x-axis, and time expenditures on the z-axis. This class also contains some convenience functions for inspecting these log files.; Note that this class requires the logfiles to contain three specific keys in the json:; master:gradient containing an array of gradient timestamps; *eval_task*<task_number> containing an array of task evaluation timestamps.; *eval_partition* containing an array of partition evaluation timestamps . Definition at line 34 of file HeatmapAnalyzer.h. Public Member Functions;  HeatmapAnalyzer (std::string const &logs_dir);  HeatmapAnalyzer Constructor. ;  ;  ~HeatmapAnalyzer ();  ; std::unique_ptr< TH2I > analyze (int analyzed_gradient);  This method is the main functionality in this class. ;  ; std::vector< std::string > const getMetadata ();  ; std::vector< std::string > const getPartitionNames ();  ; std::vector< std::string > const getTaskNames ();  . Private Attributes; std::vector< std::string > eval_partitions_names_;  ; std::unique_ptr< Detail::HeatmapAnalyzerJsonData > jsonData_;  ; TH2I matrix_;  ; std::vector< std::string > tasks_names_;  . #include <RooFit/MultiProcess/HeatmapAnalyzer.h>; Constructor & Destructor Documentation. ◆ HeatmapAnalyzer(). RooFit::MultiProcess::HeatmapAnalyzer::HeatmapAnalyzer ; (; std::string const & ; logs_dir).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFit_1_1MultiProcess_1_1HeatmapAnalyzer.html:315,log,logfiles,315,doc/master/classRooFit_1_1MultiProcess_1_1HeatmapAnalyzer.html,https://root.cern,https://root.cern/doc/master/classRooFit_1_1MultiProcess_1_1HeatmapAnalyzer.html,3,['log'],"['log', 'logfiles']"
Testability,". ROOT: RooFit::TestStatistics::RooRealL Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooFit::TestStatistics::RooRealL Class ReferenceRooFit » RooFit Core. ; RooAbsReal that wraps RooAbsL likelihoods for use in RooFit outside of the RooMinimizer context. ; This class provides a simple wrapper to evaluate RooAbsL derived likelihood objects like a regular RooFit real value. Whereas the RooAbsL objects are meant to be used within the context of minimization, RooRealL can be used in any RooFit context, like plotting. The value can be accessed through getVal(), like with other RooFit real variables. ; Definition at line 28 of file RooRealL.h. Public Member Functions;  RooRealL (const char *name, const char *title, std::shared_ptr< RooAbsL > likelihood);  ;  RooRealL (const RooRealL &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; double defaultErrorLevel () const override;  ; double getCarry () const;  ; std::shared_ptr< RooAbsL > const & getRooAbsL ();  ; double globalNormalization () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFit_1_1TestStatistics_1_1RooRealL.html:16,Test,TestStatistics,16,doc/master/classRooFit_1_1TestStatistics_1_1RooRealL.html,https://root.cern,https://root.cern/doc/master/classRooFit_1_1TestStatistics_1_1RooRealL.html,2,['Test'],['TestStatistics']
Testability,". ROOT: RooLognormal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooLognormal Class ReferenceRooFit » RooFit. ; RooFit Lognormal PDF. ; The two parameters are:; m0: the median of the distribution; k = exp(sigma): sigma is called the shape parameter in the TMath parameterization. \[; \mathrm{RooLognormal}(x \, | \, m_0, k) = \frac{1}{\sqrt{2\pi \cdot \ln(k) \cdot x}} \cdot \exp\left(; \frac{-\ln^2(\frac{x}{m_0})}{2 \ln^2(k)} \right) \]. The parameterization here is physics driven and differs from the ROOT::Math::lognormal_pdf() in x,m,s,x0 with:; m = log(m0); s = log(k); x0 = 0 . Definition at line 17 of file RooLognormal.h. Public Member Functions;  RooLognormal ();  ;  RooLognormal (const char *name, const char *title, RooAbsReal &_x, RooAbsReal &_m0, RooAbsReal &_k, bool useStandardParametrization=false);  ;  RooLognormal (const RooLognormal &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; std::string buildCallToAnalyticIntegral (int code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; void generateEvent (Int_t code) override;  Interface for generation of an event using the algorithm corresponding to the specified code. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLognormal.html:333,Log,Lognormal,333,doc/master/classRooLognormal.html,https://root.cern,https://root.cern/doc/master/classRooLognormal.html,3,"['Log', 'log']","['Lognormal', 'log']"
Testability,". ROOT: RooMCStudy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; RooMCStudy Class ReferenceRooFit » RooFit Core. ; Helper class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets. ; These may be generated from either same PDF or from a different PDF with similar parameters.; Given a fit and a generator PDF (they might be identical), RooMCStudy can produce toyMC samples and/or fit these. It accumulates the post-fit parameters of each iteration in a dataset. These can be retrieved using fitParams() or fitParDataSet(). This dataset additionally contains the variables; NLL: The value of the negative log-likelihood for each run.; ngen: The number of events generated for each run. Additional plotting routines simplify the task of plotting the distribution of the minimized likelihood, the fitted parameter values, fitted error and pull distribution.; RooMCStudy provides the option to insert add-in modules that modify the generate-and-fit cycle and allow to perform extra steps in the cycle. Output of these modules can be stored alongside the fit results in the aggregate results dataset. These study modules should derive from the class RooAbsMCStudyModule.; Check the RooFit tutorials; rf801_mcstudy.C; rf802_mcstudy_addons.C; rf803_mcstudy_addons2.C; rf804_mcstudy_constr.C for usage examples. PyROOT; Some member functions of RooMCStudy that take a RooCmdArg as argument also support keyword arguments. So far, this applies to constructor RooMCStudy(), RooMCStudy::plotParamOn, RooMCStudy::plotParam, RooMCStudy::plotNLL, RooMCStudy::plotError and RooMCStudy::plotPull. For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMCStudy.html:932,log,log-likelihood,932,doc/master/classRooMCStudy.html,https://root.cern,https://root.cern/doc/master/classRooMCStudy.html,1,['log'],['log-likelihood']
Testability,". ROOT: RooNDKeysPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooNDKeysPdf Class ReferenceRooFit » RooFit. ; Generic N-dimensional implementation of a kernel estimation p.d.f. ; This p.d.f. models the distribution of an arbitrary input dataset as a superposition of Gaussian kernels, one for each data point, each contributing 1/N to the total integral of the p.d.f. If the 'adaptive mode' is enabled, the width of the Gaussian is adaptively calculated from the local density of events, i.e. narrow for regions with high event density to preserve details and wide for regions with log event density to promote smoothness. The details of the general algorithm are described in the following paper: Cranmer KS, Kernel Estimation in High-Energy Physics. Computer Physics Communications 136:198-207,2001 - e-Print Archive: hep ex/0011057 For multi-dimensional datasets, the kernels are modeled by multidimensional Gaussians. The kernels are constructed such that they reflect the correlation coefficients between the observables in the input dataset. ; Definition at line 44 of file RooNDKeysPdf.h. Classes; struct  BoxInfo;  . Public Types; enum  Mirror { ;   NoMirror; , MirrorLeft; , MirrorRight; , MirrorBoth; , ;   MirrorAsymLeft; , MirrorAsymLeftRight; , MirrorAsymRight; , MirrorLeftAsymRight; , ;   MirrorAsymBoth. };  ;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNDKeysPdf.html:825,log,log,825,doc/master/classRooNDKeysPdf.html,https://root.cern,https://root.cern/doc/master/classRooNDKeysPdf.html,1,['log'],['log']
Testability,". ROOT: RooNonCentralChiSquare Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooNonCentralChiSquare Class ReferenceRooFit » RooFit. ; The PDF of the Non-Central Chi Square distribution for n degrees of freedom. ; It is the asymptotic distribution of the profile likelihood ratio test q_mu when a different mu' is true. It is Wald's generalization of Wilks' Theorem.; See:; Asymptotic formulae for likelihood-based tests of new physics; By Glen Cowan, Kyle Cranmer, Eilam Gross, Ofer Vitells http://arXiv.org/abs/arXiv:1007.1727; Wikipedia; It requires MathMore to evaluate for non-integer degrees of freedom, k.; When the Mathmore library is available we can use the MathMore libraries implemented using GSL. It makes use of the modified Bessel function of the first kind (for k > 2). For k < 2 it uses the hypergeometric function 0F1. When is not available we use explicit summation of normal chi-squared distributions The usage of the sum can be forced by calling SetForceSum(true);; This implementation could be improved. BOOST has a nice implementation:; http://live.boost.org/doc/libs/1_42_0/libs/math/doc/sf_and_dist/html/math_toolkit/dist/dist_ref/dists/nc_chi_squared_dist.html; http://wesnoth.repositoryhosting.com/trac/wesnoth_wesnoth/browser/trunk/include/boost/math/distributions/non_central_chi_squared.hpp?rev=6 ; Definition at line 20 of file RooNonCentralChiSquare.h. Public Member Functions;  RooNonCentralChiSquare ();  ;  RooNonCentralChiSquare (const char *name, const char *title, RooAbsReal &_x, RooAbsReal &_k, RooAbsReal &_lambda);  ;  RooNonCentralChiSquare (const RooNonCentralChiSquare &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advert",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNonCentralChiSquare.html:491,test,test,491,doc/master/classRooNonCentralChiSquare.html,https://root.cern,https://root.cern/doc/master/classRooNonCentralChiSquare.html,2,['test'],"['test', 'tests']"
Testability,". ROOT: RooProfileLL Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooProfileLL Class ReferenceRooFit » RooFit Core. ; Implements the profile likelihood estimator for a given likelihood and set of parameters of interest. ; The value return by RooProfileLL is the input likelihood nll minimized w.r.t all nuisance parameters (which are all parameters except for those listed in the constructor) minus the -log(L) of the best fit. Note that this function is slow to evaluate as a MIGRAD minimization step is executed for each function evaluation ; Definition at line 22 of file RooProfileLL.h. Public Member Functions;  RooProfileLL ();  Default constructor Should only be used by proof. ;  ;  RooProfileLL (const char *name, const char *title, RooAbsReal &nll, const RooArgSet &observables);  Constructor of profile likelihood given input likelihood nll w.r.t the given set of variables. ;  ;  RooProfileLL (const RooProfileLL &other, const char *name=nullptr);  Copy constructor. ;  ; bool alwaysStartFromMin () const;  ; const RooArgSet & bestFitObs () const;  ; const RooArgSet & bestFitParams () const;  ; void clearAbsMin ();  ; TObject * clone (const char *newname) const override;  ; RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest) override;  Optimized implementation of createProfile for profile likelihoods. ;  ; TClass * IsA () const override;  ; RooMinimizer * minimizer ();  ; RooAbsReal & nll ();  ; Int_t numEval () const;  ; bool redirectServersHook (const RooAbsCollection &, bool, bool, bool) override;  Function that is called at the end of redirectServers(). ;  ; void setAlwaysStartFromMin (bool flag);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProfileLL.html:617,log,log,617,doc/master/classRooProfileLL.html,https://root.cern,https://root.cern/doc/master/classRooProfileLL.html,1,['log'],['log']
Testability,". ROOT: RooRealIntegral Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; RooRealIntegral Class ReferenceRooFit » RooFit Core. ; Performs hybrid numerical/analytical integrals of RooAbsReal objects. ; The class performs none of the actual integration, but only manages the logic of what variables can be integrated analytically, accounts for eventual jacobian terms and defines what numerical integrations needs to be done to complement the analytical integral. The actual analytical integrations (if any) are done in the PDF themselves, the numerical integration is performed in the various implementations of the RooAbsIntegrator base class. ; Definition at line 29 of file RooRealIntegral.h. Public Member Functions;  RooRealIntegral ();  ;  RooRealIntegral (const char *name, const char *title, const RooAbsReal &function, const RooArgSet &depList, const RooArgSet *funcNormSet=nullptr, const RooNumIntConfig *config=nullptr, const char *rangeName=nullptr);  Construct integral of 'function' over observables in 'depList' in range 'rangeName' with normalization observables 'funcNormSet' (for p.d.f.s). ;  ;  RooRealIntegral (const RooRealIntegral &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooRealIntegral () override;  ; const RooArgSet & anaIntVars () const;  ; TObject * clone (const char *newname) const override;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const override;  Create an object that represents the integral of the fu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealIntegral.html:559,log,logic,559,doc/master/classRooRealIntegral.html,https://root.cern,https://root.cern/doc/master/classRooRealIntegral.html,1,['log'],['logic']
Testability,". ROOT: RooSpline Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooSpline Class ReferenceRooFit » RooFit. ; A RooFit class for creating spline functions. ; This class provides the functionality to create spline functions in RooFit, , using ROOT TSpline. It supports splines of order 3 or 5. It also support interpolation in the log-space (x or y), for example exp(spline({x0}, {log y0})), useful when you have something (as xsections) that is more similar to exponentials than polynomials.; Usage example: RooRealVar x{""x"", ""x"", 0, 5};; ; std::vector<double> x0{1., 2, 3};; std::vector<double> y0{10., 20, 50};; ; RooSpline spline{""myspline"", ""my spline"", x, x0, y0};; ; auto frame = x.frame();; spline.plotOn(frame);; frame->Draw();; RooAbsReal::plotOnvirtual RooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) constPlot (project) PDF on specified frame.Definition RooAbsReal.cxx:1611; RooPlot::Drawvoid Draw(Option_t *options=nullptr) overrideDraw this plot and all of the elements it contains.Definition RooPlot.cxx:637; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; RooSplineA RooFit class for creating spline functions.Definition RooSpline.h:27; xDouble_t x[n]Definition legend1.C:17. Definition at line 27 of file RooSpline.h. Public Member Functions;  RooSpline ()=default;  ;  RooSpline (const char *name, const char *title, RooAbsReal &x, const TGraph &gr, int order=3, bool logx=false, bool logy=false);  Constructor for creating a spline from a TGraph. ;  ;  RooSpline (const char *name, const char ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSpline.html:538,log,log-space,538,doc/master/classRooSpline.html,https://root.cern,https://root.cern/doc/master/classRooSpline.html,2,['log'],"['log', 'log-space']"
Testability,". ROOT: RooStats Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Enumerations |; Functions |; Variables ; RooStats Namespace ReferenceRooFit » RooStats » HistFactory | RooFit » RooStats. Namespace for the RooStats classes. ; More... Namespaces; namespace  HistFactory;  ; namespace  NumberCountingUtils;  ; namespace  ROOTDict;  . Classes; class  AcceptanceRegion;  ; class  AsymptoticCalculator;  Hypothesis Test Calculator based on the asymptotic formulae for the profile likelihood ratio. More...;  ; class  BayesianCalculator;  BayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method. More...;  ; class  BernsteinCorrection;  BernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term. More...;  ; class  BranchStore;  ; class  CombinedCalculator;  CombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals. More...;  ; class  ConfidenceBelt;  ConfidenceBelt is a concrete implementation of the ConfInterval interface. More...;  ; class  ConfInterval;  ConfInterval is an interface class for a generic interval in the RooStats framework. More...;  ; class  DebuggingSampler;  ; class  DebuggingTestStat;  ; class  DetailedOutputAggregator;  This class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations. More...;  ; class  FeldmanCousins;  The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction. More...;  ; class  FrequentistCalculator;  Does a frequentist hypothesis test. More...;  ; class  Heaviside;  Represents the Heaviside function. More...;  ; class  HLFactory;  HLFactory is an High Level model Factory allows you to describe your models in a configu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceRooStats.html:488,Test,Test,488,doc/master/namespaceRooStats.html,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html,1,['Test'],['Test']
Testability,. ROOT: RooStats Tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; RooStats TutorialsTutorials. ; These tutorials illustrate the main features of RooStats. . Files; file  FourBinInstructional.C;   This example is a generalization of the on/off problem. ;  ; file  FourBinInstructional.py;   This example is a generalization of the on/off problem. ;  ; file  HybridInstructional.C;   Example demonstrating usage of HybridCalcultor ;  ; file  HybridStandardForm.C;   A hypothesis testing example based on number counting with background uncertainty. ;  ; file  IntervalExamples.C;   Example showing confidence intervals with four techniques. ;  ; file  IntervalExamples.py;   Example showing confidence intervals with four techniques. ;  ; file  ModelInspector.C;  RooStats Model Inspector. ;  ; file  MultivariateGaussianTest.C;   Comparison of MCMC and PLC in a multi-variate gaussian problem ;  ; file  MultivariateGaussianTest.py;   Comparison of MCMC and PLC in a multi-variate gaussian problem ;  ; file  OneSidedFrequentistUpperLimitWithBands.C;   OneSidedFrequentistUpperLimitWithBands ;  ; file  rs101_limitexample.C;   Limits: number counting experiment with uncertainty on both the background rate and signal efficiency. ;  ; file  rs101_limitexample.py;   Limits: number counting experiment with uncertainty on both the background rate and signal efficiency. ;  ; file  rs102_hypotestwithshapes.C;   A typical search for a new particle by studying an invariant mass distribution ;  ; file  rs301_splot.C;   SPlot tutorial ;  ; file  rs302_JeffreysPriorDemo.C;   tutorial demonstrating and validates the RooJeffreysPrior class ;  ; file  rs401c_FeldmanCousins.C;   Produces an interval on the mean signal in a number counting experiment with known background using the Feldman-Cousins technique. ;  ; file  rs401c_FeldmanCousins.py;   Produces an interval on the mean signal in a number counting experiment with known background using the Fel,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__roostats.html:528,test,testing,528,doc/master/group__tutorial__roostats.html,https://root.cern,https://root.cern/doc/master/group__tutorial__roostats.html,1,['test'],['testing']
Testability,". ROOT: RooStats::HistFactory::RooBarlowBeestonLL Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooStats::HistFactory::RooBarlowBeestonLL Class ReferenceRooFit » RooStats » HistFactory. ; Class RooBarlowBeestonLL implements the profile likelihood estimator for a given likelihood and set of parameters of interest. ; The value return by RooBarlowBeestonLL is the input likelihood nll minimized w.r.t all nuisance parameters (which are all parameters except for those listed in the constructor) minus the -log(L) of the best fit. Note that this function is slow to evaluate as a MIGRAD minimization step is executed for each function evaluation ; Definition at line 25 of file RooBarlowBeestonLL.h. Classes; class  BarlowCache;  . Public Member Functions;  RooBarlowBeestonLL ();  Default constructor. Should only be used by proof. ;  ;  RooBarlowBeestonLL (const char *name, const char *title, RooAbsReal &nll);  ;  RooBarlowBeestonLL (const RooBarlowBeestonLL &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; bool getParameters (const RooArgSet *depList, RooArgSet &outputSet, bool stripDisconnected=true) const override;  Fills a list with leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; void initializeBarlowCache ();  ; TClass * IsA () const override;  ; RooAbsReal & nll ();  ; void setDataset (RooAbsData *data);  ; void setPdf (RooAbsPdf *pdf);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1RooBarlowBeestonLL.html:728,log,log,728,doc/master/classRooStats_1_1HistFactory_1_1RooBarlowBeestonLL.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1RooBarlowBeestonLL.html,1,['log'],['log']
Testability,". ROOT: RooStats::HypoTestInverterPlot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooStats::HypoTestInverterPlot Class ReferenceRooFit » RooStats. ; Class to plot a HypoTestInverterResult, the output of the HypoTestInverter calculator. ; It can be used to plot the obtained p-values ( CLb, CLs+b or CLs) for each scanned point, as well as the test statistic distributions (when a calculator based on pseudo-experiments is used) for the two hypotheses. ; Definition at line 26 of file HypoTestInverterPlot.h. Public Member Functions;  HypoTestInverterPlot (const char *name, const char *title, HypoTestInverterResult *results);  constructor with name and title from a HypoTestInverterResult class ;  ;  HypoTestInverterPlot (HypoTestInverterResult *results);  constructor ;  ;  ~HypoTestInverterPlot () override;  destructor ;  ; void Draw (Option_t *opt="""") override;  Draw the scan result in the current canvas Possible options: """" (default): draw observed + expected with 1 and 2 sigma bands SAME : draw in the current axis OBS : draw only the observed plot EXP : draw only the expected plot CLB : draw also CLb 2CL : drow both CLs+b and CLs. ;  ; TClass * IsA () const override;  ; TMultiGraph * MakeExpectedPlot (double sig1=1, double sig2=2);  Make the expected plot and the bands nsig1 and nsig2 indicates the n-sigma value for the bands if nsig1 = 0 no band is computed (only expected value) if nsig2 > nsig1 (default is nsig1=1 and nsig2=2) the second band is also done. ;  ; TGraphErrors * MakePlot (Option_t *opt="""");  return a TGraphErrors with the obtained observed p-values resultinf from the scan By default (Option = """") return CLs or CLsb depending if the flag UseCLs is set If Option = ""CLb"" return CLb plot = ""CLs+b"" return CLs+b plot independently of the flag = ""CLs"" return CLs plot independently o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterPlot.html:526,test,test,526,doc/master/classRooStats_1_1HypoTestInverterPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterPlot.html,1,['test'],['test']
Testability,". ROOT: RooStats::HypoTestInverterResult Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; RooStats::HypoTestInverterResult Class ReferenceRooFit » RooStats. ; HypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval. ; Based on the RatioFinder code available in the RooStatsCms package developed by Gregory Schott and Danilo Piparo Ported and adapted to RooStats by Gregory Schott Some contributions to this class have been written by Matthias Wolf (error estimation) ; Definition at line 26 of file HypoTestInverterResult.h. Public Types; enum  InterpolOption_t { kLinear; , kSpline; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  HypoTestInverterResult (const char *name, const RooRealVar &scannedVariable, double cl);  constructor ;  ;  HypoTestInverterResult (const char *name=nullptr);  default constructor ;  ;  HypoTestInverterResult (const HypoTestInverterResult &other, const char *name);  copy constructor ;  ;  ~HypoTestInverterResult () override;  destructor ;  ; bool Add (const HypoTestInverterResult &otherResult);  merge with the content of another",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterResult.html:483,test,test,483,doc/master/classRooStats_1_1HypoTestInverterResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterResult.html,1,['test'],['test']
Testability,". ROOT: RooStats::HypoTestResult Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; RooStats::HypoTestResult Class ReferenceRooFit » RooStats. ; HypoTestResult is a base class for results from hypothesis tests. ; Any tool inheriting from HypoTestCalculator can return a HypoTestResult. As such, it stores a p-value for the null-hypothesis (eg. background-only) and an alternate hypothesis (eg. signal+background). The p-values can also be transformed into confidence levels ( \(CL_{b}\), \(CL_{s+b}\)) in a trivial way. The ratio of the \(CL_{s+b}\) to \(CL_{b}\) is often called \(CL_{s}\), and is considered useful, though it is not a probability. Finally, the p-value of the null can be transformed into a number of equivalent Gaussian sigma using the Significance method.; The p-value of the null for a given test statistic is rigorously defined and this is the starting point for the following conventions. Conventions used in this class; The p-value for the null and alternate are on the same side of the observed value of the test statistic. This is the more standard convention and avoids confusion when doing inverted tests.; For exclusion, we also want the formula \(CL_{s} = CL_{s+b} / CL_{b}\) to hold which therefore defines our conventions for \(CL_{s+b}\) and \(CL_{b}\). \(CL_{s}\) was specifically invented for exclusion and therefore all quantities need be related through the assignments as they are for exclusion: \(CL_{s+b} = p_{s+b}\); \(CL_{b} = p_{b}\). This is derived by considering the scenarios of a powerful and not powerful inverted test, where for the not so powerful test, \(CL_{s}\) must be close to one.; For results of Hypothesis tests, \(CL_{s}\) has no similar direct interpretation as for exclusion and can be larger than one. ; Definition at line 22 of file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html:409,test,tests,409,doc/master/classRooStats_1_1HypoTestResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html,1,['test'],['tests']
Testability,". ROOT: RooStats::LikelihoodInterval Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooStats::LikelihoodInterval Class ReferenceRooFit » RooStats. ; LikelihoodInterval is a concrete implementation of the RooStats::ConfInterval interface. ; It implements a connected N-dimensional intervals based on the contour of a likelihood ratio. The boundary of the interval is equivalent to a MINUIT/MINOS contour about the maximum likelihood estimator; The interval does not need to be an ellipse (eg. it is not the HESSE error matrix). The level used to make the contour is the same as that used in MINOS, eg. it uses Wilks' theorem, which states that under certain regularity conditions the function -2* log (profile likelihood ratio) is asymptotically distributed as a chi^2 with N-dof, where N is the number of parameters of interest.; Note, a boundary on the parameter space (eg. s>= 0) or a degeneracy (eg. mass of signal if Nsig = 0) can lead to violations of the conditions necessary for Wilks' theorem to be true.; Also note, one can use any RooAbsReal as the function that will be used in the contour; however, the level of the contour is based on Wilks' theorem as stated above.; References. F. James., Minuit.Long writeup D506, CERN, 1998. . Definition at line 34 of file LikelihoodInterval.h. Public Member Functions;  LikelihoodInterval (const char *name, RooAbsReal *, const RooArgSet *, RooArgSet *=nullptr);  Alternate constructor taking a pointer to the profile likelihood ratio, parameter of interest and optionally a snapshot of best parameter of interest for interval. ;  ;  LikelihoodInterval (const char *name=nullptr);  default constructor ;  ;  ~LikelihoodInterval () override;  destructor ;  ; bool CheckParameters (const RooArgSet &) const override;  check if parameters are ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1LikelihoodInterval.html:905,log,log,905,doc/master/classRooStats_1_1LikelihoodInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1LikelihoodInterval.html,1,['log'],['log']
Testability,". ROOT: RooStats::SamplingDistribution Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooStats::SamplingDistribution Class ReferenceRooFit » RooStats. ; This class simply holds a sampling distribution of some test statistic. ; The distribution can either be an empirical distribution (eg. the samples themselves) or a weighted set of points (eg. for the FFT method). The class supports merging. ; Definition at line 28 of file SamplingDistribution.h. Public Member Functions;  SamplingDistribution ();  Default constructor for SamplingDistribution. ;  ;  SamplingDistribution (const char *name, const char *title, const char *varName=nullptr);  SamplingDistribution constructor (with name and title) ;  ;  SamplingDistribution (const char *name, const char *title, RooDataSet &dataSet, const char *columnName=nullptr, const char *varName=nullptr);  Creates a SamplingDistribution from a RooDataSet for debugging purposes; e.g. ;  ;  SamplingDistribution (const char *name, const char *title, std::vector< double > &samplingDist, const char *varName=nullptr);  Constructor for SamplingDistribution. ;  ;  SamplingDistribution (const char *name, const char *title, std::vector< double > &samplingDist, std::vector< double > &sampleWeights, const char *varName=nullptr);  SamplingDistribution constructor. ;  ;  ~SamplingDistribution () override;  Destructor of SamplingDistribution. ;  ; void Add (const SamplingDistribution *other);  merge two sampling distributions ;  ; double CDF (double x) const;  calculate CDF as a special case of Integral(...) with lower limit equal to -inf ;  ; const std::vector< double > & GetSampleWeights () const;  Get the sampling weights. ;  ; const std::vector< double > & GetSamplingDistribution () const;  Get test statistics values. ;  ; Int_t GetSize () co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SamplingDistribution.html:418,test,test,418,doc/master/classRooStats_1_1SamplingDistribution.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SamplingDistribution.html,1,['test'],['test']
Testability,". ROOT: RooStats::UpperLimitMCSModule Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooStats::UpperLimitMCSModule Class ReferenceRooFit » RooStats. ; This class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated. ; Definition at line 27 of file UpperLimitMCSModule.h. Public Member Functions;  UpperLimitMCSModule (const RooArgSet *poi, double CL=0.95);  ;  UpperLimitMCSModule (const UpperLimitMCSModule &other);  Copy constructor. ;  ;  ~UpperLimitMCSModule () override;  Destructor. ;  ; RooDataSet * finalizeRun () override;  Return auxiliary dataset with results of delta(-log(L)) calculations of this module so that it is merged with RooMCStudy::fitParDataSet() by RooMCStudy. ;  ; bool initializeInstance () override;  Initialize module after attachment to RooMCStudy object. ;  ; bool initializeRun (Int_t) override;  Initialize module at beginning of RooCMStudy run. ;  ; TClass * IsA () const override;  ; bool processBetweenGenAndFit (Int_t) override;  Method called after generation of toy data sample and resetting of fit parameters to initial values and before actual fit is performed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsMCStudyModule;  RooAbsMCStudyModule (const char *name, const char *title);  Constructor. ;  ;  RooAbsMCStudyModule (const RooAbsMCStudyModule &other);  Copy constructor. ;  ; bool doInitializeInstance (RooMCStudy &);  Initializer method called upon attachment to given RooMCStudy object. ;  ; virtual bool processAfterFit (Int_t);  Method called after fit has been performed. ;  ; virtual bool processBeforeGen (Int_t);  Method called after resetting of generator par",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1UpperLimitMCSModule.html:819,log,log,819,doc/master/classRooStats_1_1UpperLimitMCSModule.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1UpperLimitMCSModule.html,1,['log'],['log']
Testability,. ROOT: SQL tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; SQL tutorialsTutorials. ; Examples showing the SQL classes. . Files; file  sqlcanvas.C;  This is slight modification of ntuple1.C example. ;  ; file  sqlcreatedb.C;  Create a runcatalog table in a MySQL test database. ;  ; file  sqlcreatedb.py;   Create a runcatalog table in a MySQL test database. ;  ; file  sqlfilldb.C;  Fill run catalog with nfiles entries. ;  ; file  sqlfilldb.py;   Fill run catalog with nfiles entries ;  ; file  SQLiteIPLocation.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  SQLitePlatformDistribution.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  SQLiteTimeVersionOfRoot.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  SQLiteVersionsOfRoot.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  sqlselect.C;  Query example to MySQL test database. ;  ; file  sqlselect.py;  Query example to MySQL test database. ;  ; file  sqltables.C;  This is an example illustrating how the TSQLFile class can be used. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__sql.html:315,test,test,315,doc/master/group__tutorial__sql.html,https://root.cern,https://root.cern/doc/master/group__tutorial__sql.html,4,['test'],['test']
Testability,". ROOT: Special functions. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Special functionsMath » MathCore | Math » MathMore. ; Special mathematical functions. ; The naming and numbering of the functions is taken from Matt Austern, (Draft) Technical Report on Standard Library Extensions, N1687=04-0127, September 10, 2004; AuthorCreated by Andras Zsenei on Mon Nov 8 2004 . Special Functions from MathCore; double ROOT::Math::erf (double x);  Error function encountered in integrating the normal distribution. ;  ; double ROOT::Math::erfc (double x);  Complementary error function. ;  ; double ROOT::Math::tgamma (double x);  The gamma function is defined to be the extension of the factorial to real numbers. ;  ; double ROOT::Math::lgamma (double x);  Calculates the logarithm of the gamma function. ;  ; double ROOT::Math::inc_gamma (double a, double x);  Calculates the normalized (regularized) lower incomplete gamma function (lower integral) ;  ; double ROOT::Math::inc_gamma_c (double a, double x);  Calculates the normalized (regularized) upper incomplete gamma function (upper integral) ;  ; double ROOT::Math::beta (double x, double y);  Calculates the beta function. ;  ; double ROOT::Math::inc_beta (double x, double a, double b);  Calculates the normalized (regularized) incomplete beta function. ;  ; double ROOT::Math::sinint (double x);  Calculates the sine integral. ;  ; double ROOT::Math::cosint (double x);  Calculates the real part of the cosine integral Re(Ci). ;  . Special Functions from MathMore; double ROOT::Math::assoc_laguerre (unsigned n, double m, double x);  Computes the generalized Laguerre polynomials for \( n \geq 0, m > -1 \). ;  ; double ROOT::Math::assoc_legendre (unsigned l, unsigned m, double x);  Computes the associated Legendre polynomials. ;  ; double ROOT::Math::comp_ellint_1 (double k);  Calculates the complete elliptic integral of the first kind. ;  ; double ROOT::Math::comp_ellint_2 (double k);  Calculates the c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__SpecFunc.html:804,log,logarithm,804,doc/master/group__SpecFunc.html,https://root.cern,https://root.cern/doc/master/group__SpecFunc.html,1,['log'],['logarithm']
Testability,". ROOT: TApplicationServer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TApplicationServer Class Reference. . Definition at line 34 of file TApplicationServer.h. Public Member Functions;  TApplicationServer (Int_t *argc, char **argv, FILE *flog, const char *logfile);  Main constructor. ;  ; virtual ~TApplicationServer ();  Cleanup. ;  ; Int_t BrowseDirectory (const char *dirname);  Browse directory and send back its content to client. ;  ; Int_t BrowseFile (const char *fname);  Browse root file and send back its content; if fname is null, send the full list of files. ;  ; Int_t BrowseKey (const char *keyname);  Read key object and send it back to client. ;  ; const char * GetHost () const;  ; void GetOptions (Int_t *argc, char **argv) override;  Get and handle command line options. ;  ; Int_t GetPort () const;  ; Int_t GetProtocol () const;  ; TSocket * GetSocket () const;  ; const char * GetUser () const;  ; void HandleSigPipe ();  Called when the client is not alive anymore (i.e. ;  ; void HandleSocketInput ();  Handle input coming from the client or from the master server. ;  ; void HandleUrgentData ();  Handle Out-Of-Band data sent by the master or client. ;  ; void Interrupt ();  ; TClass * IsA () const override;  ; Bool_t IsValid () const;  ; Longptr_t ProcessLine (const char *line, Bool_t=kFALSE, Int_t *err=nullptr) override;  Parse a command line received from the client, making sure that the files needed for the execution, if any, are available. ;  ; Int_t ReceiveFile (const char *file, Bool_t bin, Long64_t size);  Receive a file, either sent by a client or a master server. ;  ; void Reset (const char *dir);  Reset environment to be ready for execution of next command. ;  ; void Run (Boo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationServer.html:534,log,logfile,534,doc/master/classTApplicationServer.html,https://root.cern,https://root.cern/doc/master/classTApplicationServer.html,1,['log'],['logfile']
Testability,". ROOT: TBenchmark Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TBenchmark Class ReferenceCore ROOT classes » Base ROOT classes. ; This class is a ROOT utility to help benchmarking applications. ; Definition at line 29 of file TBenchmark.h. Public Member Functions;  TBenchmark ();  Benchmark default constructor. ;  ; virtual ~TBenchmark ();  Benchmark destructor. ;  ; Int_t GetBench (const char *name) const;  Returns index of Benchmark name. ;  ; Float_t GetCpuTime (const char *name);  Returns Cpu time used by Benchmark name. ;  ; Float_t GetRealTime (const char *name);  Returns Realtime used by Benchmark name. ;  ; TClass * IsA () const override;  ; void Print (Option_t *name="""") const override;  Prints parameters of Benchmark name. ;  ; virtual void Reset ();  Reset all Benchmarks. ;  ; virtual void Show (const char *name);  Stops Benchmark name and Prints results. ;  ; virtual void Start (const char *name);  Starts Benchmark with the specified name. ;  ; virtual void Stop (const char *name);  Terminates Benchmark with specified name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Summary (Float_t &rt, Float_t &cp);  Prints a summary of all benchmarks. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBenchmark.html:381,benchmark,benchmarking,381,doc/master/classTBenchmark.html,https://root.cern,https://root.cern/doc/master/classTBenchmark.html,8,"['Benchmark', 'benchmark']","['Benchmark', 'Benchmarks', 'benchmarking']"
Testability,". ROOT: TBits Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TBits Class ReferenceCore ROOT classes » Containers. ; Container of bits. ; This class provides a simple container of bits. Each bit can be set and tested via the functions SetBitNumber and TestBitNumber.; The default value of all bits is kFALSE. The size of the container is automatically extended when a bit number is either set or tested. To reduce the memory size of the container use the Compact function, this will discard the memory occupied by the upper bits that are 0. ; Definition at line 26 of file TBits.h. Classes; class  TReference;  . Public Member Functions;  TBits (const TBits &);  TBits copy constructor. ;  ;  TBits (UInt_t nbits=8);  TBits constructor. All bits set to 0. ;  ; virtual ~TBits ();  TBits destructor. ;  ; void Clear (Option_t *option="""") override;  Clear the value. ;  ; void Compact ();  Reduce the storage used by the object to a minimun. ;  ; UInt_t CountBits (UInt_t startBit=0) const;  Return number of bits set to 1 starting at bit startBit. ;  ; UInt_t FirstNullBit (UInt_t startBit=0) const;  Return position of first null bit (starting from position 0 and up) ;  ; UInt_t FirstSetBit (UInt_t startBit=0) const;  Return position of first non null bit (starting from position 0 and up) ;  ; void Get (Char_t *array) const;  Copy all the byes. ;  ; void Get (Int_t *array) const;  ; void Get (Long64_t *array) const;  ; void Get (Short_t *array) const;  ; void Get (UChar_t *array) const;  ; void Get (UInt_t *array) const;  ; void Get (ULong64_t *array) const;  ; void Get (UShort_t *array) const;  ; UInt_t GetNbits () const;  ; UInt_t GetNbytes () const;  ; TClass * IsA () const override;  ; UInt_t LastNullBit (UInt_t startBit=999999999) const;  Return position of first",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBits.html:431,test,tested,431,doc/master/classTBits.html,https://root.cern,https://root.cern/doc/master/classTBits.html,3,"['Test', 'test']","['TestBitNumber', 'tested']"
Testability,". ROOT: TCut Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Friends |; List of all members ; TCut Class ReferenceTree Library. ; A specialized string object used for TTree selections. ; A TCut object has a name and a title. It does not add any data members compared to a TNamed. It only add a set of operators to facilitate logical string concatenation. For example, assume cut1 = ""x<1"" and cut2 = ""y>2""; then cut1 && cut2 will be the string ""(x<1)&&(y>2)""; Operators =, +=, +, *, !, &&, || overloaded.; Examples of use: Root > TCut c1 = ""x<1""; Root > TCut c2 = ""y<0""; Root > TCut c3 = c1&&c2; Root > ntuple.Draw(""x"", c1); Root > ntuple.Draw(""x"", c1||""x>0""); Root > ntuple.Draw(""x"", c1&&c2); Root > ntuple.Draw(""x"", ""(x+y)""*(c1&&c2)); TCutA specialized string object used for TTree selections.Definition TCut.h:25; c1return c1Definition legend1.C:41; c2return c2Definition legend2.C:14; c3return c3Definition legend3.C:15. Definition at line 25 of file TCut.h. Public Member Functions;  TCut ();  Constructor. ;  ;  TCut (const char *name, const char *title);  Constructor. ;  ;  TCut (const char *title);  Constructor. ;  ;  TCut (const TCut &cut);  Copy Constructor. ;  ;  ~TCut () override;  Typical destructor. ;  ; TClass * IsA () const override;  ;  operator const char * () const;  ; bool operator!= (const char *rhs) const;  Comparison. ;  ; bool operator!= (const TCut &rhs) const;  Comparison. ;  ; TCut & operator*= (const char *rhs);  Multiplication. ;  ; TCut & operator*= (const TCut &rhs);  Multiplication. ;  ; TCut & operator+= (const char *rhs);  Addition. ;  ; TCut & operator+= (const TCut &rhs);  Addition. ;  ; TCut & operator= (const char *rhs);  Assignment. ;  ; TCut & operator= (const TCut &rhs);  Assignment. ;  ; bool operator== (const char *rhs) const;  Comparison. ;  ; bool operator== (const TCut &rhs) cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCut.html:487,log,logical,487,doc/master/classTCut.html,https://root.cern,https://root.cern/doc/master/classTCut.html,1,['log'],['logical']
Testability,". ROOT: TDSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TDSet Class ReferencePROOF » PROOF kernel Libraries. ; This class implements a data set to be used for PROOF processing. ; The TDSet defines the class of which objects will be processed, the directory in the file where the objects of that type can be found and the list of files to be processed. The files can be specified as logical file names (LFN's) or as physical file names (PFN's). In case of LFN's the resolution to PFN's will be done according to the currently active GRID interface. Examples: TDSet treeset(""TTree"", ""AOD""); treeset.Add(""lfn:/alien.cern.ch/alice/prod2002/file1""); ... treeset.AddFriend(friendset);; or; TDSet objset(""MyEvent"", ""*"", ""/events""); objset.Add(""root://cms.cern.ch/user/prod2002/hprod_1.root""); ... objset.Add(set2003);; Validity of file names will only be checked at processing time (typically on the PROOF master server), not at creation time. ; Definition at line 153 of file TDSet.h. Public Types; enum  EStatusBits { ;   kWriteV3 = (1ULL << ( 16 )); , kEmpty = (1ULL << ( 17 )); , kValidityChecked = (1ULL << ( 18 )); , kSomeInvalid = (1ULL << ( 19 )); , ;   kMultiDSet = (1ULL << ( 20 )); , kIsLocal = (1ULL << ( 21 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDSet.html:634,log,logical,634,doc/master/classTDSet.html,https://root.cern,https://root.cern/doc/master/classTDSet.html,1,['log'],['logical']
Testability,". ROOT: TEveCaloViz Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveCaloViz Class ReferenceabstractGraphics » 3D Graphics » Event Display. ; Base class for calorimeter data visualization. ; See TEveCalo2D and TEveCalo3D for concrete implementations. ; Definition at line 27 of file TEveCalo.h. Public Member Functions;  TEveCaloViz (TEveCaloData *data=nullptr, const char *n=""TEveCaloViz"", const char *t="""");  ;  ~TEveCaloViz () override;  Destructor. ;  ; Bool_t AssertCellIdCache () const;  Assert cell id cache is ok. ;  ; TEveRGBAPalette * AssertPalette ();  Make sure the TEveRGBAPalette pointer is not null. ;  ; Bool_t CellInEtaPhiRng (TEveCaloData::CellData_t &) const;  Returns true if given cell is in the ceta phi range. ;  ; virtual void CellSelectionChanged ();  ; void DataChanged ();  Update setting and cache on data changed. ;  ; TEveElement * ForwardEdit () override;  Management of selection state and ownership of selected cell list is done in TEveCaloData. ;  ; TEveElement * ForwardSelection () override;  Management of selection state and ownership of selected cell list is done in TEveCaloData. ;  ; Bool_t GetAutoRange () const;  ; Float_t GetBackwardEndCapPos () const;  ; Float_t GetBarrelRadius () const;  ; TEveCaloData * GetData () const;  ; Color_t GetDataSliceColor (Int_t slice) const;  Get slice color from data. ;  ; Float_t GetDataSliceThreshold (Int_t slice) const;  Get threshold for given slice. ;  ; Float_t GetEndCapPos () const;  ; Float_t GetEta () const;  ; Float_t GetEtaMax () const;  ; Float_t GetEtaMin () const;  ; Float_t GetEtaRng () const;  ; Float_t GetForwardEndCapPos () const;  ; Float_t GetMaxTowerH () const;  ; Float_t GetMaxVal () const;  ; Float_t GetMaxValAbs () const;  ; TEveRGBAPalet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCaloViz.html:717,Assert,AssertCellIdCache,717,doc/master/classTEveCaloViz.html,https://root.cern,https://root.cern/doc/master/classTEveCaloViz.html,3,['Assert'],"['Assert', 'AssertCellIdCache', 'AssertPalette']"
Testability,". ROOT: TExec Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TExec Class ReferenceCore ROOT classes » Base ROOT classes. ; TExec is a utility class that can be used to execute a C++ command when some event happens in a pad. ; The command in turn can invoke a C++ macro to paint graphics objects at positions depending on the histogram or graph contents. Case 1:; The TExec object is in the list of pad primitives (after exec.Draw()). When the pad is drawn, the TExec::Paint function is called. This function will execute the specified command. The following example uses the services of the class Aclock created in $ROOTSYS/test/Aclock.cxx. This examples uses a TTimer to redraw a pad at regular intervals (clock). When the clock is updated, a string with the current date&time is drawn. {; gSystem->Load(""$ROOTSYS/test/Aclock"");; Aclock ck(400);; gPad->SetFillColor(5);; TDatime dt;; TText t(.5,.3,""t"");; t.SetTextAlign(22);; t.SetTextSize(.07);; t.SetTextColor(4);; t.Draw();; TExec ex(""ex"",""dt.Set();t.SetTitle(dt.AsString())"");; ex.Draw();; }; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; gPad#define gPadDefinition TVirtualPad.h:308; TDatimeThis class stores the date and time with a precision of one second in an unsigned 32 bit word (950130...Definition TDatime.h:37; TExecTExec is a utility class that can be used to execute a C++ command when some event happens in a pad.Definition TExec.h:26; TSystem::Loadvirtual int Load(const char *module, const char *entry="""", Bool_t system=kFALSE)Load a shared library.Definition TSystem.cxx:1857; TTextBase class for several text objects.Definition TText.h:22; exDouble_t ex[n]Definition legend1.C:17. Case 2:; The TExec object may be added to the list of functions of a TH1 or TGraph object via hist->GetListOfFunctions()->Add(exec). When the histogram (or graph) is drawn, the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTExec.html:781,test,test,781,doc/master/classTExec.html,https://root.cern,https://root.cern/doc/master/classTExec.html,2,['test'],['test']
Testability,". ROOT: TFFTComplexReal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTComplexReal Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented.; Computes the inverse of the real-to-complex transforms (class TFFTRealComplex) taking complex input (storing the non-redundant half of a logically Hermitian array) to real output (see FFTW manual for more details); How to use it:; Create an instance of TFFTComplexReal - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings; Set the data (via SetPoints(), SetPoint() or SetPointComplex() functions); Run the Transform() function; Get the output (via GetPoints(), GetPoint() or GetPointReal() functions); Repeat steps 3)-5) as needed. For a transform of the same size, but with different flags, rerun the Init() function and continue with steps 3)-5); NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled by the transform size; In Complex to Real transform the input array is destroyed. It cannot then be retrieved when using the Get's methods. . Definition at line 21 of file TFFTComplexReal.h. Public Member Functions;  TFFTComplexReal ();  default ;  ;  TFFTComplexReal (Int_t n, Bool_t inPlace);  For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ;  ;  TFFTComplexReal (Int_t ndim, Int_t *n, Bool_t inPlace);  For ndim-dimensional transforms Second argument contains sizes of the transform in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFFTComplexReal.html:607,log,logically,607,doc/master/classTFFTComplexReal.html,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html,1,['log'],['logically']
Testability,". ROOT: TFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Static Private Member Functions |; Friends |; List of all members ; TFile Class ReferenceInput/Output Library. ; A ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-like logical structure, possibly including subdirectory hierarchies. ; See alsoInput/Output Library . ROOT files layout (or io/doc/TFile folder in your codebase). ROOT file data format specification. A ROOT file is composed of a header, followed by consecutive data records (TKey instances) with a well defined format.; The first data record starts at byte fBEGIN (currently set to kBEGIN). Bytes 1->kBEGIN contain the file description, when fVersion >= 1000000 it is a large file (> 2 GB) and the offsets will be 8 bytes long and fUnits will be set to 8:. Byte Range Record Name Description . 1->4 ""root"" Root file identifier . 5->8 fVersion File format version . 9->12 fBEGIN Pointer to first data record . 13->16 [13->20] fEND Pointer to first free word at the EOF . 17->20 [21->28] fSeekFree Pointer to FREE data record . 21->24 [29->32] fNbytesFree Number of bytes in FREE data record . 25->28 [33->36] nfree Number of free data records . 29->32 [37->40] fNbytesName Number of bytes in TNamed at creation time . 33->33 [41->41] fUnits Number of bytes for file pointers . 34->37 [42->45] fCompress Compression level and algorithm . 38->41 [46->53] fSeekInfo Pointer to TStreamerInfo record . 42->45 [54->57] fNbytesInfo Number of bytes in TStreamerInfo record . 46->63 [58->75] fUUID Universal Unique ID . For the purpose of magic bytes in the context of ROOT files' MIME definition, the following additional requirements are introduced:; The value ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFile.html:553,log,logical,553,doc/master/classTFile.html,https://root.cern,https://root.cern/doc/master/classTFile.html,1,['log'],['logical']
Testability,". ROOT: TFile Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Static Private Member Functions |; Friends |; List of all members ; TFile Class ReferenceInput/Output Library. ; A ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-like logical structure, possibly including subdirectory hierarchies. ; See alsoInput/Output Library . ROOT files layout (or io/doc/TFile folder in your codebase). ROOT file data format specification. A ROOT file is composed of a header, followed by consecutive data records (TKey instances) with a well defined format.; The first data record starts at byte fBEGIN (currently set to kBEGIN). Bytes 1->kBEGIN contain the file description, when fVersion >= 1000000 it is a large file (> 2 GB) and the offsets will be 8 bytes long and fUnits will be set to 8:. Byte Range Record Name Description . 1->4 ""root"" Root file identifier . 5->8 fVersion File format version . 9->12 fBEGIN Pointer to first data record . 13->16 [13->20] fEND Pointer to first free word at the EOF . 17->20 [21->28] fSeekFree Pointer to FREE data record . 21->24 [29->32] fNbytesFree Number of bytes in FREE data record . 25->28 [33->36] nfree Number of free data records . 29->32 [37->40] fNbytesName Number of bytes in TNamed at creation time . 33->33 [41->41] fUnits Number of bytes for file pointers . 34->37 [42->45] fCompress Compression level and algorithm . 38->41 [46->53] fSeekInfo Pointer to TStreamerInfo record . 42->45 [54->57] fNbytesInfo Number of bytes in TStreamerInfo record . 46->63 [58->75] fUUID Universal Unique ID . For the purpose of magic bytes in the context of ROOT files' MIME definition, the following additional requirements are introduced:; The value o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:552,log,logical,552,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,1,['log'],['logical']
Testability,". ROOT: TGGroupFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TGGroupFrame Class ReferenceGUI » Low level GUI widgets. ; A composite frame with a border and a title. ; It is typically used to group a number of logically related widgets visually together. ; Definition at line 522 of file TGFrame.h. Public Types; enum  ETitlePos { kLeft = -1; , kCenter = 0; , kRight = 1; };  ;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGGroupFrame (const TGWindow *p, TGString *title, UInt_t options=kVerticalFrame, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), Pix",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGGroupFrame.html:502,log,logically,502,doc/master/classTGGroupFrame.html,https://root.cern,https://root.cern/doc/master/classTGGroupFrame.html,1,['log'],['logically']
Testability,". ROOT: TGLCamera Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TGLCamera Class ReferenceabstractGraphics » 3D Graphics » OpenGL rendering. ; Abstract base camera class - concrete classes for orthographic and perspective cameras derive from it. ; This class maintains values for the current:; Viewport; Projection, modelview and clip matrices - extracted from GL; The 6 frustum planes; Expanded frustum interest box. It provides methods for various projection, overlap and intersection tests for viewport and world locations, against the true frustum and expanded interest box, and for extracting eye position and direction.; It also defines the pure virtual manipulation interface methods the concrete ortho and perspective classes must implement. ; Definition at line 43 of file TGLCamera.h. Public Types; enum  EFrustumPlane { ;   kNear = 0; , kLeft = 1; , kRight = 2; , kTop = 3; , ;   kBottom = 4; , kFar = 5; , kPlanesPerFrustum = 6. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGLCamera ();  Default base camera constructor. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLCamera.html:824,test,tests,824,doc/master/classTGLCamera.html,https://root.cern,https://root.cern/doc/master/classTGLCamera.html,1,['test'],['tests']
Testability,". ROOT: TGLHistPainter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGLHistPainter Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; The histogram painter class using OpenGL. ; Histograms are, by default, drawn via the THistPainter class. TGLHistPainter allows to paint them using the OpenGL 3D graphics library. The plotting options provided by TGLHistPainter start with GL keyword. General information: plot types and supported options; The following types of plots are provided:; Lego - (TGLLegoPainter); The supported options are:. ""GLLEGO"" : Draw a lego plot.; ""GLLEGO2"" : Bins with color levels.; ""GLLEGO3"" : Cylindrical bars. Lego painter in cartesian supports logarithmic scales for X, Y, Z. In polar only Z axis can be logarithmic, in cylindrical only Y (if you see what it means).; Surfaces (TF2 and TH2 with ""GLSURF"" options) - (TGLSurfacePainter); The supported options are:. ""GLSURF"" : Draw a surface.; ""GLSURF1"" : Surface with color levels; ""GLSURF2"" : The same as ""GLSURF1"" but without polygon outlines.; ""GLSURF3"" : Color level projection on top of plot (works only in cartesian coordinate system).; ""GLSURF4"" : Same as ""GLSURF"" but without polygon outlines. The surface painting in cartesian coordinates supports logarithmic scales along X, Y, Z axis. In polar coordinates only the Z axis can be logarithmic, in cylindrical coordinates only the Y axis.; Additional options to SURF and LEGO - Coordinate systems:; The supported options are:. "" "" : Default, cartesian coordinates system.; ""POL"" : Polar coordinates system.; ""CYL"" : Cylindrical coordinates system.; ""SPH"" : Spherical coordinates system. TH3 as boxes (spheres) - (TGLBoxPainter); The supported options are:. ""GLBOX"" : TH3 as a set of boxes, size of box is proportional to bin content.; ""GLBO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLHistPainter.html:898,log,logarithmic,898,doc/master/classTGLHistPainter.html,https://root.cern,https://root.cern/doc/master/classTGLHistPainter.html,2,['log'],['logarithmic']
Testability,". ROOT: TGLScenePad Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGLScenePad Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; Implements VirtualViewer3D interface and fills the base-class visualization structures from pad contents. ; Definition at line 26 of file TGLScenePad.h. Public Member Functions;  TGLScenePad (TVirtualPad *pad);  cache logicals during scene rebuilds ;  ;  ~TGLScenePad () override;  ; void AddCompositeOp (UInt_t operation) override;  Add composite operation used to combine objects added via AddObject TVirtualViewer3D interface overload - see base/src/TVirtualViewer3D.cxx for description of viewer architecture. ;  ; void AddHistoPhysical (TGLLogicalShape *log, const Float_t *histColor=nullptr);  Scale and rotate a histo object to mimic placement in canvas. ;  ; Int_t AddObject (const TBuffer3D &buffer, Bool_t *addChildren=nullptr) override;  Add an object to the viewer, using internal physical IDs TVirtualViewer3D interface overload - see base/src/TVirtualViewer3D.cxx for description of viewer architecture. ;  ; Int_t AddObject (UInt_t physicalID, const TBuffer3D &buffer, Bool_t *addChildren=nullptr) override;  Add an object to the scene, using an external physical ID TVirtualViewer3D interface overload - see base/src/TVirtualViewer3D.cxx for description of viewer architecture. ;  ; void BeginScene () override;  Start building of the scene. ;  ; Bool_t BuildingScene () const override;  ; Bool_t CanLoopOnPrimitives () const override;  ; void CloseComposite () override;  Close composite container TVirtualViewer3D interface overload - see base/src/TVirtualViewer3D.cxx for description of viewer architecture. ;  ; Int_t DistancetoPrimitive (Int_t, Int_t) override;  Computes distance fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLScenePad.html:615,log,logicals,615,doc/master/classTGLScenePad.html,https://root.cern,https://root.cern/doc/master/classTGLScenePad.html,2,['log'],"['log', 'logicals']"
Testability,". ROOT: TGRadioButton Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TGRadioButton Class ReferenceGUI » Low level GUI widgets. ; Selects different options. ; Like text buttons, they have text or hot string as a label.; Radio buttons are grouped usually in logical sets of two or more buttons to present mutually exclusive choices.; Selecting a radio button will generate the event:; kC_COMMAND, kCM_RADIOBUTTON, button id, user data. If a command string has been specified (via SetCommand()) then this command string will be executed via the interpreter whenever a button is selected. A command string can contain the macros:. $MSG – kC_COMMAND, kCMRADIOBUTTON packed message (use GET_MSG() and GET_SUBMSG() to unpack); $PARM1 – button id; $PARM2 – user data pointer. Before executing these macros are expanded into the respective Long_t's ; Definition at line 321 of file TGButton.h. Public Member Functions;  TGRadioButton (const TGWindow *p, const char *s, const char *cmd, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=0);  Create a radio button widget. ;  ;  TGRadioButton (const TGWindow *p, TGHotString *s, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=0);  Create a radio button widget. ;  ;  TGRadioButton (const TGWindow *p=nullptr, const char *s=nullptr, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=0);  Create a radio button widget. ;  ;  ~TGRadioButton () override;  Delete a radio button. ;  ; TGDimension GetDefaultSize () const override;  default size ;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button event. ;  ; Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGRadioButton.html:526,log,logical,526,doc/master/classTGRadioButton.html,https://root.cern,https://root.cern/doc/master/classTGRadioButton.html,1,['log'],['logical']
Testability,". ROOT: TGaxis Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGaxis Class ReferenceGraphics » 2D Graphics » Basic graphics. ; The axis painter class. ; Instances of this class are generated by the histograms and graphs painting classes when TAxis are drawn. TGaxis is the ""painter class"" of TAxis. Therefore it is mainly used via TAxis, even if is some occasion it can be used directly to draw an axis which is not part of a graph or an instance. For instance to draw an extra scale on a plot. Basic definition; Definition with a function; Logarithmic axis; Blank axis; Arrow on axis; Tick marks' orientation; Tick marks' size; Labels' positioning; Labels' orientation; Labels' position on tick marks; Labels' format; Alphanumeric labels; Changing axis labels; Number of divisions optimisation; Maximum Number of Digits for the axis labels; Optional grid; Time axis. Basic definition; A TGaxis is defined the following way: TGaxis::TGaxis(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax,; Double_t wmin, Double_t wmax, Int_t ndiv, Option_t *chopt,; Double_t gridlength); Option_tconst char Option_tDefinition RtypesCore.h:66; wminOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t wminDefinition TGWin32VirtualXProxy.cxx:162; wmaxOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t wmaxDefinition TGWin32VirtualXProxy.cxx:162; xminfloat xminDefinition THbookFile.cxx:95; yminfloat yminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; ymaxfloat ymaxDefinition THbookFile.cxx:95; TGaxis::TGaxis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGaxis.html:752,Log,Logarithmic,752,doc/master/classTGaxis.html,https://root.cern,https://root.cern/doc/master/classTGaxis.html,1,['Log'],['Logarithmic']
Testability,". ROOT: TGeoChecker Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGeoChecker Class ReferenceThe Geometry Package » Geometry painter. ; Geometry checking package. ; TGeoChecker class provides several geometry checking methods. There are two types of tests that can be performed. One is based on random sampling or ray-tracing and provides a visual check on how navigation methods work for a given geometry. The second actually checks the validity of the geometry definition in terms of overlapping/extruding objects. Both types of checks can be done for a given branch (starting with a given volume) as well as for the geometry as a whole.; TGeoChecker::CheckPoint(Double_t x, Double_t y, Double_t z); This method can be called directly from the TGeoManager class and print a report on how a given point is classified by the modeller: which is the full path to the deepest node containing it, and the (under)estimation of the distance to the closest boundary (safety).; TGeoChecker::RandomPoints(Int_t npoints); Can be called from TGeoVolume class. It first draws the volume and its content with the current visualization settings. Then randomly samples points in its bounding box, plotting in the geometry display only the points classified as belonging to visible volumes.; TGeoChecker::RandomRays(Int_t nrays, Double_t startx, starty, startz); Can be called and acts in the same way as the previous, but instead of points, rays having random isotropic directions are generated from the given point. A raytracing algorithm propagates all rays until they exit geometry, plotting all segments crossing visible nodes in the same color as these.; TGeoChecker::Test(Int_t npoints); Implementation of TGeoManager::Test(). Computes the time for the modeller to find out ""Where am I?"" for a given nu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoChecker.html:458,test,tests,458,doc/master/classTGeoChecker.html,https://root.cern,https://root.cern/doc/master/classTGeoChecker.html,1,['test'],['tests']
Testability,". ROOT: TGeoExtension Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; TGeoExtension Class ReferenceabstractThe Geometry Package » Geometry classes. ; ABC for user objects attached to TGeoVolume or TGeoNode. ; Provides interface for getting a reference (grab) and releasing the extension object (release), allowing for derived classes to implement reference counted sharing. The user who should attach extensions to logical volumes or nodes BEFORE applying misalignment information so that these will be available to all copies. ; Definition at line 17 of file TGeoExtension.h. Public Member Functions; virtual TGeoExtension * Grab ()=0;  ; TClass * IsA () const override;  ; virtual void Release () const =0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoExtension.html:601,log,logical,601,doc/master/classTGeoExtension.html,https://root.cern,https://root.cern/doc/master/classTGeoExtension.html,1,['log'],['logical']
Testability,". ROOT: TGeoPolygon Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGeoPolygon Class ReferenceThe Geometry Package » Shapes. ; An arbitrary polygon defined by vertices. ; The vertices have to be defined CLOCKWISE in the XY plane, making either a convex or concave polygon. No test for malformed polygons is performed.; A polygon is a 2D shape defined by vertices in the XY plane. It is used by TGeoXtru class for computing Contains() and Safety(). Only the pointers to the actual lists of XY values are used - these are not owned by the class.; To check if a point in XY plane is contained by a polygon, this is split into an outscribed convex polygon and the remaining polygons of its subtraction from the outscribed one. A point is INSIDE if it is contained by the outscribed polygon but NOT by the remaining ones. Since these can also be arbitrary polygons at their turn, a tree structure is formed:; P = Pconvex - (Pconvex-P) where (-) means 'subtraction'; Pconvex-P = P1 + P2 + ... where (+) means 'union'; Note that P1, P2, ... do not intersect each other and they are defined by subsets of the list of vertices of P. They can be split in the same way as P*; Therefore, if C(P) represents the Boolean : 'does P contains a given point?', then:; C(P) = C(Pconvex) .and. not(C(P1) | C(P2) | ...); For creating a polygon without TGeoXtru class, one has to call the constructor TGeoPolygon(nvert) and then SetXY(Double_t *x, Double_t *y) providing the arrays of X and Y vertex positions (defined clockwise) that have to 'live' longer than the polygon they will describe. This complication is due to efficiency reasons. At the end one has to call the FinishPolygon() method. ; Definition at line 19 of file TGeoPolygon.h. Public Types; enum  { kGeoConvex = (1ULL << ( 9 )); , ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPolygon.html:501,test,test,501,doc/master/classTGeoPolygon.html,https://root.cern,https://root.cern/doc/master/classTGeoPolygon.html,1,['test'],['test']
Testability,". ROOT: TGeoRegion Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGeoRegion Class ReferenceThe Geometry Package » Geometry classes. ; Regions are groups of volumes having a common set of user tracking cuts. ; Class wrapper for regions used by Monte Carlo packages A region is composed by a list of logical volumes and defines a set of cuts. Used mainly to transport region information stored in GDML format to the clients requiring it from the transient geometry. ; Definition at line 36 of file TGeoRegion.h. Public Member Functions;  TGeoRegion ();  ;  TGeoRegion (const char *name, const char *title="""");  ;  TGeoRegion (const TGeoRegion &other);  Region copy constructor. ;  ;  ~TGeoRegion () override;  Region destructor. ;  ; void AddCut (const char *name, Double_t cut);  Add cut to the region. ;  ; void AddCut (const TGeoRegionCut &regioncut);  Add an identical cut to the region. ;  ; bool AddVolume (const char *name);  Add an existing volume to the region. ;  ; void AddVolume (TGeoVolume *vol);  ; TGeoRegionCut * GetCut (int i) const;  ; int GetNcuts () const;  ; int GetNvolumes () const;  ; TGeoVolume * GetVolume (int i) const;  ; TClass * IsA () const override;  ; TGeoRegion & operator= (const TGeoRegion &other);  Assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print region info. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoRegion.html:480,log,logical,480,doc/master/classTGeoRegion.html,https://root.cern,https://root.cern/doc/master/classTGeoRegion.html,1,['log'],['logical']
Testability,". ROOT: TGeoVGShape Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; TGeoVGShape Class ReferenceThe Geometry Package » Geometry classes. ; Bridge class for using a VecGeom solid as TGeoShape. ; Definition at line 30 of file TGeoVGShape.h. Public Member Functions;  TGeoVGShape ();  ;  ~TGeoVGShape () override;  Destructor. ;  ; Double_t Capacity () const override;  Returns analytic capacity of the solid. ;  ; void ComputeBBox () override;  Compute bounding box. ;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  Normal computation. ;  ; Bool_t Contains (const Double_t *point) const override;  Test if point is inside this shape. ;  ; Bool_t CouldBeCrossed (const Double_t *point, const Double_t *dir) const override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; TGeoVolume * Divide (TGeoVolume *, const char *, Int_t, Int_t, Double_t, Double_t) override;  ; void Draw (Option_t *option="""") override;  Draw this shape. ;  ; const char * GetAxisName (Int_t iaxis) const override;  ; Double_t GetAxisRange (Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;  ; void GetBoundingCylinder (Double_t *param) const override;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections, Bool_t localFrame) const override;  Stub implementation to avoid forcing implementation at this stage. ;  ; Int_t GetByteCount () const overrid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVGShape.html:883,Test,Test,883,doc/master/classTGeoVGShape.html,https://root.cern,https://root.cern/doc/master/classTGeoVGShape.html,1,['Test'],['Test']
Testability,". ROOT: TGraphPainter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TGraphPainter Class ReferenceHistogram Library » Painting classes » Histograms and graphs painting classes. ; The graph painter class. ; Implements all graphs' drawing's options. Introduction; Graphs' plotting options; Exclusion graphs; Graphs with error bars; TGraphErrors; TGraphAsymmErrors; TGraphBentErrors; TGraphMultiErrors. TGraphPolar options; Colors automatically picked in palette; Reverse graphs' axis; Graphs in logarithmic scale; Highlight mode for graph. Introduction; Graphs are drawn via the painter TGraphPainter class. This class implements techniques needed to display the various kind of graphs i.e.: TGraph, TGraphErrors, TGraphBentErrors and TGraphAsymmErrors.; To draw a graph graph it's enough to do: graph->Draw(""AL"");; The option AL in the Draw() method means:. The axis should be drawn (option A),; The graph should be drawn as a simple line (option L).; By default a graph is drawn in the current pad in the current coordinate system. To define a suitable coordinate system and draw the axis the option A must be specified. TGraphPainter offers many options to paint the various kind of graphs.; It is separated from the graph classes so that one can have graphs without the graphics overhead, for example in a batch program.; When a displayed graph is modified, there is no need to call Draw() again; the image will be refreshed the next time the pad will be updated. A pad is updated after one of these three actions:. a carriage return on the ROOT command line,; a click inside the pad,; a call to TPad::Update. Graphs' plotting options; Graphs can be drawn with the following options:. Option Description . ""A"" Produce a new plot with Axis around the graph . ""I"" Combine with option 'A' i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPainter.html:705,log,logarithmic,705,doc/master/classTGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html,1,['log'],['logarithmic']
Testability,". ROOT: THtml Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; List of all members ; THtml Class Reference. ; Legacy ROOT documentation system. ; Deprecated:We keep THtml for those who still need it for legacy use cases. ROOT has since several years moved to doxygen as documentation generator. THtml is not developed nor supported anymore; please migrate to doxygen instead.; The THtml class is designed to easily document classes, code, and code related text files (like change logs). It generates HTML pages conforming to the XHTML 1.0 transitional specifications; an example of these pages is ROOT's own reference guide. This page was verified to be valid XHTML 1.0 transitional, which proves that all pages generated by THtml can be valid, as long as the user provided XHTML (documentation, header, etc) is valid. You can check the current THtml by clicking this icon: ; Overview: . Usage . Configuration . Input files . Output directory . Linking other documentation . Recognizing class documentation . Author, copyright, etc. . Header and footer . Links to searches, home page, ViewVC . HTML Charset . Documentation syntax . Class description . Class index . Method documentation . Data member documentation . Documentation directives . BEGIN_HTML END_HTML: include 'raw' HTML . BEGIN_MACRO END_MACRO: include a picture generated by a macro . BEGIN_LATEX END_LATEX: include a latex picture . Product and module index . Auxiliary files: style sheet, JavaScript, help page . Class Charts . Configuration variables . Behind the scenes . I. Usage; These are typical things people do with THtml: ; root[] THtml html; // create a THtml object; root[] html.LoadAllLibs(); // Load all rootmap'ed libraries; root[] html.MakeAll(); // generate documenta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHtml.html:731,log,logs,731,doc/master/classTHtml.html,https://root.cern,https://root.cern/doc/master/classTHtml.html,1,['log'],['logs']
Testability,". ROOT: THtml Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; List of all members ; THtml Class Reference. ; Legacy ROOT documentation system. ; Deprecated:We keep THtml for those who still need it for legacy use cases. ROOT has since several years moved to doxygen as documentation generator. THtml is not developed nor supported anymore; please migrate to doxygen instead.; The THtml class is designed to easily document classes, code, and code related text files (like change logs). It generates HTML pages conforming to the XHTML 1.0 transitional specifications; an example of these pages is ROOT's own reference guide. This page was verified to be valid XHTML 1.0 transitional, which proves that all pages generated by THtml can be valid, as long as the user provided XHTML (documentation, header, etc) is valid. You can check the current THtml by clicking this icon: ; Overview: . Usage . Configuration . Input files . Output directory . Linking other documentation . Recognizing class documentation . Author, copyright, etc. . Header and footer . Links to searches, home page, ViewVC . HTML Charset . Documentation syntax . Class description . Class index . Method documentation . Data member documentation . Documentation directives . BEGIN_HTML END_HTML: include 'raw' HTML . BEGIN_MACRO END_MACRO: include a picture generated by a macro . BEGIN_LATEX END_LATEX: include a latex picture . Product and module index . Auxiliary files: style sheet, JavaScript, help page . Class Charts . Configuration variables . Behind the scenes . I. Usage; These are typical things people do with THtml: ; root[] THtml html; // create a THtml object; root[] html.LoadAllLibs(); // Load all rootmap'ed libraries; root[] html.MakeAll(); // generate documentat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTHtml.html:730,log,logs,730,doc/v632/classTHtml.html,https://root.cern,https://root.cern/doc/v632/classTHtml.html,1,['log'],['logs']
Testability,". ROOT: TImageDump Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TImageDump Class ReferenceGraphics » 2D Graphics » Graphics file output. ; Save canvas as an image (GIF, JPEG, PNG, XPM, TIFF etc.). ; Example: $ root -b; root [0] .x hsimple.C; root [1] c1->Print(""c1.gif"");; b#define b(i)Definition RSha256.hxx:100; c1return c1Definition legend1.C:41; hsimpleDefinition hsimple.py:1; TImageDump can be used in any mode (batch, interactive) as follows TCanvas *c1;; TImageDump *imgdump = new TImageDump(""test.png"");; c1->Paint();; imgdump->Close();; TCanvasThe Canvas class.Definition TCanvas.h:23; TImageDumpSave canvas as an image (GIF, JPEG, PNG, XPM, TIFF etc.).Definition TImageDump.h:22; TImageDump::TImageDumpTImageDump()Default constructor.Definition TImageDump.cxx:53; TImageDump::Closevoid Close(Option_t *opt="""") overrideClose a image file.Definition TImageDump.cxx:106. Definition at line 22 of file TImageDump.h. Public Member Functions;  TImageDump ();  Default constructor. ;  ;  TImageDump (const char *filename, Int_t type=-111);  Initialize batch image interface. ;  ;  ~TImageDump () override;  destructor ;  ; void CellArrayBegin (Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2) override;  cell array begin ;  ; void CellArrayEnd () override;  Cell array end. ;  ; void CellArrayFill (Int_t r, Int_t g, Int_t b) override;  Cell array fill. ;  ; void Close (Option_t *opt="""") override;  Close a image file. ;  ; void DrawBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2) override;  Draw a Box. ;  ; void DrawFrame (Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light) override;  Draw a Frame around a box. ;  ; void DrawPolyMarker (Int_t n, Double_t *x, Double_t *y) override;  draw polymarker",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTImageDump.html:714,test,test,714,doc/master/classTImageDump.html,https://root.cern,https://root.cern/doc/master/classTImageDump.html,1,['test'],['test']
Testability,". ROOT: TMLPAnalyzer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TMLPAnalyzer Class Reference. ; This utility class contains a set of tests useful when developing a neural network. ; It allows you to check for unneeded variables, and to control the network structure. ; Definition at line 25 of file TMLPAnalyzer.h. Public Member Functions;  TMLPAnalyzer (TMultiLayerPerceptron &net);  ;  TMLPAnalyzer (TMultiLayerPerceptron *net);  ;  ~TMLPAnalyzer () override;  Destructor. ;  ; void CheckNetwork ();  Gives some information about the network in the terminal. ;  ; void DrawDInput (Int_t i);  Draws the distribution (on the test sample) of the impact on the network output of a small variation of the ith input. ;  ; void DrawDInputs ();  Draws the distribution (on the test sample) of the impact on the network output of a small variation of each input. ;  ; void DrawNetwork (Int_t neuron, const char *signal, const char *bg);  Draws the distribution of the neural network (using ith neuron). ;  ; TProfile * DrawTruthDeviation (Int_t outnode=0, Option_t *option="""");  Create a profile of the difference of the MLP output minus the true value for a given output node outnode, vs the true value for outnode, for all test data events. ;  ; TProfile * DrawTruthDeviationInOut (Int_t innode, Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value innode, for all test data events. ;  ; THStack * DrawTruthDeviationInsOut (Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value, stacked for all inputs, for all test data events. ;  ; THStack * DrawTruthDeviations (Option_t *option="""");  Create",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMLPAnalyzer.html:346,test,tests,346,doc/master/classTMLPAnalyzer.html,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html,3,['test'],"['test', 'tests']"
Testability,". ROOT: TMVA::CCTreeWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::CCTreeWrapper Class ReferenceTMVA. . Definition at line 38 of file CCTreeWrapper.h. Classes; class  CCTreeNode;  . Public Types; typedef std::vector< Event * > EventList;  . Public Member Functions;  CCTreeWrapper (DecisionTree *T, SeparationBase *qualityIndex);  constructor ;  ;  ~CCTreeWrapper ();  destructor ;  ; Double_t CheckEvent (const TMVA::Event &e, Bool_t useYesNoLeaf=false);  return the decision tree output for an event ;  ; CCTreeNode * GetRoot ();  ; void InitTree (CCTreeNode *t);  initialize the node t and all its descendants ;  ; void PruneNode (CCTreeNode *t);  remove the branch rooted at node t ;  ; Double_t TestTreeQuality (const DataSet *validationSample);  return the misclassification rate of a pruned tree for a validation event sample using the DataSet ;  ; Double_t TestTreeQuality (const EventList *validationSample);  return the misclassification rate of a pruned tree for a validation event sample using an EventList ;  . Private Attributes; DecisionTree * fDTParent;  ! pointer to underlying DecisionTree ;  ; SeparationBase * fQualityIndex;  ! pointer to the used quality index calculator ;  ; CCTreeNode * fRoot;  ! the root node of the (wrapped) decision Tree ;  . #include <TMVA/CCTreeWrapper.h>; Member Typedef Documentation. ◆ EventList. typedef std::vector<Event*> TMVA::CCTreeWrapper::EventList. Definition at line 42 of file CCTreeWrapper.h. Constructor & Destructor Documentation. ◆ CCTreeWrapper(). TMVA::CCTreeWrapper::CCTreeWrapper ; (; DecisionTree * ; T, . SeparationBase * ; qualityIndex . ). constructor ; Definition at line 104 of file CCTreeWrapper.cxx. ◆ ~CCTreeWrapper(). TMVA::CCTreeWrapper::~CCTreeWrapper ; (; ). destructor ; Definition at line 116 of file CCTreeWrapper.cxx. Member Funct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CCTreeWrapper.html:886,Test,TestTreeQuality,886,doc/master/classTMVA_1_1CCTreeWrapper.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CCTreeWrapper.html,2,['Test'],['TestTreeQuality']
Testability,". ROOT: TMVA::CrossEntropy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::CrossEntropy Class ReferenceTMVA. ; Implementation of the CrossEntropy as separation criterion. ; -p log (p) - (1-p)log(1-p); p=purity. Definition at line 43 of file CrossEntropy.h. Public Member Functions;  CrossEntropy ();  ;  CrossEntropy (const CrossEntropy &g);  ; virtual ~CrossEntropy ();  ; virtual Double_t GetSeparationIndex (const Double_t s, const Double_t b);  Cross Entropy defined as: ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::SeparationBase;  SeparationBase ();  Constructor. ;  ;  SeparationBase (const SeparationBase &s);  Copy constructor. ;  ; virtual ~SeparationBase ();  ; const TString & GetName ();  ; virtual Double_t GetSeparationGain (const Double_t nSelS, const Double_t nSelB, const Double_t nTotS, const Double_t nTotB);  Separation Gain: the measure of how the quality of separation of the sample increases by splitting the sample e.g. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::SeparationBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Additional Inherited Members;  Protected Attributes inherited from TMVA::SeparationBase; TString fName;  ; Double_t fPrecisionCut;  . #include <TMVA/CrossEntropy.h>. Inheritance diagram for TMVA::CrossEntropy:. This browser is not able to show SVG: try Firefox, Chrome, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CrossEntropy.html:338,log,log,338,doc/master/classTMVA_1_1CrossEntropy.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CrossEntropy.html,2,['log'],['log']
Testability,". ROOT: TMVA::CrossValidation Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::CrossValidation Class ReferenceTMVA. ; Class to perform cross validation, splitting the dataloader into folds. ; Use html for explicit line breaking; Markdown links? class reference?; ce->BookMethod(dataloader, options);; ce->Evaluate();; Cross-evaluation will generate a new training and a test set dynamically from from K folds. These K folds are generated by splitting the input training set. The input test set is currently ignored.; This means that when you specify your DataSet you should include all events in your training set. One way of doing this would be the following:; dataloader->AddTree( signalTree, ""cls1"" );; dataloader->AddTree( background, ""cls2"" );; dataloader->PrepareTrainingAndTestTree( """", """", ""nTest_cls1=1:nTest_cls2=1"" );. Split Expression; See CVSplit documentation? ; Definition at line 124 of file CrossValidation.h. Public Member Functions;  CrossValidation (TString jobName, TMVA::DataLoader *dataloader, TFile *outputFile, TString options);  ;  CrossValidation (TString jobName, TMVA::DataLoader *dataloader, TString options);  ;  ~CrossValidation ();  ; void Evaluate ();  Does training, test set evaluation and performance evaluation of using cross-evalution. ;  ; Factory & GetFactory ();  ; UInt_t GetNumFolds ();  ; const std::vector< CrossValidationResult > & GetResults () const;  ; TString GetSplitExpr ();  ; void InitOptions ();  ; virtual TClass * IsA () const;  ; void ParseOptions ();  Method to parse the internal option string. ;  ; void SetNumFolds (UInt_t i);  ; void SetSplitExpr (TString splitExpr);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CrossValidation.html:581,test,test,581,doc/master/classTMVA_1_1CrossValidation.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CrossValidation.html,2,['test'],['test']
Testability,". ROOT: TMVA::CvSplit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TMVA::CvSplit Class Referenceabstract. . Definition at line 37 of file CvSplit.h. Public Member Functions;  CvSplit (UInt_t numFolds);  ; virtual ~CvSplit ();  ; UInt_t GetNumFolds ();  ; virtual TClass * IsA () const;  ; virtual void MakeKFoldDataSet (DataSetInfo &dsi)=0;  ; Bool_t NeedsRebuild ();  ; virtual void PrepareFoldDataSet (DataSetInfo &dsi, UInt_t foldNumber, Types::ETreeType tt);  Set training and test set vectors of dataset described by dsi. ;  ; virtual void RecombineKFoldDataSet (DataSetInfo &dsi, Types::ETreeType tt=Types::kTraining);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOption",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CvSplit.html:664,test,test,664,doc/master/classTMVA_1_1CvSplit.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CvSplit.html,1,['test'],['test']
Testability,". ROOT: TMVA::CvSplitKFolds Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::CvSplitKFolds Class Reference. . Definition at line 92 of file CvSplit.h. Public Member Functions;  CvSplitKFolds (UInt_t numFolds, TString splitExpr="""", Bool_t stratified=kTRUE, UInt_t seed=100);  Splits a dataset into k folds, ready for use in cross validation. ;  ;  ~CvSplitKFolds () override;  ; TClass * IsA () const override;  ; void MakeKFoldDataSet (DataSetInfo &dsi) override;  Prepares a DataSet for cross validation. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::CvSplit;  CvSplit (UInt_t numFolds);  ; virtual ~CvSplit ();  ; UInt_t GetNumFolds ();  ; Bool_t NeedsRebuild ();  ; virtual void PrepareFoldDataSet (DataSetInfo &dsi, UInt_t foldNumber, Types::ETreeType tt);  Set training and test set vectors of dataset described by dsi. ;  ; virtual void RecombineKFoldDataSet (DataSetInfo &dsi, Types::ETreeType tt=Types::kTraining);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TStri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CvSplitKFolds.html:1137,test,test,1137,doc/master/classTMVA_1_1CvSplitKFolds.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CvSplitKFolds.html,1,['test'],['test']
Testability,. ROOT: TMVA::DNN::TCudaDeviceReference< AFloat > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TCudaDeviceReference< AFloat > Class Template Reference. ; template<typename AFloat>; class TMVA::DNN::TCudaDeviceReference< AFloat >TCudaDeviceReference. ; Helper class emulating lvalue references for AFloat values that are physically on the device. Allows for example to assign to matrix elements. Note that device access through CudaDeviceReferences enforces synchronization with all streams and thus qualifies as performance killer. Only used for testing. ; Definition at line 58 of file CudaMatrix.h. Public Member Functions;  TCudaDeviceReference (AFloat *devicePointer);  ;  operator AFloat ();  ; void operator+= (AFloat value);  ; void operator-= (AFloat value);  ; void operator= (AFloat value);  ; void operator= (const TCudaDeviceReference &other);  . Private Attributes; AFloat * fDevicePointer;  . #include <TMVA/DNN/Architectures/Cuda/CudaMatrix.h>; Constructor & Destructor Documentation. ◆ TCudaDeviceReference(). template<typename AFloat > . TMVA::DNN::TCudaDeviceReference< AFloat >::TCudaDeviceReference ; (; AFloat * ; devicePointer). Definition at line 209 of file CudaMatrix.h. Member Function Documentation. ◆ operator AFloat(). template<typename AFloat > . TMVA::DNN::TCudaDeviceReference< AFloat >::operator AFloat. Definition at line 217 of file CudaMatrix.h. ◆ operator+=(). template<typename AFloat > . void TMVA::DNN::TCudaDeviceReference< AFloat >::operator+= ; (; AFloat ; value). Definition at line 244 of file CudaMatrix.h. ◆ operator-=(). template<typename AFloat > . void TMVA::DNN::TCudaDeviceReference< AFloat >::operator-= ; (; AFloat ; value). Definition at line 256 of file CudaMatrix.h. ◆ operator=() [1/2]. template<typename AFloat > . void TMVA::DNN::TCudaDeviceReference< AFloat >::operator= ; ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaDeviceReference.html:713,test,testing,713,doc/master/classTMVA_1_1DNN_1_1TCudaDeviceReference.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaDeviceReference.html,1,['test'],['testing']
Testability,". ROOT: TMVA::DNN::TDLGradientDescent< Architecture_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TDLGradientDescent< Architecture_t > Class Template Reference. ; template<typename Architecture_t>; class TMVA::DNN::TDLGradientDescent< Architecture_t >; Definition at line 65 of file DLMinimizers.h. Public Types; using DeepNet_t = TDeepNet< Architecture_t >;  ; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TDLGradientDescent ();  ;  TDLGradientDescent (Scalar_t learningRate, size_t convergenceSteps, size_t testInterval);  ; size_t GetConvergenceCount () const;  Getters. ;  ; size_t GetConvergenceSteps () const;  ; Scalar_t GetTestError () const;  ; size_t GetTestInterval () const;  ; Scalar_t GetTrainingError () const;  ; bool HasConverged ();  Increases the minimization step counter by the test error evaluation period and uses the current internal value of the test error to determine if the minimization has converged. ;  ; bool HasConverged (Scalar_t testError);  Increases the minimization step counter by the test error evaluation period and uses the provided test error value to determine if the minimization has converged. ;  ; void Reset ();  Reset minimizer object to default state. ;  ; void SetBatchSize (Scalar_t rate);  ; void SetConvergenceSteps (size_t steps);  Setters. ;  ; void SetLearningRate (Scalar_t rate);  ; void SetTestInterval (size_t interval);  ; void Step (DeepNet_t &deepNet, std::vector< Matrix_t > &input, const Matrix_t &output, const Matrix_t &weights);  Perform a single optimization step on a given batch. ;  ; void Step (DeepNet_t &master, std::vector< DeepNet_t > &nets, std::vector< TTensorBatch< Architecture_t > > &batches);  Perform multiple optimization steps simultaneous",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html:786,test,testInterval,786,doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,1,['test'],['testInterval']
Testability,". ROOT: TMVA::DNN::TGradientDescent< Architecture_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TGradientDescent< Architecture_t > Class Template Reference. ; template<typename Architecture_t>; class TMVA::DNN::TGradientDescent< Architecture_t >; Definition at line 55 of file Minimizers.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TGradientDescent ();  ;  TGradientDescent (Scalar_t learningRate, size_t convergenceSteps, size_t testInterval);  ; size_t GetConvergenceCount () const;  ; size_t GetConvergenceSteps () const;  ; Scalar_t GetTestError () const;  ; size_t GetTestInterval () const;  ; Scalar_t GetTrainingError () const;  ; bool HasConverged ();  Increases the minimization step counter by the test error evaluation period and uses the current internal value of the test error to determine if the minimization has converged. ;  ; bool HasConverged (Scalar_t testError);  Increases the minimization step counter by the test error evaluation period and uses the provided test error value to determine if the minimization has converged. ;  ; void Reset ();  Reset minimizer object to default state. ;  ; void SetBatchSize (Scalar_t rate);  ; void SetConvergenceSteps (size_t steps);  ; void SetLearningRate (Scalar_t rate);  ; void SetTestInterval (size_t interval);  ; template<typename Net_t > ; void Step (Net_t &master, std::vector< Net_t > &nets, std::vector< TBatch< Architecture_t > > &batches);  Perform multiple optimization steps simultaneously. ;  ; template<typename Net_t > ; void Step (Net_t &net, Matrix_t &input, const Matrix_t &output, const Matrix_t &weights);  Perform a single optimization step on a given batch. ;  ; template<typename Net_t > ; Scalar_t StepLoss (Net_t &net",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html:725,test,testInterval,725,doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,3,['test'],"['test', 'testInterval']"
Testability,". ROOT: TMVA::Experimental::Classification Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TMVA::Experimental::Classification Class Reference. . Definition at line 162 of file Classification.h. Public Member Functions;  Classification (DataLoader *loader, TFile *file, TString options);  Contructor to create a two class classifier. ;  ;  Classification (DataLoader *loader, TString options);  Contructor to create a two class classifier without output file. ;  ;  ~Classification ();  ; virtual void Evaluate ();  Method to perform Train/Test over all ml method booked. ;  ; MethodBase * GetMethod (TString methodname, TString methodtitle);  Return a TMVA::MethodBase object. ;  ; std::vector< ClassificationResult > & GetResults ();  Return the vector of TMVA::Experimental::ClassificationResult objects. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Test ();  Perform test evaluation in all booked methods. ;  ; virtual void TestMethod (TString methodname, TString methodtitle);  Lets perform test an specific ml method. ;  ; virtual void TestMethod (Types::EMVA method, TString methodtitle);  Lets perform test an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ; virtual void Train ();  Method to train all booked ml methods. ;  ; virtual void TrainMethod (TString methodname, TString methodtitle);  Lets train an specific ml method. ;  ; virtual void TrainMethod (Types::EMVA method, TString methodtitle);  Lets train an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:747,Test,Test,747,doc/master/classTMVA_1_1Experimental_1_1Classification.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html,1,['Test'],['Test']
Testability,". ROOT: TMVA::Factory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::Factory Class ReferenceTMVA. ; This is the main MVA steering class. ; It creates all MVA methods, and guides them through the training, testing and evaluation phases. ; Definition at line 80 of file Factory.h. Public Types; typedef std::vector< IMethod * > MVector;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  Factory (TString theJobName, TFile *theTargetFile, TString theOption="""");  Standard constructor. ;  ;  Factory (TString theJobName, TString theOption="""");  Constructor. ;  ; virtual ~Factory ();  Destructor. ;  ; MethodBase * BookMethod (DataLoader *, TMVA::Types::EMVA, TString, TString, TMVA::Types::EMVA, TString);  ; MethodBase * BookMethod (DataLoader *loader, TString theMethodName, TString methodTitle, TString theOption="""");  Book a classifier or regression method. ;  ; MethodBase * BookMethod (DataLoader *loader, Types::EMVA theMethod, TString methodTitle, TString theOption="""");  Books MVA method. ;  ; void DeleteAllMethods (void);  Delete methods. ;  ; void EvaluateAllMethods (void);  Iterates over all MVAs that have been ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Factory.html:466,test,testing,466,doc/master/classTMVA_1_1Factory.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html,1,['test'],['testing']
Testability,". ROOT: TMVA::IPruneTool Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Attributes |; List of all members ; TMVA::IPruneTool Class ReferenceabstractTMVA. ; IPruneTool - a helper interface class to prune a decision tree. ; Any tool which implements the interface should provide two modes for tree pruning:. automatically find the ""best"" prune strength by minimizing the error rate on a test sample if SetAutomatic() is called, or if automatic = kTRUE argument is set in CalculatePruningInfo() In this case, the PruningInfo object returned contains the error rate of the optimally pruned tree, the optimal prune strength, and the sequence of nodes to prune to obtain the optimal pruned tree from the original DecisionTree; a user-provided pruning strength parameter is used to prune the tree, in which case the returned PruningInfo object has QualityIndex = -1, PruneStrength = user prune strength, and PruneSequence is the list of nodes to prune . Definition at line 70 of file IPruneTool.h. Public Types; typedef std::vector< const Event * > EventSample;  . Public Member Functions;  IPruneTool ();  ; virtual ~IPruneTool ();  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE)=0;  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Protected Attributes; Double_t B;  ; Double_t fPruneStrength;  ! regularization parameter in pruning ;  ; Double_t S;  . #include <TMVA/IPruneTool.h>. Inheritance diagram for TMVA::IPruneTool:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ EventSample. typedef std::vector<const Event*> TMVA::IPruneTool::EventSample. Definition at line 74 of file IPruneTool.h. Constructor & Destructor Doc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1IPruneTool.html:512,test,test,512,doc/master/classTMVA_1_1IPruneTool.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1IPruneTool.html,1,['test'],['test']
Testability,". ROOT: TMVA::LDA Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::LDA Class ReferenceTMVA. . Definition at line 44 of file LDA.h. Public Member Functions;  LDA (Float_t tolerence=1.0e-5, Bool_t debug=false);  constructor ;  ;  ~LDA ();  destructor ;  ; Float_t GetLogLikelihood (const std::vector< Float_t > &x, Int_t k);  Log likelihood function with Gaussian approximation. ;  ; Float_t GetProb (const std::vector< Float_t > &x, Int_t k);  Signal probability with Gaussian approximation. ;  ; void Initialize (const LDAEvents &inputSignal, const LDAEvents &inputBackground);  Create LDA matrix using local events found by knn method. ;  . Private Member Functions; Float_t FSub (const std::vector< Float_t > &x, Int_t k);  Probability value using Gaussian approximation. ;  ; MsgLogger & Log () const;  . Private Attributes; Bool_t fDebug;  documentation! ;  ; std::map< Int_t, Float_t > fEventFraction;  documentation! ;  ; MsgLogger * fLogger;  ! message logging service ;  ; std::map< Int_t, std::vector< Float_t > > fMu;  documentation! ;  ; UInt_t fNumParams;  documentation! ;  ; TMatrixF * fSigma;  documentation! ;  ; TMatrixF * fSigmaInverse;  documentation! ;  ; Float_t fTolerence;  documentation! ;  . #include <TMVA/LDA.h>; Constructor & Destructor Documentation. ◆ LDA(). TMVA::LDA::LDA ; (; Float_t ; tolerence = 1.0e-5, . Bool_t ; debug = false . ). constructor ; Definition at line 45 of file LDA.cxx. ◆ ~LDA(). TMVA::LDA::~LDA ; (; ). destructor ; Definition at line 58 of file LDA.cxx. Member Function Documentation. ◆ FSub(). Float_t TMVA::LDA::FSub ; (; const std::vector< Float_t > & ; x, . Int_t ; k . ). private . Probability value using Gaussian approximation. ; Definition at line 209 of file LDA.cxx. ◆ GetLogLikelihood(). Float_t TMVA::LDA::GetLogLikelihood ; (; const std::vector< Float_t > &",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1LDA.html:501,Log,Log,501,doc/master/classTMVA_1_1LDA.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LDA.html,2,['Log'],['Log']
Testability,". ROOT: TMVA::LogInterval Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::LogInterval Class ReferenceTMVA. ; The TMVA::Interval Class. . LogInterval definition, continuous and discrete; LogInterval(min,max) : a continous interval [min,max]; LogInterval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers:; 1,10,100,1000; 1,2,4,8,16,32,64,128,512,1024; or alike .. Example:; LogInterval(1,10000,5); i=0 --> 1 note: StepSize(ibin=0) = not defined !!; i=1 --> 10 StepSize(ibin=1) = 9; i=2 --> 100 StepSize(ibin=2) = 99; i=3 --> 1000 StepSize(ibin=3) = 999; i=4 --> 10000 StepSize(ibin=4) = 9999; ; LogInterval(1,1000,11); i=0 --> 1; i=1 --> 1.99526; i=2 --> 3.98107; i=3 --> 7.94328; i=4 --> 15.8489; i=5 --> 31.6228; i=6 --> 63.0957; i=7 --> 125.893; i=8 --> 251.189; i=9 --> 501.187; i=10 --> 1000; ; LogInterval(1,1024,11); i=0 --> 1; i=1 --> 2; i=2 --> 4; i=3 --> 8; i=4 --> 16; i=5 --> 32; i=6 --> 64; i=7 --> 128; i=8 --> 256; i=9 --> 512; i=10 --> 1024; TMVA::LogIntervalThe TMVA::Interval Class.Definition LogInterval.h:83. Definition at line 83 of file LogInterval.h. Public Member Functions;  LogInterval (const LogInterval &other);  ;  LogInterval (Double_t min, Double_t max, Int_t nbins=0);  ; virtual ~LogInterval ();  destructor ;  ; virtual Double_t GetElement (Int_t position) const;  calculates the value of the ""number"" bin in a discrete interval. ;  ; virtual Double_t GetMax () const;  ; virtual Double_t GetMean () const;  ; virtual Double_t GetMin () const;  ; virtual Int_t GetNbins () const;  ; virtual Double_t GetRndm (TRandom3 &) const;  get uniformly distributed number within interval ;  ; virtual Double_t GetStepSize (Int_t iBin=0) const;  returns the step size between the numbers of a ""discrete LogInterval"" ;  ; virtual Double_t GetWidth () const;  ; virtual TClass * IsA () const;  ; MsgLogger ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1LogInterval.html:14,Log,LogInterval,14,doc/master/classTMVA_1_1LogInterval.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LogInterval.html,7,['Log'],['LogInterval']
Testability,". ROOT: TMVA::MethodBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::MethodBase Class ReferenceabstractTMVA. ; Virtual base Class for all MVA method. ; MethodBase hosts several specific evaluation methods.; The kind of MVA that provides optimal performance in an analysis strongly depends on the particular application. The evaluation factory provides a number of numerical benchmark results to directly assess the performance of the MVA training on the independent test sample. These are:. The signal efficiency at three representative background efficiencies (which is 1 − rejection).; The significance of an MVA estimator, defined by the difference between the MVA mean values for signal and background, divided by the quadratic sum of their root mean squares.; The separation of an MVA x, defined by the integral ; \[; \frac{1}{2} \int \frac{(S(x) - B(x))^2}{(S(x) + B(x))} dx; \]. where \( S(x) \) and \( B(x) \) are the signal and background distributions, respectively. The separation is zero for identical signal and background MVA shapes, and it is one for disjunctive shapes.; The average, \( \int x \mu (S(x)) dx \), of the signal \( \mu_{transform} \). The \( \mu_{transform} \) of an MVA denotes the transformation that yields a uniform background distribution. In this way, the signal distributions \( S(x) \) can be directly compared among the various MVAs. The stronger \( S(x) \) peaks towards one, the better is the discrimination of the MVA. The \( \mu_{transform} \) is documented here.; The MVA standard output also prints the linear correlation coefficients between signal and background, which can be useful to eliminate variables that exhibit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBase.html:709,benchmark,benchmark,709,doc/master/classTMVA_1_1MethodBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,". ROOT: TMVA::MethodBoost Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::MethodBoost Class ReferenceTMVA. ; Class for boosting a TMVA method. ; This class is meant to boost a single classifier. Boosting means training the classifier a few times. Every time the weights of the events are modified according to how well the classifier performed on the test sample. ; Definition at line 58 of file MethodBoost.h. Public Member Functions;  MethodBoost (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  ;  MethodBoost (DataSetInfo &dsi, const TString &theWeightFile);  ; virtual ~MethodBoost (void);  destructor ;  ; Bool_t BookMethod (Types::EMVA theMethod, TString methodTitle, TString theOption);  just registering the string from which the boosted classifier will be created ;  ; void CleanBoostOptions ();  ; const Ranking * CreateRanking ();  ; Int_t GetBoostNum ();  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  return boosted MVA response ;  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t);  Boost can handle classification with 2 classes and regression with one regression-target. ;  ; virtual TClass * IsA () const;  ; void SetBoostedMethodName (TString methodName);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Train (void);  ;  Public Member Functions inherited from TMVA::MethodCompositeBase;  MethodCompositeBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  ;  MethodCompositeBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:604,test,test,604,doc/master/classTMVA_1_1MethodBoost.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html,1,['test'],['test']
Testability,". ROOT: TMVA::MethodTMlpANN Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MethodTMlpANN Class ReferenceTMVA. ; This is the TMVA TMultiLayerPerceptron interface class. ; It provides the training and testing the ROOT internal MLP class in the TMVA framework.; Available learning methods:. Stochastic; Batch; SteepestDescent; RibierePolak; FletcherReeves; BFGS. See the TMultiLayerPerceptron class description for details on this ANN. ; Definition at line 47 of file MethodTMlpANN.h. Public Member Functions;  MethodTMlpANN (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption=""3000:N-1:N-2"");  standard constructor ;  ;  MethodTMlpANN (DataSetInfo &theData, const TString &theWeightFile);  constructor from weight file ;  ; virtual ~MethodTMlpANN (void);  destructor ;  ; void AddWeightsXMLTo (void *parent) const;  write weights to xml file ;  ; const Ranking * CreateRanking ();  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  calculate the value of the neural net for the current event ;  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  TMlpANN can handle classification with 2 classes. ;  ; virtual TClass * IsA () const;  ; void MakeClass (const TString &classFileName=TString("""")) const;  create reader class for classifier -> overwrites base class function create specific class for TMultiLayerPerceptron ;  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; void ReadWeightsFromStream (std::istream &istr);  read weights from stream since the MLP can not read from the stream, we 1st: write the weights to temporary file ;  ; virtual void ReadWeightsFromStream (TFile &);  ; void ReadWeightsFromXML (void *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodTMlpANN.html:442,test,testing,442,doc/master/classTMVA_1_1MethodTMlpANN.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodTMlpANN.html,1,['test'],['testing']
Testability,". ROOT: TMVA::PDEFoamKernelBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TMVA::PDEFoamKernelBase Class ReferenceabstractTMVA. ; This class is the abstract kernel interface for PDEFoam. ; The kernel can be used for manipulating (smearing) the cell values of a PDEFoam, by passing it as an argument to PDEFoam::GetCellValue(...).; Derived classes must implement the Estimate() function to provide a specific kernel behaviour. ; Definition at line 40 of file PDEFoamKernelBase.h. Public Member Functions;  PDEFoamKernelBase ();  message logger ;  ;  PDEFoamKernelBase (const PDEFoamKernelBase &);  Copy constructor. ;  ; virtual ~PDEFoamKernelBase ();  Destructor. ;  ; virtual Float_t Estimate (PDEFoam *, std::vector< Float_t > &, ECellValue)=0;  ; virtual TClass * IsA () const;  ; MsgLogger & Log () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamKernelBase.html:721,log,logger,721,doc/master/classTMVA_1_1PDEFoamKernelBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamKernelBase.html,2,"['Log', 'log']","['Log', 'logger']"
Testability,". ROOT: TMVA::SVKernelMatrix Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::SVKernelMatrix Class ReferenceTMVA. ; Kernel matrix for Support Vector Machine. ; Definition at line 41 of file SVKernelMatrix.h. Public Member Functions;  SVKernelMatrix ();  constructor ;  ;  SVKernelMatrix (std::vector< TMVA::SVEvent * > *, SVKernelFunction *);  constructor ;  ;  ~SVKernelMatrix ();  destructor ;  ; Float_t * GetColumn (UInt_t col);  ; Float_t GetElement (UInt_t i, UInt_t j);  returns an element of the kernel matrix ;  ; Float_t * GetLine (UInt_t);  returns a row of the kernel matrix ;  . Private Member Functions; MsgLogger & Log () const;  . Private Attributes; SVKernelFunction * fKernelFunction;  kernel function ;  ; MsgLogger * fLogger;  ! message logger ;  ; UInt_t fSize;  matrix size ;  ; Float_t ** fSVKernelMatrix;  kernel matrix ;  . #include <TMVA/SVKernelMatrix.h>; Constructor & Destructor Documentation. ◆ SVKernelMatrix() [1/2]. TMVA::SVKernelMatrix::SVKernelMatrix ; (; ). constructor ; Definition at line 53 of file SVKernelMatrix.cxx. ◆ SVKernelMatrix() [2/2]. TMVA::SVKernelMatrix::SVKernelMatrix ; (; std::vector< TMVA::SVEvent * > * ; inputVectors, . SVKernelFunction * ; kernelFunction . ). constructor ; Definition at line 64 of file SVKernelMatrix.cxx. ◆ ~SVKernelMatrix(). TMVA::SVKernelMatrix::~SVKernelMatrix ; (; ). destructor ; Definition at line 87 of file SVKernelMatrix.cxx. Member Function Documentation. ◆ GetColumn(). Float_t * TMVA::SVKernelMatrix::GetColumn ; (; UInt_t ; col). inline . Definition at line 54 of file SVKernelMatrix.h. ◆ GetElement(). Float_t TMVA::SVKernelMatrix::GetElement ; (; UInt_t ; i, . UInt_t ; j . ). returns an element of the kernel matrix ; Definition at line 119 of file SVKernelMatrix.cxx. ◆ GetLine(). Float_t * TMVA::SVKernelMatrix::GetLine ; (; UInt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1SVKernelMatrix.html:807,Log,Log,807,doc/master/classTMVA_1_1SVKernelMatrix.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1SVKernelMatrix.html,2,"['Log', 'log']","['Log', 'logger']"
Testability,". ROOT: TMVA::TTrainingSettings Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; TMVA::TTrainingSettings Struct Reference. ; All of the options that can be specified in the training string. ; Definition at line 72 of file MethodDL.h. Public Attributes; size_t batchSize;  ; size_t convergenceSteps;  ; std::vector< Double_t > dropoutProbabilities;  ; Double_t learningRate;  ; size_t maxEpochs;  ; Double_t momentum;  ; bool multithreading;  ; DNN::EOptimizer optimizer;  ; TString optimizerName;  ; std::map< TString, double > optimizerParams;  ; DNN::ERegularization regularization;  ; size_t testInterval;  ; Double_t weightDecay;  . #include <TMVA/MethodDL.h>; Member Data Documentation. ◆ batchSize. size_t TMVA::TTrainingSettings::batchSize. Definition at line 73 of file MethodDL.h. ◆ convergenceSteps. size_t TMVA::TTrainingSettings::convergenceSteps. Definition at line 75 of file MethodDL.h. ◆ dropoutProbabilities. std::vector<Double_t> TMVA::TTrainingSettings::dropoutProbabilities. Definition at line 83 of file MethodDL.h. ◆ learningRate. Double_t TMVA::TTrainingSettings::learningRate. Definition at line 80 of file MethodDL.h. ◆ maxEpochs. size_t TMVA::TTrainingSettings::maxEpochs. Definition at line 76 of file MethodDL.h. ◆ momentum. Double_t TMVA::TTrainingSettings::momentum. Definition at line 81 of file MethodDL.h. ◆ multithreading. bool TMVA::TTrainingSettings::multithreading. Definition at line 85 of file MethodDL.h. ◆ optimizer. DNN::EOptimizer TMVA::TTrainingSettings::optimizer. Definition at line 78 of file MethodDL.h. ◆ optimizerName. TString TMVA::TTrainingSettings::optimizerName. Definition at line 79 of file MethodDL.h. ◆ optimizerParams. std::map<TString,double> TMVA::TTrainingSettings::optimizerParams. Definition at line 84 of file MethodDL.h. ◆ regularization. DNN::ERegularization TMVA::TTrainingSettings::regularization. Definition at line",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTMVA_1_1TTrainingSettings.html:711,test,testInterval,711,doc/master/structTMVA_1_1TTrainingSettings.html,https://root.cern,https://root.cern/doc/master/structTMVA_1_1TTrainingSettings.html,1,['test'],['testInterval']
Testability,". ROOT: TMVA::VarTransformHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::VarTransformHandler Class Reference. . Definition at line 41 of file VarTransformHandler.h. Public Member Functions;  VarTransformHandler (DataLoader *);  constructor ;  ;  ~VarTransformHandler ();  destructor ;  ; MsgLogger & Log () const;  message logger ;  ; TMVA::DataLoader * VarianceThreshold (Double_t threshold);  Computes variance of all the variables and returns a new DataLoader with the selected variables whose variance is above a specific threshold. ;  . Public Attributes; MsgLogger * fLogger;  . Private Member Functions; void CalcNorm ();  Computes maximum, minimum, mean, RMS and variance for all variables and targets. ;  ; void CopyDataLoader (TMVA::DataLoader *des, TMVA::DataLoader *src);  ; void UpdateNorm (Int_t ivar, Double_t x);  Updates maximum and minimum value of a variable or target. ;  . Private Attributes; DataLoader * fDataLoader;  ; DataSetInfo & fDataSetInfo;  ; const std::vector< Event * > & fEvents;  . #include <TMVA/VarTransformHandler.h>; Constructor & Destructor Documentation. ◆ VarTransformHandler(). TMVA::VarTransformHandler::VarTransformHandler ; (; DataLoader * ; dl). constructor ; Definition at line 49 of file VarTransformHandler.cxx. ◆ ~VarTransformHandler(). TMVA::VarTransformHandler::~VarTransformHandler ; (; ). destructor ; Definition at line 61 of file VarTransformHandler.cxx. Member Function Documentation. ◆ CalcNorm(). void TMVA::VarTransformHandler::CalcNorm ; (; ). private . Computes maximum, minimum, mean, RMS and variance for all variables and targets. ; Definition at line 148 of file VarTransformHandler.cxx. ◆ CopyDataLoader(). void TMVA::VarTransformHandler::CopyDataLoader ; (; TMVA::DataLoader * ; des, . TMVA::DataLoader * ; src . ). private ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VarTransformHandler.html:508,Log,Log,508,doc/master/classTMVA_1_1VarTransformHandler.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VarTransformHandler.html,2,"['Log', 'log']","['Log', 'logger']"
Testability,". ROOT: TMVA::VariableIdentityTransform Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::VariableIdentityTransform Class ReferenceTMVA. ; Linear interpolation class. ; Definition at line 45 of file VariableIdentityTransform.h. Public Member Functions;  VariableIdentityTransform (DataSetInfo &dsi);  constructor ;  ; virtual ~VariableIdentityTransform (void);  ; virtual void AttachXMLTo (void *parent);  identity transformation to write to XML Log() << kFATAL << ""Please implement writing of transformation as XML"" << Endl; ;  ; void Initialize ();  nothing to initialize ;  ; virtual const Event * InverseTransform (const Event *const ev, Int_t cls) const;  ; virtual TClass * IsA () const;  ; virtual void MakeFunction (std::ostream &fout, const TString &fncName, Int_t part, UInt_t trCounter, Int_t cls);  creates C++ code fragment of the identity transform for inclusion in standalone C++ class ;  ; Bool_t PrepareTransformation (const std::vector< Event * > &);  the identity does not need to be prepared, only calculate the normalization ;  ; virtual void ReadFromXML (void *trfnode);  reding the identity transformation from XML ;  ; void ReadTransformationFromStream (std::istream &, const TString &);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual const Event * Transform (const Event *const, Int_t cls) const;  identity transform returns same event ;  ; void WriteTransformationToStream (std::ostream &) const;  ;  Public Member Functions inherited from TMVA::VariableTransformBase;  VariableTransformBase (DataSetInfo &dsi, Types::EVariableTransform tf, const TString &trfName);  standard constructor ;  ; virtual ~VariableTransformBase (void);  ; virtual void CountVariableTypes (UInt_t &nvars, UInt_t &ntgts, UInt_t &nspc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableIdentityTransform.html:606,Log,Log,606,doc/master/classTMVA_1_1VariableIdentityTransform.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableIdentityTransform.html,1,['Log'],['Log']
Testability,". ROOT: TMVA::VariablePCATransform Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::VariablePCATransform Class ReferenceTMVA. ; Linear interpolation class. ; Definition at line 48 of file VariablePCATransform.h. Public Member Functions;  VariablePCATransform (DataSetInfo &dsi);  constructor ;  ; virtual ~VariablePCATransform (void);  destructor ;  ; virtual void AttachXMLTo (void *parent);  create XML description of PCA transformation ;  ; void Initialize ();  initialization of the transformation. ;  ; virtual const Event * InverseTransform (const Event *const, Int_t cls) const;  apply the principal component analysis TODO: implementation of inverse transformation Log() << kFATAL << ""Inverse transformation for PCA transformation not yet implemented. Hence, this transformation cannot be applied together with regression. Please contact the authors if necessary."" << Endl; ;  ; virtual TClass * IsA () const;  ; virtual void MakeFunction (std::ostream &fout, const TString &fncName, Int_t part, UInt_t trCounter, Int_t cls);  creates C++ code fragment of the PCA transform for inclusion in standalone C++ class ;  ; Bool_t PrepareTransformation (const std::vector< Event * > &);  calculate the principal components using the ROOT class TPrincipal and the normalization ;  ; virtual void ReadFromXML (void *trfnode);  Read the transformation matrices from the xml node. ;  ; void ReadTransformationFromStream (std::istream &, const TString &);  Read mean values from input stream. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual const Event * Transform (const Event *const, Int_t cls) const;  apply the principal component analysis ;  ; void WriteTransformationToStream (std::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariablePCATransform.html:884,Log,Log,884,doc/master/classTMVA_1_1VariablePCATransform.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariablePCATransform.html,1,['Log'],['Log']
Testability,". ROOT: TMessageHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMessageHandler Class ReferenceCore ROOT classes » Base ROOT classes. ; Handle messages that might be generated by the system. ; By default a handler only keeps track of the different messages generated for a specific class. By deriving from this class and overriding Notify() one can implement custom message handling. In Notify() one has access to the message id and the object generating the message. One can install more than one message handler per class. A message handler can be removed or again added when needed. All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004 . Definition at line 34 of file TMessageHandler.h. Public Member Functions;  TMessageHandler (const char *cl, Bool_t derived=kTRUE);  Create a new message handler for class named cl and add it to the list of message handlers. ;  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify ()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMessageHandler.html:828,log,logged,828,doc/master/classTMessageHandler.html,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html,4,['log'],['logged']
Testability,". ROOT: TMultiLayerPerceptron Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMultiLayerPerceptron Class Reference. ; This class describes a neural network. ; There are facilities to train the network and use the output.; The input layer is made of inactive neurons (returning the optionally normalized input) and output neurons are linear. The type of hidden neurons is free, the default being sigmoids. (One should still try to pass normalized inputs, e.g. between [0.,1]); The basic input is a TTree and two (training and test) TEventLists. Input and output neurons are assigned a value computed for each event with the same possibilities as for TTree::Draw(). Events may be weighted individually or via TTree::SetWeight(). 6 learning methods are available: kStochastic, kBatch, kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS.; This implementation, written by C. Delaere, is inspired from the mlpfit package from J.Schwindling et al. with some extensions:. the algorithms are globally the same; in TMultilayerPerceptron, there is no limitation on the number of layers/neurons, while MLPFIT was limited to 2 hidden layers; TMultilayerPerceptron allows you to save the network in a root file, and provides more export functionalities; TMultilayerPerceptron gives more flexibility regarding the normalization of inputs/outputs; TMultilayerPerceptron provides, thanks to Andrea Bocci, the possibility to use cross-entropy errors, which allows to train a network for pattern classification based on Bayesian posterior probability. Introduction; Neural Networks are more and more used in various fields for data analysis and classification, both for research and commercial institutions. Some randomly chosen examples are:. imag",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:789,test,test,789,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['test'],['test']
Testability,". ROOT: TObjectSpy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TObjectSpy Class ReferenceCore ROOT classes » Base ROOT classes. ; Monitors objects for deletion and reflects the deletion by reverting the internal pointer to zero. ; When this pointer is zero we know the object has been deleted. This avoids the unsafe TestBit(kNotDeleted) hack. The spied object must have the kMustCleanup bit set otherwise you will get an error. ; Definition at line 30 of file TObjectSpy.h. Public Member Functions;  TObjectSpy (TObject *obj=nullptr, Bool_t fixMustCleanupBit=kTRUE);  Register the object that must be spied. ;  ; virtual ~TObjectSpy ();  Cleanup. ;  ; TObject * GetObject () const;  ; TClass * IsA () const override;  ; void RecursiveRemove (TObject *obj) override;  Sets the object pointer to zero if the object is deleted in the RecursiveRemove() operation. ;  ; void SetObject (TObject *obj, Bool_t fixMustCleanupBit=kTRUE);  Set obj as the spy target. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObjectSpy.html:529,Test,TestBit,529,doc/master/classTObjectSpy.html,https://root.cern,https://root.cern/doc/master/classTObjectSpy.html,1,['Test'],['TestBit']
Testability,". ROOT: TPDF Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TPDF Class ReferenceGraphics » 2D Graphics » Graphics file output. ; Interface to PDF. ; Like PostScript, PDF is a vector graphics output format allowing a very high graphics output quality. The functionalities provided by this class are very similar to those provided by TPostScript.; Compare to PostScript output, the PDF files are usually smaller because some parts of them can be compressed.; PDF also allows to define table of contents. This facility can be used in ROOT. The following example shows how to proceed: {; TCanvas* canvas = new TCanvas(""canvas"");; TH1F* histo = new TH1F(""histo"",""test 1"",10,0.,10.);; histo->SetFillColor(2);; histo->Fill(2.);; histo->Draw();; canvas->Print(""plots.pdf("",""Title:One bin filled"");; histo->Fill(4.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Two bins filled"");; histo->Fill(6.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Three bins filled"");; histo->Fill(8.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Four bins filled"");; histo->Fill(8.);; histo->Draw();; canvas->Print(""plots.pdf)"",""Title:The fourth bin content is 2"");; }; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TPad::Printvoid Print(const char *filename="""") const overrideThis method is equivalent to SaveAs(""filename""). See TPad::SaveAs for details.Definition TPad.cxx:4798; Each charac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPDF.html:870,test,test,870,doc/master/classTPDF.html,https://root.cern,https://root.cern/doc/master/classTPDF.html,1,['test'],['test']
Testability,". ROOT: TParallelCoordVar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TParallelCoordVar Class Reference. ; TParallelCoord axes. ; Class containing a variable for the TParallelCoord.; Options can be defined each axis separately using the right mouse click. These options can be applied to every axes using the editor. Axis width: If set to 0, the axis is simply a line. If higher, a color histogram is drawn on the axis.; Axis histogram height: If not 0, a usual bar histogram is drawn on the plot. The order in which the variables are drawn is essential to see the clusters. The axes can be dragged to change their position. A zoom is also available. The logarithm scale is also available by right clicking on the axis. ; Definition at line 24 of file TParallelCoordVar.h. Public Types; enum  EStatusBits { kLogScale = (1ULL << ( 14 )); , kShowBox = (1ULL << ( 15 )); , kShowBarHisto = (1ULL << ( 16 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TParallelCoordVar ();  Default constructor. ;  ;  TParallelCoordVar (Double_t *val, const char *title, Int_t id, TParallelCoord *gram);  Normal constructor. ;  ;  ~TParallelCoordVar () override;  Destructor. ;  ; void AddRange ()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelCoordVar.html:853,log,logarithm,853,doc/master/classTParallelCoordVar.html,https://root.cern,https://root.cern/doc/master/classTParallelCoordVar.html,1,['log'],['logarithm']
Testability,". ROOT: TPie Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TPie Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Draw a Pie Chart,. ; Example:; ; void piechart(); {; Float_t vals[] = {.2,1.1,.6,.9,2.3};; Int_t colors[] = {2,3,4,5,6};; Int_t nvals = sizeof(vals)/sizeof(vals[0]);; ; TCanvas *cpie = new TCanvas(""cpie"",""TPie test"",700,700);; cpie->Divide(2,2);; ; TPie *pie1 = new TPie(""pie1"",; ""Pie with offset and no colors"",nvals,vals);; TPie *pie2 = new TPie(""pie2"",; ""Pie with radial labels"",nvals,vals,colors);; TPie *pie3 = new TPie(""pie3"",; ""Pie with tangential labels"",nvals,vals,colors);; TPie *pie4 = new TPie(""pie4"",; ""Pie with verbose labels"",nvals,vals,colors);; ; cpie->cd(1);; pie1->SetAngularOffset(30.);; pie1->SetEntryRadiusOffset( 4, 0.1);; pie1->SetRadius(.35);; pie1->Draw(""3d"");; ; cpie->cd(2);; pie2->SetEntryRadiusOffset(2,.05);; pie2->SetEntryLineColor(2,2);; pie2->SetEntryLineWidth(2,5);; pie2->SetEntryLineStyle(2,2);; pie2->SetEntryFillStyle(1,3030);; pie2->SetCircle(.5,.45,.3);; pie2->Draw(""rsc"");; ; cpie->cd(3);; pie3->SetY(.32);; pie3->GetSlice(0)->SetValue(.8);; pie3->GetSlice(1)->SetFillStyle(3031);; pie3->SetLabelsOffset(-.1);; pie3->Draw(""3d t nol"");; TLegend *pieleg = pie3->MakeLegend();; pieleg->SetY1(.56); pieleg->SetY2(.86);; ; cpie->cd(4);; pie4->SetRadius(.2);; pie4->SetLabelsOffset(.01);; pie4->SetLabelFormat(""#splitline{%val (%perc)}{%txt}"");; pie4->Draw(""nol <"");; }; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; colorsColor * colorsDefinition X3DBuffer.c:21; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TCanvasThe Canvas class.Definition TCanvas.h:23; TCanvas::cdTVirtualPad * cd(Int_t subpadn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPie.html:564,test,test,564,doc/master/classTPie.html,https://root.cern,https://root.cern/doc/master/classTPie.html,1,['test'],['test']
Testability,". ROOT: TProofBench Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Attributes |; List of all members ; TProofBench Class ReferencePROOF » PROOF benchmark utilities. ; Steering class for PROOF benchmarks. ; Definition at line 37 of file TProofBench.h. Public Member Functions;  TProofBench (const char *url, const char *outfile=""<default>"", const char *proofopt=0);  Constructor: check PROOF and load selectors PAR. ;  ;  ~TProofBench () override;  Destructor. ;  ; void CloseOutFile ();  Close output file. ;  ; Int_t CopyDataSet (const char *dset, const char *dsetdst, const char *destdir);  Copy the files of dataset 'dset' to 'destdir' and create a new dataset named 'dsetdst' decribing them. ;  ; Bool_t GetDebug ();  ; const char * GetOutFileName () const;  ; TClass * IsA () const override;  ; Int_t MakeDataSet (const char *dset=0, Long64_t nevt=-1, const char *fnroot=""event"", Bool_t regenerate=kFALSE);  Create the largest dataset for the run. ;  ; Int_t OpenOutFile (Bool_t wrt=kFALSE, Bool_t verbose=kTRUE);  Set the otuput file Return 0 on success, -1 on error. ;  ; Int_t ReleaseCache (const char *dset);  Release memory cache for dataset 'dset' Return 0 on success, -1 on error. ;  ; Int_t RemoveDataSet (const char *dset);  Physically remove the dataset 'dset', i.e. ;  ; Int_t RunCPU (Long64_t nevents=-1, Int_t start=-1, Int_t stop=-1, Int_t step=-1);  Perform the CPU run Return 0 on success, -1 on error. ;  ; Int_t RunCPUx (Long64_t nevents=-1, Int_t start=-1, Int_t stop=-1);  Perform the CPU run scanning over the number of workers per node Return 0 on success, -1 on error. ;  ; Int_t RunDataSet (const char *dset=""BenchDataSet"", Int_t start=1, Int_t stop=-1, Int_t step=1);  Perform a test using dataset 'dset' Return 0 on success, -1 on erro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofBench.html:379,benchmark,benchmark,379,doc/master/classTProofBench.html,https://root.cern,https://root.cern/doc/master/classTProofBench.html,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,". ROOT: TProofBenchDataSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TProofBenchDataSet Class ReferencePROOF » PROOF benchmark utilities. ; Handle operations on datasets used by ProofBench. ; Definition at line 27 of file TProofBenchDataSet.h. Public Member Functions;  TProofBenchDataSet (TProof *proof=0);  Constructor. ;  ;  ~TProofBenchDataSet () override;  ; Int_t CopyFiles (const char *dset, const char *destdir);  Copy the files of dataset 'dset' to another directory Return 0 on success, -1 on error. ;  ; TClass * IsA () const override;  ; Bool_t IsProof (TProof *p);  ; Int_t ReleaseCache (const char *dset);  Release memory cache for dataset 'dset' Return 0 on success, -1 on error. ;  ; Int_t RemoveFiles (const char *dset);  Physically remove the dataset 'dset', i.e. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofBenchDataSet.html:333,benchmark,benchmark,333,doc/master/classTProofBenchDataSet.html,https://root.cern,https://root.cern/doc/master/classTProofBenchDataSet.html,1,['benchmark'],['benchmark']
Testability,". ROOT: TProofBenchRun Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TProofBenchRun Class ReferenceabstractPROOF » PROOF benchmark utilities. ; Abstract base class for PROOF benchmark runs. ; Definition at line 28 of file TProofBenchRun.h. Public Member Functions;  TProofBenchRun (TProof *proof=0, const char *sel=0);  Constructor: check PROOF and load selectors PAR. ;  ;  ~TProofBenchRun () override;  destructor ;  ; virtual const char * GetParList ();  ; virtual const char * GetSelName ();  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override=0;  This method must be overridden when a class wants to print itself. ;  ; virtual void Run (const char *dset, Int_t start=-1, Int_t stop=-1, Int_t step=-1, Int_t ntries=-1, Int_t debug=-1, Int_t draw=-1)=0;  ; virtual void Run (Long64_t nevents, Int_t start=-1, Int_t stop=-1, Int_t step=-1, Int_t ntries=-1, Int_t debug=-1, Int_t draw=-1)=0;  ; virtual void SetParList (const char *pars);  ; virtual void SetSelName (const char *sel);  ; virtual void SetSelOption (const char *opt);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofBenchRun.html:303,benchmark,benchmark,303,doc/master/classTProofBenchRun.html,https://root.cern,https://root.cern/doc/master/classTProofBenchRun.html,2,['benchmark'],['benchmark']
Testability,". ROOT: TProofBenchRunCPU Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TProofBenchRunCPU Class ReferencePROOF » PROOF benchmark utilities. ; CPU-intensive PROOF benchmark test generates events and fill 1, 2, or 3-D histograms. ; No I/O activity is involved. . Definition at line 41 of file TProofBenchRunCPU.h. Public Member Functions;  TProofBenchRunCPU (TPBHistType *histtype=0, Int_t nhists=16, TDirectory *dirproofbench=0, TProof *proof=0, TProofNodes *nodes=0, Long64_t nevents=1000000, Int_t ntries=2, Int_t start=1, Int_t stop=-1, Int_t step=1, Int_t draw=0, Int_t debug=0);  Default constructor. ;  ;  ~TProofBenchRunCPU () override;  Destructor. ;  ; void DrawPerfPlots ();  Draw Performance plots. ;  ; TCanvas * GetCanvas () const;  ; Int_t GetDebug () const;  ; TDirectory * GetDirProofBench () const;  ; Int_t GetDraw () const;  ; TPBHistType * GetHistType () const;  ; TList * GetListPerfPlots () const;  ; const char * GetName () const override;  Returns name of object. ;  ; TString GetNameStem () const;  Get name for this run. ;  ; Long64_t GetNEvents () const;  ; Int_t GetNHists () const;  ; Int_t GetNTries () const;  ; Int_t GetStart () const;  ; Int_t GetStep () const;  ; Int_t GetStop () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Show settings. ;  ; void Run (const char *, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t) override;  ; void Run (Long64_t nevents, Int_t start, Int_t stop, Int_t step, Int_t ntries, Int_t debug, Int_t draw) override;  Run benchmark Input parameters nevents: Number of events to run per file. ;  ; void SetDebug (Int_t debug);  ; void SetDirProofBench (TDirectory *dir);  ; void SetDraw (Int_t draw);  ; void SetHistType (TPBHistType *histtype);  Set histogra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofBenchRunCPU.html:357,benchmark,benchmark,357,doc/master/classTProofBenchRunCPU.html,https://root.cern,https://root.cern/doc/master/classTProofBenchRunCPU.html,3,"['benchmark', 'test']","['benchmark', 'test']"
Testability,". ROOT: TProofBenchRunDataRead Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TProofBenchRunDataRead Class ReferencePROOF » PROOF benchmark utilities. ; I/O-intensive PROOF benchmark test reads in event files distributed on the cluster. ; Number of events processed per second and size of events processed per second are plotted against number of active workers. Performance rate for unit packets and performance rate for query are plotted. ; Definition at line 44 of file TProofBenchRunDataRead.h. Public Member Functions;  TProofBenchRunDataRead (TProofBenchDataSet *pbds, TPBReadType *readtype=0, TDirectory *dirproofbench=0, TProof *proof=0, TProofNodes *nodes=0, Long64_t nevents=-1, Int_t ntries=2, Int_t start=1, Int_t stop=-1, Int_t step=1, Int_t debug=0);  ;  ~TProofBenchRunDataRead () override;  Destructor. ;  ; void DrawPerfProfiles ();  Get canvas. ;  ; TCanvas * GetCPerfProfiles () const;  ; TFileCollection * GetDataSet (const char *dset, Int_t nact, Bool_t nx);  Get a subsample of dsname suited to run with 'nact' and option 'nx'. ;  ; Int_t GetDebug () const;  ; TDirectory * GetDirProofBench () const;  ; const char * GetName () const override;  Returns name of object. ;  ; TString GetNameStem () const;  Get name for this run. ;  ; Long64_t GetNEvents () const;  ; Int_t GetNTries () const;  ; TPBReadType * GetReadType () const;  ; Int_t GetStart () const;  ; Int_t GetStep () const;  ; Int_t GetStop () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print the content of this object. ;  ; void Run (const char *dset, Int_t start, Int_t stop, Int_t step, Int_t ntries, Int_t debug, Int_t) override;  Run benchmark Input parameters dset: Dataset on which to run start: Start scan with 'start' ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofBenchRunDataRead.html:367,benchmark,benchmark,367,doc/master/classTProofBenchRunDataRead.html,https://root.cern,https://root.cern/doc/master/classTProofBenchRunDataRead.html,3,"['benchmark', 'test']","['benchmark', 'test']"
Testability,". ROOT: TProofCondor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; Friends |; List of all members ; TProofCondor Class Reference. . Definition at line 33 of file TProofCondor.h. Public Member Functions;  TProofCondor (const char *masterurl, const char *conffile=kPROOF_ConfFile, const char *confdir=kPROOF_ConfDir, Int_t loglevel=0, const char *alias=0, TProofMgr *mgr=0);  Start proof using condor. ;  ;  ~TProofCondor () override;  Clean up Condor PROOF environment. ;  ; TClass * IsA () const override;  ; virtual void SetActive ();  ; virtual void SetActive (Bool_t active);  Suspend or resume PROOF via Condor. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TProof;  TProof (const char *masterurl, const char *conffile=kPROOF_ConfFile, const char *confdir=kPROOF_ConfDir, Int_t loglevel=0, const char *alias=0, TProofMgr *mgr=0);  Create a PROOF environment. ;  ;  ~TProof () override;  Clean up PROOF environment. ;  ; Int_t ActivateWorker (const char *ord, Bool_t save=kTRUE);  Make sure that the worker identified by the ordinal number 'ord' is in the active list. ;  ; void AddChain (TChain *chain);  Add chain to data set. ;  ; Int_t AddDynamicPath (const char *libpath, Bool_t onClient=kFALSE, TList *wrks=0, Bool_t doCollect=kTRUE);  Add 'libpath' to the lib path search. ;  ; void AddFeedback (const char *name);  Add object to feedback list. ;  ; Int_t AddIncludePath (const char *incpath, Bool_t onClient=kFALSE, TList *wrks=0, Bool_t doCollect=kTRUE);  Add 'incpath' to the inc path search. ;  ; void AddInput (TObject *obj);  Add objects that might be needed during the processing of the selector (see Process()). ;  ; void AddInputData (TObject *obj, Bool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofCondor.html:509,log,loglevel,509,doc/master/classTProofCondor.html,https://root.cern,https://root.cern/doc/master/classTProofCondor.html,1,['log'],['loglevel']
Testability,". ROOT: TProofLite Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TProofLite Class ReferencePROOF » PROOF kernel Libraries. ; This class starts a PROOF session on the local machine: no daemons, client and master merged, communications via UNIX-like sockets. ; By default the number of workers started is NumberOfCores+1; a different number can be forced on construction. ; Definition at line 40 of file TProofLite.h. Public Member Functions;  TProofLite (const char *masterurl, const char *conffile=kPROOF_ConfFile, const char *confdir=kPROOF_ConfDir, Int_t loglevel=0, const char *alias=0, TProofMgr *mgr=0);  Create a PROOF environment. ;  ;  ~TProofLite () override;  Destructor. ;  ; Bool_t CancelStagingDataSet (const char *dataset) override;  Cancels a dataset staging request. ;  ; void ClearCache (const char *file=0) override;  Remove files from all file caches. ;  ; void ClearDataSetCache (const char *dataset=0) override;  Clear the content of the dataset cache, if any (matching 'dataset', if defined). ;  ; Long64_t DrawSelect (TDSet *dset, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Execute the specified drawing action on a data set (TDSet). ;  ; Bool_t ExistsDataSet (const char *uri) override;  Returns kTRUE if 'dataset' described by 'uri' exists, kFALSE otherwise. ;  ; TFileCollection * GetDataSet (const char *uri, const char *=0) override;  Get a list of TFileInfo objects describing the files of the specified dataset. ;  ; TMap * GetDataSets (const char *uri="""", const char *=0) override;  lists all datasets that match given uri ;  ; TList * GetListOfQueries (Option_t *opt="""") override;  Get the list of queries. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:835,log,loglevel,835,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['log'],['loglevel']
Testability,". ROOT: TProofLog Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TProofLog Class ReferencePROOF » PROOF kernel Libraries. ; Implementation of the PROOF session log handler. ; Definition at line 32 of file TProofLog.h. Public Types; enum  ELogLocationBit { kLogToBox = (1ULL << ( 16 )); };  ; enum  ERetrieveOpt { kLeading = 0x1; , kTrailing = 0x2; , kAll = 0x3; , kGrep = 0x4; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TProofLog (const char *stag, const char *url, TProofMgr *mgr);  Constructor. ;  ;  ~TProofLog () override;  Destructor. ;  ; void Display (const char *ord=""*"", Int_t from=-10, Int_t to=-1);  Display the content associated with worker 'ord' from line 'from' to line 'to' inclusive. ;  ; TList * GetListOfLogs () const;  ; Int_t Grep (const char *txt, Int_t from=0);  Search lines containing 'txt', starting from line 'from'. ;  ; TClass * IsA () const override;  ; Bool_t LogToBox ();  ; void Print (Option_t *opt=0) const override;  Print head info about the content. ;  ; void Prt (const char *what, Bool_t newline=kTRUE);  Special printing procedure. ;  ; Int_t Retrieve (const char *ord=""*"", TProofLog::ERetrieveOpt o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLog.html:394,log,log,394,doc/master/classTProofLog.html,https://root.cern,https://root.cern/doc/master/classTProofLog.html,1,['log'],['log']
Testability,". ROOT: TProofLogElem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TProofLogElem Class Reference. . Definition at line 79 of file TProofLog.h. Public Member Functions;  TProofLogElem (const char *ord, const char *url, TProofLog *logger);  Constructor. ;  ;  ~TProofLogElem () override;  Destructor. ;  ; void Display (Int_t from=0, Int_t to=-1);  Display the current content starting from line 'from' to line 'to' inclusive. ;  ; TMacro * GetMacro () const;  ; const char * GetRole ();  ; Int_t Grep (const char *txt, TString &res, Int_t from=0);  Search lines containing 'txt', starting from line 'from'. ;  ; TClass * IsA () const override;  ; Bool_t IsMaster () const;  ; Bool_t IsSubMaster () const;  ; Bool_t IsWorker () const;  ; void Print (Option_t *opt=0) const override;  Print a line with the relevant info. ;  ; void Prt (const char *what);  Special printing procedure. ;  ; Int_t Retrieve (TProofLog::ERetrieveOpt opt=TProofLog::kTrailing, const char *pattern=0);  Retrieve the content of the associated file. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLogElem.html:439,log,logger,439,doc/master/classTProofLogElem.html,https://root.cern,https://root.cern/doc/master/classTProofLogElem.html,1,['log'],['logger']
Testability,". ROOT: TProofMgrLite Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TProofMgrLite Class ReferencePROOF » PROOF kernel Libraries. ; Basic TProofMgr functionality implementation in the case of Lite session. ; Definition at line 27 of file TProofMgrLite.h. Public Member Functions;  TProofMgrLite (const char *url, Int_t loglevel=-1, const char *alias="""");  Create a PROOF manager for the Lite environment. ;  ;  ~TProofMgrLite () override;  ; TProof * CreateSession (const char *=0, const char *=0, Int_t=-1) override;  Create a new session. ;  ; TProofLog * GetSessionLogs (Int_t ridx=0, const char *stag=0, const char *pattern=""-v | SvcMsg"", Bool_t rescan=kFALSE) override;  Get logs or log tails from last session associated with this manager instance. ;  ; TClass * IsA () const override;  ; TObjString * ReadBuffer (const char *file, const char *pattern) override;  Read lines containing 'pattern' in 'file'. ;  ; TObjString * ReadBuffer (const char *file, Long64_t ofs, Int_t len) override;  Read 'len' bytes from offset 'ofs' of the local file 'fin'. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TProofMgr;  TProofMgr (const char *url, Int_t loglevel=-1, const char *alias="""");  Create a PROOF manager for the standard (old) environment. ;  ;  ~TProofMgr () override;  Destroy a TProofMgr instance. ;  ; virtual TProof * AttachSession (Int_t, Bool_t=kFALSE);  Dummy version provided for completeness. ;  ; virtual TProof * AttachSession (TProofDesc *, Bool_t=kFALSE);  Dummy version provided for completeness. ;  ; void Close ();  ; virtual Int_t Cp (const char *, const char *=0, const char *=0);  ; virtual void DetachSession (Int_t, Option_t *="""");  Detach session with 'id' from its proofserv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofMgrLite.html:476,log,loglevel,476,doc/master/classTProofMgrLite.html,https://root.cern,https://root.cern/doc/master/classTProofMgrLite.html,3,['log'],"['log', 'loglevel', 'logs']"
Testability,". ROOT: TProofNodes Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TProofNodes Class ReferencePROOF » PROOF benchmark utilities. ; PROOF worker node information . Definition at line 28 of file TProofNodes.h. Public Member Functions;  TProofNodes (TProof *proof);  Constructor. ;  ;  ~TProofNodes () override;  Destructor. ;  ; Int_t ActivateWorkers (const char *workers);  Description: Activate the same number of workers on all nodes. ;  ; Int_t ActivateWorkers (Int_t nwrks);  Description: Activate 'nwrks' workers; calls TProof::SetParallel and rebuild the internal lists Input: number of workers Return: 0 is successful, <0 otherwise. ;  ; TMap * GetMapOfActiveNodes () const;  ; TMap * GetMapOfNodes () const;  ; Int_t GetMaxWrksPerNode () const;  ; Int_t GetMinWrksPerNode () const;  ; Int_t GetNActives () const;  ; Int_t GetNCores () const;  ; Int_t GetNNodes () const;  ; Int_t GetNWorkersCluster () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Description: Print node information. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofNodes.html:315,benchmark,benchmark,315,doc/master/classTProofNodes.html,https://root.cern,https://root.cern/doc/master/classTProofNodes.html,1,['benchmark'],['benchmark']
Testability,". ROOT: TProofPerfAnalysis Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TProofPerfAnalysis Class ReferencePROOF » PROOF benchmark utilities. ; Set of tools to analyse the performance tree. ; Definition at line 32 of file TProofPerfAnalysis.h. Classes; class  TFileInfo;  ; class  TPackInfo;  ; class  TWrkEntry;  ; class  TWrkInfo;  ; class  TWrkInfoFile;  . Public Member Functions;  TProofPerfAnalysis (const char *perffile, const char *title="""", const char *treename=""PROOF_PerfStats"");  Constructor: open the file and attach to the tree. ;  ;  TProofPerfAnalysis (TTree *tree, const char *title="""");  Constructor: open the file and attach to the tree. ;  ;  ~TProofPerfAnalysis () override;  Destructor: detach the tree and close the file. ;  ; void EventDist ();  Display event and packet distribution. ;  ; void FileDist (Bool_t writedet=kFALSE);  Analyse the file distribution. ;  ; void FileProcPlot (const char *fn, const char *out=0);  Show event processing or MB processing rate plot vs time. ;  ; void FileRatePlot (const char *fns=0);  Show MB processing rate plot per file vs time. ;  ; void GetAverages (Double_t &evtmax, Double_t &mbmax, Double_t &evt, Double_t &mb) const;  ; Double_t GetEvtRateAvg () const;  ; Double_t GetEvtRateAvgMax () const;  ; Double_t GetMBRateAvg () const;  ; Double_t GetMBRateAvgMax () const;  ; TClass * IsA () const override;  ; Bool_t IsValid () const;  ; void LatencyPlot (const char *wrks=0);  Show event processing or MB processing rate plot vs time Create the histograms. ;  ; void PrintFileInfo (const char *fn, const char *opt=""P"", const char *out=0);  Print information for file 'fn' (path including directory) or server 'fn'. ;  ; void PrintFileInfo (Int_t showlast=10, const char *opt="""", const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPerfAnalysis.html:369,benchmark,benchmark,369,doc/master/classTProofPerfAnalysis.html,https://root.cern,https://root.cern/doc/master/classTProofPerfAnalysis.html,1,['benchmark'],['benchmark']
Testability,". ROOT: TProofProgressLog Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TProofProgressLog Class ReferenceGUI » Session Viewer. ; Dialog used to display Proof session logs from the Proof progress dialog. ; It uses TProofMgr::GetSessionLogs() mechanism internally ; Definition at line 31 of file TProofProgressLog.h. Public Member Functions;  TProofProgressLog (const char *url=nullptr, Int_t sessionidx=0, Int_t w=700, Int_t h=600);  Create a window frame for log messages. ;  ;  TProofProgressLog (TProofProgressDialog *d, Int_t w=700, Int_t h=600);  Create a window frame for log messages. ;  ;  ~TProofProgressLog () override;  Destructor. ;  ; void AddBuffer (const char *buffer);  Add text to the window. ;  ; void BuildLogList (Bool_t create=kFALSE);  Build the list of workers. ;  ; void Clear (Option_t *=nullptr) override;  Clear log window. ;  ; void CloseWindow () override;  Handle close button or when closed via window manager action. ;  ; void DoLog (Bool_t grep=kFALSE);  Display logs. ;  ; TClass * IsA () const override;  ; void LoadBuffer (const char *buffer);  Load a text buffer in the window. ;  ; void LoadFile (const char *file);  Load a file in the window. ;  ; void LogMessage (const char *msg, Bool_t all);  Load/append a log msg in the log frame, if open. ;  ; void NoLineEntry ();  Enable/disable the line number entry. ;  ; void Popup ();  Show log window. ;  ; void Rebuild ();  Rebuild the log info for a new entered session. ;  ; void SaveToFile ();  Save the logs to a file Only the name of the file is taken, no expansion. ;  ; void Select (Int_t id, Bool_t all=kTRUE);  actions of select all/clear all button ;  ; void SetGrepView ();  Sets the view of grep filters according to the value of checkboxes. ;  ; void SetUrl (const char *url);  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofProgressLog.html:391,log,logs,391,doc/master/classTProofProgressLog.html,https://root.cern,https://root.cern/doc/master/classTProofProgressLog.html,3,['log'],"['log', 'logs']"
Testability,". ROOT: TProofProgressMemoryPlot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TProofProgressMemoryPlot Class ReferenceGUI » Session Viewer. ; This class implements a dialog, used to display the memory footprint on the proof workers and master. ; For the workers, memory is plotted as a function of number of events processed. For the master, it is plotted as a function of number of objects merged ; Definition at line 28 of file TProofProgressMemoryPlot.h. Public Member Functions;  TProofProgressMemoryPlot (TProofProgressDialog *d, Int_t w=700, Int_t h=300);  Main constructor. ;  ;  ~TProofProgressMemoryPlot () override;  Destructor. ;  ; void Clear (Option_t *=nullptr) override;  Clear the canvases. ;  ; void DoPlot ();  Draw the plot from the logs. ;  ; void Select (Int_t id);  actions of select all/clear all button ;  ;  Public Member Functions inherited from TGTransientFrame;  TGTransientFrame (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a transient window. ;  ; virtual void CenterOnParent (Bool_t croot=kTRUE, EPlacement pos=kCenter);  Position transient frame centered relative to the parent frame. ;  ; const TGWindow * GetMain () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a transient frame widget as a C++ statement(s) on output stream out. ;  ; void SaveSource (const char *filename=""Rootdlog.C"", Option_t *option="""") override;  Save the GUI transient frame widget in a C++ macro file. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofProgressMemoryPlot.html:931,log,logs,931,doc/master/classTProofProgressMemoryPlot.html,https://root.cern,https://root.cern/doc/master/classTProofProgressMemoryPlot.html,1,['log'],['logs']
Testability,". ROOT: TProofSuperMaster Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TProofSuperMaster Class ReferencePROOF » PROOF kernel Libraries. ; Implementation of TProof controlling PROOF federated clusters. ; Definition at line 33 of file TProofSuperMaster.h. Public Member Functions;  TProofSuperMaster (const char *masterurl, const char *conffile=kPROOF_ConfFile, const char *confdir=kPROOF_ConfDir, Int_t loglevel=0, const char *alias=0, TProofMgr *mgr=0);  Start super master PROOF session. ;  ;  ~TProofSuperMaster () override;  ; TClass * IsA () const override;  ; Long64_t Process (const char *dsname, const char *sel, Option_t *o="""", Long64_t nent=-1, Long64_t fst=0, TObject *enl=0) override;  Process a dataset which is stored on the master with name 'dsetname'. ;  ; Long64_t Process (const char *dsname, TSelector *sel, Option_t *o="""", Long64_t nent=-1, Long64_t fst=0, TObject *enl=0) override;  Process with name of dataset and TSelector object. ;  ; Long64_t Process (const char *sel, Long64_t nent, Option_t *o="""") override;  Generic (non-data based) selector processing: the Process() method of the specified selector (.C) or TSelector object is called 'n' times. ;  ; Long64_t Process (TDSet *set, const char *selector, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Process a data set (TDSet) using the specified selector (.C) file. ;  ; Long64_t Process (TDSet *set, TSelector *selector, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Process a data set (TDSet) using the specified selector object. ;  ; Long64_t Process (TFileCollection *fc, const char *sel, Option_t *o="""", Long64_t nent=-1, Long64_t fst=0) override;  Process a data set (TFileCollection) using the specified selector (.C) file or TSelector object. ;  ; Long",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofSuperMaster.html:602,log,loglevel,602,doc/master/classTProofSuperMaster.html,https://root.cern,https://root.cern/doc/master/classTProofSuperMaster.html,1,['log'],['loglevel']
Testability,". ROOT: TQueryResultManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TQueryResultManager Class ReferencePROOF » PROOF kernel Libraries. ; Class managing the query-result area. ; Definition at line 35 of file TQueryResultManager.h. Public Member Functions;  TQueryResultManager (const char *qdir, const char *stag, const char *sdir, TProofLockPath *lck, FILE *logfile=0);  Constructor. ;  ;  ~TQueryResultManager () override;  Cleanup. ;  ; Int_t ApplyMaxQueries (Int_t mxq);  Scan the queries directory and remove the oldest ones (and relative dirs, if empty) in such a way only 'mxq' queries are kept. ;  ; Int_t CleanupQueriesDir ();  Remove all queries results referring to previous sessions. ;  ; Int_t CleanupSession (const char *sessiontag);  Cleanup query dir qdir. ;  ; Int_t DrawQueries () const;  ; Bool_t FinalizeQuery (TProofQueryResult *pq, TProof *proof, TVirtualProofPlayer *player);  Final steps after Process() to complete the TQueryResult instance. ;  ; Float_t GetCpuTime ();  ; Float_t GetRealTime ();  ; void IncrementDrawQueries ();  ; void IncrementSeqNum ();  ; TClass * IsA () const override;  ; Int_t KeptQueries () const;  ; TProofQueryResult * LocateQuery (TString queryref, Int_t &qry, TString &qdir);  Locate query referenced by queryref. ;  ; Int_t LockSession (const char *sessiontag, TProofLockPath **lck);  Try locking query area of session tagged sessiontag. ;  ; TList * PreviousQueries () const;  ; TList * Queries () const;  ; const char * QueryDir () const;  ; void RemoveQuery (const char *queryref, TList *otherlist=0);  Remove everything about query queryref; if defined 'otherlist' will containe the list of removed pointers (already deleted) ;  ; void RemoveQuery (TQueryResult *qr, Bool_t soft=kFALSE);  Remove everything about query qr. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQueryResultManager.html:572,log,logfile,572,doc/master/classTQueryResultManager.html,https://root.cern,https://root.cern/doc/master/classTQueryResultManager.html,1,['log'],['logfile']
Testability,". ROOT: TRandom3 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TRandom3 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Random number generator class based on M. ; Matsumoto and T. Nishimura, Mersenne Twister: A 623-diminsionally equidistributed uniform pseudorandom number generator ACM Transactions on Modeling and Computer Simulation, Vol. 8, No. 1, January 1998, pp 3–30.; For more information see the Mersenne Twister homepage [http://www.math.keio.ac.jp/~matumoto/emt.html]; Advantage:. large period 2**19937 -1; relatively fast (slightly slower than TRandom2 but much faster than TRandom1). Drawback:; a relative large internal state of 624 integers; generate only 32 random bits; not passing all the random generator tests. It fails some tests in TestU01 (see [http://simul.iro.umontreal.ca/testu01/tu01.html]). An altenativly excellent generator passing all tests of TestU01, having 61 random bits and fast as Mersenne and Twister is MIXMAX (TRandomMixMax). ; Definition at line 27 of file TRandom3.h. Public Member Functions;  TRandom3 (UInt_t seed=4357);  Default constructor If seed is 0, the seed is automatically computed via a TUUID object. ;  ;  ~TRandom3 () override;  Default destructor. ;  ; UInt_t GetSeed () const override;  Return one element of the generator state used to generate the random numbers. ;  ; virtual const UInt_t * GetState () const;  ; TClass * IsA () const override;  ; Double_t Rndm () override;  Machine independent random number generator. ;  ; Double_t Rndm () override;  Machine independent random number generator. ;  ; virtual Double_t Rndm (Int_t);  ; void RndmArray (Int_t n, Double_t *array) override;  Return an array of n random numbers uniformly distributed in ]0,1]. ;  ; void RndmArray (Int_t n, Float_t *array) override;  Return a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRandom3.html:940,test,tests,940,doc/master/classTRandom3.html,https://root.cern,https://root.cern/doc/master/classTRandom3.html,2,['test'],['tests']
Testability,. ROOT: TSPlot tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; TSPlot tutorialsTutorials. ; This tutorial illustrates the use of class TSPlot. . Files; file  TestSPlot.C;  This tutorial illustrates the use of class TSPlot and of the sPlots method. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__splot.html:210,Test,TestSPlot,210,doc/master/group__tutorial__splot.html,https://root.cern,https://root.cern/doc/master/group__tutorial__splot.html,1,['Test'],['TestSPlot']
Testability,". ROOT: TSQLMonitoringWriter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TSQLMonitoringWriter Class Reference. . Definition at line 30 of file TSQLMonitoring.h. Public Member Functions;  TSQLMonitoringWriter (const char *serv, const char *user, const char *pass, const char *table);  Constructor. ;  ; virtual ~TSQLMonitoringWriter ();  Destructor. ;  ; TClass * IsA () const override;  ; Bool_t SendParameters (TList *values, const char *) override;  Register query log using the information in the list which is in the form TParameter(<par>,<value>) or TNamed(<name>,<string>). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Verbose (Bool_t onoff) override;  ;  Public Member Functions inherited from TVirtualMonitoringWriter;  TVirtualMonitoringWriter ();  ;  TVirtualMonitoringWriter (const char *name, Double_t value);  ; virtual ~TVirtualMonitoringWriter ();  destructor ;  ; TClass * IsA () const override;  ; virtual Bool_t SendFileCloseEvent (TFile *);  ; virtual Bool_t SendFileOpenProgress (TFile *, TList *, const char *, Bool_t=kFALSE);  ; virtual Bool_t SendFileReadProgress (TFile *);  ; virtual Bool_t SendFileWriteProgress (TFile *);  ; virtual Bool_t SendInfoDescription (const char *);  ; virtual Bool_t SendInfoStatus (const char *);  ; virtual Bool_t SendInfoTime ();  ; virtual Bool_t SendInfoUser (const char *=nullptr);  ; virtual Bool_t SendProcessingProgress (Double_t, Double_t, Bool_t=kFALSE);  ; virtual Bool_t SendProcessingStatus (const char *, Bool_t=kFALSE);  ; virtual void SetLogLevel (const char *=""WARNING"");  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLMonitoringWriter.html:677,log,log,677,doc/master/classTSQLMonitoringWriter.html,https://root.cern,https://root.cern/doc/master/classTSQLMonitoringWriter.html,1,['log'],['log']
Testability,". ROOT: TSelEvent Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Attributes |; List of all members ; TSelEvent Class ReferencePROOF » PROOF benchmark utilities. ; Selector for PROOF I/O benchmark test. ; For the I/O benchmark, event files are read in and histograms are filled. For memory clean-up, dedicated files large enough to clean up memory cache on the machine are read in. Or memory clean-up can be accompolished by system call on Linux machine inside SlaveBegin(..) which should be much faster the reading in large files. ; Definition at line 42 of file TSelEvent.h. Public Member Functions;  TSelEvent ();  Constructor. ;  ;  TSelEvent (TTree *);  Constructor. ;  ; virtual ~TSelEvent ();  ; virtual void Begin (TTree *);  The Begin() function is called at the start of the query. ;  ; TCanvas * GetCHist ();  ; Bool_t GetDebug ();  ; TH1F * GetNTracksHist ();  ; virtual TList * GetOutputList () const;  ; TH1F * GetPtHist ();  ; TPBReadType * GetReadType ();  ; virtual void Init (TTree *tree);  ; TClass * IsA () const override;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; virtual Bool_t Process (Long64_t entry);  The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ;  ; virtual void SetInputList (TList *input);  ; virtual void SetObject (TObject *obj);  ; virtual void SetOption (const char *option);  ; virtual void SlaveBegin (TTree *tree);  The SlaveBegin() function is called after the Begin() function. ;  ; virtual void SlaveTerminate ();  The SlaveTerminate() function is called after all entries or objects have been processed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelEvent.html:304,benchmark,benchmark,304,doc/master/classTSelEvent.html,https://root.cern,https://root.cern/doc/master/classTSelEvent.html,4,"['benchmark', 'test']","['benchmark', 'test']"
Testability,". ROOT: TSelEventGen Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; Private Attributes |; List of all members ; TSelEventGen Class ReferencePROOF » PROOF benchmark utilities. ; Selector for event file generation. ; List of files to be generated for each node is provided by client. And list of files generated is sent back. Existing files are reused if not forced to be regenerated. ; Definition at line 33 of file TSelEventGen.h. Public Member Functions;  TSelEventGen ();  pointer to the analyzed TTree or TChain ;  ;  ~TSelEventGen () override;  ; void Begin (TTree *) override;  The Begin() function is called at the start of the query. ;  ; TList * GetOutputList () const override;  ; void Init (TTree *tree) override;  ; TClass * IsA () const override;  ; Bool_t Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; void Print (Option_t *option="""") const override;  This method must be overridden when a class wants to print itself. ;  ; Bool_t Process (Long64_t entry) override;  The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ;  ; void SetInputList (TList *input) override;  ; void SetObject (TObject *obj) override;  ; void SetOption (const char *option) override;  ; void SlaveBegin (TTree *tree) override;  The SlaveBegin() function is called after the Begin() function. ;  ; void SlaveTerminate () override;  The SlaveTerminate() function is called after all entries or objects have been processed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Terminate () override;  The Terminate() function is the last function to be called during a query. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelEventGen.html:340,benchmark,benchmark,340,doc/master/classTSelEventGen.html,https://root.cern,https://root.cern/doc/master/classTSelEventGen.html,1,['benchmark'],['benchmark']
Testability,". ROOT: TSelHandleDataSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TSelHandleDataSet Class ReferencePROOF » PROOF benchmark utilities. ; PROOF selector for file cache release. ; List of files to be cleaned for each node is provided by client. ; Definition at line 30 of file TSelHandleDataSet.h. Public Member Functions;  TSelHandleDataSet ();  ;  ~TSelHandleDataSet () override;  ; void Begin (TTree *) override;  ; TList * GetOutputList () const override;  ; void Init (TTree *) override;  ; TClass * IsA () const override;  ; Bool_t Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; Bool_t Process (Long64_t entry) override;  The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ;  ; void SetInputList (TList *input) override;  ; void SetObject (TObject *obj) override;  ; void SetOption (const char *option) override;  ; void SlaveBegin (TTree *) override;  Init the type from the input parameters. ;  ; void SlaveTerminate () override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Terminate () override;  ; Int_t Version () const override;  ;  Public Member Functions inherited from TSelector;  TSelector ();  Default selector ctor. ;  ;  ~TSelector () override;  Selector destructor. ;  ; virtual void Abort (const char *why, EAbort what=kAbortProcess);  Abort processing. ;  ; virtual EAbort GetAbort () const;  ; virtual Int_t GetEntry (Long64_t, Int_t=0);  ; virtual TList * GetInputList () const;  ; const char * GetOption () const override;  ; virtual Long64_t GetStatus () const;  ; virtual void ImportOutput (TList *output); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelHandleDataSet.html:327,benchmark,benchmark,327,doc/master/classTSelHandleDataSet.html,https://root.cern,https://root.cern/doc/master/classTSelHandleDataSet.html,1,['benchmark'],['benchmark']
Testability,". ROOT: TSelHist Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TSelHist Class ReferencePROOF » PROOF benchmark utilities. ; PROOF selector for CPU-intensive benchmark test. ; Events are generated and 1-D, 2-D, and/or 3-D histograms are filled. ; Definition at line 32 of file TSelHist.h. Public Member Functions;  TSelHist ();  Constructor. ;  ;  ~TSelHist () override;  Destructor. ;  ; void Begin (TTree *tree) override;  The Begin() function is called at the start of the query. ;  ; TList * GetOutputList () const override;  ; TClass * IsA () const override;  ; Bool_t Process (Long64_t entry) override;  The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ;  ; void SetInputList (TList *input) override;  ; void SetObject (TObject *obj) override;  ; void SetOption (const char *option) override;  ; void SlaveBegin (TTree *tree) override;  The SlaveBegin() function is called after the Begin() function. ;  ; void SlaveTerminate () override;  The SlaveTerminate() function is called after all entries or objects have been processed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Terminate () override;  The Terminate() function is the last function to be called during a query. ;  ; Int_t Version () const override;  ;  Public Member Functions inherited from TSelector;  TSelector ();  Default selector ctor. ;  ;  ~TSelector () override;  Selector destructor. ;  ; virtual void Abort (const char *why, EAbort what=kAbortProcess);  Abort processing. ;  ; virtual EAbort GetAbort () const;  ; virtual Int_t GetEntry (Long64_t, Int_t=0);  ; virtual TList * GetInputList () const;  ; const char * GetOption () const override;  ; virtual Long",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelHist.html:280,benchmark,benchmark,280,doc/master/classTSelHist.html,https://root.cern,https://root.cern/doc/master/classTSelHist.html,3,"['benchmark', 'test']","['benchmark', 'test']"
Testability,". ROOT: TSessionFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TSessionFrame Class Reference. . Definition at line 246 of file TSessionViewer.h. Public Member Functions;  TSessionFrame (TGWindow *parent, Int_t w, Int_t h);  Constructor. ;  ;  ~TSessionFrame () override;  Destructor. ;  ; void Build (TSessionViewer *gui);  Build session frame. ;  ; void CheckAutoEnPack (Bool_t checked=kTRUE);  ; Int_t GetLogLevel () const;  ; TGTab * GetTab () const;  ; TClass * IsA () const override;  ; void OnApplyLogLevel ();  Apply selected log level on current session. ;  ; void OnApplyParallel ();  Apply selected number of workers on current Proof session. ;  ; void OnBtnAddClicked ();  Open file dialog and add selected package file to the list. ;  ; void OnBtnDisconnectClicked ();  Disconnect from current Proof session. ;  ; void OnBtnDownClicked ();  Move selected package entry one position down in the list. ;  ; void OnBtnGetQueriesClicked ();  Get list of queries from current Proof server and populate the list tree. ;  ; void OnBtnNewQueryClicked ();  Call ""New Query"" Dialog. ;  ; void OnBtnRemoveClicked ();  Remove selected package from the list. ;  ; void OnBtnRemoveDSet ();  Remove dataset from the list and from the cluster. ;  ; void OnBtnShowLogClicked ();  Show session log. ;  ; void OnBtnUpClicked ();  Move selected package entry one position up in the list. ;  ; void OnBtnUploadDSet ();  Open Upload Dataset dialog. ;  ; void OnBtnVerifyDSet ();  Verify that the files in the selected dataset are present on the cluster. ;  ; void OnClearPackages ();  Clear (disable) all packages in the current session. ;  ; void OnCommandLine ();  Command line handling. ;  ; void OnDisablePackages ();  Disable selected package(s) in the current session. ;  ; void OnEnablePackages ();  Enable selected pac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionFrame.html:718,log,log,718,doc/master/classTSessionFrame.html,https://root.cern,https://root.cern/doc/master/classTSessionFrame.html,1,['log'],['log']
Testability,". ROOT: TSessionViewer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TSessionViewer Class ReferenceGUI » Session Viewer. ; Widget used to manage PROOF or local sessions, PROOF connections, queries construction and results handling. ; Definition at line 515 of file TSessionViewer.h. Public Member Functions;  TSessionViewer (const char *title, Int_t x, Int_t y, UInt_t w, UInt_t h);  Main Session viewer constructor. ;  ;  TSessionViewer (const char *title=""ROOT Session Viewer"", UInt_t w=550, UInt_t h=320);  Main Session viewer constructor. ;  ;  ~TSessionViewer () override;  Destructor. ;  ; virtual void Build ();  Build main session viewer frame and subframes. ;  ; void ChangeRightLogo (const char *name);  Change the right logo (used for animation). ;  ; void CleanupSession ();  Clean-up Proof session. ;  ; void CloseWindow () override;  Close main Session Viewer window. ;  ; void DeleteQuery ();  Delete query from list tree and ask user if they want to delete it also from server. ;  ; void DisableTimer ();  Disable animation timer. ;  ; void EditQuery ();  Edit currently selected query. ;  ; void EnableTimer ();  Enable animation timer. ;  ; TSessionDescription * GetActDesc () const;  ; const TGPicture * GetBasePict () const;  ; TGPopupMenu * GetCascadeMenu () const;  ; TGHProgressBar * GetConnectProg () const;  ; TContextMenu * GetContextMenu () const;  ; TSessionInputFrame * GetInputFrame () const;  ; const TGPicture * GetLocalPict () const;  ; TGPopupMenu * GetOptionsMenu () const;  ; TSessionOutputFrame * GetOutputFrame () const;  ; TGPopupMenu * GetPopupQry () const;  ; TGPopupMenu * GetPopupSrv () const;  ; const TGPicture * GetProofConPict () const;  ; const TGPicture * GetProofDisconPict () const;  ; const TGPicture * GetQueryConPict () const;  ; const TGPicture * GetQueryDisconPict ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionViewer.html:911,log,logo,911,doc/master/classTSessionViewer.html,https://root.cern,https://root.cern/doc/master/classTSessionViewer.html,1,['log'],['logo']
Testability,". ROOT: TUnfold tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; TUnfold tutorialsTutorials. ; Test programs for the classes TUnfold and related. ; TUnfold is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.; TUnfold is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.; You should have received a copy of the GNU General Public License along with TUnfold. If not, see http://www.gnu.org/licenses/. . Files; file  testUnfold1.C;   Test program for the classes TUnfold and related. ;  ; file  testUnfold2.C;   Test program as an example for a user specific regularisation scheme. ;  ; file  testUnfold3.C;   Simple Test program for the class TUnfoldDensity. ;  ; file  testUnfold4.C;   Test program for the class TUnfoldSys. ;  ; file  testUnfold5a.C;   Test program for the classes TUnfoldDensity and TUnfoldBinning ;  ; file  testUnfold5b.C;   Test program for the classes TUnfoldDensity and TUnfoldBinning. ;  ; file  testUnfold5c.C;   Test program for the classes TUnfoldDensity and TUnfoldBinning. ;  ; file  testUnfold5d.C;   Test program for the classes TUnfoldDensity and TUnfoldBinning. ;  ; file  testUnfold6.C;   Test program for the class TUnfoldBinning. ;  ; file  testUnfold7a.C;   Test program for the classes TUnfoldDensity and TUnfoldBinning. ;  ; file  testUnfold7b.C;   Test program for the classes TUnfoldDensity and TUnfoldBinning ;  ; file  testUnfold7c.C;   Test program for the classes TUnfoldDensity and TUnfoldBinning. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__unfold.html:146,Test,Test,146,doc/master/group__tutorial__unfold.html,https://root.cern,https://root.cern/doc/master/group__tutorial__unfold.html,13,['Test'],['Test']
Testability,". ROOT: TVirtualFFT Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Protected Attributes |; List of all members ; TVirtualFFT Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; TVirtualFFT is an interface class for Fast Fourier Transforms. ; The default FFT library is FFTW. To use it, FFTW3 library should already be installed, and ROOT should be have fftw3 module enabled, with the directories of fftw3 include file and library specified (see installation instructions). Function SetDefaultFFT() allows to change the default library. Available transform types:; FFT:; ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT) in one or more dimensions, -1 in the exponent; ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT) in one or more dimensions, +1 in the exponent; ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT) in one or more dimensions,; ""C2R"" - inverse transforms to ""R2C"", taking complex input (storing the non-redundant half of a logically Hermitian array) to real output; ""R2HC"" - a real-input DFT with output in ¡Èhalfcomplex¡É format, i.e. real and imaginary parts for a transform of size n stored as r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; ""HC2R"" - computes the reverse of FFTW_R2HC, above; ""DHT"" - computes a discrete Hartley transform. Sine/cosine transforms:; Different types of transforms are specified by parameter kind of the SineCosine() static function. 4 different kinds of sine and cosine transforms are available. DCT-I (REDFT00 in FFTW3 notation)- kind=0; DCT-II (REDFT01 in FFTW3 notation)- kind=1; DCT-III(REDFT10 in FFTW3 notation)- kind=2; DCT-IV (REDFT11 in FFTW3 notation)- kind=3; DST-I (RODFT00 in FFTW3 notation)- kind=4; DST-II (RODFT01 in FFTW3 notation)- kind=5; DST-III(RODFT10 in FFTW3 notation)- kind=6; DST-IV (RODFT11 in FFTW3 notation)- ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualFFT.html:1152,log,logically,1152,doc/master/classTVirtualFFT.html,https://root.cern,https://root.cern/doc/master/classTVirtualFFT.html,1,['log'],['logically']
Testability,". ROOT: TVirtualViewer3D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TVirtualViewer3D Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; Abstract 3D shapes viewer. ; The concrete implementations are:. TViewerX3D : X3d viewer; TGLViewer : OpenGL viewer. 3D Viewer Infrastructure Overview; The 3D Viewer infrastructure consists of:. TVirtualViewer3D interface: An abstract handle to the viewer, allowing client to test preferences, add objects, control the viewer via scripting (to be added) etc. -TBuffer3D class hierarchy: Used to describe 3D objects (""shapes""); filled /added by negotiation with viewer via TVirtualViewer3D. Together these allow clients to publish objects to any one of the 3D viewers (currently OpenGL/x3d,TPad), free of viewer specific drawing code. They allow our simple x3d viewer, and considerably more sophisticated OpenGL one to both work with both geometry libraries (g3d and geom) efficiently.; Publishing to a viewer consists of the following steps:. Create / obtain viewer handle; Begin scene on viewer; Fill mandatory parts of TBuffer3D describing object; Add to viewer; Fill optional parts of TBuffer3D if requested by viewer, and add again ... repeat 3/4/5 as required; End scene on viewer. Creating / Obtaining Viewer; Create/obtain the viewer handle via local/global pad - the viewer is always bound to a TPad object at present [This may be removed as a restriction in the future] . You should perform the publishing to the viewer described below in the Paint() method of the object you attach to the pad (via Draw()) TVirtualViewer3D * v = gPad->GetViewer3D(""xxxx"");; gPad#define gPadDefinition TVirtualPad.h:308; TVirtualViewer3DAbstract 3D shapes viewer.Definition TVirtualViewer3D.h:34; v@ vDefinition rootcling_impl.cxx:3699; "" xxxx"" is viewer type: OpenGL ""ogl"", X3D ""x3d"" or Pad ""pad"" (d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualViewer3D.html:585,test,test,585,doc/master/classTVirtualViewer3D.html,https://root.cern,https://root.cern/doc/master/classTVirtualViewer3D.html,1,['test'],['test']
Testability,. ROOT: TWebCanvas tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; TWebCanvas tutorialsTutorials. ; Examples showing the special features of web-based canvas. . Files; file  fonts_ttf.cxx;   Usage of TTF fonts in web canvas. ;  ; file  haxis.cxx;   Swap X/Y axes drawing and use to draw TH1 as bar and as markers. ;  ; file  inframe.cxx;   Drawing primitives inside and outside of the frame. ;  ; file  latex_url.cxx;   Use of interactive URL links inside TLatex. ;  ; file  logN.cxx;   Logarithmic scales support in web canvas. ;  ; file  triangle.cxx;  User class with custom JavaScript painter in the web canvas. ;  ; file  twoscales.cxx;   Two fully interactive scales in web canvas. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__webcanv.html:527,log,logN,527,doc/master/group__tutorial__webcanv.html,https://root.cern,https://root.cern/doc/master/group__tutorial__webcanv.html,2,"['Log', 'log']","['Logarithmic', 'logN']"
Testability,". ROOT: Tree Library. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files |; Namespaces |; Classes ; Tree Library. ; In order to store columnar datasets, ROOT provides the TTree, TChain, TNtuple and TNtupleD classes. ; The TTree class represents a columnar dataset. Any C++ type can be stored in the columns. The TTree has allowed to store about 1 EB of data coming from the LHC alone: it is demonstrated to scale and it's battle tested. It has been optimized during the years to reduce dataset sizes on disk and to deliver excellent runtime performance. It allows to access only part of the columns of the datasets, too. The TNtuple and TNtupleD classes are specialisations of the TTree class which can only hold single precision and double precision floating-point numbers respectively; The TChain is a collection of TTrees, which can be located also in different files. . Files; file  InternalTreeUtils.hxx;  ; file  RFriendInfo.hxx;  . Namespaces; namespace  ROOT::Internal::TreeUtils;  Namespace hosting functions and classes to retrieve tree information for internal use. ;  . Classes; struct  ROOT::TreeUtils::RFriendInfo;  Information about friend trees of a certain TTree or TChain object. More...;  ; class  TBasket;  Manages buffers for branches of a Tree. More...;  ; class  TBasketSQL;  Implement TBasket for a SQL backend. More...;  ; class  TBranch;  A TTree is a list of TBranches. More...;  ; class  TBranchClones;  A Branch for the case of an array of clone objects. More...;  ; class  TBranchElement;  A Branch for the case of an object. More...;  ; class  TBranchObject;  A Branch for the case of an object. More...;  ; class  TBranchRef;  A branch containing and managing a TRefTable for TRef autoloading. More...;  ; class  TBranchSTL;  A Branch handling STL collection of pointers (vectors, lists, queues, sets and multisets) while storing them in split mode. More...;  ; class  TBufferSQL;  Implement TBuffer for a SQL backend. More...;  ; cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tree.html:465,test,tested,465,doc/master/group__tree.html,https://root.cern,https://root.cern/doc/master/group__tree.html,1,['test'],['tested']
Testability,". ROOT: Tree tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Tree tutorialsTutorials. ; Example code which illustrates how to use ROOT trees and ntuples. . Files; file  basic.C;   Read data from an ascii file and create a root file with an histogram and an ntuple. ;  ; file  basic2.C;   Create can ntuple reading data from an ascii file. ;  ; file  bill.C;   Benchmark comparing row-wise and column-wise storage performance ;  ; file  cernbuild.C;   Read data (CERN staff) from an ascii file and create a root file with a Tree. ;  ; file  cernstaff.C;   Playing with a Tree containing variables of type character ;  ; file  circular.C;   Example of a circular Tree ;  ; file  clonesA_Event.C;  Example to write & read a Tree built with a complex class inheritance tree. ;  ; file  copytree.C;   Copy a subset of a Tree to a new Tree ;  ; file  copytree2.C;   Copy a subset of a Tree to a new Tree, one branch in a separate file. ;  ; file  copytree3.C;   Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries. ;  ; file  drawsparse.C;   Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord. ;  ; file  h1analysis.C;   Example of analysis class for the H1 data. ;  ; file  h1analysisProxy.C;  Example of analysis class for the H1 data using code generated by MakeProxy. ;  ; file  h1analysisTreeReader.C;  H1 analysis example expressed in terms of TTreeReader (see h1analysis.C). ;  ; file  h1chain.C;   Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ;  ; file  hsimpleProxy.C;   Used by hsimpleProxyDriver.C. ;  ; file  hsimpleProxyDriver.C;   This is the driver of the hsimpleProxy example. ;  ; file  hsimpleReader.C;   TTreeReader simplest example. ;  ; file  htest.C;   Save histograms in Tree branches ;  ; file  hvector.C;   Write and read STL vectors in ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__tree.html:412,Benchmark,Benchmark,412,doc/master/group__tutorial__tree.html,https://root.cern,https://root.cern/doc/master/group__tutorial__tree.html,1,['Benchmark'],['Benchmark']
Testability,". ROOT: Tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; Tutorials. ; A collection of C++ macros, Python scripts and notebooks helping to learn ROOT by example. ; You can execute the scripts in $ROOTSYS/tutorials (or sub-directories) by setting your current directory in the script directory or from any user directory with write access.; Several tutorials create new files. If you have write access to the tutorials directory, the new files will be created in the tutorials directory, otherwise they will be created in the user directory.; You can start by executing the standard ROOT demos with a session like:; root > .x demos.C; or; root > .x $ROOTSYS/tutorials/demos.C; You can execute the standard ROOT graphics benchmark with; root > .x benchmarks.C; or; root > .x $ROOTSYS/tutorials/benchmarks.C; The $ROOTSYS/tutorials directory includes several sub-directories: . Modules;  Histograms tutorials;  Examples showing the ""histograms' classes"" usage. ;  ;  Tree tutorials;  Example code which illustrates how to use ROOT trees and ntuples. ;  ;  Dataframe tutorials;  These examples show various features of RDataFrame: ROOT's declarative analysis interface. ;  ;  ROOT 7 tutorials;  Various examples showing the ROOT 7 interface. ;  ;  FOAM tutorials;  Examples showing how to use FOAM. ;  ;  Containers tutorials;  Examples showing the ""containers' classes"" usage. ;  ;  Event display tutorials;  Examples showing the ""Event display classes"" usage. ;  ;  Event display ROOT7 tutorials;  Examples showing the ""Event display classes"" usage with ROOT7. ;  ;  Geometry tutorials;  Various ROOT geometry package examples. ;  ;  Fast Fourier Transforms tutorials;  Example showing the Fast Fourier Transforms interface in ROOT. ;  ;  Fit Tutorials;  These tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code. ;  ;  RooFit Tutorials;  These tutorials illustrate the main feat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Tutorials.html:780,benchmark,benchmark,780,doc/master/group__Tutorials.html,https://root.cern,https://root.cern/doc/master/group__Tutorials.html,3,['benchmark'],"['benchmark', 'benchmarks']"
Testability,". ROOT: VecOps tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; VecOps tutorialsTutorials. ; These examples show the functionalities of the VecOps utilities. ; Please note that you can find the exhaustive documentation here in the reference guide. . Files; file  vo001_AdoptOrOwnMemory.C;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo001_AdoptOrOwnMemory.py;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo002_VectorCalculations.C;   In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars. ;  ; file  vo003_LogicalOperations.C;   In this tutorial we learn how the RVec class can be used to express logical operations. ;  ; file  vo004_SortAndSelect.C;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo004_SortAndSelect.py;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo005_Combinations.C;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo005_Combinations.py;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo006_IndexManipulation.C;   In this tutorial we demonstrate RVec helpers for index manipulation. ;  ; file  vo007_PhysicsHelpers.C;   In this tutorial we demonstrate RVec helpers for physics computations such as angle differences \(\Delta \phi\), the distance in the \(\eta\)- \(\phi\) plane \(\Delta R\) and the invariant mass. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__vecops.html:860,log,logical,860,doc/master/group__tutorial__vecops.html,https://root.cern,https://root.cern/doc/master/group__tutorial__vecops.html,1,['log'],['logical']
Testability,". ROOT: Webgui tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Webgui tutorialsTutorials. ; Webgui examples. . Files; file  geom_threejs.cxx;  The tutorial demonstrates how three.js model for geometry can be created and displayed. ;  ; file  ping.cxx;  Test suite for RWebWindow communication performance. ;  ; file  web_cms.cxx;  Web-based geometry viewer for CMS geometry. ;  ; file  webpanel.cxx;  This macro demonstrates simple openui5 panel, shown with RWebWindow. ;  ; file  webwindow.cxx;  Minimal server/client code for working with RWebWindow class. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__webgui.html:305,Test,Test,305,doc/master/group__tutorial__webgui.html,https://root.cern,https://root.cern/doc/master/group__tutorial__webgui.html,1,['Test'],['Test']
Testability,". ROOT: bindings/r/tests/Functor.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Typedefs |; Functions ; Functor.C File Reference. #include <TRInterface.h>; #include <TMath.h>. Include dependency graph for Functor.C:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  MyFunctor;  . Typedefs; typedef Double_t(* Function) (Double_t);  . Functions; void Functor ();  ;  RCPP_MODULE (MyFunctorModule);  . Typedef Documentation. ◆ Function. typedef Double_t(* Function) (Double_t). Definition at line 4 of file Functor.C. Function Documentation. ◆ Functor(). void Functor ; (; ). Definition at line 26 of file Functor.C. ◆ RCPP_MODULE(). RCPP_MODULE ; (; MyFunctorModule ; ). Definition at line 18 of file Functor.C. bindingsrtestsFunctor.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/bindings_2r_2tests_2Functor_8C.html:19,test,tests,19,doc/master/bindings_2r_2tests_2Functor_8C.html,https://root.cern,https://root.cern/doc/master/bindings_2r_2tests_2Functor_8C.html,1,['test'],['tests']
Testability,". ROOT: bindings/r/tests/Object.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions |; Variables ; Object.C File Reference. #include <TRInterface.h>. Include dependency graph for Object.C:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Functions; void Object ();  . Variables; ROOT::R::TRInterface & r = ROOT::R::TRInterface::Instance();  . Function Documentation. ◆ Object(). void Object ; (; ). Definition at line 6 of file Object.C. Variable Documentation. ◆ r. ROOT::R::TRInterface& r = ROOT::R::TRInterface::Instance(). Definition at line 4 of file Object.C. bindingsrtestsObject.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:12 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Object_8C.html:19,test,tests,19,doc/master/Object_8C.html,https://root.cern,https://root.cern/doc/master/Object_8C.html,1,['test'],['tests']
Testability,". ROOT: bindings/r/tests/ROOTR.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOTR.C File Reference. #include <TRInterface.h>. Include dependency graph for ROOTR.C:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Functions; Double_t myFunc (Double_t x);  ; void ROOTR ();  . Function Documentation. ◆ myFunc(). Double_t myFunc ; (; Double_t ; x). Definition at line 4 of file ROOTR.C. ◆ ROOTR(). void ROOTR ; (; ). Definition at line 9 of file ROOTR.C. bindingsrtestsROOTR.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:12 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ROOTR_8C.html:19,test,tests,19,doc/master/ROOTR_8C.html,https://root.cern,https://root.cern/doc/master/ROOTR_8C.html,1,['test'],['tests']
Testability,". ROOT: bindings/r/tests/ROOTR.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOTR.C. Go to the documentation of this file. 1//script to test Modules; 2#include<TRInterface.h>; 3 ; 4Double_t myFunc(Double_t x); 5{; 6 return cos(x);; 7}; 8 ; 9void ROOTR(); 10{; 11 ROOT::R::TRInterface &r=ROOT::R::TRInterface::Instance();; 12 r.SetVerbose(kFALSE);; 13 r.LoadModule(""Gpad"");; 14 r.LoadModule(""Hist"");; 15 r.LoadModule(""Rint"");; 16 ; 17 r<<""x<-seq(0,2*pi,by=.1)"";; 18 r<<""c1<-new(TCanvas,'c1','dlnorm')"";; 19 r<<""u <-new(TGraph,length(x),x,dlnorm(x))"" ;//TGraph(int,double*,double*); 20 r<<""u$Draw()"";; 21 ; 22 r<<""c2<-new(TCanvas,'c2','DiLog from TMath')"";; 23 r<<""o<- new(TF1,'dilog','TMath::DiLog(x)',0,2*pi)"";; 24 r<<""o$Draw()"";; 25// ; 26 r<<""c3<-new(TCanvas,'c3','Custom')"";; 27 r<<""i <- new(TF1,'f2','[0]*myFunc([1]*x)',0,2*pi)""; ; 28 r<<""i$SetRange(0,2*pi)"";; 29 r<<""i$SetParameter(0,4)"";; 30 r<<""i$SetParameter(1,pi/2)"";; 31 r<<""print(i$Eval(0))"";; 32 r<<""print(i$Eval(c(0,pi)))"";; 33 r<<""i$Draw('')"";; 34 ; 35// r<<""gApp<-new(TRint,'ROOTR')"";; 36// r<<""gApp$ProcessLine('cout<<\""Calling cout from TRint\""<<endl;')"";; 37 ; 38}; ROOTRvoid ROOTR()Definition ROOTR.C:9; myFuncDouble_t myFunc(Double_t x)Definition ROOTR.C:4; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Double_tdouble Double_tDefinition RtypesCore.h:59; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TRInterface.h; ROOT::R::TRInterfaceROOT R was implemented using the R Project library and the modules Rcpp and RInsideDefinition TRInterface.h:136; ROOT::R::TRInterface::Instancestatic TRInterface & Instance()static method to get an TRInterface instance referenceDefinition TRInterface.cxx:187; xDouble_t x[n]Definition legend1.C:17. bindingsrtestsROOTR.C. ROOT ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ROOTR_8C_source.html:19,test,tests,19,doc/master/ROOTR_8C_source.html,https://root.cern,https://root.cern/doc/master/ROOTR_8C_source.html,2,['test'],"['test', 'tests']"
Testability,". ROOT: core Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. core Directory Reference. Directory dependency graph for core:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  base;  ;  clingutils;  ;  cont;  ;  dictgen;  ;  foundation;  ;  gui;  ;  imt;  ;  macosx;  ;  meta;  ;  metacling;  ;  multiproc;  ;  rint;  ;  testsupport;  ;  thread;  ;  unix;  ;  winnt;  ;  zip;  . core. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_ed1accc5bc42b26d499c0c84b15b16d5.html:423,test,testsupport,423,doc/master/dir_ed1accc5bc42b26d499c0c84b15b16d5.html,https://root.cern,https://root.cern/doc/master/dir_ed1accc5bc42b26d499c0c84b15b16d5.html,1,['test'],['testsupport']
Testability,". ROOT: core/base/inc/TROOT.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Macros |; Functions |; Variables ; TROOT.h File Reference. #include ""TDirectory.h""; #include <atomic>; #include <string>; #include <vector>; #include <utility>. Include dependency graph for TROOT.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  ROOT::Internal::TParBranchProcessingRAII;  ; class  TROOT;  ROOT top level object description. More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Internal;  . Macros; #define gROOT   (ROOT::GetROOT());  . Functions; void ROOT::CallRecursiveRemoveIfNeeded (TObject &obj);  call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true. ;  ; void ROOT::DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ;  ; void ROOT::Internal::DisableParBranchProcessing ();  Globally disables the IMT use case of parallel branch processing, deactivating the corresponding locks. ;  ; void ROOT::EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ;  ; void ROOT::Internal::EnableParBranchProcessing ();  Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in ROOT, activating the required locks. ;  ; void ROOT::EnableThreadSafety ();  Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ;  ; TROOT * ROOT::GetROOT ();  ; TROOT * ROOT::Internal::GetROOT2 ();  ; UInt_t ROOT::GetThreadPoolSize ();  Returns the size of ROOT's thread pool. ;  ; Bool_t ROOT::IsImplicitMTEnabled ();  Returns true if ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8h.html:950,Test,TestBit,950,doc/master/TROOT_8h.html,https://root.cern,https://root.cern/doc/master/TROOT_8h.html,1,['Test'],['TestBit']
Testability,". ROOT: core/foundation/inc/ROOT/RLogger.hxx File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Macros |; Enumerations |; Functions ; RLogger.hxx File ReferenceCore ROOT classes » Base ROOT classes | ROOT7 classes. #include <atomic>; #include <list>; #include <memory>; #include <mutex>; #include <sstream>; #include <string>; #include <utility>. Include dependency graph for RLogger.hxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  ROOT::Experimental::Detail::RLogBuilder;  Builds a diagnostic entry, emitted by the static RLogManager upon destruction of this builder, where - by definition - the RLogEntry has been completely built. More...;  ; class  ROOT::Experimental::RLogChannel;  A log configuration for a channel, e.g. More...;  ; class  ROOT::Experimental::RLogDiagCount;  Keep track of emitted errors and warnings. More...;  ; class  ROOT::Experimental::RLogEntry;  A diagnostic that can be emitted by the RLogManager. More...;  ; class  ROOT::Experimental::RLogHandler;  Abstract RLogHandler base class. More...;  ; struct  ROOT::Experimental::RLogLocation;  A diagnostic location, part of an RLogEntry. More...;  ; class  ROOT::Experimental::RLogManager;  A RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the sum of RLogDiagCounts for all channels. More...;  ; class  ROOT::Experimental::RLogScopedDiagCount;  Object to count the number of warnings and errors emitted by a section of code, after construction of this type. More...;  ; class  ROOT::Experimental::RLogScopedVerbosity;  Change the verbosity level (global or specific to the RLogChannel passed to the constructor) for the lifetime of this object. More...;  . Namespaces; namespace  ROOT;  tbb:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RLogger_8hxx.html:976,log,log,976,doc/master/RLogger_8hxx.html,https://root.cern,https://root.cern/doc/master/RLogger_8hxx.html,1,['log'],['log']
Testability,". ROOT: geom/geom/inc/TGeoNode.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TGeoNode.h. Go to the documentation of this file. 1// @(#)root/geom:$Id$; 2// Author: Andrei Gheata 24/10/01; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TGeoNode; 13#define ROOT_TGeoNode; 14 ; 15#include ""TGeoAtt.h""; 16 ; 17#include ""TNamed.h""; 18 ; 19#include ""TGeoVolume.h""; 20 ; 21#include ""TGeoPatternFinder.h""; 22 ; 23// forward declarations; 24class TString;; 25class TGeoVolume;; 26class TGeoShape;; 27class TGeoMedium;; 28class TGeoMatrix;; 29class TGeoHMatrix;; 30class TGeoExtension;; 31 ; 32////////////////////////////////////////////////////////////////////////////; 33// //; 34// TGeoNode - base class for logical nodes. They represent volumes //; 35// positioned inside a mother volume //; 36// //; 37////////////////////////////////////////////////////////////////////////////; 38 ; 39class TGeoNode : public TNamed, public TGeoAtt {; 40protected:; 41 TGeoVolume *fVolume = nullptr; // volume associated with this; 42 TGeoVolume *fMother = nullptr; // mother volume; 43 Int_t fNumber = 0; // copy number; 44 Int_t fNovlp = 0; // number of overlaps; 45 Int_t *fOverlaps = nullptr; //[fNovlp] list of indices for overlapping brothers; 46 TGeoExtension *fUserExtension = nullptr; //! Transient user-defined extension to volumes; 47 TGeoExtension *fFWExtension = nullptr; //! Transient framework-defined extension to volumes; 48 ; 49 void CopyOverlaps(Int_t *ovlp, Int_t novlp);; 50 ; 51private:; 52 TGeoNode(const TGeoNode &) = delete;; 53 TGeoNode &operator=(const TGeoNode &) = delete;; 54 ; 55public:; 56 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoNode_8h_source.html:1100,log,logical,1100,doc/master/TGeoNode_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoNode_8h_source.html,1,['log'],['logical']
Testability,". ROOT: graf3d/eve7/glu/mesh.c File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Macros |; Functions ; mesh.c File Reference. #include ""gluos.h""; #include <stddef.h>; #include <assert.h>; #include ""mesh.h""; #include ""memalloc.h"". Include dependency graph for mesh.c:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Macros; #define FALSE   0;  ; #define TRUE   1;  . Functions; GLUhalfEdge * __gl_meshAddEdgeVertex (GLUhalfEdge *eOrg);  ; void __gl_meshCheckMesh (GLUmesh *mesh);  ; GLUhalfEdge * __gl_meshConnect (GLUhalfEdge *eOrg, GLUhalfEdge *eDst);  ; int __gl_meshDelete (GLUhalfEdge *eDel);  ; void __gl_meshDeleteMesh (GLUmesh *mesh);  ; GLUhalfEdge * __gl_meshMakeEdge (GLUmesh *mesh);  ; GLUmesh * __gl_meshNewMesh (void);  ; int __gl_meshSplice (GLUhalfEdge *eOrg, GLUhalfEdge *eDst);  ; GLUhalfEdge * __gl_meshSplitEdge (GLUhalfEdge *eOrg);  ; GLUmesh * __gl_meshUnion (GLUmesh *mesh1, GLUmesh *mesh2);  ; void __gl_meshZapFace (GLUface *fZap);  ; static GLUface * allocFace ();  ; static GLUvertex * allocVertex ();  ; static void KillEdge (GLUhalfEdge *eDel);  ; static void KillFace (GLUface *fDel, GLUface *newLface);  ; static void KillVertex (GLUvertex *vDel, GLUvertex *newOrg);  ; static GLUhalfEdge * MakeEdge (GLUhalfEdge *eNext);  ; static void MakeFace (GLUface *newFace, GLUhalfEdge *eOrig, GLUface *fNext);  ; static void MakeVertex (GLUvertex *newVertex, GLUhalfEdge *eOrig, GLUvertex *vNext);  ; static void Splice (GLUhalfEdge *a, GLUhalfEdge *b);  . Macro Definition Documentation. ◆ FALSE. #define FALSE   0. Definition at line 45 of file mesh.c. ◆ TRUE. #define TRUE   1. Definition at line 42 of file mesh.c. Function Documentation. ◆ __gl_meshAddEdgeVertex(). GLUhalfEdge * __gl_meshAddEdgeVertex ; (; GLUhalfEdge * ; eOrg). Definition at line 441 of file mesh.c. ◆ __gl_meshCheckMesh(). void __gl_meshCheckMesh ; (; GLUmesh * ; mesh). Definition at line 737 of file mesh.c. ◆ __gl_m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/mesh_8c.html:224,assert,assert,224,doc/master/mesh_8c.html,https://root.cern,https://root.cern/doc/master/mesh_8c.html,1,['assert'],['assert']
Testability,". ROOT: graf3d/eve7/glu/normal.c File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Macros |; Functions ; normal.c File Reference. #include ""gluos.h""; #include ""mesh.h""; #include ""tess.h""; #include ""normal.h""; #include <math.h>; #include <assert.h>. Include dependency graph for normal.c:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Macros; #define ABS(x)   ((x) < 0 ? -(x) : (x));  ; #define Dot(u, v)   (u[0]*v[0] + u[1]*v[1] + u[2]*v[2]);  ; #define FALSE   0;  ; #define S_UNIT_X   1.0;  ; #define S_UNIT_Y   0.0;  ; #define TRUE   1;  . Functions; void __gl_projectPolygon (GLUtesselator *tess);  ; static void CheckOrientation (GLUtesselator *tess);  ; static void ComputeNormal (GLUtesselator *tess, GLdouble norm[3]);  ; static int LongAxis (GLdouble v[3]);  . Macro Definition Documentation. ◆ ABS. #define ABS; (;  ; x);    ((x) < 0 ? -(x) : (x)). Definition at line 65 of file normal.c. ◆ Dot. #define Dot; (;  ; u, .  ; v . );    (u[0]*v[0] + u[1]*v[1] + u[2]*v[2]). Definition at line 49 of file normal.c. ◆ FALSE. #define FALSE   0. Definition at line 46 of file normal.c. ◆ S_UNIT_X. #define S_UNIT_X   1.0. Definition at line 190 of file normal.c. ◆ S_UNIT_Y. #define S_UNIT_Y   0.0. Definition at line 191 of file normal.c. ◆ TRUE. #define TRUE   1. Definition at line 43 of file normal.c. Function Documentation. ◆ __gl_projectPolygon(). void __gl_projectPolygon ; (; GLUtesselator * ; tess). Definition at line 198 of file normal.c. ◆ CheckOrientation(). static void CheckOrientation ; (; GLUtesselator * ; tess). static . Definition at line 141 of file normal.c. ◆ ComputeNormal(). static void ComputeNormal ; (; GLUtesselator * ; tess, . GLdouble ; norm[3] . ). static . Definition at line 76 of file normal.c. ◆ LongAxis(). static int LongAxis ; (; GLdouble ; v[3]). static . Definition at line 67 of file normal.c. graf3deve7glunormal.c. ROOT master - Reference Guide Generated on Tue Nov 5",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/normal_8c.html:285,assert,assert,285,doc/master/normal_8c.html,https://root.cern,https://root.cern/doc/master/normal_8c.html,1,['assert'],['assert']
Testability,". ROOT: io/io/inc/TFile.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Macros ; TFile.h File Reference. #include <atomic>; #include <string>; #include ""Compression.h""; #include ""TDirectoryFile.h""; #include ""TUrl.h""; #include ""ROOT/RConcurrentHashColl.hxx""; #include ""ROOT/TRWSpinLock.hxx""; #include <mutex>. Include dependency graph for TFile.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; struct  TFile::InfoListRet;  Simple struct of the return value of GetStreamerInfoListImpl. More...;  ; class  TFile;  A ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-like logical structure, possibly including subdirectory hierarchies. More...;  ; class  TFileOpenHandle;  Class holding info about the file being opened. More...;  . Macros; #define gFile   (TFile::CurrentFile());  . Macro Definition Documentation. ◆ gFile. #define gFile   (TFile::CurrentFile()). Definition at line 347 of file TFile.h. ioioincTFile.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8h.html:883,log,logical,883,doc/master/TFile_8h.html,https://root.cern,https://root.cern/doc/master/TFile_8h.html,1,['log'],['logical']
Testability,". ROOT: io/io/src/TFile.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TFile.cxx. Go to the documentation of this file. 1// @(#)root/io:$Id: 3a19890259ad6443ee313e090166614971ad4296 $; 2// Author: Rene Brun 28/11/94; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/**; 13\file TFile.cxx; 14\class TFile; 15\ingroup IO; 16\brief A ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-like logical structure, possibly including subdirectory hierarchies.; 17\sa \ref IO; 18\sa \ref rootio (or `io/doc/TFile` folder in your codebase); 19 ; 20<details>; 21<summary>ROOT file data format specification</summary>; 22 ; 23A ROOT file is composed of a header, followed by consecutive data records; 24(`TKey` instances) with a well defined format.; 25 ; 26The first data record starts at byte fBEGIN (currently set to kBEGIN).; 27Bytes 1->kBEGIN contain the file description, when fVersion >= 1000000; 28it is a large file (> 2 GB) and the offsets will be 8 bytes long and; 29fUnits will be set to 8:; 30 ; 31Byte Range | Record Name | Description; 32----------------|-------------|------------; 331->4 | ""root"" | Root file identifier; 345->8 | fVersion | File format version; 359->12 | fBEGIN | Pointer to first data record; 3613->16 [13->20] | fEND | Pointer to first free word at the EOF; 3717->20 [21->28] | fSeekFree | Pointer to FREE data record; 3821->24 [29->32] | fNbytesFree | Number of bytes in FREE data record; 3925->28 [33->36] | nfree | Number of free data records; 4029->32 [37->40] | fNbytesName | Number of bytes in TNamed at creation time; 4133->33 [41->41] | f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:819,log,logical,819,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['log'],['logical']
Testability,". ROOT: math/genvector/inc/Math/GenVector/etaMax.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. etaMax.h. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Authors: W. Brown, M. Fischler, L. Moneta 2005; 3 ; 4 /**********************************************************************; 5 * *; 6 * Copyright (c) 2005 , FNAL MathLib Team *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11 ; 12// Header source file for function etaMax; 13//; 14// Created by: Mark Fischler at Thu Jun 2 2005; 15 ; 16 ; 17#ifndef ROOT_Math_GenVector_etaMax; 18#define ROOT_Math_GenVector_etaMax 1; 19 ; 20 ; 21#include <limits>; 22#include <cmath>; 23 ; 24 ; 25namespace ROOT {; 26 ; 27 namespace Math {; 28 ; 29 /**; 30 The following function could be called to provide the maximum possible; 31 value of pseudorapidity for a non-zero rho. This is log ( max/min ); 32 where max and min are the extrema of positive values for type; 33 long double.; 34 */; 35 inline; 36 long double etaMax_impl() {; 37 using std::log;; 38 return log ( std::numeric_limits<long double>::max()/256.0l ) -; 39 log ( std::numeric_limits<long double>::denorm_min()*256.0l ); 40 + 16.0 * log(2.0);; 41 // Actual usage of etaMax() simply returns the number 22756, which is; 42 // the answer this would supply, rounded to a higher integer.; 43 }; 44 ; 45 /**; 46 Function providing the maximum possible value of pseudorapidity for; 47 a non-zero rho, in the Scalar type with the largest dynamic range.; 48 */; 49 template <class T>; 50 inline; 51 T etaMax() {; 52 return static_cast<T>(22756.0);; 53 }; 54 ; 55 } // namespace Math; 56 ; 57} // namespace ROOT; 58 ; 59 ; 60#endif /* ROOT_Math_GenVector_etaMax */; MathNamespace for new Math classes and functions.; ROOT::Math::etaMax_impllong double etaMax_impl()The following function could be called to provide the maximum possible value of pseudorapidity for a ...Definition etaMa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/etaMax_8h_source.html:943,log,log,943,doc/master/etaMax_8h_source.html,https://root.cern,https://root.cern/doc/master/etaMax_8h_source.html,1,['log'],['log']
Testability,". ROOT: math/mathcore/inc/Fit/LogLikelihoodFCN.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. LogLikelihoodFCN.h. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Author: L. Moneta Fri Aug 17 14:29:24 2007; 3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class LogLikelihoodFCN; 12 ; 13#ifndef ROOT_Fit_LogLikelihoodFCN; 14#define ROOT_Fit_LogLikelihoodFCN; 15 ; 16#include ""ROOT/EExecutionPolicy.hxx""; 17#include ""Fit/BasicFCN.h""; 18#include ""Fit/FitUtil.h""; 19#include ""Fit/UnBinData.h""; 20#include ""Math/IParamFunction.h""; 21 ; 22#include <memory>; 23#include <vector>; 24 ; 25namespace ROOT {; 26 ; 27 namespace Fit {; 28 ; 29 ; 30//___________________________________________________________________________________; 31/**; 32 LogLikelihoodFCN class; 33 for likelihood fits; 34 ; 35 it is template to distinguish gradient and non-gradient case; 36 ; 37 @ingroup FitMethodFunc; 38*/; 39template<class DerivFunType,class ModelFunType = ROOT::Math::IParamMultiFunction>; 40class LogLikelihoodFCN : public BasicFCN<DerivFunType,ModelFunType,UnBinData> {; 41 ; 42public:; 43 ; 44 typedef typename ModelFunType::BackendType T;; 45 typedef BasicFCN<DerivFunType,ModelFunType,UnBinData> BaseFCN;; 46 ; 47 typedef ::ROOT::Math::BasicFitMethodFunction<DerivFunType> BaseObjFunction;; 48 typedef typename BaseObjFunction::BaseFunction BaseFunction;; 49 ; 50 typedef ::ROOT::Math::IParamMultiFunctionTempl<T> IModelFunction;; 51 typedef typename BaseObjFunction::Type_t Type_t;; 52 ; 53 ; 54 /**; 55 Constructor from unbin data set and model function (pdf); 56 */; 57 LogLikelihoodFCN (const std::shared_ptr<UnBinData> & data, const std::shared_ptr<IModelFunction> & func, int weight = 0, bool extended = false, const ::ROOT::EE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/LogLikelihoodFCN_8h_source.html:30,Log,LogLikelihoodFCN,30,doc/master/LogLikelihoodFCN_8h_source.html,https://root.cern,https://root.cern/doc/master/LogLikelihoodFCN_8h_source.html,3,['Log'],['LogLikelihoodFCN']
Testability,". ROOT: math/mathcore/src/Fitter.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Fitter.cxx. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Author: L. Moneta Mon Sep 4 17:00:10 2006; 3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Implementation file for class Fitter; 12 ; 13 ; 14#include ""Fit/Fitter.h""; 15#include ""Fit/Chi2FCN.h""; 16#include ""Fit/PoissonLikelihoodFCN.h""; 17#include ""Fit/LogLikelihoodFCN.h""; 18#include ""Math/Minimizer.h""; 19#include ""Math/MinimizerOptions.h""; 20#include ""Math/FitMethodFunction.h""; 21#include ""Fit/BasicFCN.h""; 22#include ""Fit/BinData.h""; 23#include ""Fit/UnBinData.h""; 24#include ""Fit/FcnAdapter.h""; 25#include ""Fit/FitConfig.h""; 26#include ""Fit/FitResult.h""; 27#include ""Math/Error.h""; 28 ; 29#include <memory>; 30 ; 31#include ""Math/IParamFunction.h""; 32 ; 33#include ""Math/MultiDimParamFunctionAdapter.h""; 34 ; 35// #include ""TMatrixDSym.h""; 36// for debugging; 37//#include ""TMatrixD.h""; 38// #include <iomanip>; 39 ; 40namespace ROOT {; 41 ; 42 namespace Fit {; 43 ; 44// use a static variable to get default minimizer options for error def; 45// to see if user has changed it later on. If it has not been changed we set; 46// for the likelihood method an error def of 0.5; 47// t.b.d : multiply likelihood by 2 so have same error def definition as chi2; 48 double gDefaultErrorDef = ROOT::Math::MinimizerOptions::DefaultErrorDef();; 49 ; 50 ; 51Fitter::Fitter(const std::shared_ptr<FitResult> & result) :; 52 fResult(result); 53{; 54 if (result->fFitFunc) SetFunction(*fResult->fFitFunc); // this will create also the configuration; 55 if (result->fObjFunc) fObjFunction = fResult->fObjFunc;; 56 if (result->fFitData) fData = fResult->fFitData;; 57}; 58 ; 59void Fitter::SetFunction(const I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Fitter_8cxx_source.html:658,Log,LogLikelihoodFCN,658,doc/master/Fitter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Fitter_8cxx_source.html,1,['Log'],['LogLikelihoodFCN']
Testability,". ROOT: math/mathcore/src/SpecFuncCephes.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. SpecFuncCephes.cxx. Go to the documentation of this file. 1//; 2//; 3// gamma and related functions from Cephes library; 4// see: http://www.netlib.org/cephes; 5//; 6// Copyright 1985, 1987, 2000 by Stephen L. Moshier; 7//; 8//; 9 ; 10#include ""SpecFuncCephes.h""; 11#include ""Math/Math.h""; 12 ; 13 ; 14#include <cmath>; 15 ; 16#include <limits>; 17 ; 18 ; 19 ; 20namespace ROOT {; 21namespace Math {; 22 ; 23namespace Cephes {; 24 ; 25 ; 26static double kBig = 4.503599627370496e15;; 27static double kBiginv = 2.22044604925031308085e-16;; 28 ; 29/* log( sqrt( 2*pi ) ) */; 30static double LS2PI = 0.91893853320467274178;; 31 ; 32 ; 33// incomplete gamma function (complement integral); 34// igamc(a,x) = 1 - igam(a,x); 35//; 36// inf.; 37// -; 38// 1 | | -t a-1; 39// = ----- | e t dt.; 40// - | |; 41// | (a) -; 42// x; 43//; 44//; 45 ; 46// In this implementation both arguments must be positive.; 47// The integral is evaluated by either a power series or; 48// continued fraction expansion, depending on the relative; 49// values of a and x.; 50 ; 51double igamc( double a, double x ); 52{; 53 ; 54 double ans, ax, c, yc, r, t, y, z;; 55 double pk, pkm1, pkm2, qk, qkm1, qkm2;; 56 ; 57 // LM: for negative values returns 0.0; 58 // This is correct if a is a negative integer since Gamma(-n) = +/- inf; 59 if (a <= 0) return 0.0;; 60 ; 61 if (x <= 0) return 1.0;; 62 ; 63 if( (x < 1.0) || (x < a) ); 64 return( 1.0 - igam(a,x) );; 65 ; 66 ax = a * std::log(x) - x - lgam(a);; 67 if( ax < -kMAXLOG ); 68 return( 0.0 );; 69 ; 70 ax = std::exp(ax);; 71 ; 72/* continued fraction */; 73 y = 1.0 - a;; 74 z = x + y + 1.0;; 75 c = 0.0;; 76 pkm2 = 1.0;; 77 qkm2 = x;; 78 pkm1 = x + 1.0;; 79 qkm1 = z * x;; 80 ans = pkm1/qkm1;; 81 ; 82 do; 83 {; 84 c += 1.0;; 85 y += 1.0;; 86 z += 2.0;; 87 yc = y * c;; 88 pk = pkm1 * z - pkm2 * yc;; 89 qk = qkm1 * z - qkm2 * yc;; 9",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/SpecFuncCephes_8cxx_source.html:688,log,log,688,doc/master/SpecFuncCephes_8cxx_source.html,https://root.cern,https://root.cern/doc/master/SpecFuncCephes_8cxx_source.html,1,['log'],['log']
Testability,". ROOT: math/mathcore/src/TRandom3.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TRandom3.cxx. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Author: Peter Malzacher 31/08/99; 3 ; 4/**; 5 ; 6\class TRandom3; 7 ; 8Random number generator class based on; 9 M. Matsumoto and T. Nishimura,; 10 Mersenne Twister: A 623-diminsionally equidistributed; 11 uniform pseudorandom number generator; 12 ACM Transactions on Modeling and Computer Simulation,; 13 Vol. 8, No. 1, January 1998, pp 3--30.; 14 ; 15For more information see the Mersenne Twister homepage; 16 [http://www.math.keio.ac.jp/~matumoto/emt.html]; 17 ; 18Advantage:; 19 ; 20- large period 2**19937 -1; 21- relatively fast (slightly slower than TRandom2 but much faster than TRandom1); 22 ; 23Drawback:; 24- a relative large internal state of 624 integers ; 25- generate only 32 random bits ; 26- not passing all the random generator tests. It fails some tests in TestU01; 27 (see [http://simul.iro.umontreal.ca/testu01/tu01.html]); 28 ; 29An altenativly excellent generator passing all tests of TestU01, having 61 random bits and ; 30fast as Mersenne and Twister is MIXMAX (TRandomMixMax). ; 31 ; 32@ingroup Random; 33 ; 34*/; 35 ; 36//////////////////////////////////////////////////////////////////////; 37// Aug.99 ROOT implementation based on CLHEP by P.Malzacher; 38//; 39// the original code contains the following copyright notice:; 40/* This library is free software; you can redistribute it and/or */; 41/* modify it under the terms of the GNU Library General Public */; 42/* License as published by the Free Software Foundation; either */; 43/* version 2 of the License, or (at your option) any later */; 44/* version. */; 45/* This library is distributed in the hope that it will be useful, */; 46/* but WITHOUT ANY WARRANTY; without even the implied warranty of */; 47/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. */; 48/* See the GNU Library Genera",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRandom3_8cxx_source.html:963,test,tests,963,doc/master/TRandom3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TRandom3_8cxx_source.html,2,['test'],['tests']
Testability,". ROOT: net/http/civetweb/md5.inl Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. md5.inl. Go to the documentation of this file. 1/*; 2 * This an amalgamation of md5.c and md5.h into a single file; 3 * with all static declaration to reduce linker conflicts; 4 * in Civetweb.; 5 *; 6 * The MD5_STATIC declaration was added to facilitate static; 7 * inclusion.; 8 * No Face Press, LLC; 9 */; 10 ; 11/* $Id: md5.h,v 1.4 2002/04/13 19:20:28 lpd Exp $ */; 12/*; 13 Independent implementation of MD5 (RFC 1321).; 14 ; 15 This code implements the MD5 Algorithm defined in RFC 1321, whose; 16 text is available at; 17 http://www.ietf.org/rfc/rfc1321.txt; 18 The code is derived from the text of the RFC, including the test suite; 19 (section A.5) but excluding the rest of Appendix A. It does not include; 20 any code or documentation that is identified in the RFC as being; 21 copyrighted.; 22 ; 23 The original and principal author of md5.h is L. Peter Deutsch; 24 <ghost@aladdin.com>. Other authors are noted in the change history; 25 that follows (in reverse chronological order):; 26 ; 27 2002-04-13 lpd Removed support for non-ANSI compilers; removed; 28 references to Ghostscript; clarified derivation from RFC 1321;; 29 now handles byte order either statically or dynamically.; 30 1999-11-04 lpd Edited comments slightly for automatic TOC extraction.; 31 1999-10-18 lpd Fixed typo in header comment (ansi2knr rather than md5);; 32 added conditionalization for C++ compilation from Martin; 33 Purschke <purschke@bnl.gov>.; 34 1999-05-03 lpd Original version.; 35 */; 36 ; 37#if !defined(md5_INCLUDED); 38#define md5_INCLUDED; 39 ; 40/*; 41 * This package supports both compile-time and run-time determination of CPU; 42 * byte order. If ARCH_IS_BIG_ENDIAN is defined as 0, the code will be; 43 * compiled to run only on little-endian CPUs; if ARCH_IS_BIG_ENDIAN is; 44 * defined as non-zero, the code will be compiled to run only on big-endian; 45 * CPUs; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/md5_8inl_source.html:756,test,test,756,doc/master/md5_8inl_source.html,https://root.cern,https://root.cern/doc/master/md5_8inl_source.html,1,['test'],['test']
Testability,". ROOT: tmva/tmva/inc/TMVA/Factory.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Factory.h. Go to the documentation of this file. 1// @(#)root/tmva $Id$; 2// Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag; 3// Updated by: Omar Zapata, Lorenzo Moneta, Sergei Gleyzer; 4 ; 5/**********************************************************************************; 6 * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; 7 * Package: TMVA *; 8 * Class : Factory *; 9 * *; 10 * *; 11 * Description: *; 12 * This is the main MVA steering class: it creates (books) all MVA methods, *; 13 * and guides them through the training, testing and evaluation phases. *; 14 * *; 15 * Authors (alphabetical): *; 16 * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; 17 * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; 18 * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; 19 * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; 20 * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; 21 * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; 22 * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; 23 * Omar Zapata <Omar.Zapata@cern.ch> - UdeA/ITM Colombia *; 24 * Lorenzo Moneta <Lorenzo.Moneta@cern.ch> - CERN, Switzerland *; 25 * Sergei Gleyzer <Sergei.Gleyzer@cern.ch> - U of Florida & CERN *; 26 * *; 27 * Copyright (c) 2005-2011: *; 28 * CERN, Switzerland *; 29 * U. of Victoria, Canada *; 30 * MPI-K Heidelberg, Germany *; 31 * U. of Bonn, Germany *; 32 * UdeA/ITM, Colombia *; 33 * U. of Florida, USA *; 34 * *; 35 * Redistribution and use in source and binary forms, with or without *; 36 * modification, are permitted according to the terms listed in LICENSE *; 37 * (see tmva/doc/LICENSE) *; 38 **********************************************************************************/; 39 ; 40#ifndef ROOT_T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2inc_2TMVA_2Factory_8h_source.html:757,test,testing,757,doc/master/tmva_2tmva_2inc_2TMVA_2Factory_8h_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2inc_2TMVA_2Factory_8h_source.html,1,['test'],['testing']
Testability,". ROOT: tmva/tmva/inc/TMVA/MsgLogger.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. MsgLogger.h. Go to the documentation of this file. 1// @(#)root/tmva $Id$; 2// Author: Attila Krasznahorkay, Andreas Hoecker, Joerg Stelzer, Eckhard von Toerne; 3 ; 4/**********************************************************************************; 5 * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; 6 * Package: TMVA *; 7 * Class : MsgLogger *; 8 * *; 9 * *; 10 * Description: *; 11 * TMVA output logger class producing nicely formatted log messages *; 12 * *; 13 * Author: *; 14 * Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch> - CERN, Switzerland *; 15 * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; 16 * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; 17 * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; 18 * *; 19 * Copyright (c) 2005-2011: *; 20 * CERN, Switzerland *; 21 * U. of Victoria, Canada *; 22 * MPI-K Heidelberg, Germany *; 23 * U. of Bonn, Germany *; 24 * *; 25 * Redistribution and use in source and binary forms, with or without *; 26 * modification, are permitted according to the terms listed in LICENSE *; 27 * (see tmva/doc/LICENSE) *; 28 **********************************************************************************/; 29 ; 30#ifndef ROOT_TMVA_MsgLogger; 31#define ROOT_TMVA_MsgLogger; 32 ; 33//////////////////////////////////////////////////////////////////////////; 34// //; 35// MsgLogger //; 36// //; 37// ostringstream derivative to redirect and format output //; 38// //; 39//////////////////////////////////////////////////////////////////////////; 40 ; 41// STL include(s):; 42#include <string>; 43#include <sstream>; 44#include <iostream>; 45#include <map>; 46#include <atomic>; 47 ; 48// ROOT include(s); 49#include ""TObject.h""; 50 ; 51#include ""TMVA/Types.h""; 52 ; 53// Local include(s):; 54 ; 55namespace TMVA {; 56 ; 57 class MsgLogger : public std::ostri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MsgLogger_8h_source.html:562,log,logger,562,doc/master/MsgLogger_8h_source.html,https://root.cern,https://root.cern/doc/master/MsgLogger_8h_source.html,2,['log'],"['log', 'logger']"
Testability,". ROOT: tree/tree/src/TTree.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TTree.cxx. Go to the documentation of this file. 1// @(#)root/tree:$Id$; 2// Author: Rene Brun 12/01/96; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11/**; 12 \defgroup tree Tree Library; 13 ; 14 In order to store columnar datasets, ROOT provides the TTree, TChain,; 15 TNtuple and TNtupleD classes.; 16 The TTree class represents a columnar dataset. Any C++ type can be stored in the; 17 columns. The TTree has allowed to store about **1 EB** of data coming from the LHC alone:; 18 it is demonstrated to scale and it's battle tested. It has been optimized during the years; 19 to reduce dataset sizes on disk and to deliver excellent runtime performance.; 20 It allows to access only part of the columns of the datasets, too.; 21 The TNtuple and TNtupleD classes are specialisations of the TTree class which can; 22 only hold single precision and double precision floating-point numbers respectively;; 23 The TChain is a collection of TTrees, which can be located also in different files.; 24 ; 25*/; 26 ; 27/** \class TTree; 28\ingroup tree; 29 ; 30A TTree represents a columnar dataset. Any C++ type can be stored in its columns.; 31 ; 32A TTree, often called in jargon *tree*, consists of a list of independent columns or *branches*,; 33represented by the TBranch class.; 34Behind each branch, buffers are allocated automatically by ROOT.; 35Such buffers are automatically written to disk or kept in memory until the size stored in the; 36attribute fMaxVirtualSize is reached.; 37Variables of one branch are written to the same buffer. A b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:985,test,tested,985,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['test'],['tested']
Testability,". ROOT: tutorials/dataframe/df001_introduction.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df001_introduction.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Basic RDataFrame usage. ; This tutorial illustrates the basic features of the RDataFrame class, a utility which allows to interact with data stored in TTrees following a functional-chain like approach.; ; // ## Preparation; ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *treeName, const char *fileName); {; ROOT::RDataFrame d(10);; d.Define(""b1"", [](ULong64_t entry) -> double { return entry; }, {""rdfentry_""}); .Define(""b2"", [](ULong64_t entry) -> int { return entry * entry; }, {""rdfentry_""}); .Snapshot(treeName, fileName);; }; ; int df001_introduction(); {; ; // We prepare an input tree to run on; auto fileName = ""df001_introduction.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame, a class that; // allows us to interact with the data contained in the tree.; // We select a default column, a *branch* to adopt ROOT jargon, which will; // be looked at if none is specified by the user when dealing with filters; // and actions.; ROOT::RDataFrame d(treeName, fileName, {""b1""});; ; // ## Operations on the dataframe; // We now review some *actions* which can be performed on the data frame.; // Actions can be divided into instant actions (e. g. Foreach()) and lazy; // actions (e. g. Count()), depending on whether they trigger the event; // loop immediately or only when one of the results is accessed for the; // first time. Actions that return ""something"" either return their result; // wrapped in a RResultPtr or in a RDataFrame.; // But first of all, let us define our cut-flow with two lambda; // functions. We can use free functions too.; auto cutb1 = [](double b1) { return b1 < 5.; };; auto cutb1b2 = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df001__introduction_8C.html:500,test,test,500,doc/master/df001__introduction_8C.html,https://root.cern,https://root.cern/doc/master/df001__introduction_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/dataframe/df001_introduction.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df001_introduction.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Basic usage of RDataFrame from python. ; This tutorial illustrates the basic features of the RDataFrame class, a utility which allows to interact with data stored in TTrees following a functional-chain like approach.; ; import ROOT; ; def fill_tree(treeName, fileName):; """"""A simple helper function to fill a test tree: this makes the example stand-alone.""""""; df = ROOT.RDataFrame(10); df.Define(""b1"", ""static_cast<double>(rdfentry_)"")\; .Define(""b2"", ""static_cast<int>(rdfentry_ * rdfentry_)"").Snapshot(treeName, fileName); ; # We prepare an input tree to run on; fileName = ""df001_introduction_py.root""; treeName = ""myTree""; fill_tree(treeName, fileName); ; ; # We read the tree from the file and create a RDataFrame, a class that; # allows us to interact with the data contained in the tree.; d = ROOT.RDataFrame(treeName, fileName); ; # Operations on the dataframe; # We now review some *actions* which can be performed on the data frame.; # Actions can be divided into instant actions (e. g. Foreach()) and lazy; # actions (e. g. Count()), depending on whether they trigger the event ; # loop immediately or only when one of the results is accessed for the ; # first time. Actions that return ""something"" either return their result ; # wrapped in a RResultPtr or in a RDataFrame.; # But first of all, let us we define now our cut-flow with two strings.; # Filters can be expressed as strings. The content must be C++ code. The; # name of the variables must be the name of the branches. The code is; # just-in-time compiled.; cutb1 = 'b1 < 5.'; cutb1b2 = 'b2 % 2 && b1 < 4.'; ; # `Count` action; # The `Count` allows to retrieve the number of the entries that passed the; # filters. Here we show how the automatic selection of the column kicks; #",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df001__introduction_8py.html:560,test,test,560,doc/master/df001__introduction_8py.html,https://root.cern,https://root.cern/doc/master/df001__introduction_8py.html,1,['test'],['test']
Testability,". ROOT: tutorials/dataframe/df002_dataModel.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df002_dataModel.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Show how to work with non-flat data models, e.g. ; vectors of tracks.; This tutorial shows the possibility to use data models which are more complex than flat ntuples with RDataFrame.; ; using FourVector = ROOT::Math::XYZTVector;; using FourVectorVec = std::vector<FourVector>;; using FourVectorRVec = ROOT::VecOps::RVec<FourVector>;; using CylFourVector = ROOT::Math::RhoEtaPhiVector;; ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *filename, const char *treeName); {; const double M = 0.13957; // set pi+ mass; TRandom3 R(1);; ; auto genTracks = [&](){; FourVectorVec tracks;; const auto nPart = R.Poisson(15);; tracks.reserve(nPart);; for (int j = 0; j < nPart; ++j) {; const auto px = R.Gaus(0, 10);; const auto py = R.Gaus(0, 10);; const auto pt = sqrt(px * px + py * py);; const auto eta = R.Uniform(-3, 3);; const auto phi = R.Uniform(0.0, 2 * TMath::Pi());; CylFourVector vcyl(pt, eta, phi);; // set energy; auto E = sqrt(vcyl.R() * vcyl.R() + M * M);; // fill track vector; tracks.emplace_back(vcyl.X(), vcyl.Y(), vcyl.Z(), E);; }; return tracks;; };; ; ROOT::RDataFrame d(64);; d.Define(""tracks"", genTracks).Snapshot<FourVectorVec>(treeName, filename, {""tracks""});; }; ; int df002_dataModel(); {; ; // We prepare an input tree to run on; auto fileName = ""df002_dataModel.root"";; auto treeName = ""myTree"";; fill_tree(fileName, treeName);; ; // We read the tree from the file and create a RDataFrame, a class that; // allows us to interact with the data contained in the tree.; ROOT::RDataFrame d(treeName, fileName, {""tracks""});; ; // ## Operating on branches which are collections of objects; // Here we deal with the simplest of the cuts: we decide to accept the event; // only if the num",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df002__dataModel_8C.html:657,test,test,657,doc/master/df002__dataModel_8C.html,https://root.cern,https://root.cern/doc/master/df002__dataModel_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/dataframe/df002_dataModel.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df002_dataModel.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Show how to work with non-flat data models, e.g. ; vectors of tracks.; This tutorial shows the possibility to use data models which are more complex than flat ntuples with RDataFrame.; ; import ROOT; ; # A simple helper function to fill a test tree: this makes the example stand-alone.; fill_tree_code = '''; using FourVector = ROOT::Math::XYZTVector;; using FourVectorVec = std::vector<FourVector>;; using CylFourVector = ROOT::Math::RhoEtaPhiVector;; ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *filename, const char *treeName); {; const double M = 0.13957; // set pi+ mass; TRandom3 R(1);; ; auto genTracks = [&](){; FourVectorVec tracks;; const auto nPart = R.Poisson(15);; tracks.reserve(nPart);; for (int j = 0; j < nPart; ++j) {; const auto px = R.Gaus(0, 10);; const auto py = R.Gaus(0, 10);; const auto pt = sqrt(px * px + py * py);; const auto eta = R.Uniform(-3, 3);; const auto phi = R.Uniform(0.0, 2 * TMath::Pi());; CylFourVector vcyl(pt, eta, phi);; // set energy; auto E = sqrt(vcyl.R() * vcyl.R() + M * M);; // fill track vector; tracks.emplace_back(vcyl.X(), vcyl.Y(), vcyl.Z(), E);; }; return tracks;; };; ; ROOT::RDataFrame d(64);; d.Define(""tracks"", genTracks).Snapshot<FourVectorVec>(treeName, filename, {""tracks""});; }; '''; ; # We prepare an input tree to run on; fileName = ""df002_dataModel_py.root""; treeName = ""myTree""; ROOT.gInterpreter.Declare(fill_tree_code); ROOT.fill_tree(fileName, treeName); ; # We read the tree from the file and create a RDataFrame, a class that; # allows us to interact with the data contained in the tree.; d = ROOT.RDataFrame(treeName, fileName); ; # Operating on branches which are collections of objects; # Here we deal with",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df002__dataModel_8py.html:484,test,test,484,doc/master/df002__dataModel_8py.html,https://root.cern,https://root.cern/doc/master/df002__dataModel_8py.html,2,['test'],['test']
Testability,". ROOT: tutorials/dataframe/df003_profiles.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df003_profiles.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use TProfiles with RDataFrame. ; This tutorial illustrates how to use TProfiles in combination with the RDataFrame. See the documentation of TProfile and TProfile2D to better understand the analogy of this code with the example one. ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *treeName, const char *fileName); {; ROOT::RDataFrame d(25000);; d.Define(""px"", []() { return gRandom->Gaus(); }); .Define(""py"", []() { return gRandom->Gaus(); }); .Define(""pz"", [](double px, double py) { return sqrt(px * px + py * py); }, {""px"", ""py""}); .Snapshot(treeName, fileName);; }; ; void df003_profiles(); {; // We prepare an input tree to run on; auto fileName = ""df003_profiles.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame.; ROOT::RDataFrame d(treeName, fileName);; ; // Create the profiles; auto hprof1d = d.Profile1D({""hprof1d"", ""Profile of py versus px"", 64, -4, 4}, ""px"", ""py"");; auto hprof2d =; d.Profile2D({""hprof2d"", ""Profile of pz versus px and py"", 40, -4, 4, 40, -4, 4, 0, 20}, ""px"", ""py"", ""pz"");; ; // And Draw; auto c1 = new TCanvas(""c1"", ""Profile histogram example"", 200, 10, 700, 500);; hprof1d->DrawClone();; auto c2 = new TCanvas(""c2"", ""Profile2D histogram example"", 200, 10, 700, 500);; hprof2d->DrawClone(""BOX"");; }; d#define d(i)Definition RSha256.hxx:102; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TCanvasThe Canvas class.Definition TCanvas.h:23; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df003__profiles_8C.html:501,test,test,501,doc/master/df003__profiles_8C.html,https://root.cern,https://root.cern/doc/master/df003__profiles_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/dataframe/df003_profiles.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df003_profiles.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use TProfiles with RDataFrame. ; This tutorial illustrates how to use TProfiles in combination with the RDataFrame. See the documentation of TProfile and TProfile2D to better understand the analogy of this code with the example one.; ; import ROOT; ; # A simple helper function to fill a test tree: this makes the example; # stand-alone.; def fill_tree(treeName, fileName):; d = ROOT.RDataFrame(25000); d.Define(""px"", ""gRandom->Gaus()"")\; .Define(""py"", ""gRandom->Gaus()"")\; .Define(""pz"", ""sqrt(px * px + py * py)"")\; .Snapshot(treeName, fileName); ; # We prepare an input tree to run on; fileName = ""df003_profiles_py.root""; treeName = ""myTree""; fill_tree(treeName, fileName); ; # We read the tree from the file and create a RDataFrame.; d = ROOT.RDataFrame(treeName, fileName); ; # Create the profiles; hprof1d = d.Profile1D((""hprof1d"", ""Profile of pz versus px"", 64, -4, 4), ""px"", ""py""); hprof2d = d.Profile2D((""hprof2d"", ""Profile of pz versus px and py"", 40, -4, 4, 40, -4, 4, 0, 20), ""px"", ""py"", ""pz""); ; # And Draw; c1 = ROOT.TCanvas(""c1"", ""Profile histogram example"", 200, 10, 700, 500); hprof1d.Draw(); c1.SaveAs(""df003_c1.png""); ; c2 = ROOT.TCanvas(""c2"", ""Profile2D histogram example"", 200, 10, 700, 500); hprof2d.Draw(); c2.SaveAs(""df003_c2.png""); ; print(""Saved figures to df003_*.png""); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; . DateFebruary 2017 ; AuthorDanilo Piparo (CERN) ; Definition in file df003_profiles.py. tutorialsdataframedf003_profiles.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df003__profiles_8py.html:531,test,test,531,doc/master/df003__profiles_8py.html,https://root.cern,https://root.cern/doc/master/df003__profiles_8py.html,1,['test'],['test']
Testability,". ROOT: tutorials/dataframe/df004_cutFlowReport.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df004_cutFlowReport.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Display cut/Filter efficiencies with RDataFrame. ; This tutorial shows how to get information about the efficiency of the filters applied; ; using FourVector = ROOT::Math::XYZTVector;; using FourVectors = std::vector<FourVector>;; using CylFourVector = ROOT::Math::RhoEtaPhiVector;; ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *treeName, const char *fileName); {; ROOT::RDataFrame d(50);; int i(0);; d.Define(""b1"", [&i]() { return (double)i; }); .Define(""b2"",; [&i]() {; auto j = i * i;; ++i;; return j;; }); .Snapshot(treeName, fileName);; }; ; void df004_cutFlowReport(); {; ; // We prepare an input tree to run on; auto fileName = ""df004_cutFlowReport.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame; ROOT::RDataFrame d(treeName, fileName, {""b1"", ""b2""});; ; // ## Define cuts and create the report; // Here we define two simple cuts; auto cut1 = [](double b1) { return b1 > 25.; };; auto cut2 = [](int b2) { return 0 == b2 % 2; };; ; // An optional string parameter name can be passed to the Filter method to create a named filter.; // Named filters work as usual, but also keep track of how many entries they accept and reject.; auto filtered1 = d.Filter(cut1, {""b1""}, ""Cut1"");; auto filtered2 = d.Filter(cut2, {""b2""}, ""Cut2"");; ; auto augmented1 = filtered2.Define(""b3"", [](double b1, int b2) { return b1 / b2; });; auto cut3 = [](double x) { return x < .5; };; auto filtered3 = augmented1.Filter(cut3, {""b3""}, ""Cut3"");; ; // Statistics are retrieved through a call to the Report method:; // when Report is called on the main RDataFrame object, it retrieves stats; // for all named filters declared up to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df004__cutFlowReport_8C.html:561,test,test,561,doc/master/df004__cutFlowReport_8C.html,https://root.cern,https://root.cern/doc/master/df004__cutFlowReport_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/dataframe/df005_fillAnyObject.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df005_fillAnyObject.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Using the generic Fill action. ; This tutorial shows how to fill any object the class of which exposes a Fill method.; ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *treeName, const char *fileName); {; ROOT::RDataFrame d(100);; auto i = 0.;; d.Define(""b1"", [&i]() { return i; }); .Define(""b2"",; [&i]() {; float j = i * i;; ++i;; return j;; }); .Snapshot(treeName, fileName);; }; ; int df005_fillAnyObject(); {; ; // We prepare an input tree to run on; auto fileName = ""df005_fillAnyObject.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame.; ROOT::RDataFrame d(treeName, fileName);; ; // ## Filling any object; // We now fill some objects which are instances of classes which expose a; // `Fill` method with some input arguments.; auto th1d = d.Fill<double>(TH1D(""th1d"", ""th1d"", 64, 0, 128), {""b1""});; auto th1i = d.Fill<float>(TH1I(""th1i"", ""th1i"", 64, 0, 128), {""b2""});; auto th2d = d.Fill<double, float>(TH2D(""th2d"", ""th2d"", 64, 0, 128, 64, 0, 1024), {""b1"", ""b2""});; ; auto c1 = new TCanvas();; th1d->DrawClone();; ; auto c2 = new TCanvas();; th1i->DrawClone();; ; auto c3 = new TCanvas();; th2d->DrawClone(""COLZ"");; ; return 0;; }; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1I1-D histogram with an int per channel (see TH1 documentation)Definition TH1.h:540; TH2D2-D histogram with a double per channel (see TH1 documentation)Defi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df005__fillAnyObject_8C.html:397,test,test,397,doc/master/df005__fillAnyObject_8C.html,https://root.cern,https://root.cern/doc/master/df005__fillAnyObject_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/dataframe/df006_ranges.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df006_ranges.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use Range to limit the amount of data processed. ; This tutorial shows how to express the concept of ranges when working with the RDataFrame.; ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *treeName, const char *fileName); {; ROOT::RDataFrame d(100);; int i(0);; d.Define(""b1"", [&i]() { return i; }); .Define(""b2"",; [&i]() {; float j = i * i;; ++i;; return j;; }); .Snapshot(treeName, fileName);; }; ; int df006_ranges(); {; ; // We prepare an input tree to run on; auto fileName = ""df006_ranges.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame.; ROOT::RDataFrame d(treeName, fileName);; ; // ## Usage of ranges; // Now we'll count some entries using ranges; auto c_all = d.Count();; ; // This is how you can express a range of the first 30 entries; auto d_0_30 = d.Range(30);; auto c_0_30 = d_0_30.Count();; ; // This is how you pick all entries from 15 onwards; auto d_15_end = d.Range(15, 0);; auto c_15_end = d_15_end.Count();; ; // We can use a stride too, in this case we pick an event every 3 entries; auto d_15_end_3 = d.Range(15, 0, 3);; auto c_15_end_3 = d_15_end_3.Count();; ; // The Range here acts first on the (whole) RDataFrame graph:; // Not only actions (like Count) but also filters and new columns can be added to it.; auto d_0_50 = d.Range(50);; auto c_0_50_odd_b1 = d_0_50.Filter(""1 == b1 % 2"").Count();; ; // An important thing to notice is that the counts of a filter are relative to the; // number of entries a filter ""sees"". Therefore, if a Range depends on a filter,; // the Range will act on the entries passing the filter only.; auto c_0_3_after_even_b1 = d.Filter(""0 == b1 % 2"").Range(0, 3).Count()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df006__ranges_8C.html:407,test,test,407,doc/master/df006__ranges_8C.html,https://root.cern,https://root.cern/doc/master/df006__ranges_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/dataframe/df007_snapshot.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df007_snapshot.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Write ROOT data with RDataFrame. ; This tutorial shows how to write out datasets in ROOT format using RDataFrame. ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *treeName, const char *fileName); {; ROOT::RDataFrame d(10000);; int i(0);; d.Define(""b1"", [&i]() { return i; }); .Define(""b2"",; [&i]() {; float j = i * i;; ++i;; return j;; }); .Snapshot(treeName, fileName);; }; ; int df007_snapshot(); {; // We prepare an input tree to run on; auto fileName = ""df007_snapshot.root"";; auto outFileName = ""df007_snapshot_output.root"";; auto outFileNameAllColumns = ""df007_snapshot_output_allColumns.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame; ROOT::RDataFrame d(treeName, fileName);; ; // ## Select entries; // We now select some entries in the dataset; auto d_cut = d.Filter(""b1 % 2 == 0"");; // ## Enrich the dataset; // Build some temporary columns: we'll write them out; auto d2 = d_cut.Define(""b1_square"", ""b1 * b1""); .Define(""b2_vector"",; [](float b2) {; std::vector<float> v;; for (int i = 0; i < 3; i++); v.push_back(b2 * i);; return v;; },; {""b2""});; ; // ## Write it to disk in ROOT format; // We now write to disk a new dataset with one of the variables originally; // present in the tree and the new variables.; // The user can explicitly specify the types of the columns as template; // arguments of the Snapshot method, otherwise they will be automatically; // inferred.; d2.Snapshot(treeName, outFileName, {""b1"", ""b1_square"", ""b2_vector""});; ; // Open the new file and list the columns of the tree; TFile f1(outFileName);; auto t = f1.Get<TTree>(treeName);; std::cout << ""These are the columns b1, b1_square an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df007__snapshot_8C.html:382,test,test,382,doc/master/df007__snapshot_8C.html,https://root.cern,https://root.cern/doc/master/df007__snapshot_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/dataframe/df007_snapshot.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df007_snapshot.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Write ROOT data with RDataFrame. ; This tutorial shows how to write out datasets in ROOT format using RDataFrame. ; import ROOT; ; # A simple helper function to fill a test tree: this makes the example stand-alone.; def fill_tree(treeName, fileName):; df = ROOT.RDataFrame(10000); df.Define(""b1"", ""(int) rdfentry_"")\; .Define(""b2"", ""(float) rdfentry_ * rdfentry_"").Snapshot(treeName, fileName); ; # We prepare an input tree to run on; fileName = ""df007_snapshot_py.root""; outFileName = ""df007_snapshot_output_py.root""; outFileNameAllColumns = ""df007_snapshot_output_allColumns_py.root""; treeName = ""myTree""; fill_tree(treeName, fileName); ; # We read the tree from the file and create a RDataFrame; d = ROOT.RDataFrame(treeName, fileName); ; # ## Select entries; # We now select some entries in the dataset; d_cut = d.Filter(""b1 % 2 == 0""); # ## Enrich the dataset; # Build some temporary columns: we'll write them out; ; getVector_code ='''; std::vector<float> getVector (float b2); {; std::vector<float> v;; for (int i = 0; i < 3; i++) v.push_back(b2*i);; return v;; }; '''; ROOT.gInterpreter.Declare(getVector_code); ; d2 = d_cut.Define(""b1_square"", ""b1 * b1"") \; .Define(""b2_vector"", ""getVector( b2 )""); ; # ## Write it to disk in ROOT format; # We now write to disk a new dataset with one of the variables originally; # present in the tree and the new variables.; # The user can explicitly specify the types of the columns as template; # arguments of the Snapshot method, otherwise they will be automatically; # inferred.; d2.Snapshot(treeName, outFileName, \; [""b1"", ""b1_square"", ""b2_vector""]); # Open the new file and list the columns of the tree; f1 = ROOT.TFile(outFileName); t = f1[treeName]; print(""These are the columns b1, b1_square and b2_vecto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df007__snapshot_8py.html:411,test,test,411,doc/master/df007__snapshot_8py.html,https://root.cern,https://root.cern/doc/master/df007__snapshot_8py.html,1,['test'],['test']
Testability,". ROOT: tutorials/dataframe/df028_SQliteIPLocation.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df028_SQliteIPLocation.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Plot the location of ROOT downloads reading a remote sqlite3 file. ; The world map is held by a TH2Poly histogram which, after filling, will show the world wide dispersion of ROOT's users. To histogram filling, is done thanks to a lambda expression having as input parameters the two columns of the database: ""IPLongitude' - for the longitude, and the; ""IPLatitude"" - for the latitude.; The data related to the latitude and the longitude has been provided from the; log files storing the users IP.; This product includes GeoLite2 data created by MaxMind, available from; <a href=""http://www.maxmind.com"">http://www.maxmind.com.; ; void df028_SQliteIPLocation() {; ; auto rdf = ROOT::RDF::FromSqlite(""http://root.cern/files/root_download_stats.sqlite"", ""SELECT * FROM accesslog;"");; ; auto f = TFile::Open(""http://root.cern/files/WM.root"");; auto worldMap = f->Get<TH2Poly>(""WMUSA"");; ; auto fillIPLocation = [&worldMap] ( const std::string &sLongitude, const std::string &sLatitude ) {; if (!( sLongitude == """" ) && !( sLatitude == """" )) {; auto latitude = std::stof(sLatitude);; auto longitude = std::stof(sLongitude);; worldMap->Fill(longitude, latitude);; }; };; ; rdf.Foreach( fillIPLocation, { ""IPLongitude"", ""IPLatitude"" } );; ; auto worldMapCanvas = new TCanvas();; worldMapCanvas->SetLogz();; worldMap->SetTitle(""ROOT Downloads per Location (GitHub excluded);Longitude;Latitude"");; worldMap->DrawClone(""colz"");; }; f#define f(i)Definition RSha256.hxx:104; TCanvasThe Canvas class.Definition TCanvas.h:23; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH2Poly2D Hist",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df028__SQliteIPLocation_8C.html:710,log,log,710,doc/master/df028__SQliteIPLocation_8C.html,https://root.cern,https://root.cern/doc/master/df028__SQliteIPLocation_8C.html,1,['log'],['log']
Testability,". ROOT: tutorials/eve7/eveGeoBrowser.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; eveGeoBrowser.C File Reference. #include <ROOT/REveGeoTopNode.hxx>; #include <ROOT/REveManager.hxx>. Include dependency graph for eveGeoBrowser.C:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Functions; void eveGeoBrowser (bool showDet=true);  ; TGeoNode * getNodeFromPath (TGeoNode *top, std::string path);  ; TGeoNode * rootgeom ();  ; TGeoNode * testCmsGeo ();  . Function Documentation. ◆ eveGeoBrowser(). void eveGeoBrowser ; (; bool ; showDet = true). Definition at line 169 of file eveGeoBrowser.C. ◆ getNodeFromPath(). TGeoNode * getNodeFromPath ; (; TGeoNode * ; top, . std::string ; path . ). Definition at line 9 of file eveGeoBrowser.C. ◆ rootgeom(). TGeoNode * rootgeom ; (; ). Definition at line 47 of file eveGeoBrowser.C. ◆ testCmsGeo(). TGeoNode * testCmsGeo ; (; ). Definition at line 20 of file eveGeoBrowser.C. tutorialseve7eveGeoBrowser.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/eveGeoBrowser_8C.html:538,test,testCmsGeo,538,doc/master/eveGeoBrowser_8C.html,https://root.cern,https://root.cern/doc/master/eveGeoBrowser_8C.html,3,['test'],['testCmsGeo']
Testability,". ROOT: tutorials/eve7/eveGeoBrowser.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. eveGeoBrowser.C. Go to the documentation of this file. 1 ; 2#include <ROOT/REveGeoTopNode.hxx>; 3#include <ROOT/REveManager.hxx>; 4 ; 5 ; 6namespace REX = ROOT::Experimental;; 7 ; 8 ; 9TGeoNode *getNodeFromPath(TGeoNode *top, std::string path); 10{; 11 TGeoNode *node = top;; 12 std::istringstream f(path);; 13 std::string s;; 14 while (getline(f, s, '/')); 15 node = node->GetVolume()->FindNode(s.c_str());; 16 ; 17 return node;; 18}; 19 ; 20TGeoNode* testCmsGeo(); 21{; 22 TFile::SetCacheFileDir(""."");; 23 ; 24 TGeoManager::Import(""https://root.cern/files/cms.root"");; 25 ; 26 gGeoManager->DefaultColors();; 27 gGeoManager->GetVolume(""TRAK"")->InvisibleAll();; 28 gGeoManager->GetVolume(""HVP2"")->SetTransparency(20);; 29 gGeoManager->GetVolume(""HVEQ"")->SetTransparency(20);; 30 gGeoManager->GetVolume(""YE4"")->SetTransparency(10);; 31 gGeoManager->GetVolume(""YE3"")->SetTransparency(20);; 32 gGeoManager->GetVolume(""RB2"")->SetTransparency(99);; 33 gGeoManager->GetVolume(""RB3"")->SetTransparency(99);; 34 gGeoManager->GetVolume(""COCF"")->SetTransparency(99);; 35 gGeoManager->GetVolume(""HEC1"")->SetLineColor(7);; 36 gGeoManager->GetVolume(""EAP1"")->SetLineColor(7);; 37 gGeoManager->GetVolume(""EAP2"")->SetLineColor(7);; 38 gGeoManager->GetVolume(""EAP3"")->SetLineColor(7);; 39 gGeoManager->GetVolume(""EAP4"")->SetLineColor(7);; 40 gGeoManager->GetVolume(""HTC1"")->SetLineColor(2);; 41 ; 42 TGeoNode* top = gGeoManager->GetTopVolume()->FindNode(""CMSE_1"");; 43 TGeoNode* n = getNodeFromPath(top, ""MUON_1"");; 44 return top;; 45}; 46 ; 47TGeoNode* rootgeom(); 48{; 49 TGeoManager *geom = new TGeoManager(""simple1"", ""Simple geometry"");; 50 ; 51 TGeoMaterial *matVacuum = new TGeoMaterial(""Vacuum"", 0,0,0);; 52 TGeoMaterial *matAl = new TGeoMaterial(""Al"", 26.98,13,2.7);; 53// //--- define some media; 54 TGeoMedium *Vacuum = new TGeoMedium(""Vacuum"",1, matVacuum);; 55 TGeoMedium *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/eveGeoBrowser_8C_source.html:586,test,testCmsGeo,586,doc/master/eveGeoBrowser_8C_source.html,https://root.cern,https://root.cern/doc/master/eveGeoBrowser_8C_source.html,1,['test'],['testCmsGeo']
Testability,". ROOT: tutorials/fit/TestBinomial.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TestBinomial.C File ReferenceTutorials » Fit Tutorials. Detailed Description; Perform a fit to a set of data with binomial errors like those derived from the division of two histograms. ; Three different fits are performed and compared:. simple least square fit to the divided histogram obtained from TH1::Divide with option b; least square fit to the TGraphAsymmErrors obtained from TGraphAsymmErrors::BayesDivide; likelihood fit performed on the dividing histograms using binomial statistics with the TBinomialEfficiency class. The first two methods are biased while the last one is statistical correct. Running the script passing an integer value n larger than 1, n fits are performed and the bias are also shown. To run the script :; to show the bias performing 100 fits for 1000 events per ""experiment""; root[0]: .x TestBinomial.C+; to show the bias performing 100 fits for 1000 events per ""experiment""; .x TestBinomial.C+(100, 1000). ; 32 68; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 0.350714; NDf = 3; Edm = 1.27001e-06; NCalls = 81; p0 = 0.694132 +/- 0.210029 ; p1 = 19.3471 +/- 5.85483 ; p2 = 5.2245 +/- 5.11013 ; ****************************************; Minimizer is Minuit2 / Migrad; MinFCN = 14.3081; Chi2 = 28.6162; NDf = 21; Edm = 4.11934e-08; NCalls = 91; p0 = 0.822966 +/- 0.0807557 (limited); p1 = 21.9819 +/- 2.14579 ; p2 = 3.36105 +/- 1.05866 ; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 1.64738; NDf = 5; Edm = 1.01171e-06; NCalls = 137; p0 = 0.677329 +/- 0.135567 (limited); p1 = 15.5028 +/- 4.11118 ; p2 = 4.10441 +/- 2.77044 ; ****************************************; Minimizer is Minuit2 / Migrad; MinFCN = 19.363; Chi2 = 38.7261; NDf = 25; Edm = 9.40378e-08; NCalls = 80; p0 = 0.778188 +/- 0.0815568 (limited); p1 = 23.7948 +/- 2.21356 ; p2 = 4.58769 +/- 1.24153 ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TestBinomial_8C.html:22,Test,TestBinomial,22,doc/master/TestBinomial_8C.html,https://root.cern,https://root.cern/doc/master/TestBinomial_8C.html,3,['Test'],['TestBinomial']
Testability,". ROOT: tutorials/fit/fit1.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. fit1.C File ReferenceTutorials » Fit Tutorials. Detailed Description; Simple fitting example (1-d histogram with an interpreted function) . ; TFile** fillrandom.root ; TFile* fillrandom.root ; KEY: TFormula form1;1 abs(sin(x)/x); KEY: TF1 sqroot;1 x*gaus(0) + [3]*form1; KEY: TH1F h1f;1 Test random numbers; Formula based function: sqroot ; sqroot : x*gaus(0) + [3]*form1 Ndim= 1, Npar= 4, Number= 0 ; Formula expression: ; x*[p0]*exp(-0.5*((x-[p1])/[p2])*((x-[p1])/[p2]))+[p3]*(abs(sin(x)/x)) ; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 198.935; NDf = 190; Edm = 1.49283e-07; NCalls = 149; p0 = 33.1658 +/- 0.545703 ; p1 = 4.00667 +/- 0.0165304 ; p2 = 0.984663 +/- 0.0128238 ; p3 = 63.4464 +/- 1.33233 ; fit1 : Real Time = 0.30 seconds Cpu Time = 0.30 seconds; ; #include ""TCanvas.h""; #include ""TFrame.h""; #include ""TBenchmark.h""; #include ""TString.h""; #include ""TF1.h""; #include ""TH1.h""; #include ""TFile.h""; #include ""TROOT.h""; #include ""TError.h""; #include ""TInterpreter.h""; #include ""TSystem.h""; #include ""TPaveText.h""; ; void fit1() {; TCanvas *c1 = new TCanvas(""c1_fit1"",""The Fit Canvas"",200,10,700,500);; c1->SetGridx();; c1->SetGridy();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderMode(-1);; c1->GetFrame()->SetBorderSize(5);; ; gBenchmark->Start(""fit1"");; //; // We connect the ROOT file generated in a previous tutorial; // (see <a href=""fillrandom.C.nbconvert.ipynb"">Filling histograms with random numbers from a function</a>); //; TString dir = gROOT->GetTutorialDir();; dir.Append(""/fit/"");; TFile *file = nullptr;; if (!gSystem->AccessPathName(""fillrandom.root"")) {; // file exists; file = TFile::Open(""fillrandom.root"");; } else {; gROOT->ProcessLine(Form("".x %s../hist/fillrandom.C(0)"",dir.Data()));; file = TFile::Open(""fillrandom.root"");; if (!file) return;; }; ; //; // The function ""ls()"" lists the d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fit1_8C.html:413,Test,Test,413,doc/master/fit1_8C.html,https://root.cern,https://root.cern/doc/master/fit1_8C.html,1,['Test'],['Test']
Testability,". ROOT: tutorials/fit/fitcont.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. fitcont.C File ReferenceTutorials » Fit Tutorials. Detailed Description; Example illustrating how to draw the n-sigma contour of a Minuit fit. ; To get the n-sigma contour the ERRDEF parameter in Minuit has to set to n^2. The fcn function has to be set before the routine is called.; WARNING!!! This test works only with TMinuit; The TGraph object is created via the interpreter. The user must cast it to a TGraph*. ; FCN=96.6163 FROM MIGRAD STATUS=CONVERGED 62 CALLS 63 TOTAL; EDM=2.07594e-08 STRATEGY= 1 ERROR MATRIX ACCURATE ; EXT PARAMETER STEP FIRST ; NO. NAME VALUE ERROR SIZE DERIVATIVE ; 1 Constant 1.43454e+02 2.29666e+00 9.00732e-03 -6.49594e-05; 2 Mean 1.60911e-02 1.30402e-02 6.28520e-05 3.57224e-03; 3 Sigma 9.87683e-01 9.45637e-03 1.24479e-05 2.14428e-02; ; #include <TCanvas.h>; #include <TGraph.h>; #include <TH1F.h>; #include <TMinuit.h>; #include <TVirtualFitter.h>; ; void fitcont(); {; //be sure default is Minuit since we will use gMinuit; TVirtualFitter::SetDefaultFitter(""Minuit"");; ; TCanvas *c1 = new TCanvas(""c1"");; TH1F *h = new TH1F(""h"",""My histogram"",100,-3,3);; h->FillRandom(""gaus"",6000);; h->Fit(""gaus"");; c1->Update();; ; TCanvas *c2 = new TCanvas(""c2"",""contours"",10,10,600,800);; c2->Divide(1,2);; c2->cd(1);; /*get first contour for parameter 1 versus parameter 2*/; TGraph *gr12 = (TGraph*)gMinuit->Contour(40,1,2);; gr12->Draw(""alp"");; c2->cd(2);; /*Get contour for parameter 0 versus parameter 2 for ERRDEF=2*/; gMinuit->SetErrorDef(4); //note 4 and not 2!; TGraph *gr2 = (TGraph*)gMinuit->Contour(80,0,2);; gr2->SetFillColor(42);; gr2->Draw(""alf"");; /*Get contour for parameter 0 versus parameter 2 for ERRDEF=1*/; gMinuit->SetErrorDef(1);; TGraph *gr1 = (TGraph*)gMinuit->Contour(80,0,2);; gr1->SetFillColor(38);; gr1->Draw(""lf"");; }; h#define h(i)Definition RSha256.hxx:106; TCanvas.h; TGraph.h; TH1F.h; TMinuit.h; gMinuitR__EXTERN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fitcont_8C.html:429,test,test,429,doc/master/fitcont_8C.html,https://root.cern,https://root.cern/doc/master/fitcont_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/fit/fitpanel_playback.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. fitpanel_playback.C File ReferenceTutorials » Fit Tutorials. Detailed Description; This file will test all the transient frames (aka Dialog windows) displayed in the fitpanel, as the rest of the functionality is tried automatically with the UnitTest.C unit. ; This implies trying the Set Parameters dialog and the Advanced one.; At every operation, a png file will be saved. These files will be later on compared with some references values, to have an estimation of the goodness of the test.; ; #include ""TSystem.h""; #include ""TSystemFile.h""; #include ""TRecorder.h""; #include ""Riostream.h""; ; int file_size(const char *filename); {; FileStat_t fs;; gSystem->GetPathInfo(filename, fs);; return (int)fs.fSize;; }; ; void fitpanel_playback(); {; auto * r = new TRecorder();; r->Replay(""http://root.cern/files/fitpanel_playback.root"");; ; // wait for the recorder to finish the replay; while (r->GetState() == TRecorder::kReplaying) {; gSystem->ProcessEvents();; gSystem->Sleep(1);; }; ; int Step_Err = 100;; int Step1_Ref = 15691;; int Step2_Ref = 15691;; int Step3_Ref = 17632;; int Step4_Ref = 12305;; int Step5_Ref = 11668;; ; int Step1_Size = file_size(""Step1.png"");; int Step2_Size = file_size(""Step2.png"");; int Step3_Size = file_size(""Step3.png"");; int Step4_Size = file_size(""Step4.png"");; int Step5_Size = file_size(""Step5.png"");; ; ; std::cout << ""**********************************************************************"" << std::endl;; std::cout << ""* Report of fitpanel_playback.C *"" << std::endl;; std::cout << ""**********************************************************************"" << std::endl;; ; if (TMath::Abs(Step1_Ref-Step1_Size) <= Step_Err) {; std::cout << ""Step1: ............................................................ OK"" << std::endl;; } else {; std::cout << ""Step1: ........................................................ FAILED"" <<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fitpanel__playback_8C.html:237,test,test,237,doc/master/fitpanel__playback_8C.html,https://root.cern,https://root.cern/doc/master/fitpanel__playback_8C.html,2,['test'],['test']
Testability,". ROOT: tutorials/fit/minuit2FitBench2D.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. minuit2FitBench2D.C File ReferenceTutorials » Fit Tutorials. Detailed Description; Minuit2 fit 2D benchmark. . ; FCN=7196.63 FROM MIGRAD STATUS=CONVERGED 169 CALLS 170 TOTAL; EDM=3.06509e-09 STRATEGY= 1 ERROR MATRIX UNCERTAINTY 2.0 per cent; EXT PARAMETER STEP FIRST ; NO. NAME VALUE ERROR SIZE DERIVATIVE ; 1 p0 5.28670e+01 2.67227e-01 1.71567e-03 1.41590e-04; 2 p1 2.00562e+00 9.99521e-03 -6.72962e-05 -5.71949e-03; 3 p2 -1.02279e+00 1.35440e-02 3.22465e-05 2.77027e-03; 4 p3 2.89928e+00 7.94099e-03 -9.38703e-05 -4.55759e-03; 5 p4 3.86656e+00 1.13330e-02 1.06568e-05 -2.11126e-03; Minuit, npass=0 : RT= 0.143 s, Cpu= 0.140 s; ****************************************; Minimizer is Fumili; Chi2 = 7196.63; NDf = 7366; NCalls = 30; p0 = 52.8672 +/- 0.262932 ; p1 = 2.00562 +/- 0.00992527 ; p2 = -1.02279 +/- 0.0135821 ; p3 = 2.89927 +/- 0.00781808 ; p4 = 3.86655 +/- 0.011235 ; Fumili, npass=0 : RT= 0.084 s, Cpu= 0.090 s; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 7196.63; NDf = 7366; Edm = 4.35806e-08; NCalls = 176; p0 = 52.867 +/- 0.264728 ; p1 = 2.00562 +/- 0.00995152 ; p2 = -1.0228 +/- 0.0137398 ; p3 = 2.89928 +/- 0.00798634 ; p4 = 3.86656 +/- 0.0112306 ; Minuit2, npass=0 : RT= 0.096 s, Cpu= 0.100 s; ****************************************; Minimizer is Minuit2 / Fumili; Chi2 = 7196.63; NDf = 7366; Edm = 2.49758e-07; NCalls = 99; p0 = 52.8669 +/- 0.265504 ; p1 = 2.00562 +/- 0.00992463 ; p2 = -1.0228 +/- 0.0135834 ; p3 = 2.89928 +/- 0.00792724 ; p4 = 3.86656 +/- 0.0113104 ; Fumili2, npass=0 : RT= 0.062 s, Cpu= 0.060 s; ; #include ""TH1.h""; #include ""TF1.h""; #include ""TH2D.h""; #include ""TF2.h""; #include ""TCanvas.h""; #include ""TStopwatch.h""; #include ""TSystem.h""; #include ""TRandom3.h""; #include ""TVirtualFitter.h""; #include ""TPaveLabel.h""; #include ""TStyle.h""; ; ; TF2 *fitFcn;; TH2D *histo;; ; // Quadratic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/minuit2FitBench2D_8C.html:237,benchmark,benchmark,237,doc/master/minuit2FitBench2D_8C.html,https://root.cern,https://root.cern/doc/master/minuit2FitBench2D_8C.html,1,['benchmark'],['benchmark']
Testability,". ROOT: tutorials/fit/qa2.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. qa2.C File ReferenceTutorials » Fit Tutorials. Detailed Description; Test generation of random numbers distributed according to a function defined by the user . ; ; #include <TBenchmark.h>; #include <TCanvas.h>; #include <TF1.h>; #include <TFormula.h>; #include <TH1F.h>; #include <TPaveLabel.h>; ; void qa2() {; //Fill a 1-D histogram from a parametric function; TCanvas *c1 = new TCanvas(""c1"",""The FillRandom example"",0,0,700,500);; ; gBenchmark->Start(""fillrandom"");; //; // A function (any dimension) or a formula may reference; // an already defined formula; //; TFormula *form1 = new TFormula(""form1"",""abs(sin(x)/x)"");; TF1 *sqroot = new TF1(""sqroot"",""x*gaus(0) + [3]*form1"",0,10);; sqroot->SetParameters(10,4,1,20);; ; //; // Create a one dimensional histogram (one float per bin); // and fill it following the distribution in function sqroot.; //; TH1F *h1f = new TH1F(""h1f"",""Test random numbers"",200,0,10);; h1f->SetFillColor(45);; h1f->FillRandom(""sqroot"",100000);; h1f->Draw();; TPaveLabel *lfunction = new TPaveLabel(5,39,9.8,46,""The sqroot function"");; lfunction->SetFillColor(41);; ; c1->SetGridx();; c1->SetGridy();; ; h1f->SetDirectory(nullptr);; ; c1->Update();; ; sqroot->SetParameters(200,4,1,20);; }; TBenchmark.h; gBenchmarkR__EXTERN TBenchmark * gBenchmarkDefinition TBenchmark.h:59; TCanvas.h; TF1.h; TH1F.h; TPaveLabel.h; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TBenchmark::Startvirtual void Start(const char *name)Starts Benchmark with the specified name.Definition TBenchmark.cxx:172; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TFormulaThe Formula class.Definition TFormula.h:89; TH1F1-D histogram with a float per channel (see TH1 docu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/qa2_8C.html:194,Test,Test,194,doc/master/qa2_8C.html,https://root.cern,https://root.cern/doc/master/qa2_8C.html,1,['Test'],['Test']
Testability,". ROOT: tutorials/foam/foam_demopers.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. foam_demopers.C File ReferenceTutorials » FOAM tutorials. Detailed Description; This simple macro demonstrates persistency of FOAM object. ; First run macro foam_demo.C to create file foam_demo.root with FOAM object.; Next type root -l foam_demopers.C from shell command line; ; #include ""Riostream.h""; #include ""TFile.h""; #include ""TFoam.h""; #include ""TROOT.h""; #include ""TSystem.h""; #include ""TFoamIntegrand.h""; ; ; Int_t foam_demopers(); {; ; // need to load the foam_demo tutorial for the definition of the function; TString macroName = gROOT->GetTutorialDir();; macroName.Append(""/foam/foam_demo.C"");; gROOT->ProcessLine(TString::Format("".L %s+"",macroName.Data()));; ; //******************************************; cout<<""====================== TestVector ================================""<<endl;; TFile fileA(""foam_demo.root"");; fileA.cd();; cout<<""------------------------------------------------------------------""<<endl;; fileA.ls();; cout<<""------------------------------------------------------------------""<<endl;; fileA.Map();; cout<<""------------------------------------------------------------------""<<endl;; fileA.ShowStreamerInfo();; cout<<""------------------------------------------------------------------""<<endl;; fileA.GetListOfKeys()->Print();; cout<<""------------------------------------------------------------------""<<endl;; //*******************************************; TFoam *FoamX = (TFoam*)fileA.Get(""FoamX"");; //*******************************************; // FoamX->PrintCells();; FoamX->CheckAll(1);; ; //N.B. the integrand functions need to be reset; // because cannot be made persistent; TFoamIntegrand * rho = (TFoamIntegrand*) gROOT->ProcessLine(""return new TFDISTR();"");; FoamX->SetRho(rho);; ; Double_t MCvect[2]; // 2-dim vector generated in the MC run; ; for(long loop=0; loop<50000; loop++){; FoamX->MakeEvent(); // generat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/foam__demopers_8C.html:886,Test,TestVector,886,doc/master/foam__demopers_8C.html,https://root.cern,https://root.cern/doc/master/foam__demopers_8C.html,1,['Test'],['TestVector']
Testability,". ROOT: tutorials/geom/gdml/testoptical.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. testoptical.C File ReferenceTutorials » Geometry tutorials. Detailed Description; Tests importing/exporting optical surfaces from GDML. ; Optical surfaces, skin surfaces and border surfaces are imported in object arrays stored by TGeoManager class. Optical surfaces do not store property arrays but point to GDML matrices describing such properties. One can get the data for such property like: TGeoOpticalSurface *surf = geom->GetOpticalSurface(""surf1""); const char *property = surf=>GetPropertyRef(""REFLECTIVITY""); TGeoGDMLMatrix *m = geom->GetGDMLMatrix(property); Skin surfaces and border surfaces can be retrieved from the TGeoManager object by using: TObjArray *skin_array = geom->GetListOfSkinSurfaces(); TObjArra8 *border_array = geom->GetListOfBorderSurfaces(); Alternatively accessors by name can also be used: GetSkinSurface(name)/GetBorderSurface(name); AuthorAndrei Gheata ; Definition in file testoptical.C. tutorialsgeomgdmltestoptical.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/testoptical_8C.html:28,test,testoptical,28,doc/master/testoptical_8C.html,https://root.cern,https://root.cern/doc/master/testoptical_8C.html,4,"['Test', 'test']","['Tests', 'testoptical']"
Testability,". ROOT: tutorials/geom/na49geomfile.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. na49geomfile.C File ReferenceTutorials » Geometry tutorials. Detailed Description; Before executing this macro, the file makegeometry.C must have been executed. ; ; void na49geomfile() {; gBenchmark->Start(""geometry"");; TGeometry *n49 =(TGeometry*)gROOT->FindObject(""na49"");; if (n49) {; TFile na(""na49.root"",""RECREATE"");; n49->Write();; na.Write();; }; gBenchmark->Show(""geometry"");; }; gBenchmarkR__EXTERN TBenchmark * gBenchmarkDefinition TBenchmark.h:59; gROOT#define gROOTDefinition TROOT.h:406; TBenchmark::Startvirtual void Start(const char *name)Starts Benchmark with the specified name.Definition TBenchmark.cxx:172; TBenchmark::Showvirtual void Show(const char *name)Stops Benchmark name and Prints results.Definition TBenchmark.cxx:155; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TGeometryTGeometry description.Definition TGeometry.h:39; TGeometry::FindObjectTObject * FindObject(const char *name) const overrideSearch object identified by name in the geometry tree.Definition TGeometry.cxx:273; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; na49geomfileDefinition na49geomfile.py:1; AuthorAndrei Gheata ; Definition in file na49geomfile.C. tutorialsgeomna49geomfile.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/na49geomfile_8C.html:696,Benchmark,Benchmark,696,doc/master/na49geomfile_8C.html,https://root.cern,https://root.cern/doc/master/na49geomfile_8C.html,2,['Benchmark'],['Benchmark']
Testability,". ROOT: tutorials/geom/xtruSamples.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. xtruSamples.C File ReferenceTutorials » Geometry tutorials. Detailed Description; Draw a sample of TXTRU shapes some convex, concave (and possibly malformed) ; Change Bool_t's to test alternative specifications. ; void xtruSamples(); {; // One normally specifies the x-y points in counter-clockwise order;; // flip this to TRUE to test that it doesn't matter.; Bool_t makecw = kFALSE;; ; // One normally specifies the z points in increasing z order;; // flip this to TRUE to test that it doesn't matter.; Bool_t reversez = kFALSE;; ; // One shouldn't be creating malformed polygons; // but to test what happens when one does here's a flag.; // The effect will be only apparent in solid rendering mode; Bool_t domalformed = kFALSE;; // domalformed = kTRUE;; ; TCanvas* c1 = new TCanvas(""c1"",""sample TXTRU Shapes"",200,10,640,640);; ; // Create a new geometry; TGeometry* geom = new TGeometry(""sample"",""sample"");; geom->cd();; ; // Define the complexity of the drawing; Int_t zseg = 6; // either 2 or 6; Int_t extravis = 0; // make extra z ""arrow"" visible; ; Float_t unit = 1;; ; // Create a large BRIK to embed things into; Float_t bigdim = 12.5*unit;; TBRIK* world = new TBRIK(""world"",""world"",""void"",bigdim,bigdim,bigdim);; ; // Create the main node, make it invisible; TNode* worldnode = new TNode(""worldnode"",""world node"",world);; worldnode->SetVisibility(0);; worldnode->cd();; ; // Canonical shape ... gets further modified by scale factors; // to create convex (and malformed) versions; Float_t x[] = { -0.50, -1.20, 1.20, 0.50, 0.50, 1.20, -1.20, -0.50 };; Float_t y[] = { -0.75, -2.00, -2.00, -0.75, 0.75, 2.00, 2.00, 0.75 };; Float_t z[] = { -0.50, -1.50, -1.50, 1.50, 1.50, 0.50 };; Float_t s[] = { 0.50, 1.00, 1.50, 1.50, 1.00, 0.50 };; Int_t nxy = sizeof(x)/sizeof(Float_t);; Float_t convexscale[] = { 7.0, -1.0, 1.5 };; ; Int_t icolor[] = { 1, 2, 3, 2, 2, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/xtruSamples_8C.html:313,test,test,313,doc/master/xtruSamples_8C.html,https://root.cern,https://root.cern/doc/master/xtruSamples_8C.html,4,['test'],['test']
Testability,". ROOT: tutorials/gl/glViewerLOD.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. glViewerLOD.C File ReferenceTutorials » OpenGL tutorials. Detailed Description; To set the Level Of Details when rendering geometry shapes. ; ; void glViewerLOD(Int_t reqNodes = 1000, Bool_t randomDist = kTRUE,; Bool_t reqSpheres = kTRUE, Bool_t reqTubes = kTRUE); {; TGeoManager * geom = new TGeoManager(""LODTest"", ""GL viewer LOD test"");; geom->SetNsegments(4); // Doesn't matter keep low; TGeoMaterial *matEmptySpace = new TGeoMaterial(""EmptySpace"", 0, 0, 0);; TGeoMaterial *matSolid = new TGeoMaterial(""Solid"" , .938, 1., 10000.);; ; TGeoMedium *medEmptySpace = new TGeoMedium(""Empty"", 1, matEmptySpace);; TGeoMedium *medSolid = new TGeoMedium(""Solid"", 1, matSolid);; ; Double_t sizeBase = 20.0;; Double_t worldRadius;; if (randomDist) {; worldRadius = pow(reqNodes,.5)*sizeBase;; } else {; worldRadius = pow(reqNodes,.3)*sizeBase;; }; ; TGeoVolume *top = geom->MakeBox; (""WORLD"", medEmptySpace, worldRadius, worldRadius, worldRadius);; geom->SetTopVolume(top);; ; gRandom->SetSeed();; ; // Create random number of unique sphere shapes - up to 25% of; // total placed sphere requested; UInt_t volumeCount = gRandom->Integer(reqNodes/4)+1;; TGeoVolume ** volumes = new TGeoVolume *[volumeCount];; TGeoVolume * volume;; UInt_t i;; Double_t dummy;; ; for (i = 0; i < volumeCount; i++) {; char name[128];; sprintf(name, ""Volume_%d"", i);; ; // Random volume shape; Int_t type = -1;; if (reqSpheres && reqTubes) {; type = gRandom->Integer(2);; if (type == 1); type += gRandom->Integer(3);; }; else if(reqSpheres); type = 0;; else if(reqTubes); type = 1 + gRandom->Integer(3);; ; // Random dimensions; Double_t rMin = gRandom->Rndm() * sizeBase;; Double_t rMax = rMin + gRandom->Rndm() * sizeBase * 2.0;; Double_t dz = pow(gRandom->Rndm(),2.0) * sizeBase * 15.0;; Double_t phi1 = gRandom->Rndm() * 90.0;; Double_t phi2 = phi1 + gRandom->Rndm() * 270.0;; ; // Pick random co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/glViewerLOD_8C.html:463,test,test,463,doc/master/glViewerLOD_8C.html,https://root.cern,https://root.cern/doc/master/glViewerLOD_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/gl/grad.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. grad.C File ReferenceTutorials » OpenGL tutorials. Detailed Description; This macro demonstrates how to create and use linear gradients to fill a histogram or a pad. . ; //Includes for ACLiC (cling does not need them).; #include ""TColorGradient.h""; #include ""TCanvas.h""; #include ""TColor.h""; #include ""TStyle.h""; #include ""TError.h""; #include ""TH1F.h""; ; //______________________________________________________________________; void grad(bool use_gl = true); {; //Make sure we enabled OpenGL support in a canvas.; gStyle->SetCanvasPreferGL(use_gl);; ; // Test if canvas supports OpenGL:; TCanvas *cnv = new TCanvas(""grad"", ""gradient demo 1"", 100, 100, 600, 600);; if (!cnv->UseGL() && !cnv->IsWeb()); ::Warning(""grad"", ""This macro requires either OpenGL or Web canvas to correctly handle gradient colors"");; ; // Create custom linear gradients.; // Linear gradient is defined by:; // 1) Direction in which gradient is changing (defined as angle in grad); // 2) colors (to interpolate between them), at least two of them; // 3) alpha parameter for the colors (if not specified - used from TColor directly); // 4) coordinates for these colors along the gradient axis [0., 1.] (must be sorted!).; ; auto fcol1 = TColor::GetColor((Float_t) 0.25, 0.25, 0.25, 0.55); // special frame color 1; auto fcol2 = TColor::GetColor((Float_t) 1., 1., 1., 0.05); // special frame color 2; ; auto frameGradient = TColor::GetLinearGradient(0., {fcol1, fcol2, fcol2, fcol1}, {0., 0.2, 0.8, 1.});; ; // This gradient is a mixture of two standard colors.; auto padGradient = TColor::GetLinearGradient(0., {30, 38});; ; // Another gradient built from three standard colors.; auto histGradient = TColor::GetLinearGradient(45., {kYellow, kOrange, kRed});; ; // Example of radial gradient, for stats box works properly only in web canvas; // Here first argument is radius [0..1] and then list of color",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/gl_2grad_8C.html:681,Test,Test,681,doc/master/gl_2grad_8C.html,https://root.cern,https://root.cern/doc/master/gl_2grad_8C.html,1,['Test'],['Test']
Testability,". ROOT: tutorials/gl/gviz3d.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. gviz3d.C File ReferenceTutorials » OpenGL tutorials. Detailed Description; Simple TStructViewer tutorial. ; ; #include ""TRandom.h""; #include ""TList.h""; #include ""TROOT.h""; #include ""TStructViewer.h""; ; const Int_t ncl =12;; const char *clnames[ncl] = {""TH1F"",""TGraph"",""TGraphErrors"",""TF1"",""TPaveText"",; ""TAxis"",""TF2"",""TH2D"",""TLatex"",""TText"",""TCutG"",""THnSparseF""};; ; // Function creating elements of lists; void MakeCrazy(TList *list, Int_t maxDepth, Int_t maxObjects, Float_t pList); {; Int_t nobj = gRandom->Uniform(0,maxObjects);; for (Int_t i = 0; i < nobj; i++) {; if (maxDepth && gRandom->Rndm() < pList) {; TList *slist = new TList();; slist->SetName(Form(""list_%d_%d"",maxDepth,i));; list->Add(slist);; MakeCrazy(slist,maxDepth-1,maxObjects,pList);; } else {; Int_t icl = (Int_t)gRandom->Uniform(0,ncl);; TNamed *named = (TNamed*)gROOT->ProcessLine(Form(""new %s;"",clnames[icl]));; named->SetName(Form(""%s_%d_%d"",clnames[icl],maxDepth,i));; list->Add(named);; }; }; }; ; // function creating a hierarchy of objects to test the TStructViewer; TList *crazy(Int_t maxDepth=5, Int_t maxObjects=20, Float_t pList=0.2); {; TList *list = new TList();; list->SetName(""SuperList"");; MakeCrazy(list,maxDepth,maxObjects,pList);; gROOT->GetListOfTasks()->Add(list);; return list;; }; ; // function adding colors to viewer; void FillColorsMap(TStructViewer* sv); {; for (int i = 0; i < ncl ; i++); sv->SetColor(clnames[i], (Int_t)gRandom->Integer(8)+2);; }; ; void gviz3d(); {; // Creating a pointer to list; TList* pointer = crazy(2,10);; ; // Creating a viewer; TStructViewer* sv = new TStructViewer(pointer);; ; // adding colors; FillColorsMap(sv);; ; sv->Draw();; }; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; TList.h; TROOT.h; gROOT#define gROOTDefinition TROOT.h:406; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRan",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/gviz3d_8C.html:1151,test,test,1151,doc/master/gviz3d_8C.html,https://root.cern,https://root.cern/doc/master/gviz3d_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/graphics/gaxis2.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. gaxis2.C File ReferenceTutorials » Graphics tutorials. Detailed Description; Example illustrating how to draw TGaxis with labels defined by a function. . ; void gaxis2(){; gStyle->SetOptStat(0);; ; TH2F *h2 = new TH2F(""h"",""Axes"",100,0,10,100,-2,2);; h2->Draw();; ; TF1 *f1 = new TF1(""f1"",""-x"",-10,10);; TGaxis *A1 = new TGaxis(0,2,10,2,""f1"",510,""-"");; A1->SetTitle(""axis with decreasing values"");; A1->Draw();; ; TF1 *f2 = new TF1(""f2"",""exp(x)"",0,2);; TGaxis *A2 = new TGaxis(1,1,9,1,""f2"");; A2->SetTitle(""exponential axis"");; A2->SetLabelSize(0.03);; A2->SetTitleSize(0.03);; A2->SetTitleOffset(1.2);; A2->Draw();; ; TF1 *f3 = new TF1(""f3"",""log10(x)"",1,1000);; TGaxis *A3 = new TGaxis(2,-2,2,0,""f3"",505,""G"");; A3->SetTitle(""logarithmic axis"");; A3->SetLabelSize(0.03);; A3->SetTitleSize(0.03);; A3->SetTitleOffset(1.2);; A3->Draw();; }; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TF11-Dim function classDefinition TF1.h:233; TGaxisThe axis painter class.Definition TGaxis.h:24; TGaxis::SetTitleOffsetvoid SetTitleOffset(Float_t titleoffset=1)Definition TGaxis.h:128; TGaxis::SetTitleSizevoid SetTitleSize(Float_t titlesize)Definition TGaxis.h:129; TGaxis::SetTitlevirtual void SetTitle(const char *title="""")Change the title of the axis.Definition TGaxis.cxx:2942; TGaxis::SetLabelSizevoid SetLabelSize(Float_t labelsize)Definition TGaxis.h:107; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; f1TF1 * f1Definition legend1.C:11; AuthorOlivier Couet ; Definition in file gaxis2.C. tutorialsgraphicsgaxis2.C. ROOT master - ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/gaxis2_8C.html:858,log,logarithmic,858,doc/master/gaxis2_8C.html,https://root.cern,https://root.cern/doc/master/gaxis2_8C.html,1,['log'],['logarithmic']
Testability,". ROOT: tutorials/graphics/inside.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. inside.C File ReferenceTutorials » Graphics tutorials. Detailed Description; Test the IsInside methods of various graphics primitives. . ; void inside() {; auto el = new TEllipse(0.75, 0.25, .2,.15,45,315,62);; el->Draw();; ; auto gr = new TGraph();; double gr_x1[5] = {0.1, 0.3388252, 0.03796561, 0.4176218, 0.1};; double gr_y1[5] = {0.5, 0.9644737, 0.7776316, 0.6960526, 0.5};; gr = new TGraph(5, gr_x1, gr_y1);; gr->Draw(""L"");; ; auto bx = new TBox(.7, .8, .9, .95);; bx->Draw();; ; auto pv = new TPave(.05, .1, .3, .2);; pv->Draw();; ; auto di = new TDiamond(.05, .25, .3, .4);; di->Draw();; ; auto cr = new TCrown(.5, .5, .1, .15);; cr->SetFillColor(19);; cr->Draw();; ; for (int i = 0; i < 10000; i++) {; double x = gRandom->Rndm();; double y = gRandom->Rndm();; auto p = new TMarker(x,y,7);; p->Draw();; if (el->IsInside(x,y) || bx->IsInside(x,y) || pv->IsInside(x,y) || di->IsInside(x,y) || cr->IsInside(x,y) ||; gr->IsInside(x,y)) {; p->SetMarkerColor(kGreen);; } else {; p->SetMarkerColor(kRed);; }; }; }; kRed@ kRedDefinition Rtypes.h:66; kGreen@ kGreenDefinition Rtypes.h:66; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TBoxCreate a Box.Definition TBox.h:22; TCrownTo draw a Crown.Definition TCrown.h:19; TDiamondDraw a Diamond.Definition TDiamond.h:17; TEllipseDraw Ellipses.Definition TEllipse.h:23; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::IsInsidevirtual Int_t IsInside(Double_t x, Double_t y) constReturn 1 if the point (x,y) is inside the polygon defined by the graph vertices 0 otherwise.Definition TGraph.cxx:1841; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TMarkerManages Markers.Definition TMarker.h:22;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/inside_8C.html:210,Test,Test,210,doc/master/inside_8C.html,https://root.cern,https://root.cern/doc/master/inside_8C.html,1,['Test'],['Test']
Testability,". ROOT: tutorials/graphics/latex.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. latex.C File ReferenceTutorials » Graphics tutorials. Detailed Description; This macro draws 5 Latex-style formula in a canvas and prints the canvas as a Postscript file. . ; void latex() {; TCanvas *c1 = new TCanvas(""c1"",""test"",600,700);; // write formulas; TLatex l;; l.SetTextAlign(12);; l.SetTextSize(0.04);; l.DrawLatex(0.1,0.9,""1) C(x) = d #sqrt{#frac{2}{#lambdaD}}\; #int^{x}_{0}cos(#frac{#pi}{2}t^{2})dt"");; l.DrawLatex(0.1,0.7,""2) C(x) = d #sqrt{#frac{2}{#lambdaD}}\; #int^{x}cos(#frac{#pi}{2}t^{2})dt"");; l.DrawLatex(0.1,0.5,""3) R = |A|^{2} = #frac{1}{2}#left(#[]{#frac{1}{2}+\; C(V)}^{2}+#[]{#frac{1}{2}+S(V)}^{2}#right)"");; l.DrawLatex(0.1,0.3,; ""4) F(t) = #sum_{i=-#infty}^{#infty}A(i)cos#[]{#frac{i}{t+i}}"");; l.DrawLatex(0.1,0.1,""5) {}_{3}^{7}Li"");; c1->Print(""latex.ps"");; }; TCanvasThe Canvas class.Definition TCanvas.h:23; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TLine::Printvoid Print(Option_t *option="""") const overrideDump this line with its attributes.Definition TLine.cxx:419; c1return c1Definition legend1.C:41; lTLine lDefinition textangle.C:4; AuthorRene Brun ; Definition in file latex.C. tutorialsgraphicslatex.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/latex_8C.html:355,test,test,355,doc/master/latex_8C.html,https://root.cern,https://root.cern/doc/master/latex_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/graphics/piechart.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. piechart.C File ReferenceTutorials » Graphics tutorials. Detailed Description; Pie chart example. . ; void piechart(); {; Float_t vals[] = {.2,1.1,.6,.9,2.3};; Int_t colors[] = {2,3,4,5,6};; Int_t nvals = sizeof(vals)/sizeof(vals[0]);; ; TCanvas *cpie = new TCanvas(""cpie"",""TPie test"",700,700);; cpie->Divide(2,2);; ; TPie *pie1 = new TPie(""pie1"",; ""Pie with offset and no colors"",nvals,vals);; TPie *pie2 = new TPie(""pie2"",; ""Pie with radial labels"",nvals,vals,colors);; TPie *pie3 = new TPie(""pie3"",; ""Pie with tangential labels"",nvals,vals,colors);; TPie *pie4 = new TPie(""pie4"",; ""Pie with verbose labels"",nvals,vals,colors);; ; cpie->cd(1);; pie1->SetAngularOffset(30.);; pie1->SetEntryRadiusOffset( 4, 0.1);; pie1->SetRadius(.35);; pie1->Draw(""3d"");; ; cpie->cd(2);; pie2->SetEntryRadiusOffset(2,.05);; pie2->SetEntryLineColor(2,2);; pie2->SetEntryLineWidth(2,5);; pie2->SetEntryLineStyle(2,2);; pie2->SetEntryFillStyle(1,3030);; pie2->SetCircle(.5,.45,.3);; pie2->Draw(""rsc"");; ; cpie->cd(3);; pie3->SetY(.32);; pie3->GetSlice(0)->SetValue(.8);; pie3->GetSlice(1)->SetFillStyle(3031);; pie3->SetLabelsOffset(-.1);; pie3->Draw(""3d t nol"");; TLegend *pieleg = pie3->MakeLegend();; pieleg->SetY1(.56); pieleg->SetY2(.86);; ; cpie->cd(4);; pie4->SetRadius(.2);; pie4->SetLabelsOffset(.01);; pie4->SetLabelFormat(""#splitline{%val (%perc)}{%txt}"");; pie4->Draw(""nol <"");; }; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; colorsColor * colorsDefinition X3DBuffer.c:21; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TCanvasThe Canvas class.Definition TCanvas.h:23; TCanvas::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet current canvas & pad.Definition TCanvas.cxx:719; TLegendThis class displays a legend box (TPaveText) containing several legend en",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/piechart_8C.html:414,test,test,414,doc/master/piechart_8C.html,https://root.cern,https://root.cern/doc/master/piechart_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/graphics/polytest1.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. polytest1.C File ReferenceTutorials » Graphics tutorials. Detailed Description; This macro is testing the ""compacting"" algorithm in TPadPainter. ; It reduces the number of polygon's vertices using actual pixel coordinates. It's not really useful, but just to test that the resulting polygon is still reasonable. Initial number of points is 1000000, after ""compression"" it's 523904 (with default canvas size, before you tried to resize it) - so almost half of vertices were removed but you can still see the reasonable shape. If you resize a canvas to a smaller size, the number of vertices after compression can be something like 5000 and even less. It's easy to 'fool' this algorithm though in this particular case (ellipse is a kind of fringe case, you can easily have a sequence of almost unique vertices (at a pixel level).; ; //Includes for ACLiC.; #include <cassert>; #include <vector>; ; #include ""TRandom.h""; #include ""TCanvas.h""; #include ""TError.h""; #include ""Rtypes.h""; #include ""TNamed.h""; #include ""TMath.h""; ; class PolyTest1 : public TNamed, public TAttLine, public TAttFill {; public:; PolyTest1(unsigned nVertices);; ; void Paint(const Option_t *notUsed) override;; void Reset(unsigned nVertices);; ; private:; enum {; kNPointsDefault = 10000//minimal number of points.; };; ; std::vector<Double_t> fXs;; std::vector<Double_t> fYs;; };; ; //_____________________________________________________________; PolyTest1::PolyTest1(unsigned nVertices); : TNamed(""polygon_compression_test1"", ""polygon_compression_test1""); {; Reset(nVertices);; }; ; //_____________________________________________________________; void PolyTest1::Reset(unsigned nVertices); {; //Some canvas must already exist by this point.; assert(gPad != nullptr && ""Reset, gPad is null"");; //We need a gRandom to exist.; assert(gRandom != nullptr && ""Reset, gRandom is null"");; ; if (nV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/polytest1_8C.html:230,test,testing,230,doc/master/polytest1_8C.html,https://root.cern,https://root.cern/doc/master/polytest1_8C.html,2,['test'],"['test', 'testing']"
Testability,". ROOT: tutorials/graphics/polytest2.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. polytest2.C File ReferenceTutorials » Graphics tutorials. Detailed Description; ; This macro is testing the ""compacting"" algorithm in TPadPainter. ; It reduces the number of polygon's vertices using actual pixel coordinates. This macro is testing new ""compacting"" algorithm in TPadPainter (it reduces the number of polygon's vertices using actual pixel coordinates). In principle, this test case is what our histograms (fringe cases) are: ""saw-like"" polygon (bins == teeth).; ; //Includes for ACLiC.; #include <cassert>; #include <vector>; ; #include ""TRandom.h""; #include ""TCanvas.h""; #include ""Rtypes.h""; #include ""TNamed.h""; ; class PolyTest2 : public TNamed, public TAttLine, public TAttFill {; public:; PolyTest2();; ; void Paint(const Option_t *notUsed) override;; ; private:; enum TestSize {; kNSawPoints = 10000; };; ; //Part 1.; std::vector<Double_t> fXs1;; std::vector<Double_t> fYs1;; //Part 2.; ; std::vector<Double_t> fXs2;; std::vector<Double_t> fYs2;; };; ; //_____________________________________________________________; PolyTest2::PolyTest2(); : TNamed(""polygon_compression_test2"", ""polygon_compression_test2""); {; //Polygon 1, n of points is 10003, after 'compression' : 1897; //Polygon 2, n of points is 10003, after 'compression' : 2093; ; //Some canvas must already exist by this point.; assert(gPad != nullptr && ""PolyTest2, gPad is null"");; //We need a gRandom to exist.; assert(gRandom != nullptr && ""PolyTest2, gRandom is null"");; ; Double_t xMin = 0., xMax = 0., yMin = 0., yMax = 0.;; gPad->GetRange(xMin, yMin, xMax, yMax);; assert(xMax - xMin > 0 && yMax - yMin > 0 && ""PolyTest2, invalid canvas' ranges"");; ; ; // .(0/the last)--------.(1); // | /; // | \; // | /; // .(kNSawPoints + 1)--.(kNSawPoints); ; const unsigned nVertices = 3 + kNSawPoints;; ; {; //Polygon 1, ""vertical saw"":; fXs1.resize(nVertices);; fYs1.resize(nVertices);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/polytest2_8C.html:232,test,testing,232,doc/master/polytest2_8C.html,https://root.cern,https://root.cern/doc/master/polytest2_8C.html,4,"['Test', 'test']","['TestSize', 'test', 'testing']"
Testability,". ROOT: tutorials/graphs Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. graphs Directory Reference. Directory dependency graph for graphs:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Files;  annotation3d.C;   This example show how to put some annotation on a 3D plot using 3D polylines. ;  ;  approx.C;   Macro to test interpolation function Approx ;  ;  bent.C;   Bent error bars ;  ;  bent.py;   Bent error bars. ;  ;  exclusiongraph.C;   Draw three graphs with an exclusion zone. ;  ;  exclusiongraph2.C;   Draw several graphs with an exclusion zones. ;  ;  gerrors.C;   Draw a graph with error bars ;  ;  gerrors2.C;   Draw two graphs with error bars ;  ;  gmultierrors.C;   Draw a graph with multiple y errors ;  ;  graph.C;   Draw a simple graph. ;  ;  graph2derrorsfit.C;   Draw and fit a TGraph2DErrors ;  ;  graphApply.C;   A macro to demonstrate the functionality of TGraph::Apply() method. ;  ;  graphpalettecolor.C;   Palette coloring for graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ;  graphpolar.C;   Create and draw a polar graph. ;  ;  graphpolar2.C;   Create and draw a polar graph with PI axis ;  ;  graphpolar3.C;   Create and draw a polar graph with PI axis using a TF1. ;  ;  graphreverse.C;   This example test all the various case of reverse graphs combined with logarithmic scale. ;  ;  graphShade.C;   Show how to shade an area between two graphs ;  ;  graphstruct.C;   Draw a simple graph structure. ;  ;  graphtext.C;   Draw a graph with text attached to each point. ;  ;  gtime.C;   Example of TGraphTime. ;  ;  gtime2.C;   Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program. ;  ;  hlGraph1.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ;  hlGraph2.C;  This tutorial demonstrates ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_21ec31480a793facd4ea3dd8f2d42294.html:411,test,test,411,doc/master/dir_21ec31480a793facd4ea3dd8f2d42294.html,https://root.cern,https://root.cern/doc/master/dir_21ec31480a793facd4ea3dd8f2d42294.html,1,['test'],['test']
Testability,". ROOT: tutorials/graphs/approx.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. approx.C File ReferenceTutorials » Graphs tutorials. Detailed Description; Macro to test interpolation function Approx . ; TCanvas *vC1;; TGraph *grxy, *grin, *grout;; ; void DrawSmooth(Int_t pad, const char *title, const char *xt, const char *yt); {; vC1->cd(pad);; TH1F *vFrame = gPad->DrawFrame(0,0,15,150);; vFrame->SetTitle(title);; vFrame->SetTitleSize(0.2);; vFrame->SetXTitle(xt);; vFrame->SetYTitle(yt);; grxy->SetMarkerColor(kBlue);; grxy->SetMarkerStyle(21);; grxy->SetMarkerSize(0.5);; grxy->Draw(""P"");; grin->SetMarkerColor(kRed);; grin->SetMarkerStyle(5);; grin->SetMarkerSize(0.7);; grin->Draw(""P"");; grout->DrawClone(""LP"");; }; ; void approx(); {; // Test data (square); Int_t n = 11;; Double_t x[] = {1,2,3,4,5,6,6,6,8,9,10};; Double_t y[] = {1,4,9,16,25,25,36,49,64,81,100};; grxy = new TGraph(n,x,y);; ; // X values, for which y values should be interpolated; Int_t nout = 14;; Double_t xout[] =; {1.2,1.7,2.5,3.2,4.4,5.2,5.7,6.5,7.6,8.3,9.7,10.4,11.3,13};; ; // Create Canvas; vC1 = new TCanvas(""vC1"",""square"",200,10,700,700);; vC1->Divide(2,2);; ; // Initialize graph with data; grin = new TGraph(n,x,y);; // Interpolate at equidistant points (use mean for tied x-values); TGraphSmooth *gs = new TGraphSmooth(""normal"");; grout = gs->Approx(grin,""linear"");; DrawSmooth(1,""Approx: ties = mean"",""X-axis"",""Y-axis"");; ; // Re-initialize graph with data; // (since graph points were set to unique vales); grin = new TGraph(n,x,y);; // Interpolate at given points xout; grout = gs->Approx(grin,""linear"", 14, xout, 0, 130);; DrawSmooth(2,""Approx: ties = mean"","""","""");; ; // Print output variables for given values xout; Int_t vNout = grout->GetN();; Double_t vXout, vYout;; for (Int_t k=0;k<vNout;k++) {; grout->GetPoint(k, vXout, vYout);; cout << ""k= "" << k << "" vXout[k]= "" << vXout; << "" vYout[k]= "" << vYout << endl;; }; ; // Re-initialize graph with da",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/approx_8C.html:215,test,test,215,doc/master/approx_8C.html,https://root.cern,https://root.cern/doc/master/approx_8C.html,2,"['Test', 'test']","['Test', 'test']"
Testability,". ROOT: tutorials/graphs/graphreverse.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. graphreverse.C File ReferenceTutorials » Graphs tutorials. Detailed Description; This example test all the various case of reverse graphs combined with logarithmic scale. . ; void graphreverse() {; auto c = new TCanvas(""c"",""Reversed graphs"",0,0,900,900);; c->Divide(3,3);; ; // TGraphErrors; auto graphe = new TGraphErrors();; graphe->GetXaxis()->SetNdivisions(514);; graphe->GetYaxis()->SetNdivisions(514);; graphe->SetMarkerStyle(kCircle);; graphe->SetPoint(0,5,5);; graphe->SetPointError(0,1,3);; graphe->SetPoint(1,9,9);; graphe->SetPointError(1,1,3);; ; c->cd(1);; gPad->SetGrid();; graphe->Draw(""a pl "");; ; c->cd(2);; gPad->SetGrid();; graphe->Draw(""a pl rx ry "");; ; c->cd(3);; gPad->SetGrid();; gPad->SetLogx();; gPad->SetLogy();; graphe->GetXaxis()->SetMoreLogLabels();; graphe->GetYaxis()->SetMoreLogLabels();; graphe->Draw(""a pl rx ry"");; ; // TGraphAsymmErrors; auto graphae = new TGraphAsymmErrors();; graphae->GetXaxis()->SetNdivisions(514);; graphae->GetYaxis()->SetNdivisions(514);; graphae->SetMarkerStyle(kCircle);; graphae->SetPoint(0,5,5);; graphae->SetPointError(0,1,3,3,1);; graphae->SetPoint(1,9,9);; graphae->SetPointError(1,1,3,1,3);; ; c->cd(4);; gPad->SetGrid();; graphae->Draw(""a pl "");; ; c->cd(5);; gPad->SetGrid();; graphae->Draw(""a pl rx ry "");; ; c->cd(6);; gPad->SetGrid();; gPad->SetLogx();; gPad->SetLogy();; graphae->GetXaxis()->SetMoreLogLabels();; graphae->GetYaxis()->SetMoreLogLabels();; graphae->Draw(""a pl rx ry"");; ; // TGraphBentErrors; auto graphbe = new TGraphBentErrors();; graphbe->GetXaxis()->SetNdivisions(514);; graphbe->GetYaxis()->SetNdivisions(514);; graphbe->SetMarkerStyle(kCircle);; graphbe->SetPoint(0,5,5);; graphbe->SetPointError(0,1,3,3,1,.5,.2,.5,.2);; graphbe->SetPoint(1,9,9);; graphbe->SetPointError(1,1,3,1,3,-.5,-.2,-.5,-.2);; ; c->cd(7);; gPad->SetGrid();; graphbe->Draw(""a pl "");; ; c->cd(8);;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/graphreverse_8C.html:231,test,test,231,doc/master/graphreverse_8C.html,https://root.cern,https://root.cern/doc/master/graphreverse_8C.html,2,"['log', 'test']","['logarithmic', 'test']"
Testability,". ROOT: tutorials/graphs/labels1.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. labels1.C File ReferenceTutorials » Graphs tutorials. Detailed Description; Setting alphanumeric labels in a 1-d histogram. . ; void labels1(); {; Int_t i;; const Int_t nx = 20;; const char *people[nx] = {""Jean"",""Pierre"",""Marie"",""Odile"",; ""Sebastien"",""Fons"",""Rene"",""Nicolas"",""Xavier"",""Greg"",; ""Bjarne"",""Anton"",""Otto"",""Eddy"",""Peter"",""Pasha"",; ""Philippe"",""Suzanne"",""Jeff"",""Valery""};; TCanvas *c1 = new TCanvas(""c1"",""demo bin labels"",10,10,900,500);; c1->SetGrid();; c1->SetBottomMargin(0.15);; TH1F *h = new TH1F(""h"",""test"",nx,0,nx);; h->SetFillColor(38);; for (i=0;i<5000;i++) h->Fill(gRandom->Gaus(0.5*nx,0.2*nx));; h->SetStats(0);; for (i=1;i<=nx;i++) h->GetXaxis()->SetBinLabel(i,people[i-1]);; h->Draw();; TPaveText *pt = new TPaveText(0.6,0.7,0.98,0.98,""brNDC"");; pt->SetFillColor(18);; pt->SetTextAlign(12);; pt->AddText(""Use the axis Context Menu LabelsOption"");; pt->AddText("" \""a\"" to sort by alphabetic order"");; pt->AddText("" \"">\"" to sort by decreasing values"");; pt->AddText("" \""<\"" to sort by increasing values"");; pt->Draw();; }; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::Drawvoid Draw(Option_t *option="""") overrid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/labels1_8C.html:648,test,test,648,doc/master/labels1_8C.html,https://root.cern,https://root.cern/doc/master/labels1_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/graphs/labels2.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. labels2.C File ReferenceTutorials » Graphs tutorials. Detailed Description; Setting alphanumeric labels. . ; void labels2(); {; Int_t i;; const Int_t nx = 12;; const Int_t ny = 20;; const char *month[nx] = {""January"",""February"",""March"",""April"",; ""May"",""June"",""July"",""August"",""September"",""October"",; ""November"",""December""};; const char *people[ny] = {""Jean"",""Pierre"",""Marie"",""Odile"",; ""Sebastien"",""Fons"",""Rene"",""Nicolas"",""Xavier"",""Greg"",; ""Bjarne"",""Anton"",""Otto"",""Eddy"",""Peter"",""Pasha"",; ""Philippe"",""Suzanne"",""Jeff"",""Valery""};; TCanvas *c1 = new TCanvas(""c1"",""demo bin labels"",; 10,10,800,800);; c1->SetGrid();; c1->SetLeftMargin(0.15);; c1->SetBottomMargin(0.15);; TH2F *h = new TH2F(""h"",""test"",nx,0,nx,ny,0,ny);; for (i=0;i<5000;i++) {; h->Fill(gRandom->Gaus(0.5*nx,0.2*nx),; gRandom->Gaus(0.5*ny,0.2*ny));; }; h->SetStats(0);; for (i=1;i<=nx;i++) h->GetXaxis()->SetBinLabel(i,month[i-1]);; for (i=1;i<=ny;i++) h->GetYaxis()->SetBinLabel(i,people[i-1]);; h->Draw(""text"");; ; TPaveText *pt = new TPaveText(0.6,0.85,0.98,0.98,""brNDC"");; pt->SetFillColor(18);; pt->SetTextAlign(12);; pt->AddText(""Use the axis Context Menu LabelsOption"");; pt->AddText("" \""a\"" to sort by alphabetic order"");; pt->AddText("" \"">\"" to sort by decreasing values"");; pt->AddText("" \""<\"" to sort by increasing values"");; pt->Draw();; }; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TCanvasThe Canvas class.Definition TCanvas.h:23; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TPaveTextA Pave (see TPave) with text, lines or/and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/labels2_8C.html:821,test,test,821,doc/master/labels2_8C.html,https://root.cern,https://root.cern/doc/master/labels2_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/graphs/motorcycle.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. motorcycle.C File ReferenceTutorials » Graphs tutorials. Detailed Description; Macro to test scatterplot smoothers: ksmooth, lowess, supsmu as described in: ; Modern Applied Statistics with S-Plus, 3rd Edition; W.N. Venables and B.D. Ripley; Chapter 9: Smooth Regression, Figure 9.1; Example is a set of data on 133 observations of acceleration against time for a simulated motorcycle accident, taken from Silverman (1985). ; #include ""TString.h""; #include ""TInterpreter.h""; #include <fstream>; #include ""TH1.h""; #include ""TGraphSmooth.h""; #include ""TCanvas.h""; #include ""TSystem.h""; ; ; TCanvas *vC1;; TGraph *grin, *grout;; ; void DrawSmooth(Int_t pad, const char *title, const char *xt, const char *yt); {; vC1->cd(pad);; TH1F *vFrame = gPad->DrawFrame(0,-130,60,70);; vFrame->SetTitle(title);; vFrame->SetTitleSize(0.2);; vFrame->SetXTitle(xt);; vFrame->SetYTitle(yt);; grin->Draw(""P"");; grout->DrawClone(""LPX"");; }; ; void motorcycle(); {; // data taken from R library MASS: mcycle.txt; TString dir = gROOT->GetTutorialDir();; dir.Append(""/graphs/"");; dir.ReplaceAll(""/./"",""/"");; ; // read file and add to fit object; Double_t *x = new Double_t[133];; Double_t *y = new Double_t[133];; Double_t vX, vY;; Int_t vNData = 0;; ifstream vInput;; vInput.open(Form(""%smotorcycle.dat"",dir.Data()));; while (1) {; vInput >> vX >> vY;; if (!vInput.good()) break;; x[vNData] = vX;; y[vNData] = vY;; vNData++;; }//while; vInput.close();; grin = new TGraph(vNData,x,y);; ; // draw graph; vC1 = new TCanvas(""vC1"",""Smooth Regression"",200,10,900,700);; vC1->Divide(2,3);; ; // Kernel Smoother; // create new kernel smoother and smooth data with bandwidth = 2.0; TGraphSmooth *gs = new TGraphSmooth(""normal"");; grout = gs->SmoothKern(grin,""normal"",2.0);; DrawSmooth(1,""Kernel Smoother: bandwidth = 2.0"",""times"",""accel"");; ; // redraw ksmooth with bandwidth = 5.0; grout = gs->Sm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/motorcycle_8C.html:223,test,test,223,doc/master/motorcycle_8C.html,https://root.cern,https://root.cern/doc/master/motorcycle_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/graphs/timeonaxis2.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. timeonaxis2.C File ReferenceTutorials » Graphs tutorials. Detailed Description; Define the time offset as 2003, January 1st. . ; void timeonaxis2() {; auto ct2 = new TCanvas(""ct2"",""ct2"",10,10,700,500);; ; TDatime T0(2003, 1, 1, 0, 0, 0);; int X0 = T0.Convert();; gStyle->SetTimeOffset(X0);; ; // Define the lowest histogram limit as 2002, September 23rd; TDatime T1(2002, 9, 23, 0, 0, 0);; int X1 = T1.Convert()-X0;; ; // Define the highest histogram limit as 2003, March 7th; TDatime T2(2003, 3, 7, 0, 0, 0);; int X2 = T2.Convert(1)-X0;; ; auto h1 = new TH1F(""h1"",""test"",100,X1,X2);; ; TRandom r;; for (Int_t i=0;i<30000;i++) {; Double_t noise = r.Gaus(0.5*(X1+X2),0.1*(X2-X1));; h1->Fill(noise);; }; ; h1->GetXaxis()->SetTimeDisplay(1);; h1->GetXaxis()->SetLabelSize(0.03);; h1->GetXaxis()->SetTimeFormat(""%Y/%m/%d"");; h1->Draw();; }; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TAttAxis::SetLabelSizevirtual void SetLabelSize(Float_t size=0.04)Set size of axis labels.Definition TAttAxis.cxx:203; TAxis::SetTimeDisplayvirtual void SetTimeDisplay(Int_t value)Definition TAxis.h:171; TAxis::SetTimeFormatvirtual void SetTimeFormat(const char *format="""")Change the format used for time plotting.Definition TAxis.cxx:1157; TCanvasThe Canvas class.Definition TCanvas.h:23; TDatimeThis class stores the date and time with a precision of one second in an unsigned 32 bit word (950130...Definition TDatime.h:37; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::GetXaxis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/timeonaxis2_8C.html:702,test,test,702,doc/master/timeonaxis2_8C.html,https://root.cern,https://root.cern/doc/master/timeonaxis2_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/graphs/timeonaxis3.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. timeonaxis3.C File ReferenceTutorials » Graphs tutorials. Detailed Description; This example compares what the system time function gmtime and localtime give with what gives TGaxis. ; It can be used as referenced test to check if TGaxis is working properly. The original code was developed by Philippe Gras (CEA Saclay. IRFU/SEDI). ; #include ""TAxis.h""; #include ""TGaxis.h""; #include ""TCanvas.h""; #include ""TString.h""; #include ""TLine.h""; #include ""TLatex.h""; #include <ctime>; #include <cstdio>; ; TString stime(time_t* t, bool utc = false, bool display_time_zone = true) {; struct tm* tt;; if (utc) tt = gmtime(t);; else tt = localtime(t);; char buf[256];; if (display_time_zone) strftime(buf, sizeof(buf), ""%Y-%m-%d %H:%M:%S %Z"", tt);; else strftime(buf, sizeof(buf), ""%Y-%m-%d %H:%M:%S"", tt);; return TString(buf);; }; ; ; void timeonaxis3() {; double f = 1.8;; ; auto c = new TCanvas;; ; TLatex tex1;; tex1.SetNDC();; tex1.SetTextFont(102);; tex1.SetTextSize(0.055*f);; ; TLatex tex3;; tex3.SetNDC();; tex3.SetTextFont(102);; tex3.SetTextSize(0.07*f);; tex3.SetTextColor(kBlue+2);; ; TLatex tex2;; tex2.SetNDC();; tex2.SetTextFont(102);; tex2.SetTextSize(0.07*f);; tex2.SetTextColor(kOrange+3);; ; time_t offset[] = {0, 0, 1325376000, 1341100800};; time_t t[] = {1331150400, 1336417200, 0, 36000};; ; c->SetTopMargin(0); c->SetBottomMargin(0);; c->SetLeftMargin(0); c->SetRightMargin(0);; c->Divide(2, 4, -1, -1);; TLine l;; l.DrawLine(0.5, 0, 0.5, 1.);; ; for(int i = 0; i < 4; ++i){; for(int gmt = 0; gmt < 2; ++gmt){; const char* opt = (gmt ? ""gmt"" : ""local"");; TVirtualPad* p = c->cd(2*i + gmt + 1);; p->SetTopMargin(0); p->SetBottomMargin(0);; p->SetLeftMargin(0); p->SetRightMargin(0);; p->SetFillStyle(4000);; ; TGaxis* ga = new TGaxis (.4, .25, 5., .25, t[i], t[i] + 1, 1, ""t"");; ga->SetTimeFormat(""TGaxis label: #color[2]{%Y-%m-%d %H:%M:%S}"");; ga->Se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/timeonaxis3_8C.html:349,test,test,349,doc/master/timeonaxis3_8C.html,https://root.cern,https://root.cern/doc/master/timeonaxis3_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/graphs/zdemo.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. zdemo.C File ReferenceTutorials » Graphs tutorials. Detailed Description; This macro is an example of graphs in log scales with annotations. ; The presented results are predictions of invariant cross-section of Direct Photons produced at RHIC energies, based on the universality of scaling function H(z).; These Figures were published in JINR preprint E2-98-64, Dubna, 1998 and submitted to CPC.; Note that the way greek symbols, super/subscripts are obtained illustrate the current limitations of Root in this area. ; #include ""TCanvas.h""; #include ""TPad.h""; #include ""TPaveLabel.h""; #include ""TLatex.h""; #include ""TGraph.h""; #include ""TFrame.h""; ; #ifdef HZ; #undef HZ; #endif; ; const Int_t NMAX = 20;; Int_t NLOOP;; Float_t Z[NMAX], HZ[NMAX], PT[NMAX], INVSIG[NMAX];; ; void hz_calc(Float_t, Float_t, Float_t, Float_t, Float_t, Float_t);; ; //__________________________________________________________________; void zdemo(); {; ; Float_t energ;; Float_t dens;; Float_t tgrad;; Float_t ptmin;; Float_t ptmax;; Float_t delp;; ; // Create a new canvas.; TCanvas *c1 = new TCanvas(""zdemo"",; ""Monte Carlo Study of Z scaling"",10,40,800,600);; c1->Range(0,0,25,18);; c1->SetFillColor(40);; ; TPaveLabel *pl = new TPaveLabel(1,16.3,24,17.5,""Z-scaling of \; Direct Photon Productions in pp Collisions at RHIC Energies"",""br"");; pl->SetFillColor(18);; pl->SetTextFont(32);; pl->SetTextColor(49);; pl->Draw();; ; TLatex t0;; t0.SetTextFont(32);; t0.SetTextColor(1);; t0.SetTextSize(0.03);; t0.SetTextAlign(12);; t0.DrawLatex(3.1,15.5,""M.Tokarev, E.Potrebenikova "");; t0.DrawLatex(14.,15.5,""JINR preprint E2-98-64, Dubna, 1998 "");; ; TPad *pad1 = new TPad(""pad1"",""This is pad1"",0.02,0.02,0.48,0.83,33);; TPad *pad2 = new TPad(""pad2"",""This is pad2"",0.52,0.02,0.98,0.83,33);; ; pad1->Draw();; pad2->Draw();; ; //; // Cross-section of direct photon production in pp collisions; // at",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/zdemo_8C.html:242,log,log,242,doc/master/zdemo_8C.html,https://root.cern,https://root.cern/doc/master/zdemo_8C.html,1,['log'],['log']
Testability,". ROOT: tutorials/hist/cumulative.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. cumulative.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Illustrate use of the TH1::GetCumulative method. . ; #include <cassert>; #include <cmath>; ; #include ""TH1.h""; #include ""TH1D.h""; #include ""TCanvas.h""; #include ""TRandom.h""; ; TCanvas *cumulative(); {; TH1* h = new TH1D(""h"", ""h"", 100, -5., 5.);; gRandom->SetSeed();; h->FillRandom(""gaus"", 1u << 16);; // get the cumulative of h; TH1* hc = h->GetCumulative();; // check that c has the ""right"" contents; Double_t* integral = h->GetIntegral();; for (Int_t i = 1; i <= hc->GetNbinsX(); ++i) {; assert(std::abs(integral[i] * h->GetEntries() - hc->GetBinContent(i)) < 1e-7);; }; // draw histogram together with its cumulative distribution; TCanvas* c = new TCanvas;; c->Divide(1,2);; c->cd(1);; h->Draw();; c->cd(2);; hc->Draw();; c->Update();; ; return c;; }; c#define c(i)Definition RSha256.hxx:101; h#define h(i)Definition RSha256.hxx:106; e#define e(i)Definition RSha256.hxx:103; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; TCanvas.h; TH1D.h; TH1.h; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::GetCumulativeTH1 * GetCumulative(Bool_t forward=kTRUE, const char *suffix=""_cumulative"") constReturn a pointer to a histogram containing the cumulative content.Definition TH1.cxx:2616; TH1::GetNbinsXvirtual Int_t GetNbinsX() constDefinition TH1.h:297; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::GetIntegralvirtual Double_t * GetIntegral()Return a pointer to the array of bins integral.Definition TH1.cxx:2586; TH1::GetBinContent",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/cumulative_8C.html:706,assert,assert,706,doc/master/cumulative_8C.html,https://root.cern,https://root.cern/doc/master/cumulative_8C.html,1,['assert'],['assert']
Testability,". ROOT: tutorials/hist/fillrandom.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. fillrandom.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Fill a 1-D histogram from a parametric function. . ; void fillrandom(int plot=1) {; gBenchmark->Start(""fillrandom"");; ; // A function (any dimension) or a formula may reference; // an already defined formula; auto form1 = new TFormula(""form1"",""abs(sin(x)/x)"");; auto sqroot = new TF1(""sqroot"",""x*gaus(0) + [3]*form1"",0,10);; sqroot->SetLineColor(4);; sqroot->SetLineWidth(6);; sqroot->SetParameters(10,4,1,20);; ; // Create a one dimensional histogram (one float per bin); // and fill it following the distribution in function sqroot.; auto h1f = new TH1F(""h1f"",""Test random numbers"",200,0,10);; h1f->FillRandom(""sqroot"",10000);; ; // Open a ROOT file and save the formula, function and histogram; TFile myfile(""fillrandom.root"",""RECREATE"");; form1->Write();; sqroot->Write();; h1f->Write();; ; // Produce a plot if requested; if (plot) {; TCanvas *c1 = new TCanvas(""c1"",""The FillRandom example"",200,10,700,900);; ; auto pad1 = new TPad(""pad1"",""The pad with the function"",0.05,0.50,0.95,0.95);; auto pad2 = new TPad(""pad2"",""The pad with the histogram"",0.05,0.05,0.95,0.45);; pad1->Draw();; pad2->Draw();; pad1->cd();; ; pad1->SetGridx();; pad1->SetGridy();; pad1->GetFrame()->SetBorderMode(-1);; pad1->GetFrame()->SetBorderSize(5);; ; sqroot->Draw();; auto lfunction = new TPaveLabel(5,39,9.8,46,""The sqroot function"");; lfunction->Draw();; c1->Update();; ; pad2->cd();; pad2->GetFrame()->SetBorderMode(-1);; pad2->GetFrame()->SetBorderSize(5);; ; h1f->SetFillColor(45);; h1f->Draw();; c1->Update();; }; ; gBenchmark->Show(""fillrandom"");; }; gBenchmarkR__EXTERN TBenchmark * gBenchmarkDefinition TBenchmark.h:59; plotwinID h TVirtualViewer3D TVirtualGLPainter char TVirtualGLPainter plotDefinition TGWin32VirtualGLProxy.cxx:53; TBenchmark::Startvirtual void Start(const char *name)Star",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fillrandom_8C.html:779,Test,Test,779,doc/master/fillrandom_8C.html,https://root.cern,https://root.cern/doc/master/fillrandom_8C.html,1,['Test'],['Test']
Testability,". ROOT: tutorials/hist/fillrandom.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; fillrandom.py File ReferenceTutorials » Histograms tutorials. Detailed Description; Fill a 1-D histogram from a parametric function. ; Original tutorial by Rene Brun. ; import ROOT; ; c1 = ROOT.TCanvas(""c1"",""The FillRandom example"",200,10,700,900); pad1 = ROOT.TPad(""pad1"",""The pad with the function"",0.05,0.50,0.95,0.95); pad2 = ROOT.TPad(""pad2"",""The pad with the histogram"",0.05,0.05,0.95,0.45); pad1.Draw(); pad2.Draw(); pad1.cd(); ROOT.gBenchmark.Start(""fillrandom""); ; form1 = ROOT.TFormula(""form1"",""abs(sin(x)/x)""); sqroot = ROOT.TF1(""sqroot"",""x*gaus(0) + [3]*form1"",0,10); sqroot.SetParameters(10,4,1,20); pad1.SetGridx(); pad1.SetGridy(); pad1.GetFrame().SetBorderMode(-1); pad1.GetFrame().SetBorderSize(5); sqroot.SetLineColor(4); sqroot.SetLineWidth(6); sqroot.Draw(); lfunction = ROOT.TPaveLabel(5,39,9.8,46,""The sqroot function""); lfunction.Draw(); c1.Update(); ; pad2.cd(); pad2.GetFrame().SetBorderMode(-1); pad2.GetFrame().SetBorderSize(5); h1f = ROOT.TH1F(""h1f"",""Test random numbers"",200,0,10); h1f.SetFillColor(45); h1f.FillRandom(""sqroot"",10000); h1f.Draw(); c1.Update(); ; f = ROOT.TFile(""fillrandom-py.root"",""RECREATE""); form1.Write(); sqroot.Write(); h1f.Write(); ROOT.gBenchmark.Show(""fillrandom""); SetBorderSizec SetBorderSize(2); AuthorAlberto Ferro ; Definition in file fillrandom.py. tutorialshistfillrandom.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fillrandom_8py.html:1126,Test,Test,1126,doc/master/fillrandom_8py.html,https://root.cern,https://root.cern/doc/master/fillrandom_8py.html,1,['Test'],['Test']
Testability,". ROOT: tutorials/hist/hlabels1.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hlabels1.C File ReferenceTutorials » Histograms tutorials. Detailed Description; 1-D histograms with alphanumeric labels . ; TCanvas *hlabels1(); {; const Int_t nx = 20;; const char *people[nx] = {""Jean"",""Pierre"",""Marie"",""Odile"",""Sebastien"",; ""Fons"",""Rene"",""Nicolas"",""Xavier"",""Greg"",""Bjarne"",""Anton"",""Otto"",; ""Eddy"",""Peter"",""Pasha"",""Philippe"",""Suzanne"",""Jeff"",""Valery""};; TCanvas *c1 = new TCanvas(""c1"",""demo bin labels"",10,10,900,500);; c1->SetGrid();; c1->SetTopMargin(0.15);; TH1F *h = new TH1F(""h"",""test"",3,0,3);; h->SetStats(0);; h->SetFillColor(38);; h->SetCanExtend(TH1::kAllAxes);; for (Int_t i=0;i<5000;i++) {; Int_t r = gRandom->Rndm()*20;; h->Fill(people[r],1);; }; h->LabelsDeflate();; h->Draw();; TPaveText *pt = new TPaveText(0.7,0.85,0.98,0.98,""brNDC"");; pt->SetFillColor(18);; pt->SetTextAlign(12);; pt->AddText(""Use the axis Context Menu LabelsOption"");; pt->AddText("" \""a\"" to sort by alphabetic order"");; pt->AddText("" \"">\"" to sort by decreasing values"");; pt->AddText("" \""<\"" to sort by increasing values"");; pt->Draw();; return c1;; }; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::kAllAxes@ kAllAxesDefinition TH1.h:76; TPaveTextA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hlabels1_8C.html:634,test,test,634,doc/master/hlabels1_8C.html,https://root.cern,https://root.cern/doc/master/hlabels1_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/hist/hlabels2.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hlabels2.C File ReferenceTutorials » Histograms tutorials. Detailed Description; 2-D histograms with alphanumeric labels. . ; TCanvas *hlabels2(); {; const Int_t nx = 12;; const Int_t ny = 20;; const char *month[nx] = {""January"",""February"",""March"",""April"",""May"",; ""June"",""July"",""August"",""September"",""October"",""November"",; ""December""};; const char *people[ny] = {""Jean"",""Pierre"",""Marie"",""Odile"",""Sebastien"",; ""Fons"",""Rene"",""Nicolas"",""Xavier"",""Greg"",""Bjarne"",""Anton"",; ""Otto"",""Eddy"",""Peter"",""Pasha"",""Philippe"",""Suzanne"",""Jeff"",; ""Valery""};; TCanvas *c1 = new TCanvas(""c1"",""demo bin labels"",10,10,600,600);; c1->SetGrid();; c1->SetLeftMargin(0.15);; c1->SetBottomMargin(0.15);; TH2F *h = new TH2F(""h"",""test"",3,0,3,2,0,2);; h->SetCanExtend(TH1::kAllAxes);; h->SetStats(0);; gRandom->SetSeed();; for (Int_t i=0;i<15000;i++) {; Int_t rx = gRandom->Rndm()*nx;; Int_t ry = gRandom->Rndm()*ny;; h->Fill(people[ry],month[rx],1);; }; h->LabelsDeflate(""X"");; h->LabelsDeflate(""Y"");; h->LabelsOption(""v"");; h->Draw(""text"");; ; TPaveText *pt = new TPaveText(0.6,0.85,0.98,0.98,""brNDC"");; pt->SetFillColor(18);; pt->SetTextAlign(12);; pt->AddText(""Use the axis Context Menu LabelsOption"");; pt->AddText("" \""a\"" to sort by alphabetic order"");; pt->AddText("" \"">\"" to sort by decreasing values"");; pt->AddText("" \""<\"" to sort by increasing values"");; pt->Draw();; return c1;; }; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1::kAllAxes@ kAllAxesDefinition TH1.h:76; TH2F2-D histogram with a float per channel (se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hlabels2_8C.html:830,test,test,830,doc/master/hlabels2_8C.html,https://root.cern,https://root.cern/doc/master/hlabels2_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/hist/hstack.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hstack.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Example of stacked histograms: class THStack. . ; void hstack(); {; auto hs = new THStack(""hs"",""Stacked 1D histograms"");; //create three 1-d histograms; auto h1st = new TH1F(""h1st"",""test hstack"",100,-4,4);; h1st->FillRandom(""gaus"",20000);; h1st->SetFillColor(kRed);; h1st->SetMarkerStyle(21);; h1st->SetMarkerColor(kRed);; hs->Add(h1st);; auto h2st = new TH1F(""h2st"",""test hstack"",100,-4,4);; h2st->FillRandom(""gaus"",15000);; h2st->SetFillColor(kBlue);; h2st->SetMarkerStyle(21);; h2st->SetMarkerColor(kBlue);; hs->Add(h2st);; auto h3st = new TH1F(""h3st"",""test hstack"",100,-4,4);; h3st->FillRandom(""gaus"",10000);; h3st->SetFillColor(kGreen);; h3st->SetMarkerStyle(21);; h3st->SetMarkerColor(kGreen);; hs->Add(h3st);; ; auto cst = new TCanvas(""cst"",""stacked hists"",10,10,700,700);; cst->Divide(2,2);; // in top left pad, draw the stack with defaults; cst->cd(1);; hs->Draw();; // in top right pad, draw the stack in non-stack mode; // and errors option; cst->cd(2);; gPad->SetGrid();; hs->Draw(""nostack,e1p"");; //in bottom left, draw in stack mode with ""lego1"" option; cst->cd(3);; gPad->SetFrameFillColor(17);; gPad->SetTheta(3.77);; gPad->SetPhi(2.9);; hs->Draw(""lego1"");; ; cst->cd(4);; //create two 2-D histograms and draw them in stack mode; gPad->SetFrameFillColor(17);; auto a = new THStack(""a"",""Stacked 2D histograms"");; auto f1 = new TF2(""f1"",; ""xygaus + xygaus(5) + xylandau(10)"",-4,4,-4,4);; Double_t params1[] = {130,-1.4,1.8,1.5,1, 150,2,0.5,-2,0.5,; 3600,-2,0.7,-3,0.3};; f1->SetParameters(params1);; auto h2sta = new TH2F(""h2sta"",""h2sta"",20,-4,4,20,-4,4);; h2sta->SetFillColor(38);; h2sta->FillRandom(""f1"",4000);; auto f2 = new TF2(""f2"",""xygaus + xygaus(5)"",-4,4,-4,4);; Double_t params2[] = {100,-1.4,1.9,1.1,2, 80,2,0.7,-2,0.5};; f2->SetParameters(params2);; auto h2stb = new T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hstack_8C.html:390,test,test,390,doc/master/hstack_8C.html,https://root.cern,https://root.cern/doc/master/hstack_8C.html,3,['test'],['test']
Testability,". ROOT: tutorials/hist/hstack.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hstack.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_hist; 3/// \notebook; 4/// Example of stacked histograms: class THStack.; 5///; 6/// \macro_image; 7/// \macro_code; 8///; 9/// \author Rene Brun; 10 ; 11void hstack(); 12{; 13 auto hs = new THStack(""hs"",""Stacked 1D histograms"");; 14 //create three 1-d histograms; 15 auto h1st = new TH1F(""h1st"",""test hstack"",100,-4,4);; 16 h1st->FillRandom(""gaus"",20000);; 17 h1st->SetFillColor(kRed);; 18 h1st->SetMarkerStyle(21);; 19 h1st->SetMarkerColor(kRed);; 20 hs->Add(h1st);; 21 auto h2st = new TH1F(""h2st"",""test hstack"",100,-4,4);; 22 h2st->FillRandom(""gaus"",15000);; 23 h2st->SetFillColor(kBlue);; 24 h2st->SetMarkerStyle(21);; 25 h2st->SetMarkerColor(kBlue);; 26 hs->Add(h2st);; 27 auto h3st = new TH1F(""h3st"",""test hstack"",100,-4,4);; 28 h3st->FillRandom(""gaus"",10000);; 29 h3st->SetFillColor(kGreen);; 30 h3st->SetMarkerStyle(21);; 31 h3st->SetMarkerColor(kGreen);; 32 hs->Add(h3st);; 33 ; 34 auto cst = new TCanvas(""cst"",""stacked hists"",10,10,700,700);; 35 cst->Divide(2,2);; 36 // in top left pad, draw the stack with defaults; 37 cst->cd(1);; 38 hs->Draw();; 39 // in top right pad, draw the stack in non-stack mode; 40 // and errors option; 41 cst->cd(2);; 42 gPad->SetGrid();; 43 hs->Draw(""nostack,e1p"");; 44 //in bottom left, draw in stack mode with ""lego1"" option; 45 cst->cd(3);; 46 gPad->SetFrameFillColor(17);; 47 gPad->SetTheta(3.77);; 48 gPad->SetPhi(2.9);; 49 hs->Draw(""lego1"");; 50 ; 51 cst->cd(4);; 52 //create two 2-D histograms and draw them in stack mode; 53 gPad->SetFrameFillColor(17);; 54 auto a = new THStack(""a"",""Stacked 2D histograms"");; 55 auto f1 = new TF2(""f1"",; 56 ""xygaus + xygaus(5) + xylandau(10)"",-4,4,-4,4);; 57 Double_t params1[] = {130,-1.4,1.8,1.5,1, 150,2,0.5,-2,0.5,; 58 3600,-2,0.7,-3,0.3};; 59 f1->SetParameters(params1);; 60 auto h2sta = new TH2F(""h2sta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hstack_8C_source.html:506,test,test,506,doc/master/hstack_8C_source.html,https://root.cern,https://root.cern/doc/master/hstack_8C_source.html,3,['test'],['test']
Testability,". ROOT: tutorials/hist/hstackpads.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hstackpads.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Drawing stack histograms on subpads. ; In this example three histograms are displayed on separate pads. If canvas divided in advance - provided subpads will be used by the THStack. ; void hstackpads(); {; auto hs = new THStack(""hs"", ""Stacked 1D histograms"");; ; // Create three 1-d histograms and add them in the stack; auto h1st = new TH1F(""h1st"", ""test hstack 1"", 100, -4, 4);; h1st->FillRandom(""gaus"", 20000);; hs->Add(h1st);; ; auto h2st = new TH1F(""h2st"", ""test hstack 2"", 100, -4, 4);; h2st->FillRandom(""gaus"", 15000);; hs->Add(h2st);; ; auto h3st = new TH1F(""h3st"", ""test hstack 3"", 100, -4, 4);; h3st->FillRandom(""gaus"", 10000);; hs->Add(h3st);; ; auto c1 = new TCanvas(""c1"", ""THStack drawing on pads"", 800, 800);; ; // prepare subpads for drawing of histograms; c1->Divide(1, 3);; ; // draw thstack on canvas with ""pads"" draw option; c1->Add(hs, ""pads"");; }; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; THStackThe Histogram stack class.Definition THStack.h:40; c1return c1Definition legend1.C:41; AuthorSergey Linev ; Definition in file hstackpads.C. tutorialshisthstackpads.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hstackpads_8C.html:566,test,test,566,doc/master/hstackpads_8C.html,https://root.cern,https://root.cern/doc/master/hstackpads_8C.html,3,['test'],['test']
Testability,". ROOT: tutorials/hist/logscales.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. logscales.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Draw parametric functions with log scales. . ; void logscales() {; TCanvas *c1 = new TCanvas(""c1"", ""Various options on LOG scales plots"",0,0,700,900);; c1->SetFillColor(30);; ; TPad *pad1 = new TPad(""pad1"",""pad1"",0.03,0.62,0.50,0.92,32);; TPad *pad2 = new TPad(""pad2"",""pad2"",0.51,0.62,0.98,0.92,33);; TPad *pad3 = new TPad(""pad3"",""pad3"",0.03,0.02,0.97,0.535,38);; pad1->Draw(); pad2->Draw(); pad3->Draw();; ; TPaveLabel *title = new TPaveLabel(0.1,0.94,0.9,0.98, ""Various options on LOG scales plots"");; title->SetFillColor(16);; title->SetTextFont(42);; title->Draw();; ; TPaveText *pave = new TPaveText(0.1,0.55,0.9,0.61);; pave->SetFillColor(42);; pave->SetTextAlign(12);; pave->SetTextFont(42);; pave->AddText(""When more Log labels are requested, the overlapping labels are removed"");; pave->Draw();; ; pad1->cd();; pad1->SetLogy();; pad1->SetGridy();; TF1 *f1 = new TF1(""f1"",""x*sin(x)*exp(-0.1*x)+15"",-10.,10.);; TF1 *f2 = new TF1(""f2"",""(sin(x)+cos(x))**5+15"",-10.,10.);; TF1 *f3 = new TF1(""f3"",""(sin(x)/(x)-x*cos(x))+15"",-10.,10.);; f1->SetLineWidth(1); f1->SetLineColor(2);; f2->SetLineWidth(1); f2->SetLineColor(3);; f3->SetLineWidth(1); f3->SetLineColor(4);; f1->Draw();; f2->Draw(""same"");; f3->Draw(""same"");; f1->GetYaxis()->SetMoreLogLabels();; TPaveText *pave1 = new TPaveText(-6,2,6,6);; pave1->SetFillColor(42);; pave1->SetTextAlign(12);; pave1->SetTextFont(42);; pave1->AddText(""Log scale along Y axis."");; pave1->AddText(""More Log labels requested."");; pave1->Draw();; ; pad2->cd();; double x[10] = { 200, 300, 400, 500, 600, 650, 700, 710, 900,1000 };; double y[10] = { 200, 1000, 900, 400, 500, 250, 800, 150, 201, 220 };; TGraph *g_2 = new TGraph(10,x,y);; g_2->Draw(""AL*"");; g_2->SetMarkerColor(2);; g_2->GetYaxis()->SetMoreLogLabels();; g_2->GetYaxis()->SetNoExponen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/logscales_8C.html:23,log,logscales,23,doc/master/logscales_8C.html,https://root.cern,https://root.cern/doc/master/logscales_8C.html,7,"['LOG', 'Log', 'log']","['LOG', 'Log', 'log', 'logscales']"
Testability,". ROOT: tutorials/hist/statsEditing.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. statsEditing.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Edit statistics box. ; This example shows:; how to remove a stat element from the stat box; how to add a new one. ; TCanvas *statsEditing() {; // Create and plot a test histogram with stats; TCanvas *se = new TCanvas;; TH1F *h = new TH1F(""h"",""test"",100,-3,3);; h->FillRandom(""gaus"",3000);; gStyle->SetOptStat();; h->Draw();; se->Update();; ; // Retrieve the stat box; TPaveStats *ps = (TPaveStats*)se->GetPrimitive(""stats"");; ps->SetName(""mystats"");; TList *listOfLines = ps->GetListOfLines();; ; // Remove the RMS line; TText *tconst = ps->GetLineWith(""RMS"");; listOfLines->Remove(tconst);; ; // Add a new line in the stat box.; // Note that ""="" is a control character; TLatex *myt = new TLatex(0,0,""Test = 10"");; myt ->SetTextFont(42);; myt ->SetTextSize(0.04);; myt ->SetTextColor(kRed);; listOfLines->Add(myt);; ; // the following line is needed to avoid that the automatic redrawing of stats; h->SetStats(0);; ; se->Modified();; return se;; }; h#define h(i)Definition RSha256.hxx:106; kRed@ kRedDefinition Rtypes.h:66; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TCanvas::Updatevoid Update() overrideUpdate canvas pad buffers.Definition TCanvas.cxx:2489; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TListA doubly linked list.Definition TList.h:38; TList::Addvoid Add(TObject *obj) overrideD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/statsEditing_8C.html:384,test,test,384,doc/master/statsEditing_8C.html,https://root.cern,https://root.cern/doc/master/statsEditing_8C.html,3,"['Test', 'test']","['Test', 'test']"
Testability,". ROOT: tutorials/hist/testSmooth.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. testSmooth.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Histogram smoothing. . ; int ipad = 1;; TCanvas * c1 = 0;; ; void smooth_hist(const char * fname, double xmin, double xmax, int n1, int n2) {; ; std::cout << ""smoothing a "" << fname << "" histogram"" << std::endl;; ; TH1D * h1 = new TH1D(""h1"",""h1"",100,xmin,xmax);; TH1D * h2 = new TH1D(""h2"",""h2"",100,xmin,xmax);; h1->FillRandom(fname,n1);; ; TH1D * h1_s = new TH1D(*h1);; h1_s->SetName(""h1_s"");; h1_s->Smooth();; ; h2->FillRandom(fname,n2);; ; double p1 = h1->Chi2Test(h2,"""");; double p2 = h1_s->Chi2Test(h2,""UU"");; if (p2 < p1) Error(""testSmooth"",""TH1::Smooth is not working correctly - a worst chi2 is obtained"");; ; std::cout << "" chi2 test non-smoothed histo "" << p1 << std::endl;; std::cout << "" chi2 test smoothed histo "" << p2 << std::endl;; ; double a1 = h1->AndersonDarlingTest(h2);; double a2 = h1_s->AndersonDarlingTest(h2);; ; std::cout << "" AD test non-smoothed histo "" << a1 << std::endl;; std::cout << "" AD test smoothed histo "" << a2 << std::endl;; ; double k1 = h1->KolmogorovTest(h2);; double k2 = h1_s->KolmogorovTest(h2);; ; std::cout << "" KS test non-smoothed histo "" << k1 << std::endl;; std::cout << "" KS test smoothed histo "" << k2 << std::endl;; ; c1->cd(ipad++);; h1->Draw(""E"");; h1_s->SetLineColor(kRed);; h1_s->Draw(""same"");; h2->Scale(double(n1)/n2);; h2->SetLineColor(kGreen);; h2->Draw(""same"");; }; ; void testSmooth(int n1 = 1000, int n2 = 1000000) {; ; TH1::AddDirectory(false);; ; c1 = new TCanvas();; c1->Divide(1,3);; ; ; smooth_hist(""gaus"",-5,5,n1,n2);; smooth_hist(""landau"",-5,15,n1,n2);; smooth_hist(""expo"",-5,0,n1,n2);; ; }; kRed@ kRedDefinition Rtypes.h:66; kGreen@ kGreenDefinition Rtypes.h:66; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; xminfloat xminDefi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/testSmooth_8C.html:23,test,testSmooth,23,doc/master/testSmooth_8C.html,https://root.cern,https://root.cern/doc/master/testSmooth_8C.html,2,['test'],['testSmooth']
Testability,". ROOT: tutorials/hist/thstack2palettecolor.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. thstack2palettecolor.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Palette coloring for 2D histograms' stack is activated thanks to the option PFC (Palette Fill Color). ; When this option is given to THStack::Draw the histograms in the THStack get their color from the current color palette defined by gStyle->SetPalette(...). The color is determined according to the number of histograms.; In this example four 2D histograms are displayed with palette coloring. The color of each graph is picked inside the palette number 1. ; void thstack2palettecolor() ; {; gStyle->SetPalette(1);; auto h1 = new TH2F(""h1"",""h1"",20,0,6,20,-4,4);; auto h2 = new TH2F(""h2"",""h2"",20,0,6,20,-4,4);; auto h3 = new TH2F(""h3"",""h3"",20,0,6,20,-4,4);; auto h4 = new TH2F(""h4"",""h4"",20,0,6,20,-4,4);; auto h5 = new TH2F(""h5"",""h5"",20,0,6,20,-4,4);; h2->Fill(2.,0.,5);; h3->Fill(3.,0.,10);; h4->Fill(4.,0.,15);; h5->Fill(5.,0.,20);; auto hs = new THStack(""hs"",""Test of palette colored lego stack"");; hs->Add(h1);; hs->Add(h2);; hs->Add(h3);; hs->Add(h4);; hs->Add(h5);; hs->Draw(""0lego1 PFC"");; }; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; THStackThe Histogram stack class.Definition THStack.h:40; TStyle::SetPalettevoid SetPalette(Int_t ncolors=kBird, Int_t *colors=nullptr, Float_t alpha=1.)See TColor::SetPalette.Definition TStyle.cxx:1888; h1TH1F * h1Definition legend1.C:5; AuthorOlivier Couet ; Definition in file thstack2palettecolor.C. tutorialshistthstack2palettecolor.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/thstack2palettecolor_8C.html:1100,Test,Test,1100,doc/master/thstack2palettecolor_8C.html,https://root.cern,https://root.cern/doc/master/thstack2palettecolor_8C.html,1,['Test'],['Test']
Testability,". ROOT: tutorials/hist/thstackpalettecolor.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. thstackpalettecolor.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Palette coloring for histograms' stack is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ; When one of these options is given to THStack::Draw the histograms in the THStack get their color from the current color palette defined by gStyle->SetPalette(...). The color is determined according to the number of histograms.; In this example four histograms are displayed with palette coloring. The color of each histogram is picked inside the palette kOcean. ; void thstackpalettecolor(); {; auto hs = new THStack(""hs"",""Stacked 1D histograms colored using kOcean palette"");; ; gStyle->SetPalette(kOcean);; ; // Create three 1-d histograms and add them in the stack; auto h1st = new TH1F(""h1st"",""test hstack"",100,-4,4);; h1st->FillRandom(""gaus"",20000);; hs->Add(h1st);; ; auto h2st = new TH1F(""h2st"",""test hstack"",100,-4,4);; h2st->FillRandom(""gaus"",15000);; hs->Add(h2st);; ; auto h3st = new TH1F(""h3st"",""test hstack"",100,-4,4);; h3st->FillRandom(""gaus"",10000);; hs->Add(h3st);; ; // draw the stack; hs->Draw(""pfc nostack"");; }; kOcean@ kOceanDefinition TColor.h:119; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; THStackThe Histogram stack class.Definition THStack.h:40; TStyle::SetPalettevoid SetPalette(Int_t ncolors=kBird, Int_t *colors=nullptr, Float_t alpha=1.)See TColor::SetPalette.Definition TStyle.cxx:1888; AuthorOlivier Couet ; Definition in file thstackpalettecolor.C. tutorialshistthstackpalettecolor.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/thstackpalettecolor_8C.html:992,test,test,992,doc/master/thstackpalettecolor_8C.html,https://root.cern,https://root.cern/doc/master/thstackpalettecolor_8C.html,3,['test'],['test']
Testability,". ROOT: tutorials/io Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. io Directory Reference. Directory dependency graph for io:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Files;  copyFiles.C;   Example of script showing how to copy all objects (including directories) from a source file. ;  ;  dirs.C;   This macro illustrates how to create a hierarchy of directories in a Root file. ;  ;  double32.C;   Tutorial illustrating use and precision of the Double32_t data type You should run this tutorial with ACLIC: a dictionary will be automatically created. ;  ;  fildir.C;   This macro displays the ROOT Directory data structure ;  ;  file.C;   This macro displays the physical ROOT file structure ;  ;  float16.C;   Tutorial illustrating use and precision of the Float16_t data type. ;  ;  hadd.C;   Macro to add histogram files This macro is kept for didactical purposes only: use instead the executable $ROOTSYS/bin/hadd ! ;  ;  importCode.C;   Example of script showing how to create a ROOT file with subdirectories. ;  ;  loopdir.C;   Example script to loop over all the objects of a ROOT file directory and print in Postscript all the TH1 derived objects. ;  ;  loopdir11.C;   Example script to loop over all the objects of a ROOT file directory and print in Postscript all the TH1 derived objects. ;  ;  mergeSelective.C;   Merge only part of the content of a set of files. ;  ;  readCode.C;   Example of script showing how to navigate in a ROOT file with sub-directories and read the objects in each sub-directory. ;  ;  testMergeCont.C;   Macro demonstrating the merging of containers. ;  ;  testTMPIFile.C;  This macro shows the usage of TMPIFile to simulate event reconstruction and merging them in parallel. ;  . tutorialsio. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_715fafd9bc85e47ed5557926189f8f1b.html:1626,test,testMergeCont,1626,doc/master/dir_715fafd9bc85e47ed5557926189f8f1b.html,https://root.cern,https://root.cern/doc/master/dir_715fafd9bc85e47ed5557926189f8f1b.html,2,['test'],"['testMergeCont', 'testTMPIFile']"
Testability,". ROOT: tutorials/math/testrandom.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. testrandom.C File ReferenceTutorials » Math tutorials. Detailed Description; Performance test of all the ROOT random generator (TRandom, TRandom1, TRandom2 and TRandom3) Tests the generator TRandom3 against some ref values and creates a timing table against TRandom, TRandom1 and TRandom2. ; E.g. on an an Intel Xeon Quad-core Harpertown (E5410) 2.33 GHz running Linux SLC4 64 bit and compiled with gcc 3.4; Distribution nanoseconds/call; TRandom TRandom1 TRandom2 TRandom3; Rndm.............. 5.000 105.000 7.000 10.000; RndmArray......... 4.000 104.000 6.000 9.000; Gaus.............. 36.000 180.000 40.000 48.000; Rannor............ 118.000 220.000 120.000 124.000; Landau............ 22.000 123.000 26.000 31.000; Exponential....... 93.000 198.000 98.000 104.000; Binomial(5,0.5)... 30.000 548.000 46.000 65.000; Binomial(15,0.5).. 75.000 1615.000 125.000 178.000; Poisson(3)........ 96.000 494.000 109.000 125.000; Poisson(10)....... 138.000 1236.000 165.000 203.000; Poisson(70)....... 818.000 1195.000 835.000 844.000; Poisson(100)...... 837.000 1218.000 849.000 864.000; GausTF1........... 83.000 180.000 87.000 88.000; LandauTF1......... 80.000 180.000 83.000 86.000; GausUNURAN........ 40.000 139.000 41.000 44.000; PoissonUNURAN(10). 85.000 271.000 92.000 102.000; PoissonUNURAN(100) 62.000 256.000 69.000 78.000; TRandom1The Ranlux Random number generator class.Definition TRandom1.h:27; TRandom2Random number generator class based on the maximally quidistributed combined Tausworthe generator by ...Definition TRandom2.h:27; TRandom3Random number generator class based on M.Definition TRandom3.h:27; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; Note that this tutorial can be executed in interpreted or compiled mode; Root > .x testrandom.C; Root > .x testrandom.C++; ; Distribution nanoseconds/call; TRando",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/testrandom_8C.html:23,test,testrandom,23,doc/master/testrandom_8C.html,https://root.cern,https://root.cern/doc/master/testrandom_8C.html,4,"['Test', 'test']","['Tests', 'test', 'testrandom']"
Testability,". ROOT: tutorials/pyroot/fit1.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; fit1.py File ReferenceTutorials » PyRoot tutorials. Detailed Description; Fit example. . TFile** fillrandom-py.root ; TFile* fillrandom-py.root ; KEY: TFormula form1;1 abs(sin(x)/x); KEY: TF1 sqroot;1 x*gaus(0) + [3]*form1; KEY: TH1F h1f;1 Test random numbers; Formula based function: sqroot ; sqroot : x*gaus(0) + [3]*form1 Ndim= 1, Npar= 4, Number= 0 ; Formula expression: ; x*[p0]*exp(-0.5*((x-[p1])/[p2])*((x-[p1])/[p2]))+[p3]*(abs(sin(x)/x)) ; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 198.935; NDf = 190; Edm = 1.49283e-07; NCalls = 149; p0 = 33.1658 +/- 0.545703 ; p1 = 4.00667 +/- 0.0165304 ; p2 = 0.984663 +/- 0.0128238 ; p3 = 63.4464 +/- 1.33233 ; fit1 : Real Time = 0.36 seconds Cpu Time = 0.37 seconds; ; import ROOT; from os import path; from ROOT import TCanvas, TFile, TPaveText; from ROOT import gROOT, gBenchmark; ; c1 = TCanvas( 'c1', 'The Fit Canvas', 200, 10, 700, 500 ); c1.SetGridx(); c1.SetGridy(); c1.GetFrame().SetFillColor( 21 ); c1.GetFrame().SetBorderMode(-1 ); c1.GetFrame().SetBorderSize( 5 ); ; gBenchmark.Start( 'fit1' ); #; # We connect the ROOT file generated in a previous tutorial; #; File = ""fillrandom-py.root""; if (ROOT.gSystem.AccessPathName(File)) :; ROOT.Info(""fit1.py"", File+"" does not exist""); exit(); ; fill = TFile(File); ; #; # The function ""ls()"" lists the directory contents of this file; #; fill.ls(); ; #; # Get object ""sqroot"" from the file.; #; ; sqroot = gROOT.FindObject( 'sqroot' ); sqroot.Print(); ; #; # Now fit histogram h1f with the function sqroot; #; h1f = gROOT.FindObject( 'h1f' ); h1f.SetFillColor( 45 ); h1f.Fit( 'sqroot' ); ; # We now annotate the picture by creating a PaveText object; # and displaying the list of commands in this macro; #; fitlabel = TPaveText( 0.6, 0.3, 0.9, 0.80, 'NDC' ); fitlabel.SetTextAlign( 12 ); fitlabel.SetFillColor( 42 ); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fit1_8py.html:383,Test,Test,383,doc/master/fit1_8py.html,https://root.cern,https://root.cern/doc/master/fit1_8py.html,1,['Test'],['Test']
Testability,". ROOT: tutorials/pyroot/zdemo.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; zdemo.py File ReferenceTutorials » PyRoot tutorials. Detailed Description; This macro is an example of graphs in log scales with annotations. ; The presented results are predictions of invariant cross-section of Direct Photons produced at RHIC energies, based on the universality of scaling function H(z).; These Figures were published in JINR preprint E2-98-64, Dubna, 1998 and submitted to CPC. ; import ROOT; from array import array; ; NMAX = 20; Z = array( 'f', [0.]*NMAX ); HZ = array( 'f', [0.]*NMAX ); PT = array( 'f', [0.]*NMAX ); INVSIG = array( 'f', [0.]*NMAX ); ; NLOOP = 0; saves = {}; ; #_______________________________________________________________________________; def hz_calc( ENERG, DENS, TGRAD, PTMIN, PTMAX, DELP ):; from math import sin, cos, sqrt; global NLOOP; global Z, HZ, PT, INVSIG; ; CSEFT= 1.; GM1 = 0.00001; GM2 = 0.00001; A1 = 1.; A2 = 1.; ALX = 2.; BETA = 1.; KF1 = 8.E-7; KF2 = 5.215; ; MN = 0.9383; DEGRAD=0.01745329; ; # print 'ENR= %f DENS= %f PTMIN= %f PTMAX= %f DELP= %f ' % (ENERG,DENS,PTMIN,PTMAX,DELP); ; DNDETA= DENS; MB1 = MN*A1; MB2 = MN*A2; EB1 = ENERG/2.*A1; EB2 = ENERG/2.*A2; M1 = GM1; M2 = GM2; THET = TGRAD*DEGRAD; NLOOP = int((PTMAX-PTMIN)/DELP); ; for I in range(NLOOP):; PT[I]=PTMIN+I*DELP; PTOT = PT[I]/sin(THET); ; ETOT = sqrt(M1*M1 + PTOT*PTOT); PB1 = sqrt(EB1*EB1 - MB1*MB1); PB2 = sqrt(EB2*EB2 - MB2*MB2); P2P3 = EB2*ETOT+PB2*PTOT*cos(THET); P1P2 = EB2*EB1+PB2*PB1; P1P3 = EB1*ETOT-PB1*PTOT*cos(THET); ; X1 = P2P3/P1P2; X2 = P1P3/P1P2; Y1 = X1+sqrt(X1*X2*(1.-X1)/(1.-X2)); Y2 = X2+sqrt(X1*X2*(1.-X2)/(1.-X1)); ; S = (MB1*MB1)+2.*P1P2+(MB2*MB2); SMIN = 4.*((MB1*MB1)*(X1*X1) +2.*X1*X2*P1P2+(MB2*MB2)*(X2*X2)); SX1 = 4.*( 2*(MB1*MB1)*X1+2*X2*P1P2); SX2 = 4.*( 2*(MB2*MB2)*X2+2*X1*P1P2); SX1X2= 4.*(2*P1P2); DELM = pow((1.-Y1)*(1.-Y2),ALX); ; Z[I] = sqrt(SMIN)/DELM/pow(DNDETA,BETA); ; Y1X1 = 1. +X2*(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/zdemo_8py.html:257,log,log,257,doc/master/zdemo_8py.html,https://root.cern,https://root.cern/doc/master/zdemo_8py.html,1,['log'],['log']
Testability,". ROOT: tutorials/roofit/rf506_msgservice.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf506_msgservice.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Organisation and simultaneous fits: tuning and customizing the RooFit message logging facility ; ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""RooPolynomial.h""; #include ""RooAddPdf.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""RooPlot.h""; #include ""RooMsgService.h""; ; using namespace RooFit;; ; void rf506_msgservice(); {; // C r e a t e p d f; // --------------------; ; // Construct gauss(x,m,s); RooRealVar x(""x"", ""x"", -10, 10);; RooRealVar m(""m"", ""m"", 0, -10, 10);; RooRealVar s(""s"", ""s"", 1, -10, 10);; RooGaussian gauss(""g"", ""g"", x, m, s);; ; // Construct poly(x,p0); RooRealVar p0(""p0"", ""p0"", 0.01, 0., 1.);; RooPolynomial poly(""p"", ""p"", x, p0);; ; // Construct model = f*gauss(x) + (1-f)*poly(x); RooRealVar f(""f"", ""f"", 0.5, 0., 1.);; RooAddPdf model(""model"", ""model"", RooArgSet(gauss, poly), f);; ; std::unique_ptr<RooDataSet> data{model.generate(x, 10)};; ; // P r i n t c o n f i g u r a t i o n o f m e s s a g e s e r v i c e; // ---------------------------------------------------------------------------; ; // Print streams configuration; RooMsgService::instance().Print();; cout << endl;; ; // A d d i n g I n t e g r a t i o n t o p i c t o e x i s t i n g I N F O s t r e a m; // -----------------------------------------------------------------------------------------------; ; // Print streams configuration; RooMsgService::instance().Print();; cout << endl;; ; // Add Integration topic to existing INFO stream; RooMsgService::instance().getStream(1).addTopic(Integration);; ; // Construct integral over gauss to demonstrate new message stream; std::unique_ptr<RooAbsReal> igauss{gauss.createIntegral(x)};; igauss->Print();; ; // Print streams configuration in verbose, which also shows inactive streams",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf506__msgservice_8C.html:304,log,logging,304,doc/master/rf506__msgservice_8C.html,https://root.cern,https://root.cern/doc/master/rf506__msgservice_8C.html,1,['log'],['logging']
Testability,". ROOT: tutorials/roofit/rf506_msgservice.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf506_msgservice.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Organization and simultaneous fits: tuning and customizing the ROOT.RooFit message logging facility ; ; import ROOT; ; # Create pdf; # --------------------; ; # Construct gauss(x,m,s); x = ROOT.RooRealVar(""x"", ""x"", -10, 10); m = ROOT.RooRealVar(""m"", ""m"", 0, -10, 10); s = ROOT.RooRealVar(""s"", ""s"", 1, -10, 10); gauss = ROOT.RooGaussian(""g"", ""g"", x, m, s); ; # Construct poly(x,p0); p0 = ROOT.RooRealVar(""p0"", ""p0"", 0.01, 0.0, 1.0); poly = ROOT.RooPolynomial(""p"", ""p"", x, [p0]); ; # model = f*gauss(x) + (1-f)*poly(x); f = ROOT.RooRealVar(""f"", ""f"", 0.5, 0.0, 1.0); model = ROOT.RooAddPdf(""model"", ""model"", [gauss, poly], [f]); ; data = model.generate({x}, 10); ; # Print configuration of message service; # ------------------------------------------; ; # Print streams configuration; ROOT.RooMsgService.instance().Print(); ; # Adding integration topic to existing INFO stream; # ---------------------------------------------------; ; # Print streams configuration; ROOT.RooMsgService.instance().Print(); ; # Add Integration topic to existing INFO stream; ROOT.RooMsgService.instance().getStream(1).addTopic(ROOT.RooFit.Integration); ; # Construct integral over gauss to demonstrate message stream; igauss = gauss.createIntegral({x}); igauss.Print(); ; # Print streams configuration in verbose, also shows inactive streams; ROOT.RooMsgService.instance().Print(); ; # Remove stream; ROOT.RooMsgService.instance().getStream(1).removeTopic(ROOT.RooFit.Integration); ; # Examples of pdf value tracing; # -----------------------------------------------------------------------; ; # Show DEBUG level message on function tracing, ROOT.RooGaussian only; ROOT.RooMsgService.instance().addStream(ROOT.RooFit.DEBUG, Topic=ROOT.RooFit.Tracing, ClassName=""RooGaussian""); ; # ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf506__msgservice_8py.html:324,log,logging,324,doc/master/rf506__msgservice_8py.html,https://root.cern,https://root.cern/doc/master/rf506__msgservice_8py.html,1,['log'],['logging']
Testability,". ROOT: tutorials/roofit/rf612_recoverFromInvalidParameters.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf612_recoverFromInvalidParameters.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Likelihood and minimization: Recover from regions where the function is not defined. ; We demonstrate improved recovery from disallowed parameters. For this, we use a polynomial PDF of the form ; \[; \mathrm{Pol2} = \mathcal{N} \left( c + a_1 \cdot x + a_2 \cdot x^2 + 0.01 \cdot x^3 \right),; \]. where \( \mathcal{N} \) is a normalisation factor. Unless the parameters are chosen carefully, this function can be negative, and hence, it cannot be used as a PDF. In this case, RooFit passes an error to the minimiser, which might try to recover.; Before ROOT 6.24, RooFit always passed the highest function value that was encountered during the minimisation to the minimiser. If a parameter is far in a disallowed region, the minimiser has to blindly test various values of the parameters. It might find the correct values by chance, but often be unable to recover from bad starting values. Here, we use a model with such bad values.; Starting with ROOT 6.24, the minimiser receives more information. For example, when a PDF is negative, the magnitude of the ""undershoot"" is passed to the minimiser. The minimiser can use this to compute a gradient, which will eventually lead it out of the disallowed region. The steepness of this gradient can be chosen using RooFit::RecoverFromUndefinedRegions(double). A value of zero is equivalent to RooFit before ROOT 6.24. Positive values activate the recovery. Values between 1. and 10. were found to be a good default. If no argument is passed, RooFit uses 10.; ; #include <RooRealVar.h>; #include <RooPolynomial.h>; #include <RooPlot.h>; #include <RooDataSet.h>; #include <RooGlobalFunc.h>; #include <RooFitResult.h>; #include <RooMsgService.h>; ; #include <TCanvas.h>; #include <TLegend.h>; ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8C.html:1013,test,test,1013,doc/master/rf612__recoverFromInvalidParameters_8C.html,https://root.cern,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/roofit/rf616_morphing.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf616_morphing.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Use Morphing in RooFit. ; This tutorial shows how to use template morphing inside RooFit. As input we have several Gaussian distributions. The output is one gaussian, with a specific mean value. Since likelihoods are often used within the framework of morphing, we provide a way to estimate the negative log likelihood (nll).; Based on example of Kyle Cranmer https://gist.github.com/cranmer/b67830e46d53d5f7cf2d. ; #include ""RooRealVar.h""; #include ""RooRealVar.h""; #include ""RooWorkspace.h""; #include ""RooGaussian.h""; #include ""RooUniform.h""; #include ""RooDataSet.h""; #include ""RooPlot.h""; #include ""RooMomentMorphFuncND.h""; #include ""RooAbsPdf.h""; ; using namespace RooFit;; ; // Number of samples to fill the histograms; const int n_samples = 1000;; ; // Kills warning massages; RooMsgService::instance().setGlobalKillBelow(RooFit::WARNING);; ; // Define the morphing routine; RooPlot *perform_morphing(RooWorkspace &ws, RooMomentMorphFuncND::Setting setting, double sigma); {; // Get Variables from the workspace; RooRealVar *x_var = ws.var(""x"");; RooRealVar *mu_var = ws.var(""mu"");; RooAbsPdf *gauss = ws.pdf(""gauss"");; ; // Initialize a plot; RooPlot *frame1 = x_var->frame();; ; // Define binning for morphing; RooMomentMorphFuncND::Grid grid(RooBinning(4, 0.0, 4.0));; ; // Set binning of histograms, has to be customized for optimal results; x_var->setBins(50);; ; std::vector<int> parampoints = {0, 1, 2, 3, 4};; ; for (auto i : parampoints) {; // Define the sampled gaussians; RooRealVar mu_help(Form(""mu%d"", i), Form(""mu%d"", i), i);; // Use * because RooGaussian expects objects no pointers; RooGaussian help(Form(""g%d"", i), Form(""g%d"", i), *x_var, mu_help, sigma);; ws.import(help, Silence(true));; ; // Fill the histograms use a unique pointer to prevent memory lea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf616__morphing_8C.html:526,log,log,526,doc/master/rf616__morphing_8C.html,https://root.cern,https://root.cern/doc/master/rf616__morphing_8C.html,1,['log'],['log']
Testability,". ROOT: tutorials/roofit/rf616_morphing.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf616_morphing.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Use Morphing in RooFit. ; This tutorial shows how to use template morphing inside RooFit. As input we have several Gaussian distributions. The output is one gaussian, with a specific mean value. Since likelihoods are often used within the framework of morphing, we provide a way to estimate the negative log likelihood (nll).; Based on example of Kyle Cranmer https://gist.github.com/cranmer/46fff8d22015e5a26619. ; ; import ROOT; ; # Number of samples to fill the histograms; n_samples = 1000; ; ; # Kills warning messages; ROOT.RooMsgService.instance().setGlobalKillBelow(ROOT.RooFit.WARNING); ; ; # morphing as a baseline; def morphing(setting):; # set up a frame for plotting; frame1 = x_var.frame(); ; # define binning for morphing; bin_mu_x = ROOT.RooBinning(4, 0.0, 4.0); grid = ROOT.RooMomentMorphFuncND.Grid(bin_mu_x); x_var.setBins(50); ; # number of 'sampled' Gaussians, if you change it, adjust the binning properly; for i in range(5):; # Create the sampled Gaussian; workspace.factory(f""Gaussian::g{i}(x, mu{i}[{i}], {sigma})"".format(i=i)); ; # Fill the histograms; hist = workspace[f""g{i}""].generateBinned([x_var], n_samples * 100); # Make sure that every bin is filled and we don't get zero probability; for i_bin in range(hist.numEntries()):; hist.add(hist.get(i_bin), 1.0); ; # Add the pdf to the workspace, the inOrder of 1 is necessary for calculation of the nll; # Adjust it to 0 to see binning; workspace.Import(ROOT.RooHistPdf(f""histpdf{i}"", f""histpdf{i}"", [x_var], hist, intOrder=1)); ; # Add the pdf to the grid and to the plot; grid.addPdf(workspace[f""histpdf{i}""], int(i)); workspace[f""histpdf{i}""].plotOn(frame1); ; # Create the morphing and add it to the workspace; morph_func = ROOT.RooMomentMorphFuncND(""morph_func"", ""morph_func"", [mu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf616__morphing_8py.html:541,log,log,541,doc/master/rf616__morphing_8py.html,https://root.cern,https://root.cern/doc/master/rf616__morphing_8py.html,1,['log'],['log']
Testability,". ROOT: tutorials/tmva/TMVAClassification.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVAClassification.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This macro provides examples for the training and testing of the TMVA classifiers. ; As input data is used a toy-MC sample consisting of four Gaussian-distributed and linearly correlated input variables. The methods to be used can be switched on and off by means of booleans, or via the prompt command, for example: root -l ./TMVAClassification.C\‍(\""Fisher,Likelihood\""\‍); (note that the backslashes are mandatory) If no method given, a default set of classifiers is used. The output file ""TMVAC.root"" can be analysed with the use of dedicated macros (simply say: root -l <macro.C>), which can be conveniently invoked through a GUI that will appear at the end of the run of this macro. Launch the GUI via the command: root -l ./TMVAGui.C; You can also compile and run the example with the following commands make; ./TMVAClassification <Methods>; where: <Methods> = ""method1 method2"" are the TMVA classifier names example: ./TMVAClassification Fisher LikelihoodPCA BDT; If no method given, a default set is of classifiers is used. Project : TMVA - a ROOT-integrated toolkit for multivariate data analysis; Package : TMVA; Root Macro: TMVAClassification. ; ; ==> Start TMVAClassification; --- TMVAClassification : Using input file: ./files/tmva_class_example.root; DataSetInfo : [dataset] : Added class ""Signal""; : Add Tree TreeS of type Signal with 6000 events; DataSetInfo : [dataset] : Added class ""Background""; : Add Tree TreeB of type Background with 6000 events; Factory : Booking method: ␛[1mCuts␛[0m; : ; : Use optimization method: ""Monte Carlo""; : Use efficiency computation method: ""Event Selection""; : Use ""FSmart"" cuts for variable: 'myvar1'; : Use ""FSmart"" cuts for variable: 'myvar2'; : Use ""FSmart"" cuts for variable: 'var3'; : Use ""FSmart"" cuts for variable: ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:276,test,testing,276,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['test'],['testing']
Testability,". ROOT: tutorials/tmva/TMVAClassification.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVAClassification.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_tmva; 3/// \notebook -nodraw; 4/// This macro provides examples for the training and testing of the; 5/// TMVA classifiers.; 6///; 7/// As input data is used a toy-MC sample consisting of four Gaussian-distributed; 8/// and linearly correlated input variables.; 9/// The methods to be used can be switched on and off by means of booleans, or; 10/// via the prompt command, for example:; 11///; 12/// root -l ./TMVAClassification.C\‍(\""Fisher,Likelihood\""\‍); 13///; 14/// (note that the backslashes are mandatory); 15/// If no method given, a default set of classifiers is used.; 16/// The output file ""TMVAC.root"" can be analysed with the use of dedicated; 17/// macros (simply say: root -l <macro.C>), which can be conveniently; 18/// invoked through a GUI that will appear at the end of the run of this macro.; 19/// Launch the GUI via the command:; 20///; 21/// root -l ./TMVAGui.C; 22///; 23/// You can also compile and run the example with the following commands; 24///; 25/// make; 26/// ./TMVAClassification <Methods>; 27///; 28/// where: `<Methods> = ""method1 method2""` are the TMVA classifier names; 29/// example:; 30///; 31/// ./TMVAClassification Fisher LikelihoodPCA BDT; 32///; 33/// If no method given, a default set is of classifiers is used; 34///; 35/// - Project : TMVA - a ROOT-integrated toolkit for multivariate data analysis; 36/// - Package : TMVA; 37/// - Root Macro: TMVAClassification; 38///; 39/// \macro_output; 40/// \macro_code; 41/// \author Andreas Hoecker; 42 ; 43 ; 44#include <cstdlib>; 45#include <iostream>; 46#include <map>; 47#include <string>; 48 ; 49#include ""TChain.h""; 50#include ""TFile.h""; 51#include ""TTree.h""; 52#include ""TString.h""; 53#include ""TObjString.h""; 54#include ""TSystem.h""; 55#include ""TROOT.h""; 56 ; 57#inclu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C_source.html:318,test,testing,318,doc/master/TMVAClassification_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C_source.html,1,['test'],['testing']
Testability,". ROOT: tutorials/tmva/TMVAClassificationCategory.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVAClassificationCategory.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode. . Project : TMVA - a Root-integrated toolkit for multivariate data analysis; Package : TMVA; Root Macro: TMVAClassificationCategory. As input data is used a toy-MC sample consisting of four Gaussian-distributed and linearly correlated input variables with category (eta) dependent properties.; For this example, only Fisher and Likelihood are used. Run via: root -l TMVAClassificationCategory.C; The output file ""TMVACC.root"" can be analysed with the use of dedicated macros (simply say: root -l <macro.C>), which can be conveniently invoked through a GUI that will appear at the end of the run of this macro.; ; ; ==> Start TMVAClassificationCategory; --- TMVAClassificationCategory: Accessing /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/tutorials/tmva/data/toy_sigbkg_categ_offset.root; <HEADER> DataSetInfo : [dataset] : Added class ""Signal""; : Add Tree TreeS of type Signal with 10000 events; <HEADER> DataSetInfo : [dataset] : Added class ""Background""; : Add Tree TreeB of type Background with 10000 events; <HEADER> Factory : Booking method: Fisher; : ; <HEADER> Factory : Booking method: Likelihood; : ; <HEADER> Factory : Booking method: FisherCat; : ; : Adding sub-classifier: Fisher::Category_Fisher_1; <HEADER> DataSetInfo : [Category_Fisher_1_dsi] : Added class ""Signal""; <HEADER> DataSetInfo : [Category_Fisher_1_dsi] : Added class ""Background""; : Adding sub-classifier: Fisher::Category_Fisher_2; <HEADER> DataSetInfo : [Category_Fisher_2_dsi] : Added class ""Signal""; <HEADER> DataSetInfo : [Category_Fisher_2_dsi] : Added class ""Background""; <HEADER> Factory : Booking method: LikelihoodCat; : ; : Adding su",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassificationCategory_8C.html:292,test,testing,292,doc/master/TMVAClassificationCategory_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassificationCategory_8C.html,1,['test'],['testing']
Testability,. ROOT: tutorials/tmva/TMVAGAexample.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVAGAexample.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This executable gives an example of a very simple use of the genetic algorithm of TMVA . Project : TMVA - a Root-integrated toolkit for multivariate data analysis; Package : TMVA; Executable: TMVAGAexample. ; Start Test TMVAGAexample; ========================; ; EXAMPLE; range: 0 15; range: 0 13; range: 0 5; : fitness: -160.873 f_0: 13.4483 f_1: 12.8918 f_2: 2.5 ; ---; : fitness: -166.504 f_0: 14.4828 f_1: 12.3598 f_2: 2.5 ; ---; : fitness: -178.422 f_0: 15 f_1: 12.8948 f_2: 5 ; ---; : fitness: -178.422 f_0: 15 f_1: 12.8948 f_2: 5 ; ---; : fitness: -180.587 f_0: 15 f_1: 12.8725 f_2: 2.5 ; ---; : fitness: -180.587 f_0: 15 f_1: 12.8725 f_2: 2.5 ; ---; : fitness: -181.686 f_0: 15 f_1: 12.779 f_2: 0 ; ---; : fitness: -181.686 f_0: 15 f_1: 12.779 f_2: 0 ; ---; : fitness: -183.087 f_0: 15 f_1: 12.8725 f_2: 0 ; ---; : fitness: -183.422 f_0: 15 f_1: 12.8948 f_2: 0 ; ---; : fitness: -183.422 f_0: 15 f_1: 12.8948 f_2: 0 ; ---; : fitness: -183.422 f_0: 15 f_1: 12.8948 f_2: 0 ; ---; : fitness: -184.957 f_0: 15 f_1: 12.9972 f_2: 0 ; ---; : fitness: -184.957 f_0: 15 f_1: 12.9972 f_2: 0 ; ---; : fitness: -184.957 f_0: 15 f_1: 12.9972 f_2: 0 ; ---; : fitness: -184.957 f_0: 15 f_1: 12.9972 f_2: 0 ; ---; : fitness: -184.957 f_0: 15 f_1: 12.9972 f_2: 0 ; ---; : fitness: -184.957 f_0: 15 f_1: 12.9972 f_2: 0 ; ---; : fitness: -184.957 f_0: 15 f_1: 12.9972 f_2: 0 ; ---; : fitness: -184.957 f_0: 15 f_1: 12.9972 f_2: 0 ; ---; : fitness: -184.957 f_0: 15 f_1: 12.9972 f_2: 0 ; ---; : fitness: -184.957 f_0: 15 f_1: 12.9972 f_2: 0 ; ---; : fitness: -184.957 f_0: 15 f_1: 12.9972 f_2: 0 ; ---; : fitness: -184.957 f_0: 15 f_1: 12.9972 f_2: 0 ; ---; : fitness: -184.957 f_0: 15 f_1: 12.9972 f_2: 0 ; ---; : fitness: -184.957 f_0: 15 f_1: 12.9972 f_2: 0 ; ---; : fitness: -184.957 f_0: 15 f,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAGAexample_8C.html:431,Test,Test,431,doc/master/TMVAGAexample_8C.html,https://root.cern,https://root.cern/doc/master/TMVAGAexample_8C.html,1,['Test'],['Test']
Testability,". ROOT: tutorials/tmva/TMVAGAexample2.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVAGAexample2.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This executable gives an example of a very simple use of the genetic algorithm of TMVA. . Project : TMVA - a Root-integrated toolkit for multivariate data analysis; Package : TMVA; Executable: TMVAGAexample. ; Start Test TMVAGAexample; ========================; ; ; EXAMPLE; range: 0 15; range: 0 13; range: 0 5; FitterBase : <GeneticFitter> Optimisation, please be patient ... (inaccurate progress timing for GA); : Elapsed time: 0.0113 sec ; FACTOR 0 : 15; FACTOR 1 : 13; FACTOR 2 : 0; ; ; #include <iostream> // Stream declarations; #include <vector>; ; #include ""TMVA/GeneticAlgorithm.h""; #include ""TMVA/GeneticFitter.h""; #include ""TMVA/IFitterTarget.h""; ; using std::vector, std::cout, std::endl;; ; namespace TMVA {; ; ; class MyFitness : public IFitterTarget {; public:; MyFitness() : IFitterTarget() {; }; ; // the fitness-function goes here; // the factors are optimized such that the return-value of this function is minimized; // take care!! the fitness-function must never fail, .. means: you have to prevent; // the function from reaching undefined values (such as x=0 for 1/x or so); //; // HINT: to use INTEGER variables, it is sufficient to cast the ""factor"" in the fitness-function; // to (int). In this case the variable-range has to be chosen +1 ( to get 0..5, take Interval(0,6) ); // since the introduction of ""Interval"" ranges can be defined with a third parameter; // which gives the number of bins within the interval. With that technique discrete values; // can be achieved easier. The random selection out of this discrete numbers is completely uniform.; //; Double_t EstimatorFunction( std::vector<Double_t> & factors ){; //return (10.- (int)factors.at(0) *factors.at(1) + (int)factors.at(2));; return (10.- factors.at(0) *factors.at(1) + factors.at(2));; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAGAexample2_8C.html:434,Test,Test,434,doc/master/TMVAGAexample2_8C.html,https://root.cern,https://root.cern/doc/master/TMVAGAexample2_8C.html,1,['Test'],['Test']
Testability,". ROOT: tutorials/tmva/TMVAMulticlass.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVAMulticlass.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This macro provides a simple example for the training and testing of the TMVA multiclass classification . Project : TMVA - a Root-integrated toolkit for multivariate data analysis; Package : TMVA; Root Macro: TMVAMulticlass. ; ; ==> Start TMVAMulticlass; --- TMVAMulticlass: Using input file: ./files/tmva_multiclass_example.root; DataSetInfo : [dataset] : Added class ""Signal""; : Add Tree TreeS of type Signal with 2000 events; DataSetInfo : [dataset] : Added class ""bg0""; : Add Tree TreeB0 of type bg0 with 2000 events; DataSetInfo : [dataset] : Added class ""bg1""; : Add Tree TreeB1 of type bg1 with 2000 events; DataSetInfo : [dataset] : Added class ""bg2""; : Add Tree TreeB2 of type bg2 with 2000 events; : Dataset[dataset] : Class index : 0 name : Signal; : Dataset[dataset] : Class index : 1 name : bg0; : Dataset[dataset] : Class index : 2 name : bg1; : Dataset[dataset] : Class index : 3 name : bg2; Factory : Booking method: ␛[1mBDTG␛[0m; : ; : the option NegWeightTreatment=InverseBoostNegWeights does not exist for BoostType=Grad; : --> change to new default NegWeightTreatment=Pray; : Rebuilding Dataset dataset; : Building event vectors for type 2 Signal; : Dataset[dataset] : create input formulas for tree TreeS; : Building event vectors for type 2 bg0; : Dataset[dataset] : create input formulas for tree TreeB0; : Building event vectors for type 2 bg1; : Dataset[dataset] : create input formulas for tree TreeB1; : Building event vectors for type 2 bg2; : Dataset[dataset] : create input formulas for tree TreeB2; DataSetFactory : [dataset] : Number of events in input trees; : ; : ; : ; : ; : Number of training and testing events; : ---------------------------------------------------------------------------; : Signal -- training events : 1000; : Signal -- testing",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:276,test,testing,276,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['test'],['testing']
Testability,". ROOT: tutorials/tmva/TMVAMulticlass.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVAMulticlass.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_tmva; 3/// \notebook -nodraw; 4/// This macro provides a simple example for the training and testing of the TMVA; 5/// multiclass classification; 6/// - Project : TMVA - a Root-integrated toolkit for multivariate data analysis; 7/// - Package : TMVA; 8/// - Root Macro: TMVAMulticlass; 9///; 10/// \macro_output; 11/// \macro_code; 12/// \author Andreas Hoecker; 13 ; 14#include <cstdlib>; 15#include <iostream>; 16#include <map>; 17#include <string>; 18 ; 19#include ""TFile.h""; 20#include ""TTree.h""; 21#include ""TString.h""; 22#include ""TSystem.h""; 23#include ""TROOT.h""; 24 ; 25 ; 26#include ""TMVA/Tools.h""; 27#include ""TMVA/Factory.h""; 28#include ""TMVA/DataLoader.h""; 29#include ""TMVA/TMVAMultiClassGui.h""; 30 ; 31 ; 32using namespace TMVA;; 33 ; 34void TMVAMulticlass( TString myMethodList = """" ); 35{; 36 ; 37 // This loads the library; 38 TMVA::Tools::Instance();; 39 ; 40 // to get access to the GUI and all tmva macros; 41 //; 42 // TString tmva_dir(TString(gRootDir) + ""/tmva"");; 43 // if(gSystem->Getenv(""TMVASYS"")); 44 // tmva_dir = TString(gSystem->Getenv(""TMVASYS""));; 45 // gROOT->SetMacroPath(tmva_dir + ""/test/:"" + gROOT->GetMacroPath() );; 46 // gROOT->ProcessLine("".L TMVAMultiClassGui.C"");; 47 ; 48 ; 49 //---------------------------------------------------------------; 50 // Default MVA methods to be trained + tested; 51 std::map<std::string,int> Use;; 52 Use[""MLP""] = 1;; 53 Use[""BDTG""] = 1;; 54#ifdef R__HAS_TMVAGPU; 55 Use[""DL_CPU""] = 1;; 56 Use[""DL_GPU""] = 1;; 57#else; 58 Use[""DL_CPU""] = 1;; 59 Use[""DL_GPU""] = 0;; 60#endif; 61 Use[""FDA_GA""] = 0;; 62 Use[""PDEFoam""] = 1;; 63 ; 64 //---------------------------------------------------------------; 65 ; 66 std::cout << std::endl;; 67 std::cout << ""==> Start TMVAMulticlass"" << std::endl;; 68 ; 69 if (m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C_source.html:318,test,testing,318,doc/master/TMVAMulticlass_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C_source.html,1,['test'],['testing']
Testability,". ROOT: tutorials/tmva/TMVAMultipleBackgroundExample.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVAMultipleBackgroundExample.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algorithm. . Project : TMVA - a Root-integrated toolkit for multivariate data analysis; Package : TMVA; Executable: TMVAGAexample. ; Start Test TMVAGAexample; ========================; ; ... event: 0 (200); ======> EVENT:0; var1 = -1.14361; var2 = -0.822373; var3 = -0.395426; var4 = -0.529427; created tree: TreeS; ... event: 0 (200); ======> EVENT:0; var1 = -1.54361; var2 = -1.42237; var3 = -1.39543; var4 = -2.02943; created tree: TreeB0; ... event: 0 (200); ======> EVENT:0; var1 = -1.54361; var2 = -0.822373; var3 = -0.395426; var4 = -2.02943; created tree: TreeB1; ======> EVENT:0; var1 = 0.463304; var2 = 1.37192; var3 = -1.16769; var4 = -1.77551; created tree: TreeB2; created data file: tmva_example_multiple_background.root; ; ========================; --- Training; <HEADER> DataSetInfo : [datasetBkg0] : Added class ""Signal""; : Add Tree TreeS of type Signal with 200 events; <HEADER> DataSetInfo : [datasetBkg0] : Added class ""Background""; : Add Tree TreeB0 of type Background with 200 events; <HEADER> Factory : Booking method: BDTG; : ; : the option NegWeightTreatment=InverseBoostNegWeights does not exist for BoostType=Grad; : --> change to new default NegWeightTreatment=Pray; : Rebuilding Dataset datasetBkg0; : Building event vectors for type 2 Signal; : Dataset[datasetBkg0] : create input formulas for tree TreeS; : Building event vectors for type 2 Background; : Dataset[datasetBkg0] : create input formulas f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html:708,Test,Test,708,doc/master/TMVAMultipleBackgroundExample_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html,1,['Test'],['Test']
Testability,". ROOT: tutorials/tmva/TMVARegression.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVARegression.C File ReferenceTutorials » TMVA tutorials. Detailed Description; This macro provides examples for the training and testing of the TMVA classifiers. ; As input data is used a toy-MC sample consisting of four Gaussian-distributed and linearly correlated input variables.; The methods to be used can be switched on and off by means of booleans, or via the prompt command, for example: root -l TMVARegression.C\‍(\""LD,MLP\""\‍); (note that the backslashes are mandatory) If no method given, a default set is used.; The output file ""TMVAReg.root"" can be analysed with the use of dedicated macros (simply say: root -l <macro.C>), which can be conveniently invoked through a GUI that will appear at the end of the run of this macro.; Project : TMVA - a Root-integrated toolkit for multivariate data analysis; Package : TMVA; Root Macro: TMVARegression. ; ; ==> Start TMVARegression; --- TMVARegression : Using input file: ./files/tmva_reg_example.root; DataSetInfo : [datasetreg] : Added class ""Regression""; : Add Tree TreeR of type Regression with 10000 events; : Dataset[datasetreg] : Class index : 0 name : Regression; Factory : Booking method: ␛[1mPDEFoam␛[0m; : ; : Rebuilding Dataset datasetreg; : Building event vectors for type 2 Regression; : Dataset[datasetreg] : create input formulas for tree TreeR; DataSetFactory : [datasetreg] : Number of events in input trees; : ; : Number of training and testing events; : ---------------------------------------------------------------------------; : Regression -- training events : 1000; : Regression -- testing events : 9000; : Regression -- training and testing events: 10000; : ; DataSetInfo : Correlation matrix (Regression):; : ------------------------; : var1 var2; : var1: +1.000 +0.006; : var2: +0.006 +1.000; : ------------------------; DataSetFactory : [datasetreg] : ; : ; Factory : Booking m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:268,test,testing,268,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['test'],['testing']
Testability,". ROOT: tutorials/tmva/TMVARegression.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVARegression.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_tmva; 3/// \notebook -nodraw; 4/// This macro provides examples for the training and testing of the; 5/// TMVA classifiers.; 6///; 7/// As input data is used a toy-MC sample consisting of four Gaussian-distributed; 8/// and linearly correlated input variables.; 9///; 10/// The methods to be used can be switched on and off by means of booleans, or; 11/// via the prompt command, for example:; 12///; 13/// root -l TMVARegression.C\‍(\""LD,MLP\""\‍); 14///; 15/// (note that the backslashes are mandatory); 16/// If no method given, a default set is used.; 17///; 18/// The output file ""TMVAReg.root"" can be analysed with the use of dedicated; 19/// macros (simply say: root -l <macro.C>), which can be conveniently; 20/// invoked through a GUI that will appear at the end of the run of this macro.; 21/// - Project : TMVA - a Root-integrated toolkit for multivariate data analysis; 22/// - Package : TMVA; 23/// - Root Macro: TMVARegression; 24///; 25/// \macro_output; 26/// \macro_code; 27/// \author Andreas Hoecker; 28 ; 29#include <cstdlib>; 30#include <iostream>; 31#include <map>; 32#include <string>; 33 ; 34#include ""TChain.h""; 35#include ""TFile.h""; 36#include ""TTree.h""; 37#include ""TString.h""; 38#include ""TObjString.h""; 39#include ""TSystem.h""; 40#include ""TROOT.h""; 41 ; 42#include ""TMVA/Tools.h""; 43#include ""TMVA/Factory.h""; 44#include ""TMVA/DataLoader.h""; 45#include ""TMVA/TMVARegGui.h""; 46 ; 47 ; 48using namespace TMVA;; 49 ; 50void TMVARegression( TString myMethodList = """" ); 51{; 52 // The explicit loading of the shared libTMVA is done in TMVAlogon.C, defined in .rootrc; 53 // if you use your private .rootrc, or run from a different directory, please copy the; 54 // corresponding lines from .rootrc; 55 ; 56 // methods to be processed can be given as an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C_source.html:310,test,testing,310,doc/master/TMVARegression_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C_source.html,1,['test'],['testing']
Testability,". ROOT: tutorials/tmva/tmva102_Testing.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; tmva102_Testing.py File ReferenceTutorials » TMVA tutorials. Detailed Description; This tutorial illustrates how you can test a trained BDT model using the fast tree inference engine offered by TMVA and external tools such as scikit-learn. ; ; import ROOT; import pickle; ; from tmva100_DataPreparation import variables; from tmva101_Training import load_data; ; ; # Load data; x, y_true, w = load_data(""test_signal.root"", ""test_background.root""); ; # Load trained model; File = ""tmva101.root""; if (ROOT.gSystem.AccessPathName(File)) :; ROOT.Info(""tmva102_Testing.py"", File+""does not exist""); exit(); ; bdt = ROOT.TMVA.Experimental.RBDT(""myBDT"", File); ; # Make prediction; y_pred = bdt.Compute(x); ; # Compute ROC using sklearn; from sklearn.metrics import roc_curve, auc; false_positive_rate, true_positive_rate, _ = roc_curve(y_true, y_pred, sample_weight=w); score = auc(false_positive_rate, true_positive_rate); ; # Plot ROC; c = ROOT.TCanvas(""roc"", """", 600, 600); g = ROOT.TGraph(len(false_positive_rate), false_positive_rate, true_positive_rate); g.SetTitle(""AUC = {:.2f}"".format(score)); g.SetLineWidth(3); g.SetLineColor(ROOT.kRed); g.Draw(""AC""); g.GetXaxis().SetRangeUser(0, 1); g.GetYaxis().SetRangeUser(0, 1); g.GetXaxis().SetTitle(""False-positive rate""); g.GetYaxis().SetTitle(""True-positive rate""); c.Draw(); lenOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva102__Testing_8py.html:273,test,test,273,doc/master/tmva102__Testing_8py.html,https://root.cern,https://root.cern/doc/master/tmva102__Testing_8py.html,1,['test'],['test']
Testability,". ROOT: tutorials/tree Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tree Directory Reference. Directory dependency graph for tree:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  dictionary;  . Files;  basic.C;   Read data from an ascii file and create a root file with an histogram and an ntuple. ;  ;  basic2.C;   Create can ntuple reading data from an ascii file. ;  ;  bill.C;   Benchmark comparing row-wise and column-wise storage performance ;  ;  cernbuild.C;   Read data (CERN staff) from an ascii file and create a root file with a Tree. ;  ;  cernstaff.C;   Playing with a Tree containing variables of type character ;  ;  circular.C;   Example of a circular Tree ;  ;  clonesA_Event.C;  Example to write & read a Tree built with a complex class inheritance tree. ;  ;  clonesA_Event.cxx;  ;  clonesA_Event.h;  ;  copytree.C;   Copy a subset of a Tree to a new Tree ;  ;  copytree2.C;   Copy a subset of a Tree to a new Tree, one branch in a separate file. ;  ;  copytree3.C;   Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries. ;  ;  drawsparse.C;   Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord. ;  ;  h1analysis.C;   Example of analysis class for the H1 data. ;  ;  h1analysis.h;  ;  h1analysisProxy.C;  Example of analysis class for the H1 data using code generated by MakeProxy. ;  ;  h1analysisProxy.h;  ;  h1analysisProxyCut.C;  ;  h1analysisTreeReader.C;  H1 analysis example expressed in terms of TTreeReader (see h1analysis.C). ;  ;  h1analysisTreeReader.h;  ;  h1chain.C;   Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ;  ;  hsimpleProxy.C;   Used by hsimpleProxyDriver.C. ;  ;  hsimpleProxyDriver.C;   This is the driver of the hsimpleProxy example. ;  ;  hsimpleReader.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_d8553f50e1e7f7818badd4fd8ca54378.html:492,Benchmark,Benchmark,492,doc/master/dir_d8553f50e1e7f7818badd4fd8ca54378.html,https://root.cern,https://root.cern/doc/master/dir_d8553f50e1e7f7818badd4fd8ca54378.html,1,['Benchmark'],['Benchmark']
Testability,". ROOT: tutorials/tree/bill.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. bill.C File ReferenceTutorials » Tree tutorials. Detailed Description; Benchmark comparing row-wise and column-wise storage performance ; The test consists in writing/reading to/from keys or trees To execute the benchmark: root -b -q bill.C or root -b -q bill.C++; b#define b(i)Definition RSha256.hxx:100; qfloat * qDefinition THbookFile.cxx:89; for example for N=10000, the following output is produced on an 2.7 GHz Intel Core i7 (year 2011). The names featuring a ""t"" are relative to trees, the faster, the better. billw0 : RT= 0.803 s, Cpu= 0.800 s, File size= 45608143 bytes, CX= 1; billr0 : RT= 0.388 s, Cpu= 0.390 s; billtw0 : RT= 0.336 s, Cpu= 0.310 s, File size= 45266881 bytes, CX= 1.00034; billtr0 : RT= 0.229 s, Cpu= 0.230 s; billw1 : RT= 1.671 s, Cpu= 1.670 s, File size= 16760526 bytes, CX= 2.72078; billr1 : RT= 0.667 s, Cpu= 0.680 s; billtw1 : RT= 0.775 s, Cpu= 0.770 s, File size= 9540884 bytes, CX= 4.74501; billtr1 : RT= 0.352 s, Cpu= 0.350 s; billtot : RT= 5.384 s, Cpu= 5.290 s; ******************************************************************; * ROOTMARKS =1763.9 * Root6.05/03 20150914/948; ******************************************************************; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; bytesOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/bill_8C.html:198,Benchmark,Benchmark,198,doc/master/bill_8C.html,https://root.cern,https://root.cern/doc/master/bill_8C.html,3,"['Benchmark', 'benchmark', 'test']","['Benchmark', 'benchmark', 'test']"
Testability,". ROOT: tutorials/tree/circular.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. circular.C File ReferenceTutorials » Tree tutorials. Detailed Description; Example of a circular Tree ; Circular Trees are interesting in online real time environments to store the results of the last maxEntries events. for more info, see TTree::SetCircular. Circular trees must be memory resident.; ; void circular() {; auto T = new TTree(""T"",""test circular buffers"");; TRandom r;; Float_t px,py,pz;; Double_t randomNum;; UShort_t i;; T->Branch(""px"",&px,""px/F"");; T->Branch(""py"",&py,""px/F"");; T->Branch(""pz"",&pz,""px/F"");; T->Branch(""random"",&randomNum,""random/D"");; T->Branch(""i"",&i,""i/s"");; T->SetCircular(20000); //keep a maximum of 20000 entries in memory; for (i = 0; i < 65000; i++) {; r.Rannor(px,py);; pz = px*px + py*py;; randomNum = r.Rndm();; T->Fill();; }; T->Print();; }; ; UShort_tunsigned short UShort_tDefinition RtypesCore.h:40; Float_tfloat Float_tDefinition RtypesCore.h:57; Double_tdouble Double_tDefinition RtypesCore.h:59; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; AuthorRene Brun ; Definition in file circular.C. tutorialstreecircular.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/circular_8C.html:476,test,test,476,doc/master/circular_8C.html,https://root.cern,https://root.cern/doc/master/circular_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/tree/copytree.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. copytree.C File ReferenceTutorials » Tree tutorials. Detailed Description; Copy a subset of a Tree to a new Tree ; The input file has been generated by the program in $ROOTSYS/test/Event with Event 1000 1 1 1.; ; // Load the library at macro parsing time: we need this to use its content in the code; R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so); ; void copytree(); {; ; TString dir = ""$ROOTSYS/test/Event.root"";; gSystem->ExpandPathName(dir);; const auto filename = gSystem->AccessPathName(dir) ? ""./Event.root"" : ""$ROOTSYS/test/Event.root"";; ; TFile oldfile(filename);; TTree *oldtree;; oldfile.GetObject(""T"", oldtree);; ; // Deactivate all branches; oldtree->SetBranchStatus(""*"", 0);; ; // Activate only four of them; for (auto activeBranchName : {""event"", ""fNtrack"", ""fNseg"", ""fH""}); oldtree->SetBranchStatus(activeBranchName, 1);; ; // Create a new file + a clone of old tree in new file; TFile newfile(""small.root"", ""recreate"");; auto newtree = oldtree->CloneTree();; ; newtree->Print();; newfile.Write();; }; R__LOAD_LIBRARY#define R__LOAD_LIBRARY(LIBRARY)Definition Rtypes.h:496; filenameOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char filenameDefinition TGWin32VirtualXProxy.cxx:232; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TFileA ROOT file is an on-disk file, usually with extension ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/copytree_8C.html:307,test,test,307,doc/master/copytree_8C.html,https://root.cern,https://root.cern/doc/master/copytree_8C.html,4,['test'],['test']
Testability,". ROOT: tutorials/tree/copytree2.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. copytree2.C File ReferenceTutorials » Tree tutorials. Detailed Description; Copy a subset of a Tree to a new Tree, one branch in a separate file. ; One branch of the new Tree is written to a separate file The input file has been generated by the program in $ROOTSYS/test/Event with the command Event 1000 1 1 1; ; // Load the library at macro parsing time: we need this to use its content in the code; R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so); ; void copytree2(); {; ; TString dir = ""$ROOTSYS/test/Event.root"";; gSystem->ExpandPathName(dir);; const auto filename = gSystem->AccessPathName(dir) ? ""./Event.root"" : ""$ROOTSYS/test/Event.root"";; ; TFile oldfile(filename);; TTree *oldtree;; oldfile.GetObject(""T"", oldtree);; ; // Activate only four of them; for (auto activeBranchName : {""event"", ""fNtrack"", ""fNseg"", ""fH""}) {; oldtree->SetBranchStatus(activeBranchName, 1);; }; ; // Create a new file + a clone of old tree header. Do not copy events; TFile newfile(""small.root"", ""recreate"");; auto newtree = oldtree->CloneTree(0);; ; // Divert branch fH to a separate file and copy all events; newtree->GetBranch(""fH"")->SetFile(""small_fH.root"");; newtree->CopyEntries(oldtree);; ; newtree->Print();; newfile.Write();; }; R__LOAD_LIBRARY#define R__LOAD_LIBRARY(LIBRARY)Definition Rtypes.h:496; filenameOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/copytree2_8C.html:398,test,test,398,doc/master/copytree2_8C.html,https://root.cern,https://root.cern/doc/master/copytree2_8C.html,4,['test'],['test']
Testability,". ROOT: tutorials/tree/copytree3.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. copytree3.C File ReferenceTutorials » Tree tutorials. Detailed Description; Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries. ; Only selected entries are copied to the new Tree. The input file has been generated by the program in $ROOTSYS/test/Event with Event 1000 1 99 1; ; R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so); ; void copytree3(); {; // Get old file, old tree and set top branch address; TString dir = ""$ROOTSYS/test/Event.root"";; gSystem->ExpandPathName(dir);; const auto filename = gSystem->AccessPathName(dir) ? ""./Event.root"" : ""$ROOTSYS/test/Event.root"";; ; TFile oldfile(filename);; TTree *oldtree;; oldfile.GetObject(""T"", oldtree);; ; const auto nentries = oldtree->GetEntries();; ; Event *event = nullptr;; oldtree->SetBranchAddress(""event"", &event);; ; // Create a new file + a clone of old tree in new file; TFile newfile(""small.root"", ""recreate"");; auto newtree = oldtree->CloneTree(0);; ; for (auto i : ROOT::TSeqI(nentries)) {; oldtree->GetEntry(i);; if (event->GetNtrack() > 605); newtree->Fill();; event->Clear();; }; ; newtree->Print();; newfile.Write();; }; R__LOAD_LIBRARY#define R__LOAD_LIBRARY(LIBRARY)Definition Rtypes.h:496; filenameOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char filenameDefinition TGWin32VirtualXProxy.cxx:232; nentriesint nent",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/copytree3_8C.html:404,test,test,404,doc/master/copytree3_8C.html,https://root.cern,https://root.cern/doc/master/copytree3_8C.html,4,['test'],['test']
Testability,". ROOT: tutorials/tree/htest.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. htest.C File ReferenceTutorials » Tree tutorials. Detailed Description; Save histograms in Tree branches ; To run this example, do root > .L htest.C; root > htw(); root > htr1(); root > htr2(); root > htr3(). ; void htw() {; // Create a Tree with a few branches of type histogram; // 25000 entries are filled in the Tree; // For each entry, the copy of 3 histograms is written; // The data base will contain 75000 histograms.; gBenchmark->Start(""hsimple"");; TFile f(""ht.root"",""recreate"");; auto T = new TTree(""T"",""test"");; auto hpx = new TH1F(""hpx"",""This is the px distribution"",100,-4,4);; auto hpxpy = new TH2F(""hpxpy"",""py vs px"",40,-4,4,40,-4,4);; auto hprof = new TProfile(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);; T->Branch(""hpx"",""TH1F"",&hpx,32000,0);; T->Branch(""hpxpy"",""TH2F"",&hpxpy,32000,0);; T->Branch(""hprof"",""TProfile"",&hprof,32000,0);; Float_t px, py, pz;; for (Int_t i = 0; i < 25000; i++) {; if (i%1000 == 0) printf(""at entry: %d\n"",i);; gRandom->Rannor(px,py);; pz = px*px + py*py;; hpx->Fill(px);; hpxpy->Fill(px,py);; hprof->Fill(px,pz);; T->Fill();; }; T->Print();; f.Write();; gBenchmark->Show(""hsimple"");; }; ; void htr1() {; // Connect Tree generated by htw and show histograms for entry 12345; auto f = new TFile(""ht.root"");; auto T = (TTree*)f->Get(""T"");; TH1F *hpx = nullptr;; TH2F *hpxpy = nullptr;; TProfile *hprof = nullptr;; T->SetBranchAddress(""hpx"",&hpx);; T->SetBranchAddress(""hpxpy"",&hpxpy);; T->SetBranchAddress(""hprof"",&hprof);; T->GetEntry(12345);; auto c1 = new TCanvas(""c1"",""test"",10,10,600,1000);; c1->Divide(1,3);; c1->cd(1);; hpx->Draw();; c1->cd(2);; hpxpy->Draw();; c1->cd(3);; hprof->Draw();; c1->Print(""htr1.png"");; }; ; void htr2() {; // Connect Tree generated by htw and show histograms for entry 12345; // a variant of htr1; auto f = new TFile(""ht.root"");; auto T = (TTree*)f->Get(""T"");; auto c1 = new TCanvas(""c1"",""t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/htest_8C.html:642,test,test,642,doc/master/htest_8C.html,https://root.cern,https://root.cern/doc/master/htest_8C.html,1,['test'],['test']
Testability,". ROOT: tutorials/tree/spider.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. spider.C File ReferenceTutorials » Tree tutorials. Detailed Description; TSpider example. ; ; #include ""TFile.h""; #include ""TCanvas.h""; #include ""TNtuple.h""; #include ""TSpider.h""; ; void spider() {; TCanvas *c1 = new TCanvas(""c1"",""TSpider example"",200,10,700,700);; TFile *f = new TFile(""hsimple.root"");; if (!f || f->IsZombie()) {; printf(""Please run <ROOT location>/tutorials/hsimple.C before."");; return;; }; TNtuple* ntuple = (TNtuple*)f->Get(""ntuple"");; TString varexp = ""px:py:pz:random:sin(px):log(px/py):log(pz)"";; TString selection = ""px>0 && py>0 && pz>0"";; TString options = ""average"";; TSpider *spider = new TSpider(ntuple,varexp.Data(),selection.Data(),options.Data());; spider->Draw();; c1->ToggleEditor();; c1->Selected(c1,spider,1);; }; f#define f(i)Definition RSha256.hxx:104; TCanvas.h; TFile.h; TNtuple.h; TSpider.h; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TSpiderSpider class.Definition TSpider.h:40; TSpider::Drawvoid Draw(Option_t *options="""") overrideDraw the spider.Definition TSpider.cxx:454; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; c1return c1Definition legend1.C:41; AuthorBastien Dallapiazza ; Definition in file spider.C. tutorialstreespider.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/spider_8C.html:630,log,log,630,doc/master/spider_8C.html,https://root.cern,https://root.cern/doc/master/spider_8C.html,2,['log'],['log']
Testability,". ROOT: tutorials/tree/tcl.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tcl.C File ReferenceTutorials » Tree tutorials. Detailed Description; How to write a TClonesArray to a TTree ; The following tests can be run Interactive tests Root > .x tcl.C //no-split interpreted; Root > .x tcl.C(1) //split interpreted; Root > .x tcl.C++ //no-split compiled; Root > .x tcl.C++(1) //split compiled; Batch tests: same as above but with no graphics root -b -q tcl.C; root -b -q tcl.C++; root -b -q ""tcl.C(1)""; root -b -q ""tcl.C++(1)""; ; #include ""TFile.h""; #include ""TClonesArray.h""; #include ""TH2.h""; #include ""TLine.h""; #include ""TTree.h""; #include ""TBenchmark.h""; #include ""TRandom.h""; ; void tclwrite(Int_t split); {; // Generate a Tree with a TClonesArray; // The array can be split or not; TFile f(""tcl.root"",""recreate"");; f.SetCompressionLevel(1); //try level 2 also; TTree T(""T"",""test tcl"");; TClonesArray *arr = new TClonesArray(""TLine"");; TClonesArray &ar = *arr;; T.Branch(""tcl"",&arr,256000,split);; //By default a TClonesArray is created with its BypassStreamer bit set.; //However, because TLine has a custom Streamer, this bit was reset; //by TTree::Branch above. We set again this bit because the current; //version of TLine uses the automatic Streamer.; //BypassingStreamer saves space and time.; arr->BypassStreamer();; for (Int_t ev=0;ev<10000;ev++) {; ar.Clear();; Int_t nlines = Int_t(gRandom->Gaus(50,10));; if(nlines < 0) nlines = 1;; for (Int_t i=0;i<nlines;i++) {; Float_t x1 = gRandom->Rndm();; Float_t y1 = gRandom->Rndm();; Float_t x2 = gRandom->Rndm();; Float_t y2 = gRandom->Rndm();; new(ar[i]) TLine(x1,y1,x2,y2);; }; T.Fill();; }; T.Print();; T.Write();; }; ; void tclread(); {; // read file generated by tclwrite; // loop on all entries.; // histogram center of lines; TFile *f = new TFile(""tcl.root"");; TTree *T = (TTree*)f->Get(""T"");; TH2F *h2 = new TH2F(""h2"",""center of lines"",40,0,1,40,0,1);; ; TClonesArray *arr = new TCl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tcl_8C.html:251,test,tests,251,doc/master/tcl_8C.html,https://root.cern,https://root.cern/doc/master/tcl_8C.html,4,['test'],"['test', 'tests']"
Testability,". ROOT: tutorials/tree/tree4.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tree4.C File ReferenceTutorials » Tree tutorials. Detailed Description; This example writes a tree with objects of the class Event. ; It is a simplified version of $ROOTSYS/test/MainEvent.cxx to write the tree, and $ROOTSYS/test/eventb.C It shows:; how to fill a Tree with an event class containing these data members: char fType[20];; Int_t fNtrack;; Int_t fNseg;; Int_t fNvertex;; UInt_t fFlag;; Float_t fTemperature;; EventHeader fEvtHdr;; TClonesArray *fTracks; //->; TH1F *fH; //->; Int_t fMeasures[10];; Float_t fMatrix[4][4];; Float_t *fClosestDistance; //[fNvertex]; Int_tint Int_tDefinition RtypesCore.h:45; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; Float_tfloat Float_tDefinition RtypesCore.h:57; TClonesArrayAn array of clone (identical) objects.Definition TClonesArray.h:29; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622. the difference in splitting or not splitting a branch; how to read selected branches of the tree, and print the first entry with less than 587 tracks.; how to browse and analyze the Tree via the TBrowser and TTreeViewer. This example can be run in many different ways:; way1 using the Cling interpreter: .x tree4.C. way2 using the Cling interpreter: .L tree4.C; tree4(). way3 using ACLIC: .L ../test/libEvent.so; .x tree4.C++; One can also run the write and read parts in two separate sessions. For example following one of the sessions above, one can start the session: .L tree4.C; tree4r();; ; R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so); ; #include ""TFile.h""; #include ""TTree.h""; #include ""TBrowser.h""; #include ""TH2.h""; #include ""TRandom.h""; #include ""TClassTable.h""; #include ""TSystem.h""; #include ""TROOT.h""; #include ""../test/Event.h""; ; void tree4w(); {; ; //create a Tree file tree4.root; TFile f(""tree4.root"",""RECREATE"");; ; // Create a ROOT Tree; TTree t4(""t4"",""A Tree with Even",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tree4_8C.html:301,test,test,301,doc/master/tree4_8C.html,https://root.cern,https://root.cern/doc/master/tree4_8C.html,2,['test'],['test']
Testability,". ROOT: tutorials/tree/treefriend.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. treefriend.C File ReferenceTutorials » Tree tutorials. Detailed Description; Illustrates how to use Tree friends: . create a simple TTree; Copy a subset of this TTree to a new TTree; Create a Tree Index; Make a friend TTree; compare two TTrees; Draw a variable from the first tree versus a variable in the friend Tree. You can run this tutorial with: root > .x treefriend.C (interpreted via Cling); root > .x treefriend.C+ (executed via ACLIC & the native compiler); or, variants like: root > .L treefriend.C+; root > CreateParentTree();; root > CreateFriendTree();; root > CompareTrees();; root > DrawFriend();; ; ******************************************************************************; *Tree :T : test friend trees *; *Entries : 10000 : Total = 203762 bytes File Size = 94821 *; * : : Tree compression factor = 1.69 *; ******************************************************************************; *Br 0 :Run : Run/I *; *Entries : 10000 : Total Size= 40698 bytes File Size = 265 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 120.75 *; *............................................................................*; *Br 1 :Event : Event/I *; *Entries : 10000 : Total Size= 40712 bytes File Size = 11231 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 2.85 *; *............................................................................*; *Br 2 :x : x/F *; *Entries : 10000 : Total Size= 40684 bytes File Size = 27116 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.18 *; *............................................................................*; *Br 3 :y : y/F *; *Entries : 10000 : Total Size= 40684 bytes File Size = 27035 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.18 *; *............................................................................*; *Br 4 :z : z/F *; *Entries : 10000 : Total Size= 40684 b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/treefriend_8C.html:839,test,test,839,doc/master/treefriend_8C.html,https://root.cern,https://root.cern/doc/master/treefriend_8C.html,1,['test'],['test']
Testability,". ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. class ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>: public ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. LogLikelihoodFCN class; for likelihood fits. it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. This class is also known as (typedefs to this class)ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IMultiGenFunction>, ROOT::Fit::LogLikelihoodFunction. Function Members (Methods); public:. virtual~LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; virtual voidGradient(const double* x, double* g) const; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::IModelFunction& func); virtual const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::IModelFunction&ModelFunction() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IBa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:13,Log,LogLikelihoodFCN,13,root/html526/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html526/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,12,['Log'],"['LogLikelihoodFCN', 'LogLikelihoodFunction']"
Testability,". ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. class ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>: public ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>. LogLikelihoodFCN class; for likelihood fits. it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. Function Members (Methods); public:. virtual~LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(); ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>(const ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::DataPtr() const; virtual voidGradient(const double* x, double* g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:13,Log,LogLikelihoodFCN,13,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,4,['Log'],['LogLikelihoodFCN']
Testability,". ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. class ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>: public ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. LogLikelihoodFCN class; for likelihood fits. it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. Function Members (Methods); public:. virtual~LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:13,Log,LogLikelihoodFCN,13,root/html602/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html602/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,4,['Log'],['LogLikelihoodFCN']
Testability,". ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. class ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>: public ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. LogLikelihoodFCN class; for likelihood fits. it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. This class is also known as (typedefs to this class)ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IMultiGenFunction>, ROOT::Fit::LogLikelihoodFunction. Function Members (Methods); public:. virtual~LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; virtual voidGradient(const double* x, double* g) const; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::IModelFunction& func); virtual const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::IModelFunction&ModelFunction() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:13,Log,LogLikelihoodFCN,13,root/html530/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html530/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,6,['Log'],"['LogLikelihoodFCN', 'LogLikelihoodFunction']"
Testability,". ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. class ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>: public ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. LogLikelihoodFCN class; for likelihood fits. it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. This class is also known as (typedefs to this class)ROOT::Fit::LogLikelihoodFunction, ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IMultiGenFunction>. Function Members (Methods); public:. virtual~LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; virtual voidGradient(const double* x, double* g) const; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::IModelFunction&ModelFunction() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; virtual voidROOT::Mat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:13,Log,LogLikelihoodFCN,13,root/html532/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html532/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,12,['Log'],"['LogLikelihoodFCN', 'LogLikelihoodFunction']"
Testability,". ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. class ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>: public ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>. LogLikelihoodFCN class; for likelihood fits. it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. This class is also known as (typedefs to this class)ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IMultiGradFunction>, ROOT::Fit::LogLikelihoodGradFunction. Function Members (Methods); public:. virtual~LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidROOT::Math::IGradientFunctionMultiDim::FdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* g) const; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func); virtual const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction&ModelFunction() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:13,Log,LogLikelihoodFCN,13,root/html526/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html526/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,6,['Log'],"['LogLikelihoodFCN', 'LogLikelihoodGradFunction']"
Testability,". ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. class ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>: public ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>. LogLikelihoodFCN class; for likelihood fits. it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. This class is also known as (typedefs to this class)ROOT::Fit::LogLikelihoodGradFunction, ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IMultiGradFunction>. Function Members (Methods); public:. virtual~LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidROOT::Math::IGradientFunctionMultiDim::FdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* g) const; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func); virtual const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction&ModelFunction() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:13,Log,LogLikelihoodFCN,13,root/html528/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html528/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,6,['Log'],"['LogLikelihoodFCN', 'LogLikelihoodGradFunction']"
Testability,". ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. class ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>: public ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>. LogLikelihoodFCN class; for likelihood fits. it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. Function Members (Methods); public:. virtual~LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(); ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>(const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:13,Log,LogLikelihoodFCN,13,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,4,['Log'],['LogLikelihoodFCN']
Testability,". ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. class ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>: public ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>. LogLikelihoodFCN class; for likelihood fits. it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. Function Members (Methods); public:. virtual~LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidROOT::Math::IGradientFunctionMultiDim::FdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IGradientFunc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:13,Log,LogLikelihoodFCN,13,root/html602/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html602/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,4,['Log'],['LogLikelihoodFCN']
Testability,". ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. class ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>: public ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>. LogLikelihoodFCN class; for likelihood fits. it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. This class is also known as (typedefs to this class)ROOT::Fit::LogLikelihoodGradFunction, ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IMultiGradFunction>. Function Members (Methods); public:. virtual~LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidROOT::Math::IGradientFunctionMultiDim::FdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* g) const; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func); virtual const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction&ModelFunction() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:13,Log,LogLikelihoodFCN,13,root/html530/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html530/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,6,['Log'],"['LogLikelihoodFCN', 'LogLikelihoodGradFunction']"
Testability,". ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. class ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>: public ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>. LogLikelihoodFCN class; for likelihood fits. it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. This class is also known as (typedefs to this class)ROOT::Fit::LogLikelihoodGradFunction, ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IMultiGradFunction>. Function Members (Methods); public:. virtual~LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidROOT::Math::IGradientFunctionMultiDim::FdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* g) const; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction&ModelFunction() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NDim() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:13,Log,LogLikelihoodFCN,13,root/html532/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html532/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,12,['Log'],"['LogLikelihoodFCN', 'LogLikelihoodGradFunction']"
Testability,". ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. class ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>: public ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. class evaluating the log likelihood; for binned Poisson likelihood fits; it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. This class is also known as (typedefs to this class)ROOT::Fit::PoissonLLFunction, ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IMultiGenFunction>. Function Members (Methods); public:. virtual~PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(); virtual ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::BinData&Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; virtual voidGradient(const double* x, double* g) const; virtual const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::IModelFunction&ModelFunction() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::BinData& data, const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::IModelFunction& func); vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:520,log,log,520,root/html528/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html528/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,1,['log'],['log']
Testability,". ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. class ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>: public ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. class evaluating the log likelihood; for binned Poisson likelihood fits; it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. This class is also known as (typedefs to this class)ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IMultiGenFunction>, ROOT::Fit::PoissonLLFunction. Function Members (Methods); public:. virtual~PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(); virtual ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::BinData&Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; virtual voidGradient(const double* x, double* g) const; virtual const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::IModelFunction&ModelFunction() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::BinData& data, const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::IModelFunction& func); vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:520,log,log,520,root/html526/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html526/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,1,['log'],['log']
Testability,". ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. class ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>: public ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>. class evaluating the log likelihood; for binned Poisson likelihood fits; it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. Function Members (Methods); public:. virtual~PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(); ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>(const ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::BinData&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>::Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; shared_ptr<ROOT::Fit::BinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>::DataPtr() const; virtual voidGradi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:526,log,log,526,root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,1,['log'],['log']
Testability,". ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. class ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>: public ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. class evaluating the log likelihood; for binned Poisson likelihood fits; it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. Function Members (Methods); public:. virtual~PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::BinData&Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); boolIsWeighted() const; virtual const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction&ModelFunction() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:522,log,log,522,root/html602/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html602/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,1,['log'],['log']
Testability,". ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. class ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>: public ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. class evaluating the log likelihood; for binned Poisson likelihood fits; it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. This class is also known as (typedefs to this class)ROOT::Fit::PoissonLLFunction, ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IMultiGenFunction>. Function Members (Methods); public:. virtual~PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(); virtual ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::BinData&Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; virtual voidGradient(const double* x, double* g) const; boolIsWeighted() const; virtual const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::IModelFunction&ModelFunction() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::BinData& data, const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:522,log,log,522,root/html530/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html530/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,1,['log'],['log']
Testability,". ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. class ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>: public ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. class evaluating the log likelihood; for binned Poisson likelihood fits; it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. This class is also known as (typedefs to this class)ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IMultiGenFunction>, ROOT::Fit::PoissonLLFunction. Function Members (Methods); public:. virtual~PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(); virtual ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::BinData&Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; virtual voidGradient(const double* x, double* g) const; boolIsWeighted() const; virtual const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::IModelFunction&ModelFunction() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::BinData& data, const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:522,log,log,522,root/html532/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html532/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,2,['log'],['log']
Testability,". ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. class ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>: public ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>. class evaluating the log likelihood; for binned Poisson likelihood fits; it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. This class is also known as (typedefs to this class)ROOT::Fit::PoissonLLGradFunction, ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IMultiGradFunction>. Function Members (Methods); public:. virtual~PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(); virtual ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::BinData&Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidROOT::Math::IGradientFunctionMultiDim::FdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* g) const; virtual const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction&ModelFunction() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Fit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:536,log,log,536,root/html526/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html526/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,1,['log'],['log']
Testability,". ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. class ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>: public ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>. class evaluating the log likelihood; for binned Poisson likelihood fits; it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. This class is also known as (typedefs to this class)ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IMultiGradFunction>, ROOT::Fit::PoissonLLGradFunction. Function Members (Methods); public:. virtual~PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(); virtual ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::BinData&Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidROOT::Math::IGradientFunctionMultiDim::FdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* g) const; virtual const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction&ModelFunction() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Fit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:536,log,log,536,root/html528/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html528/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,1,['log'],['log']
Testability,". ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. class ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>: public ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>. class evaluating the log likelihood; for binned Poisson likelihood fits; it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. Function Members (Methods); public:. virtual~PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(); ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>(const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::BinData&ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>::Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; shared_ptr<ROOT::Fit::BinData>ROOT::Fit::BasicFCN<ROOT::Math::IGrad",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:542,log,log,542,root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,1,['log'],['log']
Testability,". ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. class ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>: public ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>. class evaluating the log likelihood; for binned Poisson likelihood fits; it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. Function Members (Methods); public:. virtual~PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::BinData&Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidROOT::Math::IGradientFunctionMultiDim::FdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:538,log,log,538,root/html602/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html602/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,1,['log'],['log']
Testability,". ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. class ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>: public ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>. class evaluating the log likelihood; for binned Poisson likelihood fits; it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. This class is also known as (typedefs to this class)ROOT::Fit::PoissonLLGradFunction, ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IMultiGradFunction>. Function Members (Methods); public:. virtual~PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(); virtual ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::BinData&Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidROOT::Math::IGradientFunctionMultiDim::FdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* g) const; boolIsWeighted() const; virtual const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction&ModelFunction() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:538,log,log,538,root/html530/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html530/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,3,['log'],['log']
Testability,". ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. class ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>: public ROOT::Math::IBaseFunctionMultiDim. FitMethodFunction class; Interface for objective functions (like chi2 and likelihood used in the fit); In addition to normal function interface provide interface for calculating each; data contrinution to the function which is required by some algorithm (like Fumili). @ingroup FitMethodFunc. This class is also known as (typedefs to this class)ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim>::BaseObjFunction, ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseObjFunction, ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseObjFunction, ROOT::Math::BasicFitMethodFunction<ROOT::Math::IMultiGenFunction>, ROOT::Math::FitMethodFunction. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; virtual doubleDataElement(const double* x, unsigned int i, double* g = 0) const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&operator=(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); virtual voidResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html:985,Log,LogLikelihoodFCN,985,root/html528/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html,1,['Log'],['LogLikelihoodFCN']
Testability,". ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. class ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>: public ROOT::Math::IBaseFunctionMultiDim. FitMethodFunction class; Interface for objective functions (like chi2 and likelihood used in the fit); In addition to normal function interface provide interface for calculating each; data contrinution to the function which is required by some algorithm (like Fumili). @ingroup FitMethodFunc. This class is also known as (typedefs to this class)ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseObjFunction, ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseObjFunction, ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim>::BaseObjFunction, ROOT::Math::FitMethodFunction, ROOT::Math::BasicFitMethodFunction<ROOT::Math::IMultiGenFunction>. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; virtual doubleDataElement(const double* x, unsigned int i, double* g = 0) const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&operator=(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); virtual voidResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html:913,Log,LogLikelihoodFCN,913,root/html526/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html,1,['Log'],['LogLikelihoodFCN']
Testability,". ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. class ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>: public ROOT::Math::IBaseFunctionMultiDim. FitMethodFunction class; Interface for objective functions (like chi2 and likelihood used in the fit); In addition to normal function interface provide interface for calculating each; data contrinution to the function which is required by some algorithm (like Fumili). @ingroup FitMethodFunc. This class is also known as (typedefs to this class)ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim>::BaseObjFunction, ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseObjFunction, ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseObjFunction, ROOT::Math::BasicFitMethodFunction<ROOT::Math::IMultiGenFunction>, ROOT::Math::FitMethodFunction. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; virtual doubleDataElement(const double* x, unsigned int i, double* g = 0) const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&operator=(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); virtual voidResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html:987,Log,LogLikelihoodFCN,987,root/html532/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html,1,['Log'],['LogLikelihoodFCN']
Testability,". ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. class ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>: public ROOT::Math::IBaseFunctionMultiDim. FitMethodFunction class; Interface for objective functions (like chi2 and likelihood used in the fit); In addition to normal function interface provide interface for calculating each; data contrinution to the function which is required by some algorithm (like Fumili). @ingroup FitMethodFunc. This class is also known as (typedefs to this class)ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim>::BaseObjFunction, ROOT::Math::FitMethodFunction, ROOT::Math::BasicFitMethodFunction<ROOT::Math::IMultiGenFunction>, ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseObjFunction, ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseObjFunction. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; virtual doubleDataElement(const double* x, unsigned int i, double* g = 0) const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&operator=(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); virtual voidResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html:1085,Log,LogLikelihoodFCN,1085,root/html534/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html,1,['Log'],['LogLikelihoodFCN']
Testability,". ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. class ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>: public ROOT::Math::IBaseFunctionMultiDim. FitMethodFunction class; Interface for objective functions (like chi2 and likelihood used in the fit); In addition to normal function interface provide interface for calculating each; data contrinution to the function which is required by some algorithm (like Fumili). @ingroup FitMethodFunc. This class is also known as (typedefs to this class)ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseObjFunction, ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim>::BaseObjFunction, ROOT::Math::FitMethodFunction, ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseObjFunction, ROOT::Math::BasicFitMethodFunction<ROOT::Math::IMultiGenFunction>. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; virtual doubleDataElement(const double* x, unsigned int i, double* g = 0) const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&operator=(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); virtual voidResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html:830,Log,LogLikelihoodFCN,830,root/html530/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html,1,['Log'],['LogLikelihoodFCN']
Testability,". ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>. class ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>: public ROOT::Math::IGradientFunctionMultiDim. FitMethodFunction class; Interface for objective functions (like chi2 and likelihood used in the fit); In addition to normal function interface provide interface for calculating each; data contrinution to the function which is required by some algorithm (like Fumili). @ingroup FitMethodFunc. This class is also known as (typedefs to this class)ROOT::Math::FitMethodGradFunction, ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseObjFunction, ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseObjFunction, ROOT::Math::BasicFitMethodFunction<ROOT::Math::IMultiGradFunction>, ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>::BaseObjFunction. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; virtual doubleDataElement(const double* x, unsigned int i, double* g = 0) const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidROOT::Math::IGradientFunctionMultiDim::FdF(const double* x, double& f, double* df) const; virtual voidROOT::Math::IGradientFunctionMultiDim::Gradient(const double* x, double* grad) const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNPoints() cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html:968,Log,LogLikelihoodFCN,968,root/html526/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html,1,['Log'],['LogLikelihoodFCN']
Testability,". ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>. class ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>: public ROOT::Math::IGradientFunctionMultiDim. FitMethodFunction class; Interface for objective functions (like chi2 and likelihood used in the fit); In addition to normal function interface provide interface for calculating each; data contrinution to the function which is required by some algorithm (like Fumili). @ingroup FitMethodFunc. This class is also known as (typedefs to this class)ROOT::Math::FitMethodGradFunction, ROOT::Math::BasicFitMethodFunction<ROOT::Math::IMultiGradFunction>, ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseObjFunction, ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>::BaseObjFunction, ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseObjFunction. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; virtual doubleDataElement(const double* x, unsigned int i, double* g = 0) const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidROOT::Math::IGradientFunctionMultiDim::FdF(const double* x, double& f, double* df) const; virtual voidROOT::Math::IGradientFunctionMultiDim::Gradient(const double* x, double* grad) const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNPoints() cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html:1112,Log,LogLikelihoodFCN,1112,root/html528/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html,1,['Log'],['LogLikelihoodFCN']
Testability,". ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>. class ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>: public ROOT::Math::IGradientFunctionMultiDim. FitMethodFunction class; Interface for objective functions (like chi2 and likelihood used in the fit); In addition to normal function interface provide interface for calculating each; data contrinution to the function which is required by some algorithm (like Fumili). @ingroup FitMethodFunc. This class is also known as (typedefs to this class)ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>::BaseObjFunction, ROOT::Math::BasicFitMethodFunction<ROOT::Math::IMultiGradFunction>, ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseObjFunction, ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseObjFunction, ROOT::Math::FitMethodGradFunction. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; virtual doubleDataElement(const double* x, unsigned int i, double* g = 0) const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidROOT::Math::IGradientFunctionMultiDim::FdF(const double* x, double& f, double* df) const; virtual voidROOT::Math::IGradientFunctionMultiDim::Gradient(const double* x, double* grad) const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNPoints() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html:1079,Log,LogLikelihoodFCN,1079,root/html530/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html,1,['Log'],['LogLikelihoodFCN']
Testability,". ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>. class ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>: public ROOT::Math::IGradientFunctionMultiDim. FitMethodFunction class; Interface for objective functions (like chi2 and likelihood used in the fit); In addition to normal function interface provide interface for calculating each; data contrinution to the function which is required by some algorithm (like Fumili). @ingroup FitMethodFunc. This class is also known as (typedefs to this class)ROOT::Math::FitMethodGradFunction, ROOT::Math::BasicFitMethodFunction<ROOT::Math::IMultiGradFunction>, ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseObjFunction, ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>::BaseObjFunction, ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseObjFunction. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; virtual doubleDataElement(const double* x, unsigned int i, double* g = 0) const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidROOT::Math::IGradientFunctionMultiDim::FdF(const double* x, double& f, double* df) const; virtual voidROOT::Math::IGradientFunctionMultiDim::Gradient(const double* x, double* grad) const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNPoints() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html:1114,Log,LogLikelihoodFCN,1114,root/html532/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html,2,['Log'],['LogLikelihoodFCN']
Testability,". ROOT::Math::TDataPointN<double>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPointN<double>. class ROOT::Math::TDataPointN<double>. Function Members (Methods); public:. virtual~TDataPointN<double>(); static UInt_tDimension(); doubleGetCoordinate(unsigned int iAxis) const; doubleGetWeight() const; boolLess(ROOT::Math::TDataPointN<double>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPointN<double>&operator=(const ROOT::Math::TDataPointN<double>&); voidSetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<double>::value_type fValue); static voidSetDimension(UInt_t dim); voidSetWeight(float fWeight); ROOT::Math::TDataPointN<double>TDataPointN<double>(); ROOT::Math::TDataPointN<double>TDataPointN<double>(const ROOT::Math::TDataPointN<double>&). Data Members; private:. static UInt_tkDimension; ROOT::Math::TDataPointN<double>::value_typem_fWeight; ROOT::Math::TDataPointN<double>::value_type*m_vCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. void SetDimension(UInt_t dim); {assert(dim>0);kDimension=dim;}. _val_type GetCoordinate(unsigned int iAxis) const. _val_type GetWeight() const; {return m_fWeight;}. bool Less(ROOT::Math::TDataPointN<double>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<double>::value_type fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__TDataPointN_double_.html:1276,assert,assert,1276,root/html602/ROOT__Math__TDataPointN_double_.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__TDataPointN_double_.html,1,['assert'],['assert']
Testability,". ROOT::Math::TDataPointN<double>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPointN<double>. class ROOT::Math::TDataPointN<double>. Function Members (Methods); public:. virtual~TDataPointN<double>(); static UInt_tDimension(); doubleGetCoordinate(unsigned int iAxis) const; doubleGetWeight() const; boolLess(ROOT::Math::TDataPointN<double>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPointN<double>&operator=(const ROOT::Math::TDataPointN<double>&); voidSetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<double>::value_type fValue); static voidSetDimension(UInt_t dim); voidSetWeight(float fWeight); ROOT::Math::TDataPointN<double>TDataPointN<double>(); ROOT::Math::TDataPointN<double>TDataPointN<double>(const ROOT::Math::TDataPointN<double>&). Data Members; private:. static UInt_tkDimension; ROOT::Math::TDataPointN<double>::value_typem_fWeight; ROOT::Math::TDataPointN<double>::value_type*m_vCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. void SetDimension(UInt_t dim); {assert(dim>0);kDimension=dim;}. _val_type GetCoordinate(unsigned int iAxis) const. _val_type GetWeight() const; {return m_fWeight;}. bool Less(ROOT::Math::TDataPointN<double>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<double>::value_type fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__TDataPointN_double_.html:1276,assert,assert,1276,root/html604/ROOT__Math__TDataPointN_double_.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__TDataPointN_double_.html,1,['assert'],['assert']
Testability,". ROOT::Math::TDataPointN<double>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPointN<double>. class ROOT::Math::TDataPointN<double>. This class is also known as (typedefs to this class)ROOT::Math::TDataPointN, ROOT::Math::TDataPointN<Double_t>. Function Members (Methods); public:. virtual~TDataPointN<double>(); static UInt_tDimension(); doubleGetCoordinate(unsigned int iAxis) const; doubleGetWeight() const; boolLess(ROOT::Math::TDataPointN<double>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPointN<double>&operator=(const ROOT::Math::TDataPointN<double>&); voidSetCoordinate(unsigned int iAxis, double fValue); static voidSetDimension(UInt_t dim); voidSetWeight(float fWeight); ROOT::Math::TDataPointN<double>TDataPointN<double>(); ROOT::Math::TDataPointN<double>TDataPointN<double>(const ROOT::Math::TDataPointN<double>&). Data Members; private:. static UInt_tkDimension; ROOT::Math::TDataPointN<double>::value_typem_fWeight; ROOT::Math::TDataPointN<double>::value_type*m_vCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. void SetDimension(UInt_t dim); {assert(dim>0);kDimension=dim;}. _val_type GetCoordinate(unsigned int iAxis) const. _val_type GetWeight() const; {return m_fWeight;}. bool Less(ROOT::Math::TDataPointN<double>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, double fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__TDataPointN_double_.html:1351,assert,assert,1351,root/html534/ROOT__Math__TDataPointN_double_.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__TDataPointN_double_.html,1,['assert'],['assert']
Testability,". ROOT::Math::TDataPointN<double>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPointN<double>. class ROOT::Math::TDataPointN<double>. This class is also known as (typedefs to this class)ROOT::Math::TDataPointN<Double_t>, ROOT::Math::TDataPointN. Function Members (Methods); public:. virtual~TDataPointN<double>(); static UInt_tDimension(); doubleGetCoordinate(unsigned int iAxis) const; doubleGetWeight() const; boolLess(ROOT::Math::TDataPointN<double>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPointN<double>&operator=(const ROOT::Math::TDataPointN<double>&); voidSetCoordinate(unsigned int iAxis, double fValue); static voidSetDimension(UInt_t dim); voidSetWeight(float fWeight); ROOT::Math::TDataPointN<double>TDataPointN<double>(); ROOT::Math::TDataPointN<double>TDataPointN<double>(const ROOT::Math::TDataPointN<double>&). Data Members; private:. static UInt_tkDimension; ROOT::Math::TDataPointN<double>::value_typem_fWeight; ROOT::Math::TDataPointN<double>::value_type*m_vCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. void SetDimension(UInt_t dim); {assert(dim>0);kDimension=dim;}. _val_type GetCoordinate(unsigned int iAxis) const. _val_type GetWeight() const; {return m_fWeight;}. bool Less(ROOT::Math::TDataPointN<double>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, double fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id: TDataPointN.h 41518 2011-10-20 16:19:03Z moneta $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__TDataPointN_double_.html:1351,assert,assert,1351,root/html532/ROOT__Math__TDataPointN_double_.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__TDataPointN_double_.html,1,['assert'],['assert']
Testability,". ROOT::Math::TDataPointN<float>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPointN<float>. class ROOT::Math::TDataPointN<float>. Function Members (Methods); public:. virtual~TDataPointN<float>(); static UInt_tDimension(); floatGetCoordinate(unsigned int iAxis) const; floatGetWeight() const; boolLess(ROOT::Math::TDataPointN<float>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPointN<float>&operator=(const ROOT::Math::TDataPointN<float>&); voidSetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<float>::value_type fValue); static voidSetDimension(UInt_t dim); voidSetWeight(float fWeight); ROOT::Math::TDataPointN<float>TDataPointN<float>(); ROOT::Math::TDataPointN<float>TDataPointN<float>(const ROOT::Math::TDataPointN<float>&). Data Members; private:. static UInt_tkDimension; ROOT::Math::TDataPointN<float>::value_typem_fWeight; ROOT::Math::TDataPointN<float>::value_type*m_vCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. void SetDimension(UInt_t dim); {assert(dim>0);kDimension=dim;}. _val_type GetCoordinate(unsigned int iAxis) const. _val_type GetWeight() const; {return m_fWeight;}. bool Less(ROOT::Math::TDataPointN<float>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<float>::value_type fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__TDataPointN_float_.html:1259,assert,assert,1259,root/html602/ROOT__Math__TDataPointN_float_.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__TDataPointN_float_.html,1,['assert'],['assert']
Testability,". ROOT::Math::TDataPointN<float>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPointN<float>. class ROOT::Math::TDataPointN<float>. Function Members (Methods); public:. virtual~TDataPointN<float>(); static UInt_tDimension(); floatGetCoordinate(unsigned int iAxis) const; floatGetWeight() const; boolLess(ROOT::Math::TDataPointN<float>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPointN<float>&operator=(const ROOT::Math::TDataPointN<float>&); voidSetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<float>::value_type fValue); static voidSetDimension(UInt_t dim); voidSetWeight(float fWeight); ROOT::Math::TDataPointN<float>TDataPointN<float>(); ROOT::Math::TDataPointN<float>TDataPointN<float>(const ROOT::Math::TDataPointN<float>&). Data Members; private:. static UInt_tkDimension; ROOT::Math::TDataPointN<float>::value_typem_fWeight; ROOT::Math::TDataPointN<float>::value_type*m_vCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. void SetDimension(UInt_t dim); {assert(dim>0);kDimension=dim;}. _val_type GetCoordinate(unsigned int iAxis) const. _val_type GetWeight() const; {return m_fWeight;}. bool Less(ROOT::Math::TDataPointN<float>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, ROOT::Math::TDataPointN<float>::value_type fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__TDataPointN_float_.html:1259,assert,assert,1259,root/html604/ROOT__Math__TDataPointN_float_.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__TDataPointN_float_.html,1,['assert'],['assert']
Testability,". ROOT::Math::TDataPointN<float>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPointN<float>. class ROOT::Math::TDataPointN<float>. This class is also known as (typedefs to this class)ROOT::Math::TDataPointN<Float_t>. Function Members (Methods); public:. virtual~TDataPointN<float>(); static UInt_tDimension(); floatGetCoordinate(unsigned int iAxis) const; floatGetWeight() const; boolLess(ROOT::Math::TDataPointN<float>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPointN<float>&operator=(const ROOT::Math::TDataPointN<float>&); voidSetCoordinate(unsigned int iAxis, float fValue); static voidSetDimension(UInt_t dim); voidSetWeight(float fWeight); ROOT::Math::TDataPointN<float>TDataPointN<float>(); ROOT::Math::TDataPointN<float>TDataPointN<float>(const ROOT::Math::TDataPointN<float>&). Data Members; private:. static UInt_tkDimension; ROOT::Math::TDataPointN<float>::value_typem_fWeight; ROOT::Math::TDataPointN<float>::value_type*m_vCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. void SetDimension(UInt_t dim); {assert(dim>0);kDimension=dim;}. _val_type GetCoordinate(unsigned int iAxis) const. _val_type GetWeight() const; {return m_fWeight;}. bool Less(ROOT::Math::TDataPointN<float>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, float fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__TDataPointN_float_.html:1308,assert,assert,1308,root/html534/ROOT__Math__TDataPointN_float_.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__TDataPointN_float_.html,1,['assert'],['assert']
Testability,". ROOT::Math::TDataPointN<float>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::TDataPointN<float>. class ROOT::Math::TDataPointN<float>. This class is also known as (typedefs to this class)ROOT::Math::TDataPointN<Float_t>. Function Members (Methods); public:. virtual~TDataPointN<float>(); static UInt_tDimension(); floatGetCoordinate(unsigned int iAxis) const; floatGetWeight() const; boolLess(ROOT::Math::TDataPointN<float>& rPoint, unsigned int iAxis) const; ROOT::Math::TDataPointN<float>&operator=(const ROOT::Math::TDataPointN<float>&); voidSetCoordinate(unsigned int iAxis, float fValue); static voidSetDimension(UInt_t dim); voidSetWeight(float fWeight); ROOT::Math::TDataPointN<float>TDataPointN<float>(); ROOT::Math::TDataPointN<float>TDataPointN<float>(const ROOT::Math::TDataPointN<float>&). Data Members; private:. static UInt_tkDimension; ROOT::Math::TDataPointN<float>::value_typem_fWeight; ROOT::Math::TDataPointN<float>::value_type*m_vCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return kDimension;}. void SetDimension(UInt_t dim); {assert(dim>0);kDimension=dim;}. _val_type GetCoordinate(unsigned int iAxis) const. _val_type GetWeight() const; {return m_fWeight;}. bool Less(ROOT::Math::TDataPointN<float>& rPoint, unsigned int iAxis) const. void SetCoordinate(unsigned int iAxis, float fValue). void SetWeight(float fWeight); {m_fWeight = fWeight;}. » Last changed: root/mathcore:$Id: TDataPointN.h 41518 2011-10-20 16:19:03Z moneta $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__TDataPointN_float_.html:1308,assert,assert,1308,root/html532/ROOT__Math__TDataPointN_float_.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__TDataPointN_float_.html,1,['assert'],['assert']
Testability,". ROOTUsersGuide. User’s Guide; May 2018. Preface; 1 Introduction; 2 Getting Started; 3 Histograms; 4 Graphs; 5 Fitting Histograms; 6 A Little C++; 7 The C++ Interpreter Cling; 8 Object Ownership; 9 Graphics and the Graphical User Interface; 10 Folders and Tasks; 11 Input/Output; 12 Trees; 13 Math Libraries in ROOT; 14 Linear Algebra in ROOT; 15 Adding a Class; 16 Collection Classes; 17 Physics Vectors; 18 The Geometry Package; 19 Python Interface; 20 The Tutorials and Tests; 21 Example Analysis; 22 Networking; 23 Threads; 24 PROOF: Parallel Processing; 25 Writing a Graphical User Interface; 26 The Signal/Slot Communication Mechanism; 27 Automatic HTML Documentation; 28 Appendix A: Install and Build ROOT. WARNING: This documentation is not maintained anymore. Some part might be obsolete or wrong, some part might be missing but still some valuable information can be found there. Instead please refer to the ROOT Reference Guide and the ROOT Manual. If you think some information should be imported in the ROOT Reference Guide or in the ROOT Manual, please post your request to the ROOT Forum or via a Github Issue. Preface; In late 1994, we decided to learn and investigate Object Oriented programming and C++ to better judge the suitability of these relatively new techniques for scientific programming. We knew that there is no better way to learn a new programming environment than to use it to write a program that can solve a real problem. After a few weeks, we had our first histogramming package in C++. A few weeks later we had a rewrite of the same package using the, at that time, very new template features of C++. Again, a few weeks later we had another rewrite of the package without templates since we could only compile the version with templates on one single platform using a specific compiler. Finally, after about four months we had a histogramming package that was faster and more efficient than the well-known FORTRAN based HBOOK histogramming package. This gave us en",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:474,Test,Tests,474,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Test'],['Tests']
Testability,". Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TRint Class Reference. . Definition at line 31 of file TRint.h. Public Member Functions;  TRint (const char *appClassName, Int_t *argc, char **argv, void *options=nullptr, Int_t numOptions=0, Bool_t noLogo=kFALSE, Bool_t exitOnUnknownArgs=kFALSE);  Create an application environment. ;  ; virtual ~TRint ();  Destructor. ;  ; TFileHandler * GetInputHandler ();  ; virtual char * GetPrompt ();  Get prompt from interpreter. Either ""root [n]"" or ""end with '}'"". ;  ; void HandleException (Int_t sig) override;  Handle signals (kSigBus, kSigSegmentationViolation, kSigIllegalInstruction and kSigFloatingException) trapped in TSystem. ;  ; Bool_t HandleTermInput () override;  Handle input coming from terminal. ;  ; void Interrupt ();  ; TClass * IsA () const override;  ; virtual void PrintLogo (Bool_t lite=kFALSE);  Print the ROOT logo on standard output. ;  ; void Run (Bool_t retrn=kFALSE) override;  Main application eventloop. ;  ; void SetEchoMode (Bool_t mode) override;  Set console mode: ;  ; virtual const char * SetPrompt (const char *newPrompt);  Set a new default prompt. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t TabCompletionHook (char *buf, int *pLoc, std::ostream &out) override;  Forward tab completion request to our TTabCom::Hook(). ;  ; virtual void Terminate (int status) override;  Terminate the application. ;  ;  Public Member Functions inherited from TApplication;  TApplication (const char *appClassName, Int_t *argc, char **argv, void *options=nullptr, Int_t numOptions=0);  Create an application environment. ;  ; virtual ~TApplication ();  TApplication dtor. ;  ; virtual const char * ApplicationName () const;  ; Int_t Argc () const;  ; cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRint.html:1099,log,logo,1099,doc/master/classTRint.html,https://root.cern,https://root.cern/doc/master/classTRint.html,1,['log'],['logo']
Testability,". Reference Guide | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Reference Guide. The Reference Guide is available for all major ROOT releases, and for the current HEAD of the git master:. HEAD of the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/guides/reference-guide.html:713,test,tests,713,d/guides/reference-guide.html,https://root.cern,https://root.cern/d/guides/reference-guide.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Reflex::ClassBuilder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::ClassBuilder. class Reflex::ClassBuilder. Function Members (Methods); public:. virtual~ClassBuilder(); Reflex::ClassBuilder&AddBase(const Reflex::Type& bas, Reflex::OffsetFunction offsFP, unsigned int modifiers = 0); Reflex::ClassBuilder&AddDataMember(const Reflex::Type& typ, const char* nam, size_t offs, unsigned int modifiers = 0); Reflex::ClassBuilder&AddEnum(const char* nam, const char* values, const type_info* ti = 0, unsigned int modifiers = 0); Reflex::ClassBuilder&AddFunctionMember(const Reflex::Type& typ, const char* nam, Reflex::StubFunction stubFP, void* stubCtx = 0, const char* params = 0, unsigned int modifiers = 0); Reflex::ClassBuilder&AddOnDemandDataMemberBuilder(Reflex::OnDemandBuilderForScope* odb); Reflex::ClassBuilder&AddOnDemandFunctionMemberBuilder(Reflex::OnDemandBuilderForScope* odb); Reflex::ClassBuilder&AddTypedef(const Reflex::Type& typ, const char* def); Reflex::ClassBuilder&AddTypedef(const char* typ, const char* def); Reflex::ClassBuilderClassBuilder(Reflex::Class* cl); Reflex::ClassBuilderClassBuilder(const Reflex::ClassBuilder&); Reflex::ClassBuilderClassBuilder(const char* nam, const type_info& ti, size_t size, unsigned int modifiers = 0, Reflex::TYPE typ = CLASS); Reflex::ClassBuilder&operator=(const Reflex::ClassBuilder&); Reflex::ClassBuilder&SetSizeOf(size_t size); Reflex::TypeToType(). protected:. Reflex::ClassBuilder&EnableCallback(bool enable = true). Data Members; private:. Reflex::ClassBuilderImplfClassBuilderImpl. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; AddBase(unsigned int modifiers). AddDataMember(const char* nam, size_t offs, unsigned int modifiers). AddFunctionMember(const char* nam, StubFunction stubFP, void* stubCtx, const char* param",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/Reflex__ClassBuilder.html:784,Stub,StubFunction,784,root/html526/Reflex__ClassBuilder.html,https://root.cern,https://root.cern/root/html526/Reflex__ClassBuilder.html,6,"['Stub', 'stub']","['StubFunction', 'stubCtx', 'stubFP']"
Testability,". Reflex::ClassBuilder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::ClassBuilder. class Reflex::ClassBuilder. Function Members (Methods); public:. virtual~ClassBuilder(); Reflex::ClassBuilder&AddBase(const Reflex::Type& bas, Reflex::OffsetFunction offsFP, unsigned int modifiers = 0); Reflex::ClassBuilder&AddDataMember(const Reflex::Type& typ, const char* nam, size_t offs, unsigned int modifiers = 0); Reflex::ClassBuilder&AddEnum(const char* nam, const char* values, const type_info* ti = 0, unsigned int modifiers = 0); Reflex::ClassBuilder&AddFunctionMember(const Reflex::Type& typ, const char* nam, Reflex::StubFunction stubFP, void* stubCtx = 0, const char* params = 0, unsigned int modifiers = 0); Reflex::ClassBuilder&AddOnDemandDataMemberBuilder(Reflex::OnDemandBuilderForScope* odb); Reflex::ClassBuilder&AddOnDemandFunctionMemberBuilder(Reflex::OnDemandBuilderForScope* odb); Reflex::ClassBuilder&AddTypedef(const Reflex::Type& typ, const char* def); Reflex::ClassBuilder&AddTypedef(const char* typ, const char* def); Reflex::ClassBuilderClassBuilder(Reflex::Class* cl); Reflex::ClassBuilderClassBuilder(const Reflex::ClassBuilder&); Reflex::ClassBuilderClassBuilder(const char* nam, const type_info& ti, size_t size, unsigned int modifiers = 0, Reflex::TYPE typ = CLASS); Reflex::ClassBuilder&operator=(const Reflex::ClassBuilder&); Reflex::ClassBuilder&SetSizeOf(size_t size); Reflex::TypeToType(). protected:. Reflex::ClassBuilder&EnableCallback(bool enable = true). Data Members; private:. Reflex::ClassBuilderImplfClassBuilderImpl. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; AddBase(unsigned int modifiers). AddDataMember(const char* nam, size_t offs, unsigned int modifiers). AddFunctionMember(const char* nam, StubFunction stubFP, void* stubCtx, const char* par",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/Reflex__ClassBuilder.html:786,Stub,StubFunction,786,root/html530/Reflex__ClassBuilder.html,https://root.cern,https://root.cern/root/html530/Reflex__ClassBuilder.html,9,"['Stub', 'stub']","['StubFunction', 'stubCtx', 'stubFP']"
Testability,". Reflex::ClassBuilderImpl. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::ClassBuilderImpl. class Reflex::ClassBuilderImpl. Register an on demand builder with this class. Function Members (Methods); public:. virtual~ClassBuilderImpl(); voidAddBase(const Reflex::Type& bas, Reflex::OffsetFunction offsFP, unsigned int modifiers = 0); voidAddDataMember(const char* nam, const Reflex::Type& typ, size_t offs, unsigned int modifiers = 0); voidAddEnum(const char* nam, const char* values, const type_info* ti, unsigned int modifiers = 0); voidAddFunctionMember(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx = 0, const char* params = 0, unsigned int modifiers = 0); voidAddOnDemandDataMemberBuilder(Reflex::OnDemandBuilderForScope* odb); voidAddOnDemandFunctionMemberBuilder(Reflex::OnDemandBuilderForScope* odb); voidAddProperty(const char* key, Reflex::Any value); voidAddProperty(const char* key, const char* value); voidAddTypedef(const Reflex::Type& typ, const char* def); Reflex::ClassBuilderImplClassBuilderImpl(Reflex::Class* cl); Reflex::ClassBuilderImplClassBuilderImpl(const Reflex::ClassBuilderImpl&); Reflex::ClassBuilderImplClassBuilderImpl(const char* nam, const type_info& ti, size_t size, unsigned int modifiers = 0, Reflex::TYPE typ = CLASS); Reflex::ClassBuilderImpl&operator=(const Reflex::ClassBuilderImpl&); voidSetSizeOf(size_t size); Reflex::TypeToType(). protected:. voidEnableCallback(bool enable = true). Data Members; private:. boolfCallbackEnabled; Reflex::Class*fClass; Reflex::MemberfLastMember; boolfNewClass. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ClassBuilderImpl(const char* nam, const type_info& ti, size_t size, unsigned int modifiers = 0, Reflex::TYPE typ = CLASS); constructor . ClassBuilderImpl(Class* cl). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/Reflex__ClassBuilderImpl.html:775,Stub,StubFunction,775,root/html526/Reflex__ClassBuilderImpl.html,https://root.cern,https://root.cern/root/html526/Reflex__ClassBuilderImpl.html,3,"['Stub', 'stub']","['StubFunction', 'stubCtx', 'stubFP']"
Testability,". Reflex::FunctionBuilder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::FunctionBuilder. class Reflex::FunctionBuilder. Function Members (Methods); public:. virtual~FunctionBuilder(); Reflex::FunctionBuilder&AddProperty(const char* key, Reflex::Any value); Reflex::FunctionBuilder&AddProperty(const char* key, const char* value); Reflex::FunctionBuilderFunctionBuilder(const Reflex::FunctionBuilder&); Reflex::FunctionBuilderFunctionBuilder(const Reflex::Type& typ, const char* nam, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers); Reflex::FunctionBuilder&operator=(const Reflex::FunctionBuilder&); Reflex::MemberToMember(). Data Members; private:. Reflex::MemberfFunction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FunctionBuilder(const Reflex::Type& typ, const char* nam, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers); constructor . FunctionBuilder& AddProperty(const char* key, Any value); destructor ; AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. Member ToMember(). * ToMember will return the member currently being built; * @return member currently being built. void AddProperty(const char* key, Any value); AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. » Last changed: root/reflex:$Id: FunctionBuilder.h 29288 2009-07-01 13:03:35Z axel $ » Last generated: 2009-12-07 13:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/Reflex__FunctionBuilder.html:661,Stub,StubFunction,661,root/html526/Reflex__FunctionBuilder.html,https://root.cern,https://root.cern/root/html526/Reflex__FunctionBuilder.html,6,"['Stub', 'stub']","['StubFunction', 'stubCtx', 'stubFP']"
Testability,". Reflex::FunctionBuilder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::FunctionBuilder. class Reflex::FunctionBuilder. Function Members (Methods); public:. virtual~FunctionBuilder(); Reflex::FunctionBuilder&AddProperty(const char* key, Reflex::Any value); Reflex::FunctionBuilder&AddProperty(const char* key, const char* value); Reflex::FunctionBuilderFunctionBuilder(const Reflex::FunctionBuilder&); Reflex::FunctionBuilderFunctionBuilder(const Reflex::Type& typ, const char* nam, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers); Reflex::FunctionBuilder&operator=(const Reflex::FunctionBuilder&); Reflex::MemberToMember(). Data Members; private:. Reflex::MemberfFunction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FunctionBuilder(const Reflex::Type& typ, const char* nam, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers); constructor . FunctionBuilder& AddProperty(const char* key, Any value); destructor ; AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. Member ToMember(). * ToMember will return the member currently being built; * @return member currently being built. void AddProperty(const char* key, Any value); AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. » Last changed: root/reflex:$Id: FunctionBuilder.h 29288 2009-07-01 13:03:35Z axel $ » Last generated: 2010-09-23 19:57; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/Reflex__FunctionBuilder.html:661,Stub,StubFunction,661,root/html528/Reflex__FunctionBuilder.html,https://root.cern,https://root.cern/root/html528/Reflex__FunctionBuilder.html,6,"['Stub', 'stub']","['StubFunction', 'stubCtx', 'stubFP']"
Testability,". Reflex::FunctionBuilder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::FunctionBuilder. class Reflex::FunctionBuilder. Function Members (Methods); public:. virtual~FunctionBuilder(); Reflex::FunctionBuilder&AddProperty(const char* key, Reflex::Any value); Reflex::FunctionBuilder&AddProperty(const char* key, const char* value); Reflex::FunctionBuilderFunctionBuilder(const Reflex::FunctionBuilder&); Reflex::FunctionBuilderFunctionBuilder(const Reflex::Type& typ, const char* nam, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers); Reflex::FunctionBuilder&operator=(const Reflex::FunctionBuilder&); Reflex::MemberToMember(). Data Members; private:. Reflex::MemberfFunction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FunctionBuilder(const Reflex::Type& typ, const char* nam, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers); constructor . FunctionBuilder& AddProperty(const char* key, Any value); destructor ; AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. Member ToMember(). * ToMember will return the member currently being built; * @return member currently being built. void AddProperty(const char* key, Any value); AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__FunctionBuilder.html:663,Stub,StubFunction,663,root/html534/Reflex__FunctionBuilder.html,https://root.cern,https://root.cern/root/html534/Reflex__FunctionBuilder.html,6,"['Stub', 'stub']","['StubFunction', 'stubCtx', 'stubFP']"
Testability,". Reflex::FunctionBuilder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::FunctionBuilder. class Reflex::FunctionBuilder. Function Members (Methods); public:. virtual~FunctionBuilder(); Reflex::FunctionBuilder&AddProperty(const char* key, Reflex::Any value); Reflex::FunctionBuilder&AddProperty(const char* key, const char* value); Reflex::FunctionBuilderFunctionBuilder(const Reflex::FunctionBuilder&); Reflex::FunctionBuilderFunctionBuilder(const Reflex::Type& typ, const char* nam, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers); Reflex::FunctionBuilder&operator=(const Reflex::FunctionBuilder&); Reflex::MemberToMember(). Data Members; private:. Reflex::MemberfFunction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FunctionBuilder(const Reflex::Type& typ, const char* nam, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers); constructor . FunctionBuilder& AddProperty(const char* key, Any value); destructor ; AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. Member ToMember(). * ToMember will return the member currently being built; * @return member currently being built. void AddProperty(const char* key, Any value); AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. » Last changed: root/reflex:$Id: FunctionBuilder.h 29288 2009-07-01 13:03:35Z axel $ » Last generated: 2011-07-04 15:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/Reflex__FunctionBuilder.html:663,Stub,StubFunction,663,root/html530/Reflex__FunctionBuilder.html,https://root.cern,https://root.cern/root/html530/Reflex__FunctionBuilder.html,6,"['Stub', 'stub']","['StubFunction', 'stubCtx', 'stubFP']"
Testability,". Reflex::FunctionBuilder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::FunctionBuilder. class Reflex::FunctionBuilder. Function Members (Methods); public:. virtual~FunctionBuilder(); Reflex::FunctionBuilder&AddProperty(const char* key, Reflex::Any value); Reflex::FunctionBuilder&AddProperty(const char* key, const char* value); Reflex::FunctionBuilderFunctionBuilder(const Reflex::FunctionBuilder&); Reflex::FunctionBuilderFunctionBuilder(const Reflex::Type& typ, const char* nam, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers); Reflex::FunctionBuilder&operator=(const Reflex::FunctionBuilder&); Reflex::MemberToMember(). Data Members; private:. Reflex::MemberfFunction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FunctionBuilder(const Reflex::Type& typ, const char* nam, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers); constructor . FunctionBuilder& AddProperty(const char* key, Any value); destructor ; AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. Member ToMember(). * ToMember will return the member currently being built; * @return member currently being built. void AddProperty(const char* key, Any value); AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. » Last changed: root/reflex:$Id: FunctionBuilder.h 29288 2009-07-01 13:03:35Z axel $ » Last generated: 2011-11-03 20:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/Reflex__FunctionBuilder.html:663,Stub,StubFunction,663,root/html532/Reflex__FunctionBuilder.html,https://root.cern,https://root.cern/root/html532/Reflex__FunctionBuilder.html,6,"['Stub', 'stub']","['StubFunction', 'stubCtx', 'stubFP']"
Testability,". Reflex::FunctionBuilderImpl. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::FunctionBuilderImpl. class Reflex::FunctionBuilderImpl. Function Members (Methods); public:. ~FunctionBuilderImpl(); voidAddProperty(const char* key, Reflex::Any value); voidAddProperty(const char* key, const char* value); Reflex::FunctionBuilderImplFunctionBuilderImpl(const Reflex::FunctionBuilderImpl&); Reflex::FunctionBuilderImplFunctionBuilderImpl(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers = 0); Reflex::FunctionBuilderImpl&operator=(const Reflex::FunctionBuilderImpl&); Reflex::MemberToMember(). Data Members; private:. Reflex::MemberfFunction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FunctionBuilder& AddProperty(const char* key, Any value); AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. Member ToMember(). * ToMember will return the member currently being built; * @return member currently being built. FunctionBuilderImpl(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers = 0); constructor . void AddProperty(const char* key, Any value); destructor ; AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. » Last changed: root/reflex:$Id: FunctionBuilder.h 29288 2009-07-01 13:03:35Z axel $ » Last generated: 2009-12-07 13:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/Reflex__FunctionBuilderImpl.html:650,Stub,StubFunction,650,root/html526/Reflex__FunctionBuilderImpl.html,https://root.cern,https://root.cern/root/html526/Reflex__FunctionBuilderImpl.html,6,"['Stub', 'stub']","['StubFunction', 'stubCtx', 'stubFP']"
Testability,". Reflex::FunctionBuilderImpl. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::FunctionBuilderImpl. class Reflex::FunctionBuilderImpl. Function Members (Methods); public:. ~FunctionBuilderImpl(); voidAddProperty(const char* key, Reflex::Any value); voidAddProperty(const char* key, const char* value); Reflex::FunctionBuilderImplFunctionBuilderImpl(const Reflex::FunctionBuilderImpl&); Reflex::FunctionBuilderImplFunctionBuilderImpl(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers = 0); Reflex::FunctionBuilderImpl&operator=(const Reflex::FunctionBuilderImpl&); Reflex::MemberToMember(). Data Members; private:. Reflex::MemberfFunction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FunctionBuilder& AddProperty(const char* key, Any value); AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. Member ToMember(). * ToMember will return the member currently being built; * @return member currently being built. FunctionBuilderImpl(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers = 0); constructor . void AddProperty(const char* key, Any value); destructor ; AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. » Last changed: root/reflex:$Id: FunctionBuilder.h 29288 2009-07-01 13:03:35Z axel $ » Last generated: 2010-09-23 19:57; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/Reflex__FunctionBuilderImpl.html:650,Stub,StubFunction,650,root/html528/Reflex__FunctionBuilderImpl.html,https://root.cern,https://root.cern/root/html528/Reflex__FunctionBuilderImpl.html,6,"['Stub', 'stub']","['StubFunction', 'stubCtx', 'stubFP']"
Testability,". Reflex::FunctionBuilderImpl. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::FunctionBuilderImpl. class Reflex::FunctionBuilderImpl. Function Members (Methods); public:. ~FunctionBuilderImpl(); voidAddProperty(const char* key, Reflex::Any value); voidAddProperty(const char* key, const char* value); Reflex::FunctionBuilderImplFunctionBuilderImpl(const Reflex::FunctionBuilderImpl&); Reflex::FunctionBuilderImplFunctionBuilderImpl(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers = 0); Reflex::FunctionBuilderImpl&operator=(const Reflex::FunctionBuilderImpl&); Reflex::MemberToMember(). Data Members; private:. Reflex::MemberfFunction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FunctionBuilder& AddProperty(const char* key, Any value); AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. Member ToMember(). * ToMember will return the member currently being built; * @return member currently being built. FunctionBuilderImpl(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers = 0); constructor . void AddProperty(const char* key, Any value); destructor ; AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. » Last changed: root/reflex:$Id$ » Last generated: 2015-09-08 17:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__FunctionBuilderImpl.html:652,Stub,StubFunction,652,root/html534/Reflex__FunctionBuilderImpl.html,https://root.cern,https://root.cern/root/html534/Reflex__FunctionBuilderImpl.html,6,"['Stub', 'stub']","['StubFunction', 'stubCtx', 'stubFP']"
Testability,". Reflex::FunctionBuilderImpl. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::FunctionBuilderImpl. class Reflex::FunctionBuilderImpl. Function Members (Methods); public:. ~FunctionBuilderImpl(); voidAddProperty(const char* key, Reflex::Any value); voidAddProperty(const char* key, const char* value); Reflex::FunctionBuilderImplFunctionBuilderImpl(const Reflex::FunctionBuilderImpl&); Reflex::FunctionBuilderImplFunctionBuilderImpl(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers = 0); Reflex::FunctionBuilderImpl&operator=(const Reflex::FunctionBuilderImpl&); Reflex::MemberToMember(). Data Members; private:. Reflex::MemberfFunction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FunctionBuilder& AddProperty(const char* key, Any value); AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. Member ToMember(). * ToMember will return the member currently being built; * @return member currently being built. FunctionBuilderImpl(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers = 0); constructor . void AddProperty(const char* key, Any value); destructor ; AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. » Last changed: root/reflex:$Id: FunctionBuilder.h 29288 2009-07-01 13:03:35Z axel $ » Last generated: 2011-07-04 15:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/Reflex__FunctionBuilderImpl.html:652,Stub,StubFunction,652,root/html530/Reflex__FunctionBuilderImpl.html,https://root.cern,https://root.cern/root/html530/Reflex__FunctionBuilderImpl.html,6,"['Stub', 'stub']","['StubFunction', 'stubCtx', 'stubFP']"
Testability,". Reflex::FunctionBuilderImpl. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::FunctionBuilderImpl. class Reflex::FunctionBuilderImpl. Function Members (Methods); public:. ~FunctionBuilderImpl(); voidAddProperty(const char* key, Reflex::Any value); voidAddProperty(const char* key, const char* value); Reflex::FunctionBuilderImplFunctionBuilderImpl(const Reflex::FunctionBuilderImpl&); Reflex::FunctionBuilderImplFunctionBuilderImpl(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers = 0); Reflex::FunctionBuilderImpl&operator=(const Reflex::FunctionBuilderImpl&); Reflex::MemberToMember(). Data Members; private:. Reflex::MemberfFunction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FunctionBuilder& AddProperty(const char* key, Any value); AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. Member ToMember(). * ToMember will return the member currently being built; * @return member currently being built. FunctionBuilderImpl(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx, const char* params, unsigned char modifiers = 0); constructor . void AddProperty(const char* key, Any value); destructor ; AddProperty will add a property; * @param key the property key; * @param value the value of the property; * @return a reference to the building class. » Last changed: root/reflex:$Id: FunctionBuilder.h 29288 2009-07-01 13:03:35Z axel $ » Last generated: 2011-11-03 20:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/Reflex__FunctionBuilderImpl.html:652,Stub,StubFunction,652,root/html532/Reflex__FunctionBuilderImpl.html,https://root.cern,https://root.cern/root/html532/Reflex__FunctionBuilderImpl.html,6,"['Stub', 'stub']","['StubFunction', 'stubCtx', 'stubFP']"
Testability,". Reflex::UnionBuilderImpl. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::UnionBuilderImpl. class Reflex::UnionBuilderImpl. Function Members (Methods); public:. virtual~UnionBuilderImpl(); voidAddDataMember(const char* nam, const Reflex::Type& typ, size_t offs, unsigned int modifiers = 0); voidAddFunctionMember(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx = 0, const char* params = 0, unsigned int modifiers = 0); voidAddItem(const char* nam, const Reflex::Type& typ); voidAddProperty(const char* key, Reflex::Any value); voidAddProperty(const char* key, const char* value); Reflex::UnionBuilderImpl&operator=(const Reflex::UnionBuilderImpl&); voidSetSizeOf(size_t size); Reflex::TypeToType(); Reflex::UnionBuilderImplUnionBuilderImpl(const Reflex::UnionBuilderImpl&); Reflex::UnionBuilderImplUnionBuilderImpl(const char* nam, size_t size, const type_info& ti, unsigned int modifiers = 0, Reflex::TYPE typ = UNION). protected:. voidEnableCallback(const bool enable = true). Data Members; private:. boolfCallbackEnabled; Reflex::MemberfLastMember; Reflex::Union*fUnion. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UnionBuilderImpl(const char* nam, size_t size, const type_info& ti, unsigned int modifiers = 0, Reflex::TYPE typ = UNION); constructor . virtual ~UnionBuilderImpl(); destructor . void AddItem(const char* nam, const Reflex::Type& typ). * AddItem will add one union item; * @param Name the Name of the union item; * @param At the At of the union item. void AddFunctionMember(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx = 0, const char* params = 0, unsigned int modifiers = 0); AddDataMember will add the information about one data; * MemberAt of the union; *; * @param Name of the data Membe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/Reflex__UnionBuilderImpl.html:532,Stub,StubFunction,532,root/html526/Reflex__UnionBuilderImpl.html,https://root.cern,https://root.cern/root/html526/Reflex__UnionBuilderImpl.html,6,"['Stub', 'stub']","['StubFunction', 'stubCtx', 'stubFP']"
Testability,". Reflex::UnionBuilderImpl. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CINT; » REFLEX; » Reflex::UnionBuilderImpl. class Reflex::UnionBuilderImpl. Function Members (Methods); public:. virtual~UnionBuilderImpl(); voidAddDataMember(const char* nam, const Reflex::Type& typ, size_t offs, unsigned int modifiers = 0); voidAddFunctionMember(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx = 0, const char* params = 0, unsigned int modifiers = 0); voidAddItem(const char* nam, const Reflex::Type& typ); voidAddProperty(const char* key, Reflex::Any value); voidAddProperty(const char* key, const char* value); Reflex::UnionBuilderImpl&operator=(const Reflex::UnionBuilderImpl&); voidSetSizeOf(size_t size); Reflex::TypeToType(); Reflex::UnionBuilderImplUnionBuilderImpl(const Reflex::UnionBuilderImpl&); Reflex::UnionBuilderImplUnionBuilderImpl(const char* nam, size_t size, const type_info& ti, unsigned int modifiers = 0, Reflex::TYPE typ = UNION). protected:. voidEnableCallback(const bool enable = true). Data Members; private:. boolfCallbackEnabled; Reflex::MemberfLastMember; Reflex::Union*fUnion. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UnionBuilderImpl(const char* nam, size_t size, const type_info& ti, unsigned int modifiers = 0, Reflex::TYPE typ = UNION); constructor . virtual ~UnionBuilderImpl(); destructor . void AddItem(const char* nam, const Reflex::Type& typ). * AddItem will add one union item; * @param Name the Name of the union item; * @param At the At of the union item. void AddFunctionMember(const char* nam, const Reflex::Type& typ, Reflex::StubFunction stubFP, void* stubCtx = 0, const char* params = 0, unsigned int modifiers = 0); AddDataMember will add the information about one data; * MemberAt of the union; *; * @param Name of the data Mem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/Reflex__UnionBuilderImpl.html:534,Stub,StubFunction,534,root/html530/Reflex__UnionBuilderImpl.html,https://root.cern,https://root.cern/root/html530/Reflex__UnionBuilderImpl.html,9,"['Stub', 'stub']","['StubFunction', 'stubCtx', 'stubFP']"
Testability,". Release Checklist | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Release Checklist. Steps to be followed to produce a new ROOT release are:; Prerequisites. Get the 'green' light from all main develope",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/release-checklist.html:715,test,tests,715,d/release-checklist.html,https://root.cern,https://root.cern/d/release-checklist.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Releases | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Download Releases. ; Pro ; Release 6.20/04 - 2020-04-01 ; . Old ; Release 6.18/04 - 2019-09-11 ; ; ; . Version 6 ; ; Release 6.20/06 - 2020-06-10. Release 6",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/releases.html:706,test,tests,706,d/releases.html,https://root.cern,https://root.cern/d/releases.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Returns index of array with the minimum element. ; If more than one element is minimum returns first found.; Implement here since this one is found to be faster (mainly on 64 bit machines) than stl generic implementation. When performing the comparison, the STL implementation needs to de-reference both the array iterator and the iterator pointing to the resulting minimum location ; Definition at line 982 of file TMath.h. ◆ Log(). Double_t TMath::Log ; (; Double_t ; x). inline . Returns the natural logarithm of x. ; Definition at line 756 of file TMath.h. ◆ Log10(). Double_t TMath::Log10 ; (; Double_t ; x). inline . Returns the common (base-10) logarithm of x. ; Definition at line 762 of file TMath.h. ◆ Log2(). Double_t TMath::Log2 ; (; Double_t ; x). Returns the binary (base-2) logarithm of x. ; Definition at line 107 of file TMath.cxx. ◆ LogE(). constexpr Double_t TMath::LogE ; (; ). constexpr . Base-10 log of e (to convert ln to log) ; Definition at line 107 of file TMath.h. ◆ LogNormal(). Double_t TMath::LogNormal ; (; Double_t ; x, . Double_t ; sigma, . Double_t ; theta = 0, . Double_t ; m = 1 . ). Computes the density of LogNormal distribution at point x. ; Variable X has lognormal distribution if Y=Ln(X) has normal distribution; Parameters. [in]xis the evaluation point ; [in]sigmais the shape parameter ; [in]thetais the location parameter ; [in]mis the scale parameter. The formula was taken from ""Engineering Statistics Handbook"" on site http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm Implementation using ROOT::Math::lognormal_pdf. Definition at line 2437 of file TMath.cxx. ◆ Max() [1/10]. Double_t TMath::Max ; (; Double_t ; a, . Double_t ; b . ). inline . Returns the largest of a and b. ; If both are equivalent, a is returned. aand b are Double_t. ; Definition at line 295 of file TMathBase.h. ◆ Max() [2/10]. Float_t TMath::Max ; (; Float_t ; a, . Float_t ; b . ). inline . Returns the largest of a and b. ; If both are equivalent, a is returned",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMath.html:60737,Log,LogNormal,60737,doc/master/namespaceTMath.html,https://root.cern,https://root.cern/doc/master/namespaceTMath.html,1,['Log'],['LogNormal']
Testability,". ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::PDEFoamDecisionTree::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 57 of file PDEFoamDecisionTree.h. ◆ DeclFileName(). static const char * TMVA::PDEFoamDecisionTree::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 57 of file PDEFoamDecisionTree.h. ◆ Explore(). void TMVA::PDEFoamDecisionTree::Explore ; (; PDEFoamCell * ; cell). protectedvirtual . Internal subprogram used by Create. ; It explores newly defined cell with according to the decision tree logic. The separation set via the 'sepType' option in the constructor.; The optimal division point for eventual future cell division is determined/recorded. Note that links to parents and initial volume = 1/2 parent has to be already defined prior to calling this routine.; Note, that according to the decision tree logic, a cell is only split, if the number of (unweighted) events in each daughter cell is greater than fNmin. ; Reimplemented from TMVA::PDEFoam.; Definition at line 125 of file PDEFoamDecisionTree.cxx. ◆ IsA(). virtual TClass * TMVA::PDEFoamDecisionTree::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::PDEFoamDiscriminant.; Definition at line 57 of file PDEFoamDecisionTree.h. ◆ Streamer(). virtual void TMVA::PDEFoamDecisionTree::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::PDEFoamDiscriminant. ◆ StreamerNVirtual(). void TMVA::PDEFoamDecisionTree::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 57 of file PDEFoamDecisionTree.h. Member Data Documentation. ◆ fSepType. SeparationBase* TMVA::PDEFoamDecisionTree::fSepType. private . Definition at line 43 of file PDEFoamDecisionTree.h. Libraries for TMVA::PDEFoamDecisionTree:. [legend]; The documentation for this class",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamDecisionTree.html:22231,log,logic,22231,doc/master/classTMVA_1_1PDEFoamDecisionTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamDecisionTree.html,1,['log'],['logic']
Testability,". RooAbsOptTestStatistic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsOptTestStatistic. class RooAbsOptTestStatistic: public RooAbsTestStatistic. RooAbsOptTestStatistic is the abstract base class for test; statistics objects that evaluate a function or PDF at each point of a given; dataset. This class provides generic optimizations, such as; caching and precalculation of constant terms that can be made for; all such quantities; Implementations should define evaluatePartition(), which calculates the; value of a (sub)range of the dataset and optionally combinedValue(),; which combines the values calculated for each partition. If combinedValue(); is not overloaded, the default implementation will add the partition results; to obtain the combined result; Support for calculation in partitions is needed to allow multi-core; parallelized calculation of test statistics; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsOptTestStatistic(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsOptTestStatistic.html:401,test,test,401,root/html528/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html528/RooAbsOptTestStatistic.html,12,['test'],['test']
Testability,". RooAbsOptTestStatistic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsOptTestStatistic. class RooAbsOptTestStatistic: public RooAbsTestStatistic. RooAbsOptTestStatistic is the abstract base class for test; statistics objects that evaluate a function or PDF at each point of a given; dataset. This class provides generic optimizations, such as; caching and precalculation of constant terms that can be made for; all such quantities; Implementations should define evaluatePartition(), which calculates the; value of a (sub)range of the dataset and optionally combinedValue(),; which combines the values calculated for each partition. If combinedValue(); is not overloaded, the default implementation will add the partition results; to obtain the combined result; Support for calculation in partitions is needed to allow multi-core; parallelized calculation of test statistics; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsOptTestStatistic(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsOptTestStatistic.html:401,test,test,401,root/html526/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html526/RooAbsOptTestStatistic.html,2,['test'],['test']
Testability,". RooAbsTestStatistic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsTestStatistic. class RooAbsTestStatistic: public RooAbsReal. RooAbsTestStatistic is the abstract base class for all test; statistics. Test statistics that evaluate the PDF at each data; point should inherit from the RooAbsOptTestStatistic class which; implements several generic optimizations that can be done for such; quantities.; This test statistic base class organizes calculation of test; statistic values for RooSimultaneous PDF as a combination of test; statistic values for the PDF components of the simultaneous PDF and; organizes multi-processor parallel calculation of test statistic; values. For the latter, the test statistic value is calculated in; partitions in parallel executing processes and a posteriori; combined in the main thread.; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsTestStatistic(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsTestStatistic.html:384,test,test,384,root/html528/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html528/RooAbsTestStatistic.html,42,"['Test', 'test']","['Test', 'test']"
Testability,". RooAbsTestStatistic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsTestStatistic. class RooAbsTestStatistic: public RooAbsReal. RooAbsTestStatistic is the abstract base class for all test; statistics. Test statistics that evaluate the PDF at each data; point should inherit from the RooAbsOptTestStatistic class which; implements several generic optimizations that can be done for such; quantities.; This test statistic base class organizes calculation of test; statistic values for RooSimultaneous PDF as a combination of test; statistic values for the PDF components of the simultaneous PDF and; organizes multi-processor parallel calculation of test statistic; values. For the latter, the test statistic value is calculated in; partitions in parallel executing processes and a posteriori; combined in the main thread.; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsTestStatistic(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& par",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsTestStatistic.html:384,test,test,384,root/html526/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html526/RooAbsTestStatistic.html,7,"['Test', 'test']","['Test', 'test']"
Testability,". RooConstraintSum. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooConstraintSum. class RooConstraintSum: public RooAbsReal. RooConstraintSum calculates the sum of the -(log) likelihoods of; a set of RooAbsPfs that represent constraint functions. This class; is used to calculate the composite -log(L) of constraints to be; added the regular -log(L) in RooAbsPdf::fitTo() with Constrain(..); arguments; . Function Members (Methods); public:. RooConstraintSum(); RooConstraintSum(const RooConstraintSum& other, const char* name = 0); RooConstraintSum(const char* name, const char* title, const RooArgSet& constraintSet, const RooArgSet& paramSet); virtual~RooConstraintSum(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooConstraintSum.html:365,log,log,365,root/html528/RooConstraintSum.html,https://root.cern,https://root.cern/root/html528/RooConstraintSum.html,9,['log'],['log']
Testability,". RooConstraintSum. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooConstraintSum. class RooConstraintSum: public RooAbsReal. RooConstraintSum calculates the sum of the -(log) likelihoods of; a set of RooAbsPfs that represent constraint functions. This class; is used to calculate the composite -log(L) of constraints to be; added the regular -log(L) in RooAbsPdf::fitTo() with Constrain(..); arguments; . Function Members (Methods); public:. RooConstraintSum(); RooConstraintSum(const RooConstraintSum& other, const char* name = 0); RooConstraintSum(const char* name, const char* title, const RooArgSet& constraintSet, const RooArgSet& paramSet); virtual~RooConstraintSum(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooConstraintSum.html:365,log,log,365,root/html534/RooConstraintSum.html,https://root.cern,https://root.cern/root/html534/RooConstraintSum.html,3,['log'],['log']
Testability,". RooConstraintSum. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooConstraintSum. class RooConstraintSum: public RooAbsReal. RooConstraintSum calculates the sum of the -(log) likelihoods of; a set of RooAbsPfs that represent constraint functions. This class; is used to calculate the composite -log(L) of constraints to be; added the regular -log(L) in RooAbsPdf::fitTo() with Constrain(..); arguments; . Function Members (Methods); public:. RooConstraintSum(); RooConstraintSum(const RooConstraintSum& other, const char* name = 0); RooConstraintSum(const char* name, const char* title, const RooArgSet& constraintSet, const RooArgSet& paramSet); virtual~RooConstraintSum(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRoo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooConstraintSum.html:365,log,log,365,root/html526/RooConstraintSum.html,https://root.cern,https://root.cern/root/html526/RooConstraintSum.html,3,['log'],['log']
Testability,". RooConstraintSum. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooConstraintSum. class RooConstraintSum: public RooAbsReal. RooConstraintSum calculates the sum of the -(log) likelihoods of; a set of RooAbsPfs that represent constraint functions. This class; is used to calculate the composite -log(L) of constraints to be; added the regular -log(L) in RooAbsPdf::fitTo() with Constrain(..); arguments; . Function Members (Methods); public:. virtual~RooConstraintSum(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooConstraintSum.html:365,log,log,365,root/html602/RooConstraintSum.html,https://root.cern,https://root.cern/root/html602/RooConstraintSum.html,6,['log'],['log']
Testability,". RooDLLSignificanceMCSModule. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooDLLSignificanceMCSModule. class RooDLLSignificanceMCSModule: public RooAbsMCStudyModule. RooDLLSignificanceMCSModule is an add-on modules to RooMCStudy that; calculates the significance of a signal by comparing the likelihood of; a fit fit with a given parameter floating with a fit with that given; parameter fixed to a nominal value (usually zero). The difference in; the -log(L) of those two fits can be interpreted as the probability; that a statistical background fluctation may result in a signal as large; or larger than the signal observed. This interpretation is contingent; on underlying normal sampling distributions and a MC study is a good way; to test that assumption.; . Function Members (Methods); public:. RooDLLSignificanceMCSModule(const RooDLLSignificanceMCSModule& other); RooDLLSignificanceMCSModule(const RooRealVar& param, Double_t nullHypoValue = 0); RooDLLSignificanceMCSModule(const char* parName, Double_t nullHypoValue = 0); virtual~RooDLLSignificanceMCSModule(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tRooAbsMCStudyModule::doInitializeInstance(RooMCStudy&); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooDLLSignificanceMCSModule.html:648,log,log,648,root/html526/RooDLLSignificanceMCSModule.html,https://root.cern,https://root.cern/root/html526/RooDLLSignificanceMCSModule.html,10,"['log', 'test']","['log', 'test']"
Testability,". RooDLLSignificanceMCSModule. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooDLLSignificanceMCSModule. class RooDLLSignificanceMCSModule: public RooAbsMCStudyModule. RooDLLSignificanceMCSModule is an add-on modules to RooMCStudy that; calculates the significance of a signal by comparing the likelihood of; a fit fit with a given parameter floating with a fit with that given; parameter fixed to a nominal value (usually zero). The difference in; the -log(L) of those two fits can be interpreted as the probability; that a statistical background fluctation may result in a signal as large; or larger than the signal observed. This interpretation is contingent; on underlying normal sampling distributions and a MC study is a good way; to test that assumption.; . Function Members (Methods); public:. virtual~RooDLLSignificanceMCSModule(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tRooAbsMCStudyModule::doInitializeInstance(RooMCStudy&); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* param",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooDLLSignificanceMCSModule.html:648,log,log,648,root/html602/RooDLLSignificanceMCSModule.html,https://root.cern,https://root.cern/root/html602/RooDLLSignificanceMCSModule.html,4,"['log', 'test']","['log', 'test']"
Testability,". RooKeysPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooKeysPdf. class RooKeysPdf: public RooAbsPdf. Class RooKeysPdf implements a one-dimensional kernel estimation p.d.f which model the distribution; of an arbitrary input dataset as a superposition of Gaussian kernels, one for each data point,; each contributing 1/N to the total integral of the p.d.f.; ; If the 'adaptive mode' is enabled, the width of the Gaussian is adaptively calculated from the; local density of events, i.e. narrow for regions with high event density to preserve details and; wide for regions with log event density to promote smoothness. The details of the general algorithm; are described in the following paper: ; ; Cranmer KS, Kernel Estimation in High-Energy Physics. ; Computer Physics Communications 136:198-207,2001 - e-Print Archive: hep ex/0011057; . Function Members (Methods); public:. RooKeysPdf(); RooKeysPdf(const RooKeysPdf& other, const char* name = 0); RooKeysPdf(const char* name, const char* title, RooAbsReal& x, RooDataSet& data, RooKeysPdf::Mirror mirror = NoMirror, Double_t rho = 1); RooKeysPdf(const char* name, const char* title, RooAbsReal& x, RooRealVar& xdata, RooDataSet& data, RooKeysPdf::Mirror mirror = NoMirror, Double_t rho = 1); virtual~RooKeysPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tanalyticalIntegral(Int_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooKeysPdf.html:770,log,log,770,root/html534/RooKeysPdf.html,https://root.cern,https://root.cern/root/html534/RooKeysPdf.html,1,['log'],['log']
Testability,". RooKeysPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooKeysPdf. class RooKeysPdf: public RooAbsPdf. Class RooKeysPdf implements a one-dimensional kernel estimation p.d.f which model the distribution; of an arbitrary input dataset as a superposition of Gaussian kernels, one for each data point,; each contributing 1/N to the total integral of the p.d.f.; ; If the 'adaptive mode' is enabled, the width of the Gaussian is adaptively calculated from the; local density of events, i.e. narrow for regions with high event density to preserve details and; wide for regions with log event density to promote smoothness. The details of the general algorithm; are described in the following paper: ; ; Cranmer KS, Kernel Estimation in High-Energy Physics. ; Computer Physics Communications 136:198-207,2001 - e-Print Archive: hep ex/0011057; . Function Members (Methods); public:. RooKeysPdf(); RooKeysPdf(const RooKeysPdf& other, const char* name = 0); RooKeysPdf(const char* name, const char* title, RooAbsReal& x, RooDataSet& data, RooKeysPdf::Mirror mirror = NoMirror, Double_t rho = 1); virtual~RooKeysPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooKeysPdf.html:770,log,log,770,root/html528/RooKeysPdf.html,https://root.cern,https://root.cern/root/html528/RooKeysPdf.html,3,['log'],['log']
Testability,". RooKeysPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooKeysPdf. class RooKeysPdf: public RooAbsPdf. Class RooKeysPdf implements a one-dimensional kernel estimation p.d.f which model the distribution; of an arbitrary input dataset as a superposition of Gaussian kernels, one for each data point,; each contributing 1/N to the total integral of the p.d.f.; ; If the 'adaptive mode' is enabled, the width of the Gaussian is adaptively calculated from the; local density of events, i.e. narrow for regions with high event density to preserve details and; wide for regions with log event density to promote smoothness. The details of the general algorithm; are described in the following paper: ; ; Cranmer KS, Kernel Estimation in High-Energy Physics. ; Computer Physics Communications 136:198-207,2001 - e-Print Archive: hep ex/0011057; . Function Members (Methods); public:. RooKeysPdf(); RooKeysPdf(const RooKeysPdf& other, const char* name = 0); RooKeysPdf(const char* name, const char* title, RooAbsReal& x, RooDataSet& data, RooKeysPdf::Mirror mirror = NoMirror, Double_t rho = 1); virtual~RooKeysPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooKeysPdf.html:770,log,log,770,root/html526/RooKeysPdf.html,https://root.cern,https://root.cern/root/html526/RooKeysPdf.html,1,['log'],['log']
Testability,". RooKeysPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooKeysPdf. class RooKeysPdf: public RooAbsPdf. Class RooKeysPdf implements a one-dimensional kernel estimation p.d.f which model the distribution; of an arbitrary input dataset as a superposition of Gaussian kernels, one for each data point,; each contributing 1/N to the total integral of the p.d.f.; ; If the 'adaptive mode' is enabled, the width of the Gaussian is adaptively calculated from the; local density of events, i.e. narrow for regions with high event density to preserve details and; wide for regions with log event density to promote smoothness. The details of the general algorithm; are described in the following paper: ; ; Cranmer KS, Kernel Estimation in High-Energy Physics. ; Computer Physics Communications 136:198-207,2001 - e-Print Archive: hep ex/0011057; . Function Members (Methods); public:. virtual~RooKeysPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tanalyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachData",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooKeysPdf.html:770,log,log,770,root/html602/RooKeysPdf.html,https://root.cern,https://root.cern/root/html602/RooKeysPdf.html,2,['log'],['log']
Testability,". RooLognormal. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooLognormal. class RooLognormal: public RooAbsPdf. RooFit Lognormal PDF. The two parameters are:; - m0: the median of the distribution; - k=exp(sigma): sigma is called the shape parameter in the TMath parametrization; Lognormal(x,m0,k) = 1/(sqrt(2*pi)*ln(k)*x)*exp(-ln^2(x/m0)/(2*ln^2(k))); The parametrization here is physics driven and differs from the ROOT::Math::lognormal_pdf(x,m,s,x0) with:; - m = log(m0); - s = log(k); - x0 = 0; . Function Members (Methods); public:. RooLognormal(); RooLognormal(const RooLognormal& other, const char* name = 0); RooLognormal(const char* name, const char* title, RooAbsReal& _x, RooAbsReal& _m0, RooAbsReal& _k); virtual~RooLognormal(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tanalyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooLognormal.html:310,Log,Lognormal,310,root/html528/RooLognormal.html,https://root.cern,https://root.cern/root/html528/RooLognormal.html,12,"['Log', 'log']","['Lognormal', 'log']"
Testability,". RooLognormal. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooLognormal. class RooLognormal: public RooAbsPdf. RooFit Lognormal PDF. The two parameters are:; - m0: the median of the distribution; - k=exp(sigma): sigma is called the shape parameter in the TMath parametrization; Lognormal(x,m0,k) = 1/(sqrt(2*pi)*ln(k)*x)*exp(-ln^2(x/m0)/(2*ln^2(k))); The parametrization here is physics driven and differs from the ROOT::Math::lognormal_pdf(x,m,s,x0) with:; - m = log(m0); - s = log(k); - x0 = 0; . Function Members (Methods); public:. RooLognormal(); RooLognormal(const RooLognormal& other, const char* name = 0); RooLognormal(const char* name, const char* title, RooAbsReal& _x, RooAbsReal& _m0, RooAbsReal& _k); virtual~RooLognormal(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tanalyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooLognormal.html:310,Log,Lognormal,310,root/html534/RooLognormal.html,https://root.cern,https://root.cern/root/html534/RooLognormal.html,4,"['Log', 'log']","['Lognormal', 'log']"
Testability,". RooLognormal. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooLognormal. class RooLognormal: public RooAbsPdf. RooFit Lognormal PDF. The two parameters are:; - m0: the median of the distribution; - k=exp(sigma): sigma is called the shape parameter in the TMath parametrization; Lognormal(x,m0,k) = 1/(sqrt(2*pi)*ln(k)*x)*exp(-ln^2(x/m0)/(2*ln^2(k))); The parametrization here is physics driven and differs from the ROOT::Math::lognormal_pdf(x,m,s,x0) with:; - m = log(m0); - s = log(k); - x0 = 0; . Function Members (Methods); public:. virtual~RooLognormal(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tanalyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooLognormal.html:310,Log,Lognormal,310,root/html602/RooLognormal.html,https://root.cern,https://root.cern/root/html602/RooLognormal.html,8,"['Log', 'log']","['Lognormal', 'log']"
Testability,". RooMappedCategory::Entry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMappedCategory::Entry. class RooMappedCategory::Entry. Function Members (Methods); public:. virtual~Entry(); static TClass*Class(); RooMappedCategory::EntryEntry(); RooMappedCategory::EntryEntry(const RooMappedCategory::Entry& other); RooMappedCategory::EntryEntry(const char* exp, const RooCatType* cat); virtual TClass*IsA() const; Bool_tmatch(const char* testPattern) const; Bool_tok(); RooMappedCategory::Entry&operator=(const RooMappedCategory::Entry& other); const RooCatType&outCat() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. TStringmangle(const char* exp) const. Data Members; protected:. RooCatType_cat; TString_expr; TRegexp*_regexp!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMappedCategory::Entry& operator=(const RooMappedCategory::Entry& other). TString mangle(const char* exp) const; Mangle name : escape regexp character '+'. void Streamer(TBuffer& ). inline Entry(); {}. virtual ~Entry(); { delete _regexp ; }. Entry(const char* exp, const RooCatType* cat); {}. Entry(const RooMappedCategory::Entry& other); {}. Bool_t ok(); { return (_regexp->Status()==TRegexp::kOK) ; }. Bool_t match(const char* testPattern) const; { return (TString(testPattern).Index(*_regexp)>=0) ; }. const RooCatType& outCat() const; { return _cat ; }. » Last changed: Tue Jun 2 15:32:04 2015 » Last generated: 2015-06-02 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooMappedCategory__Entry.html:628,test,testPattern,628,root/html604/RooMappedCategory__Entry.html,https://root.cern,https://root.cern/root/html604/RooMappedCategory__Entry.html,3,['test'],['testPattern']
Testability,". RooMappedCategory::Entry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMappedCategory::Entry. class RooMappedCategory::Entry. Function Members (Methods); public:. virtual~Entry(); static TClass*Class(); RooMappedCategory::EntryEntry(); RooMappedCategory::EntryEntry(const RooMappedCategory::Entry& other); RooMappedCategory::EntryEntry(const char* exp, const RooCatType* cat); virtual TClass*IsA() const; Bool_tmatch(const char* testPattern) const; Bool_tok(); RooMappedCategory::Entry&operator=(const RooMappedCategory::Entry& other); const RooCatType&outCat() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. TStringmangle(const char* exp) const. Data Members; protected:. RooCatType_cat; TString_expr; TRegexp*_regexp!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMappedCategory::Entry& operator=(const RooMappedCategory::Entry& other). TString mangle(const char* exp) const; Mangle name : escape regexp character '+'. void Streamer(TBuffer& ). inline Entry(); {}. virtual ~Entry(); { delete _regexp ; }. Entry(const char* exp, const RooCatType* cat); {}. Entry(const RooMappedCategory::Entry& other); {}. Bool_t ok(); { return (_regexp->Status()==TRegexp::kOK) ; }. Bool_t match(const char* testPattern) const; { return (TString(testPattern).Index(*_regexp)>=0) ; }. const RooCatType& outCat() const; { return _cat ; }. » Last changed: Tue Jun 30 14:33:58 2015 » Last generated: 2015-06-30 14:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMappedCategory__Entry.html:628,test,testPattern,628,root/html602/RooMappedCategory__Entry.html,https://root.cern,https://root.cern/root/html602/RooMappedCategory__Entry.html,3,['test'],['testPattern']
Testability,". RooMappedCategory::Entry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMappedCategory::Entry. class RooMappedCategory::Entry. Function Members (Methods); public:. virtual~Entry(); static TClass*Class(); RooMappedCategory::EntryEntry(); RooMappedCategory::EntryEntry(const RooMappedCategory::Entry& other); RooMappedCategory::EntryEntry(const char* exp, const RooCatType* cat); virtual TClass*IsA() const; Bool_tmatch(const char* testPattern) const; Bool_tok(); RooMappedCategory::Entry&operator=(const RooMappedCategory::Entry& other); const RooCatType&outCat() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TStringmangle(const char* exp) const. Data Members; protected:. RooCatType_cat; TString_expr; TRegexp*_regexp!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMappedCategory::Entry& operator=(const RooMappedCategory::Entry& other). TString mangle(const char* exp) const; Mangle name : escape regexp character '+'. void Streamer(TBuffer& b). inline Entry(); {}. virtual ~Entry(); { delete _regexp ; }. Entry(const char* exp, const RooCatType* cat); {}. Entry(const RooMappedCategory::Entry& other); {}. Bool_t ok(); { return (_regexp->Status()==TRegexp::kOK) ; }. Bool_t match(const char* testPattern) const; { return (TString(testPattern).Index(*_regexp)>=0) ; }. const RooCatType& outCat() const; { return _cat ; }. » Last changed: Mon Jul 4 15:23:19 2011 » Last generated: 2011-07-04 15:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooMappedCategory__Entry.html:628,test,testPattern,628,root/html530/RooMappedCategory__Entry.html,https://root.cern,https://root.cern/root/html530/RooMappedCategory__Entry.html,3,['test'],['testPattern']
Testability,". RooMappedCategory::Entry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMappedCategory::Entry. class RooMappedCategory::Entry. Function Members (Methods); public:. virtual~Entry(); static TClass*Class(); RooMappedCategory::EntryEntry(); RooMappedCategory::EntryEntry(const RooMappedCategory::Entry& other); RooMappedCategory::EntryEntry(const char* exp, const RooCatType* cat); virtual TClass*IsA() const; Bool_tmatch(const char* testPattern) const; Bool_tok(); RooMappedCategory::Entry&operator=(const RooMappedCategory::Entry& other); const RooCatType&outCat() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TStringmangle(const char* exp) const. Data Members; protected:. RooCatType_cat; TString_expr; TRegexp*_regexp!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMappedCategory::Entry& operator=(const RooMappedCategory::Entry& other). TString mangle(const char* exp) const; Mangle name : escape regexp character '+'. void Streamer(TBuffer& b). inline Entry(); {}. virtual ~Entry(); { delete _regexp ; }. Entry(const char* exp, const RooCatType* cat); {}. Entry(const RooMappedCategory::Entry& other); {}. Bool_t ok(); { return (_regexp->Status()==TRegexp::kOK) ; }. Bool_t match(const char* testPattern) const; { return (TString(testPattern).Index(*_regexp)>=0) ; }. const RooCatType& outCat() const; { return _cat ; }. » Last changed: Thu Nov 3 20:08:36 2011 » Last generated: 2011-11-03 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMappedCategory__Entry.html:628,test,testPattern,628,root/html532/RooMappedCategory__Entry.html,https://root.cern,https://root.cern/root/html532/RooMappedCategory__Entry.html,3,['test'],['testPattern']
Testability,". RooMappedCategory::Entry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMappedCategory::Entry. class RooMappedCategory::Entry. Function Members (Methods); public:. virtual~Entry(); static TClass*Class(); RooMappedCategory::EntryEntry(); RooMappedCategory::EntryEntry(const RooMappedCategory::Entry& other); RooMappedCategory::EntryEntry(const char* exp, const RooCatType* cat); virtual TClass*IsA() const; Bool_tmatch(const char* testPattern) const; Bool_tok(); RooMappedCategory::Entry&operator=(const RooMappedCategory::Entry& other); const RooCatType&outCat() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TStringmangle(const char* exp) const. Data Members; protected:. RooCatType_cat; TString_expr; TRegexp*_regexp!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMappedCategory::Entry& operator=(const RooMappedCategory::Entry& other). TString mangle(const char* exp) const; Mangle name : escape regexp character '+'. void Streamer(TBuffer& b). inline Entry(); {}. virtual ~Entry(); { delete _regexp ; }. Entry(const char* exp, const RooCatType* cat); {}. Entry(const RooMappedCategory::Entry& other); {}. Bool_t ok(); { return (_regexp->Status()==TRegexp::kOK) ; }. Bool_t match(const char* testPattern) const; { return (TString(testPattern).Index(*_regexp)>=0) ; }. const RooCatType& outCat() const; { return _cat ; }. » Last changed: Thu Sep 23 20:00:08 2010 » Last generated: 2010-09-23 20:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMappedCategory__Entry.html:628,test,testPattern,628,root/html528/RooMappedCategory__Entry.html,https://root.cern,https://root.cern/root/html528/RooMappedCategory__Entry.html,3,['test'],['testPattern']
Testability,". RooMappedCategory::Entry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMappedCategory::Entry. class RooMappedCategory::Entry. Function Members (Methods); public:. virtual~Entry(); static TClass*Class(); RooMappedCategory::EntryEntry(); RooMappedCategory::EntryEntry(const RooMappedCategory::Entry& other); RooMappedCategory::EntryEntry(const char* exp, const RooCatType* cat); virtual TClass*IsA() const; Bool_tmatch(const char* testPattern) const; Bool_tok(); RooMappedCategory::Entry&operator=(const RooMappedCategory::Entry& other); const RooCatType&outCat() const; virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TStringmangle(const char* exp) const. Data Members; protected:. RooCatType_cat; TString_expr; TRegexp*_regexp!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMappedCategory::Entry& operator=(const RooMappedCategory::Entry& other). TString mangle(const char* exp) const; Mangle name : escape regexp character '+'. void Streamer(TBuffer& b). inline Entry(); {}. virtual ~Entry(); { delete _regexp ; }. Entry(const char* exp, const RooCatType* cat); {}. Entry(const RooMappedCategory::Entry& other); {}. Bool_t ok(); { return (_regexp->Status()==TRegexp::kOK) ; }. Bool_t match(const char* testPattern) const; { return (TString(testPattern).Index(*_regexp)>=0) ; }. const RooCatType& outCat() const; { return _cat ; }. » Last changed: Mon Dec 7 13:48:13 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMappedCategory__Entry.html:628,test,testPattern,628,root/html526/RooMappedCategory__Entry.html,https://root.cern,https://root.cern/root/html526/RooMappedCategory__Entry.html,3,['test'],['testPattern']
Testability,". RooMappedCategory::Entry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMappedCategory::Entry. class RooMappedCategory::Entry. Function Members (Methods); public:. virtual~Entry(); static TClass*Class(); RooMappedCategory::EntryEntry(); RooMappedCategory::EntryEntry(const RooMappedCategory::Entry& other); RooMappedCategory::EntryEntry(const char* exp, const RooCatType* cat); virtual TClass*IsA() const; Bool_tmatch(const char* testPattern) const; Bool_tok(); RooMappedCategory::Entry&operator=(const RooMappedCategory::Entry& other); const RooCatType&outCat() const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. TStringmangle(const char* exp) const. Data Members; protected:. RooCatType_cat; TString_expr; TRegexp*_regexp!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMappedCategory::Entry& operator=(const RooMappedCategory::Entry& other). TString mangle(const char* exp) const; Mangle name : escape regexp character '+'. void Streamer(TBuffer& ). inline Entry(); {}. virtual ~Entry(); { delete _regexp ; }. Entry(const char* exp, const RooCatType* cat); {}. Entry(const RooMappedCategory::Entry& other); {}. Bool_t ok(); { return (_regexp->Status()==TRegexp::kOK) ; }. Bool_t match(const char* testPattern) const; { return (TString(testPattern).Index(*_regexp)>=0) ; }. const RooCatType& outCat() const; { return _cat ; }. » Last changed: Tue Mar 10 17:17:48 2015 » Last generated: 2015-03-10 17:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMappedCategory__Entry.html:628,test,testPattern,628,root/html534/RooMappedCategory__Entry.html,https://root.cern,https://root.cern/root/html534/RooMappedCategory__Entry.html,3,['test'],['testPattern']
Testability,". RooMsgService & RooMsgService::instance ; (; ). static . Return reference to singleton instance. ; Definition at line 345 of file RooMsgService.cxx. ◆ IsA(). TClass * RooMsgService::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 246 of file RooMsgService.h. ◆ isActive(). template<class T > . bool RooMsgService::isActive ; (; T ; self, . RooFit::MsgTopic ; topic, . RooFit::MsgLevel ; level . ). inline . Check if logging is active for given object/topic/RooFit::MsgLevel combination. ; Definition at line 186 of file RooMsgService.h. ◆ log() [1/3]. ostream & RooMsgService::log ; (; const RooAbsArg * ; self, . RooFit::MsgLevel ; level, . RooFit::MsgTopic ; topic, . bool ; skipPrefix = false . ). Log error message associated with RooAbsArg object self at given level and topic. ; If skipPrefix is true the standard RooMsgService prefix is not added. ; Definition at line 419 of file RooMsgService.cxx. ◆ log() [2/3]. ostream & RooMsgService::log ; (; const TObject * ; self, . RooFit::MsgLevel ; level, . RooFit::MsgTopic ; topic, . bool ; skipPrefix = false . ). Log error message associated with TObject object self at given level and topic. ; If skipPrefix is true the standard RooMsgService prefix is not added. ; Definition at line 456 of file RooMsgService.cxx. ◆ log() [3/3]. std::ostream & RooMsgService::log ; (; std::nullptr_t ; , . RooFit::MsgLevel ; level, . RooFit::MsgTopic ; facility, . bool ; forceSkipPrefix = false . ). inline . Definition at line 180 of file RooMsgService.h. ◆ numStreams(). Int_t RooMsgService::numStreams ; (; ); const. inline . Definition at line 163 of file RooMsgService.h. ◆ Print(). void RooMsgService::Print ; (; Option_t * ; options = nullptr); const. overridevirtual . Print configuration of message service. ; If ""v"" option is given also inactive streams are listed ; Reimplemented from TObject.; Definition at line 486 of file RooMsgService.cxx. ◆ reset(). void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMsgService.html:20268,log,log,20268,doc/master/classRooMsgService.html,https://root.cern,https://root.cern/doc/master/classRooMsgService.html,1,['log'],['log']
Testability,". RooNDKeysPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooNDKeysPdf. class RooNDKeysPdf: public RooAbsPdf. Generic N-dimensional implementation of a kernel estimation p.d.f. This p.d.f. models the distribution; of an arbitrary input dataset as a superposition of Gaussian kernels, one for each data point,; each contributing 1/N to the total integral of the p.d.f.; ; If the 'adaptive mode' is enabled, the width of the Gaussian is adaptively calculated from the; local density of events, i.e. narrow for regions with high event density to preserve details and; wide for regions with log event density to promote smoothness. The details of the general algorithm; are described in the following paper: ; ; Cranmer KS, Kernel Estimation in High-Energy Physics. ; Computer Physics Communications 136:198-207,2001 - e-Print Archive: hep ex/0011057; ; For multi-dimensional datasets, the kernels are modeled by multidimensional Gaussians. The kernels are ; constructed such that they reflect the correlation coefficients between the observables; in the input dataset.; . Function Members (Methods); public:. RooNDKeysPdf(const RooNDKeysPdf& other, const char* name = 0); RooNDKeysPdf(const char* name, const char* title, const RooArgList& varList, RooDataSet& data, TString options = ""a"", Double_t rho = 1, Double_t nSigma = 3, Bool_t rotate = kTRUE); RooNDKeysPdf(const char* name, const char* title, RooAbsReal& x, RooDataSet& data, RooNDKeysPdf::Mirror mirror = NoMirror, Double_t rho = 1, Double_t nSigma = 3, Bool_t rotate = kTRUE); RooNDKeysPdf(const char* name, const char* title, RooAbsReal& x, RooAbsReal& y, RooDataSet& data, TString options = ""a"", Double_t rho = 1.0, Double_t nSigma = 3, Bool_t rotate = kTRUE); virtual~RooNDKeysPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNDKeysPdf.html:780,log,log,780,root/html526/RooNDKeysPdf.html,https://root.cern,https://root.cern/root/html526/RooNDKeysPdf.html,4,['log'],['log']
Testability,". RooNDKeysPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooNDKeysPdf. class RooNDKeysPdf: public RooAbsPdf. Generic N-dimensional implementation of a kernel estimation p.d.f. This p.d.f. models the distribution; of an arbitrary input dataset as a superposition of Gaussian kernels, one for each data point,; each contributing 1/N to the total integral of the p.d.f.; ; If the 'adaptive mode' is enabled, the width of the Gaussian is adaptively calculated from the; local density of events, i.e. narrow for regions with high event density to preserve details and; wide for regions with log event density to promote smoothness. The details of the general algorithm; are described in the following paper: ; ; Cranmer KS, Kernel Estimation in High-Energy Physics. ; Computer Physics Communications 136:198-207,2001 - e-Print Archive: hep ex/0011057; ; For multi-dimensional datasets, the kernels are modeled by multidimensional Gaussians. The kernels are ; constructed such that they reflect the correlation coefficients between the observables; in the input dataset.; . Function Members (Methods); public:. RooNDKeysPdf(const RooNDKeysPdf& other, const char* name = 0); RooNDKeysPdf(const char* name, const char* title, const RooArgList& varList, RooDataSet& data, TString options = ""a"", Double_t rho = 1, Double_t nSigma = 3, Bool_t rotate = kTRUE); RooNDKeysPdf(const char* name, const char* title, const RooArgList& varList, RooDataSet& data, const TVectorD& rho, TString options = ""a"", Double_t nSigma = 3, Bool_t rotate = kTRUE); RooNDKeysPdf(const char* name, const char* title, RooAbsReal& x, RooDataSet& data, RooNDKeysPdf::Mirror mirror = NoMirror, Double_t rho = 1, Double_t nSigma = 3, Bool_t rotate = kTRUE); RooNDKeysPdf(const char* name, const char* title, RooAbsReal& x, RooAbsReal& y, RooDataS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNDKeysPdf.html:780,log,log,780,root/html534/RooNDKeysPdf.html,https://root.cern,https://root.cern/root/html534/RooNDKeysPdf.html,1,['log'],['log']
Testability,". RooNDKeysPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooNDKeysPdf. class RooNDKeysPdf: public RooAbsPdf. Generic N-dimensional implementation of a kernel estimation p.d.f. This p.d.f. models the distribution; of an arbitrary input dataset as a superposition of Gaussian kernels, one for each data point,; each contributing 1/N to the total integral of the p.d.f.; ; If the 'adaptive mode' is enabled, the width of the Gaussian is adaptively calculated from the; local density of events, i.e. narrow for regions with high event density to preserve details and; wide for regions with log event density to promote smoothness. The details of the general algorithm; are described in the following paper: ; ; Cranmer KS, Kernel Estimation in High-Energy Physics. ; Computer Physics Communications 136:198-207,2001 - e-Print Archive: hep ex/0011057; ; For multi-dimensional datasets, the kernels are modeled by multidimensional Gaussians. The kernels are ; constructed such that they reflect the correlation coefficients between the observables; in the input dataset.; . Function Members (Methods); public:. virtual~RooNDKeysPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tanalyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNDKeysPdf.html:780,log,log,780,root/html602/RooNDKeysPdf.html,https://root.cern,https://root.cern/root/html602/RooNDKeysPdf.html,2,['log'],['log']
Testability,". RooNLLVar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooNLLVar. class RooNLLVar: public RooAbsOptTestStatistic. Class RooNLLVar implements a a -log(likelihood) calculation from a dataset; and a PDF. The NLL is calculated as ; ; Sum[data] -log( pdf(x_data) ); ; In extended mode, a (Nexpect - Nobserved*log(NExpected) term is added; . Function Members (Methods); public:. RooNLLVar(); RooNLLVar(const RooNLLVar& other, const char* name = 0); RooNLLVar(const char* name, const char* title, RooAbsPdf& pdf, RooAbsData& data, Bool_t extended = kFALSE, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitRange = kFALSE, Bool_t cloneData = kTRUE); RooNLLVar(const char* name, const char* title, RooAbsPdf& pdf, RooAbsData& data, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none(), const RooCmdArg& arg9 = RooCmdArg::none()); RooNLLVar(const char* name, const char* title, RooAbsPdf& pdf, RooAbsData& data, const RooArgSet& projDeps, Bool_t extended = kFALSE, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitRange = kFALSE, Bool_t cloneData = kTRUE); virtual~RooNLLVar(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNLLVar.html:343,log,log,343,root/html526/RooNLLVar.html,https://root.cern,https://root.cern/root/html526/RooNLLVar.html,12,['log'],['log']
Testability,". RooNLLVar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooNLLVar. class RooNLLVar: public RooAbsOptTestStatistic. Class RooNLLVar implements a a -log(likelihood) calculation from a dataset; and a PDF. The NLL is calculated as ; ; Sum[data] -log( pdf(x_data) ); ; In extended mode, a (Nexpect - Nobserved*log(NExpected) term is added; . Function Members (Methods); public:. RooNLLVar(); RooNLLVar(const RooNLLVar& other, const char* name = 0); RooNLLVar(const char* name, const char* title, RooAbsPdf& pdf, RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none(), const RooCmdArg& arg9 = RooCmdArg::none()); RooNLLVar(const char* name, const char* title, RooAbsPdf& pdf, RooAbsData& data, Bool_t extended, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, RooFit::MPSplit interleave = RooFit::BulkPartition, Bool_t verbose = kTRUE, Bool_t splitRange = kFALSE, Bool_t cloneData = kTRUE, Bool_t binnedL = kFALSE); RooNLLVar(const char* name, const char* title, RooAbsPdf& pdf, RooAbsData& data, const RooArgSet& projDeps, Bool_t extended = kFALSE, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, RooFit::MPSplit interleave = RooFit::BulkPartition, Bool_t verbose = kTRUE, Bool_t splitRange = kFALSE, Bool_t cloneData = kTRUE, Bool_t binnedL = kFALSE); virtual~RooNLLVar(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNLLVar.html:343,log,log,343,root/html534/RooNLLVar.html,https://root.cern,https://root.cern/root/html534/RooNLLVar.html,3,['log'],['log']
Testability,". RooNLLVar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooNLLVar. class RooNLLVar: public RooAbsOptTestStatistic. Class RooNLLVar implements a a -log(likelihood) calculation from a dataset; and a PDF. The NLL is calculated as ; ; Sum[data] -log( pdf(x_data) ); ; In extended mode, a (Nexpect - Nobserved*log(NExpected) term is added; . Function Members (Methods); public:. virtual~RooNLLVar(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); voidapplyWeightSquared(Bool_t flag); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNLLVar.html:343,log,log,343,root/html602/RooNLLVar.html,https://root.cern,https://root.cern/root/html602/RooNLLVar.html,6,['log'],['log']
Testability,". RooNonCentralChiSquare. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooNonCentralChiSquare. class RooNonCentralChiSquare: public RooAbsPdf. The PDF of the Non-Central Chi Square distribution for n degrees of freedom. ; It is the asymptotic distribution of the profile likeihood ratio test q_mu ; when a different mu' is true. It is Wald's generalization of Wilks' Theorem.; See:; Asymptotic formulae for likelihood-based tests of new physics; By Glen Cowan, Kyle Cranmer, Eilam Gross, Ofer Vitells; http://arXiv.org/abs/arXiv:1007.1727; Wikipedia:; http://en.wikipedia.org/wiki/Noncentral_chi-square_distribution#Approximation; It requires MathMore to evaluate for non-integer degrees of freedom, k.; When the Mathmore library is available we can use the MathMore libraries impelmented using GSL. ; It makes use of the modified Bessel function of the first kind (for k > 2). For k < 2 it uses ; the hypergeometric function 0F1. ; When is not available we use explicit summation of normal chi-squared distributions; The usage of the sum can be forced by calling SetForceSum(true);; This implementation could be improved. BOOST has a nice implementation:; http://live.boost.org/doc/libs/1_42_0/libs/math/doc/sf_and_dist/html/math_toolkit/dist/dist_ref/dists/nc_chi_squared_dist.html; http://wesnoth.repositoryhosting.com/trac/wesnoth_wesnoth/browser/trunk/include/boost/math/distributions/non_central_chi_squared.hpp?rev=6; . Function Members (Methods); public:. RooNonCentralChiSquare(); RooNonCentralChiSquare(const RooNonCentralChiSquare& other, const char* name = 0); RooNonCentralChiSquare(const char* name, const char* title, RooAbsReal& _x, RooAbsReal& _k, RooAbsReal& _lambda); virtual~RooNonCentralChiSquare(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNonCentralChiSquare.html:477,test,test,477,root/html528/RooNonCentralChiSquare.html,https://root.cern,https://root.cern/root/html528/RooNonCentralChiSquare.html,8,['test'],"['test', 'tests']"
Testability,". RooNonCentralChiSquare. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFIT; » RooNonCentralChiSquare. class RooNonCentralChiSquare: public RooAbsPdf. The PDF of the Non-Central Chi Square distribution for n degrees of freedom. ; It is the asymptotic distribution of the profile likeihood ratio test q_mu ; when a different mu' is true. It is Wald's generalization of Wilks' Theorem.; See:; Asymptotic formulae for likelihood-based tests of new physics; By Glen Cowan, Kyle Cranmer, Eilam Gross, Ofer Vitells; http://arXiv.org/abs/arXiv:1007.1727; Wikipedia:; http://en.wikipedia.org/wiki/Noncentral_chi-square_distribution#Approximation; It requires MathMore to evaluate for non-integer degrees of freedom, k.; When the Mathmore library is available we can use the MathMore libraries impelmented using GSL. ; It makes use of the modified Bessel function of the first kind (for k > 2). For k < 2 it uses ; the hypergeometric function 0F1. ; When is not available we use explicit summation of normal chi-squared distributions; The usage of the sum can be forced by calling SetForceSum(true);; This implementation could be improved. BOOST has a nice implementation:; http://live.boost.org/doc/libs/1_42_0/libs/math/doc/sf_and_dist/html/math_toolkit/dist/dist_ref/dists/nc_chi_squared_dist.html; http://wesnoth.repositoryhosting.com/trac/wesnoth_wesnoth/browser/trunk/include/boost/math/distributions/non_central_chi_squared.hpp?rev=6; . Function Members (Methods); public:. virtual~RooNonCentralChiSquare(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shap",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNonCentralChiSquare.html:477,test,test,477,root/html602/RooNonCentralChiSquare.html,https://root.cern,https://root.cern/root/html602/RooNonCentralChiSquare.html,4,['test'],"['test', 'tests']"
Testability,". RooProfileLL. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooProfileLL. class RooProfileLL: public RooAbsReal. Class RooProfileLL implements the profile likelihood estimator for; a given likelihood and set of parameters of interest. The value return by ; RooProfileLL is the input likelihood nll minimized w.r.t all nuisance parameters; (which are all parameters except for those listed in the constructor) minus; the -log(L) of the best fit. Note that this function is slow to evaluate; as a MIGRAD minimization step is executed for each function evaluation; . Function Members (Methods); public:. RooProfileLL(); RooProfileLL(const RooProfileLL& other, const char* name = 0); RooProfileLL(const char* name, const char* title, RooAbsReal& nll, const RooArgSet& observables); virtual~RooProfileLL(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; Bool_talwaysStartFromMin() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProfileLL.html:616,log,log,616,root/html528/RooProfileLL.html,https://root.cern,https://root.cern/root/html528/RooProfileLL.html,4,['log'],['log']
Testability,". RooProfileLL. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooProfileLL. class RooProfileLL: public RooAbsReal. Class RooProfileLL implements the profile likelihood estimator for; a given likelihood and set of parameters of interest. The value return by ; RooProfileLL is the input likelihood nll minimized w.r.t all nuisance parameters; (which are all parameters except for those listed in the constructor) minus; the -log(L) of the best fit. Note that this function is slow to evaluate; as a MIGRAD minimization step is executed for each function evaluation; . Function Members (Methods); public:. RooProfileLL(const RooProfileLL& other, const char* name = 0); RooProfileLL(const char* name, const char* title, RooAbsReal& nll, const RooArgSet& observables); virtual~RooProfileLL(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); Bool_talwaysStartFromMin() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProfileLL.html:616,log,log,616,root/html526/RooProfileLL.html,https://root.cern,https://root.cern/root/html526/RooProfileLL.html,1,['log'],['log']
Testability,". RooProfileLL. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooProfileLL. class RooProfileLL: public RooAbsReal. Class RooProfileLL implements the profile likelihood estimator for; a given likelihood and set of parameters of interest. The value return by ; RooProfileLL is the input likelihood nll minimized w.r.t all nuisance parameters; (which are all parameters except for those listed in the constructor) minus; the -log(L) of the best fit. Note that this function is slow to evaluate; as a MIGRAD minimization step is executed for each function evaluation; . Function Members (Methods); public:. virtual~RooProfileLL(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; Bool_talwaysStartFromMin() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; const RooArgSet&bestFitObs() const; const RooArgSet&bestFitParams() const; virtual list<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooProfileLL.html:616,log,log,616,root/html602/RooProfileLL.html,https://root.cern,https://root.cern/root/html602/RooProfileLL.html,2,['log'],['log']
Testability,". RooRealIntegral. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealIntegral. class RooRealIntegral: public RooAbsReal. RooRealIntegral performs hybrid numerical/analytical integrals of RooAbsReal objects; The class performs none of the actual integration, but only manages the logic; of what variables can be integrated analytically, accounts for eventual jacobian; terms and defines what numerical integrations needs to be done to complement the; analytical integral.; ; The actual analytical integrations (if any) are done in the PDF themselves, the numerical; integration is performed in the various implemenations of the RooAbsIntegrator base class.; . Function Members (Methods); public:. RooRealIntegral(); RooRealIntegral(const RooRealIntegral& other, const char* name = 0); RooRealIntegral(const char* name, const char* title, const RooAbsReal& function, const RooArgSet& depList, const RooArgSet* funcNormSet = 0, const RooNumIntConfig* config = 0, const char* rangeName = 0); virtual~RooRealIntegral(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const RooArgSet&anaIntVars() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRealIntegral.html:475,log,logic,475,root/html526/RooRealIntegral.html,https://root.cern,https://root.cern/root/html526/RooRealIntegral.html,1,['log'],['logic']
Testability,". RooRealIntegral. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealIntegral. class RooRealIntegral: public RooAbsReal. RooRealIntegral performs hybrid numerical/analytical integrals of RooAbsReal objects; The class performs none of the actual integration, but only manages the logic; of what variables can be integrated analytically, accounts for eventual jacobian; terms and defines what numerical integrations needs to be done to complement the; analytical integral.; ; The actual analytical integrations (if any) are done in the PDF themselves, the numerical; integration is performed in the various implemenations of the RooAbsIntegrator base class.; . Function Members (Methods); public:. RooRealIntegral(); RooRealIntegral(const RooRealIntegral& other, const char* name = 0); RooRealIntegral(const char* name, const char* title, const RooAbsReal& function, const RooArgSet& depList, const RooArgSet* funcNormSet = 0, const RooNumIntConfig* config = 0, const char* rangeName = 0); virtual~RooRealIntegral(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; const RooArgSet&anaIntVars() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooRealIntegral.html:475,log,logic,475,root/html528/RooRealIntegral.html,https://root.cern,https://root.cern/root/html528/RooRealIntegral.html,4,['log'],['logic']
Testability,". RooRealIntegral. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealIntegral. class RooRealIntegral: public RooAbsReal. RooRealIntegral performs hybrid numerical/analytical integrals of RooAbsReal objects; The class performs none of the actual integration, but only manages the logic; of what variables can be integrated analytically, accounts for eventual jacobian; terms and defines what numerical integrations needs to be done to complement the; analytical integral.; ; The actual analytical integrations (if any) are done in the PDF themselves, the numerical; integration is performed in the various implemenations of the RooAbsIntegrator base class.; . Function Members (Methods); public:. virtual~RooRealIntegral(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; const RooArgSet&anaIntVars() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attribu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooRealIntegral.html:475,log,logic,475,root/html602/RooRealIntegral.html,https://root.cern,https://root.cern/root/html602/RooRealIntegral.html,2,['log'],['logic']
Testability,". RooRefArray. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRefArray. class RooRefArray: public TObjArray. RooAbsArg is the common abstract base class for objects that; represent a value (of arbitrary type) and ""shape"" that in general; depends on (is a client of) other RooAbsArg subclasses. The only; state information about a value that is maintained in this base; class consists of named attributes and flags that track when either; the value or the shape of this object changes. The meaning of shape; depends on the client implementation but could be, for example, the; allowed range of a value. The base class is also responsible for; managing client/server links and propagating value/shape changes; through an expression tree. RooAbsArg implements public interfaces; for inspecting client/server relationships and; setting/clearing/testing named attributes.; . Function Members (Methods); public:. virtual~RooRefArray(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObjArray::Add(TObject* obj); virtual voidTObjArray::AddAfter(const TObject* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidTObjArray::AddAt(TObject* obj, Int_t idx); virtual voidTObjArray::AddAtAndExpand(TObject* obj, Int_t idx); virtual Int_tTObjArray::AddAtFree(TObject* obj); virtual voidTObjArray::AddBefore(const TObject* before, TObject* obj); virtual voidTObjArray::AddFirst(TObject* obj); virtual voidTObjArray::AddLast(TObject* obj); voidTCollection::AddVector(TObject* obj1); virtual TObject*TObjArray::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TObjArray::At(Int_t idx) const; virtual TObject*TObjArray::Before(const TObject* obj) const; TIte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooRefArray.html:1036,test,testing,1036,root/html602/RooRefArray.html,https://root.cern,https://root.cern/root/html602/RooRefArray.html,2,['test'],['testing']
Testability,". RooStats::DebuggingSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::DebuggingSampler. class RooStats::DebuggingSampler: public RooStats::TestStatSampler. DebuggingSampler is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingSampler(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Double_tEvaluateTestStatistic(RooAbsData&, RooArgSet&); virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& paramsOfInterest); virtual const RooAbsArg*GetTestStatistic() const; virtual voidInitialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; RooStats::DebuggingSampler&operator=(const RooStats::DebuggingSampler&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetNuisanceParameters(RooArgSet&); virtual voidRooStats::TestStatSampler::SetObservables(RooArgSet&); virtual voidSetParameters(RooArgSet&); virtual voidSetPdf(RooAbsPdf&); virtual voidSetTestSize(Double_t size); virtual voidSetTestStatistic(RooAbsArg&) const; virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. TRandom*fRand; Double_tfSize; RooRealVar*fTestStatistic. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~DebuggingSampler(). SamplingDistribution* GetSamplingDistribution(RooArgSet& paramsOfInterest); Main interface to get a ConfInterva",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__DebuggingSampler.html:320,Test,TestStatSampler,320,root/html526/RooStats__DebuggingSampler.html,https://root.cern,https://root.cern/root/html526/RooStats__DebuggingSampler.html,2,"['Test', 'test']","['TestStatSampler', 'tests']"
Testability,". RooStats::DebuggingSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::DebuggingSampler. class RooStats::DebuggingSampler: public RooStats::TestStatSampler. DebuggingSampler is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingSampler(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Double_tEvaluateTestStatistic(RooAbsData&, RooArgSet&); virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& paramsOfInterest); virtual RooStats::TestStatistic*GetTestStatistic() const; virtual voidInitialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; RooStats::DebuggingSampler&operator=(const RooStats::DebuggingSampler&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetGlobalObservables(const RooArgSet&); virtual voidSetNuisanceParameters(const RooArgSet&); virtual voidRooStats::TestStatSampler::SetObservables(const RooArgSet&); virtual voidSetParameters(RooArgSet&); virtual voidSetParametersForTestStat(const RooArgSet&); virtual voidSetPdf(RooAbsPdf&); virtual voidRooStats::TestStatSampler::SetPriorNuisance(RooAbsPdf*); virtual voidRooStats::TestStatSampler::SetSamplingDistName(const char* name); virtual voidSetTestSize(Double_t size); virtual voidSetTestStatistic(RooStats::TestStatistic*); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. TRandom*fRand; Double_tfSize;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__DebuggingSampler.html:310,Test,TestStatSampler,310,root/html528/RooStats__DebuggingSampler.html,https://root.cern,https://root.cern/root/html528/RooStats__DebuggingSampler.html,2,"['Test', 'test']","['TestStatSampler', 'tests']"
Testability,". RooStats::DebuggingSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::DebuggingSampler. class RooStats::DebuggingSampler: public RooStats::TestStatSampler. DebuggingSampler is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingSampler(); static TClass*Class(); virtual Double_tConfidenceLevel() const; RooStats::DebuggingSamplerDebuggingSampler(); RooStats::DebuggingSamplerDebuggingSampler(const RooStats::DebuggingSampler&); virtual Double_tEvaluateTestStatistic(RooAbsData&, RooArgSet&); virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& paramsOfInterest); virtual RooStats::TestStatistic*GetTestStatistic() const; virtual voidInitialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; RooStats::DebuggingSampler&operator=(const RooStats::DebuggingSampler&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetGlobalObservables(const RooArgSet&); virtual voidSetNuisanceParameters(const RooArgSet&); virtual voidRooStats::TestStatSampler::SetObservables(const RooArgSet&); virtual voidSetParameters(RooArgSet&); virtual voidSetParametersForTestStat(const RooArgSet&); virtual voidSetPdf(RooAbsPdf&); virtual voidRooStats::TestStatSampler::SetPriorNuisance(RooAbsPdf*); virtual voidRooStats::TestStatSampler::SetSamplingDistName(const char* name); virtual voidSetTestSize(Double_t size); virtual voidSetTestStatistic(RooStats::TestStatistic*); virtual voidShowMembers(TMemberIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__DebuggingSampler.html:322,Test,TestStatSampler,322,root/html602/RooStats__DebuggingSampler.html,https://root.cern,https://root.cern/root/html602/RooStats__DebuggingSampler.html,4,"['Test', 'test']","['TestStatSampler', 'tests']"
Testability,". RooStats::DebuggingSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::DebuggingSampler. class RooStats::DebuggingSampler: public RooStats::TestStatSampler. DebuggingSampler is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingSampler(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Double_tEvaluateTestStatistic(RooAbsData&, RooArgSet&); virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& paramsOfInterest); virtual RooStats::TestStatistic*GetTestStatistic() const; virtual voidInitialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; RooStats::DebuggingSampler&operator=(const RooStats::DebuggingSampler&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetGlobalObservables(const RooArgSet&); virtual voidSetNuisanceParameters(const RooArgSet&); virtual voidRooStats::TestStatSampler::SetObservables(const RooArgSet&); virtual voidSetParameters(RooArgSet&); virtual voidSetParametersForTestStat(const RooArgSet&); virtual voidSetPdf(RooAbsPdf&); virtual voidRooStats::TestStatSampler::SetPriorNuisance(RooAbsPdf*); virtual voidRooStats::TestStatSampler::SetSamplingDistName(const char* name); virtual voidSetTestSize(Double_t size); virtual voidSetTestStatistic(RooStats::TestStatistic*); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. TRandom*fRand; Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__DebuggingSampler.html:322,Test,TestStatSampler,322,root/html530/RooStats__DebuggingSampler.html,https://root.cern,https://root.cern/root/html530/RooStats__DebuggingSampler.html,4,"['Test', 'test']","['TestStatSampler', 'tests']"
Testability,". RooStats::DebuggingSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::DebuggingSampler. class RooStats::DebuggingSampler: public RooStats::TestStatSampler. DebuggingSampler is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingSampler(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Double_tEvaluateTestStatistic(RooAbsData&, RooArgSet&); virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& paramsOfInterest); virtual RooStats::TestStatistic*GetTestStatistic() const; virtual voidInitialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; RooStats::DebuggingSampler&operator=(const RooStats::DebuggingSampler&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetGlobalObservables(const RooArgSet&); virtual voidSetNuisanceParameters(const RooArgSet&); virtual voidRooStats::TestStatSampler::SetObservables(const RooArgSet&); virtual voidSetParameters(RooArgSet&); virtual voidSetParametersForTestStat(const RooArgSet&); virtual voidSetPdf(RooAbsPdf&); virtual voidRooStats::TestStatSampler::SetPriorNuisance(RooAbsPdf*); virtual voidRooStats::TestStatSampler::SetSamplingDistName(const char* name); virtual voidSetTestSize(Double_t size); virtual voidSetTestStatistic(RooStats::TestStatistic*); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__DebuggingSampler.html:322,Test,TestStatSampler,322,root/html534/RooStats__DebuggingSampler.html,https://root.cern,https://root.cern/root/html534/RooStats__DebuggingSampler.html,2,"['Test', 'test']","['TestStatSampler', 'tests']"
Testability,". RooStats::DebuggingTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::DebuggingTestStat. class RooStats::DebuggingTestStat: public RooStats::TestStatistic. DebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData&, RooArgSet&); virtual const RooAbsArg*GetTestStatistic() const; virtual const TStringRooStats::TestStatistic::GetVarName() const; virtual TClass*IsA() const; RooStats::DebuggingTestStat&operator=(const RooStats::DebuggingTestStat&); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. TRandom*fRand; RooRealVar*fTestStatistic. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~DebuggingTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& , RooArgSet& ); Main interface to evaluate the test statistic on a dataset. const RooAbsArg* GetTestStatistic() const; Get the TestStatistic. {return fTestStatistic;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: DebuggingTestStat.h 31276 2009-11-18 15:06:42Z moneta $ » Last generated: 2009-12-07 13:49; This page has been automatically generated. For comments or suggestions regarding ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__DebuggingTestStat.html:323,Test,TestStatistic,323,root/html526/RooStats__DebuggingTestStat.html,https://root.cern,https://root.cern/root/html526/RooStats__DebuggingTestStat.html,2,"['Test', 'test']","['TestStatistic', 'tests']"
Testability,". RooStats::DebuggingTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::DebuggingTestStat. class RooStats::DebuggingTestStat: public RooStats::TestStatistic. DebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData&, RooArgSet&); virtual const TStringRooStats::TestStatistic::GetVarName() const; virtual TClass*IsA() const; RooStats::DebuggingTestStat&operator=(const RooStats::DebuggingTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. TRandom*fRand; RooRealVar*fTestStatistic. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~DebuggingTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& , RooArgSet& ); Main interface to evaluate the test statistic on a dataset. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: DebuggingTestStat.h 34109 2010-06-24 15:00:16Z moneta $ » Last generated: 2010-11-25 07:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__DebuggingTestStat.html:313,Test,TestStatistic,313,root/html528/RooStats__DebuggingTestStat.html,https://root.cern,https://root.cern/root/html528/RooStats__DebuggingTestStat.html,5,"['Test', 'test']","['TestStatistic', 'test', 'tests']"
Testability,". RooStats::DebuggingTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::DebuggingTestStat. class RooStats::DebuggingTestStat: public RooStats::TestStatistic. DebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingTestStat(); static TClass*Class(); RooStats::DebuggingTestStatDebuggingTestStat(); RooStats::DebuggingTestStatDebuggingTestStat(const RooStats::DebuggingTestStat&); virtual Double_tEvaluate(RooAbsData&, RooArgSet&); virtual const RooArgSet*RooStats::TestStatistic::GetDetailedOutput() const; virtual const TStringRooStats::TestStatistic::GetVarName() const; virtual TClass*IsA() const; RooStats::DebuggingTestStat&operator=(const RooStats::DebuggingTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(const RooStats::TestStatistic&). Data Members; private:. TRandom*fRand; RooRealVar*fTestStatistic. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; DebuggingTestStat(). virtual ~DebuggingTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& , RooArgSet& ); Main interface to evaluate the test statistic on a dataset. » Author: Kyle ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__DebuggingTestStat.html:325,Test,TestStatistic,325,root/html602/RooStats__DebuggingTestStat.html,https://root.cern,https://root.cern/root/html602/RooStats__DebuggingTestStat.html,4,"['Test', 'test']","['TestStatistic', 'tests']"
Testability,". RooStats::DebuggingTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::DebuggingTestStat. class RooStats::DebuggingTestStat: public RooStats::TestStatistic. DebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData&, RooArgSet&); virtual const RooArgSet*RooStats::TestStatistic::GetDetailedOutput() const; virtual const TStringRooStats::TestStatistic::GetVarName() const; virtual TClass*IsA() const; RooStats::DebuggingTestStat&operator=(const RooStats::DebuggingTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:. TRandom*fRand; RooRealVar*fTestStatistic. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~DebuggingTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& , RooArgSet& ); Main interface to evaluate the test statistic on a dataset. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__DebuggingTestStat.html:325,Test,TestStatistic,325,root/html534/RooStats__DebuggingTestStat.html,https://root.cern,https://root.cern/root/html534/RooStats__DebuggingTestStat.html,2,"['Test', 'test']","['TestStatistic', 'tests']"
Testability,". RooStats::DebuggingTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::DebuggingTestStat. class RooStats::DebuggingTestStat: public RooStats::TestStatistic. DebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData&, RooArgSet&); virtual const TStringRooStats::TestStatistic::GetVarName() const; virtual TClass*IsA() const; RooStats::DebuggingTestStat&operator=(const RooStats::DebuggingTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. TRandom*fRand; RooRealVar*fTestStatistic. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~DebuggingTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& , RooArgSet& ); Main interface to evaluate the test statistic on a dataset. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: DebuggingTestStat.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__DebuggingTestStat.html:325,Test,TestStatistic,325,root/html530/RooStats__DebuggingTestStat.html,https://root.cern,https://root.cern/root/html530/RooStats__DebuggingTestStat.html,5,"['Test', 'test']","['TestStatistic', 'test', 'tests']"
Testability,". RooStats::DebuggingTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::DebuggingTestStat. class RooStats::DebuggingTestStat: public RooStats::TestStatistic. DebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging.; The sampling distribution is uniformly random between [0,1] and is INDEPENDENT of the data. So it is not useful; for true statistical tests, but it is useful for debugging. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DebuggingTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData&, RooArgSet&); virtual const TStringRooStats::TestStatistic::GetVarName() const; virtual TClass*IsA() const; RooStats::DebuggingTestStat&operator=(const RooStats::DebuggingTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. TRandom*fRand; RooRealVar*fTestStatistic. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~DebuggingTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& , RooArgSet& ); Main interface to evaluate the test statistic on a dataset. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: DebuggingTestStat.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-11-03 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__DebuggingTestStat.html:325,Test,TestStatistic,325,root/html532/RooStats__DebuggingTestStat.html,https://root.cern,https://root.cern/root/html532/RooStats__DebuggingTestStat.html,5,"['Test', 'test']","['TestStatistic', 'test', 'tests']"
Testability,". RooStats::FeldmanCousins. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::FeldmanCousins. class RooStats::FeldmanCousins: public RooStats::IntervalCalculator, public TNamed. The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a specific configuration; of the more general NeymanConstruction. It is a concrete implementation of the IntervalCalculator interface that, which uses the NeymanConstruction in a particular way. As the name suggests, it returns a ConfidenceInterval. In particular, it produces a RooStats::PointSetInterval, which is a concrete implementation of the ConfInterval interface. . The Neyman Construction is not a uniquely defined statistical technique, it requires that one specify an ordering rule ; or ordering principle, which is usually incoded by choosing a specific test statistic and limits of integration ; (corresponding to upper/lower/central limits). As a result, this class must be configured with the corresponding; information before it can produce an interval. . In the case of the Feldman-Cousins approach, the ordering principle is the likelihood ratio -- motivated; by the Neyman-Pearson lemma. When nuisance parameters are involved, the profile likelihood ratio is the natural generalization. One may either choose to perform the construction over the full space of the nuisance parameters, or restrict the nusiance parameters to their conditional MLE (eg. profiled values). . Function Members (Methods); public:. virtual~FeldmanCousins(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__FeldmanCousins.html:1019,test,test,1019,root/html526/RooStats__FeldmanCousins.html,https://root.cern,https://root.cern/root/html526/RooStats__FeldmanCousins.html,1,['test'],['test']
Testability,". RooStats::FeldmanCousins. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::FeldmanCousins. class RooStats::FeldmanCousins: public RooStats::IntervalCalculator. The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a specific configuration; of the more general NeymanConstruction. It is a concrete implementation of the IntervalCalculator interface that, which uses the NeymanConstruction in a particular way. As the name suggests, it returns a ConfidenceInterval. In particular, it produces a RooStats::PointSetInterval, which is a concrete implementation of the ConfInterval interface. . The Neyman Construction is not a uniquely defined statistical technique, it requires that one specify an ordering rule ; or ordering principle, which is usually incoded by choosing a specific test statistic and limits of integration ; (corresponding to upper/lower/central limits). As a result, this class must be configured with the corresponding; information before it can produce an interval. . In the case of the Feldman-Cousins approach, the ordering principle is the likelihood ratio -- motivated; by the Neyman-Pearson lemma. When nuisance parameters are involved, the profile likelihood ratio is the natural generalization. One may either choose to perform the construction over the full space of the nuisance parameters, or restrict the nusiance parameters to their conditional MLE (eg. profiled values). . Function Members (Methods); public:. virtual~FeldmanCousins(); voidAdditionalNToysFactor(double fact); static TClass*Class(); virtual Double_tConfidenceLevel() const; voidCreateConfBelt(bool flag = true); RooStats::FeldmanCousinsFeldmanCousins(const RooStats::FeldmanCousins&); RooStats::FeldmanCousinsFeldmanCousins(RooAbsData& data, RooStats::ModelConfig& model); voidFlu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__FeldmanCousins.html:1004,test,test,1004,root/html528/RooStats__FeldmanCousins.html,https://root.cern,https://root.cern/root/html528/RooStats__FeldmanCousins.html,6,['test'],['test']
Testability,". RooStats::HistFactory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » ROOFIT; » HISTFACTORY; » RooStats::HistFactory. namespace RooStats::HistFactory. Function Members (Methods); public:. stringchannelNameFromPdf(RooAbsPdf* channelPdf); voidFactorizeHistFactoryPdf(const RooArgSet&, RooAbsPdf&, RooArgList&, RooArgList&); voidFitModel(RooWorkspace*, string data_name = ""obsData""); voidFitModelAndPlot(const string& measurementName, const string& fileNamePrefix, RooWorkspace*, string, string, TFile*, FILE*); voidFormatFrameForLikelihood(RooPlot* frame, string xTitle = std::string(""#sigma / #sigma_{SM}""), string yTitle = std::string(""-log likelihood"")); vector<RooStats::HistFactory::EstimateSummary>GetChannelEstimateSummaries(RooStats::HistFactory::Measurement& measurement, RooStats::HistFactory::Channel& channel); voidgetDataValuesForObservables(map<std::string,std::vector<double> >& ChannelBinDataMap, RooAbsData* data, RooAbsPdf* simPdf); intgetStatUncertaintyConstraintTerm(RooArgList* constraints, RooRealVar* gamma_stat, RooAbsReal*& pois_mean, RooRealVar*& tau); boolgetStatUncertaintyFromChannel(RooAbsPdf* channel, ParamHistFunc*& paramfunc, RooArgList* gammaList); RooAbsPdf*getSumPdfFromChannel(RooAbsPdf* channel); RooWorkspace*MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement& measurement). Data Members. Class Charts; Function documentation. » Author: George Lewis, Kyle Cranmer » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory.html:787,log,log,787,root/html534/RooStats__HistFactory.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory.html,1,['log'],['log']
Testability,". RooStats::HistFactory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; namespace description; function members; data members; class charts. ROOT; » ROOFIT; » HISTFACTORY; » RooStats::HistFactory. namespace RooStats::HistFactory. Function Members (Methods); public:. stringchannelNameFromPdf(RooAbsPdf* channelPdf); voidFactorizeHistFactoryPdf(const RooArgSet&, RooAbsPdf&, RooArgList&, RooArgList&); voidFitModel(RooWorkspace*, string data_name = ""obsData""); voidFitModelAndPlot(const string& measurementName, const string& fileNamePrefix, RooWorkspace*, string, string, TFile*, FILE*); voidFormatFrameForLikelihood(RooPlot* frame, string xTitle = std::string(""#sigma / #sigma_{SM}""), string yTitle = std::string(""-log likelihood"")); vector<RooStats::HistFactory::EstimateSummary>GetChannelEstimateSummaries(RooStats::HistFactory::Measurement& measurement, RooStats::HistFactory::Channel& channel); voidgetDataValuesForObservables(map<string,vector<double> >& ChannelBinDataMap, RooAbsData* data, RooAbsPdf* simPdf); intgetStatUncertaintyConstraintTerm(RooArgList* constraints, RooRealVar* gamma_stat, RooAbsReal*& pois_mean, RooRealVar*& tau); boolgetStatUncertaintyFromChannel(RooAbsPdf* channel, ParamHistFunc*& paramfunc, RooArgList* gammaList); RooAbsPdf*getSumPdfFromChannel(RooAbsPdf* channel); RooWorkspace*MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement& measurement). Data Members. Class Charts; Function documentation. » Author: George Lewis, Kyle Cranmer » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-06-30 14:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HistFactory.html:811,log,log,811,root/html602/RooStats__HistFactory.html,https://root.cern,https://root.cern/root/html602/RooStats__HistFactory.html,1,['log'],['log']
Testability,". RooStats::HistFactory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; namespace description; function members; data members; class charts. ROOT; » ROOFIT; » HISTFACTORY; » RooStats::HistFactory. namespace RooStats::HistFactory. Function Members (Methods); public:. stringchannelNameFromPdf(RooAbsPdf* channelPdf); voidFactorizeHistFactoryPdf(const RooArgSet&, RooAbsPdf&, RooArgList&, RooArgList&); voidFitModel(RooWorkspace*, string data_name = ""obsData""); voidFitModelAndPlot(const string& measurementName, const string& fileNamePrefix, RooWorkspace*, string, string, TFile*, FILE*); voidFormatFrameForLikelihood(RooPlot* frame, string xTitle = std::string(""#sigma / #sigma_{SM}""), string yTitle = std::string(""-log likelihood"")); vector<RooStats::HistFactory::EstimateSummary>GetChannelEstimateSummaries(RooStats::HistFactory::Measurement& measurement, RooStats::HistFactory::Channel& channel); voidgetDataValuesForObservables(map<string,vector<double> >& ChannelBinDataMap, RooAbsData* data, RooAbsPdf* simPdf); intgetStatUncertaintyConstraintTerm(RooArgList* constraints, RooRealVar* gamma_stat, RooAbsReal*& pois_mean, RooRealVar*& tau); boolgetStatUncertaintyFromChannel(RooAbsPdf* channel, ParamHistFunc*& paramfunc, RooArgList* gammaList); RooAbsPdf*getSumPdfFromChannel(RooAbsPdf* channel); RooWorkspace*MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement& measurement). Data Members. Class Charts; Function documentation. » Author: George Lewis, Kyle Cranmer » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-09-08 17:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooStats__HistFactory.html:811,log,log,811,root/html604/RooStats__HistFactory.html,https://root.cern,https://root.cern/root/html604/RooStats__HistFactory.html,1,['log'],['log']
Testability,". RooStats::HistFactory::RooBarlowBeestonLL. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » HISTFACTORY; » RooStats::HistFactory::RooBarlowBeestonLL. class RooStats::HistFactory::RooBarlowBeestonLL: public RooAbsReal. Class RooBarlowBeestonLL implements the profile likelihood estimator for; a given likelihood and set of parameters of interest. The value return by ; RooBarlowBeestonLL is the input likelihood nll minimized w.r.t all nuisance parameters; (which are all parameters except for those listed in the constructor) minus; the -log(L) of the best fit. Note that this function is slow to evaluate; as a MIGRAD minimization step is executed for each function evaluation; . Function Members (Methods); public:. virtual~RooBarlowBeestonLL(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual lis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__RooBarlowBeestonLL.html:716,log,log,716,root/html534/RooStats__HistFactory__RooBarlowBeestonLL.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__RooBarlowBeestonLL.html,1,['log'],['log']
Testability,". RooStats::HistFactory::RooBarlowBeestonLL. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » HISTFACTORY; » RooStats::HistFactory::RooBarlowBeestonLL. class RooStats::HistFactory::RooBarlowBeestonLL: public RooAbsReal. Class RooBarlowBeestonLL implements the profile likelihood estimator for; a given likelihood and set of parameters of interest. The value return by ; RooBarlowBeestonLL is the input likelihood nll minimized w.r.t all nuisance parameters; (which are all parameters except for those listed in the constructor) minus; the -log(L) of the best fit. Note that this function is slow to evaluate; as a MIGRAD minimization step is executed for each function evaluation; . Function Members (Methods); public:. virtual~RooBarlowBeestonLL(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; virtual list<Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HistFactory__RooBarlowBeestonLL.html:716,log,log,716,root/html602/RooStats__HistFactory__RooBarlowBeestonLL.html,https://root.cern,https://root.cern/root/html602/RooStats__HistFactory__RooBarlowBeestonLL.html,2,['log'],['log']
Testability,". RooStats::HypoTestCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestCalculator. class RooStats::HypoTestCalculator. HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. ; The interface currently assumes that any hypothesis test calculator can be configured by specifying:. a model for the null,; a model for the alternate,; a data set, ; a set of parameters of which specify the null (including values and const/non-const status), and ; a set of parameters of which specify the alternate (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface will be extended so that one does not need to use a workspace. After configuring the calculator, one only needs to ask GetHypoTest, which will return a HypoTestResult pointer. The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~HypoTestCalculator(); static TClass*Class(); virtual RooStats::HypoTestResult*GetHypoTest() const; virtual TClass*IsA() const; RooStats::HypoTestCalculator&operator=(const RooStats::HypoTestCalculator&); virtual voidSetAlternateModel(const RooStats::ModelConfig& model); virtual voidSetCommonModel(const RooStats::ModelConfig& model); virtual voidSetData(RooAbsData& data); virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HypoTestCalculator.html:456,test,test,456,root/html526/RooStats__HypoTestCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__HypoTestCalculator.html,2,['test'],['test']
Testability,". RooStats::HypoTestCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestCalculator. class RooStats::HypoTestCalculator. HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. ; The interface currently assumes that any hypothesis test calculator can be configured by specifying:. a model for the null,; a model for the alternate,; a data set, ; a set of parameters of which specify the null (including values and const/non-const status), and ; a set of parameters of which specify the alternate (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface will be extended so that one does not need to use a workspace. After configuring the calculator, one only needs to ask GetHypoTest, which will return a HypoTestResult pointer. The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~HypoTestCalculator(); static TClass*Class(); virtual RooStats::HypoTestResult*GetHypoTest() const; RooStats::HypoTestCalculatorHypoTestCalculator(); RooStats::HypoTestCalculatorHypoTestCalculator(const RooStats::HypoTestCalculator&); virtual TClass*IsA() const; RooStats::HypoTestCalculator&operator=(const RooStats::HypoTestCalculator&); virtual voidSetAlternateModel(const Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HypoTestCalculator.html:458,test,test,458,root/html602/RooStats__HypoTestCalculator.html,https://root.cern,https://root.cern/root/html602/RooStats__HypoTestCalculator.html,2,['test'],['test']
Testability,". RooStats::HypoTestCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestCalculator. class RooStats::HypoTestCalculator. HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. ; The interface currently assumes that any hypothesis test calculator can be configured by specifying:. a model for the null,; a model for the alternate,; a data set, ; a set of parameters of which specify the null (including values and const/non-const status), and ; a set of parameters of which specify the alternate (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface will be extended so that one does not need to use a workspace. After configuring the calculator, one only needs to ask GetHypoTest, which will return a HypoTestResult pointer. The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~HypoTestCalculator(); static TClass*Class(); virtual RooStats::HypoTestResult*GetHypoTest() const; virtual TClass*IsA() const; RooStats::HypoTestCalculator&operator=(const RooStats::HypoTestCalculator&); virtual voidSetAlternateModel(const RooStats::ModelConfig& model); virtual voidSetCommonModel(const RooStats::ModelConfig& model); virtual voidSetData(RooAbsData& data); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HypoTestCalculator.html:458,test,test,458,root/html530/RooStats__HypoTestCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__HypoTestCalculator.html,3,['test'],['test']
Testability,". RooStats::HypoTestCalculatorGeneric. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestCalculatorGeneric. class RooStats::HypoTestCalculatorGeneric: public RooStats::HypoTestCalculator. Function Members (Methods); public:. virtual~HypoTestCalculatorGeneric(); static TClass*Class(); const RooStats::ModelConfig*GetAlternateModel() const; const RooAbsData*GetData() const; virtual RooStats::HypoTestResult*GetHypoTest() const; const RooStats::ModelConfig*GetNullModel() const; RooStats::TestStatSampler*GetTestStatSampler() const; RooStats::HypoTestCalculatorGenericHypoTestCalculatorGeneric(const RooStats::HypoTestCalculatorGeneric&); RooStats::HypoTestCalculatorGenericHypoTestCalculatorGeneric(const RooAbsData& data, const RooStats::ModelConfig& altModel, const RooStats::ModelConfig& nullModel, RooStats::TestStatSampler* sampler = 0); virtual TClass*IsA() const; RooStats::HypoTestCalculator&RooStats::HypoTestCalculator::operator=(const RooStats::HypoTestCalculator&); virtual voidSetAlternateModel(const RooStats::ModelConfig& altModel); virtual voidRooStats::HypoTestCalculator::SetCommonModel(const RooStats::ModelConfig& model); virtual voidSetData(RooAbsData& data); virtual voidSetNullModel(const RooStats::ModelConfig& nullModel); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual intCheckHook() const; virtual intPreAltHook(RooArgSet*, double) const; virtual intPreNullHook(RooArgSet*, double) const. private:. RooStats::SamplingDistribution*GenerateSamplingDistribution(RooStats::ModelConfig* thisModel, double obsTestStat, RooAbsPdf* impDens = NULL, const RooArgSet* impSnapshot = NULL) const; voidSetAdaptiveLimits(Double_t obsTestStat, Bool_t forNull) const; voidSetupSampler(const RooSta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__HypoTestCalculatorGeneric.html:693,Test,TestStatSampler,693,root/html532/RooStats__HypoTestCalculatorGeneric.html,https://root.cern,https://root.cern/root/html532/RooStats__HypoTestCalculatorGeneric.html,2,['Test'],['TestStatSampler']
Testability,". RooStats::HypoTestCalculatorGeneric. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestCalculatorGeneric. class RooStats::HypoTestCalculatorGeneric: public RooStats::HypoTestCalculator. Function Members (Methods); public:. virtual~HypoTestCalculatorGeneric(); static TClass*Class(); const RooStats::ModelConfig*GetAlternateModel() const; virtual RooStats::HypoTestResult*GetHypoTest() const; const RooStats::ModelConfig*GetNullModel() const; RooStats::TestStatSampler*GetTestStatSampler() const; RooStats::HypoTestCalculatorGenericHypoTestCalculatorGeneric(const RooStats::HypoTestCalculatorGeneric&); RooStats::HypoTestCalculatorGenericHypoTestCalculatorGeneric(const RooAbsData& data, const RooStats::ModelConfig& altModel, const RooStats::ModelConfig& nullModel, RooStats::TestStatSampler* sampler = 0); virtual TClass*IsA() const; RooStats::HypoTestCalculator&RooStats::HypoTestCalculator::operator=(const RooStats::HypoTestCalculator&); virtual voidSetAlternateModel(const RooStats::ModelConfig& altModel); virtual voidRooStats::HypoTestCalculator::SetCommonModel(const RooStats::ModelConfig& model); virtual voidSetData(RooAbsData& data); virtual voidSetNullModel(const RooStats::ModelConfig& nullModel); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual intCheckHook() const; virtual intPreAltHook(RooArgSet*, double) const; virtual intPreNullHook(RooArgSet*, double) const. private:. RooStats::SamplingDistribution*GenerateSamplingDistribution(RooStats::ModelConfig* thisModel, double obsTestStat, RooAbsPdf* impDens = NULL, const RooArgSet* impSnapshot = NULL) const; voidSetAdaptiveLimits(Double_t obsTestStat, Bool_t forNull) const; voidSetupSampler(const RooStats::ModelConfig& model) const. Dat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HypoTestCalculatorGeneric.html:659,Test,TestStatSampler,659,root/html530/RooStats__HypoTestCalculatorGeneric.html,https://root.cern,https://root.cern/root/html530/RooStats__HypoTestCalculatorGeneric.html,2,['Test'],['TestStatSampler']
Testability,". RooStats::HypoTestInverter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestInverter. class RooStats::HypoTestInverter: public RooStats::IntervalCalculator, public TNamed. HypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of the; HybridCalculator for various values of the parameter of interest. By looking at the confidence level curve of; the result an upper limit, where it intersects the desired confidence level, can be derived.; The class implements the RooStats::IntervalCalculator interface and returns an RooStats::HypoTestInverterResult class.; The result is a SimpleInterval, which via the method UpperLimit returns to the user the upper limit value. The HypoTestInverter implements various option for performing the scan. HypoTestInverter::RunFixedScan will scan using a fixed grid the parameter of interest. HypoTestInverter::RunAutoScan will perform an automatic scan to find optimally the curve and it will stop until the desired precision is obtained.; The confidence level value at a given point can be done via HypoTestInverter::RunOnePoint.; The class can scan the CLs+b values or alternativly CLs (if the method HypoTestInverter::UseCLs has been called). New contributions to this class have been written by Matthias Wolf (advanced AutoRun algorithm). Function Members (Methods); public:. virtual~HypoTestInverter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HypoTestInverter.html:433,test,test,433,root/html526/RooStats__HypoTestInverter.html,https://root.cern,https://root.cern/root/html526/RooStats__HypoTestInverter.html,2,['test'],['test']
Testability,". RooStats::HypoTestInverter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestInverter. class RooStats::HypoTestInverter: public RooStats::IntervalCalculator. HypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of an; HypoTestCalculator for various values of the parameter of interest. By looking at the confidence level curve of; the result an upper limit, where it intersects the desired confidence level, can be derived.; The class implements the RooStats::IntervalCalculator interface and returns an RooStats::HypoTestInverterResult class.; The result is a SimpleInterval, which via the method UpperLimit returns to the user the upper limit value. The HypoTestInverter implements various option for performing the scan. HypoTestInverter::RunFixedScan will scan using a fixed grid the parameter of interest. HypoTestInverter::RunAutoScan will perform an automatic scan to find optimally the curve and it will stop until the desired precision is obtained.; The confidence level value at a given point can be done via HypoTestInverter::RunOnePoint.; The class can scan the CLs+b values or alternativly CLs (if the method HypoTestInverter::UseCLs has been called). Contributions to this class have been written by Giovanni Petrucciani and Annapaola Decosa. Function Members (Methods); public:. virtual~HypoTestInverter(); static TClass*Class(); voidClear(); virtual Double_tConfidenceLevel() const; RooStats::HypoTestCalculatorGeneric*GetHypoTestCalculator() const; virtual RooStats::HypoTestInverterResult*GetInterval() const; RooStats::SamplingDistribution*GetLowerLimitDistribution(bool rebuild = false, int nToys = 100); RooStats::TestStatistic*GetTestStatistic() const; RooStats::SamplingDistribution*GetUpperLimitDistribution(bool re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HypoTestInverter.html:418,test,test,418,root/html530/RooStats__HypoTestInverter.html,https://root.cern,https://root.cern/root/html530/RooStats__HypoTestInverter.html,10,['test'],['test']
Testability,". RooStats::HypoTestInverter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::HypoTestInverter. class RooStats::HypoTestInverter: public RooStats::IntervalCalculator, public TNamed. HypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of the; HybridCalculator for various values of the parameter of interest. By looking at the confidence level curve of; the result an upper limit, where it intersects the desired confidence level, can be derived.; The class implements the RooStats::IntervalCalculator interface and returns an RooStats::HypoTestInverterResult class.; The result is a SimpleInterval, which via the method UpperLimit returns to the user the upper limit value. The HypoTestInverter implements various option for performing the scan. HypoTestInverter::RunFixedScan will scan using a fixed grid the parameter of interest. HypoTestInverter::RunAutoScan will perform an automatic scan to find optimally the curve and it will stop until the desired precision is obtained.; The confidence level value at a given point can be done via HypoTestInverter::RunOnePoint.; The class can scan the CLs+b values or alternativly CLs (if the method HypoTestInverter::UseCLs has been called). New contributions to this class have been written by Matthias Wolf (advanced AutoRun algorithm). Function Members (Methods); public:. virtual~HypoTestInverter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HypoTestInverter.html:423,test,test,423,root/html528/RooStats__HypoTestInverter.html,https://root.cern,https://root.cern/root/html528/RooStats__HypoTestInverter.html,2,['test'],['test']
Testability,". RooStats::HypoTestInverterOriginal. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestInverterOriginal. class RooStats::HypoTestInverterOriginal: public RooStats::IntervalCalculator, public TNamed. HypoTestInverterOriginal class for performing an hypothesis test inversion by scanning the hypothesis test results of the; HybridCalculator for various values of the parameter of interest. By looking at the confidence level curve of; the result an upper limit, where it intersects the desired confidence level, can be derived.; The class implements the RooStats::IntervalCalculator interface and returns an RooStats::HypoTestInverterResult class.; The result is a SimpleInterval, which via the method UpperLimit returns to the user the upper limit value. The HypoTestInverterOriginal implements various option for performing the scan. HypoTestInverterOriginal::RunFixedScan will scan using a fixed grid the parameter of interest. HypoTestInverterOriginal::RunAutoScan will perform an automatic scan to find optimally the curve and it will stop until the desired precision is obtained.; The confidence level value at a given point can be done via HypoTestInverterOriginal::RunOnePoint.; The class can scan the CLs+b values or alternativly CLs (if the method HypoTestInverterOriginal::UseCLs has been called). New contributions to this class have been written by Matthias Wolf (advanced AutoRun algorithm). Function Members (Methods); public:. virtual~HypoTestInverterOriginal(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HypoTestInverterOriginal.html:465,test,test,465,root/html530/RooStats__HypoTestInverterOriginal.html,https://root.cern,https://root.cern/root/html530/RooStats__HypoTestInverterOriginal.html,10,['test'],['test']
Testability,". RooStats::HypoTestResult. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestResult. class RooStats::HypoTestResult: public TNamed. HypoTestResult is a base class for results from hypothesis tests.; Any tool inheriting from HypoTestCalculator can return a HypoTestResult.; As such, it stores a p-value for the null-hypothesis (eg. background-only) ; and an alternate hypothesis (eg. signal+background). ; The p-values can also be transformed into confidence levels (CLb, CLsplusb) in a trivial way.; The ratio of the CLsplusb to CLb is often called CLs, and is considered useful, though it is ; not a probability.; Finally, the p-value of the null can be transformed into a number of equivalent Gaussian sigma using the ; Significance method. Function Members (Methods); public:. virtual~HypoTestResult(); voidTObject::AbstractMethod(const char* method) const; virtual Double_tAlternatePValue() const; virtual voidAppend(const RooStats::HypoTestResult* other); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual Double_tCLb() const; Double_tCLbError() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Double_tCLs() const; Double_tCLsError() const; virtual Double_tCLsplusb() const; Double_tCLsplusbError() const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HypoTestResult.html:397,test,tests,397,root/html528/RooStats__HypoTestResult.html,https://root.cern,https://root.cern/root/html528/RooStats__HypoTestResult.html,6,['test'],['tests']
Testability,". RooStats::HypoTestResult. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::HypoTestResult. class RooStats::HypoTestResult: public TNamed. HypoTestResult is an base class for a results from hypothesis tests. ; Any tool inheriting from HypoTestCalculator can return a HypoTestResult.; As such, it stores a p-value for the null-hypothesis (eg. background-only) ; and an alternate hypothesis (eg. signal+background). ; The p-values can also be transformed into confidence levels (CLb, CLsplusb) in a trivial way.; The ratio of the CLsplusb to CLb is often called CLs, and is considered useful, though it is ; not a probability.; Finally, the p-value of the null can be transformed into a number of equivalent Gaussian sigma using the ; Significance method. Function Members (Methods); public:. virtual~HypoTestResult(); voidTObject::AbstractMethod(const char* method) const; virtual Double_tAlternatePValue() const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual Double_tCLb() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Double_tCLs() const; virtual Double_tCLsplusb() const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HypoTestResult.html:400,test,tests,400,root/html526/RooStats__HypoTestResult.html,https://root.cern,https://root.cern/root/html526/RooStats__HypoTestResult.html,1,['test'],['tests']
Testability,". RooStats::IntervalCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::IntervalCalculator. class RooStats::IntervalCalculator. IntervalCalculator is an interface class for a tools which produce RooStats ConfIntervals. ; The interface currently assumes that any interval calculator can be configured by specifying:. a model,; a data set, ; a set of parameters of interest,; a set of nuisance parameters (eg. parameters on which the model depends, but are not of interest), and ; a confidence level or size of the test (eg. rate of Type I error). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface will be extended so that one does not need to use a workspace. After configuring the calculator, one only needs to ask GetInterval, which will return a ConfInterval pointer. The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IntervalCalculator(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual RooStats::ConfInterval*GetInterval() const; virtual TClass*IsA() const; RooStats::IntervalCalculator&operator=(const RooStats::IntervalCalculator&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData&); virtual voidSetModel(const RooStats::ModelConfig&); virtual voidSetTestSize(Double_t size); virtual v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__IntervalCalculator.html:694,test,test,694,root/html526/RooStats__IntervalCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__IntervalCalculator.html,2,['test'],['test']
Testability,". RooStats::IntervalCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::IntervalCalculator. class RooStats::IntervalCalculator. IntervalCalculator is an interface class for a tools which produce RooStats ConfIntervals. ; The interface currently assumes that any interval calculator can be configured by specifying:. a model,; a data set, ; a set of parameters of interest,; a set of nuisance parameters (eg. parameters on which the model depends, but are not of interest), and ; a confidence level or size of the test (eg. rate of Type I error). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface will be extended so that one does not need to use a workspace. After configuring the calculator, one only needs to ask GetInterval, which will return a ConfInterval pointer. The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IntervalCalculator(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual RooStats::ConfInterval*GetInterval() const; RooStats::IntervalCalculatorIntervalCalculator(); RooStats::IntervalCalculatorIntervalCalculator(const RooStats::IntervalCalculator&); virtual TClass*IsA() const; RooStats::IntervalCalculator&operator=(const RooStats::IntervalCalculator&); virtual voidSetConfidenceLevel(Double_t cl)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__IntervalCalculator.html:696,test,test,696,root/html602/RooStats__IntervalCalculator.html,https://root.cern,https://root.cern/root/html602/RooStats__IntervalCalculator.html,2,['test'],['test']
Testability,". RooStats::IntervalCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::IntervalCalculator. class RooStats::IntervalCalculator. IntervalCalculator is an interface class for a tools which produce RooStats ConfIntervals. ; The interface currently assumes that any interval calculator can be configured by specifying:. a model,; a data set, ; a set of parameters of interest,; a set of nuisance parameters (eg. parameters on which the model depends, but are not of interest), and ; a confidence level or size of the test (eg. rate of Type I error). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface will be extended so that one does not need to use a workspace. After configuring the calculator, one only needs to ask GetInterval, which will return a ConfInterval pointer. The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IntervalCalculator(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual RooStats::ConfInterval*GetInterval() const; virtual TClass*IsA() const; RooStats::IntervalCalculator&operator=(const RooStats::IntervalCalculator&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData&); virtual voidSetModel(const RooStats::ModelConfig&); virtual voidSetTestSize(Double_t size); virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__IntervalCalculator.html:696,test,test,696,root/html530/RooStats__IntervalCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__IntervalCalculator.html,3,['test'],['test']
Testability,". RooStats::LikelihoodInterval. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::LikelihoodInterval. class RooStats::LikelihoodInterval: public RooStats::ConfInterval. LikelihoodInterval is a concrete implementation of the RooStats::ConfInterval interface. ; It implements a connected N-dimensional intervals based on the contour of a likelihood ratio.; The boundary of the inteval is equivalent to a MINUIT/MINOS contour about the maximum likelihood estimator; [1].; The interval does not need to be an ellipse (eg. it is not the HESSE error matrix).; The level used to make the contour is the same as that used in MINOS, eg. it uses Wilks' theorem, ; which states that under certain regularity conditions the function -2* log (profile likelihood ratio) is asymptotically distributed as a chi^2 with N-dof, where ; N is the number of parameters of interest. . Note, a boundary on the parameter space (eg. s>= 0) or a degeneracy (eg. mass of signal if Nsig = 0) can lead to violations of the conditions necessary for Wilks' theorem to be true. Also note, one can use any RooAbsReal as the function that will be used in the contour; however, the level of the contour; is based on Wilks' theorem as stated above. References; 1; F. James., Minuit.Long writeup D506, CERN, 1998. Function Members (Methods); public:. virtual~LikelihoodInterval(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCheckParameters(const RooArgSet&) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__LikelihoodInterval.html:922,log,log,922,root/html526/RooStats__LikelihoodInterval.html,https://root.cern,https://root.cern/root/html526/RooStats__LikelihoodInterval.html,6,['log'],['log']
Testability,". RooStats::LikelihoodInterval. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::LikelihoodInterval. class RooStats::LikelihoodInterval: public RooStats::ConfInterval. LikelihoodInterval is a concrete implementation of the RooStats::ConfInterval interface. ; It implements a connected N-dimensional intervals based on the contour of a likelihood ratio.; The boundary of the inteval is equivalent to a MINUIT/MINOS contour about the maximum likelihood estimator; [1].; The interval does not need to be an ellipse (eg. it is not the HESSE error matrix).; The level used to make the contour is the same as that used in MINOS, eg. it uses Wilks' theorem, ; which states that under certain regularity conditions the function -2* log (profile likelihood ratio) is asymptotically distributed as a chi^2 with N-dof, where ; N is the number of parameters of interest. . Note, a boundary on the parameter space (eg. s>= 0) or a degeneracy (eg. mass of signal if Nsig = 0) can lead to violations of the conditions necessary for Wilks' theorem to be true. Also note, one can use any RooAbsReal as the function that will be used in the contour; however, the level of the contour; is based on Wilks' theorem as stated above. References; 1; F. James., Minuit.Long writeup D506, CERN, 1998. Function Members (Methods); public:. virtual~LikelihoodInterval(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCheckParameters(const RooArgSet&) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__LikelihoodInterval.html:912,log,log,912,root/html528/RooStats__LikelihoodInterval.html,https://root.cern,https://root.cern/root/html528/RooStats__LikelihoodInterval.html,1,['log'],['log']
Testability,". RooStats::MaxLikelihoodEstimateTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::MaxLikelihoodEstimateTestStat. class RooStats::MaxLikelihoodEstimateTestStat: public RooStats::TestStatistic. MaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter. Function Members (Methods); public:. ~MaxLikelihoodEstimateTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet&); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::MaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat(); RooStats::MaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat(const RooStats::MaxLikelihoodEstimateTestStat&); RooStats::MaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat(RooAbsPdf& pdf, RooRealVar& parameter); RooStats::MaxLikelihoodEstimateTestStat&operator=(const RooStats::MaxLikelihoodEstimateTestStat&); virtual boolPValueIsRightTail() const; virtual voidPValueIsRightTail(bool isright); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. RooRealVar*fParameter; RooAbsPdf*fPdf; boolfUpperLimit. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MaxLikelihoodEstimateTestStat(). MaxLikelihoodEstimateTestStat(RooAbsPdf& pdf, RooRealVar& parameter). Double_t Evaluate(RooAbsData& data, RooArgSet& ). const TString GetVarName() const. void PValueIsRightTail(bool isright); { fUpperLimit = isright; }. bool PValueIsRightTail(void); { return fUpperLimit; }. » Author: Kyle Cranmer June 2010 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2010-12-01 01:51; This page has been automatically generated. For comments or sug",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__MaxLikelihoodEstimateTestStat.html:349,Test,TestStatistic,349,root/html528/RooStats__MaxLikelihoodEstimateTestStat.html,https://root.cern,https://root.cern/root/html528/RooStats__MaxLikelihoodEstimateTestStat.html,2,['Test'],['TestStatistic']
Testability,". RooStats::MaxLikelihoodEstimateTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::MaxLikelihoodEstimateTestStat. class RooStats::MaxLikelihoodEstimateTestStat: public RooStats::TestStatistic. MaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter. Function Members (Methods); public:. virtual~MaxLikelihoodEstimateTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet&); virtual const RooArgSet*RooStats::TestStatistic::GetDetailedOutput() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::MaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat(); RooStats::MaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat(const RooStats::MaxLikelihoodEstimateTestStat&); RooStats::MaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat(RooStats::MaxLikelihoodEstimateTestStat&&); RooStats::MaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat(RooAbsPdf& pdf, RooRealVar& parameter); RooStats::MaxLikelihoodEstimateTestStat&operator=(const RooStats::MaxLikelihoodEstimateTestStat&); RooStats::MaxLikelihoodEstimateTestStat&operator=(RooStats::MaxLikelihoodEstimateTestStat&&); virtual boolPValueIsRightTail() const; virtual voidPValueIsRightTail(bool isright); virtual voidSetConditionalObservables(const RooArgSet& set); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(const RooStats::TestStatistic&). Data Members; private:. RooArgSetfConditionalObs; TStringfMinimizer; RooRealVar*fParameter; RooAbsPdf*fPdf; Int_tfPrintLevel; Int_tfStrategy; boolfUpperLi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__MaxLikelihoodEstimateTestStat.html:361,Test,TestStatistic,361,root/html602/RooStats__MaxLikelihoodEstimateTestStat.html,https://root.cern,https://root.cern/root/html602/RooStats__MaxLikelihoodEstimateTestStat.html,4,['Test'],['TestStatistic']
Testability,". RooStats::MaxLikelihoodEstimateTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::MaxLikelihoodEstimateTestStat. class RooStats::MaxLikelihoodEstimateTestStat: public RooStats::TestStatistic. MaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter. Function Members (Methods); public:. ~MaxLikelihoodEstimateTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet&); virtual const RooArgSet*RooStats::TestStatistic::GetDetailedOutput() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::MaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat(); RooStats::MaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat(const RooStats::MaxLikelihoodEstimateTestStat&); RooStats::MaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat(RooAbsPdf& pdf, RooRealVar& parameter); RooStats::MaxLikelihoodEstimateTestStat&operator=(const RooStats::MaxLikelihoodEstimateTestStat&); virtual boolPValueIsRightTail() const; virtual voidPValueIsRightTail(bool isright); virtual voidSetConditionalObservables(const RooArgSet& set); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:. RooArgSetfConditionalObs; TStringfMinimizer; RooRealVar*fParameter; RooAbsPdf*fPdf; Int_tfPrintLevel; Int_tfStrategy; boolfUpperLimit. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MaxLikelihoodEstimateTestStat(). MaxLikelihoodEstimateTestStat(RooAbsPdf& pdf, RooRealVar& parameter). Double_t Evaluate(RooAbsData& data, RooArgSet& ). const TString GetVarName() const. void PValueIsRightTail(bool isright); { fUpperLimit = isright; }. bool PValueIsRightTail(void); { retu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__MaxLikelihoodEstimateTestStat.html:361,Test,TestStatistic,361,root/html534/RooStats__MaxLikelihoodEstimateTestStat.html,https://root.cern,https://root.cern/root/html534/RooStats__MaxLikelihoodEstimateTestStat.html,3,['Test'],['TestStatistic']
Testability,". RooStats::MaxLikelihoodEstimateTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::MaxLikelihoodEstimateTestStat. class RooStats::MaxLikelihoodEstimateTestStat: public RooStats::TestStatistic. MaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter. Function Members (Methods); public:. ~MaxLikelihoodEstimateTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet&); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::MaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat(); RooStats::MaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat(const RooStats::MaxLikelihoodEstimateTestStat&); RooStats::MaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat(RooAbsPdf& pdf, RooRealVar& parameter); RooStats::MaxLikelihoodEstimateTestStat&operator=(const RooStats::MaxLikelihoodEstimateTestStat&); virtual boolPValueIsRightTail() const; virtual voidPValueIsRightTail(bool isright); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. RooRealVar*fParameter; RooAbsPdf*fPdf; boolfUpperLimit. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MaxLikelihoodEstimateTestStat(). MaxLikelihoodEstimateTestStat(RooAbsPdf& pdf, RooRealVar& parameter). Double_t Evaluate(RooAbsData& data, RooArgSet& ). const TString GetVarName() const. void PValueIsRightTail(bool isright); { fUpperLimit = isright; }. bool PValueIsRightTail(void); { return fUpperLimit; }. » Author: Kyle Cranmer June 2010 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For com",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__MaxLikelihoodEstimateTestStat.html:361,Test,TestStatistic,361,root/html530/RooStats__MaxLikelihoodEstimateTestStat.html,https://root.cern,https://root.cern/root/html530/RooStats__MaxLikelihoodEstimateTestStat.html,2,['Test'],['TestStatistic']
Testability,". RooStats::MaxLikelihoodEstimateTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::MaxLikelihoodEstimateTestStat. class RooStats::MaxLikelihoodEstimateTestStat: public RooStats::TestStatistic. MaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter. Function Members (Methods); public:. ~MaxLikelihoodEstimateTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet&); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::MaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat(); RooStats::MaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat(const RooStats::MaxLikelihoodEstimateTestStat&); RooStats::MaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat(RooAbsPdf& pdf, RooRealVar& parameter); RooStats::MaxLikelihoodEstimateTestStat&operator=(const RooStats::MaxLikelihoodEstimateTestStat&); virtual boolPValueIsRightTail() const; virtual voidPValueIsRightTail(bool isright); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. TStringfMinimizer; RooRealVar*fParameter; RooAbsPdf*fPdf; Int_tfPrintLevel; Int_tfStrategy; boolfUpperLimit. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MaxLikelihoodEstimateTestStat(). MaxLikelihoodEstimateTestStat(RooAbsPdf& pdf, RooRealVar& parameter). Double_t Evaluate(RooAbsData& data, RooArgSet& ). const TString GetVarName() const. void PValueIsRightTail(bool isright); { fUpperLimit = isright; }. bool PValueIsRightTail(void); { return fUpperLimit; }. » Author: Kyle Cranmer June 2010 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2011-11-03 20:09",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__MaxLikelihoodEstimateTestStat.html:361,Test,TestStatistic,361,root/html532/RooStats__MaxLikelihoodEstimateTestStat.html,https://root.cern,https://root.cern/root/html532/RooStats__MaxLikelihoodEstimateTestStat.html,2,['Test'],['TestStatistic']
Testability,". RooStats::MinNLLTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::MinNLLTestStat. class RooStats::MinNLLTestStat: public RooStats::TestStatistic. MinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood; function and returns it as a test statistic.; Internaly it operates by delegating to a MinNLLTestStat object. Function Members (Methods); public:. virtual~MinNLLTestStat(); static TClass*Class(); virtual voidEnableDetailedOutput(bool e = true); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& paramsOfInterest); virtual const RooArgSet*GetDetailedOutput() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::MinNLLTestStatMinNLLTestStat(); RooStats::MinNLLTestStatMinNLLTestStat(RooAbsPdf& pdf); RooStats::MinNLLTestStatMinNLLTestStat(const RooStats::MinNLLTestStat& rhs); RooStats::MinNLLTestStat&operator=(const RooStats::MinNLLTestStat& rhs); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; voidSetLOffset(Bool_t flag = kTRUE); voidSetMinimizer(const char* minimizer); voidSetOneSided(Bool_t flag = true); voidSetOneSidedDiscovery(Bool_t flag = true); voidSetPrintLevel(Int_t printlevel); voidSetReuseNLL(Bool_t flag); voidSetStrategy(Int_t strategy); voidSetTolerance(double tol); virtual voidSetVarName(const char* name); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(const RooStats::TestStatistic&). Data Members; private:. RooStats::ProfileLikelihoodTestStat*fProflts. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__MinNLLTestStat.html:316,Test,TestStatistic,316,root/html602/RooStats__MinNLLTestStat.html,https://root.cern,https://root.cern/root/html602/RooStats__MinNLLTestStat.html,8,"['Test', 'log', 'test']","['TestStatistic', 'log', 'test']"
Testability,". RooStats::MinNLLTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::MinNLLTestStat. class RooStats::MinNLLTestStat: public RooStats::TestStatistic. MinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood; function and returns it as a test statistic.; Internaly it operates by delegating to a MinNLLTestStat object. Function Members (Methods); public:. virtual~MinNLLTestStat(); static TClass*Class(); virtual voidEnableDetailedOutput(bool e = true); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& paramsOfInterest); virtual const RooArgSet*GetDetailedOutput() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::MinNLLTestStatMinNLLTestStat(); RooStats::MinNLLTestStatMinNLLTestStat(RooAbsPdf& pdf); RooStats::MinNLLTestStatMinNLLTestStat(const RooStats::MinNLLTestStat& rhs); RooStats::MinNLLTestStat&operator=(const RooStats::MinNLLTestStat& rhs); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; voidSetLOffset(Bool_t flag = kTRUE); voidSetMinimizer(const char* minimizer); voidSetOneSided(Bool_t flag = true); voidSetOneSidedDiscovery(Bool_t flag = true); voidSetPrintLevel(Int_t printlevel); voidSetReuseNLL(Bool_t flag); voidSetStrategy(Int_t strategy); voidSetTolerance(double tol); virtual voidSetVarName(const char* name); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:. RooStats::ProfileLikelihoodTestStat*fProflts. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinNLLTestStat(); Proof constructor. Do not use. MinNLLTestStat(RooAbsPdf& pdf). MinNLLTestStat(const RooStats::MinNLLTestStat& rhs). MinNLLTestStat & operat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__MinNLLTestStat.html:316,Test,TestStatistic,316,root/html534/RooStats__MinNLLTestStat.html,https://root.cern,https://root.cern/root/html534/RooStats__MinNLLTestStat.html,4,"['Test', 'log', 'test']","['TestStatistic', 'log', 'test']"
Testability,". RooStats::NeymanConstruction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::NeymanConstruction. class RooStats::NeymanConstruction: public RooStats::IntervalCalculator, public TNamed. NeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests,; performs a NeymanConstruction. ; It produces a RooStats::PointSetInterval, which is a concrete implementation of the ConfInterval interface. . The Neyman Construction is not a uniquely defined statistical technique, it requires that one specify an ordering rule ; or ordering principle, which is usually incoded by choosing a specific test statistic and limits of integration ; (corresponding to upper/lower/central limits). As a result, this class must be configured with the corresponding; information before it can produce an interval. Common configurations, such as the Feldman-Cousins approach, can be ; enforced by other light weight classes. The Neyman Construction considers every point in the parameter space independently, no assumptions are ; made that the interval is connected or of a particular shape. As a result, the PointSetInterval class is used to ; represent the result. The user indicate which points in the parameter space to perform the constrution by providing; a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be considered is factorized and so is the ; creation of the sampling distribution of the test statistic (which is done by a concrete class implementing the DistributionCreator interface). As a result, this class basically just drives the construction by:. using a DistributionCreator to create the SamplingDistribution of a user-defined test statistic for each parameter point of inter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__NeymanConstruction.html:835,test,test,835,root/html526/RooStats__NeymanConstruction.html,https://root.cern,https://root.cern/root/html526/RooStats__NeymanConstruction.html,1,['test'],['test']
Testability,". RooStats::NeymanConstruction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::NeymanConstruction. class RooStats::NeymanConstruction: public RooStats::IntervalCalculator. NeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests,; performs a NeymanConstruction. ; It produces a RooStats::PointSetInterval, which is a concrete implementation of the ConfInterval interface. . The Neyman Construction is not a uniquely defined statistical technique, it requires that one specify an ordering rule ; or ordering principle, which is usually incoded by choosing a specific test statistic and limits of integration ; (corresponding to upper/lower/central limits). As a result, this class must be configured with the corresponding; information before it can produce an interval. Common configurations, such as the Feldman-Cousins approach, can be ; enforced by other light weight classes. The Neyman Construction considers every point in the parameter space independently, no assumptions are ; made that the interval is connected or of a particular shape. As a result, the PointSetInterval class is used to ; represent the result. The user indicate which points in the parameter space to perform the constrution by providing; a PointSetInterval instance with the desired points. This class is fairly light weight, because the choice of parameter points to be considered is factorized and so is the ; creation of the sampling distribution of the test statistic (which is done by a concrete class implementing the DistributionCreator interface). As a result, this class basically just drives the construction by:. using a DistributionCreator to create the SamplingDistribution of a user-defined test statistic for each parameter point of interest,; defining ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__NeymanConstruction.html:820,test,test,820,root/html528/RooStats__NeymanConstruction.html,https://root.cern,https://root.cern/root/html528/RooStats__NeymanConstruction.html,6,['test'],['test']
Testability,". RooStats::NumEventsTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::NumEventsTestStat. class RooStats::NumEventsTestStat: public RooStats::TestStatistic. NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting.; It should probably support simple cuts as well. Function Members (Methods); public:. virtual~NumEventsTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet&); virtual const RooAbsArg*GetTestStatistic() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::NumEventsTestStatNumEventsTestStat(RooAbsPdf& pdf); RooStats::NumEventsTestStatNumEventsTestStat(const RooStats::NumEventsTestStat&); RooStats::NumEventsTestStat&operator=(const RooStats::NumEventsTestStat&); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. RooAbsPdf*fPdf. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; NumEventsTestStat(RooAbsPdf& pdf). virtual ~NumEventsTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& data, RooArgSet& ); Main interface to evaluate the test statistic on a dataset. const RooAbsArg* GetTestStatistic() const; Get the TestStatistic. {return fPdf;}. const TString GetVarName() const; {return ""Number of events"";}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: NumEventsTestStat.h 31276 2009-11-18 15:06:42Z moneta $ » Last generated: 2009-12-07 13:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__NumEventsTestStat.html:323,Test,TestStatistic,323,root/html526/RooStats__NumEventsTestStat.html,https://root.cern,https://root.cern/root/html526/RooStats__NumEventsTestStat.html,2,['Test'],['TestStatistic']
Testability,". RooStats::NumEventsTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::NumEventsTestStat. class RooStats::NumEventsTestStat: public RooStats::TestStatistic. NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting.; It should probably support simple cuts as well. Function Members (Methods); public:. virtual~NumEventsTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet&); virtual const RooAbsArg*GetTestStatistic() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::NumEventsTestStatNumEventsTestStat(RooAbsPdf& pdf); RooStats::NumEventsTestStatNumEventsTestStat(const RooStats::NumEventsTestStat&); RooStats::NumEventsTestStat&operator=(const RooStats::NumEventsTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. RooAbsPdf*fPdf. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; NumEventsTestStat(RooAbsPdf& pdf). virtual ~NumEventsTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& data, RooArgSet& ); Main interface to evaluate the test statistic on a dataset. const RooAbsArg* GetTestStatistic() const; Get the TestStatistic. {return fPdf;}. const TString GetVarName() const; {return ""Number of events"";}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: NumEventsTestStat.h 36222 2010-10-09 18:27:06Z wouter $ » Last generated: 2010-11-25 07:08; This page has been automatically generated. For comments or suggestions regarding the documentation ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__NumEventsTestStat.html:313,Test,TestStatistic,313,root/html528/RooStats__NumEventsTestStat.html,https://root.cern,https://root.cern/root/html528/RooStats__NumEventsTestStat.html,3,['Test'],['TestStatistic']
Testability,". RooStats::NumEventsTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::NumEventsTestStat. class RooStats::NumEventsTestStat: public RooStats::TestStatistic. NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting.; It should probably support simple cuts as well. Function Members (Methods); public:. virtual~NumEventsTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet&); virtual const RooAbsArg*GetTestStatistic() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::NumEventsTestStatNumEventsTestStat(); RooStats::NumEventsTestStatNumEventsTestStat(RooAbsPdf& pdf); RooStats::NumEventsTestStatNumEventsTestStat(const RooStats::NumEventsTestStat&); RooStats::NumEventsTestStat&operator=(const RooStats::NumEventsTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. RooAbsPdf*fPdf. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; NumEventsTestStat(); { }. NumEventsTestStat(RooAbsPdf& pdf). virtual ~NumEventsTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& data, RooArgSet& ); Main interface to evaluate the test statistic on a dataset. const RooAbsArg* GetTestStatistic() const; Get the TestStatistic. {return fPdf;}. const TString GetVarName() const; {return ""Number of events"";}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: NumEventsTestStat.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-07-04 15:24; This page has ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__NumEventsTestStat.html:325,Test,TestStatistic,325,root/html530/RooStats__NumEventsTestStat.html,https://root.cern,https://root.cern/root/html530/RooStats__NumEventsTestStat.html,3,['Test'],['TestStatistic']
Testability,". RooStats::NumEventsTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::NumEventsTestStat. class RooStats::NumEventsTestStat: public RooStats::TestStatistic. NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting.; It should probably support simple cuts as well. Function Members (Methods); public:. virtual~NumEventsTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet&); virtual const RooAbsArg*GetTestStatistic() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::NumEventsTestStatNumEventsTestStat(); RooStats::NumEventsTestStatNumEventsTestStat(RooAbsPdf& pdf); RooStats::NumEventsTestStatNumEventsTestStat(const RooStats::NumEventsTestStat&); RooStats::NumEventsTestStat&operator=(const RooStats::NumEventsTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. RooAbsPdf*fPdf. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; NumEventsTestStat(); { }. NumEventsTestStat(RooAbsPdf& pdf). virtual ~NumEventsTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& data, RooArgSet& ); Main interface to evaluate the test statistic on a dataset. const RooAbsArg* GetTestStatistic() const; Get the TestStatistic. {return fPdf;}. const TString GetVarName() const; {return ""Number of events"";}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: NumEventsTestStat.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-11-03 20:09; This page has ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__NumEventsTestStat.html:325,Test,TestStatistic,325,root/html532/RooStats__NumEventsTestStat.html,https://root.cern,https://root.cern/root/html532/RooStats__NumEventsTestStat.html,3,['Test'],['TestStatistic']
Testability,". RooStats::NumEventsTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::NumEventsTestStat. class RooStats::NumEventsTestStat: public RooStats::TestStatistic. NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting.; It should probably support simple cuts as well. Function Members (Methods); public:. virtual~NumEventsTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet&); virtual const RooArgSet*RooStats::TestStatistic::GetDetailedOutput() const; virtual const RooAbsArg*GetTestStatistic() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::NumEventsTestStatNumEventsTestStat(); RooStats::NumEventsTestStatNumEventsTestStat(RooAbsPdf& pdf); RooStats::NumEventsTestStatNumEventsTestStat(const RooStats::NumEventsTestStat&); RooStats::NumEventsTestStat&operator=(const RooStats::NumEventsTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(const RooStats::TestStatistic&). Data Members; private:. RooAbsPdf*fPdf. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; NumEventsTestStat(); { }. NumEventsTestStat(RooAbsPdf& pdf). virtual ~NumEventsTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& data, RooArgSet& ); Main interface to evaluate the test statistic on a dataset. const RooAbsArg* GetTestStatistic() const; Get the TestStatistic. {return fPdf;}. const TString GetVarName() const; {return ""Number of events"";}. » Author",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__NumEventsTestStat.html:325,Test,TestStatistic,325,root/html602/RooStats__NumEventsTestStat.html,https://root.cern,https://root.cern/root/html602/RooStats__NumEventsTestStat.html,4,['Test'],['TestStatistic']
Testability,". RooStats::NumEventsTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::NumEventsTestStat. class RooStats::NumEventsTestStat: public RooStats::TestStatistic. NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting.; It should probably support simple cuts as well. Function Members (Methods); public:. virtual~NumEventsTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet&); virtual const RooArgSet*RooStats::TestStatistic::GetDetailedOutput() const; virtual const RooAbsArg*GetTestStatistic() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::NumEventsTestStatNumEventsTestStat(); RooStats::NumEventsTestStatNumEventsTestStat(RooAbsPdf& pdf); RooStats::NumEventsTestStatNumEventsTestStat(const RooStats::NumEventsTestStat&); RooStats::NumEventsTestStat&operator=(const RooStats::NumEventsTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:. RooAbsPdf*fPdf. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; NumEventsTestStat(); { }. NumEventsTestStat(RooAbsPdf& pdf). virtual ~NumEventsTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& data, RooArgSet& ); Main interface to evaluate the test statistic on a dataset. const RooAbsArg* GetTestStatistic() const; Get the TestStatistic. {return fPdf;}. const TString GetVarName() const; {return ""Number of events"";}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last gene",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__NumEventsTestStat.html:325,Test,TestStatistic,325,root/html534/RooStats__NumEventsTestStat.html,https://root.cern,https://root.cern/root/html534/RooStats__NumEventsTestStat.html,4,['Test'],['TestStatistic']
Testability,". RooStats::NumberCountingPdfFactory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::NumberCountingPdfFactory. class RooStats::NumberCountingPdfFactory. A factory for building PDFs and data for a number counting combination. ; The factory produces a PDF for N channels with uncorrelated background ; uncertainty. Correlations can be added by extending this PDF with additional terms.; The factory relates the signal in each channel to a master signal strength times the ; expected signal in each channel. Thus, the final test is performed on the master signal strength.; This yields a more powerful test than letting signal in each channel be independent. The problem has been studied in these references:. http://arxiv.org/abs/physics/0511028; http://arxiv.org/abs/physics/0702156; http://cdsweb.cern.ch/record/1099969?ln=en. One can incorporate uncertainty on the expected signal by adding additional terms.; For the future, perhaps this factory should be extended to include the efficiency terms automatically. Function Members (Methods); public:. virtual~NumberCountingPdfFactory(); voidAddData(Double_t* mainMeas, Double_t* bkgMeas, Double_t* db, Int_t nbins, RooWorkspace* ws, const char* dsName = ""NumberCountingData""); voidAddDataWithSideband(Double_t* mainMeas, Double_t* sideband, Double_t* tau, Int_t nbins, RooWorkspace* ws, const char* dsName = ""ExpectedNumberCountingData""); voidAddExpData(Double_t* sigExp, Double_t* bkgExp, Double_t* db, Int_t nbins, RooWorkspace* ws, const char* dsName = ""ExpectedNumberCountingData""); voidAddExpDataWithSideband(Double_t* sigExp, Double_t* bkgExp, Double_t* tau, Int_t nbins, RooWorkspace* ws, const char* dsName = ""NumberCountingData""); voidAddModel(Double_t* sigExp, Int_t nchan, RooWorkspace* ws, const char* pdfName = ""CombinedPdf"", const char* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__NumberCountingPdfFactory.html:721,test,test,721,root/html526/RooStats__NumberCountingPdfFactory.html,https://root.cern,https://root.cern/root/html526/RooStats__NumberCountingPdfFactory.html,12,['test'],['test']
Testability,". RooStats::NumberCountingPdfFactory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::NumberCountingPdfFactory. class RooStats::NumberCountingPdfFactory. A factory for building PDFs and data for a number counting combination. ; The factory produces a PDF for N channels with uncorrelated background ; uncertainty. Correlations can be added by extending this PDF with additional terms.; The factory relates the signal in each channel to a master signal strength times the ; expected signal in each channel. Thus, the final test is performed on the master signal strength.; This yields a more powerful test than letting signal in each channel be independent. The problem has been studied in these references:. http://arxiv.org/abs/physics/0511028; http://arxiv.org/abs/physics/0702156; http://cdsweb.cern.ch/record/1099969?ln=en. One can incorporate uncertainty on the expected signal by adding additional terms.; For the future, perhaps this factory should be extended to include the efficiency terms automatically. Function Members (Methods); public:. virtual~NumberCountingPdfFactory(); voidAddData(Double_t* mainMeas, Double_t* bkgMeas, Double_t* db, Int_t nbins, RooWorkspace* ws, const char* dsName = ""NumberCountingData""); voidAddDataWithSideband(Double_t* mainMeas, Double_t* sideband, Double_t* tau, Int_t nbins, RooWorkspace* ws, const char* dsName = ""ExpectedNumberCountingData""); voidAddExpData(Double_t* sigExp, Double_t* bkgExp, Double_t* db, Int_t nbins, RooWorkspace* ws, const char* dsName = ""ExpectedNumberCountingData""); voidAddExpDataWithSideband(Double_t* sigExp, Double_t* bkgExp, Double_t* tau, Int_t nbins, RooWorkspace* ws, const char* dsName = ""NumberCountingData""); voidAddModel(Double_t* sigExp, Int_t nchan, RooWorkspace* ws, const char* pdfName = ""CombinedPdf"", const char* masterSign",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__NumberCountingPdfFactory.html:711,test,test,711,root/html528/RooStats__NumberCountingPdfFactory.html,https://root.cern,https://root.cern/root/html528/RooStats__NumberCountingPdfFactory.html,2,['test'],['test']
Testability,". RooStats::NumberCountingUtils. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::NumberCountingUtils. namespace RooStats::NumberCountingUtils. NumberCountingUtils. These are RooStats standalone utilities; that calculate the p-value or Z value (eg. significance in; 1-sided Gaussian standard deviations) for a number counting experiment.; This is a hypothesis test between background only and signal-plus-background.; The background estimate has uncertainty derived from an auxiliary or sideband; measurement. This is based on code and comments from Bob Cousins ; and on the following papers:. Evaluation of three methods for calculating statistical significance when incorporating a; systematic uncertainty into a test of the background-only hypothesis for a Poisson process; Authors: Robert D. Cousins, James T. Linnemann, Jordan Tucker; http://arxiv.org/abs/physics/0702156; NIM A 595 (2008) 480--501. Statistical Challenges for Searches for New Physics at the LHC; Authors: Kyle Cranmer; http://arxiv.org/abs/physics/0511028. Measures of Significance in HEP and Astrophysics; Authors: J. T. Linnemann; http://arxiv.org/abs/physics/0312059. The problem is treated in a fully frequentist fashion by ; interpreting the relative background uncertainty as; being due to an auxiliary or sideband observation ; that is also Poisson distributed with only background.; Finally, one considers the test as a ratio of Poisson means; where an interval is well known based on the conditioning on the total; number of events and the binomial distribution. In short, this is an exact frequentist solution to the problem of; a main measurement x distributed as a Poisson around s+b and a sideband or ; auxiliary measurement y distributed as a Poisson around tau*b. Eg. . Naming conventions:; Exp = Expected; Obs = Observed; P = p-value; Z",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__NumberCountingUtils.html:536,test,test,536,root/html526/RooStats__NumberCountingUtils.html,https://root.cern,https://root.cern/root/html526/RooStats__NumberCountingUtils.html,2,['test'],['test']
Testability,". RooStats::NumberCountingUtils. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::NumberCountingUtils. namespace RooStats::NumberCountingUtils. NumberCountingUtils. These are RooStats standalone utilities; that calculate the p-value or Z value (eg. significance in; 1-sided Gaussian standard deviations) for a number counting experiment.; This is a hypothesis test between background only and signal-plus-background.; The background estimate has uncertainty derived from an auxiliary or sideband; measurement. This is based on code and comments from Bob Cousins ; and on the following papers:. Evaluation of three methods for calculating statistical significance when incorporating a; systematic uncertainty into a test of the background-only hypothesis for a Poisson process; Authors: Robert D. Cousins, James T. Linnemann, Jordan Tucker; http://arxiv.org/abs/physics/0702156; NIM A 595 (2008) 480--501. Statistical Challenges for Searches for New Physics at the LHC; Authors: Kyle Cranmer; http://arxiv.org/abs/physics/0511028. Measures of Significance in HEP and Astrophysics; Authors: J. T. Linnemann; http://arxiv.org/abs/physics/0312059. The problem is treated in a fully frequentist fashion by ; interpreting the relative background uncertainty as; being due to an auxiliary or sideband observation ; that is also Poisson distributed with only background.; Finally, one considers the test as a ratio of Poisson means; where an interval is well known based on the conditioning on the total; number of events and the binomial distribution. In short, this is an exact frequentist solution to the problem of; a main measurement x distributed as a Poisson around s+b and a sideband or ; auxiliary measurement y distributed as a Poisson around tau*b. Eg. . Naming conventions:; Exp = Expected; Obs = Observed; P = p-value; Z = Z-value",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__NumberCountingUtils.html:526,test,test,526,root/html528/RooStats__NumberCountingUtils.html,https://root.cern,https://root.cern/root/html528/RooStats__NumberCountingUtils.html,2,['test'],['test']
Testability,". RooStats::NumberCountingUtils. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::NumberCountingUtils. namespace RooStats::NumberCountingUtils. NumberCountingUtils. These are RooStats standalone utilities; that calculate the p-value or Z value (eg. significance in; 1-sided Gaussian standard deviations) for a number counting experiment.; This is a hypothesis test between background only and signal-plus-background.; The background estimate has uncertainty derived from an auxiliary or sideband; measurement. This is based on code and comments from Bob Cousins ; and on the following papers:. Evaluation of three methods for calculating statistical significance when incorporating a; systematic uncertainty into a test of the background-only hypothesis for a Poisson process; Authors: Robert D. Cousins, James T. Linnemann, Jordan Tucker; http://arxiv.org/abs/physics/0702156; NIM A 595 (2008) 480--501. Statistical Challenges for Searches for New Physics at the LHC; Authors: Kyle Cranmer; http://arxiv.org/abs/physics/0511028. Measures of Significance in HEP and Astrophysics; Authors: J. T. Linnemann; http://arxiv.org/abs/physics/0312059. The problem is treated in a fully frequentist fashion by ; interpreting the relative background uncertainty as; being due to an auxiliary or sideband observation ; that is also Poisson distributed with only background.; Finally, one considers the test as a ratio of Poisson means; where an interval is well known based on the conditioning on the total; number of events and the binomial distribution. In short, this is an exact frequentist solution to the problem of; a main measurement x distributed as a Poisson around s+b and a sideband or ; auxiliary measurement y distributed as a Poisson around tau*b. Eg. . Naming conventions:; Exp = Expected; Obs = Observed; P = p-value;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__NumberCountingUtils.html:538,test,test,538,root/html530/RooStats__NumberCountingUtils.html,https://root.cern,https://root.cern/root/html530/RooStats__NumberCountingUtils.html,6,['test'],['test']
Testability,". RooStats::ProfileLikelihoodCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ProfileLikelihoodCalculator. class RooStats::ProfileLikelihoodCalculator: public RooStats::CombinedCalculator, public TNamed. ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator ; (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals). ; The tool uses the profile likelihood ratio as a test statistic, and assumes that Wilks' theorem is valid. ; Wilks' theorem states that -2* log (profile likelihood ratio) is asymptotically distributed as a chi^2 distribution ; with N-dof, where N is the number of degrees of freedom. Thus, p-values can be constructed and the profile likelihood ratio; can be used to construct a LikelihoodInterval.; (In the future, this class could be extended to use toy Monte Carlo to calibrate the distribution of the test statistic). Usage: It uses the interface of the CombinedCalculator, so that it can be configured by specifying:. a model common model (eg. a family of specific models which includes both the null and alternate),; a data set, ; a set of parameters of interest. The nuisance parameters will be all other parameters of the model ; a set of parameters of which specify the null hypothesis (including values and const/non-const status) . The interface allows one to pass the model, data, and parameters either directly or via a ModelConfig class.; The alternate hypothesis leaves the parameter free to take any value other than those specified by the null hypotesis. There is therefore no need to ; specify the alternate parameters. . After configuring the calculator, one only needs to ask GetHypoTest() (which will return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__ProfileLikelihoodCalculator.html:646,test,test,646,root/html526/RooStats__ProfileLikelihoodCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__ProfileLikelihoodCalculator.html,2,"['log', 'test']","['log', 'test']"
Testability,". RooStats::ProfileLikelihoodCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ProfileLikelihoodCalculator. class RooStats::ProfileLikelihoodCalculator: public RooStats::CombinedCalculator. ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator ; (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals). ; The tool uses the profile likelihood ratio as a test statistic, and assumes that Wilks' theorem is valid. ; Wilks' theorem states that -2* log (profile likelihood ratio) is asymptotically distributed as a chi^2 distribution ; with N-dof, where N is the number of degrees of freedom. Thus, p-values can be constructed and the profile likelihood ratio; can be used to construct a LikelihoodInterval.; (In the future, this class could be extended to use toy Monte Carlo to calibrate the distribution of the test statistic). Usage: It uses the interface of the CombinedCalculator, so that it can be configured by specifying:. a model common model (eg. a family of specific models which includes both the null and alternate),; a data set, ; a set of parameters of interest. The nuisance parameters will be all other parameters of the model ; a set of parameters of which specify the null hypothesis (including values and const/non-const status) . The interface allows one to pass the model, data, and parameters either directly or via a ModelConfig class.; The alternate hypothesis leaves the parameter free to take any value other than those specified by the null hypotesis. There is therefore no need to ; specify the alternate parameters. . After configuring the calculator, one only needs to ask GetHypoTest() (which will return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). Th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__ProfileLikelihoodCalculator.html:631,test,test,631,root/html530/RooStats__ProfileLikelihoodCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__ProfileLikelihoodCalculator.html,10,"['log', 'test']","['log', 'test']"
Testability,". RooStats::ProfileLikelihoodCalculator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::ProfileLikelihoodCalculator. class RooStats::ProfileLikelihoodCalculator: public RooStats::CombinedCalculator. ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator ; (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals). ; The tool uses the profile likelihood ratio as a test statistic, and assumes that Wilks' theorem is valid. ; Wilks' theorem states that -2* log (profile likelihood ratio) is asymptotically distributed as a chi^2 distribution ; with N-dof, where N is the number of degrees of freedom. Thus, p-values can be constructed and the profile likelihood ratio; can be used to construct a LikelihoodInterval.; (In the future, this class could be extended to use toy Monte Carlo to calibrate the distribution of the test statistic). Usage: It uses the interface of the CombinedCalculator, so that it can be configured by specifying:. a model common model (eg. a family of specific models which includes both the null and alternate),; a data set, ; a set of parameters of interest. The nuisance parameters will be all other parameters of the model ; a set of parameters of which specify the null hypothesis (including values and const/non-const status) . The interface allows one to pass the model, data, and parameters either directly or via a ModelConfig class.; The alternate hypothesis leaves the parameter free to take any value other than those specified by the null hypotesis. There is therefore no need to ; specify the alternate parameters. . After configuring the calculator, one only needs to ask GetHypoTest() (which will return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__ProfileLikelihoodCalculator.html:621,test,test,621,root/html528/RooStats__ProfileLikelihoodCalculator.html,https://root.cern,https://root.cern/root/html528/RooStats__ProfileLikelihoodCalculator.html,2,"['log', 'test']","['log', 'test']"
Testability,". RooStats::ProfileLikelihoodTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ProfileLikelihoodTestStat. class RooStats::ProfileLikelihoodTestStat: public RooStats::TestStatistic. ProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile; likelihood ratio at a particular parameter point given a dataset. It does not constitute a statistical test, for that one may either use:. the ProfileLikelihoodCalculator that relies on asymptotic properties of the Profile Likelihood Ratio; the Neyman Construction classes with this class as a test statistic; the Hybrid Calculator class with this class as a test statistic. Function Members (Methods); public:. virtual~ProfileLikelihoodTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& paramsOfInterest); virtual const RooAbsArg*GetTestStatistic() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::TestStatistic&RooStats::TestStatistic::operator=(const RooStats::TestStatistic&); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(RooAbsPdf& pdf); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(const RooStats::ProfileLikelihoodTestStat&); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. const RooArgSet*fCachedBestFitParams; RooAbsData*fLastData; RooNLLVar*fNll; RooAbsPdf*fPdf; RooProfileLL*fProfile. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ProfileLikelihoodTestStat(RooAbsPdf& pdf). virtual ~ProfileLikelihoodTestStat(); delete fRand;; delete fTestStatistic;. Double_t Evaluate(RooAbsData& data, RooArgSet& paramsOfInterest); Main interface to evaluate the test statistic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__ProfileLikelihoodTestStat.html:347,Test,TestStatistic,347,root/html526/RooStats__ProfileLikelihoodTestStat.html,https://root.cern,https://root.cern/root/html526/RooStats__ProfileLikelihoodTestStat.html,5,"['Test', 'test']","['TestStatistic', 'test']"
Testability,". RooStats::ProfileLikelihoodTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::ProfileLikelihoodTestStat. class RooStats::ProfileLikelihoodTestStat: public RooStats::TestStatistic. ProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile; likelihood ratio at a particular parameter point given a dataset. It does not constitute a statistical test, for that one may either use:. the ProfileLikelihoodCalculator that relies on asymptotic properties of the Profile Likelihood Ratio; the Neyman Construction classes with this class as a test statistic; the Hybrid Calculator class with this class as a test statistic. Function Members (Methods); public:. virtual~ProfileLikelihoodTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& paramsOfInterest); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::TestStatistic&RooStats::TestStatistic::operator=(const RooStats::TestStatistic&); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(RooAbsPdf& pdf); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(const RooStats::ProfileLikelihoodTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. const RooArgSet*fCachedBestFitParams; RooAbsData*fLastData; RooNLLVar*fNll; RooAbsPdf*fPdf; RooProfileLL*fProfile. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ProfileLikelihoodTestStat(); Proof constructor. Do not use. ProfileLikelihoodTestStat(RooAbsPdf& pdf). virtual ~ProfileLikelihoodTestStat(); delete fRand;; delete fTestStatistic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__ProfileLikelihoodTestStat.html:337,Test,TestStatistic,337,root/html528/RooStats__ProfileLikelihoodTestStat.html,https://root.cern,https://root.cern/root/html528/RooStats__ProfileLikelihoodTestStat.html,5,"['Test', 'test']","['TestStatistic', 'test']"
Testability,". RooStats::ProfileLikelihoodTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ProfileLikelihoodTestStat. class RooStats::ProfileLikelihoodTestStat: public RooStats::TestStatistic. ProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile; likelihood ratio at a particular parameter point given a dataset. It does not constitute a statistical test, for that one may either use:. the ProfileLikelihoodCalculator that relies on asymptotic properties of the Profile Likelihood Ratio; the Neyman Construction classes with this class as a test statistic; the Hybrid Calculator class with this class as a test statistic. Function Members (Methods); public:. virtual~ProfileLikelihoodTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& paramsOfInterest); virtual Double_tEvaluateProfileLikelihood(int type, RooAbsData& data, RooArgSet& paramsOfInterest); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::TestStatistic&RooStats::TestStatistic::operator=(const RooStats::TestStatistic&); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(RooAbsPdf& pdf); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(const RooStats::ProfileLikelihoodTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; static voidSetAlwaysReuseNLL(Bool_t flag); voidSetMinimizer(const char* minimizer); voidSetOneSided(Bool_t flag = true); voidSetPrintLevel(Int_t printlevel); voidSetReuseNLL(Bool_t flag); voidSetStrategy(Int_t strategy); voidSetTolerance(double tol); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. doubleGetMinNLL(int& status). Data",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__ProfileLikelihoodTestStat.html:349,Test,TestStatistic,349,root/html532/RooStats__ProfileLikelihoodTestStat.html,https://root.cern,https://root.cern/root/html532/RooStats__ProfileLikelihoodTestStat.html,5,"['Test', 'test']","['TestStatistic', 'test']"
Testability,". RooStats::ProfileLikelihoodTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ProfileLikelihoodTestStat. class RooStats::ProfileLikelihoodTestStat: public RooStats::TestStatistic. ProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile; likelihood ratio at a particular parameter point given a dataset. It does not constitute a statistical test, for that one may either use:. the ProfileLikelihoodCalculator that relies on asymptotic properties of the Profile Likelihood Ratio; the Neyman Construction classes with this class as a test statistic; the Hybrid Calculator class with this class as a test statistic. Function Members (Methods); public:. virtual~ProfileLikelihoodTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& paramsOfInterest); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::TestStatistic&RooStats::TestStatistic::operator=(const RooStats::TestStatistic&); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(RooAbsPdf& pdf); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(const RooStats::ProfileLikelihoodTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; static voidSetAlwaysReuseNLL(Bool_t flag); voidSetOneSided(Bool_t flag = true); voidSetReuseNLL(Bool_t flag); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. const RooArgSet*fCachedBestFitParams; RooAbsData*fLastData; RooNLLVar*fNll!; Bool_tfOneSided; RooAbsPdf*fPdf; RooProfileLL*fProfile!; Bool_tfReuseNll; static Bool_tfgAlwaysReuseNll. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function doc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__ProfileLikelihoodTestStat.html:349,Test,TestStatistic,349,root/html530/RooStats__ProfileLikelihoodTestStat.html,https://root.cern,https://root.cern/root/html530/RooStats__ProfileLikelihoodTestStat.html,5,"['Test', 'test']","['TestStatistic', 'test']"
Testability,". RooStats::ProfileLikelihoodTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ProfileLikelihoodTestStat. class RooStats::ProfileLikelihoodTestStat: public RooStats::TestStatistic. ProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile; likelihood ratio at a particular parameter point given a dataset. It does not constitute a statistical test, for that one may either use:. the ProfileLikelihoodCalculator that relies on asymptotic properties of the Profile Likelihood Ratio; the Neyman Construction classes with this class as a test statistic; the Hybrid Calculator class with this class as a test statistic. Function Members (Methods); public:. virtual~ProfileLikelihoodTestStat(); static TClass*Class(); virtual voidEnableDetailedOutput(bool e = true, bool withErrorsAndPulls = false); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& paramsOfInterest); virtual Double_tEvaluateProfileLikelihood(int type, RooAbsData& data, RooArgSet& paramsOfInterest); virtual const RooArgSet*GetDetailedOutput() const; virtual RooAbsPdf*GetPdf() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; boolIsOneSidedDiscovery() const; boolIsTwoSided() const; RooStats::TestStatistic&RooStats::TestStatistic::operator=(const RooStats::TestStatistic&); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(RooAbsPdf& pdf); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(const RooStats::ProfileLikelihoodTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; static voidSetAlwaysReuseNLL(Bool_t flag); virtual voidSetConditionalObservables(const RooArgSet& set); voidSetLOffset(Bool_t flag = kTRUE); voidSetMinimizer(const char* minimizer); voidSe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__ProfileLikelihoodTestStat.html:349,Test,TestStatistic,349,root/html534/RooStats__ProfileLikelihoodTestStat.html,https://root.cern,https://root.cern/root/html534/RooStats__ProfileLikelihoodTestStat.html,5,"['Test', 'test']","['TestStatistic', 'test']"
Testability,". RooStats::ProfileLikelihoodTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ProfileLikelihoodTestStat. class RooStats::ProfileLikelihoodTestStat: public RooStats::TestStatistic. Function Members (Methods); public:. virtual~ProfileLikelihoodTestStat(); static TClass*Class(); virtual voidEnableDetailedOutput(bool e = true, bool withErrorsAndPulls = false); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& paramsOfInterest); virtual Double_tEvaluateProfileLikelihood(int type, RooAbsData& data, RooArgSet& paramsOfInterest); virtual const RooArgSet*GetDetailedOutput() const; virtual RooAbsPdf*GetPdf() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; boolIsOneSidedDiscovery() const; boolIsTwoSided() const; RooStats::ProfileLikelihoodTestStat&operator=(const RooStats::ProfileLikelihoodTestStat&); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(RooAbsPdf& pdf); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(const RooStats::ProfileLikelihoodTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; static voidSetAlwaysReuseNLL(Bool_t flag); virtual voidSetConditionalObservables(const RooArgSet& set); voidSetLOffset(Bool_t flag = kTRUE); voidSetMinimizer(const char* minimizer); voidSetOneSided(Bool_t flag = true); voidSetOneSidedDiscovery(Bool_t flag = true); voidSetPrintLevel(Int_t printlevel); voidSetReuseNLL(Bool_t flag); voidSetSigned(Bool_t flag = true); voidSetStrategy(Int_t strategy); voidSetTolerance(double tol); virtual voidSetVarName(const char* name); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); RooStats::TestStatisticRooSt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__ProfileLikelihoodTestStat.html:373,Test,TestStatistic,373,root/html602/RooStats__ProfileLikelihoodTestStat.html,https://root.cern,https://root.cern/root/html602/RooStats__ProfileLikelihoodTestStat.html,2,['Test'],['TestStatistic']
Testability,". RooStats::RatioOfProfiledLikelihoodsTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::RatioOfProfiledLikelihoodsTestStat. class RooStats::RatioOfProfiledLikelihoodsTestStat: public RooStats::TestStatistic. TestStatistic that returns the ratio of profiled likelihoods. Function Members (Methods); public:. virtual~RatioOfProfiledLikelihoodsTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullParamsOfInterest); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::RatioOfProfiledLikelihoodsTestStat&operator=(const RooStats::RatioOfProfiledLikelihoodsTestStat&); Double_tProfiledLikelihood(RooAbsData& data, RooArgSet& poi, RooAbsPdf& pdf); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; RooStats::RatioOfProfiledLikelihoodsTestStatRatioOfProfiledLikelihoodsTestStat(); RooStats::RatioOfProfiledLikelihoodsTestStatRatioOfProfiledLikelihoodsTestStat(const RooStats::RatioOfProfiledLikelihoodsTestStat&); RooStats::RatioOfProfiledLikelihoodsTestStatRatioOfProfiledLikelihoodsTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet* altPOI = 0); voidSetSubtractMLE(bool subtract); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. RooArgSet*fAltPOI; RooAbsPdf*fAltPdf; RooAbsPdf*fNullPdf; Bool_tfSubtractMLE. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RatioOfProfiledLikelihoodsTestStat(); Proof constructor. Don't use. RatioOfProfiledLikelihoodsTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet* altPOI = 0). Calculates the ratio of profiled likelihoods. 	 By default the calculation is:. 	 Lambda(mu_alt , conditional MLE for alt nuisance); 	log ---------------------------------------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__RatioOfProfiledLikelihoodsTestStat.html:364,Test,TestStatistic,364,root/html528/RooStats__RatioOfProfiledLikelihoodsTestStat.html,https://root.cern,https://root.cern/root/html528/RooStats__RatioOfProfiledLikelihoodsTestStat.html,3,['Test'],['TestStatistic']
Testability,". RooStats::RatioOfProfiledLikelihoodsTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::RatioOfProfiledLikelihoodsTestStat. class RooStats::RatioOfProfiledLikelihoodsTestStat: public RooStats::TestStatistic. TestStatistic that returns the ratio of profiled likelihoods. Function Members (Methods); public:. virtual~RatioOfProfiledLikelihoodsTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullParamsOfInterest); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::RatioOfProfiledLikelihoodsTestStat&operator=(const RooStats::RatioOfProfiledLikelihoodsTestStat&); Double_tProfiledLikelihood(RooAbsData& data, RooArgSet& poi, RooAbsPdf& pdf); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; RooStats::RatioOfProfiledLikelihoodsTestStatRatioOfProfiledLikelihoodsTestStat(); RooStats::RatioOfProfiledLikelihoodsTestStatRatioOfProfiledLikelihoodsTestStat(const RooStats::RatioOfProfiledLikelihoodsTestStat&); RooStats::RatioOfProfiledLikelihoodsTestStatRatioOfProfiledLikelihoodsTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet* altPOI = 0); voidSetSubtractMLE(bool subtract); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. RooArgSet*fAltPOI; RooAbsPdf*fAltPdf; RooAbsPdf*fNullPdf; Bool_tfSubtractMLE. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RatioOfProfiledLikelihoodsTestStat(); Proof constructor. Don't use. RatioOfProfiledLikelihoodsTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet* altPOI = 0). Calculates the ratio of profiled likelihoods. 	 By default the calculation is:. 	 Lambda(mu_alt , conditional MLE for alt nuisance); 	log ---------------------------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__RatioOfProfiledLikelihoodsTestStat.html:376,Test,TestStatistic,376,root/html530/RooStats__RatioOfProfiledLikelihoodsTestStat.html,https://root.cern,https://root.cern/root/html530/RooStats__RatioOfProfiledLikelihoodsTestStat.html,3,['Test'],['TestStatistic']
Testability,". RooStats::RatioOfProfiledLikelihoodsTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::RatioOfProfiledLikelihoodsTestStat. class RooStats::RatioOfProfiledLikelihoodsTestStat: public RooStats::TestStatistic. TestStatistic that returns the ratio of profiled likelihoods. Function Members (Methods); public:. virtual~RatioOfProfiledLikelihoodsTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullParamsOfInterest); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::TestStatistic&RooStats::TestStatistic::operator=(const RooStats::TestStatistic&); Double_tProfiledLikelihood(RooAbsData& data, RooArgSet& poi, RooAbsPdf& pdf); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; RooStats::RatioOfProfiledLikelihoodsTestStatRatioOfProfiledLikelihoodsTestStat(); RooStats::RatioOfProfiledLikelihoodsTestStatRatioOfProfiledLikelihoodsTestStat(const RooStats::RatioOfProfiledLikelihoodsTestStat&); RooStats::RatioOfProfiledLikelihoodsTestStatRatioOfProfiledLikelihoodsTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet* altPOI = 0); static voidSetAlwaysReuseNLL(Bool_t flag); voidSetMinimizer(const char* minimizer); voidSetPrintLevel(Int_t printLevel); voidSetReuseNLL(Bool_t flag); voidSetStrategy(Int_t strategy); voidSetSubtractMLE(bool subtract); voidSetTolerance(Double_t tol); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. RooArgSet*fAltPOI; RooStats::ProfileLikelihoodTestStatfAltProfile; RooStats::ProfileLikelihoodTestStatfNullProfile; Bool_tfSubtractMLE; static Bool_tfgAlwaysReuseNll. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RatioOfProfiledLikelihoodsTestStat(); Proof const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__RatioOfProfiledLikelihoodsTestStat.html:376,Test,TestStatistic,376,root/html532/RooStats__RatioOfProfiledLikelihoodsTestStat.html,https://root.cern,https://root.cern/root/html532/RooStats__RatioOfProfiledLikelihoodsTestStat.html,2,['Test'],['TestStatistic']
Testability,". RooStats::RatioOfProfiledLikelihoodsTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::RatioOfProfiledLikelihoodsTestStat. class RooStats::RatioOfProfiledLikelihoodsTestStat: public RooStats::TestStatistic. TestStatistic that returns the ratio of profiled likelihoods. Function Members (Methods); public:. virtual~RatioOfProfiledLikelihoodsTestStat(); static TClass*Class(); virtual voidEnableDetailedOutput(bool e = true); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullParamsOfInterest); virtual const RooArgSet*GetDetailedOutput() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::TestStatistic&RooStats::TestStatistic::operator=(const RooStats::TestStatistic&); Double_tProfiledLikelihood(RooAbsData& data, RooArgSet& poi, RooAbsPdf& pdf); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; RooStats::RatioOfProfiledLikelihoodsTestStatRatioOfProfiledLikelihoodsTestStat(); RooStats::RatioOfProfiledLikelihoodsTestStatRatioOfProfiledLikelihoodsTestStat(const RooStats::RatioOfProfiledLikelihoodsTestStat&); RooStats::RatioOfProfiledLikelihoodsTestStatRatioOfProfiledLikelihoodsTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet* altPOI = 0); static voidSetAlwaysReuseNLL(Bool_t flag); virtual voidSetConditionalObservables(const RooArgSet& set); voidSetMinimizer(const char* minimizer); voidSetPrintLevel(Int_t printLevel); voidSetReuseNLL(Bool_t flag); voidSetStrategy(Int_t strategy); voidSetSubtractMLE(bool subtract); voidSetTolerance(Double_t tol); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:. RooArgSet*fAltPOI; RooStats::ProfileLikelihoodTestStatfAltProfile; RooArgSet*fDetailedOutput; boolfDetailedOutputEnabled; RooSt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__RatioOfProfiledLikelihoodsTestStat.html:376,Test,TestStatistic,376,root/html534/RooStats__RatioOfProfiledLikelihoodsTestStat.html,https://root.cern,https://root.cern/root/html534/RooStats__RatioOfProfiledLikelihoodsTestStat.html,2,['Test'],['TestStatistic']
Testability,". RooStats::RatioOfProfiledLikelihoodsTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::RatioOfProfiledLikelihoodsTestStat. class RooStats::RatioOfProfiledLikelihoodsTestStat: public RooStats::TestStatistic. Function Members (Methods); public:. virtual~RatioOfProfiledLikelihoodsTestStat(); static TClass*Class(); virtual voidEnableDetailedOutput(bool e = true); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullParamsOfInterest); virtual const RooArgSet*GetDetailedOutput() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::RatioOfProfiledLikelihoodsTestStat&operator=(const RooStats::RatioOfProfiledLikelihoodsTestStat&); Double_tProfiledLikelihood(RooAbsData& data, RooArgSet& poi, RooAbsPdf& pdf); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; RooStats::RatioOfProfiledLikelihoodsTestStatRatioOfProfiledLikelihoodsTestStat(); RooStats::RatioOfProfiledLikelihoodsTestStatRatioOfProfiledLikelihoodsTestStat(const RooStats::RatioOfProfiledLikelihoodsTestStat&); RooStats::RatioOfProfiledLikelihoodsTestStatRatioOfProfiledLikelihoodsTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet* altPOI = 0); static voidSetAlwaysReuseNLL(Bool_t flag); virtual voidSetConditionalObservables(const RooArgSet& set); voidSetMinimizer(const char* minimizer); voidSetPrintLevel(Int_t printLevel); voidSetReuseNLL(Bool_t flag); voidSetStrategy(Int_t strategy); voidSetSubtractMLE(bool subtract); voidSetTolerance(Double_t tol); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(const RooStats::TestStatistic&). D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__RatioOfProfiledLikelihoodsTestStat.html:400,Test,TestStatistic,400,root/html602/RooStats__RatioOfProfiledLikelihoodsTestStat.html,https://root.cern,https://root.cern/root/html602/RooStats__RatioOfProfiledLikelihoodsTestStat.html,2,['Test'],['TestStatistic']
Testability,". RooStats::SamplingDistribution. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::SamplingDistribution. class RooStats::SamplingDistribution: public TNamed. SamplingDistribution :. This class simply holds a sampling distribution of some test statistic.; The distribution can either be an emperical distribution (eg. the samples themselves) or; a weighted set of points (eg. for the FFT method).; The class supports merging. Function Members (Methods); public:. virtual~SamplingDistribution(); voidTObject::AbstractMethod(const char* method) const; voidAdd(RooStats::SamplingDistribution* other); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__SamplingDistribution.html:436,test,test,436,root/html526/RooStats__SamplingDistribution.html,https://root.cern,https://root.cern/root/html526/RooStats__SamplingDistribution.html,1,['test'],['test']
Testability,". RooStats::SamplingDistribution. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::SamplingDistribution. class RooStats::SamplingDistribution: public TNamed. SamplingDistribution :. This class simply holds a sampling distribution of some test statistic.; The distribution can either be an empirical distribution (eg. the samples themselves) or; a weighted set of points (eg. for the FFT method).; The class supports merging. Function Members (Methods); public:. virtual~SamplingDistribution(); voidTObject::AbstractMethod(const char* method) const; voidAdd(const RooStats::SamplingDistribution* other); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tCDF(Double_t x) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__SamplingDistribution.html:436,test,test,436,root/html528/RooStats__SamplingDistribution.html,https://root.cern,https://root.cern/root/html528/RooStats__SamplingDistribution.html,6,['test'],['test']
Testability,". RooStats::SimpleLikelihoodRatioTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::SimpleLikelihoodRatioTestStat. class RooStats::SimpleLikelihoodRatioTestStat: public RooStats::TestStatistic. ; SimpleLikelihoodRatioTestStat: TestStatistic that returns -log(L[null] / L[alt]) where; L is the likelihood.; . Function Members (Methods); public:. virtual~SimpleLikelihoodRatioTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::SimpleLikelihoodRatioTestStat&operator=(const RooStats::SimpleLikelihoodRatioTestStat&); boolParamsAreEqual(); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; voidSetAltParameters(const RooArgSet& altParameters); voidSetNullParameters(const RooArgSet& nullParameters); virtual voidShowMembers(TMemberInspector& insp); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(const RooStats::SimpleLikelihoodRatioTestStat&); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. RooArgSet*fAltParameters; RooAbsPdf*fAltPdf; boolfFirstEval; RooArgSet*fNullParameters; RooAbsPdf*fNullPdf; RooWorkspacew. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleLikelihoodRatioTestStat(). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& al",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__SimpleLikelihoodRatioTestStat.html:349,Test,TestStatistic,349,root/html528/RooStats__SimpleLikelihoodRatioTestStat.html,https://root.cern,https://root.cern/root/html528/RooStats__SimpleLikelihoodRatioTestStat.html,3,"['Test', 'log']","['TestStatistic', 'log']"
Testability,". RooStats::SimpleLikelihoodRatioTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::SimpleLikelihoodRatioTestStat. class RooStats::SimpleLikelihoodRatioTestStat: public RooStats::TestStatistic. ; SimpleLikelihoodRatioTestStat: TestStatistic that returns -log(L[null] / L[alt]) where; L is the likelihood.; . Function Members (Methods); public:. virtual~SimpleLikelihoodRatioTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::SimpleLikelihoodRatioTestStat&operator=(const RooStats::SimpleLikelihoodRatioTestStat&); boolParamsAreEqual(); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; voidSetAltParameters(const RooArgSet& altParameters); static voidSetAlwaysReuseNLL(Bool_t flag); voidSetNullParameters(const RooArgSet& nullParameters); voidSetReuseNLL(Bool_t flag); virtual voidShowMembers(TMemberInspector& insp); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(const RooStats::SimpleLikelihoodRatioTestStat&); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. RooArgSet*fAltParameters; RooAbsPdf*fAltPdf; static Bool_tfAlwaysReuseNll; boolfFirstEval; RooNLLVar*fNllAlt! transient copy of the alt NLL; RooNLLVar*fNllNull! transient copy of the null NLL; RooArgSet*fNullParameters; RooAbsPdf*fNullPdf; Bool_tfReuseNll. Class Charts. Inheritance; Inherited M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__SimpleLikelihoodRatioTestStat.html:361,Test,TestStatistic,361,root/html532/RooStats__SimpleLikelihoodRatioTestStat.html,https://root.cern,https://root.cern/root/html532/RooStats__SimpleLikelihoodRatioTestStat.html,3,"['Test', 'log']","['TestStatistic', 'log']"
Testability,". RooStats::SimpleLikelihoodRatioTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::SimpleLikelihoodRatioTestStat. class RooStats::SimpleLikelihoodRatioTestStat: public RooStats::TestStatistic. ; SimpleLikelihoodRatioTestStat: TestStatistic that returns -log(L[null] / L[alt]) where; L is the likelihood.; . Function Members (Methods); public:. virtual~SimpleLikelihoodRatioTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::SimpleLikelihoodRatioTestStat&operator=(const RooStats::SimpleLikelihoodRatioTestStat&); boolParamsAreEqual(); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; voidSetAltParameters(const RooArgSet& altParameters); static voidsetAlwaysReuseNLL(Bool_t flag); voidSetNullParameters(const RooArgSet& nullParameters); voidsetReuseNLL(Bool_t flag); virtual voidShowMembers(TMemberInspector& insp); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(const RooStats::SimpleLikelihoodRatioTestStat&); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. RooArgSet*fAltParameters; RooAbsPdf*fAltPdf; static Bool_tfAlwaysReuseNll; boolfFirstEval; RooNLLVar*fNllAlt; RooNLLVar*fNllNull; RooArgSet*fNullParameters; RooAbsPdf*fNullPdf; Bool_tfReuseNll; RooWorkspacew. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__SimpleLikelihoodRatioTestStat.html:361,Test,TestStatistic,361,root/html530/RooStats__SimpleLikelihoodRatioTestStat.html,https://root.cern,https://root.cern/root/html530/RooStats__SimpleLikelihoodRatioTestStat.html,3,"['Test', 'log']","['TestStatistic', 'log']"
Testability,". RooStats::SimpleLikelihoodRatioTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::SimpleLikelihoodRatioTestStat. class RooStats::SimpleLikelihoodRatioTestStat: public RooStats::TestStatistic. ; SimpleLikelihoodRatioTestStat: TestStatistic that returns -log(L[null] / L[alt]) where; L is the likelihood.; . Function Members (Methods); public:. virtual~SimpleLikelihoodRatioTestStat(); static TClass*Class(); virtual voidEnableDetailedOutput(bool e = true); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const RooArgSet*GetDetailedOutput() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::SimpleLikelihoodRatioTestStat&operator=(const RooStats::SimpleLikelihoodRatioTestStat&); boolParamsAreEqual(); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; voidSetAltParameters(const RooArgSet& altParameters); static voidSetAlwaysReuseNLL(Bool_t flag); virtual voidSetConditionalObservables(const RooArgSet& set); voidSetNullParameters(const RooArgSet& nullParameters); voidSetReuseNLL(Bool_t flag); virtual voidShowMembers(TMemberInspector&); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(const RooStats::SimpleLikelihoodRatioTestStat&); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:. RooArgSet*fAltParameters; RooAbsPdf*fAltPdf; RooArgSetfConditionalObs; RooArgSet*fDetailedOutput!; boolfDetailedOut",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__SimpleLikelihoodRatioTestStat.html:361,Test,TestStatistic,361,root/html534/RooStats__SimpleLikelihoodRatioTestStat.html,https://root.cern,https://root.cern/root/html534/RooStats__SimpleLikelihoodRatioTestStat.html,3,"['Test', 'log']","['TestStatistic', 'log']"
Testability,". RooStats::SimpleLikelihoodRatioTestStat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::SimpleLikelihoodRatioTestStat. class RooStats::SimpleLikelihoodRatioTestStat: public RooStats::TestStatistic. Function Members (Methods); public:. virtual~SimpleLikelihoodRatioTestStat(); static TClass*Class(); virtual voidEnableDetailedOutput(bool e = true); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const RooArgSet*GetDetailedOutput() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::SimpleLikelihoodRatioTestStat&operator=(const RooStats::SimpleLikelihoodRatioTestStat&); boolParamsAreEqual(); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; voidSetAltParameters(const RooArgSet& altParameters); static voidSetAlwaysReuseNLL(Bool_t flag); virtual voidSetConditionalObservables(const RooArgSet& set); voidSetNullParameters(const RooArgSet& nullParameters); voidSetReuseNLL(Bool_t flag); virtual voidShowMembers(TMemberInspector& insp) const; RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(const RooStats::SimpleLikelihoodRatioTestStat&); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(const RooStats::TestStatistic&). Data Members; private:. RooArgSet*fAltParameters; RooAbsPd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__SimpleLikelihoodRatioTestStat.html:385,Test,TestStatistic,385,root/html602/RooStats__SimpleLikelihoodRatioTestStat.html,https://root.cern,https://root.cern/root/html602/RooStats__SimpleLikelihoodRatioTestStat.html,2,['Test'],['TestStatistic']
Testability,". RooStats::TestStatSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::TestStatSampler. class RooStats::TestStatSampler. TestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions. ; Tools that implement this interface are expected to be used for coverage studies, the Neyman Construction, etc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TestStatSampler(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Double_tEvaluateTestStatistic(RooAbsData& data, RooArgSet& paramsOfInterest); virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& paramsOfInterest); virtual RooStats::TestStatistic*GetTestStatistic() const; virtual voidInitialize(RooAbsArg& testStatistic, RooArgSet& paramsOfInterest, RooArgSet& nuisanceParameters); virtual TClass*IsA() const; RooStats::TestStatSampler&operator=(const RooStats::TestStatSampler&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetGlobalObservables(const RooArgSet&); virtual voidSetNuisanceParameters(const RooArgSet&); virtual voidSetObservables(const RooArgSet&); virtual voidSetParametersForTestStat(const RooArgSet&); virtual voidSetPdf(RooAbsPdf&); virtual voidSetPriorNuisance(RooAbsPdf*); virtual voidSetSamplingDistName(const char* name); virtual voidSetTestSize(Double_t size); virtual voidSetTestStatistic(RooStats::TestStatistic* testStatistic); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TestStatSampler(); TestStatSampler();. {}. SamplingDistribution* GetSamplingDistri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__TestStatSampler.html:12,Test,TestStatSampler,12,root/html528/RooStats__TestStatSampler.html,https://root.cern,https://root.cern/root/html528/RooStats__TestStatSampler.html,4,['Test'],['TestStatSampler']
Testability,". RooStats::TestStatSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::TestStatSampler. class RooStats::TestStatSampler. TestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions. ; Tools that implement this interface are expected to be used for coverage studies, the Neyman Construction, etc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TestStatSampler(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Double_tEvaluateTestStatistic(RooAbsData& data, RooArgSet& paramsOfInterest); virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& paramsOfInterest); virtual const RooAbsArg*GetTestStatistic() const; virtual voidInitialize(RooAbsArg& testStatistic, RooArgSet& paramsOfInterest, RooArgSet& nuisanceParameters); virtual TClass*IsA() const; RooStats::TestStatSampler&operator=(const RooStats::TestStatSampler&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetNuisanceParameters(RooArgSet&); virtual voidSetObservables(RooArgSet&); virtual voidSetParameters(RooArgSet&); virtual voidSetPdf(RooAbsPdf&); virtual voidSetTestSize(Double_t size); virtual voidSetTestStatistic(RooAbsArg&) const; virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TestStatSampler(); TestStatSampler();. {}. SamplingDistribution* GetSamplingDistribution(RooArgSet& paramsOfInterest); Main interface to get a ConfInterval, pure virtual. Double_t EvaluateTestStatistic(RooAbsData& data, RooArgSet& paramsOfInterest); Main interface to eval",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__TestStatSampler.html:12,Test,TestStatSampler,12,root/html526/RooStats__TestStatSampler.html,https://root.cern,https://root.cern/root/html526/RooStats__TestStatSampler.html,4,['Test'],['TestStatSampler']
Testability,". RooStats::TestStatSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::TestStatSampler. class RooStats::TestStatSampler. TestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions. ; Tools that implement this interface are expected to be used for coverage studies, the Neyman Construction, etc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TestStatSampler(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Double_tEvaluateTestStatistic(RooAbsData& data, RooArgSet& paramsOfInterest); virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& paramsOfInterest); virtual RooStats::TestStatistic*GetTestStatistic() const; virtual voidInitialize(RooAbsArg& testStatistic, RooArgSet& paramsOfInterest, RooArgSet& nuisanceParameters); virtual TClass*IsA() const; RooStats::TestStatSampler&operator=(const RooStats::TestStatSampler&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetGlobalObservables(const RooArgSet&); virtual voidSetNuisanceParameters(const RooArgSet&); virtual voidSetObservables(const RooArgSet&); virtual voidSetParametersForTestStat(const RooArgSet&); virtual voidSetPdf(RooAbsPdf&); virtual voidSetPriorNuisance(RooAbsPdf*); virtual voidSetSamplingDistName(const char* name); virtual voidSetTestSize(Double_t size); virtual voidSetTestStatistic(RooStats::TestStatistic* testStatistic); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); RooStats::TestStatSamplerTestStatSampler(); RooStats::TestStatSamplerTestStatSampler(const RooStats::TestStatSampler&). Class Charts. Inheritance; Inh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__TestStatSampler.html:12,Test,TestStatSampler,12,root/html602/RooStats__TestStatSampler.html,https://root.cern,https://root.cern/root/html602/RooStats__TestStatSampler.html,8,['Test'],['TestStatSampler']
Testability,". RooStats::TestStatSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::TestStatSampler. class RooStats::TestStatSampler. TestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions. ; Tools that implement this interface are expected to be used for coverage studies, the Neyman Construction, etc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TestStatSampler(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Double_tEvaluateTestStatistic(RooAbsData& data, RooArgSet& paramsOfInterest); virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& paramsOfInterest); virtual RooStats::TestStatistic*GetTestStatistic() const; virtual voidInitialize(RooAbsArg& testStatistic, RooArgSet& paramsOfInterest, RooArgSet& nuisanceParameters); virtual TClass*IsA() const; RooStats::TestStatSampler&operator=(const RooStats::TestStatSampler&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetGlobalObservables(const RooArgSet&); virtual voidSetNuisanceParameters(const RooArgSet&); virtual voidSetObservables(const RooArgSet&); virtual voidSetParametersForTestStat(const RooArgSet&); virtual voidSetPdf(RooAbsPdf&); virtual voidSetPriorNuisance(RooAbsPdf*); virtual voidSetSamplingDistName(const char* name); virtual voidSetTestSize(Double_t size); virtual voidSetTestStatistic(RooStats::TestStatistic* testStatistic); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TestStatSampler(); TestStatSampler();. {}. SamplingDistribution* GetSamplingDist",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__TestStatSampler.html:12,Test,TestStatSampler,12,root/html530/RooStats__TestStatSampler.html,https://root.cern,https://root.cern/root/html530/RooStats__TestStatSampler.html,8,['Test'],['TestStatSampler']
Testability,". RooStats::TestStatSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::TestStatSampler. class RooStats::TestStatSampler. TestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions. ; Tools that implement this interface are expected to be used for coverage studies, the Neyman Construction, etc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TestStatSampler(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Double_tEvaluateTestStatistic(RooAbsData& data, RooArgSet& paramsOfInterest); virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& paramsOfInterest); virtual RooStats::TestStatistic*GetTestStatistic() const; virtual voidInitialize(RooAbsArg& testStatistic, RooArgSet& paramsOfInterest, RooArgSet& nuisanceParameters); virtual TClass*IsA() const; RooStats::TestStatSampler&operator=(const RooStats::TestStatSampler&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetGlobalObservables(const RooArgSet&); virtual voidSetNuisanceParameters(const RooArgSet&); virtual voidSetObservables(const RooArgSet&); virtual voidSetParametersForTestStat(const RooArgSet&); virtual voidSetPdf(RooAbsPdf&); virtual voidSetPriorNuisance(RooAbsPdf*); virtual voidSetSamplingDistName(const char* name); virtual voidSetTestSize(Double_t size); virtual voidSetTestStatistic(RooStats::TestStatistic* testStatistic); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TestStatSampler(); TestStatSampler();. {}. SamplingDistributi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__TestStatSampler.html:12,Test,TestStatSampler,12,root/html534/RooStats__TestStatSampler.html,https://root.cern,https://root.cern/root/html534/RooStats__TestStatSampler.html,4,['Test'],['TestStatSampler']
Testability,". RooStats::TestStatistic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::TestStatistic. class RooStats::TestStatistic. TestStatistic is an interface class to provide a facility for construction test statistics; distributions to the NeymanConstruction class. All the actual samplers inherit from this class. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TestStatistic(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::TestStatistic&operator=(const RooStats::TestStatistic&); virtual boolPValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TestStatistic(); TestStatistic();. Double_t Evaluate(RooAbsData& data, RooArgSet& nullPOI); Main interface to evaluate the test statistic on a dataset given the; values for the Null Parameters Of Interest. const TString GetVarName() const. bool PValueIsRightTail(void); Defines the sign convention of the test statistic. Overwrite function if necessary. { return true; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: TestStatistic.h 34109 2010-06-24 15:00:16Z moneta $ » Last generated: 2010-09-23 20:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__TestStatistic.html:12,Test,TestStatistic,12,root/html528/RooStats__TestStatistic.html,https://root.cern,https://root.cern/root/html528/RooStats__TestStatistic.html,13,"['Test', 'test']","['TestStatistic', 'test']"
Testability,". RooStats::TestStatistic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::TestStatistic. class RooStats::TestStatistic. TestStatistic is an interface class to provide a facility for construction test statistics; distributions to the NeymanConstruction class. All the actual samplers inherit from this class. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TestStatistic(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& paramsOfInterest); virtual const RooAbsArg*GetTestStatistic() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::TestStatistic&operator=(const RooStats::TestStatistic&); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TestStatistic(); TestStatistic();. {}. Double_t Evaluate(RooAbsData& data, RooArgSet& paramsOfInterest); Main interface to evaluate the test statistic on a dataset. const RooAbsArg* GetTestStatistic() const. const TString GetVarName() const. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: TestStatistic.h 31276 2009-11-18 15:06:42Z moneta $ » Last generated: 2009-12-07 13:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__TestStatistic.html:12,Test,TestStatistic,12,root/html526/RooStats__TestStatistic.html,https://root.cern,https://root.cern/root/html526/RooStats__TestStatistic.html,12,"['Test', 'test']","['TestStatistic', 'test']"
Testability,". RooStats::TestStatistic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::TestStatistic. class RooStats::TestStatistic. TestStatistic is an interface class to provide a facility for construction test statistics; distributions to the NeymanConstruction class. All the actual samplers inherit from this class. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TestStatistic(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const RooArgSet*GetDetailedOutput() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::TestStatistic&operator=(const RooStats::TestStatistic&); virtual boolPValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); RooStats::TestStatisticTestStatistic(); RooStats::TestStatisticTestStatistic(const RooStats::TestStatistic&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TestStatistic(); TestStatistic();. Double_t Evaluate(RooAbsData& data, RooArgSet& nullPOI); Main interface to evaluate the test statistic on a dataset given the; values for the Null Parameters Of Interest. const TString GetVarName() const. bool PValueIsRightTail(void); Defines the sign convention of the test statistic. Overwrite function if necessary. { return true; }. const RooArgSet* GetDetailedOutput() const; return detailed output: for fits this can be pulls, processing time, ... The returned pointer will not loose validity until another call to Evaluate. { return NULL; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerk",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__TestStatistic.html:12,Test,TestStatistic,12,root/html602/RooStats__TestStatistic.html,https://root.cern,https://root.cern/root/html602/RooStats__TestStatistic.html,22,"['Test', 'test']","['TestStatistic', 'TestStatisticTestStatistic', 'test']"
Testability,". RooStats::TestStatistic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::TestStatistic. class RooStats::TestStatistic. TestStatistic is an interface class to provide a facility for construction test statistics; distributions to the NeymanConstruction class. All the actual samplers inherit from this class. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TestStatistic(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const RooArgSet*GetDetailedOutput() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::TestStatistic&operator=(const RooStats::TestStatistic&); virtual boolPValueIsRightTail() const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TestStatistic(); TestStatistic();. Double_t Evaluate(RooAbsData& data, RooArgSet& nullPOI); Main interface to evaluate the test statistic on a dataset given the; values for the Null Parameters Of Interest. const TString GetVarName() const. bool PValueIsRightTail(void); Defines the sign convention of the test statistic. Overwrite function if necessary. { return true; }. const RooArgSet* GetDetailedOutput() const; return detailed output: for fits this can be pulls, processing time, ... The returned pointer will not loose validity until another call to Evaluate. { return NULL; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__TestStatistic.html:12,Test,TestStatistic,12,root/html534/RooStats__TestStatistic.html,https://root.cern,https://root.cern/root/html534/RooStats__TestStatistic.html,8,"['Test', 'test']","['TestStatistic', 'test']"
Testability,". RooStats::TestStatistic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::TestStatistic. class RooStats::TestStatistic. TestStatistic is an interface class to provide a facility for construction test statistics; distributions to the NeymanConstruction class. All the actual samplers inherit from this class. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TestStatistic(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::TestStatistic&operator=(const RooStats::TestStatistic&); virtual boolPValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TestStatistic(); TestStatistic();. Double_t Evaluate(RooAbsData& data, RooArgSet& nullPOI); Main interface to evaluate the test statistic on a dataset given the; values for the Null Parameters Of Interest. const TString GetVarName() const. bool PValueIsRightTail(void); Defines the sign convention of the test statistic. Overwrite function if necessary. { return true; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: TestStatistic.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__TestStatistic.html:12,Test,TestStatistic,12,root/html530/RooStats__TestStatistic.html,https://root.cern,https://root.cern/root/html530/RooStats__TestStatistic.html,13,"['Test', 'test']","['TestStatistic', 'test']"
Testability,". RooStats::TestStatistic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::TestStatistic. class RooStats::TestStatistic. TestStatistic is an interface class to provide a facility for construction test statistics; distributions to the NeymanConstruction class. All the actual samplers inherit from this class. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TestStatistic(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::TestStatistic&operator=(const RooStats::TestStatistic&); virtual boolPValueIsRightTail() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TestStatistic(); TestStatistic();. Double_t Evaluate(RooAbsData& data, RooArgSet& nullPOI); Main interface to evaluate the test statistic on a dataset given the; values for the Null Parameters Of Interest. const TString GetVarName() const. bool PValueIsRightTail(void); Defines the sign convention of the test statistic. Overwrite function if necessary. { return true; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: TestStatistic.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-11-03 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__TestStatistic.html:12,Test,TestStatistic,12,root/html532/RooStats__TestStatistic.html,https://root.cern,https://root.cern/root/html532/RooStats__TestStatistic.html,13,"['Test', 'test']","['TestStatistic', 'test']"
Testability,". RooStats::ToyMCImportanceSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ToyMCImportanceSampler. class RooStats::ToyMCImportanceSampler: public RooStats::ToyMCSampler. Function Members (Methods); public:. virtual~ToyMCImportanceSampler(); voidAddImportanceDensity(RooAbsPdf* p, const RooArgSet* s); voidAddNullDensity(RooAbsPdf* p, const RooArgSet* s = NULL); virtual voidRooStats::ToyMCSampler::AddTestStatistic(RooStats::TestStatistic* t = NULL); virtual RooStats::SamplingDistribution*RooStats::ToyMCSampler::AppendSamplingDistribution(RooArgSet& allParameters, RooStats::SamplingDistribution* last, Int_t additionalMC); Bool_tRooStats::ToyMCSampler::CheckConfig(); static TClass*Class(); virtual Double_tRooStats::ToyMCSampler::ConfidenceLevel() const; intCreateImpDensitiesForOnePOIAdaptively(RooAbsPdf& pdf, const RooArgSet& allPOI, RooRealVar& poi, double nStdDevOverlap = 0.5, double poiValueForBackground = 0.0); intCreateNImpDensitiesForOnePOI(RooAbsPdf& pdf, const RooArgSet& allPOI, RooRealVar& poi, int n, double poiValueForBackground = 0.0); virtual RooArgList*RooStats::ToyMCSampler::EvaluateAllTestStatistics(RooAbsData& data, const RooArgSet& poi); virtual Double_tRooStats::ToyMCSampler::EvaluateTestStatistic(RooAbsData& data, RooArgSet& nullPOI); virtual Double_tRooStats::ToyMCSampler::EvaluateTestStatistic(RooAbsData& data, RooArgSet& nullPOI, int i); virtual voidRooStats::ToyMCSampler::GenerateGlobalObservables(RooAbsPdf& pdf) const; virtual RooAbsData*GenerateToyData(vector<double>& weights) const; virtual RooAbsData*GenerateToyData(RooArgSet& paramPoint, double& weight) const; virtual RooAbsData*GenerateToyData(vector<double>& weights, vector<double>& nullNLLs, vector<double>& impNLLs) const; virtual RooAbsData*GenerateToyData(RooArgSet& paramPoint, double&",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__ToyMCImportanceSampler.html:633,Test,TestStatistic,633,root/html534/RooStats__ToyMCImportanceSampler.html,https://root.cern,https://root.cern/root/html534/RooStats__ToyMCImportanceSampler.html,1,['Test'],['TestStatistic']
Testability,". RooStats::ToyMCImportanceSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ToyMCImportanceSampler. class RooStats::ToyMCImportanceSampler: public RooStats::ToyMCSampler. Function Members (Methods); public:. virtual~ToyMCImportanceSampler(); voidAddImportanceDensity(RooAbsPdf* p, const RooArgSet* s); voidAddNullDensity(RooAbsPdf* p, const RooArgSet* s = __null); virtual voidRooStats::ToyMCSampler::AddTestStatistic(RooStats::TestStatistic* t = __null); virtual RooStats::SamplingDistribution*RooStats::ToyMCSampler::AppendSamplingDistribution(RooArgSet& allParameters, RooStats::SamplingDistribution* last, Int_t additionalMC); Bool_tRooStats::ToyMCSampler::CheckConfig(); static TClass*Class(); virtual Double_tRooStats::ToyMCSampler::ConfidenceLevel() const; intCreateImpDensitiesForOnePOIAdaptively(RooAbsPdf& pdf, const RooArgSet& allPOI, RooRealVar& poi, double nStdDevOverlap = 0.5, double poiValueForBackground = 0.); intCreateNImpDensitiesForOnePOI(RooAbsPdf& pdf, const RooArgSet& allPOI, RooRealVar& poi, int n, double poiValueForBackground = 0.); virtual RooArgList*RooStats::ToyMCSampler::EvaluateAllTestStatistics(RooAbsData& data, const RooArgSet& poi); virtual Double_tRooStats::ToyMCSampler::EvaluateTestStatistic(RooAbsData& data, RooArgSet& nullPOI); virtual Double_tRooStats::ToyMCSampler::EvaluateTestStatistic(RooAbsData& data, RooArgSet& nullPOI, int i); virtual voidRooStats::ToyMCSampler::GenerateGlobalObservables(RooAbsPdf& pdf) const; virtual RooAbsData*GenerateToyData(vector<double>& weights) const; virtual RooAbsData*GenerateToyData(RooArgSet& paramPoint, double& weight) const; virtual RooAbsData*GenerateToyData(vector<double>& weights, vector<double>& nullNLLs, vector<double>& impNLLs) const; virtual RooAbsData*GenerateToyData(RooArgSet& paramPoint, doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__ToyMCImportanceSampler.html:635,Test,TestStatistic,635,root/html602/RooStats__ToyMCImportanceSampler.html,https://root.cern,https://root.cern/root/html602/RooStats__ToyMCImportanceSampler.html,2,['Test'],['TestStatistic']
Testability,". RooStats::ToyMCSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ToyMCSampler. class RooStats::ToyMCSampler: public RooStats::TestStatSampler. ToyMCSampler is a simple implementation of the TestStatSampler interface.; It generates Toy Monte Carlo for a given parameter point, and evaluates a ; test statistic that the user specifies (passed via the RooStats::TestStatistic interface).; Development notes: We need to provide a nice way for the user to:. specify the number of toy experiments (needed to probe a given confidence level); specify if the number of events per toy experiment should be fixed (conditioning) or floating (unconditional); specify if any auxiliary observations should be fixed (conditioning) or floating (unconditional); specify if nuisance paramters should be part of the toy MC: eg: integrated out (Bayesian marginalization). All of these should be made fairly explicit in the interface. Function Members (Methods); public:. virtual~ToyMCSampler(); virtual RooStats::SamplingDistribution*AppendSamplingDistribution(RooArgSet& allParameters, RooStats::SamplingDistribution* last, Int_t additionalMC); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Double_tEvaluateTestStatistic(RooAbsData& data, RooArgSet& allParameters); virtual RooAbsData*GenerateToyData(RooArgSet& allParameters) const; virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& allParameters); virtual const RooAbsArg*GetTestStatistic() const; virtual voidInitialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; stringMakeName(RooArgSet&); RooStats::TestStatSampler&RooStats::TestStatSampler::operator=(const RooStats::TestStatSampler&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData& data); virtual voidSetData(const char* name); vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__ToyMCSampler.html:308,Test,TestStatSampler,308,root/html526/RooStats__ToyMCSampler.html,https://root.cern,https://root.cern/root/html526/RooStats__ToyMCSampler.html,4,"['Test', 'test']","['TestStatSampler', 'TestStatistic', 'test']"
Testability,". RooStats::ToyMCSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ToyMCSampler. class RooStats::ToyMCSampler: public RooStats::TestStatSampler. Function Members (Methods); public:. virtual~ToyMCSampler(); virtual RooStats::SamplingDistribution*AppendSamplingDistribution(RooArgSet& allParameters, RooStats::SamplingDistribution* last, Int_t additionalMC); Bool_tCheckConfig(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Double_tEvaluateTestStatistic(RooAbsData& data, RooArgSet& nullPOI); virtual RooAbsData*GenerateToyData(RooArgSet&) const; virtual Int_tGetNToys(); stringGetSamplingDistName(); virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& paramPoint); virtual RooStats::SamplingDistribution*GetSamplingDistributionSingleWorker(RooArgSet& paramPoint); virtual RooStats::TestStatistic*GetTestStatistic() const; virtual voidInitialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; RooStats::TestStatSampler&RooStats::TestStatSampler::operator=(const RooStats::TestStatSampler&); virtual voidSetAsimovNuisancePar(Bool_t i = kTRUE); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetExpectedNuisancePar(Bool_t i = kTRUE); voidSetGenerateBinned(bool binned = true); virtual voidSetGlobalObservables(const RooArgSet& o); voidSetImportanceDensity(RooAbsPdf* p); voidSetImportanceSnapshot(const RooArgSet& s); voidSetMaxToys(Double_t t); virtual voidSetNEventsPerToy(const Int_t nevents); virtual voidSetNToys(const Int_t ntoy); virtual voidSetNuisanceParameters(const RooArgSet& np); virtual voidSetObservables(const RooArgSet& o); virtual voidSetParametersForTestStat(const RooArgSet& nullpoi); virtual voidSetPdf(RooAbsPdf& pdf); virtual voidSetPriorNuisance(RooAbsPdf* pdf); voidSetProofConfig(RooStats::Proof",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__ToyMCSampler.html:334,Test,TestStatSampler,334,root/html528/RooStats__ToyMCSampler.html,https://root.cern,https://root.cern/root/html528/RooStats__ToyMCSampler.html,1,['Test'],['TestStatSampler']
Testability,". RooStats::ToyMCSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ToyMCSampler. class RooStats::ToyMCSampler: public RooStats::TestStatSampler. Function Members (Methods); public:. virtual~ToyMCSampler(); virtual RooStats::SamplingDistribution*AppendSamplingDistribution(RooArgSet& allParameters, RooStats::SamplingDistribution* last, Int_t additionalMC); Bool_tCheckConfig(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Double_tEvaluateTestStatistic(RooAbsData& data, RooArgSet& nullPOI); virtual voidGenerateGlobalObservables() const; virtual RooAbsData*GenerateToyData(RooArgSet& paramPoint) const; virtual RooAbsData*GenerateToyData(RooArgSet& paramPoint, double& weight) const; virtual RooAbsData*GenerateToyDataImportanceSampling(RooArgSet& paramPoint, double& weight) const; virtual Int_tGetNToys(); stringGetSamplingDistName(); virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& paramPoint); virtual RooStats::SamplingDistribution*GetSamplingDistributionSingleWorker(RooArgSet& paramPoint); virtual RooStats::TestStatistic*GetTestStatistic() const; virtual voidInitialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; RooStats::TestStatSampler&RooStats::TestStatSampler::operator=(const RooStats::TestStatSampler&); static voidSetAlwaysUseMultiGen(Bool_t flag); virtual voidSetAsimovNuisancePar(Bool_t i = kTRUE); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetExpectedNuisancePar(Bool_t i = kTRUE); voidSetGenerateAutoBinned(Bool_t autoBinned = kTRUE); voidSetGenerateBinned(bool binned = true); voidSetGenerateBinnedTag(const char* binnedTag = """"); virtual voidSetGlobalObservables(const RooArgSet& o); voidSetImportanceDensity(RooAbsPdf* p); voidSetImportanceSnapshot(const RooArgSet& s); voidSetMaxT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__ToyMCSampler.html:334,Test,TestStatSampler,334,root/html532/RooStats__ToyMCSampler.html,https://root.cern,https://root.cern/root/html532/RooStats__ToyMCSampler.html,1,['Test'],['TestStatSampler']
Testability,". RooStats::ToyMCSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ToyMCSampler. class RooStats::ToyMCSampler: public RooStats::TestStatSampler. Function Members (Methods); public:. virtual~ToyMCSampler(); virtual RooStats::SamplingDistribution*AppendSamplingDistribution(RooArgSet& allParameters, RooStats::SamplingDistribution* last, Int_t additionalMC); Bool_tCheckConfig(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Double_tEvaluateTestStatistic(RooAbsData& data, RooArgSet& nullPOI); virtual voidGenerateGlobalObservables() const; virtual RooAbsData*GenerateToyData(RooArgSet& paramPoint) const; virtual RooAbsData*GenerateToyData(RooArgSet& paramPoint, double& weight) const; virtual RooAbsData*GenerateToyDataImportanceSampling(RooArgSet& paramPoint, double& weight) const; virtual Int_tGetNToys(); stringGetSamplingDistName(); virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& paramPoint); virtual RooStats::SamplingDistribution*GetSamplingDistributionSingleWorker(RooArgSet& paramPoint); virtual RooStats::TestStatistic*GetTestStatistic() const; virtual voidInitialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; RooStats::TestStatSampler&RooStats::TestStatSampler::operator=(const RooStats::TestStatSampler&); static voidSetAlwaysUseMultiGen(Bool_t flag); virtual voidSetAsimovNuisancePar(Bool_t i = kTRUE); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetExpectedNuisancePar(Bool_t i = kTRUE); voidSetGenerateBinned(bool binned = true); virtual voidSetGlobalObservables(const RooArgSet& o); voidSetImportanceDensity(RooAbsPdf* p); voidSetImportanceSnapshot(const RooArgSet& s); voidSetMaxToys(Double_t t); virtual voidSetNEventsPerToy(const Int_t nevents); virtual voidSetNToys(const Int_t ntoy); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__ToyMCSampler.html:334,Test,TestStatSampler,334,root/html530/RooStats__ToyMCSampler.html,https://root.cern,https://root.cern/root/html530/RooStats__ToyMCSampler.html,1,['Test'],['TestStatSampler']
Testability,". RooStats::ToyMCSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ToyMCSampler. class RooStats::ToyMCSampler: public RooStats::TestStatSampler. Function Members (Methods); public:. virtual~ToyMCSampler(); virtual voidAddTestStatistic(RooStats::TestStatistic* t = NULL); virtual RooStats::SamplingDistribution*AppendSamplingDistribution(RooArgSet& allParameters, RooStats::SamplingDistribution* last, Int_t additionalMC); Bool_tCheckConfig(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual RooArgList*EvaluateAllTestStatistics(RooAbsData& data, const RooArgSet& poi); virtual Double_tEvaluateTestStatistic(RooAbsData& data, RooArgSet& nullPOI); virtual Double_tEvaluateTestStatistic(RooAbsData& data, RooArgSet& nullPOI, int i); virtual voidGenerateGlobalObservables(RooAbsPdf& pdf) const; virtual RooAbsData*GenerateToyData(RooArgSet& paramPoint) const; virtual RooAbsData*GenerateToyData(RooArgSet& paramPoint, RooAbsPdf& pdf) const; virtual RooAbsData*GenerateToyData(RooArgSet& paramPoint, double& weight) const; virtual RooAbsData*GenerateToyData(RooArgSet& paramPoint, double& weight, RooAbsPdf& pdf) const; virtual Int_tGetNToys(); stringGetSamplingDistName(); virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& paramPoint); virtual RooDataSet*GetSamplingDistributions(RooArgSet& paramPoint); virtual RooDataSet*GetSamplingDistributionsSingleWorker(RooArgSet& paramPoint); virtual RooStats::TestStatistic*GetTestStatistic() const; virtual RooStats::TestStatistic*GetTestStatistic(unsigned int i) const; virtual voidInitialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; RooStats::TestStatSampler&RooStats::TestStatSampler::operator=(const RooStats::TestStatSampler&); static voidSetAlwaysUseMultiGen(Bool_t flag); virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__ToyMCSampler.html:334,Test,TestStatSampler,334,root/html534/RooStats__ToyMCSampler.html,https://root.cern,https://root.cern/root/html534/RooStats__ToyMCSampler.html,1,['Test'],['TestStatSampler']
Testability,". RooStats::ToyMCSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ToyMCSampler. class RooStats::ToyMCSampler: public RooStats::TestStatSampler. Function Members (Methods); public:. virtual~ToyMCSampler(); virtual voidAddTestStatistic(RooStats::TestStatistic* t = __null); virtual RooStats::SamplingDistribution*AppendSamplingDistribution(RooArgSet& allParameters, RooStats::SamplingDistribution* last, Int_t additionalMC); Bool_tCheckConfig(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual RooArgList*EvaluateAllTestStatistics(RooAbsData& data, const RooArgSet& poi); virtual Double_tEvaluateTestStatistic(RooAbsData& data, RooArgSet& nullPOI); virtual Double_tEvaluateTestStatistic(RooAbsData& data, RooArgSet& nullPOI, int i); virtual voidGenerateGlobalObservables(RooAbsPdf& pdf) const; virtual RooAbsData*GenerateToyData(RooArgSet& paramPoint) const; virtual RooAbsData*GenerateToyData(RooArgSet& paramPoint, RooAbsPdf& pdf) const; virtual RooAbsData*GenerateToyData(RooArgSet& paramPoint, double& weight) const; virtual RooAbsData*GenerateToyData(RooArgSet& paramPoint, double& weight, RooAbsPdf& pdf) const; virtual Int_tGetNToys(); stringGetSamplingDistName(); virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& paramPoint); virtual RooDataSet*GetSamplingDistributions(RooArgSet& paramPoint); virtual RooDataSet*GetSamplingDistributionsSingleWorker(RooArgSet& paramPoint); virtual RooStats::TestStatistic*GetTestStatistic() const; virtual RooStats::TestStatistic*GetTestStatistic(unsigned int i) const; virtual voidInitialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; RooStats::ToyMCSampler&operator=(const RooStats::ToyMCSampler&); static voidSetAlwaysUseMultiGen(Bool_t flag); virtual voidSetAsimovNuisancePar(Boo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__ToyMCSampler.html:334,Test,TestStatSampler,334,root/html602/RooStats__ToyMCSampler.html,https://root.cern,https://root.cern/root/html602/RooStats__ToyMCSampler.html,2,['Test'],['TestStatSampler']
Testability,". RooStats::ToyMCSamplerOld. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ToyMCSamplerOld. class RooStats::ToyMCSamplerOld: public RooStats::TestStatSampler. ToyMCSamplerOld is a simple implementation of the TestStatSampler interface.; It generates Toy Monte Carlo for a given parameter point, and evaluates a ; test statistic that the user specifies (passed via the RooStats::TestStatistic interface).; Development notes: We need to provide a nice way for the user to:. specify the number of toy experiments (needed to probe a given confidence level); specify if the number of events per toy experiment should be fixed (conditioning) or floating (unconditional); specify if any auxiliary observations should be fixed (conditioning) or floating (unconditional); specify if nuisance paramters should be part of the toy MC: eg: integrated out (Bayesian marginalization). All of these should be made fairly explicit in the interface. Function Members (Methods); public:. virtual~ToyMCSamplerOld(); virtual RooStats::SamplingDistribution*AppendSamplingDistribution(RooArgSet& allParameters, RooStats::SamplingDistribution* last, Int_t additionalMC); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Double_tEvaluateTestStatistic(RooAbsData& data, RooArgSet& allParameters); virtual RooAbsData*GenerateToyData(RooArgSet& allParameters) const; virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& allParameters); virtual RooStats::TestStatistic*GetTestStatistic() const; virtual voidInitialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; stringMakeName(RooArgSet&); RooStats::TestStatSampler&RooStats::TestStatSampler::operator=(const RooStats::TestStatSampler&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData& data); virtual voidSetDat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__ToyMCSamplerOld.html:317,Test,TestStatSampler,317,root/html528/RooStats__ToyMCSamplerOld.html,https://root.cern,https://root.cern/root/html528/RooStats__ToyMCSamplerOld.html,4,"['Test', 'test']","['TestStatSampler', 'TestStatistic', 'test']"
Testability,". RooStats::ToyMCSamplerOld. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ToyMCSamplerOld. class RooStats::ToyMCSamplerOld: public RooStats::TestStatSampler. ToyMCSamplerOld is a simple implementation of the TestStatSampler interface.; It generates Toy Monte Carlo for a given parameter point, and evaluates a ; test statistic that the user specifies (passed via the RooStats::TestStatistic interface).; Development notes: We need to provide a nice way for the user to:. specify the number of toy experiments (needed to probe a given confidence level); specify if the number of events per toy experiment should be fixed (conditioning) or floating (unconditional); specify if any auxiliary observations should be fixed (conditioning) or floating (unconditional); specify if nuisance paramters should be part of the toy MC: eg: integrated out (Bayesian marginalization). All of these should be made fairly explicit in the interface. Function Members (Methods); public:. virtual~ToyMCSamplerOld(); virtual RooStats::SamplingDistribution*AppendSamplingDistribution(RooArgSet& allParameters, RooStats::SamplingDistribution* last, Int_t additionalMC); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual Double_tEvaluateTestStatistic(RooAbsData& data, RooArgSet& allParameters); virtual RooAbsData*GenerateToyData(RooArgSet& allParameters) const; virtual RooStats::SamplingDistribution*GetSamplingDistribution(RooArgSet& allParameters); virtual RooStats::TestStatistic*GetTestStatistic() const; virtual voidInitialize(RooAbsArg&, RooArgSet&, RooArgSet&); virtual TClass*IsA() const; stringMakeName(RooArgSet&); RooStats::TestStatSampler&RooStats::TestStatSampler::operator=(const RooStats::TestStatSampler&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData& data); virtual voidSetD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__ToyMCSamplerOld.html:319,Test,TestStatSampler,319,root/html530/RooStats__ToyMCSamplerOld.html,https://root.cern,https://root.cern/root/html530/RooStats__ToyMCSamplerOld.html,8,"['Test', 'test']","['TestStatSampler', 'TestStatistic', 'test']"
Testability,". RooUnitTest. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooUnitTest. class RooUnitTest: public TNamed. RooUnit test is an abstract base class for unit regression tests for; RooFit and RooStats tests performed in stressRooFit and stressRooStats; Implementations of this class must implement abstract method testCode(); which defines the regression test to be performed. Inside testCode(); the regression test can define objects on which the regression is performed.; These are; RooPlot - regPlot() ;; RooFitResult - regFitResult() ;; Double_t - regValue() ;; RooTable - regTable() ;; TH1/2/3 - regTH ; RooWorkspace - regWS() ;; ; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooUnitTest(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tareTHidentical(TH1* htest, TH1* href); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearSilentMode(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Double_tctol(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooUnitTest.html:309,test,test,309,root/html534/RooUnitTest.html,https://root.cern,https://root.cern/root/html534/RooUnitTest.html,21,['test'],"['test', 'testCode', 'tests']"
Testability,". RootTalk Digest | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Support RootTalk Digest. This mailing list is used to keep you up to date about important ROOT events (new releases, urgent bug fixes, etc.). This li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/roottalk-digest.html:713,test,tests,713,d/roottalk-digest.html,https://root.cern,https://root.cern/d/roottalk-digest.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". RootTalk: [ROOT] ROOT version 3.00/01 tar files now available. [ROOT] ROOT version 3.00/01 tar files now available. From: Rene Brun (Rene.Brun@cern.ch); Date: Fri Dec 22 2000 - 15:01:04 MET. Next message: Rene Brun: ""Re: [ROOT] Kolmogorow test on weighted histos""; Previous message: Rene Brun: ""[ROOT] Re:"". Messages sorted by:; [ date ]; [ thread ]; [ subject ]; [ author ]. Root version 3.00/01 source and binary tar files are now available.; For more information, see:. http://root.cern.ch/; http://root.cern.ch/root/html/examples/V3.00.txt.html; http://root.cern.ch/root/SchemaEvolution.html. We are expecting to close this version around end of January.; The final version 3.00 will include a full support for STL in the new I/O; scheme and a symmetric behaviour between split and non-split mode for; the Trees. It is our intention to discontinue the support for the old HP-UX CC compiler.; The Makefile will still be provided but not the binary file.; With this version, we have added support for RedHat 7.0 and Solaris 6; with CC5.0. As soon as we have access to a Solaris 8 machine, we will also; support the corresponding binaries. CERN is closing this evening until January 8. We take this opportunity; to wish you and your family a Merry Christmas and a happy new Year 2001. Rene & Fons. Next message: Rene Brun: ""Re: [ROOT] Kolmogorow test on weighted histos""; Previous message: Rene Brun: ""[ROOT] Re:"". Messages sorted by:; [ date ]; [ thread ]; [ subject ]; [ author ]. This archive was generated by hypermail 2b29 ; : Tue Jan 02 2001 - 11:50:40 MET. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/roottalk/roottalk00/3518.html:241,test,test,241,root/roottalk/roottalk00/3518.html,https://root.cern,https://root.cern/root/roottalk/roottalk00/3518.html,2,['test'],['test']
Testability,". Run the tests | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Run the tests. Running the ROOT battery of tests; Running all ROOT tests on at least a platform before sending a PR or before pushing anyth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/run-tests.html:10,test,tests,10,d/run-tests.html,https://root.cern,https://root.cern/d/run-tests.html,3,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Shifter's Instructions | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Shifter's Instructions. These are the aspects the shifter shall keep under control; The shifter summarises the events of the week ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/shifters-instructions.html:720,test,tests,720,d/shifters-instructions.html,https://root.cern,https://root.cern/d/shifters-instructions.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Showing results with ROOT | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » First Steps With ROOT Showing results with ROOT. The ROOT framework consists of many classes, grouped into several categories. Finally, the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/showing-results-root.html:723,test,tests,723,d/showing-results-root.html,https://root.cern,https://root.cern/d/showing-results-root.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Simulation in ROOT | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » First Steps With ROOT Simulation in ROOT. The ROOT framework consists of many classes, grouped into several categories. Finally, the latter are gr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/simulation-root.html:716,test,tests,716,d/simulation-root.html,https://root.cern,https://root.cern/d/simulation-root.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Support | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome Support. Top level support is what makes ROOT a success. We do our utmost to solve any issues as soon as possible. To make this task as efficient as possible f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/support.html:705,test,tests,705,d/support.html,https://root.cern,https://root.cern/d/support.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". TAttBBox. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TAttBBox. class TAttBBox. TAttBBox. Helper for management of bounding-box information.; Optionally used by classes that use direct OpenGL rendering; via <Class>GL class. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TAttBBox(); Float_t*AssertBBox(); static TClass*Class(); virtual voidComputeBBox(); Float_t*GetBBox(); Bool_tGetBBoxOK() const; virtual TClass*IsA() const; TAttBBox&operator=(const TAttBBox& tab); voidResetBBox(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TAttBBox(). protected:. voidAssertBBoxExtents(Float_t epsilon = 0.0050000000000000001); voidBBoxCheckPoint(const Float_t* p); voidBBoxCheckPoint(Float_t x, Float_t y, Float_t z); voidBBoxClear(); voidBBoxInit(Float_t infinity = 1.0E+6); voidBBoxZero(Float_t epsilon = 0, Float_t x = 0, Float_t y = 0, Float_t z = 0); TAttBBox(const TAttBBox& tab). Data Members; protected:. Float_t*fBBox! Dynamic Float_t[6] X(min,max), Y(min,max), Z(min,max). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void BBoxInit(Float_t infinity = 1.0E+6); Allocate and prepare for incremental filling. void BBoxZero(Float_t epsilon = 0, Float_t x = 0, Float_t y = 0, Float_t z = 0); Create cube of volume (2*epsiolon)^3 at (x,y,z).; epsilon iz zero by default. void BBoxClear(); Remove BBox information. void AssertBBoxExtents(Float_t epsilon = 0.0050000000000000001); Assert extents of all sides of the bounding-box are at least epsilon. void BBoxCheckPoint(Float_t x, Float_t y, Float_t z). void BBoxCheckPoint(const Float_t* p)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TAttBBox.html:609,Assert,AssertBBox,609,root/html602/TAttBBox.html,https://root.cern,https://root.cern/root/html602/TAttBBox.html,2,['Assert'],['AssertBBox']
Testability,". TAttBBox. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TAttBBox. class TAttBBox. TAttBBox. Helper for management of bounding-box information.; Optionally used by classes that use direct OpenGL rendering; via <Class>GL class. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TAttBBox(); Float_t*AssertBBox(); static TClass*Class(); virtual voidComputeBBox(); Float_t*GetBBox(); Bool_tGetBBoxOK() const; virtual TClass*IsA() const; TAttBBox&operator=(const TAttBBox& tab); voidResetBBox(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidAssertBBoxExtents(Float_t epsilon = 0.005); voidBBoxCheckPoint(const Float_t* p); voidBBoxCheckPoint(Float_t x, Float_t y, Float_t z); voidBBoxClear(); voidBBoxInit(Float_t infinity = 1e6); voidBBoxZero(Float_t epsilon = 0, Float_t x = 0, Float_t y = 0, Float_t z = 0). Data Members; protected:. Float_t*fBBox! Dynamic Float_t[6] X(min,max), Y(min,max), Z(min,max). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void BBoxInit(Float_t infinity = 1e6); Allocate and prepare for incremental filling. void BBoxZero(Float_t epsilon = 0, Float_t x = 0, Float_t y = 0, Float_t z = 0); Create cube of volume (2*epsiolon)^3 at (x,y,z).; epsilon iz zero by default. void BBoxClear(); Remove BBox information. void AssertBBoxExtents(Float_t epsilon = 0.005); Assert extents of all sides of the bounding-box are at least epsilon. void BBoxCheckPoint(Float_t x, Float_t y, Float_t z). void BBoxCheckPoint(const Float_t* p). virtual ~TAttBBox(); { BBoxClear(); }. TAttBBox& operator=(const TAttBBox& tab). Bool_t GetBBoxOK() const; { ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TAttBBox.html:609,Assert,AssertBBox,609,root/html528/TAttBBox.html,https://root.cern,https://root.cern/root/html528/TAttBBox.html,3,['Assert'],['AssertBBox']
Testability,". TAttBBox. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TAttBBox. class TAttBBox. TAttBBox. Helper for management of bounding-box information.; Optionally used by classes that use direct OpenGL rendering; via <Class>GL class. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TAttBBox(); Float_t*AssertBBox(); static TClass*Class(); virtual voidComputeBBox(); Float_t*GetBBox(); Bool_tGetBBoxOK() const; virtual TClass*IsA() const; TAttBBox&operator=(const TAttBBox& tab); voidResetBBox(); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidAssertBBoxExtents(Float_t epsilon = 0.005); voidBBoxCheckPoint(const Float_t* p); voidBBoxCheckPoint(Float_t x, Float_t y, Float_t z); voidBBoxClear(); voidBBoxInit(Float_t infinity = 1e6); voidBBoxZero(Float_t epsilon = 0, Float_t x = 0, Float_t y = 0, Float_t z = 0). Data Members; protected:. Float_t*fBBox! Dynamic Float_t[6] X(min,max), Y(min,max), Z(min,max). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void BBoxInit(Float_t infinity = 1e6); Allocate and prepare for incremental filling. void BBoxZero(Float_t epsilon = 0, Float_t x = 0, Float_t y = 0, Float_t z = 0); Create cube of volume (2*epsiolon)^3 at (x,y,z).; epsilon iz zero by default. void BBoxClear(); Remove BBox information. void AssertBBoxExtents(Float_t epsilon = 0.005); Assert extents of all sides of the bounding-box are at least epsilon. void BBoxCheckPoint(Float_t x, Float_t y, Float_t z). void BBoxCheckPoint(const Float_t* p). virtual ~TAttBBox(); { BBoxClear(); }. TAttBBox& operator=(const TAttBBox& tab). Bool_t GetBBox",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAttBBox.html:609,Assert,AssertBBox,609,root/html526/TAttBBox.html,https://root.cern,https://root.cern/root/html526/TAttBBox.html,1,['Assert'],['AssertBBox']
Testability,". TAttBBox. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TAttBBox. class TAttBBox. TAttBBox. Helper for management of bounding-box information.; Optionally used by classes that use direct OpenGL rendering; via <Class>GL class. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TAttBBox(); Float_t*AssertBBox(); static TClass*Class(); virtual voidComputeBBox(); Float_t*GetBBox(); Bool_tGetBBoxOK() const; virtual TClass*IsA() const; TAttBBox&operator=(const TAttBBox& tab); voidResetBBox(); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. voidAssertBBoxExtents(Float_t epsilon = 0.005); voidBBoxCheckPoint(const Float_t* p); voidBBoxCheckPoint(Float_t x, Float_t y, Float_t z); voidBBoxClear(); voidBBoxInit(Float_t infinity = 1e6); voidBBoxZero(Float_t epsilon = 0, Float_t x = 0, Float_t y = 0, Float_t z = 0). Data Members; protected:. Float_t*fBBox! Dynamic Float_t[6] X(min,max), Y(min,max), Z(min,max). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void BBoxInit(Float_t infinity = 1e6); Allocate and prepare for incremental filling. void BBoxZero(Float_t epsilon = 0, Float_t x = 0, Float_t y = 0, Float_t z = 0); Create cube of volume (2*epsiolon)^3 at (x,y,z).; epsilon iz zero by default. void BBoxClear(); Remove BBox information. void AssertBBoxExtents(Float_t epsilon = 0.005); Assert extents of all sides of the bounding-box are at least epsilon. void BBoxCheckPoint(Float_t x, Float_t y, Float_t z). void BBoxCheckPoint(const Float_t* p). virtual ~TAttBBox(); { BBoxClear(); }. TAttBBox& operator=(const TAttBBox& tab). Bool_t Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TAttBBox.html:609,Assert,AssertBBox,609,root/html534/TAttBBox.html,https://root.cern,https://root.cern/root/html534/TAttBBox.html,1,['Assert'],['AssertBBox']
Testability,". TAxisEditor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GED; » TAxisEditor. class TAxisEditor: public TGedFrame. TAxisEditor. Implements GUI for axis attributes.; axis color; ticks parameters: length, setting on both axis sides,; logarithmic or linear scale along the selected axis,; primary, secondary and tertiary axis divisions,; setting more logarithmic labels,; optimizing labels' position if available; axis title - a title can be added via the text entry field; and can be set to be centered or rotated via the corresponding; check buttons, the title color, offset, font can be set easily; axis labels - their color, size, offset can be set similarly,; in addition there is a check box for no exponent choice,; and another one for setting the same decimal part for all labels //. /*. */. Function Members (Methods); public:. TAxisEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual~TAxisEditor(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tTGedFrame::AcceptModel(TObject*); virtual voidTGFrame::Activate(Bool_t); virtual voidTGedFrame::ActivateBaseClassEditors(TClass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAxisEditor.html:411,log,logarithmic,411,root/html526/TAxisEditor.html,https://root.cern,https://root.cern/root/html526/TAxisEditor.html,10,['log'],['logarithmic']
Testability,". TAxisEditor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GED; » TAxisEditor. class TAxisEditor: public TGedFrame. TAxisEditor. Implements GUI for axis attributes.; axis color; ticks parameters: length, setting on both axis sides,; logarithmic or linear scale along the selected axis,; primary, secondary and tertiary axis divisions,; setting more logarithmic labels,; optimizing labels' position if available; axis title - a title can be added via the text entry field; and can be set to be centered or rotated via the corresponding; check buttons, the title color, offset, font can be set easily; axis labels - their color, size, offset can be set similarly,; in addition there is a check box for no exponent choice,; and another one for setting the same decimal part for all labels //. /*. */. Function Members (Methods); public:. virtual~TAxisEditor(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tTGedFrame::AcceptModel(TObject*); virtual voidTGFrame::Activate(Bool_t); virtual voidTGedFrame::ActivateBaseClassEditors(TClass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TAxisEditor.html:411,log,logarithmic,411,root/html602/TAxisEditor.html,https://root.cern,https://root.cern/root/html602/TAxisEditor.html,4,['log'],['logarithmic']
Testability,". TBenchmark. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TBenchmark. class TBenchmark: public TNamed. TBenchmark. This class is a ROOT utility to help benchmarking applications. Function Members (Methods); public:. TBenchmark(); virtual~TBenchmark(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetBench(const char* name) const; Float_tGetCpuTime(const char* name); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TBenchmark.html:339,benchmark,benchmarking,339,root/html534/TBenchmark.html,https://root.cern,https://root.cern/root/html534/TBenchmark.html,1,['benchmark'],['benchmarking']
Testability,". TBenchmark. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TBenchmark. class TBenchmark: public TNamed. TBenchmark. This class is a ROOT utility to help benchmarking applications. Function Members (Methods); public:. virtual~TBenchmark(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetBench(const char* name) const; Float_tGetCpuTime(const char* name); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBenchmark.html:339,benchmark,benchmarking,339,root/html602/TBenchmark.html,https://root.cern,https://root.cern/root/html602/TBenchmark.html,2,['benchmark'],['benchmarking']
Testability,". TBenchmark. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TBenchmark. class TBenchmark: public TNamed. This class is a ROOT utility to help benchmarking applications. Examples of use of this class are given in the tutorials macros. Function Members (Methods); public:. TBenchmark(); virtual~TBenchmark(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetBench(const char* name) const; Float_tGetCpuTime(const char* name); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBenchmark.html:327,benchmark,benchmarking,327,root/html526/TBenchmark.html,https://root.cern,https://root.cern/root/html526/TBenchmark.html,4,['benchmark'],['benchmarking']
Testability,". TBits. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TBits. class TBits: public TObject. TBits. Container of bits. This class provides a simple container of bits.; Each bit can be set and tested via the functions SetBitNumber and; TestBitNumber. .; The default value of all bits is kFALSE.; The size of the container is automatically extended when a bit; number is either set or tested. To reduce the memory size of the; container use the Compact function, this will discard the memory; occupied by the upper bits that are 0. Function Members (Methods); public:. TBits(UInt_t nbits = 8); TBits(const TBits&); virtual~TBits(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidCompact(); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; UInt_tCountBits(UInt_t startBit = 0) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBits.html:375,test,tested,375,root/html526/TBits.html,https://root.cern,https://root.cern/root/html526/TBits.html,15,"['Test', 'test']","['TestBitNumber', 'tested']"
Testability,". TBits. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TBits. class TBits: public TObject. TBits. Container of bits. This class provides a simple container of bits.; Each bit can be set and tested via the functions SetBitNumber and; TestBitNumber. .; The default value of all bits is kFALSE.; The size of the container is automatically extended when a bit; number is either set or tested. To reduce the memory size of the; container use the Compact function, this will discard the memory; occupied by the upper bits that are 0. Function Members (Methods); public:. virtual~TBits(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidCompact(); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; UInt_tCountBits(UInt_t startBit = 0) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::Fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBits.html:375,test,tested,375,root/html602/TBits.html,https://root.cern,https://root.cern/root/html602/TBits.html,6,"['Test', 'test']","['TestBitNumber', 'tested']"
Testability,". TBits::TReference. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TBits::TReference. class TBits::TReference. TBits. Container of bits. This class provides a simple container of bits.; Each bit can be set and tested via the functions SetBitNumber and; TestBitNumber. .; The default value of all bits is kFALSE.; The size of the container is automatically extended when a bit; number is either set or tested. To reduce the memory size of the; container use the Compact function, this will discard the memory; occupied by the upper bits that are 0. Function Members (Methods); public:. ~TReference(); Bool_toperator bool() const; TBits::TReference&operator=(Bool_t val); TBits::TReference&operator=(const TBits::TReference& rhs); Bool_toperator~() const; TBits::TReferenceTReference(const TBits::TReference&); TBits::TReferenceTReference(TBits& bit, UInt_t pos). private:. TBits::TReferenceTReference(). Data Members; private:. TBits&fBits!; UInt_tfPos!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBits::TReference& operator=(Bool_t val); For b[i] = val. TBits::TReference& operator=(const TBits::TReference& rhs); For b[i] = b[__j]. Bool_t operator~() const; Flips the bit. TReference(). TReference(TBits& bit, UInt_t pos); { }. ~TReference(); { }. » Author: Philippe Canal 05/02/01 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last generated: 2015-06-30 14:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBits__TReference.html:395,test,tested,395,root/html602/TBits__TReference.html,https://root.cern,https://root.cern/root/html602/TBits__TReference.html,3,"['Test', 'test']","['TestBitNumber', 'tested']"
Testability,". TBits::TReference. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TBits::TReference. class TBits::TReference. TBits. Container of bits. This class provides a simple container of bits.; Each bit can be set and tested via the functions SetBitNumber and; TestBitNumber. .; The default value of all bits is kFALSE.; The size of the container is automatically extended when a bit; number is either set or tested. To reduce the memory size of the; container use the Compact function, this will discard the memory; occupied by the upper bits that are 0. Function Members (Methods); public:. ~TReference(); Bool_toperator bool() const; TBits::TReference&operator=(Bool_t val); TBits::TReference&operator=(const TBits::TReference& rhs); Bool_toperator~() const; TBits::TReferenceTReference(const TBits::TReference&); TBits::TReferenceTReference(TBits& bit, UInt_t pos). private:. TBits::TReferenceTReference(). Data Members; private:. TBits&fBits!; UInt_tfPos!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBits::TReference& operator=(Bool_t val); For b[i] = val. TBits::TReference& operator=(const TBits::TReference& rhs); For b[i] = b[__j]. Bool_t operator~() const; Flips the bit. TReference(). TReference(TBits& bit, UInt_t pos); { }. ~TReference(); { }. » Author: Philippe Canal 05/02/01 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last generated: 2015-09-08 17:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TBits__TReference.html:395,test,tested,395,root/html604/TBits__TReference.html,https://root.cern,https://root.cern/root/html604/TBits__TReference.html,3,"['Test', 'test']","['TestBitNumber', 'tested']"
Testability,". TClassEdit. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » CORE; » METAUTILS; » TClassEdit. namespace TClassEdit. Function Members (Methods); public:. stringCleanType(const char* typeDesc, int mode = 0, const char** tail = 0); stringGetLong64_Name(const string& original); intGetSplit(const char* type, vector<std::string>& output, int& nestedLoc); stringInsertStd(const char* tname); boolIsDefAlloc(const char* alloc, const char* classname); boolIsDefAlloc(const char* alloc, const char* keyclassname, const char* valueclassname); boolIsDefComp(const char* comp, const char* classname); boolIsStdClass(const char* type); boolIsSTLBitset(const char* type); intIsSTLCont(const char* type, int testAlloc = 0); boolIsVectorBool(const char* name); stringResolveTypedef(const char* tname, bool resolveAll = false); stringShortType(const char* typeDesc, int mode); intSTLArgs(int kind); intSTLKind(const char* type). Data Members. Class Charts; Function documentation; std::string CleanType(const char* typeDesc, int mode = 0, const char** tail = 0). bool IsDefAlloc(const char* alloc, const char* classname). bool IsDefAlloc(const char* alloc, const char* keyclassname, const char* valueclassname). bool IsDefComp(const char* comp, const char* classname). bool IsSTLBitset(const char* type). int IsSTLCont(const char* type, int testAlloc = 0). bool IsStdClass(const char* type). bool IsVectorBool(const char* name). std::string GetLong64_Name(const string& original). int GetSplit(const char* type, vector<std::string>& output, int& nestedLoc). int STLKind(const char* type). int STLArgs(int kind). std::string ResolveTypedef(const char* tname, bool resolveAll = false). std::string ShortType(const char* typeDesc, int mode). std::string InsertStd(const char* tname). » Author: Victor Perev 10/04/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClassEdit.html:840,test,testAlloc,840,root/html526/TClassEdit.html,https://root.cern,https://root.cern/root/html526/TClassEdit.html,1,['test'],['testAlloc']
Testability,". TClassEdit. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » CORE; » METAUTILS; » TClassEdit. namespace TClassEdit. Function Members (Methods); public:. stringCleanType(const char* typeDesc, int mode = 0, const char** tail = 0); stringGetLong64_Name(const string& original); intGetSplit(const char* type, vector<std::string>& output, int& nestedLoc, TClassEdit::EModType mode = TClassEdit::kNone); stringInsertStd(const char* tname); boolIsDefAlloc(const char* alloc, const char* classname); boolIsDefAlloc(const char* alloc, const char* keyclassname, const char* valueclassname); boolIsDefComp(const char* comp, const char* classname); boolIsStdClass(const char* type); boolIsSTLBitset(const char* type); intIsSTLCont(const char* type, int testAlloc = 0); boolIsVectorBool(const char* name); stringResolveTypedef(const char* tname, bool resolveAll = false); stringShortType(const char* typeDesc, int mode); intSTLArgs(int kind); intSTLKind(const char* type). Data Members. Class Charts; Function documentation; int IsSTLCont(int testAlloc=0). void ShortType(const char* typeDesc, int mode). std::string CleanType(const char* typeDesc, int mode = 0, const char** tail = 0). bool IsDefAlloc(const char* alloc, const char* classname). bool IsDefAlloc(const char* alloc, const char* keyclassname, const char* valueclassname). bool IsDefComp(const char* comp, const char* classname). bool IsSTLBitset(const char* type). bool IsStdClass(const char* type). bool IsVectorBool(const char* name). std::string GetLong64_Name(const string& original). int GetSplit(const char* type, vector<std::string>& output, int& nestedLoc, TClassEdit::EModType mode = TClassEdit::kNone). int STLKind(const char* type). int STLArgs(int kind). std::string ResolveTypedef(const char* tname, bool resolveAll = false). std::string InsertStd(const char* tname). » Author: Victor Perev ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TClassEdit.html:887,test,testAlloc,887,root/html528/TClassEdit.html,https://root.cern,https://root.cern/root/html528/TClassEdit.html,1,['test'],['testAlloc']
Testability,". TClassEdit. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » CORE; » METAUTILS; » TClassEdit. namespace TClassEdit. Function Members (Methods); public:. stringCleanType(const char* typeDesc, int mode = 0, const char** tail = 0); stringGetLong64_Name(const char* original); stringGetLong64_Name(const string& original); intGetSplit(const char* type, vector<std::string>& output, int& nestedLoc, TClassEdit::EModType mode = TClassEdit::kNone); stringInsertStd(const char* tname); boolIsDefAlloc(const char* alloc, const char* classname); boolIsDefAlloc(const char* alloc, const char* keyclassname, const char* valueclassname); boolIsDefComp(const char* comp, const char* classname); boolIsStdClass(const char* type); boolIsSTLBitset(const char* type); intIsSTLCont(const char* type, int testAlloc = 0); boolIsVectorBool(const char* name); stringResolveTypedef(const char* tname, bool resolveAll = false); stringShortType(const char* typeDesc, int mode); intSTLArgs(int kind); intSTLKind(const char* type). Data Members. Class Charts; Function documentation; int IsSTLCont(int testAlloc=0). void ShortType(const char* typeDesc, int mode). std::string CleanType(const char* typeDesc, int mode = 0, const char** tail = 0). bool IsDefAlloc(const char* alloc, const char* classname). bool IsDefAlloc(const char* alloc, const char* keyclassname, const char* valueclassname). bool IsDefComp(const char* comp, const char* classname). bool IsSTLBitset(const char* type). bool IsStdClass(const char* type). bool IsVectorBool(const char* name). std::string GetLong64_Name(const char* original). std::string GetLong64_Name(const string& original). int GetSplit(const char* type, vector<std::string>& output, int& nestedLoc, TClassEdit::EModType mode = TClassEdit::kNone). int STLKind(const char* type). int STLArgs(int kind). std::string ResolveTypedef(const char* tn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TClassEdit.html:933,test,testAlloc,933,root/html534/TClassEdit.html,https://root.cern,https://root.cern/root/html534/TClassEdit.html,1,['test'],['testAlloc']
Testability,". TClassEdit. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » CORE; » METAUTILS; » TClassEdit. namespace TClassEdit. Function Members (Methods); public:. stringCleanType(const char* typeDesc, int mode = 0, const char** tail = 0); stringGetLong64_Name(const string& original); intGetSplit(const char* type, vector<std::string>& output, int& nestedLoc, TClassEdit::EModType mode = TClassEdit::kNone); stringInsertStd(const char* tname); boolIsDefAlloc(const char* alloc, const char* classname); boolIsDefAlloc(const char* alloc, const char* keyclassname, const char* valueclassname); boolIsDefComp(const char* comp, const char* classname); boolIsStdClass(const char* type); boolIsSTLBitset(const char* type); intIsSTLCont(const char* type, int testAlloc = 0); boolIsVectorBool(const char* name); stringResolveTypedef(const char* tname, bool resolveAll = false); stringShortType(const char* typeDesc, int mode); intSTLArgs(int kind); intSTLKind(const char* type). Data Members. Class Charts; Function documentation; int IsSTLCont(int testAlloc=0). void ShortType(const char* typeDesc, int mode). std::string CleanType(const char* typeDesc, int mode = 0, const char** tail = 0). bool IsDefAlloc(const char* alloc, const char* classname). bool IsDefAlloc(const char* alloc, const char* keyclassname, const char* valueclassname). bool IsDefComp(const char* comp, const char* classname). bool IsSTLBitset(const char* type). bool IsStdClass(const char* type). bool IsVectorBool(const char* name). std::string GetLong64_Name(const string& original). int GetSplit(const char* type, vector<std::string>& output, int& nestedLoc, TClassEdit::EModType mode = TClassEdit::kNone). int STLKind(const char* type). int STLArgs(int kind). std::string ResolveTypedef(const char* tname, bool resolveAll = false). std::string InsertStd(const char* tname). » Author: Victor Pere",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TClassEdit.html:889,test,testAlloc,889,root/html530/TClassEdit.html,https://root.cern,https://root.cern/root/html530/TClassEdit.html,2,['test'],['testAlloc']
Testability,". TClassEdit. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; namespace description; function members; data members; class charts. ROOT; » CORE; » METAUTILS; » TClassEdit. namespace TClassEdit. Function Members (Methods); public:. stringCleanType(const char* typeDesc, int mode = 0, const char** tail = 0); char*DemangleName(const char* mangled_name, int& errorCode); char*DemangleTypeIdName(const type_info& ti, int& errorCode); TClassEdit::EComplexTypeGetComplexType(const char*); stringGetLong64_Name(const char* original); stringGetLong64_Name(const string& original); voidGetNormalizedName(string& norm_name, const char* name); intGetSplit(const char* type, vector<string>& output, int& nestedLoc, TClassEdit::EModType mode = TClassEdit::kNone); const char*GetUnqualifiedName(const char* name); voidInit(TClassEdit::TInterpreterLookupHelper* helper); stringInsertStd(const char* tname); boolIsDefAlloc(const char* alloc, const char* classname); boolIsDefAlloc(const char* alloc, const char* keyclassname, const char* valueclassname); boolIsDefComp(const char* comp, const char* classname); boolIsInterpreterDetail(const char* type); boolIsStdClass(const char* type); boolIsSTLBitset(const char* type); ROOT::ESTLTypeIsSTLCont(const char* type); intIsSTLCont(const char* type, int testAlloc); boolIsVectorBool(const char* name); stringResolveTypedef(const char* tname, bool resolveAll = false); stringShortType(const char* typeDesc, int mode); intSTLArgs(int kind); ROOT::ESTLTypeSTLKind(const char* type, size_t len = 0). Data Members. Class Charts; Function documentation; void Init(TClassEdit::TInterpreterLookupHelper* helper). ROOT::ESTLType STLKind(const char* type, size_t len = 0); Converts STL container name to number. vector -> 1, etc..; If len is greater than 0, only look at that many characters in the string. int STLArgs(int kind); Return number of arguments for STL container before allo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClassEdit.html:1379,test,testAlloc,1379,root/html602/TClassEdit.html,https://root.cern,https://root.cern/root/html602/TClassEdit.html,1,['test'],['testAlloc']
Testability,". TComplex I(); constants. {return TComplex(0,1);}. TComplex One(); {return TComplex(1,0);}. Double_t Re() const; getters and setters. {return fRe;}. Double_t Im() const; {return fIm;}. Double_t Rho() const; {return TMath::Sqrt(fRe*fRe+fIm*fIm);}. Double_t Rho2() const; {return fRe*fRe+fIm*fIm;}. Double_t Theta() const; {return (fIm||fRe)?TMath::ATan2(fIm,fRe):0;}. TComplex operator()(Double_t x, Double_t y, Bool_t polar = kFALSE). operator Double_t() const; Convertors. {return fRe;}. operator Float_t() const; {return static_cast<Float_t>(fRe);}. operator Int_t() const; {return static_cast<Int_t>(fRe);}. TComplex Sqrt(const TComplex& c); TMath:: extensions. {return TComplex(TMath::Sqrt(c.Rho()),0.5*c.Theta(),kTRUE);}. TComplex Exp(const TComplex& c); {return TComplex(TMath::Exp(c.fRe),c.fIm,kTRUE);}. TComplex Log(const TComplex& c); {return TComplex(0.5*TMath::Log(c.Rho2()),c.Theta());}. TComplex Log2(const TComplex& c); {return Log(c)/TMath::Log(2);}. TComplex Log10(const TComplex& c); {return Log(c)/TMath::Log(10);}. TComplex Sin(const TComplex& c). Cos(const TComplex& c). TComplex Tan(const TComplex& c); {TComplex cc=Cos(c); return Sin(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASin(const TComplex& c); {return -I()*Log(I()*c+TMath::Sign(1.,c.Im())*Sqrt(1.-c*c));}. TComplex ACos(const TComplex& c); {return -I()*Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATan(const TComplex& c); {return -0.5*I()*Log((1.+I()*c)/(1.-I()*c));}. TComplex SinH(const TComplex& c). CosH(const TComplex& c). TComplex TanH(const TComplex& c); {TComplex cc=CosH(c); return SinH(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASinH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c+1.));}. TComplex ACosH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATanH(const TComplex& c); {return 0.5*Log((1.+c)/(1.-c));}. Double_t Abs(const TComplex& c); {return c.Rho();}. TComplex Power(const TComplex& x, const TComplex& y). TComplex Power(const TComplex& x",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TComplex.html:4173,Log,Log,4173,root/html526/TComplex.html,https://root.cern,https://root.cern/root/html526/TComplex.html,10,['Log'],['Log']
Testability,". TCut. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TCut. class TCut: public TNamed. TCut. A specialized string object used for TTree selections.; A TCut object has a name and a title. It does not add any data; members compared to a TNamed. It only add a set of operators to; facilitate logical string concatenation. For example, assume; cut1 = ""x<1"" and cut2 = ""y>2""; then; cut1 && cut2 will be the string ""(x<1)&&(y>2)"". Operators =, +=, +, *, !, &&, || overloaded. Examples of use:; Root > TCut c1 = ""x<1""; Root > TCut c2 = ""y<0""; Root > TCut c3 = c1&&c2; Root > ntuple.Draw(""x"", c1); Root > ntuple.Draw(""x"", c1||""x>0""); Root > ntuple.Draw(""x"", c1&&c2); Root > ntuple.Draw(""x"", ""(x+y)""*(c1&&c2)). Function Members (Methods); public:. TCut(); TCut(const char* title); TCut(const TCut& cut); TCut(const char* name, const char* title); virtual~TCut(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCut.html:474,log,logical,474,root/html526/TCut.html,https://root.cern,https://root.cern/root/html526/TCut.html,5,['log'],['logical']
Testability,". TCut. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TCut. class TCut: public TNamed. TCut. A specialized string object used for TTree selections.; A TCut object has a name and a title. It does not add any data; members compared to a TNamed. It only add a set of operators to; facilitate logical string concatenation. For example, assume; cut1 = ""x<1"" and cut2 = ""y>2""; then; cut1 && cut2 will be the string ""(x<1)&&(y>2)"". Operators =, +=, +, *, !, &&, || overloaded. Examples of use:; Root > TCut c1 = ""x<1""; Root > TCut c2 = ""y<0""; Root > TCut c3 = c1&&c2; Root > ntuple.Draw(""x"", c1); Root > ntuple.Draw(""x"", c1||""x>0""); Root > ntuple.Draw(""x"", c1&&c2); Root > ntuple.Draw(""x"", ""(x+y)""*(c1&&c2)). Function Members (Methods); public:. virtual~TCut(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TCut.html:474,log,logical,474,root/html602/TCut.html,https://root.cern,https://root.cern/root/html602/TCut.html,2,['log'],['logical']
Testability,". TDSet. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TDSet. class TDSet: public TNamed. TDSet. This class implements a data set to be used for PROOF processing.; The TDSet defines the class of which objects will be processed,; the directory in the file where the objects of that type can be; found and the list of files to be processed. The files can be; specified as logical file names (LFN's) or as physical file names; (PFN's). In case of LFN's the resolution to PFN's will be done; according to the currently active GRID interface.; Examples:; TDSet treeset(""TTree"", ""AOD"");; treeset.Add(""lfn:/alien.cern.ch/alice/prod2002/file1"");. treeset.AddFriend(friendset);. or. TDSet objset(""MyEvent"", ""*"", ""/events"");; objset.Add(""root://cms.cern.ch/user/prod2002/hprod_1.root"");. objset.Add(set2003);. Validity of file names will only be checked at processing time; (typically on the PROOF master server), not at creation time. Function Members (Methods); public:. TDSet(); TDSet(const TChain& chain, Bool_t withfriends = kTRUE); TDSet(const char* name, const char* objname = ""*"", const char* dir = ""/"", const char* type = 0); virtual~TDSet(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tAdd(TDSet* set); virtual Bool_tAdd(TFileInfo* fileinfo, const char* meta = 0); virtual Bool_tAdd(TCollection* fileinfo, const char* meta = 0, Bool_t availableOnly = kFALSE, TCollection* badlist = 0); virtual Bool_tAdd(const char* file, const char* objname = 0, const char* dir = 0, Long64_t first = 0, Long64_t num = -1, const char* msd = 0); virtual voidAddFriend(TDSet* friendset, const char* alias); voidAddInput(TObject* obj); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDSet.html:557,log,logical,557,root/html528/TDSet.html,https://root.cern,https://root.cern/root/html528/TDSet.html,4,['log'],['logical']
Testability,". TDSet. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TDSet. class TDSet: public TNamed. TDSet. This class implements a data set to be used for PROOF processing.; The TDSet defines the class of which objects will be processed,; the directory in the file where the objects of that type can be; found and the list of files to be processed. The files can be; specified as logical file names (LFN's) or as physical file names; (PFN's). In case of LFN's the resolution to PFN's will be done; according to the currently active GRID interface.; Examples:; TDSet treeset(""TTree"", ""AOD"");; treeset.Add(""lfn:/alien.cern.ch/alice/prod2002/file1"");. treeset.AddFriend(friendset);. or. TDSet objset(""MyEvent"", ""*"", ""/events"");; objset.Add(""root://cms.cern.ch/user/prod2002/hprod_1.root"");. objset.Add(set2003);. Validity of file names will only be checked at processing time; (typically on the PROOF master server), not at creation time. Function Members (Methods); public:. virtual~TDSet(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tAdd(TDSet* set); virtual Bool_tAdd(TFileInfo* fileinfo, const char* meta = 0); virtual Bool_tAdd(TCollection* fileinfo, const char* meta = 0, Bool_t availableOnly = kFALSE, TCollection* badlist = 0); virtual Bool_tAdd(const char* file, const char* objname = 0, const char* dir = 0, Long64_t first = 0, Long64_t num = -1, const char* msd = 0); virtual voidAddFriend(TDSet* friendset, const char* alias); voidAddInput(TObject* obj); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidClearInput(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDSet.html:557,log,logical,557,root/html602/TDSet.html,https://root.cern,https://root.cern/root/html602/TDSet.html,2,['log'],['logical']
Testability,". TDSetElement. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TDSetElement. class TDSetElement: public TNamed. TDSet. This class implements a data set to be used for PROOF processing.; The TDSet defines the class of which objects will be processed,; the directory in the file where the objects of that type can be; found and the list of files to be processed. The files can be; specified as logical file names (LFN's) or as physical file names; (PFN's). In case of LFN's the resolution to PFN's will be done; according to the currently active GRID interface.; Examples:; TDSet treeset(""TTree"", ""AOD"");; treeset.Add(""lfn:/alien.cern.ch/alice/prod2002/file1"");. treeset.AddFriend(friendset);. or. TDSet objset(""MyEvent"", ""*"", ""/events"");; objset.Add(""root://cms.cern.ch/user/prod2002/hprod_1.root"");. objset.Add(set2003);. Validity of file names will only be checked at processing time; (typically on the PROOF master server), not at creation time. Function Members (Methods); public:. TDSetElement(); TDSetElement(const TDSetElement& elem); TDSetElement(const char* file, const char* objname = 0, const char* dir = 0, Long64_t first = 0, Long64_t num = -1, const char* msd = 0, const char* dataset = 0); virtual~TDSetElement(); voidTObject::AbstractMethod(const char* method) const; voidAddAssocObj(TObject* assocobj); virtual voidAddFriend(TDSetElement* friendElement, const char* alias); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """"",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDSetElement.html:578,log,logical,578,root/html528/TDSetElement.html,https://root.cern,https://root.cern/root/html528/TDSetElement.html,4,['log'],['logical']
Testability,". TDSetElement. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TDSetElement. class TDSetElement: public TNamed. TDSet. This class implements a data set to be used for PROOF processing.; The TDSet defines the class of which objects will be processed,; the directory in the file where the objects of that type can be; found and the list of files to be processed. The files can be; specified as logical file names (LFN's) or as physical file names; (PFN's). In case of LFN's the resolution to PFN's will be done; according to the currently active GRID interface.; Examples:; TDSet treeset(""TTree"", ""AOD"");; treeset.Add(""lfn:/alien.cern.ch/alice/prod2002/file1"");. treeset.AddFriend(friendset);. or. TDSet objset(""MyEvent"", ""*"", ""/events"");; objset.Add(""root://cms.cern.ch/user/prod2002/hprod_1.root"");. objset.Add(set2003);. Validity of file names will only be checked at processing time; (typically on the PROOF master server), not at creation time. Function Members (Methods); public:. virtual~TDSetElement(); voidTObject::AbstractMethod(const char* method) const; voidAddAssocObj(TObject* assocobj); virtual voidAddFriend(TDSetElement* friendElement, const char* alias); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDeleteFriends(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDSetElement.html:578,log,logical,578,root/html602/TDSetElement.html,https://root.cern,https://root.cern/root/html602/TDSetElement.html,2,['log'],['logical']
Testability,". TDocParser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » TDocParser. class TDocParser: public TObject. Parse C++ source or header, and extract documentation. Also handles special macros like. Picture; Source. {; TGMainFrame* f = new TGMainFrame(0, 100, 100);; f->SetName(""testMainFrame""); // that's part of the name of the image; TGButton* b = new TGTextButton(f, ""Test Button"");; f->AddFrame(b);; f->MapSubwindows();; f->Resize(f->GetDefaultSize());. f->MapWindow();; return f; // *HIDE*; } ; or multiline Latex aligned at =:. ; even without alignment:; and what about running an external macro?. Picture; Source. TObject* testmacro(); {. TH1* h = new TH1F(""h"", ""h"", 100, 0., 1.);; h->FillRandom(""gaus"",10000);; TCanvas* c=new TCanvas(""c"",""c"");; h->Draw();. return c;; }. and some nested stuff which doesn't work yet: . /* BEGIN_LATEX Wow,^{an}_{image}^{inside}_{a}^{html}_{block}; END_LATEX; */; . Function Members (Methods); public:. virtual~TDocParser(); voidTObject::AbstractMethod(const char* method) const; static voidAnchorFromLine(const TString& line, TString& anchor); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidConvert(ostream& out, istream& in, const char* relpath, Bool_t isCode, Bool_t interpretDirectives); virtual voidTObject::Copy(TObject& object) const; virtual voidDecorateKeywords(TString& text); virtual voidDecorateKeywords(ostream& out, const char* text); voidDecrementMethodCount(const char* name); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDeleteDirectiveOutput() const; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDocParser.html:452,test,testMainFrame,452,root/html602/TDocParser.html,https://root.cern,https://root.cern/root/html602/TDocParser.html,6,"['Test', 'test']","['Test', 'testMainFrame', 'testmacro']"
Testability,". TDocParser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » TDocParser. class TDocParser: public TObject. Parse C++ source or header, and extract documentation. Also handles special macros like. Picture; Source. {; TGMainFrame* f = new TGMainFrame(0, 100, 100);; f->SetName(""testMainFrame""n c's part of the name of the image; TGButton* b = new TGTextButton(f, ""Test Button"");; f->AddFrame(b);; f->MapSubwindows();; f->Resize(f->GetDefaultSize());. f->MapWindow();; return f; ; } ; or multiline Latex aligned at =:. ; even without alignment:; and what about running an external macro?. Picture; Source. TObject* testmacro() ; {; ; TH1* h = new TH1F(""h"", ""h"", 100, 0., 1.);; h->FillRandom(""gaus"",10000);; TCanvas* c=new TCanvas(""c"",""c"");; h->Draw();; ; return c;; }. and some nested stuff which doesn't work yet: . /* BEGIN_LATEX Wow,^{an}_{image}^{inside}_{a}^{html}_{block}; END_LATEX; */; . Function Members (Methods); public:. TDocParser(TDocOutput& docOutput); TDocParser(TClassDocOutput& docOutput, TClass* cl); virtual~TDocParser(); voidTObject::AbstractMethod(const char* method) const; static voidAnchorFromLine(const TString& line, TString& anchor); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidConvert(ostream& out, istream& in, const char* relpath, Bool_t isCode, Bool_t interpretDirectives); virtual voidTObject::Copy(TObject& object) const; virtual voidDecorateKeywords(TString& text); virtual voidDecorateKeywords(ostream& out, const char* text); voidDecrementMethodCount(const char* name); virtual voidTObject::Delete(O",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDocParser.html:452,test,testMainFrame,452,root/html528/TDocParser.html,https://root.cern,https://root.cern/root/html528/TDocParser.html,9,"['Test', 'test']","['Test', 'testMainFrame', 'testmacro']"
Testability,". TExec. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TExec. class TExec: public TNamed. TExec is a utility class that can be used to execute a CINT command; when some event happens in a pad.; The command in turn can invoke a CINT macro to paint graphics objects; at positions depending on the histogram or graph contents. Case 1:. The TExec object is in the list of pad primitives (after exec.Draw()).; When the pad is drawn, the TExec::Paint function is called. This function; will execute the specified command.; The following example uses the services of the class Aclock created; in $ROOTSYS/test/Aclock.cxx.; This examples uses a TTimer to redraw a pad at regular intervals (clock).; When the clock is updated, a string with the current date&time is drawn.; {; gSystem->Load(""$ROOTSYS/test/Aclock"");; Aclock ck(400);; gPad->SetFillColor(5);; TDatime dt;; TText t(.5,.3,""t"");; t.SetTextAlign(22);; t.SetTextSize(.07);; t.SetTextColor(4);; t.Draw();; TExec ex(""ex"",""dt.Set();t.SetTitle(dt.AsString())"");; ex.Draw();; }. Case 2:. The TExec object may be added to the list of functions of a TH1 or TGraph; object via hist->GetListOfFunctions()->Add(exec).; When the histogram (or graph) is drawn, the TExec will be executed.; If the histogram is made persistent on a file, the TExec object; is also saved with the histogram. When redrawing the histogram in a; new session, the TExec will be executed.; Example:; Assume an histogram TH1F *h already filled.; TExec *ex1 = new TExec(""ex1"",""DoSomething()"");; TExec *ex2 = new TExec(""ex2"","".x macro.C"");; h->GetListOfFunctions()->Add(ex1);; h->GetListOfFunctions()->Add(ex2);; h->Draw();; When the Paint function for the histogram will be called, the ""DoSomething""; function will be called (interpreted or compiled) and also the macro.C. Case 3:. A TExec object is aut",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TExec.html:783,test,test,783,root/html528/TExec.html,https://root.cern,https://root.cern/root/html528/TExec.html,6,['test'],['test']
Testability,". TFFTComplexReal. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » FFTW; » TFFTComplexReal. class TFFTComplexReal: public TVirtualFFT. TFFTComplexReal. One of the interface classes to the FFTW package, can be used directly; or via the TVirtualFFT class. Only the basic interface of FFTW is implemented. Computes the inverse of the real-to-complex transforms (class TFFTRealComplex); taking complex input (storing the non-redundant half of a logically Hermitian array); to real output (see FFTW manual for more details). How to use it:; 1) Create an instance of TFFTComplexReal - this will allocate input and output; arrays (unless an in-place transform is specified); 2) Run the Init() function with the desired flags and settings; 3) Set the data (via SetPoints(), SetPoint() or SetPointComplex() functions); 4) Run the Transform() function; 5) Get the output (via GetPoints(), GetPoint() or GetPointReal() functions); 6) Repeat steps 3)-5) as needed. For a transform of the same size, but with different flags, rerun the Init(); function and continue with steps 3)-5); NOTE: 1) running Init() function will overwrite the input array! Don't set any data; before running the Init() function; 2) FFTW computes unnormalized transform, so doing a transform followed by; its inverse will lead to the original array scaled by the transform size. 3) In Complex to Real transform the input array is destroyed. It cannot then; be retrieved when using the Get's methods. Function Members (Methods); public:. TFFTComplexReal(); TFFTComplexReal(const TFFTComplexReal&); TFFTComplexReal(Int_t n, Bool_t inPlace); TFFTComplexReal(Int_t ndim, Int_t* n, Bool_t inPlace); virtual~TFFTComplexReal(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrow",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFFTComplexReal.html:616,log,logically,616,root/html528/TFFTComplexReal.html,https://root.cern,https://root.cern/root/html528/TFFTComplexReal.html,4,['log'],['logically']
Testability,". TFFTComplexReal. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » FFTW; » TFFTComplexReal. class TFFTComplexReal: public TVirtualFFT. TFFTComplexReal. One of the interface classes to the FFTW package, can be used directly; or via the TVirtualFFT class. Only the basic interface of FFTW is implemented. Computes the inverse of the real-to-complex transforms (class TFFTRealComplex); taking complex input (storing the non-redundant half of a logically Hermitian array); to real output (see FFTW manual for more details). How to use it:; 1) Create an instance of TFFTComplexReal - this will allocate input and output; arrays (unless an in-place transform is specified); 2) Run the Init() function with the desired flags and settings; 3) Set the data (via SetPoints(), SetPoint() or SetPointComplex() functions); 4) Run the Transform() function; 5) Get the output (via GetPoints(), GetPoint() or GetPointReal() functions); 6) Repeat steps 3)-5) as needed. For a transform of the same size, but with different flags, rerun the Init(); function and continue with steps 3)-5); NOTE: 1) running Init() function will overwrite the input array! Don't set any data; before running the Init() function; 2) FFTW computes unnormalized transform, so doing a transform followed by; its inverse will lead to the original array scaled by the transform size. 3) In Complex to Real transform the input array is destroyed. It cannot then; be retrieved when using the Get's methods. Function Members (Methods); public:. virtual~TFFTComplexReal(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFFTComplexReal.html:616,log,logically,616,root/html602/TFFTComplexReal.html,https://root.cern,https://root.cern/root/html602/TFFTComplexReal.html,2,['log'],['logically']
Testability,". TFileIter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MISC; » TABLE; » TFileIter. class TFileIter: public TListIter. Class to iterate (read / write ) the events written to TFile.; The event is supposed to assign an unique ID in form of. TKey <event Id> ::= eventName ""."" run_number ""."" event_number. and stored as the TKey name of the object written. void TesTFileIter(){; // This macros tests the various methods of TFileIter class.; gSystem->Load(""libTable"");. //First create simple ROOT file; TDataSet *ds = new TDataSet(""event"");; TObject *nextObject = 0;; TRandom run;; TRandom event;; {; TFileIter outSet(""test.root"",""RECREATE"");; UInt_t totalEvent = 10;; UInt_t runNumber = 20010301;; Int_t i=0;; Int_t j=0;; for (;j < 10;j++) {; for (i = 1;i<totalEvent;i++) {; outSet.NextEventPut(ds,UInt_t(i),UInt_t(runNumber+j+10*run.Rndm()-5));; }; }; }; printf("" ----------------------> TFile has been created <--------------------\n"");; TFile *f = new TFile(""test.root"");; TFileIter readObj(f);; // the number of the object available directly from ""MyDataSet.root""; Int_t size = readObj.TotalKeys();; printf("" The total number of the objects: %d\n"",size);. //-----------------------------------------------------------------------; // Loop over all objects, read them in to memory one by one. printf("" -- > Loop over all objects, read them in to memory one by one < -- \n"");; for( readObj = 0; int(readObj) < size; ++readObj){; nextObject = *readObj;; printf("" %d bytes of the object \""%s\"" of class \""%s\"" written with TKey \""%s\"" has been read from file\n""; ,readObj.GetObjlen(); ,nextObject->GetName(); ,nextObject->IsA()->GetName(); ,(const char *)readObj; );; delete nextObject;; }; //-----------------------------------------------------------------------; // Now loop over all objects in inverse order; printf("" -- > Now lo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFileIter.html:530,TesT,TesTFileIter,530,root/html528/TFileIter.html,https://root.cern,https://root.cern/root/html528/TFileIter.html,18,"['TesT', 'test']","['TesTFileIter', 'test', 'tests']"
Testability,". TGLBoundingBox. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLBoundingBox. class TGLBoundingBox. TGLBoundingBox. Concrete class describing an orientated (free) or axis aligned box; of 8 verticies. Supports methods for setting aligned or orientated; boxes, find volume, axes, extents, centers, face planes etc.; Also tests for overlap testing of planes and other bounding boxes,; with fast sphere approximation. Function Members (Methods); public:. TGLBoundingBox(); TGLBoundingBox(const TGLVertex3* vertex); TGLBoundingBox(const Double_t** vertex); TGLBoundingBox(const TGLBoundingBox& other); TGLBoundingBox(const TGLVertex3& lowVertex, const TGLVertex3& highVertex); virtual~TGLBoundingBox(); const TGLVector3&Axis(UInt_t i, Bool_t normalised = kTRUE) const; TGLVertex3Center() const; static TClass*Class(); Double_tDiagonal() const; voidDraw(Bool_t solid = kFALSE) const; voidDump() const; voidExpandAligned(const TGLVertex3& point); TGLVector3Extents() const; const vector<UInt_t>&FaceVertices(TGLBoundingBox::EFace face) const; TGLPlaneGetNearPlane() const; virtual TClass*IsA() const; Bool_tIsEmpty() const; TGLVertex3MaxAAVertex() const; voidMergeAligned(const TGLBoundingBox& other); TGLVertex3MinAAVertex() const; Int_tNumVertices() const; TGLBoundingBox&operator=(const TGLBoundingBox& other); const TGLVertex3&operator[](UInt_t index) const; EOverlapOverlap(const TGLPlane& plane) const; EOverlapOverlap(const TGLBoundingBox& box) const; voidPlaneSet(TGLPlaneSet_t& planeSet) const; voidScale(Double_t factor); voidScale(Double_t xFactor, Double_t yFactor, Double_t zFactor); voidSet(const TGLVertex3* vertex); voidSet(const Double_t** vertex); voidSet(const TGLBoundingBox& other); voidSetAligned(const TGLVertex3& lowVertex, const TGLVertex3& highVertex); voidSetAligned(UInt_t nbPnts, const Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLBoundingBox.html:506,test,tests,506,root/html528/TGLBoundingBox.html,https://root.cern,https://root.cern/root/html528/TGLBoundingBox.html,6,['test'],"['testing', 'tests']"
Testability,". TGLBoundingBox. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLBoundingBox. class TGLBoundingBox. TGLBoundingBox. Concrete class describing an orientated (free) or axis aligned box; of 8 verticies. Supports methods for setting aligned or orientated; boxes, find volume, axes, extents, centers, face planes etc.; Also tests for overlap testing of planes and other bounding boxes,; with fast sphere approximation. Function Members (Methods); public:. TGLBoundingBox(); TGLBoundingBox(const TGLVertex3* vertex); TGLBoundingBox(const Double_t** vertex); TGLBoundingBox(const TGLBoundingBox& other); TGLBoundingBox(const TGLVertex3& lowVertex, const TGLVertex3& highVertex); virtual~TGLBoundingBox(); const TGLVector3&Axis(UInt_t i, Bool_t normalised = kTRUE) const; TGLVertex3Center() const; static TClass*Class(); Double_tDiagonal() const; voidDraw(Bool_t solid = kFALSE) const; voidDump() const; voidExpandAligned(const TGLVertex3& point); TGLVector3Extents() const; const vector<UInt_t>&FaceVertices(TGLBoundingBox::EFace face) const; TGLPlaneGetNearPlane() const; virtual TClass*IsA() const; Bool_tIsEmpty() const; TGLVertex3MaxAAVertex() const; voidMergeAligned(const TGLBoundingBox& other); TGLVertex3MinAAVertex() const; Int_tNumVertices() const; TGLBoundingBox&operator=(const TGLBoundingBox& other); const TGLVertex3&operator[](UInt_t index) const; Rgl::EOverlapOverlap(const TGLPlane& plane) const; Rgl::EOverlapOverlap(const TGLBoundingBox& box) const; voidPlaneSet(TGLPlaneSet_t& planeSet) const; voidScale(Double_t factor); voidScale(Double_t xFactor, Double_t yFactor, Double_t zFactor); voidSet(const TGLVertex3* vertex); voidSet(const Double_t** vertex); voidSet(const TGLBoundingBox& other); voidSetAligned(const TGLVertex3& lowVertex, const TGLVertex3& highVertex); voidSetAligned(UInt_t nbPnts, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLBoundingBox.html:506,test,tests,506,root/html534/TGLBoundingBox.html,https://root.cern,https://root.cern/root/html534/TGLBoundingBox.html,2,['test'],"['testing', 'tests']"
Testability,". TGLBoundingBox. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLBoundingBox. class TGLBoundingBox. TGLBoundingBox. Concrete class describing an orientated (free) or axis aligned box; of 8 verticies. Supports methods for setting aligned or orientated; boxes, find volume, axes, extents, centers, face planes etc.; Also tests for overlap testing of planes and other bounding boxes,; with fast sphere approximation. Function Members (Methods); public:. virtual~TGLBoundingBox(); const TGLVector3&Axis(UInt_t i, Bool_t normalised = kTRUE) const; TGLVertex3Center() const; static TClass*Class(); Double_tDiagonal() const; voidDraw(Bool_t solid = kFALSE) const; voidDump() const; voidExpandAligned(const TGLVertex3& point); TGLVector3Extents() const; const vector<UInt_t>&FaceVertices(TGLBoundingBox::EFace face) const; TGLPlaneGetNearPlane() const; virtual TClass*IsA() const; Bool_tIsEmpty() const; TGLVertex3MaxAAVertex() const; voidMergeAligned(const TGLBoundingBox& other); TGLVertex3MinAAVertex() const; Int_tNumVertices() const; TGLBoundingBox&operator=(const TGLBoundingBox& other); const TGLVertex3&operator[](UInt_t index) const; Rgl::EOverlapOverlap(const TGLPlane& plane) const; Rgl::EOverlapOverlap(const TGLBoundingBox& box) const; voidPlaneSet(TGLPlaneSet_t& planeSet) const; voidScale(Double_t factor); voidScale(Double_t xFactor, Double_t yFactor, Double_t zFactor); voidSet(const TGLVertex3[8] vertex); voidSet(const Double_t[8][3] vertex); voidSet(const TGLBoundingBox& other); voidSetAligned(const TGLVertex3& lowVertex, const TGLVertex3& highVertex); voidSetAligned(UInt_t nbPnts, const Double_t* pnts); voidSetEmpty(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLBoundingBox(); TGLBoundingBo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLBoundingBox.html:506,test,tests,506,root/html602/TGLBoundingBox.html,https://root.cern,https://root.cern/root/html602/TGLBoundingBox.html,4,['test'],"['testing', 'tests']"
Testability,". TGLCamera. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLCamera. class TGLCamera. TGLCamera. Abstract base camera class - concrete classes for orthographic and; persepctive cameras derive from it. This class maintains values for; the current:; i) Viewport; ii) Projection, modelview and clip matricies - extracted from GL; iii) The 6 frustum planes; iv) Expanded frustum interest box. It provides methods for various projection, overlap and intersection; tests for viewport and world locations, against the true frustum and; expanded interest box, and for extracting eye position and direction. It also defines the pure virtual manipulation interface methods the; concrete ortho and prespective classes must implement. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGLCamera(); Bool_tAdjustAndClampVal(Double_t& val, Double_t min, Double_t max, Int_t screenShift, Int_t screenShiftRange, Bool_t mod1, Bool_t mod2) const; Double_tAdjustDelta(Double_t screenShift, Double_t deltaFactor, Bool_t mod1, Bool_t mod2) const; virtual voidApply(const TGLBoundingBox& sceneBox, const TGLRect* pickRect = 0) const; static TClass*Class(); virtual voidConfigure(Double_t zoom, Double_t dolly, Double_t* center, Double_t hRotate, Double_t vRotate); virtual Bool_tDolly(Int_t delta, Bool_t mod1, Bool_t mod2); voidDrawDebugAids() const; TGLVector3EyeDirection() const; TGLVertex3EyePoint() const; TGLVertex3FrustumCenter() const; EOverlapFrustumOverlap(const TGLBoundingBox& box) const; const TGLPlane&FrustumPlane(TGLCamera::EFrustumPlane plane) const; const TGLMatrix&GetCamBase() const; const TGLMatrix&GetCamTrans() const; Double_t*GetCenterVec(); Bool_tGetExternalCenter(); Double_tGetFarCli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLCamera.html:645,test,tests,645,root/html528/TGLCamera.html,https://root.cern,https://root.cern/root/html528/TGLCamera.html,3,['test'],['tests']
Testability,". TGLCamera. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLCamera. class TGLCamera: public TObject. TGLCamera. Abstract base camera class - concrete classes for orthographic and; persepctive cameras derive from it. This class maintains values for; the current:; i) Viewport; ii) Projection, modelview and clip matricies - extracted from GL; iii) The 6 frustum planes; iv) Expanded frustum interest box. It provides methods for various projection, overlap and intersection; tests for viewport and world locations, against the true frustum and; expanded interest box, and for extracting eye position and direction. It also defines the pure virtual manipulation interface methods the; concrete ortho and prespective classes must implement. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGLCamera(); voidTObject::AbstractMethod(const char* method) const; Bool_tAdjustAndClampVal(Double_t& val, Double_t min, Double_t max, Int_t screenShift, Int_t screenShiftRange, Bool_t mod1, Bool_t mod2) const; Double_tAdjustDelta(Double_t screenShift, Double_t deltaFactor, Bool_t mod1, Bool_t mod2) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidApply(const TGLBoundingBox& sceneBox, const TGLRect* pickRect = 0) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidConfigure(Double_t zoom, Double_t dolly, Double_t* center, Double_t hRotate, Double_t vRotate); virtual voidTObject::Copy(TObject& object) const; virtual voidTObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLCamera.html:661,test,tests,661,root/html534/TGLCamera.html,https://root.cern,https://root.cern/root/html534/TGLCamera.html,1,['test'],['tests']
Testability,". TGLCamera. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLCamera. class TGLCamera: public TObject. TGLCamera. Abstract base camera class - concrete classes for orthographic and; persepctive cameras derive from it. This class maintains values for; the current:; i) Viewport; ii) Projection, modelview and clip matricies - extracted from GL; iii) The 6 frustum planes; iv) Expanded frustum interest box. It provides methods for various projection, overlap and intersection; tests for viewport and world locations, against the true frustum and; expanded interest box, and for extracting eye position and direction. It also defines the pure virtual manipulation interface methods the; concrete ortho and prespective classes must implement. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGLCamera(); voidTObject::AbstractMethod(const char* method) const; Bool_tAdjustAndClampVal(Double_t& val, Double_t min, Double_t max, Int_t screenShift, Int_t screenShiftRange, Bool_t mod1, Bool_t mod2) const; Double_tAdjustDelta(Double_t screenShift, Double_t deltaFactor, Bool_t mod1, Bool_t mod2) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidApply(const TGLBoundingBox& sceneBox, const TGLRect* pickRect = 0) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidConfigure(Double_t zoom, Double_t dolly, Double_t[3] center, Double_t hRotate, Double_t vRotate); virtual voidTObject::Copy(TObject& object) const; virtual voidTO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLCamera.html:661,test,tests,661,root/html602/TGLCamera.html,https://root.cern,https://root.cern/root/html602/TGLCamera.html,2,['test'],['tests']
Testability,". TGLHistPainter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLHistPainter. class TGLHistPainter: public TVirtualHistPainter. The histogram painter class using OpenGL; Histograms are, by default, drawn via the THistPainter class.; TGLHistPainter allows to paint them using the OpenGL 3D graphics; library. The plotting options provided by TGLHistPainter start with; GL keyword.; General information: plot types and supported options; The following types of plots are provided:. Lego - (TGLLegoPainter); The supported options are:; ; ""GLLEGO"" : Draw a lego plot.; ""GLLEGO2"" : Bins with color levels.; ""GLLEGO3"" : Cylindrical bars.; ; Lego painter in cartesian supports logarithmic scales for X, Y, Z.; In polar only Z axis can be logarithmic, in cylindrical only Y (if you see; what it means).; Surfaces (TF2 and TH2 with ""GLSURF"" options) - (TGLSurfacePainter); The supported options are:; ; ""GLSURF"" : Draw a surface.; ""GLSURF1"" : Surface with color levels; ""GLSURF2"" : The same as ""GLSURF1"" but without polygon outlines.; ""GLSURF3"" : Color level projection on top of plot (works only in cartesian coordinate system).; ""GLSURF4"" : Same as ""GLSURF"" but without polygon outlines.; ; The surface painting in cartesian coordinates supports logarithmic scales along X, Y, Z axis.; In polar coordinates only the Z axis can be logarithmic, in cylindrical coordinates only the Y axis.; Additional options to SURF and LEGO - Coordinate systems:; The supported options are:; ; "" "" : Default, cartesian coordinates system.; ""POL"" : Polar coordinates system.; ""CYL"" : Cylindrical coordinates system.; ""SPH"" : Spherical coordinates system.; ; TH3 as boxes (spheres) - (TGLBoxPainter); The supported options are:; ; ""GLBOX"" : TH3 as a set of boxes, size of box is proportional to bin content.; ""GLBOX1"": the same as ""glbox"", ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLHistPainter.html:857,log,logarithmic,857,root/html528/TGLHistPainter.html,https://root.cern,https://root.cern/root/html528/TGLHistPainter.html,12,['log'],['logarithmic']
Testability,". TGLLogicalShape. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLLogicalShape. class TGLLogicalShape. Abstract logical shape - a GL 'drawable' - base for all shapes -; faceset sphere etc. Logical shapes are a unique piece of geometry,; described in it's local frame - e.g if we have three spheres in :; Sphere A - Radius r1, center v1; Sphere B - Radius r2, center v2; Sphere C - Radius r1, center v3. Spheres A and C can share a common logical sphere of radius r1 - and; place them with two physicals with translations of v1 & v2. Sphere B; requires a different logical (radius r2), placed with physical with; translation v2. Physical shapes know about and can share logicals. Logicals do not; about (aside from reference counting) physicals or share them. This sharing of logical shapes greatly reduces memory consumption and; scene (re)build times in typical detector geometries which have many; repeated objects placements. TGLLogicalShapes have reference counting, performed by the client; physical shapes which are using it. Display list information is also stored here, possibly per LOD; level. Most classes do not support LOD (only sphere and tube) and; therefore reasonable defaults are encoded in the following virtual; functions:. * ELODAxes SupportedLODAxes() { return kLODAxesNone; }; * Int_t DLCacheSize() { return 1; }; * UInt_t DLOffset(lod); // Transform lod into DL offset.; * Short_t QuantizeShapeLOD(); // Quantize lod. Classes that have per-LOD display-lists than override these functions.; 'UShort_t fDLValid' is used as a bit-field determining validity of; each quantized LOD-level; hopefully one will not have more than 16; LOD levels per class.; See also: TGLPhysicalShape::CalculateShapeLOD() where LOD is calculated. See base/src/TVirtualViewer3D for description of common external 3D; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLLogicalShape.html:299,log,logical,299,root/html532/TGLLogicalShape.html,https://root.cern,https://root.cern/root/html532/TGLLogicalShape.html,24,"['Log', 'log']","['Logical', 'Logicals', 'logical', 'logicals']"
Testability,". TGLLogicalShape. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLLogicalShape. class TGLLogicalShape. Abstract logical shape - a GL 'drawable' - base for all shapes -; faceset sphere etc. Logical shapes are a unique piece of geometry,; described in it's local frame - e.g if we have three spheres in :; Sphere A - Radius r1, center v1; Sphere B - Radius r2, center v2; Sphere C - Radius r1, center v3. Spheres A and C can share a common logical sphere of radius r1 - and; place them with two physicals with translations of v1 & v2. Sphere B; requires a different logical (radius r2), placed with physical with; translation v2. Physical shapes know about and can share logicals. Logicals do not; about (aside from reference counting) physicals or share them. This sharing of logical shapes greatly reduces memory consumption and; scene (re)build times in typical detector geometries which have many; repeated objects placements. TGLLogicalShapes have reference counting, performed by the client; physical shapes which are using it. Display list information is also stored here, possibly per LOD; level. Most classes does not support LOD (only sphere and tube) and; therefore reasonable defaults are encoded in the following virtual; functions:. * ELODAxes SupportedLODAxes() { return kLODAxesNone; }; * Int_t DLCacheSize() { return 1; }; * UInt_t DLOffset(lod); // Transform lod into DL offset.; * Short_t QuantizeShapeLOD(); // Quantize lod. Classes that have per-LOD display-lists than override these functions.; 'UShort_t fDLValid' is used as a bit-field determining validity of; each quantized LOD-level; hopefully one will not have more than 16; LOD levels per class.; See also: TGLPhysicalShape::CalculateShapeLOD() where LOD is calculated. See base/src/TVirtualViewer3D for description of common external 3D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLLogicalShape.html:299,log,logical,299,root/html528/TGLLogicalShape.html,https://root.cern,https://root.cern/root/html528/TGLLogicalShape.html,12,"['Log', 'log']","['Logical', 'Logicals', 'logical', 'logicals']"
Testability,". TGLManip. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLManip. class TGLManip: public TVirtualGLManip. Abstract base class for viewer manipulators, which allow direct in; viewer manipulation of a (TGlPhysicalShape) object - currently; translation, scaling and rotation along/round objects local axes.; See derived classes for these implementations. This class provides binding to the zero or one manipulated physical,; hit testing (selection) for manipulator sub component (widget), and; some common mouse action handling/tracking. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGLManip(); voidAttach(TGLPhysicalShape* shape); static TClass*Class(); virtual voidDraw(const TGLCamera& camera) const; Bool_tGetActive() const; TGLPhysicalShape*GetAttached() const; UInt_tGetSelectedWidget() const; virtual Bool_tHandleButton(const Event_t& event, const TGLCamera& camera); virtual Bool_tHandleMotion(const Event_t& event, const TGLCamera& camera); virtual TClass*IsA() const; virtual Bool_tSelect(const TGLCamera&, const TGLRect&, const TGLBoundingBox&); voidSetActive(Bool_t a); voidSetSelectedWidget(UInt_t s); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLManip(); TGLManip(TGLPhysicalShape* shape). protected:. voidCalcDrawScale(const TGLBoundingBox& box, const TGLCamera& camera, Double_t& base, TGLVector3[3] axis) const; const UChar_t*ColorFor(UInt_t widget) const; TGLManip&operator=(const TGLManip&); TGLManip(const TGLManip&). Data Members; protected:. Bool_tfActive! manipulator is active?; TPointfFirstMouse! first (start) mouse position (in WINDOW coords); TPointfLas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLManip.html:613,test,testing,613,root/html602/TGLManip.html,https://root.cern,https://root.cern/root/html602/TGLManip.html,2,['test'],['testing']
Testability,". TGLManip. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLManip. class TGLManip: public TVirtualGLManip. Abstract base class for viewer manipulators, which allow direct in; viewer manipulation of a (TGlPhysicalShape) object - currently; translation, scaling and rotation along/round objects local axes.; See derived classes for these implementations. This class provides binding to the zero or one manipulated physical,; hit testing (selection) for manipulator sub component (widget), and; some common mouse action handling/tracking. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGLManip(); voidAttach(TGLPhysicalShape* shape); static TClass*Class(); virtual voidDraw(const TGLCamera& camera) const; Bool_tGetActive() const; TGLPhysicalShape*GetAttached() const; UInt_tGetSelectedWidget() const; virtual Bool_tHandleButton(const Event_t& event, const TGLCamera& camera); virtual Bool_tHandleMotion(const Event_t& event, const TGLCamera& camera); virtual TClass*IsA() const; virtual Bool_tSelect(const TGLCamera&, const TGLRect&, const TGLBoundingBox&); voidSetActive(Bool_t a); voidSetSelectedWidget(UInt_t s); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidCalcDrawScale(const TGLBoundingBox& box, const TGLCamera& camera, Double_t& base, TGLVector3* axis) const; const UChar_t*ColorFor(UInt_t widget) const; TGLManip&operator=(const TGLManip&). Data Members; protected:. Bool_tfActive! manipulator is active?; TPointfFirstMouse! first (start) mouse position (in WINDOW coords); TPointfLastMouse! last (latest) mouse position (in WINDOW coords); UInt_tfSelectedWidget! active width (axis) compon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLManip.html:613,test,testing,613,root/html528/TGLManip.html,https://root.cern,https://root.cern/root/html528/TGLManip.html,3,['test'],['testing']
Testability,". TGLManip. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLManip. class TGLManip: public TVirtualGLManip. Abstract base class for viewer manipulators, which allow direct in; viewer manipulation of a (TGlPhysicalShape) object - currently; translation, scaling and rotation along/round objects local axes.; See derived classes for these implementations. This class provides binding to the zero or one manipulated physical,; hit testing (selection) for manipulator sub component (widget), and; some common mouse action handling/tracking. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGLManip(); voidAttach(TGLPhysicalShape* shape); static TClass*Class(); virtual voidDraw(const TGLCamera& camera) const; Bool_tGetActive() const; TGLPhysicalShape*GetAttached() const; UInt_tGetSelectedWidget() const; virtual Bool_tHandleButton(const Event_t& event, const TGLCamera& camera); virtual Bool_tHandleMotion(const Event_t& event, const TGLCamera& camera); virtual TClass*IsA() const; virtual Bool_tSelect(const TGLCamera&, const TGLRect&, const TGLBoundingBox&); voidSetActive(Bool_t a); voidSetSelectedWidget(UInt_t s); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. voidCalcDrawScale(const TGLBoundingBox& box, const TGLCamera& camera, Double_t& base, TGLVector3* axis) const; const UChar_t*ColorFor(UInt_t widget) const; TGLManip&operator=(const TGLManip&). Data Members; protected:. Bool_tfActive! manipulator is active?; TPointfFirstMouse! first (start) mouse position (in WINDOW coords); TPointfLastMouse! last (latest) mouse position (in WINDOW coords); UInt_tfSelectedWidget! active ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLManip.html:613,test,testing,613,root/html534/TGLManip.html,https://root.cern,https://root.cern/root/html534/TGLManip.html,1,['test'],['testing']
Testability,". TGLPhysicalShape. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLPhysicalShape. class TGLPhysicalShape. Concrete physical shape - a GL drawable. Physical shapes are the; objects the user can actually see, select, move in the viewer. It is; a placement of the associated local frame TGLLogicaShape into the; world frame. The draw process is:. Load attributes - material colors etc; Load translation matrix - placement; Load gl name (for selection); Call our associated logical shape Draw() to draw placed shape. The physical shape supports translation, scaling and rotation,; selection, color changes, and permitted modification flags etc.; A physical shape cannot modify or be bound to another (or no); logical shape - hence const & handle. It can perform mutable; reference counting on the logical to enable purging. Physical shape also maintains a list of references to it and; provides notifications of change and destruction.; See class TGLPShapeRef which needs to be sub-classes for real use. See base/src/TVirtualViewer3D for description of common external 3D; viewer architecture and how external viewer clients use it. Function Members (Methods); public:. TGLPhysicalShape(UInt_t ID, const TGLLogicalShape& logicalShape, const TGLMatrix& transform, Bool_t invertedWind, const Float_t* rgba); TGLPhysicalShape(UInt_t ID, const TGLLogicalShape& logicalShape, const double* transform, Bool_t invertedWind, const Float_t* rgba); virtual~TGLPhysicalShape(); voidAddReference(TGLPShapeRef* ref); const TGLBoundingBox&BoundingBox() const; virtual voidCalculateShapeLOD(TGLRnrCtx& rnrCtx, Float_t& pixSize, Short_t& shapeLOD) const; static TClass*Class(); const Float_t*Color() const; virtual voidDraw(TGLRnrCtx& rnrCtx) const; const TGLLogicalShape*GetLogical() const; TGLPhysicalShape::EManipGetManip() const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLPhysicalShape.html:657,log,logical,657,root/html528/TGLPhysicalShape.html,https://root.cern,https://root.cern/root/html528/TGLPhysicalShape.html,12,['log'],['logical']
Testability,". TGLPhysicalShape. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLPhysicalShape. class TGLPhysicalShape. Concrete physical shape - a GL drawable. Physical shapes are the; objects the user can actually see, select, move in the viewer. It is; a placement of the associated local frame TGLLogicaShape into the; world frame. The draw process is:. Load attributes - material colors etc; Load translation matrix - placement; Load gl name (for selection); Call our associated logical shape Draw() to draw placed shape. The physical shape supports translation, scaling and rotation,; selection, color changes, and permitted modification flags etc.; A physical shape cannot modify or be bound to another (or no); logical shape - hence const & handle. It can perform mutable; reference counting on the logical to enable purging. Physical shape also maintains a list of references to it and; provides notifications of change and destruction.; See class TGLPShapeRef which needs to be sub-classes for real use. See base/src/TVirtualViewer3D for description of common external 3D; viewer architecture and how external viewer clients use it. Function Members (Methods); public:. virtual~TGLPhysicalShape(); voidAddReference(TGLPShapeRef* ref); const TGLBoundingBox&BoundingBox() const; virtual voidCalculateShapeLOD(TGLRnrCtx& rnrCtx, Float_t& pixSize, Short_t& shapeLOD) const; static TClass*Class(); const Float_t*Color() const; virtual voidDraw(TGLRnrCtx& rnrCtx) const; const TGLLogicalShape*GetLogical() const; TGLPhysicalShape::EManipGetManip() const; const TGLPhysicalShape*GetNextPhysical() const; TGLVector3GetScale() const; UChar_tGetSelected() const; TGLVertex3GetTranslation() const; UInt_tID() const; voidInvokeContextMenu(TContextMenu& menu, UInt_t x, UInt_t y) const; virtual TClass*IsA() const; Bool_tIsInvisibl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLPhysicalShape.html:657,log,logical,657,root/html602/TGLPhysicalShape.html,https://root.cern,https://root.cern/root/html602/TGLPhysicalShape.html,6,['log'],['logical']
Testability,". TGLPlotCoordinates. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLPlotCoordinates. class TGLPlotCoordinates. Helper class for plot-painters holding information about axis; ranges, numbers of bins and flags if certain axis is logartihmic. Function Members (Methods); public:. TGLPlotCoordinates(); virtual~TGLPlotCoordinates(); static TClass*Class(); EGLCoordTypeGetCoordType() const; Double_tGetFactor() const; Int_tGetFirstXBin() const; Int_tGetFirstYBin() const; Int_tGetFirstZBin() const; Int_tGetLastXBin() const; Int_tGetLastYBin() const; Int_tGetLastZBin() const; Int_tGetNXBins() const; Int_tGetNYBins() const; Int_tGetNZBins() const; const Rgl::BinRange_t&GetXBins() const; Double_tGetXLength() const; Bool_tGetXLog() const; const Rgl::Range_t&GetXRange() const; const Rgl::Range_t&GetXRangeScaled() const; Double_tGetXScale() const; const Rgl::BinRange_t&GetYBins() const; Double_tGetYLength() const; Bool_tGetYLog() const; const Rgl::Range_t&GetYRange() const; const Rgl::Range_t&GetYRangeScaled() const; Double_tGetYScale() const; const Rgl::BinRange_t&GetZBins() const; Double_tGetZLength() const; Bool_tGetZLog() const; const Rgl::Range_t&GetZRange() const; const Rgl::Range_t&GetZRangeScaled() const; Double_tGetZScale() const; virtual TClass*IsA() const; Bool_tModified() const; voidResetModified(); voidSetCoordType(EGLCoordType type); Bool_tSetRanges(TH2Poly* hist); Bool_tSetRanges(const TH1* hist, Bool_t errors = kFALSE, Bool_t zBins = kFALSE); Bool_tSetRanges(const TAxis* xAxis, const TAxis* yAxis, const TAxis* zAxis); voidSetXLog(Bool_t xLog); voidSetYLog(Bool_t yLog); voidSetZLog(Bool_t zLog); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TGLPlotCoordinates(const TGLPlotCoordinates&); TGLPlotCoordinate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLPlotCoordinates.html:415,log,logartihmic,415,root/html528/TGLPlotCoordinates.html,https://root.cern,https://root.cern/root/html528/TGLPlotCoordinates.html,3,['log'],['logartihmic']
Testability,". TGLPlotCoordinates. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLPlotCoordinates. class TGLPlotCoordinates. Helper class for plot-painters holding information about axis; ranges, numbers of bins and flags if certain axis is logartihmic. Function Members (Methods); public:. TGLPlotCoordinates(); virtual~TGLPlotCoordinates(); static TClass*Class(); EGLCoordTypeGetCoordType() const; Double_tGetFactor() const; Int_tGetFirstXBin() const; Int_tGetFirstYBin() const; Int_tGetFirstZBin() const; Int_tGetLastXBin() const; Int_tGetLastYBin() const; Int_tGetLastZBin() const; Int_tGetNXBins() const; Int_tGetNYBins() const; Int_tGetNZBins() const; const Rgl::BinRange_t&GetXBins() const; Double_tGetXLength() const; Bool_tGetXLog() const; const Rgl::Range_t&GetXRange() const; const Rgl::Range_t&GetXRangeScaled() const; Double_tGetXScale() const; const Rgl::BinRange_t&GetYBins() const; Double_tGetYLength() const; Bool_tGetYLog() const; const Rgl::Range_t&GetYRange() const; const Rgl::Range_t&GetYRangeScaled() const; Double_tGetYScale() const; const Rgl::BinRange_t&GetZBins() const; Double_tGetZLength() const; Bool_tGetZLog() const; const Rgl::Range_t&GetZRange() const; const Rgl::Range_t&GetZRangeScaled() const; Double_tGetZScale() const; virtual TClass*IsA() const; Bool_tModified() const; voidResetModified(); voidSetCoordType(EGLCoordType type); Bool_tSetRanges(TH2Poly* hist); Bool_tSetRanges(const TH1* hist, Bool_t errors = kFALSE, Bool_t zBins = kFALSE); Bool_tSetRanges(const TAxis* xAxis, const TAxis* yAxis, const TAxis* zAxis); voidSetXLog(Bool_t xLog); voidSetYLog(Bool_t yLog); voidSetZLog(Bool_t zLog); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. TGLPlotCoordinates(const TGLPlotCoordinates&)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLPlotCoordinates.html:415,log,logartihmic,415,root/html534/TGLPlotCoordinates.html,https://root.cern,https://root.cern/root/html534/TGLPlotCoordinates.html,1,['log'],['logartihmic']
Testability,". TGLPlotCoordinates. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLPlotCoordinates. class TGLPlotCoordinates. Helper class for plot-painters holding information about axis; ranges, numbers of bins and flags if certain axis is logartihmic. Function Members (Methods); public:. virtual~TGLPlotCoordinates(); static TClass*Class(); EGLCoordTypeGetCoordType() const; Double_tGetFactor() const; Int_tGetFirstXBin() const; Int_tGetFirstYBin() const; Int_tGetFirstZBin() const; Int_tGetLastXBin() const; Int_tGetLastYBin() const; Int_tGetLastZBin() const; Int_tGetNXBins() const; Int_tGetNYBins() const; Int_tGetNZBins() const; const Rgl::BinRange_t&GetXBins() const; Double_tGetXLength() const; Bool_tGetXLog() const; const Rgl::Range_t&GetXRange() const; const Rgl::Range_t&GetXRangeScaled() const; Double_tGetXScale() const; const Rgl::BinRange_t&GetYBins() const; Double_tGetYLength() const; Bool_tGetYLog() const; const Rgl::Range_t&GetYRange() const; const Rgl::Range_t&GetYRangeScaled() const; Double_tGetYScale() const; const Rgl::BinRange_t&GetZBins() const; Double_tGetZLength() const; Bool_tGetZLog() const; const Rgl::Range_t&GetZRange() const; const Rgl::Range_t&GetZRangeScaled() const; Double_tGetZScale() const; virtual TClass*IsA() const; Bool_tModified() const; voidResetModified(); voidSetCoordType(EGLCoordType type); Bool_tSetRanges(TH2Poly* hist); Bool_tSetRanges(const TH1* hist, Bool_t errors = kFALSE, Bool_t zBins = kFALSE); Bool_tSetRanges(const TAxis* xAxis, const TAxis* yAxis, const TAxis* zAxis); voidSetXLog(Bool_t xLog); voidSetYLog(Bool_t yLog); voidSetZLog(Bool_t zLog); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLPlotCoordinates(). private:. TGLPlotCoordinates&operator=(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLPlotCoordinates.html:415,log,logartihmic,415,root/html602/TGLPlotCoordinates.html,https://root.cern,https://root.cern/root/html602/TGLPlotCoordinates.html,2,['log'],['logartihmic']
Testability,". TGLRnrCtx. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLRnrCtx. class TGLRnrCtx. The TGLRnrCtx class aggregates data for a given redering context as; needed by various parts of the ROOT's OpenGL infractructure. It; serves as a connecting point between the steering part of the; infrastructure (viewer, scene) and concrete rendering classes; (logical, physical shape). It is just a data-holder, there is no; functionality in it. Development notes:. One RnrCtx is created by each viewer and it is just an extension of; the viewer context that changes along the render; descend. Separating this also has some abstract benefit of hiding; viewer implementation from those that do not need to know it. Current scene / scene-info part is always initialized by viewer,; scenes can assume they're ok. Function Members (Methods); public:. TGLRnrCtx(TGLViewerBase* viewer); virtual~TGLRnrCtx(); voidBeginSelection(Int_t x, Int_t y, Int_t r = 3); TGLColorSet*ChangeBaseColorSet(TGLColorSet* set); static TClass*Class(); TGLClip*Clip() const; voidCloseDLCapture(); voidColorOrForeground(Color_t col); TGLColorSet&ColorSet(); Short_tCombiLOD() const; Short_tDrawPass() const; voidEndSelection(Int_t glResult); TGLColorSet*GetBaseColorSet(); TGLCamera*GetCamera(); const TGLCamera*GetCamera() const; UInt_tGetEventKeySym() const; TGLContextIdentity*GetGLCtxIdentity() const; GLUquadric*GetGluQuadric(); Bool_tGetGrabImage() const; Int_tGetPickRadius(); TGLRect*GetPickRectangle(); Float_tGetRenderScale() const; TGLSceneBase*GetScene(); TGLSceneInfo*GetSceneInfo(); TGLSelectBuffer*GetSelectBuffer() const; TGLViewerBase*GetViewer(); Bool_tHasClip() const; Bool_tHasStopwatchTimedOut(); Bool_tHighlight() const; Bool_tHighlightOutline() const; virtual TClass*IsA() const; Bool_tIsDLCaptureOpen() const; Bool_tIsDrawPassFilled",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLRnrCtx.html:533,log,logical,533,root/html530/TGLRnrCtx.html,https://root.cern,https://root.cern/root/html530/TGLRnrCtx.html,3,['log'],['logical']
Testability,". TGLRnrCtx. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLRnrCtx. class TGLRnrCtx. The TGLRnrCtx class aggregates data for a given redering context as; needed by various parts of the ROOT's OpenGL infractructure. It; serves as a connecting point between the steering part of the; infrastructure (viewer, scene) and concrete rendering classes; (logical, physical shape). It is just a data-holder, there is no; functionality in it. Development notes:. One RnrCtx is created by each viewer and it is just an extension of; the viewer context that changes along the render; descend. Separating this also has some abstract benefit of hiding; viewer implementation from those that do not need to know it. Current scene / scene-info part is always initialized by viewer,; scenes can assume they're ok. Function Members (Methods); public:. TGLRnrCtx(TGLViewerBase* viewer); virtual~TGLRnrCtx(); voidBeginSelection(Int_t x, Int_t y, Int_t r = 3); TGLColorSet*ChangeBaseColorSet(TGLColorSet* set); static TClass*Class(); TGLClip*Clip() const; voidCloseDLCapture(); voidColorOrForeground(Color_t col); TGLColorSet&ColorSet(); Short_tCombiLOD() const; Short_tDrawPass() const; voidEndSelection(Int_t glResult); TGLColorSet*GetBaseColorSet(); TGLCamera*GetCamera(); const TGLCamera*GetCamera() const; UInt_tGetEventKeySym() const; TGLContextIdentity*GetGLCtxIdentity() const; GLUquadric*GetGluQuadric(); UChar_t*GetGrabbedImage() const; Int_tGetGrabBuffer() const; Bool_tGetGrabImage() const; Int_tGetPickRadius(); TGLRect*GetPickRectangle(); Float_tGetRenderScale() const; TGLSceneBase*GetScene(); TGLSceneInfo*GetSceneInfo(); TGLSelectBuffer*GetSelectBuffer() const; TGLViewerBase*GetViewer(); Bool_tHasClip() const; Bool_tHasStopwatchTimedOut(); Bool_tHighlight() const; Bool_tHighlightOutline() const; virtual TClass*IsA()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLRnrCtx.html:533,log,logical,533,root/html528/TGLRnrCtx.html,https://root.cern,https://root.cern/root/html528/TGLRnrCtx.html,1,['log'],['logical']
Testability,". TGLRnrCtx. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLRnrCtx. class TGLRnrCtx. The TGLRnrCtx class aggregates data for a given redering context as; needed by various parts of the ROOT's OpenGL infractructure. It; serves as a connecting point between the steering part of the; infrastructure (viewer, scene) and concrete rendering classes; (logical, physical shape). It is just a data-holder, there is no; functionality in it. Development notes:. One RnrCtx is created by each viewer and it is just an extension of; the viewer context that changes along the render; descend. Separating this also has some abstract benefit of hiding; viewer implementation from those that do not need to know it. Current scene / scene-info part is always initialized by viewer,; scenes can assume they're ok. Function Members (Methods); public:. virtual~TGLRnrCtx(); voidBeginSelection(Int_t x, Int_t y, Int_t r = 3); TGLColorSet*ChangeBaseColorSet(TGLColorSet* set); static TClass*Class(); TGLClip*Clip() const; voidCloseDLCapture(); voidColorOrForeground(Color_t col); TGLColorSet&ColorSet(); Short_tCombiLOD() const; Short_tDrawPass() const; voidEndSelection(Int_t glResult); TGLColorSet*GetBaseColorSet(); TGLCamera*GetCamera(); const TGLCamera*GetCamera() const; UInt_tGetEventKeySym() const; TGLContextIdentity*GetGLCtxIdentity() const; GLUquadric*GetGluQuadric(); Bool_tGetGrabImage() const; Int_tGetPickRadius(); TGLRect*GetPickRectangle(); Float_tGetRenderScale() const; TGLSceneBase*GetScene(); TGLSceneInfo*GetSceneInfo(); TGLSelectBuffer*GetSelectBuffer() const; TGLViewerBase*GetViewer(); Bool_tHasClip() const; Bool_tHasStopwatchTimedOut(); Bool_tHighlight() const; Bool_tHighlightOutline() const; virtual TClass*IsA() const; Bool_tIsDLCaptureOpen() const; Bool_tIsDrawPassFilled() const; Bool_tIsDrawPassOutlineL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLRnrCtx.html:533,log,logical,533,root/html602/TGLRnrCtx.html,https://root.cern,https://root.cern/root/html602/TGLRnrCtx.html,2,['log'],['logical']
Testability,". TGLScene. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLScene. class TGLScene: public TGLSceneBase. TGLScene provides managememnt and rendering of ROOT's default 3D; object representation as logical and physical shapes. A GL scene is the container for all the viewable objects (shapes); loaded into the viewer. It consists of two main stl::maps containing; the TGLLogicalShape and TGLPhysicalShape collections, and interface; functions enabling viewers to manage objects in these. The physical; shapes defined the placement of copies of the logical shapes - see; TGLLogicalShape/TGLPhysicalShape for more information on relationship. The scene can be drawn by owning viewer, passing camera, draw style; & quality (LOD), clipping etc - see Draw(). The scene can also be; drawn for selection in similar fashion - see Select(). The scene; keeps track of a single selected physical - which can be modified by; viewers. The scene maintains a lazy calculated bounding box for the total; scene extents, axis aligned round TGLPhysicalShape shapes. Currently a scene is owned exclusively by one viewer - however it is; intended that it could easily be shared by multiple viewers - for; efficiency and syncronisation reasons. Hence viewer variant objects; camera, clips etc being owned by viewer and passed at draw/select. Function Members (Methods); public:. TGLScene(); virtual~TGLScene(); voidTGLSceneBase::AddViewer(TGLViewerBase* viewer); virtual voidAdoptLogical(TGLLogicalShape& shape); virtual voidAdoptPhysical(TGLPhysicalShape& shape); UInt_tBeginSmartRefresh(); virtual Bool_tBeginUpdate(); const TGLBoundingBox&TGLSceneBase::BoundingBox() const; virtual voidCalcBoundingBox() const; static TClass*Class(); TGLClip*TGLSceneBase::Clip() const; virtual TGLScene::TSceneInfo*CreateSceneInfo(TGLViewerBase* view); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLScene.html:381,log,logical,381,root/html528/TGLScene.html,https://root.cern,https://root.cern/root/html528/TGLScene.html,8,['log'],['logical']
Testability,". TGLScene. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLScene. class TGLScene: public TGLSceneBase. TGLScene provides managememnt and rendering of ROOT's default 3D; object representation as logical and physical shapes. A GL scene is the container for all the viewable objects (shapes); loaded into the viewer. It consists of two main stl::maps containing; the TGLLogicalShape and TGLPhysicalShape collections, and interface; functions enabling viewers to manage objects in these. The physical; shapes defined the placement of copies of the logical shapes - see; TGLLogicalShape/TGLPhysicalShape for more information on relationship. The scene can be drawn by owning viewer, passing camera, draw style; & quality (LOD), clipping etc - see Draw(). The scene can also be; drawn for selection in similar fashion - see Select(). The scene; keeps track of a single selected physical - which can be modified by; viewers. The scene maintains a lazy calculated bounding box for the total; scene extents, axis aligned round TGLPhysicalShape shapes. Currently a scene is owned exclusively by one viewer - however it is; intended that it could easily be shared by multiple viewers - for; efficiency and syncronisation reasons. Hence viewer variant objects; camera, clips etc being owned by viewer and passed at draw/select. Function Members (Methods); public:. virtual~TGLScene(); voidTGLSceneBase::AddViewer(TGLViewerBase* viewer); virtual voidAdoptLogical(TGLLogicalShape& shape); virtual voidAdoptPhysical(TGLPhysicalShape& shape); UInt_tBeginSmartRefresh(); virtual Bool_tBeginUpdate(); const TGLBoundingBox&TGLSceneBase::BoundingBox() const; virtual voidCalcBoundingBox() const; static TClass*Class(); TGLClip*TGLSceneBase::Clip() const; virtual TGLScene::TSceneInfo*CreateSceneInfo(TGLViewerBase* view); TGLLockable:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLScene.html:381,log,logical,381,root/html602/TGLScene.html,https://root.cern,https://root.cern/root/html602/TGLScene.html,4,['log'],['logical']
Testability,". TGaxis. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GRAF; » TGaxis. class TGaxis: public TLine, public TAttText. The axis painter class; Instances of this class are generated by the histograms and graphs painting; classes when TAxis are drawn. TGaxis is the ""painter class""of; TAxis. Therefore it is mainly used via TAxis, even if is some; occasion it can be used directly to draw an axis which is not part of a graph; or an instance. For instance to draw an extra scale on a plot. Basic definition; Definition with a function; Logarithmic axis; Blank axis; Tick marks' orientation; Tick marks' size; Labels' positionning; Labels' orientation; Labels' position on tick marks; Labels' format; Alphanumeric labels; Number of divisions optimisation; Maximum Number of Digits for the axis labels; Optional grid; Time axis. Basic definition; A TGaxis is defined the following way:. TGaxis::TGaxis(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax,; Double_t wmin, Double_t wmax, Int_t ndiv, Option_t *chopt,; Double_t gridlength). Where:. xmin : X origin coordinate in user's coordinates space.; xmax : X end axis coordinate in user's coordinates space.; ymin : Y origin coordinate in user's coordinates space.; ymax : Y end axis coordinate in user's coordinates space.; wmin : Lowest value for the tick mark labels written on the axis.; wmax : Highest value for the tick mark labels written on the axis.; ndiv : Number of divisions. ndiv=N1 + 100*N2 + 10000*N3; N1=number of 1st divisions.; N2=number of 2nd divisions.; N3=number of 3rd divisions. e.g.:. ndiv=0 --> no tick marks.; ndiv=2 --> 2 divisions, one tick mark in the middle of the axis. chopt : Drawing options (see below).; gridlength: grid length on main tick marks. The example below generates various kind of axis. Picture; Source. {; TCanvas *c1 = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGaxis.html:711,Log,Logarithmic,711,root/html604/TGaxis.html,https://root.cern,https://root.cern/root/html604/TGaxis.html,1,['Log'],['Logarithmic']
Testability,". TGeoChecker. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GEOM; » GEOMPAINTER; » TGeoChecker. class TGeoChecker: public TObject. TGeoChecker - Geometry checking package. TGeoChecker class provides several geometry checking methods. There are two; types of tests that can be performed. One is based on random sampling or; ray-tracing and provides a visual check on how navigation methods work for; a given geometry. The second actually checks the validity of the geometry; definition in terms of overlapping/extruding objects. Both types of checks; can be done for a given branch (starting with a given volume) as well as for; the geometry as a whole. 1. TGeoChecker::CheckPoint(Double_t x, Double_t y, Double_t z). This method can be called direcly from the TGeoManager class and print a; report on how a given point is classified by the modeller: which is the; full path to the deepest node containing it, and the (under)estimation; of the distance to the closest boundary (safety). 2. TGeoChecker::RandomPoints(Int_t npoints). Can be called from TGeoVolume class. It first draws the volume and its; content with the current visualization settings. Then randomly samples points; in its bounding box, plotting in the geometry display only the points; classified as belonging to visible volumes. 3. TGeoChecker::RandomRays(Int_t nrays, Double_t startx, starty, startz). Can be called and acts in the same way as the previous, but instead of points,; rays having random isotropic directions are generated from the given point.; A raytracing algorithm propagates all rays untill they exit geometry, plotting; all segments crossing visible nodes in the same color as these. 4. TGeoChecker::Test(Int_t npoints). Implementation of TGeoManager::Test(). Computes the time for the modeller; to find out ""Where am I?"" for a given number of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoChecker.html:428,test,tests,428,root/html528/TGeoChecker.html,https://root.cern,https://root.cern/root/html528/TGeoChecker.html,6,['test'],['tests']
Testability,". TGeoExtension. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GEOM; » GEOM; » TGeoExtension. class TGeoExtension: public TObject. TGeoExtension - ABC for user objects attached to TGeoVolume or TGeoNode.; Provides interface for getting a reference (grab) and; releasing the extension object (release), allowing for; derived classes to implement reference counted sharing.; The user who should attach extensions to logical volumes; or nodes BEFORE applying misalignment information so that; these will be available to all copies. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoExtension.html:583,log,logical,583,root/html534/TGeoExtension.html,https://root.cern,https://root.cern/root/html534/TGeoExtension.html,3,['log'],['logical']
Testability,". TGeoRCExtension. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GEOM; » GEOM; » TGeoRCExtension. class TGeoRCExtension: public TGeoExtension. TGeoExtension - ABC for user objects attached to TGeoVolume or TGeoNode.; Provides interface for getting a reference (grab) and; releasing the extension object (release), allowing for; derived classes to implement reference counted sharing.; The user who should attach extensions to logical volumes; or nodes BEFORE applying misalignment information so that; these will be available to all copies. Function Members (Methods); public:. TGeoRCExtension(); TGeoRCExtension(TObject* obj); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoRCExtension.html:595,log,logical,595,root/html534/TGeoRCExtension.html,https://root.cern,https://root.cern/root/html534/TGeoRCExtension.html,1,['log'],['logical']
Testability,". TGeoRCExtension. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GEOM; » GEOM; » TGeoRCExtension. class TGeoRCExtension: public TGeoExtension. TGeoExtension - ABC for user objects attached to TGeoVolume or TGeoNode.; Provides interface for getting a reference (grab) and; releasing the extension object (release), allowing for; derived classes to implement reference counted sharing.; The user who should attach extensions to logical volumes; or nodes BEFORE applying misalignment information so that; these will be available to all copies. Function Members (Methods); public:. voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoRCExtension.html:595,log,logical,595,root/html602/TGeoRCExtension.html,https://root.cern,https://root.cern/root/html602/TGeoRCExtension.html,2,['log'],['logical']
Testability,". THStack. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THStack. class THStack: public TNamed. A THStack is a collection of TH1 (or derived) objects; Use THStack::Add to add a new histogram to the list.; The THStack does not own the objects in the list.; By default (if option ""nostack"" is not specified), histograms will be paint; stacked on top of each other.; Example;; THStack hs(""hs"",""test stacked histograms"");; TH1F *h1 = new TH1F(""h1"",""test hstack"",100,-4,4);; h1->FillRandom(""gaus"",20000);; h1->SetFillColor(kRed);; hs.Add(h1);; TH1F *h2 = new TH1F(""h2"",""test hstack"",100,-4,4);; h2->FillRandom(""gaus"",15000);; h2->SetFillColor(kBlue);; hs.Add(h2);; TH1F *h3 = new TH1F(""h3"",""test hstack"",100,-4,4);; h3->FillRandom(""gaus"",10000);; h3->SetFillColor(kGreen);; hs.Add(h3);; TCanvas c1(""c1"",""stacked hists"",10,10,700,900);; c1.Divide(1,2);; c1.cd(1);; hs.Draw();; c1.cd(2);; hs->Draw(""nostack"");. See a more complex example in $ROOTSYS/tutorials/hist/hstack.C. Note that picking is supported for all drawing modes. Function Members (Methods); public:. THStack(); THStack(const THStack& hstack); THStack(const char* name, const char* title); THStack(const TH1* hist, Option_t* axis = ""x"", const char* name = 0, const char* title = 0, Int_t firstbin = 1, Int_t lastbin = -1, Int_t firstbin2 = 1, Int_t lastbin2 = -1, Option_t* proj_option = """", Option_t* draw_option = """"); virtual~THStack(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TH1* h, Option_t* option = """"); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THStack.html:576,test,test,576,root/html528/THStack.html,https://root.cern,https://root.cern/root/html528/THStack.html,12,['test'],['test']
Testability,". THStack. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THStack. class THStack: public TNamed. A THStack is a collection of TH1 (or derived) objects; Use THStack::Add to add a new histogram to the list.; The THStack does not own the objects in the list.; By default (if option ""nostack"" is not specified), histograms will be paint; stacked on top of each other.; Example;; THStack hs(""hs"",""test stacked histograms"");; TH1F *h1 = new TH1F(""h1"",""test hstack"",100,-4,4);; h1->FillRandom(""gaus"",20000);; h1->SetFillColor(kRed);; hs.Add(h1);; TH1F *h2 = new TH1F(""h2"",""test hstack"",100,-4,4);; h2->FillRandom(""gaus"",15000);; h2->SetFillColor(kBlue);; hs.Add(h2);; TH1F *h3 = new TH1F(""h3"",""test hstack"",100,-4,4);; h3->FillRandom(""gaus"",10000);; h3->SetFillColor(kGreen);; hs.Add(h3);; TCanvas c1(""c1"",""stacked hists"",10,10,700,900);; c1.Divide(1,2);; c1.cd(1);; hs.Draw();; c1.cd(2);; hs.Draw(""nostack"");. See a more complex example in $ROOTSYS/tutorials/hist/hstack.C. Note that picking is supported for all drawing modes. Function Members (Methods); public:. THStack(); THStack(const THStack& hstack); THStack(const char* name, const char* title); THStack(const TH1* hist, Option_t* axis = ""x"", const char* name = 0, const char* title = 0, Int_t firstbin = 1, Int_t lastbin = -1, Int_t firstbin2 = 1, Int_t lastbin2 = -1, Option_t* proj_option = """", Option_t* draw_option = """"); virtual~THStack(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TH1* h, Option_t* option = """"); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THStack.html:576,test,test,576,root/html534/THStack.html,https://root.cern,https://root.cern/root/html534/THStack.html,4,['test'],['test']
Testability,". THStack. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » THStack. class THStack: public TNamed. A THStack is a collection of TH1 (or derived) objects; Use THStack::Add to add a new histogram to the list.; The THStack does not own the objects in the list.; By default (if option ""nostack"" is not specified), histograms will be paint; stacked on top of each other.; Example;; THStack hs(""hs"",""test stacked histograms"");; TH1F *h1 = new TH1F(""h1"",""test hstack"",100,-4,4);; h1->FillRandom(""gaus"",20000);; h1->SetFillColor(kRed);; hs.Add(h1);; TH1F *h2 = new TH1F(""h2"",""test hstack"",100,-4,4);; h2->FillRandom(""gaus"",15000);; h2->SetFillColor(kBlue);; hs.Add(h2);; TH1F *h3 = new TH1F(""h3"",""test hstack"",100,-4,4);; h3->FillRandom(""gaus"",10000);; h3->SetFillColor(kGreen);; hs.Add(h3);; TCanvas c1(""c1"",""stacked hists"",10,10,700,900);; c1.Divide(1,2);; c1.cd(1);; hs.Draw();; c1.cd(2);; hs.Draw(""nostack"");. See a more complex example in $ROOTSYS/tutorials/hist/hstack.C. Note that picking is supported for all drawing modes. Function Members (Methods); public:. virtual~THStack(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TH1* h, Option_t* option = """"); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* chopt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constME",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THStack.html:576,test,test,576,root/html602/THStack.html,https://root.cern,https://root.cern/root/html602/THStack.html,4,['test'],['test']
Testability,". THtml. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » THtml. class THtml: public TObject. The THtml class is designed to easily document; classes, code, and code related text files (like change logs). It generates HTML; pages conforming to the XHTML 1.0 transitional specifications; an example of; these pages is ROOT's own ; reference guide. This page was verified to be valid XHTML 1.0 transitional,; which proves that all pages generated by THtml can be valid, as long as the user; provided XHTML (documentation, header, etc) is valid. You can check the current; THtml by clicking this icon:. Overview:. Usage; Configuration; Input files; Output directory; Linking other documentation; Recognizing class documentation; Author, copyright, etc.; Header and footer; Links to searches, home page, ViewVC; HTML Charset. Documentation syntax; Class description; Class index; Method documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.LoadAllLibs(); // Load all rootmap'ed libraries; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names etc) some text; file or macro, use:. root[] ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THtml.html:372,log,logs,372,root/html602/THtml.html,https://root.cern,https://root.cern/root/html602/THtml.html,2,['log'],['logs']
Testability,". THtml. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » THtml. class THtml: public TObject. The THtml class is designed to easily document; classes, code, and code related text files (like change logs). It generates HTML; pages conforming to the XHTML 1.0 transitional specifications; an example of; these pages is ROOT's own ; reference guide. This page was verified to be valid XHTML 1.0 transitional,; which proves that all pages generated by THtml can be valid, as long as the user; provided XHTML (documentation, header, etc) is valid. You can check the current; THtml by clicking this icon:. Overview:. Usage; Configuration; Input files; Output directory; Linking other documentation; Recognizing class documentation; Author, copyright, etc.; Header and footer; Links to searches, home page, ViewVC; HTML Charset. Documentation syntax; Class description; Class index; Method documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names etc) some text; file or macro, use:. root[] html.Convert( ""hsimple.C"", ""Histogram example"" ). II. Configu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THtml.html:372,log,logs,372,root/html534/THtml.html,https://root.cern,https://root.cern/root/html534/THtml.html,1,['log'],['logs']
Testability,". THtml. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » THtml. class THtml: public TObject. The THtml class is designed to easily document; classes, code, and code related text files (like change logs). It generates HTML; pages conforming to the XHTML 1.0 transitional specifications; an example of; these pages is ROOT's own ; reference guide. This page was verified to be valid XHTML 1.0 transitional,; which proves that all pages generated by THtml can be valid, as long as the user; provided XHTML (documentation, header, etc) is valid. You can check the current; THtml by clicking this icon:. Overview:. Usage; Configuration; Input files; Output directory; Linking other documentation; Recognizing class documentation; Author, copyright, etc.; Header and footer; Links to searches, home page, ViewVC; HTML Charset. Documentation syntax; Class description; Class index; Method documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxilliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names etc) some text; file or macro, use:. root[] html.Convert( ""hsimple.C"", ""Histogram example"" ). II. Config",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THtml.html:372,log,logs,372,root/html528/THtml.html,https://root.cern,https://root.cern/root/html528/THtml.html,3,['log'],['logs']
Testability,". THtml::TFileSysEntry. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » THtml::TFileSysEntry. class THtml::TFileSysEntry: public TObject. The THtml class is designed to easily document; classes, code, and code related text files (like change logs). It generates HTML; pages conforming to the XHTML 1.0 transitional specifications; an example of; these pages is ROOT's own ; reference guide. This page was verified to be valid XHTML 1.0 transitional,; which proves that all pages generated by THtml can be valid, as long as the user; provided XHTML (documentation, header, etc) is valid. You can check the current; THtml by clicking this icon:. Overview:. Usage; Configuration; Input files; Output directory; Linking other documentation; Recognizing class documentation; Author, copyright, etc.; Header and footer; Links to searches, home page, ViewVC; HTML Charset. Documentation syntax; Class description; Class index; Method documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.LoadAllLibs(); // Load all rootmap'ed libraries; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THtml__TFileSysEntry.html:417,log,logs,417,root/html602/THtml__TFileSysEntry.html,https://root.cern,https://root.cern/root/html602/THtml__TFileSysEntry.html,2,['log'],['logs']
Testability,". THtml::TFileSysRoot. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » THtml::TFileSysRoot. class THtml::TFileSysRoot: public THtml::TFileSysDir. The THtml class is designed to easily document; classes, code, and code related text files (like change logs). It generates HTML; pages conforming to the XHTML 1.0 transitional specifications; an example of; these pages is ROOT's own ; reference guide. This page was verified to be valid XHTML 1.0 transitional,; which proves that all pages generated by THtml can be valid, as long as the user; provided XHTML (documentation, header, etc) is valid. You can check the current; THtml by clicking this icon:. Overview:. Usage; Configuration; Input files; Output directory; Linking other documentation; Recognizing class documentation; Author, copyright, etc.; Header and footer; Links to searches, home page, ViewVC; HTML Charset. Documentation syntax; Class description; Class index; Method documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.LoadAllLibs(); // Load all rootmap'ed libraries; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THtml__TFileSysRoot.html:425,log,logs,425,root/html602/THtml__TFileSysRoot.html,https://root.cern,https://root.cern/root/html602/THtml__TFileSysRoot.html,2,['log'],['logs']
Testability,". TImageDump. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » POSTSCRIPT; » TImageDump. class TImageDump: public TVirtualPS. TImageDump. save canvas as an image (GIF, JPEG, PNG, XPM, TIFF etc.); in batch mode. Example:. $ root -b; root [0] .x hsimple.C; root [1] c1->Print(""c1.gif"");. TImageDump can be used in any mode (batch, interactive) as follows. TCanvas *c1;; TImageDump *imgdump = new TImageDump(""test.png"");; c1->Paint();; imgdump->Close();. Function Members (Methods); public:. TImageDump(); TImageDump(const char* filename, Int_t type = -111); virtual~TImageDump(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidCellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); virtual voidCellArrayEnd(); virtual voidCellArrayFill(Int_t r, Int_t g, Int_t b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidDrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawFrame(Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TImageDump.html:582,test,test,582,root/html528/TImageDump.html,https://root.cern,https://root.cern/root/html528/TImageDump.html,4,['test'],['test']
Testability,". TImageDump. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » POSTSCRIPT; » TImageDump. class TImageDump: public TVirtualPS. TImageDump. save canvas as an image (GIF, JPEG, PNG, XPM, TIFF etc.); in batch mode. Example:. $ root -b; root [0] .x hsimple.C; root [1] c1->Print(""c1.gif"");. TImageDump can be used in any mode (batch, interactive) as follows. TCanvas *c1;; TImageDump *imgdump = new TImageDump(""test.png"");; c1->Paint();; imgdump->Close();. Function Members (Methods); public:. virtual~TImageDump(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidCellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); virtual voidCellArrayEnd(); virtual voidCellArrayFill(Int_t r, Int_t g, Int_t b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidDrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawFrame(Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light); virtual voidDrawPolyMarker(Int_t n, Float_t* x, Float_t* y); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TImageDump.html:582,test,test,582,root/html602/TImageDump.html,https://root.cern,https://root.cern/root/html602/TImageDump.html,2,['test'],['test']
Testability,". TMD5. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TMD5. class TMD5. TMD5. This code implements the MD5 message-digest algorithm.; The algorithm is due to Ron Rivest. This code was; written by Colin Plumb in 1993, no copyright is claimed.; This code is in the public domain; do with it what you wish. Equivalent code is available from RSA Data Security, Inc.; This code has been tested against that, and is equivalent,; except that you don't need to include two pages of legalese; with every copy. To compute the message digest of a chunk of bytes, create an; TMD5 object, call Update() as needed on buffers full of bytes, and; then call Final(), which will, optionally, fill a supplied 16-byte; array with the digest. Function Members (Methods); public:. TMD5(); TMD5(const UChar_t* digest); TMD5(const TMD5& md5); virtual~TMD5(); const char*AsString() const; static TClass*Class(); static TMD5*FileChecksum(const char* file); static Int_tFileChecksum(const char* file, UChar_t* digest); voidFinal(); voidFinal(UChar_t* digest); virtual TClass*IsA() const; TMD5&operator=(const TMD5& rhs); voidPrint() const; static TMD5*ReadChecksum(const char* file); Int_tSetDigest(const char* md5ascii); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); voidUpdate(const UChar_t* buf, UInt_t len); static Int_tWriteChecksum(const char* file, const TMD5* md5). private:. voidDecode(UInt_t* out, const UChar_t* in, UInt_t len); voidEncode(UChar_t* out, const UInt_t* in, UInt_t len); voidTransform(UInt_t* buf, const UChar_t* in). Data Members; private:. UInt_tfBits[2]!temp buffer; UInt_tfBuf[4]!temp buffer; UChar_tfDigest[16]message digest; Bool_tfFinalizedtrue if message digest has been finalized; UChar_tfIn[64]!temp buffer. Class Charts. Inheritance; In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMD5.html:567,test,tested,567,root/html528/TMD5.html,https://root.cern,https://root.cern/root/html528/TMD5.html,3,['test'],['tested']
Testability,". TMD5. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TMD5. class TMD5. TMD5. This code implements the MD5 message-digest algorithm.; The algorithm is due to Ron Rivest. This code was; written by Colin Plumb in 1993, no copyright is claimed.; This code is in the public domain; do with it what you wish. Equivalent code is available from RSA Data Security, Inc.; This code has been tested against that, and is equivalent,; except that you don't need to include two pages of legalese; with every copy. To compute the message digest of a chunk of bytes, create an; TMD5 object, call Update() as needed on buffers full of bytes, and; then call Final(), which will, optionally, fill a supplied 16-byte; array with the digest. Function Members (Methods); public:. TMD5(); TMD5(const UChar_t* digest); TMD5(const TMD5& md5); virtual~TMD5(); const char*AsString() const; static TClass*Class(); static TMD5*FileChecksum(const char* file); static Int_tFileChecksum(const char* file, UChar_t* digest); voidFinal(); voidFinal(UChar_t* digest); virtual TClass*IsA() const; TMD5&operator=(const TMD5& rhs); voidPrint() const; static TMD5*ReadChecksum(const char* file); Int_tSetDigest(const char* md5ascii); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidUpdate(const UChar_t* buf, UInt_t len); static Int_tWriteChecksum(const char* file, const TMD5* md5). private:. voidDecode(UInt_t* out, const UChar_t* in, UInt_t len); voidEncode(UChar_t* out, const UInt_t* in, UInt_t len); voidTransform(UInt_t* buf, const UChar_t* in). Data Members; private:. UInt_tfBits[2]!temp buffer; UInt_tfBuf[4]!temp buffer; UChar_tfDigest[16]message digest; Bool_tfFinalizedtrue if message digest has been finalized; UChar_tfIn[64]!temp buffer; Char_tfStr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMD5.html:567,test,tested,567,root/html534/TMD5.html,https://root.cern,https://root.cern/root/html534/TMD5.html,1,['test'],['tested']
Testability,". TMD5. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TMD5. class TMD5. TMD5. This code implements the MD5 message-digest algorithm.; The algorithm is due to Ron Rivest. This code was; written by Colin Plumb in 1993, no copyright is claimed.; This code is in the public domain; do with it what you wish. Equivalent code is available from RSA Data Security, Inc.; This code has been tested against that, and is equivalent,; except that you don't need to include two pages of legalese; with every copy. To compute the message digest of a chunk of bytes, create an; TMD5 object, call Update() as needed on buffers full of bytes, and; then call Final(), which will, optionally, fill a supplied 16-byte; array with the digest. Function Members (Methods); public:. virtual~TMD5(); const char*AsString() const; static TClass*Class(); static TMD5*FileChecksum(const char* file); static Int_tFileChecksum(const char* file, UChar_t[16] digest); voidFinal(); voidFinal(UChar_t[16] digest); virtual TClass*IsA() const; TMD5&operator=(const TMD5& rhs); voidPrint() const; static TMD5*ReadChecksum(const char* file); Int_tSetDigest(const char* md5ascii); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TMD5(); TMD5(const UChar_t* digest); TMD5(const TMD5& md5); voidUpdate(const UChar_t* buf, UInt_t len); static Int_tWriteChecksum(const char* file, const TMD5* md5). private:. voidDecode(UInt_t* out, const UChar_t* in, UInt_t len); voidEncode(UChar_t* out, const UInt_t* in, UInt_t len); voidTransform(UInt_t[4] buf, const UChar_t[64] in). Data Members; private:. UInt_tfBits[2]!temp buffer; UInt_tfBuf[4]!temp buffer; UChar_tfDigest[16]message digest; Bool_tfFinalizedtrue if message digest has been finalized; UChar_tfIn[64]!t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMD5.html:567,test,tested,567,root/html602/TMD5.html,https://root.cern,https://root.cern/root/html602/TMD5.html,2,['test'],['tested']
Testability,". TMLPAnalyzer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MLP; » TMLPAnalyzer. class TMLPAnalyzer: public TObject. TMLPAnalyzer. This utility class contains a set of tests usefull when developing; a neural network.; It allows you to check for unneeded variables, and to control; the network structure. Function Members (Methods); public:. TMLPAnalyzer(TMultiLayerPerceptron& net); TMLPAnalyzer(TMultiLayerPerceptron* net); TMLPAnalyzer(const TMLPAnalyzer&); virtual~TMLPAnalyzer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCheckNetwork(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidDrawDInput(Int_t i); voidDrawDInputs(); voidDrawNetwork(Int_t neuron, const char* signal, const char* bg); TProfile*DrawTruthDeviation(Int_t outnode = 0, Option_t* option = """"); TProfile*DrawTruthDeviationInOut(Int_t innode, Int_t outnode = 0, Option_t* option = """"); THStack*DrawTruthDeviationInsOut(Int_t outnode = 0, Option_t* option = """"); THStack*DrawTruthDeviations(Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMLPAnalyzer.html:347,test,tests,347,root/html528/TMLPAnalyzer.html,https://root.cern,https://root.cern/root/html528/TMLPAnalyzer.html,4,['test'],['tests']
Testability,". TMLPAnalyzer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MLP; » TMLPAnalyzer. class TMLPAnalyzer: public TObject. TMLPAnalyzer. This utility class contains a set of tests usefull when developing; a neural network.; It allows you to check for unneeded variables, and to control; the network structure. Function Members (Methods); public:. virtual~TMLPAnalyzer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCheckNetwork(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidDrawDInput(Int_t i); voidDrawDInputs(); voidDrawNetwork(Int_t neuron, const char* signal, const char* bg); TProfile*DrawTruthDeviation(Int_t outnode = 0, Option_t* option = """"); TProfile*DrawTruthDeviationInOut(Int_t innode, Int_t outnode = 0, Option_t* option = """"); THStack*DrawTruthDeviationInsOut(Int_t outnode = 0, Option_t* option = """"); THStack*DrawTruthDeviations(Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMLPAnalyzer.html:347,test,tests,347,root/html602/TMLPAnalyzer.html,https://root.cern,https://root.cern/root/html602/TMLPAnalyzer.html,2,['test'],['tests']
Testability,. TMVA::Config. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Config. class TMVA::Config. Function Members (Methods); public:. static TClass*Class(); TMVA::ConfigConfig(const TMVA::Config&); static voidDestroyInstance(); Bool_tDrawProgressBar() const; TMVA::Config::IONames&GetIONames(); TMVA::Config::VariablePlotting&GetVariablePlotting(); static TMVA::Config&Instance(); virtual TClass*IsA() const; Bool_tIsSilent() const; TMVA::Config&operator=(const TMVA::Config&); voidSetDrawProgressBar(Bool_t d); voidSetSilent(Bool_t s); voidSetUseColor(Bool_t uc); voidSetWriteOptionsReference(Bool_t w); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); Bool_tUseColor() const; Bool_tWriteOptionsReference() const. private:. (unknown)(); TMVA::ConfigConfig(); TMVA::MsgLogger&Log() const. Data Members; public:. TMVA::Config::IONamesfIONamesCustomisable weight file properties; TMVA::Config::VariablePlottingfVariablePlottingCustomisable plotting properties. private:. Bool_tfDrawProgressBardraw progress bar to indicate training evolution; TMVA::MsgLogger*fLoggermessage logger; Bool_tfSilentno output at all; Bool_tfUseColoredConsolecoloured standard output; Bool_tfWriteOptionsReferenceif set true: Configurable objects write file with option reference; static TMVA::Config*fgConfigPtr. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Config(); constructor - set defaults. void DestroyInstance(); static function: destroy TMVA instance. TMVA::Config& Instance(); static function: returns TMVA instance. Bool_t UseColor() const; { return fUseColoredConsole; }. void SetUseColor(Bool_t uc); { fUseColoredConsole = uc; }. Bool_t IsSilent() const; { return fSilent; }. void SetSilent(Bool_t s); { fSilent = s; }. B,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Config.html:1020,Log,Log,1020,root/html528/TMVA__Config.html,https://root.cern,https://root.cern/root/html528/TMVA__Config.html,3,['Log'],['Log']
Testability,. TMVA::Config. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Config. class TMVA::Config. Function Members (Methods); public:. static TClass*Class(); static voidDestroyInstance(); Bool_tDrawProgressBar() const; TMVA::Config::IONames&GetIONames(); TMVA::Config::VariablePlotting&GetVariablePlotting(); static TMVA::Config&Instance(); virtual TClass*IsA() const; Bool_tIsSilent() const; voidSetDrawProgressBar(Bool_t d); voidSetSilent(Bool_t s); voidSetUseColor(Bool_t uc); voidSetWriteOptionsReference(Bool_t w); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); Bool_tUseColor() const; Bool_tWriteOptionsReference() const. private:. virtual~Config(); TMVA::ConfigConfig(); TMVA::ConfigConfig(const TMVA::Config&); TMVA::MsgLogger&Log() const; TMVA::Config&operator=(const TMVA::Config&). Data Members; public:. IONamesfIONamesCustomisable weight file properties; VariablePlottingfVariablePlottingCustomisable plotting properties. private:. atomic<Bool_t>fDrawProgressBardraw progress bar to indicate training evolution; TMVA::MsgLogger*fLoggermessage logger; atomic<Bool_t>fSilentno output at all; atomic<Bool_t>fUseColoredConsolecoloured standard output; atomic<Bool_t>fWriteOptionsReferenceif set true: Configurable objects write file with option reference; static atomic<TMVA::Config*>fgConfigPtr. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Config(); constructor - set defaults. ~Config(); destructor. void DestroyInstance(); static function: destroy TMVA instance. TMVA::Config& Instance(); static function: returns TMVA instance. Bool_t UseColor() const; { return fUseColoredConsole; }. void SetUseColor(Bool_t uc); { fUseColoredConsole = uc; }. Bool_t IsSilent() cons,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__Config.html:1010,Log,Log,1010,root/html602/TMVA__Config.html,https://root.cern,https://root.cern/root/html602/TMVA__Config.html,1,['Log'],['Log']
Testability,. TMVA::Config. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::Config. class TMVA::Config. Function Members (Methods); public:. static TClass*Class(); static voidDestroyInstance(); Bool_tDrawProgressBar() const; TMVA::Config::IONames&GetIONames(); TMVA::Config::VariablePlotting&GetVariablePlotting(); static TMVA::Config&Instance(); virtual TClass*IsA() const; Bool_tIsSilent() const; voidSetDrawProgressBar(Bool_t d); voidSetSilent(Bool_t s); voidSetUseColor(Bool_t uc); voidSetWriteOptionsReference(Bool_t w); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); Bool_tUseColor() const; Bool_tWriteOptionsReference() const. private:. virtual~Config(); TMVA::ConfigConfig(); TMVA::ConfigConfig(const TMVA::Config&); TMVA::MsgLogger&Log() const; TMVA::Config&operator=(const TMVA::Config&). Data Members; public:. IONamesfIONamesCustomisable weight file properties; VariablePlottingfVariablePlottingCustomisable plotting properties. private:. atomic<Bool_t>fDrawProgressBardraw progress bar to indicate training evolution; TMVA::MsgLogger*fLoggermessage logger; atomic<Bool_t>fSilentno output at all; atomic<Bool_t>fUseColoredConsolecoloured standard output; atomic<Bool_t>fWriteOptionsReferenceif set true: Configurable objects write file with option reference; static atomic<TMVA::Config*>fgConfigPtr. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Config(); constructor - set defaults. ~Config(); destructor. void DestroyInstance(); static function: destroy TMVA instance. TMVA::Config& Instance(); static function: returns TMVA instance. Bool_t UseColor() const; { return fUseColoredConsole; }. void SetUseColor(Bool_t uc); { fUseColoredConsole = uc; }. Bool_t IsSilen,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__Config.html:1018,Log,Log,1018,root/html604/TMVA__Config.html,https://root.cern,https://root.cern/root/html604/TMVA__Config.html,1,['Log'],['Log']
Testability,". TMVA::CostComplexityPruneTool. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::CostComplexityPruneTool. class TMVA::CostComplexityPruneTool: public TMVA::IPruneTool. Function Members (Methods); public:. virtual~CostComplexityPruneTool(); virtual TMVA::PruningInfo*CalculatePruningInfo(TMVA::DecisionTree* dt, const TMVA::IPruneTool::EventSample* testEvents = __null, Bool_t isAutomatic = kFALSE); TMVA::CostComplexityPruneToolCostComplexityPruneTool(TMVA::SeparationBase* qualityIndex = __null); TMVA::CostComplexityPruneToolCostComplexityPruneTool(const TMVA::CostComplexityPruneTool&); Double_tTMVA::IPruneTool::GetPruneStrength() const; TMVA::IPruneToolTMVA::IPruneTool::IPruneTool(); TMVA::IPruneToolTMVA::IPruneTool::IPruneTool(const TMVA::IPruneTool&); Bool_tTMVA::IPruneTool::IsAutomatic() const; TMVA::CostComplexityPruneTool&operator=(const TMVA::CostComplexityPruneTool&); voidTMVA::IPruneTool::SetAutomatic(); voidTMVA::IPruneTool::SetPruneStrength(Double_t alpha). private:. voidInitTreePruningMetaData(TMVA::DecisionTreeNode* n); TMVA::MsgLogger&Log() const; voidOptimize(TMVA::DecisionTree* dt, Double_t weights). Data Members; protected:. Double_tTMVA::IPruneTool::B; Double_tTMVA::IPruneTool::S; Double_tTMVA::IPruneTool::fPruneStrength. private:. TMVA::MsgLogger*fLogger! output stream to save logging information; Int_tfOptimalK! the optimal index of the prune sequence; vector<TMVA::DecisionTreeNode*>fPruneSequence! map of weakest links (i.e., branches to prune) -> pruning index; vector<Double_t>fPruneStrengthList! map of alpha -> pruning index; vector<Double_t>fQualityIndexList! map of R(T) -> pruning index; TMVA::SeparationBase*fQualityIndexTool! the quality index used to calculate R(t), R(T) = sum[t in ~T]{ R(t) }. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Functio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__CostComplexityPruneTool.html:529,test,testEvents,529,root/html602/TMVA__CostComplexityPruneTool.html,https://root.cern,https://root.cern/root/html602/TMVA__CostComplexityPruneTool.html,1,['test'],['testEvents']
Testability,". TMVA::CostComplexityPruneTool. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::CostComplexityPruneTool. class TMVA::CostComplexityPruneTool: public TMVA::IPruneTool. Function Members (Methods); public:. virtual~CostComplexityPruneTool(); virtual TMVA::PruningInfo*CalculatePruningInfo(TMVA::DecisionTree* dt, const vector<TMVA::Event*,allocator<TMVA::Event*> >* testEvents = NULL, Bool_t isAutomatic = kFALSE); TMVA::CostComplexityPruneToolCostComplexityPruneTool(TMVA::SeparationBase* qualityIndex = NULL); TMVA::CostComplexityPruneToolCostComplexityPruneTool(const TMVA::CostComplexityPruneTool&); TMVA::CostComplexityPruneTool&operator=(const TMVA::CostComplexityPruneTool&). private:. voidInitTreePruningMetaData(TMVA::DecisionTreeNode* n); TMVA::MsgLogger&Log() const; voidOptimize(TMVA::DecisionTree* dt, Double_t weights). Data Members; private:. TMVA::MsgLogger*fLogger! output stream to save logging information; Int_tfOptimalK! the optimal index of the prune sequence; vector<TMVA::DecisionTreeNode*,allocator<TMVA::DecisionTreeNode*> >fPruneSequence! map of weakest links (i.e., branches to prune) -> pruning index; vector<Double_t>fPruneStrengthList! map of alpha -> pruning index; vector<Double_t>fQualityIndexList! map of R(T) -> pruning index; TMVA::SeparationBase*fQualityIndexTool! the quality index used to calculate R(t), R(T) = sum[t in ~T]{ R(t) }. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CostComplexityPruneTool( SeparationBase* qualityIndex ); the constructor for the cost complexity prunig. ~CostComplexityPruneTool(); the destructor for the cost complexity prunig. CalculatePruningInfo(TMVA::DecisionTree* dt, const vector<TMVA::Event*,allocator<TMVA::Event*> >* testEvents = NULL, Bool_t isAutomatic = kFALSE). void InitTreePruningMetaData(T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__CostComplexityPruneTool.html:545,test,testEvents,545,root/html528/TMVA__CostComplexityPruneTool.html,https://root.cern,https://root.cern/root/html528/TMVA__CostComplexityPruneTool.html,6,"['Log', 'test']","['Log', 'testEvents']"
Testability,". TMVA::CostComplexityPruneTool. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::CostComplexityPruneTool. class TMVA::CostComplexityPruneTool: public TMVA::IPruneTool. Function Members (Methods); public:. virtual~CostComplexityPruneTool(); virtual TMVA::PruningInfo*CalculatePruningInfo(TMVA::DecisionTree* dt, const vector<const TMVA::Event*,allocator<const TMVA::Event*> >* testEvents = NULL, Bool_t isAutomatic = kFALSE); TMVA::CostComplexityPruneToolCostComplexityPruneTool(TMVA::SeparationBase* qualityIndex = NULL); TMVA::CostComplexityPruneToolCostComplexityPruneTool(const TMVA::CostComplexityPruneTool&); TMVA::CostComplexityPruneTool&operator=(const TMVA::CostComplexityPruneTool&). private:. voidInitTreePruningMetaData(TMVA::DecisionTreeNode* n); TMVA::MsgLogger&Log() const; voidOptimize(TMVA::DecisionTree* dt, Double_t weights). Data Members; private:. TMVA::MsgLogger*fLogger! output stream to save logging information; Int_tfOptimalK! the optimal index of the prune sequence; vector<TMVA::DecisionTreeNode*,allocator<TMVA::DecisionTreeNode*> >fPruneSequence! map of weakest links (i.e., branches to prune) -> pruning index; vector<Double_t>fPruneStrengthList! map of alpha -> pruning index; vector<Double_t>fQualityIndexList! map of R(T) -> pruning index; TMVA::SeparationBase*fQualityIndexTool! the quality index used to calculate R(t), R(T) = sum[t in ~T]{ R(t) }. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CostComplexityPruneTool( SeparationBase* qualityIndex ); the constructor for the cost complexity prunig. ~CostComplexityPruneTool(); the destructor for the cost complexity prunig. CalculatePruningInfo(TMVA::DecisionTree* dt, const vector<const TMVA::Event*,allocator<const TMVA::Event*> >* testEvents = NULL, Bool_t isAutomatic = kFALSE). void I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__CostComplexityPruneTool.html:557,test,testEvents,557,root/html534/TMVA__CostComplexityPruneTool.html,https://root.cern,https://root.cern/root/html534/TMVA__CostComplexityPruneTool.html,2,"['Log', 'test']","['Log', 'testEvents']"
Testability,". TMVA::CostComplexityPruneTool. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::CostComplexityPruneTool. class TMVA::CostComplexityPruneTool: public TMVA::IPruneTool. Function Members (Methods); public:. virtual~CostComplexityPruneTool(); virtual TMVA::PruningInfo*CalculatePruningInfo(TMVA::DecisionTree* dt, const TMVA::IPruneTool::EventSample* testEvents = __null, Bool_t isAutomatic = kFALSE); TMVA::CostComplexityPruneToolCostComplexityPruneTool(TMVA::SeparationBase* qualityIndex = __null); TMVA::CostComplexityPruneToolCostComplexityPruneTool(const TMVA::CostComplexityPruneTool&); Double_tTMVA::IPruneTool::GetPruneStrength() const; TMVA::IPruneToolTMVA::IPruneTool::IPruneTool(); TMVA::IPruneToolTMVA::IPruneTool::IPruneTool(const TMVA::IPruneTool&); Bool_tTMVA::IPruneTool::IsAutomatic() const; TMVA::CostComplexityPruneTool&operator=(const TMVA::CostComplexityPruneTool&); voidTMVA::IPruneTool::SetAutomatic(); voidTMVA::IPruneTool::SetPruneStrength(Double_t alpha). private:. voidInitTreePruningMetaData(TMVA::DecisionTreeNode* n); TMVA::MsgLogger&Log() const; voidOptimize(TMVA::DecisionTree* dt, Double_t weights). Data Members; protected:. Double_tTMVA::IPruneTool::B; Double_tTMVA::IPruneTool::S; Double_tTMVA::IPruneTool::fPruneStrength. private:. TMVA::MsgLogger*fLogger! output stream to save logging information; Int_tfOptimalK! the optimal index of the prune sequence; vector<TMVA::DecisionTreeNode*>fPruneSequence! map of weakest links (i.e., branches to prune) -> pruning index; vector<Double_t>fPruneStrengthList! map of alpha -> pruning index; vector<Double_t>fQualityIndexList! map of R(T) -> pruning index; TMVA::SeparationBase*fQualityIndexTool! the quality index used to calculate R(t), R(T) = sum[t in ~T]{ R(t) }. Class Charts. Inheritance; Inherited Members; Includes; Libraries.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__CostComplexityPruneTool.html:537,test,testEvents,537,root/html604/TMVA__CostComplexityPruneTool.html,https://root.cern,https://root.cern/root/html604/TMVA__CostComplexityPruneTool.html,1,['test'],['testEvents']
Testability,". TMVA::CrossEntropy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::CrossEntropy. class TMVA::CrossEntropy: public TMVA::SeparationBase. Implementation of the CrossEntropy as separation criterion; -p log (p) - (1-p)log(1-p); p=purity. Function Members (Methods); public:. virtual~CrossEntropy(); static TClass*Class(); TMVA::CrossEntropyCrossEntropy(); TMVA::CrossEntropyCrossEntropy(const TMVA::CrossEntropy& g); const TString&TMVA::SeparationBase::GetName(); Double_tTMVA::SeparationBase::GetSeparationGain(const Double_t& nSelS, const Double_t& nSelB, const Double_t& nTotS, const Double_t& nTotB); virtual Double_tGetSeparationIndex(const Double_t& s, const Double_t& b); virtual TClass*IsA() const; TMVA::CrossEntropy&operator=(const TMVA::CrossEntropy&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. TStringTMVA::SeparationBase::fNamename of the concrete Separation Index impementation; Double_tTMVA::SeparationBase::fPrecisionCut. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t GetSeparationIndex(const Double_t& s, const Double_t& b); Cross Entropy defined as; -p log (p) - (1-p)log(1-p); p=purity = s/(s+b). CrossEntropy(); default constructor. { fName = ""CE""; }. CrossEntropy(const TMVA::CrossEntropy& g); copy constructor. {}. virtual ~CrossEntropy(); destructor. {}. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: CrossEntropy.h 29122 2009-06-22 06:51:30Z brun $ » Last generated: 2010-09-23 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__CrossEntropy.html:383,log,log,383,root/html528/TMVA__CrossEntropy.html,https://root.cern,https://root.cern/root/html528/TMVA__CrossEntropy.html,4,['log'],['log']
Testability,". TMVA::CrossEntropy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::CrossEntropy. class TMVA::CrossEntropy: public TMVA::SeparationBase. Implementation of the CrossEntropy as separation criterion; -p log (p) - (1-p)log(1-p); p=purity. Function Members (Methods); public:. virtual~CrossEntropy(); static TClass*Class(); TMVA::CrossEntropyCrossEntropy(); TMVA::CrossEntropyCrossEntropy(const TMVA::CrossEntropy& g); const TString&TMVA::SeparationBase::GetName(); Double_tTMVA::SeparationBase::GetSeparationGain(const Double_t& nSelS, const Double_t& nSelB, const Double_t& nTotS, const Double_t& nTotB); virtual Double_tGetSeparationIndex(const Double_t& s, const Double_t& b); virtual TClass*IsA() const; TMVA::CrossEntropy&operator=(const TMVA::CrossEntropy&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. TStringTMVA::SeparationBase::fNamename of the concrete Separation Index impementation; Double_tTMVA::SeparationBase::fPrecisionCut. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t GetSeparationIndex(const Double_t& s, const Double_t& b); Cross Entropy defined as; -p log (p) - (1-p)log(1-p); p=purity = s/(s+b). CrossEntropy(); default constructor. { fName = ""CE""; }. CrossEntropy(const TMVA::CrossEntropy& g); copy constructor. {}. virtual ~CrossEntropy(); destructor. {}. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: CrossEntropy.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__CrossEntropy.html:383,log,log,383,root/html532/TMVA__CrossEntropy.html,https://root.cern,https://root.cern/root/html532/TMVA__CrossEntropy.html,4,['log'],['log']
Testability,". TMVA::CrossEntropy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::CrossEntropy. class TMVA::CrossEntropy: public TMVA::SeparationBase. Implementation of the CrossEntropy as separation criterion; -p log (p) - (1-p)log(1-p); p=purity. Function Members (Methods); public:. virtual~CrossEntropy(); static TClass*Class(); TMVA::CrossEntropyCrossEntropy(); TMVA::CrossEntropyCrossEntropy(const TMVA::CrossEntropy& g); const TString&TMVA::SeparationBase::GetName(); Double_tTMVA::SeparationBase::GetSeparationGain(const Double_t& nSelS, const Double_t& nSelB, const Double_t& nTotS, const Double_t& nTotB); virtual Double_tGetSeparationIndex(const Double_t& s, const Double_t& b); virtual TClass*IsA() const; TMVA::CrossEntropy&operator=(const TMVA::CrossEntropy&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. TStringTMVA::SeparationBase::fNamename of the concrete Separation Index impementation; Double_tTMVA::SeparationBase::fPrecisionCut. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t GetSeparationIndex(const Double_t& s, const Double_t& b); Cross Entropy defined as; -p log (p) - (1-p)log(1-p); p=purity = s/(s+b). CrossEntropy(); default constructor. { fName = ""CE""; }. CrossEntropy(const TMVA::CrossEntropy& g); copy constructor. {}. virtual ~CrossEntropy(); destructor. {}. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: CrossEntropy.h 40012 2011-06-27 16:03:11Z stelzer $ » Last generated: 2011-07-04 15:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__CrossEntropy.html:383,log,log,383,root/html530/TMVA__CrossEntropy.html,https://root.cern,https://root.cern/root/html530/TMVA__CrossEntropy.html,4,['log'],['log']
Testability,". TMVA::CrossEntropy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::CrossEntropy. class TMVA::CrossEntropy: public TMVA::SeparationBase. Implementation of the CrossEntropy as separation criterion; -p log (p) - (1-p)log(1-p); p=purity. Function Members (Methods); public:. virtual~CrossEntropy(); static TClass*Class(); TMVA::CrossEntropyCrossEntropy(); TMVA::CrossEntropyCrossEntropy(const TMVA::CrossEntropy& g); const TString&TMVA::SeparationBase::GetName(); virtual Double_tTMVA::SeparationBase::GetSeparationGain(const Double_t& nSelS, const Double_t& nSelB, const Double_t& nTotS, const Double_t& nTotB); virtual Double_tGetSeparationIndex(const Double_t& s, const Double_t& b); virtual TClass*IsA() const; TMVA::CrossEntropy&operator=(const TMVA::CrossEntropy&); TMVA::SeparationBaseTMVA::SeparationBase::SeparationBase(); TMVA::SeparationBaseTMVA::SeparationBase::SeparationBase(const TMVA::SeparationBase& s); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. TStringTMVA::SeparationBase::fNamename of the concrete Separation Index impementation; Double_tTMVA::SeparationBase::fPrecisionCut. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t GetSeparationIndex(const Double_t& s, const Double_t& b); Cross Entropy defined as; -p log (p) - (1-p)log(1-p); p=purity = s/(s+b). CrossEntropy(); default constructor. { fName = ""CE""; }. CrossEntropy(const TMVA::CrossEntropy& g); copy constructor. {}. virtual ~CrossEntropy(); destructor. {}. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-30 15:15; This page has been automatically generated. Fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__CrossEntropy.html:383,log,log,383,root/html602/TMVA__CrossEntropy.html,https://root.cern,https://root.cern/root/html602/TMVA__CrossEntropy.html,2,['log'],['log']
Testability,". TMVA::CrossEntropy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::CrossEntropy. class TMVA::CrossEntropy: public TMVA::SeparationBase. Implementation of the CrossEntropy as separation criterion; -p log (p) - (1-p)log(1-p); p=purity. Function Members (Methods); public:. virtual~CrossEntropy(); static TClass*Class(); TMVA::CrossEntropyCrossEntropy(); TMVA::CrossEntropyCrossEntropy(const TMVA::CrossEntropy& g); const TString&TMVA::SeparationBase::GetName(); virtual Double_tTMVA::SeparationBase::GetSeparationGain(const Double_t& nSelS, const Double_t& nSelB, const Double_t& nTotS, const Double_t& nTotB); virtual Double_tGetSeparationIndex(const Double_t& s, const Double_t& b); virtual TClass*IsA() const; TMVA::CrossEntropy&operator=(const TMVA::CrossEntropy&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. TStringTMVA::SeparationBase::fNamename of the concrete Separation Index impementation; Double_tTMVA::SeparationBase::fPrecisionCut. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t GetSeparationIndex(const Double_t& s, const Double_t& b); Cross Entropy defined as; -p log (p) - (1-p)log(1-p); p=purity = s/(s+b). CrossEntropy(); default constructor. { fName = ""CE""; }. CrossEntropy(const TMVA::CrossEntropy& g); copy constructor. {}. virtual ~CrossEntropy(); destructor. {}. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-03-14 16:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__CrossEntropy.html:383,log,log,383,root/html534/TMVA__CrossEntropy.html,https://root.cern,https://root.cern/root/html534/TMVA__CrossEntropy.html,4,['log'],['log']
Testability,". TMVA::CrossEntropy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::CrossEntropy. class TMVA::CrossEntropy: public TMVA::SeparationBase. Implementation of the CrossEntropy as separation criterion; -p log (p) - (1-p)log(1-p); p=purity. Function Members (Methods); public:. virtual~CrossEntropy(); static TClass*Class(); TMVA::CrossEntropyCrossEntropy(); TMVA::CrossEntropyCrossEntropy(const TMVA::CrossEntropy& g); const TString&TMVA::SeparationBase::GetName(); virtual Double_tTMVA::SeparationBase::GetSeparationGain(const Double_t& nSelS, const Double_t& nSelB, const Double_t& nTotS, const Double_t& nTotB); virtual Double_tGetSeparationIndex(const Double_t& s, const Double_t& b); virtual TClass*IsA() const; TMVA::CrossEntropy&operator=(const TMVA::CrossEntropy&); TMVA::SeparationBaseTMVA::SeparationBase::SeparationBase(); TMVA::SeparationBaseTMVA::SeparationBase::SeparationBase(const TMVA::SeparationBase& s); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. TStringTMVA::SeparationBase::fNamename of the concrete Separation Index impementation; Double_tTMVA::SeparationBase::fPrecisionCut. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t GetSeparationIndex(const Double_t& s, const Double_t& b); Cross Entropy defined as; -p log (p) - (1-p)log(1-p); p=purity = s/(s+b). CrossEntropy(); default constructor. { fName = ""CE""; }. CrossEntropy(const TMVA::CrossEntropy& g); copy constructor. {}. virtual ~CrossEntropy(); destructor. {}. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:15; This page has been automatically gener",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__CrossEntropy.html:391,log,log,391,root/html604/TMVA__CrossEntropy.html,https://root.cern,https://root.cern/root/html604/TMVA__CrossEntropy.html,2,['log'],['log']
Testability,. TMVA::Event. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TEST; » TMVA::Event. class TMVA::Event. Event and Track classes. The Event class is a naive/simple example of an event structure.; public:; char fType[20];; char *fEventName; //run+event number in character format; Int_t fNtrack;; Int_t fNseg;; Int_t fNvertex;; UInt_t fFlag;; Double32_t fTemperature;; Int_t fMeasures[10];; Double32_t fMatrix[4][4];; Double32_t *fClosestDistance; //[fNvertex] indexed array!; EventHeader fEvtHdr;; TClonesArray *fTracks;; TRefArray *fHighPt; //array of High Pt tracks only; TRefArray *fMuons; //array of Muon tracks only; TRef fLastTrack; //pointer to last track; TRef fHistoWeb; //EXEC:GetHistoWeb reference to an histogram in a TWebFile; TH1F *fH;; TBits fTriggerBits; //Bits triggered by this event. The EventHeader class has 3 data members (integers):; public:; Int_t fEvtNum;; Int_t fRun;; Int_t fDate;. The Event data member fTracks is a pointer to a TClonesArray.; It is an array of a variable number of tracks per event.; Each element of the array is an object of class Track with the members:; private:; Float_t fPx; //X component of the momentum; Float_t fPy; //Y component of the momentum; Float_t fPz; //Z component of the momentum; Float_t fRandom; //A random track quantity; Float_t fMass2; //The mass square of this particle; Float_t fBx; //X intercept at the vertex; Float_t fBy; //Y intercept at the vertex; Float_t fMeanCharge; //Mean charge deposition of all hits of this track; Float_t fXfirst; //X coordinate of the first point; Float_t fXlast; //X coordinate of the last point; Float_t fYfirst; //Y coordinate of the first point; Float_t fYlast; //Y coordinate of the last point; Float_t fZfirst; //Z coordinate of the first point; Float_t fZlast; //Z coordinate of the last point; Double32_t fCharge; //Charge of ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Event.html:230,TEST,TEST,230,root/html528/TMVA__Event.html,https://root.cern,https://root.cern/root/html528/TMVA__Event.html,4,['TEST'],['TEST']
Testability,". TMVA::Factory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Factory. class TMVA::Factory: public TMVA::Configurable. This is the main MVA steering class: it creates all MVA methods,; and guides them through the training, testing and evaluation; phases. Function Members (Methods); public:. virtual~Factory(); voidTObject::AbstractMethod(const char* method) const; voidAddBackgroundTestEvent(const vector<Double_t>& event, Double_t weight = 1.0); voidAddBackgroundTrainingEvent(const vector<Double_t>& event, Double_t weight = 1.0); voidAddBackgroundTree(TTree* background, Double_t weight = 1.0, TMVA::Types::ETreeType treetype = Types::kMaxTreeType); voidAddBackgroundTree(TString datFileB, Double_t weight = 1.0, TMVA::Types::ETreeType treetype = Types::kMaxTreeType); voidAddBackgroundTree(TTree* background, Double_t weight, const TString& treetype); voidAddCut(const TString& cut, const TString& className = """"); voidAddCut(const TCut& cut, const TString& className = """"); TMVA::DataSetInfo&AddDataSet(TMVA::DataSetInfo&); TMVA::DataSetInfo&AddDataSet(const TString&); voidAddEvent(const TString& className, TMVA::Types::ETreeType tt, const vector<Double_t>& event, Double_t weight); voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidAddRegressionTarget(const TString& expression, const TString& title = """", const TString& unit = """", Double_t min = 0, Double_t max = 0); voidAddRegressionTree(TTree* tree, Double_t weight = 1.0, TMVA::Types::ETreeType treetype = Types::kMaxTreeType); voidAddSignalTestEvent(const vector<Double_t>& event, Double_t weight = 1.0); voidAddSignalTrainingEvent(const vector<Double_t>& event, Double_t weight = 1.0); voidAddSignalTree(TTree* signal, Double_t weight = 1.0, TMVA::Types::ETreeType treetype = Types::kMaxTreeType); voidAddSignalTree(TString datFileS, Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Factory.html:407,test,testing,407,root/html528/TMVA__Factory.html,https://root.cern,https://root.cern/root/html528/TMVA__Factory.html,4,['test'],['testing']
Testability,". TMVA::LogInterval. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::LogInterval. class TMVA::LogInterval: public TMVA::Interval. Function Members (Methods); public:. virtual~LogInterval(); static TClass*Class(); virtual Double_tGetElement(Int_t position) const; virtual Double_tGetMax() const; virtual Double_tGetMean() const; virtual Double_tGetMin() const; virtual Int_tGetNbins() const; virtual Double_tGetRndm(TRandom3&) const; virtual Double_tGetStepSize(Int_t iBin = 0) const; virtual Double_tGetWidth() const; TMVA::IntervalTMVA::Interval::Interval(const TMVA::Interval& other); TMVA::IntervalTMVA::Interval::Interval(Double_t min, Double_t max, Int_t nbins = 0); virtual TClass*IsA() const; TMVA::MsgLogger&Log() const; TMVA::LogIntervalLogInterval(const TMVA::LogInterval& other); TMVA::LogIntervalLogInterval(Double_t min, Double_t max, Int_t nbins = 0); TMVA::LogInterval&operator=(const TMVA::LogInterval&); virtual voidTMVA::Interval::Print(ostream& os) const; voidSetMax(Double_t m); voidSetMin(Double_t m); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. Double_tTMVA::Interval::fMaxthe constraints of the Interval; Double_tTMVA::Interval::fMinthe constraints of the Interval; Int_tTMVA::Interval::fNbinswhen >0 : number of bins (discrete interval); when ==0 continuous interval. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LogInterval(Double_t min, Double_t max, Int_t nbins = 0). LogInterval(const TMVA::LogInterval& other). ~LogInterval(); destructor. Double_t GetElement(Int_t position) const; calculates the value of the ""number"" bin in a discrete interval.; Parameters:; Double_t position. Double_t GetStepSize(Int_t iBin = 0)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__LogInterval.html:8,Log,LogInterval,8,root/html602/TMVA__LogInterval.html,https://root.cern,https://root.cern/root/html602/TMVA__LogInterval.html,10,['Log'],"['Log', 'LogInterval', 'LogIntervalLogInterval']"
Testability,". TMVA::LogInterval. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::LogInterval. class TMVA::LogInterval: public TMVA::Interval. Function Members (Methods); public:. virtual~LogInterval(); static TClass*Class(); virtual Double_tGetElement(Int_t position) const; virtual Double_tGetMax() const; virtual Double_tGetMean() const; virtual Double_tGetMin() const; virtual Int_tGetNbins() const; virtual Double_tGetRndm(TRandom3&) const; virtual Double_tGetStepSize(Int_t iBin = 0) const; virtual Double_tGetWidth() const; TMVA::IntervalTMVA::Interval::Interval(const TMVA::Interval& other); TMVA::IntervalTMVA::Interval::Interval(Double_t min, Double_t max, Int_t nbins = 0); virtual TClass*IsA() const; TMVA::MsgLogger&Log() const; TMVA::LogIntervalLogInterval(const TMVA::LogInterval& other); TMVA::LogIntervalLogInterval(Double_t min, Double_t max, Int_t nbins = 0); TMVA::LogInterval&operator=(const TMVA::LogInterval&); virtual voidTMVA::Interval::Print(ostream& os) const; voidSetMax(Double_t m); voidSetMin(Double_t m); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; public:. static TMVA::MsgLogger*fgLoggermessage logger. protected:. Double_tTMVA::Interval::fMaxthe constraints of the Interval; Double_tTMVA::Interval::fMin; Int_tTMVA::Interval::fNbinswhen >0 : number of bins (discrete interval); when ==0 continuous interval. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LogInterval(Double_t min, Double_t max, Int_t nbins = 0). LogInterval(const TMVA::LogInterval& other). ~LogInterval(); destructor. Double_t GetElement(Int_t position) const; calculates the value of the ""number"" bin in a discrete interval.; Parameters:; Double_t position. Double_t GetStepSize(I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__LogInterval.html:8,Log,LogInterval,8,root/html534/TMVA__LogInterval.html,https://root.cern,https://root.cern/root/html534/TMVA__LogInterval.html,10,['Log'],"['Log', 'LogInterval', 'LogIntervalLogInterval']"
Testability,". TMVA::LogInterval. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::LogInterval. class TMVA::LogInterval: public TMVA::Interval. Function Members (Methods); public:. virtual~LogInterval(); static TClass*Class(); virtual Double_tGetElement(Int_t position) const; virtual Double_tGetMax() const; virtual Double_tGetMean() const; virtual Double_tGetMin() const; virtual Int_tGetNbins() const; virtual Double_tGetRndm(TRandom3&) const; virtual Double_tGetStepSize(Int_t iBin = 0) const; virtual Double_tGetWidth() const; TMVA::IntervalTMVA::Interval::Interval(const TMVA::Interval& other); TMVA::IntervalTMVA::Interval::Interval(Double_t min, Double_t max, Int_t nbins = 0); virtual TClass*IsA() const; TMVA::MsgLogger&Log() const; TMVA::LogIntervalLogInterval(const TMVA::LogInterval& other); TMVA::LogIntervalLogInterval(Double_t min, Double_t max, Int_t nbins = 0); TMVA::LogInterval&operator=(const TMVA::LogInterval&); virtual voidTMVA::Interval::Print(ostream& os) const; voidSetMax(Double_t m); voidSetMin(Double_t m); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. Double_tTMVA::Interval::fMaxthe constraints of the Interval; Double_tTMVA::Interval::fMinthe constraints of the Interval; Int_tTMVA::Interval::fNbinswhen >0 : number of bins (discrete interval); when ==0 continuous interval. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LogInterval(Double_t min, Double_t max, Int_t nbins = 0). LogInterval(const TMVA::LogInterval& other). ~LogInterval(); destructor. Double_t GetElement(Int_t position) const; calculates the value of the ""number"" bin in a discrete interval.; Parameters:; Double_t position. Double_t GetStepSize(Int_t i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__LogInterval.html:8,Log,LogInterval,8,root/html604/TMVA__LogInterval.html,https://root.cern,https://root.cern/root/html604/TMVA__LogInterval.html,10,['Log'],"['Log', 'LogInterval', 'LogIntervalLogInterval']"
Testability,". TMVA::MethodBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodBase. class TMVA::MethodBase: public TMVA::IMethod, public TMVA::Configurable. Virtual base Class for all MVA method; MethodBase hosts several specific evaluation methods.; The kind of MVA that provides optimal performance in an analysis strongly; depends on the particular application. The evaluation factory provides a; number of numerical benchmark results to directly assess the performance; of the MVA training on the independent test sample. These are:; ; The signal efficiency at three representative background efficiencies; (which is 1 − rejection).; The significance of an MVA estimator, defined by the difference; between the MVA mean values for signal and background, divided by the; quadratic sum of their root mean squares.; The separation of an MVA x, defined by the integral; ½∫(S(x) − B(x))2/(S(x) + B(x))dx, where; S(x) and B(x) are the signal and background distributions, respectively.; The separation is zero for identical signal and background MVA shapes,; and it is one for disjunctive shapes.; ; The average, ∫x μ(S(x))dx, of the signal μ-transform.; The μ-transform of an MVA denotes the transformation that yields; a uniform background distribution. In this way, the signal distributions; S(x) can be directly compared among the various MVAs. The stronger S(x); peaks towards one, the better is the discrimination of the MVA. The; μ-transform is; documented here.; ; The MVA standard output also prints the linear correlation coefficients between; signal and background, which can be useful to eliminate variables that exhibit too; strong correlations.; ; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; pub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodBase.html:597,benchmark,benchmark,597,root/html528/TMVA__MethodBase.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodBase.html,10,"['benchmark', 'test']","['benchmark', 'test']"
Testability,". TMVA::MethodBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodBase. class TMVA::MethodBase: public TMVA::IMethod, public TMVA::Configurable. Virtual base Class for all MVA method; MethodBase hosts several specific evaluation methods.; The kind of MVA that provides optimal performance in an analysis strongly; depends on the particular application. The evaluation factory provides a; number of numerical benchmark results to directly assess the performance; of the MVA training on the independent test sample. These are:; ; The signal efficiency at three representative background efficiencies; (which is 1 − rejection).; The significance of an MVA estimator, defined by the difference; between the MVA mean values for signal and background, divided by the; quadratic sum of their root mean squares.; The separation of an MVA x, defined by the integral; ½∫(S(x) − B(x))2/(S(x) + B(x))dx, where; S(x) and B(x) are the signal and background distributions, respectively.; The separation is zero for identical signal and background MVA shapes,; and it is one for disjunctive shapes.; ; The average, ∫x μ(S(x))dx, of the signal μ-transform.; The μ-transform of an MVA denotes the transformation that yields; a uniform background distribution. In this way, the signal distributions; S(x) can be directly compared among the various MVAs. The stronger S(x); peaks towards one, the better is the discrimination of the MVA. The; μ-transform is; documented here.; ; The MVA standard output also prints the linear correlation coefficients between; signal and background, which can be useful to eliminate variables that exhibit too; strong correlations.; ; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__MethodBase.html:605,benchmark,benchmark,605,root/html604/TMVA__MethodBase.html,https://root.cern,https://root.cern/root/html604/TMVA__MethodBase.html,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,". TMVA::MethodBoost. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodBoost. class TMVA::MethodBoost: public TMVA::MethodCompositeBase. This class is meant to boost a single classifier. Boosting means; training the classifier a few times. Everytime the wieghts of the; events are modified according to how well the classifier performed; on the test sample. Function Members (Methods); public:. virtual~MethodBoost(); voidTObject::AbstractMethod(const char* method) const; voidAddMonitoringHist(TH1* hist); voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidTMVA::MethodCompositeBase::AddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; Bool_tBookMethod(TMVA::Types::EMVA theMethod, TString methodTitle, TString theOption); virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; voidCleanBoostOptions(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodBoost.html:530,test,test,530,root/html528/TMVA__MethodBoost.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodBoost.html,3,['test'],['test']
Testability,". TMVA::MethodBoost. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodBoost. class TMVA::MethodBoost: public TMVA::MethodCompositeBase. This class is meant to boost a single classifier. Boosting means; training the classifier a few times. Everytime the wieghts of the; events are modified according to how well the classifier performed; on the test sample. Function Members (Methods); public:. virtual~MethodBoost(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidTMVA::MethodCompositeBase::AddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; Bool_tBookMethod(TMVA::Types::EMVA theMethod, TString methodTitle, TString theOption); virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; voidCleanBoostOptions(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodBoost.html:530,test,test,530,root/html602/TMVA__MethodBoost.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodBoost.html,1,['test'],['test']
Testability,". TMVA::MethodBoost. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodBoost. class TMVA::MethodBoost: public TMVA::MethodCompositeBase. This class is meant to boost a single classifier. Boosting means; training the classifier a few times. Everytime the wieghts of the; events are modified according to how well the classifier performed; on the test sample. Function Members (Methods); public:. virtual~MethodBoost(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidTMVA::MethodCompositeBase::AddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; Bool_tBookMethod(TMVA::Types::EMVA theMethod, TString methodTitle, TString theOption); virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; voidCleanBoostOptions(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodBoost.html:530,test,test,530,root/html534/TMVA__MethodBoost.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodBoost.html,1,['test'],['test']
Testability,". TMVA::MethodBoost. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodBoost. class TMVA::MethodBoost: public TMVA::MethodCompositeBase. This class is meant to boost a single classifier. Boosting means; training the classifier a few times. Everytime the wieghts of the; events are modified according to how well the classifier performed; on the test sample. Function Members (Methods); public:. virtual~MethodBoost(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidTMVA::MethodCompositeBase::AddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; Bool_tBookMethod(TMVA::Types::EMVA theMethod, TString methodTitle, TString theOption); virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; voidCleanBoostOptions(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__MethodBoost.html:538,test,test,538,root/html604/TMVA__MethodBoost.html,https://root.cern,https://root.cern/root/html604/TMVA__MethodBoost.html,1,['test'],['test']
Testability,". TMVA::MethodPDERS. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodPDERS. class TMVA::MethodPDERS: public TMVA::MethodBase. /*; This is a generalization of the above Likelihood methods to Nvar; dimensions, where Nvar is the number of input variables; used in the MVA. If the multi-dimensional probability density functions; (PDFs) for signal and background were known, this method contains the entire; physical information, and is therefore optimal. Usually, kernel estimation; methods are used to approximate the PDFs using the events from the; training sample. ; A very simple probability density estimator (PDE) has been suggested; in hep-ex/0211019. The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of the test event. The volume that describes ""vicinity"" is; user-defined. A search; method based on binary-trees is used to effectively reduce the; selection time for the range search. Three different volume definitions; are optional: . MinMax:; the volume is defined in each dimension with respect; to the full variable range found in the training sample. ; RMS:; the volume is defined in each dimensions with respect; to the RMS estimated from the training sample. ; Adaptive:; a volume element is defined in each dimensions with; respect to the RMS estimated from the training sample. The overall; scale of the volume element is then determined for each event so; that the total number of events confined in the volume be within; a user-defined range. The adaptive range search is used by default.; . Function Members (Methods); public:. virtual~MethodPDERS(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodPDERS.html:864,test,test,864,root/html528/TMVA__MethodPDERS.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodPDERS.html,10,['test'],['test']
Testability,". TMVA::MethodPDERS. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodPDERS. class TMVA::MethodPDERS: public TMVA::MethodBase. /*; This is a generalization of the above Likelihood methods to Nvar; dimensions, where Nvar is the number of input variables; used in the MVA. If the multi-dimensional probability density functions; (PDFs) for signal and background were known, this method contains the entire; physical information, and is therefore optimal. Usually, kernel estimation; methods are used to approximate the PDFs using the events from the; training sample. ; A very simple probability density estimator (PDE) has been suggested; in hep-ex/0211019. The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of the test event. The volume that describes ""vicinity"" is; user-defined. A search; method based on binary-trees is used to effectively reduce the; selection time for the range search. Three different volume definitions; are optional: . MinMax:; the volume is defined in each dimension with respect; to the full variable range found in the training sample. ; RMS:; the volume is defined in each dimensions with respect; to the RMS estimated from the training sample. ; Adaptive:; a volume element is defined in each dimensions with; respect to the RMS estimated from the training sample. The overall; scale of the volume element is then determined for each event so; that the total number of events confined in the volume be within; a user-defined range. The adaptive range search is used by default.; . Function Members (Methods); public:. virtual~MethodPDERS(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::Meth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__MethodPDERS.html:872,test,test,872,root/html604/TMVA__MethodPDERS.html,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html,2,['test'],['test']
Testability,". TMVA::MethodTMlpANN. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodTMlpANN. class TMVA::MethodTMlpANN: public TMVA::MethodBase. This is the TMVA TMultiLayerPerceptron interface class. It provides the; training and testing the ROOT internal MLP class in the TMVA framework.; Available learning methods:. Stochastic ; Batch ; SteepestDescent ; RibierePolak ; FletcherReeves ; BFGS . . See the TMultiLayerPerceptron class description; for details on this ANN. Function Members (Methods); public:. virtual~MethodTMlpANN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodTMlpANN.html:405,test,testing,405,root/html602/TMVA__MethodTMlpANN.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodTMlpANN.html,1,['test'],['testing']
Testability,". TMVA::MethodTMlpANN. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MethodTMlpANN. class TMVA::MethodTMlpANN: public TMVA::MethodBase. This is the TMVA TMultiLayerPerceptron interface class. It provides the; training and testing the ROOT internal MLP class in the TMVA framework.; Available learning methods:. Stochastic ; Batch ; SteepestDescent ; RibierePolak ; FletcherReeves ; BFGS . . See the TMultiLayerPerceptron class description; for details on this ANN. Function Members (Methods); public:. virtual~MethodTMlpANN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodTMlpANN.html:405,test,testing,405,root/html528/TMVA__MethodTMlpANN.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodTMlpANN.html,4,['test'],['testing']
Testability,". TMVA::MethodTMlpANN. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodTMlpANN. class TMVA::MethodTMlpANN: public TMVA::MethodBase. This is the TMVA TMultiLayerPerceptron interface class. It provides the; training and testing the ROOT internal MLP class in the TMVA framework.; Available learning methods:. Stochastic ; Batch ; SteepestDescent ; RibierePolak ; FletcherReeves ; BFGS . . See the TMultiLayerPerceptron class description; for details on this ANN. Function Members (Methods); public:. virtual~MethodTMlpANN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__MethodTMlpANN.html:413,test,testing,413,root/html604/TMVA__MethodTMlpANN.html,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html,1,['test'],['testing']
Testability,". TMVA::ROCCalc. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::ROCCalc. class TMVA::ROCCalc. Function Members (Methods); public:. ~ROCCalc(); voidApplySignalAndBackgroundStyle(TH1* sig, TH1* bkg, TH1* any = 0); Double_tGetEffSForEffBof(Double_t effBref, Double_t& effSerr); TH1*GetMvaBpdf(); TH1*GetMvaSpdf(); TH1*GetPurity(Int_t nStot, Int_t nBtot); TH1D*GetROC(); Double_tGetROCIntegral(); Double_tGetSignalReferenceCut(); TH1*GetSignificance(Int_t nStot, Int_t nBtot); TMVA::ROCCalc&operator=(const TMVA::ROCCalc&); TMVA::ROCCalcROCCalc(const TMVA::ROCCalc&); TMVA::ROCCalcROCCalc(TH1* mvaS, TH1* mvaB). private:. Double_tGetEffForRoot(Double_t theCut); TMVA::MsgLogger&Log() const; Double_tRoot(Double_t). Data Members; private:. Double_tfAbsTolabsolute tolerance deviation; Int_tfCutOrientation+1 if larger mva value means more signal like, -1 otherwise; TMVA::MsgLogger*fLogger! message logger; Int_tfMaxItermaximum number of iterations; UInt_tfNbins; Double_tfNevtSnumber of signal events (used in error calculation); TH1*fPurity; Double_tfSignalCutMVA cut value for last demanded background rejection or signal efficiency; TH1*fSignificance; TSpline*fSplB; TSpline*fSplS; TSpline*fSpleffBvsS; TSpline*fSplmvaCumBspline of cumulated mva distributions; TSpline*fSplmvaCumSspline of cumulated mva distributions; Bool_tfUseSplines; Float_tfXmaxmin and max of the mva distribution; Float_tfXminmin and max of the mva distribution; TH1*fmvaBthe input mva distributions; TH1*fmvaBcumul; TH1*fmvaBpdfthe normalized (and rebinned) input mva distributions; TH1*fmvaSthe input mva distributions; TH1*fmvaScumul; TH1*fmvaSpdfthe normalized (and rebinned) input mva distributions; Int_tfnBtot; Int_tfnStot. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ROCCalc(TH1* mvaS, TH1* m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__ROCCalc.html:856,Log,Log,856,root/html602/TMVA__ROCCalc.html,https://root.cern,https://root.cern/root/html602/TMVA__ROCCalc.html,1,['Log'],['Log']
Testability,". TMVA::ROCCalc. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::ROCCalc. class TMVA::ROCCalc. Function Members (Methods); public:. ~ROCCalc(); voidApplySignalAndBackgroundStyle(TH1* sig, TH1* bkg, TH1* any = 0); Double_tGetEffSForEffBof(Double_t effBref, Double_t& effSerr); TH1*GetMvaBpdf(); TH1*GetMvaSpdf(); TH1*GetPurity(Int_t nStot, Int_t nBtot); TH1D*GetROC(); Double_tGetROCIntegral(); Double_tGetSignalReferenceCut(); TH1*GetSignificance(Int_t nStot, Int_t nBtot); TMVA::ROCCalc&operator=(const TMVA::ROCCalc&); TMVA::ROCCalcROCCalc(const TMVA::ROCCalc&); TMVA::ROCCalcROCCalc(TH1* mvaS, TH1* mvaB, TString nameSuffix = """"). private:. Double_tGetEffForRoot(Double_t theCut); TMVA::MsgLogger&Log() const; Double_tRoot(Double_t). Data Members; private:. Double_tfAbsTolabsolute tolerance deviation; Int_tfCutOrientation+1 if larger mva value means more signal like, -1 otherwise; TMVA::MsgLogger*fLogger! message logger; Int_tfMaxItermaximum number of iterations; UInt_tfNbins; Double_tfNevtSnumber of signal events (used in error calculation); TH1*fPurity; Double_tfSignalCutMVA cut value for last demanded background rejection or signal efficiency; TH1*fSignificance; TSpline*fSplB; TSpline*fSplS; TSpline*fSpleffBvsS; TSpline*fSplmvaCumBspline of cumulated mva distributions; TSpline*fSplmvaCumS; TStringfSuffix; Bool_tfUseSplines; Float_tfXmaxmin and max of the mva distribution ; Float_tfXmin; TH1*fmvaBthe input mva distributions; TH1*fmvaBcumul; TH1*fmvaBpdfthe normalized (and rebinned) input mva distributions; TH1*fmvaS; TH1*fmvaScumul; TH1*fmvaSpdf; Int_tfnBtot; Int_tfnStot. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ROCCalc(TH1* mvaS, TH1* mvaB, TString nameSuffix = """"). void ApplySignalAndBackgroundStyle(TH1* sig, TH1* bkg, TH1* any = 0); Int_t c_C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__ROCCalc.html:881,Log,Log,881,root/html534/TMVA__ROCCalc.html,https://root.cern,https://root.cern/root/html534/TMVA__ROCCalc.html,1,['Log'],['Log']
Testability,". TMVA::ROCCalc. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::ROCCalc. class TMVA::ROCCalc. Function Members (Methods); public:. ~ROCCalc(); voidApplySignalAndBackgroundStyle(TH1* sig, TH1* bkg, TH1* any = 0); Double_tGetEffSForEffBof(Double_t effBref, Double_t& effSerr); TH1*GetMvaBpdf(); TH1*GetMvaSpdf(); TH1*GetPurity(Int_t nStot, Int_t nBtot); TH1D*GetROC(); Double_tGetROCIntegral(); Double_tGetSignalReferenceCut(); TH1*GetSignificance(Int_t nStot, Int_t nBtot); TMVA::ROCCalc&operator=(const TMVA::ROCCalc&); TMVA::ROCCalcROCCalc(const TMVA::ROCCalc&); TMVA::ROCCalcROCCalc(TH1* mvaS, TH1* mvaB). private:. Double_tGetEffForRoot(Double_t theCut); TMVA::MsgLogger&Log() const; Double_tRoot(Double_t). Data Members; private:. Double_tfAbsTolabsolute tolerance deviation; Int_tfCutOrientation+1 if larger mva value means more signal like, -1 otherwise; TMVA::MsgLogger*fLogger! message logger; Int_tfMaxItermaximum number of iterations; UInt_tfNbins; Double_tfNevtSnumber of signal events (used in error calculation); TH1*fPurity; Double_tfSignalCutMVA cut value for last demanded background rejection or signal efficiency; TH1*fSignificance; TSpline*fSplB; TSpline*fSplS; TSpline*fSpleffBvsS; TSpline*fSplmvaCumBspline of cumulated mva distributions; TSpline*fSplmvaCumSspline of cumulated mva distributions; Bool_tfUseSplines; Float_tfXmaxmin and max of the mva distribution; Float_tfXminmin and max of the mva distribution; TH1*fmvaBthe input mva distributions; TH1*fmvaBcumul; TH1*fmvaBpdfthe normalized (and rebinned) input mva distributions; TH1*fmvaSthe input mva distributions; TH1*fmvaScumul; TH1*fmvaSpdfthe normalized (and rebinned) input mva distributions; Int_tfnBtot; Int_tfnStot. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ROCCalc(TH1* mvaS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__ROCCalc.html:864,Log,Log,864,root/html604/TMVA__ROCCalc.html,https://root.cern,https://root.cern/root/html604/TMVA__ROCCalc.html,1,['Log'],['Log']
Testability,". TMVA::Ranking. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Ranking. class TMVA::Ranking. Ranking for variables in method (implementation). Function Members (Methods); public:. virtual~Ranking(); virtual voidAddRank(const TMVA::Rank& rank); static TClass*Class(); virtual TClass*IsA() const; TMVA::Ranking&operator=(const TMVA::Ranking&); virtual voidPrint() const; TMVA::RankingRanking(); TMVA::RankingRanking(const TMVA::Ranking&); TMVA::RankingRanking(const TString& context, const TString& rankingDiscriminatorName); voidSetContext(const TString& context); voidSetDiscrName(const TString& discrName); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. TMVA::MsgLogger&Log() const. Data Members; private:. TStringfContextthe ranking context; TMVA::MsgLogger*fLogger! message logger; vector<TMVA::Rank>fRankingvector of ranks; TStringfRankingDiscriminatorNamethe name of the ranking discriminator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Ranking(); default constructor. Ranking(const TString& context, const TString& rankingDiscriminatorName); constructor. ~Ranking(); destructor. void SetContext(const TString& context). void AddRank(const TMVA::Rank& rank); Add a new rank; take ownership of it. void Print() const; get maximum length of variable names. Ranking(). void SetDiscrName(const TString& discrName); { fRankingDiscriminatorName = discrName; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-30 15:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__Ranking.html:964,Log,Log,964,root/html602/TMVA__Ranking.html,https://root.cern,https://root.cern/root/html602/TMVA__Ranking.html,1,['Log'],['Log']
Testability,". TMVA::Ranking. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Ranking. class TMVA::Ranking. Ranking for variables in method (implementation). Function Members (Methods); public:. virtual~Ranking(); virtual voidAddRank(const TMVA::Rank& rank); static TClass*Class(); virtual TClass*IsA() const; TMVA::Ranking&operator=(const TMVA::Ranking&); virtual voidPrint() const; TMVA::RankingRanking(); TMVA::RankingRanking(const TMVA::Ranking&); TMVA::RankingRanking(const TString& context, const TString& rankingDiscriminatorName); voidSetContext(const TString& context); voidSetDiscrName(const TString& discrName); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TMVA::MsgLogger&Log() const. Data Members; private:. TStringfContextthe ranking context; TMVA::MsgLogger*fLogger! message logger; vector<TMVA::Rank>fRankingvector of ranks; TStringfRankingDiscriminatorNamethe name of the ranking discriminator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Ranking(); default constructor. Ranking(const TString& context, const TString& rankingDiscriminatorName); constructor. ~Ranking(); destructor. void SetContext(const TString& context). void AddRank(const TMVA::Rank& rank); Add a new rank; take ownership of it. void Print() const; get maximum length of variable names. Ranking(). void SetDiscrName(const TString& discrName); { fRankingDiscriminatorName = discrName; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: Ranking.h 29195 2009-06-24 10:39:49Z brun $ » Last generated: 2010-09-23 20:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Ranking.html:934,Log,Log,934,root/html528/TMVA__Ranking.html,https://root.cern,https://root.cern/root/html528/TMVA__Ranking.html,1,['Log'],['Log']
Testability,". TMVA::Ranking. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Ranking. class TMVA::Ranking. Ranking for variables in method (implementation). Function Members (Methods); public:. virtual~Ranking(); virtual voidAddRank(const TMVA::Rank& rank); static TClass*Class(); virtual TClass*IsA() const; TMVA::Ranking&operator=(const TMVA::Ranking&); virtual voidPrint() const; TMVA::RankingRanking(); TMVA::RankingRanking(const TMVA::Ranking&); TMVA::RankingRanking(const TString& context, const TString& rankingDiscriminatorName); voidSetContext(const TString& context); voidSetDiscrName(const TString& discrName); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TMVA::MsgLogger&Log() const. Data Members; private:. TStringfContextthe ranking context; TMVA::MsgLogger*fLogger! message logger; vector<TMVA::Rank>fRankingvector of ranks; TStringfRankingDiscriminatorNamethe name of the ranking discriminator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Ranking(); default constructor. Ranking(const TString& context, const TString& rankingDiscriminatorName); constructor. ~Ranking(); destructor. void SetContext(const TString& context). void AddRank(const TMVA::Rank& rank); Add a new rank; take ownership of it. void Print() const; get maximum length of variable names. Ranking(). void SetDiscrName(const TString& discrName); { fRankingDiscriminatorName = discrName; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: Ranking.h 39395 2011-05-26 10:05:54Z moneta $ » Last generated: 2011-07-04 15:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please sen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__Ranking.html:934,Log,Log,934,root/html530/TMVA__Ranking.html,https://root.cern,https://root.cern/root/html530/TMVA__Ranking.html,1,['Log'],['Log']
Testability,". TMVA::Ranking. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Ranking. class TMVA::Ranking. Ranking for variables in method (implementation). Function Members (Methods); public:. virtual~Ranking(); virtual voidAddRank(const TMVA::Rank& rank); static TClass*Class(); virtual TClass*IsA() const; TMVA::Ranking&operator=(const TMVA::Ranking&); virtual voidPrint() const; TMVA::RankingRanking(); TMVA::RankingRanking(const TMVA::Ranking&); TMVA::RankingRanking(const TString& context, const TString& rankingDiscriminatorName); voidSetContext(const TString& context); voidSetDiscrName(const TString& discrName); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TMVA::MsgLogger&Log() const. Data Members; private:. TStringfContextthe ranking context; TMVA::MsgLogger*fLogger! message logger; vector<TMVA::Rank>fRankingvector of ranks; TStringfRankingDiscriminatorNamethe name of the ranking discriminator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Ranking(); default constructor. Ranking(const TString& context, const TString& rankingDiscriminatorName); constructor. ~Ranking(); destructor. void SetContext(const TString& context). void AddRank(const TMVA::Rank& rank); Add a new rank; take ownership of it. void Print() const; get maximum length of variable names. Ranking(). void SetDiscrName(const TString& discrName); { fRankingDiscriminatorName = discrName; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: Ranking.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__Ranking.html:934,Log,Log,934,root/html532/TMVA__Ranking.html,https://root.cern,https://root.cern/root/html532/TMVA__Ranking.html,1,['Log'],['Log']
Testability,". TMVA::Ranking. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Ranking. class TMVA::Ranking. Ranking for variables in method (implementation). Function Members (Methods); public:. virtual~Ranking(); virtual voidAddRank(const TMVA::Rank& rank); static TClass*Class(); virtual TClass*IsA() const; TMVA::Ranking&operator=(const TMVA::Ranking&); virtual voidPrint() const; TMVA::RankingRanking(); TMVA::RankingRanking(const TMVA::Ranking&); TMVA::RankingRanking(const TString& context, const TString& rankingDiscriminatorName); voidSetContext(const TString& context); voidSetDiscrName(const TString& discrName); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. TMVA::MsgLogger&Log() const. Data Members; private:. TStringfContextthe ranking context; TMVA::MsgLogger*fLogger! message logger; vector<TMVA::Rank>fRankingvector of ranks; TStringfRankingDiscriminatorNamethe name of the ranking discriminator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Ranking(); default constructor. Ranking(const TString& context, const TString& rankingDiscriminatorName); constructor. ~Ranking(); destructor. void SetContext(const TString& context). void AddRank(const TMVA::Rank& rank); Add a new rank; take ownership of it. void Print() const; get maximum length of variable names. Ranking(). void SetDiscrName(const TString& discrName); { fRankingDiscriminatorName = discrName; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-03-14 16:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__Ranking.html:953,Log,Log,953,root/html534/TMVA__Ranking.html,https://root.cern,https://root.cern/root/html534/TMVA__Ranking.html,2,"['Log', 'log']","['Log', 'logger']"
Testability,". TMVA::Ranking. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::Ranking. class TMVA::Ranking. Ranking for variables in method (implementation). Function Members (Methods); public:. virtual~Ranking(); virtual voidAddRank(const TMVA::Rank& rank); static TClass*Class(); virtual TClass*IsA() const; TMVA::Ranking&operator=(const TMVA::Ranking&); virtual voidPrint() const; TMVA::RankingRanking(); TMVA::RankingRanking(const TMVA::Ranking&); TMVA::RankingRanking(const TString& context, const TString& rankingDiscriminatorName); voidSetContext(const TString& context); voidSetDiscrName(const TString& discrName); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. TMVA::MsgLogger&Log() const. Data Members; private:. TStringfContextthe ranking context; TMVA::MsgLogger*fLogger! message logger; vector<TMVA::Rank>fRankingvector of ranks; TStringfRankingDiscriminatorNamethe name of the ranking discriminator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Ranking(); default constructor. Ranking(const TString& context, const TString& rankingDiscriminatorName); constructor. ~Ranking(); destructor. void SetContext(const TString& context). void AddRank(const TMVA::Rank& rank); Add a new rank; take ownership of it. void Print() const; get maximum length of variable names. Ranking(). void SetDiscrName(const TString& discrName); { fRankingDiscriminatorName = discrName; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__Ranking.html:972,Log,Log,972,root/html604/TMVA__Ranking.html,https://root.cern,https://root.cern/root/html604/TMVA__Ranking.html,1,['Log'],['Log']
Testability,". TMVA::Tools. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Tools. class TMVA::Tools. Function Members (Methods); public:. ~Tools(); voidAddAttr(void* node, const char* attrname, const char* value); void*AddChild(void* parent, const char* childname, const char* content = 0, bool isRootNode = false); Bool_tAddComment(void* node, const char* comment); Bool_tAddRawLine(void* node, const char* raw); vector<TMatrixDSym*>*CalcCovarianceMatrices(const vector<TMVA::Event*,allocator<TMVA::Event*> >& events, Int_t maxCls); Bool_tCheckForSilentOption(const TString&) const; Bool_tCheckForVerboseOption(const TString&) const; Bool_tCheckSplines(const TH1*, const TSpline*); const TString&Color(const TString&); voidComputeStat(const vector<TMVA::Event*>&, vector<Float_t>*, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Int_t signalClass, Bool_t norm = kFALSE); Double_tComputeVariance(Double_t sumx2, Double_t sumx, Int_t nx); Bool_tContainsRegularExpression(const TString& s); static voidDestroyInstance(); voidFormattedOutput(const TMatrixD&, const vector<TString>&, TMVA::MsgLogger& logger); voidFormattedOutput(const TMatrixD&, const vector<TString>& vert, const vector<TString>& horiz, TMVA::MsgLogger& logger); voidFormattedOutput(const vector<Double_t>&, const vector<TString>&, const TString titleVars, const TString titleValues, TMVA::MsgLogger& logger, TString format = ""%+1.3f""); void*GetChild(void* parent, const char* childname = 0); const char*GetContent(void* node); const TMatrixD*GetCorrelationMatrix(const TMatrixD* covMat); Double_tGetCorrelationRatio(const TH2F&); Int_tGetIndexMaxElement(vector<Double_t>&); Int_tGetIndexMinElement(vector<Double_t>&); Double_tGetMutualInformation(const TH2F&); const char*GetName(void* node); void*GetNextChild(void* prevchild, const char* childna",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Tools.html:1285,log,logger,1285,root/html528/TMVA__Tools.html,https://root.cern,https://root.cern/root/html528/TMVA__Tools.html,3,['log'],['logger']
Testability,". TMVA::Tools. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Tools. class TMVA::Tools. Function Members (Methods); public:. ~Tools(); voidAddAttr(void* node, const char* attrname, const char* value); void*AddChild(void* parent, const char* childname, const char* content = 0, bool isRootNode = false); Bool_tAddComment(void* node, const char* comment); Bool_tAddRawLine(void* node, const char* raw); vector<TMatrixDSym*>*CalcCovarianceMatrices(const vector<TMVA::Event*,allocator<TMVA::Event*> >& events, Int_t maxCls, TMVA::VariableTransformBase* transformBase = 0); Bool_tCheckForSilentOption(const TString&) const; Bool_tCheckForVerboseOption(const TString&) const; Bool_tCheckSplines(const TH1*, const TSpline*); const TString&Color(const TString&); voidComputeStat(const vector<TMVA::Event*>&, vector<Float_t>*, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Int_t signalClass, Bool_t norm = kFALSE); Double_tComputeVariance(Double_t sumx2, Double_t sumx, Int_t nx); Bool_tContainsRegularExpression(const TString& s); static voidDestroyInstance(); voidFormattedOutput(const TMatrixD&, const vector<TString>&, TMVA::MsgLogger& logger); voidFormattedOutput(const TMatrixD&, const vector<TString>& vert, const vector<TString>& horiz, TMVA::MsgLogger& logger); voidFormattedOutput(const vector<Double_t>&, const vector<TString>&, const TString titleVars, const TString titleValues, TMVA::MsgLogger& logger, TString format = ""%+1.3f""); void*GetChild(void* parent, const char* childname = 0); const char*GetContent(void* node); const TMatrixD*GetCorrelationMatrix(const TMatrixD* covMat); Double_tGetCorrelationRatio(const TH2F&); Int_tGetIndexMaxElement(vector<Double_t>&); Int_tGetIndexMinElement(vector<Double_t>&); Double_tGetMutualInformation(const TH2F&); const char*GetName(void* node); void*G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__Tools.html:1333,log,logger,1333,root/html530/TMVA__Tools.html,https://root.cern,https://root.cern/root/html530/TMVA__Tools.html,6,['log'],['logger']
Testability,". TMVA::Types. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Types. class TMVA::Types. Function Members (Methods); public:. ~Types(); Bool_tAddTypeMapping(TMVA::Types::EMVA method, const TString& methodname); static voidDestroyInstance(); TStringGetMethodName(TMVA::Types::EMVA method) const; TMVA::Types::EMVAGetMethodType(const TString& method) const; static TMVA::Types&Instance(); TMVA::Types&operator=(const TMVA::Types&); TMVA::TypesTypes(const TMVA::Types&). private:. TMVA::MsgLogger&Log() const; TMVA::TypesTypes(). Data Members; public:. enum EMVA { kVariable; kCuts; kLikelihood; kPDERS; kHMatrix; kFisher; kKNN; kCFMlpANN; kTMlpANN; kBDT; kDT; kRuleFit; kSVM; kMLP; kBayesClassifier; kFDA; kBoost; kPDEFoam; kLD; kPlugins; kCategory; kMaxMethod; };; enum EVariableTransform { kIdentity; kDecorrelated; kNormalized; kPCA; kRearranged; kGauss; kUniform; kMaxVariableTransform; };; enum EAnalysisType { kClassification; kRegression; kMulticlass; kNoAnalysisType; kMaxAnalysisType; };; enum ESBType { kSignal; kBackground; kSBBoth; kMaxSBType; kTrueType; };; enum ETreeType { kTraining; kTesting; kMaxTreeType; kValidation; kTrainingOriginal; };; enum EBoostStage { kBoostProcBegin; kBeforeTraining; kBeforeBoosting; kAfterBoosting; kBoostProcEnd; };. private:. TMVA::MsgLogger*fLoggermessage logger; map<TString,TMVA::Types::EMVA>fStr2typetypes-to-text map; static TMVA::Types*fgTypesPtr. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Types(); constructor. ~Types(); destructor. TMVA::Types& Instance(); the the single instance of ""Types"" if existin already, or create it (Signleton). void DestroyInstance(); ""destructor"" of the single instance. Bool_t AddTypeMapping(TMVA::Types::EMVA method, const TString& methodname). TString GetMethodName(TMVA::Types::EMVA me",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__Types.html:675,Log,Log,675,root/html534/TMVA__Types.html,https://root.cern,https://root.cern/root/html534/TMVA__Types.html,1,['Log'],['Log']
Testability,". TMVA::Types. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Types. class TMVA::Types. Function Members (Methods); public:. ~Types(); Bool_tAddTypeMapping(TMVA::Types::EMVA method, const TString& methodname); static voidDestroyInstance(); TStringGetMethodName(TMVA::Types::EMVA method) const; TMVA::Types::EMVAGetMethodType(const TString& method) const; static TMVA::Types&Instance(); TMVA::Types&operator=(const TMVA::Types&); TMVA::TypesTypes(const TMVA::Types&). private:. TMVA::MsgLogger&Log() const; TMVA::TypesTypes(). Data Members; public:. enum EMVA { kVariable; kCuts; kLikelihood; kPDERS; kHMatrix; kFisher; kKNN; kCFMlpANN; kTMlpANN; kBDT; kDT; kRuleFit; kSVM; kMLP; kBayesClassifier; kFDA; kCommittee; kBoost; kPDEFoam; kLD; kPlugins; kCategory; kMaxMethod; };; enum EVariableTransform { kIdentity; kDecorrelated; kNormalized; kPCA; kGaussDecorr; kGauss; kUniform; kMaxVariableTransform; };; enum EAnalysisType { kClassification; kRegression; kMulticlass; kNoAnalysisType; kMaxAnalysisType; };; enum ESBType { kSignal; kBackground; kSBBoth; kMaxSBType; kTrueType; };; enum ETreeType { kTraining; kTesting; kMaxTreeType; kValidation; kTrainingOriginal; };; enum EBoostStage { kBoostProcBegin; kBeforeTraining; kBeforeBoosting; kAfterBoosting; kBoostValidation; kBoostProcEnd; };. private:. TMVA::MsgLogger*fLoggermessage logger; map<TString,TMVA::Types::EMVA>fStr2typetypes-to-text map; static TMVA::Types*fgTypesPtr. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Types(); constructor. ~Types(); destructor. TMVA::Types& Instance(); the the single instance of ""Types"" if existin already, or create it (Signleton). void DestroyInstance(); ""destructor"" of the single instance. Bool_t AddTypeMapping(TMVA::Types::EMVA method, const TString& methodname). TString Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Types.html:675,Log,Log,675,root/html528/TMVA__Types.html,https://root.cern,https://root.cern/root/html528/TMVA__Types.html,1,['Log'],['Log']
Testability,". TMVA::Types. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Types. class TMVA::Types. Function Members (Methods); public:. ~Types(); Bool_tAddTypeMapping(TMVA::Types::EMVA method, const TString& methodname); static voidDestroyInstance(); TStringGetMethodName(TMVA::Types::EMVA method) const; TMVA::Types::EMVAGetMethodType(const TString& method) const; static TMVA::Types&Instance(); TMVA::Types&operator=(const TMVA::Types&); TMVA::TypesTypes(const TMVA::Types&). private:. TMVA::MsgLogger&Log() const; TMVA::TypesTypes(). Data Members; public:. enum EMVA { kVariable; kCuts; kLikelihood; kPDERS; kHMatrix; kFisher; kKNN; kCFMlpANN; kTMlpANN; kBDT; kDT; kRuleFit; kSVM; kMLP; kBayesClassifier; kFDA; kCommittee; kBoost; kPDEFoam; kLD; kPlugins; kCategory; kMaxMethod; };; enum EVariableTransform { kIdentity; kDecorrelated; kNormalized; kPCA; kRearranged; kGauss; kUniform; kMaxVariableTransform; };; enum EAnalysisType { kClassification; kRegression; kMulticlass; kNoAnalysisType; kMaxAnalysisType; };; enum ESBType { kSignal; kBackground; kSBBoth; kMaxSBType; kTrueType; };; enum ETreeType { kTraining; kTesting; kMaxTreeType; kValidation; kTrainingOriginal; };; enum EBoostStage { kBoostProcBegin; kBeforeTraining; kBeforeBoosting; kAfterBoosting; kBoostValidation; kBoostProcEnd; };. private:. TMVA::MsgLogger*fLoggermessage logger; map<TString,TMVA::Types::EMVA>fStr2typetypes-to-text map; static TMVA::Types*fgTypesPtr. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Types(); constructor. ~Types(); destructor. TMVA::Types& Instance(); the the single instance of ""Types"" if existin already, or create it (Signleton). void DestroyInstance(); ""destructor"" of the single instance. Bool_t AddTypeMapping(TMVA::Types::EMVA method, const TString& methodname). TString GetM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__Types.html:675,Log,Log,675,root/html530/TMVA__Types.html,https://root.cern,https://root.cern/root/html530/TMVA__Types.html,2,['Log'],['Log']
Testability,". TMVA::Types. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Types. class TMVA::Types. Function Members (Methods); public:. ~Types(); Bool_tAddTypeMapping(TMVA::Types::EMVA method, const TString& methodname); static voidDestroyInstance(); TStringGetMethodName(TMVA::Types::EMVA method) const; TMVA::Types::EMVAGetMethodType(const TString& method) const; static TMVA::Types&Instance(); TMVA::Types&operator=(const TMVA::Types&); TMVA::TypesTypes(const TMVA::Types&). private:. TMVA::MsgLogger&Log() const; TMVA::TypesTypes(). Data Members; public:. static TMVA::Types::EBoostStagekAfterBoosting; static TMVA::Types::EMVAkBDT; static TMVA::Types::ESBTypekBackground; static TMVA::Types::EMVAkBayesClassifier; static TMVA::Types::EBoostStagekBeforeBoosting; static TMVA::Types::EBoostStagekBeforeTraining; static TMVA::Types::EMVAkBoost; static TMVA::Types::EBoostStagekBoostProcBegin; static TMVA::Types::EBoostStagekBoostProcEnd; static TMVA::Types::EMVAkCFMlpANN; static TMVA::Types::EMVAkCategory; static TMVA::Types::EAnalysisTypekClassification; static TMVA::Types::EMVAkCuts; static TMVA::Types::EMVAkDT; static TMVA::Types::EVariableTransformkDecorrelated; static TMVA::Types::EMVAkFDA; static TMVA::Types::EMVAkFisher; static TMVA::Types::EVariableTransformkGauss; static TMVA::Types::EMVAkHMatrix; static TMVA::Types::EVariableTransformkIdentity; static TMVA::Types::EMVAkKNN; static TMVA::Types::EMVAkLD; static TMVA::Types::EMVAkLikelihood; static TMVA::Types::EMVAkMLP; static TMVA::Types::EAnalysisTypekMaxAnalysisType; static TMVA::Types::EMVAkMaxMethod; static TMVA::Types::ESBTypekMaxSBType; static TMVA::Types::ETreeTypekMaxTreeType; static TMVA::Types::EVariableTransformkMaxVariableTransform; static TMVA::Types::EAnalysisTypekMulticlass; static TMVA::Types::EAnalysisTypekNoAnalysisType; static TMVA:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__Types.html:675,Log,Log,675,root/html602/TMVA__Types.html,https://root.cern,https://root.cern/root/html602/TMVA__Types.html,1,['Log'],['Log']
Testability,". TMVA::Types. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::Types. class TMVA::Types. Function Members (Methods); public:. ~Types(); Bool_tAddTypeMapping(TMVA::Types::EMVA method, const TString& methodname); static voidDestroyInstance(); TStringGetMethodName(TMVA::Types::EMVA method) const; TMVA::Types::EMVAGetMethodType(const TString& method) const; static TMVA::Types&Instance(); TMVA::Types&operator=(const TMVA::Types&); TMVA::TypesTypes(const TMVA::Types&). private:. TMVA::MsgLogger&Log() const; TMVA::TypesTypes(). Data Members; public:. static TMVA::Types::EBoostStagekAfterBoosting; static TMVA::Types::EMVAkBDT; static TMVA::Types::ESBTypekBackground; static TMVA::Types::EMVAkBayesClassifier; static TMVA::Types::EBoostStagekBeforeBoosting; static TMVA::Types::EBoostStagekBeforeTraining; static TMVA::Types::EMVAkBoost; static TMVA::Types::EBoostStagekBoostProcBegin; static TMVA::Types::EBoostStagekBoostProcEnd; static TMVA::Types::EMVAkCFMlpANN; static TMVA::Types::EMVAkCategory; static TMVA::Types::EAnalysisTypekClassification; static TMVA::Types::EMVAkCuts; static TMVA::Types::EMVAkDT; static TMVA::Types::EVariableTransformkDecorrelated; static TMVA::Types::EMVAkFDA; static TMVA::Types::EMVAkFisher; static TMVA::Types::EVariableTransformkGauss; static TMVA::Types::EMVAkHMatrix; static TMVA::Types::EVariableTransformkIdentity; static TMVA::Types::EMVAkKNN; static TMVA::Types::EMVAkLD; static TMVA::Types::EMVAkLikelihood; static TMVA::Types::EMVAkMLP; static TMVA::Types::EAnalysisTypekMaxAnalysisType; static TMVA::Types::EMVAkMaxMethod; static TMVA::Types::ESBTypekMaxSBType; static TMVA::Types::ETreeTypekMaxTreeType; static TMVA::Types::EVariableTransformkMaxVariableTransform; static TMVA::Types::EAnalysisTypekMulticlass; static TMVA::Types::EAnalysisTypekNoAnalysisType; stat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__Types.html:683,Log,Log,683,root/html604/TMVA__Types.html,https://root.cern,https://root.cern/root/html604/TMVA__Types.html,1,['Log'],['Log']
Testability,. TMVA::kNN::Event. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TEST; » TMVA::kNN::Event. class TMVA::kNN::Event. Event and Track classes. The Event class is a naive/simple example of an event structure.; public:; char fType[20];; char *fEventName; //run+event number in character format; Int_t fNtrack;; Int_t fNseg;; Int_t fNvertex;; UInt_t fFlag;; Double32_t fTemperature;; Int_t fMeasures[10];; Double32_t fMatrix[4][4];; Double32_t *fClosestDistance; //[fNvertex] indexed array!; EventHeader fEvtHdr;; TClonesArray *fTracks;; TRefArray *fHighPt; //array of High Pt tracks only; TRefArray *fMuons; //array of Muon tracks only; TRef fLastTrack; //pointer to last track; TRef fHistoWeb; //EXEC:GetHistoWeb reference to an histogram in a TWebFile; TH1F *fH;; TBits fTriggerBits; //Bits triggered by this event. The EventHeader class has 3 data members (integers):; public:; Int_t fEvtNum;; Int_t fRun;; Int_t fDate;. The Event data member fTracks is a pointer to a TClonesArray.; It is an array of a variable number of tracks per event.; Each element of the array is an object of class Track with the members:; private:; Float_t fPx; //X component of the momentum; Float_t fPy; //Y component of the momentum; Float_t fPz; //Z component of the momentum; Float_t fRandom; //A random track quantity; Float_t fMass2; //The mass square of this particle; Float_t fBx; //X intercept at the vertex; Float_t fBy; //Y intercept at the vertex; Float_t fMeanCharge; //Mean charge deposition of all hits of this track; Float_t fXfirst; //X coordinate of the first point; Float_t fXlast; //X coordinate of the last point; Float_t fYfirst; //Y coordinate of the first point; Float_t fYlast; //Y coordinate of the last point; Float_t fZfirst; //Z coordinate of the first point; Float_t fZlast; //Z coordinate of the last point; Double32_t fCharg,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__kNN__Event.html:235,TEST,TEST,235,root/html528/TMVA__kNN__Event.html,https://root.cern,https://root.cern/root/html528/TMVA__kNN__Event.html,4,['TEST'],['TEST']
Testability,". TMessageHandler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TMessageHandler. class TMessageHandler: public TNamed, public TQObject. TMessageHandler. Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed.; All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004. Function Members (Methods); public:. TMessageHandler(const TClass* cl, Bool_t derived = kTRUE); TMessageHandler(const char* cl, Bool_t derived = kTRUE); virtual~TMessageHandler(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(); virtual voidAdded()SIGNAL ; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMessageHandler.html:819,log,logged,819,root/html528/TMessageHandler.html,https://root.cern,https://root.cern/root/html528/TMessageHandler.html,16,['log'],['logged']
Testability,". TMessageHandler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TMessageHandler. class TMessageHandler: public TNamed, public TQObject. TMessageHandler. Handle messages that might be generated by the system.; By default a handler only keeps track of the different messages; generated for a specific class. By deriving from this class and; overriding Notify() one can implement custom message handling.; In Notify() one has access to the message id and the object; generating the message. One can install more than one message; handler per class. A message handler can be removed or again; added when needed.; All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004. Function Members (Methods); public:. virtual~TMessageHandler(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(); virtual voidAdded()SIGNAL ; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMessageHandler.html:819,log,logged,819,root/html602/TMessageHandler.html,https://root.cern,https://root.cern/root/html602/TMessageHandler.html,8,['log'],['logged']
Testability,". TMultiLayerPerceptron. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MLP; » TMultiLayerPerceptron. class TMultiLayerPerceptron: public TObject. TMultiLayerPerceptron. This class describes a neural network.; There are facilities to train the network and use the output. The input layer is made of inactive neurons (returning the; optionaly normalized input) and output neurons are linear.; The type of hidden neurons is free, the default being sigmoids.; (One should still try to pass normalized inputs, e.g. between [0.,1]). The basic input is a TTree and two (training and test) TEventLists.; Input and output neurons are assigned a value computed for each event; with the same possibilities as for TTree::Draw().; Events may be weighted individualy or via TTree::SetWeight().; 6 learning methods are available: kStochastic, kBatch,; kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS. This implementation, written by C. Delaere, is *inspired* from; the mlpfit package from J.Schwindling et al. with some extensions:; * the algorithms are globally the same; * in TMultilayerPerceptron, there is no limitation on the number of; layers/neurons, while MLPFIT was limited to 2 hidden layers; * TMultilayerPerceptron allows you to save the network in a root file, and; provides more export functionalities; * TMultilayerPerceptron gives more flexibility regarding the normalization of; inputs/outputs; * TMultilayerPerceptron provides, thanks to Andrea Bocci, the possibility to; use cross-entropy errors, which allows to train a network for pattern; classification based on Bayesian posterior probability. . Introduction. Neural Networks are more and more used in various fields for data; analysis and classification, both for research and commercial; institutions. Some randomly choosen examples are:. image analysis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:753,test,test,753,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,3,['test'],['test']
Testability,". TMultiLayerPerceptron. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MLP; » TMultiLayerPerceptron. class TMultiLayerPerceptron: public TObject. TMultiLayerPerceptron. This class describes a neural network.; There are facilities to train the network and use the output. The input layer is made of inactive neurons (returning the; optionaly normalized input) and output neurons are linear.; The type of hidden neurons is free, the default being sigmoids.; (One should still try to pass normalized inputs, e.g. between [0.,1]). The basic input is a TTree and two (training and test) TEventLists.; Input and output neurons are assigned a value computed for each event; with the same possibilities as for TTree::Draw().; Events may be weighted individualy or via TTree::SetWeight().; 6 learning methods are available: kStochastic, kBatch,; kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS. This implementation, written by C. Delaere, is *inspired* from; the mlpfit package from J.Schwindling et al. with some extensions:; * the algorithms are globally the same; * in TMultilayerPerceptron, there is no limitation on the number of; layers/neurons, while MLPFIT was limited to 2 hidden layers; * TMultilayerPerceptron allows you to save the network in a root file, and; provides more export functionalities; * TMultilayerPerceptron gives more flexibility regarding the normalization of; inputs/outputs; * TMultilayerPerceptron provides, thanks to Andrea Bocci, the possibility to; use cross-entropy errors, which allows to train a network for pattern; classification based on Bayesian posterior probability. . Introduction. Neural Networks are more and more used in various fields for data; analysis and classification, both for research and commercial; institutions. Some randomly chosen examples are:. image analysis;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiLayerPerceptron.html:753,test,test,753,root/html534/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html534/TMultiLayerPerceptron.html,3,['test'],['test']
Testability,". TMySQLServer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » SQL; » MYSQL; » TMySQLServer. class TMySQLServer: public TSQLServer. TMySQLServer. MySQL server plugin implementing the TSQLServer interface. To open a connection to a server use the static method Connect().; The db argument of Connect() is of the form:; mysql://<host>[:<port>][/<database>], e.g.; mysql://pcroot.cern.ch:3456/test. As an example of connecting to mysql we assume that the server is; running on the local host and that you have access to a database; named ""test"" by connecting using an account that has a username and; password of ""tuser"" and ""tpass"". You can set up this account; by using the ""mysql"" program to connect to the server as the MySQL; root user and issuing the following statement:. mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';. If the test database does not exist, create it with this statement:. mysql> CREATE DATABASE test;. If you want to use a different server host, username, password,; or database name, just substitute the appropriate values.; To connect do:. TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");. Function Members (Methods); public:. TMySQLServer(const TMySQLServer&); TMySQLServer(const char* db, const char* uid, const char* pw); virtual~TMySQLServer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Bool_tCommit(); virtual Int_tTObject::Compare(const TObject* obj) const; static TSQLServer*TSQLServer::Connect(const char* db",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMySQLServer.html:558,test,test,558,root/html528/TMySQLServer.html,https://root.cern,https://root.cern/root/html528/TMySQLServer.html,12,['test'],['test']
Testability,". TMySQLServer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » SQL; » MYSQL; » TMySQLServer. class TMySQLServer: public TSQLServer. TMySQLServer. MySQL server plugin implementing the TSQLServer interface. To open a connection to a server use the static method Connect().; The db argument of Connect() is of the form:; mysql://<host>[:<port>][/<database>], e.g.; mysql://pcroot.cern.ch:3456/test. As an example of connecting to mysql we assume that the server is; running on the local host and that you have access to a database; named ""test"" by connecting using an account that has a username and; password of ""tuser"" and ""tpass"". You can set up this account; by using the ""mysql"" program to connect to the server as the MySQL; root user and issuing the following statement:. mysql> GRANT ALL ON test.* TO 'tuser'@'localhost' IDENTIFIED BY 'tpass';. If the test database does not exist, create it with this statement:. mysql> CREATE DATABASE test;. If you want to use a different server host, username, password,; or database name, just substitute the appropriate values.; To connect do:. TSQLServer *db = TSQLServer::Connect(""mysql://localhost/test"", ""tuser"", ""tpass"");. Function Members (Methods); public:. virtual~TMySQLServer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Bool_tCommit(); virtual Int_tTObject::Compare(const TObject* obj) const; static TSQLServer*TSQLServer::Connect(const char* db, const char* uid, const char* pw); virtual voidTObject::Copy(TObject& object) const; virtual Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMySQLServer.html:558,test,test,558,root/html602/TMySQLServer.html,https://root.cern,https://root.cern/root/html602/TMySQLServer.html,6,['test'],['test']
Testability,". TObjectRefSpy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TObjectRefSpy. class TObjectRefSpy: public TObject. TObjectSpy, TObjectRefSpy. Monitors objects for deletion and reflects the deletion by reverting; the internal pointer to zero. When this pointer is zero we know the; object has been deleted. This avoids the unsafe TestBit(kNotDeleted); hack. The spied object must have the kMustCleanup bit set otherwise; you will get an error. Function Members (Methods); public:. TObjectRefSpy(TObject*& obj, Bool_t fixMustCleanupBit = kTRUE); virtual~TObjectRefSpy(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TObjectRefSpy.html:514,Test,TestBit,514,root/html528/TObjectRefSpy.html,https://root.cern,https://root.cern/root/html528/TObjectRefSpy.html,4,['Test'],['TestBit']
Testability,". TObjectRefSpy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TObjectRefSpy. class TObjectRefSpy: public TObject. TObjectSpy, TObjectRefSpy. Monitors objects for deletion and reflects the deletion by reverting; the internal pointer to zero. When this pointer is zero we know the; object has been deleted. This avoids the unsafe TestBit(kNotDeleted); hack. The spied object must have the kMustCleanup bit set otherwise; you will get an error. Function Members (Methods); public:. virtual~TObjectRefSpy(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOpti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TObjectRefSpy.html:514,Test,TestBit,514,root/html602/TObjectRefSpy.html,https://root.cern,https://root.cern/root/html602/TObjectRefSpy.html,2,['Test'],['TestBit']
Testability,". TObjectSpy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TObjectSpy. class TObjectSpy: public TObject. TObjectSpy, TObjectRefSpy. Monitors objects for deletion and reflects the deletion by reverting; the internal pointer to zero. When this pointer is zero we know the; object has been deleted. This avoids the unsafe TestBit(kNotDeleted); hack. The spied object must have the kMustCleanup bit set otherwise; you will get an error. Function Members (Methods); public:. TObjectSpy(TObject* obj = 0, Bool_t fixMustCleanupBit = kTRUE); virtual~TObjectSpy(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TObjectSpy.html:505,Test,TestBit,505,root/html528/TObjectSpy.html,https://root.cern,https://root.cern/root/html528/TObjectSpy.html,4,['Test'],['TestBit']
Testability,". TObjectSpy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TObjectSpy. class TObjectSpy: public TObject. TObjectSpy, TObjectRefSpy. Monitors objects for deletion and reflects the deletion by reverting; the internal pointer to zero. When this pointer is zero we know the; object has been deleted. This avoids the unsafe TestBit(kNotDeleted); hack. The spied object must have the kMustCleanup bit set otherwise; you will get an error. Function Members (Methods); public:. virtual~TObjectSpy(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TObjectSpy.html:505,Test,TestBit,505,root/html602/TObjectSpy.html,https://root.cern,https://root.cern/root/html602/TObjectSpy.html,2,['Test'],['TestBit']
Testability,". TPDF. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » POSTSCRIPT; » TPDF. class TPDF: public TVirtualPS. TPDF: Graphics interface to PDF; Like PostScript, PDF is a vector graphics output format allowing a very high; graphics output quality. The functionalities provided by this class are very; similar to those provided by TPostScript. Compare to PostScript output, the PDF files are usually smaller because some; parts of them can be compressed. PDF also allows to define table of contents. This facility can be used in ROOT.; The following example shows how to proceed:. {; TCanvas* canvas = new TCanvas(""canvas"");; TH1F* histo = new TH1F(""histo"",""test 1"",10,0.,10.);; histo->SetFillColor(2);; histo->Fill(2.);; histo->Draw();; canvas->Print(""plots.pdf("",""Title:One bin filled"");; histo->Fill(4.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Two bins filled"");; histo->Fill(6.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Three bins filled"");; histo->Fill(8.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Four bins filled"");; histo->Fill(8.);; histo->Draw();; canvas->Print(""plots.pdf)"",""Title:The fourth bin content is 2"");; }. Each character string following the keyword ""Title:"" makes a new entry in; the table of contents.; . Function Members (Methods); public:. virtual~TPDF(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidCellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); virtual voidCellArrayEnd(); virtual voidCellArrayFill(Int_t r, Int_t g, Int_t b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TPDF.html:829,test,test,829,root/html604/TPDF.html,https://root.cern,https://root.cern/root/html604/TPDF.html,1,['test'],['test']
Testability,". TPDF. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » POSTSCRIPT; » TPDF. class TPDF: public TVirtualPS. TPDF: Graphics interface to PDF; Like PostScript, PDF is a vector graphics output format allowing a very high; graphics output quality. The functionnalities provided by this class are very; similar to those provided by TPostScript. Compare to PostScript output, the PDF files are usually smaller because some; parts of them can be compressed. PDF also allows to define table of contents. This facility can be used in ROOT.; The following example shows how to proceed:. {; TCanvas* canvas = new TCanvas(""canvas"");; TH1F* histo = new TH1F(""histo"",""test 1"",10,0.,10.);; histo->SetFillColor(2);; histo->Fill(2.);; histo->Draw();; canvas->Print(""plots.pdf("",""Title:One bin filled"");; histo->Fill(4.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Two bins filled"");; histo->Fill(6.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Three bins filled"");; histo->Fill(8.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Four bins filled"");; histo->Fill(8.);; histo->Draw();; canvas->Print(""plots.pdf)"",""Title:The fourth bin content is 2"");; }. Each character string following the keyword ""Title:"" makes a new entry in; the table of contents.; . Function Members (Methods); public:. TPDF(); TPDF(const char* filename, Int_t type = -111); virtual~TPDF(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidCellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); virtual voidCellArrayEnd(); virtual voidCellArrayFill(Int_t r, Int_t g, Int_t b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPDF.html:830,test,test,830,root/html528/TPDF.html,https://root.cern,https://root.cern/root/html528/TPDF.html,4,['test'],['test']
Testability,". TPDF. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » POSTSCRIPT; » TPDF. class TPDF: public TVirtualPS. TPDF: Graphics interface to PDF; Like PostScript, PDF is a vector graphics output format allowing a very high; graphics output quality. The functionnalities provided by this class are very; similar to those provided by TPostScript. Compare to PostScript output, the PDF files are usually smaller because some; parts of them can be compressed. PDF also allows to define table of contents. This facility can be used in ROOT.; The following example shows how to proceed:. {; TCanvas* canvas = new TCanvas(""canvas"");; TH1F* histo = new TH1F(""histo"",""test 1"",10,0.,10.);; histo->SetFillColor(2);; histo->Fill(2.);; histo->Draw();; canvas->Print(""plots.pdf("",""Title:One bin filled"");; histo->Fill(4.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Two bins filled"");; histo->Fill(6.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Three bins filled"");; histo->Fill(8.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Four bins filled"");; histo->Fill(8.);; histo->Draw();; canvas->Print(""plots.pdf)"",""Title:The fourth bin content is 2"");; }. Each character string following the keyword ""Title:"" makes a new entry in; the table of contents.; . Function Members (Methods); public:. virtual~TPDF(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidCellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); virtual voidCellArrayEnd(); virtual voidCellArrayFill(Int_t r, Int_t g, Int_t b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPDF.html:830,test,test,830,root/html602/TPDF.html,https://root.cern,https://root.cern/root/html602/TPDF.html,1,['test'],['test']
Testability,". TParallelCoordVar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREEVIEWER; » TParallelCoordVar. class TParallelCoordVar: public TNamed, public TAttLine, public TAttFill. Axes:. Class containing a variable for the TParallelCoord. Options can be defined each axis separatly using the right mouse click. These options can be applied to every axes using the editor. Axis width: If set to 0, the axis is simply a line. If higher, a color histogram is drawn on the axis.; Axis histogram height: If not 0, a usual bar histogram is drawn on the plot. The order in which the variables are drawn is essential to see the clusters. The axes can be dragged to change their position. A zoom is also available. The logarithm scale is also available by right clicking on the axis. Function Members (Methods); public:. TParallelCoordVar(); TParallelCoordVar(const TParallelCoordVar&); TParallelCoordVar(Double_t* val, const char* title, Int_t id, TParallelCoord* gram); virtual~TParallelCoordVar(); voidTObject::AbstractMethod(const char* method) const; voidAddRange()MENU ; voidAddRange(TParallelCoordRange* range); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDeleteVariable()MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TParallelCoordVar.html:881,log,logarithm,881,root/html530/TParallelCoordVar.html,https://root.cern,https://root.cern/root/html530/TParallelCoordVar.html,3,['log'],['logarithm']
Testability,". TParallelCoordVar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREEVIEWER; » TParallelCoordVar. class TParallelCoordVar: public TNamed, public TAttLine, public TAttFill. Axes:. Class containing a variable for the TParallelCoord. Options can be defined each axis separatly using the right mouse click. These options can be applied to every axes using the editor. Axis width: If set to 0, the axis is simply a line. If higher, a color histogram is drawn on the axis.; Axis histogram height: If not 0, a usual bar histogram is drawn on the plot. The order in which the variables are drawn is essential to see the clusters. The axes can be dragged to change their position. A zoom is also available. The logarithm scale is also available by right clicking on the axis. Function Members (Methods); public:. virtual~TParallelCoordVar(); voidTObject::AbstractMethod(const char* method) const; voidAddRange()MENU ; voidAddRange(TParallelCoordRange* range); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDeleteVariable()MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TParallelCoordVar.html:881,log,logarithm,881,root/html602/TParallelCoordVar.html,https://root.cern,https://root.cern/root/html602/TParallelCoordVar.html,2,['log'],['logarithm']
Testability,". TProofBench. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOFBENCH; » TProofBench. class TProofBench: public TObject. TProofBench. Steering class for PROOF benchmarks. Function Members (Methods); public:. TProofBench(const TProofBench&); TProofBench(const char* url, const char* outfile = ""<default>"", const char* proofopt = 0); virtual~TProofBench(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidCloseOutFile(); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; Int_tCopyDataSet(const char* dset, const char* dsetdst, const char* destdir); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; static voidDrawCPU(const char* outfile, const char* opt = ""std:""); static voidDrawDataSet(const char* outfile, const char* opt = ""std:"", const char* type = ""mbs""); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofBench.html:339,benchmark,benchmarks,339,root/html530/TProofBench.html,https://root.cern,https://root.cern/root/html530/TProofBench.html,2,['benchmark'],['benchmarks']
Testability,". TProofBench. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOFBENCH; » TProofBench. class TProofBench: public TObject. TProofBench. Steering class for PROOF benchmarks. Function Members (Methods); public:. TProofBench(const TProofBench&); TProofBench(const char* url, const char* outfile = ""<default>"", const char* proofopt = 0); virtual~TProofBench(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidCloseOutFile(); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; Int_tCopyDataSet(const char* dset, const char* dsetdst, const char* destdir); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; static voidDrawCPU(const char* outfile, const char* opt = ""std:"", Bool_t verbose = kFALSE, Int_t dofit = 0, Int_t n0 = -1, Int_t n1 = -1); static voidDrawDataSet(const char* outfile, const char* opt = ""std:"", const char* type = ""mbs"", Bool_t verbose = kFALSE, Int_t dofit = 0, Int_t n0 = -1, Int_t n1 = -1); static voidDrawEfficiency(const char* outfile, const char* opt = """", Bool_t verbose = kFALSE); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* met",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofBench.html:339,benchmark,benchmarks,339,root/html534/TProofBench.html,https://root.cern,https://root.cern/root/html534/TProofBench.html,1,['benchmark'],['benchmarks']
Testability,". TProofBench. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOFBENCH; » TProofBench. class TProofBench: public TObject. TProofBench. Steering class for PROOF benchmarks. Function Members (Methods); public:. virtual~TProofBench(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidCloseOutFile(); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; Int_tCopyDataSet(const char* dset, const char* dsetdst, const char* destdir); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; static voidDrawCPU(const char* outfile, const char* opt = ""std:"", Bool_t verbose = kFALSE, Int_t dofit = 0, Int_t n0 = -1, Int_t n1 = -1); static voidDrawDataSet(const char* outfile, const char* opt = ""std:"", const char* type = ""mbs"", Bool_t verbose = kFALSE, Int_t dofit = 0, Int_t n0 = -1, Int_t n1 = -1); static voidDrawEfficiency(const char* outfile, const char* opt = """", Bool_t verbose = kFALSE); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofBench.html:339,benchmark,benchmarks,339,root/html602/TProofBench.html,https://root.cern,https://root.cern/root/html602/TProofBench.html,2,['benchmark'],['benchmarks']
Testability,". TProofBenchRun. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOFBENCH; » TProofBenchRun. class TProofBenchRun: public TObject. TProofBenchRun. Abstract base class for PROOF benchmark run. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TProofBenchRun(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofBenchRun.html:356,benchmark,benchmark,356,root/html530/TProofBenchRun.html,https://root.cern,https://root.cern/root/html530/TProofBenchRun.html,5,['benchmark'],['benchmark']
Testability,". TProofBenchRunCPU. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOFBENCH; » TProofBenchRunCPU. class TProofBenchRunCPU: public TProofBenchRun. TProofBenchRunCPU. CPU-intensive PROOF benchmark test generates events and fill 1, 2,; or 3-D histograms. No I/O activity is involved. Function Members (Methods); public:. TProofBenchRunCPU(const TProofBenchRunCPU&); TProofBenchRunCPU(TPBHistType* histtype = 0, Int_t nhists = 16, TDirectory* dirproofbench = 0, TProof* proof = 0, TProofNodes* nodes = 0, Long64_t nevents = 1000000, Int_t ntries = 2, Int_t start = 1, Int_t stop = -1, Int_t step = 1, Int_t draw = 0, Int_t debug = 0); virtual~TProofBenchRunCPU(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidDrawPerfPlots(); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofBenchRunCPU.html:365,benchmark,benchmark,365,root/html530/TProofBenchRunCPU.html,https://root.cern,https://root.cern/root/html530/TProofBenchRunCPU.html,6,"['benchmark', 'test']","['benchmark', 'test']"
Testability,". TProofBenchRunCPU. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOFBENCH; » TProofBenchRunCPU. class TProofBenchRunCPU: public TProofBenchRun. TProofBenchRunCPU. CPU-intensive PROOF benchmark test generates events and fill 1, 2,; or 3-D histograms. No I/O activity is involved. Function Members (Methods); public:. virtual~TProofBenchRunCPU(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidDrawPerfPlots(); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TCanvas*GetCanvas() const; Int_tGetDebug() const; TDirectory*GetDirProofBench() const; Int_tGetDraw() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofBenchRunCPU.html:365,benchmark,benchmark,365,root/html602/TProofBenchRunCPU.html,https://root.cern,https://root.cern/root/html602/TProofBenchRunCPU.html,4,"['benchmark', 'test']","['benchmark', 'test']"
Testability,". TProofBenchRunDataRead. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOFBENCH; » TProofBenchRunDataRead. class TProofBenchRunDataRead: public TProofBenchRun. TProofBenchRunDataRead. I/O-intensive PROOF benchmark test reads in event files distributed; on the cluster. Number of events processed per second and size of; events processed per second are plotted against number of active; workers. Performance rate for unit packets and performance rate; for query are plotted. Function Members (Methods); public:. TProofBenchRunDataRead(const TProofBenchRunDataRead&); TProofBenchRunDataRead(TProofBenchDataSet* pbds, TPBReadType* readtype = 0, TDirectory* dirproofbench = 0, TProof* proof = 0, TProofNodes* nodes = 0, Long64_t nevents = -1, Int_t ntries = 2, Int_t start = 1, Int_t stop = -1, Int_t step = 1, Int_t debug = 0); virtual~TProofBenchRunDataRead(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidDrawPerfProfiles(); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofBenchRunDataRead.html:385,benchmark,benchmark,385,root/html530/TProofBenchRunDataRead.html,https://root.cern,https://root.cern/root/html530/TProofBenchRunDataRead.html,6,"['benchmark', 'test']","['benchmark', 'test']"
Testability,". TProofBenchRunDataRead. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOFBENCH; » TProofBenchRunDataRead. class TProofBenchRunDataRead: public TProofBenchRun. TProofBenchRunDataRead. I/O-intensive PROOF benchmark test reads in event files distributed; on the cluster. Number of events processed per second and size of; events processed per second are plotted against number of active; workers. Performance rate for unit packets and performance rate; for query are plotted. Function Members (Methods); public:. virtual~TProofBenchRunDataRead(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidDrawPerfProfiles(); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofBenchRunDataRead.html:385,benchmark,benchmark,385,root/html602/TProofBenchRunDataRead.html,https://root.cern,https://root.cern/root/html602/TProofBenchRunDataRead.html,4,"['benchmark', 'test']","['benchmark', 'test']"
Testability,". TProofDebug. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofDebug. class TProofDebug. TProofDebug. Detailed logging / debug scheme. Function Members (Methods); public:. TProofDebug(); TProofDebug(const TProofDebug&); ~TProofDebug(); TProofDebug&operator=(const TProofDebug&). Data Members; public:. enum EProofDebugMask { kNone; kPacketizer; kLoop; kSelector; kOutput; kInput; kGlobal; kPackage; kFeedback; kCondor; kDraw; kAsyn; kCache; kCollect; kDataset; kSubmerger; kAll; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: Maarten Ballintijn 19/6/2002 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TProofDebug.h 31505 2009-12-02 13:20:06Z brun $ » Last generated: 2010-09-23 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofDebug.html:276,log,logging,276,root/html528/TProofDebug.html,https://root.cern,https://root.cern/root/html528/TProofDebug.html,1,['log'],['logging']
Testability,". TProofDebug. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofDebug. class TProofDebug. TProofDebug. Detailed logging / debug scheme. Function Members (Methods); public:. TProofDebug(); TProofDebug(const TProofDebug&); ~TProofDebug(); TProofDebug&operator=(const TProofDebug&). Data Members; public:. enum EProofDebugMask { kNone; kPacketizer; kLoop; kSelector; kOutput; kInput; kGlobal; kPackage; kFeedback; kCondor; kDraw; kAsyn; kCache; kCollect; kDataset; kSubmerger; kAll; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: Maarten Ballintijn 19/6/2002 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TProofDebug.h 31505 2009-12-02 13:20:06Z brun $ » Last generated: 2011-07-04 15:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofDebug.html:278,log,logging,278,root/html530/TProofDebug.html,https://root.cern,https://root.cern/root/html530/TProofDebug.html,1,['log'],['logging']
Testability,". TProofDebug. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofDebug. class TProofDebug. TProofDebug. Detailed logging / debug scheme. Function Members (Methods); public:. TProofDebug(); TProofDebug(const TProofDebug&); ~TProofDebug(); TProofDebug&operator=(const TProofDebug&). Data Members; public:. enum EProofDebugMask { kNone; kPacketizer; kLoop; kSelector; kOutput; kInput; kGlobal; kPackage; kFeedback; kCondor; kDraw; kAsyn; kCache; kCollect; kDataset; kSubmerger; kMonitoring; kAll; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: Maarten Ballintijn 19/6/2002 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-09-08 17:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofDebug.html:278,log,logging,278,root/html534/TProofDebug.html,https://root.cern,https://root.cern/root/html534/TProofDebug.html,1,['log'],['logging']
Testability,". TProofDebug. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofDebug. class TProofDebug. TProofDebug. Detailed logging / debug scheme. Function Members (Methods); public:. TProofDebug(); TProofDebug(const TProofDebug&); ~TProofDebug(); TProofDebug&operator=(const TProofDebug&). Data Members; public:. enum EProofDebugMask { kNone; kPacketizer; kLoop; kSelector; kOutput; kInput; kGlobal; kPackage; kFeedback; kCondor; kDraw; kAsyn; kCache; kCollect; kDataset; kSubmerger; kMonitoring; kAll; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: Maarten Ballintijn 19/6/2002 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TProofDebug.h 40699 2011-08-25 10:36:29Z rdm $ » Last generated: 2011-11-03 20:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofDebug.html:278,log,logging,278,root/html532/TProofDebug.html,https://root.cern,https://root.cern/root/html532/TProofDebug.html,1,['log'],['logging']
Testability,". TProofDebug. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofDebug. class TProofDebug. TProofDebug. Detailed logging / debug scheme. Function Members (Methods); public:. ~TProofDebug(); TProofDebug&operator=(const TProofDebug&); TProofDebug&operator=(TProofDebug&&); TProofDebug(); TProofDebug(const TProofDebug&); TProofDebug(TProofDebug&&). Data Members; public:. static TProofDebug::EProofDebugMaskkAll; static TProofDebug::EProofDebugMaskkAsyn; static TProofDebug::EProofDebugMaskkCache; static TProofDebug::EProofDebugMaskkCollect; static TProofDebug::EProofDebugMaskkCondor; static TProofDebug::EProofDebugMaskkDataset; static TProofDebug::EProofDebugMaskkDraw; static TProofDebug::EProofDebugMaskkFeedback; static TProofDebug::EProofDebugMaskkGlobal; static TProofDebug::EProofDebugMaskkInput; static TProofDebug::EProofDebugMaskkLoop; static TProofDebug::EProofDebugMaskkMonitoring; static TProofDebug::EProofDebugMaskkNone; static TProofDebug::EProofDebugMaskkOutput; static TProofDebug::EProofDebugMaskkPackage; static TProofDebug::EProofDebugMaskkPacketizer; static TProofDebug::EProofDebugMaskkSelector; static TProofDebug::EProofDebugMaskkSubmerger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: Maarten Ballintijn 19/6/2002 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-06-30 15:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofDebug.html:302,log,logging,302,root/html602/TProofDebug.html,https://root.cern,https://root.cern/root/html602/TProofDebug.html,1,['log'],['logging']
Testability,". TProofDebug. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofDebug. class TProofDebug. TProofDebug. Detailed logging / debug scheme. Function Members (Methods); public:. ~TProofDebug(); TProofDebug&operator=(const TProofDebug&); TProofDebug&operator=(TProofDebug&&); TProofDebug(); TProofDebug(const TProofDebug&); TProofDebug(TProofDebug&&). Data Members; public:. static TProofDebug::EProofDebugMaskkAll; static TProofDebug::EProofDebugMaskkAsyn; static TProofDebug::EProofDebugMaskkCache; static TProofDebug::EProofDebugMaskkCollect; static TProofDebug::EProofDebugMaskkCondor; static TProofDebug::EProofDebugMaskkDataset; static TProofDebug::EProofDebugMaskkDraw; static TProofDebug::EProofDebugMaskkFeedback; static TProofDebug::EProofDebugMaskkGlobal; static TProofDebug::EProofDebugMaskkInput; static TProofDebug::EProofDebugMaskkLoop; static TProofDebug::EProofDebugMaskkMonitoring; static TProofDebug::EProofDebugMaskkNone; static TProofDebug::EProofDebugMaskkOutput; static TProofDebug::EProofDebugMaskkPackage; static TProofDebug::EProofDebugMaskkPacketizer; static TProofDebug::EProofDebugMaskkSelector; static TProofDebug::EProofDebugMaskkSubmerger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Author: Maarten Ballintijn 19/6/2002 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-09-08 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofDebug.html:302,log,logging,302,root/html604/TProofDebug.html,https://root.cern,https://root.cern/root/html604/TProofDebug.html,1,['log'],['logging']
Testability,". TProofLog. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofLog. class TProofLog: public TNamed, public TQObject. TProofLog. Implementation of the PROOF session log handler. Function Members (Methods); public:. TProofLog(const char* stag, const char* url, TProofMgr* mgr); virtual~TProofLog(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTQObject::Destroyed()SIGNAL ; Bool_tTQObject::Disconnect(const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(TQObject* sender, const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofLog.html:353,log,log,353,root/html528/TProofLog.html,https://root.cern,https://root.cern/root/html528/TProofLog.html,4,['log'],['log']
Testability,". TProofLog. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofLog. class TProofLog: public TNamed, public TQObject. TProofLog. Implementation of the PROOF session log handler. Function Members (Methods); public:. virtual~TProofLog(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTQObject::Destroyed()SIGNAL ; Bool_tTQObject::Disconnect(const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(TQObject* sender, const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(const char* class_name, const char* signal, void* receiver = 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofLog.html:353,log,log,353,root/html602/TProofLog.html,https://root.cern,https://root.cern/root/html602/TProofLog.html,2,['log'],['log']
Testability,". TProofLogElem. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofLogElem. class TProofLogElem: public TNamed. TProofLog. Implementation of the PROOF session log handler. Function Members (Methods); public:. TProofLogElem(const TProofLogElem&); TProofLogElem(const char* ord, const char* url, TProofLog* logger); virtual~TProofLogElem(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDisplay(Int_t from = 0, Int_t to = -1); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofLogElem.html:322,log,log,322,root/html528/TProofLogElem.html,https://root.cern,https://root.cern/root/html528/TProofLogElem.html,1,['log'],['log']
Testability,". TProofLogElem. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofLogElem. class TProofLogElem: public TNamed. TProofLog. Implementation of the PROOF session log handler. Function Members (Methods); public:. TProofLogElem(const TProofLogElem&); TProofLogElem(const char* ord, const char* url, TProofLog* logger); virtual~TProofLogElem(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDisplay(Int_t from = 0, Int_t to = -1); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofLogElem.html:324,log,log,324,root/html530/TProofLogElem.html,https://root.cern,https://root.cern/root/html530/TProofLogElem.html,3,['log'],['log']
Testability,". TProofLogElem. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofLogElem. class TProofLogElem: public TNamed. TProofLog. Implementation of the PROOF session log handler. Function Members (Methods); public:. virtual~TProofLogElem(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDisplay(Int_t from = 0, Int_t to = -1); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TMacro*GetMacro() const; static Long64_tGetMaxTransferSize(); virtual const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofLogElem.html:348,log,log,348,root/html602/TProofLogElem.html,https://root.cern,https://root.cern/root/html602/TProofLogElem.html,2,['log'],['log']
Testability,". TProofProgressLog. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TProofProgressLog. class TProofProgressLog: public TGTransientFrame. TProofProgressLog. Dialog used to display Proof session logs from the Proof progress; dialog.; It uses TProofMgr::GetSessionLogs() mechanism internally. Function Members (Methods); public:. TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); virtual~TProofProgressLog(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidAddBuffer(const char* buffer); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuildLogList(Bool_t create = kFALSE); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidClear(Option_t* = 0); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofProgressLog.html:385,log,logs,385,root/html528/TProofProgressLog.html,https://root.cern,https://root.cern/root/html528/TProofProgressLog.html,4,['log'],['logs']
Testability,". TProofProgressLog. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TProofProgressLog. class TProofProgressLog: public TGTransientFrame. TProofProgressLog. Dialog used to display Proof session logs from the Proof progress; dialog.; It uses TProofMgr::GetSessionLogs() mechanism internally. Function Members (Methods); public:. virtual~TProofProgressLog(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidAddBuffer(const char* buffer); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuildLogList(Bool_t create = kFALSE); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidClear(Option_t* = 0); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofProgressLog.html:385,log,logs,385,root/html602/TProofProgressLog.html,https://root.cern,https://root.cern/root/html602/TProofProgressLog.html,2,['log'],['logs']
Testability,". TRFIOFile. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » RFIO; » TRFIOFile. class TRFIOFile: public TFile. TRFIOFile. A TRFIOFile is like a normal TFile except that it reads and writes; its data via a rfiod server (for more on the rfiod daemon see; http://wwwinfo.cern.ch/pdp/serv/shift.html). TRFIOFile file names; are in standard URL format with protocol ""rfio"". The following are; valid TRFIOFile URL's:. rfio:/afs/cern.ch/user/r/rdm/galice.root; where galice.root is a symlink of the type /shift/.../...; rfio:na49db1:/data1/raw.root; rfio:/castor/cern.ch/user/r/rdm/test.root. If Castor 2.1 is used the file names can be given also in the; following ways:. rfio://host:port/?path=FILEPATH; rfio://host/?path=FILEPATH; rfio:///castor?path=FILEPATH; rfio://stager_host:stager_port/?path=/castor/cern.ch/user/r/; rdm/bla.root&svcClass=MYSVCLASS&castorVersion=MYCASTORVERSION; rfio://stager_host/?path=/castor/cern.ch/user/r/; rdm/bla.root&svcClass=MYSVCLASS&castorVersion=MYCASTORVERSION; rfio:///castor?path=/castor/cern.ch/user/r/; rdm/bla.root&svcClass=MYSVCLASS&castorVersion=MYCASTORVERSION. path is mandatory as parameter but all the other ones are optional. For the ultimate description of supported urls see:; https://twiki.cern.ch/twiki/bin/view/FIOgroup/RfioRootTurl. Function Members (Methods); public:. TRFIOFile(const char* url, Option_t* option = """", const char* ftitle = """", Int_t compress = 1); virtual~TRFIOFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Op",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TRFIOFile.html:748,test,test,748,root/html530/TRFIOFile.html,https://root.cern,https://root.cern/root/html530/TRFIOFile.html,2,['test'],['test']
Testability,". TRFIOSystem. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » RFIO; » TRFIOSystem. class TRFIOSystem: public TSystem. TRFIOFile. A TRFIOFile is like a normal TFile except that it reads and writes; its data via a rfiod server (for more on the rfiod daemon see; http://wwwinfo.cern.ch/pdp/serv/shift.html). TRFIOFile file names; are in standard URL format with protocol ""rfio"". The following are; valid TRFIOFile URL's:. rfio:/afs/cern.ch/user/r/rdm/galice.root; where galice.root is a symlink of the type /shift/.../...; rfio:na49db1:/data1/raw.root; rfio:/castor/cern.ch/user/r/rdm/test.root. If Castor 2.1 is used the file names can be given also in the; following ways:. rfio://host:port/?path=FILEPATH; rfio://host/?path=FILEPATH; rfio:///castor?path=FILEPATH; rfio://stager_host:stager_port/?path=/castor/cern.ch/user/r/; rdm/bla.root&svcClass=MYSVCLASS&castorVersion=MYCASTORVERSION; rfio://stager_host/?path=/castor/cern.ch/user/r/; rdm/bla.root&svcClass=MYSVCLASS&castorVersion=MYCASTORVERSION; rfio:///castor?path=/castor/cern.ch/user/r/; rdm/bla.root&svcClass=MYSVCLASS&castorVersion=MYCASTORVERSION. path is mandatory as parameter but all the other ones are optional. For the ultimate description of supported urls see:; https://twiki.cern.ch/twiki/bin/view/FIOgroup/RfioRootTurl. Function Members (Methods); public:. TRFIOSystem(); virtual~TRFIOSystem(); virtual voidTSystem::Abort(int code = 0); voidTObject::AbstractMethod(const char* method) const; virtual intTSystem::AcceptConnection(int sock); virtual Bool_tAccessPathName(const char* path, EAccessMode mode); virtual voidTSystem::AddDynamicPath(const char* pathname); virtual voidTSystem::AddFileHandler(TFileHandler* fh); virtual voidTSystem::AddIncludePath(const char* includePath); virtual voidTSystem::AddLinkedLibs(const char* linkedLib); virtual voidTSy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TRFIOSystem.html:756,test,test,756,root/html530/TRFIOSystem.html,https://root.cern,https://root.cern/root/html530/TRFIOSystem.html,2,['test'],['test']
Testability,". TSQLServer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TSQLServer. class TSQLServer: public TObject. TSQLServer. Abstract base class defining interface to a SQL server. To open a connection to a server use the static method Connect().; The db argument of Connect() is of the form:; <dbms>://<host>[:<port>][/<database>], e.g.; mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main, ...; Depending on the <dbms> specified an appropriate plugin library; will be loaded which will provide the real interface.; For SQLite, the syntax is slightly different:; sqlite://<database>; The string 'database' is directly passed to sqlite3_open(_v2),; so e.g. a filename or "":memory:"" are possible values.; For SQLite versions >= 3.7.7, SQLITE_OPEN_URI is activated to also; allow URI-parameters if needed. Related classes are TSQLResult and TSQLRow. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TSQLServer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Bool_tCommit(); virtual Int_tTObject::Compare(const TObject* obj) const; static TSQLServer*Connect(const char* db, const char* uid, const char* pw); virtual voidTObject::Copy(TObject& object) const; virtual Int_tCreateDataBase(const char* dbname); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSQLServer.html:567,test,test,567,root/html602/TSQLServer.html,https://root.cern,https://root.cern/root/html602/TSQLServer.html,2,['test'],['test']
Testability,". TSQLServer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TSQLServer. class TSQLServer: public TObject. TSQLServer. Abstract base class defining interface to a SQL server. To open a connection to a server use the static method Connect().; The db argument of Connect() is of the form:; <dbms>://<host>[:<port>][/<database>], e.g.; mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main, ...; Depending on the <dbms> specified an appropriate plugin library; will be loaded which will provide the real interface. Related classes are TSQLResult and TSQLRow. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TSQLServer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Bool_tCommit(); virtual Int_tTObject::Compare(const TObject* obj) const; static TSQLServer*Connect(const char* db, const char* uid, const char* pw); virtual voidTObject::Copy(TObject& object) const; virtual Int_tCreateDataBase(const char* dbname); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Int_tDropDataBase(const char* dbname); virtual voidTObject::Dump() constMENU ; virtual voidEnableErrorOutput(Bool_t on = kTRUE); virtual voidTObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSQLServer.html:543,test,test,543,root/html528/TSQLServer.html,https://root.cern,https://root.cern/root/html528/TSQLServer.html,3,['test'],['test']
Testability,". TSQLServer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TSQLServer. class TSQLServer: public TObject. TSQLServer. Abstract base class defining interface to a SQL server. To open a connection to a server use the static method Connect().; The db argument of Connect() is of the form:; <dbms>://<host>[:<port>][/<database>], e.g.; mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main, ...; Depending on the <dbms> specified an appropriate plugin library; will be loaded which will provide the real interface.; For SQLite, the syntax is slightly different:; sqlite://<database>; The string 'database' is directly passed to sqlite3_open(_v2),; so e.g. a filename or "":memory:"" are possible values.; For SQLite versions >= 3.7.7, SQLITE_OPEN_URI is activated to also; allow URI-parameters if needed. Related classes are TSQLResult and TSQLRow. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TSQLServer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Bool_tCommit(); virtual Int_tTObject::Compare(const TObject* obj) const; static TSQLServer*Connect(const char* db, const char* uid, const char* pw); virtual voidTObject::Copy(TObject& object) const; virtual Int_tCreateDataBase(const char* dbname); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSQLServer.html:543,test,test,543,root/html534/TSQLServer.html,https://root.cern,https://root.cern/root/html534/TSQLServer.html,1,['test'],['test']
Testability,". TSessionLogView. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TSessionLogView. class TSessionLogView: public TGTransientFrame. TSessionLogView. Dialog used to display session logs from the session viewer. Function Members (Methods); public:. virtual~TSessionLogView(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidAddBuffer(const char* buffer); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); voidClearLogView(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSessionLogView.html:395,log,logs,395,root/html602/TSessionLogView.html,https://root.cern,https://root.cern/root/html602/TSessionLogView.html,2,['log'],['logs']
Testability,". TSessionLogView. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TSessionLogView. class TSessionLogView: public TGTransientFrame. TSessionLogView. Dialog used to display session logs from the session viewer. Function Members (Methods); public:. TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h); virtual~TSessionLogView(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidAddBuffer(const char* buffer); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); voidClearLogView(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSessionLogView.html:371,log,logs,371,root/html528/TSessionLogView.html,https://root.cern,https://root.cern/root/html528/TSessionLogView.html,4,['log'],['logs']
Testability,". TTree and Its Data | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials TTree and Its Data. TTree; A TTree is a large, structured chunk of data on disk. The trick is tha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/ttree-and-its-data.html:716,test,tests,716,d/ttree-and-its-data.html,https://root.cern,https://root.cern/d/ttree-and-its-data.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". TUnuran. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » UNURAN; » TUnuran. class TUnuran. Function Members (Methods); public:. ~TUnuran(); TRandom*GetRandom(); boolInit(const string& distr, const string& method); boolInit(const TUnuranContDist& distr, const string& method = ""auto""); boolInit(const TUnuranMultiContDist& distr, const string& method = ""hitro""); boolInit(const TUnuranDiscrDist& distr, const string& method = ""auto""); boolInit(const TUnuranEmpDist& distr, const string& method = ""empk""); boolInitBinomial(unsigned int ntot, double prob, const string& method = ""dstd""); boolInitPoisson(double mu, const string& method = ""dstd""); const string&MethodName() const; boolReInitDiscrDist(unsigned int npar, double* params); doubleSample(); intSampleDiscr(); boolSampleMulti(double* x); boolSetLogLevel(unsigned int iflag = 1); boolSetLogStream(); voidSetRandom(TRandom* r); voidSetSeed(unsigned int seed); TUnuran(TRandom* r = 0, unsigned int log = 0). protected:. boolSetContDistribution(const TUnuranContDist& dist); boolSetDiscreteDistribution(const TUnuranDiscrDist& dist); boolSetEmpiricalDistribution(const TUnuranEmpDist& dist); boolSetMethodAndInit(); boolSetMultiDistribution(const TUnuranMultiContDist& dist); boolSetRandomGenerator(). private:. TUnuran&operator=(const TUnuran& rhs); TUnuran(const TUnuran&). Data Members; protected:. auto_ptr<TUnuranBaseDist>fDistpointer for distribution wrapper; UNUR_GEN*fGenpointer to the UnuRan C generator struct; stringfMethodstring representing the method; TRandom*fRngpointer to ROOT random number generator; UNUR_DISTR*fUdistrpointer to the UnuRan C distribution struct; UNUR_URNG*fUrngpointer to Unuran C random generator struct. Class Charts. Inheritance Chart:. TUnuran. Function documentation; TUnuran(TRandom* r = 0, unsigned int l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnuran.html:1153,log,log,1153,root/html602/TUnuran.html,https://root.cern,https://root.cern/root/html602/TUnuran.html,1,['log'],['log']
Testability,". TUnuran. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » UNURAN; » TUnuran. class TUnuran. Function Members (Methods); public:. ~TUnuran(); TRandom*GetRandom(); boolInit(const string& distr, const string& method); boolInit(const TUnuranContDist& distr, const string& method = ""auto""); boolInit(const TUnuranMultiContDist& distr, const string& method = ""hitro""); boolInit(const TUnuranDiscrDist& distr, const string& method = ""auto""); boolInit(const TUnuranEmpDist& distr, const string& method = ""empk""); boolInitBinomial(unsigned int ntot, double prob, const string& method = ""dstd""); boolInitPoisson(double mu, const string& method = ""dstd""); const string&MethodName() const; boolReInitDiscrDist(unsigned int npar, double* params); doubleSample(); intSampleDiscr(); boolSampleMulti(double* x); boolSetLogLevel(unsigned int iflag = 1); boolSetLogStream(); voidSetRandom(TRandom* r); voidSetSeed(unsigned int seed); TUnuran(TRandom* r = 0, unsigned int log = 0). protected:. boolSetContDistribution(const TUnuranContDist& dist); boolSetDiscreteDistribution(const TUnuranDiscrDist& dist); boolSetEmpiricalDistribution(const TUnuranEmpDist& dist); boolSetMethodAndInit(); boolSetMultiDistribution(const TUnuranMultiContDist& dist); boolSetRandomGenerator(). private:. TUnuran&operator=(const TUnuran& rhs); TUnuran(const TUnuran&). Data Members; protected:. auto_ptr<TUnuranBaseDist>fDistpointer for distribution wrapper; UNUR_GEN*fGenpointer to the UnuRan C generator struct; stringfMethodstring representing the method; TRandom*fRngpointer to ROOT random number generator; UNUR_DISTR*fUdistrpointer to the UnuRan C distribution struct; UNUR_URNG*fUrngpointer to Unuran C random generator struct. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TUnuran(TRandom* r = 0, unsigned int l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TUnuran.html:1129,log,log,1129,root/html604/TUnuran.html,https://root.cern,https://root.cern/root/html604/TUnuran.html,1,['log'],['log']
Testability,". TVectorT<double>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATRIX; » TVectorT<double>. class TVectorT<double>: public TObject. TVectorT. Template class of Vectors in the linear algebra package. Unless otherwise specified, vector indices always start with 0,; spanning up to the specified limit-1. For (n) vectors where n <= kSizeMax (5 currently) storage space is; available on the stack, thus avoiding expensive allocation/; deallocation of heap space . However, this introduces of course; kSizeMax overhead for each vector object . If this is an issue; recompile with a new appropriate value (>=0) for kSizeMax. Another way to assign and store vector data is through Use; see for instance stressLinear.cxx file . Note that Constructors/assignments exists for all different matrix; views. For usage examples see $ROOTSYS/test/stressLinear.cxx. This class is also known as (typedefs to this class)TVectorD, TVectorT<Double_t>. Function Members (Methods); public:. TVectorT<double>(); TVectorT<double>(Int_t n); TVectorT<double>(const TVectorT<double>& another); TVectorT<double>(const TMatrixTRow_const<double>& mr); TVectorT<double>(const TMatrixTColumn_const<double>& mc); TVectorT<double>(const TMatrixTDiag_const<double>& md); TVectorT<double>(const TVectorT<float>& another); TVectorT<double>(Int_t lwb, Int_t upb); TVectorT<double>(Int_t n, const double* elements); TVectorT<double>(Int_t lwb, Int_t upb, const double* elements); virtual~TVectorT<double>(); TVectorT<double>&Abs(); voidTObject::AbstractMethod(const char* method) const; voidAdd(const TVectorT<double>& v); voidAdd(const TVectorT<double>& v1, const TVectorT<double>& v2); voidAddSomeConstant(double val, const TVectorT<double>& select); virtual voidTObject::AppendPad(Option_t* option = """"); TVectorT<double>&Apply(const TElementActionT<double>&",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TVectorT_double_.html:1006,test,test,1006,root/html530/TVectorT_double_.html,https://root.cern,https://root.cern/root/html530/TVectorT_double_.html,2,['test'],['test']
Testability,". TVectorT<double>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATRIX; » TVectorT<double>. class TVectorT<double>: public TObject. TVectorT. Template class of Vectors in the linear algebra package. Unless otherwise specified, vector indices always start with 0,; spanning up to the specified limit-1. For (n) vectors where n <= kSizeMax (5 currently) storage space is; available on the stack, thus avoiding expensive allocation/; deallocation of heap space . However, this introduces of course; kSizeMax overhead for each vector object . If this is an issue; recompile with a new appropriate value (>=0) for kSizeMax. Another way to assign and store vector data is through Use; see for instance stressLinear.cxx file . Note that Constructors/assignments exists for all different matrix; views. For usage examples see $ROOTSYS/test/stressLinear.cxx. This class is also known as (typedefs to this class)TVectorT<Double_t>, TVectorD. Function Members (Methods); public:. TVectorT<double>(); TVectorT<double>(Int_t n); TVectorT<double>(const TVectorT<double>& another); TVectorT<double>(const TMatrixTRow_const<double>& mr); TVectorT<double>(const TMatrixTColumn_const<double>& mc); TVectorT<double>(const TMatrixTDiag_const<double>& md); TVectorT<double>(const TVectorT<float>& another); TVectorT<double>(Int_t lwb, Int_t upb); TVectorT<double>(Int_t n, const double* elements); TVectorT<double>(Int_t lwb, Int_t upb, const double* elements); virtual~TVectorT<double>(); TVectorT<double>&Abs(); voidTObject::AbstractMethod(const char* method) const; voidAdd(const TVectorT<double>& v); voidAdd(const TVectorT<double>& v1, const TVectorT<double>& v2); voidAddSomeConstant(double val, const TVectorT<double>& select); virtual voidTObject::AppendPad(Option_t* option = """"); TVectorT<double>&Apply(const TElementActionT<double>&",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVectorT_double_.html:1006,test,test,1006,root/html528/TVectorT_double_.html,https://root.cern,https://root.cern/root/html528/TVectorT_double_.html,2,['test'],['test']
Testability,". TVectorT<float>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATRIX; » TVectorT<float>. class TVectorT<float>: public TObject. TVectorT. Template class of Vectors in the linear algebra package. Unless otherwise specified, vector indices always start with 0,; spanning up to the specified limit-1. For (n) vectors where n <= kSizeMax (5 currently) storage space is; available on the stack, thus avoiding expensive allocation/; deallocation of heap space . However, this introduces of course; kSizeMax overhead for each vector object . If this is an issue; recompile with a new appropriate value (>=0) for kSizeMax. Another way to assign and store vector data is through Use; see for instance stressLinear.cxx file . Note that Constructors/assignments exists for all different matrix; views. For usage examples see $ROOTSYS/test/stressLinear.cxx. This class is also known as (typedefs to this class)TVectorT<Float_t>, TVector, TVectorF. Function Members (Methods); public:. TVectorT<float>(); TVectorT<float>(Int_t n); TVectorT<float>(const TVectorT<float>& another); TVectorT<float>(const TMatrixTRow_const<float>& mr); TVectorT<float>(const TMatrixTColumn_const<float>& mc); TVectorT<float>(const TMatrixTDiag_const<float>& md); TVectorT<float>(const TVectorT<double>& another); TVectorT<float>(Int_t lwb, Int_t upb); TVectorT<float>(Int_t n, const float* elements); TVectorT<float>(Int_t lwb, Int_t upb, const float* elements); virtual~TVectorT<float>(); TVectorT<float>&Abs(); voidTObject::AbstractMethod(const char* method) const; voidAdd(const TVectorT<float>& v); voidAdd(const TVectorT<float>& v1, const TVectorT<float>& v2); voidAddSomeConstant(float val, const TVectorT<float>& select); virtual voidTObject::AppendPad(Option_t* option = """"); TVectorT<float>&Apply(const TElementActionT<float>& action); TVectorT<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVectorT_float_.html:1003,test,test,1003,root/html534/TVectorT_float_.html,https://root.cern,https://root.cern/root/html534/TVectorT_float_.html,1,['test'],['test']
Testability,". TVectorT<float>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATRIX; » TVectorT<float>. class TVectorT<float>: public TObject. TVectorT. Template class of Vectors in the linear algebra package. Unless otherwise specified, vector indices always start with 0,; spanning up to the specified limit-1. For (n) vectors where n <= kSizeMax (5 currently) storage space is; available on the stack, thus avoiding expensive allocation/; deallocation of heap space . However, this introduces of course; kSizeMax overhead for each vector object . If this is an issue; recompile with a new appropriate value (>=0) for kSizeMax. Another way to assign and store vector data is through Use; see for instance stressLinear.cxx file . Note that Constructors/assignments exists for all different matrix; views. For usage examples see $ROOTSYS/test/stressLinear.cxx. This class is also known as (typedefs to this class)TVectorT<Float_t>, TVectorF, TVector. Function Members (Methods); public:. TVectorT<float>(); TVectorT<float>(Int_t n); TVectorT<float>(const TVectorT<float>& another); TVectorT<float>(const TMatrixTRow_const<float>& mr); TVectorT<float>(const TMatrixTColumn_const<float>& mc); TVectorT<float>(const TMatrixTDiag_const<float>& md); TVectorT<float>(const TVectorT<double>& another); TVectorT<float>(Int_t lwb, Int_t upb); TVectorT<float>(Int_t n, const float* elements); TVectorT<float>(Int_t lwb, Int_t upb, const float* elements); virtual~TVectorT<float>(); TVectorT<float>&Abs(); voidTObject::AbstractMethod(const char* method) const; voidAdd(const TVectorT<float>& v); voidAdd(const TVectorT<float>& v1, const TVectorT<float>& v2); voidAddSomeConstant(float val, const TVectorT<float>& select); virtual voidTObject::AppendPad(Option_t* option = """"); TVectorT<float>&Apply(const TElementActionT<float>& action); TVectorT<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVectorT_float_.html:1003,test,test,1003,root/html528/TVectorT_float_.html,https://root.cern,https://root.cern/root/html528/TVectorT_float_.html,3,['test'],['test']
Testability,". TVirtualFFT. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TVirtualFFT. class TVirtualFFT: public TObject. TVirtualFFT. TVirtualFFT is an interface class for Fast Fourier Transforms. The default FFT library is FFTW. To use it, FFTW3 library should already; be installed, and ROOT should be have fftw3 module enabled, with the directories; of fftw3 include file and library specified (see installation instructions).; Function SetDefaultFFT() allows to change the default library. Available transform types:; FFT:; - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); in one or more dimensions, -1 in the exponent; - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); in one or more dimensions, +1 in the exponent; - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); in one or more dimensions,; - ""C2R"" - inverse transforms to ""R2C"", taking complex input; (storing the non-redundant half of a logically Hermitian array); to real output; - ""R2HC"" - a real-input DFT with output in ¡Èhalfcomplex¡É format,; i.e. real and imaginary parts for a transform of size n stored as; r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; - ""HC2R"" - computes the reverse of FFTW_R2HC, above; - ""DHT"" - computes a discrete Hartley transform. Sine/cosine transforms:; Different types of transforms are specified by parameter kind of the SineCosine() static; function. 4 different kinds of sine and cosine transforms are available; DCT-I (REDFT00 in FFTW3 notation)- kind=0; DCT-II (REDFT01 in FFTW3 notation)- kind=1; DCT-III(REDFT10 in FFTW3 notation)- kind=2; DCT-IV (REDFT11 in FFTW3 notation)- kind=3; DST-I (RODFT00 in FFTW3 notation)- kind=4; DST-II (RODFT01 in FFTW3 notation)- kind=5; DST-III(RODFT10 in FFTW3 notation)- kind=6; DST-IV (RODFT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVirtualFFT.html:1165,log,logically,1165,root/html602/TVirtualFFT.html,https://root.cern,https://root.cern/root/html602/TVirtualFFT.html,2,['log'],['logically']
Testability,". TVirtualFFT. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TVirtualFFT. class TVirtualFFT: public TObject. TVirtualFFT. TVirtualFFT is an interface class for Fast Fourier Transforms. The default FFT library is FFTW. To use it, FFTW3 library should already; be installed, and ROOT should be have fftw3 module enabled, with the directories; of fftw3 include file and library specified (see installation instructions).; Function SetDefaultFFT() allows to change the default library. Available transform types:; FFT:; - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); in one or more dimensions, -1 in the exponent; - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); in one or more dimensions, +1 in the exponent; - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); in one or more dimensions,; - ""C2R"" - inverse transforms to ""R2C"", taking complex input; (storing the non-redundant half of a logically Hermitian array); to real output; - ""R2HC"" - a real-input DFT with output in ¡Èhalfcomplex¡É format,; i.e. real and imaginary parts for a transform of size n stored as; r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; - ""HC2R"" - computes the reverse of FFTW_R2HC, above; - ""DHT"" - computes a discrete Hartley transform. Sine/cosine transforms:; Different types of transforms are specified by parameter kind of the SineCosine() static; function. 4 different kinds of sine and cosine transforms are available; DCT-I (REDFT00 in FFTW3 notation)- kind=0; DCT-II (REDFT01 in FFTW3 notation)- kind=1; DCT-III(REDFT10 in FFTW3 notation)- kind=2; DCT-IV (REDFT11 in FFTW3 notation)- kind=3; DST-I (RODFT00 in FFTW3 notation)- kind=4; DST-II (RODFT01 in FFTW3 notation)- kind=5; DST-III(RODFT10 in FFTW3 notation)- kind=6; DST-IV (RODFT11 in FFTW3 notation)- k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TVirtualFFT.html:1141,log,logically,1141,root/html530/TVirtualFFT.html,https://root.cern,https://root.cern/root/html530/TVirtualFFT.html,3,['log'],['logically']
Testability,". TVirtualFFT. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TVirtualFFT. class TVirtualFFT: public TObject. TVirtualFFT. TVirtualFFT is an interface class for Fast Fourier Transforms. The default FFT library is FFTW. To use it, FFTW3 library should already; be installed, and ROOT should be have fftw3 module enabled, with the directories; of fftw3 include file and library specified (see installation instructions).; Function SetDefaultFFT() allows to change the default library. Available transform types:; FFT:; - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); in one or more dimensions, -1 in the exponent; - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); in one or more dimensions, +1 in the exponent; - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); in one or more dimensions,; - ""C2R"" - inverse transforms to ""R2C"", taking complex input; (storing the non-redundant half of a logically Hermitian array); to real output; - ""R2HC"" - a real-input DFT with output in ¡Èhalfcomplex¡É format,; i.e. real and imaginary parts for a transform of size n stored as; r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; - ""HC2R"" - computes the reverse of FFTW_R2HC, above; - ""DHT"" - computes a discrete Hartley transform. Sine/cosine transforms:; Different types of transforms are specified by parameter kind of the SineCosine() static; function. 4 different kinds of sine and cosine transforms are available; DCT-I (REDFT00 in FFTW3 notation)- kind=0; DCT-II (REDFT10 in FFTW3 notation)- kind=1; DCT-III(REDFT01 in FFTW3 notation)- kind=2; DCT-IV (REDFT11 in FFTW3 notation)- kind=3; DST-I (RODFT00 in FFTW3 notation)- kind=4; DST-II (RODFT10 in FFTW3 notation)- kind=5; DST-III(RODFT01 in FFTW3 notation)- kind=6; DST-IV (RODFT11 in FFTW3 notation)- k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualFFT.html:1141,log,logically,1141,root/html528/TVirtualFFT.html,https://root.cern,https://root.cern/root/html528/TVirtualFFT.html,1,['log'],['logically']
Testability,". TVirtualViewer3D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TVirtualViewer3D. class TVirtualViewer3D: public TObject. TVirtualViewer3D. Abstract 3D shapes viewer. The concrete implementations are:. TViewerX3D : X3d viewer; TGLViewer : OpenGL viewer. ; 3D Viewer Infrastructure Overview; The 3D Viewer infrastructure consists of:. TVirtualViewer3D interface: An abstract handle to the viewer, allowing; client to test preferences, add objects, control the viewer via scripting; (to be added) etc.; TBuffer3D class hierarchy: Used to describe 3D objects; (""shapes""); - filled /added by negotiation with viewer via TVirtualViewer3D. Together these allow clients to publish objects to any one of the 3D viewers; (currently OpenGL/x3d,TPad), free of viewer specific drawing code. They allow; our simple x3d viewer, and considerably more sophisticated OpenGL one to both; work with both geometry libraries (g3d and geom) efficiently.; Publishing to a viewer consists of the following steps:. Create / obtain viewer handle; Begin scene on viewer; Fill mandatory parts of TBuffer3D describing object; Add to viewer; Fill optional parts of TBuffer3D if requested by viewer, and add again; ... repeat 3/4/5; as required; End scene on viewer. Creating / Obtaining Viewer; Create/obtain the viewer handle via local/global pad - the viewer is always; bound to a TPad object at present [This may be removed as a restriction in; the future] . You should perform the publishing to the viewer described below; in the Paint() method of the object you attach to the pad (via Draw()); TVirtualViewer3D * v = gPad->GetViewer3D(""xxxx"");; "" xxxx"" is viewer type: OpenGL ""ogl"", X3D ""x3d"" or; Pad ""pad"" (default). The viewer is created via the plugin manager,; attached to pad, and the interface returned.; Begi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVirtualViewer3D.html:627,test,test,627,root/html602/TVirtualViewer3D.html,https://root.cern,https://root.cern/root/html602/TVirtualViewer3D.html,2,['test'],['test']
Testability,". TVirtualViewer3D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TVirtualViewer3D. class TVirtualViewer3D: public TObject. TVirtualViewer3D. Abstract 3D shapes viewer. The concrete implementations are:. TViewerX3D : X3d viewer; TGLViewer : OpenGL viewer. ; 3D Viewer Infrastructure Overview; The 3D Viewer infrastructure consists of:. TVirtualViewer3D interface: An abstract handle to the viewer, allowing; client to test preferences, add objects, control the viewer via scripting; (to be added) etc.; TBuffer3D class hierarchy: Used to describe 3D objects; (""shapes""); - filled /added by negotiation with viewer via TVirtualViewer3D. Together these allow clients to publish objects to any one of the 3D viewers; (currently OpenGL/x3d,TPad), free of viewer specific drawing code. They allow; our simple x3d viewer, and considerably more sophisticated OpenGL one to both; work with both geometry libraries (g3d and geom) efficiently.; Publishing to a viewer consists of the following steps:. Create / obtain viewer handle; Begin scene on viewer; Fill mandatory parts of TBuffer3D describing object; Add to viewer; Fill optional parts of TBuffer3D if requested by viewer, and add again; ... repeat 3/4/5; as required; End scene on viewer. Creating / Obtaining Viewer; Create/obtain the viewer handle via local/global pad - the viewer is always; bound to a TPad object at present [This may be removed as a restriction in; the future] . You should perform the publishing to the viewer described below; in the Paint() method of the object you attach to the pad (via Draw()); TVirtualViewer3D * v = gPad->GetViewer3D(""xxxx"");; "" xxxx"" is viewer type: OpenGL ""ogl"", X3D ""x3d"" or; Pad ""pad"" (default). The viewer is created via the plugin manager,; attached to pad, and the interface returned.; Begin / End Scene; Objects m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualViewer3D.html:603,test,test,603,root/html528/TVirtualViewer3D.html,https://root.cern,https://root.cern/root/html528/TVirtualViewer3D.html,4,['test'],['test']
Testability,". Team | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » About Team. . Axel Naumann ; ; Starting off as a physicist, Axel studied physics and math in Muenster, Germany. In 2000, he got a Ph.D. position for high energy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/team.html:702,test,tests,702,d/team.html,https://root.cern,https://root.cern/d/team.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". That quantity is recognized as; one of the measures to determine key quantities in the network. What is done is to vary one input around its nominal value and to see; how the NN changes. This is done for each entry in the sample and produces; a distribution. What you can learn from that is:; - is variable a really useful, or is my network insensitive to it ?; - is there any risk of big systematic ? Is the network extremely sensitive; to small variations of any of my inputs ?. As you might understand, this is to be considered with care and can serve; as input for an ""educated guess"" when optimizing the network. void DrawNetwork(Int_t neuron, const char* signal, const char* bg); Draws the distribution of the neural network (using ith neuron).; Two distributions are drawn, for events passing respectively the ""signal""; and ""background"" cuts. Only the test sample is used. TProfile* DrawTruthDeviation(Int_t outnode = 0, Option_t* option = """"); Create a profile of the difference of the MLP output minus the; true value for a given output node outnode, vs the true value for; outnode, for all test data events. This method is mainly useful; when doing regression analysis with the MLP (i.e. not classification,; but continuous truth values).; The resulting TProfile histogram is returned.; It is not drawn if option ""goff"" is specified.; Options are passed to TProfile::Draw. THStack* DrawTruthDeviations(Option_t* option = """"); Creates TProfiles of the difference of the MLP output minus the; true value vs the true value, one for each output, filled with the; test data events. This method is mainly useful when doing regression; analysis with the MLP (i.e. not classification, but continuous truth; values).; The returned THStack contains all the TProfiles. It is drawn unless; the option ""goff"" is specified.; Options are passed to TProfile::Draw. TProfile* DrawTruthDeviationInOut(Int_t innode, Int_t outnode = 0, Option_t* option = """"); Creates a profile of the difference of the MLP o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMLPAnalyzer.html:8282,test,test,8282,root/html528/TMLPAnalyzer.html,https://root.cern,https://root.cern/root/html528/TMLPAnalyzer.html,6,['test'],['test']
Testability,". The End | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials The End. You are done - that was the introductory tutorial!. Image by Tangopaso; If you want to go on, have ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/end.html:705,test,tests,705,d/end.html,https://root.cern,https://root.cern/d/end.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". The first argument only disables or enables gradient parallelization, this is on by default. The second argument determines the internal partial derivative calculation ordering strategy. The third argument determines the number of partial derivatives that are executed per task package on each worker. . ParallelDescentOptions(bool enable=false, int splitStrategy=0, int numSplits=4) Experimental - Control settings related to the parallelization of likelihoods outside of the gradient calculation but in the minimization, most prominently in the linesearch step. The first argument this disables or enables likelihood parallelization. The second argument determines whether to split the task batches per event or per likelihood component. And the third argument how many events or respectively components to include in each batch. . TimingAnalysis(bool flag) Experimental - Log timings. This feature logs timings with NewStyle likelihoods on multiple processes simultaneously and outputs the timings at the end of a run to json log files, which can be analyzed with the RooFit::MultiProcess::HeatmapAnalyzer. Only works with simultaneous likelihoods. . PyROOT; The RooAbsPdf::fitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 157 of file RooAbsPdf.h. ◆ fitToImpl(). std::unique_ptr< RooFitResult > RooAbsPdf::fitToImpl ; (; RooAbsData & ; data, . const RooLinkedList & ; cmdList . ). protectedvirtual . Protected implementation of the likelihood fitting routine. ; This virtual function can be overridden in case you want to change the likelihood fitting logic for custom PDFs.; NoteNever call this function directly. Instead, call RooAbsPdf::fitTo(). ; Definition at line 1072 of file RooAbsPdf.cxx. ◆ genContext(). RooAbsGenContext * RooAbsPdf::genContext ; (; const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; verbose =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:111468,log,logs,111468,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,2,['log'],"['log', 'logs']"
Testability,". Therefore, we had to set in the example above of the (10x10) Hilbert, which is near singular, the tolerance on 10e-12 . (The fact that we have to set the tolerance < sqrt(epsilon) is a clear indication that we are losing precision .); If the matrix is flagged as being singular, operations with the decomposition will fail and will return matrices/vectors that are invalid .; The observant reader will notice that by scaling the complete matrix by some small number the decomposition will detect a singular matrix . In this case the user will have to reduce the tolerance number by this factor . (For CPU time saving we decided not to make this an automatic procedure) .; Code for this could look as follows: const Double_t max_abs = Abs(a).Max();; const Double_t scale = TMath::Min(max_abs,1.);; a.SetTol(a.GetTol()*scale);; a#define a(i)Definition RSha256.hxx:99; double; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; For usage examples see $ROOTSYS/test/stressLinear.cxx ; Definition at line 33 of file TDecompBase.h. Public Member Functions;  TDecompBase ();  Default constructor. ;  ;  TDecompBase (const TDecompBase &another);  Copy constructor. ;  ;  ~TDecompBase () override;  ; virtual Double_t Condition ();  Matrix condition number. ;  ; virtual Bool_t Decompose ()=0;  ; virtual void Det (Double_t &d1, Double_t &d2);  Matrix determinant det = d1*TMath::Power(2.,d2) ;  ; Int_t GetColLwb () const;  ; Double_t GetCondition () const;  ; Double_t GetDet1 () const;  ; Double_t GetDet2 () const;  ; virtual Int_t GetNcols () const =0;  ; virtual Int_t GetNrows () const =0;  ; Int_t GetRowLwb () const;  ; Double_t GetTol () const;  ; TClass * IsA () const override;  ; virtual Bool_t MultiSolve (TMatrixD &B);  Solve set of equations with RHS in columns of B. ;  ; TDecompBase & operator= (const TDecompBase &source);  Assignment operator. ;  ; void Print (Option_t *opt="""") const override;  Print class members. ;  ; Double_t SetTo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompBase.html:4403,test,test,4403,doc/master/classTDecompBase.html,https://root.cern,https://root.cern/doc/master/classTDecompBase.html,1,['test'],['test']
Testability,". This function sets the following fitting parameters of peaks:; -sigmaX - initial value of sigma x parameter; -fixSigmaX - logical value of sigma x parameter, which allows to fix the parameter (not to fit); -sigmaY - initial value of sigma y parameter; -fixSigmaY - logical value of sigma y parameter, which allows to fix the parameter (not to fit); -ro - initial value of ro parameter (correlation coefficient); -fixRo - logical value of ro parameter, which allows to fix the parameter (not to fit); -positionInitX - aray of initial values of peaks x positions; -fixPositionX - array of logical values which allow to fix appropriate x positions (not fit). However they are present in the estimated functional.; -positionInitY - aray of initial values of peaks y positions; -fixPositionY - array of logical values which allow to fix appropriate y positions (not fit). However they are present in the estimated functional.; -ampInit - aray of initial values of 2D peaks amplitudes; -fixAmp - aray of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; -ampInitX1 - aray of initial values of amplitudes of 1D ridges in x direction; -fixAmpX1 - aray of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional; -ampInitY1 - aray of initial values of amplitudes of 1D ridges in y direction; -fixAmpY1 - aray of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional. void SetBackgroundParameters(Double_t a0Init, Bool_t fixA0, Double_t axInit, Bool_t fixAx, Double_t ayInit, Bool_t fixAy). SETTER FUNCTION. This function sets the following fitting parameters of background:; -a0Init - initial value of a0 parameter (backgroud is estimated as a0+ax*x+ay*y); -fixA0 - logical value of a0 parameter, which allows to fix the parameter (not ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Fit.html:65477,log,logical,65477,root/html528/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Fit.html,6,['log'],['logical']
Testability,. Track. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TEST; » Track. class Track: public TObject. Event and Track classes. The Event class is a naive/simple example of an event structure.; public:; char fType[20];; char *fEventName; //run+event number in character format; Int_t fNtrack;; Int_t fNseg;; Int_t fNvertex;; UInt_t fFlag;; Double32_t fTemperature;; Int_t fMeasures[10];; Double32_t fMatrix[4][4];; Double32_t *fClosestDistance; //[fNvertex] indexed array!; EventHeader fEvtHdr;; TClonesArray *fTracks;; TRefArray *fHighPt; //array of High Pt tracks only; TRefArray *fMuons; //array of Muon tracks only; TRef fLastTrack; //pointer to last track; TRef fHistoWeb; //EXEC:GetHistoWeb reference to an histogram in a TWebFile; TH1F *fH;; TBits fTriggerBits; //Bits triggered by this event. The EventHeader class has 3 data members (integers):; public:; Int_t fEvtNum;; Int_t fRun;; Int_t fDate;. The Event data member fTracks is a pointer to a TClonesArray.; It is an array of a variable number of tracks per event.; Each element of the array is an object of class Track with the members:; private:; Float_t fPx; //X component of the momentum; Float_t fPy; //Y component of the momentum; Float_t fPz; //Z component of the momentum; Float_t fRandom; //A random track quantity; Float_t fMass2; //The mass square of this particle; Float_t fBx; //X intercept at the vertex; Float_t fBy; //Y intercept at the vertex; Float_t fMeanCharge; //Mean charge deposition of all hits of this track; Float_t fXfirst; //X coordinate of the first point; Float_t fXlast; //X coordinate of the last point; Float_t fYfirst; //Y coordinate of the first point; Float_t fYlast; //Y coordinate of the last point; Float_t fZfirst; //Z coordinate of the first point; Float_t fZlast; //Z coordinate of the last point; Double32_t fCharge; //Charge of th,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/Track.html:224,TEST,TEST,224,root/html528/Track.html,https://root.cern,https://root.cern/root/html528/Track.html,1,['TEST'],['TEST']
Testability,". TutorialSelector.C | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop TutorialSelector.C. // This class is derived from the ROOT class TSelector to demonstrate; // the use of PROOF with the R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/tutorialselectorc.html:716,test,tests,716,d/tutorialselectorc.html,https://root.cern,https://root.cern/d/tutorialselectorc.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Tutorials | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Tutorials. ROOT offers a rich set of code examples that allow you to see ROOT's building blocks ""in action"", as part of more complex programs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/tutorials.html:707,test,tests,707,d/tutorials.html,https://root.cern,https://root.cern/d/tutorials.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Types::ETreeType ; tt = Types::kMaxTreeType . ). add a signal tree to the dataset to be used as input ; Definition at line 132 of file DataInputHandler.cxx. ◆ AddSignalTree() [2/2]. void TMVA::DataInputHandler::AddSignalTree ; (; TTree * ; tr, . Double_t ; weight = 1.0, . Types::ETreeType ; tt = Types::kMaxTreeType . ). add a signal tree to the dataset to be used as input ; Definition at line 116 of file DataInputHandler.cxx. ◆ AddTree() [1/2]. void TMVA::DataInputHandler::AddTree ; (; const TString & ; tr, . const TString & ; className, . Double_t ; weight = 1.0, . const TCut & ; cut = """", . Types::ETreeType ; tt = Types::kMaxTreeType . ). add a className tree to the dataset to be used as input ; Definition at line 68 of file DataInputHandler.cxx. ◆ AddTree() [2/2]. void TMVA::DataInputHandler::AddTree ; (; TTree * ; tree, . const TString & ; className, . Double_t ; weight = 1.0, . const TCut & ; cut = """", . Types::ETreeType ; tt = Types::kMaxTreeType . ). add tree of className events for tt (Training;Testing..) type as input .. ; Definition at line 82 of file DataInputHandler.cxx. ◆ BackgroundTreeInfo(). const TreeInfo & TMVA::DataInputHandler::BackgroundTreeInfo ; (; Int_t ; i); const. inline . Definition at line 109 of file DataInputHandler.h. ◆ Bbegin(). std::vector< TreeInfo >::const_iterator TMVA::DataInputHandler::Bbegin ; (; ); const. inline . Definition at line 115 of file DataInputHandler.h. ◆ begin(). std::vector< TreeInfo >::const_iterator TMVA::DataInputHandler::begin ; (; const TString & ; className); const. inline . Definition at line 111 of file DataInputHandler.h. ◆ Bend(). std::vector< TreeInfo >::const_iterator TMVA::DataInputHandler::Bend ; (; ); const. inline . Definition at line 116 of file DataInputHandler.h. ◆ Class(). static TClass * TMVA::DataInputHandler::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::DataInputHandler::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataInputHandler.html:15458,Test,Testing,15458,doc/master/classTMVA_1_1DataInputHandler.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataInputHandler.html,1,['Test'],['Testing']
Testability,". Using TTree::Draw() to access a TTree | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Using TTree::Draw() to access a TTree. Now close the browser, quit and restart",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/using-ttreedraw-access-ttree.html:735,test,tests,735,d/using-ttreedraw-access-ttree.html,https://root.cern,https://root.cern/d/using-ttreedraw-access-ttree.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Using a Macro to Read a TTree | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Using a Macro to Read a TTree. Why using a macro?; As real analyses don't fit into sim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/using-macro-read-ttree.html:727,test,tests,727,d/using-macro-read-ttree.html,https://root.cern,https://root.cern/d/using-macro-read-ttree.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". Using a TSelector with PROOF | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Using a TSelector with PROOF. For people having a multi (e.g. dual) core computer, it i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/using-tselector-proof.html:726,test,tests,726,d/using-tselector-proof.html,https://root.cern,https://root.cern/d/using-tselector-proof.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". We book a Boosted Decision Tree method (BDT); ; ; # Boosted Decision Trees; if useTMVABDT:; factory.BookMethod(; loader,; TMVA.Types.kBDT,; ""BDT"",; V=False,; NTrees=400,; MinNodeSize=""2.5%"",; MaxDepth=2,; BoostType=""AdaBoost"",; AdaBoostBeta=0.5,; UseBaggedBoost=True,; BaggedSampleFraction=0.5,; SeparationType=""GiniIndex"",; nCuts=20,; ); ; ; #### Booking Deep Neural Network; ; # Here we book the DNN of TMVA. See the example TMVA_Higgs_Classification.C for a detailed description of the; # options; ; if useTMVADNN:; layoutString = ROOT.TString(; ""DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,DENSE|1|LINEAR""; ); ; # Training strategies; # one can catenate several training strings with different parameters (e.g. learning rates or regularizations; # parameters) The training string must be concatenated with the `|` delimiter; trainingString1 = ROOT.TString(; ""LearningRate=1e-3,Momentum=0.9,Repetitions=1,""; ""ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,""; ""WeightDecay=1e-4,Regularization=None,""; ""Optimizer=ADAM,DropConfig=0.0+0.0+0.0+0.""; ) # + ""|"" + trainingString2 + ...; trainingString1 += "",MaxEpochs="" + str(max_epochs); ; # Build now the full DNN Option string; dnnMethodName = ""TMVA_DNN_CPU""; ; # use GPU if available; dnnOptions = ""CPU""; if hasGPU :; dnnOptions = ""GPU""; dnnMethodName = ""TMVA_DNN_GPU""; ; factory.BookMethod(; loader,; TMVA.Types.kDL,; dnnMethodName,; H=False,; V=True,; ErrorStrategy=""CROSSENTROPY"",; VarTransform=None,; WeightInitialization=""XAVIER"",; Layout=layoutString,; TrainingStrategy=trainingString1,; Architecture=dnnOptions; ); ; ; ### Book Convolutional Neural Network in TMVA; ; # For building a CNN one needs to define; ; # - Input Layout : number of channels (in this case = 1) | image height | image width; # - Batch Layout : batch size | number of channels | image size = (height*width); ; # Then one add Convolutional layers and MaxPool layers.; ; # - For Convolutional layer the option string has to be:; # - ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8py.html:10309,Test,TestRepetitions,10309,doc/master/TMVA__CNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8py.html,1,['Test'],['TestRepetitions']
Testability,". We now take as a new model ; . We thus want to; minimize; . (7). where ; is a vector of the; dependent quantity in the sample. Differentiation with respect to; gives, using (6),; . (8). or; . (9). Let be the sum of squares of residuals when taking functions; into account. Then; . (10). Using (9), we see that; .  ;  .  ;  . (11). So for each new function included in the model, we get a; reduction of the sum of squares of residuals of ; ,; where ; is given by (4) and by; (9). Thus, using the Gram-Schmidt orthogonalisation, we; can decide if we want to include this function in the final model,; before the matrix inversion.; . Function Selection Based on Residual; . Supposing that steps of the procedure have been performed, the; problem now is to consider the ; function.; ; The sum of squares of residuals can be written as; . (12). where the relation (9) have been taken into account. The; contribution of the ; function to the reduction of S, is; given by; . (13). Two test are now applied to decide whether this . function is to be included in the final expression, or not.; . Test 1; . Denoting by the subspace spanned by; ; the function ; is; by construction (see (4)) the projection of the function; onto the direction perpendicular to . Now, if the; length of ; (given by ; ); is very small compared to the length of ; this new; function can not contribute much to the reduction of the sum of; squares of residuals. The test consists then in calculating the angle; between the two vectors ; and . (see also figure 1) and requiring that it's; greater then a threshold value which the user must set; (TMultiDimFit::SetMinAngle).; . Figure 1:; (a) Angle between ; and; ; , (b) angle between ; and; . ; Test 2; . Let ; be the data vector to be fitted. As illustrated in; figure 1, the ; function . will contribute significantly to the reduction of , if the angle; ; between ; and ; is smaller than; an upper limit , defined by the user; (TMultiDimFit::SetMaxAngle); ; However, the method ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiDimFit.html:6915,test,test,6915,root/html534/TMultiDimFit.html,https://root.cern,https://root.cern/root/html534/TMultiDimFit.html,3,['test'],['test']
Testability,". Workshops | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » News Workshops. Here the list with ROOT workshops:. ROOT 2018 ; ROOT 2015 ; ROOT 2013 (slides); ROOT 2007 (slides); ROOT 2005 (slides); ROOT 2007; ROOT 200",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/workshops.html:707,test,tests,707,d/workshops.html,https://root.cern,https://root.cern/d/workshops.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,". XMLNodePointer_t TGDMLWrite::StartAssemblyN ; (; const char * ; name). private . Creates ""assembly"" node for GDML. ; Definition at line 2098 of file TGDMLWrite.cxx. ◆ StartGDMLWriting(). static void TGDMLWrite::StartGDMLWriting ; (; TGeoManager * ; geomanager, . const char * ; filename, . TString ; option . ). inlinestatic . Definition at line 61 of file TGDMLWrite.h. ◆ StartVolumeN(). XMLNodePointer_t TGDMLWrite::StartVolumeN ; (; const char * ; name, . const char * ; solid, . const char * ; material . ). private . Creates ""volume"" node for GDML. ; Definition at line 2078 of file TGDMLWrite.cxx. ◆ UnsetTemporaryBits(). void TGDMLWrite::UnsetTemporaryBits ; (; TGeoManager * ; geoMng). private . Unsetting bits that were changed in gGeoManager during export so that export can be run more times with the same instance of gGeoManager. ; Definition at line 2498 of file TGDMLWrite.cxx. ◆ WriteGDMLfile() [1/5]. void TGDMLWrite::WriteGDMLfile ; (; TGeoManager * ; geomanager, . const char * ; filename = ""test.gdml"", . TString ; option = """" . ). Definition at line 264 of file TGDMLWrite.cxx. ◆ WriteGDMLfile() [2/5]. void TGDMLWrite::WriteGDMLfile ; (; TGeoManager * ; geomanager, . TGeoNode * ; top_node, . const char * ; filename = ""test.gdml"", . TString ; option = """" . ). Definition at line 279 of file TGDMLWrite.cxx. ◆ WriteGDMLfile() [3/5]. void TGDMLWrite::WriteGDMLfile ; (; TGeoManager * ; geomanager, . TGeoNode * ; top_node, . TList * ; materialsLst, . const char * ; filename, . TString ; option . ). private . Wrapper of all exporting methods Creates blank GDML file and fills it with gGeoManager structure converted to GDML structure of xml nodes. ; Definition at line 307 of file TGDMLWrite.cxx. ◆ WriteGDMLfile() [4/5]. void TGDMLWrite::WriteGDMLfile ; (; TGeoManager * ; geomanager, . TGeoVolume * ; top_vol, . const char * ; filename = ""test.gdml"", . TString ; option = """" . ). Definition at line 2516 of file TGDMLWrite.cxx. ◆ WriteGDMLfile() [5/5]. void TGDMLWrite::WriteG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDMLWrite.html:43587,test,test,43587,doc/master/classTGDMLWrite.html,https://root.cern,https://root.cern/doc/master/classTGDMLWrite.html,1,['test'],['test']
Testability,". __device__ AFloat TMVA::DNN::Cuda::AtomicAdd ; (; AFloat * ; address, . AFloat ; val . ). ◆ AtomicAdd() [2/3]. template<> . __device__ double TMVA::DNN::Cuda::AtomicAdd ; (; double * ; address, . double ; val . ). Definition at line 34 of file Kernels.cuh. ◆ AtomicAdd() [3/3]. template<> . __device__ float TMVA::DNN::Cuda::AtomicAdd ; (; float * ; address, . float ; val . ). Definition at line 48 of file Kernels.cuh. ◆ calculateDimension(). __device__ int TMVA::DNN::Cuda::calculateDimension ; (; int ; imgDim, . int ; fltDim, . int ; padding, . int ; stride . ). Calculate the dimension of an output volume, given the sliding parameters and the input shape. ; Parameters. [in]imgDimThe size of the input tensor in a spatial dimension. ; [in]fltDimThe size of the sliding filter in the same dimension. ; [in]paddingNumber of zeroes to pad the input with. ; [in]strideNumber of pixels the kernel is sliding in each iteration. . ReturnsThe output dimension.; Note that no checks are performed to assert validity of the input parameters. We are allowed to assume them valid because those checks have already been performed prior to the invocation of the kernel. ; Definition at line 226 of file Kernels.cuh. ◆ ConstAdd(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::ConstAdd ; (; AFloat * ; A, . AFloat ; beta, . int ; m, . int ; n . ). Definition at line 335 of file Kernels.cuh. ◆ ConstMult(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::ConstMult ; (; AFloat * ; A, . AFloat ; beta, . int ; m, . int ; n . ). Definition at line 349 of file Kernels.cuh. ◆ CrossEntropy(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::CrossEntropy ; (; AFloat * ; result, . const AFloat * ; Y, . const AFloat * ; output, . const AFloat * ; weights, . int ; m, . int ; n . ). Definition at line 800 of file Kernels.cuh. ◆ CrossEntropyGradients(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::CrossEntropyGradients ; (; AFloat * ; dY, . const AFl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html:10692,assert,assert,10692,doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html,1,['assert'],['assert']
Testability,". const Ranking* CreateRanking(); create ranking. Bool_t MonitorBoost(TMVA::MethodBoost* ); perfrom extra actions during the boosting at different stages. {return kFALSE;}. void AddWeightsXMLTo(void* parent) const; the actual ""weights"". void ReadWeightsFromXML(void* wghtnode). void ReadWeightsFromStream(istream& ). void ReadWeightsFromStream(TFile& ); {}. const TString& GetJobName() const; ---------- public accessors -----------------------------------------------; classifier naming (a lot of names ... aren't they ;-). { return fJobName; }. const TString& GetMethodName() const; { return fMethodName; }. TString GetMethodTypeName() const; { return Types::Instance().GetMethodName(fMethodType); }. Types::EMVA GetMethodType() const; { return fMethodType; }. const char* GetName() const; { return fMethodName.Data(); }. const TString& GetTestvarName() const; { return fTestvar; }. const TString GetProbaName() const; { return fTestvar + ""_Proba""; }. void SetTestvarName(const TString& v = """"); build classifier name in Test tree; MVA prefix (e.g., ""TMVA_""). { fTestvar = (v=="""") ? (""MVA_"" + GetMethodName()) : v; }. UInt_t GetNvar() const; number of input variable used by classifier. { return DataInfo().GetNVariables(); }. UInt_t GetNVariables() const; { return DataInfo().GetNVariables(); }. UInt_t GetNTargets() const; { return DataInfo().GetNTargets(); }. const TString& GetInputVar(Int_t i) const; internal names and expressions of input variables. { return DataInfo().GetVariableInfo(i).GetInternalName(); }. const TString& GetInputLabel(Int_t i) const; { return DataInfo().GetVariableInfo(i).GetLabel(); }. const TString& GetInputTitle(Int_t i) const; { return DataInfo().GetVariableInfo(i).GetTitle(); }. Double_t GetMean(Int_t ivar) const; normalisation and limit accessors. { return GetTransformationHandler().GetMean(ivar); }. Double_t GetRMS(Int_t ivar) const; { return GetTransformationHandler().GetRMS(ivar); }. Double_t GetXmin(Int_t ivar) const; { return GetTransformationHandler(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodBase.html:30734,Test,Test,30734,root/html528/TMVA__MethodBase.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodBase.html,3,['Test'],['Test']
Testability,". const wchar_t * ; text, . ETextMode ; mode . ). overridevirtual . Draw text using TrueType fonts. ; If TrueType fonts are not available the text is drawn with TGX11::DrawText. ; Reimplemented from TGX11.; Definition at line 386 of file TGX11TTF.cxx. ◆ GetBackground(). RXImage * TGX11TTF::GetBackground ; (; Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). private . Get the background of the current window in an XImage. ; Definition at line 404 of file TGX11TTF.cxx. ◆ Init(). Bool_t TGX11TTF::Init ; (; void * ; display). overridevirtual . Initialize X11 system. Returns kFALSE in case of failure. ; Reimplemented from TGX11.; Definition at line 184 of file TGX11TTF.cxx. ◆ IsA(). TClass * TGX11TTF::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGX11.; Definition at line 74 of file TGX11TTF.h. ◆ IsVisible(). Bool_t TGX11TTF::IsVisible ; (; Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). private . Test if there is really something to render. ; Definition at line 430 of file TGX11TTF.cxx. ◆ RenderString(). void TGX11TTF::RenderString ; (; Int_t ; x, . Int_t ; y, . ETextMode ; mode . ). private . Perform the string rendering in the pad. ; LayoutGlyphs should have been called before. ; Definition at line 458 of file TGX11TTF.cxx. ◆ SetTextFont() [1/2]. Int_t TGX11TTF::SetTextFont ; (; char * ; fontname, . ETextSetMode ; mode . ). overridevirtual . Set text font to specified name. ; mode : loading flag mode=0 : search if the font exist (kCheck) mode=1 : search the font and load it if it exists (kLoad) font : font name; Set text font to specified name. This function returns 0 if the specified font is found, 1 if not. ; Reimplemented from TGX11.; Definition at line 567 of file TGX11TTF.cxx. ◆ SetTextFont() [2/2]. void TGX11TTF::SetTextFont ; (; Font_t ; fontnumber). overridevirtual . Set specified font. ; Reimplemented from TGX11.; Definition at line 547 of file TGX11TTF.cxx. ◆ SetTextSize(). void TGX11TTF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGX11TTF.html:54451,Test,Test,54451,doc/master/classTGX11TTF.html,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html,1,['Test'],['Test']
Testability,". double ROOT::Math::Random< Engine >::Gamma ; (; double ; a, . double ; b . ). inline . Gamma distribution. ; Definition at line 116 of file Random.h. ◆ Gaus(). template<class Engine > . double ROOT::Math::Random< Engine >::Gaus ; (; double ; mean = 0, . double ; sigma = 1 . ). inline . Definition at line 111 of file Random.h. ◆ Integer(). template<class Engine > . uint64_t ROOT::Math::Random< Engine >::Integer ; (; ). inline . Definition at line 94 of file Random.h. ◆ Landau(). template<class Engine > . double ROOT::Math::Random< Engine >::Landau ; (; double ; m = 0, . double ; s = 1 . ). inline . Landau distribution. ; Definition at line 161 of file Random.h. ◆ Logistic(). template<class Engine > . double ROOT::Math::Random< Engine >::Logistic ; (; double ; a). inline . Logistic distribution. ; Definition at line 141 of file Random.h. ◆ LogNormal(). template<class Engine > . double ROOT::Math::Random< Engine >::LogNormal ; (; double ; zeta, . double ; sigma . ). inline . Log-normal distribution. ; Definition at line 126 of file Random.h. ◆ MaxInt(). template<class Engine > . static uint64_t ROOT::Math::Random< Engine >::MaxInt ; (; ). inlinestatic . Definition at line 98 of file Random.h. ◆ Multinomial(). template<class Engine > . std::vector< unsigned int > ROOT::Math::Random< Engine >::Multinomial ; (; unsigned int ; ntot, . const std::vector< double > & ; p . ). inline . Multinomial distribution. ; Definition at line 201 of file Random.h. ◆ NegativeBinomial(). template<class Engine > . unsigned int ROOT::Math::Random< Engine >::NegativeBinomial ; (; double ; n, . double ; prob . ). inline . Negative Binomial distribution First parameter is n, second is probability To be consistent with Random::Binomial. ; Definition at line 196 of file Random.h. ◆ operator()(). template<class Engine > . double ROOT::Math::Random< Engine >::operator() ; (; ). inline . Definition at line 90 of file Random.h. ◆ Pareto(). template<class Engine > . double ROOT::Math::Random< Engine ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Random.html:6609,Log,Log-normal,6609,doc/master/classROOT_1_1Math_1_1Random.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Random.html,1,['Log'],['Log-normal']
Testability,". double ; alpha, . double ; theta, . double ; x0 = 0 . ). inline . Probability density function of the gamma distribution. . \[ p(x) = {1 \over \Gamma(\alpha) \theta^{\alpha}} x^{\alpha-1} e^{-x/\theta} \]. for x>0. For detailed description see Mathworld. ; Definition at line 363 of file PdfFuncMathCore.h. ◆ gaussian_pdf(). double ROOT::Math::gaussian_pdf ; (; double ; x, . double ; sigma = 1, . double ; x0 = 0 . ). inline . Probability density function of the normal (Gaussian) distribution. . \[ p(x) = {1 \over \sqrt{2 \pi \sigma^2}} e^{-x^2 / 2\sigma^2} \]. For detailed description see Mathworld. It can also be evaluated using normal_pdf which will call the same implementation. ; Definition at line 402 of file PdfFuncMathCore.h. ◆ landau_pdf(). double ROOT::Math::landau_pdf ; (; double ; x, . double ; xi = 1, . double ; x0 = 0 . ). Probability density function of the Landau distribution: . \[ p(x) = \frac{1}{\xi} \phi (\lambda) \]. with ; \[ \phi(\lambda) = \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} e^{\lambda s + s \log{s}} ds\]. where \(\lambda = (x-x_0)/\xi\). For a detailed description see K.S. Kölbig and B. Schorr, A program package for the Landau distribution, Computer Phys. Comm. 31 (1984) 97-111 [Erratum-ibid. 178 (2008) 972]. The same algorithms as in CERNLIB (DENLAN) is used; Parameters. xThe argument \(x\) ; xiThe width parameter \(\xi\) ; x0The location parameter \(x_0\) . Definition at line 21 of file PdfFuncMathCore.cxx. ◆ lognormal_pdf(). double ROOT::Math::lognormal_pdf ; (; double ; x, . double ; m, . double ; s, . double ; x0 = 0 . ). inline . Probability density function of the lognormal distribution. . \[ p(x) = {1 \over x \sqrt{2 \pi s^2} } e^{-(\ln{x} - m)^2/2 s^2} \]. for x>0. For detailed description see Mathworld. Parameters. xx variable ; mM = 0 for lognormal ; sscale parameter (not the sigma of the distribution which is not even defined) ; x0location parameter, corresponds approximately to the most probable value. For x0 = 0, sigma =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__PdfFunc.html:9333,log,log,9333,doc/master/group__PdfFunc.html,https://root.cern,https://root.cern/doc/master/group__PdfFunc.html,1,['log'],['log']
Testability,". get the mode (vector of coordinate positions of the maxima of the distribution) If a mode has not defined return a NULL pointer ; Definition at line 136 of file TUnuranMultiContDist.h. ◆ GetUpperDomain(). const double * TUnuranMultiContDist::GetUpperDomain ; (; ); const. inline . get the distribution upper domain values. ; Return a null pointer if domain is not defined ; Definition at line 126 of file TUnuranMultiContDist.h. ◆ Gradient(). void TUnuranMultiContDist::Gradient ; (; const double * ; x, . double * ; grad . ); const. evaluate the gradient vector of the Pdf. ; Used by UnuRan ; Definition at line 82 of file TUnuranMultiContDist.cxx. ◆ IsA(). TClass * TUnuranMultiContDist::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TUnuranBaseDist.; Definition at line 176 of file TUnuranMultiContDist.h. ◆ IsLogPdf(). bool TUnuranMultiContDist::IsLogPdf ; (; ); const. inline . flag to control if given function represent the log of a pdf ; Definition at line 145 of file TUnuranMultiContDist.h. ◆ NDim(). unsigned int TUnuranMultiContDist::NDim ; (; ); const. inline . get number of dimension of the distribution ; Definition at line 92 of file TUnuranMultiContDist.h. ◆ operator=(). TUnuranMultiContDist & TUnuranMultiContDist::operator= ; (; const TUnuranMultiContDist & ; rhs). Assignment operator. ; Definition at line 51 of file TUnuranMultiContDist.cxx. ◆ Pdf(). double TUnuranMultiContDist::Pdf ; (; const double * ; x); const. evaluate the probability density function, used by UnuRan ; Definition at line 75 of file TUnuranMultiContDist.cxx. ◆ SetDomain(). void TUnuranMultiContDist::SetDomain ; (; const double * ; xmin, . const double * ; xmax . ). inline . set the domain of the distribution giving an array of minimum and maximum values By default otherwise the domain is undefined, i.e. ; is [-inf,+inf] To remove the domain do a SetDomain(0,0). There is no possibility to have a domain defined in only one coordinate. U",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnuranMultiContDist.html:8212,log,log,8212,doc/master/classTUnuranMultiContDist.html,https://root.cern,https://root.cern/doc/master/classTUnuranMultiContDist.html,1,['log'],['log']
Testability,". h->SetStats(0). and activate it again with:. h->SetStats(1). Fit Statistics; The type of information about fit parameters printed in the histogram statistics; box can be selected via the parameter mode. The parameter mode can be; = pcev (default = 0111). p = 1; print Probability; c = 1; print Chisquare/Number of degrees of freedom; e = 1; print errors (if e=1, v must be 1); v = 1; print name/values of parameters. Example:. gStyle->SetOptFit(1011);. print fit probability, parameter names/values and errors. When ""v"" = 1 is specified, only the non-fixed parameters are; shown.; When ""v"" = 2 all parameters are shown. Note: gStyle->SetOptFit(1) means ""default value"", so it is equivalent; to gStyle->SetOptFit(111); Statistics box editing; The following example show how to remove and add a line in a statistics box. Picture; Source. TCanvas *statsEditing() {; // This example shows:; // - how to remove a stat element from the stat box; // - how to add a new one; //n cte and plot a test histogram with stats; TCanvas *se = new TCanvas;; TH1F *h = new TH1F(""h"",""test"",100,-3,3);; h->FillRandom(""gaus"",3000);; gStyle->SetOptStat();; h->Draw();; se->Update();. TPaveStats *ps = (TPaveStats*)se->GetPrimitive(""stats"");; ps->SetName(""mystats"");; TList *list = ps->GetListOfLines();. ; TText *tconst = ps->GetLineWith(""RMS"");; list->Remove(tconst);. ; ""="" is a control character; TLatex *myt = new TLatex(0,0,""Test = 10"");; myt ->SetTextFont(42);; myt ->SetTextSize(0.04);; myt ->SetTextColor(kRed);; list->Add(myt);. ; h->SetStats(0);. se->Modified();; return se;; } . Function Members (Methods); public:. TPaveStats(); TPaveStats(const TPaveStats&); TPaveStats(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Option_t* option = ""br""); virtual~TPaveStats(); voidTObject::AbstractMethod(const char* method) const; virtual TBox*AddBox(Double_t, Double_t, Double_t, Double_t); virtual TLine*AddLine(Double_t, Double_t, Double_t, Double_t); virtual TText*TPaveText::AddText(const char* label); virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPaveStats.html:5183,test,test,5183,root/html534/TPaveStats.html,https://root.cern,https://root.cern/root/html534/TPaveStats.html,2,['test'],['test']
Testability,". illegal for a TH2 ; Reimplemented from TH1.; Reimplemented in TH2Poly.; Definition at line 1440 of file TH2.cxx. ◆ IsA(). TClass * TH2::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TH1.; Reimplemented in TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH2Poly, TProfile2D, and TProfile2Poly.; Definition at line 133 of file TH2.h. ◆ KolmogorovTest(). Double_t TH2::KolmogorovTest ; (; const TH1 * ; h2, . Option_t * ; option = """" . ); const. overridevirtual . Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ; Default: Ignore under- and overflow bins in comparison; option is a character string to specify options; ""U"" include Underflows in test; ""O"" include Overflows; ""N"" include comparison of normalizations; ""D"" Put out a line of ""Debug"" printout; ""M"" Return the Maximum Kolmogorov distance instead of prob. The returned function value is the probability of test (much less than one means NOT compatible); The KS test uses the distance between the pseudo-CDF's obtained from the histogram. Since in 2D the order for generating the pseudo-CDF is arbitrary, two pairs of pseudo-CDF are used, one starting from the x axis the other from the y axis and the maximum distance is the average of the two maximum distances obtained.; Code adapted by Rene Brun from original HBOOK routine HDIFF ; Reimplemented from TH1.; Definition at line 1470 of file TH2.cxx. ◆ operator=(). TH2 & TH2::operator= ; (; const TH2 & ; ). privatedelete . ◆ ProfileX(). TProfile * TH2::ProfileX ; (; const char * ; name = ""_pfx"", . Int_t ; firstybin = 1, . Int_t ; lastybin = -1, . Option_t * ; option = """" . ); const. Project a 2-D histogram into a profile histogram along X. ; The projection is made from the channels along the Y axis ranging from firstybin to lastybin included. By default, bins 1 to ny are included When all bins are included, the number of entries in the projection is set to the number of entries of the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2.html:91970,test,test,91970,doc/master/classTH2.html,https://root.cern,https://root.cern/doc/master/classTH2.html,2,['test'],['test']
Testability,". inline . Definition at line 582 of file TSessionViewer.h. ◆ GetSessions(). TList * TSessionViewer::GetSessions ; (; ); const. inline . Definition at line 580 of file TSessionViewer.h. ◆ GetStatusBar(). TGStatusBar * TSessionViewer::GetStatusBar ; (; ); const. inline . Definition at line 592 of file TSessionViewer.h. ◆ HandleTimer(). Bool_t TSessionViewer::HandleTimer ; (; TTimer * ; ). overridevirtual . Handle animation timer. ; Reimplemented from TGWindow.; Definition at line 5011 of file TSessionViewer.cxx. ◆ IsA(). TClass * TSessionViewer::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGMainFrame.; Definition at line 631 of file TSessionViewer.h. ◆ IsAutoSave(). Bool_t TSessionViewer::IsAutoSave ; (; ); const. inline . Definition at line 605 of file TSessionViewer.h. ◆ IsBusy(). Bool_t TSessionViewer::IsBusy ; (; ); const. inline . Definition at line 604 of file TSessionViewer.h. ◆ LogMessage(). void TSessionViewer::LogMessage ; (; const char * ; msg, . Bool_t ; all . ). Load/append a log msg in the log frame. ; Definition at line 5051 of file TSessionViewer.cxx. ◆ MyHandleMenu(). void TSessionViewer::MyHandleMenu ; (; Int_t ; id). Handle session viewer custom popup menus. ; Definition at line 5500 of file TSessionViewer.cxx. ◆ OnCascadeMenu(). void TSessionViewer::OnCascadeMenu ; (; ). Handle feedback histograms configuration menu. ; Definition at line 5564 of file TSessionViewer.cxx. ◆ OnListTreeClicked(). void TSessionViewer::OnListTreeClicked ; (; TGListTreeItem * ; entry, . Int_t ; btn, . Int_t ; x, . Int_t ; y . ). Handle mouse clicks in list tree. ; Definition at line 4635 of file TSessionViewer.cxx. ◆ OnListTreeDoubleClicked(). void TSessionViewer::OnListTreeDoubleClicked ; (; TGListTreeItem * ; entry, . Int_t ; btn . ). Handle mouse double clicks in list tree (connect to server). ; Definition at line 4895 of file TSessionViewer.cxx. ◆ ProcessMessage(). Bool_t TSessionViewer::ProcessMessage ; (; L",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionViewer.html:46394,Log,LogMessage,46394,doc/master/classTSessionViewer.html,https://root.cern,https://root.cern/doc/master/classTSessionViewer.html,1,['Log'],['LogMessage']
Testability,". inline . Definition at line 74 of file DataSet.h. ◆ GetTree(). TTree * TMVA::DataSet::GetTree ; (; Types::ETreeType ; type). create the test/trainings tree with all the variables, the weights, the classes, the targets, the spectators, the MVA outputs ; Definition at line 609 of file DataSet.cxx. ◆ HasNegativeEventWeights(). Bool_t TMVA::DataSet::HasNegativeEventWeights ; (; ); const. inline . Definition at line 101 of file DataSet.h. ◆ IncrementNClassEvents(). void TMVA::DataSet::IncrementNClassEvents ; (; Int_t ; type, . UInt_t ; classNumber . ). Definition at line 151 of file DataSet.cxx. ◆ InitSampling(). void TMVA::DataSet::InitSampling ; (; Float_t ; fraction, . Float_t ; weight, . UInt_t ; seed = 0 . ). initialize random or importance sampling ; Definition at line 459 of file DataSet.cxx. ◆ IsA(). virtual TClass * TMVA::DataSet::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 175 of file DataSet.h. ◆ Log(). MsgLogger & TMVA::DataSet::Log ; (; ); const. inlineprivate . Definition at line 164 of file DataSet.h. ◆ MoveTrainingBlock(). void TMVA::DataSet::MoveTrainingBlock ; (; Int_t ; blockInd, . Types::ETreeType ; dest, . Bool_t ; applyChanges = kTRUE . ). move training block ; Definition at line 415 of file DataSet.cxx. ◆ SetCurrentEvent(). void TMVA::DataSet::SetCurrentEvent ; (; Long64_t ; ievt); const. inline . Definition at line 88 of file DataSet.h. ◆ SetCurrentType(). void TMVA::DataSet::SetCurrentType ; (; Types::ETreeType ; type); const. inline . Definition at line 89 of file DataSet.h. ◆ SetEventCollection(). void TMVA::DataSet::SetEventCollection ; (; std::vector< Event * > * ; events, . Types::ETreeType ; type, . Bool_t ; deleteEvents = true . ). Sets the event collection (by DataSetFactory) ; Definition at line 250 of file DataSet.cxx. ◆ SetVerbose(). void TMVA::DataSet::SetVerbose ; (; Bool_t ; ). inline . Definition at line 112 of file DataSet.h. ◆ Streamer(). virtual vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataSet.html:23566,Log,Log,23566,doc/master/classTMVA_1_1DataSet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSet.html,1,['Log'],['Log']
Testability,". master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; GCValues_t Struct Reference. ; Graphics context structure. ; Definition at line 224 of file GuiTypes.h. Public Member Functions;  GCValues_t ();  . Public Attributes; Int_t fArcMode;  kArcChord, kArcPieSlice ;  ; ULong_t fBackground;  background pixel ;  ; Int_t fCapStyle;  kCapNotLast, kCapButt, kCapRound, kCapProjecting ;  ; Pixmap_t fClipMask;  bitmap clipping; other calls for rects ;  ; Int_t fClipXOrigin;  origin for clipping ;  ; Int_t fClipYOrigin;  ; Char_t fDashes [8];  dash pattern list (dash length per byte) ;  ; Int_t fDashLen;  number of dashes in fDashes ;  ; Int_t fDashOffset;  patterned/dashed line information ;  ; Int_t fFillRule;  kEvenOddRule, kWindingRule ;  ; Int_t fFillStyle;  kFillSolid, kFillTiled, kFillStippled, kFillOpaeueStippled ;  ; FontH_t fFont;  default text font for text operations ;  ; ULong_t fForeground;  foreground pixel ;  ; EGraphicsFunction fFunction;  logical operation ;  ; Bool_t fGraphicsExposures;  boolean, should exposures be generated ;  ; Int_t fJoinStyle;  kJoinMiter, kJoinRound, kJoinBevel ;  ; Int_t fLineStyle;  kLineSolid, kLineOnOffDash, kLineDoubleDash ;  ; Int_t fLineWidth;  line width ;  ; Mask_t fMask;  bit mask specifying which fields are valid ;  ; ULong_t fPlaneMask;  plane mask ;  ; Pixmap_t fStipple;  stipple 1 plane pixmap for stippling ;  ; Int_t fSubwindowMode;  kClipByChildren, kIncludeInferiors ;  ; Pixmap_t fTile;  tile pixmap for tiling operations ;  ; Int_t fTsXOrigin;  offset for tile or stipple operations ;  ; Int_t fTsYOrigin;  . #include <GuiTypes.h>; Constructor & Destructor Documentation. ◆ GCValues_t(). GCValues_t::GCValues_t ; (; ). inline . Definition at line 253 of file GuiTypes.h. Member Data Documentation. ◆ fArcMode. Int_t GCValues_t::fArcMode. kArcChord, kArcPieSlice ; Definition at line 237 of file GuiTypes.h. ◆ fBackgroun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structGCValues__t.html:1116,log,logical,1116,doc/master/structGCValues__t.html,https://root.cern,https://root.cern/doc/master/structGCValues__t.html,1,['log'],['logical']
Testability,". overridevirtual . Geometry checking method (see: TGeoManager::CheckGeometry()) ; Implements TVirtualGeoPainter.; Definition at line 218 of file TGeoPainter.cxx. ◆ CheckOverlaps(). void TGeoPainter::CheckOverlaps ; (; const TGeoVolume * ; vol, . Double_t ; ovlp = 0.1, . Option_t * ; option = """" . ); const. overridevirtual . Check overlaps for the top volume of the geometry, within a limit OVLP. ; Implements TVirtualGeoPainter.; Definition at line 234 of file TGeoPainter.cxx. ◆ CheckPoint(). void TGeoPainter::CheckPoint ; (; Double_t ; x = 0, . Double_t ; y = 0, . Double_t ; z = 0, . Option_t * ; option = """", . Double_t ; safety = 0. . ). overridevirtual . Check current point in the geometry. ; Implements TVirtualGeoPainter.; Definition at line 242 of file TGeoPainter.cxx. ◆ CheckShape(). void TGeoPainter::CheckShape ; (; TGeoShape * ; shape, . Int_t ; testNo, . Int_t ; nsamples, . Option_t * ; option . ). overridevirtual . Test for shape navigation methods. ; Summary for test numbers:; 1: DistFromInside/Outside. Sample points inside the shape. Generate directions randomly in cos(theta). Compute DistFromInside and move the point with bigger distance. Compute DistFromOutside back from new point. Plot d-(d1+d2) . Implements TVirtualGeoPainter.; Definition at line 254 of file TGeoPainter.cxx. ◆ ClearVisibleVolumes(). void TGeoPainter::ClearVisibleVolumes ; (; ). protected . Clear the list of visible volumes reset the kVisOnScreen bit for volumes previously in the list. ; Definition at line 263 of file TGeoPainter.cxx. ◆ CountNodes(). Int_t TGeoPainter::CountNodes ; (; TGeoVolume * ; vol, . Int_t ; level . ); const. Count number of visible nodes down to a given level. ; Definition at line 582 of file TGeoPainter.cxx. ◆ CountVisibleNodes(). Int_t TGeoPainter::CountVisibleNodes ; (; ). overridevirtual . Count total number of visible nodes. ; Implements TVirtualGeoPainter.; Definition at line 636 of file TGeoPainter.cxx. ◆ DefaultAngles(). void TGeoPainter::DefaultAngles ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPainter.html:25202,test,test,25202,doc/master/classTGeoPainter.html,https://root.cern,https://root.cern/doc/master/classTGeoPainter.html,1,['test'],['test']
Testability,. p-value for the alternate hypothesis (small number means disfavoured) ; Definition at line 129 of file HypoTestResult.h. ◆ fAlternatePValueError. double RooStats::HypoTestResult::fAlternatePValueError. mutableprotected . error of p-value for the alternate hypothesis (small number means disfavoured) ; Definition at line 131 of file HypoTestResult.h. ◆ fBackgroundIsAlt. bool RooStats::HypoTestResult::fBackgroundIsAlt. protected . Definition at line 140 of file HypoTestResult.h. ◆ fFitInfo. std::unique_ptr<RooDataSet> RooStats::HypoTestResult::fFitInfo. protected . Definition at line 138 of file HypoTestResult.h. ◆ fNullDetailedOutput. std::unique_ptr<RooDataSet> RooStats::HypoTestResult::fNullDetailedOutput. protected . Definition at line 136 of file HypoTestResult.h. ◆ fNullDistr. std::unique_ptr<SamplingDistribution> RooStats::HypoTestResult::fNullDistr. protected . Definition at line 134 of file HypoTestResult.h. ◆ fNullPValue. double RooStats::HypoTestResult::fNullPValue. mutableprotected . p-value for the null hypothesis (small number means disfavoured) ; Definition at line 128 of file HypoTestResult.h. ◆ fNullPValueError. double RooStats::HypoTestResult::fNullPValueError. mutableprotected . error of p-value for the null hypothesis (small number means disfavoured) ; Definition at line 130 of file HypoTestResult.h. ◆ fPValueIsRightTail. bool RooStats::HypoTestResult::fPValueIsRightTail. protected . Definition at line 139 of file HypoTestResult.h. ◆ fTestStatisticData. double RooStats::HypoTestResult::fTestStatisticData. protected . result of the test statistic evaluated on data ; Definition at line 132 of file HypoTestResult.h. Libraries for RooStats::HypoTestResult:. [legend]; The documentation for this class was generated from the following files:; roofit/roostats/inc/RooStats/HypoTestResult.h; roofit/roostats/src/HypoTestResult.cxx. RooStatsHypoTestResult. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:54 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html:28760,test,test,28760,doc/master/classRooStats_1_1HypoTestResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html,1,['test'],['test']
Testability,". private . Definition at line 299 of file GoFTest.cxx. ◆ GaussianCDF(). Double_t ROOT::Math::GoFTest::GaussianCDF ; (; Double_t ; x); const. private . Definition at line 295 of file GoFTest.cxx. ◆ GetSigmaN(). Double_t ROOT::Math::GoFTest::GetSigmaN ; (; const std::vector< size_t > & ; ns, . size_t ; N . ). staticprivate . Computation of sigma_N as described in (1) ; Definition at line 311 of file GoFTest.cxx. ◆ Instantiate(). void ROOT::Math::GoFTest::Instantiate ; (; const Double_t * ; sample, . size_t ; sampleSize . ). private . Definition at line 279 of file GoFTest.cxx. ◆ InterpolatePValues(). static Double_t ROOT::Math::GoFTest::InterpolatePValues ; (; int ; nsamples, . Double_t ; A2 . ). staticprivate . Linear interpolation used in GoFTest::PValueAD2Samples. . ◆ KolmogorovSmirnov2SamplesTest() [1/2]. Double_t ROOT::Math::GoFTest::KolmogorovSmirnov2SamplesTest ; (; const Char_t * ; option = ""p""); const. Kolmogorov-Smirnov 2-Samples Test. ; Returns by default the p-value; option ""t"" returns the test statistic value ""Dn"". ; Definition at line 913 of file GoFTest.cxx. ◆ KolmogorovSmirnov2SamplesTest() [2/2]. void ROOT::Math::GoFTest::KolmogorovSmirnov2SamplesTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Kolmogorov-Smirnov 2-Samples Test. ; The Kolmogorov-Smirnov 2-Samples Test algorithm is described at http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/ks2samp.htm and described and taken from https://root.cern/doc/master/namespaceTMath.html ; Definition at line 896 of file GoFTest.cxx. ◆ KolmogorovSmirnovTest() [1/2]. Double_t ROOT::Math::GoFTest::KolmogorovSmirnovTest ; (; const Char_t * ; option = ""p""); const. Kolmogorov-Smirnov 1-Sample Test. ; Returns default p-value; option ""t"" returns the test statistic value ""Dn"". ; Definition at line 945 of file GoFTest.cxx. ◆ KolmogorovSmirnovTest() [2/2]. void ROOT::Math::GoFTest::KolmogorovSmirnovTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Kolmogorov-Smirnov 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:14472,test,test,14472,doc/master/classROOT_1_1Math_1_1GoFTest.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html,1,['test'],['test']
Testability,". private:. voidInitTreePruningMetaData(TMVA::DecisionTreeNode* n); TMVA::MsgLogger&Log() const; voidOptimize(TMVA::DecisionTree* dt, Double_t weights). Data Members; private:. TMVA::MsgLogger*fLogger! output stream to save logging information; Int_tfOptimalK! the optimal index of the prune sequence; vector<TMVA::DecisionTreeNode*,allocator<TMVA::DecisionTreeNode*> >fPruneSequence! map of weakest links (i.e., branches to prune) -> pruning index; vector<Double_t>fPruneStrengthList! map of alpha -> pruning index; vector<Double_t>fQualityIndexList! map of R(T) -> pruning index; TMVA::SeparationBase*fQualityIndexTool! the quality index used to calculate R(t), R(T) = sum[t in ~T]{ R(t) }. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CostComplexityPruneTool( SeparationBase* qualityIndex ); the constructor for the cost complexity prunig. ~CostComplexityPruneTool(); the destructor for the cost complexity prunig. CalculatePruningInfo(TMVA::DecisionTree* dt, const vector<TMVA::Event*,allocator<TMVA::Event*> >* testEvents = NULL, Bool_t isAutomatic = kFALSE). void InitTreePruningMetaData(TMVA::DecisionTreeNode* n); initialise ""meta data"" for the pruning, like the ""costcomplexity"", the; critical alpha, the minimal alpha down the tree, etc... for each node!!. void Optimize(TMVA::DecisionTree* dt, Double_t weights); after the critical alpha values (at which the corresponding nodes would; be pruned away) had been established in the ""InitMetaData"" we need now:; automatic pruning:; find the value of ""alpha"" for which the test sample gives minimal error,; on the tree with all nodes pruned that have alpha_critital < alpha,; fixed parameter pruning. CostComplexityPruneTool( SeparationBase* qualityIndex = NULL ). » Last changed: Fri Nov 26 14:26:56 2010 » Last generated: 2010-11-26 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__CostComplexityPruneTool.html:1922,test,testEvents,1922,root/html528/TMVA__CostComplexityPruneTool.html,https://root.cern,https://root.cern/root/html528/TMVA__CostComplexityPruneTool.html,2,['test'],"['test', 'testEvents']"
Testability,". protected . regularize the distribution fof the given node ; Parameters. [in]binningcurrent node ; [in]regmoderegularisation mode ; [in]densityModetype of regularisation scaling ; [in]axisSteeringdetailed steering for the axes of the distribution . Definition at line 424 of file TUnfoldDensity.cxx. ◆ ScanTau(). Int_t TUnfoldDensity::ScanTau ; (; Int_t ; nPoint, . Double_t ; tauMin, . Double_t ; tauMax, . TSpline ** ; scanResult, . Int_t ; mode = kEScanTauRhoAvg, . const char * ; distribution = nullptr, . const char * ; axisSteering = nullptr, . TGraph ** ; lCurvePlot = nullptr, . TSpline ** ; logTauXPlot = nullptr, . TSpline ** ; logTauYPlot = nullptr . ). virtual . scan a function wrt tau and determine the minimum ; Parameters. [in]nPointnumber of points to be scanned ; [in]tauMinsmallest tau value to study ; [in]tauMaxlargest tau value to study ; [out]scanResultthe scanned function wrt log(tau) ; [in]mode1st parameter for the scan function ; [in]distribution2nd parameter for the scan function ; [in]projectionMode3rd parameter for the scan function ; [out]lCurvePlotfor monitoring, shows the L-curve ; [out]logTauXPlotfor monitoring, L-curve(X) as a function of log(tau) ; [out]logTauYPlotfor monitoring, L-curve(Y) as a function of log(tau). Return value: the coordinate number on the curve scanResult which corresponds to the minimum ; The function is scanned by repeating the following steps nPoint times . Choose a value of tau . Perform the unfolding for this choice of tau, DoUnfold(tau) . Determinethe scan variable GetScanVariable() . The method GetScanVariable() defines scans of correlation coefficients, where mode is chosen from the enum EScanTauMode. In addition one may set distribution and/or projectionMode to refine the calculation of correlations (e.g. restrict the calcuation to the signal distribution and/or exclude underflow and overflow bins). See the documentation of GetScanVariable() for details. Alternative scan variables may be defined by overriding the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldDensity.html:68981,log,log,68981,doc/master/classTUnfoldDensity.html,https://root.cern,https://root.cern/doc/master/classTUnfoldDensity.html,5,['log'],"['log', 'logTauXPlotfor', 'logTauYPlotfor']"
Testability,". protected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications; static Long64_tTProofServ::fgLastEntryLast entry before exception; static TStringTProofServ::fgLastMsgMessage about status before exception. private:. TProofServLiteInterruptHandler*fInterruptHandler; TStringfSockPathunix socket path; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofServLite(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TProofServLite(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. void Terminate(Int_t status); Terminate the proof server. void HandleFork(TMessage* mess); Cloning itself via fork. Int_t SetupOnFork(const char* ord); Finalize the server setup afetr forking.; Return 0 on success, -1 on error. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-14 16:47; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofServLite.html:18169,log,logo,18169,root/html534/TProofServLite.html,https://root.cern,https://root.cern/root/html534/TProofServLite.html,1,['log'],['logo']
Testability,". static . [static utility function]///////////////////////////// ; calling ""NoMsg( errorLevel )"", sets ""gErrorIgnoreLevel"" to ""errorLevel+1"" so that all errors with ""level < errorLevel"" will be ignored.; calling the function with a negative argument (e.g., ""NoMsg( -1 )"") resets gErrorIgnoreLevel to its previous value. ; Definition at line 1108 of file TTabCom.cxx. ◆ operator=(). TTabCom & TTabCom::operator= ; (; const TTabCom & ; ). privatedelete . ◆ ParseReverse(). int TTabCom::ParseReverse ; (; const char * ; var_str, . int ; start . ). private . Returns the place in the string where to put the \0, starting the search from ""start"". ; Definition at line 2565 of file TTabCom.cxx. ◆ PathIsSpecifiedInFileName(). Bool_t TTabCom::PathIsSpecifiedInFileName ; (; const TString & ; fileName). static . [static utility function]///////////////////////////// ; true if ""fileName""; is an absolute path (""/tmp/a""); is a relative path (""../whatever"", ""./test""); starts with user name (""~/mail""); starts with an environment variable (""$ROOTSYS/bin"") . Definition at line 1088 of file TTabCom.cxx. ◆ RehashAll(). void TTabCom::RehashAll ; (; ). clears and then rebuilds all lists except for user names and system include files. ; Definition at line 415 of file TTabCom.cxx. ◆ RehashClasses(). void TTabCom::RehashClasses ; (; ). Do the class rehash. ; Definition at line 335 of file TTabCom.cxx. ◆ RehashCppDirectives(). void TTabCom::RehashCppDirectives ; (; ). Cpp rehashing. ; Definition at line 344 of file TTabCom.cxx. ◆ RehashEnvVars(). void TTabCom::RehashEnvVars ; (; ). Environemnt variables rehashing. ; Definition at line 353 of file TTabCom.cxx. ◆ RehashFiles(). void TTabCom::RehashFiles ; (; ). Close files. ; Definition at line 362 of file TTabCom.cxx. ◆ RehashGlobalFunctions(). void TTabCom::RehashGlobalFunctions ; (; ). Reload global functions. ; Definition at line 370 of file TTabCom.cxx. ◆ RehashGlobals(). void TTabCom::RehashGlobals ; (; ). Reload globals. ; Definition at line 37",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:17474,test,test,17474,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['test'],['test']
Testability,". static Double_t TGeoTubeSeg::DistFromOutsideS ; (; const Double_t * ; point, . const Double_t * ; dir, . Double_t ; rmin, . Double_t ; rmax, . Double_t ; dz, . Double_t ; c1, . Double_t ; s1, . Double_t ; c2, . Double_t ; s2, . Double_t ; cm, . Double_t ; sm, . Double_t ; cdfi . ). static . ◆ Divide(). TGeoVolume * TGeoTubeSeg::Divide ; (; TGeoVolume * ; voldiv, . const char * ; divname, . Int_t ; iaxis, . Int_t ; ndiv, . Double_t ; start, . Double_t ; step . ). overridevirtual . Reimplemented from TGeoTube. ◆ GetAxisRange(). Double_t TGeoTubeSeg::GetAxisRange ; (; Int_t ; iaxis, . Double_t & ; xlo, . Double_t & ; xhi . ); const. overridevirtual . Reimplemented from TGeoTube. ◆ GetBoundingCylinder(). void TGeoTubeSeg::GetBoundingCylinder ; (; Double_t * ; param); const. overridevirtual . Reimplemented from TGeoTube. ◆ GetBuffer3D(). const TBuffer3D & TGeoTubeSeg::GetBuffer3D ; (; Int_t ; reqSections, . Bool_t ; localFrame . ); const. overridevirtual . Stub implementation to avoid forcing implementation at this stage. ; Reimplemented from TGeoTube. ◆ GetByteCount(). Int_t TGeoTubeSeg::GetByteCount ; (; ); const. inlineoverridevirtual . Reimplemented from TGeoTube.; Definition at line 149 of file TGeoTube.h. ◆ GetMakeRuntimeShape(). TGeoShape * TGeoTubeSeg::GetMakeRuntimeShape ; (; TGeoShape * ; mother, . TGeoMatrix * ; mat . ); const. overridevirtual . Reimplemented from TGeoTube. ◆ GetMeshNumbers(). void TGeoTubeSeg::GetMeshNumbers ; (; Int_t & ; nvert, . Int_t & ; nsegs, . Int_t & ; npols . ); const. overridevirtual . Reimplemented from TGeoTube. ◆ GetNmeshVertices(). Int_t TGeoTubeSeg::GetNmeshVertices ; (; ); const. overridevirtual . Reimplemented from TGeoTube. ◆ GetPhi1(). Double_t TGeoTubeSeg::GetPhi1 ; (; ); const. inline . Definition at line 154 of file TGeoTube.h. ◆ GetPhi2(). Double_t TGeoTubeSeg::GetPhi2 ; (; ); const. inline . Definition at line 155 of file TGeoTube.h. ◆ GetPointsOnSegments(). Bool_t TGeoTubeSeg::GetPointsOnSegments ; (; Int_t ; npoints",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTubeSeg.html:29951,Stub,Stub,29951,doc/master/classTGeoTubeSeg.html,https://root.cern,https://root.cern/doc/master/classTGeoTubeSeg.html,1,['Stub'],['Stub']
Testability,". std::vector< Double_t > TMVA::ResultsMulticlass::GetBestMultiClassCuts ; (; UInt_t ; targetClass). calculate the best working point (optimal cut values) for the multiclass classifier ; Definition at line 188 of file ResultsMulticlass.cxx. ◆ GetConfusionMatrix(). TMatrixD TMVA::ResultsMulticlass::GetConfusionMatrix ; (; Double_t ; effB). Returns a confusion matrix where each class is pitted against each other. ; Results are ; Definition at line 89 of file ResultsMulticlass.cxx. ◆ GetSize(). Long64_t TMVA::ResultsMulticlass::GetSize ; (; ); const. inline . Definition at line 68 of file ResultsMulticlass.h. ◆ GetValueVector(). std::vector< std::vector< Float_t > > * TMVA::ResultsMulticlass::GetValueVector ; (; ). inline . Definition at line 70 of file ResultsMulticlass.h. ◆ IsA(). TClass * TMVA::ResultsMulticlass::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::Results.; Definition at line 102 of file ResultsMulticlass.h. ◆ Log(). MsgLogger & TMVA::ResultsMulticlass::Log ; (; ); const. inlineprivate . Definition at line 90 of file ResultsMulticlass.h. ◆ operator[](). const std::vector< Float_t > & TMVA::ResultsMulticlass::operator[] ; (; Int_t ; ievt); const. inlineoverridevirtual . Implements TMVA::Results.; Definition at line 69 of file ResultsMulticlass.h. ◆ Resize(). void TMVA::ResultsMulticlass::Resize ; (; Int_t ; entries). inline . Definition at line 63 of file ResultsMulticlass.h. ◆ SetValue(). void TMVA::ResultsMulticlass::SetValue ; (; std::vector< Float_t > & ; value, . Int_t ; ievt . ). Definition at line 79 of file ResultsMulticlass.cxx. ◆ Streamer(). void TMVA::ResultsMulticlass::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TMVA::Results. ◆ StreamerNVirtual(). void TMVA::ResultsMulticlass::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 102 of file ResultsMulticlass.h. Member Data Document",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ResultsMulticlass.html:17640,Log,Log,17640,doc/master/classTMVA_1_1ResultsMulticlass.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ResultsMulticlass.html,1,['Log'],['Log']
Testability,". template<typename Architecture_t > . using TMVA::DNN::TDLGradientDescent< Architecture_t >::DeepNet_t = TDeepNet<Architecture_t>. Definition at line 67 of file DLMinimizers.h. ◆ Matrix_t. template<typename Architecture_t > . using TMVA::DNN::TDLGradientDescent< Architecture_t >::Matrix_t = typename Architecture_t::Matrix_t. Definition at line 69 of file DLMinimizers.h. ◆ Scalar_t. template<typename Architecture_t > . using TMVA::DNN::TDLGradientDescent< Architecture_t >::Scalar_t = typename Architecture_t::Scalar_t. Definition at line 68 of file DLMinimizers.h. Constructor & Destructor Documentation. ◆ TDLGradientDescent() [1/2]. template<typename Architecture_t > . TMVA::DNN::TDLGradientDescent< Architecture_t >::TDLGradientDescent. Definition at line 163 of file DLMinimizers.h. ◆ TDLGradientDescent() [2/2]. template<typename Architecture_t > . TMVA::DNN::TDLGradientDescent< Architecture_t >::TDLGradientDescent ; (; Scalar_t ; learningRate, . size_t ; convergenceSteps, . size_t ; testInterval . ). Definition at line 172 of file DLMinimizers.h. Member Function Documentation. ◆ GetConvergenceCount(). template<typename Architecture_t > . size_t TMVA::DNN::TDLGradientDescent< Architecture_t >::GetConvergenceCount ; (; ); const. inline . Getters. ; Definition at line 146 of file DLMinimizers.h. ◆ GetConvergenceSteps(). template<typename Architecture_t > . size_t TMVA::DNN::TDLGradientDescent< Architecture_t >::GetConvergenceSteps ; (; ); const. inline . Definition at line 147 of file DLMinimizers.h. ◆ GetTestError(). template<typename Architecture_t > . Scalar_t TMVA::DNN::TDLGradientDescent< Architecture_t >::GetTestError ; (; ); const. inline . Definition at line 149 of file DLMinimizers.h. ◆ GetTestInterval(). template<typename Architecture_t > . size_t TMVA::DNN::TDLGradientDescent< Architecture_t >::GetTestInterval ; (; ); const. inline . Definition at line 150 of file DLMinimizers.h. ◆ GetTrainingError(). template<typename Architecture_t > . Scalar_t TMVA::DNN::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html:4886,test,testInterval,4886,doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,1,['test'],['testInterval']
Testability,. virtual . Implements TMVA::RMethodBase.; Definition at line 230 of file MethodRSNNS.cxx. ◆ ReadModelFromFile(). void TMVA::MethodRSNNS::ReadModelFromFile ; (; ). Definition at line 332 of file MethodRSNNS.cxx. ◆ ReadWeightsFromStream() [1/3]. virtual void TMVA::MethodRSNNS::ReadWeightsFromStream ; (; std::istream & ; ). inlinevirtual . Implements TMVA::RMethodBase.; Definition at line 72 of file MethodRSNNS.h. ◆ ReadWeightsFromStream() [2/3]. virtual void TMVA::MethodBase::ReadWeightsFromStream ; (; std::istream & ; ). virtual . Implements TMVA::RMethodBase. ◆ ReadWeightsFromStream() [3/3]. virtual void TMVA::MethodBase::ReadWeightsFromStream ; (; TFile & ; ). inlinevirtual . Reimplemented from TMVA::RMethodBase.; Definition at line 266 of file MethodBase.h. ◆ ReadWeightsFromXML(). virtual void TMVA::MethodRSNNS::ReadWeightsFromXML ; (; void * ; ). inlinevirtual . Implements TMVA::RMethodBase.; Definition at line 71 of file MethodRSNNS.h. ◆ TestClassification(). void MethodRSNNS::TestClassification ; (; ). virtual . initialization ; Reimplemented from TMVA::MethodBase.; Definition at line 244 of file MethodRSNNS.cxx. ◆ Train(). void MethodRSNNS::Train ; (; void ; ). virtual . Implements TMVA::RMethodBase.; Definition at line 164 of file MethodRSNNS.cxx. Friends And Related Symbol Documentation. ◆ Factory. friend class Factory. friend . Definition at line 81 of file MethodRSNNS.h. ◆ Reader. friend class Reader. friend . Definition at line 82 of file MethodRSNNS.h. Member Data Documentation. ◆ asfactor. ROOT::R::TRFunctionImport TMVA::MethodRSNNS::asfactor. protected . Definition at line 115 of file MethodRSNNS.h. ◆ fDataSetManager. DataSetManager* TMVA::MethodRSNNS::fDataSetManager. private . Definition at line 80 of file MethodRSNNS.h. ◆ fFactorNumeric. std::vector<UInt_t> TMVA::MethodRSNNS::fFactorNumeric. protected . Definition at line 110 of file MethodRSNNS.h. ◆ fHiddenActFunc. TString TMVA::MethodRSNNS::fHiddenActFunc. protected . Definition at line 102 of fil,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodRSNNS.html:32243,Test,TestClassification,32243,doc/master/classTMVA_1_1MethodRSNNS.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodRSNNS.html,1,['Test'],['TestClassification']
Testability,". virtual intCheckHook() const; virtual voidPostHook() const; virtual intPreAltHook(RooArgSet*, double) const; virtual voidPreHook() const; virtual intPreNullHook(RooArgSet*, double) const. private:. RooStats::SamplingDistribution*GenerateSamplingDistribution(RooStats::ModelConfig* thisModel, double obsTestStat, RooAbsPdf* impDens = __null, const RooArgSet* impSnapshot = __null) const; voidSetAdaptiveLimits(Double_t obsTestStat, Bool_t forNull) const; voidSetupSampler(const RooStats::ModelConfig& model) const. Data Members; protected:. const RooStats::ModelConfig*fAltModel; unsigned intfAltToysSeedto have same toys for alternate; const RooAbsData*fData; RooStats::TestStatSampler*fDefaultSampler; RooStats::TestStatistic*fDefaultTestStat; const RooStats::ModelConfig*fNullModel; RooStats::TestStatSampler*fTestStatSampler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HypoTestCalculatorGeneric(const RooAbsData& data, const RooStats::ModelConfig& altModel, const RooStats::ModelConfig& nullModel, RooStats::TestStatSampler* sampler = 0); Constructor. When test stat sampler is not provided; uses ToyMCSampler and RatioOfProfiledLikelihoodsTestStat; and nToys = 1000.; User can : GetTestStatSampler()->SetNToys( # ). void SetupSampler(const RooStats::ModelConfig& model) const; common setup for both models. ~HypoTestCalculatorGeneric(). HypoTestResult* GetHypoTest() const. void UseSameAltToys(); to re-use same toys for alternate hypothesis. HypoTestCalculatorGeneric(const RooAbsData& data, const RooStats::ModelConfig& altModel, const RooStats::ModelConfig& nullModel, RooStats::TestStatSampler* sampler = 0). void SetNullModel(const RooStats::ModelConfig& nullModel); set the model for the null hypothesis (only B). { fNullModel = &nullModel; }. const RooAbsData * GetData(void); { return fData; }. const ModelConfig* GetNullModel(void); { return fNullModel; }. const RooArgSet* GetFitInfo() const; set the model for the alternate hypothesis (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HypoTestCalculatorGeneric.html:2915,Test,TestStatSampler,2915,root/html602/RooStats__HypoTestCalculatorGeneric.html,https://root.cern,https://root.cern/root/html602/RooStats__HypoTestCalculatorGeneric.html,2,['Test'],['TestStatSampler']
Testability,". virtual void TMVA::DataSet::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMVA::DataSet::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 175 of file DataSet.h. ◆ TreeIndex(). UInt_t TMVA::DataSet::TreeIndex ; (; Types::ETreeType ; type); const. inline . Definition at line 181 of file DataSet.h. Member Data Documentation. ◆ fBlockBelongToTraining. std::vector<Char_t> TMVA::DataSet::fBlockBelongToTraining. private . when dividing the dataset to blocks, sets whether the certain block is in the Training set or else in the validation set boolean are stored, taken std::vector<Char_t> for performance reasons (instead of std::vector<Bool_t>) ; Definition at line 165 of file DataSet.h. ◆ fClassEvents. std::vector< std::vector<Long64_t> > TMVA::DataSet::fClassEvents. private . number of events of class 0,1,2,... in training[0] and testing[1] (+validation, trainingoriginal) ; Definition at line 158 of file DataSet.h. ◆ fCurrentEventIdx. Long64_t TMVA::DataSet::fCurrentEventIdx. mutableprivate . Definition at line 146 of file DataSet.h. ◆ fCurrentTreeIdx. UInt_t TMVA::DataSet::fCurrentTreeIdx. mutableprivate . Definition at line 145 of file DataSet.h. ◆ fdsi. const DataSetInfo* TMVA::DataSet::fdsi. private . -> datasetinfo that created this dataset ; Definition at line 139 of file DataSet.h. ◆ fEventCollection. std::vector< std::vector<Event*> > TMVA::DataSet::fEventCollection. private . list of events for training/testing/... ; Definition at line 141 of file DataSet.h. ◆ fHasNegativeEventWeights. Bool_t TMVA::DataSet::fHasNegativeEventWeights. private . true if at least one signal or bkg event has negative weight ; Definition at line 161 of file DataSet.h. ◆ fLogger. MsgLogger* TMVA::DataSet::fLogger. mutableprivate . ! message logger ; Definition at line 163 of file DataSet.h. ◆ fResults. std::vector< std::map< TString, Results* > > TMVA::Data",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataSet.html:25524,test,testing,25524,doc/master/classTMVA_1_1DataSet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSet.html,1,['test'],['testing']
Testability,". void ClearCache(); clear the cache obtained from the pdf used for speeding the toy and global observables generation; needs to be called every time the model pdf (fPdf) changes. ToyMCSampler(). void SetUseMultiGen(Bool_t flag); { fUseMultiGen = flag ; }. void AddTestStatistic(RooStats::TestStatistic* t = __null); The pdf can be NULL in which case the density from SetPdf(); is used. The snapshot and TestStatistic is also optional. RooAbsData* GenerateToyData(RooArgSet& paramPoint, RooAbsPdf& pdf) const; generates toy data; without weight. return GenerateToyData(paramPoint, weight, pdf). RooAbsData* GenerateToyData(RooArgSet& paramPoint) const; with weight. { return GenerateToyData(paramPoint,*fPdf); }. Double_t EvaluateTestStatistic(RooAbsData& data, RooArgSet& nullPOI, int i); Main interface to evaluate the test statistic on a dataset. Double_t EvaluateTestStatistic(RooAbsData& data, RooArgSet& nullPOI); { return EvaluateTestStatistic( data,nullPOI, 0 ); }. TestStatistic* GetTestStatistic(unsigned int i) const. TestStatistic* GetTestStatistic(unsigned int i) const; { return GetTestStatistic(0); }. Double_t ConfidenceLevel() const; { return 1. - fSize; }. void Initialize(RooAbsArg& , RooArgSet& , RooArgSet& ); { return fNToys; }. void SetNToys(const Int_t ntoy); { fNToys = ntoy; }. void SetNEventsPerToy(const Int_t nevents); Forces n events even for extended PDFs. Set NEvents=0 to; use the Poisson distributed events from the extended PDF. void SetParametersForTestStat(const RooArgSet& nullpoi); Set the Pdf, add to the the workspace if not already there. void SetPdf(RooAbsPdf& pdf); { fPdf = &pdf; ClearCache(); }. void SetPriorNuisance(RooAbsPdf* pdf); How to randomize the prior. Set to NULL to deactivate randomization. void SetNuisanceParameters(const RooArgSet& np); specify the nuisance parameters (eg. the rest of the parameters). { fNuisancePars = &np; }. void SetObservables(const RooArgSet& o); specify the observables in the dataset (needed to evaluate the test s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__ToyMCSampler.html:8691,Test,TestStatistic,8691,root/html602/RooStats__ToyMCSampler.html,https://root.cern,https://root.cern/root/html602/RooStats__ToyMCSampler.html,2,['Test'],['TestStatistic']
Testability,". void SetPlotEt(Bool_t x); Set E/Et plot. Float_t GetMaxVal() const. void SetPhiWithRng(Float_t x, Float_t r); Set phi range. Float_t GetTransitionTheta() const; Get transition angle between barrel and end-cap cells, assuming fEndCapPosF = -fEndCapPosB. Float_t GetTransitionEta() const; Get transition eta between barrel and end-cap cells, assuming fEndCapPosF = -fEndCapPosB. Float_t GetTransitionThetaForward() const; Get transition angle between barrel and forward end-cap cells. Float_t GetTransitionEtaForward() const; Get transition eta between barrel and forward end-cap cells. Float_t GetTransitionThetaBackward() const; Get transition angle between barrel and backward end-cap cells. Float_t GetTransitionEtaBackward() const; Get transition eta between barrel and backward end-cap cells. void SetData(TEveCaloData* d); Set calorimeter event data. void DataChanged(); Update setting and cache on data changed.; Called from TEvecaloData::BroadcastDataChange(). Bool_t AssertCellIdCache() const; Assert cell id cache is ok.; Returns true if the cache has been updated. Bool_t CellInEtaPhiRng(TEveCaloData::CellData_t& ) const; Returns true if given cell is in the ceta phi range. void AssignCaloVizParameters(TEveCaloViz* cv); Assign paramteres from given model. void SetPalette(TEveRGBAPalette* p); Set TEveRGBAPalette object pointer. Float_t GetValToHeight() const; Get transformation factor from E/Et to height. TEveRGBAPalette* AssertPalette(); Make sure the TEveRGBAPalette pointer is not null.; If it is not set, a new one is instantiated and the range is set; to current min/max signal values. void Paint(Option_t* option = """"); Paint this object. Only direct rendering is supported. TClass* ProjectedClass(const TEveProjection* p) const; Virtual from TEveProjectable, returns TEveCalo2D class. void SetupColorHeight(Float_t value, Int_t slice, Float_t& height) const; Set color and height for a given value and slice using slice color or TEveRGBAPalette. TEveCaloViz& operator=(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveCaloViz.html:24314,Assert,AssertCellIdCache,24314,root/html534/TEveCaloViz.html,https://root.cern,https://root.cern/root/html534/TEveCaloViz.html,2,['Assert'],"['Assert', 'AssertCellIdCache']"
Testability,". void SetPlotEt(Bool_t x); Set E/Et plot. Float_t GetMaxVal() const. void SetPhiWithRng(Float_t x, Float_t r); Set phi range. Float_t GetTransitionTheta() const; Get transition angle between barrel and end-cap cells, assuming fEndCapPosF = -fEndCapPosB. Float_t GetTransitionEta() const; Get transition eta between barrel and end-cap cells, assuming fEndCapPosF = -fEndCapPosB. Float_t GetTransitionThetaForward() const; Get transition angle between barrel and forward end-cap cells. Float_t GetTransitionEtaForward() const; Get transition eta between barrel and forward end-cap cells. Float_t GetTransitionThetaBackward() const; Get transition angle between barrel and backward end-cap cells. Float_t GetTransitionEtaBackward() const; Get transition eta between barrel and backward end-cap cells. void SetData(TEveCaloData* d); Set calorimeter event data. void DataChanged(); Update setting and cache on data changed.; Called from TEvecaloData::BroadcastDataChange(). Bool_t AssertCellIdCache() const; Assert cell id cache is ok.; Returns true if the cache has been updated. Bool_t CellInEtaPhiRng(TEveCaloData::CellData_t& ) const; Returns true if given cell is in the ceta phi range. void AssignCaloVizParameters(TEveCaloViz* cv); Assign paramteres from given model. void SetPalette(TEveRGBAPalette* p); Set TEveRGBAPalette object pointer. Float_t GetValToHeight() const; Get transformation factor from E/Et to height. TEveRGBAPalette* AssertPalette(); Make sure the TEveRGBAPalette pointer is not null.; If it is not set, a new one is instantiated and the range is set; to current min/max signal values. void Paint(Option_t* option = """"); Paint this object. Only direct rendering is supported. TClass* ProjectedClass(const TEveProjection* p) const; Virtual from TEveProjectable, returns TEveCalo2D class. void SetupColorHeight(Float_t value, Int_t slice, Float_t& height) const; Set color and height for a given value and slice using slice color or TEveRGBAPalette. TEveCaloViz(const TEveCaloViz",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveCaloViz.html:25464,Assert,AssertCellIdCache,25464,root/html602/TEveCaloViz.html,https://root.cern,https://root.cern/root/html602/TEveCaloViz.html,4,['Assert'],"['Assert', 'AssertCellIdCache']"
Testability,". void SplitOptions(const TString& theOpt, TList& loo) const; splits the option string at ':' and fills the list 'loo' with the primitive strings. void ResetSetFlag(); resets the IsSet falg for all declare options; to be called before options are read from stream. void ParseOptions(); options parser. void CheckForUnusedOptions() const; checks for unused options in option string. void PrintOptions() const; prints out the options set in the options string and the defaults. void WriteOptionsToStream(ostream& o, const TString& prefix) const; write options to output stream (e.g. in writing the MVA weight files. void AddOptionsXMLTo(void* parent) const; write options to XML file. void ReadOptionsFromXML(void* node). void WriteOptionsReferenceToFile(); write complete options to output stream. void ReadOptionsFromStream(istream& istr); read option back from the weight file. const char* GetName() const; { return GetConfigName(); }. const char* GetConfigName() const; { return fConfigName; }. const char* GetConfigDescription() const; { return fConfigDescription; }. void SetConfigName(const char* n); { fConfigName = TString(n); }. void SetConfigDescription(const char* d); { fConfigDescription = TString(d); }. const TString& GetOptions() const; { return fOptions; }. void SetOptions(const TString& s); { fOptions = s; }. Bool_t LooseOptionCheckingEnabled() const; { return fLooseOptionCheckingEnabled; }. void EnableLooseOptions(Bool_t b = kTRUE); { fLooseOptionCheckingEnabled = b; }. const TString& GetReferenceFile() const; { return fReferenceFile; }. void SetMsgType(TMVA::EMsgType t); set message type. { fLogger->SetMinType(t); }. Log(). » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: Configurable.h 29195 2009-06-24 10:39:49Z brun $ » Last generated: 2010-09-23 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Configurable.html:8110,Log,Log,8110,root/html528/TMVA__Configurable.html,https://root.cern,https://root.cern/root/html528/TMVA__Configurable.html,1,['Log'],['Log']
Testability,". void TProof::NotifyLogMsg ; (; const char * ; msg, . const char * ; sfx = ""\n"" . ). private . Notify locally 'msg' to the appropriate units (file, stdout, window) If defined, 'sfx' is added after 'msg' (typically a line-feed);. ; Definition at line 6358 of file TProof.cxx. ◆ Open(). TProof * TProof::Open ; (; const char * ; cluster = 0, . const char * ; conffile = 0, . const char * ; confdir = 0, . Int_t ; loglevel = 0 . ). static . Start a PROOF session on a specific cluster. ; If cluster is 0 (the default) then the PROOF Session Viewer GUI pops up and 0 is returned. If cluster is ""lite://"" we start a PROOF-lite session. If cluster is """" (empty string) then we connect to the cluster specified by 'Proof.LocalDefault', defaulting to ""lite://"". If cluster is ""pod://"" (case insensitive), then we connect to a PROOF cluster managed by PROOF on Demand (PoD, http://pod.gsi.de ). Via conffile a specific PROOF config file in the confir directory can be specified. Use loglevel to set the default loging level for debugging. The appropriate instance of TProofMgr is created, if not yet existing. The instantiated TProof object is returned. Use TProof::cd() to switch between PROOF sessions. For more info on PROOF see the TProof ctor. ; Definition at line 11583 of file TProof.cxx. ◆ operator=(). void TProof::operator= ; (; const TProof & ; ). private . ◆ ParseConfigField(). void TProof::ParseConfigField ; (; const char * ; config). private . The config file field may contain special instructions which need to be parsed at the beginning, e.g. ; for debug runs with valgrind. Several options can be given separated by a ',' ; Definition at line 1043 of file TProof.cxx. ◆ Ping() [1/2]. Int_t TProof::Ping ; (; ). Ping PROOF. Returns 1 if master server responded. ; Definition at line 4744 of file TProof.cxx. ◆ Ping() [2/2]. Int_t TProof::Ping ; (; ESlaves ; list). private . Ping PROOF slaves. Returns the number of slaves that responded. ; Definition at line 4752 of file TProof.cxx. ◆ Po",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:119116,log,loglevel,119116,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,2,['log'],"['loging', 'loglevel']"
Testability,".  ; Function:; Int_t TSpectrum3::SearchHighRes; (const float; ***fSource,float; ***fDest, int; fSizex, int; fSizey, int; fSizez, float; fSigma, double; fThreshold, bool; fBackgroundRemove,int; fDeconIterations, bool; fMarkov, int; fAverWindow) ��;  ; This function searches for peaks; in source spectrum. It is based on deconvolution method. First the background; is removed (if desired), then Markov smoothed spectrum is calculated (if; desired), then the response function is generated according to given sigma and; deconvolution is carried out. On success it returns number of found peaks.;  ; Parameters:; ������� fSource-pointer to; the matrix of source spectrum����������������� ; ������� fDest-resulting; spectrum after deconvolution; � ������fSizex, fSizey, fSizez; -lengths of the source and destination spectra��������������� ; ������� fSigma-sigma of; searched peaks; fThreshold-; threshold value in % for selected peaks, peaks with amplitude less than; threshold*highest_peak/100 are ignored; fBackgroundRemove-; background_remove-logical variable, true if the removal of background before; deconvolution is desired� ; fDeconIterations-number; of iterations in deconvolution operation; fMarkov-logical; variable, if it is true, first the source spectrum is replaced by new spectrum; calculated using Markov chains method ; fAverWindow-width of averaging smoothing window ;  ; References:; [1] M.A. Mariscotti: A method for; identification of peaks in the presence of background and its application to; spectrum analysis. NIM 50 (1967), 309-320.; [2] �M.; Morh�č, J. Kliman, V. Matou�ek, M. Veselsk�, I. Turzo.:Identification; of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (2000); 108-125.; [3] Z.K. Silagadze, A new; algorithm for automatic photopeak searches. NIM A 376 (1996), 451.;  ; Example of peak searching method;  ; SearchHighRes function provides users with the possibility; to vary the input parameters and with the access to the output deconvolved data",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum3.html:33100,log,logical,33100,root/html528/TSpectrum3.html,https://root.cern,https://root.cern/root/html528/TSpectrum3.html,8,['log'],['logical']
Testability,". ◆ Edm(). double ROOT::Math::GSLMultiFit::Edm ; (; ); const. inline . Definition at line 197 of file GSLMultiFit.h. ◆ Gradient(). const double * ROOT::Math::GSLMultiFit::Gradient ; (; ); const. inline . gradient value at the minimum ; Definition at line 158 of file GSLMultiFit.h. ◆ Iterate(). int ROOT::Math::GSLMultiFit::Iterate ; (; ). inline . Definition at line 145 of file GSLMultiFit.h. ◆ Name(). std::string ROOT::Math::GSLMultiFit::Name ; (; ); const. inline . Definition at line 140 of file GSLMultiFit.h. ◆ operator=() [1/2]. GSLMultiFit & ROOT::Math::GSLMultiFit::operator= ; (; const GSLMultiFit & ; rhs). delete . ◆ operator=() [2/2]. GSLMultiFit & ROOT::Math::GSLMultiFit::operator= ; (; GSLMultiFit && ; rhs). delete . ◆ Set(). template<class Func > . int ROOT::Math::GSLMultiFit::Set ; (; const std::vector< Func > & ; funcVec, . const double * ; x . ). inline . set the solver parameters ; Definition at line 111 of file GSLMultiFit.h. ◆ TestDelta(). int ROOT::Math::GSLMultiFit::TestDelta ; (; double ; absTol, . double ; relTol . ); const. inline . test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ; Definition at line 191 of file GSLMultiFit.h. ◆ TestGradient(). int ROOT::Math::GSLMultiFit::TestGradient ; (; double ; absTol); const. inline . test gradient (ask from solver gradient vector) ; Definition at line 183 of file GSLMultiFit.h. ◆ X(). const double * ROOT::Math::GSLMultiFit::X ; (; ); const. inline . parameter values at the minimum ; Definition at line 151 of file GSLMultiFit.h. Member Data Documentation. ◆ fCov. gsl_matrix* ROOT::Math::GSLMultiFit::fCov. mutableprivate . Definition at line 221 of file GSLMultiFit.h. ◆ fFunc. GSLMultiFitFunctionWrapper ROOT::Math::GSLMultiFit::fFunc. private . Definition at line 216 of file GSLMultiFit.h. ◆ fSolver. gsl_multifit_fdfsolver* ROOT::Math::GSLMultiFit::fSolver. private . Definition at line 217 of file GSLMultiFit.h. ◆ fTmp. gsl_vector* ROOT::Math::GSLMultiFit::fTmp. mutablepr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFit.html:4198,Test,TestDelta,4198,doc/master/classROOT_1_1Math_1_1GSLMultiFit.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFit.html,1,['Test'],['TestDelta']
Testability,". ◆ GetHist(). TH1 * TMVA::Results::GetHist ; (; const TString & ; alias); const. Definition at line 136 of file Results.cxx. ◆ GetHist2D(). TH2 * TMVA::Results::GetHist2D ; (; const TString & ; alias); const. Definition at line 145 of file Results.cxx. ◆ GetObject(). TObject * TMVA::Results::GetObject ; (; const TString & ; alias); const. Returns a stored object if it exists. ; If it does not, a nullptr is returned. ; Definition at line 112 of file Results.cxx. ◆ GetStorage(). TList * TMVA::Results::GetStorage ; (; ); const. inline . Definition at line 72 of file Results.h. ◆ GetTreeType(). Types::ETreeType TMVA::Results::GetTreeType ; (; ); const. inline . Definition at line 69 of file Results.h. ◆ IsA(). TClass * TMVA::Results::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TMVA::ResultsClassification, TMVA::ResultsMulticlass, and TMVA::ResultsRegression.; Definition at line 96 of file Results.h. ◆ Log(). MsgLogger & TMVA::Results::Log ; (; ); const. inlineprivate . Definition at line 93 of file Results.h. ◆ operator[](). virtual const std::vector< Float_t > & TMVA::Results::operator[] ; (; Int_t ; ievt); const. pure virtual . Implemented in TMVA::ResultsClassification, TMVA::ResultsMulticlass, and TMVA::ResultsRegression. ◆ SetTreeType(). void TMVA::Results::SetTreeType ; (; Types::ETreeType ; type). inline . Definition at line 66 of file Results.h. ◆ Store(). void TMVA::Results::Store ; (; TObject * ; obj, . const char * ; alias = nullptr . ). Definition at line 86 of file Results.cxx. ◆ Streamer(). void TMVA::Results::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TMVA::ResultsClassification, TMVA::ResultsMulticlass, and TMVA::ResultsRegression. ◆ StreamerNVirtual(). void TMVA::Results::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 96 of file Resul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Results.html:14386,Log,Log,14386,doc/master/classTMVA_1_1Results.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Results.html,1,['Log'],['Log']
Testability,. ◆ GetTestInterval(). template<typename Architecture_t > . size_t TMVA::DNN::TDLGradientDescent< Architecture_t >::GetTestInterval ; (; ); const. inline . Definition at line 150 of file DLMinimizers.h. ◆ GetTrainingError(). template<typename Architecture_t > . Scalar_t TMVA::DNN::TDLGradientDescent< Architecture_t >::GetTrainingError ; (; ); const. inline . Definition at line 148 of file DLMinimizers.h. ◆ HasConverged() [1/2]. template<typename Architecture_t > . bool TMVA::DNN::TDLGradientDescent< Architecture_t >::HasConverged. Increases the minimization step counter by the test error evaluation period and uses the current internal value of the test error to determine if the minimization has converged. ; Definition at line 276 of file DLMinimizers.h. ◆ HasConverged() [2/2]. template<typename Architecture_t > . bool TMVA::DNN::TDLGradientDescent< Architecture_t >::HasConverged ; (; Scalar_t ; testError). Increases the minimization step counter by the test error evaluation period and uses the provided test error value to determine if the minimization has converged. ; Definition at line 290 of file DLMinimizers.h. ◆ Reset(). template<typename Architecture_t > . void TMVA::DNN::TDLGradientDescent< Architecture_t >::Reset ; (; ). inline . Reset minimizer object to default state. ; Definition at line 89 of file DLMinimizers.h. ◆ SetBatchSize(). template<typename Architecture_t > . void TMVA::DNN::TDLGradientDescent< Architecture_t >::SetBatchSize ; (; Scalar_t ; rate). inline . Definition at line 156 of file DLMinimizers.h. ◆ SetConvergenceSteps(). template<typename Architecture_t > . void TMVA::DNN::TDLGradientDescent< Architecture_t >::SetConvergenceSteps ; (; size_t ; steps). inline . Setters. ; Definition at line 153 of file DLMinimizers.h. ◆ SetLearningRate(). template<typename Architecture_t > . void TMVA::DNN::TDLGradientDescent< Architecture_t >::SetLearningRate ; (; Scalar_t ; rate). inline . Definition at line 155 of file DLMinimizers.h. ◆ SetTestInterval(). t,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html:6573,test,test,6573,doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,2,['test'],['test']
Testability,". ◆ SecToText(). TString TMVA::Timer::SecToText ; (; Double_t ; seconds, . Bool_t ; Scientific . ); const. private . pretty string output ; Definition at line 262 of file Timer.cxx. ◆ Streamer(). virtual void TMVA::Timer::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMVA::Timer::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 99 of file Timer.h. Member Data Documentation. ◆ fColourfulOutput. Bool_t TMVA::Timer::fColourfulOutput. private . flag for use of colors ; Definition at line 84 of file Timer.h. ◆ fgClassName. const TString TMVA::Timer::fgClassName = ""Timer"". staticprivate . used for output ; Definition at line 93 of file Timer.h. ◆ fgNbins. const Int_t TMVA::Timer::fgNbins = 16. staticprivate . number of bins in progress bar ; Definition at line 94 of file Timer.h. ◆ fLogger. MsgLogger* TMVA::Timer::fLogger. mutableprivate . ! the output logger ; Definition at line 96 of file Timer.h. ◆ fNcounts. Int_t TMVA::Timer::fNcounts. private . reference number of ""counts"" ; Definition at line 82 of file Timer.h. ◆ fOutputToFile. Bool_t TMVA::Timer::fOutputToFile. private . Definition at line 89 of file Timer.h. ◆ fPrefix. TString TMVA::Timer::fPrefix. private . prefix for outputs ; Definition at line 83 of file Timer.h. ◆ fPreviousProgress. Int_t TMVA::Timer::fPreviousProgress. private . Definition at line 87 of file Timer.h. ◆ fPreviousTimeEstimate. TString TMVA::Timer::fPreviousTimeEstimate. private . Definition at line 88 of file Timer.h. ◆ fProgressBarStringLength. Int_t TMVA::Timer::fProgressBarStringLength. private . Definition at line 91 of file Timer.h. Libraries for TMVA::Timer:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/Timer.h; tmva/tmva/src/Timer.cxx. TMVATimer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:43 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Timer.html:17483,log,logger,17483,doc/master/classTMVA_1_1Timer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Timer.html,1,['log'],['logger']
Testability,. ◆ Transform(). const TMVA::Event * TMVA::TransformationHandler::Transform ; (; const Event * ; ev); const. the transformation ; Definition at line 152 of file TransformationHandler.cxx. ◆ Variable(). const TMVA::VariableInfo & TMVA::TransformationHandler::Variable ; (; UInt_t ; ivar); const. inlineprivate . Definition at line 122 of file TransformationHandler.h. ◆ WriteToStream(). void TMVA::TransformationHandler::WriteToStream ; (; std::ostream & ; o); const. write transformation to stream ; Definition at line 839 of file TransformationHandler.cxx. Member Data Documentation. ◆ fCallerName. TString TMVA::TransformationHandler::fCallerName. private . ! name of the caller for output ; Definition at line 136 of file TransformationHandler.h. ◆ fDataSetInfo. DataSetInfo& TMVA::TransformationHandler::fDataSetInfo. private . Definition at line 127 of file TransformationHandler.h. ◆ fLogger. MsgLogger* TMVA::TransformationHandler::fLogger. mutableprivate . ! message logger ; Definition at line 137 of file TransformationHandler.h. ◆ fNumC. Int_t TMVA::TransformationHandler::fNumC. private . number of categories (#classes +1) ; Definition at line 132 of file TransformationHandler.h. ◆ fRanking. std::vector<Ranking*> TMVA::TransformationHandler::fRanking. private . ! ranking object ; Definition at line 134 of file TransformationHandler.h. ◆ fRootBaseDir. TDirectory* TMVA::TransformationHandler::fRootBaseDir. private . ! if set put input var hists ; Definition at line 135 of file TransformationHandler.h. ◆ fTransformations. TList TMVA::TransformationHandler::fTransformations. private . Definition at line 128 of file TransformationHandler.h. ◆ fTransformationsReferenceClasses. std::vector< Int_t > TMVA::TransformationHandler::fTransformationsReferenceClasses. private . list of transformations ; Definition at line 129 of file TransformationHandler.h. ◆ fVariableStats. std::vector<std::vector<TMVA::TransformationHandler::VariableStat> > TMVA::TransformationHandler::fVariableStats,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TransformationHandler.html:11212,log,logger,11212,doc/master/classTMVA_1_1TransformationHandler.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TransformationHandler.html,1,['log'],['logger']
Testability,. ◆ fHeadPic. const TGPicture* TGScrollBar::fHeadPic. protected . picture in head (up or left arrow) ; Definition at line 81 of file TGScrollBar.h. ◆ fHighColor. Pixel_t TGScrollBar::fHighColor. protected . highlight color ; Definition at line 87 of file TGScrollBar.h. ◆ fPos. Int_t TGScrollBar::fPos. protected . logical current position ; Definition at line 74 of file TGScrollBar.h. ◆ fPsize. Int_t TGScrollBar::fPsize. protected . logical page size of scrollbar ; Definition at line 73 of file TGScrollBar.h. ◆ fRange. Int_t TGScrollBar::fRange. protected . logical upper range of scrollbar ; Definition at line 72 of file TGScrollBar.h. ◆ fRepeat. TTimer* TGScrollBar::fRepeat. protected . repeat rate timer (when mouse stays pressed) ; Definition at line 83 of file TGScrollBar.h. ◆ fSlider. TGScrollBarElement* TGScrollBar::fSlider. protected . slider ; Definition at line 80 of file TGScrollBar.h. ◆ fSliderRange. Int_t TGScrollBar::fSliderRange. protected . logical slider range ; Definition at line 76 of file TGScrollBar.h. ◆ fSliderSize. Int_t TGScrollBar::fSliderSize. protected . logical slider size ; Definition at line 75 of file TGScrollBar.h. ◆ fSmallInc. Int_t TGScrollBar::fSmallInc. protected . Small Increment in the sliding algorithm. ; Definition at line 77 of file TGScrollBar.h. ◆ fSubw. Window_t TGScrollBar::fSubw. protected . sub window in which mouse is pressed ; Definition at line 84 of file TGScrollBar.h. ◆ fTail. TGScrollBarElement* TGScrollBar::fTail. protected . tail button of scrollbar ; Definition at line 79 of file TGScrollBar.h. ◆ fTailPic. const TGPicture* TGScrollBar::fTailPic. protected . picture in tail (down or right arrow) ; Definition at line 82 of file TGScrollBar.h. ◆ fX0. Int_t TGScrollBar::fX0. protected . Definition at line 68 of file TGScrollBar.h. ◆ fXp. Int_t TGScrollBar::fXp. protected . Definition at line 69 of file TGScrollBar.h. ◆ fY0. Int_t TGScrollBar::fY0. protected . current slider position in pixels ; Definition at line 68 o,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGScrollBar.html:39541,log,logical,39541,doc/master/classTGScrollBar.html,https://root.cern,https://root.cern/doc/master/classTGScrollBar.html,1,['log'],['logical']
Testability,". ◆ operator-() [4/6]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator- ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). operation this = source1-source2 ; Definition at line 2376 of file TMatrixT.cxx. ◆ operator-() [5/6]. template<class Element > . TVectorT< Element > TMatrixTAutoloadOps::operator- ; (; const TVectorT< Element > & ; source1, . const TVectorT< Element > & ; source2 . ). Return source1-source2. ; Definition at line 1423 of file TVectorT.cxx. ◆ operator-() [6/6]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator- ; (; Element ; val, . const TMatrixT< Element > & ; source . ). operation this = val-source ; Definition at line 2396 of file TMatrixT.cxx. ◆ operator<() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator< ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 < source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator< ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). logical operation source1 < source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator< ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 < source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<=() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator<= ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 <= source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<=() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator<= ; (; const TMatrixT< Element ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:34157,log,logical,34157,doc/master/namespaceTMatrixTAutoloadOps.html,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html,1,['log'],['logical']
Testability,". ◆ setDropOut(). template<typename Iterator > . void TMVA::DNN::Settings::setDropOut ; (; Iterator ; begin, . Iterator ; end, . size_t ; _dropRepetitions . ). inline . set the drop-out configuration (layer-wise) ; Parameters. beginbegin of an array or vector denoting the drop-out probabilities for each layer ; endend of an array or vector denoting the drop-out probabilities for each layer ; _dropRepetitionsdenotes after how many repetitions the drop-out setting (which nodes are dropped out exactly) is changed . Definition at line 759 of file NeuralNet.h. ◆ setMonitoring(). void TMVA::DNN::Settings::setMonitoring ; (; std::shared_ptr< Monitoring > ; ptrMonitoring). inline . prepared for monitoring ; Definition at line 764 of file NeuralNet.h. ◆ setProgressLimits(). virtual void TMVA::DNN::Settings::setProgressLimits ; (; double ; minProgress = 0, . double ; maxProgress = 100 . ). inlinevirtual . Parameters. maxProgressfor monitoring and logging (set the current ""progress"" limits for the display of the progress); minProgressminimum value; maxProgressmaximum value . Definition at line 790 of file NeuralNet.h. ◆ startTestCycle(). virtual void TMVA::DNN::Settings::startTestCycle ; (; ). inlinevirtual . callback for monitoring and loggging ; Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 804 of file NeuralNet.h. ◆ startTrainCycle(). virtual void TMVA::DNN::Settings::startTrainCycle ; (; ). inlinevirtual . Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 782 of file NeuralNet.h. ◆ startTraining(). virtual void TMVA::DNN::Settings::startTraining ; (; ). inlinevirtual . Definition at line 795 of file NeuralNet.h. ◆ testIteration(). virtual void TMVA::DNN::Settings::testIteration ; (; ). inlinevirtual . callback for monitoring and loggging ; Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 806 of file NeuralNet.h. ◆ testRepetitions(). size_t TMVA::DNN::Settings::testRepetitions ; (; ); const. inline . how",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html:11486,log,logging,11486,doc/master/classTMVA_1_1DNN_1_1Settings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html,1,['log'],['logging']
Testability,". ◆ startTestCycle(). virtual void TMVA::DNN::Settings::startTestCycle ; (; ). inlinevirtual . callback for monitoring and loggging ; Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 804 of file NeuralNet.h. ◆ startTrainCycle(). virtual void TMVA::DNN::Settings::startTrainCycle ; (; ). inlinevirtual . Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 782 of file NeuralNet.h. ◆ startTraining(). virtual void TMVA::DNN::Settings::startTraining ; (; ). inlinevirtual . Definition at line 795 of file NeuralNet.h. ◆ testIteration(). virtual void TMVA::DNN::Settings::testIteration ; (; ). inlinevirtual . callback for monitoring and loggging ; Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 806 of file NeuralNet.h. ◆ testRepetitions(). size_t TMVA::DNN::Settings::testRepetitions ; (; ); const. inline . how often is the test data tested ; Definition at line 768 of file NeuralNet.h. ◆ testSample(). virtual void TMVA::DNN::Settings::testSample ; (; double ; , . double ; , . double ; , . double ;  . ). inlinevirtual . virtual function to be used for monitoring (callback) ; Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 781 of file NeuralNet.h. ◆ useMultithreading(). bool TMVA::DNN::Settings::useMultithreading ; (; ); const. inline . is multithreading turned on? ; Definition at line 815 of file NeuralNet.h. Member Data Documentation. ◆ count_dE. size_t TMVA::DNN::Settings::count_dE. Definition at line 843 of file NeuralNet.h. ◆ count_E. size_t TMVA::DNN::Settings::count_E. Definition at line 842 of file NeuralNet.h. ◆ count_mb_dE. size_t TMVA::DNN::Settings::count_mb_dE. Definition at line 845 of file NeuralNet.h. ◆ count_mb_E. size_t TMVA::DNN::Settings::count_mb_E. Definition at line 844 of file NeuralNet.h. ◆ fLearningRate. double TMVA::DNN::Settings::fLearningRate. Definition at line 852 of file NeuralNet.h. ◆ fMinimizerType. MinimizerType TMVA::DNN::Settings::fMinimizerType. Definiti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html:12662,test,testSample,12662,doc/master/classTMVA_1_1DNN_1_1Settings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html,1,['test'],['testSample']
Testability,"."" << Endl;; 1579 Log() << kDEBUG //<< Form(""Dataset[%s] : "",dsi.GetName()); 1580 << "" ..... Testing events are not renormalised nor included in the renormalisation factor! )""<< Endl;; 1581 ; 1582 for( UInt_t cls = 0, clsEnd = dsi.GetNClasses(); cls < clsEnd; ++cls ){; 1583 // renormFactor.at(cls) = ( (trainingSizePerClass.at(cls) + testingSizePerClass.at(cls))/; 1584 // (trainingSumWeightsPerClass.at(cls) + testingSumWeightsPerClass.at(cls)) );; 1585 //changed by Helge 27.5.2013; 1586 renormFactor.at(cls) = ((Float_t)trainingSizePerClass.at(cls) )/; 1587 (trainingSumWeightsPerClass.at(cls)) ;; 1588 }; 1589 }; 1590 else if (normMode == ""EQUALNUMEVENTS"") {; 1591 //changed by Helge 27.5.2013 What on earth was done here before? I still remember the idea behind this which apparently was; 1592 //NOT understood by the 'programmer' :) .. the idea was to have SAME amount of effective TRAINING data for signal and background.; 1593 //done here was something like having each data source normalized to its number of entries and this even for training+testing together.; 1594 // what should this have been good for ???; 1595 ; 1596 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Weight renormalisation mode: \""EqualNumEvents\"": renormalises all event classes ..."" << Endl;; 1597 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" such that the effective (weighted) number of events in each class is the same "" << Endl;; 1598 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" (and equals the number of events (entries) given for class=0 )"" << Endl;; 1599 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""... i.e. such that Sum[i=1..N_j]{w_i} = N_classA, j=classA, classB, ..."" << Endl;; 1600 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""... (note that N_j is the sum of TRAINING events"" << Endl;; 1601 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" ..... Testing events are not renormalised nor included in the renormalisation fact",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:73581,test,testing,73581,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['test'],['testing']
Testability,".(3.0 MB/s); 4.02 s.(4.8 MB/s); 0.90 s.(21.3 MB/s); 0.90 s.(21.3 MB/s). Comp = 2; Split = 1; 13.78 MB; 11.34s.(1.7 MB/s); 9.51 s.(2.0 MB/s); 2.17 s.(8.8 MB/s); 2.17 s.(8.8 MB/s). The Total Time is the real time in seconds to run the program. Effective time is the real time minus the time spent in non I/O operations (essentially the random number generator). The program Event generates in average 600 tracks per event. Each track has 17 data members. The read benchmark runs in the interactive version of ROOT. The ‘Total Time to Read All’ is the real time reported by the execution of the script &ROOTSYS/test/eventa.; We did not correct this time for the overhead coming from the interpreter itself. The Total time to read sample is the execution time of the script $ROOTSYS/test/eventb. This script loops on all events. For each event, the branch containing the number of tracks is read. In case the number of tracks is less than 585, the full event is read in memory. This test is obviously not possible in non-split mode. In non-split mode, the full event must be read in memory. The times reported in the table correspond to complete I/O operations necessary to deal with machine independent binary files. On Linux, this also includes byte-swapping operations. The ROOT file allows for direct access to any event in the file and direct access to any part of an event when split=1.; Note also that the uncompressed file generated with split=0 is 48.7 Mbytes and only 47.17 Mbytes for the option split=1. The difference in size is due to the object identification mechanism overhead when the event is written to a single buffer. This overhead does not exist in split mode because the branch buffers are optimized for homogeneous data types. You can run the test programs on your architecture. The program Event will report the write performance. You can measure the read performance by executing the scripts eventa and eventb. The performance depends not only of the processor type, but also of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:650200,test,test,650200,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['test']
Testability,"...................................................*; *Br 3 :y : y/F *; *Entries : 8460 : Total Size= 34451 bytes File Size = 28757 *; *Baskets : 2 : Basket Size= 32000 bytes Compression= 1.18 *; *............................................................................*; *Br 4 :z : z/F *; *Entries : 8460 : Total Size= 34451 bytes File Size = 30674 *; *Baskets : 2 : Basket Size= 32000 bytes Compression= 1.11 *; *............................................................................*; nok = 8460, fentries=8460; . ; ; #include ""TTree.h""; #include ""TFile.h""; #include ""TRandom.h""; #include ""TTree.h""; #include ""TTree.h""; ; Int_t Run, Event;; Float_t x,y,z;; ; void CreateParentTree() {; // create a simple TTree with 5 branches; // Two branches (""Run"" and ""Event"") will be used to index the Tree; TFile *f = new TFile(""treeparent.root"",""recreate"");; TTree *T = new TTree(""T"",""test friend trees"");; T->Branch(""Run"",&Run,""Run/I"");; T->Branch(""Event"",&Event,""Event/I"");; T->Branch(""x"",&x,""x/F"");; T->Branch(""y"",&y,""y/F"");; T->Branch(""z"",&z,""z/F"");; TRandom r;; for (Int_t i=0;i<10000;i++) {; if (i < 5000) Run = 1;; else Run = 2;; Event = i;; x = r.Gaus(10,1);; y = r.Gaus(20,2);; z = r.Landau(2,1);; T->Fill();; }; T->Print();; T->Write();; delete f;; }; void CreateFriendTree() {; // Open the file created by CreateParentTree; // Copy a subset of the TTree into a new TTree; // (see also tutorials copytree.C, copytree2.C and copytree3.C); // Create an index on the new TTree (""Run"",""Event""); // Write the new TTree (including its index); ; TFile *f = new TFile(""treeparent.root"");; TTree *T = (TTree*)f->Get(""T"");; TFile *ff = new TFile(""treefriend.root"",""recreate"");; TTree *TF = T->CopyTree(""z<10"");; TF->SetName(""TF"");; TF->BuildIndex(""Run"",""Event"");; TF->Write();; TF->Print();; delete ff;; }; ; void CompareTrees() {; // The two TTrees created above are compared.; // The subset of entries in the small TTree must be identical; // to the entries in the original TTree.; ; TFile *f = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/treefriend_8C.html:3973,test,test,3973,doc/master/treefriend_8C.html,https://root.cern,https://root.cern/doc/master/treefriend_8C.html,1,['test'],['test']
Testability,".0 . Example: Interval(.5,1.,6); [ min max ]; ------------------------------------------------------------; | | | | | |; .5 .6 .7 .8 .9 1.0; bin 0 1 2 3 4 5. . Function Members (Methods); public:. virtual~Interval(); static TClass*Class(); virtual Double_tGetElement(Int_t position) const; virtual Double_tGetMax() const; virtual Double_tGetMean() const; virtual Double_tGetMin() const; virtual Int_tGetNbins() const; virtual Double_tGetRndm(TRandom3&) const; virtual Double_tGetStepSize(Int_t iBin = 0) const; virtual Double_tGetWidth() const; TMVA::IntervalInterval(const TMVA::Interval& other); TMVA::IntervalInterval(Double_t min, Double_t max, Int_t nbins = 0); virtual TClass*IsA() const; TMVA::Interval&operator=(const TMVA::Interval&); virtual voidPrint(ostream& os) const; voidSetMax(Double_t m); voidSetMin(Double_t m); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. TMVA::MsgLogger&Log() const. Data Members; protected:. Double_tfMaxthe constraints of the Interval; Double_tfMinthe constraints of the Interval; Int_tfNbinswhen >0 : number of bins (discrete interval); when ==0 continuous interval. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Interval(Double_t min, Double_t max, Int_t nbins = 0); defines minimum and maximum of an interval; when nbins > 0, interval describes a discrete distribution (equally distributed in the interval); when nbins == 0, interval describes a continous interval. Interval(const TMVA::Interval& other). ~Interval(); destructor. Double_t GetElement(Int_t position) const; calculates the value of the ""number"" bin in a discrete interval.; Parameters:; Double_t position. Double_t GetStepSize(Int_t iBin = 0) const; retuns the step size between the numbers of a ""discrete Interval"". Double_t GetRndm(TRandom3& ) const; get uniformely distributed number within interval. Double_t GetWidth() const. Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__Interval.html:2001,Log,Log,2001,root/html602/TMVA__Interval.html,https://root.cern,https://root.cern/root/html602/TMVA__Interval.html,2,['Log'],['Log']
Testability,".0, 127.0, 140.0, 175.0,; 2198 210.0, 252.0, 264.0, 294.0, 346.0, 420.0,; 2199 462.0, 606.0, 672.0, 707.0, 735.0, 889.0,; 2200 932.0, 966.0, 1141.0, 1182.0, 1278.0, 1740.0,; 2201 2520.0, 5040.0};; 2202 Double_t e = 5e-7;; 2203 Double_t aa = 0.6931471806;; 2204 Int_t maxit = 20;; 2205 Double_t ch, p1, p2, q, t, a, b, x;; 2206 Double_t s1, s2, s3, s4, s5, s6;; 2207 ; 2208 if (ndf <= 0) return 0;; 2209 ; 2210 Double_t g = TMath::LnGamma(0.5*ndf);; 2211 ; 2212 Double_t xx = 0.5 * ndf;; 2213 Double_t cp = xx - 1;; 2214 if (ndf >= TMath::Log(p)*(-c[5])){; 2215 //starting approximation for ndf less than or equal to 0.32; 2216 if (ndf > c[3]) {; 2217 x = TMath::NormQuantile(p);; 2218 //starting approximation using Wilson and Hilferty estimate; 2219 p1=c[2]/ndf;; 2220 ch = ndf*TMath::Power((x*TMath::Sqrt(p1) + 1 - p1), 3);; 2221 if (ch > c[6]*ndf + 6); 2222 ch = -2 * (TMath::Log(1-p) - cp * TMath::Log(0.5 * ch) + g);; 2223 } else {; 2224 ch = c[4];; 2225 a = TMath::Log(1-p);; 2226 do{; 2227 q = ch;; 2228 p1 = 1 + ch * (c[7]+ch);; 2229 p2 = ch * (c[9] + ch * (c[8] + ch));; 2230 t = -0.5 + (c[7] + 2 * ch) / p1 - (c[9] + ch * (c[10] + 3 * ch)) / p2;; 2231 ch = ch - (1 - TMath::Exp(a + g + 0.5 * ch + cp * aa) *p2 / p1) / t;; 2232 }while (TMath::Abs(q/ch - 1) > c[1]);; 2233 }; 2234 } else {; 2235 ch = TMath::Power((p * xx * TMath::Exp(g + xx * aa)),(1./xx));; 2236 if (ch < e) return ch;; 2237 }; 2238//call to algorithm AS 239 and calculation of seven term Taylor series; 2239 for (Int_t i=0; i<maxit; i++){; 2240 q = ch;; 2241 p1 = 0.5 * ch;; 2242 p2 = p - TMath::Gamma(xx, p1);; 2243 ; 2244 t = p2 * TMath::Exp(xx * aa + g + p1 - cp * TMath::Log(ch));; 2245 b = t / ch;; 2246 a = 0.5 * t - b * cp;; 2247 s1 = (c[19] + a * (c[17] + a * (c[14] + a * (c[13] + a * (c[12] +c[11] * a))))) / c[24];; 2248 s2 = (c[24] + a * (c[29] + a * (c[32] + a * (c[33] + c[35] * a)))) / c[37];; 2249 s3 = (c[19] + a * (c[25] + a * (c[28] + c[31] * a))) / c[37];; 2250 s4 = (c[20] + a * (c[27] + c[34] * a) + ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8cxx_source.html:74222,Log,Log,74222,doc/master/TMath_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMath_8cxx_source.html,1,['Log'],['Log']
Testability,".0/eval : 0.0;; 287 }; 288 ; 289 if ( fErrorType == kAsymError ); 290 { // return 1/2(el + eh); 291 assert( !fDataErrorPtr && fDataErrorHighPtr && fDataErrorLowPtr );; 292 assert( fDataError.empty() );; 293 assert( fDataErrorHigh.empty() || &fDataErrorHigh.front() == fDataErrorHighPtr );; 294 assert( fDataErrorLow.empty() || &fDataErrorLow.front() == fDataErrorLowPtr );; 295 assert( fDataErrorLow.empty() == fDataErrorHigh.empty() );; 296 ; 297 double eh = fDataErrorHighPtr[ ipoint ];; 298 double el = fDataErrorLowPtr[ ipoint ];; 299 ; 300 return (el+eh) / 2.0;; 301 }; 302 ; 303 assert( fErrorType == kCoordError );; 304 return fDataErrorPtr[ ipoint ];; 305 }; 306 ; 307 void GetAsymError( unsigned int ipoint, double& lowError, double& highError ) const; 308 {; 309 assert( fErrorType == kAsymError );; 310 assert( !fDataErrorPtr && fDataErrorHighPtr && fDataErrorLowPtr );; 311 assert( fDataError.empty() );; 312 assert( fDataErrorHigh.empty() || &fDataErrorHigh.front() == fDataErrorHighPtr );; 313 assert( fDataErrorLow.empty() || &fDataErrorLow.front() == fDataErrorLowPtr );; 314 assert( fDataErrorLow.empty() == fDataErrorHigh.empty() );; 315 ; 316 lowError = fDataErrorLowPtr[ ipoint ];; 317 highError = fDataErrorHighPtr[ ipoint ];; 318 }; 319 ; 320 /**; 321 Return the inverse of error on the value for the given fit point; 322 useful when error in the coordinates are not stored and then this is used directly this as the weight in; 323 the least square function; 324 */; 325 double InvError( unsigned int ipoint ) const; 326 {; 327 assert( ipoint < fMaxPoints );; 328 assert( kValueError == fErrorType || kCoordError == fErrorType ||; 329 kAsymError == fErrorType || kNoError == fErrorType );; 330 ; 331 if ( fErrorType == kNoError ); 332 {; 333 assert( !fDataErrorPtr && !fDataErrorHighPtr && !fDataErrorLowPtr );; 334 assert( fDataError.empty() && fDataErrorHigh.empty() && fDataErrorLow.empty() );; 335 return 1.0;; 336 }; 337 ; 338 if ( fErrorType == kValueError ) // need to inv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8h_source.html:10843,assert,assert,10843,doc/master/BinData_8h_source.html,https://root.cern,https://root.cern/doc/master/BinData_8h_source.html,1,['assert'],['assert']
Testability,.00176094 43680.2 2; : 887 Minimum Test error found - save the configuration ; : 887 | 5.55202 8.05484 0.0201465 0.00184145 43703.7 0; : 888 Minimum Test error found - save the configuration ; : 888 | 5.4009 7.86368 0.0201494 0.00184759 43711.4 0; : 889 | 5.09006 7.93881 0.0200766 0.00176618 43691 1; : 890 | 5.16257 8.05551 0.0200625 0.00176866 43730.7 2; : 891 Minimum Test error found - save the configuration ; : 891 | 5.07326 7.82028 0.0201532 0.0018382 43680.1 0; : 892 | 5.14088 7.89491 0.0200852 0.00179174 43731.4 1; : 893 Minimum Test error found - save the configuration ; : 893 | 5.13302 7.67646 0.0201541 0.00183919 43680.3 0; : 894 | 5.44229 7.83993 0.0200562 0.00176505 43736.9 1; : 895 | 5.40474 8.2327 0.0200223 0.00176151 43809.8 2; : 896 Minimum Test error found - save the configuration ; : 896 | 5.30823 7.62628 0.0201123 0.00182273 43740.8 0; : 897 | 6.20081 8.04326 0.0200652 0.00176931 43725.7 1; : 898 | 5.99101 8.0649 0.0200274 0.00175928 43792 2; : 899 Minimum Test error found - save the configuration ; : 899 | 5.1416 7.3348 0.0201215 0.00182199 43717.1 0; : 900 | 4.88699 7.46821 0.0200416 0.0017612 43762.6 1; : 901 Minimum Test error found - save the configuration ; : 901 | 4.92918 7.2702 0.0200754 0.00181642 43814.2 0; : 902 Minimum Test error found - save the configuration ; : 902 | 5.04871 7.17895 0.0200791 0.00180807 43785.1 0; : 903 | 4.88551 7.21813 0.0200213 0.00174992 43784.3 1; : 904 | 4.98683 7.44507 0.0200553 0.00174858 43699.9 2; : 905 | 4.82992 7.45009 0.0202406 0.00175807 43284.1 3; : 906 | 4.86112 7.78644 0.0202162 0.00175457 43333 4; : 907 Minimum Test error found - save the configuration ; : 907 | 4.76534 7.04169 0.0202678 0.00183052 43390.4 0; : 908 | 4.77659 7.36078 0.0201903 0.00174867 43380.2 1; : 909 | 5.40526 9.09975 0.0204121 0.00175613 42881.7 2; : 910 | 5.23108 7.3695 0.0200572 0.0017555 43711.7 3; : 911 | 4.9718 7.21676 0.0200739 0.00175828 43678.5 4; : 912 Minimum Test error found - save the configuration ; : 912 | 4.64478 ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:105923,Test,Test,105923,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,.0017954 42924.1 1; : 970 | 3.39152 4.92875 0.0207012 0.00184125 42417.9 2; : 971 | 3.38481 4.91243 0.0205923 0.00181714 42609.4 3; : 972 | 3.49443 4.93416 0.0204303 0.00180084 42942.7 4; : 973 | 3.50169 4.88411 0.0201535 0.00176496 43505.4 5; : 974 | 3.70493 4.95915 0.0200555 0.00176513 43738.9 6; : 975 Minimum Test error found - save the configuration ; : 975 | 3.52504 4.65912 0.0202218 0.00185299 43552 0; : 976 | 3.7346 5.23443 0.0200603 0.00176255 43721.2 1; : 977 | 3.73856 4.9727 0.0200443 0.00176151 43757 2; : 978 | 3.60727 4.99113 0.0200479 0.00175633 43736 3; : 979 | 3.40672 4.84357 0.0200357 0.00175685 43766.5 4; : 980 | 3.44899 4.83288 0.0200548 0.0017499 43704.2 5; : 981 | 3.46445 4.72048 0.0203135 0.00176046 43119.7 6; : 982 Minimum Test error found - save the configuration ; : 982 | 3.46604 4.64127 0.0202116 0.00183381 43530.8 0; : 983 Minimum Test error found - save the configuration ; : 983 | 3.37896 4.59559 0.0201715 0.00182642 43608.5 0; : 984 Minimum Test error found - save the configuration ; : 984 | 3.36213 4.34126 0.0202597 0.00185498 43467.1 0; : 985 | 3.39032 4.51659 0.0201503 0.00185184 43719.5 1; : 986 | 3.5234 4.95577 0.0201762 0.0017578 43434.8 2; : 987 | 3.50466 4.60061 0.0201538 0.00175522 43481.6 3; : 988 | 3.61316 4.68965 0.0201071 0.00176 43603.6 4; : 989 | 3.88349 5.24185 0.0200475 0.00175499 43733.8 5; : 990 | 4.0647 4.52576 0.020036 0.00175545 43762.3 6; : 991 | 3.77396 5.32769 0.0200783 0.00175786 43667.1 7; : 992 | 3.45322 4.61211 0.0200841 0.00175232 43640 8; : 993 | 3.32586 4.54016 0.0200585 0.00176018 43719.9 9; : 994 | 3.54317 4.65875 0.0201539 0.00181263 43617.4 10; : 995 | 3.38008 5.03795 0.0206532 0.00179392 42419.4 11; : 996 | 3.40103 4.41295 0.0204644 0.00176564 42783.5 12; : 997 | 3.23461 4.8031 0.0203306 0.00176616 43093.1 13; : 998 | 3.41797 4.46788 0.0203618 0.00175568 42996.7 14; : 999 Minimum Test error found - save the configuration ; : 999 | 3.31412 4.14973 0.0202938 0.00187677 43438 0; : 1000 | 3.20867 4.17264 0.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:112133,Test,Test,112133,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,.00182919 43743 0; : 792 | 11.3858 15.3308 0.0200358 0.001762 43778.5 1; : 793 Minimum Test error found - save the configuration ; : 793 | 11.148 14.9168 0.0201055 0.00182242 43756.2 0; : 794 Minimum Test error found - save the configuration ; : 794 | 10.9366 14.9107 0.0201153 0.00182387 43736.3 0; : 795 | 11.1392 14.953 0.020041 0.00176266 43767.6 1; : 796 | 11.1019 15.4101 0.0200549 0.00175791 43723.2 2; : 797 | 11.12 15.292 0.0200628 0.00175972 43708.5 3; : 798 | 10.8935 14.9786 0.0200585 0.0017545 43706.3 4; : 799 Minimum Test error found - save the configuration ; : 799 | 10.7942 14.6749 0.0201633 0.00182171 43616.6 0; : 800 Minimum Test error found - save the configuration ; : 800 | 10.3317 14.1583 0.0201165 0.00182126 43727.2 0; : 801 | 10.3503 14.2866 0.0200523 0.00175781 43729 1; : 802 | 10.3453 15.2815 0.0200406 0.00175563 43751.8 2; : 803 | 10.2123 14.6873 0.0200478 0.00175638 43736.3 3; : 804 | 10.1133 14.2109 0.0201368 0.00176313 43540.5 4; : 805 Minimum Test error found - save the configuration ; : 805 | 10.3447 13.9911 0.0201319 0.00182751 43705.3 0; : 806 | 10.3558 15.0191 0.0200537 0.00175652 43722.7 1; : 807 Minimum Test error found - save the configuration ; : 807 | 9.87362 13.4104 0.0202002 0.0018848 43679 0; : 808 | 9.75883 13.5009 0.0202529 0.00175832 43255.9 1; : 809 | 9.54989 13.8103 0.0201225 0.00175709 43560.3 2; : 810 Minimum Test error found - save the configuration ; : 810 | 9.43647 13.1509 0.0201534 0.00182442 43646.8 0; : 811 | 9.40272 13.8504 0.0200559 0.00175676 43717.9 1; : 812 Minimum Test error found - save the configuration ; : 812 | 9.42328 13.0239 0.0202708 0.00183859 43402.3 0; : 813 | 9.26754 13.347 0.0200488 0.00175838 43738.7 1; : 814 | 9.30693 13.2737 0.0200298 0.0017551 43776.4 2; : 815 | 9.2453 13.4411 0.0200383 0.0017608 43769.8 3; : 816 Minimum Test error found - save the configuration ; : 816 | 8.97729 12.8621 0.0200894 0.00181862 43785.8 0; : 817 | 9.05512 13.256 0.0200147 0.0017603 43825 1; : 818 Minimum Test error ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:98734,Test,Test,98734,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,".0050000000000000001, Option_t* axis = ""X""); voidSetLabelSize(Float_t size = 0.040000000000000001, Option_t* axis = ""X""); voidSetLegendBorderSize(Width_t size = 4); voidSetLegendFillColor(Color_t color = 0); voidSetLegendFont(Style_t font = 62); voidSetLegendTextSize(Double_t size = 0.); voidSetLegoInnerR(Float_t rad = 0.5); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); voidSetLineScalePS(Float_t scale = 3); virtual voidTAttLine::SetLineStyle(Style_t lstyle); voidSetLineStyleString(Int_t i, const char* text); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t mcolor = 1); virtual voidTAttMarker::SetMarkerColorAlpha(Color_t mcolor, Float_t malpha); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidSetNdivisions(Int_t n = 510, Option_t* axis = ""X""); voidSetNumberContours(Int_t number = 20); static voidTObject::SetObjectStat(Bool_t stat); voidSetOptDate(Int_t datefl = 1); voidSetOptFile(Int_t file = 1); voidSetOptFit(Int_t fit = 1); voidSetOptLogx(Int_t logx = 1); voidSetOptLogy(Int_t logy = 1); voidSetOptLogz(Int_t logz = 1); voidSetOptStat(Int_t stat = 1); voidSetOptStat(Option_t* stat); voidSetOptTitle(Int_t tit = 1); voidSetPadBorderMode(Int_t mode = 1); voidSetPadBorderSize(Width_t size = 1); voidSetPadBottomMargin(Float_t margin = 0.10000000000000001); voidSetPadColor(Color_t color = 19); voidSetPadGridX(Bool_t gridx); voidSetPadGridY(Bool_t gridy); voidSetPadLeftMargin(Float_t margin = 0.10000000000000001); voidSetPadRightMargin(Float_t margin = 0.10000000000000001); voidSetPadTickX(Int_t tickx); voidSetPadTickY(Int_t ticky); voidSetPadTopMargin(Flo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TStyle.html:13294,log,logx,13294,root/html604/TStyle.html,https://root.cern,https://root.cern/root/html604/TStyle.html,3,['log'],"['logx', 'logy', 'logz']"
Testability,".070; --- Created root file: ""TMVApp.root"" containing the MVA output histograms; ==> TMVAClassificationApplication is done!; ; ; ; #include <cstdlib>; #include <vector>; #include <iostream>; #include <map>; #include <string>; ; #include ""TFile.h""; #include ""TTree.h""; #include ""TString.h""; #include ""TSystem.h""; #include ""TROOT.h""; #include ""TH1F.h""; #include ""TStopwatch.h""; ; #include ""TMVA/Tools.h""; #include ""TMVA/Reader.h""; #include ""TMVA/MethodCuts.h""; ; // two types of category methods are implemented; Bool_t UseOffsetMethod = kTRUE;; ; void TMVAClassificationCategoryApplication(); {; // ---------------------------------------------------------------; // default MVA methods to be trained + tested; std::map<std::string,int> Use;; //; Use[""LikelihoodCat""] = 1;; Use[""FisherCat""] = 1;; // ---------------------------------------------------------------; ; std::cout << std::endl; << ""==> Start TMVAClassificationCategoryApplication"" << std::endl;; ; // Create the Reader object; ; TMVA::Reader *reader = new TMVA::Reader( ""!Color:!Silent"" );; ; // Create a set of variables and spectators and declare them to the reader; // - the variable names MUST corresponds in name and type to those given in the weight file(s) used; Float_t var1, var2, var3, var4, eta;; reader->AddVariable( ""var1"", &var1 );; reader->AddVariable( ""var2"", &var2 );; reader->AddVariable( ""var3"", &var3 );; reader->AddVariable( ""var4"", &var4 );; ; reader->AddSpectator( ""eta"", &eta );; ; // Book the MVA methods; ; for (std::map<std::string,int>::iterator it = Use.begin(); it != Use.end(); it++) {; if (it->second) {; TString methodName = it->first + "" method"";; TString weightfile = ""dataset/weights/TMVAClassificationCategory_"" + TString(it->first) + "".weights.xml"";; reader->BookMVA( methodName, weightfile );; }; }; ; // Book output histograms; UInt_t nbin = 100;; std::map<std::string,TH1*> hist;; hist[""LikelihoodCat""] = new TH1F( ""MVA_LikelihoodCat"", ""MVA_LikelihoodCat"", nbin, -1, 0.9999 );; hist[""FisherCat""] =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassificationCategoryApplication_8C.html:2913,test,tested,2913,doc/master/TMVAClassificationCategoryApplication_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassificationCategoryApplication_8C.html,1,['test'],['tested']
Testability,.1 0; : 635 Minimum Test error found - save the configuration ; : 635 | 77.3887 55.223 0.020166 0.00184577 43667.6 0; : 636 Minimum Test error found - save the configuration ; : 636 | 76.4488 55.0573 0.020202 0.00188181 43667.6 0; : 637 Minimum Test error found - save the configuration ; : 637 | 75.4894 54.0711 0.0202555 0.00186268 43495.3 0; : 638 Minimum Test error found - save the configuration ; : 638 | 74.5839 53.0373 0.0201113 0.00181775 43731.4 0; : 639 Minimum Test error found - save the configuration ; : 639 | 73.497 52.6629 0.0200838 0.00181639 43793.9 0; : 640 Minimum Test error found - save the configuration ; : 640 | 72.4195 52.0402 0.0201153 0.00181887 43724.4 0; : 641 | 71.5077 52.3492 0.0200565 0.00175616 43715 1; : 642 Minimum Test error found - save the configuration ; : 642 | 70.8829 51.1798 0.0201079 0.00181215 43725.9 0; : 643 Minimum Test error found - save the configuration ; : 643 | 69.8143 50.8726 0.0201142 0.00180555 43695.1 0; : 644 Minimum Test error found - save the configuration ; : 644 | 68.806 50.1244 0.0201666 0.00186273 43706.7 0; : 645 Minimum Test error found - save the configuration ; : 645 | 67.8562 49.8828 0.0202418 0.00183622 43465.2 0; : 646 Minimum Test error found - save the configuration ; : 646 | 67.0733 49.0958 0.0205161 0.00187288 42911 0; : 647 Minimum Test error found - save the configuration ; : 647 | 66.0907 48.4839 0.0203074 0.00181472 43260.4 0; : 648 Minimum Test error found - save the configuration ; : 648 | 65.1425 47.9895 0.0205925 0.00181541 42605 0; : 649 Minimum Test error found - save the configuration ; : 649 | 64.2291 47.827 0.0205836 0.00185514 42715.8 0; : 650 Minimum Test error found - save the configuration ; : 650 | 63.5181 47.2461 0.0203914 0.00184161 43127.1 0; : 651 Minimum Test error found - save the configuration ; : 651 | 62.641 46.7417 0.020143 0.00182812 43680.3 0; : 652 Minimum Test error found - save the configuration ; : 652 | 61.875 46.3421 0.0201124 0.00182035 43734.8 0; : 653 Minimum T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:83492,Test,Test,83492,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,.1 2; : 1018 | 3.2792 3.85661 0.0202747 0.00181943 43348.2 3; : 1019 | 3.37748 4.22044 0.0208054 0.00183497 42170.8 4; : 1020 | 3.48034 4.07947 0.020447 0.00177824 42852.4 5; : 1021 | 3.50059 4.11275 0.020219 0.00176964 43361.9 6; : 1022 | 3.15174 3.86168 0.0203283 0.00176093 43086.3 7; : 1023 | 3.4694 4.52782 0.0204007 0.00179059 42987.4 8; : 1024 Minimum Test error found - save the configuration ; : 1024 | 3.57333 3.68346 0.0207199 0.00186469 42428.5 0; : 1025 | 3.1448 3.86932 0.020257 0.0018083 43363.6 1; : 1026 | 3.14966 3.71614 0.0204412 0.00177219 42851.8 2; : 1027 Minimum Test error found - save the configuration ; : 1027 | 3.06278 3.47888 0.0204485 0.00186251 43043.1 0; : 1028 | 3.22518 4.06346 0.0201016 0.00179042 43689.3 1; : 1029 | 3.47015 5.10048 0.0212551 0.0017691 41055.1 2; : 1030 | 3.28552 3.92634 0.0200717 0.0017618 43692.2 3; : 1031 | 3.09879 3.64842 0.0200603 0.0017557 43704.9 4; : 1032 | 3.23242 4.45782 0.0201318 0.0017893 43614.6 5; : 1033 Minimum Test error found - save the configuration ; : 1033 | 3.57665 3.43738 0.0206178 0.00193324 42816.1 0; : 1034 | 3.26951 3.4755 0.0201231 0.00175901 43563.3 1; : 1035 | 3.0748 4.32816 0.0202002 0.00180771 43496 2; : 1036 | 3.05868 3.88772 0.0202082 0.00176323 43372.3 3; : 1037 | 3.11243 3.8552 0.0200473 0.00176925 43768.4 4; : 1038 | 2.97479 4.01382 0.020048 0.00176307 43752 5; : 1039 | 3.15714 3.85081 0.0200388 0.00176348 43774.8 6; : 1040 | 2.97124 3.72013 0.0200295 0.00176294 43795.8 7; : 1041 | 2.92938 3.63611 0.020078 0.00179099 43746.9 8; : 1042 | 3.04184 3.72584 0.0202124 0.00176555 43367.8 9; : 1043 | 3.24904 3.46339 0.0200395 0.00176046 43765.9 10; : 1044 | 3.08383 3.85222 0.0200574 0.0017582 43717.6 11; : 1045 | 3.00904 3.46043 0.0200555 0.00175872 43723.6 12; : 1046 Minimum Test error found - save the configuration ; : 1046 | 2.89922 3.28968 0.0204754 0.00188349 43029.5 0; : 1047 | 3.06628 3.80261 0.0206565 0.00177157 42361.9 1; : 1048 | 3.0482 4.21427 0.0203272 0.00175981 43086.2 2; : 1049 | 3.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:115352,Test,Test,115352,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,".10000000000000001)MENU ; voidTGraph2D::SetMarginBinsContent(Double_t z = 0.)MENU ; virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t mcolor = 1); virtual voidTAttMarker::SetMarkerColorAlpha(Color_t mcolor, Float_t malpha); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); voidTGraph2D::SetMaximum(Double_t maximum = -1111)MENU ; voidTGraph2D::SetMaxIter(Int_t n = 100000)MENU ; voidTGraph2D::SetMinimum(Double_t minimum = -1111)MENU ; virtual voidTGraph2D::SetName(const char* name)MENU ; virtual voidTGraph2D::SetNameTitle(const char* name, const char* title); voidTGraph2D::SetNpx(Int_t npx = 40)MENU ; voidTGraph2D::SetNpy(Int_t npx = 40)MENU ; static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoint(Int_t i, Double_t x, Double_t y, Double_t z); virtual voidSetPointError(Int_t i, Double_t ex, Double_t ey, Double_t ez); virtual voidTGraph2D::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraph2DErrors(); TGraph2DErrors(Int_t n); TGraph2DErrors(const TGraph2DErrors&); TGraph2DErrors(Int_t n, Double_t* x, Double_t* y, Double_t* z, Double_t* ex = 0, Double_t* ey = 0, Double_t* ez = 0, Option_t* option = """"); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTGraph2D::Build(Int_t n); virtual voidTObject::DoError(int ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraph2DErrors.html:9988,Test,TestBit,9988,root/html602/TGraph2DErrors.html,https://root.cern,https://root.cern/root/html602/TGraph2DErrors.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,.2 0; : 634 Minimum Test error found - save the configuration ; : 634 | 78.6493 55.4759 0.0202109 0.00182609 43514.1 0; : 635 Minimum Test error found - save the configuration ; : 635 | 77.3887 55.223 0.020166 0.00184577 43667.6 0; : 636 Minimum Test error found - save the configuration ; : 636 | 76.4488 55.0573 0.020202 0.00188181 43667.6 0; : 637 Minimum Test error found - save the configuration ; : 637 | 75.4894 54.0711 0.0202555 0.00186268 43495.3 0; : 638 Minimum Test error found - save the configuration ; : 638 | 74.5839 53.0373 0.0201113 0.00181775 43731.4 0; : 639 Minimum Test error found - save the configuration ; : 639 | 73.497 52.6629 0.0200838 0.00181639 43793.9 0; : 640 Minimum Test error found - save the configuration ; : 640 | 72.4195 52.0402 0.0201153 0.00181887 43724.4 0; : 641 | 71.5077 52.3492 0.0200565 0.00175616 43715 1; : 642 Minimum Test error found - save the configuration ; : 642 | 70.8829 51.1798 0.0201079 0.00181215 43725.9 0; : 643 Minimum Test error found - save the configuration ; : 643 | 69.8143 50.8726 0.0201142 0.00180555 43695.1 0; : 644 Minimum Test error found - save the configuration ; : 644 | 68.806 50.1244 0.0201666 0.00186273 43706.7 0; : 645 Minimum Test error found - save the configuration ; : 645 | 67.8562 49.8828 0.0202418 0.00183622 43465.2 0; : 646 Minimum Test error found - save the configuration ; : 646 | 67.0733 49.0958 0.0205161 0.00187288 42911 0; : 647 Minimum Test error found - save the configuration ; : 647 | 66.0907 48.4839 0.0203074 0.00181472 43260.4 0; : 648 Minimum Test error found - save the configuration ; : 648 | 65.1425 47.9895 0.0205925 0.00181541 42605 0; : 649 Minimum Test error found - save the configuration ; : 649 | 64.2291 47.827 0.0205836 0.00185514 42715.8 0; : 650 Minimum Test error found - save the configuration ; : 650 | 63.5181 47.2461 0.0203914 0.00184161 43127.1 0; : 651 Minimum Test error found - save the configuration ; : 651 | 62.641 46.7417 0.020143 0.00182812 43680.3 0; : 652 Minimum ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:83378,Test,Test,83378,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,.2 5; : 1012 | 3.24301 4.1309 0.0202482 0.00178612 43332 6; : 1013 | 3.47685 4.13785 0.0205714 0.00178247 42578.3 7; : 1014 | 3.38367 4.59532 0.0203076 0.00178189 43183.2 8; : 1015 Minimum Test error found - save the configuration ; : 1015 | 3.15343 3.81668 0.0204522 0.00185272 43011.9 0; : 1016 | 2.99441 4.01707 0.0202697 0.00183758 43402.5 1; : 1017 | 3.3956 4.54944 0.0201133 0.00176644 43604.1 2; : 1018 | 3.2792 3.85661 0.0202747 0.00181943 43348.2 3; : 1019 | 3.37748 4.22044 0.0208054 0.00183497 42170.8 4; : 1020 | 3.48034 4.07947 0.020447 0.00177824 42852.4 5; : 1021 | 3.50059 4.11275 0.020219 0.00176964 43361.9 6; : 1022 | 3.15174 3.86168 0.0203283 0.00176093 43086.3 7; : 1023 | 3.4694 4.52782 0.0204007 0.00179059 42987.4 8; : 1024 Minimum Test error found - save the configuration ; : 1024 | 3.57333 3.68346 0.0207199 0.00186469 42428.5 0; : 1025 | 3.1448 3.86932 0.020257 0.0018083 43363.6 1; : 1026 | 3.14966 3.71614 0.0204412 0.00177219 42851.8 2; : 1027 Minimum Test error found - save the configuration ; : 1027 | 3.06278 3.47888 0.0204485 0.00186251 43043.1 0; : 1028 | 3.22518 4.06346 0.0201016 0.00179042 43689.3 1; : 1029 | 3.47015 5.10048 0.0212551 0.0017691 41055.1 2; : 1030 | 3.28552 3.92634 0.0200717 0.0017618 43692.2 3; : 1031 | 3.09879 3.64842 0.0200603 0.0017557 43704.9 4; : 1032 | 3.23242 4.45782 0.0201318 0.0017893 43614.6 5; : 1033 Minimum Test error found - save the configuration ; : 1033 | 3.57665 3.43738 0.0206178 0.00193324 42816.1 0; : 1034 | 3.26951 3.4755 0.0201231 0.00175901 43563.3 1; : 1035 | 3.0748 4.32816 0.0202002 0.00180771 43496 2; : 1036 | 3.05868 3.88772 0.0202082 0.00176323 43372.3 3; : 1037 | 3.11243 3.8552 0.0200473 0.00176925 43768.4 4; : 1038 | 2.97479 4.01382 0.020048 0.00176307 43752 5; : 1039 | 3.15714 3.85081 0.0200388 0.00176348 43774.8 6; : 1040 | 2.97124 3.72013 0.0200295 0.00176294 43795.8 7; : 1041 | 2.92938 3.63611 0.020078 0.00179099 43746.9 8; : 1042 | 3.04184 3.72584 0.0202124 0.00176555 43367.8 9; : 1043 | 3.24904,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:114955,Test,Test,114955,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,.28945 p_ph_sig2_gamma_bin_9=1; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (10415.9) to force MIGRAD to back out of this region. Error log follows.; Parameter values: Abkg=1 Asig=1 p_ph_sig2_gamma_bin_0=1 p_ph_sig2_gamma_bin_1=1 p_ph_sig2_gamma_bin_10=1 p_ph_sig2_gamma_bin_11=1 p_ph_sig2_gamma_bin_12=1 p_ph_sig2_gamma_bin_13=1 p_ph_sig2_gamma_bin_14=1 p_ph_sig2_gamma_bin_15=1 p_ph_sig2_gamma_bin_16=1 p_ph_sig2_gamma_bin_17=1 p_ph_sig2_gamma_bin_18=1 p_ph_sig2_gamma_bin_19=1 p_ph_sig2_gamma_bin_2=1 p_ph_sig2_gamma_bin_20=1 p_ph_sig2_gamma_bin_21=1 p_ph_sig2_gamma_bin_22=1 p_ph_sig2_gamma_bin_23=1 p_ph_sig2_gamma_bin_24=1 p_ph_sig2_gamma_bin_3=1 p_ph_sig2_gamma_bin_4=1 p_ph_sig2_gamma_bin_5=1 p_ph_sig2_gamma_bin_6=1 p_ph_sig2_gamma_bin_7=1 p_ph_sig2_gamma_bin_8=1 p_ph_sig2_gamma_bin_9=7.28945; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (10415.9) to force MIGRAD to back out of this region. Error log follows.; Parameter values: Abkg=0.024352 Asig=0.0100451 p_ph_sig2_gamma_bin_0=0.351536 p_ph_sig2_gamma_bin_1=0.352649 p_ph_sig2_gamma_bin_10=0.342736 p_ph_sig2_gamma_bin_11=0.36962 p_ph_sig2_gamma_bin_12=0.383863 p_ph_sig2_gamma_bin_13=0.366897 p_ph_sig2_gamma_bin_14=0.358549 p_ph_sig2_gamma_bin_15=0.358659 p_ph_sig2_gamma_bin_16=0.3674 p_ph_sig2_gamma_bin_17=0.356318 p_ph_sig2_gamma_bin_18=0.362267 p_ph_sig2_gamma_bin_19=0.340116 p_ph_sig2_gamma_bin_2=0.350595 p_ph_sig2_gamma_bin_20=0.352431 p_ph_sig2_gamma_bin_21=0.351643 p_ph_sig2_gamma_bin_22=0.35167 p_ph_sig2_gamma_bin_23=0.344542 p_ph_sig2_gamma_bin_24=0.365744 p_ph_sig2_gamma_bin_3=0.355252 p_ph_sig2_gamma_bin_4=0.34783 p_ph_sig2_gamma_bin_5=0.348683 p_ph_sig2_gamma_bin_6=0.357671 p_ph_sig2_gamma_bin_7=0.351115 p_ph_sig2_gamma_bin_8=0.342731 p_ph_sig2_gamma_bin_9=0.357348; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (10415.9) to force MIGRAD to back out of this region. Error log fol,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html:36514,log,log,36514,doc/master/rf709__BarlowBeeston_8C.html,https://root.cern,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html,2,['log'],['log']
Testability,".2f"", h1->GetMean(), h1->GetRMS()), ""l"");; l1->Draw();; ; c1->cd(2);; h0 = dynamic_cast<TH1D*>(hbiasThreshold[0]);; h0->Draw(""HIST"");; h1 = dynamic_cast<TH1D*>(hbiasThreshold[1]);; h1->SetLineColor(kRed);; h1->Draw(""HIST SAMES"");; TLegend* l2 = new TLegend(0.1, 0.75, 0.5, 0.9,; ""threshold parameter"", ""ndc"");; l2->AddEntry(h0, Form(""histogram: mean = %4.2f RMS = \; %4.2f"", h0->GetMean(), h0->GetRMS()), ""l"");; l2->AddEntry(h1, Form(""binomial : mean = %4.2f RMS = \; %4.2f"", h1->GetMean(), h1->GetRMS()), ""l"");; l2->Draw();; ; c1->cd(3);; h0 = dynamic_cast<TH1D*>(hbiasWidth[0]);; h0->Draw(""HIST"");; h1 = dynamic_cast<TH1D*>(hbiasWidth[1]);; h1->SetLineColor(kRed);; h1->Draw(""HIST SAMES"");; TLegend* l3 = new TLegend(0.1, 0.75, 0.5, 0.9, ""width parameter"", ""ndc"");; l3->AddEntry(h0, Form(""histogram: mean = %4.2f RMS = \; %4.2f"", h0->GetMean(), h0->GetRMS()), ""l"");; l3->AddEntry(h1, Form(""binomial : mean = %4.2f RMS = \; %4.2f"", h1->GetMean(), h1->GetRMS()), ""l"");; l3->Draw();; ; c1->cd(4);; hChisquared->Draw(""HIST"");; }; ; int main() {; TestBinomial();; }; BinData.h; HFitInterface.h; IntegratorOptions.h; mainint main()Definition Prototype.cxx:12; h#define h(i)Definition RSha256.hxx:106; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; TBinomialEfficiencyFitter.h; TCanvas.h; TF1.h; TFitResult.h; plotwinID h TVirtualViewer3D TVirtualGLPainter char TVirtualGLPainter plotDefinition TGWin32VirtualGLProxy.cxx:53; widthOption_t Option_t widthDefinition TGWin32VirtualXProxy.cxx:56; TGraphErrors.h; TH1.h; xminfloat xminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; TLegend.h; TObjArray.h; TPaveStats.h; TRandom3.h; Formchar * Form(const char *fmt,...)Formats a string in a circular formatting buffer.Definition TString.cxx:2489; TStyle.h; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TVirtualFitter.h; ROOT::Fit::BinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y ...Definiti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TestBinomial_8C.html:55500,Test,TestBinomial,55500,doc/master/TestBinomial_8C.html,https://root.cern,https://root.cern/doc/master/TestBinomial_8C.html,1,['Test'],['TestBinomial']
Testability,.319e-02; : --------------------------; <HEADER> Factory : Train method: BDT for Classification; : ; <HEADER> BDT : #events: (reweighted) sig: 500 bkg: 500; : #events: (unweighted) sig: 500 bkg: 500; : Training 800 Decision Trees ... patience please; : Elapsed time for training with 1000 events: 0.386 sec ; <HEADER> BDT : [dataset] : Evaluation of BDT on training sample (1000 events); : Elapsed time for evaluation of 1000 events: 0.0729 sec ; : Creating xml weight file: dataset/weights/_BDT.weights.xml; : Creating standalone class: dataset/weights/_BDT.class.C; : out.root:/dataset/Method_BDT/BDT; <HEADER> Factory : Training finished; : ; : Ranking input variables (method specific)...; <HEADER> BDT : Ranking result (top variable is best ranked); : -----------------------------------; : Rank : Variable : Variable Importance; : -----------------------------------; : 1 : y : 5.011e-01; : 2 : x : 4.989e-01; : -----------------------------------; <HEADER> Factory : === Destroy and recreate all methods via weight files for testing ===; : ; : Reading weight file: dataset/weights/_BDT.weights.xml; <HEADER> Factory : Test all methods; <HEADER> Factory : Test method: BDT for Classification performance; : ; <HEADER> BDT : [dataset] : Evaluation of BDT on testing sample (1000 events); : Elapsed time for evaluation of 1000 events: 0.0581 sec ; <HEADER> Factory : Evaluate all methods; <HEADER> Factory : Evaluate classifier: BDT; : ; <HEADER> BDT : [dataset] : Loop over test events and fill histograms with classifier response...; : ; <HEADER> TFHandler_BDT : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : x: 1.0136 0.57754 [ 0.0011208 1.9999 ]; : y: 1.4938 0.75135 [ 0.0054384 2.9981 ]; : -----------------------------------------------------------; : ; : Evaluation results ranked by best signal efficiency and purity (area); : ---------------------------------------------------------------------------------------------------------------,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMinimalClassification_8C.html:4677,test,testing,4677,doc/master/TMVAMinimalClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMinimalClassification_8C.html,1,['test'],['testing']
Testability,".3f natoms=%d\n"", i, GetElement(i)->GetName(), fZmixture[i],; 1202 fAmixture[i], fWeights[i], fNatoms[i]);; 1203 else; 1204 printf("" Element #%i : %s Z=%6.2f A=%6.2f w=%6.3f\n"", i, GetElement(i)->GetName(), fZmixture[i],; 1205 fAmixture[i], fWeights[i]);; 1206 }; 1207}; 1208 ; 1209////////////////////////////////////////////////////////////////////////////////; 1210/// Save a primitive as a C++ statement(s) on output stream ""out"".; 1211 ; 1212void TGeoMixture::SavePrimitive(std::ostream &out, Option_t * /*option*/ /*= """"*/); 1213{; 1214 if (TestBit(TGeoMaterial::kMatSavePrimitive)); 1215 return;; 1216 const char *name = GetPointerName();; 1217 out << ""// Mixture: "" << GetName() << std::endl;; 1218 out << "" nel = "" << fNelements << "";"" << std::endl;; 1219 out << "" density = "" << fDensity << "";"" << std::endl;; 1220 out << "" auto "" << name << "" = new TGeoMixture(\"""" << GetName() << ""\"", nel, density);"" << std::endl;; 1221 for (Int_t i = 0; i < fNelements; i++) {; 1222 TGeoElement *el = GetElement(i);; 1223 out << "" a = "" << fAmixture[i] << ""; z = "" << fZmixture[i] << ""; w = "" << fWeights[i] << ""; // ""; 1224 << el->GetName() << std::endl;; 1225 out << "" "" << name << ""->DefineElement("" << i << "",a,z,w);"" << std::endl;; 1226 }; 1227 out << "" "" << name << ""->SetIndex("" << GetIndex() << "");"" << std::endl;; 1228 SetBit(TGeoMaterial::kMatSavePrimitive);; 1229}; 1230 ; 1231////////////////////////////////////////////////////////////////////////////////; 1232/// Create the mixture representing the decay product of this material at a; 1233/// given time. The precision represent the minimum cumulative branching ratio for; 1234/// which decay products are still taken into account.; 1235 ; 1236TGeoMaterial *TGeoMixture::DecayMaterial(Double_t time, Double_t precision); 1237{; 1238 TObjArray *pop = new TObjArray();; 1239 FillMaterialEvolution(pop, precision);; 1240 Int_t ncomp = pop->GetEntriesFast();; 1241 if (!ncomp); 1242 return this;; 1243 TGeoElement *elem;; 1244 TGeoElementRN *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMaterial_8cxx_source.html:41841,Test,TestBit,41841,doc/master/TGeoMaterial_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoMaterial_8cxx_source.html,1,['Test'],['TestBit']
Testability,".4 */; 4282 case 504:; 4283 return ""Gateway Time-out""; /* RFC2616 Section 10.5.5 */; 4284 case 505:; 4285 return ""HTTP Version not supported""; /* RFC2616 Section 10.5.6 */; 4286 case 506:; 4287 return ""Variant Also Negotiates""; /* RFC 2295, Section 8.1 */; 4288 case 507:; 4289 return ""Insufficient Storage""; /* RFC2518 Section 10.6, RFC4918; 4290 * Section 11.5 */; 4291 case 508:; 4292 return ""Loop Detected""; /* RFC5842 Section 7.1 */; 4293 ; 4294 case 510:; 4295 return ""Not Extended""; /* RFC 2774, Section 7 */; 4296 case 511:; 4297 return ""Network Authentication Required""; /* RFC 6585, Section 6 */; 4298 ; 4299 /* Other status codes, not shown in the IANA HTTP status code; 4300 * assignment.; 4301 * E.g., ""de facto"" standards due to common use, ... */; 4302 case 418:; 4303 return ""I am a teapot""; /* RFC2324 Section 2.3.2 */; 4304 case 419:; 4305 return ""Authentication Timeout""; /* common use */; 4306 case 420:; 4307 return ""Enhance Your Calm""; /* common use */; 4308 case 440:; 4309 return ""Login Timeout""; /* common use */; 4310 case 509:; 4311 return ""Bandwidth Limit Exceeded""; /* common use */; 4312 ; 4313 default:; 4314 /* This error code is unknown. This should not happen. */; 4315 if (conn) {; 4316 mg_cry_internal(conn,; 4317 ""Unknown HTTP response code: %u"",; 4318 response_code);; 4319 }; 4320 ; 4321 /* Return at least a category according to RFC 2616 Section 10. */; 4322 if (response_code >= 100 && response_code < 200) {; 4323 /* Unknown informational status code */; 4324 return ""Information"";; 4325 }; 4326 if (response_code >= 200 && response_code < 300) {; 4327 /* Unknown success code */; 4328 return ""Success"";; 4329 }; 4330 if (response_code >= 300 && response_code < 400) {; 4331 /* Unknown redirection code */; 4332 return ""Redirection"";; 4333 }; 4334 if (response_code >= 400 && response_code < 500) {; 4335 /* Unknown request error code */; 4336 return ""Client Error"";; 4337 }; 4338 if (response_code >= 500 && response_code < 600) {; 4339 /* Unknown server er",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:128674,Log,Login,128674,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['Log'],['Login']
